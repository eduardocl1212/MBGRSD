

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 29 18:30:49 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77  0000                     
    78                           ; Version 2.05
    79                           ; Generated 20/12/2018 GMT
    80                           ; 
    81                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F45K50 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataBANK0
   114  005E52                     __pidataBANK0:
   115                           	opt callstack 0
   116                           
   117                           ;initializer for Error@F5051
   118  005E52  7E                 	db	126
   119  005E53  30                 	db	48
   120  005E54  6D                 	db	109
   121  005E55  79                 	db	121
   122  005E56  33                 	db	51
   123  005E57  5B                 	db	91
   124  005E58  5F                 	db	95
   125  005E59  70                 	db	112
   126  005E5A  7F                 	db	127
   127  005E5B  73                 	db	115
   128                           
   129                           ;initializer for _ND
   130  005E5C  000C               	dw	12
   131                           
   132                           ;initializer for _Stat
   133  005E5E  01                 	db	1
   134  0000                     _ANSELA	set	3931
   135  0000                     _ANSELE	set	3935
   136  0000                     _ANSELD	set	3934
   137  0000                     _ANSELB	set	3932
   138  0000                     _ANSELC	set	3933
   139  0000                     _PORTA	set	3968
   140  0000                     _ADCON0bits	set	4034
   141  0000                     _ADRESL	set	4035
   142  0000                     _ADRESH	set	4036
   143  0000                     _ADCON0	set	4034
   144  0000                     _TRISA	set	3986
   145  0000                     _LATA	set	3977
   146  0000                     _ADCON1	set	4033
   147  0000                     _ADCON2	set	4032
   148  0000                     _TRISE	set	3990
   149  0000                     _LATE	set	3981
   150  0000                     _TRISD	set	3989
   151  0000                     _LATD	set	3980
   152  0000                     _SSP1STATbits	set	4039
   153  0000                     _SSP1BUF	set	4041
   154  0000                     _SSP1CON1bits	set	4038
   155  0000                     _SSP1ADD	set	4040
   156  0000                     _SSP1CON1	set	4038
   157  0000                     _SSP1STAT	set	4039
   158  0000                     _INTCON2bits	set	4081
   159  0000                     _WPUB	set	3973
   160  0000                     _TRISC	set	3988
   161  0000                     _TRISB	set	3987
   162  0000                     _LATC	set	3979
   163  0000                     _LATB	set	3978
   164  0000                     _ACTCON	set	4021
   165  0000                     _OSCTUNE	set	3995
   166  0000                     _OSCCON2	set	4050
   167  0000                     _OSCCON	set	4051
   168  0000                     _LATBbits	set	3978
   169  0000                     _ADIF	set	31990
   170  0000                     _ADIE	set	31982
   171  0000                     _PEIE	set	32662
   172  0000                     _GIE	set	32663
   173                           
   174                           	psect	smallconst
   175  000800                     __psmallconst:
   176                           	opt callstack 0
   177  000800  00                 	db	0
   178  000801                     STR_1:
   179                           
   180                           ; BSR set to: 15
   181  000801  22                 	db	34
   182  000802  2A                 	db	42
   183  000803  2B                 	db	43
   184  000804  2C                 	db	44
   185  000805  3A                 	db	58	;':'
   186  000806  3B                 	db	59	;';'
   187  000807  3C                 	db	60	;'<'
   188  000808  3D                 	db	61	;'='
   189  000809  3E                 	db	62	;'>'
   190  00080A  3F                 	db	63	;'?'
   191  00080B  5B                 	db	91	;'['
   192  00080C  5D                 	db	93	;']'
   193  00080D  7C                 	db	124
   194  00080E  7F                 	db	127
   195  00080F  00                 	db	0
   196  000810                     STR_5:
   197                           
   198                           ; BSR set to: 15
   199  000810  42                 	db	66	;'B'
   200  000811  65                 	db	101	;'e'
   201  000812  65                 	db	101	;'e'
   202  000813  44                 	db	68	;'D'
   203  000814  65                 	db	101	;'e'
   204  000815  76                 	db	118	;'v'
   205  000816  2E                 	db	46
   206  000817  74                 	db	116	;'t'
   207  000818  78                 	db	120	;'x'
   208  000819  74                 	db	116	;'t'
   209  00081A  00                 	db	0
   210  0000                     
   211                           ; #config settings
   212  00081B  00                 	db	0	; dummy byte at the end
   213  0000                     
   214                           	psect	cinit
   215  005B76                     __pcinit:
   216                           	opt callstack 0
   217  005B76                     start_initialization:
   218                           	opt callstack 0
   219  005B76                     __initialization:
   220                           	opt callstack 0
   221                           
   222                           ; Initialize objects allocated to BANK0 (13 bytes)
   223                           ; load TBLPTR registers with __pidataBANK0
   224  005B76  0E52               	movlw	low __pidataBANK0
   225  005B78  6EF6               	movwf	tblptrl,c
   226  005B7A  0E5E               	movlw	high __pidataBANK0
   227  005B7C  6EF7               	movwf	tblptrh,c
   228  005B7E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   229  005B80  6EF8               	movwf	tblptru,c
   230  005B82  EE00  F0E5         	lfsr	0,__pdataBANK0
   231  005B86  EE10 F00D          	lfsr	1,13
   232  005B8A                     copy_data0:
   233  005B8A  0009               	tblrd		*+
   234  005B8C  CFF5 FFEE          	movff	tablat,postinc0
   235  005B90  50E5               	movf	postdec1,w,c
   236  005B92  50E1               	movf	fsr1l,w,c
   237  005B94  E1FA               	bnz	copy_data0
   238                           
   239                           ; Clear objects allocated to BIGRAM (558 bytes)
   240  005B96  EE01  F020         	lfsr	0,__pbssBIGRAM
   241  005B9A  EE12 F02E          	lfsr	1,558
   242  005B9E                     clear_0:
   243  005B9E  6AEE               	clrf	postinc0,c
   244  005BA0  50E5               	movf	postdec1,w,c
   245  005BA2  50E1               	movf	fsr1l,w,c
   246  005BA4  E1FC               	bnz	clear_0
   247  005BA6  50E2               	movf	fsr1h,w,c
   248  005BA8  E1FA               	bnz	clear_0
   249                           
   250                           ; Clear objects allocated to BANK1 (32 bytes)
   251  005BAA  EE01  F000         	lfsr	0,__pbssBANK1
   252  005BAE  0E20               	movlw	32
   253  005BB0                     clear_1:
   254  005BB0  6AEE               	clrf	postinc0,c
   255  005BB2  06E8               	decf	wreg,f,c
   256  005BB4  E1FD               	bnz	clear_1
   257                           
   258                           ; Clear objects allocated to BANK0 (21 bytes)
   259  005BB6  EE00  F0D0         	lfsr	0,__pbssBANK0
   260  005BBA  0E15               	movlw	21
   261  005BBC                     clear_2:
   262  005BBC  6AEE               	clrf	postinc0,c
   263  005BBE  06E8               	decf	wreg,f,c
   264  005BC0  E1FD               	bnz	clear_2
   265  005BC2                     end_of_initialization:
   266                           	opt callstack 0
   267  005BC2                     __end_of__initialization:
   268                           	opt callstack 0
   269  005BC2  0100               	movlb	0
   270  005BC4  EF67  F02E         	goto	_main	;jump to C main() function
   271                           
   272                           	psect	bssBANK0
   273  0000D0                     __pbssBANK0:
   274                           	opt callstack 0
   275  0000D0                     _volt:
   276                           	opt callstack 0
   277  0000D0                     	ds	4
   278  0000D4                     _i:
   279                           	opt callstack 0
   280  0000D4                     	ds	2
   281  0000D6                     _data:
   282                           	opt callstack 0
   283  0000D6                     	ds	2
   284  0000D8                     _out:
   285                           	opt callstack 0
   286  0000D8                     	ds	2
   287  0000DA                     _a:
   288                           	opt callstack 0
   289  0000DA                     	ds	2
   290  0000DC                     _adcin:
   291                           	opt callstack 0
   292  0000DC                     	ds	2
   293  0000DE                     _Fsid:
   294                           	opt callstack 0
   295  0000DE                     	ds	2
   296  0000E0                     ff@FatFs:
   297                           	opt callstack 0
   298  0000E0                     	ds	2
   299  0000E2                     _CardType:
   300                           	opt callstack 0
   301  0000E2                     	ds	1
   302  0000E3                     _bw:
   303                           	opt callstack 0
   304  0000E3                     	ds	2
   305                           
   306                           	psect	dataBANK0
   307  0000E5                     __pdataBANK0:
   308                           	opt callstack 0
   309  0000E5                     Error@F5051:
   310                           	opt callstack 0
   311  0000E5                     	ds	10
   312  0000EF                     _ND:
   313                           	opt callstack 0
   314  0000EF                     	ds	2
   315  0000F1                     _Stat:
   316                           	opt callstack 0
   317  0000F1                     	ds	1
   318                           
   319                           	psect	bssBANK1
   320  000100                     __pbssBANK1:
   321                           	opt callstack 0
   322  000100                     _Fil:
   323                           	opt callstack 0
   324  000100                     	ds	32
   325                           
   326                           	psect	bssBIGRAM
   327  000120                     __pbssBIGRAM:
   328                           	opt callstack 0
   329  000120                     _FatFs:
   330                           	opt callstack 0
   331  000120                     	ds	558
   332                           
   333                           	psect	cstackBANK0
   334  000060                     __pcstackBANK0:
   335                           	opt callstack 0
   336  000060                     ??_dir_sdi:
   337  000060                     find_volume@br:
   338                           	opt callstack 0
   339                           
   340                           ; 16 bytes @ 0x0
   341  000060                     	ds	4
   342  000064                     remove_chain@res:
   343                           	opt callstack 0
   344  000064                     create_chain@res:
   345                           	opt callstack 0
   346                           
   347                           ; 1 bytes @ 0x4
   348  000064                     	ds	1
   349  000065                     remove_chain@nxt:
   350                           	opt callstack 0
   351  000065                     create_chain@scl:
   352                           	opt callstack 0
   353                           
   354                           ; 4 bytes @ 0x5
   355  000065                     	ds	2
   356  000067                     dir_sdi@ic:
   357                           	opt callstack 0
   358                           
   359                           ; 2 bytes @ 0x7
   360  000067                     	ds	2
   361  000069                     create_chain@ncl:
   362                           	opt callstack 0
   363  000069                     dir_sdi@sect:
   364                           	opt callstack 0
   365                           
   366                           ; 4 bytes @ 0x9
   367  000069                     	ds	4
   368  00006D                     create_chain@cs:
   369                           	opt callstack 0
   370  00006D                     dir_sdi@clst:
   371                           	opt callstack 0
   372                           
   373                           ; 4 bytes @ 0xD
   374  00006D                     	ds	3
   375  000070                     _find_volume$728:
   376                           	opt callstack 0
   377                           
   378                           ; 4 bytes @ 0x10
   379  000070                     	ds	1
   380  000071                     dir_next@dp:
   381                           	opt callstack 0
   382  000071                     f_write@fp:
   383                           	opt callstack 0
   384  000071                     f_lseek@fp:
   385                           	opt callstack 0
   386                           
   387                           ; 2 bytes @ 0x11
   388  000071                     	ds	2
   389  000073                     dir_next@stretch:
   390                           	opt callstack 0
   391  000073                     f_write@buff:
   392                           	opt callstack 0
   393  000073                     f_lseek@ofs:
   394                           	opt callstack 0
   395                           
   396                           ; 4 bytes @ 0x13
   397  000073                     	ds	1
   398  000074                     _find_volume$729:
   399                           	opt callstack 0
   400                           
   401                           ; 2 bytes @ 0x14
   402  000074                     	ds	1
   403  000075                     ??_dir_next:
   404                           
   405                           ; 1 bytes @ 0x15
   406  000075                     	ds	1
   407  000076                     f_write@btw:
   408                           	opt callstack 0
   409  000076                     find_volume@szbfat:
   410                           	opt callstack 0
   411                           
   412                           ; 4 bytes @ 0x16
   413  000076                     	ds	1
   414  000077                     ??_f_lseek:
   415                           
   416                           ; 1 bytes @ 0x17
   417  000077                     	ds	1
   418  000078                     f_write@bw:
   419                           	opt callstack 0
   420                           
   421                           ; 2 bytes @ 0x18
   422  000078                     	ds	2
   423  00007A                     ??_f_write:
   424  00007A                     find_volume@pt:
   425                           	opt callstack 0
   426                           
   427                           ; 2 bytes @ 0x1A
   428  00007A                     	ds	2
   429  00007C                     dir_next@c:
   430                           	opt callstack 0
   431  00007C                     find_volume@sysect:
   432                           	opt callstack 0
   433                           
   434                           ; 4 bytes @ 0x1C
   435  00007C                     	ds	2
   436  00007E                     dir_next@i:
   437                           	opt callstack 0
   438                           
   439                           ; 2 bytes @ 0x1E
   440  00007E                     	ds	2
   441  000080                     find_volume@vol:
   442                           	opt callstack 0
   443  000080                     dir_next@clst:
   444                           	opt callstack 0
   445                           
   446                           ; 4 bytes @ 0x20
   447  000080                     	ds	2
   448  000082                     find_volume@nrsv:
   449                           	opt callstack 0
   450                           
   451                           ; 2 bytes @ 0x22
   452  000082                     	ds	2
   453  000084                     dir_find@c:
   454                           	opt callstack 0
   455  000084                     dir_alloc@dp:
   456                           	opt callstack 0
   457  000084                     find_volume@tsect:
   458                           	opt callstack 0
   459                           
   460                           ; 4 bytes @ 0x24
   461  000084                     	ds	1
   462  000085                     dir_find@dir:
   463                           	opt callstack 0
   464                           
   465                           ; 2 bytes @ 0x25
   466  000085                     	ds	1
   467  000086                     f_write@res:
   468                           	opt callstack 0
   469  000086                     dir_alloc@nent:
   470                           	opt callstack 0
   471                           
   472                           ; 2 bytes @ 0x26
   473  000086                     	ds	1
   474  000087                     dir_find@res:
   475                           	opt callstack 0
   476  000087                     f_write@wbuff:
   477                           	opt callstack 0
   478  000087                     f_lseek@ifptr:
   479                           	opt callstack 0
   480                           
   481                           ; 4 bytes @ 0x27
   482  000087                     	ds	1
   483  000088                     dir_alloc@n:
   484                           	opt callstack 0
   485  000088                     follow_path@dp:
   486                           	opt callstack 0
   487  000088                     find_volume@nclst:
   488                           	opt callstack 0
   489                           
   490                           ; 4 bytes @ 0x28
   491  000088                     	ds	2
   492  00008A                     dir_alloc@res:
   493                           	opt callstack 0
   494  00008A                     f_write@csect:
   495                           	opt callstack 0
   496  00008A                     follow_path@path:
   497                           	opt callstack 0
   498                           
   499                           ; 2 bytes @ 0x2A
   500  00008A                     	ds	1
   501  00008B                     f_lseek@res:
   502                           	opt callstack 0
   503  00008B                     dir_register@dp:
   504                           	opt callstack 0
   505  00008B                     f_write@cc:
   506                           	opt callstack 0
   507                           
   508                           ; 2 bytes @ 0x2B
   509  00008B                     	ds	1
   510  00008C                     find_volume@stat:
   511                           	opt callstack 0
   512  00008C                     follow_path@dir:
   513                           	opt callstack 0
   514  00008C                     f_lseek@nsect:
   515                           	opt callstack 0
   516                           
   517                           ; 4 bytes @ 0x2C
   518  00008C                     	ds	1
   519  00008D                     ??_dir_register:
   520  00008D                     find_volume@fasize:
   521                           	opt callstack 0
   522  00008D                     f_write@sect:
   523                           	opt callstack 0
   524                           
   525                           ; 4 bytes @ 0x2D
   526  00008D                     	ds	1
   527  00008E                     follow_path@ns:
   528                           	opt callstack 0
   529                           
   530                           ; 1 bytes @ 0x2E
   531  00008E                     	ds	1
   532  00008F                     dir_register@res:
   533                           	opt callstack 0
   534  00008F                     follow_path@res:
   535                           	opt callstack 0
   536                           
   537                           ; 1 bytes @ 0x2F
   538  00008F                     	ds	1
   539  000090                     f_lseek@bcs:
   540                           	opt callstack 0
   541                           
   542                           ; 4 bytes @ 0x30
   543  000090                     	ds	1
   544  000091                     find_volume@bsect:
   545                           	opt callstack 0
   546  000091                     f_write@clst:
   547                           	opt callstack 0
   548                           
   549                           ; 4 bytes @ 0x31
   550  000091                     	ds	3
   551  000094                     f_lseek@clst:
   552                           	opt callstack 0
   553                           
   554                           ; 4 bytes @ 0x34
   555  000094                     	ds	1
   556  000095                     find_volume@i:
   557                           	opt callstack 0
   558  000095                     f_write@wcnt:
   559                           	opt callstack 0
   560                           
   561                           ; 2 bytes @ 0x35
   562  000095                     	ds	2
   563  000097                     find_volume@fmt:
   564                           	opt callstack 0
   565                           
   566                           ; 1 bytes @ 0x37
   567  000097                     	ds	1
   568  000098                     find_volume@fs:
   569                           	opt callstack 0
   570                           
   571                           ; 2 bytes @ 0x38
   572  000098                     	ds	2
   573  00009A                     f_open@fp:
   574                           	opt callstack 0
   575                           
   576                           ; 2 bytes @ 0x3A
   577  00009A                     	ds	2
   578  00009C                     f_open@path:
   579                           	opt callstack 0
   580                           
   581                           ; 2 bytes @ 0x3C
   582  00009C                     	ds	2
   583  00009E                     f_open@mode:
   584                           	opt callstack 0
   585                           
   586                           ; 1 bytes @ 0x3E
   587  00009E                     	ds	1
   588  00009F                     ??_f_open:
   589                           
   590                           ; 1 bytes @ 0x3F
   591  00009F                     	ds	4
   592  0000A3                     f_open@sfn:
   593                           	opt callstack 0
   594                           
   595                           ; 12 bytes @ 0x43
   596  0000A3                     	ds	12
   597  0000AF                     f_open@cl:
   598                           	opt callstack 0
   599                           
   600                           ; 4 bytes @ 0x4F
   601  0000AF                     	ds	4
   602  0000B3                     f_open@dw:
   603                           	opt callstack 0
   604                           
   605                           ; 4 bytes @ 0x53
   606  0000B3                     	ds	4
   607  0000B7                     f_open@res:
   608                           	opt callstack 0
   609                           
   610                           ; 1 bytes @ 0x57
   611  0000B7                     	ds	1
   612  0000B8                     f_open@dir:
   613                           	opt callstack 0
   614                           
   615                           ; 2 bytes @ 0x58
   616  0000B8                     	ds	2
   617  0000BA                     f_open@dj:
   618                           	opt callstack 0
   619                           
   620                           ; 22 bytes @ 0x5A
   621  0000BA                     	ds	22
   622                           
   623                           	psect	cstackCOMRAM
   624  000001                     __pcstackCOMRAM:
   625                           	opt callstack 0
   626  000001                     ?_mem_cmp:
   627                           	opt callstack 0
   628  000001                     ?_chk_chr:
   629                           	opt callstack 0
   630  000001                     ?_get_ldnumber:
   631                           	opt callstack 0
   632  000001                     ?_interruptadc:
   633                           	opt callstack 0
   634  000001                     ?___wmul:
   635                           	opt callstack 0
   636  000001                     ?_ld_clust:
   637                           	opt callstack 0
   638  000001                     ?___lmul:
   639                           	opt callstack 0
   640  000001                     ?___lldiv:
   641                           	opt callstack 0
   642  000001                     ?___xxtofl:
   643                           	opt callstack 0
   644  000001                     disk_status@pdrv:
   645                           	opt callstack 0
   646  000001                     SPI1_Exchange8bit@data:
   647                           	opt callstack 0
   648  000001                     mem_cpy@dst:
   649                           	opt callstack 0
   650  000001                     mem_set@dst:
   651                           	opt callstack 0
   652  000001                     mem_cmp@dst:
   653                           	opt callstack 0
   654  000001                     chk_chr@str:
   655                           	opt callstack 0
   656  000001                     ld_clust@fs:
   657                           	opt callstack 0
   658  000001                     st_clust@dir:
   659                           	opt callstack 0
   660  000001                     get_ldnumber@path:
   661                           	opt callstack 0
   662  000001                     Error@a:
   663                           	opt callstack 0
   664  000001                     interruptadc@adcin:
   665                           	opt callstack 0
   666  000001                     ___wmul@multiplier:
   667                           	opt callstack 0
   668  000001                     ___lmul@multiplier:
   669                           	opt callstack 0
   670  000001                     ___lldiv@dividend:
   671                           	opt callstack 0
   672  000001                     ___xxtofl@val:
   673                           	opt callstack 0
   674                           
   675                           ; 4 bytes @ 0x0
   676  000001                     	ds	1
   677  000002                     wait_ready@tmr:
   678                           	opt callstack 0
   679  000002                     rcvr_datablock@buff:
   680                           	opt callstack 0
   681  000002                     validate@obj:
   682                           	opt callstack 0
   683                           
   684                           ; 2 bytes @ 0x1
   685  000002                     	ds	1
   686  000003                     ??_get_ldnumber:
   687  000003                     ??_Error:
   688  000003                     mem_set@val:
   689                           	opt callstack 0
   690  000003                     mem_cmp@src:
   691                           	opt callstack 0
   692  000003                     chk_chr@chr:
   693                           	opt callstack 0
   694  000003                     ld_clust@dir:
   695                           	opt callstack 0
   696  000003                     interruptadc@a:
   697                           	opt callstack 0
   698  000003                     ___wmul@multiplicand:
   699                           	opt callstack 0
   700  000003                     mem_cpy@src:
   701                           	opt callstack 0
   702  000003                     st_clust@cl:
   703                           	opt callstack 0
   704                           
   705                           ; 4 bytes @ 0x2
   706  000003                     	ds	1
   707  000004                     ??_validate:
   708  000004                     rcvr_datablock@btr:
   709                           	opt callstack 0
   710  000004                     xmit_datablock@buff:
   711                           	opt callstack 0
   712  000004                     ___send_cmd@arg:
   713                           	opt callstack 0
   714  000004                     Error@v_seg:
   715                           	opt callstack 0
   716                           
   717                           ; 10 bytes @ 0x3
   718  000004                     	ds	1
   719  000005                     ??_chk_chr:
   720  000005                     ??_ld_clust:
   721  000005                     ??_interruptadc:
   722  000005                     ??___xxtofl:
   723  000005                     mem_set@cnt:
   724                           	opt callstack 0
   725  000005                     mem_cmp@cnt:
   726                           	opt callstack 0
   727  000005                     ___wmul@product:
   728                           	opt callstack 0
   729  000005                     ___lmul@multiplicand:
   730                           	opt callstack 0
   731  000005                     ___lldiv@divisor:
   732                           	opt callstack 0
   733                           
   734                           ; 4 bytes @ 0x4
   735  000005                     	ds	1
   736  000006                     rcvr_datablock@tmr:
   737                           	opt callstack 0
   738  000006                     mem_cpy@cnt:
   739                           	opt callstack 0
   740                           
   741                           ; 2 bytes @ 0x5
   742  000006                     	ds	1
   743  000007                     ??_mem_cmp:
   744  000007                     xmit_datablock@token:
   745                           	opt callstack 0
   746  000007                     mem_set@d:
   747                           	opt callstack 0
   748  000007                     get_ldnumber@tp:
   749                           	opt callstack 0
   750                           
   751                           ; 2 bytes @ 0x6
   752  000007                     	ds	1
   753  000008                     ??_mem_cpy:
   754  000008                     rcvr_datablock@token:
   755                           	opt callstack 0
   756  000008                     ___send_cmd@res:
   757                           	opt callstack 0
   758  000008                     xmit_datablock@i:
   759                           	opt callstack 0
   760  000008                     validate@fil:
   761                           	opt callstack 0
   762                           
   763                           ; 2 bytes @ 0x7
   764  000008                     	ds	1
   765  000009                     ___send_cmd@n:
   766                           	opt callstack 0
   767  000009                     ___xxtofl@sign:
   768                           	opt callstack 0
   769  000009                     mem_cmp@d:
   770                           	opt callstack 0
   771  000009                     create_name@dp:
   772                           	opt callstack 0
   773  000009                     get_ldnumber@vol:
   774                           	opt callstack 0
   775  000009                     ___lmul@product:
   776                           	opt callstack 0
   777  000009                     ___lldiv@quotient:
   778                           	opt callstack 0
   779                           
   780                           ; 4 bytes @ 0x8
   781  000009                     	ds	1
   782  00000A                     xmit_datablock@resp:
   783                           	opt callstack 0
   784  00000A                     ___send_cmd@cmd:
   785                           	opt callstack 0
   786  00000A                     ___xxtofl@exp:
   787                           	opt callstack 0
   788  00000A                     mem_cpy@s:
   789                           	opt callstack 0
   790                           
   791                           ; 3 bytes @ 0x9
   792  00000A                     	ds	1
   793  00000B                     mem_cmp@s:
   794                           	opt callstack 0
   795  00000B                     create_name@path:
   796                           	opt callstack 0
   797  00000B                     get_ldnumber@i:
   798                           	opt callstack 0
   799  00000B                     send_cmd@arg:
   800                           	opt callstack 0
   801  00000B                     ld_clust@cl:
   802                           	opt callstack 0
   803  00000B                     ___xxtofl@arg:
   804                           	opt callstack 0
   805                           
   806                           ; 4 bytes @ 0xA
   807  00000B                     	ds	2
   808  00000D                     ??_create_name:
   809  00000D                     ?_clust2sect:
   810                           	opt callstack 0
   811  00000D                     ___lldiv@counter:
   812                           	opt callstack 0
   813  00000D                     mem_cpy@d:
   814                           	opt callstack 0
   815  00000D                     mem_cmp@r:
   816                           	opt callstack 0
   817  00000D                     clust2sect@fs:
   818                           	opt callstack 0
   819  00000D                     get_ldnumber@tt:
   820                           	opt callstack 0
   821                           
   822                           ; 2 bytes @ 0xC
   823  00000D                     	ds	2
   824  00000F                     ?___flmul:
   825                           	opt callstack 0
   826  00000F                     send_cmd@cmd:
   827                           	opt callstack 0
   828  00000F                     clust2sect@clst:
   829                           	opt callstack 0
   830  00000F                     ___flmul@b:
   831                           	opt callstack 0
   832                           
   833                           ; 4 bytes @ 0xE
   834  00000F                     	ds	1
   835  000010                     send_cmd@res:
   836                           	opt callstack 0
   837                           
   838                           ; 1 bytes @ 0xF
   839  000010                     	ds	1
   840  000011                     ??_disk_initialize:
   841  000011                     disk_ioctl@cmd:
   842                           	opt callstack 0
   843  000011                     disk_read@buff:
   844                           	opt callstack 0
   845  000011                     _create_name$624:
   846                           	opt callstack 0
   847  000011                     disk_write@buff:
   848                           	opt callstack 0
   849                           
   850                           ; 3 bytes @ 0x10
   851  000011                     	ds	1
   852  000012                     disk_initialize@pdrv:
   853                           	opt callstack 0
   854  000012                     disk_ioctl@buff:
   855                           	opt callstack 0
   856                           
   857                           ; 2 bytes @ 0x11
   858  000012                     	ds	1
   859  000013                     ??_clust2sect:
   860  000013                     create_name@si:
   861                           	opt callstack 0
   862  000013                     disk_initialize@ocr:
   863                           	opt callstack 0
   864  000013                     disk_read@sector:
   865                           	opt callstack 0
   866  000013                     ___flmul@a:
   867                           	opt callstack 0
   868                           
   869                           ; 4 bytes @ 0x12
   870  000013                     	ds	1
   871  000014                     ??_disk_ioctl:
   872  000014                     disk_write@sector:
   873                           	opt callstack 0
   874                           
   875                           ; 4 bytes @ 0x13
   876  000014                     	ds	1
   877  000015                     create_name@b:
   878                           	opt callstack 0
   879                           
   880                           ; 1 bytes @ 0x14
   881  000015                     	ds	1
   882  000016                     create_name@ni:
   883                           	opt callstack 0
   884                           
   885                           ; 2 bytes @ 0x15
   886  000016                     	ds	1
   887  000017                     ??___flmul:
   888  000017                     _disk_initialize$134:
   889                           	opt callstack 0
   890  000017                     disk_read@count:
   891                           	opt callstack 0
   892                           
   893                           ; 2 bytes @ 0x16
   894  000017                     	ds	1
   895  000018                     disk_write@count:
   896                           	opt callstack 0
   897  000018                     create_name@p:
   898                           	opt callstack 0
   899                           
   900                           ; 2 bytes @ 0x17
   901  000018                     	ds	1
   902  000019                     disk_initialize@cmd:
   903                           	opt callstack 0
   904  000019                     disk_read@pdrv:
   905                           	opt callstack 0
   906                           
   907                           ; 1 bytes @ 0x18
   908  000019                     	ds	1
   909  00001A                     ??_disk_write:
   910  00001A                     disk_initialize@ty:
   911                           	opt callstack 0
   912  00001A                     create_name@d:
   913                           	opt callstack 0
   914  00001A                     _disk_read$143:
   915                           	opt callstack 0
   916                           
   917                           ; 2 bytes @ 0x19
   918  00001A                     	ds	1
   919  00001B                     disk_write@pdrv:
   920                           	opt callstack 0
   921  00001B                     ___flmul@sign:
   922                           	opt callstack 0
   923  00001B                     disk_initialize@tmr:
   924                           	opt callstack 0
   925  00001B                     create_name@sfn:
   926                           	opt callstack 0
   927                           
   928                           ; 2 bytes @ 0x1A
   929  00001B                     	ds	1
   930  00001C                     disk_read@cmd:
   931                           	opt callstack 0
   932  00001C                     sync_window@fs:
   933                           	opt callstack 0
   934  00001C                     ___flmul@grs:
   935                           	opt callstack 0
   936                           
   937                           ; 4 bytes @ 0x1B
   938  00001C                     	ds	1
   939  00001D                     disk_initialize@n:
   940                           	opt callstack 0
   941  00001D                     create_name@i:
   942                           	opt callstack 0
   943                           
   944                           ; 2 bytes @ 0x1C
   945  00001D                     	ds	1
   946  00001E                     ??_sync_window:
   947                           
   948                           ; 1 bytes @ 0x1D
   949  00001E                     	ds	1
   950  00001F                     create_name@c:
   951                           	opt callstack 0
   952                           
   953                           ; 1 bytes @ 0x1E
   954  00001F                     	ds	1
   955  000020                     ___flmul@aexp:
   956                           	opt callstack 0
   957                           
   958                           ; 1 bytes @ 0x1F
   959  000020                     	ds	1
   960  000021                     ___flmul@bexp:
   961                           	opt callstack 0
   962  000021                     disk_ioctl@csd:
   963                           	opt callstack 0
   964                           
   965                           ; 16 bytes @ 0x20
   966  000021                     	ds	1
   967  000022                     ___flmul@prod:
   968                           	opt callstack 0
   969                           
   970                           ; 4 bytes @ 0x21
   971  000022                     	ds	4
   972  000026                     ___flmul@temp:
   973                           	opt callstack 0
   974                           
   975                           ; 2 bytes @ 0x25
   976  000026                     	ds	2
   977  000028                     ?___fldiv:
   978                           	opt callstack 0
   979  000028                     ___fldiv@b:
   980                           	opt callstack 0
   981                           
   982                           ; 4 bytes @ 0x27
   983  000028                     	ds	2
   984  00002A                     sync_window@res:
   985                           	opt callstack 0
   986                           
   987                           ; 1 bytes @ 0x29
   988  00002A                     	ds	1
   989  00002B                     sync_window@nf:
   990                           	opt callstack 0
   991                           
   992                           ; 2 bytes @ 0x2A
   993  00002B                     	ds	1
   994  00002C                     ___fldiv@a:
   995                           	opt callstack 0
   996                           
   997                           ; 4 bytes @ 0x2B
   998  00002C                     	ds	1
   999  00002D                     sync_window@wsect:
  1000                           	opt callstack 0
  1001                           
  1002                           ; 4 bytes @ 0x2C
  1003  00002D                     	ds	3
  1004  000030                     ??___fldiv:
  1005                           
  1006                           ; 1 bytes @ 0x2F
  1007  000030                     	ds	1
  1008  000031                     disk_ioctl@pdrv:
  1009                           	opt callstack 0
  1010  000031                     move_window@fs:
  1011                           	opt callstack 0
  1012                           
  1013                           ; 2 bytes @ 0x30
  1014  000031                     	ds	1
  1015  000032                     disk_ioctl@csize:
  1016                           	opt callstack 0
  1017                           
  1018                           ; 4 bytes @ 0x31
  1019  000032                     	ds	1
  1020  000033                     move_window@sector:
  1021                           	opt callstack 0
  1022                           
  1023                           ; 4 bytes @ 0x32
  1024  000033                     	ds	1
  1025  000034                     ___fldiv@rem:
  1026                           	opt callstack 0
  1027                           
  1028                           ; 4 bytes @ 0x33
  1029  000034                     	ds	2
  1030  000036                     disk_ioctl@res:
  1031                           	opt callstack 0
  1032                           
  1033                           ; 1 bytes @ 0x35
  1034  000036                     	ds	1
  1035  000037                     disk_ioctl@n:
  1036                           	opt callstack 0
  1037                           
  1038                           ; 1 bytes @ 0x36
  1039  000037                     	ds	1
  1040  000038                     ___fldiv@sign:
  1041                           	opt callstack 0
  1042  000038                     disk_ioctl@ptr:
  1043                           	opt callstack 0
  1044                           
  1045                           ; 2 bytes @ 0x37
  1046  000038                     	ds	1
  1047  000039                     ___fldiv@new_exp:
  1048                           	opt callstack 0
  1049                           
  1050                           ; 2 bytes @ 0x38
  1051  000039                     	ds	1
  1052  00003A                     sync_fs@fs:
  1053                           	opt callstack 0
  1054                           
  1055                           ; 2 bytes @ 0x39
  1056  00003A                     	ds	1
  1057  00003B                     move_window@res:
  1058                           	opt callstack 0
  1059  00003B                     ___fldiv@grs:
  1060                           	opt callstack 0
  1061                           
  1062                           ; 4 bytes @ 0x3A
  1063  00003B                     	ds	1
  1064  00003C                     ??_sync_fs:
  1065  00003C                     ?_get_fat:
  1066                           	opt callstack 0
  1067  00003C                     get_fat@fs:
  1068                           	opt callstack 0
  1069  00003C                     put_fat@fs:
  1070                           	opt callstack 0
  1071  00003C                     check_fs@fs:
  1072                           	opt callstack 0
  1073                           
  1074                           ; 2 bytes @ 0x3B
  1075  00003C                     	ds	2
  1076  00003E                     get_fat@clst:
  1077                           	opt callstack 0
  1078  00003E                     put_fat@clst:
  1079                           	opt callstack 0
  1080  00003E                     check_fs@sect:
  1081                           	opt callstack 0
  1082                           
  1083                           ; 4 bytes @ 0x3D
  1084  00003E                     	ds	1
  1085  00003F                     ___fldiv@bexp:
  1086                           	opt callstack 0
  1087                           
  1088                           ; 1 bytes @ 0x3E
  1089  00003F                     	ds	1
  1090  000040                     ___fldiv@aexp:
  1091                           	opt callstack 0
  1092                           
  1093                           ; 1 bytes @ 0x3F
  1094  000040                     	ds	2
  1095  000042                     ??_get_fat:
  1096  000042                     ??_check_fs:
  1097  000042                     put_fat@val:
  1098                           	opt callstack 0
  1099                           
  1100                           ; 4 bytes @ 0x41
  1101  000042                     	ds	2
  1102  000044                     sync_fs@res:
  1103                           	opt callstack 0
  1104                           
  1105                           ; 1 bytes @ 0x43
  1106  000044                     	ds	1
  1107  000045                     f_sync@fp:
  1108                           	opt callstack 0
  1109                           
  1110                           ; 2 bytes @ 0x44
  1111  000045                     	ds	1
  1112  000046                     ??_put_fat:
  1113  000046                     find_volume@rfs:
  1114                           	opt callstack 0
  1115                           
  1116                           ; 2 bytes @ 0x45
  1117  000046                     	ds	1
  1118  000047                     
  1119                           ; 1 bytes @ 0x46
  1120  000047                     	ds	1
  1121  000048                     find_volume@path:
  1122                           	opt callstack 0
  1123                           
  1124                           ; 2 bytes @ 0x47
  1125  000048                     	ds	2
  1126  00004A                     find_volume@wmode:
  1127                           	opt callstack 0
  1128                           
  1129                           ; 1 bytes @ 0x49
  1130  00004A                     	ds	1
  1131  00004B                     ??_find_volume:
  1132  00004B                     f_sync@res:
  1133                           	opt callstack 0
  1134  00004B                     _get_fat$374:
  1135                           	opt callstack 0
  1136                           
  1137                           ; 2 bytes @ 0x4A
  1138  00004B                     	ds	1
  1139  00004C                     f_sync@dir:
  1140                           	opt callstack 0
  1141                           
  1142                           ; 2 bytes @ 0x4B
  1143  00004C                     	ds	1
  1144  00004D                     get_fat@val:
  1145                           	opt callstack 0
  1146                           
  1147                           ; 4 bytes @ 0x4C
  1148  00004D                     	ds	1
  1149  00004E                     _put_fat$400:
  1150                           	opt callstack 0
  1151  00004E                     f_close@fp:
  1152                           	opt callstack 0
  1153                           
  1154                           ; 2 bytes @ 0x4D
  1155  00004E                     	ds	2
  1156  000050                     f_close@res:
  1157                           	opt callstack 0
  1158  000050                     _put_fat$401:
  1159                           	opt callstack 0
  1160                           
  1161                           ; 2 bytes @ 0x4F
  1162  000050                     	ds	1
  1163  000051                     get_fat@wc:
  1164                           	opt callstack 0
  1165                           
  1166                           ; 2 bytes @ 0x50
  1167  000051                     	ds	1
  1168  000052                     put_fat@bc:
  1169                           	opt callstack 0
  1170                           
  1171                           ; 2 bytes @ 0x51
  1172  000052                     	ds	1
  1173  000053                     get_fat@p:
  1174                           	opt callstack 0
  1175  000053                     f_mount@fs:
  1176                           	opt callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x52
  1179  000053                     	ds	1
  1180  000054                     put_fat@res:
  1181                           	opt callstack 0
  1182                           
  1183                           ; 1 bytes @ 0x53
  1184  000054                     	ds	1
  1185  000055                     get_fat@bc:
  1186                           	opt callstack 0
  1187  000055                     put_fat@p:
  1188                           	opt callstack 0
  1189  000055                     f_mount@path:
  1190                           	opt callstack 0
  1191                           
  1192                           ; 2 bytes @ 0x54
  1193  000055                     	ds	2
  1194  000057                     ?_create_chain:
  1195                           	opt callstack 0
  1196  000057                     f_mount@opt:
  1197                           	opt callstack 0
  1198  000057                     remove_chain@fs:
  1199                           	opt callstack 0
  1200  000057                     create_chain@fs:
  1201                           	opt callstack 0
  1202  000057                     dir_sdi@dp:
  1203                           	opt callstack 0
  1204                           
  1205                           ; 2 bytes @ 0x56
  1206  000057                     	ds	1
  1207  000058                     f_mount@res:
  1208                           	opt callstack 0
  1209                           
  1210                           ; 1 bytes @ 0x57
  1211  000058                     	ds	1
  1212  000059                     dir_sdi@idx:
  1213                           	opt callstack 0
  1214  000059                     f_mount@cfs:
  1215                           	opt callstack 0
  1216  000059                     remove_chain@clst:
  1217                           	opt callstack 0
  1218  000059                     create_chain@clst:
  1219                           	opt callstack 0
  1220                           
  1221                           ; 4 bytes @ 0x58
  1222  000059                     	ds	2
  1223  00005B                     f_mount@rp:
  1224                           	opt callstack 0
  1225                           
  1226                           ; 2 bytes @ 0x5A
  1227  00005B                     	ds	2
  1228  00005D                     ??_dir_alloc:
  1229  00005D                     ??_grabador:
  1230  00005D                     dir_find@dp:
  1231                           	opt callstack 0
  1232  00005D                     f_mount@vol:
  1233                           	opt callstack 0
  1234                           
  1235                           ; 2 bytes @ 0x5C
  1236  00005D                     	ds	2
  1237  00005F                     
  1238                           ; 1 bytes @ 0x5E
  1239  00005F                     	ds	1
  1240  000060                     
  1241                           ; 1 bytes @ 0x5F
  1242 ;;
  1243 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1244 ;;
  1245 ;; *************** function _main *****************
  1246 ;; Defined at:
  1247 ;;		line 37 in file "Main.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1261 ;;      Params:         0       0       0       0       0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1264 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1265 ;;Total ram usage:        0 bytes
  1266 ;; Hardware stack levels required when called:   15
  1267 ;; This function calls:
  1268 ;;		_Init8LEDs
  1269 ;;		_guardar
  1270 ;; This function is called by:
  1271 ;;		Startup code after reset
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text0
  1276  005CCE                     __ptext0:
  1277                           	opt callstack 0
  1278  005CCE                     _main:
  1279                           	opt callstack 16
  1280                           
  1281                           ;Main.c: 41:     Init8LEDs();
  1282                           
  1283                           ;incstack = 0
  1284  005CCE  EC0C  F02F         	call	_Init8LEDs	;wreg free
  1285                           
  1286                           ;Main.c: 43:     OSCCON = 0x53;
  1287  005CD2  0E53               	movlw	83
  1288  005CD4  6ED3               	movwf	4051,c	;volatile
  1289                           
  1290                           ;Main.c: 44:     ADCON2 = 0x94;
  1291  005CD6  0E94               	movlw	148
  1292  005CD8  6EC0               	movwf	4032,c	;volatile
  1293                           
  1294                           ;Main.c: 45:     ADCON1 = 0x00;
  1295  005CDA  0E00               	movlw	0
  1296  005CDC  6EC1               	movwf	4033,c	;volatile
  1297                           
  1298                           ;Main.c: 46:     LATA = 0x00;
  1299  005CDE  0E00               	movlw	0
  1300  005CE0  6E89               	movwf	3977,c	;volatile
  1301                           
  1302                           ;Main.c: 47:     TRISA = 0x00;
  1303  005CE2  0E00               	movlw	0
  1304  005CE4  6E92               	movwf	3986,c	;volatile
  1305                           
  1306                           ;Main.c: 48:     ANSELA = 0x00;
  1307  005CE6  0E00               	movlw	0
  1308  005CE8  010F               	movlb	15	; () banked
  1309  005CEA  6F5B               	movwf	91,b	;volatile
  1310                           
  1311                           ; BSR set to: 15
  1312                           ;Main.c: 49:     TRISC = 0x04;
  1313  005CEC  0E04               	movlw	4
  1314  005CEE  6E94               	movwf	3988,c	;volatile
  1315                           
  1316                           ; BSR set to: 15
  1317                           ;Main.c: 50:     ANSELC = 0x04;
  1318  005CF0  0E04               	movlw	4
  1319  005CF2  6F5D               	movwf	93,b	;volatile
  1320                           
  1321                           ; BSR set to: 15
  1322                           ;Main.c: 51:     ADCON0 = 0x39;
  1323  005CF4  0E39               	movlw	57
  1324  005CF6  6EC2               	movwf	4034,c	;volatile
  1325                           
  1326                           ; BSR set to: 15
  1327                           ;Main.c: 52:     GIE = 1;
  1328  005CF8  8EF2               	bsf	4082,7,c	;volatile
  1329                           
  1330                           ; BSR set to: 15
  1331                           ;Main.c: 53:     PEIE = 1;
  1332  005CFA  8CF2               	bsf	4082,6,c	;volatile
  1333                           
  1334                           ; BSR set to: 15
  1335                           ;Main.c: 54:     ADIE = 1;
  1336  005CFC  8C9D               	bsf	3997,6,c	;volatile
  1337  005CFE                     l7120:
  1338                           
  1339                           ;Main.c: 57:         guardar();
  1340  005CFE  EC6E  F02A         	call	_guardar	;wreg free
  1341  005D02  D7FD               	goto	l7120
  1342  005D04                     __end_of_main:
  1343                           	opt callstack 0
  1344                           
  1345 ;; *************** function _guardar *****************
  1346 ;; Defined at:
  1347 ;;		line 111 in file "Main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1364 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:   14
  1368 ;; This function calls:
  1369 ;;		_Error
  1370 ;;		_SYSTEM_Initialize
  1371 ;;		_f_close
  1372 ;;		_f_lseek
  1373 ;;		_f_mount
  1374 ;;		_f_open
  1375 ;;		_grabador
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text1
  1382  0054DC                     __ptext1:
  1383                           	opt callstack 0
  1384  0054DC                     _guardar:
  1385                           	opt callstack 16
  1386                           
  1387                           ;Main.c: 112:     SYSTEM_Initialize();
  1388                           
  1389                           ;incstack = 0
  1390  0054DC  EC1B  F02F         	call	_SYSTEM_Initialize	;wreg free
  1391                           
  1392                           ;Main.c: 113:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1393  0054E0  0E20               	movlw	low _FatFs
  1394  0054E2  6E53               	movwf	f_mount@fs,c
  1395  0054E4  0E01               	movlw	high _FatFs
  1396  0054E6  6E54               	movwf	f_mount@fs+1,c
  1397  0054E8  0E1A               	movlw	low (STR_5+10)
  1398  0054EA  6E55               	movwf	f_mount@path,c
  1399  0054EC  0E08               	movlw	high (STR_5+10)
  1400  0054EE  6E56               	movwf	f_mount@path+1,c
  1401  0054F0  0E01               	movlw	1
  1402  0054F2  6E57               	movwf	f_mount@opt,c
  1403  0054F4  EC2F  F02B         	call	_f_mount	;wreg free
  1404  0054F8  0900               	iorlw	0
  1405  0054FA  B4D8               	btfsc	status,2,c
  1406  0054FC  D00F               	goto	u9660
  1407  0054FE                     u9650:
  1408                           
  1409                           ;Main.c: 115:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1410  0054FE  0E20               	movlw	low _FatFs
  1411  005500  6E53               	movwf	f_mount@fs,c
  1412  005502  0E01               	movlw	high _FatFs
  1413  005504  6E54               	movwf	f_mount@fs+1,c
  1414  005506  0E1A               	movlw	low (STR_5+10)
  1415  005508  6E55               	movwf	f_mount@path,c
  1416  00550A  0E08               	movlw	high (STR_5+10)
  1417  00550C  6E56               	movwf	f_mount@path+1,c
  1418  00550E  0E01               	movlw	1
  1419  005510  6E57               	movwf	f_mount@opt,c
  1420  005512  EC2F  F02B         	call	_f_mount	;wreg free
  1421  005516  0900               	iorlw	0
  1422  005518  A4D8               	btfss	status,2,c
  1423  00551A  D7F1               	goto	u9650
  1424  00551C                     u9660:
  1425                           
  1426                           ;Main.c: 120:     Error(1);
  1427  00551C  0E00               	movlw	0
  1428  00551E  6E02               	movwf	Error@a+1,c
  1429  005520  0E01               	movlw	1
  1430  005522  6E01               	movwf	Error@a,c
  1431  005524  EC09  F02A         	call	_Error	;wreg free
  1432                           
  1433                           ;Main.c: 123:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1434  005528  0E00               	movlw	low _Fil
  1435  00552A  0100               	movlb	0	; () banked
  1436  00552C  6F9A               	movwf	f_open@fp& (0+255),b
  1437  00552E  0E01               	movlw	high _Fil
  1438  005530  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1439  005532  0E10               	movlw	low STR_5
  1440  005534  6F9C               	movwf	f_open@path& (0+255),b
  1441  005536  0E08               	movlw	high STR_5
  1442  005538  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1443  00553A  0E13               	movlw	19
  1444  00553C  6F9E               	movwf	f_open@mode& (0+255),b
  1445  00553E  ECE3  F017         	call	_f_open	;wreg free
  1446  005542  0900               	iorlw	0
  1447  005544  A4D8               	btfss	status,2,c
  1448  005546  D027               	goto	l6982
  1449                           
  1450                           ;Main.c: 126:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD
      +                          ;
  1451  005548  0101               	movlb	1	; () banked
  1452  00554A  510A               	movf	(_Fil+10)& (0+255),w,b
  1453  00554C  110B               	iorwf	(_Fil+11)& (0+255),w,b
  1454  00554E  110C               	iorwf	(_Fil+12)& (0+255),w,b
  1455  005550  110D               	iorwf	(_Fil+13)& (0+255),w,b
  1456  005552  B4D8               	btfsc	status,2,c
  1457  005554  D011               	goto	l6978
  1458                           
  1459                           ; BSR set to: 1
  1460  005556  0E00               	movlw	low _Fil
  1461  005558  0100               	movlb	0	; () banked
  1462  00555A  6F71               	movwf	f_lseek@fp& (0+255),b
  1463  00555C  0E01               	movlw	high _Fil
  1464  00555E  6F72               	movwf	(f_lseek@fp+1)& (0+255),b
  1465  005560  C10A  F073         	movff	_Fil+10,f_lseek@ofs
  1466  005564  C10B  F074         	movff	_Fil+11,f_lseek@ofs+1
  1467  005568  C10C  F075         	movff	_Fil+12,f_lseek@ofs+2
  1468  00556C  C10D  F076         	movff	_Fil+13,f_lseek@ofs+3
  1469  005570  ECA4  F00C         	call	_f_lseek	;wreg free
  1470  005574  0900               	iorlw	0
  1471  005576  B4D8               	btfsc	status,2,c
  1472  005578                     l6978:
  1473                           
  1474                           ;Main.c: 128:                 grabador();
  1475  005578  EC78  F026         	call	_grabador	;wreg free
  1476                           
  1477                           ;Main.c: 129:                 endSD: f_close(&Fil);
  1478  00557C  0E00               	movlw	low _Fil
  1479  00557E  6E4E               	movwf	f_close@fp,c
  1480  005580  0E01               	movlw	high _Fil
  1481  005582  6E4F               	movwf	f_close@fp+1,c
  1482  005584  EC4A  F02E         	call	_f_close	;wreg free
  1483                           
  1484                           ;Main.c: 130:                 Error(55);
  1485  005588  0E00               	movlw	0
  1486  00558A  6E02               	movwf	Error@a+1,c
  1487  00558C  0E37               	movlw	55
  1488  00558E  6E01               	movwf	Error@a,c
  1489  005590  EC09  F02A         	call	_Error	;wreg free
  1490                           
  1491                           ;Main.c: 131:  }
  1492  005594  0012               	return	
  1493  005596                     l6982:
  1494                           
  1495                           ;Main.c: 133:         Error(0);
  1496  005596  0E00               	movlw	0
  1497  005598  6E02               	movwf	Error@a+1,c
  1498  00559A  0E00               	movlw	0
  1499  00559C  6E01               	movwf	Error@a,c
  1500  00559E  EC09  F02A         	call	_Error	;wreg free
  1501  0055A2  0012               	return		;funcret
  1502  0055A4                     __end_of_guardar:
  1503                           	opt callstack 0
  1504                           
  1505 ;; *************** function _grabador *****************
  1506 ;; Defined at:
  1507 ;;		line 83 in file "Main.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1521 ;;      Params:         0       0       0       0       0       0       0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1523 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1524 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1525 ;;Total ram usage:        3 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:   11
  1528 ;; This function calls:
  1529 ;;		___fldiv
  1530 ;;		___flmul
  1531 ;;		___xxtofl
  1532 ;;		_f_write
  1533 ;;		_interruptadc
  1534 ;; This function is called by:
  1535 ;;		_guardar
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text2
  1540  004CF0                     __ptext2:
  1541                           	opt callstack 0
  1542  004CF0                     _grabador:
  1543                           	opt callstack 18
  1544  004CF0                     l888:
  1545                           
  1546                           ;Main.c: 86:         i++;
  1547  004CF0  0100               	movlb	0	; () banked
  1548  004CF2  4BD4               	infsnz	_i& (0+255),f,b
  1549  004CF4  2BD5               	incf	(_i+1)& (0+255),f,b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;Main.c: 87:         ADCON0bits.GO=1;
  1553  004CF6  82C2               	bsf	4034,1,c	;volatile
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;Main.c: 88:         adcin = interruptadc(adcin, i);
  1557  004CF8  C0DC  F001         	movff	_adcin,interruptadc@adcin
  1558  004CFC  C0DD  F002         	movff	_adcin+1,interruptadc@adcin+1
  1559  004D00  C0D4  F003         	movff	_i,interruptadc@a
  1560  004D04  C0D5  F004         	movff	_i+1,interruptadc@a+1
  1561  004D08  ECAD  F02E         	call	_interruptadc	;wreg free
  1562  004D0C  C001  F0DC         	movff	?_interruptadc,_adcin
  1563  004D10  C002  F0DD         	movff	?_interruptadc+1,_adcin+1
  1564                           
  1565                           ;Main.c: 89:         PORTA = adcin/4;
  1566  004D14  C0DC  F05D         	movff	_adcin,??_grabador
  1567  004D18  C0DD  F05E         	movff	_adcin+1,??_grabador+1
  1568  004D1C  90D8               	bcf	status,0,c
  1569  004D1E  325E               	rrcf	??_grabador+1,f,c
  1570  004D20  325D               	rrcf	??_grabador,f,c
  1571  004D22  90D8               	bcf	status,0,c
  1572  004D24  325E               	rrcf	??_grabador+1,f,c
  1573  004D26  325D               	rrcf	??_grabador,f,c
  1574  004D28  505D               	movf	??_grabador,w,c
  1575  004D2A  6E80               	movwf	3968,c	;volatile
  1576                           
  1577                           ;Main.c: 90:         volt = (adcin*5.0)/1023.0;
  1578  004D2C  0E00               	movlw	0
  1579  004D2E  6E13               	movwf	___flmul@a,c
  1580  004D30  0E00               	movlw	0
  1581  004D32  6E14               	movwf	___flmul@a+1,c
  1582  004D34  0EA0               	movlw	160
  1583  004D36  6E15               	movwf	___flmul@a+2,c
  1584  004D38  0E40               	movlw	64
  1585  004D3A  6E16               	movwf	___flmul@a+3,c
  1586  004D3C  C0DC  F001         	movff	_adcin,___xxtofl@val
  1587  004D40  C0DD  F002         	movff	_adcin+1,___xxtofl@val+1
  1588  004D44  6A03               	clrf	___xxtofl@val+2,c
  1589  004D46  6A04               	clrf	___xxtofl@val+3,c
  1590  004D48  0E00               	movlw	0
  1591  004D4A  EC47  F025         	call	___xxtofl
  1592  004D4E  C001  F00F         	movff	?___xxtofl,___flmul@b
  1593  004D52  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  1594  004D56  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  1595  004D5A  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  1596  004D5E  ECAE  F019         	call	___flmul	;wreg free
  1597  004D62  C00F  F028         	movff	?___flmul,___fldiv@b
  1598  004D66  C010  F029         	movff	?___flmul+1,___fldiv@b+1
  1599  004D6A  C011  F02A         	movff	?___flmul+2,___fldiv@b+2
  1600  004D6E  C012  F02B         	movff	?___flmul+3,___fldiv@b+3
  1601  004D72  0E00               	movlw	0
  1602  004D74  6E2C               	movwf	___fldiv@a,c
  1603  004D76  0EC0               	movlw	192
  1604  004D78  6E2D               	movwf	___fldiv@a+1,c
  1605  004D7A  0E7F               	movlw	127
  1606  004D7C  6E2E               	movwf	___fldiv@a+2,c
  1607  004D7E  0E44               	movlw	68
  1608  004D80  6E2F               	movwf	___fldiv@a+3,c
  1609  004D82  EC7B  F01F         	call	___fldiv	;wreg free
  1610  004D86  C028  F0D0         	movff	?___fldiv,_volt
  1611  004D8A  C029  F0D1         	movff	?___fldiv+1,_volt+1
  1612  004D8E  C02A  F0D2         	movff	?___fldiv+2,_volt+2
  1613  004D92  C02B  F0D3         	movff	?___fldiv+3,_volt+3
  1614                           
  1615                           ;Main.c: 91:         ND = (char) adcin;
  1616  004D96  C0DC  F0EF         	movff	_adcin,_ND
  1617  004D9A  0100               	movlb	0	; () banked
  1618  004D9C  6BF0               	clrf	(_ND+1)& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;Main.c: 92:         f_write(&Fil, ND , 2 , &bw);
  1622  004D9E  0E00               	movlw	low _Fil
  1623  004DA0  6F71               	movwf	f_write@fp& (0+255),b
  1624  004DA2  0E01               	movlw	high _Fil
  1625  004DA4  6F72               	movwf	(f_write@fp+1)& (0+255),b
  1626  004DA6  C0EF  F05D         	movff	_ND,??_grabador
  1627  004DAA  C0F0  F05E         	movff	_ND+1,??_grabador+1
  1628  004DAE  6A5F               	clrf	(??_grabador+2)& (0+255),c
  1629  004DB0  BE5E               	btfsc	(??_grabador+1)& (0+255),7,c
  1630  004DB2  685F               	setf	(??_grabador+2)& (0+255),c
  1631  004DB4  C05D  F073         	movff	??_grabador,f_write@buff
  1632  004DB8  C05E  F074         	movff	??_grabador+1,f_write@buff+1
  1633  004DBC  C05F  F075         	movff	??_grabador+2,f_write@buff+2
  1634  004DC0  0E00               	movlw	0
  1635  004DC2  6F77               	movwf	(f_write@btw+1)& (0+255),b
  1636  004DC4  0E02               	movlw	2
  1637  004DC6  6F76               	movwf	f_write@btw& (0+255),b
  1638  004DC8  0EE3               	movlw	low _bw
  1639  004DCA  6F78               	movwf	f_write@bw& (0+255),b
  1640  004DCC  0E00               	movlw	high _bw
  1641  004DCE  6F79               	movwf	(f_write@bw+1)& (0+255),b
  1642  004DD0  ECE5  F008         	call	_f_write	;wreg free
  1643                           
  1644                           ;Main.c: 93:         }while(i!=1000);
  1645  004DD4  0EE8               	movlw	232
  1646  004DD6  0100               	movlb	0	; () banked
  1647  004DD8  19D4               	xorwf	_i& (0+255),w,b
  1648  004DDA  E18A               	bnz	l888
  1649  004DDC  0E03               	movlw	3
  1650  004DDE  19D5               	xorwf	(_i+1)& (0+255),w,b
  1651  004DE0  B4D8               	btfsc	status,2,c
  1652  004DE2  0012               	return	
  1653  004DE4  D785               	goto	_grabador
  1654  004DE6                     __end_of_grabador:
  1655                           	opt callstack 0
  1656                           
  1657 ;; *************** function _interruptadc *****************
  1658 ;; Defined at:
  1659 ;;		line 62 in file "Main.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  adcin           2    0[COMRAM] int 
  1662 ;;  a               2    2[COMRAM] int 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  2    0[COMRAM] int 
  1667 ;; Registers used:
  1668 ;;		wreg, status,2, status,0
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1674 ;;      Params:         4       0       0       0       0       0       0       0       0
  1675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1676 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1677 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1678 ;;Total ram usage:        6 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_grabador
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text3
  1688  005D5A                     __ptext3:
  1689                           	opt callstack 0
  1690  005D5A                     _interruptadc:
  1691                           	opt callstack 28
  1692                           
  1693                           ;Main.c: 63:     if(ADIF==1) {
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;incstack = 0
  1697  005D5A  AC9E               	btfss	3998,6,c	;volatile
  1698  005D5C  D00A               	goto	l6294
  1699                           
  1700                           ;Main.c: 64:         ADIE=0;
  1701  005D5E  9C9D               	bcf	3997,6,c	;volatile
  1702                           
  1703                           ;Main.c: 65:         adcin = (ADRESH<<8)+ADRESL;
  1704  005D60  50C4               	movf	4036,w,c	;volatile
  1705  005D62  6E06               	movwf	(??_interruptadc+1)& (0+255),c
  1706  005D64  6A05               	clrf	??_interruptadc& (0+255),c
  1707  005D66  50C3               	movf	4035,w,c	;volatile
  1708  005D68  2405               	addwf	??_interruptadc,w,c
  1709  005D6A  6E01               	movwf	interruptadc@adcin,c
  1710  005D6C  0E00               	movlw	0
  1711  005D6E  2006               	addwfc	??_interruptadc+1,w,c
  1712  005D70  6E02               	movwf	interruptadc@adcin+1,c
  1713  005D72                     l6294:
  1714                           
  1715                           ;Main.c: 67:     ADIE=1;
  1716  005D72  8C9D               	bsf	3997,6,c	;volatile
  1717                           
  1718                           ;Main.c: 68:     ADIF=0;
  1719  005D74  9C9E               	bcf	3998,6,c	;volatile
  1720                           
  1721                           ;Main.c: 70:     return adcin;
  1722  005D76  C001  F001         	movff	interruptadc@adcin,?_interruptadc
  1723  005D7A  C002  F002         	movff	interruptadc@adcin+1,?_interruptadc+1
  1724  005D7E  0012               	return		;funcret
  1725  005D80                     __end_of_interruptadc:
  1726                           	opt callstack 0
  1727                           
  1728 ;; *************** function _f_write *****************
  1729 ;; Defined at:
  1730 ;;		line 2691 in file "ff.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  fp              2   17[BANK0 ] PTR struct .
  1733 ;;		 -> Fil(32), 
  1734 ;;  buff            3   19[BANK0 ] PTR const void 
  1735 ;;		 -> ROM(32767), 
  1736 ;;  btw             2   22[BANK0 ] unsigned short 
  1737 ;;  bw              2   24[BANK0 ] PTR unsigned short 
  1738 ;;		 -> bw(2), 
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  clst            4   49[BANK0 ] unsigned long 
  1741 ;;  sect            4   45[BANK0 ] unsigned long 
  1742 ;;  wbuff           3   39[BANK0 ] PTR const unsigned char 
  1743 ;;		 -> ROM(32767), 
  1744 ;;  wcnt            2   53[BANK0 ] unsigned short 
  1745 ;;  cc              2   43[BANK0 ] unsigned short 
  1746 ;;  csect           1   42[BANK0 ] unsigned char 
  1747 ;;  res             1   38[BANK0 ] enum E93
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      enum E93
  1750 ;; Registers used:
  1751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1757 ;;      Params:         0       9       0       0       0       0       0       0       0
  1758 ;;      Locals:         0      17       0       0       0       0       0       0       0
  1759 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1760 ;;      Totals:         0      38       0       0       0       0       0       0       0
  1761 ;;Total ram usage:       38 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:   10
  1764 ;; This function calls:
  1765 ;;		_clust2sect
  1766 ;;		_create_chain
  1767 ;;		_disk_write
  1768 ;;		_mem_cpy
  1769 ;;		_move_window
  1770 ;;		_sync_window
  1771 ;;		_validate
  1772 ;; This function is called by:
  1773 ;;		_grabador
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text4
  1778  0011CA                     __ptext4:
  1779                           	opt callstack 0
  1780  0011CA                     _f_write:
  1781                           	opt callstack 18
  1782                           
  1783                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1784                           
  1785                           ;incstack = 0
  1786  0011CA  C073  F087         	movff	f_write@buff,f_write@wbuff
  1787  0011CE  C074  F088         	movff	f_write@buff+1,f_write@wbuff+1
  1788  0011D2  C075  F089         	movff	f_write@buff+2,f_write@wbuff+2
  1789                           
  1790                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1791  0011D6  C078  FFD9         	movff	f_write@bw,fsr2l
  1792  0011DA  C079  FFDA         	movff	f_write@bw+1,fsr2h
  1793  0011DE  0E00               	movlw	0
  1794  0011E0  6EDE               	movwf	postinc2,c
  1795  0011E2  0E00               	movlw	0
  1796  0011E4  6EDD               	movwf	postdec2,c
  1797                           
  1798                           ;ff.c: 2707:  res = validate(fp);
  1799  0011E6  C071  F002         	movff	f_write@fp,validate@obj
  1800  0011EA  C072  F003         	movff	f_write@fp+1,validate@obj+1
  1801  0011EE  ECDA  F02B         	call	_validate	;wreg free
  1802  0011F2  0100               	movlb	0	; () banked
  1803  0011F4  6F86               	movwf	f_write@res& (0+255),b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1807  0011F6  5186               	movf	f_write@res& (0+255),w,b
  1808  0011F8  A4D8               	btfss	status,2,c
  1809  0011FA  0012               	return	
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;ff.c: 2709:  if (fp->err)
  1813  0011FC  EE20 F005          	lfsr	2,5
  1814  001200  5171               	movf	f_write@fp& (0+255),w,b
  1815  001202  26D9               	addwf	fsr2l,f,c
  1816  001204  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1817  001206  22DA               	addwfc	fsr2h,f,c
  1818  001208  50DF               	movf	indf2,w,c
  1819  00120A  A4D8               	btfss	status,2,c
  1820  00120C  0012               	return	
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1824  00120E  EE20 F004          	lfsr	2,4
  1825  001212  5171               	movf	f_write@fp& (0+255),w,b
  1826  001214  26D9               	addwf	fsr2l,f,c
  1827  001216  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1828  001218  22DA               	addwfc	fsr2h,f,c
  1829  00121A  A2DF               	btfss	indf2,1,c
  1830  00121C  0012               	return	
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1834  00121E  EE20 F006          	lfsr	2,6
  1835  001222  5171               	movf	f_write@fp& (0+255),w,b
  1836  001224  26D9               	addwf	fsr2l,f,c
  1837  001226  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1838  001228  22DA               	addwfc	fsr2h,f,c
  1839  00122A  EE10 F006          	lfsr	1,6
  1840  00122E  5171               	movf	f_write@fp& (0+255),w,b
  1841  001230  26E1               	addwf	fsr1l,f,c
  1842  001232  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1843  001234  22E2               	addwfc	fsr1h,f,c
  1844  001236  CFE6 F07E          	movff	postinc1,??_f_write+4
  1845  00123A  CFE6 F07F          	movff	postinc1,??_f_write+5
  1846  00123E  CFE6 F080          	movff	postinc1,??_f_write+6
  1847  001242  CFE6 F081          	movff	postinc1,??_f_write+7
  1848  001246  5176               	movf	f_write@btw& (0+255),w,b
  1849  001248  257E               	addwf	(??_f_write+4)& (0+255),w,b
  1850  00124A  6F82               	movwf	(??_f_write+8)& (0+255),b
  1851  00124C  5177               	movf	(f_write@btw+1)& (0+255),w,b
  1852  00124E  217F               	addwfc	(??_f_write+5)& (0+255),w,b
  1853  001250  6F83               	movwf	(??_f_write+9)& (0+255),b
  1854  001252  0E00               	movlw	0
  1855  001254  2180               	addwfc	(??_f_write+6)& (0+255),w,b
  1856  001256  6F84               	movwf	(??_f_write+10)& (0+255),b
  1857  001258  0E00               	movlw	0
  1858  00125A  2181               	addwfc	(??_f_write+7)& (0+255),w,b
  1859  00125C  6F85               	movwf	(??_f_write+11)& (0+255),b
  1860  00125E  50DE               	movf	postinc2,w,c
  1861  001260  5D82               	subwf	(??_f_write+8)& (0+255),w,b
  1862  001262  50DE               	movf	postinc2,w,c
  1863  001264  5983               	subwfb	(??_f_write+9)& (0+255),w,b
  1864  001266  50DE               	movf	postinc2,w,c
  1865  001268  5984               	subwfb	(??_f_write+10)& (0+255),w,b
  1866  00126A  50DE               	movf	postinc2,w,c
  1867  00126C  5985               	subwfb	(??_f_write+11)& (0+255),w,b
  1868  00126E  B0D8               	btfsc	status,0,c
  1869  001270  D334               	goto	l6238
  1870                           
  1871                           ; BSR set to: 0
  1872  001272  0E00               	movlw	0
  1873  001274  6F77               	movwf	(f_write@btw+1)& (0+255),b
  1874  001276  0E00               	movlw	0
  1875  001278  6F76               	movwf	f_write@btw& (0+255),b
  1876  00127A  D32F               	goto	l6238
  1877  00127C                     l6130:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1881  00127C  EE20 F006          	lfsr	2,6
  1882  001280  5171               	movf	f_write@fp& (0+255),w,b
  1883  001282  26D9               	addwf	fsr2l,f,c
  1884  001284  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1885  001286  22DA               	addwfc	fsr2h,f,c
  1886  001288  0EFF               	movlw	255
  1887  00128A  14DE               	andwf	postinc2,w,c
  1888  00128C  6F7A               	movwf	??_f_write& (0+255),b
  1889  00128E  0E01               	movlw	1
  1890  001290  14DE               	andwf	postinc2,w,c
  1891  001292  6F7B               	movwf	(??_f_write+1)& (0+255),b
  1892  001294  0E00               	movlw	0
  1893  001296  14DE               	andwf	postinc2,w,c
  1894  001298  6F7C               	movwf	(??_f_write+2)& (0+255),b
  1895  00129A  0E00               	movlw	0
  1896  00129C  14DE               	andwf	postinc2,w,c
  1897  00129E  6F7D               	movwf	(??_f_write+3)& (0+255),b
  1898  0012A0  517A               	movf	??_f_write& (0+255),w,b
  1899  0012A2  117B               	iorwf	(??_f_write+1)& (0+255),w,b
  1900  0012A4  117C               	iorwf	(??_f_write+2)& (0+255),w,b
  1901  0012A6  117D               	iorwf	(??_f_write+3)& (0+255),w,b
  1902  0012A8  A4D8               	btfss	status,2,c
  1903  0012AA  D26F               	goto	l6214
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1907  0012AC  EE20 F006          	lfsr	2,6
  1908  0012B0  5171               	movf	f_write@fp& (0+255),w,b
  1909  0012B2  26D9               	addwf	fsr2l,f,c
  1910  0012B4  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1911  0012B6  22DA               	addwfc	fsr2h,f,c
  1912  0012B8  CFDE F07A          	movff	postinc2,??_f_write
  1913  0012BC  CFDE F07B          	movff	postinc2,??_f_write+1
  1914  0012C0  CFDE F07C          	movff	postinc2,??_f_write+2
  1915  0012C4  CFDE F07D          	movff	postinc2,??_f_write+3
  1916  0012C8  0E0A               	movlw	10
  1917  0012CA  D005               	goto	u8280
  1918  0012CC                     u8285:
  1919  0012CC  90D8               	bcf	status,0,c
  1920  0012CE  337D               	rrcf	(??_f_write+3)& (0+255),f,b
  1921  0012D0  337C               	rrcf	(??_f_write+2)& (0+255),f,b
  1922  0012D2  337B               	rrcf	(??_f_write+1)& (0+255),f,b
  1923  0012D4  337A               	rrcf	??_f_write& (0+255),f,b
  1924  0012D6                     u8280:
  1925  0012D6  2EE8               	decfsz	wreg,f,c
  1926  0012D8  D7F9               	goto	u8285
  1927  0012DA  C071  FFD9         	movff	f_write@fp,fsr2l
  1928  0012DE  C072  FFDA         	movff	f_write@fp+1,fsr2h
  1929  0012E2  EE10 F002          	lfsr	1,2
  1930  0012E6  50DE               	movf	postinc2,w,c
  1931  0012E8  26E1               	addwf	fsr1l,f,c
  1932  0012EA  50DD               	movf	postdec2,w,c
  1933  0012EC  22E2               	addwfc	fsr1h,f,c
  1934  0012EE  50E7               	movf	indf1,w,c
  1935  0012F0  6F7E               	movwf	(??_f_write+4)& (0+255),b
  1936  0012F2  057E               	decf	(??_f_write+4)& (0+255),w,b
  1937  0012F4  157A               	andwf	??_f_write& (0+255),w,b
  1938  0012F6  6F8A               	movwf	f_write@csect& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;ff.c: 2719:    if (!csect) {
  1942  0012F8  518A               	movf	f_write@csect& (0+255),w,b
  1943  0012FA  A4D8               	btfss	status,2,c
  1944  0012FC  D0A3               	goto	l6166
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1948  0012FE  EE20 F006          	lfsr	2,6
  1949  001302  5171               	movf	f_write@fp& (0+255),w,b
  1950  001304  26D9               	addwf	fsr2l,f,c
  1951  001306  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1952  001308  22DA               	addwfc	fsr2h,f,c
  1953  00130A  50DE               	movf	postinc2,w,c
  1954  00130C  10DE               	iorwf	postinc2,w,c
  1955  00130E  10DE               	iorwf	postinc2,w,c
  1956  001310  10DE               	iorwf	postinc2,w,c
  1957  001312  A4D8               	btfss	status,2,c
  1958  001314  D027               	goto	l6144
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;ff.c: 2721:      clst = fp->sclust;
  1962  001316  EE20 F00E          	lfsr	2,14
  1963  00131A  5171               	movf	f_write@fp& (0+255),w,b
  1964  00131C  26D9               	addwf	fsr2l,f,c
  1965  00131E  5172               	movf	(f_write@fp+1)& (0+255),w,b
  1966  001320  22DA               	addwfc	fsr2h,f,c
  1967  001322  CFDE F091          	movff	postinc2,f_write@clst
  1968  001326  CFDE F092          	movff	postinc2,f_write@clst+1
  1969  00132A  CFDE F093          	movff	postinc2,f_write@clst+2
  1970  00132E  CFDE F094          	movff	postinc2,f_write@clst+3
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;ff.c: 2722:      if (clst == 0)
  1974  001332  5191               	movf	f_write@clst& (0+255),w,b
  1975  001334  1192               	iorwf	(f_write@clst+1)& (0+255),w,b
  1976  001336  1193               	iorwf	(f_write@clst+2)& (0+255),w,b
  1977  001338  1194               	iorwf	(f_write@clst+3)& (0+255),w,b
  1978  00133A  A4D8               	btfss	status,2,c
  1979  00133C  D033               	goto	l6146
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1983  00133E  C071  FFD9         	movff	f_write@fp,fsr2l
  1984  001342  C072  FFDA         	movff	f_write@fp+1,fsr2h
  1985  001346  CFDE F057          	movff	postinc2,create_chain@fs
  1986  00134A  CFDD F058          	movff	postdec2,create_chain@fs+1
  1987  00134E  0E00               	movlw	0
  1988  001350  6E59               	movwf	create_chain@clst,c
  1989  001352  0E00               	movlw	0
  1990  001354  6E5A               	movwf	create_chain@clst+1,c
  1991  001356  0E00               	movlw	0
  1992  001358  6E5B               	movwf	create_chain@clst+2,c
  1993  00135A  0E00               	movlw	0
  1994  00135C  6E5C               	movwf	create_chain@clst+3,c
  1995  00135E  EC57  F01B         	call	_create_chain	;wreg free
  1996  001362  D018               	goto	L1
  1997  001364                     l6144:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  2001  001364  C071  FFD9         	movff	f_write@fp,fsr2l
  2002  001368  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2003  00136C  CFDE F057          	movff	postinc2,create_chain@fs
  2004  001370  CFDD F058          	movff	postdec2,create_chain@fs+1
  2005  001374  EE20 F012          	lfsr	2,18
  2006  001378  5171               	movf	f_write@fp& (0+255),w,b
  2007  00137A  26D9               	addwf	fsr2l,f,c
  2008  00137C  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2009  00137E  22DA               	addwfc	fsr2h,f,c
  2010  001380  CFDE F059          	movff	postinc2,create_chain@clst
  2011  001384  CFDE F05A          	movff	postinc2,create_chain@clst+1
  2012  001388  CFDE F05B          	movff	postinc2,create_chain@clst+2
  2013  00138C  CFDE F05C          	movff	postinc2,create_chain@clst+3
  2014  001390  EC57  F01B         	call	_create_chain	;wreg free
  2015  001394                     L1:
  2016  001394  C057  F091         	movff	?_create_chain,f_write@clst
  2017  001398  C058  F092         	movff	?_create_chain+1,f_write@clst+1
  2018  00139C  C059  F093         	movff	?_create_chain+2,f_write@clst+2
  2019  0013A0  C05A  F094         	movff	?_create_chain+3,f_write@clst+3
  2020  0013A4                     l6146:
  2021                           
  2022                           ;ff.c: 2732:     if (clst == 0) break;
  2023  0013A4  0100               	movlb	0	; () banked
  2024  0013A6  5191               	movf	f_write@clst& (0+255),w,b
  2025  0013A8  1192               	iorwf	(f_write@clst+1)& (0+255),w,b
  2026  0013AA  1193               	iorwf	(f_write@clst+2)& (0+255),w,b
  2027  0013AC  1194               	iorwf	(f_write@clst+3)& (0+255),w,b
  2028  0013AE  B4D8               	btfsc	status,2,c
  2029  0013B0  D298               	goto	u8500
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2033  0013B2  0591               	decf	f_write@clst& (0+255),w,b
  2034  0013B4  1192               	iorwf	(f_write@clst+1)& (0+255),w,b
  2035  0013B6  1193               	iorwf	(f_write@clst+2)& (0+255),w,b
  2036  0013B8  1194               	iorwf	(f_write@clst+3)& (0+255),w,b
  2037  0013BA  A4D8               	btfss	status,2,c
  2038  0013BC  D009               	goto	l6156
  2039                           
  2040                           ; BSR set to: 0
  2041  0013BE  EE20 F005          	lfsr	2,5
  2042  0013C2  5171               	movf	f_write@fp& (0+255),w,b
  2043  0013C4  26D9               	addwf	fsr2l,f,c
  2044  0013C6  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2045  0013C8  22DA               	addwfc	fsr2h,f,c
  2046  0013CA  0E02               	movlw	2
  2047  0013CC  6EDF               	movwf	indf2,c
  2048  0013CE  0012               	return	
  2049  0013D0                     l6156:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  2053  0013D0  2991               	incf	f_write@clst& (0+255),w,b
  2054  0013D2  E110               	bnz	l6162
  2055  0013D4  2992               	incf	(f_write@clst+1)& (0+255),w,b
  2056  0013D6  E10E               	bnz	l6162
  2057  0013D8  2993               	incf	(f_write@clst+2)& (0+255),w,b
  2058  0013DA  E10C               	bnz	l6162
  2059  0013DC  2994               	incf	(f_write@clst+3)& (0+255),w,b
  2060  0013DE  A4D8               	btfss	status,2,c
  2061  0013E0  D009               	goto	l6162
  2062                           
  2063                           ; BSR set to: 0
  2064  0013E2  EE20 F005          	lfsr	2,5
  2065  0013E6  5171               	movf	f_write@fp& (0+255),w,b
  2066  0013E8  26D9               	addwf	fsr2l,f,c
  2067  0013EA  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2068  0013EC  22DA               	addwfc	fsr2h,f,c
  2069  0013EE  0E01               	movlw	1
  2070  0013F0  6EDF               	movwf	indf2,c
  2071  0013F2  0012               	return	
  2072  0013F4                     l6162:
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;ff.c: 2735:     fp->clust = clst;
  2076  0013F4  EE20 F012          	lfsr	2,18
  2077  0013F8  5171               	movf	f_write@fp& (0+255),w,b
  2078  0013FA  26D9               	addwf	fsr2l,f,c
  2079  0013FC  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2080  0013FE  22DA               	addwfc	fsr2h,f,c
  2081  001400  C091  FFDE         	movff	f_write@clst,postinc2
  2082  001404  C092  FFDE         	movff	f_write@clst+1,postinc2
  2083  001408  C093  FFDE         	movff	f_write@clst+2,postinc2
  2084  00140C  C094  FFDE         	movff	f_write@clst+3,postinc2
  2085                           
  2086                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  2087  001410  EE20 F00E          	lfsr	2,14
  2088  001414  5171               	movf	f_write@fp& (0+255),w,b
  2089  001416  26D9               	addwf	fsr2l,f,c
  2090  001418  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2091  00141A  22DA               	addwfc	fsr2h,f,c
  2092  00141C  50DE               	movf	postinc2,w,c
  2093  00141E  10DE               	iorwf	postinc2,w,c
  2094  001420  10DE               	iorwf	postinc2,w,c
  2095  001422  10DE               	iorwf	postinc2,w,c
  2096  001424  A4D8               	btfss	status,2,c
  2097  001426  D00E               	goto	l6166
  2098                           
  2099                           ; BSR set to: 0
  2100  001428  EE20 F00E          	lfsr	2,14
  2101  00142C  5171               	movf	f_write@fp& (0+255),w,b
  2102  00142E  26D9               	addwf	fsr2l,f,c
  2103  001430  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2104  001432  22DA               	addwfc	fsr2h,f,c
  2105  001434  C091  FFDE         	movff	f_write@clst,postinc2
  2106  001438  C092  FFDE         	movff	f_write@clst+1,postinc2
  2107  00143C  C093  FFDE         	movff	f_write@clst+2,postinc2
  2108  001440  C094  FFDE         	movff	f_write@clst+3,postinc2
  2109  001444                     l6166:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  2113  001444  EE20 F016          	lfsr	2,22
  2114  001448  5171               	movf	f_write@fp& (0+255),w,b
  2115  00144A  26D9               	addwf	fsr2l,f,c
  2116  00144C  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2117  00144E  22DA               	addwfc	fsr2h,f,c
  2118  001450  C071  FFE1         	movff	f_write@fp,fsr1l
  2119  001454  C072  FFE2         	movff	f_write@fp+1,fsr1h
  2120  001458  EE00 F02A          	lfsr	0,42
  2121  00145C  50E6               	movf	postinc1,w,c
  2122  00145E  26E9               	addwf	fsr0l,f,c
  2123  001460  50E5               	movf	postdec1,w,c
  2124  001462  22EA               	addwfc	fsr0h,f,c
  2125  001464  50DE               	movf	postinc2,w,c
  2126  001466  18EE               	xorwf	postinc0,w,c
  2127  001468  E121               	bnz	l6174
  2128  00146A  50DE               	movf	postinc2,w,c
  2129  00146C  18EE               	xorwf	postinc0,w,c
  2130  00146E  E11E               	bnz	l6174
  2131  001470  50DE               	movf	postinc2,w,c
  2132  001472  18EE               	xorwf	postinc0,w,c
  2133  001474  E11B               	bnz	l6174
  2134  001476  50DE               	movf	postinc2,w,c
  2135  001478  18EE               	xorwf	postinc0,w,c
  2136  00147A  A4D8               	btfss	status,2,c
  2137  00147C  D017               	goto	l6174
  2138                           
  2139                           ; BSR set to: 0
  2140  00147E  C071  FFD9         	movff	f_write@fp,fsr2l
  2141  001482  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2142  001486  CFDE F01C          	movff	postinc2,sync_window@fs
  2143  00148A  CFDD F01D          	movff	postdec2,sync_window@fs+1
  2144  00148E  EC9D  F022         	call	_sync_window	;wreg free
  2145  001492  0900               	iorlw	0
  2146  001494  B4D8               	btfsc	status,2,c
  2147  001496  D00A               	goto	l6174
  2148                           
  2149                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2150  001498  0100               	movlb	0	; () banked
  2151  00149A  EE20 F005          	lfsr	2,5
  2152  00149E  5171               	movf	f_write@fp& (0+255),w,b
  2153  0014A0  26D9               	addwf	fsr2l,f,c
  2154  0014A2  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2155  0014A4  22DA               	addwfc	fsr2h,f,c
  2156  0014A6  0E01               	movlw	1
  2157  0014A8  6EDF               	movwf	indf2,c
  2158  0014AA  0012               	return	
  2159  0014AC                     l6174:
  2160                           
  2161                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  2162  0014AC  C071  FFD9         	movff	f_write@fp,fsr2l
  2163  0014B0  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2164  0014B4  CFDE F00D          	movff	postinc2,clust2sect@fs
  2165  0014B8  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  2166  0014BC  0100               	movlb	0	; () banked
  2167  0014BE  EE20 F012          	lfsr	2,18
  2168  0014C2  5171               	movf	f_write@fp& (0+255),w,b
  2169  0014C4  26D9               	addwf	fsr2l,f,c
  2170  0014C6  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2171  0014C8  22DA               	addwfc	fsr2h,f,c
  2172  0014CA  CFDE F00F          	movff	postinc2,clust2sect@clst
  2173  0014CE  CFDE F010          	movff	postinc2,clust2sect@clst+1
  2174  0014D2  CFDE F011          	movff	postinc2,clust2sect@clst+2
  2175  0014D6  CFDE F012          	movff	postinc2,clust2sect@clst+3
  2176  0014DA  ECD2  F02A         	call	_clust2sect	;wreg free
  2177  0014DE  C00D  F08D         	movff	?_clust2sect,f_write@sect
  2178  0014E2  C00E  F08E         	movff	?_clust2sect+1,f_write@sect+1
  2179  0014E6  C00F  F08F         	movff	?_clust2sect+2,f_write@sect+2
  2180  0014EA  C010  F090         	movff	?_clust2sect+3,f_write@sect+3
  2181                           
  2182                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2183  0014EE  0100               	movlb	0	; () banked
  2184  0014F0  518D               	movf	f_write@sect& (0+255),w,b
  2185  0014F2  118E               	iorwf	(f_write@sect+1)& (0+255),w,b
  2186  0014F4  118F               	iorwf	(f_write@sect+2)& (0+255),w,b
  2187  0014F6  1190               	iorwf	(f_write@sect+3)& (0+255),w,b
  2188  0014F8  A4D8               	btfss	status,2,c
  2189  0014FA  D009               	goto	l6182
  2190                           
  2191                           ; BSR set to: 0
  2192  0014FC  EE20 F005          	lfsr	2,5
  2193  001500  5171               	movf	f_write@fp& (0+255),w,b
  2194  001502  26D9               	addwf	fsr2l,f,c
  2195  001504  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2196  001506  22DA               	addwfc	fsr2h,f,c
  2197  001508  0E02               	movlw	2
  2198  00150A  6EDF               	movwf	indf2,c
  2199  00150C  0012               	return	
  2200  00150E                     l6182:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;ff.c: 2750:    sect += csect;
  2204  00150E  518A               	movf	f_write@csect& (0+255),w,b
  2205  001510  278D               	addwf	f_write@sect& (0+255),f,b
  2206  001512  0E00               	movlw	0
  2207  001514  238E               	addwfc	(f_write@sect+1)& (0+255),f,b
  2208  001516  238F               	addwfc	(f_write@sect+2)& (0+255),f,b
  2209  001518  2390               	addwfc	(f_write@sect+3)& (0+255),f,b
  2210                           
  2211                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  2212  00151A  C076  F07A         	movff	f_write@btw,??_f_write
  2213  00151E  C077  F07B         	movff	f_write@btw+1,??_f_write+1
  2214  001522  0E09               	movlw	9
  2215  001524  6F7C               	movwf	(??_f_write+2)& (0+255),b
  2216  001526                     u8395:
  2217  001526  90D8               	bcf	status,0,c
  2218  001528  337B               	rrcf	(??_f_write+1)& (0+255),f,b
  2219  00152A  337A               	rrcf	??_f_write& (0+255),f,b
  2220  00152C  2F7C               	decfsz	(??_f_write+2)& (0+255),f,b
  2221  00152E  D7FB               	goto	u8395
  2222  001530  C07A  F08B         	movff	??_f_write,f_write@cc
  2223  001534  C07B  F08C         	movff	??_f_write+1,f_write@cc+1
  2224                           
  2225                           ;ff.c: 2752:    if (cc) {
  2226  001538  518B               	movf	f_write@cc& (0+255),w,b
  2227  00153A  118C               	iorwf	(f_write@cc+1)& (0+255),w,b
  2228  00153C  B4D8               	btfsc	status,2,c
  2229  00153E  D0D7               	goto	l6202
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  2233  001540  518A               	movf	f_write@csect& (0+255),w,b
  2234  001542  258B               	addwf	f_write@cc& (0+255),w,b
  2235  001544  6F7A               	movwf	??_f_write& (0+255),b
  2236  001546  0E00               	movlw	0
  2237  001548  218C               	addwfc	(f_write@cc+1)& (0+255),w,b
  2238  00154A  6F7B               	movwf	(??_f_write+1)& (0+255),b
  2239  00154C  C071  FFD9         	movff	f_write@fp,fsr2l
  2240  001550  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2241  001554  EE10 F002          	lfsr	1,2
  2242  001558  50DE               	movf	postinc2,w,c
  2243  00155A  26E1               	addwf	fsr1l,f,c
  2244  00155C  50DD               	movf	postdec2,w,c
  2245  00155E  22E2               	addwfc	fsr1h,f,c
  2246  001560  50E7               	movf	indf1,w,c
  2247  001562  6F7C               	movwf	(??_f_write+2)& (0+255),b
  2248  001564  6B7D               	clrf	(??_f_write+3)& (0+255),b
  2249  001566  517A               	movf	??_f_write& (0+255),w,b
  2250  001568  5D7C               	subwf	(??_f_write+2)& (0+255),w,b
  2251  00156A  517B               	movf	(??_f_write+1)& (0+255),w,b
  2252  00156C  597D               	subwfb	(??_f_write+3)& (0+255),w,b
  2253  00156E  B0D8               	btfsc	status,0,c
  2254  001570  D012               	goto	l6188
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  2258  001572  C071  FFD9         	movff	f_write@fp,fsr2l
  2259  001576  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2260  00157A  EE10 F002          	lfsr	1,2
  2261  00157E  50DE               	movf	postinc2,w,c
  2262  001580  26E1               	addwf	fsr1l,f,c
  2263  001582  50DD               	movf	postdec2,w,c
  2264  001584  22E2               	addwfc	fsr1h,f,c
  2265  001586  50E7               	movf	indf1,w,c
  2266  001588  6F7A               	movwf	??_f_write& (0+255),b
  2267  00158A  518A               	movf	f_write@csect& (0+255),w,b
  2268  00158C  5D7A               	subwf	??_f_write& (0+255),w,b
  2269  00158E  6F8B               	movwf	f_write@cc& (0+255),b
  2270  001590  6B8C               	clrf	(f_write@cc+1)& (0+255),b
  2271  001592  A0D8               	btfss	status,0,c
  2272  001594  078C               	decf	(f_write@cc+1)& (0+255),f,b
  2273  001596                     l6188:
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2277  001596  C087  F011         	movff	f_write@wbuff,disk_write@buff
  2278  00159A  C088  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2279  00159E  C089  F013         	movff	f_write@wbuff+2,disk_write@buff+2
  2280  0015A2  C08D  F014         	movff	f_write@sect,disk_write@sector
  2281  0015A6  C08E  F015         	movff	f_write@sect+1,disk_write@sector+1
  2282  0015AA  C08F  F016         	movff	f_write@sect+2,disk_write@sector+2
  2283  0015AE  C090  F017         	movff	f_write@sect+3,disk_write@sector+3
  2284  0015B2  C08B  F018         	movff	f_write@cc,disk_write@count
  2285  0015B6  C08C  F019         	movff	f_write@cc+1,disk_write@count+1
  2286  0015BA  C071  FFD9         	movff	f_write@fp,fsr2l
  2287  0015BE  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2288  0015C2  EE10 F001          	lfsr	1,1
  2289  0015C6  50DE               	movf	postinc2,w,c
  2290  0015C8  26E1               	addwf	fsr1l,f,c
  2291  0015CA  50DD               	movf	postdec2,w,c
  2292  0015CC  22E2               	addwfc	fsr1h,f,c
  2293  0015CE  50E7               	movf	indf1,w,c
  2294  0015D0  ECE7  F025         	call	_disk_write
  2295  0015D4  0900               	iorlw	0
  2296  0015D6  B4D8               	btfsc	status,2,c
  2297  0015D8  D00A               	goto	l6194
  2298                           
  2299                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2300  0015DA  0100               	movlb	0	; () banked
  2301  0015DC  EE20 F005          	lfsr	2,5
  2302  0015E0  5171               	movf	f_write@fp& (0+255),w,b
  2303  0015E2  26D9               	addwf	fsr2l,f,c
  2304  0015E4  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2305  0015E6  22DA               	addwfc	fsr2h,f,c
  2306  0015E8  0E01               	movlw	1
  2307  0015EA  6EDF               	movwf	indf2,c
  2308  0015EC  0012               	return	
  2309  0015EE                     l6194:
  2310                           
  2311                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2312  0015EE  0100               	movlb	0	; () banked
  2313  0015F0  518B               	movf	f_write@cc& (0+255),w,b
  2314  0015F2  6F7A               	movwf	??_f_write& (0+255),b
  2315  0015F4  518C               	movf	(f_write@cc+1)& (0+255),w,b
  2316  0015F6  6F7B               	movwf	(??_f_write+1)& (0+255),b
  2317  0015F8  6B7C               	clrf	(??_f_write+2)& (0+255),b
  2318  0015FA  6B7D               	clrf	(??_f_write+3)& (0+255),b
  2319  0015FC  C071  FFD9         	movff	f_write@fp,fsr2l
  2320  001600  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2321  001604  EE10 F02A          	lfsr	1,42
  2322  001608  50DE               	movf	postinc2,w,c
  2323  00160A  26E1               	addwf	fsr1l,f,c
  2324  00160C  50DD               	movf	postdec2,w,c
  2325  00160E  22E2               	addwfc	fsr1h,f,c
  2326  001610  CFE6 F07E          	movff	postinc1,??_f_write+4
  2327  001614  CFE6 F07F          	movff	postinc1,??_f_write+5
  2328  001618  CFE6 F080          	movff	postinc1,??_f_write+6
  2329  00161C  CFE6 F081          	movff	postinc1,??_f_write+7
  2330  001620  518D               	movf	f_write@sect& (0+255),w,b
  2331  001622  5D7E               	subwf	(??_f_write+4)& (0+255),w,b
  2332  001624  6F82               	movwf	(??_f_write+8)& (0+255),b
  2333  001626  518E               	movf	(f_write@sect+1)& (0+255),w,b
  2334  001628  597F               	subwfb	(??_f_write+5)& (0+255),w,b
  2335  00162A  6F83               	movwf	(??_f_write+9)& (0+255),b
  2336  00162C  518F               	movf	(f_write@sect+2)& (0+255),w,b
  2337  00162E  5980               	subwfb	(??_f_write+6)& (0+255),w,b
  2338  001630  6F84               	movwf	(??_f_write+10)& (0+255),b
  2339  001632  5190               	movf	(f_write@sect+3)& (0+255),w,b
  2340  001634  5981               	subwfb	(??_f_write+7)& (0+255),w,b
  2341  001636  6F85               	movwf	(??_f_write+11)& (0+255),b
  2342  001638  517A               	movf	??_f_write& (0+255),w,b
  2343  00163A  5D82               	subwf	(??_f_write+8)& (0+255),w,b
  2344  00163C  517B               	movf	(??_f_write+1)& (0+255),w,b
  2345  00163E  5983               	subwfb	(??_f_write+9)& (0+255),w,b
  2346  001640  517C               	movf	(??_f_write+2)& (0+255),w,b
  2347  001642  5984               	subwfb	(??_f_write+10)& (0+255),w,b
  2348  001644  517D               	movf	(??_f_write+3)& (0+255),w,b
  2349  001646  5985               	subwfb	(??_f_write+11)& (0+255),w,b
  2350  001648  B0D8               	btfsc	status,0,c
  2351  00164A  D041               	goto	l6200
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2355  00164C  C071  FFD9         	movff	f_write@fp,fsr2l
  2356  001650  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2357  001654  CFDE F07A          	movff	postinc2,??_f_write
  2358  001658  CFDD F07B          	movff	postdec2,??_f_write+1
  2359  00165C  0E2E               	movlw	46
  2360  00165E  257A               	addwf	??_f_write& (0+255),w,b
  2361  001660  6E01               	movwf	mem_cpy@dst,c
  2362  001662  0E00               	movlw	0
  2363  001664  217B               	addwfc	(??_f_write+1)& (0+255),w,b
  2364  001666  6E02               	movwf	mem_cpy@dst+1,c
  2365  001668  C071  FFD9         	movff	f_write@fp,fsr2l
  2366  00166C  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2367  001670  EE10 F02A          	lfsr	1,42
  2368  001674  50DE               	movf	postinc2,w,c
  2369  001676  26E1               	addwf	fsr1l,f,c
  2370  001678  50DD               	movf	postdec2,w,c
  2371  00167A  22E2               	addwfc	fsr1h,f,c
  2372  00167C  CFE6 F07C          	movff	postinc1,??_f_write+2
  2373  001680  CFE5 F07D          	movff	postdec1,??_f_write+3
  2374  001684  518D               	movf	f_write@sect& (0+255),w,b
  2375  001686  5F7C               	subwf	(??_f_write+2)& (0+255),f,b
  2376  001688  518E               	movf	(f_write@sect+1)& (0+255),w,b
  2377  00168A  5B7D               	subwfb	(??_f_write+3)& (0+255),f,b
  2378  00168C  0E09               	movlw	9
  2379  00168E                     u8445:
  2380  00168E  90D8               	bcf	status,0,c
  2381  001690  377C               	rlcf	(??_f_write+2)& (0+255),f,b
  2382  001692  377D               	rlcf	(??_f_write+3)& (0+255),f,b
  2383  001694  2EE8               	decfsz	wreg,f,c
  2384  001696  D7FB               	goto	u8445
  2385  001698  517C               	movf	(??_f_write+2)& (0+255),w,b
  2386  00169A  2587               	addwf	f_write@wbuff& (0+255),w,b
  2387  00169C  6E03               	movwf	mem_cpy@src,c
  2388  00169E  517D               	movf	(??_f_write+3)& (0+255),w,b
  2389  0016A0  2188               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2390  0016A2  6E04               	movwf	mem_cpy@src+1,c
  2391  0016A4  0E00               	movlw	0
  2392  0016A6  2189               	addwfc	(f_write@wbuff+2)& (0+255),w,b
  2393  0016A8  6E05               	movwf	mem_cpy@src+2,c
  2394  0016AA  0E02               	movlw	2
  2395  0016AC  6E07               	movwf	mem_cpy@cnt+1,c
  2396  0016AE  0E00               	movlw	0
  2397  0016B0  6E06               	movwf	mem_cpy@cnt,c
  2398  0016B2  ECA4  F029         	call	_mem_cpy	;wreg free
  2399                           
  2400                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2401  0016B6  C071  FFD9         	movff	f_write@fp,fsr2l
  2402  0016BA  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2403  0016BE  EE10 F004          	lfsr	1,4
  2404  0016C2  50DE               	movf	postinc2,w,c
  2405  0016C4  26E1               	addwf	fsr1l,f,c
  2406  0016C6  50DD               	movf	postdec2,w,c
  2407  0016C8  22E2               	addwfc	fsr1h,f,c
  2408  0016CA  0E00               	movlw	0
  2409  0016CC  6EE7               	movwf	indf1,c
  2410  0016CE                     l6200:
  2411                           
  2412                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2413  0016CE  C08B  F07A         	movff	f_write@cc,??_f_write
  2414  0016D2  C08C  F07B         	movff	f_write@cc+1,??_f_write+1
  2415  0016D6  0E09               	movlw	9
  2416  0016D8                     u8455:
  2417  0016D8  90D8               	bcf	status,0,c
  2418  0016DA  0100               	movlb	0	; () banked
  2419  0016DC  377A               	rlcf	??_f_write& (0+255),f,b
  2420  0016DE  377B               	rlcf	(??_f_write+1)& (0+255),f,b
  2421  0016E0  2EE8               	decfsz	wreg,f,c
  2422  0016E2  D7FA               	goto	u8455
  2423  0016E4  C07A  F095         	movff	??_f_write,f_write@wcnt
  2424  0016E8  C07B  F096         	movff	??_f_write+1,f_write@wcnt+1
  2425                           
  2426                           ;ff.c: 2771:     continue;
  2427  0016EC  D0D4               	goto	l6230
  2428  0016EE                     l6202:
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2432  0016EE  EE20 F00A          	lfsr	2,10
  2433  0016F2  5171               	movf	f_write@fp& (0+255),w,b
  2434  0016F4  26D9               	addwf	fsr2l,f,c
  2435  0016F6  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2436  0016F8  22DA               	addwfc	fsr2h,f,c
  2437  0016FA  EE10 F006          	lfsr	1,6
  2438  0016FE  5171               	movf	f_write@fp& (0+255),w,b
  2439  001700  26E1               	addwf	fsr1l,f,c
  2440  001702  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2441  001704  22E2               	addwfc	fsr1h,f,c
  2442  001706  50DE               	movf	postinc2,w,c
  2443  001708  5CE6               	subwf	postinc1,w,c
  2444  00170A  50DE               	movf	postinc2,w,c
  2445  00170C  58E6               	subwfb	postinc1,w,c
  2446  00170E  50DE               	movf	postinc2,w,c
  2447  001710  58E6               	subwfb	postinc1,w,c
  2448  001712  50DE               	movf	postinc2,w,c
  2449  001714  58E6               	subwfb	postinc1,w,c
  2450  001716  A0D8               	btfss	status,0,c
  2451  001718  D029               	goto	l6212
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2455  00171A  C071  FFD9         	movff	f_write@fp,fsr2l
  2456  00171E  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2457  001722  CFDE F01C          	movff	postinc2,sync_window@fs
  2458  001726  CFDD F01D          	movff	postdec2,sync_window@fs+1
  2459  00172A  EC9D  F022         	call	_sync_window	;wreg free
  2460  00172E  0900               	iorlw	0
  2461  001730  B4D8               	btfsc	status,2,c
  2462  001732  D00A               	goto	l6210
  2463  001734  0100               	movlb	0	; () banked
  2464  001736  EE20 F005          	lfsr	2,5
  2465  00173A  5171               	movf	f_write@fp& (0+255),w,b
  2466  00173C  26D9               	addwf	fsr2l,f,c
  2467  00173E  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2468  001740  22DA               	addwfc	fsr2h,f,c
  2469  001742  0E01               	movlw	1
  2470  001744  6EDF               	movwf	indf2,c
  2471  001746  0012               	return	
  2472  001748                     l6210:
  2473                           
  2474                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2475  001748  C071  FFD9         	movff	f_write@fp,fsr2l
  2476  00174C  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2477  001750  EE10 F02A          	lfsr	1,42
  2478  001754  50DE               	movf	postinc2,w,c
  2479  001756  26E1               	addwf	fsr1l,f,c
  2480  001758  50DD               	movf	postdec2,w,c
  2481  00175A  22E2               	addwfc	fsr1h,f,c
  2482  00175C  C08D  FFE6         	movff	f_write@sect,postinc1
  2483  001760  C08E  FFE6         	movff	f_write@sect+1,postinc1
  2484  001764  C08F  FFE6         	movff	f_write@sect+2,postinc1
  2485  001768  C090  FFE6         	movff	f_write@sect+3,postinc1
  2486  00176C                     l6212:
  2487                           
  2488                           ;ff.c: 2785:    fp->dsect = sect;
  2489  00176C  0100               	movlb	0	; () banked
  2490  00176E  EE20 F016          	lfsr	2,22
  2491  001772  5171               	movf	f_write@fp& (0+255),w,b
  2492  001774  26D9               	addwf	fsr2l,f,c
  2493  001776  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2494  001778  22DA               	addwfc	fsr2h,f,c
  2495  00177A  C08D  FFDE         	movff	f_write@sect,postinc2
  2496  00177E  C08E  FFDE         	movff	f_write@sect+1,postinc2
  2497  001782  C08F  FFDE         	movff	f_write@sect+2,postinc2
  2498  001786  C090  FFDE         	movff	f_write@sect+3,postinc2
  2499  00178A                     l6214:
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2503  00178A  0EFF               	movlw	255
  2504  00178C  6F7A               	movwf	??_f_write& (0+255),b
  2505  00178E  0E01               	movlw	1
  2506  001790  6F7B               	movwf	(??_f_write+1)& (0+255),b
  2507  001792  EE20 F006          	lfsr	2,6
  2508  001796  5171               	movf	f_write@fp& (0+255),w,b
  2509  001798  26D9               	addwf	fsr2l,f,c
  2510  00179A  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2511  00179C  22DA               	addwfc	fsr2h,f,c
  2512  00179E  CFDE F07C          	movff	postinc2,??_f_write+2
  2513  0017A2  CFDD F07D          	movff	postdec2,??_f_write+3
  2514  0017A6  517A               	movf	??_f_write& (0+255),w,b
  2515  0017A8  177C               	andwf	(??_f_write+2)& (0+255),f,b
  2516  0017AA  517B               	movf	(??_f_write+1)& (0+255),w,b
  2517  0017AC  177D               	andwf	(??_f_write+3)& (0+255),f,b
  2518  0017AE  517C               	movf	(??_f_write+2)& (0+255),w,b
  2519  0017B0  0800               	sublw	0
  2520  0017B2  6F95               	movwf	f_write@wcnt& (0+255),b
  2521  0017B4  517D               	movf	(??_f_write+3)& (0+255),w,b
  2522  0017B6  A0D8               	btfss	status,0,c
  2523  0017B8  2AE8               	incf	wreg,f,c
  2524  0017BA  0802               	sublw	2
  2525  0017BC  6F96               	movwf	(f_write@wcnt+1)& (0+255),b
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2529  0017BE  5195               	movf	f_write@wcnt& (0+255),w,b
  2530  0017C0  5D76               	subwf	f_write@btw& (0+255),w,b
  2531  0017C2  5196               	movf	(f_write@wcnt+1)& (0+255),w,b
  2532  0017C4  5977               	subwfb	(f_write@btw+1)& (0+255),w,b
  2533  0017C6  B0D8               	btfsc	status,0,c
  2534  0017C8  D004               	goto	l6220
  2535                           
  2536                           ; BSR set to: 0
  2537  0017CA  C076  F095         	movff	f_write@btw,f_write@wcnt
  2538  0017CE  C077  F096         	movff	f_write@btw+1,f_write@wcnt+1
  2539  0017D2                     l6220:
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2543  0017D2  C071  FFD9         	movff	f_write@fp,fsr2l
  2544  0017D6  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2545  0017DA  CFDE F031          	movff	postinc2,move_window@fs
  2546  0017DE  CFDD F032          	movff	postdec2,move_window@fs+1
  2547  0017E2  EE20 F016          	lfsr	2,22
  2548  0017E6  5171               	movf	f_write@fp& (0+255),w,b
  2549  0017E8  26D9               	addwf	fsr2l,f,c
  2550  0017EA  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2551  0017EC  22DA               	addwfc	fsr2h,f,c
  2552  0017EE  CFDE F033          	movff	postinc2,move_window@sector
  2553  0017F2  CFDE F034          	movff	postinc2,move_window@sector+1
  2554  0017F6  CFDE F035          	movff	postinc2,move_window@sector+2
  2555  0017FA  CFDE F036          	movff	postinc2,move_window@sector+3
  2556  0017FE  EC87  F02B         	call	_move_window	;wreg free
  2557  001802  0900               	iorlw	0
  2558  001804  B4D8               	btfsc	status,2,c
  2559  001806  D00A               	goto	l6226
  2560                           
  2561                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2562  001808  0100               	movlb	0	; () banked
  2563  00180A  EE20 F005          	lfsr	2,5
  2564  00180E  5171               	movf	f_write@fp& (0+255),w,b
  2565  001810  26D9               	addwf	fsr2l,f,c
  2566  001812  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2567  001814  22DA               	addwfc	fsr2h,f,c
  2568  001816  0E01               	movlw	1
  2569  001818  6EDF               	movwf	indf2,c
  2570  00181A  0012               	return	
  2571  00181C                     l6226:
  2572                           
  2573                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2574  00181C  0EFF               	movlw	255
  2575  00181E  0100               	movlb	0	; () banked
  2576  001820  6F7A               	movwf	??_f_write& (0+255),b
  2577  001822  0E01               	movlw	1
  2578  001824  6F7B               	movwf	(??_f_write+1)& (0+255),b
  2579  001826  EE20 F006          	lfsr	2,6
  2580  00182A  5171               	movf	f_write@fp& (0+255),w,b
  2581  00182C  26D9               	addwf	fsr2l,f,c
  2582  00182E  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2583  001830  22DA               	addwfc	fsr2h,f,c
  2584  001832  CFDE F07C          	movff	postinc2,??_f_write+2
  2585  001836  CFDD F07D          	movff	postdec2,??_f_write+3
  2586  00183A  517A               	movf	??_f_write& (0+255),w,b
  2587  00183C  177C               	andwf	(??_f_write+2)& (0+255),f,b
  2588  00183E  517B               	movf	(??_f_write+1)& (0+255),w,b
  2589  001840  177D               	andwf	(??_f_write+3)& (0+255),f,b
  2590  001842  C071  FFD9         	movff	f_write@fp,fsr2l
  2591  001846  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2592  00184A  CFDE F07E          	movff	postinc2,??_f_write+4
  2593  00184E  CFDD F07F          	movff	postdec2,??_f_write+5
  2594  001852  517C               	movf	(??_f_write+2)& (0+255),w,b
  2595  001854  277E               	addwf	(??_f_write+4)& (0+255),f,b
  2596  001856  517D               	movf	(??_f_write+3)& (0+255),w,b
  2597  001858  237F               	addwfc	(??_f_write+5)& (0+255),f,b
  2598  00185A  0E2E               	movlw	46
  2599  00185C  257E               	addwf	(??_f_write+4)& (0+255),w,b
  2600  00185E  6E01               	movwf	mem_cpy@dst,c
  2601  001860  0E00               	movlw	0
  2602  001862  217F               	addwfc	(??_f_write+5)& (0+255),w,b
  2603  001864  6E02               	movwf	mem_cpy@dst+1,c
  2604  001866  C087  F003         	movff	f_write@wbuff,mem_cpy@src
  2605  00186A  C088  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2606  00186E  C089  F005         	movff	f_write@wbuff+2,mem_cpy@src+2
  2607  001872  C095  F006         	movff	f_write@wcnt,mem_cpy@cnt
  2608  001876  C096  F007         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2609  00187A  ECA4  F029         	call	_mem_cpy	;wreg free
  2610                           
  2611                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2612  00187E  C071  FFD9         	movff	f_write@fp,fsr2l
  2613  001882  C072  FFDA         	movff	f_write@fp+1,fsr2h
  2614  001886  EE10 F004          	lfsr	1,4
  2615  00188A  50DE               	movf	postinc2,w,c
  2616  00188C  26E1               	addwf	fsr1l,f,c
  2617  00188E  50DD               	movf	postdec2,w,c
  2618  001890  22E2               	addwfc	fsr1h,f,c
  2619  001892  0E01               	movlw	1
  2620  001894  6EE7               	movwf	indf1,c
  2621  001896                     l6230:
  2622  001896  C095  FFE8         	movff	f_write@wcnt,wreg
  2623  00189A  0100               	movlb	0	; () banked
  2624  00189C  2787               	addwf	f_write@wbuff& (0+255),f,b
  2625  00189E  C096  FFE8         	movff	f_write@wcnt+1,wreg
  2626  0018A2  2388               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2627  0018A4  0E00               	movlw	0
  2628  0018A6  2389               	addwfc	(f_write@wbuff+2)& (0+255),f,b
  2629                           
  2630                           ; BSR set to: 0
  2631  0018A8  EE20 F006          	lfsr	2,6
  2632  0018AC  5171               	movf	f_write@fp& (0+255),w,b
  2633  0018AE  26D9               	addwf	fsr2l,f,c
  2634  0018B0  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2635  0018B2  22DA               	addwfc	fsr2h,f,c
  2636  0018B4  5195               	movf	f_write@wcnt& (0+255),w,b
  2637  0018B6  26DE               	addwf	postinc2,f,c
  2638  0018B8  5196               	movf	(f_write@wcnt+1)& (0+255),w,b
  2639  0018BA  22DE               	addwfc	postinc2,f,c
  2640  0018BC  0E00               	movlw	0
  2641  0018BE  22DE               	addwfc	postinc2,f,c
  2642  0018C0  22DE               	addwfc	postinc2,f,c
  2643                           
  2644                           ; BSR set to: 0
  2645  0018C2  C078  FFD9         	movff	f_write@bw,fsr2l
  2646  0018C6  C079  FFDA         	movff	f_write@bw+1,fsr2h
  2647  0018CA  5195               	movf	f_write@wcnt& (0+255),w,b
  2648  0018CC  26DE               	addwf	postinc2,f,c
  2649  0018CE  5196               	movf	(f_write@wcnt+1)& (0+255),w,b
  2650  0018D0  22DD               	addwfc	postdec2,f,c
  2651                           
  2652                           ; BSR set to: 0
  2653  0018D2  5195               	movf	f_write@wcnt& (0+255),w,b
  2654  0018D4  5F76               	subwf	f_write@btw& (0+255),f,b
  2655  0018D6  5196               	movf	(f_write@wcnt+1)& (0+255),w,b
  2656  0018D8  5B77               	subwfb	(f_write@btw+1)& (0+255),f,b
  2657  0018DA                     l6238:
  2658                           
  2659                           ; BSR set to: 0
  2660  0018DA  5176               	movf	f_write@btw& (0+255),w,b
  2661  0018DC  1177               	iorwf	(f_write@btw+1)& (0+255),w,b
  2662  0018DE  A4D8               	btfss	status,2,c
  2663  0018E0  D4CD               	goto	l6130
  2664  0018E2                     u8500:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2668  0018E2  EE20 F006          	lfsr	2,6
  2669  0018E6  5171               	movf	f_write@fp& (0+255),w,b
  2670  0018E8  26D9               	addwf	fsr2l,f,c
  2671  0018EA  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2672  0018EC  22DA               	addwfc	fsr2h,f,c
  2673  0018EE  EE10 F00A          	lfsr	1,10
  2674  0018F2  5171               	movf	f_write@fp& (0+255),w,b
  2675  0018F4  26E1               	addwf	fsr1l,f,c
  2676  0018F6  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2677  0018F8  22E2               	addwfc	fsr1h,f,c
  2678  0018FA  50DE               	movf	postinc2,w,c
  2679  0018FC  5CE6               	subwf	postinc1,w,c
  2680  0018FE  50DE               	movf	postinc2,w,c
  2681  001900  58E6               	subwfb	postinc1,w,c
  2682  001902  50DE               	movf	postinc2,w,c
  2683  001904  58E6               	subwfb	postinc1,w,c
  2684  001906  50DE               	movf	postinc2,w,c
  2685  001908  58E6               	subwfb	postinc1,w,c
  2686  00190A  B0D8               	btfsc	status,0,c
  2687  00190C  D014               	goto	l6244
  2688                           
  2689                           ; BSR set to: 0
  2690  00190E  EE20 F006          	lfsr	2,6
  2691  001912  5171               	movf	f_write@fp& (0+255),w,b
  2692  001914  26D9               	addwf	fsr2l,f,c
  2693  001916  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2694  001918  22DA               	addwfc	fsr2h,f,c
  2695  00191A  EE10 F00A          	lfsr	1,10
  2696  00191E  5171               	movf	f_write@fp& (0+255),w,b
  2697  001920  26E1               	addwf	fsr1l,f,c
  2698  001922  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2699  001924  22E2               	addwfc	fsr1h,f,c
  2700  001926  CFDE FFE6          	movff	postinc2,postinc1
  2701  00192A  CFDE FFE6          	movff	postinc2,postinc1
  2702  00192E  CFDE FFE6          	movff	postinc2,postinc1
  2703  001932  CFDE FFE6          	movff	postinc2,postinc1
  2704  001936                     l6244:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;ff.c: 2801:  fp->flag |= 0x20;
  2708  001936  EE20 F004          	lfsr	2,4
  2709  00193A  5171               	movf	f_write@fp& (0+255),w,b
  2710  00193C  26D9               	addwf	fsr2l,f,c
  2711  00193E  5172               	movf	(f_write@fp+1)& (0+255),w,b
  2712  001940  22DA               	addwfc	fsr2h,f,c
  2713  001942  0E00               	movlw	0
  2714  001944  8ADB               	bsf	plusw2,5,c
  2715                           
  2716                           ; BSR set to: 0
  2717  001946  0012               	return		;funcret
  2718  001948                     __end_of_f_write:
  2719                           	opt callstack 0
  2720                           
  2721 ;; *************** function ___xxtofl *****************
  2722 ;; Defined at:
  2723 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\xxtofl.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;  sign            1    wreg     unsigned char 
  2726 ;;  val             4    0[COMRAM] long 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  sign            1    8[COMRAM] unsigned char 
  2729 ;;  arg             4   10[COMRAM] unsigned long 
  2730 ;;  exp             1    9[COMRAM] unsigned char 
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  4    0[COMRAM] unsigned char 
  2733 ;; Registers used:
  2734 ;;		wreg, status,2, status,0
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2740 ;;      Params:         4       0       0       0       0       0       0       0       0
  2741 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2742 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2743 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2744 ;;Total ram usage:       14 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_grabador
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text5
  2754  004A8E                     __ptext5:
  2755                           	opt callstack 0
  2756  004A8E                     ___xxtofl:
  2757                           	opt callstack 28
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;incstack = 0
  2761                           ;___xxtofl@sign stored from wreg
  2762  004A8E  6E09               	movwf	___xxtofl@sign,c
  2763  004A90  5009               	movf	___xxtofl@sign,w,c
  2764  004A92  A4D8               	btfss	status,2,c
  2765  004A94  AE04               	btfss	___xxtofl@val+3,7,c
  2766  004A96  D01A               	goto	l1568
  2767  004A98  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2768  004A9C  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2769  004AA0  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2770  004AA4  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2771  004AA8  1E05               	comf	??___xxtofl,f,c
  2772  004AAA  1E06               	comf	??___xxtofl+1,f,c
  2773  004AAC  1E07               	comf	??___xxtofl+2,f,c
  2774  004AAE  1E08               	comf	??___xxtofl+3,f,c
  2775  004AB0  2A05               	incf	??___xxtofl,f,c
  2776  004AB2  0E00               	movlw	0
  2777  004AB4  2206               	addwfc	??___xxtofl+1,f,c
  2778  004AB6  2207               	addwfc	??___xxtofl+2,f,c
  2779  004AB8  2208               	addwfc	??___xxtofl+3,f,c
  2780  004ABA  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2781  004ABE  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2782  004AC2  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2783  004AC6  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2784  004ACA  D008               	goto	l6576
  2785  004ACC                     l1568:
  2786  004ACC  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2787  004AD0  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2788  004AD4  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2789  004AD8  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2790  004ADC                     l6576:
  2791  004ADC  5001               	movf	___xxtofl@val,w,c
  2792  004ADE  1002               	iorwf	___xxtofl@val+1,w,c
  2793  004AE0  1003               	iorwf	___xxtofl@val+2,w,c
  2794  004AE2  1004               	iorwf	___xxtofl@val+3,w,c
  2795  004AE4  A4D8               	btfss	status,2,c
  2796  004AE6  D009               	goto	l6582
  2797  004AE8  0E00               	movlw	0
  2798  004AEA  6E01               	movwf	?___xxtofl,c
  2799  004AEC  0E00               	movlw	0
  2800  004AEE  6E02               	movwf	?___xxtofl+1,c
  2801  004AF0  0E00               	movlw	0
  2802  004AF2  6E03               	movwf	?___xxtofl+2,c
  2803  004AF4  0E00               	movlw	0
  2804  004AF6  6E04               	movwf	?___xxtofl+3,c
  2805  004AF8  0012               	return	
  2806  004AFA                     l6582:
  2807  004AFA  0E96               	movlw	150
  2808  004AFC  6E0A               	movwf	___xxtofl@exp,c
  2809  004AFE  D006               	goto	l6586
  2810  004B00                     l6584:
  2811  004B00  2A0A               	incf	___xxtofl@exp,f,c
  2812  004B02  90D8               	bcf	status,0,c
  2813  004B04  320E               	rrcf	___xxtofl@arg+3,f,c
  2814  004B06  320D               	rrcf	___xxtofl@arg+2,f,c
  2815  004B08  320C               	rrcf	___xxtofl@arg+1,f,c
  2816  004B0A  320B               	rrcf	___xxtofl@arg,f,c
  2817  004B0C                     l6586:
  2818  004B0C  0E00               	movlw	0
  2819  004B0E  140B               	andwf	___xxtofl@arg,w,c
  2820  004B10  6E05               	movwf	??___xxtofl& (0+255),c
  2821  004B12  0E00               	movlw	0
  2822  004B14  140C               	andwf	___xxtofl@arg+1,w,c
  2823  004B16  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  2824  004B18  0E00               	movlw	0
  2825  004B1A  140D               	andwf	___xxtofl@arg+2,w,c
  2826  004B1C  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  2827  004B1E  0EFE               	movlw	254
  2828  004B20  140E               	andwf	___xxtofl@arg+3,w,c
  2829  004B22  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  2830  004B24  5005               	movf	??___xxtofl,w,c
  2831  004B26  1006               	iorwf	??___xxtofl+1,w,c
  2832  004B28  1007               	iorwf	??___xxtofl+2,w,c
  2833  004B2A  1008               	iorwf	??___xxtofl+3,w,c
  2834  004B2C  B4D8               	btfsc	status,2,c
  2835  004B2E  D00D               	goto	l1575
  2836  004B30  D7E7               	goto	l6584
  2837  004B32                     l6588:
  2838  004B32  2A0A               	incf	___xxtofl@exp,f,c
  2839  004B34  0E01               	movlw	1
  2840  004B36  260B               	addwf	___xxtofl@arg,f,c
  2841  004B38  0E00               	movlw	0
  2842  004B3A  220C               	addwfc	___xxtofl@arg+1,f,c
  2843  004B3C  220D               	addwfc	___xxtofl@arg+2,f,c
  2844  004B3E  220E               	addwfc	___xxtofl@arg+3,f,c
  2845  004B40  90D8               	bcf	status,0,c
  2846  004B42  320E               	rrcf	___xxtofl@arg+3,f,c
  2847  004B44  320D               	rrcf	___xxtofl@arg+2,f,c
  2848  004B46  320C               	rrcf	___xxtofl@arg+1,f,c
  2849  004B48  320B               	rrcf	___xxtofl@arg,f,c
  2850  004B4A                     l1575:
  2851  004B4A  0E00               	movlw	0
  2852  004B4C  140B               	andwf	___xxtofl@arg,w,c
  2853  004B4E  6E05               	movwf	??___xxtofl& (0+255),c
  2854  004B50  0E00               	movlw	0
  2855  004B52  140C               	andwf	___xxtofl@arg+1,w,c
  2856  004B54  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  2857  004B56  0E00               	movlw	0
  2858  004B58  140D               	andwf	___xxtofl@arg+2,w,c
  2859  004B5A  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  2860  004B5C  0EFF               	movlw	255
  2861  004B5E  140E               	andwf	___xxtofl@arg+3,w,c
  2862  004B60  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  2863  004B62  5005               	movf	??___xxtofl,w,c
  2864  004B64  1006               	iorwf	??___xxtofl+1,w,c
  2865  004B66  1007               	iorwf	??___xxtofl+2,w,c
  2866  004B68  1008               	iorwf	??___xxtofl+3,w,c
  2867  004B6A  B4D8               	btfsc	status,2,c
  2868  004B6C  D007               	goto	l6596
  2869  004B6E  D7E1               	goto	l6588
  2870  004B70                     l6594:
  2871  004B70  060A               	decf	___xxtofl@exp,f,c
  2872  004B72  90D8               	bcf	status,0,c
  2873  004B74  360B               	rlcf	___xxtofl@arg,f,c
  2874  004B76  360C               	rlcf	___xxtofl@arg+1,f,c
  2875  004B78  360D               	rlcf	___xxtofl@arg+2,f,c
  2876  004B7A  360E               	rlcf	___xxtofl@arg+3,f,c
  2877  004B7C                     l6596:
  2878  004B7C  BE0D               	btfsc	___xxtofl@arg+2,7,c
  2879  004B7E  D003               	goto	u9040
  2880  004B80  0E02               	movlw	2
  2881  004B82  600A               	cpfslt	___xxtofl@exp,c
  2882  004B84  D7F5               	goto	l6594
  2883  004B86                     u9040:
  2884  004B86  A00A               	btfss	___xxtofl@exp,0,c
  2885  004B88  9E0D               	bcf	___xxtofl@arg+2,7,c
  2886  004B8A  90D8               	bcf	status,0,c
  2887  004B8C  320A               	rrcf	___xxtofl@exp,f,c
  2888  004B8E  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2889  004B92  6A06               	clrf	(??___xxtofl+1)& (0+255),c
  2890  004B94  6A07               	clrf	(??___xxtofl+2)& (0+255),c
  2891  004B96  6A08               	clrf	(??___xxtofl+3)& (0+255),c
  2892  004B98  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2893  004B9C  6A07               	clrf	??___xxtofl+2,c
  2894  004B9E  6A06               	clrf	??___xxtofl+1,c
  2895  004BA0  6A05               	clrf	??___xxtofl,c
  2896  004BA2  5005               	movf	??___xxtofl,w,c
  2897  004BA4  120B               	iorwf	___xxtofl@arg,f,c
  2898  004BA6  5006               	movf	??___xxtofl+1,w,c
  2899  004BA8  120C               	iorwf	___xxtofl@arg+1,f,c
  2900  004BAA  5007               	movf	??___xxtofl+2,w,c
  2901  004BAC  120D               	iorwf	___xxtofl@arg+2,f,c
  2902  004BAE  5008               	movf	??___xxtofl+3,w,c
  2903  004BB0  120E               	iorwf	___xxtofl@arg+3,f,c
  2904  004BB2  5009               	movf	___xxtofl@sign,w,c
  2905  004BB4  A4D8               	btfss	status,2,c
  2906  004BB6  AE04               	btfss	___xxtofl@val+3,7,c
  2907  004BB8  D001               	goto	l6612
  2908  004BBA  8E0E               	bsf	___xxtofl@arg+3,7,c
  2909  004BBC                     l6612:
  2910  004BBC  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2911  004BC0  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2912  004BC4  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2913  004BC8  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2914  004BCC  0012               	return		;funcret
  2915  004BCE                     __end_of___xxtofl:
  2916                           	opt callstack 0
  2917                           
  2918 ;; *************** function ___flmul *****************
  2919 ;; Defined at:
  2920 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcmul.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  b               4   14[COMRAM] unsigned char 
  2923 ;;  a               4   18[COMRAM] unsigned char 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  prod            4   33[COMRAM] struct .
  2926 ;;  grs             4   27[COMRAM] unsigned long 
  2927 ;;  temp            2   37[COMRAM] struct .
  2928 ;;  bexp            1   32[COMRAM] unsigned char 
  2929 ;;  aexp            1   31[COMRAM] unsigned char 
  2930 ;;  sign            1   26[COMRAM] unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  4   14[COMRAM] unsigned char 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, status,0, prodl, prodh
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2940 ;;      Params:         8       0       0       0       0       0       0       0       0
  2941 ;;      Locals:        13       0       0       0       0       0       0       0       0
  2942 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2943 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2944 ;;Total ram usage:       25 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_grabador
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text6
  2954  00335C                     __ptext6:
  2955                           	opt callstack 0
  2956  00335C                     ___flmul:
  2957                           	opt callstack 28
  2958                           
  2959                           ;incstack = 0
  2960  00335C  5012               	movf	___flmul@b+3,w,c
  2961  00335E  0B80               	andlw	128
  2962  003360  6E1B               	movwf	___flmul@sign,c
  2963  003362  5012               	movf	___flmul@b+3,w,c
  2964  003364  2412               	addwf	___flmul@b+3,w,c
  2965  003366  6E21               	movwf	___flmul@bexp,c
  2966  003368  BE11               	btfsc	___flmul@b+2,7,c
  2967  00336A  8021               	bsf	___flmul@bexp,0,c
  2968  00336C  5021               	movf	___flmul@bexp,w,c
  2969  00336E  B4D8               	btfsc	status,2,c
  2970  003370  D00D               	goto	l6454
  2971  003372  2821               	incf	___flmul@bexp,w,c
  2972  003374  A4D8               	btfss	status,2,c
  2973  003376  D008               	goto	l6452
  2974  003378  0E00               	movlw	0
  2975  00337A  6E0F               	movwf	___flmul@b,c
  2976  00337C  0E00               	movlw	0
  2977  00337E  6E10               	movwf	___flmul@b+1,c
  2978  003380  0E00               	movlw	0
  2979  003382  6E11               	movwf	___flmul@b+2,c
  2980  003384  0E00               	movlw	0
  2981  003386  6E12               	movwf	___flmul@b+3,c
  2982  003388                     l6452:
  2983  003388  8E11               	bsf	___flmul@b+2,7,c
  2984  00338A  D008               	goto	l6456
  2985  00338C                     l6454:
  2986  00338C  0E00               	movlw	0
  2987  00338E  6E0F               	movwf	___flmul@b,c
  2988  003390  0E00               	movlw	0
  2989  003392  6E10               	movwf	___flmul@b+1,c
  2990  003394  0E00               	movlw	0
  2991  003396  6E11               	movwf	___flmul@b+2,c
  2992  003398  0E00               	movlw	0
  2993  00339A  6E12               	movwf	___flmul@b+3,c
  2994  00339C                     l6456:
  2995  00339C  5016               	movf	___flmul@a+3,w,c
  2996  00339E  0B80               	andlw	128
  2997  0033A0  1A1B               	xorwf	___flmul@sign,f,c
  2998  0033A2  5016               	movf	___flmul@a+3,w,c
  2999  0033A4  2416               	addwf	___flmul@a+3,w,c
  3000  0033A6  6E20               	movwf	___flmul@aexp,c
  3001  0033A8  BE15               	btfsc	___flmul@a+2,7,c
  3002  0033AA  8020               	bsf	___flmul@aexp,0,c
  3003  0033AC  5020               	movf	___flmul@aexp,w,c
  3004  0033AE  B4D8               	btfsc	status,2,c
  3005  0033B0  D00D               	goto	l6472
  3006  0033B2  2820               	incf	___flmul@aexp,w,c
  3007  0033B4  A4D8               	btfss	status,2,c
  3008  0033B6  D008               	goto	l6470
  3009  0033B8  0E00               	movlw	0
  3010  0033BA  6E13               	movwf	___flmul@a,c
  3011  0033BC  0E00               	movlw	0
  3012  0033BE  6E14               	movwf	___flmul@a+1,c
  3013  0033C0  0E00               	movlw	0
  3014  0033C2  6E15               	movwf	___flmul@a+2,c
  3015  0033C4  0E00               	movlw	0
  3016  0033C6  6E16               	movwf	___flmul@a+3,c
  3017  0033C8                     l6470:
  3018  0033C8  8E15               	bsf	___flmul@a+2,7,c
  3019  0033CA  D008               	goto	l1527
  3020  0033CC                     l6472:
  3021  0033CC  0E00               	movlw	0
  3022  0033CE  6E13               	movwf	___flmul@a,c
  3023  0033D0  0E00               	movlw	0
  3024  0033D2  6E14               	movwf	___flmul@a+1,c
  3025  0033D4  0E00               	movlw	0
  3026  0033D6  6E15               	movwf	___flmul@a+2,c
  3027  0033D8  0E00               	movlw	0
  3028  0033DA  6E16               	movwf	___flmul@a+3,c
  3029  0033DC                     l1527:
  3030  0033DC  5020               	movf	___flmul@aexp,w,c
  3031  0033DE  B4D8               	btfsc	status,2,c
  3032  0033E0  D003               	goto	u8860
  3033  0033E2  5021               	movf	___flmul@bexp,w,c
  3034  0033E4  A4D8               	btfss	status,2,c
  3035  0033E6  D009               	goto	l6480
  3036  0033E8                     u8860:
  3037  0033E8  0E00               	movlw	0
  3038  0033EA  6E0F               	movwf	?___flmul,c
  3039  0033EC  0E00               	movlw	0
  3040  0033EE  6E10               	movwf	?___flmul+1,c
  3041  0033F0  0E00               	movlw	0
  3042  0033F2  6E11               	movwf	?___flmul+2,c
  3043  0033F4  0E00               	movlw	0
  3044  0033F6  6E12               	movwf	?___flmul+3,c
  3045  0033F8  0012               	return	
  3046  0033FA                     l6480:
  3047  0033FA  5015               	movf	___flmul@a+2,w,c
  3048  0033FC  020F               	mulwf	___flmul@b,c
  3049  0033FE  CFF3 F026          	movff	prodl,___flmul@temp
  3050  003402  CFF4 F027          	movff	prodh,___flmul@temp+1
  3051  003406  5026               	movf	___flmul@temp,w,c
  3052  003408  6E1C               	movwf	___flmul@grs,c
  3053  00340A  6A1D               	clrf	___flmul@grs+1,c
  3054  00340C  6A1E               	clrf	___flmul@grs+2,c
  3055  00340E  6A1F               	clrf	___flmul@grs+3,c
  3056  003410  5027               	movf	___flmul@temp+1,w,c
  3057  003412  6E22               	movwf	___flmul@prod,c
  3058  003414  6A23               	clrf	___flmul@prod+1,c
  3059  003416  6A24               	clrf	___flmul@prod+2,c
  3060  003418  6A25               	clrf	___flmul@prod+3,c
  3061  00341A  5014               	movf	___flmul@a+1,w,c
  3062  00341C  0210               	mulwf	___flmul@b+1,c
  3063  00341E  CFF3 F026          	movff	prodl,___flmul@temp
  3064  003422  CFF4 F027          	movff	prodh,___flmul@temp+1
  3065  003426  5026               	movf	___flmul@temp,w,c
  3066  003428  261C               	addwf	___flmul@grs,f,c
  3067  00342A  0E00               	movlw	0
  3068  00342C  221D               	addwfc	___flmul@grs+1,f,c
  3069  00342E  221E               	addwfc	___flmul@grs+2,f,c
  3070  003430  221F               	addwfc	___flmul@grs+3,f,c
  3071  003432  5027               	movf	___flmul@temp+1,w,c
  3072  003434  2622               	addwf	___flmul@prod,f,c
  3073  003436  0E00               	movlw	0
  3074  003438  2223               	addwfc	___flmul@prod+1,f,c
  3075  00343A  2224               	addwfc	___flmul@prod+2,f,c
  3076  00343C  2225               	addwfc	___flmul@prod+3,f,c
  3077  00343E  5013               	movf	___flmul@a,w,c
  3078  003440  0211               	mulwf	___flmul@b+2,c
  3079  003442  CFF3 F026          	movff	prodl,___flmul@temp
  3080  003446  CFF4 F027          	movff	prodh,___flmul@temp+1
  3081  00344A  5026               	movf	___flmul@temp,w,c
  3082  00344C  261C               	addwf	___flmul@grs,f,c
  3083  00344E  0E00               	movlw	0
  3084  003450  221D               	addwfc	___flmul@grs+1,f,c
  3085  003452  221E               	addwfc	___flmul@grs+2,f,c
  3086  003454  221F               	addwfc	___flmul@grs+3,f,c
  3087  003456  5027               	movf	___flmul@temp+1,w,c
  3088  003458  2622               	addwf	___flmul@prod,f,c
  3089  00345A  0E00               	movlw	0
  3090  00345C  2223               	addwfc	___flmul@prod+1,f,c
  3091  00345E  2224               	addwfc	___flmul@prod+2,f,c
  3092  003460  2225               	addwfc	___flmul@prod+3,f,c
  3093  003462  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3094  003466  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3095  00346A  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3096  00346E  6A1C               	clrf	___flmul@grs,c
  3097  003470  5013               	movf	___flmul@a,w,c
  3098  003472  0210               	mulwf	___flmul@b+1,c
  3099  003474  CFF3 F026          	movff	prodl,___flmul@temp
  3100  003478  CFF4 F027          	movff	prodh,___flmul@temp+1
  3101  00347C  5026               	movf	___flmul@temp,w,c
  3102  00347E  261C               	addwf	___flmul@grs,f,c
  3103  003480  5027               	movf	___flmul@temp+1,w,c
  3104  003482  221D               	addwfc	___flmul@grs+1,f,c
  3105  003484  0E00               	movlw	0
  3106  003486  221E               	addwfc	___flmul@grs+2,f,c
  3107  003488  0E00               	movlw	0
  3108  00348A  221F               	addwfc	___flmul@grs+3,f,c
  3109  00348C  5014               	movf	___flmul@a+1,w,c
  3110  00348E  020F               	mulwf	___flmul@b,c
  3111  003490  CFF3 F026          	movff	prodl,___flmul@temp
  3112  003494  CFF4 F027          	movff	prodh,___flmul@temp+1
  3113  003498  5026               	movf	___flmul@temp,w,c
  3114  00349A  261C               	addwf	___flmul@grs,f,c
  3115  00349C  5027               	movf	___flmul@temp+1,w,c
  3116  00349E  221D               	addwfc	___flmul@grs+1,f,c
  3117  0034A0  0E00               	movlw	0
  3118  0034A2  221E               	addwfc	___flmul@grs+2,f,c
  3119  0034A4  0E00               	movlw	0
  3120  0034A6  221F               	addwfc	___flmul@grs+3,f,c
  3121  0034A8  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3122  0034AC  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3123  0034B0  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3124  0034B4  6A1C               	clrf	___flmul@grs,c
  3125  0034B6  5013               	movf	___flmul@a,w,c
  3126  0034B8  020F               	mulwf	___flmul@b,c
  3127  0034BA  CFF3 F026          	movff	prodl,___flmul@temp
  3128  0034BE  CFF4 F027          	movff	prodh,___flmul@temp+1
  3129  0034C2  5026               	movf	___flmul@temp,w,c
  3130  0034C4  261C               	addwf	___flmul@grs,f,c
  3131  0034C6  5027               	movf	___flmul@temp+1,w,c
  3132  0034C8  221D               	addwfc	___flmul@grs+1,f,c
  3133  0034CA  0E00               	movlw	0
  3134  0034CC  221E               	addwfc	___flmul@grs+2,f,c
  3135  0034CE  0E00               	movlw	0
  3136  0034D0  221F               	addwfc	___flmul@grs+3,f,c
  3137  0034D2  5015               	movf	___flmul@a+2,w,c
  3138  0034D4  0210               	mulwf	___flmul@b+1,c
  3139  0034D6  CFF3 F026          	movff	prodl,___flmul@temp
  3140  0034DA  CFF4 F027          	movff	prodh,___flmul@temp+1
  3141  0034DE  5026               	movf	___flmul@temp,w,c
  3142  0034E0  2622               	addwf	___flmul@prod,f,c
  3143  0034E2  5027               	movf	___flmul@temp+1,w,c
  3144  0034E4  2223               	addwfc	___flmul@prod+1,f,c
  3145  0034E6  0E00               	movlw	0
  3146  0034E8  2224               	addwfc	___flmul@prod+2,f,c
  3147  0034EA  0E00               	movlw	0
  3148  0034EC  2225               	addwfc	___flmul@prod+3,f,c
  3149  0034EE  5014               	movf	___flmul@a+1,w,c
  3150  0034F0  0211               	mulwf	___flmul@b+2,c
  3151  0034F2  CFF3 F026          	movff	prodl,___flmul@temp
  3152  0034F6  CFF4 F027          	movff	prodh,___flmul@temp+1
  3153  0034FA  5026               	movf	___flmul@temp,w,c
  3154  0034FC  2622               	addwf	___flmul@prod,f,c
  3155  0034FE  5027               	movf	___flmul@temp+1,w,c
  3156  003500  2223               	addwfc	___flmul@prod+1,f,c
  3157  003502  0E00               	movlw	0
  3158  003504  2224               	addwfc	___flmul@prod+2,f,c
  3159  003506  0E00               	movlw	0
  3160  003508  2225               	addwfc	___flmul@prod+3,f,c
  3161  00350A  5015               	movf	___flmul@a+2,w,c
  3162  00350C  0211               	mulwf	___flmul@b+2,c
  3163  00350E  CFF3 F026          	movff	prodl,___flmul@temp
  3164  003512  CFF4 F027          	movff	prodh,___flmul@temp+1
  3165  003516  5026               	movf	___flmul@temp,w,c
  3166  003518  6E17               	movwf	??___flmul& (0+255),c
  3167  00351A  5027               	movf	___flmul@temp+1,w,c
  3168  00351C  6E18               	movwf	(??___flmul+1)& (0+255),c
  3169  00351E  6A19               	clrf	(??___flmul+2)& (0+255),c
  3170  003520  6A1A               	clrf	(??___flmul+3)& (0+255),c
  3171  003522  C019  F01A         	movff	??___flmul+2,??___flmul+3
  3172  003526  C018  F019         	movff	??___flmul+1,??___flmul+2
  3173  00352A  C017  F018         	movff	??___flmul,??___flmul+1
  3174  00352E  6A17               	clrf	??___flmul,c
  3175  003530  5017               	movf	??___flmul,w,c
  3176  003532  2622               	addwf	___flmul@prod,f,c
  3177  003534  5018               	movf	??___flmul+1,w,c
  3178  003536  2223               	addwfc	___flmul@prod+1,f,c
  3179  003538  5019               	movf	??___flmul+2,w,c
  3180  00353A  2224               	addwfc	___flmul@prod+2,f,c
  3181  00353C  501A               	movf	??___flmul+3,w,c
  3182  00353E  2225               	addwfc	___flmul@prod+3,f,c
  3183  003540  C01C  F017         	movff	___flmul@grs,??___flmul
  3184  003544  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  3185  003548  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  3186  00354C  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  3187  003550  0E19               	movlw	25
  3188  003552  D005               	goto	u8870
  3189  003554                     u8875:
  3190  003554  90D8               	bcf	status,0,c
  3191  003556  321A               	rrcf	??___flmul+3,f,c
  3192  003558  3219               	rrcf	??___flmul+2,f,c
  3193  00355A  3218               	rrcf	??___flmul+1,f,c
  3194  00355C  3217               	rrcf	??___flmul,f,c
  3195  00355E                     u8870:
  3196  00355E  2EE8               	decfsz	wreg,f,c
  3197  003560  D7F9               	goto	u8875
  3198  003562  5017               	movf	??___flmul,w,c
  3199  003564  2622               	addwf	___flmul@prod,f,c
  3200  003566  5018               	movf	??___flmul+1,w,c
  3201  003568  2223               	addwfc	___flmul@prod+1,f,c
  3202  00356A  5019               	movf	??___flmul+2,w,c
  3203  00356C  2224               	addwfc	___flmul@prod+2,f,c
  3204  00356E  501A               	movf	??___flmul+3,w,c
  3205  003570  2225               	addwfc	___flmul@prod+3,f,c
  3206  003572  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3207  003576  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3208  00357A  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3209  00357E  6A1C               	clrf	___flmul@grs,c
  3210  003580  5020               	movf	___flmul@aexp,w,c
  3211  003582  C021  F017         	movff	___flmul@bexp,??___flmul
  3212  003586  6A18               	clrf	(??___flmul+1)& (0+255),c
  3213  003588  2617               	addwf	??___flmul,f,c
  3214  00358A  0E00               	movlw	0
  3215  00358C  2218               	addwfc	??___flmul+1,f,c
  3216  00358E  0E82               	movlw	130
  3217  003590  2417               	addwf	??___flmul,w,c
  3218  003592  6E26               	movwf	___flmul@temp,c
  3219  003594  0EFF               	movlw	255
  3220  003596  2018               	addwfc	??___flmul+1,w,c
  3221  003598  6E27               	movwf	___flmul@temp+1,c
  3222  00359A  D00F               	goto	l6528
  3223  00359C                     l6522:
  3224  00359C  90D8               	bcf	status,0,c
  3225  00359E  3622               	rlcf	___flmul@prod,f,c
  3226  0035A0  3623               	rlcf	___flmul@prod+1,f,c
  3227  0035A2  3624               	rlcf	___flmul@prod+2,f,c
  3228  0035A4  3625               	rlcf	___flmul@prod+3,f,c
  3229  0035A6  BE1F               	btfsc	___flmul@grs+3,7,c
  3230  0035A8  8022               	bsf	___flmul@prod,0,c
  3231  0035AA  90D8               	bcf	status,0,c
  3232  0035AC  361C               	rlcf	___flmul@grs,f,c
  3233  0035AE  361D               	rlcf	___flmul@grs+1,f,c
  3234  0035B0  361E               	rlcf	___flmul@grs+2,f,c
  3235  0035B2  361F               	rlcf	___flmul@grs+3,f,c
  3236  0035B4  0626               	decf	___flmul@temp,f,c
  3237  0035B6  A0D8               	btfss	status,0,c
  3238  0035B8  0627               	decf	___flmul@temp+1,f,c
  3239  0035BA                     l6528:
  3240  0035BA  AE24               	btfss	___flmul@prod+2,7,c
  3241  0035BC  D7EF               	goto	l6522
  3242  0035BE  0E00               	movlw	0
  3243  0035C0  6E20               	movwf	___flmul@aexp,c
  3244  0035C2  AE1F               	btfss	___flmul@grs+3,7,c
  3245  0035C4  D017               	goto	l1536
  3246  0035C6  0EFF               	movlw	255
  3247  0035C8  141C               	andwf	___flmul@grs,w,c
  3248  0035CA  6E17               	movwf	??___flmul& (0+255),c
  3249  0035CC  0EFF               	movlw	255
  3250  0035CE  141D               	andwf	___flmul@grs+1,w,c
  3251  0035D0  6E18               	movwf	(??___flmul+1)& (0+255),c
  3252  0035D2  0EFF               	movlw	255
  3253  0035D4  141E               	andwf	___flmul@grs+2,w,c
  3254  0035D6  6E19               	movwf	(??___flmul+2)& (0+255),c
  3255  0035D8  0E7F               	movlw	127
  3256  0035DA  141F               	andwf	___flmul@grs+3,w,c
  3257  0035DC  6E1A               	movwf	(??___flmul+3)& (0+255),c
  3258  0035DE  5017               	movf	??___flmul,w,c
  3259  0035E0  1018               	iorwf	??___flmul+1,w,c
  3260  0035E2  1019               	iorwf	??___flmul+2,w,c
  3261  0035E4  101A               	iorwf	??___flmul+3,w,c
  3262  0035E6  B4D8               	btfsc	status,2,c
  3263  0035E8  D003               	goto	l1537
  3264  0035EA                     u8910:
  3265  0035EA  0E01               	movlw	1
  3266  0035EC  6E20               	movwf	___flmul@aexp,c
  3267  0035EE  D002               	goto	l1536
  3268  0035F0                     l1537:
  3269  0035F0  B022               	btfsc	___flmul@prod,0,c
  3270  0035F2  D7FB               	goto	u8910
  3271  0035F4                     l1536:
  3272  0035F4  5020               	movf	___flmul@aexp,w,c
  3273  0035F6  B4D8               	btfsc	status,2,c
  3274  0035F8  D01F               	goto	l6548
  3275  0035FA  0E01               	movlw	1
  3276  0035FC  2622               	addwf	___flmul@prod,f,c
  3277  0035FE  0E00               	movlw	0
  3278  003600  2223               	addwfc	___flmul@prod+1,f,c
  3279  003602  2224               	addwfc	___flmul@prod+2,f,c
  3280  003604  2225               	addwfc	___flmul@prod+3,f,c
  3281  003606  A025               	btfss	___flmul@prod+3,0,c
  3282  003608  D017               	goto	l6548
  3283  00360A  C022  F017         	movff	___flmul@prod,??___flmul
  3284  00360E  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  3285  003612  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  3286  003616  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  3287  00361A  341A               	rlcf	??___flmul+3,w,c
  3288  00361C  321A               	rrcf	??___flmul+3,f,c
  3289  00361E  3219               	rrcf	??___flmul+2,f,c
  3290  003620  3218               	rrcf	??___flmul+1,f,c
  3291  003622  3217               	rrcf	??___flmul,f,c
  3292  003624  C017  F022         	movff	??___flmul,___flmul@prod
  3293  003628  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  3294  00362C  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  3295  003630  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  3296  003634  4A26               	infsnz	___flmul@temp,f,c
  3297  003636  2A27               	incf	___flmul@temp+1,f,c
  3298  003638                     l6548:
  3299  003638  BE27               	btfsc	___flmul@temp+1,7,c
  3300  00363A  D00D               	goto	l6552
  3301  00363C  5027               	movf	___flmul@temp+1,w,c
  3302  00363E  E103               	bnz	u8950
  3303  003640  2826               	incf	___flmul@temp,w,c
  3304  003642  A0D8               	btfss	status,0,c
  3305  003644  D008               	goto	l6552
  3306  003646                     u8950:
  3307  003646  0E00               	movlw	0
  3308  003648  6E22               	movwf	___flmul@prod,c
  3309  00364A  0E00               	movlw	0
  3310  00364C  6E23               	movwf	___flmul@prod+1,c
  3311  00364E  0E80               	movlw	128
  3312  003650  6E24               	movwf	___flmul@prod+2,c
  3313  003652  0E7F               	movlw	127
  3314  003654  D020               	goto	L2
  3315  003656                     l6552:
  3316  003656  BE27               	btfsc	___flmul@temp+1,7,c
  3317  003658  D005               	goto	u8960
  3318  00365A  5027               	movf	___flmul@temp+1,w,c
  3319  00365C  E10E               	bnz	l1544
  3320  00365E  0426               	decf	___flmul@temp,w,c
  3321  003660  B0D8               	btfsc	status,0,c
  3322  003662  D00B               	goto	l1544
  3323  003664                     u8960:
  3324  003664  0E00               	movlw	0
  3325  003666  6E22               	movwf	___flmul@prod,c
  3326  003668  0E00               	movlw	0
  3327  00366A  6E23               	movwf	___flmul@prod+1,c
  3328  00366C  0E00               	movlw	0
  3329  00366E  6E24               	movwf	___flmul@prod+2,c
  3330  003670  0E00               	movlw	0
  3331  003672  6E25               	movwf	___flmul@prod+3,c
  3332  003674  0E00               	movlw	0
  3333  003676  6E1B               	movwf	___flmul@sign,c
  3334  003678  D00F               	goto	l6564
  3335  00367A                     l1544:
  3336  00367A  C026  F021         	movff	___flmul@temp,___flmul@bexp
  3337  00367E  0EFF               	movlw	255
  3338  003680  1622               	andwf	___flmul@prod,f,c
  3339  003682  0EFF               	movlw	255
  3340  003684  1623               	andwf	___flmul@prod+1,f,c
  3341  003686  0E7F               	movlw	127
  3342  003688  1624               	andwf	___flmul@prod+2,f,c
  3343  00368A  0E00               	movlw	0
  3344  00368C  1625               	andwf	___flmul@prod+3,f,c
  3345  00368E  B021               	btfsc	___flmul@bexp,0,c
  3346  003690  8E24               	bsf	___flmul@prod+2,7,c
  3347  003692  90D8               	bcf	status,0,c
  3348  003694  3021               	rrcf	___flmul@bexp,w,c
  3349  003696                     L2:
  3350  003696  6E25               	movwf	___flmul@prod+3,c
  3351  003698                     l6564:
  3352  003698  501B               	movf	___flmul@sign,w,c
  3353  00369A  1225               	iorwf	___flmul@prod+3,f,c
  3354  00369C  C022  F00F         	movff	___flmul@prod,?___flmul
  3355  0036A0  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  3356  0036A4  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  3357  0036A8  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  3358  0036AC  0012               	return		;funcret
  3359  0036AE                     __end_of___flmul:
  3360                           	opt callstack 0
  3361                           
  3362 ;; *************** function ___fldiv *****************
  3363 ;; Defined at:
  3364 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcdiv.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  b               4   39[COMRAM] unsigned char 
  3367 ;;  a               4   43[COMRAM] unsigned char 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  grs             4   58[COMRAM] unsigned long 
  3370 ;;  rem             4   51[COMRAM] unsigned long 
  3371 ;;  new_exp         2   56[COMRAM] short 
  3372 ;;  aexp            1   63[COMRAM] unsigned char 
  3373 ;;  bexp            1   62[COMRAM] unsigned char 
  3374 ;;  sign            1   55[COMRAM] unsigned char 
  3375 ;; Return value:  Size  Location     Type
  3376 ;;                  4   39[COMRAM] unsigned char 
  3377 ;; Registers used:
  3378 ;;		wreg, status,2, status,0
  3379 ;; Tracked objects:
  3380 ;;		On entry : 0/0
  3381 ;;		On exit  : 0/0
  3382 ;;		Unchanged: 0/0
  3383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3384 ;;      Params:         8       0       0       0       0       0       0       0       0
  3385 ;;      Locals:        13       0       0       0       0       0       0       0       0
  3386 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3387 ;;      Totals:        25       0       0       0       0       0       0       0       0
  3388 ;;Total ram usage:       25 bytes
  3389 ;; Hardware stack levels used:    1
  3390 ;; This function calls:
  3391 ;;		Nothing
  3392 ;; This function is called by:
  3393 ;;		_grabador
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text7
  3398  003EF6                     __ptext7:
  3399                           	opt callstack 0
  3400  003EF6                     ___fldiv:
  3401                           	opt callstack 28
  3402                           
  3403                           ;incstack = 0
  3404  003EF6  502B               	movf	___fldiv@b+3,w,c
  3405  003EF8  0B80               	andlw	128
  3406  003EFA  6E38               	movwf	___fldiv@sign,c
  3407  003EFC  502B               	movf	___fldiv@b+3,w,c
  3408  003EFE  242B               	addwf	___fldiv@b+3,w,c
  3409  003F00  6E3F               	movwf	___fldiv@bexp,c
  3410  003F02  BE2A               	btfsc	___fldiv@b+2,7,c
  3411  003F04  803F               	bsf	___fldiv@bexp,0,c
  3412  003F06  503F               	movf	___fldiv@bexp,w,c
  3413  003F08  B4D8               	btfsc	status,2,c
  3414  003F0A  D00D               	goto	l6318
  3415  003F0C  283F               	incf	___fldiv@bexp,w,c
  3416  003F0E  A4D8               	btfss	status,2,c
  3417  003F10  D008               	goto	l6314
  3418  003F12  0E00               	movlw	0
  3419  003F14  6E28               	movwf	___fldiv@b,c
  3420  003F16  0E00               	movlw	0
  3421  003F18  6E29               	movwf	___fldiv@b+1,c
  3422  003F1A  0E00               	movlw	0
  3423  003F1C  6E2A               	movwf	___fldiv@b+2,c
  3424  003F1E  0E00               	movlw	0
  3425  003F20  6E2B               	movwf	___fldiv@b+3,c
  3426  003F22                     l6314:
  3427  003F22  8E2A               	bsf	___fldiv@b+2,7,c
  3428  003F24  D006               	goto	L3
  3429  003F26                     l6318:
  3430  003F26  0E00               	movlw	0
  3431  003F28  6E28               	movwf	___fldiv@b,c
  3432  003F2A  0E00               	movlw	0
  3433  003F2C  6E29               	movwf	___fldiv@b+1,c
  3434  003F2E  0E00               	movlw	0
  3435  003F30  6E2A               	movwf	___fldiv@b+2,c
  3436  003F32                     L3:
  3437  003F32  0E00               	movlw	0
  3438  003F34  6E2B               	movwf	___fldiv@b+3,c
  3439  003F36  502F               	movf	___fldiv@a+3,w,c
  3440  003F38  0B80               	andlw	128
  3441  003F3A  1A38               	xorwf	___fldiv@sign,f,c
  3442  003F3C  502F               	movf	___fldiv@a+3,w,c
  3443  003F3E  242F               	addwf	___fldiv@a+3,w,c
  3444  003F40  6E40               	movwf	___fldiv@aexp,c
  3445  003F42  BE2E               	btfsc	___fldiv@a+2,7,c
  3446  003F44  8040               	bsf	___fldiv@aexp,0,c
  3447  003F46  5040               	movf	___fldiv@aexp,w,c
  3448  003F48  B4D8               	btfsc	status,2,c
  3449  003F4A  D00D               	goto	l6338
  3450  003F4C  2840               	incf	___fldiv@aexp,w,c
  3451  003F4E  A4D8               	btfss	status,2,c
  3452  003F50  D008               	goto	l6334
  3453  003F52  0E00               	movlw	0
  3454  003F54  6E2C               	movwf	___fldiv@a,c
  3455  003F56  0E00               	movlw	0
  3456  003F58  6E2D               	movwf	___fldiv@a+1,c
  3457  003F5A  0E00               	movlw	0
  3458  003F5C  6E2E               	movwf	___fldiv@a+2,c
  3459  003F5E  0E00               	movlw	0
  3460  003F60  6E2F               	movwf	___fldiv@a+3,c
  3461  003F62                     l6334:
  3462  003F62  8E2E               	bsf	___fldiv@a+2,7,c
  3463  003F64  D006               	goto	L4
  3464  003F66                     l6338:
  3465  003F66  0E00               	movlw	0
  3466  003F68  6E2C               	movwf	___fldiv@a,c
  3467  003F6A  0E00               	movlw	0
  3468  003F6C  6E2D               	movwf	___fldiv@a+1,c
  3469  003F6E  0E00               	movlw	0
  3470  003F70  6E2E               	movwf	___fldiv@a+2,c
  3471  003F72                     L4:
  3472  003F72  0E00               	movlw	0
  3473  003F74  6E2F               	movwf	___fldiv@a+3,c
  3474  003F76  502C               	movf	___fldiv@a,w,c
  3475  003F78  102D               	iorwf	___fldiv@a+1,w,c
  3476  003F7A  102E               	iorwf	___fldiv@a+2,w,c
  3477  003F7C  102F               	iorwf	___fldiv@a+3,w,c
  3478  003F7E  A4D8               	btfss	status,2,c
  3479  003F80  D017               	goto	l6352
  3480  003F82  0E00               	movlw	0
  3481  003F84  6E28               	movwf	___fldiv@b,c
  3482  003F86  0E00               	movlw	0
  3483  003F88  6E29               	movwf	___fldiv@b+1,c
  3484  003F8A  0E00               	movlw	0
  3485  003F8C  6E2A               	movwf	___fldiv@b+2,c
  3486  003F8E  0E00               	movlw	0
  3487  003F90  6E2B               	movwf	___fldiv@b+3,c
  3488  003F92  0E80               	movlw	128
  3489  003F94  122A               	iorwf	___fldiv@b+2,f,c
  3490  003F96  0E7F               	movlw	127
  3491  003F98  122B               	iorwf	___fldiv@b+3,f,c
  3492  003F9A                     l6346:
  3493  003F9A  5038               	movf	___fldiv@sign,w,c
  3494  003F9C  122B               	iorwf	___fldiv@b+3,f,c
  3495  003F9E  C028  F028         	movff	___fldiv@b,?___fldiv
  3496  003FA2  C029  F029         	movff	___fldiv@b+1,?___fldiv+1
  3497  003FA6  C02A  F02A         	movff	___fldiv@b+2,?___fldiv+2
  3498  003FAA  C02B  F02B         	movff	___fldiv@b+3,?___fldiv+3
  3499  003FAE  0012               	return	
  3500  003FB0                     l6352:
  3501  003FB0  503F               	movf	___fldiv@bexp,w,c
  3502  003FB2  A4D8               	btfss	status,2,c
  3503  003FB4  D009               	goto	l6360
  3504  003FB6  0E00               	movlw	0
  3505  003FB8  6E28               	movwf	?___fldiv,c
  3506  003FBA  0E00               	movlw	0
  3507  003FBC  6E29               	movwf	?___fldiv+1,c
  3508  003FBE  0E00               	movlw	0
  3509  003FC0  6E2A               	movwf	?___fldiv+2,c
  3510  003FC2  0E00               	movlw	0
  3511  003FC4  6E2B               	movwf	?___fldiv+3,c
  3512  003FC6  0012               	return	
  3513  003FC8                     l6360:
  3514  003FC8  5040               	movf	___fldiv@aexp,w,c
  3515  003FCA  C03F  F030         	movff	___fldiv@bexp,??___fldiv
  3516  003FCE  6A31               	clrf	(??___fldiv+1)& (0+255),c
  3517  003FD0  5E30               	subwf	??___fldiv,f,c
  3518  003FD2  0E00               	movlw	0
  3519  003FD4  5A31               	subwfb	??___fldiv+1,f,c
  3520  003FD6  0E7F               	movlw	127
  3521  003FD8  2430               	addwf	??___fldiv,w,c
  3522  003FDA  6E39               	movwf	___fldiv@new_exp,c
  3523  003FDC  0E00               	movlw	0
  3524  003FDE  2031               	addwfc	??___fldiv+1,w,c
  3525  003FE0  6E3A               	movwf	___fldiv@new_exp+1,c
  3526  003FE2  C028  F034         	movff	___fldiv@b,___fldiv@rem
  3527  003FE6  C029  F035         	movff	___fldiv@b+1,___fldiv@rem+1
  3528  003FEA  C02A  F036         	movff	___fldiv@b+2,___fldiv@rem+2
  3529  003FEE  C02B  F037         	movff	___fldiv@b+3,___fldiv@rem+3
  3530  003FF2  0E00               	movlw	0
  3531  003FF4  6E28               	movwf	___fldiv@b,c
  3532  003FF6  0E00               	movlw	0
  3533  003FF8  6E29               	movwf	___fldiv@b+1,c
  3534  003FFA  0E00               	movlw	0
  3535  003FFC  6E2A               	movwf	___fldiv@b+2,c
  3536  003FFE  0E00               	movlw	0
  3537  004000  6E2B               	movwf	___fldiv@b+3,c
  3538  004002  0E00               	movlw	0
  3539  004004  6E3B               	movwf	___fldiv@grs,c
  3540  004006  0E00               	movlw	0
  3541  004008  6E3C               	movwf	___fldiv@grs+1,c
  3542  00400A  0E00               	movlw	0
  3543  00400C  6E3D               	movwf	___fldiv@grs+2,c
  3544  00400E  0E00               	movlw	0
  3545  004010  6E3E               	movwf	___fldiv@grs+3,c
  3546  004012  0E00               	movlw	0
  3547  004014  6E40               	movwf	___fldiv@aexp,c
  3548  004016  D028               	goto	l1497
  3549  004018                     l6370:
  3550  004018  5040               	movf	___fldiv@aexp,w,c
  3551  00401A  B4D8               	btfsc	status,2,c
  3552  00401C  D011               	goto	l6378
  3553  00401E  90D8               	bcf	status,0,c
  3554  004020  3634               	rlcf	___fldiv@rem,f,c
  3555  004022  3635               	rlcf	___fldiv@rem+1,f,c
  3556  004024  3636               	rlcf	___fldiv@rem+2,f,c
  3557  004026  3637               	rlcf	___fldiv@rem+3,f,c
  3558  004028  90D8               	bcf	status,0,c
  3559  00402A  3628               	rlcf	___fldiv@b,f,c
  3560  00402C  3629               	rlcf	___fldiv@b+1,f,c
  3561  00402E  362A               	rlcf	___fldiv@b+2,f,c
  3562  004030  362B               	rlcf	___fldiv@b+3,f,c
  3563  004032  BE3E               	btfsc	___fldiv@grs+3,7,c
  3564  004034  8028               	bsf	___fldiv@b,0,c
  3565  004036  90D8               	bcf	status,0,c
  3566  004038  363B               	rlcf	___fldiv@grs,f,c
  3567  00403A  363C               	rlcf	___fldiv@grs+1,f,c
  3568  00403C  363D               	rlcf	___fldiv@grs+2,f,c
  3569  00403E  363E               	rlcf	___fldiv@grs+3,f,c
  3570  004040                     l6378:
  3571  004040  502C               	movf	___fldiv@a,w,c
  3572  004042  5C34               	subwf	___fldiv@rem,w,c
  3573  004044  502D               	movf	___fldiv@a+1,w,c
  3574  004046  5835               	subwfb	___fldiv@rem+1,w,c
  3575  004048  502E               	movf	___fldiv@a+2,w,c
  3576  00404A  5836               	subwfb	___fldiv@rem+2,w,c
  3577  00404C  502F               	movf	___fldiv@a+3,w,c
  3578  00404E  5837               	subwfb	___fldiv@rem+3,w,c
  3579  004050  A0D8               	btfss	status,0,c
  3580  004052  D009               	goto	l6384
  3581  004054  8C3E               	bsf	___fldiv@grs+3,6,c
  3582  004056  502C               	movf	___fldiv@a,w,c
  3583  004058  5E34               	subwf	___fldiv@rem,f,c
  3584  00405A  502D               	movf	___fldiv@a+1,w,c
  3585  00405C  5A35               	subwfb	___fldiv@rem+1,f,c
  3586  00405E  502E               	movf	___fldiv@a+2,w,c
  3587  004060  5A36               	subwfb	___fldiv@rem+2,f,c
  3588  004062  502F               	movf	___fldiv@a+3,w,c
  3589  004064  5A37               	subwfb	___fldiv@rem+3,f,c
  3590  004066                     l6384:
  3591  004066  2A40               	incf	___fldiv@aexp,f,c
  3592  004068                     l1497:
  3593  004068  0E19               	movlw	25
  3594  00406A  6440               	cpfsgt	___fldiv@aexp,c
  3595  00406C  D7D5               	goto	l6370
  3596  00406E  5034               	movf	___fldiv@rem,w,c
  3597  004070  1035               	iorwf	___fldiv@rem+1,w,c
  3598  004072  1036               	iorwf	___fldiv@rem+2,w,c
  3599  004074  1037               	iorwf	___fldiv@rem+3,w,c
  3600  004076  B4D8               	btfsc	status,2,c
  3601  004078  D011               	goto	l6396
  3602  00407A  803B               	bsf	___fldiv@grs,0,c
  3603  00407C  D00F               	goto	l6396
  3604  00407E                     l6390:
  3605  00407E  90D8               	bcf	status,0,c
  3606  004080  3628               	rlcf	___fldiv@b,f,c
  3607  004082  3629               	rlcf	___fldiv@b+1,f,c
  3608  004084  362A               	rlcf	___fldiv@b+2,f,c
  3609  004086  362B               	rlcf	___fldiv@b+3,f,c
  3610  004088  BE3E               	btfsc	___fldiv@grs+3,7,c
  3611  00408A  8028               	bsf	___fldiv@b,0,c
  3612  00408C  90D8               	bcf	status,0,c
  3613  00408E  363B               	rlcf	___fldiv@grs,f,c
  3614  004090  363C               	rlcf	___fldiv@grs+1,f,c
  3615  004092  363D               	rlcf	___fldiv@grs+2,f,c
  3616  004094  363E               	rlcf	___fldiv@grs+3,f,c
  3617  004096  0639               	decf	___fldiv@new_exp,f,c
  3618  004098  A0D8               	btfss	status,0,c
  3619  00409A  063A               	decf	___fldiv@new_exp+1,f,c
  3620  00409C                     l6396:
  3621  00409C  AE2A               	btfss	___fldiv@b+2,7,c
  3622  00409E  D7EF               	goto	l6390
  3623  0040A0  0E00               	movlw	0
  3624  0040A2  6E40               	movwf	___fldiv@aexp,c
  3625  0040A4  AE3E               	btfss	___fldiv@grs+3,7,c
  3626  0040A6  D017               	goto	l1508
  3627  0040A8  0EFF               	movlw	255
  3628  0040AA  143B               	andwf	___fldiv@grs,w,c
  3629  0040AC  6E30               	movwf	??___fldiv& (0+255),c
  3630  0040AE  0EFF               	movlw	255
  3631  0040B0  143C               	andwf	___fldiv@grs+1,w,c
  3632  0040B2  6E31               	movwf	(??___fldiv+1)& (0+255),c
  3633  0040B4  0EFF               	movlw	255
  3634  0040B6  143D               	andwf	___fldiv@grs+2,w,c
  3635  0040B8  6E32               	movwf	(??___fldiv+2)& (0+255),c
  3636  0040BA  0E7F               	movlw	127
  3637  0040BC  143E               	andwf	___fldiv@grs+3,w,c
  3638  0040BE  6E33               	movwf	(??___fldiv+3)& (0+255),c
  3639  0040C0  5030               	movf	??___fldiv,w,c
  3640  0040C2  1031               	iorwf	??___fldiv+1,w,c
  3641  0040C4  1032               	iorwf	??___fldiv+2,w,c
  3642  0040C6  1033               	iorwf	??___fldiv+3,w,c
  3643  0040C8  B4D8               	btfsc	status,2,c
  3644  0040CA  D003               	goto	l1509
  3645  0040CC                     u8720:
  3646  0040CC  0E01               	movlw	1
  3647  0040CE  6E40               	movwf	___fldiv@aexp,c
  3648  0040D0  D002               	goto	l1508
  3649  0040D2                     l1509:
  3650  0040D2  B028               	btfsc	___fldiv@b,0,c
  3651  0040D4  D7FB               	goto	u8720
  3652  0040D6                     l1508:
  3653  0040D6  5040               	movf	___fldiv@aexp,w,c
  3654  0040D8  B4D8               	btfsc	status,2,c
  3655  0040DA  D01F               	goto	l6416
  3656  0040DC  0E01               	movlw	1
  3657  0040DE  2628               	addwf	___fldiv@b,f,c
  3658  0040E0  0E00               	movlw	0
  3659  0040E2  2229               	addwfc	___fldiv@b+1,f,c
  3660  0040E4  222A               	addwfc	___fldiv@b+2,f,c
  3661  0040E6  222B               	addwfc	___fldiv@b+3,f,c
  3662  0040E8  A02B               	btfss	___fldiv@b+3,0,c
  3663  0040EA  D017               	goto	l6416
  3664  0040EC  C028  F030         	movff	___fldiv@b,??___fldiv
  3665  0040F0  C029  F031         	movff	___fldiv@b+1,??___fldiv+1
  3666  0040F4  C02A  F032         	movff	___fldiv@b+2,??___fldiv+2
  3667  0040F8  C02B  F033         	movff	___fldiv@b+3,??___fldiv+3
  3668  0040FC  3433               	rlcf	??___fldiv+3,w,c
  3669  0040FE  3233               	rrcf	??___fldiv+3,f,c
  3670  004100  3232               	rrcf	??___fldiv+2,f,c
  3671  004102  3231               	rrcf	??___fldiv+1,f,c
  3672  004104  3230               	rrcf	??___fldiv,f,c
  3673  004106  C030  F028         	movff	??___fldiv,___fldiv@b
  3674  00410A  C031  F029         	movff	??___fldiv+1,___fldiv@b+1
  3675  00410E  C032  F02A         	movff	??___fldiv+2,___fldiv@b+2
  3676  004112  C033  F02B         	movff	??___fldiv+3,___fldiv@b+3
  3677  004116  4A39               	infsnz	___fldiv@new_exp,f,c
  3678  004118  2A3A               	incf	___fldiv@new_exp+1,f,c
  3679  00411A                     l6416:
  3680  00411A  BE3A               	btfsc	___fldiv@new_exp+1,7,c
  3681  00411C  D010               	goto	l6420
  3682  00411E  503A               	movf	___fldiv@new_exp+1,w,c
  3683  004120  E103               	bnz	u8760
  3684  004122  2839               	incf	___fldiv@new_exp,w,c
  3685  004124  A0D8               	btfss	status,0,c
  3686  004126  D00B               	goto	l6420
  3687  004128                     u8760:
  3688  004128  0E00               	movlw	0
  3689  00412A  6E3A               	movwf	___fldiv@new_exp+1,c
  3690  00412C  6839               	setf	___fldiv@new_exp,c
  3691  00412E  0E00               	movlw	0
  3692  004130  6E28               	movwf	___fldiv@b,c
  3693  004132  0E00               	movlw	0
  3694  004134  6E29               	movwf	___fldiv@b+1,c
  3695  004136  0E00               	movlw	0
  3696  004138  6E2A               	movwf	___fldiv@b+2,c
  3697  00413A  0E00               	movlw	0
  3698  00413C  6E2B               	movwf	___fldiv@b+3,c
  3699  00413E                     l6420:
  3700  00413E  BE3A               	btfsc	___fldiv@new_exp+1,7,c
  3701  004140  D005               	goto	u8770
  3702  004142  503A               	movf	___fldiv@new_exp+1,w,c
  3703  004144  E111               	bnz	l6424
  3704  004146  0439               	decf	___fldiv@new_exp,w,c
  3705  004148  B0D8               	btfsc	status,0,c
  3706  00414A  D00E               	goto	l6424
  3707  00414C                     u8770:
  3708  00414C  0E00               	movlw	0
  3709  00414E  6E3A               	movwf	___fldiv@new_exp+1,c
  3710  004150  0E00               	movlw	0
  3711  004152  6E39               	movwf	___fldiv@new_exp,c
  3712  004154  0E00               	movlw	0
  3713  004156  6E28               	movwf	___fldiv@b,c
  3714  004158  0E00               	movlw	0
  3715  00415A  6E29               	movwf	___fldiv@b+1,c
  3716  00415C  0E00               	movlw	0
  3717  00415E  6E2A               	movwf	___fldiv@b+2,c
  3718  004160  0E00               	movlw	0
  3719  004162  6E2B               	movwf	___fldiv@b+3,c
  3720  004164  0E00               	movlw	0
  3721  004166  6E38               	movwf	___fldiv@sign,c
  3722  004168                     l6424:
  3723  004168  C039  F03F         	movff	___fldiv@new_exp,___fldiv@bexp
  3724  00416C  A03F               	btfss	___fldiv@bexp,0,c
  3725  00416E  D002               	goto	l6430
  3726  004170  8E2A               	bsf	___fldiv@b+2,7,c
  3727  004172  D001               	goto	l6432
  3728  004174                     l6430:
  3729  004174  9E2A               	bcf	___fldiv@b+2,7,c
  3730  004176                     l6432:
  3731  004176  90D8               	bcf	status,0,c
  3732  004178  303F               	rrcf	___fldiv@bexp,w,c
  3733  00417A  6E2B               	movwf	___fldiv@b+3,c
  3734  00417C  D70E               	goto	l6346
  3735  00417E                     __end_of___fldiv:
  3736                           	opt callstack 0
  3737                           
  3738 ;; *************** function _f_open *****************
  3739 ;; Defined at:
  3740 ;;		line 2449 in file "ff.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  fp              2   58[BANK0 ] PTR struct .
  3743 ;;		 -> Fil(32), 
  3744 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  3745 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  3746 ;;  mode            1   62[BANK0 ] unsigned char 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;  dj             22   90[BANK0 ] struct .
  3749 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  3750 ;;  dw              4   83[BANK0 ] unsigned long 
  3751 ;;  cl              4   79[BANK0 ] unsigned long 
  3752 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  3753 ;;		 -> FatFs(558), NULL(0), 
  3754 ;;  res             1   87[BANK0 ] enum E93
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      enum E93
  3757 ;; Registers used:
  3758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3764 ;;      Params:         0       5       0       0       0       0       0       0       0
  3765 ;;      Locals:         0      45       0       0       0       0       0       0       0
  3766 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3767 ;;      Totals:         0      54       0       0       0       0       0       0       0
  3768 ;;Total ram usage:       54 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:   13
  3771 ;; This function calls:
  3772 ;;		_dir_register
  3773 ;;		_find_volume
  3774 ;;		_follow_path
  3775 ;;		_ld_clust
  3776 ;;		_move_window
  3777 ;;		_remove_chain
  3778 ;;		_st_clust
  3779 ;; This function is called by:
  3780 ;;		_guardar
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text8
  3785  002FC6                     __ptext8:
  3786                           	opt callstack 0
  3787  002FC6                     _f_open:
  3788                           	opt callstack 16
  3789                           
  3790                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  3791                           
  3792                           ;incstack = 0
  3793  002FC6  0100               	movlb	0	; () banked
  3794  002FC8  519A               	movf	f_open@fp& (0+255),w,b
  3795  002FCA  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  3796  002FCC  A4D8               	btfss	status,2,c
  3797  002FCE  D002               	goto	l6658
  3798                           
  3799                           ; BSR set to: 0
  3800  002FD0  0E09               	movlw	9
  3801  002FD2  0012               	return	
  3802  002FD4                     l6658:
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;ff.c: 2465:  fp->fs = 0;
  3806  002FD4  C09A  FFD9         	movff	f_open@fp,fsr2l
  3807  002FD8  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3808  002FDC  0E00               	movlw	0
  3809  002FDE  6EDE               	movwf	postinc2,c
  3810  002FE0  0E00               	movlw	0
  3811  002FE2  6EDD               	movwf	postdec2,c
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;ff.c: 2468:  dj.fs = FatFs[0];
  3815  002FE4  C0E0  F0BA         	movff	ff@FatFs,f_open@dj
  3816  002FE8  C0E1  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  3820  002FEC  0E1F               	movlw	31
  3821  002FEE  179E               	andwf	f_open@mode& (0+255),f,b
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  3825  002FF0  0EBA               	movlw	low f_open@dj
  3826  002FF2  6E46               	movwf	find_volume@rfs,c
  3827  002FF4  0E00               	movlw	high f_open@dj
  3828  002FF6  6E47               	movwf	find_volume@rfs+1,c
  3829  002FF8  0E9C               	movlw	low f_open@path
  3830  002FFA  6E48               	movwf	find_volume@path,c
  3831  002FFC  0E00               	movlw	high f_open@path
  3832  002FFE  6E49               	movwf	find_volume@path+1,c
  3833  003000  519E               	movf	f_open@mode& (0+255),w,b
  3834  003002  0BFE               	andlw	254
  3835  003004  6E4A               	movwf	find_volume@wmode,c
  3836  003006  EC0E  F004         	call	_find_volume	;wreg free
  3837  00300A  0100               	movlb	0	; () banked
  3838  00300C  6FB7               	movwf	f_open@res& (0+255),b
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;ff.c: 2479:  if (res == FR_OK) {
  3842  00300E  51B7               	movf	f_open@res& (0+255),w,b
  3843  003010  A4D8               	btfss	status,2,c
  3844  003012  D1A2               	goto	l6762
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;ff.c: 2480:   (dj).fn = sfn;
  3848  003014  0EA3               	movlw	low f_open@sfn
  3849  003016  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  3850  003018  0E00               	movlw	high f_open@sfn
  3851  00301A  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;ff.c: 2481:   res = follow_path(&dj, path);
  3855  00301C  0EBA               	movlw	low f_open@dj
  3856  00301E  6F88               	movwf	follow_path@dp& (0+255),b
  3857  003020  0E00               	movlw	high f_open@dj
  3858  003022  6F89               	movwf	(follow_path@dp+1)& (0+255),b
  3859  003024  C09C  F08A         	movff	f_open@path,follow_path@path
  3860  003028  C09D  F08B         	movff	f_open@path+1,follow_path@path+1
  3861  00302C  EC5B  F023         	call	_follow_path	;wreg free
  3862  003030  0100               	movlb	0	; () banked
  3863  003032  6FB7               	movwf	f_open@res& (0+255),b
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;ff.c: 2482:   dir = dj.dir;
  3867  003034  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  3868  003038  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;ff.c: 2484:   if (res == FR_OK) {
  3872  00303C  51B7               	movf	f_open@res& (0+255),w,b
  3873  00303E  A4D8               	btfss	status,2,c
  3874  003040  D006               	goto	l6680
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;ff.c: 2485:    if (!dir)
  3878  003042  51B8               	movf	f_open@dir& (0+255),w,b
  3879  003044  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  3880  003046  A4D8               	btfss	status,2,c
  3881  003048  D002               	goto	l6680
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  3885  00304A  0E06               	movlw	6
  3886  00304C  6FB7               	movwf	f_open@res& (0+255),b
  3887  00304E                     l6680:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  3891  00304E  C09E  F09F         	movff	f_open@mode,??_f_open
  3892  003052  0E1C               	movlw	28
  3893  003054  179F               	andwf	??_f_open& (0+255),f,b
  3894  003056  B4D8               	btfsc	status,2,c
  3895  003058  D0D3               	goto	l6728
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;ff.c: 2494:    if (res != FR_OK) {
  3899  00305A  51B7               	movf	f_open@res& (0+255),w,b
  3900  00305C  B4D8               	btfsc	status,2,c
  3901  00305E  D012               	goto	l6692
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  3905  003060  0E04               	movlw	4
  3906  003062  19B7               	xorwf	f_open@res& (0+255),w,b
  3907  003064  A4D8               	btfss	status,2,c
  3908  003066  D008               	goto	l6688
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;ff.c: 2499:      res = dir_register(&dj);
  3912  003068  0EBA               	movlw	low f_open@dj
  3913  00306A  6F8B               	movwf	dir_register@dp& (0+255),b
  3914  00306C  0E00               	movlw	high f_open@dj
  3915  00306E  6F8C               	movwf	(dir_register@dp+1)& (0+255),b
  3916  003070  EC57  F028         	call	_dir_register	;wreg free
  3917  003074  0100               	movlb	0	; () banked
  3918  003076  6FB7               	movwf	f_open@res& (0+255),b
  3919  003078                     l6688:
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;ff.c: 2501:     mode |= 0x08;
  3923  003078  879E               	bsf	f_open@mode& (0+255),3,b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;ff.c: 2502:     dir = dj.dir;
  3927  00307A  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  3928  00307E  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  3929                           
  3930                           ;ff.c: 2503:    }
  3931  003082  D012               	goto	l581
  3932  003084                     l6692:
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  3936  003084  EE20 F00B          	lfsr	2,11
  3937  003088  51B8               	movf	f_open@dir& (0+255),w,b
  3938  00308A  26D9               	addwf	fsr2l,f,c
  3939  00308C  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3940  00308E  22DA               	addwfc	fsr2h,f,c
  3941  003090  50DF               	movf	indf2,w,c
  3942  003092  6F9F               	movwf	??_f_open& (0+255),b
  3943  003094  0E11               	movlw	17
  3944  003096  179F               	andwf	??_f_open& (0+255),f,b
  3945  003098  B4D8               	btfsc	status,2,c
  3946  00309A  D002               	goto	l582
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;ff.c: 2506:      res = FR_DENIED;
  3950  00309C  0E07               	movlw	7
  3951  00309E  D003               	goto	L5
  3952  0030A0                     l582:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;ff.c: 2508:      if (mode & 0x04)
  3956  0030A0  A59E               	btfss	f_open@mode& (0+255),2,b
  3957  0030A2  D002               	goto	l581
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;ff.c: 2509:       res = FR_EXIST;
  3961  0030A4  0E08               	movlw	8
  3962  0030A6                     L5:
  3963  0030A6  6FB7               	movwf	f_open@res& (0+255),b
  3964  0030A8                     l581:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  3968  0030A8  51B7               	movf	f_open@res& (0+255),w,b
  3969  0030AA  B4D8               	btfsc	status,2,c
  3970                           
  3971                           ; BSR set to: 0
  3972  0030AC  A79E               	btfss	f_open@mode& (0+255),3,b
  3973  0030AE  D0C1               	goto	l588
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  3977                           
  3978                           ; BSR set to: 0
  3979  0030B0  EE20 F00E          	lfsr	2,14
  3980  0030B4  51B8               	movf	f_open@dir& (0+255),w,b
  3981  0030B6  26D9               	addwf	fsr2l,f,c
  3982  0030B8  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3983  0030BA  22DA               	addwfc	fsr2h,f,c
  3984  0030BC  0E00               	movlw	0
  3985  0030BE  6EDE               	movwf	postinc2,c
  3986  0030C0  0E00               	movlw	0
  3987  0030C2  6EDE               	movwf	postinc2,c
  3988  0030C4  0E21               	movlw	33
  3989  0030C6  6EDE               	movwf	postinc2,c
  3990  0030C8  0E46               	movlw	70
  3991  0030CA  6EDD               	movwf	postdec2,c
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  3995  0030CC  EE20 F016          	lfsr	2,22
  3996  0030D0  51B8               	movf	f_open@dir& (0+255),w,b
  3997  0030D2  26D9               	addwf	fsr2l,f,c
  3998  0030D4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3999  0030D6  22DA               	addwfc	fsr2h,f,c
  4000  0030D8  0E00               	movlw	0
  4001  0030DA  6EDE               	movwf	postinc2,c
  4002  0030DC  0E00               	movlw	0
  4003  0030DE  6EDE               	movwf	postinc2,c
  4004  0030E0  0E21               	movlw	33
  4005  0030E2  6EDE               	movwf	postinc2,c
  4006  0030E4  0E46               	movlw	70
  4007  0030E6  6EDD               	movwf	postdec2,c
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;ff.c: 2516:     dir[11] = 0;
  4011  0030E8  EE20 F00B          	lfsr	2,11
  4012  0030EC  51B8               	movf	f_open@dir& (0+255),w,b
  4013  0030EE  26D9               	addwf	fsr2l,f,c
  4014  0030F0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4015  0030F2  22DA               	addwfc	fsr2h,f,c
  4016  0030F4  0E00               	movlw	0
  4017  0030F6  6EDF               	movwf	indf2,c
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  4021  0030F8  EE20 F01C          	lfsr	2,28
  4022  0030FC  51B8               	movf	f_open@dir& (0+255),w,b
  4023  0030FE  26D9               	addwf	fsr2l,f,c
  4024  003100  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4025  003102  22DA               	addwfc	fsr2h,f,c
  4026  003104  6ADE               	clrf	postinc2,c
  4027  003106  6ADE               	clrf	postinc2,c
  4028  003108  6ADE               	clrf	postinc2,c
  4029  00310A  6ADD               	clrf	postdec2,c
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  4033  00310C  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4034  003110  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4035  003114  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4036  003118  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4037  00311C  ECE8  F02C         	call	_ld_clust	;wreg free
  4038  003120  C001  F0AF         	movff	?_ld_clust,f_open@cl
  4039  003124  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  4040  003128  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  4041  00312C  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  4042                           
  4043                           ;ff.c: 2519:     st_clust(dir, 0);
  4044  003130  C0B8  F001         	movff	f_open@dir,st_clust@dir
  4045  003134  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  4046  003138  0E00               	movlw	0
  4047  00313A  6E03               	movwf	st_clust@cl,c
  4048  00313C  0E00               	movlw	0
  4049  00313E  6E04               	movwf	st_clust@cl+1,c
  4050  003140  0E00               	movlw	0
  4051  003142  6E05               	movwf	st_clust@cl+2,c
  4052  003144  0E00               	movlw	0
  4053  003146  6E06               	movwf	st_clust@cl+3,c
  4054  003148  EC98  F02E         	call	_st_clust	;wreg free
  4055                           
  4056                           ;ff.c: 2520:     dj.fs->wflag = 1;
  4057  00314C  0100               	movlb	0	; () banked
  4058  00314E  EE20 F004          	lfsr	2,4
  4059  003152  51BA               	movf	f_open@dj& (0+255),w,b
  4060  003154  26D9               	addwf	fsr2l,f,c
  4061  003156  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4062  003158  22DA               	addwfc	fsr2h,f,c
  4063  00315A  0E01               	movlw	1
  4064  00315C  6EDF               	movwf	indf2,c
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;ff.c: 2521:     if (cl) {
  4068  00315E  51AF               	movf	f_open@cl& (0+255),w,b
  4069  003160  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  4070  003162  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  4071  003164  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  4072  003166  B4D8               	btfsc	status,2,c
  4073  003168  D064               	goto	l588
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;ff.c: 2522:      dw = dj.fs->winsect;
  4077  00316A  EE20 F02A          	lfsr	2,42
  4078  00316E  51BA               	movf	f_open@dj& (0+255),w,b
  4079  003170  26D9               	addwf	fsr2l,f,c
  4080  003172  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4081  003174  22DA               	addwfc	fsr2h,f,c
  4082  003176  CFDE F0B3          	movff	postinc2,f_open@dw
  4083  00317A  CFDE F0B4          	movff	postinc2,f_open@dw+1
  4084  00317E  CFDE F0B5          	movff	postinc2,f_open@dw+2
  4085  003182  CFDE F0B6          	movff	postinc2,f_open@dw+3
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  4089  003186  C0BA  F057         	movff	f_open@dj,remove_chain@fs
  4090  00318A  C0BB  F058         	movff	f_open@dj+1,remove_chain@fs+1
  4091  00318E  C0AF  F059         	movff	f_open@cl,remove_chain@clst
  4092  003192  C0B0  F05A         	movff	f_open@cl+1,remove_chain@clst+1
  4093  003196  C0B1  F05B         	movff	f_open@cl+2,remove_chain@clst+2
  4094  00319A  C0B2  F05C         	movff	f_open@cl+3,remove_chain@clst+3
  4095  00319E  EC01  F024         	call	_remove_chain	;wreg free
  4096  0031A2  0100               	movlb	0	; () banked
  4097  0031A4  6FB7               	movwf	f_open@res& (0+255),b
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;ff.c: 2524:      if (res == FR_OK) {
  4101  0031A6  51B7               	movf	f_open@res& (0+255),w,b
  4102  0031A8  A4D8               	btfss	status,2,c
  4103  0031AA  D043               	goto	l588
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  4107  0031AC  0EFF               	movlw	255
  4108  0031AE  25AF               	addwf	f_open@cl& (0+255),w,b
  4109  0031B0  6F9F               	movwf	??_f_open& (0+255),b
  4110  0031B2  0EFF               	movlw	255
  4111  0031B4  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  4112  0031B6  6FA0               	movwf	(??_f_open+1)& (0+255),b
  4113  0031B8  0EFF               	movlw	255
  4114  0031BA  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  4115  0031BC  6FA1               	movwf	(??_f_open+2)& (0+255),b
  4116  0031BE  0EFF               	movlw	255
  4117  0031C0  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  4118  0031C2  6FA2               	movwf	(??_f_open+3)& (0+255),b
  4119  0031C4  EE20 F00A          	lfsr	2,10
  4120  0031C8  51BA               	movf	f_open@dj& (0+255),w,b
  4121  0031CA  26D9               	addwf	fsr2l,f,c
  4122  0031CC  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4123  0031CE  22DA               	addwfc	fsr2h,f,c
  4124  0031D0  C09F  FFDE         	movff	??_f_open,postinc2
  4125  0031D4  C0A0  FFDE         	movff	??_f_open+1,postinc2
  4126  0031D8  C0A1  FFDE         	movff	??_f_open+2,postinc2
  4127  0031DC  C0A2  FFDE         	movff	??_f_open+3,postinc2
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  4131  0031E0  C0BA  F031         	movff	f_open@dj,move_window@fs
  4132  0031E4  C0BB  F032         	movff	f_open@dj+1,move_window@fs+1
  4133  0031E8  C0B3  F033         	movff	f_open@dw,move_window@sector
  4134  0031EC  C0B4  F034         	movff	f_open@dw+1,move_window@sector+1
  4135  0031F0  C0B5  F035         	movff	f_open@dw+2,move_window@sector+2
  4136  0031F4  C0B6  F036         	movff	f_open@dw+3,move_window@sector+3
  4137  0031F8  EC87  F02B         	call	_move_window	;wreg free
  4138  0031FC  0100               	movlb	0	; () banked
  4139  0031FE  D018               	goto	L6
  4140  003200                     l6728:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;ff.c: 2532:    if (res == FR_OK) {
  4144  003200  51B7               	movf	f_open@res& (0+255),w,b
  4145  003202  A4D8               	btfss	status,2,c
  4146  003204  D016               	goto	l588
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  4150  003206  EE20 F00B          	lfsr	2,11
  4151  00320A  51B8               	movf	f_open@dir& (0+255),w,b
  4152  00320C  26D9               	addwf	fsr2l,f,c
  4153  00320E  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4154  003210  22DA               	addwfc	fsr2h,f,c
  4155  003212  A8DF               	btfss	indf2,4,c
  4156  003214  D002               	goto	l590
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;ff.c: 2534:      res = FR_NO_FILE;
  4160  003216  0E04               	movlw	4
  4161  003218  D00B               	goto	L6
  4162  00321A                     l590:
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  4166  00321A  A39E               	btfss	f_open@mode& (0+255),1,b
  4167  00321C  D00A               	goto	l588
  4168                           
  4169                           ; BSR set to: 0
  4170  00321E  EE20 F00B          	lfsr	2,11
  4171  003222  51B8               	movf	f_open@dir& (0+255),w,b
  4172  003224  26D9               	addwf	fsr2l,f,c
  4173  003226  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4174  003228  22DA               	addwfc	fsr2h,f,c
  4175  00322A  A0DF               	btfss	indf2,0,c
  4176  00322C  D002               	goto	l588
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;ff.c: 2537:       res = FR_DENIED;
  4180  00322E  0E07               	movlw	7
  4181  003230                     L6:
  4182  003230  6FB7               	movwf	f_open@res& (0+255),b
  4183  003232                     l588:
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;ff.c: 2541:   if (res == FR_OK) {
  4187  003232  51B7               	movf	f_open@res& (0+255),w,b
  4188  003234  A4D8               	btfss	status,2,c
  4189  003236  D020               	goto	l6746
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;ff.c: 2542:    if (mode & 0x08)
  4193  003238  B79E               	btfsc	f_open@mode& (0+255),3,b
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;ff.c: 2543:     mode |= 0x20;
  4197  00323A  8B9E               	bsf	f_open@mode& (0+255),5,b
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  4201  00323C  EE20 F02A          	lfsr	2,42
  4202  003240  51BA               	movf	f_open@dj& (0+255),w,b
  4203  003242  26D9               	addwf	fsr2l,f,c
  4204  003244  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4205  003246  22DA               	addwfc	fsr2h,f,c
  4206  003248  EE10 F01A          	lfsr	1,26
  4207  00324C  519A               	movf	f_open@fp& (0+255),w,b
  4208  00324E  26E1               	addwf	fsr1l,f,c
  4209  003250  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4210  003252  22E2               	addwfc	fsr1h,f,c
  4211  003254  CFDE FFE6          	movff	postinc2,postinc1
  4212  003258  CFDE FFE6          	movff	postinc2,postinc1
  4213  00325C  CFDE FFE6          	movff	postinc2,postinc1
  4214  003260  CFDE FFE6          	movff	postinc2,postinc1
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;ff.c: 2545:    fp->dir_ptr = dir;
  4218  003264  EE20 F01E          	lfsr	2,30
  4219  003268  519A               	movf	f_open@fp& (0+255),w,b
  4220  00326A  26D9               	addwf	fsr2l,f,c
  4221  00326C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4222  00326E  22DA               	addwfc	fsr2h,f,c
  4223  003270  C0B8  FFDE         	movff	f_open@dir,postinc2
  4224  003274  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  4225  003278                     l6746:
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;ff.c: 2565:   if (res == FR_OK) {
  4229  003278  51B7               	movf	f_open@res& (0+255),w,b
  4230  00327A  A4D8               	btfss	status,2,c
  4231  00327C  D06D               	goto	l6762
  4232                           
  4233                           ; BSR set to: 0
  4234                           ;ff.c: 2566:    fp->flag = mode;
  4235  00327E  EE20 F004          	lfsr	2,4
  4236  003282  519A               	movf	f_open@fp& (0+255),w,b
  4237  003284  26D9               	addwf	fsr2l,f,c
  4238  003286  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4239  003288  22DA               	addwfc	fsr2h,f,c
  4240  00328A  C09E  FFDF         	movff	f_open@mode,indf2
  4241                           
  4242                           ;ff.c: 2567:    fp->err = 0;
  4243  00328E  EE20 F005          	lfsr	2,5
  4244  003292  519A               	movf	f_open@fp& (0+255),w,b
  4245  003294  26D9               	addwf	fsr2l,f,c
  4246  003296  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4247  003298  22DA               	addwfc	fsr2h,f,c
  4248  00329A  0E00               	movlw	0
  4249  00329C  6EDF               	movwf	indf2,c
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  4253  00329E  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4254  0032A2  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4255  0032A6  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4256  0032AA  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4257  0032AE  ECE8  F02C         	call	_ld_clust	;wreg free
  4258  0032B2  0100               	movlb	0	; () banked
  4259  0032B4  EE20 F00E          	lfsr	2,14
  4260  0032B8  519A               	movf	f_open@fp& (0+255),w,b
  4261  0032BA  26D9               	addwf	fsr2l,f,c
  4262  0032BC  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4263  0032BE  22DA               	addwfc	fsr2h,f,c
  4264  0032C0  C001  FFDE         	movff	?_ld_clust,postinc2
  4265  0032C4  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4266  0032C8  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4267  0032CC  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  4271  0032D0  EE20 F01C          	lfsr	2,28
  4272  0032D4  51B8               	movf	f_open@dir& (0+255),w,b
  4273  0032D6  26D9               	addwf	fsr2l,f,c
  4274  0032D8  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4275  0032DA  22DA               	addwfc	fsr2h,f,c
  4276  0032DC  EE10 F00A          	lfsr	1,10
  4277  0032E0  519A               	movf	f_open@fp& (0+255),w,b
  4278  0032E2  26E1               	addwf	fsr1l,f,c
  4279  0032E4  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4280  0032E6  22E2               	addwfc	fsr1h,f,c
  4281  0032E8  CFDE FFE6          	movff	postinc2,postinc1
  4282  0032EC  CFDE FFE6          	movff	postinc2,postinc1
  4283  0032F0  CFDE FFE6          	movff	postinc2,postinc1
  4284  0032F4  CFDE FFE6          	movff	postinc2,postinc1
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;ff.c: 2570:    fp->fptr = 0;
  4288  0032F8  EE20 F006          	lfsr	2,6
  4289  0032FC  519A               	movf	f_open@fp& (0+255),w,b
  4290  0032FE  26D9               	addwf	fsr2l,f,c
  4291  003300  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4292  003302  22DA               	addwfc	fsr2h,f,c
  4293  003304  6ADE               	clrf	postinc2,c
  4294  003306  6ADE               	clrf	postinc2,c
  4295  003308  6ADE               	clrf	postinc2,c
  4296  00330A  6ADD               	clrf	postdec2,c
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;ff.c: 2571:    fp->dsect = 0;
  4300  00330C  EE20 F016          	lfsr	2,22
  4301  003310  519A               	movf	f_open@fp& (0+255),w,b
  4302  003312  26D9               	addwf	fsr2l,f,c
  4303  003314  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4304  003316  22DA               	addwfc	fsr2h,f,c
  4305  003318  6ADE               	clrf	postinc2,c
  4306  00331A  6ADE               	clrf	postinc2,c
  4307  00331C  6ADE               	clrf	postinc2,c
  4308  00331E  6ADD               	clrf	postdec2,c
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;ff.c: 2575:    fp->fs = dj.fs;
  4312  003320  C09A  FFD9         	movff	f_open@fp,fsr2l
  4313  003324  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4314  003328  C0BA  FFDE         	movff	f_open@dj,postinc2
  4315  00332C  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;ff.c: 2576:    fp->id = fp->fs->id;
  4319  003330  C09A  FFD9         	movff	f_open@fp,fsr2l
  4320  003334  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4321  003338  EE10 F006          	lfsr	1,6
  4322  00333C  50DE               	movf	postinc2,w,c
  4323  00333E  26E1               	addwf	fsr1l,f,c
  4324  003340  50DD               	movf	postdec2,w,c
  4325  003342  22E2               	addwfc	fsr1h,f,c
  4326  003344  EE20 F002          	lfsr	2,2
  4327  003348  519A               	movf	f_open@fp& (0+255),w,b
  4328  00334A  26D9               	addwf	fsr2l,f,c
  4329  00334C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4330  00334E  22DA               	addwfc	fsr2h,f,c
  4331  003350  CFE6 FFDE          	movff	postinc1,postinc2
  4332  003354  CFE5 FFDD          	movff	postdec1,postdec2
  4333  003358                     l6762:
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;ff.c: 2580:  return res;
  4337  003358  51B7               	movf	f_open@res& (0+255),w,b
  4338                           
  4339                           ; BSR set to: 0
  4340  00335A  0012               	return		;funcret
  4341  00335C                     __end_of_f_open:
  4342                           	opt callstack 0
  4343                           
  4344 ;; *************** function _remove_chain *****************
  4345 ;; Defined at:
  4346 ;;		line 937 in file "ff.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  fs              2   86[COMRAM] PTR struct .
  4349 ;;		 -> FatFs(558), NULL(0), 
  4350 ;;  clst            4   88[COMRAM] unsigned long 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  nxt             4    5[BANK0 ] unsigned long 
  4353 ;;  res             1    4[BANK0 ] enum E93
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  1    wreg      enum E93
  4356 ;; Registers used:
  4357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4363 ;;      Params:         6       0       0       0       0       0       0       0       0
  4364 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4365 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4366 ;;      Totals:         6       9       0       0       0       0       0       0       0
  4367 ;;Total ram usage:       15 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    9
  4370 ;; This function calls:
  4371 ;;		_get_fat
  4372 ;;		_put_fat
  4373 ;; This function is called by:
  4374 ;;		_f_open
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text9
  4379  004802                     __ptext9:
  4380                           	opt callstack 0
  4381  004802                     _remove_chain:
  4382                           	opt callstack 19
  4383                           
  4384                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;incstack = 0
  4388  004802  505C               	movf	remove_chain@clst+3,w,c
  4389  004804  105B               	iorwf	remove_chain@clst+2,w,c
  4390  004806  105A               	iorwf	remove_chain@clst+1,w,c
  4391  004808  E104               	bnz	u7590
  4392  00480A  0E02               	movlw	2
  4393  00480C  5C59               	subwf	remove_chain@clst,w,c
  4394  00480E  A0D8               	btfss	status,0,c
  4395  004810  D010               	goto	u7600
  4396  004812                     u7590:
  4397  004812  EE20 F012          	lfsr	2,18
  4398  004816  5057               	movf	remove_chain@fs,w,c
  4399  004818  26D9               	addwf	fsr2l,f,c
  4400  00481A  5058               	movf	remove_chain@fs+1,w,c
  4401  00481C  22DA               	addwfc	fsr2h,f,c
  4402  00481E  50DE               	movf	postinc2,w,c
  4403  004820  5C59               	subwf	remove_chain@clst,w,c
  4404  004822  50DE               	movf	postinc2,w,c
  4405  004824  585A               	subwfb	remove_chain@clst+1,w,c
  4406  004826  50DE               	movf	postinc2,w,c
  4407  004828  585B               	subwfb	remove_chain@clst+2,w,c
  4408  00482A  50DE               	movf	postinc2,w,c
  4409  00482C  585C               	subwfb	remove_chain@clst+3,w,c
  4410  00482E  A0D8               	btfss	status,0,c
  4411  004830  D003               	goto	l5742
  4412  004832                     u7600:
  4413                           
  4414                           ;ff.c: 949:   res = FR_INT_ERR;
  4415  004832  0E02               	movlw	2
  4416  004834  0100               	movlb	0	; () banked
  4417  004836  D031               	goto	L7
  4418  004838                     l5742:
  4419                           
  4420                           ;ff.c: 952:   res = FR_OK;
  4421  004838  0E00               	movlw	0
  4422  00483A  0100               	movlb	0	; () banked
  4423  00483C  6F64               	movwf	remove_chain@res& (0+255),b
  4424                           
  4425                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4426  00483E  D074               	goto	l302
  4427  004840                     l5744:
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  4431  004840  C057  F03C         	movff	remove_chain@fs,get_fat@fs
  4432  004844  C058  F03D         	movff	remove_chain@fs+1,get_fat@fs+1
  4433  004848  C059  F03E         	movff	remove_chain@clst,get_fat@clst
  4434  00484C  C05A  F03F         	movff	remove_chain@clst+1,get_fat@clst+1
  4435  004850  C05B  F040         	movff	remove_chain@clst+2,get_fat@clst+2
  4436  004854  C05C  F041         	movff	remove_chain@clst+3,get_fat@clst+3
  4437  004858  EC12  F016         	call	_get_fat	;wreg free
  4438  00485C  C03C  F065         	movff	?_get_fat,remove_chain@nxt
  4439  004860  C03D  F066         	movff	?_get_fat+1,remove_chain@nxt+1
  4440  004864  C03E  F067         	movff	?_get_fat+2,remove_chain@nxt+2
  4441  004868  C03F  F068         	movff	?_get_fat+3,remove_chain@nxt+3
  4442                           
  4443                           ;ff.c: 955:    if (nxt == 0) break;
  4444  00486C  0100               	movlb	0	; () banked
  4445  00486E  5165               	movf	remove_chain@nxt& (0+255),w,b
  4446  004870  1166               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4447  004872  1167               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4448  004874  1168               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4449  004876  B4D8               	btfsc	status,2,c
  4450  004878  D067               	goto	u7660
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  4454  00487A  0565               	decf	remove_chain@nxt& (0+255),w,b
  4455  00487C  1166               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4456  00487E  1167               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4457  004880  1168               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4458  004882  B4D8               	btfsc	status,2,c
  4459  004884  D7D6               	goto	u7600
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  4463  004886  2965               	incf	remove_chain@nxt& (0+255),w,b
  4464  004888  E10A               	bnz	l5758
  4465  00488A  2966               	incf	(remove_chain@nxt+1)& (0+255),w,b
  4466  00488C  E108               	bnz	l5758
  4467  00488E  2967               	incf	(remove_chain@nxt+2)& (0+255),w,b
  4468  004890  E106               	bnz	l5758
  4469  004892  2968               	incf	(remove_chain@nxt+3)& (0+255),w,b
  4470  004894  A4D8               	btfss	status,2,c
  4471  004896  D003               	goto	l5758
  4472                           
  4473                           ; BSR set to: 0
  4474  004898  0E01               	movlw	1
  4475  00489A                     L7:
  4476  00489A  6F64               	movwf	remove_chain@res& (0+255),b
  4477  00489C  D055               	goto	u7660
  4478  00489E                     l5758:
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  4482  00489E  C057  F03C         	movff	remove_chain@fs,put_fat@fs
  4483  0048A2  C058  F03D         	movff	remove_chain@fs+1,put_fat@fs+1
  4484  0048A6  C059  F03E         	movff	remove_chain@clst,put_fat@clst
  4485  0048AA  C05A  F03F         	movff	remove_chain@clst+1,put_fat@clst+1
  4486  0048AE  C05B  F040         	movff	remove_chain@clst+2,put_fat@clst+2
  4487  0048B2  C05C  F041         	movff	remove_chain@clst+3,put_fat@clst+3
  4488  0048B6  0E00               	movlw	0
  4489  0048B8  6E42               	movwf	put_fat@val,c
  4490  0048BA  0E00               	movlw	0
  4491  0048BC  6E43               	movwf	put_fat@val+1,c
  4492  0048BE  0E00               	movlw	0
  4493  0048C0  6E44               	movwf	put_fat@val+2,c
  4494  0048C2  0E00               	movlw	0
  4495  0048C4  6E45               	movwf	put_fat@val+3,c
  4496  0048C6  ECFA  F011         	call	_put_fat	;wreg free
  4497  0048CA  0100               	movlb	0	; () banked
  4498  0048CC  6F64               	movwf	remove_chain@res& (0+255),b
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;ff.c: 959:    if (res != FR_OK) break;
  4502  0048CE  5164               	movf	remove_chain@res& (0+255),w,b
  4503  0048D0  A4D8               	btfss	status,2,c
  4504  0048D2  D03A               	goto	u7660
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  4508  0048D4  EE20 F00E          	lfsr	2,14
  4509  0048D8  5057               	movf	remove_chain@fs,w,c
  4510  0048DA  26D9               	addwf	fsr2l,f,c
  4511  0048DC  5058               	movf	remove_chain@fs+1,w,c
  4512  0048DE  22DA               	addwfc	fsr2h,f,c
  4513  0048E0  28DE               	incf	postinc2,w,c
  4514  0048E2  E107               	bnz	u7650
  4515  0048E4  28DE               	incf	postinc2,w,c
  4516  0048E6  E105               	bnz	u7650
  4517  0048E8  28DE               	incf	postinc2,w,c
  4518  0048EA  E103               	bnz	u7650
  4519  0048EC  28DE               	incf	postinc2,w,c
  4520  0048EE  B4D8               	btfsc	status,2,c
  4521  0048F0  D013               	goto	l5768
  4522  0048F2                     u7650:
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;ff.c: 961:     fs->free_clust++;
  4526  0048F2  EE20 F00E          	lfsr	2,14
  4527  0048F6  5057               	movf	remove_chain@fs,w,c
  4528  0048F8  26D9               	addwf	fsr2l,f,c
  4529  0048FA  5058               	movf	remove_chain@fs+1,w,c
  4530  0048FC  22DA               	addwfc	fsr2h,f,c
  4531  0048FE  2ADE               	incf	postinc2,f,c
  4532  004900  0E00               	movlw	0
  4533  004902  22DE               	addwfc	postinc2,f,c
  4534  004904  22DE               	addwfc	postinc2,f,c
  4535  004906  22DE               	addwfc	postinc2,f,c
  4536                           
  4537                           ;ff.c: 962:     fs->fsi_flag |= 1;
  4538  004908  EE20 F005          	lfsr	2,5
  4539  00490C  5057               	movf	remove_chain@fs,w,c
  4540  00490E  26D9               	addwf	fsr2l,f,c
  4541  004910  5058               	movf	remove_chain@fs+1,w,c
  4542  004912  22DA               	addwfc	fsr2h,f,c
  4543  004914  0E00               	movlw	0
  4544  004916  80DB               	bsf	plusw2,0,c
  4545  004918                     l5768:
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;ff.c: 974:    clst = nxt;
  4549  004918  C065  F059         	movff	remove_chain@nxt,remove_chain@clst
  4550  00491C  C066  F05A         	movff	remove_chain@nxt+1,remove_chain@clst+1
  4551  004920  C067  F05B         	movff	remove_chain@nxt+2,remove_chain@clst+2
  4552  004924  C068  F05C         	movff	remove_chain@nxt+3,remove_chain@clst+3
  4553  004928                     l302:
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4557  004928  EE20 F012          	lfsr	2,18
  4558  00492C  5057               	movf	remove_chain@fs,w,c
  4559  00492E  26D9               	addwf	fsr2l,f,c
  4560  004930  5058               	movf	remove_chain@fs+1,w,c
  4561  004932  22DA               	addwfc	fsr2h,f,c
  4562  004934  50DE               	movf	postinc2,w,c
  4563  004936  5C59               	subwf	remove_chain@clst,w,c
  4564  004938  50DE               	movf	postinc2,w,c
  4565  00493A  585A               	subwfb	remove_chain@clst+1,w,c
  4566  00493C  50DE               	movf	postinc2,w,c
  4567  00493E  585B               	subwfb	remove_chain@clst+2,w,c
  4568  004940  50DE               	movf	postinc2,w,c
  4569  004942  585C               	subwfb	remove_chain@clst+3,w,c
  4570  004944  A0D8               	btfss	status,0,c
  4571  004946  D77C               	goto	l5744
  4572  004948                     u7660:
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;ff.c: 978:  return res;
  4576  004948  5164               	movf	remove_chain@res& (0+255),w,b
  4577                           
  4578                           ; BSR set to: 0
  4579  00494A  0012               	return		;funcret
  4580  00494C                     __end_of_remove_chain:
  4581                           	opt callstack 0
  4582                           
  4583 ;; *************** function _follow_path *****************
  4584 ;; Defined at:
  4585 ;;		line 2052 in file "ff.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  dp              2   40[BANK0 ] PTR struct .
  4588 ;;		 -> f_open@dj(22), 
  4589 ;;  path            2   42[BANK0 ] PTR const unsigned char 
  4590 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  dir             2   44[BANK0 ] PTR unsigned char 
  4593 ;;		 -> FatFs(558), NULL(0), 
  4594 ;;  res             1   47[BANK0 ] enum E93
  4595 ;;  ns              1   46[BANK0 ] unsigned char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      enum E93
  4598 ;; Registers used:
  4599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4605 ;;      Params:         0       4       0       0       0       0       0       0       0
  4606 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4608 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4609 ;;Total ram usage:        8 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:   12
  4612 ;; This function calls:
  4613 ;;		_create_name
  4614 ;;		_dir_find
  4615 ;;		_dir_sdi
  4616 ;;		_ld_clust
  4617 ;; This function is called by:
  4618 ;;		_f_open
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text10
  4623  0046B6                     __ptext10:
  4624                           	opt callstack 0
  4625  0046B6                     _follow_path:
  4626                           	opt callstack 16
  4627                           
  4628                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;incstack = 0
  4632  0046B6  C08A  FFF6         	movff	follow_path@path,tblptrl
  4633  0046BA  C08B  FFF7         	movff	follow_path@path+1,tblptrh
  4634  0046BE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4635  0046BE  6AF8               	clrf	tblptru,c
  4636  0046C0                     	endif
  4637  0046C0                     	if	0	;tblptru may be non-zero
  4638  0046C0                     	endif
  4639  0046C0  0008               	tblrd		*
  4640  0046C2  50F5               	movf	tablat,w,c
  4641  0046C4  0A2F               	xorlw	47
  4642  0046C6  B4D8               	btfsc	status,2,c
  4643  0046C8  D00A               	goto	u7700
  4644  0046CA  C08A  FFF6         	movff	follow_path@path,tblptrl
  4645  0046CE  C08B  FFF7         	movff	follow_path@path+1,tblptrh
  4646  0046D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4647  0046D2  6AF8               	clrf	tblptru,c
  4648  0046D4                     	endif
  4649  0046D4                     	if	0	;tblptru may be non-zero
  4650  0046D4                     	endif
  4651  0046D4  0008               	tblrd		*
  4652  0046D6  50F5               	movf	tablat,w,c
  4653  0046D8  0A5C               	xorlw	92
  4654  0046DA  A4D8               	btfss	status,2,c
  4655  0046DC  D003               	goto	l5798
  4656  0046DE                     u7700:
  4657                           
  4658                           ;ff.c: 2069:   path++;
  4659  0046DE  0100               	movlb	0	; () banked
  4660  0046E0  4B8A               	infsnz	follow_path@path& (0+255),f,b
  4661  0046E2  2B8B               	incf	(follow_path@path+1)& (0+255),f,b
  4662  0046E4                     l5798:
  4663                           
  4664                           ;ff.c: 2070:  dp->sclust = 0;
  4665  0046E4  0100               	movlb	0	; () banked
  4666  0046E6  EE20 F006          	lfsr	2,6
  4667  0046EA  5188               	movf	follow_path@dp& (0+255),w,b
  4668  0046EC  26D9               	addwf	fsr2l,f,c
  4669  0046EE  5189               	movf	(follow_path@dp+1)& (0+255),w,b
  4670  0046F0  22DA               	addwfc	fsr2h,f,c
  4671  0046F2  6ADE               	clrf	postinc2,c
  4672  0046F4  6ADE               	clrf	postinc2,c
  4673  0046F6  6ADE               	clrf	postinc2,c
  4674  0046F8  6ADD               	clrf	postdec2,c
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  4678  0046FA  C08A  FFF6         	movff	follow_path@path,tblptrl
  4679  0046FE  C08B  FFF7         	movff	follow_path@path+1,tblptrh
  4680  004702                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4681  004702  6AF8               	clrf	tblptru,c
  4682  004704                     	endif
  4683  004704                     	if	0	;tblptru may be non-zero
  4684  004704                     	endif
  4685  004704  0E20               	movlw	32
  4686  004706  0008               	tblrd		*
  4687  004708  60F5               	cpfslt	tablat,c
  4688  00470A  D017               	goto	l5806
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  4692  00470C  C088  F057         	movff	follow_path@dp,dir_sdi@dp
  4693  004710  C089  F058         	movff	follow_path@dp+1,dir_sdi@dp+1
  4694  004714  0E00               	movlw	0
  4695  004716  6E5A               	movwf	dir_sdi@idx+1,c
  4696  004718  0E00               	movlw	0
  4697  00471A  6E59               	movwf	dir_sdi@idx,c
  4698  00471C  ECD4  F01C         	call	_dir_sdi	;wreg free
  4699  004720  0100               	movlb	0	; () banked
  4700  004722  6F8F               	movwf	follow_path@res& (0+255),b
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;ff.c: 2075:   dp->dir = 0;
  4704  004724  EE20 F012          	lfsr	2,18
  4705  004728  5188               	movf	follow_path@dp& (0+255),w,b
  4706  00472A  26D9               	addwf	fsr2l,f,c
  4707  00472C  5189               	movf	(follow_path@dp+1)& (0+255),w,b
  4708  00472E  22DA               	addwfc	fsr2h,f,c
  4709  004730  0E00               	movlw	0
  4710  004732  6EDE               	movwf	postinc2,c
  4711  004734  0E00               	movlw	0
  4712  004736  6EDD               	movwf	postdec2,c
  4713                           
  4714                           ;ff.c: 2076:  } else {
  4715  004738  D062               	goto	l5842
  4716  00473A                     l5806:
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;ff.c: 2078:    res = create_name(dp, &path);
  4720  00473A  C088  F009         	movff	follow_path@dp,create_name@dp
  4721  00473E  C089  F00A         	movff	follow_path@dp+1,create_name@dp+1
  4722  004742  0E8A               	movlw	low follow_path@path
  4723  004744  6E0B               	movwf	create_name@path,c
  4724  004746  0E00               	movlw	high follow_path@path
  4725  004748  6E0C               	movwf	create_name@path+1,c
  4726  00474A  EC35  F01E         	call	_create_name	;wreg free
  4727  00474E  0100               	movlb	0	; () banked
  4728  004750  6F8F               	movwf	follow_path@res& (0+255),b
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;ff.c: 2079:    if (res != FR_OK) break;
  4732  004752  518F               	movf	follow_path@res& (0+255),w,b
  4733  004754  A4D8               	btfss	status,2,c
  4734  004756  D053               	goto	l5842
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;ff.c: 2080:    res = dir_find(dp);
  4738  004758  C088  F05D         	movff	follow_path@dp,dir_find@dp
  4739  00475C  C089  F05E         	movff	follow_path@dp+1,dir_find@dp+1
  4740  004760  EC6B  F027         	call	_dir_find	;wreg free
  4741  004764  0100               	movlb	0	; () banked
  4742  004766  6F8F               	movwf	follow_path@res& (0+255),b
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;ff.c: 2081:    ns = dp->fn[11];
  4746  004768  EE20 F014          	lfsr	2,20
  4747  00476C  5188               	movf	follow_path@dp& (0+255),w,b
  4748  00476E  26D9               	addwf	fsr2l,f,c
  4749  004770  5189               	movf	(follow_path@dp+1)& (0+255),w,b
  4750  004772  22DA               	addwfc	fsr2h,f,c
  4751  004774  EE10 F00B          	lfsr	1,11
  4752  004778  50DE               	movf	postinc2,w,c
  4753  00477A  26E1               	addwf	fsr1l,f,c
  4754  00477C  50DD               	movf	postdec2,w,c
  4755  00477E  22E2               	addwfc	fsr1h,f,c
  4756  004780  50E7               	movf	indf1,w,c
  4757  004782  6F8E               	movwf	follow_path@ns& (0+255),b
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;ff.c: 2082:    if (res != FR_OK) {
  4761  004784  518F               	movf	follow_path@res& (0+255),w,b
  4762  004786  B4D8               	btfsc	status,2,c
  4763  004788  D008               	goto	l469
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  4767  00478A  0E04               	movlw	4
  4768  00478C  198F               	xorwf	follow_path@res& (0+255),w,b
  4769  00478E  B4D8               	btfsc	status,2,c
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  4773  004790  B58E               	btfsc	follow_path@ns& (0+255),2,b
  4774  004792  D035               	goto	l5842
  4775  004794                     u7750:
  4776                           
  4777                           ; BSR set to: 0
  4778  004794  0E05               	movlw	5
  4779  004796  6F8F               	movwf	follow_path@res& (0+255),b
  4780  004798  D032               	goto	l5842
  4781  00479A                     l469:
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;ff.c: 2094:    if (ns & 0x04) break;
  4785  00479A  B58E               	btfsc	follow_path@ns& (0+255),2,b
  4786  00479C  D030               	goto	l5842
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;ff.c: 2095:    dir = dp->dir;
  4790  00479E  EE20 F012          	lfsr	2,18
  4791  0047A2  5188               	movf	follow_path@dp& (0+255),w,b
  4792  0047A4  26D9               	addwf	fsr2l,f,c
  4793  0047A6  5189               	movf	(follow_path@dp+1)& (0+255),w,b
  4794  0047A8  22DA               	addwfc	fsr2h,f,c
  4795  0047AA  CFDE F08C          	movff	postinc2,follow_path@dir
  4796  0047AE  CFDD F08D          	movff	postdec2,follow_path@dir+1
  4797                           
  4798                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  4799  0047B2  EE20 F00B          	lfsr	2,11
  4800  0047B6  518C               	movf	follow_path@dir& (0+255),w,b
  4801  0047B8  26D9               	addwf	fsr2l,f,c
  4802  0047BA  518D               	movf	(follow_path@dir+1)& (0+255),w,b
  4803  0047BC  22DA               	addwfc	fsr2h,f,c
  4804  0047BE  A8DF               	btfss	indf2,4,c
  4805  0047C0  D7E9               	goto	u7750
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  4809  0047C2  C088  FFD9         	movff	follow_path@dp,fsr2l
  4810  0047C6  C089  FFDA         	movff	follow_path@dp+1,fsr2h
  4811  0047CA  CFDE F001          	movff	postinc2,ld_clust@fs
  4812  0047CE  CFDD F002          	movff	postdec2,ld_clust@fs+1
  4813  0047D2  C08C  F003         	movff	follow_path@dir,ld_clust@dir
  4814  0047D6  C08D  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  4815  0047DA  ECE8  F02C         	call	_ld_clust	;wreg free
  4816  0047DE  0100               	movlb	0	; () banked
  4817  0047E0  EE20 F006          	lfsr	2,6
  4818  0047E4  5188               	movf	follow_path@dp& (0+255),w,b
  4819  0047E6  26D9               	addwf	fsr2l,f,c
  4820  0047E8  5189               	movf	(follow_path@dp+1)& (0+255),w,b
  4821  0047EA  22DA               	addwfc	fsr2h,f,c
  4822  0047EC  C001  FFDE         	movff	?_ld_clust,postinc2
  4823  0047F0  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4824  0047F4  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4825  0047F8  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4826  0047FC  D79E               	goto	l5806
  4827  0047FE                     l5842:
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;ff.c: 2103:  return res;
  4831  0047FE  518F               	movf	follow_path@res& (0+255),w,b
  4832                           
  4833                           ; BSR set to: 0
  4834  004800  0012               	return		;funcret
  4835  004802                     __end_of_follow_path:
  4836                           	opt callstack 0
  4837                           
  4838 ;; *************** function _ld_clust *****************
  4839 ;; Defined at:
  4840 ;;		line 1235 in file "ff.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  fs              2    0[COMRAM] PTR struct .
  4843 ;;		 -> FatFs(558), NULL(0), 
  4844 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  4845 ;;		 -> FatFs(558), NULL(0), 
  4846 ;; Auto vars:     Size  Location     Type
  4847 ;;  cl              4   10[COMRAM] unsigned long 
  4848 ;; Return value:  Size  Location     Type
  4849 ;;                  4    0[COMRAM] unsigned long 
  4850 ;; Registers used:
  4851 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4852 ;; Tracked objects:
  4853 ;;		On entry : 0/0
  4854 ;;		On exit  : 0/0
  4855 ;;		Unchanged: 0/0
  4856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4857 ;;      Params:         4       0       0       0       0       0       0       0       0
  4858 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4859 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4860 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4861 ;;Total ram usage:       14 bytes
  4862 ;; Hardware stack levels used:    1
  4863 ;; This function calls:
  4864 ;;		Nothing
  4865 ;; This function is called by:
  4866 ;;		_follow_path
  4867 ;;		_f_open
  4868 ;; This function uses a non-reentrant model
  4869 ;;
  4870                           
  4871                           	psect	text11
  4872  0059D0                     __ptext11:
  4873                           	opt callstack 0
  4874  0059D0                     _ld_clust:
  4875                           	opt callstack 28
  4876                           
  4877                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;incstack = 0
  4881  0059D0  0E1A               	movlw	26
  4882  0059D2  2403               	addwf	ld_clust@dir,w,c
  4883  0059D4  6ED9               	movwf	fsr2l,c
  4884  0059D6  0E00               	movlw	0
  4885  0059D8  2004               	addwfc	ld_clust@dir+1,w,c
  4886  0059DA  6EDA               	movwf	fsr2h,c
  4887  0059DC  CFDE F005          	movff	postinc2,??_ld_clust
  4888  0059E0  CFDD F006          	movff	postdec2,??_ld_clust+1
  4889  0059E4  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  4890  0059E8  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  4891  0059EC  6A0D               	clrf	ld_clust@cl+2,c
  4892  0059EE  6A0E               	clrf	ld_clust@cl+3,c
  4893                           
  4894                           ;ff.c: 1243:  if (fs->fs_type == 3)
  4895  0059F0  C001  FFD9         	movff	ld_clust@fs,fsr2l
  4896  0059F4  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  4897  0059F8  0E03               	movlw	3
  4898  0059FA  18DE               	xorwf	postinc2,w,c
  4899  0059FC  A4D8               	btfss	status,2,c
  4900  0059FE  D01E               	goto	l5444
  4901                           
  4902                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  4903  005A00  0E14               	movlw	20
  4904  005A02  2403               	addwf	ld_clust@dir,w,c
  4905  005A04  6ED9               	movwf	fsr2l,c
  4906  005A06  0E00               	movlw	0
  4907  005A08  2004               	addwfc	ld_clust@dir+1,w,c
  4908  005A0A  6EDA               	movwf	fsr2h,c
  4909  005A0C  CFDE F005          	movff	postinc2,??_ld_clust
  4910  005A10  CFDD F006          	movff	postdec2,??_ld_clust+1
  4911  005A14  5005               	movf	??_ld_clust,w,c
  4912  005A16  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  4913  005A18  5006               	movf	??_ld_clust+1,w,c
  4914  005A1A  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  4915  005A1C  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  4916  005A1E  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  4917  005A20  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  4918  005A24  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  4919  005A28  6A08               	clrf	??_ld_clust+3,c
  4920  005A2A  6A07               	clrf	??_ld_clust+2,c
  4921  005A2C  5007               	movf	??_ld_clust+2,w,c
  4922  005A2E  120B               	iorwf	ld_clust@cl,f,c
  4923  005A30  5008               	movf	??_ld_clust+3,w,c
  4924  005A32  120C               	iorwf	ld_clust@cl+1,f,c
  4925  005A34  5009               	movf	??_ld_clust+4,w,c
  4926  005A36  120D               	iorwf	ld_clust@cl+2,f,c
  4927  005A38  500A               	movf	??_ld_clust+5,w,c
  4928  005A3A  120E               	iorwf	ld_clust@cl+3,f,c
  4929  005A3C                     l5444:
  4930                           
  4931                           ;ff.c: 1246:  return cl;
  4932  005A3C  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  4933  005A40  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  4934  005A44  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  4935  005A48  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  4936  005A4C  0012               	return		;funcret
  4937  005A4E                     __end_of_ld_clust:
  4938                           	opt callstack 0
  4939                           
  4940 ;; *************** function _dir_find *****************
  4941 ;; Defined at:
  4942 ;;		line 1458 in file "ff.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  dp              2   92[COMRAM] PTR struct .
  4945 ;;		 -> f_open@dj(22), 
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;  dir             2   37[BANK0 ] PTR unsigned char 
  4948 ;;		 -> FatFs(558), NULL(0), 
  4949 ;;  res             1   39[BANK0 ] enum E93
  4950 ;;  c               1   36[BANK0 ] unsigned char 
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      enum E93
  4953 ;; Registers used:
  4954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4960 ;;      Params:         2       0       0       0       0       0       0       0       0
  4961 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4963 ;;      Totals:         2       4       0       0       0       0       0       0       0
  4964 ;;Total ram usage:        6 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:   11
  4967 ;; This function calls:
  4968 ;;		_dir_next
  4969 ;;		_dir_sdi
  4970 ;;		_mem_cmp
  4971 ;;		_move_window
  4972 ;; This function is called by:
  4973 ;;		_follow_path
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           	psect	text12
  4978  004ED6                     __ptext12:
  4979                           	opt callstack 0
  4980  004ED6                     _dir_find:
  4981                           	opt callstack 16
  4982                           
  4983                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  4984                           
  4985                           ;incstack = 0
  4986  004ED6  C05D  F057         	movff	dir_find@dp,dir_sdi@dp
  4987  004EDA  C05E  F058         	movff	dir_find@dp+1,dir_sdi@dp+1
  4988  004EDE  0E00               	movlw	0
  4989  004EE0  6E5A               	movwf	dir_sdi@idx+1,c
  4990  004EE2  0E00               	movlw	0
  4991  004EE4  6E59               	movwf	dir_sdi@idx,c
  4992  004EE6  ECD4  F01C         	call	_dir_sdi	;wreg free
  4993  004EEA  0100               	movlb	0	; () banked
  4994  004EEC  6F87               	movwf	dir_find@res& (0+255),b
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;ff.c: 1469:  if (res != FR_OK) return res;
  4998  004EEE  5187               	movf	dir_find@res& (0+255),w,b
  4999  004EF0  B4D8               	btfsc	status,2,c
  5000  004EF2  D003               	goto	l5458
  5001  004EF4                     u7040:
  5002  004EF4  0100               	movlb	0	; () banked
  5003  004EF6  5187               	movf	dir_find@res& (0+255),w,b
  5004  004EF8  0012               	return	
  5005  004EFA                     l5458:
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  5009  004EFA  C05D  FFD9         	movff	dir_find@dp,fsr2l
  5010  004EFE  C05E  FFDA         	movff	dir_find@dp+1,fsr2h
  5011  004F02  CFDE F031          	movff	postinc2,move_window@fs
  5012  004F06  CFDD F032          	movff	postdec2,move_window@fs+1
  5013  004F0A  EE20 F00E          	lfsr	2,14
  5014  004F0E  505D               	movf	dir_find@dp,w,c
  5015  004F10  26D9               	addwf	fsr2l,f,c
  5016  004F12  505E               	movf	dir_find@dp+1,w,c
  5017  004F14  22DA               	addwfc	fsr2h,f,c
  5018  004F16  CFDE F033          	movff	postinc2,move_window@sector
  5019  004F1A  CFDE F034          	movff	postinc2,move_window@sector+1
  5020  004F1E  CFDE F035          	movff	postinc2,move_window@sector+2
  5021  004F22  CFDE F036          	movff	postinc2,move_window@sector+3
  5022  004F26  EC87  F02B         	call	_move_window	;wreg free
  5023  004F2A  0100               	movlb	0	; () banked
  5024  004F2C  6F87               	movwf	dir_find@res& (0+255),b
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;ff.c: 1476:   if (res != FR_OK) break;
  5028  004F2E  5187               	movf	dir_find@res& (0+255),w,b
  5029  004F30  A4D8               	btfss	status,2,c
  5030  004F32  D7E0               	goto	u7040
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;ff.c: 1477:   dir = dp->dir;
  5034  004F34  EE20 F012          	lfsr	2,18
  5035  004F38  505D               	movf	dir_find@dp,w,c
  5036  004F3A  26D9               	addwf	fsr2l,f,c
  5037  004F3C  505E               	movf	dir_find@dp+1,w,c
  5038  004F3E  22DA               	addwfc	fsr2h,f,c
  5039  004F40  CFDE F085          	movff	postinc2,dir_find@dir
  5040  004F44  CFDD F086          	movff	postdec2,dir_find@dir+1
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;ff.c: 1478:   c = dir[0];
  5044  004F48  C085  FFD9         	movff	dir_find@dir,fsr2l
  5045  004F4C  C086  FFDA         	movff	dir_find@dir+1,fsr2h
  5046  004F50  50DF               	movf	indf2,w,c
  5047  004F52  6F84               	movwf	dir_find@c& (0+255),b
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  5051  004F54  5184               	movf	dir_find@c& (0+255),w,b
  5052  004F56  A4D8               	btfss	status,2,c
  5053  004F58  D003               	goto	l5472
  5054                           
  5055                           ; BSR set to: 0
  5056  004F5A  0E04               	movlw	4
  5057  004F5C  6F87               	movwf	dir_find@res& (0+255),b
  5058  004F5E  D7CA               	goto	u7040
  5059  004F60                     l5472:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  5063  004F60  EE20 F00B          	lfsr	2,11
  5064  004F64  5185               	movf	dir_find@dir& (0+255),w,b
  5065  004F66  26D9               	addwf	fsr2l,f,c
  5066  004F68  5186               	movf	(dir_find@dir+1)& (0+255),w,b
  5067  004F6A  22DA               	addwfc	fsr2h,f,c
  5068  004F6C  B6DF               	btfsc	indf2,3,c
  5069  004F6E  D018               	goto	l5478
  5070                           
  5071                           ; BSR set to: 0
  5072  004F70  C085  F001         	movff	dir_find@dir,mem_cmp@dst
  5073  004F74  C086  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  5074  004F78  EE20 F014          	lfsr	2,20
  5075  004F7C  505D               	movf	dir_find@dp,w,c
  5076  004F7E  26D9               	addwf	fsr2l,f,c
  5077  004F80  505E               	movf	dir_find@dp+1,w,c
  5078  004F82  22DA               	addwfc	fsr2h,f,c
  5079  004F84  CFDE F003          	movff	postinc2,mem_cmp@src
  5080  004F88  CFDD F004          	movff	postdec2,mem_cmp@src+1
  5081  004F8C  0E00               	movlw	0
  5082  004F8E  6E06               	movwf	mem_cmp@cnt+1,c
  5083  004F90  0E0B               	movlw	11
  5084  004F92  6E05               	movwf	mem_cmp@cnt,c
  5085  004F94  EC5D  F02D         	call	_mem_cmp	;wreg free
  5086  004F98  5001               	movf	?_mem_cmp,w,c
  5087  004F9A  1002               	iorwf	?_mem_cmp+1,w,c
  5088  004F9C  B4D8               	btfsc	status,2,c
  5089  004F9E  D7AA               	goto	u7040
  5090  004FA0                     l5478:
  5091                           
  5092                           ;ff.c: 1505:   res = dir_next(dp, 0);
  5093  004FA0  C05D  F071         	movff	dir_find@dp,dir_next@dp
  5094  004FA4  C05E  F072         	movff	dir_find@dp+1,dir_next@dp+1
  5095  004FA8  0E00               	movlw	0
  5096  004FAA  0100               	movlb	0	; () banked
  5097  004FAC  6F74               	movwf	(dir_next@stretch+1)& (0+255),b
  5098  004FAE  0E00               	movlw	0
  5099  004FB0  6F73               	movwf	dir_next@stretch& (0+255),b
  5100  004FB2  EC0F  F014         	call	_dir_next	;wreg free
  5101  004FB6  0100               	movlb	0	; () banked
  5102  004FB8  6F87               	movwf	dir_find@res& (0+255),b
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;ff.c: 1506:  } while (res == FR_OK);
  5106  004FBA  5187               	movf	dir_find@res& (0+255),w,b
  5107  004FBC  A4D8               	btfss	status,2,c
  5108  004FBE  D79A               	goto	u7040
  5109  004FC0  D79C               	goto	l5458
  5110  004FC2                     __end_of_dir_find:
  5111                           	opt callstack 0
  5112                           
  5113 ;; *************** function _mem_cmp *****************
  5114 ;; Defined at:
  5115 ;;		line 533 in file "ff.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  dst             2    0[COMRAM] PTR const void 
  5118 ;;		 -> FatFs(558), NULL(0), 
  5119 ;;  src             2    2[COMRAM] PTR const void 
  5120 ;;		 -> f_open@sfn(12), 
  5121 ;;  cnt             2    4[COMRAM] unsigned short 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  r               2   12[COMRAM] int 
  5124 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5125 ;;		 -> f_open@sfn(12), 
  5126 ;;  d               2    8[COMRAM] PTR const unsigned char 
  5127 ;;		 -> FatFs(558), NULL(0), 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;                  2    0[COMRAM] int 
  5130 ;; Registers used:
  5131 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5137 ;;      Params:         6       0       0       0       0       0       0       0       0
  5138 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5139 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5140 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5141 ;;Total ram usage:       14 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; This function calls:
  5144 ;;		Nothing
  5145 ;; This function is called by:
  5146 ;;		_dir_find
  5147 ;; This function uses a non-reentrant model
  5148 ;;
  5149                           
  5150                           	psect	text13
  5151  005ABA                     __ptext13:
  5152                           	opt callstack 0
  5153  005ABA                     _mem_cmp:
  5154                           	opt callstack 26
  5155                           
  5156                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;incstack = 0
  5160  005ABA  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  5161  005ABE  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5162  005AC2  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  5163  005AC6  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  5164                           
  5165                           ;ff.c: 535:  int r = 0;
  5166  005ACA  0E00               	movlw	0
  5167  005ACC  6E0E               	movwf	mem_cmp@r+1,c
  5168  005ACE  0E00               	movlw	0
  5169  005AD0  6E0D               	movwf	mem_cmp@r,c
  5170  005AD2                     l5066:
  5171  005AD2  0605               	decf	mem_cmp@cnt,f,c
  5172  005AD4  A0D8               	btfss	status,0,c
  5173  005AD6  0606               	decf	mem_cmp@cnt+1,f,c
  5174  005AD8  2805               	incf	mem_cmp@cnt,w,c
  5175  005ADA  E103               	bnz	u6330
  5176  005ADC  2806               	incf	mem_cmp@cnt+1,w,c
  5177  005ADE  B4D8               	btfsc	status,2,c
  5178  005AE0  D01A               	goto	u6340
  5179  005AE2                     u6330:
  5180  005AE2  C009  FFD9         	movff	mem_cmp@d,fsr2l
  5181  005AE6  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  5182  005AEA  4A09               	infsnz	mem_cmp@d,f,c
  5183  005AEC  2A0A               	incf	mem_cmp@d+1,f,c
  5184  005AEE  50DF               	movf	indf2,w,c
  5185  005AF0  6E07               	movwf	??_mem_cmp& (0+255),c
  5186  005AF2  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  5187  005AF6  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  5188  005AFA  4A0B               	infsnz	mem_cmp@s,f,c
  5189  005AFC  2A0C               	incf	mem_cmp@s+1,f,c
  5190  005AFE  50DF               	movf	indf2,w,c
  5191  005B00  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  5192  005B02  5008               	movf	??_mem_cmp+1,w,c
  5193  005B04  5C07               	subwf	??_mem_cmp,w,c
  5194  005B06  6E0D               	movwf	mem_cmp@r,c
  5195  005B08  6A0E               	clrf	mem_cmp@r+1,c
  5196  005B0A  A0D8               	btfss	status,0,c
  5197  005B0C  060E               	decf	mem_cmp@r+1,f,c
  5198  005B0E  500D               	movf	mem_cmp@r,w,c
  5199  005B10  100E               	iorwf	mem_cmp@r+1,w,c
  5200  005B12  B4D8               	btfsc	status,2,c
  5201  005B14  D7DE               	goto	l5066
  5202  005B16                     u6340:
  5203                           
  5204                           ;ff.c: 538:  return r;
  5205  005B16  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  5206  005B1A  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  5207  005B1E  0012               	return		;funcret
  5208  005B20                     __end_of_mem_cmp:
  5209                           	opt callstack 0
  5210                           
  5211 ;; *************** function _create_name *****************
  5212 ;; Defined at:
  5213 ;;		line 1843 in file "ff.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  dp              2    8[COMRAM] PTR struct .
  5216 ;;		 -> f_open@dj(22), 
  5217 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  5218 ;;		 -> follow_path@path(2), 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  i               2   28[COMRAM] unsigned short 
  5221 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  5222 ;;		 -> f_open@sfn(12), 
  5223 ;;  p               2   23[COMRAM] PTR const unsigned char 
  5224 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  5225 ;;  ni              2   21[COMRAM] unsigned short 
  5226 ;;  si              2   18[COMRAM] unsigned short 
  5227 ;;  c               1   30[COMRAM] unsigned char 
  5228 ;;  d               1   25[COMRAM] unsigned char 
  5229 ;;  b               1   20[COMRAM] unsigned char 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      enum E93
  5232 ;; Registers used:
  5233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5239 ;;      Params:         4       0       0       0       0       0       0       0       0
  5240 ;;      Locals:        15       0       0       0       0       0       0       0       0
  5241 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5242 ;;      Totals:        23       0       0       0       0       0       0       0       0
  5243 ;;Total ram usage:       23 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    1
  5246 ;; This function calls:
  5247 ;;		_chk_chr
  5248 ;;		_mem_set
  5249 ;; This function is called by:
  5250 ;;		_follow_path
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text14
  5255  003C6A                     __ptext14:
  5256                           	opt callstack 0
  5257  003C6A                     _create_name:
  5258                           	opt callstack 26
  5259                           
  5260                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  5261                           
  5262                           ;incstack = 0
  5263  003C6A  C00B  FFD9         	movff	create_name@path,fsr2l
  5264  003C6E  C00C  FFDA         	movff	create_name@path+1,fsr2h
  5265  003C72  CFDE F018          	movff	postinc2,create_name@p
  5266  003C76  CFDD F019          	movff	postdec2,create_name@p+1
  5267  003C7A  D002               	goto	l5490
  5268  003C7C                     l5488:
  5269  003C7C  4A18               	infsnz	create_name@p,f,c
  5270  003C7E  2A19               	incf	create_name@p+1,f,c
  5271  003C80                     l5490:
  5272  003C80  C018  FFF6         	movff	create_name@p,tblptrl
  5273  003C84  C019  FFF7         	movff	create_name@p+1,tblptrh
  5274  003C88                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5275  003C88  6AF8               	clrf	tblptru,c
  5276  003C8A                     	endif
  5277  003C8A                     	if	0	;tblptru may be non-zero
  5278  003C8A                     	endif
  5279  003C8A  0008               	tblrd		*
  5280  003C8C  50F5               	movf	tablat,w,c
  5281  003C8E  0A2F               	xorlw	47
  5282  003C90  B4D8               	btfsc	status,2,c
  5283  003C92  D7F4               	goto	l5488
  5284  003C94  C018  FFF6         	movff	create_name@p,tblptrl
  5285  003C98  C019  FFF7         	movff	create_name@p+1,tblptrh
  5286  003C9C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5287  003C9C  6AF8               	clrf	tblptru,c
  5288  003C9E                     	endif
  5289  003C9E                     	if	0	;tblptru may be non-zero
  5290  003C9E                     	endif
  5291  003C9E  0008               	tblrd		*
  5292  003CA0  50F5               	movf	tablat,w,c
  5293  003CA2  0A5C               	xorlw	92
  5294  003CA4  B4D8               	btfsc	status,2,c
  5295  003CA6  D7EA               	goto	l5488
  5296                           
  5297                           ;ff.c: 1975:  sfn = dp->fn;
  5298  003CA8  EE20 F014          	lfsr	2,20
  5299  003CAC  5009               	movf	create_name@dp,w,c
  5300  003CAE  26D9               	addwf	fsr2l,f,c
  5301  003CB0  500A               	movf	create_name@dp+1,w,c
  5302  003CB2  22DA               	addwfc	fsr2h,f,c
  5303  003CB4  CFDE F01B          	movff	postinc2,create_name@sfn
  5304  003CB8  CFDD F01C          	movff	postdec2,create_name@sfn+1
  5305                           
  5306                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  5307  003CBC  C01B  F001         	movff	create_name@sfn,mem_set@dst
  5308  003CC0  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  5309  003CC4  0E00               	movlw	0
  5310  003CC6  6E04               	movwf	mem_set@val+1,c
  5311  003CC8  0E20               	movlw	32
  5312  003CCA  6E03               	movwf	mem_set@val,c
  5313  003CCC  0E00               	movlw	0
  5314  003CCE  6E06               	movwf	mem_set@cnt+1,c
  5315  003CD0  0E0B               	movlw	11
  5316  003CD2  6E05               	movwf	mem_set@cnt,c
  5317  003CD4  EC82  F02E         	call	_mem_set	;wreg free
  5318                           
  5319                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  5320  003CD8  0E00               	movlw	0
  5321  003CDA  6E15               	movwf	create_name@b,c
  5322  003CDC  C015  F01D         	movff	create_name@b,create_name@i
  5323  003CE0  6A1E               	clrf	create_name@i+1,c
  5324  003CE2  C01D  F013         	movff	create_name@i,create_name@si
  5325  003CE6  C01E  F014         	movff	create_name@i+1,create_name@si+1
  5326  003CEA  0E00               	movlw	0
  5327  003CEC  6E17               	movwf	create_name@ni+1,c
  5328  003CEE  0E08               	movlw	8
  5329  003CF0  6E16               	movwf	create_name@ni,c
  5330  003CF2                     l5502:
  5331                           
  5332                           ;ff.c: 1992:   c = (BYTE)p[si++];
  5333  003CF2  5013               	movf	create_name@si,w,c
  5334  003CF4  2418               	addwf	create_name@p,w,c
  5335  003CF6  6E0D               	movwf	??_create_name& (0+255),c
  5336  003CF8  5014               	movf	create_name@si+1,w,c
  5337  003CFA  2019               	addwfc	create_name@p+1,w,c
  5338  003CFC  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5339  003CFE  C00D  FFF6         	movff	??_create_name,tblptrl
  5340  003D02  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5341  003D06                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5342  003D06  6AF8               	clrf	tblptru,c
  5343  003D08                     	endif
  5344  003D08                     	if	0	;tblptru may be non-zero
  5345  003D08                     	endif
  5346  003D08  0008               	tblrd		*
  5347  003D0A  CFF5 F01F          	movff	tablat,create_name@c
  5348  003D0E  4A13               	infsnz	create_name@si,f,c
  5349  003D10  2A14               	incf	create_name@si+1,f,c
  5350                           
  5351                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  5352  003D12  0E20               	movlw	32
  5353  003D14  641F               	cpfsgt	create_name@c,c
  5354  003D16  D0A5               	goto	l5586
  5355  003D18  0E2F               	movlw	47
  5356  003D1A  181F               	xorwf	create_name@c,w,c
  5357  003D1C  B4D8               	btfsc	status,2,c
  5358  003D1E  D0A1               	goto	l5586
  5359  003D20  0E5C               	movlw	92
  5360  003D22  181F               	xorwf	create_name@c,w,c
  5361  003D24  B4D8               	btfsc	status,2,c
  5362  003D26  D09D               	goto	l5586
  5363                           
  5364                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  5365  003D28  0E2E               	movlw	46
  5366  003D2A  181F               	xorwf	create_name@c,w,c
  5367  003D2C  B4D8               	btfsc	status,2,c
  5368  003D2E  D006               	goto	u7160
  5369  003D30  5016               	movf	create_name@ni,w,c
  5370  003D32  5C1D               	subwf	create_name@i,w,c
  5371  003D34  5017               	movf	create_name@ni+1,w,c
  5372  003D36  581E               	subwfb	create_name@i+1,w,c
  5373  003D38  A0D8               	btfss	status,0,c
  5374  003D3A  D018               	goto	l5528
  5375  003D3C                     u7160:
  5376                           
  5377                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  5378  003D3C  0E08               	movlw	8
  5379  003D3E  1816               	xorwf	create_name@ni,w,c
  5380  003D40  1017               	iorwf	create_name@ni+1,w,c
  5381  003D42  A4D8               	btfss	status,2,c
  5382  003D44  D004               	goto	u7180
  5383  003D46  0E2E               	movlw	46
  5384  003D48  181F               	xorwf	create_name@c,w,c
  5385  003D4A  B4D8               	btfsc	status,2,c
  5386  003D4C  D002               	goto	l5524
  5387  003D4E                     u7180:
  5388  003D4E  0E06               	movlw	6
  5389  003D50  0012               	return	
  5390  003D52                     l5524:
  5391                           
  5392                           ;ff.c: 1996:    i = 8; ni = 11;
  5393  003D52  0E00               	movlw	0
  5394  003D54  6E1E               	movwf	create_name@i+1,c
  5395  003D56  0E08               	movlw	8
  5396  003D58  6E1D               	movwf	create_name@i,c
  5397  003D5A  0E00               	movlw	0
  5398  003D5C  6E17               	movwf	create_name@ni+1,c
  5399  003D5E  0E0B               	movlw	11
  5400  003D60  6E16               	movwf	create_name@ni,c
  5401                           
  5402                           ;ff.c: 1997:    b <<= 2; continue;
  5403  003D62  90D8               	bcf	status,0,c
  5404  003D64  3615               	rlcf	create_name@b,f,c
  5405  003D66  90D8               	bcf	status,0,c
  5406  003D68  3615               	rlcf	create_name@b,f,c
  5407  003D6A  D7C3               	goto	l5502
  5408  003D6C                     l5528:
  5409                           
  5410                           ;ff.c: 1999:   if (c >= 0x80) {
  5411  003D6C  0E7F               	movlw	127
  5412  003D6E  641F               	cpfsgt	create_name@c,c
  5413  003D70  D002               	goto	l432
  5414                           
  5415                           ;ff.c: 2000:    b |= 3;
  5416  003D72  0E03               	movlw	3
  5417  003D74  1215               	iorwf	create_name@b,f,c
  5418  003D76                     l432:
  5419                           
  5420                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  5421  003D76  0E80               	movlw	128
  5422  003D78  641F               	cpfsgt	create_name@c,c
  5423  003D7A  D003               	goto	u7210
  5424  003D7C  0E9F               	movlw	159
  5425  003D7E  641F               	cpfsgt	create_name@c,c
  5426  003D80  D006               	goto	u7230
  5427  003D82                     u7210:
  5428  003D82  0EDF               	movlw	223
  5429  003D84  641F               	cpfsgt	create_name@c,c
  5430  003D86  D044               	goto	l5562
  5431  003D88  0EFD               	movlw	253
  5432  003D8A  601F               	cpfslt	create_name@c,c
  5433  003D8C  D041               	goto	l5562
  5434  003D8E                     u7230:
  5435                           
  5436                           ;ff.c: 2010:    d = (BYTE)p[si++];
  5437  003D8E  5013               	movf	create_name@si,w,c
  5438  003D90  2418               	addwf	create_name@p,w,c
  5439  003D92  6E0D               	movwf	??_create_name& (0+255),c
  5440  003D94  5014               	movf	create_name@si+1,w,c
  5441  003D96  2019               	addwfc	create_name@p+1,w,c
  5442  003D98  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5443  003D9A  C00D  FFF6         	movff	??_create_name,tblptrl
  5444  003D9E  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5445  003DA2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5446  003DA2  6AF8               	clrf	tblptru,c
  5447  003DA4                     	endif
  5448  003DA4                     	if	0	;tblptru may be non-zero
  5449  003DA4                     	endif
  5450  003DA4  0008               	tblrd		*
  5451  003DA6  CFF5 F01A          	movff	tablat,create_name@d
  5452  003DAA  4A13               	infsnz	create_name@si,f,c
  5453  003DAC  2A14               	incf	create_name@si+1,f,c
  5454                           
  5455                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  5456  003DAE  0E3F               	movlw	63
  5457  003DB0  641A               	cpfsgt	create_name@d,c
  5458  003DB2  D003               	goto	u7250
  5459  003DB4  0E7E               	movlw	126
  5460  003DB6  641A               	cpfsgt	create_name@d,c
  5461  003DB8  D006               	goto	u7270
  5462  003DBA                     u7250:
  5463  003DBA  0E7F               	movlw	127
  5464  003DBC  641A               	cpfsgt	create_name@d,c
  5465  003DBE  D7C7               	goto	u7180
  5466  003DC0  0EFD               	movlw	253
  5467  003DC2  601A               	cpfslt	create_name@d,c
  5468  003DC4  D7C4               	goto	u7180
  5469  003DC6                     u7270:
  5470  003DC6  0EFF               	movlw	255
  5471  003DC8  6E0D               	movwf	??_create_name& (0+255),c
  5472  003DCA  0EFF               	movlw	255
  5473  003DCC  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5474  003DCE  C016  F00F         	movff	create_name@ni,??_create_name+2
  5475  003DD2  C017  F010         	movff	create_name@ni+1,??_create_name+3
  5476  003DD6  500D               	movf	??_create_name,w,c
  5477  003DD8  260F               	addwf	??_create_name+2,f,c
  5478  003DDA  500E               	movf	??_create_name+1,w,c
  5479  003DDC  2210               	addwfc	??_create_name+3,f,c
  5480  003DDE  500F               	movf	??_create_name+2,w,c
  5481  003DE0  5C1D               	subwf	create_name@i,w,c
  5482  003DE2  5010               	movf	??_create_name+3,w,c
  5483  003DE4  581E               	subwfb	create_name@i+1,w,c
  5484  003DE6  B0D8               	btfsc	status,0,c
  5485  003DE8  D7B2               	goto	u7180
  5486                           
  5487                           ;ff.c: 2013:    sfn[i++] = c;
  5488  003DEA  501D               	movf	create_name@i,w,c
  5489  003DEC  241B               	addwf	create_name@sfn,w,c
  5490  003DEE  6ED9               	movwf	fsr2l,c
  5491  003DF0  501E               	movf	create_name@i+1,w,c
  5492  003DF2  201C               	addwfc	create_name@sfn+1,w,c
  5493  003DF4  6EDA               	movwf	fsr2h,c
  5494  003DF6  C01F  FFDF         	movff	create_name@c,indf2
  5495  003DFA  4A1D               	infsnz	create_name@i,f,c
  5496  003DFC  2A1E               	incf	create_name@i+1,f,c
  5497                           
  5498                           ;ff.c: 2014:    sfn[i++] = d;
  5499  003DFE  501D               	movf	create_name@i,w,c
  5500  003E00  241B               	addwf	create_name@sfn,w,c
  5501  003E02  6ED9               	movwf	fsr2l,c
  5502  003E04  501E               	movf	create_name@i+1,w,c
  5503  003E06  201C               	addwfc	create_name@sfn+1,w,c
  5504  003E08  6EDA               	movwf	fsr2h,c
  5505  003E0A  C01A  FFDF         	movff	create_name@d,indf2
  5506  003E0E  D026               	goto	l5584
  5507  003E10                     l5562:
  5508                           
  5509                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  5510  003E10  0E01               	movlw	low STR_1
  5511  003E12  6E01               	movwf	chk_chr@str,c
  5512  003E14  0E08               	movlw	high STR_1
  5513  003E16  6E02               	movwf	chk_chr@str+1,c
  5514  003E18  C01F  F003         	movff	create_name@c,chk_chr@chr
  5515  003E1C  6A04               	clrf	chk_chr@chr+1,c
  5516  003E1E  ECE4  F02D         	call	_chk_chr	;wreg free
  5517  003E22  5001               	movf	?_chk_chr,w,c
  5518  003E24  1002               	iorwf	?_chk_chr+1,w,c
  5519  003E26  A4D8               	btfss	status,2,c
  5520  003E28  D792               	goto	u7180
  5521                           
  5522                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  5523  003E2A  0E40               	movlw	64
  5524  003E2C  641F               	cpfsgt	create_name@c,c
  5525  003E2E  D005               	goto	l5574
  5526  003E30  0E5B               	movlw	91
  5527  003E32  601F               	cpfslt	create_name@c,c
  5528  003E34  D002               	goto	l5574
  5529                           
  5530                           ;ff.c: 2019:     b |= 2;
  5531  003E36  8215               	bsf	create_name@b,1,c
  5532                           
  5533                           ;ff.c: 2020:    } else {
  5534  003E38  D009               	goto	l5582
  5535  003E3A                     l5574:
  5536                           
  5537                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  5538  003E3A  0E60               	movlw	96
  5539  003E3C  641F               	cpfsgt	create_name@c,c
  5540  003E3E  D006               	goto	l5582
  5541  003E40  0E7B               	movlw	123
  5542  003E42  601F               	cpfslt	create_name@c,c
  5543  003E44  D003               	goto	l5582
  5544                           
  5545                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  5546  003E46  8015               	bsf	create_name@b,0,c
  5547  003E48  0E20               	movlw	32
  5548  003E4A  5E1F               	subwf	create_name@c,f,c
  5549  003E4C                     l5582:
  5550                           
  5551                           ;ff.c: 2025:    sfn[i++] = c;
  5552  003E4C  501D               	movf	create_name@i,w,c
  5553  003E4E  241B               	addwf	create_name@sfn,w,c
  5554  003E50  6ED9               	movwf	fsr2l,c
  5555  003E52  501E               	movf	create_name@i+1,w,c
  5556  003E54  201C               	addwfc	create_name@sfn+1,w,c
  5557  003E56  6EDA               	movwf	fsr2h,c
  5558  003E58  C01F  FFDF         	movff	create_name@c,indf2
  5559  003E5C                     l5584:
  5560  003E5C  4A1D               	infsnz	create_name@i,f,c
  5561  003E5E  2A1E               	incf	create_name@i+1,f,c
  5562  003E60  D748               	goto	l5502
  5563  003E62                     l5586:
  5564                           
  5565                           ;ff.c: 2028:  *path = &p[si];
  5566  003E62  5013               	movf	create_name@si,w,c
  5567  003E64  2418               	addwf	create_name@p,w,c
  5568  003E66  6E0D               	movwf	??_create_name& (0+255),c
  5569  003E68  5014               	movf	create_name@si+1,w,c
  5570  003E6A  2019               	addwfc	create_name@p+1,w,c
  5571  003E6C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5572  003E6E  C00B  FFD9         	movff	create_name@path,fsr2l
  5573  003E72  C00C  FFDA         	movff	create_name@path+1,fsr2h
  5574  003E76  C00D  FFDE         	movff	??_create_name,postinc2
  5575  003E7A  C00E  FFDD         	movff	??_create_name+1,postdec2
  5576                           
  5577                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  5578  003E7E  0E20               	movlw	32
  5579  003E80  641F               	cpfsgt	create_name@c,c
  5580  003E82  D004               	goto	l5592
  5581  003E84  0E00               	movlw	0
  5582  003E86  6E12               	movwf	_create_name$624+1,c
  5583  003E88  0E00               	movlw	0
  5584  003E8A  D003               	goto	L8
  5585  003E8C                     l5592:
  5586  003E8C  0E00               	movlw	0
  5587  003E8E  6E12               	movwf	_create_name$624+1,c
  5588  003E90  0E04               	movlw	4
  5589  003E92                     L8:
  5590  003E92  6E11               	movwf	_create_name$624,c
  5591  003E94  C011  F01F         	movff	_create_name$624,create_name@c
  5592                           
  5593                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  5594  003E98  501D               	movf	create_name@i,w,c
  5595  003E9A  101E               	iorwf	create_name@i+1,w,c
  5596  003E9C  B4D8               	btfsc	status,2,c
  5597  003E9E  D757               	goto	u7180
  5598                           
  5599                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  5600  003EA0  C01B  FFD9         	movff	create_name@sfn,fsr2l
  5601  003EA4  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  5602  003EA8  0EE5               	movlw	229
  5603  003EAA  18DE               	xorwf	postinc2,w,c
  5604  003EAC  A4D8               	btfss	status,2,c
  5605  003EAE  D006               	goto	l5606
  5606  003EB0  C01B  FFD9         	movff	create_name@sfn,fsr2l
  5607  003EB4  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  5608  003EB8  0E05               	movlw	5
  5609  003EBA  6EDF               	movwf	indf2,c
  5610  003EBC                     l5606:
  5611                           
  5612                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  5613  003EBC  0E08               	movlw	8
  5614  003EBE  1816               	xorwf	create_name@ni,w,c
  5615  003EC0  1017               	iorwf	create_name@ni+1,w,c
  5616  003EC2  A4D8               	btfss	status,2,c
  5617  003EC4  D004               	goto	l456
  5618  003EC6  90D8               	bcf	status,0,c
  5619  003EC8  3615               	rlcf	create_name@b,f,c
  5620  003ECA  90D8               	bcf	status,0,c
  5621  003ECC  3615               	rlcf	create_name@b,f,c
  5622  003ECE                     l456:
  5623                           
  5624                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  5625  003ECE  5015               	movf	create_name@b,w,c
  5626  003ED0  0B03               	andlw	3
  5627  003ED2  06E8               	decf	wreg,f,c
  5628  003ED4  B4D8               	btfsc	status,2,c
  5629  003ED6  881F               	bsf	create_name@c,4,c
  5630                           
  5631                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  5632  003ED8  5015               	movf	create_name@b,w,c
  5633  003EDA  0B0C               	andlw	12
  5634  003EDC  0A04               	xorlw	4
  5635  003EDE  B4D8               	btfsc	status,2,c
  5636  003EE0  861F               	bsf	create_name@c,3,c
  5637                           
  5638                           ;ff.c: 2038:  sfn[11] = c;
  5639  003EE2  EE20 F00B          	lfsr	2,11
  5640  003EE6  501B               	movf	create_name@sfn,w,c
  5641  003EE8  26D9               	addwf	fsr2l,f,c
  5642  003EEA  501C               	movf	create_name@sfn+1,w,c
  5643  003EEC  22DA               	addwfc	fsr2h,f,c
  5644  003EEE  C01F  FFDF         	movff	create_name@c,indf2
  5645                           
  5646                           ;ff.c: 2040:  return FR_OK;
  5647  003EF2  0E00               	movlw	0
  5648  003EF4  0012               	return		;funcret
  5649  003EF6                     __end_of_create_name:
  5650                           	opt callstack 0
  5651                           
  5652 ;; *************** function _chk_chr *****************
  5653 ;; Defined at:
  5654 ;;		line 543 in file "ff.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  str             2    0[COMRAM] PTR const unsigned char 
  5657 ;;		 -> STR_2(15), 
  5658 ;;  chr             2    2[COMRAM] int 
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;		None
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  2    0[COMRAM] int 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5670 ;;      Params:         4       0       0       0       0       0       0       0       0
  5671 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5672 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5673 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5674 ;;Total ram usage:        6 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_create_name
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text15
  5684  005BC8                     __ptext15:
  5685                           	opt callstack 0
  5686  005BC8                     _chk_chr:
  5687                           	opt callstack 26
  5688                           
  5689                           ;ff.c: 544:  while (*str && *str != chr) str++;
  5690                           
  5691                           ;incstack = 0
  5692  005BC8  D002               	goto	l5074
  5693  005BCA                     l5072:
  5694  005BCA  4A01               	infsnz	chk_chr@str,f,c
  5695  005BCC  2A02               	incf	chk_chr@str+1,f,c
  5696  005BCE                     l5074:
  5697  005BCE  C001  FFF6         	movff	chk_chr@str,tblptrl
  5698  005BD2  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5699  005BD6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5700  005BD6  6AF8               	clrf	tblptru,c
  5701  005BD8                     	endif
  5702  005BD8                     	if	0	;tblptru may be non-zero
  5703  005BD8                     	endif
  5704  005BD8  0008               	tblrd		*
  5705  005BDA  50F5               	movf	tablat,w,c
  5706  005BDC  0900               	iorlw	0
  5707  005BDE  B4D8               	btfsc	status,2,c
  5708  005BE0  D010               	goto	u6360
  5709  005BE2  C001  FFF6         	movff	chk_chr@str,tblptrl
  5710  005BE6  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5711  005BEA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5712  005BEA  6AF8               	clrf	tblptru,c
  5713  005BEC                     	endif
  5714  005BEC                     	if	0	;tblptru may be non-zero
  5715  005BEC                     	endif
  5716  005BEC  0008               	tblrd		*
  5717  005BEE  50F5               	movf	tablat,w,c
  5718  005BF0  6E05               	movwf	??_chk_chr& (0+255),c
  5719  005BF2  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  5720  005BF4  5003               	movf	chk_chr@chr,w,c
  5721  005BF6  1805               	xorwf	??_chk_chr,w,c
  5722  005BF8  E1E8               	bnz	l5072
  5723  005BFA  5004               	movf	chk_chr@chr+1,w,c
  5724  005BFC  1806               	xorwf	??_chk_chr+1,w,c
  5725  005BFE  A4D8               	btfss	status,2,c
  5726  005C00  D7E4               	goto	l5072
  5727  005C02                     u6360:
  5728                           
  5729                           ;ff.c: 545:  return *str;
  5730  005C02  C001  FFF6         	movff	chk_chr@str,tblptrl
  5731  005C06  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5732  005C0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5733  005C0A  6AF8               	clrf	tblptru,c
  5734  005C0C                     	endif
  5735  005C0C                     	if	0	;tblptru may be non-zero
  5736  005C0C                     	endif
  5737  005C0C  0008               	tblrd		*
  5738  005C0E  50F5               	movf	tablat,w,c
  5739  005C10  6E01               	movwf	?_chk_chr,c
  5740  005C12  6A02               	clrf	?_chk_chr+1,c
  5741  005C14  0012               	return		;funcret
  5742  005C16                     __end_of_chk_chr:
  5743                           	opt callstack 0
  5744                           
  5745 ;; *************** function _dir_register *****************
  5746 ;; Defined at:
  5747 ;;		line 1578 in file "ff.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  dp              2   43[BANK0 ] PTR struct .
  5750 ;;		 -> f_open@dj(22), 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;  res             1   47[BANK0 ] enum E93
  5753 ;; Return value:  Size  Location     Type
  5754 ;;                  1    wreg      enum E93
  5755 ;; Registers used:
  5756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5757 ;; Tracked objects:
  5758 ;;		On entry : 0/0
  5759 ;;		On exit  : 0/0
  5760 ;;		Unchanged: 0/0
  5761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5762 ;;      Params:         0       2       0       0       0       0       0       0       0
  5763 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5764 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5765 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5766 ;;Total ram usage:        5 bytes
  5767 ;; Hardware stack levels used:    1
  5768 ;; Hardware stack levels required when called:   12
  5769 ;; This function calls:
  5770 ;;		_dir_alloc
  5771 ;;		_mem_cpy
  5772 ;;		_mem_set
  5773 ;;		_move_window
  5774 ;; This function is called by:
  5775 ;;		_f_open
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779                           	psect	text16
  5780  0050AE                     __ptext16:
  5781                           	opt callstack 0
  5782  0050AE                     _dir_register:
  5783                           	opt callstack 16
  5784                           
  5785                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  5786                           
  5787                           ;incstack = 0
  5788  0050AE  C08B  F084         	movff	dir_register@dp,dir_alloc@dp
  5789  0050B2  C08C  F085         	movff	dir_register@dp+1,dir_alloc@dp+1
  5790  0050B6  0E00               	movlw	0
  5791  0050B8  0100               	movlb	0	; () banked
  5792  0050BA  6F87               	movwf	(dir_alloc@nent+1)& (0+255),b
  5793  0050BC  0E01               	movlw	1
  5794  0050BE  6F86               	movwf	dir_alloc@nent& (0+255),b
  5795  0050C0  ECF3  F026         	call	_dir_alloc	;wreg free
  5796  0050C4  0100               	movlb	0	; () banked
  5797  0050C6  6F8F               	movwf	dir_register@res& (0+255),b
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;ff.c: 1632:  if (res == FR_OK) {
  5801  0050C8  518F               	movf	dir_register@res& (0+255),w,b
  5802  0050CA  A4D8               	btfss	status,2,c
  5803  0050CC  D061               	goto	l5788
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  5807  0050CE  C08B  FFD9         	movff	dir_register@dp,fsr2l
  5808  0050D2  C08C  FFDA         	movff	dir_register@dp+1,fsr2h
  5809  0050D6  CFDE F031          	movff	postinc2,move_window@fs
  5810  0050DA  CFDD F032          	movff	postdec2,move_window@fs+1
  5811  0050DE  EE20 F00E          	lfsr	2,14
  5812  0050E2  518B               	movf	dir_register@dp& (0+255),w,b
  5813  0050E4  26D9               	addwf	fsr2l,f,c
  5814  0050E6  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  5815  0050E8  22DA               	addwfc	fsr2h,f,c
  5816  0050EA  CFDE F033          	movff	postinc2,move_window@sector
  5817  0050EE  CFDE F034          	movff	postinc2,move_window@sector+1
  5818  0050F2  CFDE F035          	movff	postinc2,move_window@sector+2
  5819  0050F6  CFDE F036          	movff	postinc2,move_window@sector+3
  5820  0050FA  EC87  F02B         	call	_move_window	;wreg free
  5821  0050FE  0100               	movlb	0	; () banked
  5822  005100  6F8F               	movwf	dir_register@res& (0+255),b
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;ff.c: 1634:   if (res == FR_OK) {
  5826  005102  518F               	movf	dir_register@res& (0+255),w,b
  5827  005104  A4D8               	btfss	status,2,c
  5828  005106  D044               	goto	l5788
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  5832  005108  EE20 F012          	lfsr	2,18
  5833  00510C  518B               	movf	dir_register@dp& (0+255),w,b
  5834  00510E  26D9               	addwf	fsr2l,f,c
  5835  005110  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  5836  005112  22DA               	addwfc	fsr2h,f,c
  5837  005114  CFDE F001          	movff	postinc2,mem_set@dst
  5838  005118  CFDD F002          	movff	postdec2,mem_set@dst+1
  5839  00511C  0E00               	movlw	0
  5840  00511E  6E04               	movwf	mem_set@val+1,c
  5841  005120  0E00               	movlw	0
  5842  005122  6E03               	movwf	mem_set@val,c
  5843  005124  0E00               	movlw	0
  5844  005126  6E06               	movwf	mem_set@cnt+1,c
  5845  005128  0E20               	movlw	32
  5846  00512A  6E05               	movwf	mem_set@cnt,c
  5847  00512C  EC82  F02E         	call	_mem_set	;wreg free
  5848                           
  5849                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  5850  005130  0100               	movlb	0	; () banked
  5851  005132  EE20 F012          	lfsr	2,18
  5852  005136  518B               	movf	dir_register@dp& (0+255),w,b
  5853  005138  26D9               	addwf	fsr2l,f,c
  5854  00513A  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  5855  00513C  22DA               	addwfc	fsr2h,f,c
  5856  00513E  CFDE F001          	movff	postinc2,mem_cpy@dst
  5857  005142  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  5858  005146  EE20 F014          	lfsr	2,20
  5859  00514A  518B               	movf	dir_register@dp& (0+255),w,b
  5860  00514C  26D9               	addwf	fsr2l,f,c
  5861  00514E  518C               	movf	(dir_register@dp+1)& (0+255),w,b
  5862  005150  22DA               	addwfc	fsr2h,f,c
  5863  005152  CFDE F08D          	movff	postinc2,??_dir_register
  5864  005156  CFDD F08E          	movff	postdec2,??_dir_register+1
  5865  00515A  C08D  F003         	movff	??_dir_register,mem_cpy@src
  5866  00515E  C08E  F004         	movff	??_dir_register+1,mem_cpy@src+1
  5867  005162  5003               	movf	mem_cpy@src,w,c
  5868  005164  1004               	iorwf	mem_cpy@src+1,w,c
  5869  005166  A4D8               	btfss	status,2,c
  5870  005168  0E20               	movlw	32
  5871  00516A  6E05               	movwf	mem_cpy@src+2,c
  5872  00516C  0E00               	movlw	0
  5873  00516E  6E07               	movwf	mem_cpy@cnt+1,c
  5874  005170  0E0B               	movlw	11
  5875  005172  6E06               	movwf	mem_cpy@cnt,c
  5876  005174  ECA4  F029         	call	_mem_cpy	;wreg free
  5877                           
  5878                           ;ff.c: 1640:    dp->fs->wflag = 1;
  5879  005178  C08B  FFD9         	movff	dir_register@dp,fsr2l
  5880  00517C  C08C  FFDA         	movff	dir_register@dp+1,fsr2h
  5881  005180  EE10 F004          	lfsr	1,4
  5882  005184  50DE               	movf	postinc2,w,c
  5883  005186  26E1               	addwf	fsr1l,f,c
  5884  005188  50DD               	movf	postdec2,w,c
  5885  00518A  22E2               	addwfc	fsr1h,f,c
  5886  00518C  0E01               	movlw	1
  5887  00518E  6EE7               	movwf	indf1,c
  5888  005190                     l5788:
  5889                           
  5890                           ;ff.c: 1644:  return res;
  5891  005190  0100               	movlb	0	; () banked
  5892  005192  518F               	movf	dir_register@res& (0+255),w,b
  5893                           
  5894                           ; BSR set to: 0
  5895  005194  0012               	return		;funcret
  5896  005196                     __end_of_dir_register:
  5897                           	opt callstack 0
  5898                           
  5899 ;; *************** function _mem_cpy *****************
  5900 ;; Defined at:
  5901 ;;		line 507 in file "ff.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  dst             2    0[COMRAM] PTR void 
  5904 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  5905 ;;  src             3    2[COMRAM] PTR const void 
  5906 ;;		 -> FatFs(558), ROM(32767), f_open@sfn(12), NULL(0), 
  5907 ;;  cnt             2    5[COMRAM] unsigned short 
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;  s               3    9[COMRAM] PTR const unsigned char 
  5910 ;;		 -> FatFs(558), ROM(32767), f_open@sfn(12), NULL(0), 
  5911 ;;  d               2   12[COMRAM] PTR unsigned char 
  5912 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5922 ;;      Params:         7       0       0       0       0       0       0       0       0
  5923 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5924 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5925 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5926 ;;Total ram usage:       14 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; This function calls:
  5929 ;;		Nothing
  5930 ;; This function is called by:
  5931 ;;		_dir_register
  5932 ;;		_f_write
  5933 ;;		_f_read
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text17
  5938  005348                     __ptext17:
  5939                           	opt callstack 0
  5940  005348                     _mem_cpy:
  5941                           	opt callstack 27
  5942                           
  5943                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;incstack = 0
  5947  005348  C001  F00D         	movff	mem_cpy@dst,mem_cpy@d
  5948  00534C  C002  F00E         	movff	mem_cpy@dst+1,mem_cpy@d+1
  5949                           
  5950                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  5951  005350  C003  F00A         	movff	mem_cpy@src,mem_cpy@s
  5952  005354  C004  F00B         	movff	mem_cpy@src+1,mem_cpy@s+1
  5953  005358  C005  F00C         	movff	mem_cpy@src+2,mem_cpy@s+2
  5954                           
  5955                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  5956  00535C  D02D               	goto	l5366
  5957  00535E                     l5358:
  5958                           
  5959                           ;ff.c: 513:   *(int*)d = *(int*)s;
  5960  00535E  C00A  FFF6         	movff	mem_cpy@s,tblptrl
  5961  005362  C00B  FFF7         	movff	mem_cpy@s+1,tblptrh
  5962  005366  C00C  FFF8         	movff	mem_cpy@s+2,tblptru
  5963  00536A  BAF8               	btfsc	tblptru,5,c
  5964  00536C  D007               	bra	u6887
  5965  00536E  0009               	tblrd		*+
  5966  005370  CFF5 F008          	movff	tablat,??_mem_cpy
  5967  005374  0009               	tblrd		*+
  5968  005376  CFF5 F009          	movff	tablat,??_mem_cpy+1
  5969  00537A  D008               	bra	u6880
  5970  00537C                     u6887:
  5971  00537C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5972  005380  CFF7 FFEA          	movff	tblptrh,fsr0h
  5973  005384  CFEE F008          	movff	postinc0,??_mem_cpy
  5974  005388  CFEE F009          	movff	postinc0,??_mem_cpy+1
  5975  00538C                     u6880:
  5976  00538C  C00D  FFD9         	movff	mem_cpy@d,fsr2l
  5977  005390  C00E  FFDA         	movff	mem_cpy@d+1,fsr2h
  5978  005394  C008  FFDE         	movff	??_mem_cpy,postinc2
  5979  005398  C009  FFDD         	movff	??_mem_cpy+1,postdec2
  5980                           
  5981                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  5982  00539C  0E02               	movlw	2
  5983  00539E  260D               	addwf	mem_cpy@d,f,c
  5984  0053A0  0E00               	movlw	0
  5985  0053A2  220E               	addwfc	mem_cpy@d+1,f,c
  5986  0053A4  0E02               	movlw	2
  5987  0053A6  260A               	addwf	mem_cpy@s,f,c
  5988  0053A8  0E00               	movlw	0
  5989  0053AA  220B               	addwfc	mem_cpy@s+1,f,c
  5990  0053AC  0E00               	movlw	0
  5991  0053AE  220C               	addwfc	mem_cpy@s+2,f,c
  5992                           
  5993                           ;ff.c: 515:   cnt -= sizeof (int);
  5994  0053B0  0E02               	movlw	2
  5995  0053B2  5E06               	subwf	mem_cpy@cnt,f,c
  5996  0053B4  0E00               	movlw	0
  5997  0053B6  5A07               	subwfb	mem_cpy@cnt+1,f,c
  5998  0053B8                     l5366:
  5999                           
  6000                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  6001  0053B8  5007               	movf	mem_cpy@cnt+1,w,c
  6002  0053BA  E1D1               	bnz	l5358
  6003  0053BC  0E02               	movlw	2
  6004  0053BE  5C06               	subwf	mem_cpy@cnt,w,c
  6005  0053C0  A0D8               	btfss	status,0,c
  6006  0053C2  D01E               	goto	l5374
  6007  0053C4  D7CC               	goto	l5358
  6008  0053C6                     l5368:
  6009                           
  6010                           ;ff.c: 519:   *d++ = *s++;
  6011  0053C6  C00A  FFF6         	movff	mem_cpy@s,tblptrl
  6012  0053CA  C00B  FFF7         	movff	mem_cpy@s+1,tblptrh
  6013  0053CE  C00C  FFF8         	movff	mem_cpy@s+2,tblptru
  6014  0053D2  C00D  FFD9         	movff	mem_cpy@d,fsr2l
  6015  0053D6  C00E  FFDA         	movff	mem_cpy@d+1,fsr2h
  6016  0053DA  BAF8               	btfsc	tblptru,5,c
  6017  0053DC  D003               	bra	u6907
  6018  0053DE  0008               	tblrd		*
  6019  0053E0  50F5               	movf	tablat,w,c
  6020  0053E2  D005               	bra	u6900
  6021  0053E4                     u6907:
  6022  0053E4  CFF6 FFE9          	movff	tblptrl,fsr0l
  6023  0053E8  CFF7 FFEA          	movff	tblptrh,fsr0h
  6024  0053EC  50EF               	movf	indf0,w,c
  6025  0053EE                     u6900:
  6026  0053EE  6EDF               	movwf	indf2,c
  6027  0053F0  0E01               	movlw	1
  6028  0053F2  260A               	addwf	mem_cpy@s,f,c
  6029  0053F4  0E00               	movlw	0
  6030  0053F6  220B               	addwfc	mem_cpy@s+1,f,c
  6031  0053F8  0E00               	movlw	0
  6032  0053FA  220C               	addwfc	mem_cpy@s+2,f,c
  6033  0053FC  4A0D               	infsnz	mem_cpy@d,f,c
  6034  0053FE  2A0E               	incf	mem_cpy@d+1,f,c
  6035  005400                     l5374:
  6036                           
  6037                           ;ff.c: 518:  while (cnt--)
  6038  005400  0606               	decf	mem_cpy@cnt,f,c
  6039  005402  A0D8               	btfss	status,0,c
  6040  005404  0607               	decf	mem_cpy@cnt+1,f,c
  6041  005406  2806               	incf	mem_cpy@cnt,w,c
  6042  005408  E1DE               	bnz	l5368
  6043  00540A  2807               	incf	mem_cpy@cnt+1,w,c
  6044  00540C  B4D8               	btfsc	status,2,c
  6045  00540E  0012               	return	
  6046  005410  D7DA               	goto	l5368
  6047  005412                     __end_of_mem_cpy:
  6048                           	opt callstack 0
  6049                           
  6050 ;; *************** function _dir_alloc *****************
  6051 ;; Defined at:
  6052 ;;		line 1199 in file "ff.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  dp              2   36[BANK0 ] PTR struct .
  6055 ;;		 -> f_open@dj(22), 
  6056 ;;  nent            2   38[BANK0 ] unsigned short 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  n               2   40[BANK0 ] unsigned short 
  6059 ;;  res             1   42[BANK0 ] enum E93
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      enum E93
  6062 ;; Registers used:
  6063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6069 ;;      Params:         0       4       0       0       0       0       0       0       0
  6070 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6071 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6072 ;;      Totals:         3       7       0       0       0       0       0       0       0
  6073 ;;Total ram usage:       10 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:   11
  6076 ;; This function calls:
  6077 ;;		_dir_next
  6078 ;;		_dir_sdi
  6079 ;;		_move_window
  6080 ;; This function is called by:
  6081 ;;		_dir_register
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text18
  6086  004DE6                     __ptext18:
  6087                           	opt callstack 0
  6088  004DE6                     _dir_alloc:
  6089                           	opt callstack 16
  6090                           
  6091                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  6092                           
  6093                           ;incstack = 0
  6094  004DE6  C084  F057         	movff	dir_alloc@dp,dir_sdi@dp
  6095  004DEA  C085  F058         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  6096  004DEE  0E00               	movlw	0
  6097  004DF0  6E5A               	movwf	dir_sdi@idx+1,c
  6098  004DF2  0E00               	movlw	0
  6099  004DF4  6E59               	movwf	dir_sdi@idx,c
  6100  004DF6  ECD4  F01C         	call	_dir_sdi	;wreg free
  6101  004DFA  0100               	movlb	0	; () banked
  6102  004DFC  6F8A               	movwf	dir_alloc@res& (0+255),b
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;ff.c: 1209:  if (res == FR_OK) {
  6106  004DFE  518A               	movf	dir_alloc@res& (0+255),w,b
  6107  004E00  A4D8               	btfss	status,2,c
  6108  004E02  D061               	goto	u7010
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;ff.c: 1210:   n = 0;
  6112  004E04  0E00               	movlw	0
  6113  004E06  6F89               	movwf	(dir_alloc@n+1)& (0+255),b
  6114  004E08  0E00               	movlw	0
  6115  004E0A  6F88               	movwf	dir_alloc@n& (0+255),b
  6116  004E0C                     l5414:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  6120  004E0C  C084  FFD9         	movff	dir_alloc@dp,fsr2l
  6121  004E10  C085  FFDA         	movff	dir_alloc@dp+1,fsr2h
  6122  004E14  CFDE F031          	movff	postinc2,move_window@fs
  6123  004E18  CFDD F032          	movff	postdec2,move_window@fs+1
  6124  004E1C  EE20 F00E          	lfsr	2,14
  6125  004E20  5184               	movf	dir_alloc@dp& (0+255),w,b
  6126  004E22  26D9               	addwf	fsr2l,f,c
  6127  004E24  5185               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6128  004E26  22DA               	addwfc	fsr2h,f,c
  6129  004E28  CFDE F033          	movff	postinc2,move_window@sector
  6130  004E2C  CFDE F034          	movff	postinc2,move_window@sector+1
  6131  004E30  CFDE F035          	movff	postinc2,move_window@sector+2
  6132  004E34  CFDE F036          	movff	postinc2,move_window@sector+3
  6133  004E38  EC87  F02B         	call	_move_window	;wreg free
  6134  004E3C  0100               	movlb	0	; () banked
  6135  004E3E  6F8A               	movwf	dir_alloc@res& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;ff.c: 1213:    if (res != FR_OK) break;
  6139  004E40  518A               	movf	dir_alloc@res& (0+255),w,b
  6140  004E42  A4D8               	btfss	status,2,c
  6141  004E44  D040               	goto	u7010
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  6145  004E46  EE20 F012          	lfsr	2,18
  6146  004E4A  5184               	movf	dir_alloc@dp& (0+255),w,b
  6147  004E4C  26D9               	addwf	fsr2l,f,c
  6148  004E4E  5185               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6149  004E50  22DA               	addwfc	fsr2h,f,c
  6150  004E52  CFDE F05D          	movff	postinc2,??_dir_alloc
  6151  004E56  CFDD F05E          	movff	postdec2,??_dir_alloc+1
  6152  004E5A  C05D  FFD9         	movff	??_dir_alloc,fsr2l
  6153  004E5E  C05E  FFDA         	movff	??_dir_alloc+1,fsr2h
  6154  004E62  0EE5               	movlw	229
  6155  004E64  18DE               	xorwf	postinc2,w,c
  6156  004E66  B4D8               	btfsc	status,2,c
  6157  004E68  D011               	goto	u6990
  6158                           
  6159                           ; BSR set to: 0
  6160  004E6A  EE20 F012          	lfsr	2,18
  6161  004E6E  5184               	movf	dir_alloc@dp& (0+255),w,b
  6162  004E70  26D9               	addwf	fsr2l,f,c
  6163  004E72  5185               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6164  004E74  22DA               	addwfc	fsr2h,f,c
  6165  004E76  CFDE F05D          	movff	postinc2,??_dir_alloc
  6166  004E7A  CFDD F05E          	movff	postdec2,??_dir_alloc+1
  6167  004E7E  C05D  FFD9         	movff	??_dir_alloc,fsr2l
  6168  004E82  C05E  FFDA         	movff	??_dir_alloc+1,fsr2h
  6169  004E86  50DF               	movf	indf2,w,c
  6170  004E88  A4D8               	btfss	status,2,c
  6171  004E8A  D00A               	goto	l5428
  6172  004E8C                     u6990:
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;ff.c: 1215:     if (++n == nent) break;
  6176  004E8C  4B88               	infsnz	dir_alloc@n& (0+255),f,b
  6177  004E8E  2B89               	incf	(dir_alloc@n+1)& (0+255),f,b
  6178  004E90  5186               	movf	dir_alloc@nent& (0+255),w,b
  6179  004E92  1988               	xorwf	dir_alloc@n& (0+255),w,b
  6180  004E94  E109               	bnz	l5430
  6181  004E96  5187               	movf	(dir_alloc@nent+1)& (0+255),w,b
  6182  004E98  1989               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  6183  004E9A  B4D8               	btfsc	status,2,c
  6184  004E9C  D014               	goto	u7010
  6185  004E9E  D004               	goto	l5430
  6186  004EA0                     l5428:
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;ff.c: 1217:     n = 0;
  6190  004EA0  0E00               	movlw	0
  6191  004EA2  6F89               	movwf	(dir_alloc@n+1)& (0+255),b
  6192  004EA4  0E00               	movlw	0
  6193  004EA6  6F88               	movwf	dir_alloc@n& (0+255),b
  6194  004EA8                     l5430:
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;ff.c: 1219:    res = dir_next(dp, 1);
  6198  004EA8  C084  F071         	movff	dir_alloc@dp,dir_next@dp
  6199  004EAC  C085  F072         	movff	dir_alloc@dp+1,dir_next@dp+1
  6200  004EB0  0E00               	movlw	0
  6201  004EB2  6F74               	movwf	(dir_next@stretch+1)& (0+255),b
  6202  004EB4  0E01               	movlw	1
  6203  004EB6  6F73               	movwf	dir_next@stretch& (0+255),b
  6204  004EB8  EC0F  F014         	call	_dir_next	;wreg free
  6205  004EBC  0100               	movlb	0	; () banked
  6206  004EBE  6F8A               	movwf	dir_alloc@res& (0+255),b
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;ff.c: 1220:   } while (res == FR_OK);
  6210  004EC0  518A               	movf	dir_alloc@res& (0+255),w,b
  6211  004EC2  B4D8               	btfsc	status,2,c
  6212  004EC4  D7A3               	goto	l5414
  6213  004EC6                     u7010:
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  6217  004EC6  0E04               	movlw	4
  6218  004EC8  198A               	xorwf	dir_alloc@res& (0+255),w,b
  6219  004ECA  A4D8               	btfss	status,2,c
  6220  004ECC  D002               	goto	l391
  6221                           
  6222                           ; BSR set to: 0
  6223  004ECE  0E07               	movlw	7
  6224  004ED0  6F8A               	movwf	dir_alloc@res& (0+255),b
  6225  004ED2                     l391:
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;ff.c: 1223:  return res;
  6229  004ED2  518A               	movf	dir_alloc@res& (0+255),w,b
  6230                           
  6231                           ; BSR set to: 0
  6232  004ED4  0012               	return		;funcret
  6233  004ED6                     __end_of_dir_alloc:
  6234                           	opt callstack 0
  6235                           
  6236 ;; *************** function _dir_sdi *****************
  6237 ;; Defined at:
  6238 ;;		line 1080 in file "ff.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;  dp              2   86[COMRAM] PTR struct .
  6241 ;;		 -> f_open@dj(22), 
  6242 ;;  idx             2   88[COMRAM] unsigned short 
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;  clst            4   13[BANK0 ] unsigned long 
  6245 ;;  sect            4    9[BANK0 ] unsigned long 
  6246 ;;  ic              2    7[BANK0 ] unsigned short 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  1    wreg      enum E93
  6249 ;; Registers used:
  6250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6256 ;;      Params:         4       0       0       0       0       0       0       0       0
  6257 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6258 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6259 ;;      Totals:         4      17       0       0       0       0       0       0       0
  6260 ;;Total ram usage:       21 bytes
  6261 ;; Hardware stack levels used:    1
  6262 ;; Hardware stack levels required when called:    9
  6263 ;; This function calls:
  6264 ;;		_clust2sect
  6265 ;;		_get_fat
  6266 ;; This function is called by:
  6267 ;;		_dir_alloc
  6268 ;;		_dir_find
  6269 ;;		_follow_path
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text19
  6274  0039A8                     __ptext19:
  6275                           	opt callstack 0
  6276  0039A8                     _dir_sdi:
  6277                           	opt callstack 18
  6278                           
  6279                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;incstack = 0
  6283  0039A8  EE20 F004          	lfsr	2,4
  6284  0039AC  5057               	movf	dir_sdi@dp,w,c
  6285  0039AE  26D9               	addwf	fsr2l,f,c
  6286  0039B0  5058               	movf	dir_sdi@dp+1,w,c
  6287  0039B2  22DA               	addwfc	fsr2h,f,c
  6288  0039B4  C059  FFDE         	movff	dir_sdi@idx,postinc2
  6289  0039B8  C05A  FFDD         	movff	dir_sdi@idx+1,postdec2
  6290                           
  6291                           ;ff.c: 1090:  clst = dp->sclust;
  6292  0039BC  EE20 F006          	lfsr	2,6
  6293  0039C0  5057               	movf	dir_sdi@dp,w,c
  6294  0039C2  26D9               	addwf	fsr2l,f,c
  6295  0039C4  5058               	movf	dir_sdi@dp+1,w,c
  6296  0039C6  22DA               	addwfc	fsr2h,f,c
  6297  0039C8  CFDE F06D          	movff	postinc2,dir_sdi@clst
  6298  0039CC  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  6299  0039D0  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  6300  0039D4  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  6301                           
  6302                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  6303  0039D8  0100               	movlb	0	; () banked
  6304  0039DA  056D               	decf	dir_sdi@clst& (0+255),w,b
  6305  0039DC  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6306  0039DE  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6307  0039E0  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6308  0039E2  B4D8               	btfsc	status,2,c
  6309  0039E4  D014               	goto	u6380
  6310                           
  6311                           ; BSR set to: 0
  6312  0039E6  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6313  0039EA  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6314  0039EE  EE10 F012          	lfsr	1,18
  6315  0039F2  50DE               	movf	postinc2,w,c
  6316  0039F4  26E1               	addwf	fsr1l,f,c
  6317  0039F6  50DD               	movf	postdec2,w,c
  6318  0039F8  22E2               	addwfc	fsr1h,f,c
  6319  0039FA  50E6               	movf	postinc1,w,c
  6320  0039FC  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6321  0039FE  50E6               	movf	postinc1,w,c
  6322  003A00  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6323  003A02  50E6               	movf	postinc1,w,c
  6324  003A04  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6325  003A06  50E6               	movf	postinc1,w,c
  6326  003A08  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6327  003A0A  A0D8               	btfss	status,0,c
  6328  003A0C  D002               	goto	l5092
  6329  003A0E                     u6380:
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;ff.c: 1092:   return FR_INT_ERR;
  6333  003A0E  0E02               	movlw	2
  6334  003A10  0012               	return	
  6335  003A12                     l5092:
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  6339  003A12  516D               	movf	dir_sdi@clst& (0+255),w,b
  6340  003A14  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6341  003A16  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6342  003A18  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6343  003A1A  A4D8               	btfss	status,2,c
  6344  003A1C  D022               	goto	l5098
  6345                           
  6346                           ; BSR set to: 0
  6347  003A1E  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6348  003A22  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6349  003A26  CFDE F060          	movff	postinc2,??_dir_sdi
  6350  003A2A  CFDD F061          	movff	postdec2,??_dir_sdi+1
  6351  003A2E  C060  FFD9         	movff	??_dir_sdi,fsr2l
  6352  003A32  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  6353  003A36  0E03               	movlw	3
  6354  003A38  18DE               	xorwf	postinc2,w,c
  6355  003A3A  A4D8               	btfss	status,2,c
  6356  003A3C  D012               	goto	l5098
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  6360  003A3E  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6361  003A42  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6362  003A46  EE10 F022          	lfsr	1,34
  6363  003A4A  50DE               	movf	postinc2,w,c
  6364  003A4C  26E1               	addwf	fsr1l,f,c
  6365  003A4E  50DD               	movf	postdec2,w,c
  6366  003A50  22E2               	addwfc	fsr1h,f,c
  6367  003A52  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  6368  003A56  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  6369  003A5A  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  6370  003A5E  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  6371  003A62                     l5098:
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;ff.c: 1096:  if (clst == 0) {
  6375  003A62  516D               	movf	dir_sdi@clst& (0+255),w,b
  6376  003A64  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6377  003A66  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6378  003A68  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6379  003A6A  A4D8               	btfss	status,2,c
  6380  003A6C  D023               	goto	l5108
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  6384  003A6E  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6385  003A72  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6386  003A76  EE10 F008          	lfsr	1,8
  6387  003A7A  50DE               	movf	postinc2,w,c
  6388  003A7C  26E1               	addwf	fsr1l,f,c
  6389  003A7E  50DD               	movf	postdec2,w,c
  6390  003A80  22E2               	addwfc	fsr1h,f,c
  6391  003A82  50E6               	movf	postinc1,w,c
  6392  003A84  5C59               	subwf	dir_sdi@idx,w,c
  6393  003A86  50E6               	movf	postinc1,w,c
  6394  003A88  585A               	subwfb	dir_sdi@idx+1,w,c
  6395  003A8A  B0D8               	btfsc	status,0,c
  6396  003A8C  D7C0               	goto	u6380
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  6400  003A8E  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6401  003A92  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6402  003A96  EE10 F022          	lfsr	1,34
  6403  003A9A  50DE               	movf	postinc2,w,c
  6404  003A9C  26E1               	addwf	fsr1l,f,c
  6405  003A9E  50DD               	movf	postdec2,w,c
  6406  003AA0  22E2               	addwfc	fsr1h,f,c
  6407  003AA2  CFE6 F069          	movff	postinc1,dir_sdi@sect
  6408  003AA6  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  6409  003AAA  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  6410  003AAE  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  6411                           
  6412                           ;ff.c: 1100:  }
  6413  003AB2  D079               	goto	l5130
  6414  003AB4                     l5108:
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  6418  003AB4  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6419  003AB8  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6420  003ABC  EE10 F002          	lfsr	1,2
  6421  003AC0  50DE               	movf	postinc2,w,c
  6422  003AC2  26E1               	addwf	fsr1l,f,c
  6423  003AC4  50DD               	movf	postdec2,w,c
  6424  003AC6  22E2               	addwfc	fsr1h,f,c
  6425  003AC8  50E7               	movf	indf1,w,c
  6426  003ACA  6F60               	movwf	??_dir_sdi& (0+255),b
  6427  003ACC  5160               	movf	??_dir_sdi& (0+255),w,b
  6428  003ACE  0D10               	mullw	16
  6429  003AD0  CFF3 F067          	movff	prodl,dir_sdi@ic
  6430  003AD4  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  6431                           
  6432                           ;ff.c: 1103:   while (idx >= ic) {
  6433  003AD8  D046               	goto	l349
  6434  003ADA                     l5110:
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  6438  003ADA  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6439  003ADE  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6440  003AE2  CFDE F03C          	movff	postinc2,get_fat@fs
  6441  003AE6  CFDD F03D          	movff	postdec2,get_fat@fs+1
  6442  003AEA  C06D  F03E         	movff	dir_sdi@clst,get_fat@clst
  6443  003AEE  C06E  F03F         	movff	dir_sdi@clst+1,get_fat@clst+1
  6444  003AF2  C06F  F040         	movff	dir_sdi@clst+2,get_fat@clst+2
  6445  003AF6  C070  F041         	movff	dir_sdi@clst+3,get_fat@clst+3
  6446  003AFA  EC12  F016         	call	_get_fat	;wreg free
  6447  003AFE  C03C  F06D         	movff	?_get_fat,dir_sdi@clst
  6448  003B02  C03D  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  6449  003B06  C03E  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  6450  003B0A  C03F  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  6451                           
  6452                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6453  003B0E  0100               	movlb	0	; () banked
  6454  003B10  296D               	incf	dir_sdi@clst& (0+255),w,b
  6455  003B12  E109               	bnz	l5118
  6456  003B14  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  6457  003B16  E107               	bnz	l5118
  6458  003B18  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  6459  003B1A  E105               	bnz	l5118
  6460  003B1C  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  6461  003B1E  A4D8               	btfss	status,2,c
  6462  003B20  D002               	goto	l5118
  6463                           
  6464                           ; BSR set to: 0
  6465  003B22  0E01               	movlw	1
  6466  003B24  0012               	return	
  6467  003B26                     l5118:
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  6471  003B26  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  6472  003B28  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6473  003B2A  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6474  003B2C  E104               	bnz	u6440
  6475  003B2E  0E02               	movlw	2
  6476  003B30  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6477  003B32  A0D8               	btfss	status,0,c
  6478  003B34  D76C               	goto	u6380
  6479  003B36                     u6440:
  6480                           
  6481                           ; BSR set to: 0
  6482  003B36  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6483  003B3A  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6484  003B3E  EE10 F012          	lfsr	1,18
  6485  003B42  50DE               	movf	postinc2,w,c
  6486  003B44  26E1               	addwf	fsr1l,f,c
  6487  003B46  50DD               	movf	postdec2,w,c
  6488  003B48  22E2               	addwfc	fsr1h,f,c
  6489  003B4A  50E6               	movf	postinc1,w,c
  6490  003B4C  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6491  003B4E  50E6               	movf	postinc1,w,c
  6492  003B50  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6493  003B52  50E6               	movf	postinc1,w,c
  6494  003B54  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6495  003B56  50E6               	movf	postinc1,w,c
  6496  003B58  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6497  003B5A  B0D8               	btfsc	status,0,c
  6498  003B5C  D758               	goto	u6380
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;ff.c: 1108:    idx -= ic;
  6502  003B5E  5167               	movf	dir_sdi@ic& (0+255),w,b
  6503  003B60  5E59               	subwf	dir_sdi@idx,f,c
  6504  003B62  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6505  003B64  5A5A               	subwfb	dir_sdi@idx+1,f,c
  6506  003B66                     l349:
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;ff.c: 1103:   while (idx >= ic) {
  6510  003B66  5167               	movf	dir_sdi@ic& (0+255),w,b
  6511  003B68  5C59               	subwf	dir_sdi@idx,w,c
  6512  003B6A  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6513  003B6C  585A               	subwfb	dir_sdi@idx+1,w,c
  6514  003B6E  B0D8               	btfsc	status,0,c
  6515  003B70  D7B4               	goto	l5110
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  6519  003B72  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6520  003B76  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6521  003B7A  CFDE F00D          	movff	postinc2,clust2sect@fs
  6522  003B7E  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6523  003B82  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  6524  003B86  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  6525  003B8A  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  6526  003B8E  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  6527  003B92  ECD2  F02A         	call	_clust2sect	;wreg free
  6528  003B96  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  6529  003B9A  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  6530  003B9E  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  6531  003BA2  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  6532  003BA6                     l5130:
  6533                           
  6534                           ;ff.c: 1112:  dp->clust = clst;
  6535  003BA6  EE20 F00A          	lfsr	2,10
  6536  003BAA  5057               	movf	dir_sdi@dp,w,c
  6537  003BAC  26D9               	addwf	fsr2l,f,c
  6538  003BAE  5058               	movf	dir_sdi@dp+1,w,c
  6539  003BB0  22DA               	addwfc	fsr2h,f,c
  6540  003BB2  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  6541  003BB6  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  6542  003BBA  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  6543  003BBE  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  6544                           
  6545                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  6546  003BC2  0100               	movlb	0	; () banked
  6547  003BC4  5169               	movf	dir_sdi@sect& (0+255),w,b
  6548  003BC6  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  6549  003BC8  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  6550  003BCA  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  6551  003BCC  B4D8               	btfsc	status,2,c
  6552  003BCE  D71F               	goto	u6380
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  6556  003BD0  C059  F060         	movff	dir_sdi@idx,??_dir_sdi
  6557  003BD4  C05A  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  6558  003BD8  0E04               	movlw	4
  6559  003BDA  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  6560  003BDC                     u6485:
  6561  003BDC  90D8               	bcf	status,0,c
  6562  003BDE  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  6563  003BE0  3360               	rrcf	??_dir_sdi& (0+255),f,b
  6564  003BE2  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  6565  003BE4  D7FB               	goto	u6485
  6566  003BE6  5160               	movf	??_dir_sdi& (0+255),w,b
  6567  003BE8  2569               	addwf	dir_sdi@sect& (0+255),w,b
  6568  003BEA  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  6569  003BEC  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6570  003BEE  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  6571  003BF0  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  6572  003BF2  0E00               	movlw	0
  6573  003BF4  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  6574  003BF6  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  6575  003BF8  0E00               	movlw	0
  6576  003BFA  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  6577  003BFC  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  6578  003BFE  EE20 F00E          	lfsr	2,14
  6579  003C02  5057               	movf	dir_sdi@dp,w,c
  6580  003C04  26D9               	addwf	fsr2l,f,c
  6581  003C06  5058               	movf	dir_sdi@dp+1,w,c
  6582  003C08  22DA               	addwfc	fsr2h,f,c
  6583  003C0A  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  6584  003C0E  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  6585  003C12  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  6586  003C16  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  6587                           
  6588                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  6589  003C1A  0E0F               	movlw	15
  6590  003C1C  1459               	andwf	dir_sdi@idx,w,c
  6591  003C1E  6F60               	movwf	??_dir_sdi& (0+255),b
  6592  003C20  0E00               	movlw	0
  6593  003C22  145A               	andwf	dir_sdi@idx+1,w,c
  6594  003C24  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  6595  003C26  0E05               	movlw	5
  6596  003C28                     u6495:
  6597  003C28  90D8               	bcf	status,0,c
  6598  003C2A  3760               	rlcf	??_dir_sdi& (0+255),f,b
  6599  003C2C  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  6600  003C2E  2EE8               	decfsz	wreg,f,c
  6601  003C30  D7FB               	goto	u6495
  6602  003C32  C057  FFD9         	movff	dir_sdi@dp,fsr2l
  6603  003C36  C058  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6604  003C3A  CFDE F062          	movff	postinc2,??_dir_sdi+2
  6605  003C3E  CFDD F063          	movff	postdec2,??_dir_sdi+3
  6606  003C42  5160               	movf	??_dir_sdi& (0+255),w,b
  6607  003C44  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6608  003C46  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6609  003C48  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6610  003C4A  0E2E               	movlw	46
  6611  003C4C  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6612  003C4E  0E00               	movlw	0
  6613  003C50  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6614  003C52  EE20 F012          	lfsr	2,18
  6615  003C56  5057               	movf	dir_sdi@dp,w,c
  6616  003C58  26D9               	addwf	fsr2l,f,c
  6617  003C5A  5058               	movf	dir_sdi@dp+1,w,c
  6618  003C5C  22DA               	addwfc	fsr2h,f,c
  6619  003C5E  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  6620  003C62  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;ff.c: 1117:  return FR_OK;
  6624  003C66  0E00               	movlw	0
  6625                           
  6626                           ; BSR set to: 0
  6627  003C68  0012               	return		;funcret
  6628  003C6A                     __end_of_dir_sdi:
  6629                           	opt callstack 0
  6630                           
  6631 ;; *************** function _dir_next *****************
  6632 ;; Defined at:
  6633 ;;		line 1128 in file "ff.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;  dp              2   17[BANK0 ] PTR struct .
  6636 ;;		 -> f_open@dj(22), 
  6637 ;;  stretch         2   19[BANK0 ] int 
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  clst            4   32[BANK0 ] unsigned long 
  6640 ;;  i               2   30[BANK0 ] unsigned short 
  6641 ;;  c               2   28[BANK0 ] unsigned short 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;                  1    wreg      enum E93
  6644 ;; Registers used:
  6645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6651 ;;      Params:         0       4       0       0       0       0       0       0       0
  6652 ;;      Locals:         0       8       0       0       0       0       0       0       0
  6653 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6654 ;;      Totals:         0      19       0       0       0       0       0       0       0
  6655 ;;Total ram usage:       19 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:   10
  6658 ;; This function calls:
  6659 ;;		_clust2sect
  6660 ;;		_create_chain
  6661 ;;		_get_fat
  6662 ;;		_mem_set
  6663 ;;		_sync_window
  6664 ;; This function is called by:
  6665 ;;		_dir_alloc
  6666 ;;		_dir_find
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text20
  6671  00281E                     __ptext20:
  6672                           	opt callstack 0
  6673  00281E                     _dir_next:
  6674                           	opt callstack 16
  6675                           
  6676                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;incstack = 0
  6680  00281E  0100               	movlb	0	; () banked
  6681  002820  EE20 F004          	lfsr	2,4
  6682  002824  5171               	movf	dir_next@dp& (0+255),w,b
  6683  002826  26D9               	addwf	fsr2l,f,c
  6684  002828  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  6685  00282A  22DA               	addwfc	fsr2h,f,c
  6686  00282C  CFDE F075          	movff	postinc2,??_dir_next
  6687  002830  CFDD F076          	movff	postdec2,??_dir_next+1
  6688  002834  0E01               	movlw	1
  6689  002836  2575               	addwf	??_dir_next& (0+255),w,b
  6690  002838  6F7E               	movwf	dir_next@i& (0+255),b
  6691  00283A  0E00               	movlw	0
  6692  00283C  2176               	addwfc	(??_dir_next+1)& (0+255),w,b
  6693  00283E  6F7F               	movwf	(dir_next@i+1)& (0+255),b
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  6697  002840  517E               	movf	dir_next@i& (0+255),w,b
  6698  002842  117F               	iorwf	(dir_next@i+1)& (0+255),w,b
  6699  002844  B4D8               	btfsc	status,2,c
  6700  002846  D00C               	goto	u6510
  6701                           
  6702                           ; BSR set to: 0
  6703  002848  EE20 F00E          	lfsr	2,14
  6704  00284C  5171               	movf	dir_next@dp& (0+255),w,b
  6705  00284E  26D9               	addwf	fsr2l,f,c
  6706  002850  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  6707  002852  22DA               	addwfc	fsr2h,f,c
  6708  002854  50DE               	movf	postinc2,w,c
  6709  002856  10DE               	iorwf	postinc2,w,c
  6710  002858  10DE               	iorwf	postinc2,w,c
  6711  00285A  10DE               	iorwf	postinc2,w,c
  6712  00285C  A4D8               	btfss	status,2,c
  6713  00285E  D002               	goto	l5154
  6714  002860                     u6510:
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;ff.c: 1142:   return FR_NO_FILE;
  6718  002860  0E04               	movlw	4
  6719  002862  0012               	return	
  6720  002864                     l5154:
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  6724  002864  0E0F               	movlw	15
  6725  002866  157E               	andwf	dir_next@i& (0+255),w,b
  6726  002868  6F75               	movwf	??_dir_next& (0+255),b
  6727  00286A  0E00               	movlw	0
  6728  00286C  157F               	andwf	(dir_next@i+1)& (0+255),w,b
  6729  00286E  6F76               	movwf	(??_dir_next+1)& (0+255),b
  6730  002870  5175               	movf	??_dir_next& (0+255),w,b
  6731  002872  1176               	iorwf	(??_dir_next+1)& (0+255),w,b
  6732  002874  A4D8               	btfss	status,2,c
  6733  002876  D1A4               	goto	l5240
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;ff.c: 1145:   dp->sect++;
  6737  002878  EE20 F00E          	lfsr	2,14
  6738  00287C  5171               	movf	dir_next@dp& (0+255),w,b
  6739  00287E  26D9               	addwf	fsr2l,f,c
  6740  002880  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  6741  002882  22DA               	addwfc	fsr2h,f,c
  6742  002884  2ADE               	incf	postinc2,f,c
  6743  002886  0E00               	movlw	0
  6744  002888  22DE               	addwfc	postinc2,f,c
  6745  00288A  22DE               	addwfc	postinc2,f,c
  6746  00288C  22DE               	addwfc	postinc2,f,c
  6747                           
  6748                           ;ff.c: 1147:   if (!dp->clust) {
  6749  00288E  EE20 F00A          	lfsr	2,10
  6750  002892  5171               	movf	dir_next@dp& (0+255),w,b
  6751  002894  26D9               	addwf	fsr2l,f,c
  6752  002896  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  6753  002898  22DA               	addwfc	fsr2h,f,c
  6754  00289A  50DE               	movf	postinc2,w,c
  6755  00289C  10DE               	iorwf	postinc2,w,c
  6756  00289E  10DE               	iorwf	postinc2,w,c
  6757  0028A0  10DE               	iorwf	postinc2,w,c
  6758  0028A2  A4D8               	btfss	status,2,c
  6759  0028A4  D011               	goto	l5164
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  6763  0028A6  C071  FFD9         	movff	dir_next@dp,fsr2l
  6764  0028AA  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6765  0028AE  EE10 F008          	lfsr	1,8
  6766  0028B2  50DE               	movf	postinc2,w,c
  6767  0028B4  26E1               	addwf	fsr1l,f,c
  6768  0028B6  50DD               	movf	postdec2,w,c
  6769  0028B8  22E2               	addwfc	fsr1h,f,c
  6770  0028BA  50E6               	movf	postinc1,w,c
  6771  0028BC  5D7E               	subwf	dir_next@i& (0+255),w,b
  6772  0028BE  50E6               	movf	postinc1,w,c
  6773  0028C0  597F               	subwfb	(dir_next@i+1)& (0+255),w,b
  6774  0028C2  B0D8               	btfsc	status,0,c
  6775  0028C4  D7CD               	goto	u6510
  6776  0028C6  D17C               	goto	l5240
  6777  0028C8                     l5164:
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  6781  0028C8  C07E  F075         	movff	dir_next@i,??_dir_next
  6782  0028CC  C07F  F076         	movff	dir_next@i+1,??_dir_next+1
  6783  0028D0  0E04               	movlw	4
  6784  0028D2  6F77               	movwf	(??_dir_next+2)& (0+255),b
  6785  0028D4                     u6555:
  6786  0028D4  90D8               	bcf	status,0,c
  6787  0028D6  3376               	rrcf	(??_dir_next+1)& (0+255),f,b
  6788  0028D8  3375               	rrcf	??_dir_next& (0+255),f,b
  6789  0028DA  2F77               	decfsz	(??_dir_next+2)& (0+255),f,b
  6790  0028DC  D7FB               	goto	u6555
  6791  0028DE  0EFF               	movlw	255
  6792  0028E0  6F78               	movwf	(??_dir_next+3)& (0+255),b
  6793  0028E2  0EFF               	movlw	255
  6794  0028E4  6F79               	movwf	(??_dir_next+4)& (0+255),b
  6795  0028E6  C071  FFD9         	movff	dir_next@dp,fsr2l
  6796  0028EA  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6797  0028EE  EE10 F002          	lfsr	1,2
  6798  0028F2  50DE               	movf	postinc2,w,c
  6799  0028F4  26E1               	addwf	fsr1l,f,c
  6800  0028F6  50DD               	movf	postdec2,w,c
  6801  0028F8  22E2               	addwfc	fsr1h,f,c
  6802  0028FA  50E7               	movf	indf1,w,c
  6803  0028FC  6F7A               	movwf	(??_dir_next+5)& (0+255),b
  6804  0028FE  6B7B               	clrf	(??_dir_next+6)& (0+255),b
  6805  002900  5178               	movf	(??_dir_next+3)& (0+255),w,b
  6806  002902  277A               	addwf	(??_dir_next+5)& (0+255),f,b
  6807  002904  5179               	movf	(??_dir_next+4)& (0+255),w,b
  6808  002906  237B               	addwfc	(??_dir_next+6)& (0+255),f,b
  6809  002908  5175               	movf	??_dir_next& (0+255),w,b
  6810  00290A  177A               	andwf	(??_dir_next+5)& (0+255),f,b
  6811  00290C  5176               	movf	(??_dir_next+1)& (0+255),w,b
  6812  00290E  177B               	andwf	(??_dir_next+6)& (0+255),f,b
  6813  002910  517A               	movf	(??_dir_next+5)& (0+255),w,b
  6814  002912  117B               	iorwf	(??_dir_next+6)& (0+255),w,b
  6815  002914  A4D8               	btfss	status,2,c
  6816  002916  D154               	goto	l5240
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  6820  002918  C071  FFD9         	movff	dir_next@dp,fsr2l
  6821  00291C  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6822  002920  CFDE F03C          	movff	postinc2,get_fat@fs
  6823  002924  CFDD F03D          	movff	postdec2,get_fat@fs+1
  6824  002928  EE20 F00A          	lfsr	2,10
  6825  00292C  5171               	movf	dir_next@dp& (0+255),w,b
  6826  00292E  26D9               	addwf	fsr2l,f,c
  6827  002930  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  6828  002932  22DA               	addwfc	fsr2h,f,c
  6829  002934  CFDE F03E          	movff	postinc2,get_fat@clst
  6830  002938  CFDE F03F          	movff	postinc2,get_fat@clst+1
  6831  00293C  CFDE F040          	movff	postinc2,get_fat@clst+2
  6832  002940  CFDE F041          	movff	postinc2,get_fat@clst+3
  6833  002944  EC12  F016         	call	_get_fat	;wreg free
  6834  002948  C03C  F080         	movff	?_get_fat,dir_next@clst
  6835  00294C  C03D  F081         	movff	?_get_fat+1,dir_next@clst+1
  6836  002950  C03E  F082         	movff	?_get_fat+2,dir_next@clst+2
  6837  002954  C03F  F083         	movff	?_get_fat+3,dir_next@clst+3
  6838                           
  6839                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  6840  002958  0100               	movlb	0	; () banked
  6841  00295A  5183               	movf	(dir_next@clst+3)& (0+255),w,b
  6842  00295C  1182               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6843  00295E  1181               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6844  002960  E106               	bnz	l5174
  6845  002962  0E02               	movlw	2
  6846  002964  5D80               	subwf	dir_next@clst& (0+255),w,b
  6847  002966  B0D8               	btfsc	status,0,c
  6848  002968  D002               	goto	l5174
  6849  00296A                     u6570:
  6850                           
  6851                           ; BSR set to: 0
  6852  00296A  0E02               	movlw	2
  6853  00296C  0012               	return	
  6854  00296E                     l5174:
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6858  00296E  2980               	incf	dir_next@clst& (0+255),w,b
  6859  002970  E109               	bnz	l5180
  6860  002972  2981               	incf	(dir_next@clst+1)& (0+255),w,b
  6861  002974  E107               	bnz	l5180
  6862  002976  2982               	incf	(dir_next@clst+2)& (0+255),w,b
  6863  002978  E105               	bnz	l5180
  6864  00297A  2983               	incf	(dir_next@clst+3)& (0+255),w,b
  6865  00297C  A4D8               	btfss	status,2,c
  6866  00297E  D002               	goto	l5180
  6867  002980                     u6580:
  6868  002980  0E01               	movlw	1
  6869  002982  0012               	return	
  6870  002984                     l5180:
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  6874  002984  C071  FFD9         	movff	dir_next@dp,fsr2l
  6875  002988  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6876  00298C  EE10 F012          	lfsr	1,18
  6877  002990  50DE               	movf	postinc2,w,c
  6878  002992  26E1               	addwf	fsr1l,f,c
  6879  002994  50DD               	movf	postdec2,w,c
  6880  002996  22E2               	addwfc	fsr1h,f,c
  6881  002998  50E6               	movf	postinc1,w,c
  6882  00299A  5D80               	subwf	dir_next@clst& (0+255),w,b
  6883  00299C  50E6               	movf	postinc1,w,c
  6884  00299E  5981               	subwfb	(dir_next@clst+1)& (0+255),w,b
  6885  0029A0  50E6               	movf	postinc1,w,c
  6886  0029A2  5982               	subwfb	(dir_next@clst+2)& (0+255),w,b
  6887  0029A4  50E6               	movf	postinc1,w,c
  6888  0029A6  5983               	subwfb	(dir_next@clst+3)& (0+255),w,b
  6889  0029A8  A0D8               	btfss	status,0,c
  6890  0029AA  D0DB               	goto	l5236
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  6894  0029AC  5173               	movf	dir_next@stretch& (0+255),w,b
  6895  0029AE  1174               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  6896  0029B0  B4D8               	btfsc	status,2,c
  6897  0029B2  D756               	goto	u6510
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  6901  0029B4  C071  FFD9         	movff	dir_next@dp,fsr2l
  6902  0029B8  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6903  0029BC  CFDE F057          	movff	postinc2,create_chain@fs
  6904  0029C0  CFDD F058          	movff	postdec2,create_chain@fs+1
  6905  0029C4  EE20 F00A          	lfsr	2,10
  6906  0029C8  5171               	movf	dir_next@dp& (0+255),w,b
  6907  0029CA  26D9               	addwf	fsr2l,f,c
  6908  0029CC  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  6909  0029CE  22DA               	addwfc	fsr2h,f,c
  6910  0029D0  CFDE F059          	movff	postinc2,create_chain@clst
  6911  0029D4  CFDE F05A          	movff	postinc2,create_chain@clst+1
  6912  0029D8  CFDE F05B          	movff	postinc2,create_chain@clst+2
  6913  0029DC  CFDE F05C          	movff	postinc2,create_chain@clst+3
  6914  0029E0  EC57  F01B         	call	_create_chain	;wreg free
  6915  0029E4  C057  F080         	movff	?_create_chain,dir_next@clst
  6916  0029E8  C058  F081         	movff	?_create_chain+1,dir_next@clst+1
  6917  0029EC  C059  F082         	movff	?_create_chain+2,dir_next@clst+2
  6918  0029F0  C05A  F083         	movff	?_create_chain+3,dir_next@clst+3
  6919                           
  6920                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  6921  0029F4  0100               	movlb	0	; () banked
  6922  0029F6  5180               	movf	dir_next@clst& (0+255),w,b
  6923  0029F8  1181               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6924  0029FA  1182               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6925  0029FC  1183               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6926  0029FE  A4D8               	btfss	status,2,c
  6927  002A00  D002               	goto	l5196
  6928                           
  6929                           ; BSR set to: 0
  6930  002A02  0E07               	movlw	7
  6931  002A04  0012               	return	
  6932  002A06                     l5196:
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  6936  002A06  0580               	decf	dir_next@clst& (0+255),w,b
  6937  002A08  1181               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6938  002A0A  1182               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6939  002A0C  1183               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6940  002A0E  B4D8               	btfsc	status,2,c
  6941  002A10  D7AC               	goto	u6570
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6945  002A12  2980               	incf	dir_next@clst& (0+255),w,b
  6946  002A14  E107               	bnz	l5208
  6947  002A16  2981               	incf	(dir_next@clst+1)& (0+255),w,b
  6948  002A18  E105               	bnz	l5208
  6949  002A1A  2982               	incf	(dir_next@clst+2)& (0+255),w,b
  6950  002A1C  E103               	bnz	l5208
  6951  002A1E  2983               	incf	(dir_next@clst+3)& (0+255),w,b
  6952  002A20  B4D8               	btfsc	status,2,c
  6953  002A22  D7AE               	goto	u6580
  6954  002A24                     l5208:
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  6958  002A24  C071  FFD9         	movff	dir_next@dp,fsr2l
  6959  002A28  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6960  002A2C  CFDE F01C          	movff	postinc2,sync_window@fs
  6961  002A30  CFDD F01D          	movff	postdec2,sync_window@fs+1
  6962  002A34  EC9D  F022         	call	_sync_window	;wreg free
  6963  002A38  0900               	iorlw	0
  6964  002A3A  A4D8               	btfss	status,2,c
  6965  002A3C  D7A1               	goto	u6580
  6966                           
  6967                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  6968  002A3E  C071  FFD9         	movff	dir_next@dp,fsr2l
  6969  002A42  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6970  002A46  CFDE F075          	movff	postinc2,??_dir_next
  6971  002A4A  CFDD F076          	movff	postdec2,??_dir_next+1
  6972  002A4E  0E2E               	movlw	46
  6973  002A50  0100               	movlb	0	; () banked
  6974  002A52  2575               	addwf	??_dir_next& (0+255),w,b
  6975  002A54  6E01               	movwf	mem_set@dst,c
  6976  002A56  0E00               	movlw	0
  6977  002A58  2176               	addwfc	(??_dir_next+1)& (0+255),w,b
  6978  002A5A  6E02               	movwf	mem_set@dst+1,c
  6979  002A5C  0E00               	movlw	0
  6980  002A5E  6E04               	movwf	mem_set@val+1,c
  6981  002A60  0E00               	movlw	0
  6982  002A62  6E03               	movwf	mem_set@val,c
  6983  002A64  0E02               	movlw	2
  6984  002A66  6E06               	movwf	mem_set@cnt+1,c
  6985  002A68  0E00               	movlw	0
  6986  002A6A  6E05               	movwf	mem_set@cnt,c
  6987  002A6C  EC82  F02E         	call	_mem_set	;wreg free
  6988                           
  6989                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  6990  002A70  C071  FFD9         	movff	dir_next@dp,fsr2l
  6991  002A74  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  6992  002A78  CFDE F00D          	movff	postinc2,clust2sect@fs
  6993  002A7C  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6994  002A80  C080  F00F         	movff	dir_next@clst,clust2sect@clst
  6995  002A84  C081  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6996  002A88  C082  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6997  002A8C  C083  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6998  002A90  ECD2  F02A         	call	_clust2sect	;wreg free
  6999  002A94  C071  FFD9         	movff	dir_next@dp,fsr2l
  7000  002A98  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7001  002A9C  EE10 F02A          	lfsr	1,42
  7002  002AA0  50DE               	movf	postinc2,w,c
  7003  002AA2  26E1               	addwf	fsr1l,f,c
  7004  002AA4  50DD               	movf	postdec2,w,c
  7005  002AA6  22E2               	addwfc	fsr1h,f,c
  7006  002AA8  C00D  FFE6         	movff	?_clust2sect,postinc1
  7007  002AAC  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  7008  002AB0  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  7009  002AB4  C010  FFE6         	movff	?_clust2sect+3,postinc1
  7010                           
  7011                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  7012  002AB8  0E00               	movlw	0
  7013  002ABA  0100               	movlb	0	; () banked
  7014  002ABC  6F7D               	movwf	(dir_next@c+1)& (0+255),b
  7015  002ABE  0E00               	movlw	0
  7016  002AC0  6F7C               	movwf	dir_next@c& (0+255),b
  7017  002AC2  D02B               	goto	l5232
  7018  002AC4                     l5220:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;ff.c: 1168:       dp->fs->wflag = 1;
  7022  002AC4  C071  FFD9         	movff	dir_next@dp,fsr2l
  7023  002AC8  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7024  002ACC  EE10 F004          	lfsr	1,4
  7025  002AD0  50DE               	movf	postinc2,w,c
  7026  002AD2  26E1               	addwf	fsr1l,f,c
  7027  002AD4  50DD               	movf	postdec2,w,c
  7028  002AD6  22E2               	addwfc	fsr1h,f,c
  7029  002AD8  0E01               	movlw	1
  7030  002ADA  6EE7               	movwf	indf1,c
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  7034  002ADC  C071  FFD9         	movff	dir_next@dp,fsr2l
  7035  002AE0  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7036  002AE4  CFDE F01C          	movff	postinc2,sync_window@fs
  7037  002AE8  CFDD F01D          	movff	postdec2,sync_window@fs+1
  7038  002AEC  EC9D  F022         	call	_sync_window	;wreg free
  7039  002AF0  0900               	iorlw	0
  7040  002AF2  A4D8               	btfss	status,2,c
  7041  002AF4  D745               	goto	u6580
  7042                           
  7043                           ;ff.c: 1170:       dp->fs->winsect++;
  7044  002AF6  C071  FFD9         	movff	dir_next@dp,fsr2l
  7045  002AFA  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7046  002AFE  EE10 F02A          	lfsr	1,42
  7047  002B02  50DE               	movf	postinc2,w,c
  7048  002B04  26E1               	addwf	fsr1l,f,c
  7049  002B06  50DD               	movf	postdec2,w,c
  7050  002B08  22E2               	addwfc	fsr1h,f,c
  7051  002B0A  2AE6               	incf	postinc1,f,c
  7052  002B0C  0E00               	movlw	0
  7053  002B0E  22E6               	addwfc	postinc1,f,c
  7054  002B10  22E6               	addwfc	postinc1,f,c
  7055  002B12  22E6               	addwfc	postinc1,f,c
  7056                           
  7057                           ;ff.c: 1171:      }
  7058  002B14  0100               	movlb	0	; () banked
  7059  002B16  4B7C               	infsnz	dir_next@c& (0+255),f,b
  7060  002B18  2B7D               	incf	(dir_next@c+1)& (0+255),f,b
  7061  002B1A                     l5232:
  7062                           
  7063                           ; BSR set to: 0
  7064  002B1A  C071  FFD9         	movff	dir_next@dp,fsr2l
  7065  002B1E  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7066  002B22  EE10 F002          	lfsr	1,2
  7067  002B26  50DE               	movf	postinc2,w,c
  7068  002B28  26E1               	addwf	fsr1l,f,c
  7069  002B2A  50DD               	movf	postdec2,w,c
  7070  002B2C  22E2               	addwfc	fsr1h,f,c
  7071  002B2E  50E7               	movf	indf1,w,c
  7072  002B30  6F75               	movwf	??_dir_next& (0+255),b
  7073  002B32  6B76               	clrf	(??_dir_next+1)& (0+255),b
  7074  002B34  5175               	movf	??_dir_next& (0+255),w,b
  7075  002B36  5D7C               	subwf	dir_next@c& (0+255),w,b
  7076  002B38  5176               	movf	(??_dir_next+1)& (0+255),w,b
  7077  002B3A  597D               	subwfb	(dir_next@c+1)& (0+255),w,b
  7078  002B3C  A0D8               	btfss	status,0,c
  7079  002B3E  D7C2               	goto	l5220
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;ff.c: 1172:      dp->fs->winsect -= c;
  7083  002B40  C071  FFD9         	movff	dir_next@dp,fsr2l
  7084  002B44  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7085  002B48  EE10 F02A          	lfsr	1,42
  7086  002B4C  50DE               	movf	postinc2,w,c
  7087  002B4E  26E1               	addwf	fsr1l,f,c
  7088  002B50  50DD               	movf	postdec2,w,c
  7089  002B52  22E2               	addwfc	fsr1h,f,c
  7090  002B54  517C               	movf	dir_next@c& (0+255),w,b
  7091  002B56  5EE6               	subwf	postinc1,f,c
  7092  002B58  517D               	movf	(dir_next@c+1)& (0+255),w,b
  7093  002B5A  5AE6               	subwfb	postinc1,f,c
  7094  002B5C  0E00               	movlw	0
  7095  002B5E  5AE6               	subwfb	postinc1,f,c
  7096  002B60  5AE6               	subwfb	postinc1,f,c
  7097  002B62                     l5236:
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;ff.c: 1178:     dp->clust = clst;
  7101  002B62  EE20 F00A          	lfsr	2,10
  7102  002B66  5171               	movf	dir_next@dp& (0+255),w,b
  7103  002B68  26D9               	addwf	fsr2l,f,c
  7104  002B6A  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  7105  002B6C  22DA               	addwfc	fsr2h,f,c
  7106  002B6E  C080  FFDE         	movff	dir_next@clst,postinc2
  7107  002B72  C081  FFDE         	movff	dir_next@clst+1,postinc2
  7108  002B76  C082  FFDE         	movff	dir_next@clst+2,postinc2
  7109  002B7A  C083  FFDE         	movff	dir_next@clst+3,postinc2
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  7113  002B7E  C071  FFD9         	movff	dir_next@dp,fsr2l
  7114  002B82  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7115  002B86  CFDE F00D          	movff	postinc2,clust2sect@fs
  7116  002B8A  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7117  002B8E  C080  F00F         	movff	dir_next@clst,clust2sect@clst
  7118  002B92  C081  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7119  002B96  C082  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7120  002B9A  C083  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7121  002B9E  ECD2  F02A         	call	_clust2sect	;wreg free
  7122  002BA2  0100               	movlb	0	; () banked
  7123  002BA4  EE20 F00E          	lfsr	2,14
  7124  002BA8  5171               	movf	dir_next@dp& (0+255),w,b
  7125  002BAA  26D9               	addwf	fsr2l,f,c
  7126  002BAC  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  7127  002BAE  22DA               	addwfc	fsr2h,f,c
  7128  002BB0  C00D  FFDE         	movff	?_clust2sect,postinc2
  7129  002BB4  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  7130  002BB8  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  7131  002BBC  C010  FFDE         	movff	?_clust2sect+3,postinc2
  7132  002BC0                     l5240:
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;ff.c: 1184:  dp->index = (WORD)i;
  7136  002BC0  EE20 F004          	lfsr	2,4
  7137  002BC4  5171               	movf	dir_next@dp& (0+255),w,b
  7138  002BC6  26D9               	addwf	fsr2l,f,c
  7139  002BC8  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  7140  002BCA  22DA               	addwfc	fsr2h,f,c
  7141  002BCC  C07E  FFDE         	movff	dir_next@i,postinc2
  7142  002BD0  C07F  FFDD         	movff	dir_next@i+1,postdec2
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  7146  002BD4  0E0F               	movlw	15
  7147  002BD6  157E               	andwf	dir_next@i& (0+255),w,b
  7148  002BD8  6F75               	movwf	??_dir_next& (0+255),b
  7149  002BDA  0E00               	movlw	0
  7150  002BDC  157F               	andwf	(dir_next@i+1)& (0+255),w,b
  7151  002BDE  6F76               	movwf	(??_dir_next+1)& (0+255),b
  7152  002BE0  0E05               	movlw	5
  7153  002BE2                     u6675:
  7154  002BE2  90D8               	bcf	status,0,c
  7155  002BE4  3775               	rlcf	??_dir_next& (0+255),f,b
  7156  002BE6  3776               	rlcf	(??_dir_next+1)& (0+255),f,b
  7157  002BE8  2EE8               	decfsz	wreg,f,c
  7158  002BEA  D7FB               	goto	u6675
  7159  002BEC  C071  FFD9         	movff	dir_next@dp,fsr2l
  7160  002BF0  C072  FFDA         	movff	dir_next@dp+1,fsr2h
  7161  002BF4  CFDE F077          	movff	postinc2,??_dir_next+2
  7162  002BF8  CFDD F078          	movff	postdec2,??_dir_next+3
  7163  002BFC  5175               	movf	??_dir_next& (0+255),w,b
  7164  002BFE  2777               	addwf	(??_dir_next+2)& (0+255),f,b
  7165  002C00  5176               	movf	(??_dir_next+1)& (0+255),w,b
  7166  002C02  2378               	addwfc	(??_dir_next+3)& (0+255),f,b
  7167  002C04  0E2E               	movlw	46
  7168  002C06  2777               	addwf	(??_dir_next+2)& (0+255),f,b
  7169  002C08  0E00               	movlw	0
  7170  002C0A  2378               	addwfc	(??_dir_next+3)& (0+255),f,b
  7171  002C0C  EE20 F012          	lfsr	2,18
  7172  002C10  5171               	movf	dir_next@dp& (0+255),w,b
  7173  002C12  26D9               	addwf	fsr2l,f,c
  7174  002C14  5172               	movf	(dir_next@dp+1)& (0+255),w,b
  7175  002C16  22DA               	addwfc	fsr2h,f,c
  7176  002C18  C077  FFDE         	movff	??_dir_next+2,postinc2
  7177  002C1C  C078  FFDD         	movff	??_dir_next+3,postdec2
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;ff.c: 1187:  return FR_OK;
  7181  002C20  0E00               	movlw	0
  7182  002C22  0012               	return		;funcret
  7183  002C24                     __end_of_dir_next:
  7184                           	opt callstack 0
  7185                           
  7186 ;; *************** function _f_mount *****************
  7187 ;; Defined at:
  7188 ;;		line 2402 in file "ff.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  fs              2   82[COMRAM] PTR struct .
  7191 ;;		 -> FatFs(558), NULL(0), 
  7192 ;;  path            2   84[COMRAM] PTR const unsigned char 
  7193 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  7194 ;;  opt             1   86[COMRAM] unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  vol             2   92[COMRAM] int 
  7197 ;;  rp              2   90[COMRAM] PTR const unsigned char 
  7198 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  7199 ;;  cfs             2   88[COMRAM] PTR struct .
  7200 ;;		 -> FatFs(558), NULL(0), 
  7201 ;;  res             1   87[COMRAM] enum E93
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  1    wreg      enum E93
  7204 ;; Registers used:
  7205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7211 ;;      Params:         5       0       0       0       0       0       0       0       0
  7212 ;;      Locals:         7       0       0       0       0       0       0       0       0
  7213 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7214 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7215 ;;Total ram usage:       12 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:   10
  7218 ;; This function calls:
  7219 ;;		_find_volume
  7220 ;;		_get_ldnumber
  7221 ;; This function is called by:
  7222 ;;		_guardar
  7223 ;; This function uses a non-reentrant model
  7224 ;;
  7225                           
  7226                           	psect	text21
  7227  00565E                     __ptext21:
  7228                           	opt callstack 0
  7229  00565E                     _f_mount:
  7230                           	opt callstack 19
  7231                           
  7232                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  7233                           
  7234                           ;incstack = 0
  7235  00565E  C055  F05B         	movff	f_mount@path,f_mount@rp
  7236  005662  C056  F05C         	movff	f_mount@path+1,f_mount@rp+1
  7237                           
  7238                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  7239  005666  0E5B               	movlw	low f_mount@rp
  7240  005668  6E01               	movwf	get_ldnumber@path,c
  7241  00566A  0E00               	movlw	high f_mount@rp
  7242  00566C  6E02               	movwf	get_ldnumber@path+1,c
  7243  00566E  ECCB  F028         	call	_get_ldnumber	;wreg free
  7244  005672  C001  F05D         	movff	?_get_ldnumber,f_mount@vol
  7245  005676  C002  F05E         	movff	?_get_ldnumber+1,f_mount@vol+1
  7246                           
  7247                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  7248  00567A  AE5E               	btfss	f_mount@vol+1,7,c
  7249  00567C  D002               	goto	l6626
  7250  00567E  0E0B               	movlw	11
  7251  005680  0012               	return	
  7252  005682                     l6626:
  7253                           
  7254                           ;ff.c: 2416:  cfs = FatFs[vol];
  7255  005682  90D8               	bcf	status,0,c
  7256  005684  345D               	rlcf	f_mount@vol,w,c
  7257  005686  6ED9               	movwf	fsr2l,c
  7258  005688  345E               	rlcf	f_mount@vol+1,w,c
  7259  00568A  6EDA               	movwf	fsr2h,c
  7260  00568C  0EE0               	movlw	low ff@FatFs
  7261  00568E  26D9               	addwf	fsr2l,f,c
  7262  005690  0E00               	movlw	high ff@FatFs
  7263  005692  22DA               	addwfc	fsr2h,f,c
  7264  005694  CFDE F059          	movff	postinc2,f_mount@cfs
  7265  005698  CFDD F05A          	movff	postdec2,f_mount@cfs+1
  7266                           
  7267                           ;ff.c: 2418:  if (cfs) {
  7268  00569C  5059               	movf	f_mount@cfs,w,c
  7269  00569E  105A               	iorwf	f_mount@cfs+1,w,c
  7270  0056A0  B4D8               	btfsc	status,2,c
  7271  0056A2  D006               	goto	l6632
  7272                           
  7273                           ;ff.c: 2425:   cfs->fs_type = 0;
  7274  0056A4  C059  FFD9         	movff	f_mount@cfs,fsr2l
  7275  0056A8  C05A  FFDA         	movff	f_mount@cfs+1,fsr2h
  7276  0056AC  0E00               	movlw	0
  7277  0056AE  6EDF               	movwf	indf2,c
  7278  0056B0                     l6632:
  7279                           
  7280                           ;ff.c: 2428:  if (fs) {
  7281  0056B0  5053               	movf	f_mount@fs,w,c
  7282  0056B2  1054               	iorwf	f_mount@fs+1,w,c
  7283  0056B4  B4D8               	btfsc	status,2,c
  7284  0056B6  D006               	goto	l6636
  7285                           
  7286                           ;ff.c: 2429:   fs->fs_type = 0;
  7287  0056B8  C053  FFD9         	movff	f_mount@fs,fsr2l
  7288  0056BC  C054  FFDA         	movff	f_mount@fs+1,fsr2h
  7289  0056C0  0E00               	movlw	0
  7290  0056C2  6EDF               	movwf	indf2,c
  7291  0056C4                     l6636:
  7292                           
  7293                           ;ff.c: 2434:  FatFs[vol] = fs;
  7294  0056C4  90D8               	bcf	status,0,c
  7295  0056C6  345D               	rlcf	f_mount@vol,w,c
  7296  0056C8  6ED9               	movwf	fsr2l,c
  7297  0056CA  345E               	rlcf	f_mount@vol+1,w,c
  7298  0056CC  6EDA               	movwf	fsr2h,c
  7299  0056CE  0EE0               	movlw	low ff@FatFs
  7300  0056D0  26D9               	addwf	fsr2l,f,c
  7301  0056D2  0E00               	movlw	high ff@FatFs
  7302  0056D4  22DA               	addwfc	fsr2h,f,c
  7303  0056D6  C053  FFDE         	movff	f_mount@fs,postinc2
  7304  0056DA  C054  FFDD         	movff	f_mount@fs+1,postdec2
  7305                           
  7306                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  7307  0056DE  5053               	movf	f_mount@fs,w,c
  7308  0056E0  1054               	iorwf	f_mount@fs+1,w,c
  7309  0056E2  B4D8               	btfsc	status,2,c
  7310  0056E4  D003               	goto	u9120
  7311  0056E6  0457               	decf	f_mount@opt,w,c
  7312  0056E8  B4D8               	btfsc	status,2,c
  7313  0056EA  D002               	goto	l6646
  7314  0056EC                     u9120:
  7315  0056EC  0E00               	movlw	0
  7316  0056EE  0012               	return	
  7317  0056F0                     l6646:
  7318                           
  7319                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  7320  0056F0  0E53               	movlw	low f_mount@fs
  7321  0056F2  6E46               	movwf	find_volume@rfs,c
  7322  0056F4  0E00               	movlw	high f_mount@fs
  7323  0056F6  6E47               	movwf	find_volume@rfs+1,c
  7324  0056F8  0E55               	movlw	low f_mount@path
  7325  0056FA  6E48               	movwf	find_volume@path,c
  7326  0056FC  0E00               	movlw	high f_mount@path
  7327  0056FE  6E49               	movwf	find_volume@path+1,c
  7328  005700  0E00               	movlw	0
  7329  005702  6E4A               	movwf	find_volume@wmode,c
  7330  005704  EC0E  F004         	call	_find_volume	;wreg free
  7331  005708  6E58               	movwf	f_mount@res,c
  7332                           
  7333                           ;ff.c: 2439:  return res;
  7334  00570A  5058               	movf	f_mount@res,w,c
  7335  00570C  0012               	return		;funcret
  7336  00570E                     __end_of_f_mount:
  7337                           	opt callstack 0
  7338                           
  7339 ;; *************** function _find_volume *****************
  7340 ;; Defined at:
  7341 ;;		line 2203 in file "ff.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  rfs             2   69[COMRAM] PTR PTR struct .
  7344 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  7345 ;;  path            2   71[COMRAM] PTR PTR const unsigned c
  7346 ;;		 -> f_open@path(2), f_mount@path(2), 
  7347 ;;  wmode           1   73[COMRAM] unsigned char 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  br             16    0[BANK0 ] unsigned long [4]
  7350 ;;  bsect           4   49[BANK0 ] unsigned long 
  7351 ;;  fasize          4   45[BANK0 ] unsigned long 
  7352 ;;  nclst           4   40[BANK0 ] unsigned long 
  7353 ;;  tsect           4   36[BANK0 ] unsigned long 
  7354 ;;  sysect          4   28[BANK0 ] unsigned long 
  7355 ;;  szbfat          4   22[BANK0 ] unsigned long 
  7356 ;;  fs              2   56[BANK0 ] PTR struct .
  7357 ;;		 -> FatFs(558), NULL(0), 
  7358 ;;  i               2   53[BANK0 ] unsigned short 
  7359 ;;  nrsv            2   34[BANK0 ] unsigned short 
  7360 ;;  vol             2   32[BANK0 ] int 
  7361 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  7362 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  7363 ;;  fmt             1   55[BANK0 ] unsigned char 
  7364 ;;  stat            1   44[BANK0 ] unsigned char 
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      enum E93
  7367 ;; Registers used:
  7368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7374 ;;      Params:         5       0       0       0       0       0       0       0       0
  7375 ;;      Locals:         0      58       0       0       0       0       0       0       0
  7376 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7377 ;;      Totals:        13      58       0       0       0       0       0       0       0
  7378 ;;Total ram usage:       71 bytes
  7379 ;; Hardware stack levels used:    1
  7380 ;; Hardware stack levels required when called:    9
  7381 ;; This function calls:
  7382 ;;		___lldiv
  7383 ;;		___lmul
  7384 ;;		_check_fs
  7385 ;;		_disk_initialize
  7386 ;;		_disk_status
  7387 ;;		_get_ldnumber
  7388 ;;		_move_window
  7389 ;; This function is called by:
  7390 ;;		_f_mount
  7391 ;;		_f_open
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           	psect	text22
  7396  00081C                     __ptext22:
  7397                           	opt callstack 0
  7398  00081C                     _find_volume:
  7399                           	opt callstack 19
  7400                           
  7401                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  7402                           
  7403                           ;incstack = 0
  7404  00081C  C046  FFD9         	movff	find_volume@rfs,fsr2l
  7405  000820  C047  FFDA         	movff	find_volume@rfs+1,fsr2h
  7406  000824  0E00               	movlw	0
  7407  000826  6EDE               	movwf	postinc2,c
  7408  000828  0E00               	movlw	0
  7409  00082A  6EDD               	movwf	postdec2,c
  7410                           
  7411                           ;ff.c: 2220:  vol = get_ldnumber(path);
  7412  00082C  C048  F001         	movff	find_volume@path,get_ldnumber@path
  7413  000830  C049  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  7414  000834  ECCB  F028         	call	_get_ldnumber	;wreg free
  7415  000838  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  7416  00083C  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  7417                           
  7418                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  7419  000840  0100               	movlb	0	; () banked
  7420  000842  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  7421  000844  D002               	goto	l5856
  7422                           
  7423                           ; BSR set to: 0
  7424  000846  0E0B               	movlw	11
  7425  000848  0012               	return	
  7426  00084A                     l5856:
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;ff.c: 2224:  fs = FatFs[vol];
  7430  00084A  90D8               	bcf	status,0,c
  7431  00084C  3580               	rlcf	find_volume@vol& (0+255),w,b
  7432  00084E  6ED9               	movwf	fsr2l,c
  7433  000850  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  7434  000852  6EDA               	movwf	fsr2h,c
  7435  000854  0EE0               	movlw	low ff@FatFs
  7436  000856  26D9               	addwf	fsr2l,f,c
  7437  000858  0E00               	movlw	high ff@FatFs
  7438  00085A  22DA               	addwfc	fsr2h,f,c
  7439  00085C  CFDE F098          	movff	postinc2,find_volume@fs
  7440  000860  CFDD F099          	movff	postdec2,find_volume@fs+1
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  7444  000864  5198               	movf	find_volume@fs& (0+255),w,b
  7445  000866  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  7446  000868  A4D8               	btfss	status,2,c
  7447  00086A  D002               	goto	l5864
  7448                           
  7449                           ; BSR set to: 0
  7450  00086C  0E0C               	movlw	12
  7451  00086E  0012               	return	
  7452  000870                     l5864:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;ff.c: 2228:  *rfs = fs;
  7456  000870  C046  FFD9         	movff	find_volume@rfs,fsr2l
  7457  000874  C047  FFDA         	movff	find_volume@rfs+1,fsr2h
  7458  000878  C098  FFDE         	movff	find_volume@fs,postinc2
  7459  00087C  C099  FFDD         	movff	find_volume@fs+1,postdec2
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;ff.c: 2230:  if (fs->fs_type) {
  7463  000880  C098  FFD9         	movff	find_volume@fs,fsr2l
  7464  000884  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7465  000888  50DF               	movf	indf2,w,c
  7466  00088A  B4D8               	btfsc	status,2,c
  7467  00088C  D015               	goto	l5884
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  7471  00088E  EE20 F001          	lfsr	2,1
  7472  000892  5198               	movf	find_volume@fs& (0+255),w,b
  7473  000894  26D9               	addwf	fsr2l,f,c
  7474  000896  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7475  000898  22DA               	addwfc	fsr2h,f,c
  7476  00089A  50DF               	movf	indf2,w,c
  7477  00089C  ECF2  F02E         	call	_disk_status
  7478  0008A0  0100               	movlb	0	; () banked
  7479  0008A2  6F8C               	movwf	find_volume@stat& (0+255),b
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  7483  0008A4  B18C               	btfsc	find_volume@stat& (0+255),0,b
  7484  0008A6  D008               	goto	l5884
  7485                           
  7486                           ; BSR set to: 0
  7487  0008A8  504A               	movf	find_volume@wmode,w,c
  7488  0008AA  A4D8               	btfss	status,2,c
  7489                           
  7490                           ; BSR set to: 0
  7491  0008AC  A58C               	btfss	find_volume@stat& (0+255),2,b
  7492  0008AE  D002               	goto	l5880
  7493  0008B0                     u7830:
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  7497  0008B0  0E0A               	movlw	10
  7498  0008B2  0012               	return	
  7499  0008B4                     l5880:
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;ff.c: 2235:    return FR_OK;
  7503  0008B4  0E00               	movlw	0
  7504  0008B6  0012               	return	
  7505  0008B8                     l5884:
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;ff.c: 2242:  fs->fs_type = 0;
  7509  0008B8  C098  FFD9         	movff	find_volume@fs,fsr2l
  7510  0008BC  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7511  0008C0  0E00               	movlw	0
  7512  0008C2  6EDF               	movwf	indf2,c
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  7516  0008C4  EE20 F001          	lfsr	2,1
  7517  0008C8  5198               	movf	find_volume@fs& (0+255),w,b
  7518  0008CA  26D9               	addwf	fsr2l,f,c
  7519  0008CC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7520  0008CE  22DA               	addwfc	fsr2h,f,c
  7521  0008D0  C080  FFDF         	movff	find_volume@vol,indf2
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  7525  0008D4  EE20 F001          	lfsr	2,1
  7526  0008D8  5198               	movf	find_volume@fs& (0+255),w,b
  7527  0008DA  26D9               	addwf	fsr2l,f,c
  7528  0008DC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7529  0008DE  22DA               	addwfc	fsr2h,f,c
  7530  0008E0  50DF               	movf	indf2,w,c
  7531  0008E2  ECBF  F020         	call	_disk_initialize
  7532  0008E6  0100               	movlb	0	; () banked
  7533  0008E8  6F8C               	movwf	find_volume@stat& (0+255),b
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;ff.c: 2245:  if (stat & 0x01)
  7537  0008EA  A18C               	btfss	find_volume@stat& (0+255),0,b
  7538  0008EC  D002               	goto	l5896
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;ff.c: 2246:   return FR_NOT_READY;
  7542  0008EE  0E03               	movlw	3
  7543  0008F0  0012               	return	
  7544  0008F2                     l5896:
  7545                           
  7546                           ; BSR set to: 0
  7547  0008F2  504A               	movf	find_volume@wmode,w,c
  7548  0008F4  B4D8               	btfsc	status,2,c
  7549  0008F6  D002               	goto	l5904
  7550                           
  7551                           ; BSR set to: 0
  7552  0008F8  B58C               	btfsc	find_volume@stat& (0+255),2,b
  7553  0008FA  D7DA               	goto	u7830
  7554  0008FC                     l5904:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;ff.c: 2254:  bsect = 0;
  7558  0008FC  0E00               	movlw	0
  7559  0008FE  6F91               	movwf	find_volume@bsect& (0+255),b
  7560  000900  0E00               	movlw	0
  7561  000902  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  7562  000904  0E00               	movlw	0
  7563  000906  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  7564  000908  0E00               	movlw	0
  7565  00090A  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  7569  00090C  C098  F03C         	movff	find_volume@fs,check_fs@fs
  7570  000910  C099  F03D         	movff	find_volume@fs+1,check_fs@fs+1
  7571  000914  0E00               	movlw	0
  7572  000916  6E3E               	movwf	check_fs@sect,c
  7573  000918  0E00               	movlw	0
  7574  00091A  6E3F               	movwf	check_fs@sect+1,c
  7575  00091C  0E00               	movlw	0
  7576  00091E  6E40               	movwf	check_fs@sect+2,c
  7577  000920  0E00               	movlw	0
  7578  000922  6E41               	movwf	check_fs@sect+3,c
  7579  000924  ECE1  F027         	call	_check_fs	;wreg free
  7580  000928  0100               	movlb	0	; () banked
  7581  00092A  6F97               	movwf	find_volume@fmt& (0+255),b
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  7585  00092C  0597               	decf	find_volume@fmt& (0+255),w,b
  7586  00092E  A4D8               	btfss	status,2,c
  7587  000930  D0AE               	goto	u7930
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  7591  000932  0E00               	movlw	0
  7592  000934  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7593  000936  0E00               	movlw	0
  7594  000938  6F95               	movwf	find_volume@i& (0+255),b
  7595  00093A                     l5916:
  7596                           
  7597                           ; BSR set to: 0
  7598  00093A  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7599  00093C  E15A               	bnz	l5932
  7600  00093E  0E04               	movlw	4
  7601  000940  5D95               	subwf	find_volume@i& (0+255),w,b
  7602  000942  B0D8               	btfsc	status,0,c
  7603  000944  D056               	goto	l5932
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  7607  000946  C095  F04B         	movff	find_volume@i,??_find_volume
  7608  00094A  C096  F04C         	movff	find_volume@i+1,??_find_volume+1
  7609  00094E  3A4B               	swapf	??_find_volume,f,c
  7610  000950  3A4C               	swapf	??_find_volume+1,f,c
  7611  000952  0EF0               	movlw	240
  7612  000954  164C               	andwf	??_find_volume+1,f,c
  7613  000956  504B               	movf	??_find_volume,w,c
  7614  000958  0B0F               	andlw	15
  7615  00095A  124C               	iorwf	??_find_volume+1,f,c
  7616  00095C  0EF0               	movlw	240
  7617  00095E  164B               	andwf	??_find_volume,f,c
  7618  000960  C098  F04D         	movff	find_volume@fs,??_find_volume+2
  7619  000964  C099  F04E         	movff	find_volume@fs+1,??_find_volume+3
  7620  000968  504B               	movf	??_find_volume,w,c
  7621  00096A  264D               	addwf	??_find_volume+2,f,c
  7622  00096C  504C               	movf	??_find_volume+1,w,c
  7623  00096E  224E               	addwfc	??_find_volume+3,f,c
  7624  000970  0EEC               	movlw	236
  7625  000972  244D               	addwf	??_find_volume+2,w,c
  7626  000974  6F7A               	movwf	find_volume@pt& (0+255),b
  7627  000976  0E01               	movlw	1
  7628  000978  204E               	addwfc	??_find_volume+3,w,c
  7629  00097A  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  7633  00097C  EE20 F004          	lfsr	2,4
  7634  000980  517A               	movf	find_volume@pt& (0+255),w,b
  7635  000982  26D9               	addwf	fsr2l,f,c
  7636  000984  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7637  000986  22DA               	addwfc	fsr2h,f,c
  7638  000988  50DF               	movf	indf2,w,c
  7639  00098A  A4D8               	btfss	status,2,c
  7640  00098C  D009               	goto	l5926
  7641                           
  7642                           ; BSR set to: 0
  7643  00098E  0E00               	movlw	0
  7644  000990  6F70               	movwf	_find_volume$728& (0+255),b
  7645  000992  0E00               	movlw	0
  7646  000994  6F71               	movwf	(_find_volume$728+1)& (0+255),b
  7647  000996  0E00               	movlw	0
  7648  000998  6F72               	movwf	(_find_volume$728+2)& (0+255),b
  7649  00099A  0E00               	movlw	0
  7650  00099C  6F73               	movwf	(_find_volume$728+3)& (0+255),b
  7651  00099E  D00E               	goto	l520
  7652  0009A0                     l5926:
  7653                           
  7654                           ; BSR set to: 0
  7655  0009A0  EE20 F008          	lfsr	2,8
  7656  0009A4  517A               	movf	find_volume@pt& (0+255),w,b
  7657  0009A6  26D9               	addwf	fsr2l,f,c
  7658  0009A8  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7659  0009AA  22DA               	addwfc	fsr2h,f,c
  7660  0009AC  CFDE F070          	movff	postinc2,_find_volume$728
  7661  0009B0  CFDE F071          	movff	postinc2,_find_volume$728+1
  7662  0009B4  CFDE F072          	movff	postinc2,_find_volume$728+2
  7663  0009B8  CFDE F073          	movff	postinc2,_find_volume$728+3
  7664  0009BC                     l520:
  7665                           
  7666                           ; BSR set to: 0
  7667  0009BC  0E60               	movlw	low find_volume@br
  7668  0009BE  6E4B               	movwf	??_find_volume& (0+255),c
  7669  0009C0  0E00               	movlw	high find_volume@br
  7670  0009C2  6E4C               	movwf	(??_find_volume+1)& (0+255),c
  7671  0009C4  90D8               	bcf	status,0,c
  7672  0009C6  3595               	rlcf	find_volume@i& (0+255),w,b
  7673  0009C8  6ED9               	movwf	fsr2l,c
  7674  0009CA  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7675  0009CC  6EDA               	movwf	fsr2h,c
  7676  0009CE  90D8               	bcf	status,0,c
  7677  0009D0  36D9               	rlcf	fsr2l,f,c
  7678  0009D2  36DA               	rlcf	fsr2h,f,c
  7679  0009D4  504B               	movf	??_find_volume,w,c
  7680  0009D6  26D9               	addwf	fsr2l,f,c
  7681  0009D8  504C               	movf	??_find_volume+1,w,c
  7682  0009DA  22DA               	addwfc	fsr2h,f,c
  7683  0009DC  C070  FFDE         	movff	_find_volume$728,postinc2
  7684  0009E0  C071  FFDE         	movff	_find_volume$728+1,postinc2
  7685  0009E4  C072  FFDE         	movff	_find_volume$728+2,postinc2
  7686  0009E8  C073  FFDE         	movff	_find_volume$728+3,postinc2
  7687                           
  7688                           ; BSR set to: 0
  7689                           ;ff.c: 2260:   }
  7690  0009EC  4B95               	infsnz	find_volume@i& (0+255),f,b
  7691  0009EE  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7692  0009F0  D7A4               	goto	l5916
  7693  0009F2                     l5932:
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;ff.c: 2261:   i = 0;
  7697  0009F2  0E00               	movlw	0
  7698  0009F4  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7699  0009F6  0E00               	movlw	0
  7700  0009F8  6F95               	movwf	find_volume@i& (0+255),b
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;ff.c: 2262:   if (i) i--;
  7704  0009FA  5195               	movf	find_volume@i& (0+255),w,b
  7705  0009FC  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  7706  0009FE  B4D8               	btfsc	status,2,c
  7707  000A00  D003               	goto	l5938
  7708                           
  7709                           ; BSR set to: 0
  7710  000A02  0795               	decf	find_volume@i& (0+255),f,b
  7711  000A04  A0D8               	btfss	status,0,c
  7712  000A06  0796               	decf	(find_volume@i+1)& (0+255),f,b
  7713  000A08                     l5938:
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;ff.c: 2264:    bsect = br[i];
  7717  000A08  0E60               	movlw	low find_volume@br
  7718  000A0A  6E4B               	movwf	??_find_volume& (0+255),c
  7719  000A0C  0E00               	movlw	high find_volume@br
  7720  000A0E  6E4C               	movwf	(??_find_volume+1)& (0+255),c
  7721  000A10  90D8               	bcf	status,0,c
  7722  000A12  3595               	rlcf	find_volume@i& (0+255),w,b
  7723  000A14  6ED9               	movwf	fsr2l,c
  7724  000A16  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7725  000A18  6EDA               	movwf	fsr2h,c
  7726  000A1A  90D8               	bcf	status,0,c
  7727  000A1C  36D9               	rlcf	fsr2l,f,c
  7728  000A1E  36DA               	rlcf	fsr2h,f,c
  7729  000A20  504B               	movf	??_find_volume,w,c
  7730  000A22  26D9               	addwf	fsr2l,f,c
  7731  000A24  504C               	movf	??_find_volume+1,w,c
  7732  000A26  22DA               	addwfc	fsr2h,f,c
  7733  000A28  CFDE F091          	movff	postinc2,find_volume@bsect
  7734  000A2C  CFDE F092          	movff	postinc2,find_volume@bsect+1
  7735  000A30  CFDE F093          	movff	postinc2,find_volume@bsect+2
  7736  000A34  CFDE F094          	movff	postinc2,find_volume@bsect+3
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  7740  000A38  5191               	movf	find_volume@bsect& (0+255),w,b
  7741  000A3A  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  7742  000A3C  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  7743  000A3E  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  7744  000A40  A4D8               	btfss	status,2,c
  7745  000A42  D005               	goto	l5944
  7746                           
  7747                           ; BSR set to: 0
  7748  000A44  0E00               	movlw	0
  7749  000A46  6F75               	movwf	(_find_volume$729+1)& (0+255),b
  7750  000A48  0E02               	movlw	2
  7751  000A4A  6F74               	movwf	_find_volume$729& (0+255),b
  7752  000A4C  D013               	goto	l5946
  7753  000A4E                     l5944:
  7754                           
  7755                           ; BSR set to: 0
  7756  000A4E  C098  F03C         	movff	find_volume@fs,check_fs@fs
  7757  000A52  C099  F03D         	movff	find_volume@fs+1,check_fs@fs+1
  7758  000A56  C091  F03E         	movff	find_volume@bsect,check_fs@sect
  7759  000A5A  C092  F03F         	movff	find_volume@bsect+1,check_fs@sect+1
  7760  000A5E  C093  F040         	movff	find_volume@bsect+2,check_fs@sect+2
  7761  000A62  C094  F041         	movff	find_volume@bsect+3,check_fs@sect+3
  7762  000A66  ECE1  F027         	call	_check_fs	;wreg free
  7763  000A6A  6E4B               	movwf	??_find_volume& (0+255),c
  7764  000A6C  504B               	movf	??_find_volume,w,c
  7765  000A6E  0100               	movlb	0	; () banked
  7766  000A70  6F74               	movwf	_find_volume$729& (0+255),b
  7767  000A72  6B75               	clrf	(_find_volume$729+1)& (0+255),b
  7768  000A74                     l5946:
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  7772  000A74  C074  F097         	movff	_find_volume$729,find_volume@fmt
  7773                           
  7774                           ; BSR set to: 0
  7775  000A78  5197               	movf	find_volume@fmt& (0+255),w,b
  7776  000A7A  B4D8               	btfsc	status,2,c
  7777  000A7C  D008               	goto	u7930
  7778                           
  7779                           ; BSR set to: 0
  7780  000A7E  4B95               	infsnz	find_volume@i& (0+255),f,b
  7781  000A80  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7782  000A82  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7783  000A84  E104               	bnz	u7930
  7784  000A86  0E04               	movlw	4
  7785  000A88  5D95               	subwf	find_volume@i& (0+255),w,b
  7786  000A8A  A0D8               	btfss	status,0,c
  7787  000A8C  D7BD               	goto	l5938
  7788  000A8E                     u7930:
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  7792  000A8E  0E03               	movlw	3
  7793  000A90  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7794  000A92  A4D8               	btfss	status,2,c
  7795  000A94  D002               	goto	l5958
  7796                           
  7797                           ; BSR set to: 0
  7798  000A96  0E01               	movlw	1
  7799  000A98  0012               	return	
  7800  000A9A                     l5958:
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  7804  000A9A  5197               	movf	find_volume@fmt& (0+255),w,b
  7805  000A9C  B4D8               	btfsc	status,2,c
  7806  000A9E  D002               	goto	l5964
  7807  000AA0                     u7950:
  7808  000AA0                     l5960:
  7809                           
  7810                           ; BSR set to: 0
  7811  000AA0  0E0D               	movlw	13
  7812  000AA2  0012               	return	
  7813  000AA4                     l5964:
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  7817  000AA4  EE20 F039          	lfsr	2,57
  7818  000AA8  5198               	movf	find_volume@fs& (0+255),w,b
  7819  000AAA  26D9               	addwf	fsr2l,f,c
  7820  000AAC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7821  000AAE  22DA               	addwfc	fsr2h,f,c
  7822  000AB0  50DE               	movf	postinc2,w,c
  7823  000AB2  E1F6               	bnz	l5960
  7824  000AB4  0E02               	movlw	2
  7825  000AB6  18DE               	xorwf	postinc2,w,c
  7826  000AB8  A4D8               	btfss	status,2,c
  7827  000ABA  D7F2               	goto	u7950
  7828                           
  7829                           ; BSR set to: 0
  7830                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  7831  000ABC  EE20 F044          	lfsr	2,68
  7832  000AC0  5198               	movf	find_volume@fs& (0+255),w,b
  7833  000AC2  26D9               	addwf	fsr2l,f,c
  7834  000AC4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7835  000AC6  22DA               	addwfc	fsr2h,f,c
  7836  000AC8  CFDE F04B          	movff	postinc2,??_find_volume
  7837  000ACC  CFDD F04C          	movff	postdec2,??_find_volume+1
  7838  000AD0  C04B  F08D         	movff	??_find_volume,find_volume@fasize
  7839  000AD4  C04C  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  7840  000AD8  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  7841  000ADA  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  7845  000ADC  518D               	movf	find_volume@fasize& (0+255),w,b
  7846  000ADE  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  7847  000AE0  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  7848  000AE2  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  7849  000AE4  A4D8               	btfss	status,2,c
  7850  000AE6  D00E               	goto	l533
  7851                           
  7852                           ; BSR set to: 0
  7853  000AE8  EE20 F052          	lfsr	2,82
  7854  000AEC  5198               	movf	find_volume@fs& (0+255),w,b
  7855  000AEE  26D9               	addwf	fsr2l,f,c
  7856  000AF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7857  000AF2  22DA               	addwfc	fsr2h,f,c
  7858  000AF4  CFDE F08D          	movff	postinc2,find_volume@fasize
  7859  000AF8  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  7860  000AFC  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  7861  000B00  CFDE F090          	movff	postinc2,find_volume@fasize+3
  7862  000B04                     l533:
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;ff.c: 2278:  fs->fsize = fasize;
  7866  000B04  EE20 F016          	lfsr	2,22
  7867  000B08  5198               	movf	find_volume@fs& (0+255),w,b
  7868  000B0A  26D9               	addwf	fsr2l,f,c
  7869  000B0C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7870  000B0E  22DA               	addwfc	fsr2h,f,c
  7871  000B10  C08D  FFDE         	movff	find_volume@fasize,postinc2
  7872  000B14  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  7873  000B18  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  7874  000B1C  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  7878  000B20  EE20 F03E          	lfsr	2,62
  7879  000B24  5198               	movf	find_volume@fs& (0+255),w,b
  7880  000B26  26D9               	addwf	fsr2l,f,c
  7881  000B28  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7882  000B2A  22DA               	addwfc	fsr2h,f,c
  7883  000B2C  EE10 F003          	lfsr	1,3
  7884  000B30  5198               	movf	find_volume@fs& (0+255),w,b
  7885  000B32  26E1               	addwf	fsr1l,f,c
  7886  000B34  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7887  000B36  22E2               	addwfc	fsr1h,f,c
  7888  000B38  CFDF FFE7          	movff	indf2,indf1
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  7892  000B3C  EE20 F003          	lfsr	2,3
  7893  000B40  5198               	movf	find_volume@fs& (0+255),w,b
  7894  000B42  26D9               	addwf	fsr2l,f,c
  7895  000B44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7896  000B46  22DA               	addwfc	fsr2h,f,c
  7897  000B48  04DE               	decf	postinc2,w,c
  7898  000B4A  B4D8               	btfsc	status,2,c
  7899  000B4C  D00A               	goto	l5986
  7900                           
  7901                           ; BSR set to: 0
  7902  000B4E  EE20 F003          	lfsr	2,3
  7903  000B52  5198               	movf	find_volume@fs& (0+255),w,b
  7904  000B54  26D9               	addwf	fsr2l,f,c
  7905  000B56  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7906  000B58  22DA               	addwfc	fsr2h,f,c
  7907  000B5A  0E02               	movlw	2
  7908  000B5C  18DE               	xorwf	postinc2,w,c
  7909  000B5E  A4D8               	btfss	status,2,c
  7910  000B60  D79F               	goto	u7950
  7911  000B62                     l5986:
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;ff.c: 2283:  fasize *= fs->n_fats;
  7915  000B62  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  7916  000B66  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  7917  000B6A  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  7918  000B6E  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  7919  000B72  EE20 F003          	lfsr	2,3
  7920  000B76  5198               	movf	find_volume@fs& (0+255),w,b
  7921  000B78  26D9               	addwf	fsr2l,f,c
  7922  000B7A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7923  000B7C  22DA               	addwfc	fsr2h,f,c
  7924  000B7E  50DF               	movf	indf2,w,c
  7925  000B80  6E4B               	movwf	??_find_volume& (0+255),c
  7926  000B82  504B               	movf	??_find_volume,w,c
  7927  000B84  6E05               	movwf	___lmul@multiplicand,c
  7928  000B86  6A06               	clrf	___lmul@multiplicand+1,c
  7929  000B88  6A07               	clrf	___lmul@multiplicand+2,c
  7930  000B8A  6A08               	clrf	___lmul@multiplicand+3,c
  7931  000B8C  EC90  F02D         	call	___lmul	;wreg free
  7932  000B90  C001  F08D         	movff	?___lmul,find_volume@fasize
  7933  000B94  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  7934  000B98  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  7935  000B9C  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  7936                           
  7937                           ;ff.c: 2285:  fs->csize = fs->win[13];
  7938  000BA0  0100               	movlb	0	; () banked
  7939  000BA2  EE20 F03B          	lfsr	2,59
  7940  000BA6  5198               	movf	find_volume@fs& (0+255),w,b
  7941  000BA8  26D9               	addwf	fsr2l,f,c
  7942  000BAA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7943  000BAC  22DA               	addwfc	fsr2h,f,c
  7944  000BAE  EE10 F002          	lfsr	1,2
  7945  000BB2  5198               	movf	find_volume@fs& (0+255),w,b
  7946  000BB4  26E1               	addwf	fsr1l,f,c
  7947  000BB6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7948  000BB8  22E2               	addwfc	fsr1h,f,c
  7949  000BBA  CFDF FFE7          	movff	indf2,indf1
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  7953  000BBE  EE20 F002          	lfsr	2,2
  7954  000BC2  5198               	movf	find_volume@fs& (0+255),w,b
  7955  000BC4  26D9               	addwf	fsr2l,f,c
  7956  000BC6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7957  000BC8  22DA               	addwfc	fsr2h,f,c
  7958  000BCA  50DF               	movf	indf2,w,c
  7959  000BCC  B4D8               	btfsc	status,2,c
  7960  000BCE  D768               	goto	u7950
  7961                           
  7962                           ; BSR set to: 0
  7963  000BD0  0EFF               	movlw	255
  7964  000BD2  6E4B               	movwf	??_find_volume& (0+255),c
  7965  000BD4  0EFF               	movlw	255
  7966  000BD6  6E4C               	movwf	(??_find_volume+1)& (0+255),c
  7967  000BD8  EE20 F002          	lfsr	2,2
  7968  000BDC  5198               	movf	find_volume@fs& (0+255),w,b
  7969  000BDE  26D9               	addwf	fsr2l,f,c
  7970  000BE0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7971  000BE2  22DA               	addwfc	fsr2h,f,c
  7972  000BE4  50DF               	movf	indf2,w,c
  7973  000BE6  6E4D               	movwf	(??_find_volume+2)& (0+255),c
  7974  000BE8  6A4E               	clrf	(??_find_volume+3)& (0+255),c
  7975  000BEA  504B               	movf	??_find_volume,w,c
  7976  000BEC  264D               	addwf	??_find_volume+2,f,c
  7977  000BEE  504C               	movf	??_find_volume+1,w,c
  7978  000BF0  224E               	addwfc	??_find_volume+3,f,c
  7979  000BF2  EE20 F002          	lfsr	2,2
  7980  000BF6  5198               	movf	find_volume@fs& (0+255),w,b
  7981  000BF8  26D9               	addwf	fsr2l,f,c
  7982  000BFA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7983  000BFC  22DA               	addwfc	fsr2h,f,c
  7984  000BFE  50DF               	movf	indf2,w,c
  7985  000C00  6E4F               	movwf	(??_find_volume+4)& (0+255),c
  7986  000C02  504F               	movf	??_find_volume+4,w,c
  7987  000C04  164D               	andwf	??_find_volume+2,f,c
  7988  000C06  0E00               	movlw	0
  7989  000C08  164E               	andwf	??_find_volume+3,f,c
  7990  000C0A  504D               	movf	??_find_volume+2,w,c
  7991  000C0C  104E               	iorwf	??_find_volume+3,w,c
  7992  000C0E  A4D8               	btfss	status,2,c
  7993  000C10  D747               	goto	u7950
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  7997  000C12  EE20 F03F          	lfsr	2,63
  7998  000C16  5198               	movf	find_volume@fs& (0+255),w,b
  7999  000C18  26D9               	addwf	fsr2l,f,c
  8000  000C1A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8001  000C1C  22DA               	addwfc	fsr2h,f,c
  8002  000C1E  EE10 F008          	lfsr	1,8
  8003  000C22  5198               	movf	find_volume@fs& (0+255),w,b
  8004  000C24  26E1               	addwf	fsr1l,f,c
  8005  000C26  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8006  000C28  22E2               	addwfc	fsr1h,f,c
  8007  000C2A  CFDE FFE6          	movff	postinc2,postinc1
  8008  000C2E  CFDD FFE5          	movff	postdec2,postdec1
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  8012  000C32  EE20 F008          	lfsr	2,8
  8013  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  8014  000C38  26D9               	addwf	fsr2l,f,c
  8015  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8016  000C3C  22DA               	addwfc	fsr2h,f,c
  8017  000C3E  CFDE F04B          	movff	postinc2,??_find_volume
  8018  000C42  CFDD F04C          	movff	postdec2,??_find_volume+1
  8019  000C46  0E0F               	movlw	15
  8020  000C48  164B               	andwf	??_find_volume,f,c
  8021  000C4A  0E00               	movlw	0
  8022  000C4C  164C               	andwf	??_find_volume+1,f,c
  8023  000C4E  504B               	movf	??_find_volume,w,c
  8024  000C50  104C               	iorwf	??_find_volume+1,w,c
  8025  000C52  A4D8               	btfss	status,2,c
  8026  000C54  D725               	goto	u7950
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  8030  000C56  EE20 F041          	lfsr	2,65
  8031  000C5A  5198               	movf	find_volume@fs& (0+255),w,b
  8032  000C5C  26D9               	addwf	fsr2l,f,c
  8033  000C5E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8034  000C60  22DA               	addwfc	fsr2h,f,c
  8035  000C62  CFDE F04B          	movff	postinc2,??_find_volume
  8036  000C66  CFDD F04C          	movff	postdec2,??_find_volume+1
  8037  000C6A  C04B  F084         	movff	??_find_volume,find_volume@tsect
  8038  000C6E  C04C  F085         	movff	??_find_volume+1,find_volume@tsect+1
  8039  000C72  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  8040  000C74  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  8044  000C76  5184               	movf	find_volume@tsect& (0+255),w,b
  8045  000C78  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  8046  000C7A  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  8047  000C7C  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  8048  000C7E  A4D8               	btfss	status,2,c
  8049  000C80  D00E               	goto	l539
  8050                           
  8051                           ; BSR set to: 0
  8052  000C82  EE20 F04E          	lfsr	2,78
  8053  000C86  5198               	movf	find_volume@fs& (0+255),w,b
  8054  000C88  26D9               	addwf	fsr2l,f,c
  8055  000C8A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8056  000C8C  22DA               	addwfc	fsr2h,f,c
  8057  000C8E  CFDE F084          	movff	postinc2,find_volume@tsect
  8058  000C92  CFDE F085          	movff	postinc2,find_volume@tsect+1
  8059  000C96  CFDE F086          	movff	postinc2,find_volume@tsect+2
  8060  000C9A  CFDE F087          	movff	postinc2,find_volume@tsect+3
  8061  000C9E                     l539:
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  8065  000C9E  EE20 F03C          	lfsr	2,60
  8066  000CA2  5198               	movf	find_volume@fs& (0+255),w,b
  8067  000CA4  26D9               	addwf	fsr2l,f,c
  8068  000CA6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8069  000CA8  22DA               	addwfc	fsr2h,f,c
  8070  000CAA  CFDE F082          	movff	postinc2,find_volume@nrsv
  8071  000CAE  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  8075  000CB2  5182               	movf	find_volume@nrsv& (0+255),w,b
  8076  000CB4  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  8077  000CB6  B4D8               	btfsc	status,2,c
  8078  000CB8  D6F3               	goto	u7950
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  8082  000CBA  EE20 F008          	lfsr	2,8
  8083  000CBE  5198               	movf	find_volume@fs& (0+255),w,b
  8084  000CC0  26D9               	addwf	fsr2l,f,c
  8085  000CC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8086  000CC4  22DA               	addwfc	fsr2h,f,c
  8087  000CC6  CFDE F04B          	movff	postinc2,??_find_volume
  8088  000CCA  CFDD F04C          	movff	postdec2,??_find_volume+1
  8089  000CCE  0E04               	movlw	4
  8090  000CD0  6E4D               	movwf	(??_find_volume+2)& (0+255),c
  8091  000CD2                     u8055:
  8092  000CD2  90D8               	bcf	status,0,c
  8093  000CD4  324C               	rrcf	??_find_volume+1,f,c
  8094  000CD6  324B               	rrcf	??_find_volume,f,c
  8095  000CD8  2E4D               	decfsz	(??_find_volume+2)& (0+255),f,c
  8096  000CDA  D7FB               	goto	u8055
  8097  000CDC  5182               	movf	find_volume@nrsv& (0+255),w,b
  8098  000CDE  244B               	addwf	??_find_volume,w,c
  8099  000CE0  6E4E               	movwf	(??_find_volume+3)& (0+255),c
  8100  000CE2  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8101  000CE4  204C               	addwfc	??_find_volume+1,w,c
  8102  000CE6  6E4F               	movwf	(??_find_volume+4)& (0+255),c
  8103  000CE8  6A50               	clrf	(??_find_volume+5)& (0+255),c
  8104  000CEA  B0D8               	btfsc	status,0,c
  8105  000CEC  2A50               	incf	(??_find_volume+5)& (0+255),f,c
  8106  000CEE  6A51               	clrf	(??_find_volume+6)& (0+255),c
  8107  000CF0  518D               	movf	find_volume@fasize& (0+255),w,b
  8108  000CF2  244E               	addwf	??_find_volume+3,w,c
  8109  000CF4  6F7C               	movwf	find_volume@sysect& (0+255),b
  8110  000CF6  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8111  000CF8  204F               	addwfc	??_find_volume+4,w,c
  8112  000CFA  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  8113  000CFC  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8114  000CFE  2050               	addwfc	??_find_volume+5,w,c
  8115  000D00  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  8116  000D02  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8117  000D04  2051               	addwfc	??_find_volume+6,w,c
  8118  000D06  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  8122  000D08  517C               	movf	find_volume@sysect& (0+255),w,b
  8123  000D0A  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8124  000D0C  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8125  000D0E  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8126  000D10  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8127  000D12  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8128  000D14  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8129  000D16  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8130  000D18  A0D8               	btfss	status,0,c
  8131  000D1A  D6C2               	goto	u7950
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  8135  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  8136  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8137  000D20  6E01               	movwf	___lldiv@dividend,c
  8138  000D22  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8139  000D24  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8140  000D26  6E02               	movwf	___lldiv@dividend+1,c
  8141  000D28  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8142  000D2A  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8143  000D2C  6E03               	movwf	___lldiv@dividend+2,c
  8144  000D2E  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8145  000D30  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8146  000D32  6E04               	movwf	___lldiv@dividend+3,c
  8147  000D34  EE20 F002          	lfsr	2,2
  8148  000D38  5198               	movf	find_volume@fs& (0+255),w,b
  8149  000D3A  26D9               	addwf	fsr2l,f,c
  8150  000D3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8151  000D3E  22DA               	addwfc	fsr2h,f,c
  8152  000D40  50DF               	movf	indf2,w,c
  8153  000D42  6E4B               	movwf	??_find_volume& (0+255),c
  8154  000D44  504B               	movf	??_find_volume,w,c
  8155  000D46  6E05               	movwf	___lldiv@divisor,c
  8156  000D48  6A06               	clrf	___lldiv@divisor+1,c
  8157  000D4A  6A07               	clrf	___lldiv@divisor+2,c
  8158  000D4C  6A08               	clrf	___lldiv@divisor+3,c
  8159  000D4E  EC66  F02C         	call	___lldiv	;wreg free
  8160  000D52  C001  F088         	movff	?___lldiv,find_volume@nclst
  8161  000D56  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  8162  000D5A  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  8163  000D5E  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  8164                           
  8165                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  8166  000D62  0100               	movlb	0	; () banked
  8167  000D64  5188               	movf	find_volume@nclst& (0+255),w,b
  8168  000D66  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  8169  000D68  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8170  000D6A  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  8171  000D6C  B4D8               	btfsc	status,2,c
  8172  000D6E  D698               	goto	u7950
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;ff.c: 2304:  fmt = 1;
  8176  000D70  0E01               	movlw	1
  8177  000D72  6F97               	movwf	find_volume@fmt& (0+255),b
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  8181  000D74  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8182  000D76  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8183  000D78  E106               	bnz	u8080
  8184  000D7A  0EF6               	movlw	246
  8185  000D7C  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8186  000D7E  0E0F               	movlw	15
  8187  000D80  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8188  000D82  A0D8               	btfss	status,0,c
  8189  000D84  D002               	goto	l6040
  8190  000D86                     u8080:
  8191                           
  8192                           ; BSR set to: 0
  8193  000D86  0E02               	movlw	2
  8194  000D88  6F97               	movwf	find_volume@fmt& (0+255),b
  8195  000D8A                     l6040:
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  8199  000D8A  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8200  000D8C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8201  000D8E  E106               	bnz	u8090
  8202  000D90  0EF6               	movlw	246
  8203  000D92  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8204  000D94  0EFF               	movlw	255
  8205  000D96  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8206  000D98  A0D8               	btfss	status,0,c
  8207  000D9A  D002               	goto	l6044
  8208  000D9C                     u8090:
  8209                           
  8210                           ; BSR set to: 0
  8211  000D9C  0E03               	movlw	3
  8212  000D9E  6F97               	movwf	find_volume@fmt& (0+255),b
  8213  000DA0                     l6044:
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  8217  000DA0  0E02               	movlw	2
  8218  000DA2  2588               	addwf	find_volume@nclst& (0+255),w,b
  8219  000DA4  6E4B               	movwf	??_find_volume& (0+255),c
  8220  000DA6  0E00               	movlw	0
  8221  000DA8  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  8222  000DAA  6E4C               	movwf	(??_find_volume+1)& (0+255),c
  8223  000DAC  0E00               	movlw	0
  8224  000DAE  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  8225  000DB0  6E4D               	movwf	(??_find_volume+2)& (0+255),c
  8226  000DB2  0E00               	movlw	0
  8227  000DB4  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  8228  000DB6  6E4E               	movwf	(??_find_volume+3)& (0+255),c
  8229  000DB8  EE20 F012          	lfsr	2,18
  8230  000DBC  5198               	movf	find_volume@fs& (0+255),w,b
  8231  000DBE  26D9               	addwf	fsr2l,f,c
  8232  000DC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8233  000DC2  22DA               	addwfc	fsr2h,f,c
  8234  000DC4  C04B  FFDE         	movff	??_find_volume,postinc2
  8235  000DC8  C04C  FFDE         	movff	??_find_volume+1,postinc2
  8236  000DCC  C04D  FFDE         	movff	??_find_volume+2,postinc2
  8237  000DD0  C04E  FFDE         	movff	??_find_volume+3,postinc2
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;ff.c: 2310:  fs->volbase = bsect;
  8241  000DD4  EE20 F01A          	lfsr	2,26
  8242  000DD8  5198               	movf	find_volume@fs& (0+255),w,b
  8243  000DDA  26D9               	addwf	fsr2l,f,c
  8244  000DDC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8245  000DDE  22DA               	addwfc	fsr2h,f,c
  8246  000DE0  C091  FFDE         	movff	find_volume@bsect,postinc2
  8247  000DE4  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  8248  000DE8  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  8249  000DEC  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  8253  000DF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  8254  000DF2  2591               	addwf	find_volume@bsect& (0+255),w,b
  8255  000DF4  6E4B               	movwf	??_find_volume& (0+255),c
  8256  000DF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8257  000DF8  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8258  000DFA  6E4C               	movwf	(??_find_volume+1)& (0+255),c
  8259  000DFC  0E00               	movlw	0
  8260  000DFE  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8261  000E00  6E4D               	movwf	(??_find_volume+2)& (0+255),c
  8262  000E02  0E00               	movlw	0
  8263  000E04  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8264  000E06  6E4E               	movwf	(??_find_volume+3)& (0+255),c
  8265  000E08  EE20 F01E          	lfsr	2,30
  8266  000E0C  5198               	movf	find_volume@fs& (0+255),w,b
  8267  000E0E  26D9               	addwf	fsr2l,f,c
  8268  000E10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8269  000E12  22DA               	addwfc	fsr2h,f,c
  8270  000E14  C04B  FFDE         	movff	??_find_volume,postinc2
  8271  000E18  C04C  FFDE         	movff	??_find_volume+1,postinc2
  8272  000E1C  C04D  FFDE         	movff	??_find_volume+2,postinc2
  8273  000E20  C04E  FFDE         	movff	??_find_volume+3,postinc2
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;ff.c: 2312:  fs->database = bsect + sysect;
  8277  000E24  517C               	movf	find_volume@sysect& (0+255),w,b
  8278  000E26  2591               	addwf	find_volume@bsect& (0+255),w,b
  8279  000E28  6E4B               	movwf	??_find_volume& (0+255),c
  8280  000E2A  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8281  000E2C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8282  000E2E  6E4C               	movwf	(??_find_volume+1)& (0+255),c
  8283  000E30  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8284  000E32  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8285  000E34  6E4D               	movwf	(??_find_volume+2)& (0+255),c
  8286  000E36  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8287  000E38  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8288  000E3A  6E4E               	movwf	(??_find_volume+3)& (0+255),c
  8289  000E3C  EE20 F026          	lfsr	2,38
  8290  000E40  5198               	movf	find_volume@fs& (0+255),w,b
  8291  000E42  26D9               	addwf	fsr2l,f,c
  8292  000E44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8293  000E46  22DA               	addwfc	fsr2h,f,c
  8294  000E48  C04B  FFDE         	movff	??_find_volume,postinc2
  8295  000E4C  C04C  FFDE         	movff	??_find_volume+1,postinc2
  8296  000E50  C04D  FFDE         	movff	??_find_volume+2,postinc2
  8297  000E54  C04E  FFDE         	movff	??_find_volume+3,postinc2
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;ff.c: 2313:  if (fmt == 3) {
  8301  000E58  0E03               	movlw	3
  8302  000E5A  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8303  000E5C  A4D8               	btfss	status,2,c
  8304  000E5E  D03D               	goto	l6064
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  8308  000E60  EE20 F008          	lfsr	2,8
  8309  000E64  5198               	movf	find_volume@fs& (0+255),w,b
  8310  000E66  26D9               	addwf	fsr2l,f,c
  8311  000E68  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8312  000E6A  22DA               	addwfc	fsr2h,f,c
  8313  000E6C  50DE               	movf	postinc2,w,c
  8314  000E6E  10DE               	iorwf	postinc2,w,c
  8315  000E70  A4D8               	btfss	status,2,c
  8316  000E72  D616               	goto	u7950
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  8320  000E74  EE20 F05A          	lfsr	2,90
  8321  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  8322  000E7A  26D9               	addwf	fsr2l,f,c
  8323  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8324  000E7E  22DA               	addwfc	fsr2h,f,c
  8325  000E80  EE10 F022          	lfsr	1,34
  8326  000E84  5198               	movf	find_volume@fs& (0+255),w,b
  8327  000E86  26E1               	addwf	fsr1l,f,c
  8328  000E88  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8329  000E8A  22E2               	addwfc	fsr1h,f,c
  8330  000E8C  CFDE FFE6          	movff	postinc2,postinc1
  8331  000E90  CFDE FFE6          	movff	postinc2,postinc1
  8332  000E94  CFDE FFE6          	movff	postinc2,postinc1
  8333  000E98  CFDE FFE6          	movff	postinc2,postinc1
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  8337  000E9C  EE20 F012          	lfsr	2,18
  8338  000EA0  5198               	movf	find_volume@fs& (0+255),w,b
  8339  000EA2  26D9               	addwf	fsr2l,f,c
  8340  000EA4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8341  000EA6  22DA               	addwfc	fsr2h,f,c
  8342  000EA8  CFDE F04B          	movff	postinc2,??_find_volume
  8343  000EAC  CFDE F04C          	movff	postinc2,??_find_volume+1
  8344  000EB0  CFDE F04D          	movff	postinc2,??_find_volume+2
  8345  000EB4  CFDE F04E          	movff	postinc2,??_find_volume+3
  8346  000EB8  0E02               	movlw	2
  8347  000EBA                     u8125:
  8348  000EBA  90D8               	bcf	status,0,c
  8349  000EBC  364B               	rlcf	??_find_volume,f,c
  8350  000EBE  364C               	rlcf	??_find_volume+1,f,c
  8351  000EC0  364D               	rlcf	??_find_volume+2,f,c
  8352  000EC2  364E               	rlcf	??_find_volume+3,f,c
  8353  000EC4  2EE8               	decfsz	wreg,f,c
  8354  000EC6  D7F9               	goto	u8125
  8355  000EC8  C04B  F076         	movff	??_find_volume,find_volume@szbfat
  8356  000ECC  C04C  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  8357  000ED0  C04D  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  8358  000ED4  C04E  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  8359                           
  8360                           ;ff.c: 2317:  } else {
  8361  000ED8  D091               	goto	l547
  8362  000EDA                     l6064:
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  8366  000EDA  EE20 F008          	lfsr	2,8
  8367  000EDE  5198               	movf	find_volume@fs& (0+255),w,b
  8368  000EE0  26D9               	addwf	fsr2l,f,c
  8369  000EE2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8370  000EE4  22DA               	addwfc	fsr2h,f,c
  8371  000EE6  50DE               	movf	postinc2,w,c
  8372  000EE8  10DE               	iorwf	postinc2,w,c
  8373  000EEA  B4D8               	btfsc	status,2,c
  8374  000EEC  D5D9               	goto	u7950
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  8378  000EEE  EE20 F01E          	lfsr	2,30
  8379  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  8380  000EF4  26D9               	addwf	fsr2l,f,c
  8381  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8382  000EF8  22DA               	addwfc	fsr2h,f,c
  8383  000EFA  CFDE F04B          	movff	postinc2,??_find_volume
  8384  000EFE  CFDE F04C          	movff	postinc2,??_find_volume+1
  8385  000F02  CFDE F04D          	movff	postinc2,??_find_volume+2
  8386  000F06  CFDE F04E          	movff	postinc2,??_find_volume+3
  8387  000F0A  518D               	movf	find_volume@fasize& (0+255),w,b
  8388  000F0C  244B               	addwf	??_find_volume,w,c
  8389  000F0E  6E4F               	movwf	(??_find_volume+4)& (0+255),c
  8390  000F10  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8391  000F12  204C               	addwfc	??_find_volume+1,w,c
  8392  000F14  6E50               	movwf	(??_find_volume+5)& (0+255),c
  8393  000F16  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8394  000F18  204D               	addwfc	??_find_volume+2,w,c
  8395  000F1A  6E51               	movwf	(??_find_volume+6)& (0+255),c
  8396  000F1C  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8397  000F1E  204E               	addwfc	??_find_volume+3,w,c
  8398  000F20  6E52               	movwf	(??_find_volume+7)& (0+255),c
  8399  000F22  EE20 F022          	lfsr	2,34
  8400  000F26  5198               	movf	find_volume@fs& (0+255),w,b
  8401  000F28  26D9               	addwf	fsr2l,f,c
  8402  000F2A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8403  000F2C  22DA               	addwfc	fsr2h,f,c
  8404  000F2E  C04F  FFDE         	movff	??_find_volume+4,postinc2
  8405  000F32  C050  FFDE         	movff	??_find_volume+5,postinc2
  8406  000F36  C051  FFDE         	movff	??_find_volume+6,postinc2
  8407  000F3A  C052  FFDE         	movff	??_find_volume+7,postinc2
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  8411  000F3E  0E02               	movlw	2
  8412  000F40  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8413  000F42  B4D8               	btfsc	status,2,c
  8414  000F44  D044               	goto	l6076
  8415                           
  8416                           ; BSR set to: 0
  8417  000F46  EE20 F012          	lfsr	2,18
  8418  000F4A  5198               	movf	find_volume@fs& (0+255),w,b
  8419  000F4C  26D9               	addwf	fsr2l,f,c
  8420  000F4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8421  000F50  22DA               	addwfc	fsr2h,f,c
  8422  000F52  CFDE F04B          	movff	postinc2,??_find_volume
  8423  000F56  CFDE F04C          	movff	postinc2,??_find_volume+1
  8424  000F5A  CFDE F04D          	movff	postinc2,??_find_volume+2
  8425  000F5E  CFDE F04E          	movff	postinc2,??_find_volume+3
  8426  000F62  0E01               	movlw	1
  8427  000F64  144B               	andwf	??_find_volume,w,c
  8428  000F66  6E4F               	movwf	(??_find_volume+4)& (0+255),c
  8429  000F68  0E00               	movlw	0
  8430  000F6A  144C               	andwf	??_find_volume+1,w,c
  8431  000F6C  6E50               	movwf	(??_find_volume+5)& (0+255),c
  8432  000F6E  0E00               	movlw	0
  8433  000F70  144D               	andwf	??_find_volume+2,w,c
  8434  000F72  6E51               	movwf	(??_find_volume+6)& (0+255),c
  8435  000F74  0E00               	movlw	0
  8436  000F76  144E               	andwf	??_find_volume+3,w,c
  8437  000F78  6E52               	movwf	(??_find_volume+7)& (0+255),c
  8438  000F7A  EE20 F012          	lfsr	2,18
  8439  000F7E  5198               	movf	find_volume@fs& (0+255),w,b
  8440  000F80  26D9               	addwf	fsr2l,f,c
  8441  000F82  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8442  000F84  22DA               	addwfc	fsr2h,f,c
  8443  000F86  CFDE F001          	movff	postinc2,___lmul@multiplier
  8444  000F8A  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  8445  000F8E  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  8446  000F92  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  8447  000F96  0E03               	movlw	3
  8448  000F98  6E05               	movwf	___lmul@multiplicand,c
  8449  000F9A  0E00               	movlw	0
  8450  000F9C  6E06               	movwf	___lmul@multiplicand+1,c
  8451  000F9E  0E00               	movlw	0
  8452  000FA0  6E07               	movwf	___lmul@multiplicand+2,c
  8453  000FA2  0E00               	movlw	0
  8454  000FA4  6E08               	movwf	___lmul@multiplicand+3,c
  8455  000FA6  EC90  F02D         	call	___lmul	;wreg free
  8456  000FAA  90D8               	bcf	status,0,c
  8457  000FAC  3204               	rrcf	?___lmul+3,f,c
  8458  000FAE  3203               	rrcf	?___lmul+2,f,c
  8459  000FB0  3202               	rrcf	?___lmul+1,f,c
  8460  000FB2  3201               	rrcf	?___lmul,f,c
  8461  000FB4  504F               	movf	??_find_volume+4,w,c
  8462  000FB6  2401               	addwf	?___lmul,w,c
  8463  000FB8  0100               	movlb	0	; () banked
  8464  000FBA  6F76               	movwf	find_volume@szbfat& (0+255),b
  8465  000FBC  5050               	movf	??_find_volume+5,w,c
  8466  000FBE  2002               	addwfc	?___lmul+1,w,c
  8467  000FC0  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8468  000FC2  5051               	movf	??_find_volume+6,w,c
  8469  000FC4  2003               	addwfc	?___lmul+2,w,c
  8470  000FC6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8471  000FC8  5052               	movf	??_find_volume+7,w,c
  8472  000FCA  2004               	addwfc	?___lmul+3,w,c
  8473  000FCC  D016               	goto	L9
  8474  000FCE                     l6076:
  8475                           
  8476                           ; BSR set to: 0
  8477  000FCE  EE20 F012          	lfsr	2,18
  8478  000FD2  5198               	movf	find_volume@fs& (0+255),w,b
  8479  000FD4  26D9               	addwf	fsr2l,f,c
  8480  000FD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8481  000FD8  22DA               	addwfc	fsr2h,f,c
  8482  000FDA  CFDE F04B          	movff	postinc2,??_find_volume
  8483  000FDE  CFDE F04C          	movff	postinc2,??_find_volume+1
  8484  000FE2  CFDE F04D          	movff	postinc2,??_find_volume+2
  8485  000FE6  CFDE F04E          	movff	postinc2,??_find_volume+3
  8486  000FEA  90D8               	bcf	status,0,c
  8487  000FEC  344B               	rlcf	??_find_volume,w,c
  8488  000FEE  6F76               	movwf	find_volume@szbfat& (0+255),b
  8489  000FF0  344C               	rlcf	??_find_volume+1,w,c
  8490  000FF2  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8491  000FF4  344D               	rlcf	??_find_volume+2,w,c
  8492  000FF6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8493  000FF8  344E               	rlcf	??_find_volume+3,w,c
  8494  000FFA                     L9:
  8495  000FFA  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  8496  000FFC                     l547:
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  8500  000FFC  0EFF               	movlw	255
  8501  000FFE  2576               	addwf	find_volume@szbfat& (0+255),w,b
  8502  001000  6E4B               	movwf	??_find_volume& (0+255),c
  8503  001002  0E01               	movlw	1
  8504  001004  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  8505  001006  6E4C               	movwf	(??_find_volume+1)& (0+255),c
  8506  001008  0E00               	movlw	0
  8507  00100A  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  8508  00100C  6E4D               	movwf	(??_find_volume+2)& (0+255),c
  8509  00100E  0E00               	movlw	0
  8510  001010  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  8511  001012  6E4E               	movwf	(??_find_volume+3)& (0+255),c
  8512  001014  0E0A               	movlw	10
  8513  001016  D005               	goto	u8150
  8514  001018                     u8155:
  8515  001018  90D8               	bcf	status,0,c
  8516  00101A  324E               	rrcf	??_find_volume+3,f,c
  8517  00101C  324D               	rrcf	??_find_volume+2,f,c
  8518  00101E  324C               	rrcf	??_find_volume+1,f,c
  8519  001020  324B               	rrcf	??_find_volume,f,c
  8520  001022                     u8150:
  8521  001022  2EE8               	decfsz	wreg,f,c
  8522  001024  D7F9               	goto	u8155
  8523  001026  EE20 F016          	lfsr	2,22
  8524  00102A  5198               	movf	find_volume@fs& (0+255),w,b
  8525  00102C  26D9               	addwf	fsr2l,f,c
  8526  00102E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8527  001030  22DA               	addwfc	fsr2h,f,c
  8528  001032  504B               	movf	??_find_volume,w,c
  8529  001034  5CDE               	subwf	postinc2,w,c
  8530  001036  504C               	movf	??_find_volume+1,w,c
  8531  001038  58DE               	subwfb	postinc2,w,c
  8532  00103A  504D               	movf	??_find_volume+2,w,c
  8533  00103C  58DE               	subwfb	postinc2,w,c
  8534  00103E  504E               	movf	??_find_volume+3,w,c
  8535  001040  58DE               	subwfb	postinc2,w,c
  8536  001042  A0D8               	btfss	status,0,c
  8537  001044  D52D               	goto	u7950
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  8541  001046  EE20 F00E          	lfsr	2,14
  8542  00104A  5198               	movf	find_volume@fs& (0+255),w,b
  8543  00104C  26D9               	addwf	fsr2l,f,c
  8544  00104E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8545  001050  22DA               	addwfc	fsr2h,f,c
  8546  001052  0EFF               	movlw	255
  8547  001054  6EDE               	movwf	postinc2,c
  8548  001056  0EFF               	movlw	255
  8549  001058  6EDE               	movwf	postinc2,c
  8550  00105A  0EFF               	movlw	255
  8551  00105C  6EDE               	movwf	postinc2,c
  8552  00105E  0EFF               	movlw	255
  8553  001060  6EDD               	movwf	postdec2,c
  8554  001062  52DD               	movf	postdec2,f,c
  8555  001064  52DD               	movf	postdec2,f,c
  8556  001066  EE10 F00A          	lfsr	1,10
  8557  00106A  5198               	movf	find_volume@fs& (0+255),w,b
  8558  00106C  26E1               	addwf	fsr1l,f,c
  8559  00106E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8560  001070  22E2               	addwfc	fsr1h,f,c
  8561  001072  CFDE FFE6          	movff	postinc2,postinc1
  8562  001076  CFDE FFE6          	movff	postinc2,postinc1
  8563  00107A  CFDE FFE6          	movff	postinc2,postinc1
  8564  00107E  CFDE FFE6          	movff	postinc2,postinc1
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  8568  001082  EE20 F005          	lfsr	2,5
  8569  001086  5198               	movf	find_volume@fs& (0+255),w,b
  8570  001088  26D9               	addwf	fsr2l,f,c
  8571  00108A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8572  00108C  22DA               	addwfc	fsr2h,f,c
  8573  00108E  0E80               	movlw	128
  8574  001090  6EDF               	movwf	indf2,c
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;ff.c: 2333:  if (fmt == 3
  8578  001092  0E03               	movlw	3
  8579  001094  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8580  001096  A4D8               	btfss	status,2,c
  8581  001098  D083               	goto	l6100
  8582                           
  8583                           ; BSR set to: 0
  8584  00109A  EE20 F05E          	lfsr	2,94
  8585  00109E  5198               	movf	find_volume@fs& (0+255),w,b
  8586  0010A0  26D9               	addwf	fsr2l,f,c
  8587  0010A2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8588  0010A4  22DA               	addwfc	fsr2h,f,c
  8589  0010A6  04DE               	decf	postinc2,w,c
  8590  0010A8  10DE               	iorwf	postinc2,w,c
  8591  0010AA  A4D8               	btfss	status,2,c
  8592  0010AC  D079               	goto	l6100
  8593                           
  8594                           ; BSR set to: 0
  8595  0010AE  C098  F031         	movff	find_volume@fs,move_window@fs
  8596  0010B2  C099  F032         	movff	find_volume@fs+1,move_window@fs+1
  8597  0010B6  0E01               	movlw	1
  8598  0010B8  2591               	addwf	find_volume@bsect& (0+255),w,b
  8599  0010BA  6E33               	movwf	move_window@sector,c
  8600  0010BC  0E00               	movlw	0
  8601  0010BE  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8602  0010C0  6E34               	movwf	move_window@sector+1,c
  8603  0010C2  0E00               	movlw	0
  8604  0010C4  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8605  0010C6  6E35               	movwf	move_window@sector+2,c
  8606  0010C8  0E00               	movlw	0
  8607  0010CA  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8608  0010CC  6E36               	movwf	move_window@sector+3,c
  8609  0010CE  EC87  F02B         	call	_move_window	;wreg free
  8610  0010D2  0900               	iorlw	0
  8611  0010D4  A4D8               	btfss	status,2,c
  8612  0010D6  D064               	goto	l6100
  8613                           
  8614                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  8615  0010D8  0100               	movlb	0	; () banked
  8616  0010DA  EE20 F005          	lfsr	2,5
  8617  0010DE  5198               	movf	find_volume@fs& (0+255),w,b
  8618  0010E0  26D9               	addwf	fsr2l,f,c
  8619  0010E2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8620  0010E4  22DA               	addwfc	fsr2h,f,c
  8621  0010E6  0E00               	movlw	0
  8622  0010E8  6EDF               	movwf	indf2,c
  8623                           
  8624                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  8625  0010EA  EE22 F02C          	lfsr	2,556
  8626  0010EE  5198               	movf	find_volume@fs& (0+255),w,b
  8627  0010F0  26D9               	addwf	fsr2l,f,c
  8628  0010F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8629  0010F4  22DA               	addwfc	fsr2h,f,c
  8630  0010F6  0E55               	movlw	85
  8631  0010F8  18DE               	xorwf	postinc2,w,c
  8632  0010FA  E152               	bnz	l6100
  8633  0010FC  0EAA               	movlw	170
  8634  0010FE  18DE               	xorwf	postinc2,w,c
  8635  001100  A4D8               	btfss	status,2,c
  8636  001102  D04E               	goto	l6100
  8637                           
  8638                           ; BSR set to: 0
  8639  001104  EE20 F02E          	lfsr	2,46
  8640  001108  5198               	movf	find_volume@fs& (0+255),w,b
  8641  00110A  26D9               	addwf	fsr2l,f,c
  8642  00110C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8643  00110E  22DA               	addwfc	fsr2h,f,c
  8644  001110  0E52               	movlw	82
  8645  001112  18DE               	xorwf	postinc2,w,c
  8646  001114  E145               	bnz	l6100
  8647  001116  0E52               	movlw	82
  8648  001118  18DE               	xorwf	postinc2,w,c
  8649  00111A  E142               	bnz	l6100
  8650  00111C  0E61               	movlw	97
  8651  00111E  18DE               	xorwf	postinc2,w,c
  8652  001120  E13F               	bnz	l6100
  8653  001122  0E41               	movlw	65
  8654  001124  18DE               	xorwf	postinc2,w,c
  8655  001126  A4D8               	btfss	status,2,c
  8656  001128  D03B               	goto	l6100
  8657                           
  8658                           ; BSR set to: 0
  8659  00112A  EE22 F012          	lfsr	2,530
  8660  00112E  5198               	movf	find_volume@fs& (0+255),w,b
  8661  001130  26D9               	addwf	fsr2l,f,c
  8662  001132  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8663  001134  22DA               	addwfc	fsr2h,f,c
  8664  001136  0E72               	movlw	114
  8665  001138  18DE               	xorwf	postinc2,w,c
  8666  00113A  E132               	bnz	l6100
  8667  00113C  0E72               	movlw	114
  8668  00113E  18DE               	xorwf	postinc2,w,c
  8669  001140  E12F               	bnz	l6100
  8670  001142  0E41               	movlw	65
  8671  001144  18DE               	xorwf	postinc2,w,c
  8672  001146  E12C               	bnz	l6100
  8673  001148  0E61               	movlw	97
  8674  00114A  18DE               	xorwf	postinc2,w,c
  8675  00114C  A4D8               	btfss	status,2,c
  8676  00114E  D028               	goto	l6100
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  8680  001150  EE22 F016          	lfsr	2,534
  8681  001154  5198               	movf	find_volume@fs& (0+255),w,b
  8682  001156  26D9               	addwf	fsr2l,f,c
  8683  001158  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8684  00115A  22DA               	addwfc	fsr2h,f,c
  8685  00115C  EE10 F00E          	lfsr	1,14
  8686  001160  5198               	movf	find_volume@fs& (0+255),w,b
  8687  001162  26E1               	addwf	fsr1l,f,c
  8688  001164  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8689  001166  22E2               	addwfc	fsr1h,f,c
  8690  001168  CFDE FFE6          	movff	postinc2,postinc1
  8691  00116C  CFDE FFE6          	movff	postinc2,postinc1
  8692  001170  CFDE FFE6          	movff	postinc2,postinc1
  8693  001174  CFDE FFE6          	movff	postinc2,postinc1
  8694                           
  8695                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  8696  001178  EE22 F01A          	lfsr	2,538
  8697  00117C  5198               	movf	find_volume@fs& (0+255),w,b
  8698  00117E  26D9               	addwf	fsr2l,f,c
  8699  001180  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8700  001182  22DA               	addwfc	fsr2h,f,c
  8701  001184  EE10 F00A          	lfsr	1,10
  8702  001188  5198               	movf	find_volume@fs& (0+255),w,b
  8703  00118A  26E1               	addwf	fsr1l,f,c
  8704  00118C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8705  00118E  22E2               	addwfc	fsr1h,f,c
  8706  001190  CFDE FFE6          	movff	postinc2,postinc1
  8707  001194  CFDE FFE6          	movff	postinc2,postinc1
  8708  001198  CFDE FFE6          	movff	postinc2,postinc1
  8709  00119C  CFDE FFE6          	movff	postinc2,postinc1
  8710  0011A0                     l6100:
  8711                           
  8712                           ;ff.c: 2352:  fs->fs_type = fmt;
  8713  0011A0  C098  FFD9         	movff	find_volume@fs,fsr2l
  8714  0011A4  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  8715  0011A8  C097  FFDF         	movff	find_volume@fmt,indf2
  8716                           
  8717                           ;ff.c: 2353:  fs->id = ++Fsid;
  8718  0011AC  0100               	movlb	0	; () banked
  8719  0011AE  4BDE               	infsnz	_Fsid& (0+255),f,b
  8720  0011B0  2BDF               	incf	(_Fsid+1)& (0+255),f,b
  8721  0011B2  EE20 F006          	lfsr	2,6
  8722  0011B6  5198               	movf	find_volume@fs& (0+255),w,b
  8723  0011B8  26D9               	addwf	fsr2l,f,c
  8724  0011BA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8725  0011BC  22DA               	addwfc	fsr2h,f,c
  8726  0011BE  C0DE  FFDE         	movff	_Fsid,postinc2
  8727  0011C2  C0DF  FFDD         	movff	_Fsid+1,postdec2
  8728  0011C6  EF5A  F004         	goto	l5880
  8729  0011CA                     __end_of_find_volume:
  8730                           	opt callstack 0
  8731                           
  8732 ;; *************** function _get_ldnumber *****************
  8733 ;; Defined at:
  8734 ;;		line 2114 in file "ff.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  8737 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  8740 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  8741 ;;  i               2   10[COMRAM] unsigned short 
  8742 ;;  vol             2    8[COMRAM] int 
  8743 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  8744 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  8745 ;; Return value:  Size  Location     Type
  8746 ;;                  2    0[COMRAM] int 
  8747 ;; Registers used:
  8748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8749 ;; Tracked objects:
  8750 ;;		On entry : 0/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8754 ;;      Params:         2       0       0       0       0       0       0       0       0
  8755 ;;      Locals:        10       0       0       0       0       0       0       0       0
  8756 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8757 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8758 ;;Total ram usage:       14 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; This function calls:
  8761 ;;		Nothing
  8762 ;; This function is called by:
  8763 ;;		_find_volume
  8764 ;;		_f_mount
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text23
  8769  005196                     __ptext23:
  8770                           	opt callstack 0
  8771  005196                     _get_ldnumber:
  8772                           	opt callstack 27
  8773                           
  8774                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;incstack = 0
  8778  005196  6809               	setf	get_ldnumber@vol,c
  8779  005198  680A               	setf	get_ldnumber@vol+1,c
  8780                           
  8781                           ;ff.c: 2129:  if (*path) {
  8782  00519A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8783  00519E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8784  0051A2  50DE               	movf	postinc2,w,c
  8785  0051A4  10DE               	iorwf	postinc2,w,c
  8786  0051A6  B4D8               	btfsc	status,2,c
  8787  0051A8  D05F               	goto	l5656
  8788                           
  8789                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  8790  0051AA  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8791  0051AE  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8792  0051B2  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  8793  0051B6  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  8794  0051BA  D002               	goto	l5630
  8795  0051BC                     l5628:
  8796  0051BC  4A0D               	infsnz	get_ldnumber@tt,f,c
  8797  0051BE  2A0E               	incf	get_ldnumber@tt+1,f,c
  8798  0051C0                     l5630:
  8799  0051C0  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8800  0051C4  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8801  0051C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8802  0051C8  6AF8               	clrf	tblptru,c
  8803  0051CA                     	endif
  8804  0051CA                     	if	0	;tblptru may be non-zero
  8805  0051CA                     	endif
  8806  0051CA  0E20               	movlw	32
  8807  0051CC  0008               	tblrd		*
  8808  0051CE  64F5               	cpfsgt	tablat,c
  8809  0051D0  D00A               	goto	u7420
  8810  0051D2  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8811  0051D6  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8812  0051DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8813  0051DA  6AF8               	clrf	tblptru,c
  8814  0051DC                     	endif
  8815  0051DC                     	if	0	;tblptru may be non-zero
  8816  0051DC                     	endif
  8817  0051DC  0008               	tblrd		*
  8818  0051DE  50F5               	movf	tablat,w,c
  8819  0051E0  0A3A               	xorlw	58
  8820  0051E2  A4D8               	btfss	status,2,c
  8821  0051E4  D7EB               	goto	l5628
  8822  0051E6                     u7420:
  8823                           
  8824                           ;ff.c: 2131:   if (*tt == ':') {
  8825  0051E6  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8826  0051EA  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8827  0051EE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8828  0051EE  6AF8               	clrf	tblptru,c
  8829  0051F0                     	endif
  8830  0051F0                     	if	0	;tblptru may be non-zero
  8831  0051F0                     	endif
  8832  0051F0  0008               	tblrd		*
  8833  0051F2  50F5               	movf	tablat,w,c
  8834  0051F4  0A3A               	xorlw	58
  8835  0051F6  A4D8               	btfss	status,2,c
  8836  0051F8  D03C               	goto	l5660
  8837                           
  8838                           ;ff.c: 2132:    tp = *path;
  8839  0051FA  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8840  0051FE  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8841  005202  CFDE F007          	movff	postinc2,get_ldnumber@tp
  8842  005206  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  8843                           
  8844                           ;ff.c: 2133:    i = *tp++ - '0';
  8845  00520A  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  8846  00520E  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  8847  005212                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8848  005212  6AF8               	clrf	tblptru,c
  8849  005214                     	endif
  8850  005214                     	if	0	;tblptru may be non-zero
  8851  005214                     	endif
  8852  005214  0008               	tblrd		*
  8853  005216  CFF5 F003          	movff	tablat,??_get_ldnumber
  8854  00521A  0ED0               	movlw	208
  8855  00521C  2403               	addwf	??_get_ldnumber,w,c
  8856  00521E  6E0B               	movwf	get_ldnumber@i,c
  8857  005220  6A0C               	clrf	get_ldnumber@i+1,c
  8858  005222  0EFF               	movlw	255
  8859  005224  220C               	addwfc	get_ldnumber@i+1,f,c
  8860  005226  4A07               	infsnz	get_ldnumber@tp,f,c
  8861  005228  2A08               	incf	get_ldnumber@tp+1,f,c
  8862                           
  8863                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  8864  00522A  500C               	movf	get_ldnumber@i+1,w,c
  8865  00522C  E11D               	bnz	l5656
  8866  00522E  0E0A               	movlw	10
  8867  005230  5C0B               	subwf	get_ldnumber@i,w,c
  8868  005232  B0D8               	btfsc	status,0,c
  8869  005234  D019               	goto	l5656
  8870  005236  500D               	movf	get_ldnumber@tt,w,c
  8871  005238  1807               	xorwf	get_ldnumber@tp,w,c
  8872  00523A  E116               	bnz	l5656
  8873  00523C  500E               	movf	get_ldnumber@tt+1,w,c
  8874  00523E  1808               	xorwf	get_ldnumber@tp+1,w,c
  8875  005240  A4D8               	btfss	status,2,c
  8876  005242  D012               	goto	l5656
  8877                           
  8878                           ;ff.c: 2135:     if (i < 1) {
  8879  005244  500B               	movf	get_ldnumber@i,w,c
  8880  005246  100C               	iorwf	get_ldnumber@i+1,w,c
  8881  005248  A4D8               	btfss	status,2,c
  8882  00524A  D00E               	goto	l5656
  8883                           
  8884                           ;ff.c: 2136:      vol = (int)i;
  8885  00524C  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  8886  005250  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  8887                           
  8888                           ;ff.c: 2137:      *path = ++tt;
  8889  005254  4A0D               	infsnz	get_ldnumber@tt,f,c
  8890  005256  2A0E               	incf	get_ldnumber@tt+1,f,c
  8891  005258  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8892  00525C  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8893  005260  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  8894  005264  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  8895  005268                     l5656:
  8896                           
  8897                           ;ff.c: 2156:    return vol;
  8898  005268  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  8899  00526C  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  8900  005270  0012               	return	
  8901  005272                     l5660:
  8902                           
  8903                           ;ff.c: 2161:   vol = 0;
  8904  005272  0E00               	movlw	0
  8905  005274  6E0A               	movwf	get_ldnumber@vol+1,c
  8906  005276  0E00               	movlw	0
  8907  005278  6E09               	movwf	get_ldnumber@vol,c
  8908  00527A  D7F6               	goto	l5656
  8909  00527C                     __end_of_get_ldnumber:
  8910                           	opt callstack 0
  8911                           
  8912 ;; *************** function _disk_initialize *****************
  8913 ;; Defined at:
  8914 ;;		line 296 in file "diskio.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;  pdrv            1    wreg     unsigned char 
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;  pdrv            1   17[COMRAM] unsigned char 
  8919 ;;  ocr             4   18[COMRAM] unsigned char [4]
  8920 ;;  tmr             2   26[COMRAM] unsigned short 
  8921 ;;  n               1   28[COMRAM] unsigned char 
  8922 ;;  ty              1   25[COMRAM] unsigned char 
  8923 ;;  cmd             1   24[COMRAM] unsigned char 
  8924 ;; Return value:  Size  Location     Type
  8925 ;;                  1    wreg      unsigned char 
  8926 ;; Registers used:
  8927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8928 ;; Tracked objects:
  8929 ;;		On entry : 0/0
  8930 ;;		On exit  : 0/0
  8931 ;;		Unchanged: 0/0
  8932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8933 ;;      Params:         0       0       0       0       0       0       0       0       0
  8934 ;;      Locals:        12       0       0       0       0       0       0       0       0
  8935 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8936 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8937 ;;Total ram usage:       13 bytes
  8938 ;; Hardware stack levels used:    1
  8939 ;; Hardware stack levels required when called:    5
  8940 ;; This function calls:
  8941 ;;		_SPI1_Exchange8bit
  8942 ;;		_SPI1_Initialize
  8943 ;;		_SPI1_Open
  8944 ;;		_deselect
  8945 ;;		_send_cmd
  8946 ;; This function is called by:
  8947 ;;		_find_volume
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text24
  8952  00417E                     __ptext24:
  8953                           	opt callstack 0
  8954  00417E                     _disk_initialize:
  8955                           	opt callstack 22
  8956                           
  8957                           ;incstack = 0
  8958                           ;disk_initialize@pdrv stored from wreg
  8959  00417E  6E12               	movwf	disk_initialize@pdrv,c
  8960                           
  8961                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  8962  004180  5012               	movf	disk_initialize@pdrv,w,c
  8963  004182  B4D8               	btfsc	status,2,c
  8964  004184  D002               	goto	l70
  8965  004186  0E01               	movlw	1
  8966  004188  0012               	return	
  8967  00418A                     l70:
  8968                           
  8969                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  8970  00418A  0100               	movlb	0	; () banked
  8971  00418C  A3F1               	btfss	_Stat& (0+255),1,b
  8972  00418E  D003               	goto	l5258
  8973  004190                     u6690:
  8974  004190  0100               	movlb	0	; () banked
  8975  004192  51F1               	movf	_Stat& (0+255),w,b
  8976  004194  0012               	return	
  8977  004196                     l5258:
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;diskio.c: 308:  SPI1_Initialize();
  8981  004196  EC22  F02F         	call	_SPI1_Initialize	;wreg free
  8982                           
  8983                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  8984  00419A  0E0A               	movlw	10
  8985  00419C  6E1D               	movwf	disk_initialize@n,c
  8986  00419E  D004               	goto	l5266
  8987  0041A0                     l5262:
  8988  0041A0  0EFF               	movlw	255
  8989  0041A2  EC04  F02F         	call	_SPI1_Exchange8bit
  8990  0041A6  061D               	decf	disk_initialize@n,f,c
  8991  0041A8                     l5266:
  8992  0041A8  501D               	movf	disk_initialize@n,w,c
  8993  0041AA  A4D8               	btfss	status,2,c
  8994  0041AC  D7F9               	goto	l5262
  8995                           
  8996                           ;diskio.c: 311:  ty = 0;
  8997  0041AE  0E00               	movlw	0
  8998  0041B0  6E1A               	movwf	disk_initialize@ty,c
  8999                           
  9000                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  9001  0041B2  0E00               	movlw	0
  9002  0041B4  6E0B               	movwf	send_cmd@arg,c
  9003  0041B6  0E00               	movlw	0
  9004  0041B8  6E0C               	movwf	send_cmd@arg+1,c
  9005  0041BA  0E00               	movlw	0
  9006  0041BC  6E0D               	movwf	send_cmd@arg+2,c
  9007  0041BE  0E00               	movlw	0
  9008  0041C0  6E0E               	movwf	send_cmd@arg+3,c
  9009  0041C2  0E00               	movlw	0
  9010  0041C4  EC0B  F02E         	call	_send_cmd
  9011  0041C8  06E8               	decf	wreg,f,c
  9012  0041CA  A4D8               	btfss	status,2,c
  9013  0041CC  D0C1               	goto	l92
  9014                           
  9015                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  9016  0041CE  0EAA               	movlw	170
  9017  0041D0  6E0B               	movwf	send_cmd@arg,c
  9018  0041D2  0E01               	movlw	1
  9019  0041D4  6E0C               	movwf	send_cmd@arg+1,c
  9020  0041D6  0E00               	movlw	0
  9021  0041D8  6E0D               	movwf	send_cmd@arg+2,c
  9022  0041DA  0E00               	movlw	0
  9023  0041DC  6E0E               	movwf	send_cmd@arg+3,c
  9024  0041DE  0E08               	movlw	8
  9025  0041E0  EC0B  F02E         	call	_send_cmd
  9026  0041E4  06E8               	decf	wreg,f,c
  9027  0041E6  A4D8               	btfss	status,2,c
  9028  0041E8  D067               	goto	l5322
  9029                           
  9030                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9031  0041EA  0E00               	movlw	0
  9032  0041EC  6E1D               	movwf	disk_initialize@n,c
  9033  0041EE                     l5280:
  9034  0041EE  0E13               	movlw	low disk_initialize@ocr
  9035  0041F0  241D               	addwf	disk_initialize@n,w,c
  9036  0041F2  6ED9               	movwf	fsr2l,c
  9037  0041F4  6ADA               	clrf	fsr2h,c
  9038  0041F6  0E00               	movlw	high disk_initialize@ocr
  9039  0041F8  22DA               	addwfc	fsr2h,f,c
  9040  0041FA  0EFF               	movlw	255
  9041  0041FC  EC04  F02F         	call	_SPI1_Exchange8bit
  9042  004200  6EDF               	movwf	indf2,c
  9043  004202  2A1D               	incf	disk_initialize@n,f,c
  9044  004204  0E03               	movlw	3
  9045  004206  641D               	cpfsgt	disk_initialize@n,c
  9046  004208  D7F2               	goto	l5280
  9047                           
  9048                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  9049  00420A  0415               	decf	disk_initialize@ocr+2,w,c
  9050  00420C  A4D8               	btfss	status,2,c
  9051  00420E  D0A0               	goto	l92
  9052  004210  0EAA               	movlw	170
  9053  004212  1816               	xorwf	disk_initialize@ocr+3,w,c
  9054  004214  A4D8               	btfss	status,2,c
  9055  004216  D09C               	goto	l92
  9056                           
  9057                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  9058  004218  0E03               	movlw	3
  9059  00421A  6E1C               	movwf	disk_initialize@tmr+1,c
  9060  00421C  0EE8               	movlw	232
  9061  00421E  6E1B               	movwf	disk_initialize@tmr,c
  9062  004220  D018               	goto	l81
  9063  004222                     l5292:
  9064                           
  9065                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  9066  004222  0E00               	movlw	0
  9067  004224  6E0B               	movwf	send_cmd@arg,c
  9068  004226  0E00               	movlw	0
  9069  004228  6E0C               	movwf	send_cmd@arg+1,c
  9070  00422A  0E00               	movlw	0
  9071  00422C  6E0D               	movwf	send_cmd@arg+2,c
  9072  00422E  0E40               	movlw	64
  9073  004230  6E0E               	movwf	send_cmd@arg+3,c
  9074  004232  0EA9               	movlw	169
  9075  004234  EC0B  F02E         	call	_send_cmd
  9076  004238  0900               	iorlw	0
  9077  00423A  B4D8               	btfsc	status,2,c
  9078  00423C  D00E               	goto	u6770
  9079                           
  9080                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  9081  00423E  0E03               	movlw	3
  9082  004240  6E11               	movwf	??_disk_initialize& (0+255),c
  9083  004242  0E98               	movlw	152
  9084  004244                     u9987:
  9085  004244  2EE8               	decfsz	wreg,f,c
  9086  004246  D7FE               	bra	u9987
  9087  004248  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9088  00424A  D7FC               	bra	u9987
  9089                           
  9090                           ;diskio.c: 319:     }
  9091  00424C  061B               	decf	disk_initialize@tmr,f,c
  9092  00424E  A0D8               	btfss	status,0,c
  9093  004250  061C               	decf	disk_initialize@tmr+1,f,c
  9094  004252                     l81:
  9095  004252  501B               	movf	disk_initialize@tmr,w,c
  9096  004254  101C               	iorwf	disk_initialize@tmr+1,w,c
  9097  004256  A4D8               	btfss	status,2,c
  9098  004258  D7E4               	goto	l5292
  9099  00425A                     u6770:
  9100                           
  9101                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  9102  00425A  501B               	movf	disk_initialize@tmr,w,c
  9103  00425C  101C               	iorwf	disk_initialize@tmr+1,w,c
  9104  00425E  B4D8               	btfsc	status,2,c
  9105  004260  D077               	goto	l92
  9106  004262  0E00               	movlw	0
  9107  004264  6E0B               	movwf	send_cmd@arg,c
  9108  004266  0E00               	movlw	0
  9109  004268  6E0C               	movwf	send_cmd@arg+1,c
  9110  00426A  0E00               	movlw	0
  9111  00426C  6E0D               	movwf	send_cmd@arg+2,c
  9112  00426E  0E00               	movlw	0
  9113  004270  6E0E               	movwf	send_cmd@arg+3,c
  9114  004272  0E3A               	movlw	58
  9115  004274  EC0B  F02E         	call	_send_cmd
  9116  004278  0900               	iorlw	0
  9117  00427A  A4D8               	btfss	status,2,c
  9118  00427C  D069               	goto	l92
  9119                           
  9120                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9121  00427E  0E00               	movlw	0
  9122  004280  6E1D               	movwf	disk_initialize@n,c
  9123  004282                     l5310:
  9124  004282  0E13               	movlw	low disk_initialize@ocr
  9125  004284  241D               	addwf	disk_initialize@n,w,c
  9126  004286  6ED9               	movwf	fsr2l,c
  9127  004288  6ADA               	clrf	fsr2h,c
  9128  00428A  0E00               	movlw	high disk_initialize@ocr
  9129  00428C  22DA               	addwfc	fsr2h,f,c
  9130  00428E  0EFF               	movlw	255
  9131  004290  EC04  F02F         	call	_SPI1_Exchange8bit
  9132  004294  6EDF               	movwf	indf2,c
  9133  004296  2A1D               	incf	disk_initialize@n,f,c
  9134  004298  0E03               	movlw	3
  9135  00429A  641D               	cpfsgt	disk_initialize@n,c
  9136  00429C  D7F2               	goto	l5310
  9137                           
  9138                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  9139  00429E  BC13               	btfsc	disk_initialize@ocr,6,c
  9140  0042A0  D004               	goto	l5318
  9141  0042A2  0E00               	movlw	0
  9142  0042A4  6E18               	movwf	_disk_initialize$134+1,c
  9143  0042A6  0E04               	movlw	4
  9144  0042A8  D003               	goto	L10
  9145  0042AA                     l5318:
  9146  0042AA  0E00               	movlw	0
  9147  0042AC  6E18               	movwf	_disk_initialize$134+1,c
  9148  0042AE  0E0C               	movlw	12
  9149  0042B0                     L10:
  9150  0042B0  6E17               	movwf	_disk_initialize$134,c
  9151  0042B2  C017  F01A         	movff	_disk_initialize$134,disk_initialize@ty
  9152  0042B6  D04C               	goto	l92
  9153  0042B8                     l5322:
  9154                           
  9155                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  9156  0042B8  0E00               	movlw	0
  9157  0042BA  6E0B               	movwf	send_cmd@arg,c
  9158  0042BC  0E00               	movlw	0
  9159  0042BE  6E0C               	movwf	send_cmd@arg+1,c
  9160  0042C0  0E00               	movlw	0
  9161  0042C2  6E0D               	movwf	send_cmd@arg+2,c
  9162  0042C4  0E00               	movlw	0
  9163  0042C6  6E0E               	movwf	send_cmd@arg+3,c
  9164  0042C8  0EA9               	movlw	169
  9165  0042CA  EC0B  F02E         	call	_send_cmd
  9166  0042CE  6E11               	movwf	??_disk_initialize& (0+255),c
  9167  0042D0  0E02               	movlw	2
  9168  0042D2  6011               	cpfslt	??_disk_initialize,c
  9169  0042D4  D004               	goto	l5326
  9170                           
  9171                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  9172  0042D6  0E02               	movlw	2
  9173  0042D8  6E1A               	movwf	disk_initialize@ty,c
  9174  0042DA  0EA9               	movlw	169
  9175  0042DC  D003               	goto	L11
  9176  0042DE                     l5326:
  9177                           
  9178                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  9179  0042DE  0E01               	movlw	1
  9180  0042E0  6E1A               	movwf	disk_initialize@ty,c
  9181  0042E2  0E01               	movlw	1
  9182  0042E4                     L11:
  9183  0042E4  6E19               	movwf	disk_initialize@cmd,c
  9184                           
  9185                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  9186                           
  9187                           ;diskio.c: 330:    }
  9188  0042E6  0E03               	movlw	3
  9189  0042E8  6E1C               	movwf	disk_initialize@tmr+1,c
  9190  0042EA  0EE8               	movlw	232
  9191  0042EC  6E1B               	movwf	disk_initialize@tmr,c
  9192  0042EE  D018               	goto	l95
  9193  0042F0                     l5328:
  9194                           
  9195                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  9196  0042F0  0E00               	movlw	0
  9197  0042F2  6E0B               	movwf	send_cmd@arg,c
  9198  0042F4  0E00               	movlw	0
  9199  0042F6  6E0C               	movwf	send_cmd@arg+1,c
  9200  0042F8  0E00               	movlw	0
  9201  0042FA  6E0D               	movwf	send_cmd@arg+2,c
  9202  0042FC  0E00               	movlw	0
  9203  0042FE  6E0E               	movwf	send_cmd@arg+3,c
  9204  004300  5019               	movf	disk_initialize@cmd,w,c
  9205  004302  EC0B  F02E         	call	_send_cmd
  9206  004306  0900               	iorlw	0
  9207  004308  B4D8               	btfsc	status,2,c
  9208  00430A  D00E               	goto	u6840
  9209                           
  9210                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  9211  00430C  0E03               	movlw	3
  9212  00430E  6E11               	movwf	??_disk_initialize& (0+255),c
  9213  004310  0E98               	movlw	152
  9214  004312                     u9997:
  9215  004312  2EE8               	decfsz	wreg,f,c
  9216  004314  D7FE               	bra	u9997
  9217  004316  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9218  004318  D7FC               	bra	u9997
  9219                           
  9220                           ;diskio.c: 334:    }
  9221  00431A  061B               	decf	disk_initialize@tmr,f,c
  9222  00431C  A0D8               	btfss	status,0,c
  9223  00431E  061C               	decf	disk_initialize@tmr+1,f,c
  9224  004320                     l95:
  9225  004320  501B               	movf	disk_initialize@tmr,w,c
  9226  004322  101C               	iorwf	disk_initialize@tmr+1,w,c
  9227  004324  A4D8               	btfss	status,2,c
  9228  004326  D7E4               	goto	l5328
  9229  004328                     u6840:
  9230                           
  9231                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  9232  004328  501B               	movf	disk_initialize@tmr,w,c
  9233  00432A  101C               	iorwf	disk_initialize@tmr+1,w,c
  9234  00432C  B4D8               	btfsc	status,2,c
  9235  00432E  D00E               	goto	u6860
  9236  004330  0E00               	movlw	0
  9237  004332  6E0B               	movwf	send_cmd@arg,c
  9238  004334  0E02               	movlw	2
  9239  004336  6E0C               	movwf	send_cmd@arg+1,c
  9240  004338  0E00               	movlw	0
  9241  00433A  6E0D               	movwf	send_cmd@arg+2,c
  9242  00433C  0E00               	movlw	0
  9243  00433E  6E0E               	movwf	send_cmd@arg+3,c
  9244  004340  0E10               	movlw	16
  9245  004342  EC0B  F02E         	call	_send_cmd
  9246  004346  0900               	iorlw	0
  9247  004348  B4D8               	btfsc	status,2,c
  9248  00434A  D002               	goto	l92
  9249  00434C                     u6860:
  9250                           
  9251                           ;diskio.c: 336:     ty = 0;
  9252  00434C  0E00               	movlw	0
  9253  00434E  6E1A               	movwf	disk_initialize@ty,c
  9254  004350                     l92:
  9255                           
  9256                           ;diskio.c: 339:  CardType = ty;
  9257  004350  C01A  F0E2         	movff	disk_initialize@ty,_CardType
  9258                           
  9259                           ;diskio.c: 340:  deselect();
  9260  004354  EC30  F02F         	call	_deselect	;wreg free
  9261                           
  9262                           ;diskio.c: 342:  if (ty) {
  9263  004358  501A               	movf	disk_initialize@ty,w,c
  9264  00435A  B4D8               	btfsc	status,2,c
  9265  00435C  D719               	goto	u6690
  9266                           
  9267                           ;diskio.c: 343:   Stat &= ~0x01;
  9268  00435E  0100               	movlb	0	; () banked
  9269  004360  91F1               	bcf	_Stat& (0+255),0,b
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;diskio.c: 344:   SPI1_Open();
  9273  004362  EC14  F02F         	call	_SPI1_Open	;wreg free
  9274  004366  D714               	goto	u6690
  9275  004368                     __end_of_disk_initialize:
  9276                           	opt callstack 0
  9277                           
  9278 ;; *************** function _SPI1_Open *****************
  9279 ;; Defined at:
  9280 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;		None
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;		None
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, status,2
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9294 ;;      Params:         0       0       0       0       0       0       0       0       0
  9295 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9297 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9298 ;;Total ram usage:        0 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; This function calls:
  9301 ;;		Nothing
  9302 ;; This function is called by:
  9303 ;;		_disk_initialize
  9304 ;; This function uses a non-reentrant model
  9305 ;;
  9306                           
  9307                           	psect	text25
  9308  005E28                     __ptext25:
  9309                           	opt callstack 0
  9310  005E28                     _SPI1_Open:
  9311                           	opt callstack 26
  9312                           
  9313                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  9314                           
  9315                           ;incstack = 0
  9316  005E28  0E40               	movlw	64
  9317  005E2A  6EC7               	movwf	4039,c	;volatile
  9318                           
  9319                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  9320  005E2C  0E20               	movlw	32
  9321  005E2E  6EC6               	movwf	4038,c	;volatile
  9322                           
  9323                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  9324  005E30  0E00               	movlw	0
  9325  005E32  6EC8               	movwf	4040,c	;volatile
  9326  005E34  0012               	return		;funcret
  9327  005E36                     __end_of_SPI1_Open:
  9328                           	opt callstack 0
  9329                           
  9330 ;; *************** function _check_fs *****************
  9331 ;; Defined at:
  9332 ;;		line 2175 in file "ff.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;  fs              2   59[COMRAM] PTR struct .
  9335 ;;		 -> FatFs(558), NULL(0), 
  9336 ;;  sect            4   61[COMRAM] unsigned long 
  9337 ;; Auto vars:     Size  Location     Type
  9338 ;;		None
  9339 ;; Return value:  Size  Location     Type
  9340 ;;                  1    wreg      unsigned char 
  9341 ;; Registers used:
  9342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9343 ;; Tracked objects:
  9344 ;;		On entry : 0/0
  9345 ;;		On exit  : 0/0
  9346 ;;		Unchanged: 0/0
  9347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9348 ;;      Params:         6       0       0       0       0       0       0       0       0
  9349 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9350 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9351 ;;      Totals:        10       0       0       0       0       0       0       0       0
  9352 ;;Total ram usage:       10 bytes
  9353 ;; Hardware stack levels used:    1
  9354 ;; Hardware stack levels required when called:    8
  9355 ;; This function calls:
  9356 ;;		_move_window
  9357 ;; This function is called by:
  9358 ;;		_find_volume
  9359 ;; This function uses a non-reentrant model
  9360 ;;
  9361                           
  9362                           	psect	text26
  9363  004FC2                     __ptext26:
  9364                           	opt callstack 0
  9365  004FC2                     _check_fs:
  9366                           	opt callstack 19
  9367                           
  9368                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  9369                           
  9370                           ;incstack = 0
  9371  004FC2  EE20 F004          	lfsr	2,4
  9372  004FC6  503C               	movf	check_fs@fs,w,c
  9373  004FC8  26D9               	addwf	fsr2l,f,c
  9374  004FCA  503D               	movf	check_fs@fs+1,w,c
  9375  004FCC  22DA               	addwfc	fsr2h,f,c
  9376  004FCE  0E00               	movlw	0
  9377  004FD0  6EDF               	movwf	indf2,c
  9378  004FD2  EE20 F02A          	lfsr	2,42
  9379  004FD6  503C               	movf	check_fs@fs,w,c
  9380  004FD8  26D9               	addwf	fsr2l,f,c
  9381  004FDA  503D               	movf	check_fs@fs+1,w,c
  9382  004FDC  22DA               	addwfc	fsr2h,f,c
  9383  004FDE  0EFF               	movlw	255
  9384  004FE0  6EDE               	movwf	postinc2,c
  9385  004FE2  0EFF               	movlw	255
  9386  004FE4  6EDE               	movwf	postinc2,c
  9387  004FE6  0EFF               	movlw	255
  9388  004FE8  6EDE               	movwf	postinc2,c
  9389  004FEA  0EFF               	movlw	255
  9390  004FEC  6EDD               	movwf	postdec2,c
  9391                           
  9392                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  9393  004FEE  C03C  F031         	movff	check_fs@fs,move_window@fs
  9394  004FF2  C03D  F032         	movff	check_fs@fs+1,move_window@fs+1
  9395  004FF6  C03E  F033         	movff	check_fs@sect,move_window@sector
  9396  004FFA  C03F  F034         	movff	check_fs@sect+1,move_window@sector+1
  9397  004FFE  C040  F035         	movff	check_fs@sect+2,move_window@sector+2
  9398  005002  C041  F036         	movff	check_fs@sect+3,move_window@sector+3
  9399  005006  EC87  F02B         	call	_move_window	;wreg free
  9400  00500A  0900               	iorlw	0
  9401  00500C  B4D8               	btfsc	status,2,c
  9402  00500E  D002               	goto	l5674
  9403                           
  9404                           ;ff.c: 2182:   return 3;
  9405  005010  0E03               	movlw	3
  9406  005012  0012               	return	
  9407  005014                     l5674:
  9408                           
  9409                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  9410  005014  EE22 F02C          	lfsr	2,556
  9411  005018  503C               	movf	check_fs@fs,w,c
  9412  00501A  26D9               	addwf	fsr2l,f,c
  9413  00501C  503D               	movf	check_fs@fs+1,w,c
  9414  00501E  22DA               	addwfc	fsr2h,f,c
  9415  005020  0E55               	movlw	85
  9416  005022  18DE               	xorwf	postinc2,w,c
  9417  005024  E104               	bnz	u7480
  9418  005026  0EAA               	movlw	170
  9419  005028  18DE               	xorwf	postinc2,w,c
  9420  00502A  B4D8               	btfsc	status,2,c
  9421  00502C  D002               	goto	l5680
  9422  00502E                     u7480:
  9423                           
  9424                           ;ff.c: 2185:   return 2;
  9425  00502E  0E02               	movlw	2
  9426  005030  0012               	return	
  9427  005032                     l5680:
  9428                           
  9429                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  9430  005032  EE20 F064          	lfsr	2,100
  9431  005036  503C               	movf	check_fs@fs,w,c
  9432  005038  26D9               	addwf	fsr2l,f,c
  9433  00503A  503D               	movf	check_fs@fs+1,w,c
  9434  00503C  22DA               	addwfc	fsr2h,f,c
  9435  00503E  0EFF               	movlw	255
  9436  005040  14DE               	andwf	postinc2,w,c
  9437  005042  6E42               	movwf	??_check_fs& (0+255),c
  9438  005044  0EFF               	movlw	255
  9439  005046  14DE               	andwf	postinc2,w,c
  9440  005048  6E43               	movwf	(??_check_fs+1)& (0+255),c
  9441  00504A  0EFF               	movlw	255
  9442  00504C  14DE               	andwf	postinc2,w,c
  9443  00504E  6E44               	movwf	(??_check_fs+2)& (0+255),c
  9444  005050  0E00               	movlw	0
  9445  005052  14DE               	andwf	postinc2,w,c
  9446  005054  6E45               	movwf	(??_check_fs+3)& (0+255),c
  9447  005056  0E46               	movlw	70
  9448  005058  1842               	xorwf	??_check_fs,w,c
  9449  00505A  E10A               	bnz	l5686
  9450  00505C  0E41               	movlw	65
  9451  00505E  1843               	xorwf	??_check_fs+1,w,c
  9452  005060  E107               	bnz	l5686
  9453  005062  0E54               	movlw	84
  9454  005064  1844               	xorwf	??_check_fs+2,w,c
  9455  005066  1045               	iorwf	??_check_fs+3,w,c
  9456  005068  A4D8               	btfss	status,2,c
  9457  00506A  D002               	goto	l5686
  9458  00506C                     u7490:
  9459                           
  9460                           ;ff.c: 2188:   return 0;
  9461  00506C  0E00               	movlw	0
  9462  00506E  0012               	return	
  9463  005070                     l5686:
  9464                           
  9465                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  9466  005070  EE20 F080          	lfsr	2,128
  9467  005074  503C               	movf	check_fs@fs,w,c
  9468  005076  26D9               	addwf	fsr2l,f,c
  9469  005078  503D               	movf	check_fs@fs+1,w,c
  9470  00507A  22DA               	addwfc	fsr2h,f,c
  9471  00507C  0EFF               	movlw	255
  9472  00507E  14DE               	andwf	postinc2,w,c
  9473  005080  6E42               	movwf	??_check_fs& (0+255),c
  9474  005082  0EFF               	movlw	255
  9475  005084  14DE               	andwf	postinc2,w,c
  9476  005086  6E43               	movwf	(??_check_fs+1)& (0+255),c
  9477  005088  0EFF               	movlw	255
  9478  00508A  14DE               	andwf	postinc2,w,c
  9479  00508C  6E44               	movwf	(??_check_fs+2)& (0+255),c
  9480  00508E  0E00               	movlw	0
  9481  005090  14DE               	andwf	postinc2,w,c
  9482  005092  6E45               	movwf	(??_check_fs+3)& (0+255),c
  9483  005094  0E46               	movlw	70
  9484  005096  1842               	xorwf	??_check_fs,w,c
  9485  005098  E108               	bnz	l5692
  9486  00509A  0E41               	movlw	65
  9487  00509C  1843               	xorwf	??_check_fs+1,w,c
  9488  00509E  E105               	bnz	l5692
  9489  0050A0  0E54               	movlw	84
  9490  0050A2  1844               	xorwf	??_check_fs+2,w,c
  9491  0050A4  1045               	iorwf	??_check_fs+3,w,c
  9492  0050A6  B4D8               	btfsc	status,2,c
  9493  0050A8  D7E1               	goto	u7490
  9494  0050AA                     l5692:
  9495                           
  9496                           ;ff.c: 2192:  return 1;
  9497  0050AA  0E01               	movlw	1
  9498  0050AC  0012               	return		;funcret
  9499  0050AE                     __end_of_check_fs:
  9500                           	opt callstack 0
  9501                           
  9502 ;; *************** function _f_lseek *****************
  9503 ;; Defined at:
  9504 ;;		line 3033 in file "ff.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;  fp              2   17[BANK0 ] PTR struct .
  9507 ;;		 -> Fil(32), 
  9508 ;;  ofs             4   19[BANK0 ] unsigned long 
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;  clst            4   52[BANK0 ] unsigned long 
  9511 ;;  bcs             4   48[BANK0 ] unsigned long 
  9512 ;;  nsect           4   44[BANK0 ] unsigned long 
  9513 ;;  ifptr           4   39[BANK0 ] unsigned long 
  9514 ;;  res             1   43[BANK0 ] enum E93
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      enum E93
  9517 ;; Registers used:
  9518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9524 ;;      Params:         0       6       0       0       0       0       0       0       0
  9525 ;;      Locals:         0      17       0       0       0       0       0       0       0
  9526 ;;      Temps:          0      16       0       0       0       0       0       0       0
  9527 ;;      Totals:         0      39       0       0       0       0       0       0       0
  9528 ;;Total ram usage:       39 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:   10
  9531 ;; This function calls:
  9532 ;;		___lldiv
  9533 ;;		_clust2sect
  9534 ;;		_create_chain
  9535 ;;		_get_fat
  9536 ;;		_validate
  9537 ;; This function is called by:
  9538 ;;		_guardar
  9539 ;; This function uses a non-reentrant model
  9540 ;;
  9541                           
  9542                           	psect	text27
  9543  001948                     __ptext27:
  9544                           	opt callstack 0
  9545  001948                     _f_lseek:
  9546                           	opt callstack 19
  9547                           
  9548                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  9549                           
  9550                           ;incstack = 0
  9551  001948  C071  F002         	movff	f_lseek@fp,validate@obj
  9552  00194C  C072  F003         	movff	f_lseek@fp+1,validate@obj+1
  9553  001950  ECDA  F02B         	call	_validate	;wreg free
  9554  001954  0100               	movlb	0	; () banked
  9555  001956  6F8B               	movwf	f_lseek@res& (0+255),b
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;ff.c: 3046:  if (res != FR_OK) return res;
  9559  001958  518B               	movf	f_lseek@res& (0+255),w,b
  9560  00195A  B4D8               	btfsc	status,2,c
  9561  00195C  D002               	goto	l6786
  9562  00195E                     u9350:
  9563                           
  9564                           ; BSR set to: 0
  9565  00195E  518B               	movf	f_lseek@res& (0+255),w,b
  9566  001960  0012               	return	
  9567  001962                     l6786:
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;ff.c: 3047:  if (fp->err)
  9571  001962  EE20 F005          	lfsr	2,5
  9572  001966  5171               	movf	f_lseek@fp& (0+255),w,b
  9573  001968  26D9               	addwf	fsr2l,f,c
  9574  00196A  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9575  00196C  22DA               	addwfc	fsr2h,f,c
  9576  00196E  50DF               	movf	indf2,w,c
  9577  001970  B4D8               	btfsc	status,2,c
  9578  001972  D008               	goto	l6792
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;ff.c: 3048:   return (FRESULT)fp->err;
  9582  001974  EE20 F005          	lfsr	2,5
  9583  001978  5171               	movf	f_lseek@fp& (0+255),w,b
  9584  00197A  26D9               	addwf	fsr2l,f,c
  9585  00197C  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9586  00197E  22DA               	addwfc	fsr2h,f,c
  9587  001980  50DF               	movf	indf2,w,c
  9588  001982  0012               	return	
  9589  001984                     l6792:
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  9593  001984  EE20 F00A          	lfsr	2,10
  9594  001988  5171               	movf	f_lseek@fp& (0+255),w,b
  9595  00198A  26D9               	addwf	fsr2l,f,c
  9596  00198C  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9597  00198E  22DA               	addwfc	fsr2h,f,c
  9598  001990  5173               	movf	f_lseek@ofs& (0+255),w,b
  9599  001992  5CDE               	subwf	postinc2,w,c
  9600  001994  5174               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9601  001996  58DE               	subwfb	postinc2,w,c
  9602  001998  5175               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9603  00199A  58DE               	subwfb	postinc2,w,c
  9604  00199C  5176               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9605  00199E  58DE               	subwfb	postinc2,w,c
  9606  0019A0  B0D8               	btfsc	status,0,c
  9607  0019A2  D016               	goto	l667
  9608                           
  9609                           ; BSR set to: 0
  9610  0019A4  EE20 F004          	lfsr	2,4
  9611  0019A8  5171               	movf	f_lseek@fp& (0+255),w,b
  9612  0019AA  26D9               	addwf	fsr2l,f,c
  9613  0019AC  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9614  0019AE  22DA               	addwfc	fsr2h,f,c
  9615  0019B0  B2DF               	btfsc	indf2,1,c
  9616  0019B2  D00E               	goto	l667
  9617                           
  9618                           ; BSR set to: 0
  9619                           ;ff.c: 3111:    ) ofs = fp->fsize;
  9620  0019B4  EE20 F00A          	lfsr	2,10
  9621  0019B8  5171               	movf	f_lseek@fp& (0+255),w,b
  9622  0019BA  26D9               	addwf	fsr2l,f,c
  9623  0019BC  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9624  0019BE  22DA               	addwfc	fsr2h,f,c
  9625  0019C0  CFDE F073          	movff	postinc2,f_lseek@ofs
  9626  0019C4  CFDE F074          	movff	postinc2,f_lseek@ofs+1
  9627  0019C8  CFDE F075          	movff	postinc2,f_lseek@ofs+2
  9628  0019CC  CFDE F076          	movff	postinc2,f_lseek@ofs+3
  9629  0019D0                     l667:
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;ff.c: 3113:   ifptr = fp->fptr;
  9633  0019D0  EE20 F006          	lfsr	2,6
  9634  0019D4  5171               	movf	f_lseek@fp& (0+255),w,b
  9635  0019D6  26D9               	addwf	fsr2l,f,c
  9636  0019D8  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9637  0019DA  22DA               	addwfc	fsr2h,f,c
  9638  0019DC  CFDE F087          	movff	postinc2,f_lseek@ifptr
  9639  0019E0  CFDE F088          	movff	postinc2,f_lseek@ifptr+1
  9640  0019E4  CFDE F089          	movff	postinc2,f_lseek@ifptr+2
  9641  0019E8  CFDE F08A          	movff	postinc2,f_lseek@ifptr+3
  9642                           
  9643                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  9644  0019EC  0E00               	movlw	0
  9645  0019EE  6F8C               	movwf	f_lseek@nsect& (0+255),b
  9646  0019F0  0E00               	movlw	0
  9647  0019F2  6F8D               	movwf	(f_lseek@nsect+1)& (0+255),b
  9648  0019F4  0E00               	movlw	0
  9649  0019F6  6F8E               	movwf	(f_lseek@nsect+2)& (0+255),b
  9650  0019F8  0E00               	movlw	0
  9651  0019FA  6F8F               	movwf	(f_lseek@nsect+3)& (0+255),b
  9652  0019FC  EE20 F006          	lfsr	2,6
  9653  001A00  5171               	movf	f_lseek@fp& (0+255),w,b
  9654  001A02  26D9               	addwf	fsr2l,f,c
  9655  001A04  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9656  001A06  22DA               	addwfc	fsr2h,f,c
  9657  001A08  C08C  FFDE         	movff	f_lseek@nsect,postinc2
  9658  001A0C  C08D  FFDE         	movff	f_lseek@nsect+1,postinc2
  9659  001A10  C08E  FFDE         	movff	f_lseek@nsect+2,postinc2
  9660  001A14  C08F  FFDE         	movff	f_lseek@nsect+3,postinc2
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;ff.c: 3115:   if (ofs) {
  9664  001A18  5173               	movf	f_lseek@ofs& (0+255),w,b
  9665  001A1A  1174               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  9666  001A1C  1175               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  9667  001A1E  1176               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  9668  001A20  B4D8               	btfsc	status,2,c
  9669  001A22  D22D               	goto	l6886
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  9673  001A24  C071  FFD9         	movff	f_lseek@fp,fsr2l
  9674  001A28  C072  FFDA         	movff	f_lseek@fp+1,fsr2h
  9675  001A2C  EE10 F002          	lfsr	1,2
  9676  001A30  50DE               	movf	postinc2,w,c
  9677  001A32  26E1               	addwf	fsr1l,f,c
  9678  001A34  50DD               	movf	postdec2,w,c
  9679  001A36  22E2               	addwfc	fsr1h,f,c
  9680  001A38  50E7               	movf	indf1,w,c
  9681  001A3A  6F77               	movwf	??_f_lseek& (0+255),b
  9682  001A3C  C077  F078         	movff	??_f_lseek,??_f_lseek+1
  9683  001A40  6B79               	clrf	(??_f_lseek+2)& (0+255),b
  9684  001A42  6B7A               	clrf	(??_f_lseek+3)& (0+255),b
  9685  001A44  6B7B               	clrf	(??_f_lseek+4)& (0+255),b
  9686  001A46  0E09               	movlw	9
  9687  001A48                     u9405:
  9688  001A48  90D8               	bcf	status,0,c
  9689  001A4A  3778               	rlcf	(??_f_lseek+1)& (0+255),f,b
  9690  001A4C  3779               	rlcf	(??_f_lseek+2)& (0+255),f,b
  9691  001A4E  377A               	rlcf	(??_f_lseek+3)& (0+255),f,b
  9692  001A50  377B               	rlcf	(??_f_lseek+4)& (0+255),f,b
  9693  001A52  2EE8               	decfsz	wreg,f,c
  9694  001A54  D7F9               	goto	u9405
  9695  001A56  C078  F090         	movff	??_f_lseek+1,f_lseek@bcs
  9696  001A5A  C079  F091         	movff	??_f_lseek+2,f_lseek@bcs+1
  9697  001A5E  C07A  F092         	movff	??_f_lseek+3,f_lseek@bcs+2
  9698  001A62  C07B  F093         	movff	??_f_lseek+4,f_lseek@bcs+3
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;ff.c: 3117:    if (ifptr > 0 &&
  9702  001A66  5187               	movf	f_lseek@ifptr& (0+255),w,b
  9703  001A68  1188               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  9704  001A6A  1189               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  9705  001A6C  118A               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  9706  001A6E  B4D8               	btfsc	status,2,c
  9707  001A70  D097               	goto	l6808
  9708                           
  9709                           ; BSR set to: 0
  9710  001A72  0EFF               	movlw	255
  9711  001A74  2573               	addwf	f_lseek@ofs& (0+255),w,b
  9712  001A76  6E01               	movwf	___lldiv@dividend,c
  9713  001A78  0EFF               	movlw	255
  9714  001A7A  2174               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  9715  001A7C  6E02               	movwf	___lldiv@dividend+1,c
  9716  001A7E  0EFF               	movlw	255
  9717  001A80  2175               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  9718  001A82  6E03               	movwf	___lldiv@dividend+2,c
  9719  001A84  0EFF               	movlw	255
  9720  001A86  2176               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  9721  001A88  6E04               	movwf	___lldiv@dividend+3,c
  9722  001A8A  C090  F005         	movff	f_lseek@bcs,___lldiv@divisor
  9723  001A8E  C091  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  9724  001A92  C092  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  9725  001A96  C093  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  9726  001A9A  EC66  F02C         	call	___lldiv	;wreg free
  9727  001A9E  C001  F077         	movff	?___lldiv,??_f_lseek
  9728  001AA2  C002  F078         	movff	?___lldiv+1,??_f_lseek+1
  9729  001AA6  C003  F079         	movff	?___lldiv+2,??_f_lseek+2
  9730  001AAA  C004  F07A         	movff	?___lldiv+3,??_f_lseek+3
  9731  001AAE  0EFF               	movlw	255
  9732  001AB0  0100               	movlb	0	; () banked
  9733  001AB2  2587               	addwf	f_lseek@ifptr& (0+255),w,b
  9734  001AB4  6E01               	movwf	___lldiv@dividend,c
  9735  001AB6  0EFF               	movlw	255
  9736  001AB8  2188               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  9737  001ABA  6E02               	movwf	___lldiv@dividend+1,c
  9738  001ABC  0EFF               	movlw	255
  9739  001ABE  2189               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  9740  001AC0  6E03               	movwf	___lldiv@dividend+2,c
  9741  001AC2  0EFF               	movlw	255
  9742  001AC4  218A               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  9743  001AC6  6E04               	movwf	___lldiv@dividend+3,c
  9744  001AC8  C090  F005         	movff	f_lseek@bcs,___lldiv@divisor
  9745  001ACC  C091  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  9746  001AD0  C092  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  9747  001AD4  C093  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  9748  001AD8  EC66  F02C         	call	___lldiv	;wreg free
  9749  001ADC  5001               	movf	?___lldiv,w,c
  9750  001ADE  0100               	movlb	0	; () banked
  9751  001AE0  5D77               	subwf	??_f_lseek& (0+255),w,b
  9752  001AE2  5002               	movf	?___lldiv+1,w,c
  9753  001AE4  5978               	subwfb	(??_f_lseek+1)& (0+255),w,b
  9754  001AE6  5003               	movf	?___lldiv+2,w,c
  9755  001AE8  5979               	subwfb	(??_f_lseek+2)& (0+255),w,b
  9756  001AEA  5004               	movf	?___lldiv+3,w,c
  9757  001AEC  597A               	subwfb	(??_f_lseek+3)& (0+255),w,b
  9758  001AEE  A0D8               	btfss	status,0,c
  9759  001AF0  D057               	goto	l6808
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  9763  001AF2  0EFF               	movlw	255
  9764  001AF4  2590               	addwf	f_lseek@bcs& (0+255),w,b
  9765  001AF6  6F77               	movwf	??_f_lseek& (0+255),b
  9766  001AF8  0EFF               	movlw	255
  9767  001AFA  2191               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  9768  001AFC  6F78               	movwf	(??_f_lseek+1)& (0+255),b
  9769  001AFE  0EFF               	movlw	255
  9770  001B00  2192               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  9771  001B02  6F79               	movwf	(??_f_lseek+2)& (0+255),b
  9772  001B04  0EFF               	movlw	255
  9773  001B06  2193               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  9774  001B08  6F7A               	movwf	(??_f_lseek+3)& (0+255),b
  9775  001B0A  1D77               	comf	??_f_lseek& (0+255),w,b
  9776  001B0C  6F7B               	movwf	(??_f_lseek+4)& (0+255),b
  9777  001B0E  1D78               	comf	(??_f_lseek+1)& (0+255),w,b
  9778  001B10  6F7C               	movwf	(??_f_lseek+5)& (0+255),b
  9779  001B12  1D79               	comf	(??_f_lseek+2)& (0+255),w,b
  9780  001B14  6F7D               	movwf	(??_f_lseek+6)& (0+255),b
  9781  001B16  1D7A               	comf	(??_f_lseek+3)& (0+255),w,b
  9782  001B18  6F7E               	movwf	(??_f_lseek+7)& (0+255),b
  9783  001B1A  0EFF               	movlw	255
  9784  001B1C  2587               	addwf	f_lseek@ifptr& (0+255),w,b
  9785  001B1E  6F7F               	movwf	(??_f_lseek+8)& (0+255),b
  9786  001B20  0EFF               	movlw	255
  9787  001B22  2188               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  9788  001B24  6F80               	movwf	(??_f_lseek+9)& (0+255),b
  9789  001B26  0EFF               	movlw	255
  9790  001B28  2189               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  9791  001B2A  6F81               	movwf	(??_f_lseek+10)& (0+255),b
  9792  001B2C  0EFF               	movlw	255
  9793  001B2E  218A               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  9794  001B30  6F82               	movwf	(??_f_lseek+11)& (0+255),b
  9795  001B32  517B               	movf	(??_f_lseek+4)& (0+255),w,b
  9796  001B34  157F               	andwf	(??_f_lseek+8)& (0+255),w,b
  9797  001B36  6F83               	movwf	(??_f_lseek+12)& (0+255),b
  9798  001B38  517C               	movf	(??_f_lseek+5)& (0+255),w,b
  9799  001B3A  1580               	andwf	(??_f_lseek+9)& (0+255),w,b
  9800  001B3C  6F84               	movwf	(??_f_lseek+13)& (0+255),b
  9801  001B3E  517D               	movf	(??_f_lseek+6)& (0+255),w,b
  9802  001B40  1581               	andwf	(??_f_lseek+10)& (0+255),w,b
  9803  001B42  6F85               	movwf	(??_f_lseek+14)& (0+255),b
  9804  001B44  517E               	movf	(??_f_lseek+7)& (0+255),w,b
  9805  001B46  1582               	andwf	(??_f_lseek+11)& (0+255),w,b
  9806  001B48  6F86               	movwf	(??_f_lseek+15)& (0+255),b
  9807  001B4A  EE20 F006          	lfsr	2,6
  9808  001B4E  5171               	movf	f_lseek@fp& (0+255),w,b
  9809  001B50  26D9               	addwf	fsr2l,f,c
  9810  001B52  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9811  001B54  22DA               	addwfc	fsr2h,f,c
  9812  001B56  C083  FFDE         	movff	??_f_lseek+12,postinc2
  9813  001B5A  C084  FFDE         	movff	??_f_lseek+13,postinc2
  9814  001B5E  C085  FFDE         	movff	??_f_lseek+14,postinc2
  9815  001B62  C086  FFDE         	movff	??_f_lseek+15,postinc2
  9816                           
  9817                           ;ff.c: 3120:     ofs -= fp->fptr;
  9818  001B66  EE20 F006          	lfsr	2,6
  9819  001B6A  5171               	movf	f_lseek@fp& (0+255),w,b
  9820  001B6C  26D9               	addwf	fsr2l,f,c
  9821  001B6E  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9822  001B70  22DA               	addwfc	fsr2h,f,c
  9823  001B72  50DE               	movf	postinc2,w,c
  9824  001B74  5F73               	subwf	f_lseek@ofs& (0+255),f,b
  9825  001B76  50DE               	movf	postinc2,w,c
  9826  001B78  5B74               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  9827  001B7A  50DE               	movf	postinc2,w,c
  9828  001B7C  5B75               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  9829  001B7E  50DD               	movf	postdec2,w,c
  9830  001B80  5B76               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  9831                           
  9832                           ;ff.c: 3121:     clst = fp->clust;
  9833  001B82  EE20 F012          	lfsr	2,18
  9834  001B86  5171               	movf	f_lseek@fp& (0+255),w,b
  9835  001B88  26D9               	addwf	fsr2l,f,c
  9836  001B8A  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9837  001B8C  22DA               	addwfc	fsr2h,f,c
  9838  001B8E  CFDE F094          	movff	postinc2,f_lseek@clst
  9839  001B92  CFDE F095          	movff	postinc2,f_lseek@clst+1
  9840  001B96  CFDE F096          	movff	postinc2,f_lseek@clst+2
  9841  001B9A  CFDE F097          	movff	postinc2,f_lseek@clst+3
  9842                           
  9843                           ;ff.c: 3122:    } else {
  9844  001B9E  D06E               	goto	l6832
  9845  001BA0                     l6808:
  9846                           
  9847                           ; BSR set to: 0
  9848                           ;ff.c: 3123:     clst = fp->sclust;
  9849  001BA0  EE20 F00E          	lfsr	2,14
  9850  001BA4  5171               	movf	f_lseek@fp& (0+255),w,b
  9851  001BA6  26D9               	addwf	fsr2l,f,c
  9852  001BA8  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9853  001BAA  22DA               	addwfc	fsr2h,f,c
  9854  001BAC  CFDE F094          	movff	postinc2,f_lseek@clst
  9855  001BB0  CFDE F095          	movff	postinc2,f_lseek@clst+1
  9856  001BB4  CFDE F096          	movff	postinc2,f_lseek@clst+2
  9857  001BB8  CFDE F097          	movff	postinc2,f_lseek@clst+3
  9858                           
  9859                           ; BSR set to: 0
  9860                           ;ff.c: 3125:     if (clst == 0) {
  9861  001BBC  5194               	movf	f_lseek@clst& (0+255),w,b
  9862  001BBE  1195               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9863  001BC0  1196               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9864  001BC2  1197               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  9865  001BC4  A4D8               	btfss	status,2,c
  9866  001BC6  D04C               	goto	l671
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  9870  001BC8  C071  FFD9         	movff	f_lseek@fp,fsr2l
  9871  001BCC  C072  FFDA         	movff	f_lseek@fp+1,fsr2h
  9872  001BD0  CFDE F057          	movff	postinc2,create_chain@fs
  9873  001BD4  CFDD F058          	movff	postdec2,create_chain@fs+1
  9874  001BD8  0E00               	movlw	0
  9875  001BDA  6E59               	movwf	create_chain@clst,c
  9876  001BDC  0E00               	movlw	0
  9877  001BDE  6E5A               	movwf	create_chain@clst+1,c
  9878  001BE0  0E00               	movlw	0
  9879  001BE2  6E5B               	movwf	create_chain@clst+2,c
  9880  001BE4  0E00               	movlw	0
  9881  001BE6  6E5C               	movwf	create_chain@clst+3,c
  9882  001BE8  EC57  F01B         	call	_create_chain	;wreg free
  9883  001BEC  C057  F094         	movff	?_create_chain,f_lseek@clst
  9884  001BF0  C058  F095         	movff	?_create_chain+1,f_lseek@clst+1
  9885  001BF4  C059  F096         	movff	?_create_chain+2,f_lseek@clst+2
  9886  001BF8  C05A  F097         	movff	?_create_chain+3,f_lseek@clst+3
  9887                           
  9888                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  9889  001BFC  0100               	movlb	0	; () banked
  9890  001BFE  0594               	decf	f_lseek@clst& (0+255),w,b
  9891  001C00  1195               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9892  001C02  1196               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9893  001C04  1197               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  9894  001C06  A4D8               	btfss	status,2,c
  9895  001C08  D00A               	goto	l6822
  9896  001C0A                     u9440:
  9897                           
  9898                           ; BSR set to: 0
  9899  001C0A  EE20 F005          	lfsr	2,5
  9900  001C0E  5171               	movf	f_lseek@fp& (0+255),w,b
  9901  001C10  26D9               	addwf	fsr2l,f,c
  9902  001C12  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9903  001C14  22DA               	addwfc	fsr2h,f,c
  9904  001C16  0E02               	movlw	2
  9905  001C18  6EDF               	movwf	indf2,c
  9906                           
  9907                           ; BSR set to: 0
  9908  001C1A  0E02               	movlw	2
  9909  001C1C  0012               	return	
  9910  001C1E                     l6822:
  9911                           
  9912                           ; BSR set to: 0
  9913                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  9914  001C1E  2994               	incf	f_lseek@clst& (0+255),w,b
  9915  001C20  E111               	bnz	l6830
  9916  001C22  2995               	incf	(f_lseek@clst+1)& (0+255),w,b
  9917  001C24  E10F               	bnz	l6830
  9918  001C26  2996               	incf	(f_lseek@clst+2)& (0+255),w,b
  9919  001C28  E10D               	bnz	l6830
  9920  001C2A  2997               	incf	(f_lseek@clst+3)& (0+255),w,b
  9921  001C2C  A4D8               	btfss	status,2,c
  9922  001C2E  D00A               	goto	l6830
  9923  001C30                     u9450:
  9924                           
  9925                           ; BSR set to: 0
  9926  001C30  EE20 F005          	lfsr	2,5
  9927  001C34  5171               	movf	f_lseek@fp& (0+255),w,b
  9928  001C36  26D9               	addwf	fsr2l,f,c
  9929  001C38  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9930  001C3A  22DA               	addwfc	fsr2h,f,c
  9931  001C3C  0E01               	movlw	1
  9932  001C3E  6EDF               	movwf	indf2,c
  9933                           
  9934                           ; BSR set to: 0
  9935  001C40  0E01               	movlw	1
  9936  001C42  0012               	return	
  9937  001C44                     l6830:
  9938                           
  9939                           ; BSR set to: 0
  9940                           ;ff.c: 3129:      fp->sclust = clst;
  9941  001C44  EE20 F00E          	lfsr	2,14
  9942  001C48  5171               	movf	f_lseek@fp& (0+255),w,b
  9943  001C4A  26D9               	addwf	fsr2l,f,c
  9944  001C4C  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9945  001C4E  22DA               	addwfc	fsr2h,f,c
  9946  001C50  C094  FFDE         	movff	f_lseek@clst,postinc2
  9947  001C54  C095  FFDE         	movff	f_lseek@clst+1,postinc2
  9948  001C58  C096  FFDE         	movff	f_lseek@clst+2,postinc2
  9949  001C5C  C097  FFDE         	movff	f_lseek@clst+3,postinc2
  9950  001C60                     l671:
  9951                           
  9952                           ; BSR set to: 0
  9953                           ;ff.c: 3132:     fp->clust = clst;
  9954  001C60  EE20 F012          	lfsr	2,18
  9955  001C64  5171               	movf	f_lseek@fp& (0+255),w,b
  9956  001C66  26D9               	addwf	fsr2l,f,c
  9957  001C68  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9958  001C6A  22DA               	addwfc	fsr2h,f,c
  9959  001C6C  C094  FFDE         	movff	f_lseek@clst,postinc2
  9960  001C70  C095  FFDE         	movff	f_lseek@clst+1,postinc2
  9961  001C74  C096  FFDE         	movff	f_lseek@clst+2,postinc2
  9962  001C78  C097  FFDE         	movff	f_lseek@clst+3,postinc2
  9963  001C7C                     l6832:
  9964                           
  9965                           ; BSR set to: 0
  9966                           ;ff.c: 3134:    if (clst != 0) {
  9967  001C7C  5194               	movf	f_lseek@clst& (0+255),w,b
  9968  001C7E  1195               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9969  001C80  1196               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9970  001C82  1197               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  9971  001C84  A4D8               	btfss	status,2,c
  9972  001C86  D097               	goto	l6868
  9973  001C88  D0FA               	goto	l6886
  9974  001C8A                     l6836:
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  9978  001C8A  EE20 F004          	lfsr	2,4
  9979  001C8E  5171               	movf	f_lseek@fp& (0+255),w,b
  9980  001C90  26D9               	addwf	fsr2l,f,c
  9981  001C92  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
  9982  001C94  22DA               	addwfc	fsr2h,f,c
  9983  001C96  A2DF               	btfss	indf2,1,c
  9984  001C98  D02A               	goto	l6844
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  9988  001C9A  C071  FFD9         	movff	f_lseek@fp,fsr2l
  9989  001C9E  C072  FFDA         	movff	f_lseek@fp+1,fsr2h
  9990  001CA2  CFDE F057          	movff	postinc2,create_chain@fs
  9991  001CA6  CFDD F058          	movff	postdec2,create_chain@fs+1
  9992  001CAA  C094  F059         	movff	f_lseek@clst,create_chain@clst
  9993  001CAE  C095  F05A         	movff	f_lseek@clst+1,create_chain@clst+1
  9994  001CB2  C096  F05B         	movff	f_lseek@clst+2,create_chain@clst+2
  9995  001CB6  C097  F05C         	movff	f_lseek@clst+3,create_chain@clst+3
  9996  001CBA  EC57  F01B         	call	_create_chain	;wreg free
  9997  001CBE  C057  F094         	movff	?_create_chain,f_lseek@clst
  9998  001CC2  C058  F095         	movff	?_create_chain+1,f_lseek@clst+1
  9999  001CC6  C059  F096         	movff	?_create_chain+2,f_lseek@clst+2
 10000  001CCA  C05A  F097         	movff	?_create_chain+3,f_lseek@clst+3
 10001                           
 10002                           ;ff.c: 3139:       if (clst == 0) {
 10003  001CCE  0100               	movlb	0	; () banked
 10004  001CD0  5194               	movf	f_lseek@clst& (0+255),w,b
 10005  001CD2  1195               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10006  001CD4  1196               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10007  001CD6  1197               	iorwf	(f_lseek@clst+3)& (0+255),w,b
 10008  001CD8  A4D8               	btfss	status,2,c
 10009  001CDA  D023               	goto	l6846
 10010                           
 10011                           ; BSR set to: 0
 10012                           ;ff.c: 3140:        ofs = bcs; break;
 10013  001CDC  C090  F073         	movff	f_lseek@bcs,f_lseek@ofs
 10014  001CE0  C091  F074         	movff	f_lseek@bcs+1,f_lseek@ofs+1
 10015  001CE4  C092  F075         	movff	f_lseek@bcs+2,f_lseek@ofs+2
 10016  001CE8  C093  F076         	movff	f_lseek@bcs+3,f_lseek@ofs+3
 10017  001CEC  D06E               	goto	u9520
 10018  001CEE                     l6844:
 10019                           
 10020                           ; BSR set to: 0
 10021                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
 10022  001CEE  C071  FFD9         	movff	f_lseek@fp,fsr2l
 10023  001CF2  C072  FFDA         	movff	f_lseek@fp+1,fsr2h
 10024  001CF6  CFDE F03C          	movff	postinc2,get_fat@fs
 10025  001CFA  CFDD F03D          	movff	postdec2,get_fat@fs+1
 10026  001CFE  C094  F03E         	movff	f_lseek@clst,get_fat@clst
 10027  001D02  C095  F03F         	movff	f_lseek@clst+1,get_fat@clst+1
 10028  001D06  C096  F040         	movff	f_lseek@clst+2,get_fat@clst+2
 10029  001D0A  C097  F041         	movff	f_lseek@clst+3,get_fat@clst+3
 10030  001D0E  EC12  F016         	call	_get_fat	;wreg free
 10031  001D12  C03C  F094         	movff	?_get_fat,f_lseek@clst
 10032  001D16  C03D  F095         	movff	?_get_fat+1,f_lseek@clst+1
 10033  001D1A  C03E  F096         	movff	?_get_fat+2,f_lseek@clst+2
 10034  001D1E  C03F  F097         	movff	?_get_fat+3,f_lseek@clst+3
 10035  001D22                     l6846:
 10036                           
 10037                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
 10038  001D22  0100               	movlb	0	; () banked
 10039  001D24  2994               	incf	f_lseek@clst& (0+255),w,b
 10040  001D26  E107               	bnz	l6854
 10041  001D28  2995               	incf	(f_lseek@clst+1)& (0+255),w,b
 10042  001D2A  E105               	bnz	l6854
 10043  001D2C  2996               	incf	(f_lseek@clst+2)& (0+255),w,b
 10044  001D2E  E103               	bnz	l6854
 10045  001D30  2997               	incf	(f_lseek@clst+3)& (0+255),w,b
 10046  001D32  B4D8               	btfsc	status,2,c
 10047  001D34  D77D               	goto	u9450
 10048  001D36                     l6854:
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
 10052  001D36  5197               	movf	(f_lseek@clst+3)& (0+255),w,b
 10053  001D38  1196               	iorwf	(f_lseek@clst+2)& (0+255),w,b
 10054  001D3A  1195               	iorwf	(f_lseek@clst+1)& (0+255),w,b
 10055  001D3C  E104               	bnz	u9500
 10056  001D3E  0E02               	movlw	2
 10057  001D40  5D94               	subwf	f_lseek@clst& (0+255),w,b
 10058  001D42  A0D8               	btfss	status,0,c
 10059  001D44  D762               	goto	u9440
 10060  001D46                     u9500:
 10061                           
 10062                           ; BSR set to: 0
 10063  001D46  C071  FFD9         	movff	f_lseek@fp,fsr2l
 10064  001D4A  C072  FFDA         	movff	f_lseek@fp+1,fsr2h
 10065  001D4E  EE10 F012          	lfsr	1,18
 10066  001D52  50DE               	movf	postinc2,w,c
 10067  001D54  26E1               	addwf	fsr1l,f,c
 10068  001D56  50DD               	movf	postdec2,w,c
 10069  001D58  22E2               	addwfc	fsr1h,f,c
 10070  001D5A  50E6               	movf	postinc1,w,c
 10071  001D5C  5D94               	subwf	f_lseek@clst& (0+255),w,b
 10072  001D5E  50E6               	movf	postinc1,w,c
 10073  001D60  5995               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 10074  001D62  50E6               	movf	postinc1,w,c
 10075  001D64  5996               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 10076  001D66  50E6               	movf	postinc1,w,c
 10077  001D68  5997               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 10078  001D6A  B0D8               	btfsc	status,0,c
 10079  001D6C  D74E               	goto	u9440
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;ff.c: 3147:      fp->clust = clst;
 10083                           
 10084                           ; BSR set to: 0
 10085  001D6E  EE20 F012          	lfsr	2,18
 10086  001D72  5171               	movf	f_lseek@fp& (0+255),w,b
 10087  001D74  26D9               	addwf	fsr2l,f,c
 10088  001D76  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10089  001D78  22DA               	addwfc	fsr2h,f,c
 10090  001D7A  C094  FFDE         	movff	f_lseek@clst,postinc2
 10091  001D7E  C095  FFDE         	movff	f_lseek@clst+1,postinc2
 10092  001D82  C096  FFDE         	movff	f_lseek@clst+2,postinc2
 10093  001D86  C097  FFDE         	movff	f_lseek@clst+3,postinc2
 10094                           
 10095                           ;ff.c: 3148:      fp->fptr += bcs;
 10096  001D8A  EE20 F006          	lfsr	2,6
 10097  001D8E  5171               	movf	f_lseek@fp& (0+255),w,b
 10098  001D90  26D9               	addwf	fsr2l,f,c
 10099  001D92  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10100  001D94  22DA               	addwfc	fsr2h,f,c
 10101  001D96  5190               	movf	f_lseek@bcs& (0+255),w,b
 10102  001D98  26DE               	addwf	postinc2,f,c
 10103  001D9A  5191               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10104  001D9C  22DE               	addwfc	postinc2,f,c
 10105  001D9E  5192               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10106  001DA0  22DE               	addwfc	postinc2,f,c
 10107  001DA2  5193               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10108  001DA4  22DE               	addwfc	postinc2,f,c
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;ff.c: 3149:      ofs -= bcs;
 10112  001DA6  5190               	movf	f_lseek@bcs& (0+255),w,b
 10113  001DA8  5F73               	subwf	f_lseek@ofs& (0+255),f,b
 10114  001DAA  5191               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10115  001DAC  5B74               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10116  001DAE  5192               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10117  001DB0  5B75               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10118  001DB2  5193               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10119  001DB4  5B76               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10120  001DB6                     l6868:
 10121                           
 10122                           ; BSR set to: 0
 10123                           ;ff.c: 3135:     while (ofs > bcs) {
 10124  001DB6  5173               	movf	f_lseek@ofs& (0+255),w,b
 10125  001DB8  5D90               	subwf	f_lseek@bcs& (0+255),w,b
 10126  001DBA  5174               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10127  001DBC  5991               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 10128  001DBE  5175               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10129  001DC0  5992               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 10130  001DC2  5176               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10131  001DC4  5993               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 10132  001DC6  A0D8               	btfss	status,0,c
 10133  001DC8  D760               	goto	l6836
 10134  001DCA                     u9520:
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;ff.c: 3151:     fp->fptr += ofs;
 10138  001DCA  EE20 F006          	lfsr	2,6
 10139  001DCE  5171               	movf	f_lseek@fp& (0+255),w,b
 10140  001DD0  26D9               	addwf	fsr2l,f,c
 10141  001DD2  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10142  001DD4  22DA               	addwfc	fsr2h,f,c
 10143  001DD6  5173               	movf	f_lseek@ofs& (0+255),w,b
 10144  001DD8  26DE               	addwf	postinc2,f,c
 10145  001DDA  5174               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10146  001DDC  22DE               	addwfc	postinc2,f,c
 10147  001DDE  5175               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10148  001DE0  22DE               	addwfc	postinc2,f,c
 10149  001DE2  5176               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10150  001DE4  22DE               	addwfc	postinc2,f,c
 10151                           
 10152                           ; BSR set to: 0
 10153                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
 10154  001DE6  0EFF               	movlw	255
 10155  001DE8  1573               	andwf	f_lseek@ofs& (0+255),w,b
 10156  001DEA  6F77               	movwf	??_f_lseek& (0+255),b
 10157  001DEC  0E01               	movlw	1
 10158  001DEE  1574               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 10159  001DF0  6F78               	movwf	(??_f_lseek+1)& (0+255),b
 10160  001DF2  0E00               	movlw	0
 10161  001DF4  1575               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 10162  001DF6  6F79               	movwf	(??_f_lseek+2)& (0+255),b
 10163  001DF8  0E00               	movlw	0
 10164  001DFA  1576               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 10165  001DFC  6F7A               	movwf	(??_f_lseek+3)& (0+255),b
 10166  001DFE  5177               	movf	??_f_lseek& (0+255),w,b
 10167  001E00  1178               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10168  001E02  1179               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10169  001E04  117A               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10170  001E06  B4D8               	btfsc	status,2,c
 10171  001E08  D03A               	goto	l6886
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
 10175  001E0A  C071  FFD9         	movff	f_lseek@fp,fsr2l
 10176  001E0E  C072  FFDA         	movff	f_lseek@fp+1,fsr2h
 10177  001E12  CFDE F00D          	movff	postinc2,clust2sect@fs
 10178  001E16  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 10179  001E1A  C094  F00F         	movff	f_lseek@clst,clust2sect@clst
 10180  001E1E  C095  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 10181  001E22  C096  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 10182  001E26  C097  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 10183  001E2A  ECD2  F02A         	call	_clust2sect	;wreg free
 10184  001E2E  C00D  F08C         	movff	?_clust2sect,f_lseek@nsect
 10185  001E32  C00E  F08D         	movff	?_clust2sect+1,f_lseek@nsect+1
 10186  001E36  C00F  F08E         	movff	?_clust2sect+2,f_lseek@nsect+2
 10187  001E3A  C010  F08F         	movff	?_clust2sect+3,f_lseek@nsect+3
 10188                           
 10189                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10190  001E3E  0100               	movlb	0	; () banked
 10191  001E40  518C               	movf	f_lseek@nsect& (0+255),w,b
 10192  001E42  118D               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 10193  001E44  118E               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 10194  001E46  118F               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 10195  001E48  B4D8               	btfsc	status,2,c
 10196  001E4A  D6DF               	goto	u9440
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
 10200                           
 10201                           ; BSR set to: 0
 10202  001E4C  C073  F077         	movff	f_lseek@ofs,??_f_lseek
 10203  001E50  C074  F078         	movff	f_lseek@ofs+1,??_f_lseek+1
 10204  001E54  C075  F079         	movff	f_lseek@ofs+2,??_f_lseek+2
 10205  001E58  C076  F07A         	movff	f_lseek@ofs+3,??_f_lseek+3
 10206  001E5C  0E0A               	movlw	10
 10207  001E5E  D005               	goto	u9550
 10208  001E60                     u9555:
 10209  001E60  90D8               	bcf	status,0,c
 10210  001E62  337A               	rrcf	(??_f_lseek+3)& (0+255),f,b
 10211  001E64  3379               	rrcf	(??_f_lseek+2)& (0+255),f,b
 10212  001E66  3378               	rrcf	(??_f_lseek+1)& (0+255),f,b
 10213  001E68  3377               	rrcf	??_f_lseek& (0+255),f,b
 10214  001E6A                     u9550:
 10215  001E6A  2EE8               	decfsz	wreg,f,c
 10216  001E6C  D7F9               	goto	u9555
 10217  001E6E  5177               	movf	??_f_lseek& (0+255),w,b
 10218  001E70  278C               	addwf	f_lseek@nsect& (0+255),f,b
 10219  001E72  5178               	movf	(??_f_lseek+1)& (0+255),w,b
 10220  001E74  238D               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 10221  001E76  5179               	movf	(??_f_lseek+2)& (0+255),w,b
 10222  001E78  238E               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 10223  001E7A  517A               	movf	(??_f_lseek+3)& (0+255),w,b
 10224  001E7C  238F               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 10225  001E7E                     l6886:
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 10229  001E7E  EE20 F006          	lfsr	2,6
 10230  001E82  5171               	movf	f_lseek@fp& (0+255),w,b
 10231  001E84  26D9               	addwf	fsr2l,f,c
 10232  001E86  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10233  001E88  22DA               	addwfc	fsr2h,f,c
 10234  001E8A  0EFF               	movlw	255
 10235  001E8C  14DE               	andwf	postinc2,w,c
 10236  001E8E  6F77               	movwf	??_f_lseek& (0+255),b
 10237  001E90  0E01               	movlw	1
 10238  001E92  14DE               	andwf	postinc2,w,c
 10239  001E94  6F78               	movwf	(??_f_lseek+1)& (0+255),b
 10240  001E96  0E00               	movlw	0
 10241  001E98  14DE               	andwf	postinc2,w,c
 10242  001E9A  6F79               	movwf	(??_f_lseek+2)& (0+255),b
 10243  001E9C  0E00               	movlw	0
 10244  001E9E  14DE               	andwf	postinc2,w,c
 10245  001EA0  6F7A               	movwf	(??_f_lseek+3)& (0+255),b
 10246  001EA2  5177               	movf	??_f_lseek& (0+255),w,b
 10247  001EA4  1178               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10248  001EA6  1179               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10249  001EA8  117A               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10250  001EAA  B4D8               	btfsc	status,2,c
 10251  001EAC  D021               	goto	l6892
 10252                           
 10253                           ; BSR set to: 0
 10254  001EAE  EE20 F016          	lfsr	2,22
 10255  001EB2  5171               	movf	f_lseek@fp& (0+255),w,b
 10256  001EB4  26D9               	addwf	fsr2l,f,c
 10257  001EB6  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10258  001EB8  22DA               	addwfc	fsr2h,f,c
 10259  001EBA  518C               	movf	f_lseek@nsect& (0+255),w,b
 10260  001EBC  18DE               	xorwf	postinc2,w,c
 10261  001EBE  E10A               	bnz	u9570
 10262  001EC0  518D               	movf	(f_lseek@nsect+1)& (0+255),w,b
 10263  001EC2  18DE               	xorwf	postinc2,w,c
 10264  001EC4  E107               	bnz	u9570
 10265  001EC6  518E               	movf	(f_lseek@nsect+2)& (0+255),w,b
 10266  001EC8  18DE               	xorwf	postinc2,w,c
 10267  001ECA  E104               	bnz	u9570
 10268  001ECC  518F               	movf	(f_lseek@nsect+3)& (0+255),w,b
 10269  001ECE  18DE               	xorwf	postinc2,w,c
 10270  001ED0  B4D8               	btfsc	status,2,c
 10271  001ED2  D00E               	goto	l6892
 10272  001ED4                     u9570:
 10273                           
 10274                           ; BSR set to: 0
 10275                           ;ff.c: 3171:    fp->dsect = nsect;
 10276  001ED4  EE20 F016          	lfsr	2,22
 10277  001ED8  5171               	movf	f_lseek@fp& (0+255),w,b
 10278  001EDA  26D9               	addwf	fsr2l,f,c
 10279  001EDC  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10280  001EDE  22DA               	addwfc	fsr2h,f,c
 10281  001EE0  C08C  FFDE         	movff	f_lseek@nsect,postinc2
 10282  001EE4  C08D  FFDE         	movff	f_lseek@nsect+1,postinc2
 10283  001EE8  C08E  FFDE         	movff	f_lseek@nsect+2,postinc2
 10284  001EEC  C08F  FFDE         	movff	f_lseek@nsect+3,postinc2
 10285  001EF0                     l6892:
 10286                           
 10287                           ; BSR set to: 0
 10288                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
 10289  001EF0  EE20 F006          	lfsr	2,6
 10290  001EF4  5171               	movf	f_lseek@fp& (0+255),w,b
 10291  001EF6  26D9               	addwf	fsr2l,f,c
 10292  001EF8  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10293  001EFA  22DA               	addwfc	fsr2h,f,c
 10294  001EFC  EE10 F00A          	lfsr	1,10
 10295  001F00  5171               	movf	f_lseek@fp& (0+255),w,b
 10296  001F02  26E1               	addwf	fsr1l,f,c
 10297  001F04  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10298  001F06  22E2               	addwfc	fsr1h,f,c
 10299  001F08  50DE               	movf	postinc2,w,c
 10300  001F0A  5CE6               	subwf	postinc1,w,c
 10301  001F0C  50DE               	movf	postinc2,w,c
 10302  001F0E  58E6               	subwfb	postinc1,w,c
 10303  001F10  50DE               	movf	postinc2,w,c
 10304  001F12  58E6               	subwfb	postinc1,w,c
 10305  001F14  50DE               	movf	postinc2,w,c
 10306  001F16  58E6               	subwfb	postinc1,w,c
 10307  001F18  B0D8               	btfsc	status,0,c
 10308  001F1A  D521               	goto	u9350
 10309                           
 10310                           ; BSR set to: 0
 10311                           ;ff.c: 3175:    fp->fsize = fp->fptr;
 10312  001F1C  EE20 F006          	lfsr	2,6
 10313  001F20  5171               	movf	f_lseek@fp& (0+255),w,b
 10314  001F22  26D9               	addwf	fsr2l,f,c
 10315  001F24  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10316  001F26  22DA               	addwfc	fsr2h,f,c
 10317  001F28  EE10 F00A          	lfsr	1,10
 10318  001F2C  5171               	movf	f_lseek@fp& (0+255),w,b
 10319  001F2E  26E1               	addwf	fsr1l,f,c
 10320  001F30  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10321  001F32  22E2               	addwfc	fsr1h,f,c
 10322  001F34  CFDE FFE6          	movff	postinc2,postinc1
 10323  001F38  CFDE FFE6          	movff	postinc2,postinc1
 10324  001F3C  CFDE FFE6          	movff	postinc2,postinc1
 10325  001F40  CFDE FFE6          	movff	postinc2,postinc1
 10326                           
 10327                           ; BSR set to: 0
 10328                           ;ff.c: 3176:    fp->flag |= 0x20;
 10329  001F44  EE20 F004          	lfsr	2,4
 10330  001F48  5171               	movf	f_lseek@fp& (0+255),w,b
 10331  001F4A  26D9               	addwf	fsr2l,f,c
 10332  001F4C  5172               	movf	(f_lseek@fp+1)& (0+255),w,b
 10333  001F4E  22DA               	addwfc	fsr2h,f,c
 10334  001F50  0E00               	movlw	0
 10335  001F52  8ADB               	bsf	plusw2,5,c
 10336  001F54  D504               	goto	u9350
 10337  001F56                     __end_of_f_lseek:
 10338                           	opt callstack 0
 10339                           
 10340 ;; *************** function _create_chain *****************
 10341 ;; Defined at:
 10342 ;;		line 990 in file "ff.c"
 10343 ;; Parameters:    Size  Location     Type
 10344 ;;  fs              2   86[COMRAM] PTR struct .
 10345 ;;		 -> FatFs(558), NULL(0), 
 10346 ;;  clst            4   88[COMRAM] unsigned long 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;  cs              4   13[BANK0 ] unsigned long 
 10349 ;;  ncl             4    9[BANK0 ] unsigned long 
 10350 ;;  scl             4    5[BANK0 ] unsigned long 
 10351 ;;  res             1    4[BANK0 ] enum E93
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  4   86[COMRAM] unsigned long 
 10354 ;; Registers used:
 10355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10361 ;;      Params:         6       0       0       0       0       0       0       0       0
 10362 ;;      Locals:         0      13       0       0       0       0       0       0       0
 10363 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10364 ;;      Totals:         6      17       0       0       0       0       0       0       0
 10365 ;;Total ram usage:       23 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    9
 10368 ;; This function calls:
 10369 ;;		_get_fat
 10370 ;;		_put_fat
 10371 ;; This function is called by:
 10372 ;;		_dir_next
 10373 ;;		_f_write
 10374 ;;		_f_lseek
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text28
 10379  0036AE                     __ptext28:
 10380                           	opt callstack 0
 10381  0036AE                     _create_chain:
 10382                           	opt callstack 18
 10383                           
 10384                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;incstack = 0
 10388  0036AE  5059               	movf	create_chain@clst,w,c
 10389  0036B0  105A               	iorwf	create_chain@clst+1,w,c
 10390  0036B2  105B               	iorwf	create_chain@clst+2,w,c
 10391  0036B4  105C               	iorwf	create_chain@clst+3,w,c
 10392  0036B6  A4D8               	btfss	status,2,c
 10393  0036B8  D02E               	goto	l4858
 10394                           
 10395                           ;ff.c: 1000:   scl = fs->last_clust;
 10396  0036BA  EE20 F00A          	lfsr	2,10
 10397  0036BE  5057               	movf	create_chain@fs,w,c
 10398  0036C0  26D9               	addwf	fsr2l,f,c
 10399  0036C2  5058               	movf	create_chain@fs+1,w,c
 10400  0036C4  22DA               	addwfc	fsr2h,f,c
 10401  0036C6  CFDE F065          	movff	postinc2,create_chain@scl
 10402  0036CA  CFDE F066          	movff	postinc2,create_chain@scl+1
 10403  0036CE  CFDE F067          	movff	postinc2,create_chain@scl+2
 10404  0036D2  CFDE F068          	movff	postinc2,create_chain@scl+3
 10405                           
 10406                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
 10407  0036D6  0100               	movlb	0	; () banked
 10408  0036D8  5165               	movf	create_chain@scl& (0+255),w,b
 10409  0036DA  1166               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10410  0036DC  1167               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10411  0036DE  1168               	iorwf	(create_chain@scl+3)& (0+255),w,b
 10412  0036E0  B4D8               	btfsc	status,2,c
 10413  0036E2  D010               	goto	u5870
 10414                           
 10415                           ; BSR set to: 0
 10416  0036E4  EE20 F012          	lfsr	2,18
 10417  0036E8  5057               	movf	create_chain@fs,w,c
 10418  0036EA  26D9               	addwf	fsr2l,f,c
 10419  0036EC  5058               	movf	create_chain@fs+1,w,c
 10420  0036EE  22DA               	addwfc	fsr2h,f,c
 10421  0036F0  50DE               	movf	postinc2,w,c
 10422  0036F2  5D65               	subwf	create_chain@scl& (0+255),w,b
 10423  0036F4  50DE               	movf	postinc2,w,c
 10424  0036F6  5966               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10425  0036F8  50DE               	movf	postinc2,w,c
 10426  0036FA  5967               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10427  0036FC  50DE               	movf	postinc2,w,c
 10428  0036FE  5968               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10429  003700  A0D8               	btfss	status,0,c
 10430  003702  D05B               	goto	l317
 10431  003704                     u5870:
 10432                           
 10433                           ; BSR set to: 0
 10434  003704  0E01               	movlw	1
 10435  003706  6F65               	movwf	create_chain@scl& (0+255),b
 10436  003708  0E00               	movlw	0
 10437  00370A  6F66               	movwf	(create_chain@scl+1)& (0+255),b
 10438  00370C  0E00               	movlw	0
 10439  00370E  6F67               	movwf	(create_chain@scl+2)& (0+255),b
 10440  003710  0E00               	movlw	0
 10441  003712  6F68               	movwf	(create_chain@scl+3)& (0+255),b
 10442  003714  D052               	goto	l317
 10443  003716                     l4858:
 10444                           
 10445                           ;ff.c: 1004:   cs = get_fat(fs, clst);
 10446  003716  C057  F03C         	movff	create_chain@fs,get_fat@fs
 10447  00371A  C058  F03D         	movff	create_chain@fs+1,get_fat@fs+1
 10448  00371E  C059  F03E         	movff	create_chain@clst,get_fat@clst
 10449  003722  C05A  F03F         	movff	create_chain@clst+1,get_fat@clst+1
 10450  003726  C05B  F040         	movff	create_chain@clst+2,get_fat@clst+2
 10451  00372A  C05C  F041         	movff	create_chain@clst+3,get_fat@clst+3
 10452  00372E  EC12  F016         	call	_get_fat	;wreg free
 10453  003732  C03C  F06D         	movff	?_get_fat,create_chain@cs
 10454  003736  C03D  F06E         	movff	?_get_fat+1,create_chain@cs+1
 10455  00373A  C03E  F06F         	movff	?_get_fat+2,create_chain@cs+2
 10456  00373E  C03F  F070         	movff	?_get_fat+3,create_chain@cs+3
 10457                           
 10458                           ;ff.c: 1005:   if (cs < 2) return 1;
 10459  003742  0100               	movlb	0	; () banked
 10460  003744  5170               	movf	(create_chain@cs+3)& (0+255),w,b
 10461  003746  116F               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10462  003748  116E               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10463  00374A  E10D               	bnz	l4866
 10464  00374C  0E02               	movlw	2
 10465  00374E  5D6D               	subwf	create_chain@cs& (0+255),w,b
 10466  003750  B0D8               	btfsc	status,0,c
 10467  003752  D009               	goto	l4866
 10468                           
 10469                           ; BSR set to: 0
 10470  003754  0E01               	movlw	1
 10471  003756  6E57               	movwf	?_create_chain,c
 10472  003758  0E00               	movlw	0
 10473  00375A  6E58               	movwf	?_create_chain+1,c
 10474  00375C  0E00               	movlw	0
 10475  00375E  6E59               	movwf	?_create_chain+2,c
 10476  003760  0E00               	movlw	0
 10477  003762  6E5A               	movwf	?_create_chain+3,c
 10478  003764  0012               	return	
 10479  003766                     l4866:
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
 10483  003766  296D               	incf	create_chain@cs& (0+255),w,b
 10484  003768  E110               	bnz	l4870
 10485  00376A  296E               	incf	(create_chain@cs+1)& (0+255),w,b
 10486  00376C  E10E               	bnz	l4870
 10487  00376E  296F               	incf	(create_chain@cs+2)& (0+255),w,b
 10488  003770  E10C               	bnz	l4870
 10489  003772  2970               	incf	(create_chain@cs+3)& (0+255),w,b
 10490  003774  A4D8               	btfss	status,2,c
 10491  003776  D009               	goto	l4870
 10492  003778                     u5890:
 10493                           
 10494                           ; BSR set to: 0
 10495  003778  C06D  F057         	movff	create_chain@cs,?_create_chain
 10496  00377C  C06E  F058         	movff	create_chain@cs+1,?_create_chain+1
 10497  003780  C06F  F059         	movff	create_chain@cs+2,?_create_chain+2
 10498  003784  C070  F05A         	movff	create_chain@cs+3,?_create_chain+3
 10499  003788  0012               	return	
 10500  00378A                     l4870:
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
 10504  00378A  EE20 F012          	lfsr	2,18
 10505  00378E  5057               	movf	create_chain@fs,w,c
 10506  003790  26D9               	addwf	fsr2l,f,c
 10507  003792  5058               	movf	create_chain@fs+1,w,c
 10508  003794  22DA               	addwfc	fsr2h,f,c
 10509  003796  50DE               	movf	postinc2,w,c
 10510  003798  5D6D               	subwf	create_chain@cs& (0+255),w,b
 10511  00379A  50DE               	movf	postinc2,w,c
 10512  00379C  596E               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10513  00379E  50DE               	movf	postinc2,w,c
 10514  0037A0  596F               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10515  0037A2  50DE               	movf	postinc2,w,c
 10516  0037A4  5970               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10517  0037A6  A0D8               	btfss	status,0,c
 10518  0037A8  D7E7               	goto	u5890
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;ff.c: 1008:   scl = clst;
 10522  0037AA  C059  F065         	movff	create_chain@clst,create_chain@scl
 10523  0037AE  C05A  F066         	movff	create_chain@clst+1,create_chain@scl+1
 10524  0037B2  C05B  F067         	movff	create_chain@clst+2,create_chain@scl+2
 10525  0037B6  C05C  F068         	movff	create_chain@clst+3,create_chain@scl+3
 10526  0037BA                     l317:
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;ff.c: 1011:  ncl = scl;
 10530  0037BA  C065  F069         	movff	create_chain@scl,create_chain@ncl
 10531  0037BE  C066  F06A         	movff	create_chain@scl+1,create_chain@ncl+1
 10532  0037C2  C067  F06B         	movff	create_chain@scl+2,create_chain@ncl+2
 10533  0037C6  C068  F06C         	movff	create_chain@scl+3,create_chain@ncl+3
 10534  0037CA                     l4874:
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;ff.c: 1013:   ncl++;
 10538  0037CA  0E01               	movlw	1
 10539  0037CC  2769               	addwf	create_chain@ncl& (0+255),f,b
 10540  0037CE  0E00               	movlw	0
 10541  0037D0  236A               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 10542  0037D2  236B               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 10543  0037D4  236C               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
 10547  0037D6  EE20 F012          	lfsr	2,18
 10548  0037DA  5057               	movf	create_chain@fs,w,c
 10549  0037DC  26D9               	addwf	fsr2l,f,c
 10550  0037DE  5058               	movf	create_chain@fs+1,w,c
 10551  0037E0  22DA               	addwfc	fsr2h,f,c
 10552  0037E2  50DE               	movf	postinc2,w,c
 10553  0037E4  5D69               	subwf	create_chain@ncl& (0+255),w,b
 10554  0037E6  50DE               	movf	postinc2,w,c
 10555  0037E8  596A               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10556  0037EA  50DE               	movf	postinc2,w,c
 10557  0037EC  596B               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10558  0037EE  50DE               	movf	postinc2,w,c
 10559  0037F0  596C               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10560  0037F2  A0D8               	btfss	status,0,c
 10561  0037F4  D019               	goto	l4886
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;ff.c: 1015:    ncl = 2;
 10565  0037F6  0E02               	movlw	2
 10566  0037F8  6F69               	movwf	create_chain@ncl& (0+255),b
 10567  0037FA  0E00               	movlw	0
 10568  0037FC  6F6A               	movwf	(create_chain@ncl+1)& (0+255),b
 10569  0037FE  0E00               	movlw	0
 10570  003800  6F6B               	movwf	(create_chain@ncl+2)& (0+255),b
 10571  003802  0E00               	movlw	0
 10572  003804  6F6C               	movwf	(create_chain@ncl+3)& (0+255),b
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;ff.c: 1016:    if (ncl > scl) return 0;
 10576  003806  5168               	movf	(create_chain@scl+3)& (0+255),w,b
 10577  003808  1167               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10578  00380A  1166               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10579  00380C  E10D               	bnz	l4886
 10580  00380E  0E02               	movlw	2
 10581  003810  5D65               	subwf	create_chain@scl& (0+255),w,b
 10582  003812  B0D8               	btfsc	status,0,c
 10583  003814  D009               	goto	l4886
 10584  003816                     u5920:
 10585                           
 10586                           ; BSR set to: 0
 10587  003816  0E00               	movlw	0
 10588  003818  6E57               	movwf	?_create_chain,c
 10589  00381A  0E00               	movlw	0
 10590  00381C  6E58               	movwf	?_create_chain+1,c
 10591  00381E  0E00               	movlw	0
 10592  003820  6E59               	movwf	?_create_chain+2,c
 10593  003822  0E00               	movlw	0
 10594  003824  6E5A               	movwf	?_create_chain+3,c
 10595  003826  0012               	return	
 10596  003828                     l4886:
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
 10600  003828  C057  F03C         	movff	create_chain@fs,get_fat@fs
 10601  00382C  C058  F03D         	movff	create_chain@fs+1,get_fat@fs+1
 10602  003830  C069  F03E         	movff	create_chain@ncl,get_fat@clst
 10603  003834  C06A  F03F         	movff	create_chain@ncl+1,get_fat@clst+1
 10604  003838  C06B  F040         	movff	create_chain@ncl+2,get_fat@clst+2
 10605  00383C  C06C  F041         	movff	create_chain@ncl+3,get_fat@clst+3
 10606  003840  EC12  F016         	call	_get_fat	;wreg free
 10607  003844  C03C  F06D         	movff	?_get_fat,create_chain@cs
 10608  003848  C03D  F06E         	movff	?_get_fat+1,create_chain@cs+1
 10609  00384C  C03E  F06F         	movff	?_get_fat+2,create_chain@cs+2
 10610  003850  C03F  F070         	movff	?_get_fat+3,create_chain@cs+3
 10611                           
 10612                           ;ff.c: 1019:   if (cs == 0) break;
 10613  003854  0100               	movlb	0	; () banked
 10614  003856  516D               	movf	create_chain@cs& (0+255),w,b
 10615  003858  116E               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10616  00385A  116F               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10617  00385C  1170               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10618  00385E  B4D8               	btfsc	status,2,c
 10619  003860  D01D               	goto	l4902
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
 10623  003862  296D               	incf	create_chain@cs& (0+255),w,b
 10624  003864  E107               	bnz	u5940
 10625  003866  296E               	incf	(create_chain@cs+1)& (0+255),w,b
 10626  003868  E105               	bnz	u5940
 10627  00386A  296F               	incf	(create_chain@cs+2)& (0+255),w,b
 10628  00386C  E103               	bnz	u5940
 10629  00386E  2970               	incf	(create_chain@cs+3)& (0+255),w,b
 10630  003870  B4D8               	btfsc	status,2,c
 10631  003872  D782               	goto	u5890
 10632  003874                     u5940:
 10633                           
 10634                           ; BSR set to: 0
 10635  003874  056D               	decf	create_chain@cs& (0+255),w,b
 10636  003876  116E               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10637  003878  116F               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10638  00387A  1170               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10639  00387C  B4D8               	btfsc	status,2,c
 10640  00387E  D77C               	goto	u5890
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;ff.c: 1022:   if (ncl == scl) return 0;
 10644  003880  5165               	movf	create_chain@scl& (0+255),w,b
 10645  003882  1969               	xorwf	create_chain@ncl& (0+255),w,b
 10646  003884  E1A2               	bnz	l4874
 10647  003886  5166               	movf	(create_chain@scl+1)& (0+255),w,b
 10648  003888  196A               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 10649  00388A  E19F               	bnz	l4874
 10650  00388C  5167               	movf	(create_chain@scl+2)& (0+255),w,b
 10651  00388E  196B               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 10652  003890  E19C               	bnz	l4874
 10653  003892  5168               	movf	(create_chain@scl+3)& (0+255),w,b
 10654  003894  196C               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 10655  003896  B4D8               	btfsc	status,2,c
 10656  003898  D7BE               	goto	u5920
 10657  00389A  D797               	goto	l4874
 10658  00389C                     l4902:
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
 10662  00389C  C057  F03C         	movff	create_chain@fs,put_fat@fs
 10663  0038A0  C058  F03D         	movff	create_chain@fs+1,put_fat@fs+1
 10664  0038A4  C069  F03E         	movff	create_chain@ncl,put_fat@clst
 10665  0038A8  C06A  F03F         	movff	create_chain@ncl+1,put_fat@clst+1
 10666  0038AC  C06B  F040         	movff	create_chain@ncl+2,put_fat@clst+2
 10667  0038B0  C06C  F041         	movff	create_chain@ncl+3,put_fat@clst+3
 10668  0038B4  0EFF               	movlw	255
 10669  0038B6  6E42               	movwf	put_fat@val,c
 10670  0038B8  0EFF               	movlw	255
 10671  0038BA  6E43               	movwf	put_fat@val+1,c
 10672  0038BC  0EFF               	movlw	255
 10673  0038BE  6E44               	movwf	put_fat@val+2,c
 10674  0038C0  0E0F               	movlw	15
 10675  0038C2  6E45               	movwf	put_fat@val+3,c
 10676  0038C4  ECFA  F011         	call	_put_fat	;wreg free
 10677  0038C8  0100               	movlb	0	; () banked
 10678  0038CA  6F64               	movwf	create_chain@res& (0+255),b
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
 10682  0038CC  5164               	movf	create_chain@res& (0+255),w,b
 10683  0038CE  A4D8               	btfss	status,2,c
 10684  0038D0  D01E               	goto	l4910
 10685                           
 10686                           ; BSR set to: 0
 10687  0038D2  5059               	movf	create_chain@clst,w,c
 10688  0038D4  105A               	iorwf	create_chain@clst+1,w,c
 10689  0038D6  105B               	iorwf	create_chain@clst+2,w,c
 10690  0038D8  105C               	iorwf	create_chain@clst+3,w,c
 10691  0038DA  B4D8               	btfsc	status,2,c
 10692  0038DC  D018               	goto	l4910
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
 10696  0038DE  C057  F03C         	movff	create_chain@fs,put_fat@fs
 10697  0038E2  C058  F03D         	movff	create_chain@fs+1,put_fat@fs+1
 10698  0038E6  C059  F03E         	movff	create_chain@clst,put_fat@clst
 10699  0038EA  C05A  F03F         	movff	create_chain@clst+1,put_fat@clst+1
 10700  0038EE  C05B  F040         	movff	create_chain@clst+2,put_fat@clst+2
 10701  0038F2  C05C  F041         	movff	create_chain@clst+3,put_fat@clst+3
 10702  0038F6  C069  F042         	movff	create_chain@ncl,put_fat@val
 10703  0038FA  C06A  F043         	movff	create_chain@ncl+1,put_fat@val+1
 10704  0038FE  C06B  F044         	movff	create_chain@ncl+2,put_fat@val+2
 10705  003902  C06C  F045         	movff	create_chain@ncl+3,put_fat@val+3
 10706  003906  ECFA  F011         	call	_put_fat	;wreg free
 10707  00390A  0100               	movlb	0	; () banked
 10708  00390C  6F64               	movwf	create_chain@res& (0+255),b
 10709  00390E                     l4910:
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;ff.c: 1029:  if (res == FR_OK) {
 10713  00390E  5164               	movf	create_chain@res& (0+255),w,b
 10714  003910  A4D8               	btfss	status,2,c
 10715  003912  D031               	goto	l4916
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;ff.c: 1030:   fs->last_clust = ncl;
 10719  003914  EE20 F00A          	lfsr	2,10
 10720  003918  5057               	movf	create_chain@fs,w,c
 10721  00391A  26D9               	addwf	fsr2l,f,c
 10722  00391C  5058               	movf	create_chain@fs+1,w,c
 10723  00391E  22DA               	addwfc	fsr2h,f,c
 10724  003920  C069  FFDE         	movff	create_chain@ncl,postinc2
 10725  003924  C06A  FFDE         	movff	create_chain@ncl+1,postinc2
 10726  003928  C06B  FFDE         	movff	create_chain@ncl+2,postinc2
 10727  00392C  C06C  FFDE         	movff	create_chain@ncl+3,postinc2
 10728                           
 10729                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
 10730  003930  EE20 F00E          	lfsr	2,14
 10731  003934  5057               	movf	create_chain@fs,w,c
 10732  003936  26D9               	addwf	fsr2l,f,c
 10733  003938  5058               	movf	create_chain@fs+1,w,c
 10734  00393A  22DA               	addwfc	fsr2h,f,c
 10735  00393C  28DE               	incf	postinc2,w,c
 10736  00393E  E107               	bnz	u6000
 10737  003940  28DE               	incf	postinc2,w,c
 10738  003942  E105               	bnz	u6000
 10739  003944  28DE               	incf	postinc2,w,c
 10740  003946  E103               	bnz	u6000
 10741  003948  28DE               	incf	postinc2,w,c
 10742  00394A  B4D8               	btfsc	status,2,c
 10743  00394C  D024               	goto	l334
 10744  00394E                     u6000:
 10745                           
 10746                           ; BSR set to: 0
 10747                           ;ff.c: 1032:    fs->free_clust--;
 10748  00394E  EE20 F00E          	lfsr	2,14
 10749  003952  5057               	movf	create_chain@fs,w,c
 10750  003954  26D9               	addwf	fsr2l,f,c
 10751  003956  5058               	movf	create_chain@fs+1,w,c
 10752  003958  22DA               	addwfc	fsr2h,f,c
 10753  00395A  06DE               	decf	postinc2,f,c
 10754  00395C  0E00               	movlw	0
 10755  00395E  5ADE               	subwfb	postinc2,f,c
 10756  003960  5ADE               	subwfb	postinc2,f,c
 10757  003962  5ADE               	subwfb	postinc2,f,c
 10758                           
 10759                           ;ff.c: 1033:    fs->fsi_flag |= 1;
 10760  003964  EE20 F005          	lfsr	2,5
 10761  003968  5057               	movf	create_chain@fs,w,c
 10762  00396A  26D9               	addwf	fsr2l,f,c
 10763  00396C  5058               	movf	create_chain@fs+1,w,c
 10764  00396E  22DA               	addwfc	fsr2h,f,c
 10765  003970  0E00               	movlw	0
 10766  003972  80DB               	bsf	plusw2,0,c
 10767  003974  D010               	goto	l334
 10768  003976                     l4916:
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 10772  003976  0564               	decf	create_chain@res& (0+255),w,b
 10773  003978  B4D8               	btfsc	status,2,c
 10774  00397A  D009               	goto	l336
 10775                           
 10776                           ; BSR set to: 0
 10777  00397C  0E01               	movlw	1
 10778  00397E  6F69               	movwf	create_chain@ncl& (0+255),b
 10779  003980  0E00               	movlw	0
 10780  003982  6F6A               	movwf	(create_chain@ncl+1)& (0+255),b
 10781  003984  0E00               	movlw	0
 10782  003986  6F6B               	movwf	(create_chain@ncl+2)& (0+255),b
 10783  003988  0E00               	movlw	0
 10784  00398A  6F6C               	movwf	(create_chain@ncl+3)& (0+255),b
 10785  00398C  D004               	goto	l334
 10786  00398E                     l336:
 10787                           
 10788                           ; BSR set to: 0
 10789  00398E  6969               	setf	create_chain@ncl& (0+255),b
 10790  003990  696A               	setf	(create_chain@ncl+1)& (0+255),b
 10791  003992  696B               	setf	(create_chain@ncl+2)& (0+255),b
 10792  003994  696C               	setf	(create_chain@ncl+3)& (0+255),b
 10793  003996                     l334:
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;ff.c: 1039:  return ncl;
 10797  003996  C069  F057         	movff	create_chain@ncl,?_create_chain
 10798  00399A  C06A  F058         	movff	create_chain@ncl+1,?_create_chain+1
 10799  00399E  C06B  F059         	movff	create_chain@ncl+2,?_create_chain+2
 10800  0039A2  C06C  F05A         	movff	create_chain@ncl+3,?_create_chain+3
 10801                           
 10802                           ; BSR set to: 0
 10803  0039A6  0012               	return		;funcret
 10804  0039A8                     __end_of_create_chain:
 10805                           	opt callstack 0
 10806                           
 10807 ;; *************** function _put_fat *****************
 10808 ;; Defined at:
 10809 ;;		line 873 in file "ff.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;  fs              2   59[COMRAM] PTR struct .
 10812 ;;		 -> FatFs(558), NULL(0), 
 10813 ;;  clst            4   61[COMRAM] unsigned long 
 10814 ;;  val             4   65[COMRAM] unsigned long 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  p               2   84[COMRAM] PTR unsigned char 
 10817 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 10818 ;;  bc              2   81[COMRAM] unsigned short 
 10819 ;;  res             1   83[COMRAM] enum E93
 10820 ;; Return value:  Size  Location     Type
 10821 ;;                  1    wreg      enum E93
 10822 ;; Registers used:
 10823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10824 ;; Tracked objects:
 10825 ;;		On entry : 0/0
 10826 ;;		On exit  : 0/0
 10827 ;;		Unchanged: 0/0
 10828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10829 ;;      Params:        10       0       0       0       0       0       0       0       0
 10830 ;;      Locals:         9       0       0       0       0       0       0       0       0
 10831 ;;      Temps:          8       0       0       0       0       0       0       0       0
 10832 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10833 ;;Total ram usage:       27 bytes
 10834 ;; Hardware stack levels used:    1
 10835 ;; Hardware stack levels required when called:    8
 10836 ;; This function calls:
 10837 ;;		_move_window
 10838 ;; This function is called by:
 10839 ;;		_remove_chain
 10840 ;;		_create_chain
 10841 ;; This function uses a non-reentrant model
 10842 ;;
 10843                           
 10844                           	psect	text29
 10845  0023F4                     __ptext29:
 10846                           	opt callstack 0
 10847  0023F4                     _put_fat:
 10848                           	opt callstack 18
 10849                           
 10850                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;incstack = 0
 10854  0023F4  5041               	movf	put_fat@clst+3,w,c
 10855  0023F6  1040               	iorwf	put_fat@clst+2,w,c
 10856  0023F8  103F               	iorwf	put_fat@clst+1,w,c
 10857  0023FA  E104               	bnz	u5690
 10858  0023FC  0E02               	movlw	2
 10859  0023FE  5C3E               	subwf	put_fat@clst,w,c
 10860  002400  A0D8               	btfss	status,0,c
 10861  002402  D010               	goto	u5700
 10862  002404                     u5690:
 10863  002404  EE20 F012          	lfsr	2,18
 10864  002408  503C               	movf	put_fat@fs,w,c
 10865  00240A  26D9               	addwf	fsr2l,f,c
 10866  00240C  503D               	movf	put_fat@fs+1,w,c
 10867  00240E  22DA               	addwfc	fsr2h,f,c
 10868  002410  50DE               	movf	postinc2,w,c
 10869  002412  5C3E               	subwf	put_fat@clst,w,c
 10870  002414  50DE               	movf	postinc2,w,c
 10871  002416  583F               	subwfb	put_fat@clst+1,w,c
 10872  002418  50DE               	movf	postinc2,w,c
 10873  00241A  5840               	subwfb	put_fat@clst+2,w,c
 10874  00241C  50DE               	movf	postinc2,w,c
 10875  00241E  5841               	subwfb	put_fat@clst+3,w,c
 10876  002420  A0D8               	btfss	status,0,c
 10877  002422  D1E5               	goto	l4808
 10878  002424                     u5700:
 10879                           
 10880                           ;ff.c: 885:   res = FR_INT_ERR;
 10881  002424  0E02               	movlw	2
 10882  002426  6E54               	movwf	put_fat@res,c
 10883                           
 10884                           ;ff.c: 887:  } else {
 10885  002428  D1F8               	goto	l4810
 10886  00242A                     l278:
 10887                           
 10888                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
 10889  00242A  C03E  F052         	movff	put_fat@clst,put_fat@bc
 10890  00242E  C03F  F053         	movff	put_fat@clst+1,put_fat@bc+1
 10891  002432  90D8               	bcf	status,0,c
 10892  002434  3053               	rrcf	put_fat@bc+1,w,c
 10893  002436  6E47               	movwf	(??_put_fat+1)& (0+255),c
 10894  002438  3052               	rrcf	put_fat@bc,w,c
 10895  00243A  6E46               	movwf	??_put_fat& (0+255),c
 10896  00243C  5046               	movf	??_put_fat,w,c
 10897  00243E  2652               	addwf	put_fat@bc,f,c
 10898  002440  5047               	movf	??_put_fat+1,w,c
 10899  002442  2253               	addwfc	put_fat@bc+1,f,c
 10900                           
 10901                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 10902  002444  C03C  F031         	movff	put_fat@fs,move_window@fs
 10903  002448  C03D  F032         	movff	put_fat@fs+1,move_window@fs+1
 10904  00244C  EE20 F01E          	lfsr	2,30
 10905  002450  503C               	movf	put_fat@fs,w,c
 10906  002452  26D9               	addwf	fsr2l,f,c
 10907  002454  503D               	movf	put_fat@fs+1,w,c
 10908  002456  22DA               	addwfc	fsr2h,f,c
 10909  002458  CFDE F046          	movff	postinc2,??_put_fat
 10910  00245C  CFDE F047          	movff	postinc2,??_put_fat+1
 10911  002460  CFDE F048          	movff	postinc2,??_put_fat+2
 10912  002464  CFDE F049          	movff	postinc2,??_put_fat+3
 10913  002468  C052  F04A         	movff	put_fat@bc,??_put_fat+4
 10914  00246C  C053  F04B         	movff	put_fat@bc+1,??_put_fat+5
 10915  002470  0E09               	movlw	9
 10916  002472  6E4C               	movwf	(??_put_fat+6)& (0+255),c
 10917  002474                     u5715:
 10918  002474  90D8               	bcf	status,0,c
 10919  002476  324B               	rrcf	??_put_fat+5,f,c
 10920  002478  324A               	rrcf	??_put_fat+4,f,c
 10921  00247A  2E4C               	decfsz	(??_put_fat+6)& (0+255),f,c
 10922  00247C  D7FB               	goto	u5715
 10923  00247E  504A               	movf	??_put_fat+4,w,c
 10924  002480  2446               	addwf	??_put_fat,w,c
 10925  002482  6E33               	movwf	move_window@sector,c
 10926  002484  504B               	movf	??_put_fat+5,w,c
 10927  002486  2047               	addwfc	??_put_fat+1,w,c
 10928  002488  6E34               	movwf	move_window@sector+1,c
 10929  00248A  0E00               	movlw	0
 10930  00248C  2048               	addwfc	??_put_fat+2,w,c
 10931  00248E  6E35               	movwf	move_window@sector+2,c
 10932  002490  0E00               	movlw	0
 10933  002492  2049               	addwfc	??_put_fat+3,w,c
 10934  002494  6E36               	movwf	move_window@sector+3,c
 10935  002496  EC87  F02B         	call	_move_window	;wreg free
 10936  00249A  6E54               	movwf	put_fat@res,c
 10937                           
 10938                           ;ff.c: 892:    if (res != FR_OK) break;
 10939  00249C  5054               	movf	put_fat@res,w,c
 10940  00249E  A4D8               	btfss	status,2,c
 10941  0024A0  D1BC               	goto	l4810
 10942                           
 10943                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
 10944  0024A2  0EFF               	movlw	255
 10945  0024A4  6E46               	movwf	??_put_fat& (0+255),c
 10946  0024A6  0E01               	movlw	1
 10947  0024A8  6E47               	movwf	(??_put_fat+1)& (0+255),c
 10948  0024AA  C052  F048         	movff	put_fat@bc,??_put_fat+2
 10949  0024AE  C053  F049         	movff	put_fat@bc+1,??_put_fat+3
 10950  0024B2  5046               	movf	??_put_fat,w,c
 10951  0024B4  1648               	andwf	??_put_fat+2,f,c
 10952  0024B6  5047               	movf	??_put_fat+1,w,c
 10953  0024B8  1649               	andwf	??_put_fat+3,f,c
 10954  0024BA  C03C  F04A         	movff	put_fat@fs,??_put_fat+4
 10955  0024BE  C03D  F04B         	movff	put_fat@fs+1,??_put_fat+5
 10956  0024C2  5048               	movf	??_put_fat+2,w,c
 10957  0024C4  264A               	addwf	??_put_fat+4,f,c
 10958  0024C6  5049               	movf	??_put_fat+3,w,c
 10959  0024C8  224B               	addwfc	??_put_fat+5,f,c
 10960  0024CA  0E2E               	movlw	46
 10961  0024CC  244A               	addwf	??_put_fat+4,w,c
 10962  0024CE  6E55               	movwf	put_fat@p,c
 10963  0024D0  0E00               	movlw	0
 10964  0024D2  204B               	addwfc	??_put_fat+5,w,c
 10965  0024D4  6E56               	movwf	put_fat@p+1,c
 10966  0024D6  4A52               	infsnz	put_fat@bc,f,c
 10967  0024D8  2A53               	incf	put_fat@bc+1,f,c
 10968                           
 10969                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 10970  0024DA  B03E               	btfsc	put_fat@clst,0,c
 10971  0024DC  D004               	goto	l4762
 10972  0024DE  C042  F04E         	movff	put_fat@val,_put_fat$400
 10973  0024E2  6A4F               	clrf	_put_fat$400+1,c
 10974  0024E4  D01A               	goto	l4764
 10975  0024E6                     l4762:
 10976  0024E6  5042               	movf	put_fat@val,w,c
 10977  0024E8  6E46               	movwf	??_put_fat& (0+255),c
 10978  0024EA  6A47               	clrf	(??_put_fat+1)& (0+255),c
 10979  0024EC  3A46               	swapf	??_put_fat,f,c
 10980  0024EE  3A47               	swapf	??_put_fat+1,f,c
 10981  0024F0  0EF0               	movlw	240
 10982  0024F2  1647               	andwf	??_put_fat+1,f,c
 10983  0024F4  5046               	movf	??_put_fat,w,c
 10984  0024F6  0B0F               	andlw	15
 10985  0024F8  1247               	iorwf	??_put_fat+1,f,c
 10986  0024FA  0EF0               	movlw	240
 10987  0024FC  1646               	andwf	??_put_fat,f,c
 10988  0024FE  C055  FFD9         	movff	put_fat@p,fsr2l
 10989  002502  C056  FFDA         	movff	put_fat@p+1,fsr2h
 10990  002506  50DF               	movf	indf2,w,c
 10991  002508  0B0F               	andlw	15
 10992  00250A  6E48               	movwf	(??_put_fat+2)& (0+255),c
 10993  00250C  6A49               	clrf	(??_put_fat+3)& (0+255),c
 10994  00250E  5046               	movf	??_put_fat,w,c
 10995  002510  1048               	iorwf	??_put_fat+2,w,c
 10996  002512  6E4E               	movwf	_put_fat$400,c
 10997  002514  5047               	movf	??_put_fat+1,w,c
 10998  002516  1049               	iorwf	??_put_fat+3,w,c
 10999  002518  6E4F               	movwf	_put_fat$400+1,c
 11000  00251A                     l4764:
 11001  00251A  C055  FFD9         	movff	put_fat@p,fsr2l
 11002  00251E  C056  FFDA         	movff	put_fat@p+1,fsr2h
 11003  002522  C04E  FFDF         	movff	_put_fat$400,indf2
 11004                           
 11005                           ;ff.c: 895:    fs->wflag = 1;
 11006  002526  EE20 F004          	lfsr	2,4
 11007  00252A  503C               	movf	put_fat@fs,w,c
 11008  00252C  26D9               	addwf	fsr2l,f,c
 11009  00252E  503D               	movf	put_fat@fs+1,w,c
 11010  002530  22DA               	addwfc	fsr2h,f,c
 11011  002532  0E01               	movlw	1
 11012  002534  6EDF               	movwf	indf2,c
 11013                           
 11014                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 11015  002536  C03C  F031         	movff	put_fat@fs,move_window@fs
 11016  00253A  C03D  F032         	movff	put_fat@fs+1,move_window@fs+1
 11017  00253E  EE20 F01E          	lfsr	2,30
 11018  002542  503C               	movf	put_fat@fs,w,c
 11019  002544  26D9               	addwf	fsr2l,f,c
 11020  002546  503D               	movf	put_fat@fs+1,w,c
 11021  002548  22DA               	addwfc	fsr2h,f,c
 11022  00254A  CFDE F046          	movff	postinc2,??_put_fat
 11023  00254E  CFDE F047          	movff	postinc2,??_put_fat+1
 11024  002552  CFDE F048          	movff	postinc2,??_put_fat+2
 11025  002556  CFDE F049          	movff	postinc2,??_put_fat+3
 11026  00255A  C052  F04A         	movff	put_fat@bc,??_put_fat+4
 11027  00255E  C053  F04B         	movff	put_fat@bc+1,??_put_fat+5
 11028  002562  0E09               	movlw	9
 11029  002564  6E4C               	movwf	(??_put_fat+6)& (0+255),c
 11030  002566                     u5745:
 11031  002566  90D8               	bcf	status,0,c
 11032  002568  324B               	rrcf	??_put_fat+5,f,c
 11033  00256A  324A               	rrcf	??_put_fat+4,f,c
 11034  00256C  2E4C               	decfsz	(??_put_fat+6)& (0+255),f,c
 11035  00256E  D7FB               	goto	u5745
 11036  002570  504A               	movf	??_put_fat+4,w,c
 11037  002572  2446               	addwf	??_put_fat,w,c
 11038  002574  6E33               	movwf	move_window@sector,c
 11039  002576  504B               	movf	??_put_fat+5,w,c
 11040  002578  2047               	addwfc	??_put_fat+1,w,c
 11041  00257A  6E34               	movwf	move_window@sector+1,c
 11042  00257C  0E00               	movlw	0
 11043  00257E  2048               	addwfc	??_put_fat+2,w,c
 11044  002580  6E35               	movwf	move_window@sector+2,c
 11045  002582  0E00               	movlw	0
 11046  002584  2049               	addwfc	??_put_fat+3,w,c
 11047  002586  6E36               	movwf	move_window@sector+3,c
 11048  002588  EC87  F02B         	call	_move_window	;wreg free
 11049  00258C  6E54               	movwf	put_fat@res,c
 11050                           
 11051                           ;ff.c: 897:    if (res != FR_OK) break;
 11052  00258E  5054               	movf	put_fat@res,w,c
 11053  002590  A4D8               	btfss	status,2,c
 11054  002592  D143               	goto	l4810
 11055                           
 11056                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
 11057  002594  0EFF               	movlw	255
 11058  002596  6E46               	movwf	??_put_fat& (0+255),c
 11059  002598  0E01               	movlw	1
 11060  00259A  6E47               	movwf	(??_put_fat+1)& (0+255),c
 11061  00259C  C052  F048         	movff	put_fat@bc,??_put_fat+2
 11062  0025A0  C053  F049         	movff	put_fat@bc+1,??_put_fat+3
 11063  0025A4  5046               	movf	??_put_fat,w,c
 11064  0025A6  1648               	andwf	??_put_fat+2,f,c
 11065  0025A8  5047               	movf	??_put_fat+1,w,c
 11066  0025AA  1649               	andwf	??_put_fat+3,f,c
 11067  0025AC  C03C  F04A         	movff	put_fat@fs,??_put_fat+4
 11068  0025B0  C03D  F04B         	movff	put_fat@fs+1,??_put_fat+5
 11069  0025B4  5048               	movf	??_put_fat+2,w,c
 11070  0025B6  264A               	addwf	??_put_fat+4,f,c
 11071  0025B8  5049               	movf	??_put_fat+3,w,c
 11072  0025BA  224B               	addwfc	??_put_fat+5,f,c
 11073  0025BC  0E2E               	movlw	46
 11074  0025BE  244A               	addwf	??_put_fat+4,w,c
 11075  0025C0  6E55               	movwf	put_fat@p,c
 11076  0025C2  0E00               	movlw	0
 11077  0025C4  204B               	addwfc	??_put_fat+5,w,c
 11078  0025C6  6E56               	movwf	put_fat@p+1,c
 11079                           
 11080                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
 11081  0025C8  B03E               	btfsc	put_fat@clst,0,c
 11082  0025CA  D01B               	goto	l4780
 11083  0025CC  C042  F046         	movff	put_fat@val,??_put_fat
 11084  0025D0  C043  F047         	movff	put_fat@val+1,??_put_fat+1
 11085  0025D4  C044  F048         	movff	put_fat@val+2,??_put_fat+2
 11086  0025D8  C045  F049         	movff	put_fat@val+3,??_put_fat+3
 11087  0025DC  C047  F046         	movff	??_put_fat+1,??_put_fat
 11088  0025E0  C048  F047         	movff	??_put_fat+2,??_put_fat+1
 11089  0025E4  C049  F048         	movff	??_put_fat+3,??_put_fat+2
 11090  0025E8  6A49               	clrf	??_put_fat+3,c
 11091  0025EA  0E0F               	movlw	15
 11092  0025EC  1646               	andwf	??_put_fat,f,c
 11093  0025EE  C055  FFD9         	movff	put_fat@p,fsr2l
 11094  0025F2  C056  FFDA         	movff	put_fat@p+1,fsr2h
 11095  0025F6  50DF               	movf	indf2,w,c
 11096  0025F8  0BF0               	andlw	240
 11097  0025FA  1046               	iorwf	??_put_fat,w,c
 11098  0025FC  6E4A               	movwf	(??_put_fat+4)& (0+255),c
 11099  0025FE  504A               	movf	??_put_fat+4,w,c
 11100  002600  D012               	goto	L12
 11101  002602                     l4780:
 11102  002602  C042  F046         	movff	put_fat@val,??_put_fat
 11103  002606  C043  F047         	movff	put_fat@val+1,??_put_fat+1
 11104  00260A  C044  F048         	movff	put_fat@val+2,??_put_fat+2
 11105  00260E  C045  F049         	movff	put_fat@val+3,??_put_fat+3
 11106  002612  0E05               	movlw	5
 11107  002614  D005               	goto	u5770
 11108  002616                     u5775:
 11109  002616  90D8               	bcf	status,0,c
 11110  002618  3249               	rrcf	??_put_fat+3,f,c
 11111  00261A  3248               	rrcf	??_put_fat+2,f,c
 11112  00261C  3247               	rrcf	??_put_fat+1,f,c
 11113  00261E  3246               	rrcf	??_put_fat,f,c
 11114  002620                     u5770:
 11115  002620  2EE8               	decfsz	wreg,f,c
 11116  002622  D7F9               	goto	u5775
 11117  002624  5046               	movf	??_put_fat,w,c
 11118  002626                     L12:
 11119  002626  6E50               	movwf	_put_fat$401,c
 11120  002628  6A51               	clrf	_put_fat$401+1,c
 11121  00262A  C055  FFD9         	movff	put_fat@p,fsr2l
 11122  00262E  C056  FFDA         	movff	put_fat@p+1,fsr2h
 11123  002632  C050  FFDF         	movff	_put_fat$401,indf2
 11124  002636  D0D2               	goto	l4804
 11125  002638                     l4784:
 11126                           
 11127                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11128  002638  C03C  F031         	movff	put_fat@fs,move_window@fs
 11129  00263C  C03D  F032         	movff	put_fat@fs+1,move_window@fs+1
 11130  002640  EE20 F01E          	lfsr	2,30
 11131  002644  503C               	movf	put_fat@fs,w,c
 11132  002646  26D9               	addwf	fsr2l,f,c
 11133  002648  503D               	movf	put_fat@fs+1,w,c
 11134  00264A  22DA               	addwfc	fsr2h,f,c
 11135  00264C  CFDE F046          	movff	postinc2,??_put_fat
 11136  002650  CFDE F047          	movff	postinc2,??_put_fat+1
 11137  002654  CFDE F048          	movff	postinc2,??_put_fat+2
 11138  002658  CFDE F049          	movff	postinc2,??_put_fat+3
 11139  00265C  C03E  F04A         	movff	put_fat@clst,??_put_fat+4
 11140  002660  C03F  F04B         	movff	put_fat@clst+1,??_put_fat+5
 11141  002664  C040  F04C         	movff	put_fat@clst+2,??_put_fat+6
 11142  002668  C041  F04D         	movff	put_fat@clst+3,??_put_fat+7
 11143  00266C  C04B  F04A         	movff	??_put_fat+5,??_put_fat+4
 11144  002670  C04C  F04B         	movff	??_put_fat+6,??_put_fat+5
 11145  002674  C04D  F04C         	movff	??_put_fat+7,??_put_fat+6
 11146  002678  6A4D               	clrf	??_put_fat+7,c
 11147  00267A  5046               	movf	??_put_fat,w,c
 11148  00267C  244A               	addwf	??_put_fat+4,w,c
 11149  00267E  6E33               	movwf	move_window@sector,c
 11150  002680  5047               	movf	??_put_fat+1,w,c
 11151  002682  204B               	addwfc	??_put_fat+5,w,c
 11152  002684  6E34               	movwf	move_window@sector+1,c
 11153  002686  5048               	movf	??_put_fat+2,w,c
 11154  002688  204C               	addwfc	??_put_fat+6,w,c
 11155  00268A  6E35               	movwf	move_window@sector+2,c
 11156  00268C  5049               	movf	??_put_fat+3,w,c
 11157  00268E  204D               	addwfc	??_put_fat+7,w,c
 11158  002690  6E36               	movwf	move_window@sector+3,c
 11159  002692  EC87  F02B         	call	_move_window	;wreg free
 11160  002696  6E54               	movwf	put_fat@res,c
 11161                           
 11162                           ;ff.c: 905:    if (res != FR_OK) break;
 11163  002698  5054               	movf	put_fat@res,w,c
 11164  00269A  A4D8               	btfss	status,2,c
 11165  00269C  D0BE               	goto	l4810
 11166                           
 11167                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
 11168  00269E  0EFF               	movlw	255
 11169  0026A0  6E46               	movwf	??_put_fat& (0+255),c
 11170  0026A2  0E01               	movlw	1
 11171  0026A4  6E47               	movwf	(??_put_fat+1)& (0+255),c
 11172  0026A6  C03E  F048         	movff	put_fat@clst,??_put_fat+2
 11173  0026AA  C03F  F049         	movff	put_fat@clst+1,??_put_fat+3
 11174  0026AE  90D8               	bcf	status,0,c
 11175  0026B0  3648               	rlcf	??_put_fat+2,f,c
 11176  0026B2  3649               	rlcf	??_put_fat+3,f,c
 11177  0026B4  5046               	movf	??_put_fat,w,c
 11178  0026B6  1648               	andwf	??_put_fat+2,f,c
 11179  0026B8  5047               	movf	??_put_fat+1,w,c
 11180  0026BA  1649               	andwf	??_put_fat+3,f,c
 11181  0026BC  C03C  F04A         	movff	put_fat@fs,??_put_fat+4
 11182  0026C0  C03D  F04B         	movff	put_fat@fs+1,??_put_fat+5
 11183  0026C4  5048               	movf	??_put_fat+2,w,c
 11184  0026C6  264A               	addwf	??_put_fat+4,f,c
 11185  0026C8  5049               	movf	??_put_fat+3,w,c
 11186  0026CA  224B               	addwfc	??_put_fat+5,f,c
 11187  0026CC  0E2E               	movlw	46
 11188  0026CE  244A               	addwf	??_put_fat+4,w,c
 11189  0026D0  6E55               	movwf	put_fat@p,c
 11190  0026D2  0E00               	movlw	0
 11191  0026D4  204B               	addwfc	??_put_fat+5,w,c
 11192  0026D6  6E56               	movwf	put_fat@p+1,c
 11193                           
 11194                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 11195  0026D8  C055  FFD9         	movff	put_fat@p,fsr2l
 11196  0026DC  C056  FFDA         	movff	put_fat@p+1,fsr2h
 11197  0026E0  C042  FFDE         	movff	put_fat@val,postinc2
 11198  0026E4  C043  FFDD         	movff	put_fat@val+1,postdec2
 11199  0026E8  D079               	goto	l4804
 11200  0026EA                     l4794:
 11201                           
 11202                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11203  0026EA  C03C  F031         	movff	put_fat@fs,move_window@fs
 11204  0026EE  C03D  F032         	movff	put_fat@fs+1,move_window@fs+1
 11205  0026F2  EE20 F01E          	lfsr	2,30
 11206  0026F6  503C               	movf	put_fat@fs,w,c
 11207  0026F8  26D9               	addwf	fsr2l,f,c
 11208  0026FA  503D               	movf	put_fat@fs+1,w,c
 11209  0026FC  22DA               	addwfc	fsr2h,f,c
 11210  0026FE  CFDE F046          	movff	postinc2,??_put_fat
 11211  002702  CFDE F047          	movff	postinc2,??_put_fat+1
 11212  002706  CFDE F048          	movff	postinc2,??_put_fat+2
 11213  00270A  CFDE F049          	movff	postinc2,??_put_fat+3
 11214  00270E  C03E  F04A         	movff	put_fat@clst,??_put_fat+4
 11215  002712  C03F  F04B         	movff	put_fat@clst+1,??_put_fat+5
 11216  002716  C040  F04C         	movff	put_fat@clst+2,??_put_fat+6
 11217  00271A  C041  F04D         	movff	put_fat@clst+3,??_put_fat+7
 11218  00271E  0E08               	movlw	8
 11219  002720  D005               	goto	u5790
 11220  002722                     u5795:
 11221  002722  90D8               	bcf	status,0,c
 11222  002724  324D               	rrcf	??_put_fat+7,f,c
 11223  002726  324C               	rrcf	??_put_fat+6,f,c
 11224  002728  324B               	rrcf	??_put_fat+5,f,c
 11225  00272A  324A               	rrcf	??_put_fat+4,f,c
 11226  00272C                     u5790:
 11227  00272C  2EE8               	decfsz	wreg,f,c
 11228  00272E  D7F9               	goto	u5795
 11229  002730  5046               	movf	??_put_fat,w,c
 11230  002732  244A               	addwf	??_put_fat+4,w,c
 11231  002734  6E33               	movwf	move_window@sector,c
 11232  002736  5047               	movf	??_put_fat+1,w,c
 11233  002738  204B               	addwfc	??_put_fat+5,w,c
 11234  00273A  6E34               	movwf	move_window@sector+1,c
 11235  00273C  5048               	movf	??_put_fat+2,w,c
 11236  00273E  204C               	addwfc	??_put_fat+6,w,c
 11237  002740  6E35               	movwf	move_window@sector+2,c
 11238  002742  5049               	movf	??_put_fat+3,w,c
 11239  002744  204D               	addwfc	??_put_fat+7,w,c
 11240  002746  6E36               	movwf	move_window@sector+3,c
 11241  002748  EC87  F02B         	call	_move_window	;wreg free
 11242  00274C  6E54               	movwf	put_fat@res,c
 11243                           
 11244                           ;ff.c: 913:    if (res != FR_OK) break;
 11245  00274E  5054               	movf	put_fat@res,w,c
 11246  002750  A4D8               	btfss	status,2,c
 11247  002752  D063               	goto	l4810
 11248                           
 11249                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 11250  002754  0EFF               	movlw	255
 11251  002756  6E46               	movwf	??_put_fat& (0+255),c
 11252  002758  0E01               	movlw	1
 11253  00275A  6E47               	movwf	(??_put_fat+1)& (0+255),c
 11254  00275C  C03E  F048         	movff	put_fat@clst,??_put_fat+2
 11255  002760  C03F  F049         	movff	put_fat@clst+1,??_put_fat+3
 11256  002764  90D8               	bcf	status,0,c
 11257  002766  3648               	rlcf	??_put_fat+2,f,c
 11258  002768  3649               	rlcf	??_put_fat+3,f,c
 11259  00276A  90D8               	bcf	status,0,c
 11260  00276C  3648               	rlcf	??_put_fat+2,f,c
 11261  00276E  3649               	rlcf	??_put_fat+3,f,c
 11262  002770  5046               	movf	??_put_fat,w,c
 11263  002772  1648               	andwf	??_put_fat+2,f,c
 11264  002774  5047               	movf	??_put_fat+1,w,c
 11265  002776  1649               	andwf	??_put_fat+3,f,c
 11266  002778  C03C  F04A         	movff	put_fat@fs,??_put_fat+4
 11267  00277C  C03D  F04B         	movff	put_fat@fs+1,??_put_fat+5
 11268  002780  5048               	movf	??_put_fat+2,w,c
 11269  002782  264A               	addwf	??_put_fat+4,f,c
 11270  002784  5049               	movf	??_put_fat+3,w,c
 11271  002786  224B               	addwfc	??_put_fat+5,f,c
 11272  002788  0E2E               	movlw	46
 11273  00278A  244A               	addwf	??_put_fat+4,w,c
 11274  00278C  6E55               	movwf	put_fat@p,c
 11275  00278E  0E00               	movlw	0
 11276  002790  204B               	addwfc	??_put_fat+5,w,c
 11277  002792  6E56               	movwf	put_fat@p+1,c
 11278                           
 11279                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 11280  002794  C055  FFD9         	movff	put_fat@p,fsr2l
 11281  002798  C056  FFDA         	movff	put_fat@p+1,fsr2h
 11282  00279C  0E00               	movlw	0
 11283  00279E  14DE               	andwf	postinc2,w,c
 11284  0027A0  6E46               	movwf	??_put_fat& (0+255),c
 11285  0027A2  0E00               	movlw	0
 11286  0027A4  14DE               	andwf	postinc2,w,c
 11287  0027A6  6E47               	movwf	(??_put_fat+1)& (0+255),c
 11288  0027A8  0E00               	movlw	0
 11289  0027AA  14DE               	andwf	postinc2,w,c
 11290  0027AC  6E48               	movwf	(??_put_fat+2)& (0+255),c
 11291  0027AE  0EF0               	movlw	240
 11292  0027B0  14DE               	andwf	postinc2,w,c
 11293  0027B2  6E49               	movwf	(??_put_fat+3)& (0+255),c
 11294  0027B4  5046               	movf	??_put_fat,w,c
 11295  0027B6  1242               	iorwf	put_fat@val,f,c
 11296  0027B8  5047               	movf	??_put_fat+1,w,c
 11297  0027BA  1243               	iorwf	put_fat@val+1,f,c
 11298  0027BC  5048               	movf	??_put_fat+2,w,c
 11299  0027BE  1244               	iorwf	put_fat@val+2,f,c
 11300  0027C0  5049               	movf	??_put_fat+3,w,c
 11301  0027C2  1245               	iorwf	put_fat@val+3,f,c
 11302                           
 11303                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 11304  0027C4  C055  FFD9         	movff	put_fat@p,fsr2l
 11305  0027C8  C056  FFDA         	movff	put_fat@p+1,fsr2h
 11306  0027CC  C042  FFDE         	movff	put_fat@val,postinc2
 11307  0027D0  C043  FFDE         	movff	put_fat@val+1,postinc2
 11308  0027D4  C044  FFDE         	movff	put_fat@val+2,postinc2
 11309  0027D8  C045  FFDE         	movff	put_fat@val+3,postinc2
 11310  0027DC                     l4804:
 11311                           
 11312                           ;ff.c: 917:    fs->wflag = 1;
 11313  0027DC  EE20 F004          	lfsr	2,4
 11314  0027E0  503C               	movf	put_fat@fs,w,c
 11315  0027E2  26D9               	addwf	fsr2l,f,c
 11316  0027E4  503D               	movf	put_fat@fs+1,w,c
 11317  0027E6  22DA               	addwfc	fsr2h,f,c
 11318  0027E8  0E01               	movlw	1
 11319  0027EA  6EDF               	movwf	indf2,c
 11320                           
 11321                           ;ff.c: 918:    break;
 11322  0027EC  D016               	goto	l4810
 11323  0027EE                     l4808:
 11324  0027EE  C03C  FFD9         	movff	put_fat@fs,fsr2l
 11325  0027F2  C03D  FFDA         	movff	put_fat@fs+1,fsr2h
 11326  0027F6  50DF               	movf	indf2,w,c
 11327  0027F8  6E46               	movwf	??_put_fat& (0+255),c
 11328  0027FA  6A47               	clrf	(??_put_fat+1)& (0+255),c
 11329                           
 11330                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11331                           ; Switch size 1, requested type "simple"
 11332                           ; Number of cases is 1, Range of values is 0 to 0
 11333                           ; switch strategies available:
 11334                           ; Name         Instructions Cycles
 11335                           ; simple_byte            4     3 (average)
 11336                           ;	Chosen strategy is simple_byte
 11337  0027FC  5047               	movf	??_put_fat+1,w,c
 11338  0027FE  0A00               	xorlw	0	; case 0
 11339  002800  A4D8               	btfss	status,2,c
 11340  002802  D610               	goto	u5700
 11341                           
 11342                           ; Switch size 1, requested type "simple"
 11343                           ; Number of cases is 3, Range of values is 1 to 3
 11344                           ; switch strategies available:
 11345                           ; Name         Instructions Cycles
 11346                           ; simple_byte           10     6 (average)
 11347                           ;	Chosen strategy is simple_byte
 11348  002804  5046               	movf	??_put_fat,w,c
 11349  002806  0A01               	xorlw	1	; case 1
 11350  002808  B4D8               	btfsc	status,2,c
 11351  00280A  D60F               	goto	l278
 11352  00280C  0A03               	xorlw	3	; case 2
 11353  00280E  B4D8               	btfsc	status,2,c
 11354  002810  D713               	goto	l4784
 11355  002812  0A01               	xorlw	1	; case 3
 11356  002814  B4D8               	btfsc	status,2,c
 11357  002816  D769               	goto	l4794
 11358  002818  D605               	goto	u5700
 11359  00281A                     l4810:
 11360                           
 11361                           ;ff.c: 925:  return res;
 11362  00281A  5054               	movf	put_fat@res,w,c
 11363  00281C  0012               	return		;funcret
 11364  00281E                     __end_of_put_fat:
 11365                           	opt callstack 0
 11366                           
 11367 ;; *************** function _get_fat *****************
 11368 ;; Defined at:
 11369 ;;		line 818 in file "ff.c"
 11370 ;; Parameters:    Size  Location     Type
 11371 ;;  fs              2   59[COMRAM] PTR struct .
 11372 ;;		 -> FatFs(558), NULL(0), 
 11373 ;;  clst            4   61[COMRAM] unsigned long 
 11374 ;; Auto vars:     Size  Location     Type
 11375 ;;  val             4   76[COMRAM] unsigned long 
 11376 ;;  bc              2   84[COMRAM] unsigned short 
 11377 ;;  p               2   82[COMRAM] PTR unsigned char 
 11378 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 11379 ;;  wc              2   80[COMRAM] unsigned short 
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  4   59[COMRAM] unsigned long 
 11382 ;; Registers used:
 11383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11384 ;; Tracked objects:
 11385 ;;		On entry : 0/0
 11386 ;;		On exit  : 0/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11389 ;;      Params:         6       0       0       0       0       0       0       0       0
 11390 ;;      Locals:        12       0       0       0       0       0       0       0       0
 11391 ;;      Temps:          9       0       0       0       0       0       0       0       0
 11392 ;;      Totals:        27       0       0       0       0       0       0       0       0
 11393 ;;Total ram usage:       27 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    8
 11396 ;; This function calls:
 11397 ;;		_move_window
 11398 ;; This function is called by:
 11399 ;;		_remove_chain
 11400 ;;		_create_chain
 11401 ;;		_dir_sdi
 11402 ;;		_dir_next
 11403 ;;		_f_lseek
 11404 ;;		_f_read
 11405 ;; This function uses a non-reentrant model
 11406 ;;
 11407                           
 11408                           	psect	text30
 11409  002C24                     __ptext30:
 11410                           	opt callstack 0
 11411  002C24                     _get_fat:
 11412                           	opt callstack 18
 11413                           
 11414                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 11415                           
 11416                           ;incstack = 0
 11417  002C24  5041               	movf	get_fat@clst+3,w,c
 11418  002C26  1040               	iorwf	get_fat@clst+2,w,c
 11419  002C28  103F               	iorwf	get_fat@clst+1,w,c
 11420  002C2A  E104               	bnz	u5580
 11421  002C2C  0E02               	movlw	2
 11422  002C2E  5C3E               	subwf	get_fat@clst,w,c
 11423  002C30  A0D8               	btfss	status,0,c
 11424  002C32  D010               	goto	u5590
 11425  002C34                     u5580:
 11426  002C34  EE20 F012          	lfsr	2,18
 11427  002C38  503C               	movf	get_fat@fs,w,c
 11428  002C3A  26D9               	addwf	fsr2l,f,c
 11429  002C3C  503D               	movf	get_fat@fs+1,w,c
 11430  002C3E  22DA               	addwfc	fsr2h,f,c
 11431  002C40  50DE               	movf	postinc2,w,c
 11432  002C42  5C3E               	subwf	get_fat@clst,w,c
 11433  002C44  50DE               	movf	postinc2,w,c
 11434  002C46  583F               	subwfb	get_fat@clst+1,w,c
 11435  002C48  50DE               	movf	postinc2,w,c
 11436  002C4A  5840               	subwfb	get_fat@clst+2,w,c
 11437  002C4C  50DE               	movf	postinc2,w,c
 11438  002C4E  5841               	subwfb	get_fat@clst+3,w,c
 11439  002C50  A0D8               	btfss	status,0,c
 11440  002C52  D008               	goto	l252
 11441  002C54                     u5590:
 11442                           
 11443                           ;ff.c: 829:   val = 1;
 11444  002C54  0E01               	movlw	1
 11445  002C56  6E4D               	movwf	get_fat@val,c
 11446  002C58  0E00               	movlw	0
 11447  002C5A  6E4E               	movwf	get_fat@val+1,c
 11448  002C5C  0E00               	movlw	0
 11449  002C5E  6E4F               	movwf	get_fat@val+2,c
 11450  002C60  0E00               	movlw	0
 11451  002C62  D190               	goto	L14
 11452  002C64                     l252:
 11453                           
 11454                           ;ff.c: 832:   val = 0xFFFFFFFF;
 11455  002C64  684D               	setf	get_fat@val,c
 11456  002C66  684E               	setf	get_fat@val+1,c
 11457  002C68  684F               	setf	get_fat@val+2,c
 11458  002C6A  6850               	setf	get_fat@val+3,c
 11459                           
 11460                           ;ff.c: 834:   switch (fs->fs_type) {
 11461  002C6C  D18D               	goto	l4734
 11462  002C6E                     l257:
 11463                           
 11464                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 11465  002C6E  C03E  F055         	movff	get_fat@clst,get_fat@bc
 11466  002C72  C03F  F056         	movff	get_fat@clst+1,get_fat@bc+1
 11467  002C76  90D8               	bcf	status,0,c
 11468  002C78  3056               	rrcf	get_fat@bc+1,w,c
 11469  002C7A  6E43               	movwf	(??_get_fat+1)& (0+255),c
 11470  002C7C  3055               	rrcf	get_fat@bc,w,c
 11471  002C7E  6E42               	movwf	??_get_fat& (0+255),c
 11472  002C80  5042               	movf	??_get_fat,w,c
 11473  002C82  2655               	addwf	get_fat@bc,f,c
 11474  002C84  5043               	movf	??_get_fat+1,w,c
 11475  002C86  2256               	addwfc	get_fat@bc+1,f,c
 11476                           
 11477                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11478  002C88  C03C  F031         	movff	get_fat@fs,move_window@fs
 11479  002C8C  C03D  F032         	movff	get_fat@fs+1,move_window@fs+1
 11480  002C90  EE20 F01E          	lfsr	2,30
 11481  002C94  503C               	movf	get_fat@fs,w,c
 11482  002C96  26D9               	addwf	fsr2l,f,c
 11483  002C98  503D               	movf	get_fat@fs+1,w,c
 11484  002C9A  22DA               	addwfc	fsr2h,f,c
 11485  002C9C  CFDE F042          	movff	postinc2,??_get_fat
 11486  002CA0  CFDE F043          	movff	postinc2,??_get_fat+1
 11487  002CA4  CFDE F044          	movff	postinc2,??_get_fat+2
 11488  002CA8  CFDE F045          	movff	postinc2,??_get_fat+3
 11489  002CAC  C055  F046         	movff	get_fat@bc,??_get_fat+4
 11490  002CB0  C056  F047         	movff	get_fat@bc+1,??_get_fat+5
 11491  002CB4  0E09               	movlw	9
 11492  002CB6  6E48               	movwf	(??_get_fat+6)& (0+255),c
 11493  002CB8                     u5605:
 11494  002CB8  90D8               	bcf	status,0,c
 11495  002CBA  3247               	rrcf	??_get_fat+5,f,c
 11496  002CBC  3246               	rrcf	??_get_fat+4,f,c
 11497  002CBE  2E48               	decfsz	(??_get_fat+6)& (0+255),f,c
 11498  002CC0  D7FB               	goto	u5605
 11499  002CC2  5046               	movf	??_get_fat+4,w,c
 11500  002CC4  2442               	addwf	??_get_fat,w,c
 11501  002CC6  6E33               	movwf	move_window@sector,c
 11502  002CC8  5047               	movf	??_get_fat+5,w,c
 11503  002CCA  2043               	addwfc	??_get_fat+1,w,c
 11504  002CCC  6E34               	movwf	move_window@sector+1,c
 11505  002CCE  0E00               	movlw	0
 11506  002CD0  2044               	addwfc	??_get_fat+2,w,c
 11507  002CD2  6E35               	movwf	move_window@sector+2,c
 11508  002CD4  0E00               	movlw	0
 11509  002CD6  2045               	addwfc	??_get_fat+3,w,c
 11510  002CD8  6E36               	movwf	move_window@sector+3,c
 11511  002CDA  EC87  F02B         	call	_move_window	;wreg free
 11512  002CDE  0900               	iorlw	0
 11513  002CE0  A4D8               	btfss	status,2,c
 11514  002CE2  D168               	goto	l255
 11515                           
 11516                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 11517  002CE4  0EFF               	movlw	255
 11518  002CE6  6E42               	movwf	??_get_fat& (0+255),c
 11519  002CE8  0E01               	movlw	1
 11520  002CEA  6E43               	movwf	(??_get_fat+1)& (0+255),c
 11521  002CEC  C055  F044         	movff	get_fat@bc,??_get_fat+2
 11522  002CF0  C056  F045         	movff	get_fat@bc+1,??_get_fat+3
 11523  002CF4  5042               	movf	??_get_fat,w,c
 11524  002CF6  1644               	andwf	??_get_fat+2,f,c
 11525  002CF8  5043               	movf	??_get_fat+1,w,c
 11526  002CFA  1645               	andwf	??_get_fat+3,f,c
 11527  002CFC  C03C  F046         	movff	get_fat@fs,??_get_fat+4
 11528  002D00  C03D  F047         	movff	get_fat@fs+1,??_get_fat+5
 11529  002D04  5044               	movf	??_get_fat+2,w,c
 11530  002D06  2646               	addwf	??_get_fat+4,f,c
 11531  002D08  5045               	movf	??_get_fat+3,w,c
 11532  002D0A  2247               	addwfc	??_get_fat+5,f,c
 11533  002D0C  0E2E               	movlw	46
 11534  002D0E  2446               	addwf	??_get_fat+4,w,c
 11535  002D10  6ED9               	movwf	fsr2l,c
 11536  002D12  0E00               	movlw	0
 11537  002D14  2047               	addwfc	??_get_fat+5,w,c
 11538  002D16  6EDA               	movwf	fsr2h,c
 11539  002D18  50DF               	movf	indf2,w,c
 11540  002D1A  6E48               	movwf	(??_get_fat+6)& (0+255),c
 11541  002D1C  5048               	movf	??_get_fat+6,w,c
 11542  002D1E  6E51               	movwf	get_fat@wc,c
 11543  002D20  6A52               	clrf	get_fat@wc+1,c
 11544  002D22  4A55               	infsnz	get_fat@bc,f,c
 11545  002D24  2A56               	incf	get_fat@bc+1,f,c
 11546                           
 11547                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11548  002D26  C03C  F031         	movff	get_fat@fs,move_window@fs
 11549  002D2A  C03D  F032         	movff	get_fat@fs+1,move_window@fs+1
 11550  002D2E  EE20 F01E          	lfsr	2,30
 11551  002D32  503C               	movf	get_fat@fs,w,c
 11552  002D34  26D9               	addwf	fsr2l,f,c
 11553  002D36  503D               	movf	get_fat@fs+1,w,c
 11554  002D38  22DA               	addwfc	fsr2h,f,c
 11555  002D3A  CFDE F042          	movff	postinc2,??_get_fat
 11556  002D3E  CFDE F043          	movff	postinc2,??_get_fat+1
 11557  002D42  CFDE F044          	movff	postinc2,??_get_fat+2
 11558  002D46  CFDE F045          	movff	postinc2,??_get_fat+3
 11559  002D4A  C055  F046         	movff	get_fat@bc,??_get_fat+4
 11560  002D4E  C056  F047         	movff	get_fat@bc+1,??_get_fat+5
 11561  002D52  0E09               	movlw	9
 11562  002D54  6E48               	movwf	(??_get_fat+6)& (0+255),c
 11563  002D56                     u5625:
 11564  002D56  90D8               	bcf	status,0,c
 11565  002D58  3247               	rrcf	??_get_fat+5,f,c
 11566  002D5A  3246               	rrcf	??_get_fat+4,f,c
 11567  002D5C  2E48               	decfsz	(??_get_fat+6)& (0+255),f,c
 11568  002D5E  D7FB               	goto	u5625
 11569  002D60  5046               	movf	??_get_fat+4,w,c
 11570  002D62  2442               	addwf	??_get_fat,w,c
 11571  002D64  6E33               	movwf	move_window@sector,c
 11572  002D66  5047               	movf	??_get_fat+5,w,c
 11573  002D68  2043               	addwfc	??_get_fat+1,w,c
 11574  002D6A  6E34               	movwf	move_window@sector+1,c
 11575  002D6C  0E00               	movlw	0
 11576  002D6E  2044               	addwfc	??_get_fat+2,w,c
 11577  002D70  6E35               	movwf	move_window@sector+2,c
 11578  002D72  0E00               	movlw	0
 11579  002D74  2045               	addwfc	??_get_fat+3,w,c
 11580  002D76  6E36               	movwf	move_window@sector+3,c
 11581  002D78  EC87  F02B         	call	_move_window	;wreg free
 11582  002D7C  0900               	iorlw	0
 11583  002D7E  A4D8               	btfss	status,2,c
 11584  002D80  D119               	goto	l255
 11585                           
 11586                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 11587  002D82  0EFF               	movlw	255
 11588  002D84  6E42               	movwf	??_get_fat& (0+255),c
 11589  002D86  0E01               	movlw	1
 11590  002D88  6E43               	movwf	(??_get_fat+1)& (0+255),c
 11591  002D8A  C055  F044         	movff	get_fat@bc,??_get_fat+2
 11592  002D8E  C056  F045         	movff	get_fat@bc+1,??_get_fat+3
 11593  002D92  5042               	movf	??_get_fat,w,c
 11594  002D94  1644               	andwf	??_get_fat+2,f,c
 11595  002D96  5043               	movf	??_get_fat+1,w,c
 11596  002D98  1645               	andwf	??_get_fat+3,f,c
 11597  002D9A  C03C  F046         	movff	get_fat@fs,??_get_fat+4
 11598  002D9E  C03D  F047         	movff	get_fat@fs+1,??_get_fat+5
 11599  002DA2  5044               	movf	??_get_fat+2,w,c
 11600  002DA4  2646               	addwf	??_get_fat+4,f,c
 11601  002DA6  5045               	movf	??_get_fat+3,w,c
 11602  002DA8  2247               	addwfc	??_get_fat+5,f,c
 11603  002DAA  0E2E               	movlw	46
 11604  002DAC  2446               	addwf	??_get_fat+4,w,c
 11605  002DAE  6ED9               	movwf	fsr2l,c
 11606  002DB0  0E00               	movlw	0
 11607  002DB2  2047               	addwfc	??_get_fat+5,w,c
 11608  002DB4  6EDA               	movwf	fsr2h,c
 11609  002DB6  50DF               	movf	indf2,w,c
 11610  002DB8  6E48               	movwf	(??_get_fat+6)& (0+255),c
 11611  002DBA  5048               	movf	??_get_fat+6,w,c
 11612  002DBC  6E4A               	movwf	(??_get_fat+8)& (0+255),c
 11613  002DBE  6A49               	clrf	(??_get_fat+7)& (0+255),c
 11614  002DC0  5049               	movf	??_get_fat+7,w,c
 11615  002DC2  1251               	iorwf	get_fat@wc,f,c
 11616  002DC4  504A               	movf	??_get_fat+8,w,c
 11617  002DC6  1252               	iorwf	get_fat@wc+1,f,c
 11618                           
 11619                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 11620  002DC8  B03E               	btfsc	get_fat@clst,0,c
 11621  002DCA  D007               	goto	l4712
 11622  002DCC  0EFF               	movlw	255
 11623  002DCE  1451               	andwf	get_fat@wc,w,c
 11624  002DD0  6E4B               	movwf	_get_fat$374,c
 11625  002DD2  0E0F               	movlw	15
 11626  002DD4  1452               	andwf	get_fat@wc+1,w,c
 11627  002DD6  6E4C               	movwf	_get_fat$374+1,c
 11628  002DD8  D00F               	goto	l4714
 11629  002DDA                     l4712:
 11630  002DDA  C051  F042         	movff	get_fat@wc,??_get_fat
 11631  002DDE  C052  F043         	movff	get_fat@wc+1,??_get_fat+1
 11632  002DE2  0E04               	movlw	4
 11633  002DE4  6E44               	movwf	(??_get_fat+2)& (0+255),c
 11634  002DE6                     u5655:
 11635  002DE6  90D8               	bcf	status,0,c
 11636  002DE8  3243               	rrcf	??_get_fat+1,f,c
 11637  002DEA  3242               	rrcf	??_get_fat,f,c
 11638  002DEC  2E44               	decfsz	(??_get_fat+2)& (0+255),f,c
 11639  002DEE  D7FB               	goto	u5655
 11640  002DF0  C042  F04B         	movff	??_get_fat,_get_fat$374
 11641  002DF4  C043  F04C         	movff	??_get_fat+1,_get_fat$374+1
 11642  002DF8                     l4714:
 11643  002DF8  C04B  F04D         	movff	_get_fat$374,get_fat@val
 11644  002DFC  C04C  F04E         	movff	_get_fat$374+1,get_fat@val+1
 11645  002E00  D05B               	goto	L15
 11646  002E02                     l4716:
 11647                           
 11648                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 11649  002E02  C03C  F031         	movff	get_fat@fs,move_window@fs
 11650  002E06  C03D  F032         	movff	get_fat@fs+1,move_window@fs+1
 11651  002E0A  EE20 F01E          	lfsr	2,30
 11652  002E0E  503C               	movf	get_fat@fs,w,c
 11653  002E10  26D9               	addwf	fsr2l,f,c
 11654  002E12  503D               	movf	get_fat@fs+1,w,c
 11655  002E14  22DA               	addwfc	fsr2h,f,c
 11656  002E16  CFDE F042          	movff	postinc2,??_get_fat
 11657  002E1A  CFDE F043          	movff	postinc2,??_get_fat+1
 11658  002E1E  CFDE F044          	movff	postinc2,??_get_fat+2
 11659  002E22  CFDE F045          	movff	postinc2,??_get_fat+3
 11660  002E26  C03E  F046         	movff	get_fat@clst,??_get_fat+4
 11661  002E2A  C03F  F047         	movff	get_fat@clst+1,??_get_fat+5
 11662  002E2E  C040  F048         	movff	get_fat@clst+2,??_get_fat+6
 11663  002E32  C041  F049         	movff	get_fat@clst+3,??_get_fat+7
 11664  002E36  C047  F046         	movff	??_get_fat+5,??_get_fat+4
 11665  002E3A  C048  F047         	movff	??_get_fat+6,??_get_fat+5
 11666  002E3E  C049  F048         	movff	??_get_fat+7,??_get_fat+6
 11667  002E42  6A49               	clrf	??_get_fat+7,c
 11668  002E44  5042               	movf	??_get_fat,w,c
 11669  002E46  2446               	addwf	??_get_fat+4,w,c
 11670  002E48  6E33               	movwf	move_window@sector,c
 11671  002E4A  5043               	movf	??_get_fat+1,w,c
 11672  002E4C  2047               	addwfc	??_get_fat+5,w,c
 11673  002E4E  6E34               	movwf	move_window@sector+1,c
 11674  002E50  5044               	movf	??_get_fat+2,w,c
 11675  002E52  2048               	addwfc	??_get_fat+6,w,c
 11676  002E54  6E35               	movwf	move_window@sector+2,c
 11677  002E56  5045               	movf	??_get_fat+3,w,c
 11678  002E58  2049               	addwfc	??_get_fat+7,w,c
 11679  002E5A  6E36               	movwf	move_window@sector+3,c
 11680  002E5C  EC87  F02B         	call	_move_window	;wreg free
 11681  002E60  0900               	iorlw	0
 11682  002E62  A4D8               	btfss	status,2,c
 11683  002E64  D0A7               	goto	l255
 11684                           
 11685                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 11686  002E66  0EFF               	movlw	255
 11687  002E68  6E42               	movwf	??_get_fat& (0+255),c
 11688  002E6A  0E01               	movlw	1
 11689  002E6C  6E43               	movwf	(??_get_fat+1)& (0+255),c
 11690  002E6E  C03E  F044         	movff	get_fat@clst,??_get_fat+2
 11691  002E72  C03F  F045         	movff	get_fat@clst+1,??_get_fat+3
 11692  002E76  90D8               	bcf	status,0,c
 11693  002E78  3644               	rlcf	??_get_fat+2,f,c
 11694  002E7A  3645               	rlcf	??_get_fat+3,f,c
 11695  002E7C  5042               	movf	??_get_fat,w,c
 11696  002E7E  1644               	andwf	??_get_fat+2,f,c
 11697  002E80  5043               	movf	??_get_fat+1,w,c
 11698  002E82  1645               	andwf	??_get_fat+3,f,c
 11699  002E84  C03C  F046         	movff	get_fat@fs,??_get_fat+4
 11700  002E88  C03D  F047         	movff	get_fat@fs+1,??_get_fat+5
 11701  002E8C  5044               	movf	??_get_fat+2,w,c
 11702  002E8E  2646               	addwf	??_get_fat+4,f,c
 11703  002E90  5045               	movf	??_get_fat+3,w,c
 11704  002E92  2247               	addwfc	??_get_fat+5,f,c
 11705  002E94  0E2E               	movlw	46
 11706  002E96  2446               	addwf	??_get_fat+4,w,c
 11707  002E98  6E53               	movwf	get_fat@p,c
 11708  002E9A  0E00               	movlw	0
 11709  002E9C  2047               	addwfc	??_get_fat+5,w,c
 11710  002E9E  6E54               	movwf	get_fat@p+1,c
 11711                           
 11712                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 11713  002EA0  C053  FFD9         	movff	get_fat@p,fsr2l
 11714  002EA4  C054  FFDA         	movff	get_fat@p+1,fsr2h
 11715  002EA8  CFDE F042          	movff	postinc2,??_get_fat
 11716  002EAC  CFDD F043          	movff	postdec2,??_get_fat+1
 11717  002EB0  C042  F04D         	movff	??_get_fat,get_fat@val
 11718  002EB4  C043  F04E         	movff	??_get_fat+1,get_fat@val+1
 11719  002EB8                     L15:
 11720  002EB8  6A4F               	clrf	get_fat@val+2,c
 11721  002EBA  6A50               	clrf	get_fat@val+3,c
 11722                           
 11723                           ;ff.c: 848:    break;
 11724  002EBC  D07B               	goto	l255
 11725  002EBE                     l4724:
 11726                           
 11727                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 11728  002EBE  C03C  F031         	movff	get_fat@fs,move_window@fs
 11729  002EC2  C03D  F032         	movff	get_fat@fs+1,move_window@fs+1
 11730  002EC6  EE20 F01E          	lfsr	2,30
 11731  002ECA  503C               	movf	get_fat@fs,w,c
 11732  002ECC  26D9               	addwf	fsr2l,f,c
 11733  002ECE  503D               	movf	get_fat@fs+1,w,c
 11734  002ED0  22DA               	addwfc	fsr2h,f,c
 11735  002ED2  CFDE F042          	movff	postinc2,??_get_fat
 11736  002ED6  CFDE F043          	movff	postinc2,??_get_fat+1
 11737  002EDA  CFDE F044          	movff	postinc2,??_get_fat+2
 11738  002EDE  CFDE F045          	movff	postinc2,??_get_fat+3
 11739  002EE2  C03E  F046         	movff	get_fat@clst,??_get_fat+4
 11740  002EE6  C03F  F047         	movff	get_fat@clst+1,??_get_fat+5
 11741  002EEA  C040  F048         	movff	get_fat@clst+2,??_get_fat+6
 11742  002EEE  C041  F049         	movff	get_fat@clst+3,??_get_fat+7
 11743  002EF2  0E08               	movlw	8
 11744  002EF4  D005               	goto	u5670
 11745  002EF6                     u5675:
 11746  002EF6  90D8               	bcf	status,0,c
 11747  002EF8  3249               	rrcf	??_get_fat+7,f,c
 11748  002EFA  3248               	rrcf	??_get_fat+6,f,c
 11749  002EFC  3247               	rrcf	??_get_fat+5,f,c
 11750  002EFE  3246               	rrcf	??_get_fat+4,f,c
 11751  002F00                     u5670:
 11752  002F00  2EE8               	decfsz	wreg,f,c
 11753  002F02  D7F9               	goto	u5675
 11754  002F04  5042               	movf	??_get_fat,w,c
 11755  002F06  2446               	addwf	??_get_fat+4,w,c
 11756  002F08  6E33               	movwf	move_window@sector,c
 11757  002F0A  5043               	movf	??_get_fat+1,w,c
 11758  002F0C  2047               	addwfc	??_get_fat+5,w,c
 11759  002F0E  6E34               	movwf	move_window@sector+1,c
 11760  002F10  5044               	movf	??_get_fat+2,w,c
 11761  002F12  2048               	addwfc	??_get_fat+6,w,c
 11762  002F14  6E35               	movwf	move_window@sector+2,c
 11763  002F16  5045               	movf	??_get_fat+3,w,c
 11764  002F18  2049               	addwfc	??_get_fat+7,w,c
 11765  002F1A  6E36               	movwf	move_window@sector+3,c
 11766  002F1C  EC87  F02B         	call	_move_window	;wreg free
 11767  002F20  0900               	iorlw	0
 11768  002F22  A4D8               	btfss	status,2,c
 11769  002F24  D047               	goto	l255
 11770                           
 11771                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 11772  002F26  0EFF               	movlw	255
 11773  002F28  6E42               	movwf	??_get_fat& (0+255),c
 11774  002F2A  0E01               	movlw	1
 11775  002F2C  6E43               	movwf	(??_get_fat+1)& (0+255),c
 11776  002F2E  C03E  F044         	movff	get_fat@clst,??_get_fat+2
 11777  002F32  C03F  F045         	movff	get_fat@clst+1,??_get_fat+3
 11778  002F36  90D8               	bcf	status,0,c
 11779  002F38  3644               	rlcf	??_get_fat+2,f,c
 11780  002F3A  3645               	rlcf	??_get_fat+3,f,c
 11781  002F3C  90D8               	bcf	status,0,c
 11782  002F3E  3644               	rlcf	??_get_fat+2,f,c
 11783  002F40  3645               	rlcf	??_get_fat+3,f,c
 11784  002F42  5042               	movf	??_get_fat,w,c
 11785  002F44  1644               	andwf	??_get_fat+2,f,c
 11786  002F46  5043               	movf	??_get_fat+1,w,c
 11787  002F48  1645               	andwf	??_get_fat+3,f,c
 11788  002F4A  C03C  F046         	movff	get_fat@fs,??_get_fat+4
 11789  002F4E  C03D  F047         	movff	get_fat@fs+1,??_get_fat+5
 11790  002F52  5044               	movf	??_get_fat+2,w,c
 11791  002F54  2646               	addwf	??_get_fat+4,f,c
 11792  002F56  5045               	movf	??_get_fat+3,w,c
 11793  002F58  2247               	addwfc	??_get_fat+5,f,c
 11794  002F5A  0E2E               	movlw	46
 11795  002F5C  2446               	addwf	??_get_fat+4,w,c
 11796  002F5E  6E53               	movwf	get_fat@p,c
 11797  002F60  0E00               	movlw	0
 11798  002F62  2047               	addwfc	??_get_fat+5,w,c
 11799  002F64  6E54               	movwf	get_fat@p+1,c
 11800                           
 11801                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 11802  002F66  C053  FFD9         	movff	get_fat@p,fsr2l
 11803  002F6A  C054  FFDA         	movff	get_fat@p+1,fsr2h
 11804  002F6E  0EFF               	movlw	255
 11805  002F70  14DE               	andwf	postinc2,w,c
 11806  002F72  6E4D               	movwf	get_fat@val,c
 11807  002F74  0EFF               	movlw	255
 11808  002F76  14DE               	andwf	postinc2,w,c
 11809  002F78  6E4E               	movwf	get_fat@val+1,c
 11810  002F7A  0EFF               	movlw	255
 11811  002F7C  14DE               	andwf	postinc2,w,c
 11812  002F7E  6E4F               	movwf	get_fat@val+2,c
 11813  002F80  0E0F               	movlw	15
 11814  002F82  14DE               	andwf	postinc2,w,c
 11815  002F84                     L14:
 11816  002F84  6E50               	movwf	get_fat@val+3,c
 11817                           
 11818                           ;ff.c: 854:    break;
 11819  002F86  D016               	goto	l255
 11820  002F88                     l4734:
 11821  002F88  C03C  FFD9         	movff	get_fat@fs,fsr2l
 11822  002F8C  C03D  FFDA         	movff	get_fat@fs+1,fsr2h
 11823  002F90  50DF               	movf	indf2,w,c
 11824  002F92  6E42               	movwf	??_get_fat& (0+255),c
 11825  002F94  6A43               	clrf	(??_get_fat+1)& (0+255),c
 11826                           
 11827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11828                           ; Switch size 1, requested type "simple"
 11829                           ; Number of cases is 1, Range of values is 0 to 0
 11830                           ; switch strategies available:
 11831                           ; Name         Instructions Cycles
 11832                           ; simple_byte            4     3 (average)
 11833                           ;	Chosen strategy is simple_byte
 11834  002F96  5043               	movf	??_get_fat+1,w,c
 11835  002F98  0A00               	xorlw	0	; case 0
 11836  002F9A  A4D8               	btfss	status,2,c
 11837  002F9C  D65B               	goto	u5590
 11838                           
 11839                           ; Switch size 1, requested type "simple"
 11840                           ; Number of cases is 3, Range of values is 1 to 3
 11841                           ; switch strategies available:
 11842                           ; Name         Instructions Cycles
 11843                           ; simple_byte           10     6 (average)
 11844                           ;	Chosen strategy is simple_byte
 11845  002F9E  5042               	movf	??_get_fat,w,c
 11846  002FA0  0A01               	xorlw	1	; case 1
 11847  002FA2  B4D8               	btfsc	status,2,c
 11848  002FA4  D664               	goto	l257
 11849  002FA6  0A03               	xorlw	3	; case 2
 11850  002FA8  B4D8               	btfsc	status,2,c
 11851  002FAA  D72B               	goto	l4716
 11852  002FAC  0A01               	xorlw	1	; case 3
 11853  002FAE  B4D8               	btfsc	status,2,c
 11854  002FB0  D786               	goto	l4724
 11855  002FB2  D650               	goto	u5590
 11856  002FB4                     l255:
 11857                           
 11858                           ;ff.c: 861:  return val;
 11859  002FB4  C04D  F03C         	movff	get_fat@val,?_get_fat
 11860  002FB8  C04E  F03D         	movff	get_fat@val+1,?_get_fat+1
 11861  002FBC  C04F  F03E         	movff	get_fat@val+2,?_get_fat+2
 11862  002FC0  C050  F03F         	movff	get_fat@val+3,?_get_fat+3
 11863  002FC4  0012               	return		;funcret
 11864  002FC6                     __end_of_get_fat:
 11865                           	opt callstack 0
 11866                           
 11867 ;; *************** function _clust2sect *****************
 11868 ;; Defined at:
 11869 ;;		line 800 in file "ff.c"
 11870 ;; Parameters:    Size  Location     Type
 11871 ;;  fs              2   12[COMRAM] PTR struct .
 11872 ;;		 -> FatFs(558), NULL(0), 
 11873 ;;  clst            4   14[COMRAM] unsigned long 
 11874 ;; Auto vars:     Size  Location     Type
 11875 ;;		None
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  4   12[COMRAM] unsigned long 
 11878 ;; Registers used:
 11879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11885 ;;      Params:         6       0       0       0       0       0       0       0       0
 11886 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11887 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11888 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11889 ;;Total ram usage:       11 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    1
 11892 ;; This function calls:
 11893 ;;		___lmul
 11894 ;; This function is called by:
 11895 ;;		_dir_sdi
 11896 ;;		_dir_next
 11897 ;;		_f_write
 11898 ;;		_f_lseek
 11899 ;;		_f_read
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           	psect	text31
 11904  0055A4                     __ptext31:
 11905                           	opt callstack 0
 11906  0055A4                     _clust2sect:
 11907                           	opt callstack 26
 11908                           
 11909                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 11910                           
 11911                           ;incstack = 0
 11912  0055A4  0E02               	movlw	2
 11913  0055A6  5E0F               	subwf	clust2sect@clst,f,c
 11914  0055A8  0E00               	movlw	0
 11915  0055AA  5A10               	subwfb	clust2sect@clst+1,f,c
 11916  0055AC  5A11               	subwfb	clust2sect@clst+2,f,c
 11917  0055AE  5A12               	subwfb	clust2sect@clst+3,f,c
 11918                           
 11919                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 11920  0055B0  EE20 F012          	lfsr	2,18
 11921  0055B4  500D               	movf	clust2sect@fs,w,c
 11922  0055B6  26D9               	addwf	fsr2l,f,c
 11923  0055B8  500E               	movf	clust2sect@fs+1,w,c
 11924  0055BA  22DA               	addwfc	fsr2h,f,c
 11925  0055BC  0EFE               	movlw	254
 11926  0055BE  24DE               	addwf	postinc2,w,c
 11927  0055C0  6E13               	movwf	??_clust2sect& (0+255),c
 11928  0055C2  0EFF               	movlw	255
 11929  0055C4  20DE               	addwfc	postinc2,w,c
 11930  0055C6  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 11931  0055C8  0EFF               	movlw	255
 11932  0055CA  20DE               	addwfc	postinc2,w,c
 11933  0055CC  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 11934  0055CE  0EFF               	movlw	255
 11935  0055D0  20DE               	addwfc	postinc2,w,c
 11936  0055D2  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 11937  0055D4  5013               	movf	??_clust2sect,w,c
 11938  0055D6  5C0F               	subwf	clust2sect@clst,w,c
 11939  0055D8  5014               	movf	??_clust2sect+1,w,c
 11940  0055DA  5810               	subwfb	clust2sect@clst+1,w,c
 11941  0055DC  5015               	movf	??_clust2sect+2,w,c
 11942  0055DE  5811               	subwfb	clust2sect@clst+2,w,c
 11943  0055E0  5016               	movf	??_clust2sect+3,w,c
 11944  0055E2  5812               	subwfb	clust2sect@clst+3,w,c
 11945  0055E4  A0D8               	btfss	status,0,c
 11946  0055E6  D009               	goto	l4844
 11947  0055E8  0E00               	movlw	0
 11948  0055EA  6E0D               	movwf	?_clust2sect,c
 11949  0055EC  0E00               	movlw	0
 11950  0055EE  6E0E               	movwf	?_clust2sect+1,c
 11951  0055F0  0E00               	movlw	0
 11952  0055F2  6E0F               	movwf	?_clust2sect+2,c
 11953  0055F4  0E00               	movlw	0
 11954  0055F6  6E10               	movwf	?_clust2sect+3,c
 11955  0055F8  0012               	return	
 11956  0055FA                     l4844:
 11957                           
 11958                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 11959  0055FA  EE20 F026          	lfsr	2,38
 11960  0055FE  500D               	movf	clust2sect@fs,w,c
 11961  005600  26D9               	addwf	fsr2l,f,c
 11962  005602  500E               	movf	clust2sect@fs+1,w,c
 11963  005604  22DA               	addwfc	fsr2h,f,c
 11964  005606  CFDE F013          	movff	postinc2,??_clust2sect
 11965  00560A  CFDE F014          	movff	postinc2,??_clust2sect+1
 11966  00560E  CFDE F015          	movff	postinc2,??_clust2sect+2
 11967  005612  CFDE F016          	movff	postinc2,??_clust2sect+3
 11968  005616  EE20 F002          	lfsr	2,2
 11969  00561A  500D               	movf	clust2sect@fs,w,c
 11970  00561C  26D9               	addwf	fsr2l,f,c
 11971  00561E  500E               	movf	clust2sect@fs+1,w,c
 11972  005620  22DA               	addwfc	fsr2h,f,c
 11973  005622  50DF               	movf	indf2,w,c
 11974  005624  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 11975  005626  5017               	movf	??_clust2sect+4,w,c
 11976  005628  6E01               	movwf	___lmul@multiplier,c
 11977  00562A  6A02               	clrf	___lmul@multiplier+1,c
 11978  00562C  6A03               	clrf	___lmul@multiplier+2,c
 11979  00562E  6A04               	clrf	___lmul@multiplier+3,c
 11980  005630  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 11981  005634  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 11982  005638  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 11983  00563C  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 11984  005640  EC90  F02D         	call	___lmul	;wreg free
 11985  005644  5013               	movf	??_clust2sect,w,c
 11986  005646  2401               	addwf	?___lmul,w,c
 11987  005648  6E0D               	movwf	?_clust2sect,c
 11988  00564A  5014               	movf	??_clust2sect+1,w,c
 11989  00564C  2002               	addwfc	?___lmul+1,w,c
 11990  00564E  6E0E               	movwf	?_clust2sect+1,c
 11991  005650  5015               	movf	??_clust2sect+2,w,c
 11992  005652  2003               	addwfc	?___lmul+2,w,c
 11993  005654  6E0F               	movwf	?_clust2sect+2,c
 11994  005656  5016               	movf	??_clust2sect+3,w,c
 11995  005658  2004               	addwfc	?___lmul+3,w,c
 11996  00565A  6E10               	movwf	?_clust2sect+3,c
 11997  00565C  0012               	return		;funcret
 11998  00565E                     __end_of_clust2sect:
 11999                           	opt callstack 0
 12000                           
 12001 ;; *************** function ___lmul *****************
 12002 ;; Defined at:
 12003 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 12004 ;; Parameters:    Size  Location     Type
 12005 ;;  multiplier      4    0[COMRAM] unsigned long 
 12006 ;;  multiplicand    4    4[COMRAM] unsigned long 
 12007 ;; Auto vars:     Size  Location     Type
 12008 ;;  product         4    8[COMRAM] unsigned long 
 12009 ;; Return value:  Size  Location     Type
 12010 ;;                  4    0[COMRAM] unsigned long 
 12011 ;; Registers used:
 12012 ;;		wreg, status,2, status,0
 12013 ;; Tracked objects:
 12014 ;;		On entry : 0/0
 12015 ;;		On exit  : 0/0
 12016 ;;		Unchanged: 0/0
 12017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12018 ;;      Params:         8       0       0       0       0       0       0       0       0
 12019 ;;      Locals:         4       0       0       0       0       0       0       0       0
 12020 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12021 ;;      Totals:        12       0       0       0       0       0       0       0       0
 12022 ;;Total ram usage:       12 bytes
 12023 ;; Hardware stack levels used:    1
 12024 ;; This function calls:
 12025 ;;		Nothing
 12026 ;; This function is called by:
 12027 ;;		_clust2sect
 12028 ;;		_find_volume
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           	psect	text32
 12033  005B20                     __ptext32:
 12034                           	opt callstack 0
 12035  005B20                     ___lmul:
 12036                           	opt callstack 26
 12037                           
 12038                           ;incstack = 0
 12039  005B20  0E00               	movlw	0
 12040  005B22  6E09               	movwf	___lmul@product,c
 12041  005B24  0E00               	movlw	0
 12042  005B26  6E0A               	movwf	___lmul@product+1,c
 12043  005B28  0E00               	movlw	0
 12044  005B2A  6E0B               	movwf	___lmul@product+2,c
 12045  005B2C  0E00               	movlw	0
 12046  005B2E  6E0C               	movwf	___lmul@product+3,c
 12047  005B30                     l4820:
 12048  005B30  A001               	btfss	___lmul@multiplier,0,c
 12049  005B32  D008               	goto	l4824
 12050  005B34  5005               	movf	___lmul@multiplicand,w,c
 12051  005B36  2609               	addwf	___lmul@product,f,c
 12052  005B38  5006               	movf	___lmul@multiplicand+1,w,c
 12053  005B3A  220A               	addwfc	___lmul@product+1,f,c
 12054  005B3C  5007               	movf	___lmul@multiplicand+2,w,c
 12055  005B3E  220B               	addwfc	___lmul@product+2,f,c
 12056  005B40  5008               	movf	___lmul@multiplicand+3,w,c
 12057  005B42  220C               	addwfc	___lmul@product+3,f,c
 12058  005B44                     l4824:
 12059  005B44  90D8               	bcf	status,0,c
 12060  005B46  3605               	rlcf	___lmul@multiplicand,f,c
 12061  005B48  3606               	rlcf	___lmul@multiplicand+1,f,c
 12062  005B4A  3607               	rlcf	___lmul@multiplicand+2,f,c
 12063  005B4C  3608               	rlcf	___lmul@multiplicand+3,f,c
 12064  005B4E  90D8               	bcf	status,0,c
 12065  005B50  3204               	rrcf	___lmul@multiplier+3,f,c
 12066  005B52  3203               	rrcf	___lmul@multiplier+2,f,c
 12067  005B54  3202               	rrcf	___lmul@multiplier+1,f,c
 12068  005B56  3201               	rrcf	___lmul@multiplier,f,c
 12069  005B58  5001               	movf	___lmul@multiplier,w,c
 12070  005B5A  1002               	iorwf	___lmul@multiplier+1,w,c
 12071  005B5C  1003               	iorwf	___lmul@multiplier+2,w,c
 12072  005B5E  1004               	iorwf	___lmul@multiplier+3,w,c
 12073  005B60  A4D8               	btfss	status,2,c
 12074  005B62  D7E6               	goto	l4820
 12075  005B64  C009  F001         	movff	___lmul@product,?___lmul
 12076  005B68  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12077  005B6C  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12078  005B70  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12079  005B74  0012               	return		;funcret
 12080  005B76                     __end_of___lmul:
 12081                           	opt callstack 0
 12082                           
 12083 ;; *************** function ___lldiv *****************
 12084 ;; Defined at:
 12085 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  dividend        4    0[COMRAM] unsigned long 
 12088 ;;  divisor         4    4[COMRAM] unsigned long 
 12089 ;; Auto vars:     Size  Location     Type
 12090 ;;  quotient        4    8[COMRAM] unsigned long 
 12091 ;;  counter         1   12[COMRAM] unsigned char 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  4    0[COMRAM] unsigned long 
 12094 ;; Registers used:
 12095 ;;		wreg, status,2, status,0
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12101 ;;      Params:         8       0       0       0       0       0       0       0       0
 12102 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12103 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12104 ;;      Totals:        13       0       0       0       0       0       0       0       0
 12105 ;;Total ram usage:       13 bytes
 12106 ;; Hardware stack levels used:    1
 12107 ;; This function calls:
 12108 ;;		Nothing
 12109 ;; This function is called by:
 12110 ;;		_find_volume
 12111 ;;		_f_lseek
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           	psect	text33
 12116  0058CC                     __ptext33:
 12117                           	opt callstack 0
 12118  0058CC                     ___lldiv:
 12119                           	opt callstack 27
 12120                           
 12121                           ;incstack = 0
 12122  0058CC  0E00               	movlw	0
 12123  0058CE  6E09               	movwf	___lldiv@quotient,c
 12124  0058D0  0E00               	movlw	0
 12125  0058D2  6E0A               	movwf	___lldiv@quotient+1,c
 12126  0058D4  0E00               	movlw	0
 12127  0058D6  6E0B               	movwf	___lldiv@quotient+2,c
 12128  0058D8  0E00               	movlw	0
 12129  0058DA  6E0C               	movwf	___lldiv@quotient+3,c
 12130  0058DC  5005               	movf	___lldiv@divisor,w,c
 12131  0058DE  1006               	iorwf	___lldiv@divisor+1,w,c
 12132  0058E0  1007               	iorwf	___lldiv@divisor+2,w,c
 12133  0058E2  1008               	iorwf	___lldiv@divisor+3,w,c
 12134  0058E4  B4D8               	btfsc	status,2,c
 12135  0058E6  D02A               	goto	l940
 12136  0058E8  0E01               	movlw	1
 12137  0058EA  6E0D               	movwf	___lldiv@counter,c
 12138  0058EC  D006               	goto	l5722
 12139  0058EE                     l5720:
 12140  0058EE  90D8               	bcf	status,0,c
 12141  0058F0  3605               	rlcf	___lldiv@divisor,f,c
 12142  0058F2  3606               	rlcf	___lldiv@divisor+1,f,c
 12143  0058F4  3607               	rlcf	___lldiv@divisor+2,f,c
 12144  0058F6  3608               	rlcf	___lldiv@divisor+3,f,c
 12145  0058F8  2A0D               	incf	___lldiv@counter,f,c
 12146  0058FA                     l5722:
 12147  0058FA  AE08               	btfss	___lldiv@divisor+3,7,c
 12148  0058FC  D7F8               	goto	l5720
 12149  0058FE                     u7570:
 12150  0058FE  90D8               	bcf	status,0,c
 12151  005900  3609               	rlcf	___lldiv@quotient,f,c
 12152  005902  360A               	rlcf	___lldiv@quotient+1,f,c
 12153  005904  360B               	rlcf	___lldiv@quotient+2,f,c
 12154  005906  360C               	rlcf	___lldiv@quotient+3,f,c
 12155  005908  5005               	movf	___lldiv@divisor,w,c
 12156  00590A  5C01               	subwf	___lldiv@dividend,w,c
 12157  00590C  5006               	movf	___lldiv@divisor+1,w,c
 12158  00590E  5802               	subwfb	___lldiv@dividend+1,w,c
 12159  005910  5007               	movf	___lldiv@divisor+2,w,c
 12160  005912  5803               	subwfb	___lldiv@dividend+2,w,c
 12161  005914  5008               	movf	___lldiv@divisor+3,w,c
 12162  005916  5804               	subwfb	___lldiv@dividend+3,w,c
 12163  005918  A0D8               	btfss	status,0,c
 12164  00591A  D009               	goto	l5732
 12165  00591C  5005               	movf	___lldiv@divisor,w,c
 12166  00591E  5E01               	subwf	___lldiv@dividend,f,c
 12167  005920  5006               	movf	___lldiv@divisor+1,w,c
 12168  005922  5A02               	subwfb	___lldiv@dividend+1,f,c
 12169  005924  5007               	movf	___lldiv@divisor+2,w,c
 12170  005926  5A03               	subwfb	___lldiv@dividend+2,f,c
 12171  005928  5008               	movf	___lldiv@divisor+3,w,c
 12172  00592A  5A04               	subwfb	___lldiv@dividend+3,f,c
 12173  00592C  8009               	bsf	___lldiv@quotient,0,c
 12174  00592E                     l5732:
 12175  00592E  90D8               	bcf	status,0,c
 12176  005930  3208               	rrcf	___lldiv@divisor+3,f,c
 12177  005932  3207               	rrcf	___lldiv@divisor+2,f,c
 12178  005934  3206               	rrcf	___lldiv@divisor+1,f,c
 12179  005936  3205               	rrcf	___lldiv@divisor,f,c
 12180  005938  2E0D               	decfsz	___lldiv@counter,f,c
 12181  00593A  D7E1               	goto	u7570
 12182  00593C                     l940:
 12183  00593C  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12184  005940  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12185  005944  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12186  005948  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12187  00594C  0012               	return		;funcret
 12188  00594E                     __end_of___lldiv:
 12189                           	opt callstack 0
 12190                           
 12191 ;; *************** function _f_close *****************
 12192 ;; Defined at:
 12193 ;;		line 2861 in file "ff.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;  fp              2   77[COMRAM] PTR struct .
 12196 ;;		 -> Fil(32), 
 12197 ;; Auto vars:     Size  Location     Type
 12198 ;;  res             1   79[COMRAM] enum E93
 12199 ;; Return value:  Size  Location     Type
 12200 ;;                  1    wreg      enum E93
 12201 ;; Registers used:
 12202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12203 ;; Tracked objects:
 12204 ;;		On entry : 0/0
 12205 ;;		On exit  : 0/0
 12206 ;;		Unchanged: 0/0
 12207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12208 ;;      Params:         2       0       0       0       0       0       0       0       0
 12209 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12210 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12211 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12212 ;;Total ram usage:        3 bytes
 12213 ;; Hardware stack levels used:    1
 12214 ;; Hardware stack levels required when called:    9
 12215 ;; This function calls:
 12216 ;;		_f_sync
 12217 ;;		_validate
 12218 ;; This function is called by:
 12219 ;;		_guardar
 12220 ;; This function uses a non-reentrant model
 12221 ;;
 12222                           
 12223                           	psect	text34
 12224  005C94                     __ptext34:
 12225                           	opt callstack 0
 12226  005C94                     _f_close:
 12227                           	opt callstack 20
 12228                           
 12229                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 12230                           
 12231                           ;incstack = 0
 12232  005C94  C04E  F045         	movff	f_close@fp,f_sync@fp
 12233  005C98  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 12234  005C9C  ECA6  F024         	call	_f_sync	;wreg free
 12235  005CA0  6E50               	movwf	f_close@res,c
 12236                           
 12237                           ;ff.c: 2870:  if (res == FR_OK)
 12238  005CA2  5050               	movf	f_close@res,w,c
 12239  005CA4  A4D8               	btfss	status,2,c
 12240  005CA6  0012               	return	
 12241                           
 12242                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 12243  005CA8  C04E  F002         	movff	f_close@fp,validate@obj
 12244  005CAC  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 12245  005CB0  ECDA  F02B         	call	_validate	;wreg free
 12246  005CB4  6E50               	movwf	f_close@res,c
 12247                           
 12248                           ;ff.c: 2874:   if (res == FR_OK) {
 12249  005CB6  5050               	movf	f_close@res,w,c
 12250  005CB8  A4D8               	btfss	status,2,c
 12251  005CBA  0012               	return	
 12252                           
 12253                           ;ff.c: 2882:     fp->fs = 0;
 12254  005CBC  C04E  FFD9         	movff	f_close@fp,fsr2l
 12255  005CC0  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 12256  005CC4  0E00               	movlw	0
 12257  005CC6  6EDE               	movwf	postinc2,c
 12258  005CC8  0E00               	movlw	0
 12259  005CCA  6EDD               	movwf	postdec2,c
 12260  005CCC  0012               	return		;funcret
 12261  005CCE                     __end_of_f_close:
 12262                           	opt callstack 0
 12263                           
 12264 ;; *************** function _f_sync *****************
 12265 ;; Defined at:
 12266 ;;		line 2813 in file "ff.c"
 12267 ;; Parameters:    Size  Location     Type
 12268 ;;  fp              2   68[COMRAM] PTR struct .
 12269 ;;		 -> Fil(32), 
 12270 ;; Auto vars:     Size  Location     Type
 12271 ;;  tm              4    0        unsigned long 
 12272 ;;  dir             2   75[COMRAM] PTR unsigned char 
 12273 ;;		 -> FatFs(558), NULL(0), 
 12274 ;;  res             1   74[COMRAM] enum E93
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      enum E93
 12277 ;; Registers used:
 12278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12284 ;;      Params:         2       0       0       0       0       0       0       0       0
 12285 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12286 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12287 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12288 ;;Total ram usage:        9 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:    8
 12291 ;; This function calls:
 12292 ;;		_move_window
 12293 ;;		_st_clust
 12294 ;;		_sync_fs
 12295 ;;		_validate
 12296 ;; This function is called by:
 12297 ;;		_f_close
 12298 ;; This function uses a non-reentrant model
 12299 ;;
 12300                           
 12301                           	psect	text35
 12302  00494C                     __ptext35:
 12303                           	opt callstack 0
 12304  00494C                     _f_sync:
 12305                           	opt callstack 20
 12306                           
 12307                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 12308                           
 12309                           ;incstack = 0
 12310  00494C  C045  F002         	movff	f_sync@fp,validate@obj
 12311  004950  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 12312  004954  ECDA  F02B         	call	_validate	;wreg free
 12313  004958  6E4B               	movwf	f_sync@res,c
 12314                           
 12315                           ;ff.c: 2823:  if (res == FR_OK) {
 12316  00495A  504B               	movf	f_sync@res,w,c
 12317  00495C  A4D8               	btfss	status,2,c
 12318  00495E  D095               	goto	l6276
 12319                           
 12320                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 12321  004960  EE20 F004          	lfsr	2,4
 12322  004964  5045               	movf	f_sync@fp,w,c
 12323  004966  26D9               	addwf	fsr2l,f,c
 12324  004968  5046               	movf	f_sync@fp+1,w,c
 12325  00496A  22DA               	addwfc	fsr2h,f,c
 12326  00496C  AADF               	btfss	indf2,5,c
 12327  00496E  D08D               	goto	l6276
 12328                           
 12329                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 12330  004970  C045  FFD9         	movff	f_sync@fp,fsr2l
 12331  004974  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12332  004978  CFDE F031          	movff	postinc2,move_window@fs
 12333  00497C  CFDD F032          	movff	postdec2,move_window@fs+1
 12334  004980  EE20 F01A          	lfsr	2,26
 12335  004984  5045               	movf	f_sync@fp,w,c
 12336  004986  26D9               	addwf	fsr2l,f,c
 12337  004988  5046               	movf	f_sync@fp+1,w,c
 12338  00498A  22DA               	addwfc	fsr2h,f,c
 12339  00498C  CFDE F033          	movff	postinc2,move_window@sector
 12340  004990  CFDE F034          	movff	postinc2,move_window@sector+1
 12341  004994  CFDE F035          	movff	postinc2,move_window@sector+2
 12342  004998  CFDE F036          	movff	postinc2,move_window@sector+3
 12343  00499C  EC87  F02B         	call	_move_window	;wreg free
 12344  0049A0  6E4B               	movwf	f_sync@res,c
 12345                           
 12346                           ;ff.c: 2834:    if (res == FR_OK) {
 12347  0049A2  504B               	movf	f_sync@res,w,c
 12348  0049A4  A4D8               	btfss	status,2,c
 12349  0049A6  D071               	goto	l6276
 12350                           
 12351                           ;ff.c: 2835:     dir = fp->dir_ptr;
 12352  0049A8  EE20 F01E          	lfsr	2,30
 12353  0049AC  5045               	movf	f_sync@fp,w,c
 12354  0049AE  26D9               	addwf	fsr2l,f,c
 12355  0049B0  5046               	movf	f_sync@fp+1,w,c
 12356  0049B2  22DA               	addwfc	fsr2h,f,c
 12357  0049B4  CFDE F04C          	movff	postinc2,f_sync@dir
 12358  0049B8  CFDD F04D          	movff	postdec2,f_sync@dir+1
 12359                           
 12360                           ;ff.c: 2836:     dir[11] |= 0x20;
 12361  0049BC  EE20 F00B          	lfsr	2,11
 12362  0049C0  504C               	movf	f_sync@dir,w,c
 12363  0049C2  26D9               	addwf	fsr2l,f,c
 12364  0049C4  504D               	movf	f_sync@dir+1,w,c
 12365  0049C6  22DA               	addwfc	fsr2h,f,c
 12366  0049C8  0E00               	movlw	0
 12367  0049CA  8ADB               	bsf	plusw2,5,c
 12368                           
 12369                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 12370  0049CC  EE20 F00A          	lfsr	2,10
 12371  0049D0  5045               	movf	f_sync@fp,w,c
 12372  0049D2  26D9               	addwf	fsr2l,f,c
 12373  0049D4  5046               	movf	f_sync@fp+1,w,c
 12374  0049D6  22DA               	addwfc	fsr2h,f,c
 12375  0049D8  EE10 F01C          	lfsr	1,28
 12376  0049DC  504C               	movf	f_sync@dir,w,c
 12377  0049DE  26E1               	addwf	fsr1l,f,c
 12378  0049E0  504D               	movf	f_sync@dir+1,w,c
 12379  0049E2  22E2               	addwfc	fsr1h,f,c
 12380  0049E4  CFDE FFE6          	movff	postinc2,postinc1
 12381  0049E8  CFDE FFE6          	movff	postinc2,postinc1
 12382  0049EC  CFDE FFE6          	movff	postinc2,postinc1
 12383  0049F0  CFDE FFE6          	movff	postinc2,postinc1
 12384                           
 12385                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 12386  0049F4  C04C  F001         	movff	f_sync@dir,st_clust@dir
 12387  0049F8  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 12388  0049FC  EE20 F00E          	lfsr	2,14
 12389  004A00  5045               	movf	f_sync@fp,w,c
 12390  004A02  26D9               	addwf	fsr2l,f,c
 12391  004A04  5046               	movf	f_sync@fp+1,w,c
 12392  004A06  22DA               	addwfc	fsr2h,f,c
 12393  004A08  CFDE F003          	movff	postinc2,st_clust@cl
 12394  004A0C  CFDE F004          	movff	postinc2,st_clust@cl+1
 12395  004A10  CFDE F005          	movff	postinc2,st_clust@cl+2
 12396  004A14  CFDE F006          	movff	postinc2,st_clust@cl+3
 12397  004A18  EC98  F02E         	call	_st_clust	;wreg free
 12398                           
 12399                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 12400  004A1C  EE20 F016          	lfsr	2,22
 12401  004A20  504C               	movf	f_sync@dir,w,c
 12402  004A22  26D9               	addwf	fsr2l,f,c
 12403  004A24  504D               	movf	f_sync@dir+1,w,c
 12404  004A26  22DA               	addwfc	fsr2h,f,c
 12405  004A28  0E00               	movlw	0
 12406  004A2A  6EDE               	movwf	postinc2,c
 12407  004A2C  0E00               	movlw	0
 12408  004A2E  6EDE               	movwf	postinc2,c
 12409  004A30  0E21               	movlw	33
 12410  004A32  6EDE               	movwf	postinc2,c
 12411  004A34  0E46               	movlw	70
 12412  004A36  6EDD               	movwf	postdec2,c
 12413                           
 12414                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 12415  004A38  EE20 F012          	lfsr	2,18
 12416  004A3C  504C               	movf	f_sync@dir,w,c
 12417  004A3E  26D9               	addwf	fsr2l,f,c
 12418  004A40  504D               	movf	f_sync@dir+1,w,c
 12419  004A42  22DA               	addwfc	fsr2h,f,c
 12420  004A44  0E00               	movlw	0
 12421  004A46  6EDE               	movwf	postinc2,c
 12422  004A48  0E00               	movlw	0
 12423  004A4A  6EDD               	movwf	postdec2,c
 12424                           
 12425                           ;ff.c: 2842:     fp->flag &= ~0x20;
 12426  004A4C  EE20 F004          	lfsr	2,4
 12427  004A50  5045               	movf	f_sync@fp,w,c
 12428  004A52  26D9               	addwf	fsr2l,f,c
 12429  004A54  5046               	movf	f_sync@fp+1,w,c
 12430  004A56  22DA               	addwfc	fsr2h,f,c
 12431  004A58  0EDF               	movlw	223
 12432  004A5A  16DF               	andwf	indf2,f,c
 12433                           
 12434                           ;ff.c: 2843:     fp->fs->wflag = 1;
 12435  004A5C  C045  FFD9         	movff	f_sync@fp,fsr2l
 12436  004A60  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12437  004A64  EE10 F004          	lfsr	1,4
 12438  004A68  50DE               	movf	postinc2,w,c
 12439  004A6A  26E1               	addwf	fsr1l,f,c
 12440  004A6C  50DD               	movf	postdec2,w,c
 12441  004A6E  22E2               	addwfc	fsr1h,f,c
 12442  004A70  0E01               	movlw	1
 12443  004A72  6EE7               	movwf	indf1,c
 12444                           
 12445                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 12446  004A74  C045  FFD9         	movff	f_sync@fp,fsr2l
 12447  004A78  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12448  004A7C  CFDE F03A          	movff	postinc2,sync_fs@fs
 12449  004A80  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 12450  004A84  ECB4  F021         	call	_sync_fs	;wreg free
 12451  004A88  6E4B               	movwf	f_sync@res,c
 12452  004A8A                     l6276:
 12453                           
 12454                           ;ff.c: 2849:  return res;
 12455  004A8A  504B               	movf	f_sync@res,w,c
 12456  004A8C  0012               	return		;funcret
 12457  004A8E                     __end_of_f_sync:
 12458                           	opt callstack 0
 12459                           
 12460 ;; *************** function _validate *****************
 12461 ;; Defined at:
 12462 ;;		line 2372 in file "ff.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;  obj             2    1[COMRAM] PTR void 
 12465 ;;		 -> Fil(32), 
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;  fil             2    7[COMRAM] PTR struct .
 12468 ;;		 -> Fil(32), 
 12469 ;; Return value:  Size  Location     Type
 12470 ;;                  1    wreg      enum E93
 12471 ;; Registers used:
 12472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12473 ;; Tracked objects:
 12474 ;;		On entry : 0/0
 12475 ;;		On exit  : 0/0
 12476 ;;		Unchanged: 0/0
 12477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12478 ;;      Params:         2       0       0       0       0       0       0       0       0
 12479 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12480 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12481 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12482 ;;Total ram usage:        8 bytes
 12483 ;; Hardware stack levels used:    1
 12484 ;; Hardware stack levels required when called:    1
 12485 ;; This function calls:
 12486 ;;		_disk_status
 12487 ;; This function is called by:
 12488 ;;		_f_write
 12489 ;;		_f_sync
 12490 ;;		_f_close
 12491 ;;		_f_lseek
 12492 ;;		_f_read
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           	psect	text36
 12497  0057B4                     __ptext36:
 12498                           	opt callstack 0
 12499  0057B4                     _validate:
 12500                           	opt callstack 26
 12501                           
 12502                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 12503                           
 12504                           ;incstack = 0
 12505  0057B4  C002  F008         	movff	validate@obj,validate@fil
 12506  0057B8  C003  F009         	movff	validate@obj+1,validate@fil+1
 12507                           
 12508                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 12509  0057BC  5008               	movf	validate@fil,w,c
 12510  0057BE  1009               	iorwf	validate@fil+1,w,c
 12511  0057C0  B4D8               	btfsc	status,2,c
 12512  0057C2  D03E               	goto	u7550
 12513  0057C4  C008  FFD9         	movff	validate@fil,fsr2l
 12514  0057C8  C009  FFDA         	movff	validate@fil+1,fsr2h
 12515  0057CC  50DE               	movf	postinc2,w,c
 12516  0057CE  10DE               	iorwf	postinc2,w,c
 12517  0057D0  B4D8               	btfsc	status,2,c
 12518  0057D2  D036               	goto	u7550
 12519  0057D4  C008  FFD9         	movff	validate@fil,fsr2l
 12520  0057D8  C009  FFDA         	movff	validate@fil+1,fsr2h
 12521  0057DC  CFDE F004          	movff	postinc2,??_validate
 12522  0057E0  CFDD F005          	movff	postdec2,??_validate+1
 12523  0057E4  C004  FFD9         	movff	??_validate,fsr2l
 12524  0057E8  C005  FFDA         	movff	??_validate+1,fsr2h
 12525  0057EC  50DF               	movf	indf2,w,c
 12526  0057EE  B4D8               	btfsc	status,2,c
 12527  0057F0  D027               	goto	u7550
 12528  0057F2  EE20 F002          	lfsr	2,2
 12529  0057F6  5008               	movf	validate@fil,w,c
 12530  0057F8  26D9               	addwf	fsr2l,f,c
 12531  0057FA  5009               	movf	validate@fil+1,w,c
 12532  0057FC  22DA               	addwfc	fsr2h,f,c
 12533  0057FE  C008  FFE1         	movff	validate@fil,fsr1l
 12534  005802  C009  FFE2         	movff	validate@fil+1,fsr1h
 12535  005806  EE00 F006          	lfsr	0,6
 12536  00580A  50E6               	movf	postinc1,w,c
 12537  00580C  26E9               	addwf	fsr0l,f,c
 12538  00580E  50E5               	movf	postdec1,w,c
 12539  005810  22EA               	addwfc	fsr0h,f,c
 12540  005812  50DE               	movf	postinc2,w,c
 12541  005814  18EE               	xorwf	postinc0,w,c
 12542  005816  E114               	bnz	l5706
 12543  005818  50DE               	movf	postinc2,w,c
 12544  00581A  18EE               	xorwf	postinc0,w,c
 12545  00581C  A4D8               	btfss	status,2,c
 12546  00581E  D010               	goto	u7550
 12547  005820  C008  FFD9         	movff	validate@fil,fsr2l
 12548  005824  C009  FFDA         	movff	validate@fil+1,fsr2h
 12549  005828  EE10 F001          	lfsr	1,1
 12550  00582C  50DE               	movf	postinc2,w,c
 12551  00582E  26E1               	addwf	fsr1l,f,c
 12552  005830  50DD               	movf	postdec2,w,c
 12553  005832  22E2               	addwfc	fsr1h,f,c
 12554  005834  50E7               	movf	indf1,w,c
 12555  005836  ECF2  F02E         	call	_disk_status
 12556  00583A  6E04               	movwf	??_validate& (0+255),c
 12557  00583C  A004               	btfss	??_validate,0,c
 12558  00583E  D002               	goto	l5710
 12559  005840                     u7550:
 12560  005840                     l5706:
 12561                           
 12562                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 12563  005840  0E09               	movlw	9
 12564  005842  0012               	return	
 12565  005844                     l5710:
 12566                           
 12567                           ;ff.c: 2384:  return FR_OK;
 12568  005844  0E00               	movlw	0
 12569  005846  0012               	return		;funcret
 12570  005848                     __end_of_validate:
 12571                           	opt callstack 0
 12572                           
 12573 ;; *************** function _disk_status *****************
 12574 ;; Defined at:
 12575 ;;		line 356 in file "diskio.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;  pdrv            1    wreg     unsigned char 
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;  pdrv            1    0[COMRAM] unsigned char 
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  1    wreg      unsigned char 
 12582 ;; Registers used:
 12583 ;;		wreg, status,2
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12589 ;;      Params:         0       0       0       0       0       0       0       0       0
 12590 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12592 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12593 ;;Total ram usage:        1 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; This function calls:
 12596 ;;		Nothing
 12597 ;; This function is called by:
 12598 ;;		_find_volume
 12599 ;;		_validate
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           	psect	text37
 12604  005DE4                     __ptext37:
 12605                           	opt callstack 0
 12606  005DE4                     _disk_status:
 12607                           	opt callstack 26
 12608                           
 12609                           ;incstack = 0
 12610                           ;disk_status@pdrv stored from wreg
 12611  005DE4  6E01               	movwf	disk_status@pdrv,c
 12612                           
 12613                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 12614  005DE6  5001               	movf	disk_status@pdrv,w,c
 12615  005DE8  B4D8               	btfsc	status,2,c
 12616  005DEA  D002               	goto	l4936
 12617  005DEC  0E01               	movlw	1
 12618  005DEE  0012               	return	
 12619  005DF0                     l4936:
 12620                           
 12621                           ;diskio.c: 361:  return Stat;
 12622  005DF0  0100               	movlb	0	; () banked
 12623  005DF2  51F1               	movf	_Stat& (0+255),w,b
 12624  005DF4  0012               	return		;funcret
 12625  005DF6                     __end_of_disk_status:
 12626                           	opt callstack 0
 12627                           
 12628 ;; *************** function _sync_fs *****************
 12629 ;; Defined at:
 12630 ;;		line 760 in file "ff.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  fs              2   57[COMRAM] PTR struct .
 12633 ;;		 -> FatFs(558), NULL(0), 
 12634 ;; Auto vars:     Size  Location     Type
 12635 ;;  res             1   67[COMRAM] enum E93
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      enum E93
 12638 ;; Registers used:
 12639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12645 ;;      Params:         2       0       0       0       0       0       0       0       0
 12646 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12647 ;;      Temps:          8       0       0       0       0       0       0       0       0
 12648 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12649 ;;Total ram usage:       11 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:    7
 12652 ;; This function calls:
 12653 ;;		_disk_ioctl
 12654 ;;		_disk_write
 12655 ;;		_mem_set
 12656 ;;		_sync_window
 12657 ;; This function is called by:
 12658 ;;		_f_sync
 12659 ;; This function uses a non-reentrant model
 12660 ;;
 12661                           
 12662                           	psect	text38
 12663  004368                     __ptext38:
 12664                           	opt callstack 0
 12665  004368                     _sync_fs:
 12666                           	opt callstack 20
 12667                           
 12668                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 12669                           
 12670                           ;incstack = 0
 12671  004368  C03A  F01C         	movff	sync_fs@fs,sync_window@fs
 12672  00436C  C03B  F01D         	movff	sync_fs@fs+1,sync_window@fs+1
 12673  004370  EC9D  F022         	call	_sync_window	;wreg free
 12674  004374  6E44               	movwf	sync_fs@res,c
 12675                           
 12676                           ;ff.c: 768:  if (res == FR_OK) {
 12677  004376  5044               	movf	sync_fs@res,w,c
 12678  004378  A4D8               	btfss	status,2,c
 12679  00437A  D0DD               	goto	l242
 12680                           
 12681                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 12682  00437C  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 12683  004380  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 12684  004384  0E03               	movlw	3
 12685  004386  18DE               	xorwf	postinc2,w,c
 12686  004388  A4D8               	btfss	status,2,c
 12687  00438A  D0C1               	goto	l5402
 12688  00438C  EE20 F005          	lfsr	2,5
 12689  004390  503A               	movf	sync_fs@fs,w,c
 12690  004392  26D9               	addwf	fsr2l,f,c
 12691  004394  503B               	movf	sync_fs@fs+1,w,c
 12692  004396  22DA               	addwfc	fsr2h,f,c
 12693  004398  04DE               	decf	postinc2,w,c
 12694  00439A  A4D8               	btfss	status,2,c
 12695  00439C  D0B8               	goto	l5402
 12696                           
 12697                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 12698  00439E  0E2E               	movlw	46
 12699  0043A0  243A               	addwf	sync_fs@fs,w,c
 12700  0043A2  6E01               	movwf	mem_set@dst,c
 12701  0043A4  0E00               	movlw	0
 12702  0043A6  203B               	addwfc	sync_fs@fs+1,w,c
 12703  0043A8  6E02               	movwf	mem_set@dst+1,c
 12704  0043AA  0E00               	movlw	0
 12705  0043AC  6E04               	movwf	mem_set@val+1,c
 12706  0043AE  0E00               	movlw	0
 12707  0043B0  6E03               	movwf	mem_set@val,c
 12708  0043B2  0E02               	movlw	2
 12709  0043B4  6E06               	movwf	mem_set@cnt+1,c
 12710  0043B6  0E00               	movlw	0
 12711  0043B8  6E05               	movwf	mem_set@cnt,c
 12712  0043BA  EC82  F02E         	call	_mem_set	;wreg free
 12713                           
 12714                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 12715  0043BE  EE22 F02C          	lfsr	2,556
 12716  0043C2  503A               	movf	sync_fs@fs,w,c
 12717  0043C4  26D9               	addwf	fsr2l,f,c
 12718  0043C6  503B               	movf	sync_fs@fs+1,w,c
 12719  0043C8  22DA               	addwfc	fsr2h,f,c
 12720  0043CA  0E55               	movlw	85
 12721  0043CC  6EDE               	movwf	postinc2,c
 12722  0043CE  0EAA               	movlw	170
 12723  0043D0  6EDD               	movwf	postdec2,c
 12724                           
 12725                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 12726  0043D2  EE20 F02E          	lfsr	2,46
 12727  0043D6  503A               	movf	sync_fs@fs,w,c
 12728  0043D8  26D9               	addwf	fsr2l,f,c
 12729  0043DA  503B               	movf	sync_fs@fs+1,w,c
 12730  0043DC  22DA               	addwfc	fsr2h,f,c
 12731  0043DE  0E52               	movlw	82
 12732  0043E0  6EDE               	movwf	postinc2,c
 12733  0043E2  0E52               	movlw	82
 12734  0043E4  6EDE               	movwf	postinc2,c
 12735  0043E6  0E61               	movlw	97
 12736  0043E8  6EDE               	movwf	postinc2,c
 12737  0043EA  0E41               	movlw	65
 12738  0043EC  6EDD               	movwf	postdec2,c
 12739                           
 12740                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 12741  0043EE  EE22 F012          	lfsr	2,530
 12742  0043F2  503A               	movf	sync_fs@fs,w,c
 12743  0043F4  26D9               	addwf	fsr2l,f,c
 12744  0043F6  503B               	movf	sync_fs@fs+1,w,c
 12745  0043F8  22DA               	addwfc	fsr2h,f,c
 12746  0043FA  0E72               	movlw	114
 12747  0043FC  6EDE               	movwf	postinc2,c
 12748  0043FE  0E72               	movlw	114
 12749  004400  6EDE               	movwf	postinc2,c
 12750  004402  0E41               	movlw	65
 12751  004404  6EDE               	movwf	postinc2,c
 12752  004406  0E61               	movlw	97
 12753  004408  6EDD               	movwf	postdec2,c
 12754                           
 12755                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 12756  00440A  EE20 F00E          	lfsr	2,14
 12757  00440E  503A               	movf	sync_fs@fs,w,c
 12758  004410  26D9               	addwf	fsr2l,f,c
 12759  004412  503B               	movf	sync_fs@fs+1,w,c
 12760  004414  22DA               	addwfc	fsr2h,f,c
 12761  004416  EE12 F016          	lfsr	1,534
 12762  00441A  503A               	movf	sync_fs@fs,w,c
 12763  00441C  26E1               	addwf	fsr1l,f,c
 12764  00441E  503B               	movf	sync_fs@fs+1,w,c
 12765  004420  22E2               	addwfc	fsr1h,f,c
 12766  004422  CFDE FFE6          	movff	postinc2,postinc1
 12767  004426  CFDE FFE6          	movff	postinc2,postinc1
 12768  00442A  CFDE FFE6          	movff	postinc2,postinc1
 12769  00442E  CFDE FFE6          	movff	postinc2,postinc1
 12770                           
 12771                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 12772  004432  EE20 F00A          	lfsr	2,10
 12773  004436  503A               	movf	sync_fs@fs,w,c
 12774  004438  26D9               	addwf	fsr2l,f,c
 12775  00443A  503B               	movf	sync_fs@fs+1,w,c
 12776  00443C  22DA               	addwfc	fsr2h,f,c
 12777  00443E  EE12 F01A          	lfsr	1,538
 12778  004442  503A               	movf	sync_fs@fs,w,c
 12779  004444  26E1               	addwf	fsr1l,f,c
 12780  004446  503B               	movf	sync_fs@fs+1,w,c
 12781  004448  22E2               	addwfc	fsr1h,f,c
 12782  00444A  CFDE FFE6          	movff	postinc2,postinc1
 12783  00444E  CFDE FFE6          	movff	postinc2,postinc1
 12784  004452  CFDE FFE6          	movff	postinc2,postinc1
 12785  004456  CFDE FFE6          	movff	postinc2,postinc1
 12786                           
 12787                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 12788  00445A  EE20 F01A          	lfsr	2,26
 12789  00445E  503A               	movf	sync_fs@fs,w,c
 12790  004460  26D9               	addwf	fsr2l,f,c
 12791  004462  503B               	movf	sync_fs@fs+1,w,c
 12792  004464  22DA               	addwfc	fsr2h,f,c
 12793  004466  CFDE F03C          	movff	postinc2,??_sync_fs
 12794  00446A  CFDE F03D          	movff	postinc2,??_sync_fs+1
 12795  00446E  CFDE F03E          	movff	postinc2,??_sync_fs+2
 12796  004472  CFDE F03F          	movff	postinc2,??_sync_fs+3
 12797  004476  0E01               	movlw	1
 12798  004478  243C               	addwf	??_sync_fs,w,c
 12799  00447A  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 12800  00447C  0E00               	movlw	0
 12801  00447E  203D               	addwfc	??_sync_fs+1,w,c
 12802  004480  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 12803  004482  0E00               	movlw	0
 12804  004484  203E               	addwfc	??_sync_fs+2,w,c
 12805  004486  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 12806  004488  0E00               	movlw	0
 12807  00448A  203F               	addwfc	??_sync_fs+3,w,c
 12808  00448C  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 12809  00448E  EE20 F02A          	lfsr	2,42
 12810  004492  503A               	movf	sync_fs@fs,w,c
 12811  004494  26D9               	addwf	fsr2l,f,c
 12812  004496  503B               	movf	sync_fs@fs+1,w,c
 12813  004498  22DA               	addwfc	fsr2h,f,c
 12814  00449A  C040  FFDE         	movff	??_sync_fs+4,postinc2
 12815  00449E  C041  FFDE         	movff	??_sync_fs+5,postinc2
 12816  0044A2  C042  FFDE         	movff	??_sync_fs+6,postinc2
 12817  0044A6  C043  FFDE         	movff	??_sync_fs+7,postinc2
 12818                           
 12819                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 12820  0044AA  0E2E               	movlw	46
 12821  0044AC  243A               	addwf	sync_fs@fs,w,c
 12822  0044AE  6E3C               	movwf	??_sync_fs& (0+255),c
 12823  0044B0  0E00               	movlw	0
 12824  0044B2  203B               	addwfc	sync_fs@fs+1,w,c
 12825  0044B4  6E3D               	movwf	(??_sync_fs+1)& (0+255),c
 12826  0044B6  C03C  F011         	movff	??_sync_fs,disk_write@buff
 12827  0044BA  C03D  F012         	movff	??_sync_fs+1,disk_write@buff+1
 12828  0044BE  5011               	movf	disk_write@buff,w,c
 12829  0044C0  1012               	iorwf	disk_write@buff+1,w,c
 12830  0044C2  A4D8               	btfss	status,2,c
 12831  0044C4  0E20               	movlw	32
 12832  0044C6  6E13               	movwf	disk_write@buff+2,c
 12833  0044C8  EE20 F02A          	lfsr	2,42
 12834  0044CC  503A               	movf	sync_fs@fs,w,c
 12835  0044CE  26D9               	addwf	fsr2l,f,c
 12836  0044D0  503B               	movf	sync_fs@fs+1,w,c
 12837  0044D2  22DA               	addwfc	fsr2h,f,c
 12838  0044D4  CFDE F014          	movff	postinc2,disk_write@sector
 12839  0044D8  CFDE F015          	movff	postinc2,disk_write@sector+1
 12840  0044DC  CFDE F016          	movff	postinc2,disk_write@sector+2
 12841  0044E0  CFDE F017          	movff	postinc2,disk_write@sector+3
 12842  0044E4  0E00               	movlw	0
 12843  0044E6  6E19               	movwf	disk_write@count+1,c
 12844  0044E8  0E01               	movlw	1
 12845  0044EA  6E18               	movwf	disk_write@count,c
 12846  0044EC  EE20 F001          	lfsr	2,1
 12847  0044F0  503A               	movf	sync_fs@fs,w,c
 12848  0044F2  26D9               	addwf	fsr2l,f,c
 12849  0044F4  503B               	movf	sync_fs@fs+1,w,c
 12850  0044F6  22DA               	addwfc	fsr2h,f,c
 12851  0044F8  50DF               	movf	indf2,w,c
 12852  0044FA  ECE7  F025         	call	_disk_write
 12853                           
 12854                           ;ff.c: 781:    fs->fsi_flag = 0;
 12855  0044FE  EE20 F005          	lfsr	2,5
 12856  004502  503A               	movf	sync_fs@fs,w,c
 12857  004504  26D9               	addwf	fsr2l,f,c
 12858  004506  503B               	movf	sync_fs@fs+1,w,c
 12859  004508  22DA               	addwfc	fsr2h,f,c
 12860  00450A  0E00               	movlw	0
 12861  00450C  6EDF               	movwf	indf2,c
 12862  00450E                     l5402:
 12863                           
 12864                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 12865  00450E  0E00               	movlw	0
 12866  004510  6E11               	movwf	disk_ioctl@cmd,c
 12867  004512  0E00               	movlw	0
 12868  004514  6E12               	movwf	disk_ioctl@buff,c
 12869  004516  0E00               	movlw	0
 12870  004518  6E13               	movwf	disk_ioctl@buff+1,c
 12871  00451A  EE20 F001          	lfsr	2,1
 12872  00451E  503A               	movf	sync_fs@fs,w,c
 12873  004520  26D9               	addwf	fsr2l,f,c
 12874  004522  503B               	movf	sync_fs@fs+1,w,c
 12875  004524  22DA               	addwfc	fsr2h,f,c
 12876  004526  50DF               	movf	indf2,w,c
 12877  004528  ECAB  F00F         	call	_disk_ioctl
 12878  00452C  0900               	iorlw	0
 12879  00452E  B4D8               	btfsc	status,2,c
 12880  004530  D002               	goto	l242
 12881                           
 12882                           ;ff.c: 785:    res = FR_DISK_ERR;
 12883  004532  0E01               	movlw	1
 12884  004534  6E44               	movwf	sync_fs@res,c
 12885  004536                     l242:
 12886                           
 12887                           ;ff.c: 788:  return res;
 12888  004536  5044               	movf	sync_fs@res,w,c
 12889  004538  0012               	return		;funcret
 12890  00453A                     __end_of_sync_fs:
 12891                           	opt callstack 0
 12892                           
 12893 ;; *************** function _mem_set *****************
 12894 ;; Defined at:
 12895 ;;		line 524 in file "ff.c"
 12896 ;; Parameters:    Size  Location     Type
 12897 ;;  dst             2    0[COMRAM] PTR void 
 12898 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 12899 ;;  val             2    2[COMRAM] int 
 12900 ;;  cnt             2    4[COMRAM] unsigned short 
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;  d               2    6[COMRAM] PTR unsigned char 
 12903 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  1    wreg      void 
 12906 ;; Registers used:
 12907 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12908 ;; Tracked objects:
 12909 ;;		On entry : 0/0
 12910 ;;		On exit  : 0/0
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12913 ;;      Params:         6       0       0       0       0       0       0       0       0
 12914 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12915 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12916 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12917 ;;Total ram usage:        8 bytes
 12918 ;; Hardware stack levels used:    1
 12919 ;; This function calls:
 12920 ;;		Nothing
 12921 ;; This function is called by:
 12922 ;;		_sync_fs
 12923 ;;		_dir_next
 12924 ;;		_dir_register
 12925 ;;		_create_name
 12926 ;; This function uses a non-reentrant model
 12927 ;;
 12928                           
 12929                           	psect	text39
 12930  005D04                     __ptext39:
 12931                           	opt callstack 0
 12932  005D04                     _mem_set:
 12933                           	opt callstack 25
 12934                           
 12935                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 12936                           
 12937                           ;incstack = 0
 12938  005D04  C001  F007         	movff	mem_set@dst,mem_set@d
 12939  005D08  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 12940                           
 12941                           ;ff.c: 527:  while (cnt--)
 12942  005D0C  D008               	goto	l4834
 12943  005D0E                     l4830:
 12944                           
 12945                           ;ff.c: 528:   *d++ = (BYTE)val;
 12946  005D0E  C007  FFD9         	movff	mem_set@d,fsr2l
 12947  005D12  C008  FFDA         	movff	mem_set@d+1,fsr2h
 12948  005D16  C003  FFDF         	movff	mem_set@val,indf2
 12949  005D1A  4A07               	infsnz	mem_set@d,f,c
 12950  005D1C  2A08               	incf	mem_set@d+1,f,c
 12951  005D1E                     l4834:
 12952                           
 12953                           ;ff.c: 527:  while (cnt--)
 12954  005D1E  0605               	decf	mem_set@cnt,f,c
 12955  005D20  A0D8               	btfss	status,0,c
 12956  005D22  0606               	decf	mem_set@cnt+1,f,c
 12957  005D24  2805               	incf	mem_set@cnt,w,c
 12958  005D26  E1F3               	bnz	l4830
 12959  005D28  2806               	incf	mem_set@cnt+1,w,c
 12960  005D2A  B4D8               	btfsc	status,2,c
 12961  005D2C  0012               	return	
 12962  005D2E  D7EF               	goto	l4830
 12963  005D30                     __end_of_mem_set:
 12964                           	opt callstack 0
 12965                           
 12966 ;; *************** function _disk_ioctl *****************
 12967 ;; Defined at:
 12968 ;;		line 446 in file "diskio.c"
 12969 ;; Parameters:    Size  Location     Type
 12970 ;;  pdrv            1    wreg     unsigned char 
 12971 ;;  cmd             1   16[COMRAM] unsigned char 
 12972 ;;  buff            2   17[COMRAM] PTR void 
 12973 ;;		 -> NULL(0), 
 12974 ;; Auto vars:     Size  Location     Type
 12975 ;;  pdrv            1   48[COMRAM] unsigned char 
 12976 ;;  csd            16   32[COMRAM] unsigned char [16]
 12977 ;;  csize           4   49[COMRAM] unsigned long 
 12978 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 12979 ;;		 -> NULL(0), 
 12980 ;;  n               1   54[COMRAM] unsigned char 
 12981 ;;  res             1   53[COMRAM] enum E43
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1    wreg      enum E43
 12984 ;; Registers used:
 12985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12991 ;;      Params:         3       0       0       0       0       0       0       0       0
 12992 ;;      Locals:        25       0       0       0       0       0       0       0       0
 12993 ;;      Temps:         13       0       0       0       0       0       0       0       0
 12994 ;;      Totals:        41       0       0       0       0       0       0       0       0
 12995 ;;Total ram usage:       41 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:    5
 12998 ;; This function calls:
 12999 ;;		_SPI1_Exchange8bit
 13000 ;;		___wmul
 13001 ;;		_deselect
 13002 ;;		_rcvr_datablock
 13003 ;;		_select
 13004 ;;		_send_cmd
 13005 ;; This function is called by:
 13006 ;;		_sync_fs
 13007 ;; This function uses a non-reentrant model
 13008 ;;
 13009                           
 13010                           	psect	text40
 13011  001F56                     __ptext40:
 13012                           	opt callstack 0
 13013  001F56                     _disk_ioctl:
 13014                           	opt callstack 21
 13015                           
 13016                           ;incstack = 0
 13017                           ;disk_ioctl@pdrv stored from wreg
 13018  001F56  6E31               	movwf	disk_ioctl@pdrv,c
 13019                           
 13020                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 13021  001F58  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 13022  001F5C  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 13023                           
 13024                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 13025  001F60  5031               	movf	disk_ioctl@pdrv,w,c
 13026  001F62  B4D8               	btfsc	status,2,c
 13027  001F64  D002               	goto	l4948
 13028  001F66  0E04               	movlw	4
 13029  001F68  0012               	return	
 13030  001F6A                     l4948:
 13031                           
 13032                           ;diskio.c: 459:  res = RES_ERROR;
 13033  001F6A  0E01               	movlw	1
 13034  001F6C  6E36               	movwf	disk_ioctl@res,c
 13035                           
 13036                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 13037  001F6E  0100               	movlb	0	; () banked
 13038  001F70  A1F1               	btfss	_Stat& (0+255),0,b
 13039  001F72  D21B               	goto	l5048
 13040                           
 13041                           ; BSR set to: 0
 13042  001F74  0E03               	movlw	3
 13043  001F76  0012               	return	
 13044  001F78                     l4956:
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;diskio.c: 465:   if (select()) res = RES_OK;
 13048  001F78  ECE3  F02E         	call	_select	;wreg free
 13049  001F7C  0900               	iorlw	0
 13050  001F7E  B4D8               	btfsc	status,2,c
 13051  001F80  D235               	goto	l5050
 13052  001F82                     u6050:
 13053  001F82  0E00               	movlw	0
 13054  001F84  D210               	goto	L16
 13055  001F86                     l4960:
 13056                           
 13057                           ; BSR set to: 0
 13058                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13059  001F86  0E00               	movlw	0
 13060  001F88  6E0B               	movwf	send_cmd@arg,c
 13061  001F8A  0E00               	movlw	0
 13062  001F8C  6E0C               	movwf	send_cmd@arg+1,c
 13063  001F8E  0E00               	movlw	0
 13064  001F90  6E0D               	movwf	send_cmd@arg+2,c
 13065  001F92  0E00               	movlw	0
 13066  001F94  6E0E               	movwf	send_cmd@arg+3,c
 13067  001F96  0E09               	movlw	9
 13068  001F98  EC0B  F02E         	call	_send_cmd
 13069  001F9C  0900               	iorlw	0
 13070  001F9E  A4D8               	btfss	status,2,c
 13071  001FA0  D225               	goto	l5050
 13072  001FA2  0E21               	movlw	low disk_ioctl@csd
 13073  001FA4  6E02               	movwf	rcvr_datablock@buff,c
 13074  001FA6  0E00               	movlw	high disk_ioctl@csd
 13075  001FA8  6E03               	movwf	rcvr_datablock@buff+1,c
 13076  001FAA  0E00               	movlw	0
 13077  001FAC  6E05               	movwf	rcvr_datablock@btr+1,c
 13078  001FAE  0E10               	movlw	16
 13079  001FB0  6E04               	movwf	rcvr_datablock@btr,c
 13080  001FB2  EC27  F02D         	call	_rcvr_datablock	;wreg free
 13081  001FB6  0900               	iorlw	0
 13082  001FB8  B4D8               	btfsc	status,2,c
 13083  001FBA  D218               	goto	l5050
 13084                           
 13085                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 13086  001FBC  4421               	rlncf	disk_ioctl@csd,w,c
 13087  001FBE  46E8               	rlncf	wreg,f,c
 13088  001FC0  0B03               	andlw	3
 13089  001FC2  06E8               	decf	wreg,f,c
 13090  001FC4  A4D8               	btfss	status,2,c
 13091  001FC6  D04E               	goto	l4970
 13092                           
 13093                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 13094  001FC8  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 13095  001FCC  0E3F               	movlw	63
 13096  001FCE  1614               	andwf	??_disk_ioctl,f,c
 13097  001FD0  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 13098  001FD4  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13099  001FD6  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13100  001FD8  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13101  001FDA  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 13102  001FDE  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 13103  001FE2  6A16               	clrf	??_disk_ioctl+2,c
 13104  001FE4  6A15               	clrf	??_disk_ioctl+1,c
 13105  001FE6  5029               	movf	disk_ioctl@csd+8,w,c
 13106  001FE8  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13107  001FEA  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13108  001FEC  502A               	movf	disk_ioctl@csd+9,w,c
 13109  001FEE  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 13110  001FF0  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13111  001FF2  5019               	movf	??_disk_ioctl+5,w,c
 13112  001FF4  261B               	addwf	??_disk_ioctl+7,f,c
 13113  001FF6  501A               	movf	??_disk_ioctl+6,w,c
 13114  001FF8  221C               	addwfc	??_disk_ioctl+8,f,c
 13115  001FFA  501B               	movf	??_disk_ioctl+7,w,c
 13116  001FFC  2415               	addwf	??_disk_ioctl+1,w,c
 13117  001FFE  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 13118  002000  501C               	movf	??_disk_ioctl+8,w,c
 13119  002002  2016               	addwfc	??_disk_ioctl+2,w,c
 13120  002004  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 13121  002006  0E00               	movlw	0
 13122  002008  2017               	addwfc	??_disk_ioctl+3,w,c
 13123  00200A  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 13124  00200C  0E00               	movlw	0
 13125  00200E  2018               	addwfc	??_disk_ioctl+4,w,c
 13126  002010  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 13127  002012  0E01               	movlw	1
 13128  002014  241D               	addwf	??_disk_ioctl+9,w,c
 13129  002016  6E32               	movwf	disk_ioctl@csize,c
 13130  002018  0E00               	movlw	0
 13131  00201A  201E               	addwfc	??_disk_ioctl+10,w,c
 13132  00201C  6E33               	movwf	disk_ioctl@csize+1,c
 13133  00201E  0E00               	movlw	0
 13134  002020  201F               	addwfc	??_disk_ioctl+11,w,c
 13135  002022  6E34               	movwf	disk_ioctl@csize+2,c
 13136  002024  0E00               	movlw	0
 13137  002026  2020               	addwfc	??_disk_ioctl+12,w,c
 13138  002028  6E35               	movwf	disk_ioctl@csize+3,c
 13139                           
 13140                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 13141  00202A  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 13142  00202E  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 13143  002032  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 13144  002036  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 13145  00203A  0E0A               	movlw	10
 13146  00203C                     u6095:
 13147  00203C  90D8               	bcf	status,0,c
 13148  00203E  3614               	rlcf	??_disk_ioctl,f,c
 13149  002040  3615               	rlcf	??_disk_ioctl+1,f,c
 13150  002042  3616               	rlcf	??_disk_ioctl+2,f,c
 13151  002044  3617               	rlcf	??_disk_ioctl+3,f,c
 13152  002046  2EE8               	decfsz	wreg,f,c
 13153  002048  D7F9               	goto	u6095
 13154  00204A  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13155  00204E  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13156  002052  C014  FFDE         	movff	??_disk_ioctl,postinc2
 13157  002056  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13158  00205A  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13159  00205E  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13160                           
 13161                           ;diskio.c: 473:    } else {
 13162  002062  D78F               	goto	u6050
 13163  002064                     l4970:
 13164                           
 13165                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 13166  002064  6A14               	clrf	??_disk_ioctl& (0+255),c
 13167  002066  AE2B               	btfss	disk_ioctl@csd+10,7,c
 13168  002068  D001               	bra	u6105
 13169  00206A  2A14               	incf	??_disk_ioctl& (0+255),f,c
 13170  00206C                     u6105:
 13171  00206C  0E01               	movlw	1
 13172  00206E  1614               	andwf	??_disk_ioctl,f,c
 13173  002070  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 13174  002074  0E0F               	movlw	15
 13175  002076  1615               	andwf	??_disk_ioctl+1,f,c
 13176  002078  502A               	movf	disk_ioctl@csd+9,w,c
 13177  00207A  0B03               	andlw	3
 13178  00207C  0D02               	mullw	2
 13179  00207E  50F3               	movf	prodl,w,c
 13180  002080  2415               	addwf	??_disk_ioctl+1,w,c
 13181  002082  2414               	addwf	??_disk_ioctl,w,c
 13182  002084  0F02               	addlw	2
 13183  002086  6E37               	movwf	disk_ioctl@n,c
 13184                           
 13185                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 13186  002088  5027               	movf	disk_ioctl@csd+6,w,c
 13187  00208A  0B03               	andlw	3
 13188  00208C  6E14               	movwf	??_disk_ioctl& (0+255),c
 13189  00208E  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13190  002090  0E0A               	movlw	10
 13191  002092                     u6115:
 13192  002092  90D8               	bcf	status,0,c
 13193  002094  3614               	rlcf	??_disk_ioctl,f,c
 13194  002096  3615               	rlcf	??_disk_ioctl+1,f,c
 13195  002098  2EE8               	decfsz	wreg,f,c
 13196  00209A  D7FB               	goto	u6115
 13197  00209C  5028               	movf	disk_ioctl@csd+7,w,c
 13198  00209E  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13199  0020A0  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13200  0020A2  90D8               	bcf	status,0,c
 13201  0020A4  3616               	rlcf	??_disk_ioctl+2,f,c
 13202  0020A6  3617               	rlcf	??_disk_ioctl+3,f,c
 13203  0020A8  90D8               	bcf	status,0,c
 13204  0020AA  3616               	rlcf	??_disk_ioctl+2,f,c
 13205  0020AC  3617               	rlcf	??_disk_ioctl+3,f,c
 13206  0020AE  4429               	rlncf	disk_ioctl@csd+8,w,c
 13207  0020B0  46E8               	rlncf	wreg,f,c
 13208  0020B2  0B03               	andlw	3
 13209  0020B4  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13210  0020B6  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13211  0020B8  5016               	movf	??_disk_ioctl+2,w,c
 13212  0020BA  2618               	addwf	??_disk_ioctl+4,f,c
 13213  0020BC  5017               	movf	??_disk_ioctl+3,w,c
 13214  0020BE  2219               	addwfc	??_disk_ioctl+5,f,c
 13215  0020C0  5014               	movf	??_disk_ioctl,w,c
 13216  0020C2  2618               	addwf	??_disk_ioctl+4,f,c
 13217  0020C4  5015               	movf	??_disk_ioctl+1,w,c
 13218  0020C6  2219               	addwfc	??_disk_ioctl+5,f,c
 13219  0020C8  0E01               	movlw	1
 13220  0020CA  2618               	addwf	??_disk_ioctl+4,f,c
 13221  0020CC  0E00               	movlw	0
 13222  0020CE  2219               	addwfc	??_disk_ioctl+5,f,c
 13223  0020D0  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 13224  0020D4  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 13225  0020D8  6A34               	clrf	disk_ioctl@csize+2,c
 13226  0020DA  6A35               	clrf	disk_ioctl@csize+3,c
 13227                           
 13228                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 13229  0020DC  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 13230  0020E0  0EF7               	movlw	-9
 13231  0020E2  2614               	addwf	??_disk_ioctl,f,c
 13232  0020E4  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 13233  0020E8  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 13234  0020EC  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 13235  0020F0  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 13236  0020F4  2A14               	incf	??_disk_ioctl,f,c
 13237  0020F6  D005               	goto	u6120
 13238  0020F8                     u6125:
 13239  0020F8  90D8               	bcf	status,0,c
 13240  0020FA  3615               	rlcf	??_disk_ioctl+1,f,c
 13241  0020FC  3616               	rlcf	??_disk_ioctl+2,f,c
 13242  0020FE  3617               	rlcf	??_disk_ioctl+3,f,c
 13243  002100  3618               	rlcf	??_disk_ioctl+4,f,c
 13244  002102                     u6120:
 13245  002102  2E14               	decfsz	??_disk_ioctl,f,c
 13246  002104  D7F9               	goto	u6125
 13247  002106  D03D               	goto	L18
 13248  002108                     l155:
 13249                           
 13250                           ; BSR set to: 0
 13251                           ;diskio.c: 483:   if (CardType & 0x04) {
 13252  002108  A5E2               	btfss	_CardType& (0+255),2,b
 13253  00210A  D048               	goto	l4996
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 13257  00210C  0E00               	movlw	0
 13258  00210E  6E0B               	movwf	send_cmd@arg,c
 13259  002110  0E00               	movlw	0
 13260  002112  6E0C               	movwf	send_cmd@arg+1,c
 13261  002114  0E00               	movlw	0
 13262  002116  6E0D               	movwf	send_cmd@arg+2,c
 13263  002118  0E00               	movlw	0
 13264  00211A  6E0E               	movwf	send_cmd@arg+3,c
 13265  00211C  0E8D               	movlw	141
 13266  00211E  EC0B  F02E         	call	_send_cmd
 13267  002122  0900               	iorlw	0
 13268  002124  A4D8               	btfss	status,2,c
 13269  002126  D162               	goto	l5050
 13270                           
 13271                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 13272  002128  0EFF               	movlw	255
 13273  00212A  EC04  F02F         	call	_SPI1_Exchange8bit
 13274                           
 13275                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 13276  00212E  0E21               	movlw	low disk_ioctl@csd
 13277  002130  6E02               	movwf	rcvr_datablock@buff,c
 13278  002132  0E00               	movlw	high disk_ioctl@csd
 13279  002134  6E03               	movwf	rcvr_datablock@buff+1,c
 13280  002136  0E00               	movlw	0
 13281  002138  6E05               	movwf	rcvr_datablock@btr+1,c
 13282  00213A  0E10               	movlw	16
 13283  00213C  6E04               	movwf	rcvr_datablock@btr,c
 13284  00213E  EC27  F02D         	call	_rcvr_datablock	;wreg free
 13285  002142  0900               	iorlw	0
 13286  002144  B4D8               	btfsc	status,2,c
 13287  002146  D152               	goto	l5050
 13288                           
 13289                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 13290  002148  0E30               	movlw	48
 13291  00214A  6E37               	movwf	disk_ioctl@n,c
 13292  00214C  D004               	goto	l4990
 13293  00214E                     l4986:
 13294  00214E  0EFF               	movlw	255
 13295  002150  EC04  F02F         	call	_SPI1_Exchange8bit
 13296  002154  0637               	decf	disk_ioctl@n,f,c
 13297  002156                     l4990:
 13298  002156  5037               	movf	disk_ioctl@n,w,c
 13299  002158  A4D8               	btfss	status,2,c
 13300  00215A  D7F9               	goto	l4986
 13301                           
 13302                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 13303  00215C  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13304  002160  3A14               	swapf	??_disk_ioctl,f,c
 13305  002162  0E0F               	movlw	15
 13306  002164  1614               	andwf	??_disk_ioctl,f,c
 13307  002166  0E10               	movlw	16
 13308  002168  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13309  00216A  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13310  00216C  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13311  00216E  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13312  002170  2A14               	incf	??_disk_ioctl,f,c
 13313  002172  D005               	goto	u6170
 13314  002174                     u6175:
 13315  002174  90D8               	bcf	status,0,c
 13316  002176  3615               	rlcf	??_disk_ioctl+1,f,c
 13317  002178  3616               	rlcf	??_disk_ioctl+2,f,c
 13318  00217A  3617               	rlcf	??_disk_ioctl+3,f,c
 13319  00217C  3618               	rlcf	??_disk_ioctl+4,f,c
 13320  00217E                     u6170:
 13321  00217E  2E14               	decfsz	??_disk_ioctl,f,c
 13322  002180  D7F9               	goto	u6175
 13323  002182                     L18:
 13324  002182  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13325  002186  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13326  00218A  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13327  00218E  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13328  002192  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13329  002196  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 13330  00219A  D6F3               	goto	u6050
 13331  00219C                     l4996:
 13332                           
 13333                           ; BSR set to: 0
 13334                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13335  00219C  0E00               	movlw	0
 13336  00219E  6E0B               	movwf	send_cmd@arg,c
 13337  0021A0  0E00               	movlw	0
 13338  0021A2  6E0C               	movwf	send_cmd@arg+1,c
 13339  0021A4  0E00               	movlw	0
 13340  0021A6  6E0D               	movwf	send_cmd@arg+2,c
 13341  0021A8  0E00               	movlw	0
 13342  0021AA  6E0E               	movwf	send_cmd@arg+3,c
 13343  0021AC  0E09               	movlw	9
 13344  0021AE  EC0B  F02E         	call	_send_cmd
 13345  0021B2  0900               	iorlw	0
 13346  0021B4  A4D8               	btfss	status,2,c
 13347  0021B6  D11A               	goto	l5050
 13348  0021B8  0E21               	movlw	low disk_ioctl@csd
 13349  0021BA  6E02               	movwf	rcvr_datablock@buff,c
 13350  0021BC  0E00               	movlw	high disk_ioctl@csd
 13351  0021BE  6E03               	movwf	rcvr_datablock@buff+1,c
 13352  0021C0  0E00               	movlw	0
 13353  0021C2  6E05               	movwf	rcvr_datablock@btr+1,c
 13354  0021C4  0E10               	movlw	16
 13355  0021C6  6E04               	movwf	rcvr_datablock@btr,c
 13356  0021C8  EC27  F02D         	call	_rcvr_datablock	;wreg free
 13357  0021CC  0900               	iorlw	0
 13358  0021CE  B4D8               	btfsc	status,2,c
 13359  0021D0  D10D               	goto	l5050
 13360                           
 13361                           ;diskio.c: 494:     if (CardType & 0x02) {
 13362  0021D2  0100               	movlb	0	; () banked
 13363  0021D4  A3E2               	btfss	_CardType& (0+255),1,b
 13364  0021D6  D02A               	goto	l5004
 13365                           
 13366                           ; BSR set to: 0
 13367                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 13368  0021D8  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 13369  0021DC  0E06               	movlw	6
 13370  0021DE  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13371  0021E0                     u6215:
 13372  0021E0  90D8               	bcf	status,0,c
 13373  0021E2  3214               	rrcf	??_disk_ioctl,f,c
 13374  0021E4  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 13375  0021E6  D7FC               	goto	u6215
 13376  0021E8  0EFF               	movlw	-1
 13377  0021EA  2614               	addwf	??_disk_ioctl,f,c
 13378  0021EC  502B               	movf	disk_ioctl@csd+10,w,c
 13379  0021EE  0B3F               	andlw	63
 13380  0021F0  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13381  0021F2  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13382  0021F4  90D8               	bcf	status,0,c
 13383  0021F6  3616               	rlcf	??_disk_ioctl+2,f,c
 13384  0021F8  3617               	rlcf	??_disk_ioctl+3,f,c
 13385  0021FA  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13386  0021FC  AE2C               	btfss	disk_ioctl@csd+11,7,c
 13387  0021FE  D001               	bra	u6225
 13388  002200  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 13389  002202                     u6225:
 13390  002202  0E01               	movlw	1
 13391  002204  1618               	andwf	??_disk_ioctl+4,f,c
 13392  002206  5018               	movf	??_disk_ioctl+4,w,c
 13393  002208  2616               	addwf	??_disk_ioctl+2,f,c
 13394  00220A  0E00               	movlw	0
 13395  00220C  2217               	addwfc	??_disk_ioctl+3,f,c
 13396  00220E  0E01               	movlw	1
 13397  002210  2616               	addwf	??_disk_ioctl+2,f,c
 13398  002212  0E00               	movlw	0
 13399  002214  2217               	addwfc	??_disk_ioctl+3,f,c
 13400  002216  2A14               	incf	??_disk_ioctl,f,c
 13401  002218  D003               	goto	u6234
 13402  00221A                     u6235:
 13403  00221A  90D8               	bcf	status,0,c
 13404  00221C  3616               	rlcf	??_disk_ioctl+2,f,c
 13405  00221E  3617               	rlcf	??_disk_ioctl+3,f,c
 13406  002220                     u6234:
 13407  002220  2E14               	decfsz	??_disk_ioctl,f,c
 13408  002222  D7FB               	goto	u6235
 13409  002224  5016               	movf	??_disk_ioctl+2,w,c
 13410  002226  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13411  002228  5017               	movf	??_disk_ioctl+3,w,c
 13412  00222A  D034               	goto	L19
 13413  00222C                     l5004:
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 13417  00222C  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13418  002230  90D8               	bcf	status,0,c
 13419  002232  3214               	rrcf	??_disk_ioctl,f,c
 13420  002234  90D8               	bcf	status,0,c
 13421  002236  3214               	rrcf	??_disk_ioctl,f,c
 13422  002238  0E1F               	movlw	31
 13423  00223A  1614               	andwf	??_disk_ioctl,f,c
 13424  00223C  0E01               	movlw	1
 13425  00223E  2414               	addwf	??_disk_ioctl,w,c
 13426  002240  6E01               	movwf	___wmul@multiplier,c
 13427  002242  6A02               	clrf	___wmul@multiplier+1,c
 13428  002244  0E00               	movlw	0
 13429  002246  2202               	addwfc	___wmul@multiplier+1,f,c
 13430  002248  502C               	movf	disk_ioctl@csd+11,w,c
 13431  00224A  0B03               	andlw	3
 13432  00224C  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13433  00224E  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13434  002250  90D8               	bcf	status,0,c
 13435  002252  3615               	rlcf	??_disk_ioctl+1,f,c
 13436  002254  3616               	rlcf	??_disk_ioctl+2,f,c
 13437  002256  90D8               	bcf	status,0,c
 13438  002258  3615               	rlcf	??_disk_ioctl+1,f,c
 13439  00225A  3616               	rlcf	??_disk_ioctl+2,f,c
 13440  00225C  90D8               	bcf	status,0,c
 13441  00225E  3615               	rlcf	??_disk_ioctl+1,f,c
 13442  002260  3616               	rlcf	??_disk_ioctl+2,f,c
 13443  002262  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 13444  002266  0E05               	movlw	5
 13445  002268  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13446  00226A                     u6245:
 13447  00226A  90D8               	bcf	status,0,c
 13448  00226C  3217               	rrcf	??_disk_ioctl+3,f,c
 13449  00226E  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 13450  002270  D7FC               	goto	u6245
 13451  002272  0E07               	movlw	7
 13452  002274  1617               	andwf	??_disk_ioctl+3,f,c
 13453  002276  5017               	movf	??_disk_ioctl+3,w,c
 13454  002278  2615               	addwf	??_disk_ioctl+1,f,c
 13455  00227A  0E00               	movlw	0
 13456  00227C  2216               	addwfc	??_disk_ioctl+2,f,c
 13457  00227E  0E01               	movlw	1
 13458  002280  2415               	addwf	??_disk_ioctl+1,w,c
 13459  002282  6E03               	movwf	___wmul@multiplicand,c
 13460  002284  0E00               	movlw	0
 13461  002286  2016               	addwfc	??_disk_ioctl+2,w,c
 13462  002288  6E04               	movwf	___wmul@multiplicand+1,c
 13463  00228A  ECC0  F02E         	call	___wmul	;wreg free
 13464  00228E  5001               	movf	?___wmul,w,c
 13465  002290  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13466  002292  5002               	movf	?___wmul+1,w,c
 13467  002294                     L19:
 13468  002294  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13469  002296  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 13470  002298  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13471  00229A  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13472  00229E  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13473  0022A2  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 13474  0022A6  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 13475  0022AA  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 13476  0022AE  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 13477  0022B2  D667               	goto	u6050
 13478  0022B4                     l5008:
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;diskio.c: 507:   *ptr = CardType;
 13482  0022B4  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13483  0022B8  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13484  0022BC  C0E2  FFDF         	movff	_CardType,indf2
 13485  0022C0  D660               	goto	u6050
 13486  0022C2                     l5012:
 13487                           
 13488                           ; BSR set to: 0
 13489                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 13490  0022C2  0E00               	movlw	0
 13491  0022C4  6E0B               	movwf	send_cmd@arg,c
 13492  0022C6  0E00               	movlw	0
 13493  0022C8  6E0C               	movwf	send_cmd@arg+1,c
 13494  0022CA  0E00               	movlw	0
 13495  0022CC  6E0D               	movwf	send_cmd@arg+2,c
 13496  0022CE  0E00               	movlw	0
 13497  0022D0  6E0E               	movwf	send_cmd@arg+3,c
 13498  0022D2  0E09               	movlw	9
 13499  0022D4  EC0B  F02E         	call	_send_cmd
 13500  0022D8  0900               	iorlw	0
 13501  0022DA  A4D8               	btfss	status,2,c
 13502  0022DC  D087               	goto	l5050
 13503  0022DE  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13504  0022E2  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13505  0022E6  0E00               	movlw	0
 13506  0022E8  6E05               	movwf	rcvr_datablock@btr+1,c
 13507  0022EA  0E10               	movlw	16
 13508  0022EC  6E04               	movwf	rcvr_datablock@btr,c
 13509  0022EE  EC27  F02D         	call	_rcvr_datablock	;wreg free
 13510  0022F2                     L17:
 13511  0022F2  0900               	iorlw	0
 13512  0022F4  A4D8               	btfss	status,2,c
 13513  0022F6  D645               	goto	u6050
 13514  0022F8  D079               	goto	l5050
 13515  0022FA                     l5018:
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 13519  0022FA  0E00               	movlw	0
 13520  0022FC  6E0B               	movwf	send_cmd@arg,c
 13521  0022FE  0E00               	movlw	0
 13522  002300  6E0C               	movwf	send_cmd@arg+1,c
 13523  002302  0E00               	movlw	0
 13524  002304  6E0D               	movwf	send_cmd@arg+2,c
 13525  002306  0E00               	movlw	0
 13526  002308  6E0E               	movwf	send_cmd@arg+3,c
 13527  00230A  0E0A               	movlw	10
 13528  00230C  EC0B  F02E         	call	_send_cmd
 13529  002310  0900               	iorlw	0
 13530  002312  A4D8               	btfss	status,2,c
 13531  002314  D06B               	goto	l5050
 13532  002316  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13533  00231A  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13534  00231E  0E00               	movlw	0
 13535  002320  6E05               	movwf	rcvr_datablock@btr+1,c
 13536  002322  0E10               	movlw	16
 13537  002324  6E04               	movwf	rcvr_datablock@btr,c
 13538  002326  EC27  F02D         	call	_rcvr_datablock	;wreg free
 13539  00232A  D7E3               	goto	L17
 13540  00232C                     l5024:
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 13544  00232C  0E00               	movlw	0
 13545  00232E  6E0B               	movwf	send_cmd@arg,c
 13546  002330  0E00               	movlw	0
 13547  002332  6E0C               	movwf	send_cmd@arg+1,c
 13548  002334  0E00               	movlw	0
 13549  002336  6E0D               	movwf	send_cmd@arg+2,c
 13550  002338  0E00               	movlw	0
 13551  00233A  6E0E               	movwf	send_cmd@arg+3,c
 13552  00233C  0E3A               	movlw	58
 13553  00233E  EC0B  F02E         	call	_send_cmd
 13554  002342  0900               	iorlw	0
 13555  002344  A4D8               	btfss	status,2,c
 13556  002346  D052               	goto	l5050
 13557                           
 13558                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 13559  002348  0E04               	movlw	4
 13560  00234A  6E37               	movwf	disk_ioctl@n,c
 13561  00234C  D00B               	goto	l5034
 13562  00234E                     l5028:
 13563  00234E  0EFF               	movlw	255
 13564  002350  EC04  F02F         	call	_SPI1_Exchange8bit
 13565  002354  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13566  002358  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13567  00235C  6EDF               	movwf	indf2,c
 13568  00235E  4A38               	infsnz	disk_ioctl@ptr,f,c
 13569  002360  2A39               	incf	disk_ioctl@ptr+1,f,c
 13570  002362  0637               	decf	disk_ioctl@n,f,c
 13571  002364                     l5034:
 13572  002364  5037               	movf	disk_ioctl@n,w,c
 13573  002366  B4D8               	btfsc	status,2,c
 13574  002368  D60C               	goto	u6050
 13575  00236A  D7F1               	goto	l5028
 13576  00236C                     l5038:
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 13580  00236C  0E00               	movlw	0
 13581  00236E  6E0B               	movwf	send_cmd@arg,c
 13582  002370  0E00               	movlw	0
 13583  002372  6E0C               	movwf	send_cmd@arg+1,c
 13584  002374  0E00               	movlw	0
 13585  002376  6E0D               	movwf	send_cmd@arg+2,c
 13586  002378  0E00               	movlw	0
 13587  00237A  6E0E               	movwf	send_cmd@arg+3,c
 13588  00237C  0E8D               	movlw	141
 13589  00237E  EC0B  F02E         	call	_send_cmd
 13590  002382  0900               	iorlw	0
 13591  002384  A4D8               	btfss	status,2,c
 13592  002386  D032               	goto	l5050
 13593                           
 13594                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 13595  002388  0EFF               	movlw	255
 13596  00238A  EC04  F02F         	call	_SPI1_Exchange8bit
 13597                           
 13598                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 13599  00238E  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13600  002392  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13601  002396  0E00               	movlw	0
 13602  002398  6E05               	movwf	rcvr_datablock@btr+1,c
 13603  00239A  0E40               	movlw	64
 13604  00239C  6E04               	movwf	rcvr_datablock@btr,c
 13605  00239E  EC27  F02D         	call	_rcvr_datablock	;wreg free
 13606  0023A2  D7A7               	goto	L17
 13607  0023A4                     l5046:
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;diskio.c: 539:   res = RES_PARERR;
 13611  0023A4  0E04               	movlw	4
 13612  0023A6                     L16:
 13613  0023A6  6E36               	movwf	disk_ioctl@res,c
 13614                           
 13615                           ;diskio.c: 540:  }
 13616  0023A8  D021               	goto	l5050
 13617  0023AA                     l5048:
 13618                           
 13619                           ; BSR set to: 0
 13620  0023AA  5011               	movf	disk_ioctl@cmd,w,c
 13621  0023AC  6E14               	movwf	??_disk_ioctl& (0+255),c
 13622  0023AE  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13623                           
 13624                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13625                           ; Switch size 1, requested type "simple"
 13626                           ; Number of cases is 1, Range of values is 0 to 0
 13627                           ; switch strategies available:
 13628                           ; Name         Instructions Cycles
 13629                           ; simple_byte            4     3 (average)
 13630                           ;	Chosen strategy is simple_byte
 13631  0023B0  5015               	movf	??_disk_ioctl+1,w,c
 13632  0023B2  0A00               	xorlw	0	; case 0
 13633  0023B4  A4D8               	btfss	status,2,c
 13634  0023B6  D7F6               	goto	l5046
 13635                           
 13636                           ; BSR set to: 0
 13637                           ; Switch size 1, requested type "simple"
 13638                           ; Number of cases is 8, Range of values is 0 to 14
 13639                           ; switch strategies available:
 13640                           ; Name         Instructions Cycles
 13641                           ; simple_byte           25    13 (average)
 13642                           ;	Chosen strategy is simple_byte
 13643  0023B8  5014               	movf	??_disk_ioctl,w,c
 13644  0023BA  0A00               	xorlw	0	; case 0
 13645  0023BC  B4D8               	btfsc	status,2,c
 13646  0023BE  D5DC               	goto	l4956
 13647  0023C0  0A01               	xorlw	1	; case 1
 13648  0023C2  B4D8               	btfsc	status,2,c
 13649  0023C4  D5E0               	goto	l4960
 13650  0023C6  0A02               	xorlw	2	; case 3
 13651  0023C8  B4D8               	btfsc	status,2,c
 13652  0023CA  D69E               	goto	l155
 13653  0023CC  0A09               	xorlw	9	; case 10
 13654  0023CE  B4D8               	btfsc	status,2,c
 13655  0023D0  D771               	goto	l5008
 13656  0023D2  0A01               	xorlw	1	; case 11
 13657  0023D4  B4D8               	btfsc	status,2,c
 13658  0023D6  D775               	goto	l5012
 13659  0023D8  0A07               	xorlw	7	; case 12
 13660  0023DA  B4D8               	btfsc	status,2,c
 13661  0023DC  D78E               	goto	l5018
 13662  0023DE  0A01               	xorlw	1	; case 13
 13663  0023E0  B4D8               	btfsc	status,2,c
 13664  0023E2  D7A4               	goto	l5024
 13665  0023E4  0A03               	xorlw	3	; case 14
 13666  0023E6  B4D8               	btfsc	status,2,c
 13667  0023E8  D7C1               	goto	l5038
 13668  0023EA  D7DC               	goto	l5046
 13669  0023EC                     l5050:
 13670                           
 13671                           ;diskio.c: 542:  deselect();
 13672  0023EC  EC30  F02F         	call	_deselect	;wreg free
 13673                           
 13674                           ;diskio.c: 544:  return res;
 13675  0023F0  5036               	movf	disk_ioctl@res,w,c
 13676  0023F2  0012               	return		;funcret
 13677  0023F4                     __end_of_disk_ioctl:
 13678                           	opt callstack 0
 13679                           
 13680 ;; *************** function ___wmul *****************
 13681 ;; Defined at:
 13682 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 13683 ;; Parameters:    Size  Location     Type
 13684 ;;  multiplier      2    0[COMRAM] unsigned int 
 13685 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13686 ;; Auto vars:     Size  Location     Type
 13687 ;;  product         2    4[COMRAM] unsigned int 
 13688 ;; Return value:  Size  Location     Type
 13689 ;;                  2    0[COMRAM] unsigned int 
 13690 ;; Registers used:
 13691 ;;		wreg, status,2, status,0, prodl, prodh
 13692 ;; Tracked objects:
 13693 ;;		On entry : 0/0
 13694 ;;		On exit  : 0/0
 13695 ;;		Unchanged: 0/0
 13696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13697 ;;      Params:         4       0       0       0       0       0       0       0       0
 13698 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13699 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13700 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13701 ;;Total ram usage:        6 bytes
 13702 ;; Hardware stack levels used:    1
 13703 ;; This function calls:
 13704 ;;		Nothing
 13705 ;; This function is called by:
 13706 ;;		_disk_ioctl
 13707 ;; This function uses a non-reentrant model
 13708 ;;
 13709                           
 13710                           	psect	text41
 13711  005D80                     __ptext41:
 13712                           	opt callstack 0
 13713  005D80                     ___wmul:
 13714                           	opt callstack 25
 13715                           
 13716                           ;incstack = 0
 13717  005D80  5001               	movf	___wmul@multiplier,w,c
 13718  005D82  0203               	mulwf	___wmul@multiplicand,c
 13719  005D84  CFF3 F005          	movff	prodl,___wmul@product
 13720  005D88  CFF4 F006          	movff	prodh,___wmul@product+1
 13721  005D8C  5001               	movf	___wmul@multiplier,w,c
 13722  005D8E  0204               	mulwf	___wmul@multiplicand+1,c
 13723  005D90  50F3               	movf	prodl,w,c
 13724  005D92  2606               	addwf	___wmul@product+1,f,c
 13725  005D94  5002               	movf	___wmul@multiplier+1,w,c
 13726  005D96  0203               	mulwf	___wmul@multiplicand,c
 13727  005D98  50F3               	movf	prodl,w,c
 13728  005D9A  2606               	addwf	___wmul@product+1,f,c
 13729  005D9C  C005  F001         	movff	___wmul@product,?___wmul
 13730  005DA0  C006  F002         	movff	___wmul@product+1,?___wmul+1
 13731  005DA4  0012               	return		;funcret
 13732  005DA6                     __end_of___wmul:
 13733                           	opt callstack 0
 13734                           
 13735 ;; *************** function _st_clust *****************
 13736 ;; Defined at:
 13737 ;;		line 1252 in file "ff.c"
 13738 ;; Parameters:    Size  Location     Type
 13739 ;;  dir             2    0[COMRAM] PTR unsigned char 
 13740 ;;		 -> FatFs(558), NULL(0), 
 13741 ;;  cl              4    2[COMRAM] unsigned long 
 13742 ;; Auto vars:     Size  Location     Type
 13743 ;;		None
 13744 ;; Return value:  Size  Location     Type
 13745 ;;                  1    wreg      void 
 13746 ;; Registers used:
 13747 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13748 ;; Tracked objects:
 13749 ;;		On entry : 0/0
 13750 ;;		On exit  : 0/0
 13751 ;;		Unchanged: 0/0
 13752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13753 ;;      Params:         6       0       0       0       0       0       0       0       0
 13754 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13755 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13756 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13757 ;;Total ram usage:        6 bytes
 13758 ;; Hardware stack levels used:    1
 13759 ;; This function calls:
 13760 ;;		Nothing
 13761 ;; This function is called by:
 13762 ;;		_f_open
 13763 ;;		_f_sync
 13764 ;; This function uses a non-reentrant model
 13765 ;;
 13766                           
 13767                           	psect	text42
 13768  005D30                     __ptext42:
 13769                           	opt callstack 0
 13770  005D30                     _st_clust:
 13771                           	opt callstack 28
 13772                           
 13773                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 13774                           
 13775                           ;incstack = 0
 13776  005D30  EE20 F01A          	lfsr	2,26
 13777  005D34  5001               	movf	st_clust@dir,w,c
 13778  005D36  26D9               	addwf	fsr2l,f,c
 13779  005D38  5002               	movf	st_clust@dir+1,w,c
 13780  005D3A  22DA               	addwfc	fsr2h,f,c
 13781  005D3C  C003  FFDE         	movff	st_clust@cl,postinc2
 13782  005D40  C004  FFDD         	movff	st_clust@cl+1,postdec2
 13783                           
 13784                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 13785  005D44  EE20 F014          	lfsr	2,20
 13786  005D48  5001               	movf	st_clust@dir,w,c
 13787  005D4A  26D9               	addwf	fsr2l,f,c
 13788  005D4C  5002               	movf	st_clust@dir+1,w,c
 13789  005D4E  22DA               	addwfc	fsr2h,f,c
 13790  005D50  C005  FFDE         	movff	st_clust@cl+2,postinc2
 13791  005D54  C006  FFDD         	movff	st_clust@cl+3,postdec2
 13792  005D58  0012               	return		;funcret
 13793  005D5A                     __end_of_st_clust:
 13794                           	opt callstack 0
 13795                           
 13796 ;; *************** function _move_window *****************
 13797 ;; Defined at:
 13798 ;;		line 729 in file "ff.c"
 13799 ;; Parameters:    Size  Location     Type
 13800 ;;  fs              2   48[COMRAM] PTR struct .
 13801 ;;		 -> FatFs(558), NULL(0), 
 13802 ;;  sector          4   50[COMRAM] unsigned long 
 13803 ;; Auto vars:     Size  Location     Type
 13804 ;;  res             1   58[COMRAM] enum E93
 13805 ;; Return value:  Size  Location     Type
 13806 ;;                  1    wreg      enum E93
 13807 ;; Registers used:
 13808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13809 ;; Tracked objects:
 13810 ;;		On entry : 0/0
 13811 ;;		On exit  : 0/0
 13812 ;;		Unchanged: 0/0
 13813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13814 ;;      Params:         6       0       0       0       0       0       0       0       0
 13815 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13816 ;;      Temps:          4       0       0       0       0       0       0       0       0
 13817 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13818 ;;Total ram usage:       11 bytes
 13819 ;; Hardware stack levels used:    1
 13820 ;; Hardware stack levels required when called:    7
 13821 ;; This function calls:
 13822 ;;		_disk_read
 13823 ;;		_sync_window
 13824 ;; This function is called by:
 13825 ;;		_get_fat
 13826 ;;		_put_fat
 13827 ;;		_dir_alloc
 13828 ;;		_dir_find
 13829 ;;		_dir_register
 13830 ;;		_check_fs
 13831 ;;		_find_volume
 13832 ;;		_f_open
 13833 ;;		_f_write
 13834 ;;		_f_sync
 13835 ;;		_f_read
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           	psect	text43
 13840  00570E                     __ptext43:
 13841                           	opt callstack 0
 13842  00570E                     _move_window:
 13843                           	opt callstack 20
 13844                           
 13845                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 13846                           
 13847                           ;incstack = 0
 13848  00570E  0E00               	movlw	0
 13849  005710  6E3B               	movwf	move_window@res,c
 13850                           
 13851                           ;ff.c: 737:  if (sector != fs->winsect) {
 13852  005712  EE20 F02A          	lfsr	2,42
 13853  005716  5031               	movf	move_window@fs,w,c
 13854  005718  26D9               	addwf	fsr2l,f,c
 13855  00571A  5032               	movf	move_window@fs+1,w,c
 13856  00571C  22DA               	addwfc	fsr2h,f,c
 13857  00571E  5033               	movf	move_window@sector,w,c
 13858  005720  18DE               	xorwf	postinc2,w,c
 13859  005722  E10A               	bnz	u5550
 13860  005724  5034               	movf	move_window@sector+1,w,c
 13861  005726  18DE               	xorwf	postinc2,w,c
 13862  005728  E107               	bnz	u5550
 13863  00572A  5035               	movf	move_window@sector+2,w,c
 13864  00572C  18DE               	xorwf	postinc2,w,c
 13865  00572E  E104               	bnz	u5550
 13866  005730  5036               	movf	move_window@sector+3,w,c
 13867  005732  18DE               	xorwf	postinc2,w,c
 13868  005734  B4D8               	btfsc	status,2,c
 13869  005736  D03C               	goto	l4682
 13870  005738                     u5550:
 13871                           
 13872                           ;ff.c: 739:   res = sync_window(fs);
 13873  005738  C031  F01C         	movff	move_window@fs,sync_window@fs
 13874  00573C  C032  F01D         	movff	move_window@fs+1,sync_window@fs+1
 13875  005740  EC9D  F022         	call	_sync_window	;wreg free
 13876  005744  6E3B               	movwf	move_window@res,c
 13877                           
 13878                           ;ff.c: 741:   if (res == FR_OK) {
 13879  005746  503B               	movf	move_window@res,w,c
 13880  005748  A4D8               	btfss	status,2,c
 13881  00574A  D032               	goto	l4682
 13882                           
 13883                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 13884  00574C  0E2E               	movlw	46
 13885  00574E  2431               	addwf	move_window@fs,w,c
 13886  005750  6E11               	movwf	disk_read@buff,c
 13887  005752  0E00               	movlw	0
 13888  005754  2032               	addwfc	move_window@fs+1,w,c
 13889  005756  6E12               	movwf	disk_read@buff+1,c
 13890  005758  C033  F013         	movff	move_window@sector,disk_read@sector
 13891  00575C  C034  F014         	movff	move_window@sector+1,disk_read@sector+1
 13892  005760  C035  F015         	movff	move_window@sector+2,disk_read@sector+2
 13893  005764  C036  F016         	movff	move_window@sector+3,disk_read@sector+3
 13894  005768  0E00               	movlw	0
 13895  00576A  6E18               	movwf	disk_read@count+1,c
 13896  00576C  0E01               	movlw	1
 13897  00576E  6E17               	movwf	disk_read@count,c
 13898  005770  EE20 F001          	lfsr	2,1
 13899  005774  5031               	movf	move_window@fs,w,c
 13900  005776  26D9               	addwf	fsr2l,f,c
 13901  005778  5032               	movf	move_window@fs+1,w,c
 13902  00577A  22DA               	addwfc	fsr2h,f,c
 13903  00577C  50DF               	movf	indf2,w,c
 13904  00577E  EC3E  F029         	call	_disk_read
 13905  005782  0900               	iorlw	0
 13906  005784  B4D8               	btfsc	status,2,c
 13907  005786  D006               	goto	l4680
 13908                           
 13909                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 13910  005788  6833               	setf	move_window@sector,c
 13911  00578A  6834               	setf	move_window@sector+1,c
 13912  00578C  6835               	setf	move_window@sector+2,c
 13913  00578E  6836               	setf	move_window@sector+3,c
 13914                           
 13915                           ;ff.c: 744:     res = FR_DISK_ERR;
 13916  005790  0E01               	movlw	1
 13917  005792  6E3B               	movwf	move_window@res,c
 13918  005794                     l4680:
 13919                           
 13920                           ;ff.c: 746:    fs->winsect = sector;
 13921  005794  EE20 F02A          	lfsr	2,42
 13922  005798  5031               	movf	move_window@fs,w,c
 13923  00579A  26D9               	addwf	fsr2l,f,c
 13924  00579C  5032               	movf	move_window@fs+1,w,c
 13925  00579E  22DA               	addwfc	fsr2h,f,c
 13926  0057A0  C033  FFDE         	movff	move_window@sector,postinc2
 13927  0057A4  C034  FFDE         	movff	move_window@sector+1,postinc2
 13928  0057A8  C035  FFDE         	movff	move_window@sector+2,postinc2
 13929  0057AC  C036  FFDE         	movff	move_window@sector+3,postinc2
 13930  0057B0                     l4682:
 13931                           
 13932                           ;ff.c: 749:  return res;
 13933  0057B0  503B               	movf	move_window@res,w,c
 13934  0057B2  0012               	return		;funcret
 13935  0057B4                     __end_of_move_window:
 13936                           	opt callstack 0
 13937                           
 13938 ;; *************** function _sync_window *****************
 13939 ;; Defined at:
 13940 ;;		line 700 in file "ff.c"
 13941 ;; Parameters:    Size  Location     Type
 13942 ;;  fs              2   27[COMRAM] PTR struct .
 13943 ;;		 -> FatFs(558), NULL(0), 
 13944 ;; Auto vars:     Size  Location     Type
 13945 ;;  wsect           4   44[COMRAM] unsigned long 
 13946 ;;  nf              2   42[COMRAM] unsigned short 
 13947 ;;  res             1   41[COMRAM] enum E93
 13948 ;; Return value:  Size  Location     Type
 13949 ;;                  1    wreg      enum E93
 13950 ;; Registers used:
 13951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13952 ;; Tracked objects:
 13953 ;;		On entry : 0/0
 13954 ;;		On exit  : 0/0
 13955 ;;		Unchanged: 0/0
 13956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13957 ;;      Params:         2       0       0       0       0       0       0       0       0
 13958 ;;      Locals:         7       0       0       0       0       0       0       0       0
 13959 ;;      Temps:         12       0       0       0       0       0       0       0       0
 13960 ;;      Totals:        21       0       0       0       0       0       0       0       0
 13961 ;;Total ram usage:       21 bytes
 13962 ;; Hardware stack levels used:    1
 13963 ;; Hardware stack levels required when called:    6
 13964 ;; This function calls:
 13965 ;;		_disk_write
 13966 ;; This function is called by:
 13967 ;;		_move_window
 13968 ;;		_sync_fs
 13969 ;;		_dir_next
 13970 ;;		_f_write
 13971 ;; This function uses a non-reentrant model
 13972 ;;
 13973                           
 13974                           	psect	text44
 13975  00453A                     __ptext44:
 13976                           	opt callstack 0
 13977  00453A                     _sync_window:
 13978                           	opt callstack 21
 13979                           
 13980                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 13981                           
 13982                           ;incstack = 0
 13983  00453A  0E00               	movlw	0
 13984  00453C  6E2A               	movwf	sync_window@res,c
 13985                           
 13986                           ;ff.c: 709:  if (fs->wflag) {
 13987  00453E  EE20 F004          	lfsr	2,4
 13988  004542  501C               	movf	sync_window@fs,w,c
 13989  004544  26D9               	addwf	fsr2l,f,c
 13990  004546  501D               	movf	sync_window@fs+1,w,c
 13991  004548  22DA               	addwfc	fsr2h,f,c
 13992  00454A  50DF               	movf	indf2,w,c
 13993  00454C  B4D8               	btfsc	status,2,c
 13994  00454E  D0B1               	goto	l4662
 13995                           
 13996                           ;ff.c: 710:   wsect = fs->winsect;
 13997  004550  EE20 F02A          	lfsr	2,42
 13998  004554  501C               	movf	sync_window@fs,w,c
 13999  004556  26D9               	addwf	fsr2l,f,c
 14000  004558  501D               	movf	sync_window@fs+1,w,c
 14001  00455A  22DA               	addwfc	fsr2h,f,c
 14002  00455C  CFDE F02D          	movff	postinc2,sync_window@wsect
 14003  004560  CFDE F02E          	movff	postinc2,sync_window@wsect+1
 14004  004564  CFDE F02F          	movff	postinc2,sync_window@wsect+2
 14005  004568  CFDE F030          	movff	postinc2,sync_window@wsect+3
 14006                           
 14007                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 14008  00456C  0E2E               	movlw	46
 14009  00456E  241C               	addwf	sync_window@fs,w,c
 14010  004570  6E1E               	movwf	??_sync_window& (0+255),c
 14011  004572  0E00               	movlw	0
 14012  004574  201D               	addwfc	sync_window@fs+1,w,c
 14013  004576  6E1F               	movwf	(??_sync_window+1)& (0+255),c
 14014  004578  C01E  F011         	movff	??_sync_window,disk_write@buff
 14015  00457C  C01F  F012         	movff	??_sync_window+1,disk_write@buff+1
 14016  004580  5011               	movf	disk_write@buff,w,c
 14017  004582  1012               	iorwf	disk_write@buff+1,w,c
 14018  004584  A4D8               	btfss	status,2,c
 14019  004586  0E20               	movlw	32
 14020  004588  6E13               	movwf	disk_write@buff+2,c
 14021  00458A  C02D  F014         	movff	sync_window@wsect,disk_write@sector
 14022  00458E  C02E  F015         	movff	sync_window@wsect+1,disk_write@sector+1
 14023  004592  C02F  F016         	movff	sync_window@wsect+2,disk_write@sector+2
 14024  004596  C030  F017         	movff	sync_window@wsect+3,disk_write@sector+3
 14025  00459A  0E00               	movlw	0
 14026  00459C  6E19               	movwf	disk_write@count+1,c
 14027  00459E  0E01               	movlw	1
 14028  0045A0  6E18               	movwf	disk_write@count,c
 14029  0045A2  EE20 F001          	lfsr	2,1
 14030  0045A6  501C               	movf	sync_window@fs,w,c
 14031  0045A8  26D9               	addwf	fsr2l,f,c
 14032  0045AA  501D               	movf	sync_window@fs+1,w,c
 14033  0045AC  22DA               	addwfc	fsr2h,f,c
 14034  0045AE  50DF               	movf	indf2,w,c
 14035  0045B0  ECE7  F025         	call	_disk_write
 14036  0045B4  0900               	iorlw	0
 14037  0045B6  B4D8               	btfsc	status,2,c
 14038  0045B8  D003               	goto	l4644
 14039                           
 14040                           ;ff.c: 712:    res = FR_DISK_ERR;
 14041  0045BA  0E01               	movlw	1
 14042  0045BC  6E2A               	movwf	sync_window@res,c
 14043                           
 14044                           ;ff.c: 713:   } else {
 14045  0045BE  D079               	goto	l4662
 14046  0045C0                     l4644:
 14047                           
 14048                           ;ff.c: 714:    fs->wflag = 0;
 14049  0045C0  EE20 F004          	lfsr	2,4
 14050  0045C4  501C               	movf	sync_window@fs,w,c
 14051  0045C6  26D9               	addwf	fsr2l,f,c
 14052  0045C8  501D               	movf	sync_window@fs+1,w,c
 14053  0045CA  22DA               	addwfc	fsr2h,f,c
 14054  0045CC  0E00               	movlw	0
 14055  0045CE  6EDF               	movwf	indf2,c
 14056                           
 14057                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 14058  0045D0  EE20 F016          	lfsr	2,22
 14059  0045D4  501C               	movf	sync_window@fs,w,c
 14060  0045D6  26D9               	addwf	fsr2l,f,c
 14061  0045D8  501D               	movf	sync_window@fs+1,w,c
 14062  0045DA  22DA               	addwfc	fsr2h,f,c
 14063  0045DC  EE10 F01E          	lfsr	1,30
 14064  0045E0  501C               	movf	sync_window@fs,w,c
 14065  0045E2  26E1               	addwf	fsr1l,f,c
 14066  0045E4  501D               	movf	sync_window@fs+1,w,c
 14067  0045E6  22E2               	addwfc	fsr1h,f,c
 14068  0045E8  CFE6 F022          	movff	postinc1,??_sync_window+4
 14069  0045EC  CFE6 F023          	movff	postinc1,??_sync_window+5
 14070  0045F0  CFE6 F024          	movff	postinc1,??_sync_window+6
 14071  0045F4  CFE6 F025          	movff	postinc1,??_sync_window+7
 14072  0045F8  5022               	movf	??_sync_window+4,w,c
 14073  0045FA  5C2D               	subwf	sync_window@wsect,w,c
 14074  0045FC  6E26               	movwf	(??_sync_window+8)& (0+255),c
 14075  0045FE  5023               	movf	??_sync_window+5,w,c
 14076  004600  582E               	subwfb	sync_window@wsect+1,w,c
 14077  004602  6E27               	movwf	(??_sync_window+9)& (0+255),c
 14078  004604  5024               	movf	??_sync_window+6,w,c
 14079  004606  582F               	subwfb	sync_window@wsect+2,w,c
 14080  004608  6E28               	movwf	(??_sync_window+10)& (0+255),c
 14081  00460A  5025               	movf	??_sync_window+7,w,c
 14082  00460C  5830               	subwfb	sync_window@wsect+3,w,c
 14083  00460E  6E29               	movwf	(??_sync_window+11)& (0+255),c
 14084  004610  50DE               	movf	postinc2,w,c
 14085  004612  5C26               	subwf	??_sync_window+8,w,c
 14086  004614  50DE               	movf	postinc2,w,c
 14087  004616  5827               	subwfb	??_sync_window+9,w,c
 14088  004618  50DE               	movf	postinc2,w,c
 14089  00461A  5828               	subwfb	??_sync_window+10,w,c
 14090  00461C  50DE               	movf	postinc2,w,c
 14091  00461E  5829               	subwfb	??_sync_window+11,w,c
 14092  004620  B0D8               	btfsc	status,0,c
 14093  004622  D047               	goto	l4662
 14094                           
 14095                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 14096  004624  EE20 F003          	lfsr	2,3
 14097  004628  501C               	movf	sync_window@fs,w,c
 14098  00462A  26D9               	addwf	fsr2l,f,c
 14099  00462C  501D               	movf	sync_window@fs+1,w,c
 14100  00462E  22DA               	addwfc	fsr2h,f,c
 14101  004630  50DF               	movf	indf2,w,c
 14102  004632  6E1E               	movwf	??_sync_window& (0+255),c
 14103  004634  501E               	movf	??_sync_window,w,c
 14104  004636  6E2B               	movwf	sync_window@nf,c
 14105  004638  6A2C               	clrf	sync_window@nf+1,c
 14106  00463A                     l4650:
 14107  00463A  502C               	movf	sync_window@nf+1,w,c
 14108  00463C  E104               	bnz	l4654
 14109  00463E  0E02               	movlw	2
 14110  004640  5C2B               	subwf	sync_window@nf,w,c
 14111  004642  A0D8               	btfss	status,0,c
 14112  004644  D036               	goto	l4662
 14113  004646                     l4654:
 14114                           
 14115                           ;ff.c: 717:      wsect += fs->fsize;
 14116  004646  EE20 F016          	lfsr	2,22
 14117  00464A  501C               	movf	sync_window@fs,w,c
 14118  00464C  26D9               	addwf	fsr2l,f,c
 14119  00464E  501D               	movf	sync_window@fs+1,w,c
 14120  004650  22DA               	addwfc	fsr2h,f,c
 14121  004652  50DE               	movf	postinc2,w,c
 14122  004654  262D               	addwf	sync_window@wsect,f,c
 14123  004656  50DE               	movf	postinc2,w,c
 14124  004658  222E               	addwfc	sync_window@wsect+1,f,c
 14125  00465A  50DE               	movf	postinc2,w,c
 14126  00465C  222F               	addwfc	sync_window@wsect+2,f,c
 14127  00465E  50DD               	movf	postdec2,w,c
 14128  004660  2230               	addwfc	sync_window@wsect+3,f,c
 14129                           
 14130                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 14131  004662  0E2E               	movlw	46
 14132  004664  241C               	addwf	sync_window@fs,w,c
 14133  004666  6E1E               	movwf	??_sync_window& (0+255),c
 14134  004668  0E00               	movlw	0
 14135  00466A  201D               	addwfc	sync_window@fs+1,w,c
 14136  00466C  6E1F               	movwf	(??_sync_window+1)& (0+255),c
 14137  00466E  C01E  F011         	movff	??_sync_window,disk_write@buff
 14138  004672  C01F  F012         	movff	??_sync_window+1,disk_write@buff+1
 14139  004676  5011               	movf	disk_write@buff,w,c
 14140  004678  1012               	iorwf	disk_write@buff+1,w,c
 14141  00467A  A4D8               	btfss	status,2,c
 14142  00467C  0E20               	movlw	32
 14143  00467E  6E13               	movwf	disk_write@buff+2,c
 14144  004680  C02D  F014         	movff	sync_window@wsect,disk_write@sector
 14145  004684  C02E  F015         	movff	sync_window@wsect+1,disk_write@sector+1
 14146  004688  C02F  F016         	movff	sync_window@wsect+2,disk_write@sector+2
 14147  00468C  C030  F017         	movff	sync_window@wsect+3,disk_write@sector+3
 14148  004690  0E00               	movlw	0
 14149  004692  6E19               	movwf	disk_write@count+1,c
 14150  004694  0E01               	movlw	1
 14151  004696  6E18               	movwf	disk_write@count,c
 14152  004698  EE20 F001          	lfsr	2,1
 14153  00469C  501C               	movf	sync_window@fs,w,c
 14154  00469E  26D9               	addwf	fsr2l,f,c
 14155  0046A0  501D               	movf	sync_window@fs+1,w,c
 14156  0046A2  22DA               	addwfc	fsr2h,f,c
 14157  0046A4  50DF               	movf	indf2,w,c
 14158  0046A6  ECE7  F025         	call	_disk_write
 14159                           
 14160                           ;ff.c: 719:     }
 14161  0046AA  062B               	decf	sync_window@nf,f,c
 14162  0046AC  A0D8               	btfss	status,0,c
 14163  0046AE  062C               	decf	sync_window@nf+1,f,c
 14164  0046B0  D7C4               	goto	l4650
 14165  0046B2                     l4662:
 14166                           
 14167                           ;ff.c: 723:  return res;
 14168  0046B2  502A               	movf	sync_window@res,w,c
 14169  0046B4  0012               	return		;funcret
 14170  0046B6                     __end_of_sync_window:
 14171                           	opt callstack 0
 14172                           
 14173 ;; *************** function _disk_write *****************
 14174 ;; Defined at:
 14175 ;;		line 405 in file "diskio.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;  pdrv            1    wreg     unsigned char 
 14178 ;;  buff            3   16[COMRAM] PTR const unsigned char 
 14179 ;;		 -> FatFs.win(512), FatFs(558), ROM(32767), NULL(0), 
 14180 ;;  sector          4   19[COMRAM] unsigned long 
 14181 ;;  count           2   23[COMRAM] unsigned short 
 14182 ;; Auto vars:     Size  Location     Type
 14183 ;;  pdrv            1   26[COMRAM] unsigned char 
 14184 ;; Return value:  Size  Location     Type
 14185 ;;                  1    wreg      enum E43
 14186 ;; Registers used:
 14187 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14188 ;; Tracked objects:
 14189 ;;		On entry : 0/0
 14190 ;;		On exit  : 0/0
 14191 ;;		Unchanged: 0/0
 14192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14193 ;;      Params:         9       0       0       0       0       0       0       0       0
 14194 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14195 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14196 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14197 ;;Total ram usage:       11 bytes
 14198 ;; Hardware stack levels used:    1
 14199 ;; Hardware stack levels required when called:    5
 14200 ;; This function calls:
 14201 ;;		_deselect
 14202 ;;		_send_cmd
 14203 ;;		_xmit_datablock
 14204 ;; This function is called by:
 14205 ;;		_sync_window
 14206 ;;		_sync_fs
 14207 ;;		_f_write
 14208 ;; This function uses a non-reentrant model
 14209 ;;
 14210                           
 14211                           	psect	text45
 14212  004BCE                     __ptext45:
 14213                           	opt callstack 0
 14214  004BCE                     _disk_write:
 14215                           	opt callstack 21
 14216                           
 14217                           ;incstack = 0
 14218                           ;disk_write@pdrv stored from wreg
 14219  004BCE  6E1B               	movwf	disk_write@pdrv,c
 14220                           
 14221                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 14222  004BD0  501B               	movf	disk_write@pdrv,w,c
 14223  004BD2  A4D8               	btfss	status,2,c
 14224  004BD4  D004               	goto	u5240
 14225  004BD6  5018               	movf	disk_write@count,w,c
 14226  004BD8  1019               	iorwf	disk_write@count+1,w,c
 14227  004BDA  A4D8               	btfss	status,2,c
 14228  004BDC  D002               	goto	l126
 14229  004BDE                     u5240:
 14230  004BDE  0E04               	movlw	4
 14231  004BE0  0012               	return	
 14232  004BE2                     l126:
 14233                           
 14234                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 14235  004BE2  0100               	movlb	0	; () banked
 14236  004BE4  A1F1               	btfss	_Stat& (0+255),0,b
 14237  004BE6  D002               	goto	l130
 14238                           
 14239                           ; BSR set to: 0
 14240  004BE8  0E03               	movlw	3
 14241  004BEA  0012               	return	
 14242  004BEC                     l130:
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 14246  004BEC  A5F1               	btfss	_Stat& (0+255),2,b
 14247  004BEE  D002               	goto	l131
 14248                           
 14249                           ; BSR set to: 0
 14250  004BF0  0E02               	movlw	2
 14251  004BF2  0012               	return	
 14252  004BF4                     l131:
 14253                           
 14254                           ; BSR set to: 0
 14255                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 14256  004BF4  B7E2               	btfsc	_CardType& (0+255),3,b
 14257  004BF6  D008               	goto	l132
 14258                           
 14259                           ; BSR set to: 0
 14260  004BF8  0E09               	movlw	9
 14261  004BFA                     u5285:
 14262  004BFA  90D8               	bcf	status,0,c
 14263  004BFC  3614               	rlcf	disk_write@sector,f,c
 14264  004BFE  3615               	rlcf	disk_write@sector+1,f,c
 14265  004C00  3616               	rlcf	disk_write@sector+2,f,c
 14266  004C02  3617               	rlcf	disk_write@sector+3,f,c
 14267  004C04  2EE8               	decfsz	wreg,f,c
 14268  004C06  D7F9               	goto	u5285
 14269  004C08                     l132:
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;diskio.c: 418:  if (count == 1) {
 14273  004C08  0418               	decf	disk_write@count,w,c
 14274  004C0A  1019               	iorwf	disk_write@count+1,w,c
 14275  004C0C  A4D8               	btfss	status,2,c
 14276  004C0E  D01F               	goto	l4576
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 14280  004C10  C014  F00B         	movff	disk_write@sector,send_cmd@arg
 14281  004C14  C015  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14282  004C18  C016  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14283  004C1C  C017  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14284  004C20  0E18               	movlw	24
 14285  004C22  EC0B  F02E         	call	_send_cmd
 14286  004C26  0900               	iorlw	0
 14287  004C28  A4D8               	btfss	status,2,c
 14288  004C2A  D058               	goto	l4590
 14289  004C2C  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14290  004C30  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14291  004C34  C013  F006         	movff	disk_write@buff+2,xmit_datablock@buff+2
 14292  004C38  0EFE               	movlw	254
 14293  004C3A  6E07               	movwf	xmit_datablock@token,c
 14294  004C3C  EC24  F02C         	call	_xmit_datablock	;wreg free
 14295  004C40  0900               	iorlw	0
 14296  004C42  B4D8               	btfsc	status,2,c
 14297  004C44  D04B               	goto	l4590
 14298                           
 14299                           ;diskio.c: 421:    count = 0;
 14300  004C46  0E00               	movlw	0
 14301  004C48  6E19               	movwf	disk_write@count+1,c
 14302  004C4A  0E00               	movlw	0
 14303  004C4C  D046               	goto	L20
 14304  004C4E                     l4576:
 14305                           
 14306                           ; BSR set to: 0
 14307                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 14308  004C4E  C0E2  F01A         	movff	_CardType,??_disk_write
 14309  004C52  0E06               	movlw	6
 14310  004C54  161A               	andwf	??_disk_write,f,c
 14311  004C56  B4D8               	btfsc	status,2,c
 14312  004C58  D009               	goto	l136
 14313                           
 14314                           ; BSR set to: 0
 14315  004C5A  C018  F00B         	movff	disk_write@count,send_cmd@arg
 14316  004C5E  C019  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 14317  004C62  6A0D               	clrf	send_cmd@arg+2,c
 14318  004C64  6A0E               	clrf	send_cmd@arg+3,c
 14319  004C66  0E97               	movlw	151
 14320  004C68  EC0B  F02E         	call	_send_cmd
 14321  004C6C                     l136:
 14322                           
 14323                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 14324  004C6C  C014  F00B         	movff	disk_write@sector,send_cmd@arg
 14325  004C70  C015  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14326  004C74  C016  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14327  004C78  C017  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14328  004C7C  0E19               	movlw	25
 14329  004C7E  EC0B  F02E         	call	_send_cmd
 14330  004C82  0900               	iorlw	0
 14331  004C84  A4D8               	btfss	status,2,c
 14332  004C86  D02A               	goto	l4590
 14333  004C88                     u5330:
 14334                           
 14335                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 14336  004C88  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14337  004C8C  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14338  004C90  C013  F006         	movff	disk_write@buff+2,xmit_datablock@buff+2
 14339  004C94  0EFC               	movlw	252
 14340  004C96  6E07               	movwf	xmit_datablock@token,c
 14341  004C98  EC24  F02C         	call	_xmit_datablock	;wreg free
 14342  004C9C  0900               	iorlw	0
 14343  004C9E  B4D8               	btfsc	status,2,c
 14344  004CA0  D00D               	goto	u5350
 14345                           
 14346                           ;diskio.c: 428:     buff += 512;
 14347  004CA2  0E00               	movlw	0
 14348  004CA4  2611               	addwf	disk_write@buff,f,c
 14349  004CA6  0E02               	movlw	2
 14350  004CA8  2212               	addwfc	disk_write@buff+1,f,c
 14351  004CAA  0E00               	movlw	0
 14352  004CAC  2213               	addwfc	disk_write@buff+2,f,c
 14353                           
 14354                           ;diskio.c: 429:    } while (--count);
 14355  004CAE  0618               	decf	disk_write@count,f,c
 14356  004CB0  A0D8               	btfss	status,0,c
 14357  004CB2  0619               	decf	disk_write@count+1,f,c
 14358  004CB4  5018               	movf	disk_write@count,w,c
 14359  004CB6  1019               	iorwf	disk_write@count+1,w,c
 14360  004CB8  A4D8               	btfss	status,2,c
 14361  004CBA  D7E6               	goto	u5330
 14362  004CBC                     u5350:
 14363                           
 14364                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 14365  004CBC  0E00               	movlw	0
 14366  004CBE  6E04               	movwf	xmit_datablock@buff,c
 14367  004CC0  0E00               	movlw	0
 14368  004CC2  6E05               	movwf	xmit_datablock@buff+1,c
 14369  004CC4  6A06               	clrf	xmit_datablock@buff+2,c
 14370  004CC6  0EFD               	movlw	253
 14371  004CC8  6E07               	movwf	xmit_datablock@token,c
 14372  004CCA  EC24  F02C         	call	_xmit_datablock	;wreg free
 14373  004CCE  0900               	iorlw	0
 14374  004CD0  A4D8               	btfss	status,2,c
 14375  004CD2  D004               	goto	l4590
 14376                           
 14377                           ;diskio.c: 431:     count = 1;
 14378  004CD4  0E00               	movlw	0
 14379  004CD6  6E19               	movwf	disk_write@count+1,c
 14380  004CD8  0E01               	movlw	1
 14381  004CDA                     L20:
 14382  004CDA  6E18               	movwf	disk_write@count,c
 14383  004CDC                     l4590:
 14384                           
 14385                           ;diskio.c: 434:  deselect();
 14386  004CDC  EC30  F02F         	call	_deselect	;wreg free
 14387                           
 14388                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 14389  004CE0  5018               	movf	disk_write@count,w,c
 14390  004CE2  1019               	iorwf	disk_write@count+1,w,c
 14391  004CE4  B4D8               	btfsc	status,2,c
 14392  004CE6  D002               	goto	u5370
 14393  004CE8  0E01               	movlw	1
 14394  004CEA  0012               	return	
 14395  004CEC                     u5370:
 14396  004CEC  0E00               	movlw	0
 14397  004CEE  0012               	return		;funcret
 14398  004CF0                     __end_of_disk_write:
 14399                           	opt callstack 0
 14400                           
 14401 ;; *************** function _xmit_datablock *****************
 14402 ;; Defined at:
 14403 ;;		line 156 in file "diskio.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;  buff            3    3[COMRAM] PTR const unsigned char 
 14406 ;;		 -> FatFs.win(512), FatFs(558), ROM(32767), NULL(0), 
 14407 ;;  token           1    6[COMRAM] unsigned char 
 14408 ;; Auto vars:     Size  Location     Type
 14409 ;;  i               2    7[COMRAM] unsigned short 
 14410 ;;  resp            1    9[COMRAM] unsigned char 
 14411 ;; Return value:  Size  Location     Type
 14412 ;;                  1    wreg      unsigned char 
 14413 ;; Registers used:
 14414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14415 ;; Tracked objects:
 14416 ;;		On entry : 0/0
 14417 ;;		On exit  : 0/0
 14418 ;;		Unchanged: 0/0
 14419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14420 ;;      Params:         4       0       0       0       0       0       0       0       0
 14421 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14422 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14423 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14424 ;;Total ram usage:        7 bytes
 14425 ;; Hardware stack levels used:    1
 14426 ;; Hardware stack levels required when called:    2
 14427 ;; This function calls:
 14428 ;;		_SPI1_Exchange8bit
 14429 ;;		_wait_ready
 14430 ;; This function is called by:
 14431 ;;		_disk_write
 14432 ;; This function uses a non-reentrant model
 14433 ;;
 14434                           
 14435                           	psect	text46
 14436  005848                     __ptext46:
 14437                           	opt callstack 0
 14438  005848                     _xmit_datablock:
 14439                           	opt callstack 23
 14440                           
 14441                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 14442                           
 14443                           ;incstack = 0
 14444  005848  EC2C  F02E         	call	_wait_ready	;wreg free
 14445  00584C  0900               	iorlw	0
 14446  00584E  A4D8               	btfss	status,2,c
 14447  005850  D002               	goto	l4482
 14448  005852                     u5120:
 14449  005852  0E00               	movlw	0
 14450  005854  0012               	return	
 14451  005856                     l4482:
 14452                           
 14453                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 14454  005856  5007               	movf	xmit_datablock@token,w,c
 14455  005858  EC04  F02F         	call	_SPI1_Exchange8bit
 14456                           
 14457                           ;diskio.c: 168:  if (token != 0xFD) {
 14458  00585C  0EFD               	movlw	253
 14459  00585E  1807               	xorwf	xmit_datablock@token,w,c
 14460  005860  B4D8               	btfsc	status,2,c
 14461  005862  D032               	goto	l4502
 14462                           
 14463                           ;diskio.c: 169:   i = 512;
 14464  005864  0E02               	movlw	2
 14465  005866  6E09               	movwf	xmit_datablock@i+1,c
 14466  005868  0E00               	movlw	0
 14467  00586A  6E08               	movwf	xmit_datablock@i,c
 14468  00586C                     l4488:
 14469                           
 14470                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 14471  00586C  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 14472  005870  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 14473  005874  C006  FFF8         	movff	xmit_datablock@buff+2,tblptru
 14474  005878  BAF8               	btfsc	tblptru,5,c
 14475  00587A  D003               	bra	u5147
 14476  00587C  0008               	tblrd		*
 14477  00587E  50F5               	movf	tablat,w,c
 14478  005880  D005               	bra	u5140
 14479  005882                     u5147:
 14480  005882  CFF6 FFE9          	movff	tblptrl,fsr0l
 14481  005886  CFF7 FFEA          	movff	tblptrh,fsr0h
 14482  00588A  50EF               	movf	indf0,w,c
 14483  00588C                     u5140:
 14484  00588C  EC04  F02F         	call	_SPI1_Exchange8bit
 14485  005890  0E01               	movlw	1
 14486  005892  2604               	addwf	xmit_datablock@buff,f,c
 14487  005894  0E00               	movlw	0
 14488  005896  2205               	addwfc	xmit_datablock@buff+1,f,c
 14489  005898  0E00               	movlw	0
 14490  00589A  2206               	addwfc	xmit_datablock@buff+2,f,c
 14491  00589C  0608               	decf	xmit_datablock@i,f,c
 14492  00589E  A0D8               	btfss	status,0,c
 14493  0058A0  0609               	decf	xmit_datablock@i+1,f,c
 14494  0058A2  5008               	movf	xmit_datablock@i,w,c
 14495  0058A4  1009               	iorwf	xmit_datablock@i+1,w,c
 14496  0058A6  A4D8               	btfss	status,2,c
 14497  0058A8  D7E1               	goto	l4488
 14498                           
 14499                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 14500  0058AA  0EFF               	movlw	255
 14501  0058AC  EC04  F02F         	call	_SPI1_Exchange8bit
 14502                           
 14503                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 14504  0058B0  0EFF               	movlw	255
 14505  0058B2  EC04  F02F         	call	_SPI1_Exchange8bit
 14506                           
 14507                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 14508  0058B6  0EFF               	movlw	255
 14509  0058B8  EC04  F02F         	call	_SPI1_Exchange8bit
 14510  0058BC  6E0A               	movwf	xmit_datablock@resp,c
 14511                           
 14512                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 14513  0058BE  500A               	movf	xmit_datablock@resp,w,c
 14514  0058C0  0B1F               	andlw	31
 14515  0058C2  0A05               	xorlw	5
 14516  0058C4  A4D8               	btfss	status,2,c
 14517  0058C6  D7C5               	goto	u5120
 14518  0058C8                     l4502:
 14519                           
 14520                           ;diskio.c: 180:  return 1;
 14521  0058C8  0E01               	movlw	1
 14522  0058CA  0012               	return		;funcret
 14523  0058CC                     __end_of_xmit_datablock:
 14524                           	opt callstack 0
 14525                           
 14526 ;; *************** function _disk_read *****************
 14527 ;; Defined at:
 14528 ;;		line 370 in file "diskio.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;  pdrv            1    wreg     unsigned char 
 14531 ;;  buff            2   16[COMRAM] PTR unsigned char 
 14532 ;;		 -> FatFs(558), NULL(0), 
 14533 ;;  sector          4   18[COMRAM] unsigned long 
 14534 ;;  count           2   22[COMRAM] unsigned short 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  pdrv            1   24[COMRAM] unsigned char 
 14537 ;;  cmd             1   27[COMRAM] unsigned char 
 14538 ;; Return value:  Size  Location     Type
 14539 ;;                  1    wreg      enum E43
 14540 ;; Registers used:
 14541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14542 ;; Tracked objects:
 14543 ;;		On entry : 0/0
 14544 ;;		On exit  : 0/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14547 ;;      Params:         8       0       0       0       0       0       0       0       0
 14548 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14549 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14550 ;;      Totals:        12       0       0       0       0       0       0       0       0
 14551 ;;Total ram usage:       12 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    5
 14554 ;; This function calls:
 14555 ;;		_deselect
 14556 ;;		_rcvr_datablock
 14557 ;;		_send_cmd
 14558 ;; This function is called by:
 14559 ;;		_move_window
 14560 ;;		_f_read
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           	psect	text47
 14565  00527C                     __ptext47:
 14566                           	opt callstack 0
 14567  00527C                     _disk_read:
 14568                           	opt callstack 21
 14569                           
 14570                           ;incstack = 0
 14571                           ;disk_read@pdrv stored from wreg
 14572  00527C  6E19               	movwf	disk_read@pdrv,c
 14573                           
 14574                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 14575  00527E  5019               	movf	disk_read@pdrv,w,c
 14576  005280  A4D8               	btfss	status,2,c
 14577  005282  D004               	goto	u5400
 14578  005284  5017               	movf	disk_read@count,w,c
 14579  005286  1018               	iorwf	disk_read@count+1,w,c
 14580  005288  A4D8               	btfss	status,2,c
 14581  00528A  D002               	goto	l109
 14582  00528C                     u5400:
 14583  00528C  0E04               	movlw	4
 14584  00528E  0012               	return	
 14585  005290                     l109:
 14586                           
 14587                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 14588  005290  0100               	movlb	0	; () banked
 14589  005292  A1F1               	btfss	_Stat& (0+255),0,b
 14590  005294  D002               	goto	l113
 14591                           
 14592                           ; BSR set to: 0
 14593  005296  0E03               	movlw	3
 14594  005298  0012               	return	
 14595  00529A                     l113:
 14596                           
 14597                           ; BSR set to: 0
 14598                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 14599  00529A  B7E2               	btfsc	_CardType& (0+255),3,b
 14600  00529C  D008               	goto	l114
 14601                           
 14602                           ; BSR set to: 0
 14603  00529E  0E09               	movlw	9
 14604  0052A0                     u5435:
 14605  0052A0  90D8               	bcf	status,0,c
 14606  0052A2  3613               	rlcf	disk_read@sector,f,c
 14607  0052A4  3614               	rlcf	disk_read@sector+1,f,c
 14608  0052A6  3615               	rlcf	disk_read@sector+2,f,c
 14609  0052A8  3616               	rlcf	disk_read@sector+3,f,c
 14610  0052AA  2EE8               	decfsz	wreg,f,c
 14611  0052AC  D7F9               	goto	u5435
 14612  0052AE                     l114:
 14613                           
 14614                           ; BSR set to: 0
 14615                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 14616  0052AE  5018               	movf	disk_read@count+1,w,c
 14617  0052B0  E108               	bnz	l4612
 14618  0052B2  0E02               	movlw	2
 14619  0052B4  5C17               	subwf	disk_read@count,w,c
 14620  0052B6  B0D8               	btfsc	status,0,c
 14621  0052B8  D004               	goto	l4612
 14622                           
 14623                           ; BSR set to: 0
 14624  0052BA  0E00               	movlw	0
 14625  0052BC  6E1B               	movwf	_disk_read$143+1,c
 14626  0052BE  0E11               	movlw	17
 14627  0052C0  D003               	goto	L21
 14628  0052C2                     l4612:
 14629                           
 14630                           ; BSR set to: 0
 14631  0052C2  0E00               	movlw	0
 14632  0052C4  6E1B               	movwf	_disk_read$143+1,c
 14633  0052C6  0E12               	movlw	18
 14634  0052C8                     L21:
 14635  0052C8  6E1A               	movwf	_disk_read$143,c
 14636                           
 14637                           ; BSR set to: 0
 14638  0052CA  C01A  F01C         	movff	_disk_read$143,disk_read@cmd
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 14642  0052CE  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 14643  0052D2  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 14644  0052D6  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 14645  0052DA  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 14646  0052DE  501C               	movf	disk_read@cmd,w,c
 14647  0052E0  EC0B  F02E         	call	_send_cmd
 14648  0052E4  0900               	iorlw	0
 14649  0052E6  A4D8               	btfss	status,2,c
 14650  0052E8  D025               	goto	l4628
 14651  0052EA                     u5450:
 14652                           
 14653                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 14654  0052EA  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 14655  0052EE  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 14656  0052F2  0E02               	movlw	2
 14657  0052F4  6E05               	movwf	rcvr_datablock@btr+1,c
 14658  0052F6  0E00               	movlw	0
 14659  0052F8  6E04               	movwf	rcvr_datablock@btr,c
 14660  0052FA  EC27  F02D         	call	_rcvr_datablock	;wreg free
 14661  0052FE  0900               	iorlw	0
 14662  005300  B4D8               	btfsc	status,2,c
 14663  005302  D009               	goto	u5470
 14664                           
 14665                           ;diskio.c: 389:    buff += 512;
 14666  005304  0E02               	movlw	2
 14667  005306  2612               	addwf	disk_read@buff+1,f,c
 14668                           
 14669                           ;diskio.c: 390:   } while (--count);
 14670  005308  0617               	decf	disk_read@count,f,c
 14671  00530A  A0D8               	btfss	status,0,c
 14672  00530C  0618               	decf	disk_read@count+1,f,c
 14673  00530E  5017               	movf	disk_read@count,w,c
 14674  005310  1018               	iorwf	disk_read@count+1,w,c
 14675  005312  A4D8               	btfss	status,2,c
 14676  005314  D7EA               	goto	u5450
 14677  005316                     u5470:
 14678                           
 14679                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 14680  005316  0E12               	movlw	18
 14681  005318  181C               	xorwf	disk_read@cmd,w,c
 14682  00531A  A4D8               	btfss	status,2,c
 14683  00531C  D00B               	goto	l4628
 14684  00531E  0E00               	movlw	0
 14685  005320  6E0B               	movwf	send_cmd@arg,c
 14686  005322  0E00               	movlw	0
 14687  005324  6E0C               	movwf	send_cmd@arg+1,c
 14688  005326  0E00               	movlw	0
 14689  005328  6E0D               	movwf	send_cmd@arg+2,c
 14690  00532A  0E00               	movlw	0
 14691  00532C  6E0E               	movwf	send_cmd@arg+3,c
 14692  00532E  0E0C               	movlw	12
 14693  005330  EC0B  F02E         	call	_send_cmd
 14694  005334                     l4628:
 14695                           
 14696                           ;diskio.c: 393:  deselect();
 14697  005334  EC30  F02F         	call	_deselect	;wreg free
 14698                           
 14699                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 14700  005338  5017               	movf	disk_read@count,w,c
 14701  00533A  1018               	iorwf	disk_read@count+1,w,c
 14702  00533C  B4D8               	btfsc	status,2,c
 14703  00533E  D002               	goto	u5490
 14704  005340  0E01               	movlw	1
 14705  005342  0012               	return	
 14706  005344                     u5490:
 14707  005344  0E00               	movlw	0
 14708  005346  0012               	return		;funcret
 14709  005348                     __end_of_disk_read:
 14710                           	opt callstack 0
 14711                           
 14712 ;; *************** function _send_cmd *****************
 14713 ;; Defined at:
 14714 ;;		line 231 in file "diskio.c"
 14715 ;; Parameters:    Size  Location     Type
 14716 ;;  cmd             1    wreg     unsigned char 
 14717 ;;  arg             4   10[COMRAM] unsigned long 
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;  cmd             1   14[COMRAM] unsigned char 
 14720 ;;  res             1   15[COMRAM] unsigned char 
 14721 ;; Return value:  Size  Location     Type
 14722 ;;                  1    wreg      unsigned char 
 14723 ;; Registers used:
 14724 ;;		wreg, status,2, status,0, cstack
 14725 ;; Tracked objects:
 14726 ;;		On entry : 0/0
 14727 ;;		On exit  : 0/0
 14728 ;;		Unchanged: 0/0
 14729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14730 ;;      Params:         4       0       0       0       0       0       0       0       0
 14731 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14732 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14733 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14734 ;;Total ram usage:        6 bytes
 14735 ;; Hardware stack levels used:    1
 14736 ;; Hardware stack levels required when called:    4
 14737 ;; This function calls:
 14738 ;;		___send_cmd
 14739 ;; This function is called by:
 14740 ;;		_disk_initialize
 14741 ;;		_disk_read
 14742 ;;		_disk_write
 14743 ;;		_disk_ioctl
 14744 ;; This function uses a non-reentrant model
 14745 ;;
 14746                           
 14747                           	psect	text48
 14748  005C16                     __ptext48:
 14749                           	opt callstack 0
 14750  005C16                     _send_cmd:
 14751                           	opt callstack 21
 14752                           
 14753                           ;incstack = 0
 14754                           ;send_cmd@cmd stored from wreg
 14755  005C16  6E0F               	movwf	send_cmd@cmd,c
 14756                           
 14757                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 14758  005C18  AE0F               	btfss	send_cmd@cmd,7,c
 14759  005C1A  D012               	goto	l4518
 14760                           
 14761                           ;diskio.c: 243:   cmd &= 0x7F;
 14762  005C1C  9E0F               	bcf	send_cmd@cmd,7,c
 14763                           
 14764                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 14765  005C1E  0E00               	movlw	0
 14766  005C20  6E04               	movwf	___send_cmd@arg,c
 14767  005C22  0E00               	movlw	0
 14768  005C24  6E05               	movwf	___send_cmd@arg+1,c
 14769  005C26  0E00               	movlw	0
 14770  005C28  6E06               	movwf	___send_cmd@arg+2,c
 14771  005C2A  0E00               	movlw	0
 14772  005C2C  6E07               	movwf	___send_cmd@arg+3,c
 14773  005C2E  0E37               	movlw	55
 14774  005C30  ECA7  F02C         	call	___send_cmd
 14775  005C34  6E10               	movwf	send_cmd@res,c
 14776                           
 14777                           ;diskio.c: 249:   if (res > 1) return res;
 14778  005C36  0E01               	movlw	1
 14779  005C38  6410               	cpfsgt	send_cmd@res,c
 14780  005C3A  D002               	goto	l4518
 14781  005C3C  5010               	movf	send_cmd@res,w,c
 14782  005C3E  0012               	return	
 14783  005C40                     l4518:
 14784                           
 14785                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 14786  005C40  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 14787  005C44  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 14788  005C48  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 14789  005C4C  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 14790  005C50  500F               	movf	send_cmd@cmd,w,c
 14791  005C52  ECA7  F02C         	call	___send_cmd
 14792  005C56  0012               	return		;funcret
 14793  005C58                     __end_of_send_cmd:
 14794                           	opt callstack 0
 14795                           
 14796 ;; *************** function ___send_cmd *****************
 14797 ;; Defined at:
 14798 ;;		line 195 in file "diskio.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;  cmd             1    wreg     unsigned char 
 14801 ;;  arg             4    3[COMRAM] unsigned long 
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;  cmd             1    9[COMRAM] unsigned char 
 14804 ;;  n               1    8[COMRAM] unsigned char 
 14805 ;;  res             1    7[COMRAM] unsigned char 
 14806 ;; Return value:  Size  Location     Type
 14807 ;;                  1    wreg      unsigned char 
 14808 ;; Registers used:
 14809 ;;		wreg, status,2, status,0, cstack
 14810 ;; Tracked objects:
 14811 ;;		On entry : 0/0
 14812 ;;		On exit  : 0/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14815 ;;      Params:         4       0       0       0       0       0       0       0       0
 14816 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14817 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14818 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14819 ;;Total ram usage:        7 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; Hardware stack levels required when called:    3
 14822 ;; This function calls:
 14823 ;;		_SPI1_Exchange8bit
 14824 ;;		_deselect
 14825 ;;		_select
 14826 ;; This function is called by:
 14827 ;;		_send_cmd
 14828 ;; This function uses a non-reentrant model
 14829 ;;
 14830                           
 14831                           	psect	text49
 14832  00594E                     __ptext49:
 14833                           	opt callstack 0
 14834  00594E                     ___send_cmd:
 14835                           	opt callstack 21
 14836                           
 14837                           ;incstack = 0
 14838                           ;___send_cmd@cmd stored from wreg
 14839  00594E  6E0A               	movwf	___send_cmd@cmd,c
 14840                           
 14841                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 14842  005950  0E0C               	movlw	12
 14843  005952  180A               	xorwf	___send_cmd@cmd,w,c
 14844  005954  B4D8               	btfsc	status,2,c
 14845  005956  D009               	goto	l4438
 14846                           
 14847                           ;diskio.c: 204:   deselect();
 14848  005958  EC30  F02F         	call	_deselect	;wreg free
 14849                           
 14850                           ;diskio.c: 205:   if (!select()) return 0xFF;
 14851  00595C  ECE3  F02E         	call	_select	;wreg free
 14852  005960  0900               	iorlw	0
 14853  005962  A4D8               	btfss	status,2,c
 14854  005964  D002               	goto	l4438
 14855  005966  0EFF               	movlw	255
 14856  005968  0012               	return	
 14857  00596A                     l4438:
 14858                           
 14859                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 14860  00596A  500A               	movf	___send_cmd@cmd,w,c
 14861  00596C  0940               	iorlw	64
 14862  00596E  EC04  F02F         	call	_SPI1_Exchange8bit
 14863                           
 14864                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 14865  005972  5007               	movf	___send_cmd@arg+3,w,c
 14866  005974  EC04  F02F         	call	_SPI1_Exchange8bit
 14867                           
 14868                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 14869  005978  5006               	movf	___send_cmd@arg+2,w,c
 14870  00597A  EC04  F02F         	call	_SPI1_Exchange8bit
 14871                           
 14872                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 14873  00597E  5005               	movf	___send_cmd@arg+1,w,c
 14874  005980  EC04  F02F         	call	_SPI1_Exchange8bit
 14875                           
 14876                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 14877  005984  5004               	movf	___send_cmd@arg,w,c
 14878  005986  EC04  F02F         	call	_SPI1_Exchange8bit
 14879                           
 14880                           ;diskio.c: 214:  n = 0x01;
 14881  00598A  0E01               	movlw	1
 14882  00598C  6E09               	movwf	___send_cmd@n,c
 14883                           
 14884                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 14885  00598E  500A               	movf	___send_cmd@cmd,w,c
 14886  005990  A4D8               	btfss	status,2,c
 14887  005992  D002               	goto	l4454
 14888  005994  0E95               	movlw	149
 14889  005996  6E09               	movwf	___send_cmd@n,c
 14890  005998                     l4454:
 14891                           
 14892                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 14893  005998  0E08               	movlw	8
 14894  00599A  180A               	xorwf	___send_cmd@cmd,w,c
 14895  00599C  A4D8               	btfss	status,2,c
 14896  00599E  D002               	goto	l4458
 14897  0059A0  0E87               	movlw	135
 14898  0059A2  6E09               	movwf	___send_cmd@n,c
 14899  0059A4                     l4458:
 14900                           
 14901                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 14902  0059A4  5009               	movf	___send_cmd@n,w,c
 14903  0059A6  EC04  F02F         	call	_SPI1_Exchange8bit
 14904                           
 14905                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 14906  0059AA  0E0C               	movlw	12
 14907  0059AC  180A               	xorwf	___send_cmd@cmd,w,c
 14908  0059AE  A4D8               	btfss	status,2,c
 14909  0059B0  D003               	goto	l4464
 14910  0059B2  0EFF               	movlw	255
 14911  0059B4  EC04  F02F         	call	_SPI1_Exchange8bit
 14912  0059B8                     l4464:
 14913                           
 14914                           ;diskio.c: 221:  n = 10;
 14915  0059B8  0E0A               	movlw	10
 14916  0059BA  6E09               	movwf	___send_cmd@n,c
 14917  0059BC                     l4466:
 14918                           
 14919                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 14920  0059BC  0EFF               	movlw	255
 14921  0059BE  EC04  F02F         	call	_SPI1_Exchange8bit
 14922  0059C2  6E08               	movwf	___send_cmd@res,c
 14923  0059C4  AE08               	btfss	___send_cmd@res,7,c
 14924  0059C6  D002               	goto	l4472
 14925  0059C8  2E09               	decfsz	___send_cmd@n,f,c
 14926  0059CA  D7F8               	goto	l4466
 14927  0059CC                     l4472:
 14928                           
 14929                           ;diskio.c: 226:  return res;
 14930  0059CC  5008               	movf	___send_cmd@res,w,c
 14931  0059CE  0012               	return		;funcret
 14932  0059D0                     __end_of___send_cmd:
 14933                           	opt callstack 0
 14934                           
 14935 ;; *************** function _select *****************
 14936 ;; Defined at:
 14937 ;;		line 106 in file "diskio.c"
 14938 ;; Parameters:    Size  Location     Type
 14939 ;;		None
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;		None
 14942 ;; Return value:  Size  Location     Type
 14943 ;;                  1    wreg      unsigned char 
 14944 ;; Registers used:
 14945 ;;		wreg, status,2, status,0, cstack
 14946 ;; Tracked objects:
 14947 ;;		On entry : 0/0
 14948 ;;		On exit  : 0/0
 14949 ;;		Unchanged: 0/0
 14950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14951 ;;      Params:         0       0       0       0       0       0       0       0       0
 14952 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14953 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14954 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14955 ;;Total ram usage:        0 bytes
 14956 ;; Hardware stack levels used:    1
 14957 ;; Hardware stack levels required when called:    2
 14958 ;; This function calls:
 14959 ;;		_SPI1_Exchange8bit
 14960 ;;		_deselect
 14961 ;;		_wait_ready
 14962 ;; This function is called by:
 14963 ;;		___send_cmd
 14964 ;;		_disk_ioctl
 14965 ;; This function uses a non-reentrant model
 14966 ;;
 14967                           
 14968                           	psect	text50
 14969  005DC6                     __ptext50:
 14970                           	opt callstack 0
 14971  005DC6                     _select:
 14972                           	opt callstack 21
 14973                           
 14974                           ;incstack = 0
 14975                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 14976  005DC6  948A               	bcf	3978,2,c	;volatile
 14977                           
 14978                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 14979  005DC8  0EFF               	movlw	255
 14980  005DCA  EC04  F02F         	call	_SPI1_Exchange8bit
 14981                           
 14982                           ;diskio.c: 110:  if (wait_ready()) return 1;
 14983  005DCE  EC2C  F02E         	call	_wait_ready	;wreg free
 14984  005DD2  0900               	iorlw	0
 14985  005DD4  B4D8               	btfsc	status,2,c
 14986  005DD6  D002               	goto	l4422
 14987  005DD8  0E01               	movlw	1
 14988  005DDA  0012               	return	
 14989  005DDC                     l4422:
 14990                           
 14991                           ;diskio.c: 112:  deselect();
 14992  005DDC  EC30  F02F         	call	_deselect	;wreg free
 14993                           
 14994                           ;diskio.c: 113:  return 0;
 14995  005DE0  0E00               	movlw	0
 14996  005DE2  0012               	return		;funcret
 14997  005DE4                     __end_of_select:
 14998                           	opt callstack 0
 14999                           
 15000 ;; *************** function _wait_ready *****************
 15001 ;; Defined at:
 15002 ;;		line 74 in file "diskio.c"
 15003 ;; Parameters:    Size  Location     Type
 15004 ;;		None
 15005 ;; Auto vars:     Size  Location     Type
 15006 ;;  tmr             2    1[COMRAM] unsigned short 
 15007 ;; Return value:  Size  Location     Type
 15008 ;;                  1    wreg      unsigned char 
 15009 ;; Registers used:
 15010 ;;		wreg, status,2, status,0, cstack
 15011 ;; Tracked objects:
 15012 ;;		On entry : 0/0
 15013 ;;		On exit  : 0/0
 15014 ;;		Unchanged: 0/0
 15015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15016 ;;      Params:         0       0       0       0       0       0       0       0       0
 15017 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15018 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15019 ;;      Totals:         2       0       0       0       0       0       0       0       0
 15020 ;;Total ram usage:        2 bytes
 15021 ;; Hardware stack levels used:    1
 15022 ;; Hardware stack levels required when called:    1
 15023 ;; This function calls:
 15024 ;;		_SPI1_Exchange8bit
 15025 ;; This function is called by:
 15026 ;;		_select
 15027 ;;		_xmit_datablock
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           	psect	text51
 15032  005C58                     __ptext51:
 15033                           	opt callstack 0
 15034  005C58                     _wait_ready:
 15035                           	opt callstack 23
 15036                           
 15037                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 15038                           
 15039                           ;incstack = 0
 15040  005C58  0E13               	movlw	19
 15041  005C5A  6E03               	movwf	wait_ready@tmr+1,c
 15042  005C5C  0E88               	movlw	136
 15043  005C5E  6E02               	movwf	wait_ready@tmr,c
 15044  005C60  D00D               	goto	l17
 15045  005C62                     l4400:
 15046                           
 15047                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 15048  005C62  0EFF               	movlw	255
 15049  005C64  EC04  F02F         	call	_SPI1_Exchange8bit
 15050  005C68  0AFF               	xorlw	255
 15051  005C6A  B4D8               	btfsc	status,2,c
 15052  005C6C  D00B               	goto	u5020
 15053                           
 15054                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 15055  005C6E  0E42               	movlw	66
 15056  005C70                     u10007:
 15057  005C70  2EE8               	decfsz	wreg,f,c
 15058  005C72  D7FE               	bra	u10007
 15059  005C74  D000               	nop2	
 15060                           
 15061                           ;diskio.c: 81:  }
 15062  005C76  0602               	decf	wait_ready@tmr,f,c
 15063  005C78  A0D8               	btfss	status,0,c
 15064  005C7A  0603               	decf	wait_ready@tmr+1,f,c
 15065  005C7C                     l17:
 15066  005C7C  5002               	movf	wait_ready@tmr,w,c
 15067  005C7E  1003               	iorwf	wait_ready@tmr+1,w,c
 15068  005C80  A4D8               	btfss	status,2,c
 15069  005C82  D7EF               	goto	l4400
 15070  005C84                     u5020:
 15071                           
 15072                           ;diskio.c: 83:  return tmr ? 1 : 0;
 15073  005C84  5002               	movf	wait_ready@tmr,w,c
 15074  005C86  1003               	iorwf	wait_ready@tmr+1,w,c
 15075  005C88  B4D8               	btfsc	status,2,c
 15076  005C8A  D002               	goto	u5030
 15077  005C8C  0E01               	movlw	1
 15078  005C8E  0012               	return	
 15079  005C90                     u5030:
 15080  005C90  0E00               	movlw	0
 15081  005C92  0012               	return		;funcret
 15082  005C94                     __end_of_wait_ready:
 15083                           	opt callstack 0
 15084                           
 15085 ;; *************** function _deselect *****************
 15086 ;; Defined at:
 15087 ;;		line 93 in file "diskio.c"
 15088 ;; Parameters:    Size  Location     Type
 15089 ;;		None
 15090 ;; Auto vars:     Size  Location     Type
 15091 ;;		None
 15092 ;; Return value:  Size  Location     Type
 15093 ;;                  1    wreg      void 
 15094 ;; Registers used:
 15095 ;;		wreg, status,2, cstack
 15096 ;; Tracked objects:
 15097 ;;		On entry : 0/0
 15098 ;;		On exit  : 0/0
 15099 ;;		Unchanged: 0/0
 15100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15101 ;;      Params:         0       0       0       0       0       0       0       0       0
 15102 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15103 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15104 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15105 ;;Total ram usage:        0 bytes
 15106 ;; Hardware stack levels used:    1
 15107 ;; Hardware stack levels required when called:    1
 15108 ;; This function calls:
 15109 ;;		_SPI1_Exchange8bit
 15110 ;; This function is called by:
 15111 ;;		_select
 15112 ;;		___send_cmd
 15113 ;;		_disk_initialize
 15114 ;;		_disk_read
 15115 ;;		_disk_write
 15116 ;;		_disk_ioctl
 15117 ;; This function uses a non-reentrant model
 15118 ;;
 15119                           
 15120                           	psect	text52
 15121  005E60                     __ptext52:
 15122                           	opt callstack 0
 15123  005E60                     _deselect:
 15124                           	opt callstack 21
 15125                           
 15126                           ;incstack = 0
 15127                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 15128  005E60  848A               	bsf	3978,2,c	;volatile
 15129                           
 15130                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 15131  005E62  0EFF               	movlw	255
 15132  005E64  EC04  F02F         	call	_SPI1_Exchange8bit
 15133  005E68  0012               	return		;funcret
 15134  005E6A                     __end_of_deselect:
 15135                           	opt callstack 0
 15136                           
 15137 ;; *************** function _rcvr_datablock *****************
 15138 ;; Defined at:
 15139 ;;		line 123 in file "diskio.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;  buff            2    1[COMRAM] PTR unsigned char 
 15142 ;;		 -> FatFs(558), disk_ioctl@csd(16), NULL(0), 
 15143 ;;  btr             2    3[COMRAM] unsigned short 
 15144 ;; Auto vars:     Size  Location     Type
 15145 ;;  tmr             2    5[COMRAM] unsigned short 
 15146 ;;  token           1    7[COMRAM] unsigned char 
 15147 ;; Return value:  Size  Location     Type
 15148 ;;                  1    wreg      unsigned char 
 15149 ;; Registers used:
 15150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15156 ;;      Params:         4       0       0       0       0       0       0       0       0
 15157 ;;      Locals:         3       0       0       0       0       0       0       0       0
 15158 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15159 ;;      Totals:         7       0       0       0       0       0       0       0       0
 15160 ;;Total ram usage:        7 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    1
 15163 ;; This function calls:
 15164 ;;		_SPI1_Exchange8bit
 15165 ;; This function is called by:
 15166 ;;		_disk_read
 15167 ;;		_disk_ioctl
 15168 ;; This function uses a non-reentrant model
 15169 ;;
 15170                           
 15171                           	psect	text53
 15172  005A4E                     __ptext53:
 15173                           	opt callstack 0
 15174  005A4E                     _rcvr_datablock:
 15175                           	opt callstack 24
 15176                           
 15177                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 15178                           
 15179                           ;incstack = 0
 15180  005A4E  0E07               	movlw	7
 15181  005A50  6E07               	movwf	rcvr_datablock@tmr+1,c
 15182  005A52  0ED0               	movlw	208
 15183  005A54  6E06               	movwf	rcvr_datablock@tmr,c
 15184  005A56  D00E               	goto	l35
 15185  005A58                     l4524:
 15186                           
 15187                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 15188  005A58  0EFF               	movlw	255
 15189  005A5A  EC04  F02F         	call	_SPI1_Exchange8bit
 15190  005A5E  6E08               	movwf	rcvr_datablock@token,c
 15191                           
 15192                           ;diskio.c: 134:   if (token != 0xFF) break;
 15193  005A60  2808               	incf	rcvr_datablock@token,w,c
 15194  005A62  A4D8               	btfss	status,2,c
 15195  005A64  D00B               	goto	u5200
 15196                           
 15197                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 15198  005A66  0E42               	movlw	66
 15199  005A68                     u10017:
 15200  005A68  2EE8               	decfsz	wreg,f,c
 15201  005A6A  D7FE               	bra	u10017
 15202  005A6C  D000               	nop2	
 15203                           
 15204                           ;diskio.c: 136:  }
 15205  005A6E  0606               	decf	rcvr_datablock@tmr,f,c
 15206  005A70  A0D8               	btfss	status,0,c
 15207  005A72  0607               	decf	rcvr_datablock@tmr+1,f,c
 15208  005A74                     l35:
 15209  005A74  5006               	movf	rcvr_datablock@tmr,w,c
 15210  005A76  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 15211  005A78  A4D8               	btfss	status,2,c
 15212  005A7A  D7EE               	goto	l4524
 15213  005A7C                     u5200:
 15214                           
 15215                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 15216  005A7C  0EFE               	movlw	254
 15217  005A7E  1808               	xorwf	rcvr_datablock@token,w,c
 15218  005A80  B4D8               	btfsc	status,2,c
 15219  005A82  D002               	goto	l4540
 15220  005A84  0E00               	movlw	0
 15221  005A86  0012               	return	
 15222  005A88                     l4540:
 15223                           
 15224                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 15225  005A88  0EFF               	movlw	255
 15226  005A8A  EC04  F02F         	call	_SPI1_Exchange8bit
 15227  005A8E  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 15228  005A92  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 15229  005A96  6EDF               	movwf	indf2,c
 15230  005A98  4A02               	infsnz	rcvr_datablock@buff,f,c
 15231  005A9A  2A03               	incf	rcvr_datablock@buff+1,f,c
 15232  005A9C  0604               	decf	rcvr_datablock@btr,f,c
 15233  005A9E  A0D8               	btfss	status,0,c
 15234  005AA0  0605               	decf	rcvr_datablock@btr+1,f,c
 15235  005AA2  5004               	movf	rcvr_datablock@btr,w,c
 15236  005AA4  1005               	iorwf	rcvr_datablock@btr+1,w,c
 15237  005AA6  A4D8               	btfss	status,2,c
 15238  005AA8  D7EF               	goto	l4540
 15239                           
 15240                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 15241  005AAA  0EFF               	movlw	255
 15242  005AAC  EC04  F02F         	call	_SPI1_Exchange8bit
 15243                           
 15244                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 15245  005AB0  0EFF               	movlw	255
 15246  005AB2  EC04  F02F         	call	_SPI1_Exchange8bit
 15247                           
 15248                           ;diskio.c: 145:  return 1;
 15249  005AB6  0E01               	movlw	1
 15250  005AB8  0012               	return		;funcret
 15251  005ABA                     __end_of_rcvr_datablock:
 15252                           	opt callstack 0
 15253                           
 15254 ;; *************** function _SPI1_Exchange8bit *****************
 15255 ;; Defined at:
 15256 ;;		line 90 in file "mcc_generated_files/spi1.c"
 15257 ;; Parameters:    Size  Location     Type
 15258 ;;  data            1    wreg     unsigned char 
 15259 ;; Auto vars:     Size  Location     Type
 15260 ;;  data            1    0[COMRAM] unsigned char 
 15261 ;; Return value:  Size  Location     Type
 15262 ;;                  1    wreg      unsigned char 
 15263 ;; Registers used:
 15264 ;;		wreg, status,2
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15270 ;;      Params:         0       0       0       0       0       0       0       0       0
 15271 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15272 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15273 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15274 ;;Total ram usage:        1 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; This function calls:
 15277 ;;		Nothing
 15278 ;; This function is called by:
 15279 ;;		_wait_ready
 15280 ;;		_deselect
 15281 ;;		_select
 15282 ;;		_rcvr_datablock
 15283 ;;		_xmit_datablock
 15284 ;;		___send_cmd
 15285 ;;		_disk_initialize
 15286 ;;		_disk_ioctl
 15287 ;;		_SPI1_Exchange8bitBuffer
 15288 ;; This function uses a non-reentrant model
 15289 ;;
 15290                           
 15291                           	psect	text54
 15292  005E08                     __ptext54:
 15293                           	opt callstack 0
 15294  005E08                     _SPI1_Exchange8bit:
 15295                           	opt callstack 23
 15296                           
 15297                           ;incstack = 0
 15298                           ;SPI1_Exchange8bit@data stored from wreg
 15299  005E08  6E01               	movwf	SPI1_Exchange8bit@data,c
 15300                           
 15301                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 15302  005E0A  9EC6               	bcf	4038,7,c	;volatile
 15303                           
 15304                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 15305  005E0C  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 15306  005E10                     l748:
 15307                           
 15308                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 15309  005E10  A0C7               	btfss	4039,0,c	;volatile
 15310  005E12  D7FE               	goto	l748
 15311                           
 15312                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 15313  005E14  50C9               	movf	4041,w,c	;volatile
 15314  005E16  0012               	return		;funcret
 15315  005E18                     __end_of_SPI1_Exchange8bit:
 15316                           	opt callstack 0
 15317                           
 15318 ;; *************** function _SYSTEM_Initialize *****************
 15319 ;; Defined at:
 15320 ;;		line 116 in file "mcc_generated_files/mcc.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;		None
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;		None
 15325 ;; Return value:  Size  Location     Type
 15326 ;;                  1    wreg      void 
 15327 ;; Registers used:
 15328 ;;		wreg, status,2, cstack
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15334 ;;      Params:         0       0       0       0       0       0       0       0       0
 15335 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15336 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15337 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15338 ;;Total ram usage:        0 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:    1
 15341 ;; This function calls:
 15342 ;;		_OSCILLATOR_Initialize
 15343 ;;		_PIN_MANAGER_Initialize
 15344 ;;		_SPI1_Initialize
 15345 ;; This function is called by:
 15346 ;;		_guardar
 15347 ;; This function uses a non-reentrant model
 15348 ;;
 15349                           
 15350                           	psect	text55
 15351  005E36                     __ptext55:
 15352                           	opt callstack 0
 15353  005E36                     _SYSTEM_Initialize:
 15354                           	opt callstack 28
 15355                           
 15356                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 15357                           
 15358                           ;incstack = 0
 15359  005E36  ECD3  F02E         	call	_PIN_MANAGER_Initialize	;wreg free
 15360                           
 15361                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 15362  005E3A  ECFB  F02E         	call	_OSCILLATOR_Initialize	;wreg free
 15363                           
 15364                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 15365  005E3E  EC22  F02F         	call	_SPI1_Initialize	;wreg free
 15366  005E42  0012               	return		;funcret
 15367  005E44                     __end_of_SYSTEM_Initialize:
 15368                           	opt callstack 0
 15369                           
 15370 ;; *************** function _SPI1_Initialize *****************
 15371 ;; Defined at:
 15372 ;;		line 63 in file "mcc_generated_files/spi1.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;		None
 15375 ;; Auto vars:     Size  Location     Type
 15376 ;;		None
 15377 ;; Return value:  Size  Location     Type
 15378 ;;                  1    wreg      void 
 15379 ;; Registers used:
 15380 ;;		wreg, status,2
 15381 ;; Tracked objects:
 15382 ;;		On entry : 0/0
 15383 ;;		On exit  : 0/0
 15384 ;;		Unchanged: 0/0
 15385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15386 ;;      Params:         0       0       0       0       0       0       0       0       0
 15387 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15388 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15389 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15390 ;;Total ram usage:        0 bytes
 15391 ;; Hardware stack levels used:    1
 15392 ;; This function calls:
 15393 ;;		Nothing
 15394 ;; This function is called by:
 15395 ;;		_disk_initialize
 15396 ;;		_SYSTEM_Initialize
 15397 ;; This function uses a non-reentrant model
 15398 ;;
 15399                           
 15400                           	psect	text56
 15401  005E44                     __ptext56:
 15402                           	opt callstack 0
 15403  005E44                     _SPI1_Initialize:
 15404                           	opt callstack 26
 15405                           
 15406                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 15407                           
 15408                           ;incstack = 0
 15409  005E44  0E40               	movlw	64
 15410  005E46  6EC7               	movwf	4039,c	;volatile
 15411                           
 15412                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 15413  005E48  0E22               	movlw	34
 15414  005E4A  6EC6               	movwf	4038,c	;volatile
 15415                           
 15416                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 15417  005E4C  0E00               	movlw	0
 15418  005E4E  6EC8               	movwf	4040,c	;volatile
 15419  005E50  0012               	return		;funcret
 15420  005E52                     __end_of_SPI1_Initialize:
 15421                           	opt callstack 0
 15422                           
 15423 ;; *************** function _PIN_MANAGER_Initialize *****************
 15424 ;; Defined at:
 15425 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 15426 ;; Parameters:    Size  Location     Type
 15427 ;;		None
 15428 ;; Auto vars:     Size  Location     Type
 15429 ;;		None
 15430 ;; Return value:  Size  Location     Type
 15431 ;;                  1    wreg      void 
 15432 ;; Registers used:
 15433 ;;		wreg, status,2
 15434 ;; Tracked objects:
 15435 ;;		On entry : 0/0
 15436 ;;		On exit  : 0/0
 15437 ;;		Unchanged: 0/0
 15438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15439 ;;      Params:         0       0       0       0       0       0       0       0       0
 15440 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15441 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15442 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15443 ;;Total ram usage:        0 bytes
 15444 ;; Hardware stack levels used:    1
 15445 ;; This function calls:
 15446 ;;		Nothing
 15447 ;; This function is called by:
 15448 ;;		_SYSTEM_Initialize
 15449 ;; This function uses a non-reentrant model
 15450 ;;
 15451                           
 15452                           	psect	text57
 15453  005DA6                     __ptext57:
 15454                           	opt callstack 0
 15455  005DA6                     _PIN_MANAGER_Initialize:
 15456                           	opt callstack 28
 15457                           
 15458                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 15459                           
 15460                           ;incstack = 0
 15461  005DA6  0E04               	movlw	4
 15462  005DA8  6E8A               	movwf	3978,c	;volatile
 15463                           
 15464                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 15465  005DAA  0E00               	movlw	0
 15466  005DAC  6E8B               	movwf	3979,c	;volatile
 15467                           
 15468                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 15469  005DAE  0EF1               	movlw	241
 15470  005DB0  6E93               	movwf	3987,c	;volatile
 15471                           
 15472                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 15473  005DB2  0EC7               	movlw	199
 15474  005DB4  6E94               	movwf	3988,c	;volatile
 15475                           
 15476                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 15477  005DB6  0EC4               	movlw	196
 15478  005DB8  010F               	movlb	15	; () banked
 15479  005DBA  6F5D               	movwf	93,b	;volatile
 15480                           
 15481                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 15482  005DBC  0E30               	movlw	48
 15483  005DBE  6F5C               	movwf	92,b	;volatile
 15484                           
 15485                           ; BSR set to: 15
 15486                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 15487  005DC0  6885               	setf	3973,c	;volatile
 15488                           
 15489                           ; BSR set to: 15
 15490                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 15491  005DC2  9EF1               	bcf	4081,7,c	;volatile
 15492                           
 15493                           ; BSR set to: 15
 15494  005DC4  0012               	return		;funcret
 15495  005DC6                     __end_of_PIN_MANAGER_Initialize:
 15496                           	opt callstack 0
 15497                           
 15498 ;; *************** function _OSCILLATOR_Initialize *****************
 15499 ;; Defined at:
 15500 ;;		line 124 in file "mcc_generated_files/mcc.c"
 15501 ;; Parameters:    Size  Location     Type
 15502 ;;		None
 15503 ;; Auto vars:     Size  Location     Type
 15504 ;;		None
 15505 ;; Return value:  Size  Location     Type
 15506 ;;                  1    wreg      void 
 15507 ;; Registers used:
 15508 ;;		wreg, status,2
 15509 ;; Tracked objects:
 15510 ;;		On entry : 0/0
 15511 ;;		On exit  : 0/0
 15512 ;;		Unchanged: 0/0
 15513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15514 ;;      Params:         0       0       0       0       0       0       0       0       0
 15515 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15516 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15517 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15518 ;;Total ram usage:        0 bytes
 15519 ;; Hardware stack levels used:    1
 15520 ;; This function calls:
 15521 ;;		Nothing
 15522 ;; This function is called by:
 15523 ;;		_SYSTEM_Initialize
 15524 ;; This function uses a non-reentrant model
 15525 ;;
 15526                           
 15527                           	psect	text58
 15528  005DF6                     __ptext58:
 15529                           	opt callstack 0
 15530  005DF6                     _OSCILLATOR_Initialize:
 15531                           	opt callstack 28
 15532                           
 15533                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 15534                           
 15535                           ; BSR set to: 15
 15536                           ;incstack = 0
 15537  005DF6  0E60               	movlw	96
 15538  005DF8  6ED3               	movwf	4051,c	;volatile
 15539                           
 15540                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 15541  005DFA  0E00               	movlw	0
 15542  005DFC  6ED2               	movwf	4050,c	;volatile
 15543                           
 15544                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 15545  005DFE  0E00               	movlw	0
 15546  005E00  6E9B               	movwf	3995,c	;volatile
 15547                           
 15548                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 15549  005E02  0E00               	movlw	0
 15550  005E04  6EB5               	movwf	4021,c	;volatile
 15551  005E06  0012               	return		;funcret
 15552  005E08                     __end_of_OSCILLATOR_Initialize:
 15553                           	opt callstack 0
 15554                           
 15555 ;; *************** function _Error *****************
 15556 ;; Defined at:
 15557 ;;		line 13 in file "./Errores.h"
 15558 ;; Parameters:    Size  Location     Type
 15559 ;;  a               2    0[COMRAM] int 
 15560 ;; Auto vars:     Size  Location     Type
 15561 ;;  v_seg          10    3[COMRAM] unsigned char [10]
 15562 ;; Return value:  Size  Location     Type
 15563 ;;                  1    wreg      void 
 15564 ;; Registers used:
 15565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15566 ;; Tracked objects:
 15567 ;;		On entry : 0/0
 15568 ;;		On exit  : 0/0
 15569 ;;		Unchanged: 0/0
 15570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15571 ;;      Params:         2       0       0       0       0       0       0       0       0
 15572 ;;      Locals:        10       0       0       0       0       0       0       0       0
 15573 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15574 ;;      Totals:        13       0       0       0       0       0       0       0       0
 15575 ;;Total ram usage:       13 bytes
 15576 ;; Hardware stack levels used:    1
 15577 ;; This function calls:
 15578 ;;		Nothing
 15579 ;; This function is called by:
 15580 ;;		_guardar
 15581 ;; This function uses a non-reentrant model
 15582 ;;
 15583                           
 15584                           	psect	text59
 15585  005412                     __ptext59:
 15586                           	opt callstack 0
 15587  005412                     _Error:
 15588                           	opt callstack 29
 15589                           
 15590                           ;./Errores.h: 14:     LATD = 0x00;
 15591                           
 15592                           ;incstack = 0
 15593  005412  0E00               	movlw	0
 15594  005414  6E8C               	movwf	3980,c	;volatile
 15595                           
 15596                           ;./Errores.h: 15:     TRISD = 0x00;
 15597  005416  0E00               	movlw	0
 15598  005418  6E95               	movwf	3989,c	;volatile
 15599                           
 15600                           ;./Errores.h: 16:     ANSELD = 0x00;
 15601  00541A  0E00               	movlw	0
 15602  00541C  010F               	movlb	15	; () banked
 15603  00541E  6F5E               	movwf	94,b	;volatile
 15604                           
 15605                           ;./Errores.h: 17:     LATE = 0x00;
 15606  005420  0E00               	movlw	0
 15607  005422  6E8D               	movwf	3981,c	;volatile
 15608                           
 15609                           ;./Errores.h: 18:     TRISE = 0x00;
 15610  005424  0E00               	movlw	0
 15611  005426  6E96               	movwf	3990,c	;volatile
 15612                           
 15613                           ;./Errores.h: 19:     ANSELE = 0x00;
 15614  005428  0E00               	movlw	0
 15615  00542A  6F5F               	movwf	95,b	;volatile
 15616                           
 15617                           ; BSR set to: 15
 15618                           ;./Errores.h: 21:     unsigned char v_seg[10]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0
      +                          x7F,0x73};
 15619  00542C  EE20  F0E5         	lfsr	2,Error@F5051
 15620  005430  EE10  F004         	lfsr	1,Error@v_seg
 15621  005434  0E09               	movlw	9
 15622  005436                     u9591:
 15623  005436  CFDB FFE3          	movff	plusw2,plusw1
 15624  00543A  06E8               	decf	wreg,f,c
 15625  00543C  E2FC               	bc	u9591
 15626                           
 15627                           ; BSR set to: 15
 15628                           ;./Errores.h: 22:     if(a != 33 && a != 55){
 15629  00543E  0E21               	movlw	33
 15630  005440  1801               	xorwf	Error@a,w,c
 15631  005442  1002               	iorwf	Error@a+1,w,c
 15632  005444  B4D8               	btfsc	status,2,c
 15633  005446  D010               	goto	l6916
 15634                           
 15635                           ; BSR set to: 15
 15636  005448  0E37               	movlw	55
 15637  00544A  1801               	xorwf	Error@a,w,c
 15638  00544C  1002               	iorwf	Error@a+1,w,c
 15639  00544E  B4D8               	btfsc	status,2,c
 15640  005450  D00B               	goto	l6916
 15641                           
 15642                           ; BSR set to: 15
 15643                           ;./Errores.h: 23:     LATD = v_seg[a];
 15644  005452  0E04               	movlw	low Error@v_seg
 15645  005454  2401               	addwf	Error@a,w,c
 15646  005456  6ED9               	movwf	fsr2l,c
 15647  005458  0E00               	movlw	high Error@v_seg
 15648  00545A  2002               	addwfc	Error@a+1,w,c
 15649  00545C  6EDA               	movwf	fsr2h,c
 15650  00545E  50DF               	movf	indf2,w,c
 15651  005460  6E8C               	movwf	3980,c	;volatile
 15652                           
 15653                           ; BSR set to: 15
 15654                           ;./Errores.h: 24:     LATE = 0x01;
 15655  005462  0E01               	movlw	1
 15656  005464  6E8D               	movwf	3981,c	;volatile
 15657                           
 15658                           ;./Errores.h: 25:     }
 15659  005466  0012               	return	
 15660  005468                     l6916:
 15661                           
 15662                           ; BSR set to: 15
 15663  005468  0E21               	movlw	33
 15664  00546A  1801               	xorwf	Error@a,w,c
 15665  00546C  1002               	iorwf	Error@a+1,w,c
 15666  00546E  A4D8               	btfss	status,2,c
 15667  005470  D005               	goto	l6922
 15668                           
 15669                           ; BSR set to: 15
 15670                           ;./Errores.h: 27:     LATD = v_seg[6];
 15671  005472  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 15672                           
 15673                           ; BSR set to: 15
 15674                           ;./Errores.h: 28:     LATE = 0x02;
 15675  005476  0E02               	movlw	2
 15676  005478  6E8D               	movwf	3981,c	;volatile
 15677                           
 15678                           ;./Errores.h: 29:     }
 15679  00547A  0012               	return	
 15680  00547C                     l6922:
 15681                           
 15682                           ; BSR set to: 15
 15683  00547C  0EE7               	movlw	231
 15684  00547E  1801               	xorwf	Error@a,w,c
 15685  005480  E107               	bnz	l848
 15686  005482  0E03               	movlw	3
 15687  005484  1802               	xorwf	Error@a+1,w,c
 15688  005486  A4D8               	btfss	status,2,c
 15689  005488  D003               	goto	l848
 15690  00548A                     u9630:
 15691                           
 15692                           ;./Errores.h: 31:     LATE = 0x00;
 15693  00548A  0E00               	movlw	0
 15694  00548C  6E8D               	movwf	3981,c	;volatile
 15695                           
 15696                           ;./Errores.h: 32:     }
 15697  00548E  0012               	return	
 15698  005490                     l848:
 15699                           
 15700                           ; BSR set to: 15
 15701                           ;./Errores.h: 34:     LATD = v_seg[0];
 15702  005490  C004  FF8C         	movff	Error@v_seg,3980	;volatile
 15703                           
 15704                           ; BSR set to: 15
 15705                           ;./Errores.h: 35:     LATE = 0x01;
 15706  005494  0E01               	movlw	1
 15707  005496  6E8D               	movwf	3981,c	;volatile
 15708                           
 15709                           ; BSR set to: 15
 15710                           ;./Errores.h: 36:     _delay((unsigned long)((1)*(8000000/4000.0)));
 15711  005498  0E03               	movlw	3
 15712  00549A  6E03               	movwf	??_Error& (0+255),c
 15713  00549C  0E98               	movlw	152
 15714  00549E                     u10027:
 15715  00549E  2EE8               	decfsz	wreg,f,c
 15716  0054A0  D7FE               	bra	u10027
 15717  0054A2  2E03               	decfsz	??_Error& (0+255),f,c
 15718  0054A4  D7FC               	bra	u10027
 15719                           
 15720                           ;./Errores.h: 38:     LATE = 0x00;
 15721  0054A6  0E00               	movlw	0
 15722  0054A8  6E8D               	movwf	3981,c	;volatile
 15723                           
 15724                           ;./Errores.h: 39:     LATD = v_seg[9];
 15725  0054AA  C00D  FF8C         	movff	Error@v_seg+9,3980	;volatile
 15726                           
 15727                           ;./Errores.h: 40:     LATE = 0x02;
 15728  0054AE  0E02               	movlw	2
 15729  0054B0  6E8D               	movwf	3981,c	;volatile
 15730                           
 15731                           ;./Errores.h: 41:     _delay((unsigned long)((1)*(8000000/4000.0)));
 15732  0054B2  0E03               	movlw	3
 15733  0054B4  6E03               	movwf	??_Error& (0+255),c
 15734  0054B6  0E98               	movlw	152
 15735  0054B8                     u10037:
 15736  0054B8  2EE8               	decfsz	wreg,f,c
 15737  0054BA  D7FE               	bra	u10037
 15738  0054BC  2E03               	decfsz	??_Error& (0+255),f,c
 15739  0054BE  D7FC               	bra	u10037
 15740                           
 15741                           ;./Errores.h: 43:     LATE = 0x00;
 15742  0054C0  0E00               	movlw	0
 15743  0054C2  6E8D               	movwf	3981,c	;volatile
 15744                           
 15745                           ;./Errores.h: 44:     LATD = v_seg[6];
 15746  0054C4  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 15747                           
 15748                           ;./Errores.h: 45:     LATE = 0x04;
 15749  0054C8  0E04               	movlw	4
 15750  0054CA  6E8D               	movwf	3981,c	;volatile
 15751                           
 15752                           ;./Errores.h: 46:     _delay((unsigned long)((1)*(8000000/4000.0)));
 15753  0054CC  0E03               	movlw	3
 15754  0054CE  6E03               	movwf	??_Error& (0+255),c
 15755  0054D0  0E98               	movlw	152
 15756  0054D2                     u10047:
 15757  0054D2  2EE8               	decfsz	wreg,f,c
 15758  0054D4  D7FE               	bra	u10047
 15759  0054D6  2E03               	decfsz	??_Error& (0+255),f,c
 15760  0054D8  D7FC               	bra	u10047
 15761  0054DA  D7D7               	goto	u9630
 15762  0054DC                     __end_of_Error:
 15763                           	opt callstack 0
 15764                           
 15765 ;; *************** function _Init8LEDs *****************
 15766 ;; Defined at:
 15767 ;;		line 74 in file "Main.c"
 15768 ;; Parameters:    Size  Location     Type
 15769 ;;		None
 15770 ;; Auto vars:     Size  Location     Type
 15771 ;;		None
 15772 ;; Return value:  Size  Location     Type
 15773 ;;                  1    wreg      void 
 15774 ;; Registers used:
 15775 ;;		wreg, status,2
 15776 ;; Tracked objects:
 15777 ;;		On entry : 0/0
 15778 ;;		On exit  : 0/0
 15779 ;;		Unchanged: 0/0
 15780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15781 ;;      Params:         0       0       0       0       0       0       0       0       0
 15782 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15783 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15784 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15785 ;;Total ram usage:        0 bytes
 15786 ;; Hardware stack levels used:    1
 15787 ;; This function calls:
 15788 ;;		Nothing
 15789 ;; This function is called by:
 15790 ;;		_main
 15791 ;; This function uses a non-reentrant model
 15792 ;;
 15793                           
 15794                           	psect	text60
 15795  005E18                     __ptext60:
 15796                           	opt callstack 0
 15797  005E18                     _Init8LEDs:
 15798                           	opt callstack 30
 15799                           
 15800                           ;Main.c: 76:     LATA = 0x00;
 15801                           
 15802                           ;incstack = 0
 15803  005E18  0E00               	movlw	0
 15804  005E1A  6E89               	movwf	3977,c	;volatile
 15805                           
 15806                           ;Main.c: 77:     TRISA = 0x00;
 15807  005E1C  0E00               	movlw	0
 15808  005E1E  6E92               	movwf	3986,c	;volatile
 15809                           
 15810                           ;Main.c: 78:     ANSELA = 0x00;
 15811  005E20  0E00               	movlw	0
 15812  005E22  010F               	movlb	15	; () banked
 15813  005E24  6F5B               	movwf	91,b	;volatile
 15814                           
 15815                           ; BSR set to: 15
 15816  005E26  0012               	return		;funcret
 15817  005E28                     __end_of_Init8LEDs:
 15818                           	opt callstack 0
 15819                           
 15820                           	psect	rparam
 15821  0000                     tosu	equ	0xFFF
 15822                           tosh	equ	0xFFE
 15823                           tosl	equ	0xFFD
 15824                           stkptr	equ	0xFFC
 15825                           pclatu	equ	0xFFB
 15826                           pclath	equ	0xFFA
 15827                           pcl	equ	0xFF9
 15828                           tblptru	equ	0xFF8
 15829                           tblptrh	equ	0xFF7
 15830                           tblptrl	equ	0xFF6
 15831                           tablat	equ	0xFF5
 15832                           prodh	equ	0xFF4
 15833                           prodl	equ	0xFF3
 15834                           indf0	equ	0xFEF
 15835                           postinc0	equ	0xFEE
 15836                           postdec0	equ	0xFED
 15837                           preinc0	equ	0xFEC
 15838                           plusw0	equ	0xFEB
 15839                           fsr0h	equ	0xFEA
 15840                           fsr0l	equ	0xFE9
 15841                           wreg	equ	0xFE8
 15842                           indf1	equ	0xFE7
 15843                           postinc1	equ	0xFE6
 15844                           postdec1	equ	0xFE5
 15845                           preinc1	equ	0xFE4
 15846                           plusw1	equ	0xFE3
 15847                           fsr1h	equ	0xFE2
 15848                           fsr1l	equ	0xFE1
 15849                           bsr	equ	0xFE0
 15850                           indf2	equ	0xFDF
 15851                           postinc2	equ	0xFDE
 15852                           postdec2	equ	0xFDD
 15853                           preinc2	equ	0xFDC
 15854                           plusw2	equ	0xFDB
 15855                           fsr2h	equ	0xFDA
 15856                           fsr2l	equ	0xFD9
 15857                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        13
    BSS         611
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    112     146
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> bw(BANK0[2]), 

    f_write@buff	PTR const void  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    f_write@wbuff	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    S221$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S221$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S210$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S210$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S210$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(3) Largest target is 32767
		 -> FatFs(BIGRAM[558]), ROM(CODE[32767]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(3) Largest target is 32767
		 -> FatFs(BIGRAM[558]), ROM(CODE[32767]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(3) Largest target is 32767
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ROM(CODE[32767]), NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    xmit_datablock@buff	PTR const unsigned char  size(3) Largest target is 32767
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ROM(CODE[32767]), NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _guardar->_grabador
    _f_write->_create_chain
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _follow_path->_dir_find
    _create_name->_mem_set
    _dir_register->_dir_alloc
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _guardar->_f_open
    _grabador->_f_write
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  434094
                          _Init8LEDs
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              0     0      0  434094
                              _Error
                  _SYSTEM_Initialize
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                           _grabador
 ---------------------------------------------------------------------------------
 (2) _grabador                                             3     3      0   58614
                                             92 COMRAM     3     3      0
                            ___fldiv
                            ___flmul
                           ___xxtofl
                            _f_write
                       _interruptadc
 ---------------------------------------------------------------------------------
 (3) _interruptadc                                         6     2      4     175
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _f_write                                             38    29      9   54898
                                             17 BANK0     38    29      9
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     398
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1744
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1399
                                             39 COMRAM    25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             86 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             40 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             92 COMRAM     2     0      2
                                             36 BANK0      4     4      0
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         5     3      2   93436
                                             43 BANK0      5     3      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cpy                                             14     7      7    1323
                                              0 COMRAM    14     7      7
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             92 COMRAM     3     3      0
                                             36 BANK0      7     3      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             86 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             17 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             82 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             69 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             59 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             17 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (4) _create_chain                                        23    17      6   28695
                                             86 COMRAM     6     0      6
                                              0 BANK0     17    17      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             27    17     10   13520
                                             59 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             27    21      6   13479
                                             59 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (4) _move_window                                         11     5      6   11674
                                             48 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _sync_window                                         21    19      2    4808
                                             27 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (5) _disk_write                                          11     2      9    3972
                                             16 COMRAM    11     2      9
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (6) _xmit_datablock                                       7     3      4     659
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (7) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (8) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (7) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (9) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error                                               13    11      2     453
                                              0 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (1) _Init8LEDs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init8LEDs
   _guardar
     _Error
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _grabador
       ___fldiv
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
       _f_write
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _put_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_cpy
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _validate
           _disk_status
       _interruptadc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     111       6        0.0%
DATA                 0      0     33F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 29 18:30:49 2019

              _SPI1_Exchange8bit 5E08                      get_fat@clst 003E  
                   ___fldiv@aexp 0040                     ___fldiv@bexp 003F  
                              _a 00DA                                _i 00D4  
                   ___fldiv@sign 0038                     create_name@b 0015  
                   create_name@c 001F                     create_name@d 001A  
                   create_name@i 001D                     create_name@p 0018  
             ?_SPI1_Exchange8bit 0001                 get_ldnumber@path 0001  
                             l17 5C7C                               l35 5A74  
                             l70 418A                               l81 4252  
                             l92 4350                               l95 4320  
                             _ND 00EF                               _bw 00E3  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 008D                 disk_write@sector 0014  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 006D                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0057                      __CFG_LVP$ON 000000  
                            l113 529A                              l114 52AE  
                            l130 4BEC                              l131 4BF4  
                            l132 4C08                              l109 5290  
                            l126 4BE2                              l302 4928  
                            l136 4C6C                              l242 4536  
                            l155 2108                              l252 2C64  
                            l317 37BA                              l334 3996  
                            l255 2FB4                              l336 398E  
                            l520 09BC                              l432 3D76  
                            l257 2C6E                              l533 0B04  
                            l349 3B66                              l278 242A  
                            l391 4ED2                              l456 3ECE  
                            l547 0FFC                              l539 0C9E  
                            l469 479A                              l581 30A8  
                            l590 321A                              l582 30A0  
                            l671 1C60                              l667 19D0  
                            l748 5E10                              l940 593C  
                            l588 3232                              l848 5490  
                            l888 4CF0                              _GIE 007F97  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 0100              ??_SPI1_Exchange8bit 0001  
                            _out 00D8                     disk_read@cmd 001C  
                 ??_create_chain 0060                              wreg 000FE8  
                   ___flmul@aexp 0020                     ___flmul@bexp 0021  
              disk_initialize@ty 001A                     ___flmul@sign 001B  
                   ___flmul@temp 0026                     ___flmul@prod 0022  
                 create_name@sfn 001B                  create_chain@ncl 0069  
                     Error@F5051 00E5                  create_chain@scl 0065  
                create_chain@res 0064                      ld_clust@dir 0003  
                           l1508 40D6                             l1509 40D2  
                           l1527 33DC                             l1544 367A  
                           l1536 35F4                             l1537 35F0  
                           l5012 22C2                             l5004 222C  
                           l5110 3ADA                             l1575 4B4A  
                           l4400 5C62                             l5024 232C  
                           l5008 22B4                             l1568 4ACC  
                           l1497 4068                             l5034 2364  
                           l5018 22FA                             l5050 23EC  
                           l5130 3BA6                             l5028 234E  
                           l6100 11A0                             l5220 2AC4  
                           l5108 3AB4                             l4422 5DDC  
                           l4502 58C8                             l5046 23A4  
                           l5038 236C                             l5310 4282  
                           l5118 3B26                             l5048 23AA  
                           l6040 0D8A                             l5232 2B1A  
                           l5208 2A24                             l5240 2BC0  
                           l5072 5BCA                             l6200 16CE  
                           l5402 450E                             l5322 42B8  
                           l5154 2864                             l5074 5BCE  
                           l5066 5AD2                             l6210 1748  
                           l6202 16EE                             l6130 127C  
                           l4540 5A88                             l4524 5A58  
                           l4612 52C2                             l6044 0DA0  
                           l5236 2B62                             l5180 2984  
                           l5164 28C8                             l5092 3A12  
                           l6220 17D2                             l6212 176C  
                           l4454 5998                             l4438 596A  
                           l4518 5C40                             l5326 42DE  
                           l5318 42AA                             l5262 41A0  
                           l5174 296E                             l5430 4EA8  
                           l5414 4E0C                             l5502 3CF2  
                           l6230 1896                             l6214 178A  
                           l4472 59CC                             l4464 59B8  
                           l4712 2DDA                             l5328 42F0  
                           l5280 41EE                             l6064 0EDA  
                           l6144 1364                             l7120 5CFE  
                           l4466 59BC                             l4458 59A4  
                           l4482 5856                             l4650 463A  
                           l4714 2DF8                             l4810 281A  
                           l5266 41A8                             l5258 4196  
                           l5098 3A62                             l6314 3F22  
                           l6226 181C                             l6162 13F4  
                           l6146 13A4                             l4628 5334  
                           l4644 45C0                             l4820 5B30  
                           l4724 2EBE                             l4716 2E02  
                           l4804 27DC                             l5292 4222  
                           l6076 0FCE                             l5196 2A06  
                           l5428 4EA0                             l5524 3D52  
                           l5444 5A3C                             l6420 413E  
                           l6244 1936                             l6156 13D0  
                           l4590 4CDC                             l4654 4646  
                           l4662 46B2                             l4830 5D0E  
                           l5710 5844                             l4734 2F88  
                           l4910 390E                             l4902 389C  
                           l5630 51C0                             l5374 5400  
                           l5358 535E                             l5366 53B8  
                           l5606 3EBC                             l6430 4174  
                           l6334 3F62                             l6318 3F26  
                           l6182 150E                             l6174 14AC  
                           l6166 1444                             l6238 18DA  
                           l4488 586C                             l4576 4C4E  
                           l4680 5794                             l5720 58EE  
                           l4824 5B44                             l4808 27EE  
                           l5368 53C6                             l5528 3D6C  
                           l5472 4F60                             l6432 4176  
                           l6424 4168                             l6416 411A  
                           l6360 3FC8                             l6352 3FB0  
                           l4682 57B0                             l4834 5D1E  
                           l5706 5840                             l5722 58FA  
                           l4762 24E6                             l5562 3E10  
                           l5490 3C80                             l5458 4EFA  
                           l6370 4018                             l6346 3F9A  
                           l6338 3F66                             l6522 359C  
                           l6194 15EE                             l6276 4A8A  
                           l5732 592E                             l4844 55FA  
                           l4780 2602                             l4764 251A  
                           l4916 3976                             l5660 5272  
                           l5628 51BC                             l6452 3388  
                           l6612 4BBC                             l6188 1596  
                           l4870 378A                             l5582 3E4C  
                           l5574 3E3A                             l5478 4FA0  
                           l5806 473A                             l5742 4838  
                           l6390 407E                             l6470 33C8  
                           l6454 338C                             l6294 5D72  
                           _ADIE 007CEE                             l4960 1F86  
                           l4936 5DF0                             l4784 2638  
                           l5680 5032                             l5656 5268  
                           l5904 08FC                             l6632 56B0  
                           l5592 3E8C                             l5584 3E5C  
                           l5488 3C7C                             l5744 4840  
                           l6384 4066                             l6552 3656  
                           l6528 35BA                             l6480 33FA  
                           l6472 33CC                             l6456 339C  
                           _ADIF 007CF6                             l4970 2064  
                           l4794 26EA                             l4874 37CA  
                           l4866 3766                             l4858 3716  
                           l5674 5014                             l6626 5682  
                           l5586 3E62                             l5842 47FE  
                           l6378 4040                             l4956 1F78  
                           l4948 1F6A                             l5692 50AA  
                           l5932 09F2                             l5916 093A  
                           l6636 56C4                             l6396 409C  
                           l6564 3698                             l6548 3638  
                           l4990 2156                             l4886 3828  
                           l6830 1C44                             l6822 1C1E  
                           l5686 5070                             l5926 09A0  
                           l6646 56F0                             l5758 489E  
                           l6582 4AFA                             l6832 1C7C  
                           l6808 1BA0                             l5960 0AA0  
                           l5944 0A4E                             l5880 08B4  
                           l5864 0870                             l5856 084A  
                           l5768 4918                             l6728 3200  
                           l6680 304E                             l6584 4B00  
                           l6576 4ADC                             l6922 547C  
                           l4986 214E                             l5946 0A74  
                           l5938 0A08                             l6746 3278  
                           l6762 3358                             l6658 2FD4  
                           l6594 4B70                             l6586 4B0C  
                           l6916 5468                             l4996 219C  
                           l6844 1CEE                             l6836 1C8A  
                           l5964 0AA4                             l5884 08B8  
                           l5788 5190                             l6692 3084  
                           l6596 4B7C                             l6588 4B32  
                           l6854 1D36                             l6846 1D22  
                           l5958 0A9A                             l5798 46E4  
                           l6792 1984                             l5896 08F2  
                           l6688 3078                             l6786 1962  
                           l5986 0B62                             l6892 1EF0  
                           l6868 1DB6                             l6886 1E7E  
                           l6982 5596                             l6978 5578  
                           STR_1 0801                             STR_2 0801  
                           STR_3 081A                             STR_4 081A  
                           STR_5 0810                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5020 5C84                             u5030 5C90  
                           u5200 5A7C                             u5120 5852  
                           u6000 394E                             u5140 588C  
                           u5400 528C                             u5240 4BDE  
                           u6120 2102                             u6105 206C  
                           u5330 4C88                             u6050 1F82  
                           u7010 4EC6                             u5147 5882  
                           u6115 2092                             _PEIE 007F96  
                           u6125 20F8                             u5350 4CBC  
                           u6215 21E0                             u7040 4EF4  
                           u6225 2202                             u5450 52EA  
                           u5370 4CEC                             u6234 2220  
                           u6170 217E                             u7210 3D82  
                           u6330 5AE2                             u5435 52A0  
                           u6235 221A                             u5700 2424  
                           u6340 5B16                             u5285 4BFA  
                           u6245 226A                             u5605 2CB8  
                           u5470 5316                             u5550 5738  
                           u6510 2860                             u7230 3D8E  
                           u6175 2174                             u6095 203C  
                           u6440 3B36                             u6360 5C02  
                           u7160 3D3C                             u5625 2D56  
                           u5490 5344                             u7250 3DBA  
                           u5715 2474                             u5580 2C34  
                           u7420 51E6                             u6380 3A0E  
                           u7180 3D4E                             u8125 0EBA  
                           u5670 2F00                             u5590 2C54  
                           u8150 1022                             u7270 3DC6  
                           u5655 2DE6                             u8055 0CD2  
                           u5920 3816                             u8080 0D86  
                           u9120 56EC                             u7600 4832  
                           u9040 4B86                             u5745 2566  
                           u5770 2620                             u5690 2404  
                           u8090 0D9C                             u6570 296A  
                           u5675 2EF6                             u8155 1018  
                           u6555 28D4                             u5940 3874  
                           u6580 2980                             u6900 53EE  
                           u7700 46DE                             u8500 18E2  
                           u6485 3BDC                             u7550 5840  
                           u5790 272C                             u5870 3704  
                           u5775 2616                             u6495 3C28  
                           u7480 502E                             u6840 4328  
                           u8280 12D6                             u7570 58FE  
                           u5890 3778                             u7490 506C  
                           u6770 425A                             u6690 4190  
                           u7650 48F2                             u5795 2722  
                           u6675 2BE2                             u6907 53E4  
                           u9500 1D46                             u6860 434C  
                           u7660 4948                             u9405 1A48  
                           u8445 168E                             u8285 12CC  
                           u9350 195E                             u7830 08B0  
                           u7750 4794                             u7590 4812  
                           u8455 16D8                             u9520 1DCA  
                           u9440 1C0A                             u6880 538C  
                           u8720 40CC                             u9450 1C30  
                           u7930 0A8E                             u8395 1526  
                           u9630 548A                             u9550 1E6A  
                           u7950 0AA0                             u6990 4E8C  
                           u8910 35EA                             u6887 537C  
                           u8760 4128                             u9570 1ED4  
                           u8770 414C                             u9650 54FE  
                           u9555 1E60                             u8860 33E8  
                           u9660 551C                             u8950 3646  
                           u8870 355E                             u9591 5436  
                           u8960 3664                             u8875 3554  
                           u9987 4244                             u9997 4312  
                           _WPUB 000F85                             _Fsid 00DE  
                           _Stat 00F1                             _data 00D6  
                           _main 5CCE                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             _volt 00D0  
                  __CFG_BORV$190 000000                    disk_ioctl@cmd 0011  
                  disk_ioctl@csd 0021                    disk_read@buff 0011  
                  disk_ioctl@res 0036                    disk_ioctl@ptr 0038  
                  disk_read@pdrv 0019                             prodh 000FF4  
                           prodl 000FF3                   ??_get_ldnumber 0003  
                           start 0000        __end_of_SPI1_Exchange8bit 5E18  
                  __CFG_IESO$OFF 000000                  ___fldiv@new_exp 0039  
                     Error@v_seg 0004                    __CFG_MCLRE$ON 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0088  
             disk_initialize@ocr 0013                     ___param_bank 000000  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0059                      _sync_window 453A  
 __size_of_OSCILLATOR_Initialize 0012    __end_of_OSCILLATOR_Initialize 5E08  
                          ?_main 0001                  __end_of___fldiv 417E  
                __end_of___flmul 36AE                  __end_of___lldiv 594E  
                          u10007 5C70                            u10017 5A68  
                          u10027 549E                            u10037 54B8  
                          u10047 54D2                   __CFG_DEBUG$OFF 000000  
                          _PORTA 000F80                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 5CCE                            _FatFs 0120  
                __end_of_chk_chr 5C16               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F56                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 570E                            _Error 5412  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 3C6A  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 1948  
                __end_of_get_fat 2FC6                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                          _adcin 00DC                   __CFG_EBTRB$OFF 000000  
                __end_of_mem_cmp 5B20                  __end_of_mem_cpy 5412  
                __end_of_mem_set 5D30                  __end_of_guardar 55A4  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A                   disk_ioctl@buff 0012  
                 disk_read@count 0017                            tablat 000FF5  
                 disk_ioctl@pdrv 0031                            plusw1 000FE3  
                          plusw2 000FDB                  __end_of_put_fat 281E  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                __end_of_sync_fs 453A                   __CFG_ICPRT$OFF 000000  
                  get_ldnumber@i 000B         __size_of_SPI1_Initialize 000E  
                __initialization 5B76              disk_initialize@pdrv 0012  
                   __end_of_main 5D04                     clust2sect@fs 000D  
                 __CFG_PCLKEN$ON 000000                           ??_main 0060  
                  __activetblptr 000003                   __CFG_SDOMX$RB3 000000  
                         ?_Error 0001                  __CFG_CCP2MX$RC1 000000  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
                         _ADCON2 000FC0               __size_of_Init8LEDs 0010  
                         _ACTCON 000FB5                           _ADRESH 000FC4  
                         _ADRESL 000FC3                           _ANSELA 000F5B  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
           __end_of_dir_register 5196                 __end_of___xxtofl 4BCE  
               __end_of_check_fs 50AE            SPI1_Exchange8bit@data 0001  
                         Error@a 0001       __size_of_SPI1_Exchange8bit 0010  
           __size_of_create_name 028C         __size_of_disk_initialize 01EA  
               __end_of_deselect 5E6A                 __end_of_dir_find 4FC2  
                 __CFG_XINST$OFF 000000                __end_of_SPI1_Open 5E36  
               __end_of_dir_next 2C24                     ?_move_window 0031  
           __end_of_create_chain 39A8                 __end_of_ld_clust 5A4E  
                         ___lmul 5B20                 __end_of_grabador 4DE6  
           __size_of_find_volume 09AE             __size_of_disk_status 0012  
                         ___wmul 5D80                        ??___fldiv 0030  
                 __CFG_STVREN$ON 000000                        ??___flmul 0017  
                      ??___lldiv 0009                           _f_open 2FC6  
                         _f_sync 494C                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 5B9E  
                         clear_1 5BB0                           clear_2 5BBC  
                 find_volume@rfs 0046                        ??_chk_chr 0005  
                 find_volume@vol 0080                           _select 5DC6  
                      ??_f_lseek 0077                        ??_f_mount 0058  
                      ??_dir_sdi 0060                        ??_f_write 007A  
                      ??_get_fat 0042                 __end_of_send_cmd 5C58  
                      ??_mem_cmp 0007                        ??_mem_cpy 0008  
                      ??_mem_set 0007                        ??_guardar 0060  
                disk_ioctl@csize 0032                 __end_of_validate 5848  
           __end_of_get_ldnumber 527C                    interruptadc@a 0003  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5D5A  
                      ??_put_fat 0046                  xmit_datablock@i 0008  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                     ___xxtofl@arg 000B  
                   ___xxtofl@exp 000A                _SYSTEM_Initialize 5E36  
                   ___xxtofl@val 0001                       __accesstop 0060  
        __end_of__initialization 5BC2                  __CFG_PBADEN$OFF 000000  
                 disk_write@buff 0011                   get_ldnumber@tp 0007  
                 get_ldnumber@tt 000D                   disk_write@pdrv 001B  
             ?_SYSTEM_Initialize 0001                    ___rparam_used 000001  
        __size_of_rcvr_datablock 006C                    __end_of_Error 54DC  
                 __pcstackCOMRAM 0001                 __CFG_nPWRTEN$OFF 000000  
                  ?_interruptadc 0001                     __pidataBANK0 5E52  
            ??_SYSTEM_Initialize 0001                __end_of_Init8LEDs 5E28  
                     ___send_cmd 594E             __size_of_follow_path 014C  
              ??_SPI1_Initialize 0001               __size_of_dir_alloc 00F0  
                        ??_Error 0003               __size_of_disk_read 00CC  
      __end_of_SYSTEM_Initialize 5E44                       __pbssBANK0 00D0  
                     __pbssBANK1 0100                __CFG_PLLSEL$PLL4X 000000  
                 ??_interruptadc 0005                          ?___lmul 0001  
                        ?___wmul 0001                          ?_f_open 009A  
        __size_of_xmit_datablock 0084                          ?_f_sync 0045  
              ??_disk_initialize 0011                     ?_sync_window 001C  
                 ___lmul@product 0009                          ?_select 0001  
                      ?___xxtofl 0001                        ?_check_fs 003C  
                     _disk_ioctl 1F56                   follow_path@dir 008C  
                        _OSCCON2 000FD2                   follow_path@res 008F  
                     _disk_write 4BCE                          _OSCTUNE 000F9B  
                    send_cmd@cmd 000F                        ?_deselect 0001  
                    send_cmd@arg 000B                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0057  
                        _SSP1BUF 000FC9                        ?_dir_find 005D  
                      ?_dir_next 0071            __size_of_dir_register 00E8  
                      ?_ld_clust 0001                       _clust2sect 55A4  
               sync_window@wsect 002D                        ?_grabador 0001  
                  ?_remove_chain 0057            __size_of_create_chain 02FA  
              __end_of_dir_alloc 4ED6                        ?_send_cmd 000B  
                        __Hparam 0000                   ___send_cmd@cmd 000A  
                 ___send_cmd@arg 0004                   ___send_cmd@res 0008  
                        __Lparam 0000                        ?_validate 0002  
              __end_of_disk_read 5348                          ff@FatFs 00E0  
                     f_close@res 0050                          ___fldiv 3EF6  
                __size_of___lmul 0056                        ?_st_clust 0001  
                        ___flmul 335C                      ?___send_cmd 0004  
                        ___lldiv 58CC                  __size_of___wmul 0026  
           __size_of_move_window 00A6                       check_fs@fs 003C  
                __size_of_f_open 0396                     __psmallconst 0800  
                __size_of_f_sync 0142                          _f_close 5C94  
            _disk_initialize$134 0017            __size_of_get_ldnumber 00E6  
                        __pcinit 5B76                          _chk_chr 5BC8  
                        _f_lseek 1948                          __ramtop 0800  
                        _f_mount 565E                  __size_of_select 001E  
                        __ptext0 5CCE                          __ptext1 54DC  
                        __ptext2 4CF0                          __ptext3 5D5A  
                        __ptext4 11CA                          __ptext5 4A8E  
                        __ptext6 335C                          __ptext7 3EF6  
                        __ptext8 2FC6                          __ptext9 4802  
                        _dir_sdi 39A8                      validate@fil 0008  
                        _f_write 11CA                      validate@obj 0002  
                        _get_fat 2C24                       chk_chr@chr 0003  
                   _dir_register 50AE                       chk_chr@str 0001  
                        _mem_cmp 5ABA                          _mem_cpy 5348  
          _OSCILLATOR_Initialize 5DF6                          _mem_set 5D04  
                        _guardar 54DC                       ??___xxtofl 0005  
                     ??_check_fs 0042                  find_volume@path 0048  
                find_volume@nrsv 0082                  find_volume@stat 008C  
       ??_PIN_MANAGER_Initialize 0001                     _create_chain 36AE  
                     ??_deselect 0002                       ??_dir_find 005F  
                        _put_fat 23F4                       ??_dir_next 0075  
     __size_of_SYSTEM_Initialize 000E                       f_lseek@bcs 0090  
                     ??_ld_clust 0005                          _sync_fs 4368  
                     f_lseek@ofs 0073                       f_lseek@res 008B  
           end_of_initialization 5BC2                       ??_grabador 005D  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 0060                  disk_status@pdrv 0001  
                 _rcvr_datablock 5A4E                  ___lldiv@divisor 0005  
                     f_mount@cfs 0059                       f_mount@res 0058  
                     ??_send_cmd 000F                       f_mount@opt 0057  
                     f_mount@vol 005D                  ___lldiv@counter 000D  
                   _get_ldnumber 5196                       ??_validate 0004  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                       ??_st_clust 0007  
                 move_window@res 003B                        _SPI1_Open 5E28  
                     _wait_ready 5C58                       dir_alloc@n 0088  
               remove_chain@clst 0059                       dir_find@dp 005D  
                _create_name$624 0011                       dir_sdi@idx 0059  
                     dir_next@dp 0071                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0076  
                  ___xxtofl@sign 0009                       f_write@res 0086  
                    ?_disk_write 0011                       get_fat@val 004D  
                    ___fldiv@grs 003B                      ___fldiv@rem 0034  
           __end_of_interruptadc 5D80                  get_ldnumber@vol 0009  
                disk_write@count 0018                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 5ABA  
                  ??_create_name 000D                 disk_initialize@n 001D  
                    ___flmul@grs 001C                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 5E44  
                  ??_find_volume 004B                    ??_disk_status 0001  
                 _xmit_datablock 5848                       ?_SPI1_Open 0001  
                 __end_of___lmul 5B76                      st_clust@dir 0001  
                 __end_of___wmul 5DA6                   __end_of_f_open 335C  
                 __end_of_f_sync 4A8E                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                        _Init8LEDs 5E18  
                 __end_of_select 5DE4             __size_of_sync_window 017C  
            start_initialization 5B76  __size_of_PIN_MANAGER_Initialize 0020  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0006  
                    put_fat@clst 003E                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 417E  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 58CC  
                  ??_follow_path 005F              __size_of_disk_ioctl 049E  
            __end_of_create_name 3EF6              __size_of_disk_write 0122  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00E5  
            __end_of_find_volume 11CA              __end_of_disk_status 5DF6  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 494C                       ?_Init8LEDs 0001  
              rcvr_datablock@btr 0004                rcvr_datablock@tmr 0006  
                      ___fldiv@a 002C                        ___fldiv@b 0028  
                    __pbssBIGRAM 0120                        ___flmul@a 0013  
                      ___flmul@b 000F                    __pcstackBANK0 0060  
              __size_of___xxtofl 0140                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 5E52                     check_fs@sect 003E  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
              __size_of_grabador 00F6                  _find_volume$728 0070  
                _find_volume$729 0074           _PIN_MANAGER_Initialize 5DA6  
                ?_xmit_datablock 0004                __size_of_send_cmd 0042  
                       ?___fldiv 0028                     ??___send_cmd 0008  
                       ?___flmul 000F                        _dir_alloc 4DE6  
                       ?___lldiv 0001                __size_of_validate 0094  
              interruptadc@adcin 0001                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 527C  
                       ?_chk_chr 0001                    follow_path@dp 0088  
                       ?_f_lseek 0071                    follow_path@ns 008E  
              __size_of_st_clust 002A              __end_of_follow_path 4802  
                       ?_f_mount 0053                         ?_dir_sdi 0057  
                       ?_f_write 0071                         ?_get_fat 003C  
          __size_of_interruptadc 0026                      __smallconst 0800  
                       ?_mem_cmp 0001                         ?_mem_cpy 0001  
                       ?_mem_set 0001                         ?_guardar 0001  
                 __size_of_Error 00CA                        f_close@fp 004E  
                       ?_put_fat 003C          __end_of_disk_initialize 4368  
                       ?_sync_fs 003A                      _get_fat$374 004B  
              find_volume@fasize 008D              __size_of_wait_ready 003C  
             __end_of___send_cmd 59D0                      _create_name 3C6A  
                 ___wmul@product 0005                         _LATBbits 000F8A  
                      f_lseek@fp 0071                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 081C                      _disk_status 5DE4  
                  ??_move_window 0037                        f_mount@fs 0053  
                      f_mount@rp 005B                  follow_path@path 008A  
                  move_window@fs 0031                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                     _interruptadc 5D5A  
                      dir_find@c 0084                       ?_dir_alloc 0084  
                remove_chain@res 0064                  remove_chain@nxt 0065  
                       _SSP1STAT 000FC7                        f_sync@dir 004C  
                      f_sync@res 004B                        dir_sdi@ic 0067  
                      dir_sdi@dp 0057                        dir_next@c 007C  
                      dir_next@i 007E                       ?_disk_read 0011  
                      f_write@cc 008B                        f_write@bw 0078  
                      f_write@fp 0071                        get_fat@bc 0055  
                      get_fat@fs 003C                        get_fat@wc 0051  
                     _ADCON0bits 000FC2                      ??_Init8LEDs 0001  
              ___wmul@multiplier 0001                         _CardType 00E2  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 001A                     f_lseek@ifptr 0087  
                   f_lseek@nsect 008C                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                      copy_data0 5B8A                       put_fat@res 0054  
                     put_fat@val 0042                move_window@sector 0033  
                dir_next@stretch 0073                         __Hrparam 0000  
                       __Lrparam 0000                      _follow_path 46B6  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23F4  
          __size_of_remove_chain 014A               __end_of_disk_write 4CF0  
        ??_OSCILLATOR_Initialize 0001                 __size_of___fldiv 0288  
               __size_of___flmul 0352                 __size_of___lldiv 0082  
            __end_of_move_window 57B4               __end_of_clust2sect 565E  
               __size_of_f_close 003A                 __size_of_chk_chr 004E  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 077E  
               __size_of_get_fat 03A2                         ___xxtofl 4A8E  
                       _check_fs 4FC2                 __size_of_mem_cmp 0066  
               __size_of_mem_cpy 00CA                 __size_of_mem_set 002C  
               __size_of_guardar 00C8              xmit_datablock@token 0007  
               ??_rcvr_datablock 0006                  dir_register@res 008F  
                       _deselect 5E60                         __ptext10 46B6  
                       __ptext11 59D0                         __ptext20 281E  
                       __ptext12 4ED6                         __ptext21 565E  
                       __ptext13 5ABA                         __ptext30 2C24  
                       __ptext22 081C                         __ptext14 3C6A  
                       __ptext31 55A4                         __ptext23 5196  
                       __ptext15 5BC8                         __ptext40 1F56  
                       __ptext32 5B20                         __ptext24 417E  
                       __ptext16 50AE                         __ptext41 5D80  
                       __ptext33 58CC                         __ptext25 5E28  
                       __ptext17 5348                         __ptext50 5DC6  
                       __ptext42 5D30                         __ptext34 5C94  
                       __ptext26 4FC2                         __ptext18 4DE6  
                       __ptext51 5C58                         __ptext43 570E  
                       __ptext35 494C                         __ptext27 1948  
                       __ptext19 39A8                         __ptext60 5E18  
                       __ptext52 5E60                         __ptext44 453A  
                       __ptext36 57B4                         __ptext28 36AE  
                       __ptext53 5A4E                         __ptext45 4BCE  
                       __ptext37 5DE4                         __ptext29 23F4  
                       __ptext54 5E08                         __ptext46 5848  
                       __ptext38 4368                         __ptext55 5E36  
                       __ptext47 527C                         __ptext39 5D04  
                       __ptext56 5E44                         __ptext48 5C16  
                       __ptext57 5DA6                         __ptext49 594E  
                       __ptext58 5DF6                         __ptext59 5412  
                       _dir_find 4ED6                     _SSP1CON1bits 000FC6  
                       _dir_next 281E                    dir_alloc@nent 0086  
               ?_disk_initialize 0001                         _ld_clust 59D0  
               __size_of_put_fat 042A                   sync_window@res 002A  
                       _grabador 4CF0                 __size_of_sync_fs 01D2  
                  __size_of_main 0036                       sync_fs@res 0044  
                   _remove_chain 4802                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 004A                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 5C16  
                       _validate 57B4                         f_sync@fp 0045  
                    ??_dir_alloc 005D                         _st_clust 5D30  
                       get_fat@p 0053                     ??_wait_ready 0002  
                  ??_sync_window 001E                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$143 001A  
                    f_lseek@clst 0094                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0052                         mem_cpy@d 000D  
                      put_fat@fs 003C                         mem_cpy@s 000A  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 000A  
                 dir_register@dp 008B                 ??_xmit_datablock 0008  
             __end_of_wait_ready 5C94                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 008A  
                  sync_window@fs 001C                    sync_window@nf 002B  
                    f_mount@path 0055                        sync_fs@fs 003A  
                    _move_window 570E             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0055                    ?_dir_register 008B  
                    dir_alloc@dp 0084                 ___lldiv@quotient 0009  
                    dir_find@dir 0085              __end_of_sync_window 46B6  
                    dir_find@res 0087                    ?_create_chain 0057  
                   dir_next@clst 0080               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 5DC6  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 008A                     f_write@wbuff 0087  
                    f_write@buff 0073                      f_write@clst 0091  
                    f_write@sect 008D                     ?_find_volume 0046  
                    f_write@wcnt 0095                    ?_get_ldnumber 0001  
                    _put_fat$400 004E                      _put_fat$401 0050  
                   ?_disk_status 0001  
