

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 15 17:23:26 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70  0000                     
    71                           ; Version 2.05
    72                           ; Generated 20/12/2018 GMT
    73                           ; 
    74                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F45K50 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataBANK0
   107  0055F0                     __pidataBANK0:
   108                           	opt callstack 0
   109                           
   110                           ;initializer for _Stat
   111  0055F0  01                 	db	1
   112  0000                     _ANSELE	set	3935
   113  0000                     _ANSELD	set	3934
   114  0000                     _ANSELB	set	3932
   115  0000                     _ANSELC	set	3933
   116  0000                     _ANSELA	set	3931
   117  0000                     _SSP1STATbits	set	4039
   118  0000                     _SSP1BUF	set	4041
   119  0000                     _SSP1CON1bits	set	4038
   120  0000                     _SSP1ADD	set	4040
   121  0000                     _SSP1CON1	set	4038
   122  0000                     _SSP1STAT	set	4039
   123  0000                     _INTCON2bits	set	4081
   124  0000                     _WPUB	set	3973
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISE	set	3990
   129  0000                     _LATC	set	3979
   130  0000                     _LATB	set	3978
   131  0000                     _LATD	set	3980
   132  0000                     _LATE	set	3981
   133  0000                     _ACTCON	set	4021
   134  0000                     _OSCTUNE	set	3995
   135  0000                     _OSCCON2	set	4050
   136  0000                     _OSCCON	set	4051
   137  0000                     _LATBbits	set	3978
   138  0000                     _TRISA	set	3986
   139  0000                     _LATA	set	3977
   140  0000                     _LATAbits	set	3977
   141  0000                     _PORTDbits	set	3971
   142                           
   143                           	psect	smallconst
   144  000800                     __psmallconst:
   145                           	opt callstack 0
   146  000800  00                 	db	0
   147  000801                     STR_4:
   148  000801  45                 	db	69	;'E'
   149  000802  53                 	db	83	;'S'
   150  000803  54                 	db	84	;'T'
   151  000804  41                 	db	65	;'A'
   152  000805  53                 	db	83	;'S'
   153  000806  20                 	db	32
   154  000807  4D                 	db	77	;'M'
   155  000808  55                 	db	85	;'U'
   156  000809  45                 	db	69	;'E'
   157  00080A  52                 	db	82	;'R'
   158  00080B  54                 	db	84	;'T'
   159  00080C  4F                 	db	79	;'O'
   160  00080D  2E                 	db	46
   161  00080E  0D                 	db	13
   162  00080F  0A                 	db	10
   163  000810  00                 	db	0
   164  000811                     STR_5:
   165  000811  22                 	db	34
   166  000812  2A                 	db	42
   167  000813  2B                 	db	43
   168  000814  2C                 	db	44
   169  000815  3A                 	db	58	;':'
   170  000816  3B                 	db	59	;';'
   171  000817  3C                 	db	60	;'<'
   172  000818  3D                 	db	61	;'='
   173  000819  3E                 	db	62	;'>'
   174  00081A  3F                 	db	63	;'?'
   175  00081B  5B                 	db	91	;'['
   176  00081C  5D                 	db	93	;']'
   177  00081D  7C                 	db	124
   178  00081E  7F                 	db	127
   179  00081F  00                 	db	0
   180  000820                     STR_3:
   181  000820  42                 	db	66	;'B'
   182  000821  65                 	db	101	;'e'
   183  000822  65                 	db	101	;'e'
   184  000823  44                 	db	68	;'D'
   185  000824  65                 	db	101	;'e'
   186  000825  76                 	db	118	;'v'
   187  000826  2E                 	db	46
   188  000827  74                 	db	116	;'t'
   189  000828  78                 	db	120	;'x'
   190  000829  74                 	db	116	;'t'
   191  00082A  00                 	db	0
   192  0000                     
   193                           ; #config settings
   194  00082B  00                 	db	0	; dummy byte at the end
   195  0000                     
   196                           	psect	cinit
   197  0053CC                     __pcinit:
   198                           	opt callstack 0
   199  0053CC                     start_initialization:
   200                           	opt callstack 0
   201  0053CC                     __initialization:
   202                           	opt callstack 0
   203                           
   204                           ; Initialize objects allocated to BANK0 (1 bytes)
   205                           ; load TBLPTR registers with __pidataBANK0
   206  0053CC  0EF0               	movlw	low __pidataBANK0
   207  0053CE  6EF6               	movwf	tblptrl,c
   208  0053D0  0E55               	movlw	high __pidataBANK0
   209  0053D2  6EF7               	movwf	tblptrh,c
   210  0053D4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   211  0053D6  6EF8               	movwf	tblptru,c
   212  0053D8  0009               	tblrd		*+	;fetch initializer
   213  0053DA  CFF5 F0F7          	movff	tablat,__pdataBANK0
   214                           
   215                           ; Clear objects allocated to BIGRAM (558 bytes)
   216  0053DE  EE05  F0D2         	lfsr	0,__pbssBIGRAM
   217  0053E2  EE12 F02E          	lfsr	1,558
   218  0053E6                     clear_0:
   219  0053E6  6AEE               	clrf	postinc0,c
   220  0053E8  50E5               	movf	postdec1,w,c
   221  0053EA  50E1               	movf	fsr1l,w,c
   222  0053EC  E1FC               	bnz	clear_0
   223  0053EE  50E2               	movf	fsr1h,w,c
   224  0053F0  E1FA               	bnz	clear_0
   225                           
   226                           ; Clear objects allocated to BANK0 (37 bytes)
   227  0053F2  EE00  F0D2         	lfsr	0,__pbssBANK0
   228  0053F6  0E25               	movlw	37
   229  0053F8                     clear_1:
   230  0053F8  6AEE               	clrf	postinc0,c
   231  0053FA  06E8               	decf	wreg,f,c
   232  0053FC  E1FD               	bnz	clear_1
   233  0053FE                     end_of_initialization:
   234                           	opt callstack 0
   235  0053FE                     __end_of__initialization:
   236                           	opt callstack 0
   237  0053FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   238  005400  6EF8               	movwf	tblptru,c
   239  005402  0100               	movlb	0
   240  005404  EF33  F022         	goto	_main	;jump to C main() function
   241                           
   242                           	psect	bssBANK0
   243  0000D2                     __pbssBANK0:
   244                           	opt callstack 0
   245  0000D2                     _Fsid:
   246                           	opt callstack 0
   247  0000D2                     	ds	2
   248  0000D4                     ff@FatFs:
   249                           	opt callstack 0
   250  0000D4                     	ds	2
   251  0000D6                     _CardType:
   252                           	opt callstack 0
   253  0000D6                     	ds	1
   254  0000D7                     _Fil:
   255                           	opt callstack 0
   256  0000D7                     	ds	32
   257                           
   258                           	psect	dataBANK0
   259  0000F7                     __pdataBANK0:
   260                           	opt callstack 0
   261  0000F7                     _Stat:
   262                           	opt callstack 0
   263  0000F7                     	ds	1
   264                           
   265                           	psect	bssBIGRAM
   266  0005D2                     __pbssBIGRAM:
   267                           	opt callstack 0
   268  0005D2                     _FatFs:
   269                           	opt callstack 0
   270  0005D2                     	ds	558
   271                           
   272                           	psect	cstackBANK0
   273  000060                     __pcstackBANK0:
   274                           	opt callstack 0
   275  000060                     ??_dir_sdi:
   276  000060                     remove_chain@res:
   277                           	opt callstack 0
   278  000060                     create_chain@res:
   279                           	opt callstack 0
   280  000060                     find_volume@br:
   281                           	opt callstack 0
   282                           
   283                           ; 16 bytes @ 0x0
   284  000060                     	ds	1
   285  000061                     remove_chain@nxt:
   286                           	opt callstack 0
   287  000061                     create_chain@scl:
   288                           	opt callstack 0
   289                           
   290                           ; 4 bytes @ 0x1
   291  000061                     	ds	4
   292  000065                     create_chain@ncl:
   293                           	opt callstack 0
   294                           
   295                           ; 4 bytes @ 0x5
   296  000065                     	ds	2
   297  000067                     dir_sdi@ic:
   298                           	opt callstack 0
   299                           
   300                           ; 2 bytes @ 0x7
   301  000067                     	ds	2
   302  000069                     create_chain@cs:
   303                           	opt callstack 0
   304  000069                     dir_sdi@sect:
   305                           	opt callstack 0
   306                           
   307                           ; 4 bytes @ 0x9
   308  000069                     	ds	4
   309  00006D                     dir_next@dp:
   310                           	opt callstack 0
   311  00006D                     f_write@fp:
   312                           	opt callstack 0
   313  00006D                     f_lseek@fp:
   314                           	opt callstack 0
   315  00006D                     dir_sdi@clst:
   316                           	opt callstack 0
   317                           
   318                           ; 4 bytes @ 0xD
   319  00006D                     	ds	2
   320  00006F                     dir_next@stretch:
   321                           	opt callstack 0
   322  00006F                     f_write@buff:
   323                           	opt callstack 0
   324  00006F                     f_lseek@ofs:
   325                           	opt callstack 0
   326                           
   327                           ; 4 bytes @ 0xF
   328  00006F                     	ds	1
   329  000070                     _find_volume$997:
   330                           	opt callstack 0
   331                           
   332                           ; 4 bytes @ 0x10
   333  000070                     	ds	1
   334  000071                     ??_dir_next:
   335  000071                     f_write@btw:
   336                           	opt callstack 0
   337                           
   338                           ; 2 bytes @ 0x11
   339  000071                     	ds	2
   340  000073                     ??_f_lseek:
   341  000073                     f_write@bw:
   342                           	opt callstack 0
   343                           
   344                           ; 2 bytes @ 0x13
   345  000073                     	ds	1
   346  000074                     _find_volume$998:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x14
   350  000074                     	ds	1
   351  000075                     ??_f_write:
   352                           
   353                           ; 1 bytes @ 0x15
   354  000075                     	ds	1
   355  000076                     find_volume@szbfat:
   356                           	opt callstack 0
   357                           
   358                           ; 4 bytes @ 0x16
   359  000076                     	ds	2
   360  000078                     dir_next@c:
   361                           	opt callstack 0
   362                           
   363                           ; 2 bytes @ 0x18
   364  000078                     	ds	2
   365  00007A                     dir_next@i:
   366                           	opt callstack 0
   367  00007A                     find_volume@pt:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0x1A
   371  00007A                     	ds	2
   372  00007C                     dir_next@clst:
   373                           	opt callstack 0
   374  00007C                     find_volume@sysect:
   375                           	opt callstack 0
   376                           
   377                           ; 4 bytes @ 0x1C
   378  00007C                     	ds	4
   379  000080                     dir_alloc@dp:
   380                           	opt callstack 0
   381  000080                     dir_find@dp:
   382                           	opt callstack 0
   383  000080                     find_volume@vol:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x20
   387  000080                     	ds	1
   388  000081                     f_write@res:
   389                           	opt callstack 0
   390                           
   391                           ; 1 bytes @ 0x21
   392  000081                     	ds	1
   393  000082                     dir_find@c:
   394                           	opt callstack 0
   395  000082                     dir_alloc@nent:
   396                           	opt callstack 0
   397  000082                     find_volume@nrsv:
   398                           	opt callstack 0
   399  000082                     f_write@wbuff:
   400                           	opt callstack 0
   401                           
   402                           ; 2 bytes @ 0x22
   403  000082                     	ds	1
   404  000083                     dir_find@dir:
   405                           	opt callstack 0
   406  000083                     f_lseek@ifptr:
   407                           	opt callstack 0
   408                           
   409                           ; 4 bytes @ 0x23
   410  000083                     	ds	1
   411  000084                     ??_dir_alloc:
   412  000084                     f_write@csect:
   413                           	opt callstack 0
   414  000084                     find_volume@tsect:
   415                           	opt callstack 0
   416                           
   417                           ; 4 bytes @ 0x24
   418  000084                     	ds	1
   419  000085                     dir_find@res:
   420                           	opt callstack 0
   421  000085                     f_write@cc:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x25
   425  000085                     	ds	1
   426  000086                     follow_path@dp:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x26
   430  000086                     	ds	1
   431  000087                     f_lseek@res:
   432                           	opt callstack 0
   433  000087                     dir_alloc@n:
   434                           	opt callstack 0
   435  000087                     f_write@sect:
   436                           	opt callstack 0
   437                           
   438                           ; 4 bytes @ 0x27
   439  000087                     	ds	1
   440  000088                     follow_path@path:
   441                           	opt callstack 0
   442  000088                     find_volume@nclst:
   443                           	opt callstack 0
   444  000088                     f_lseek@nsect:
   445                           	opt callstack 0
   446                           
   447                           ; 4 bytes @ 0x28
   448  000088                     	ds	1
   449  000089                     dir_alloc@res:
   450                           	opt callstack 0
   451                           
   452                           ; 1 bytes @ 0x29
   453  000089                     	ds	1
   454  00008A                     dir_register@dp:
   455                           	opt callstack 0
   456  00008A                     follow_path@dir:
   457                           	opt callstack 0
   458                           
   459                           ; 2 bytes @ 0x2A
   460  00008A                     	ds	1
   461  00008B                     f_write@clst:
   462                           	opt callstack 0
   463                           
   464                           ; 4 bytes @ 0x2B
   465  00008B                     	ds	1
   466  00008C                     dir_register@res:
   467                           	opt callstack 0
   468  00008C                     follow_path@ns:
   469                           	opt callstack 0
   470  00008C                     find_volume@stat:
   471                           	opt callstack 0
   472  00008C                     f_lseek@bcs:
   473                           	opt callstack 0
   474                           
   475                           ; 4 bytes @ 0x2C
   476  00008C                     	ds	1
   477  00008D                     follow_path@res:
   478                           	opt callstack 0
   479  00008D                     find_volume@fasize:
   480                           	opt callstack 0
   481                           
   482                           ; 4 bytes @ 0x2D
   483  00008D                     	ds	2
   484  00008F                     f_write@wcnt:
   485                           	opt callstack 0
   486                           
   487                           ; 2 bytes @ 0x2F
   488  00008F                     	ds	1
   489  000090                     f_lseek@clst:
   490                           	opt callstack 0
   491                           
   492                           ; 4 bytes @ 0x30
   493  000090                     	ds	1
   494  000091                     find_volume@bsect:
   495                           	opt callstack 0
   496                           
   497                           ; 4 bytes @ 0x31
   498  000091                     	ds	4
   499  000095                     find_volume@i:
   500                           	opt callstack 0
   501                           
   502                           ; 2 bytes @ 0x35
   503  000095                     	ds	2
   504  000097                     find_volume@fmt:
   505                           	opt callstack 0
   506                           
   507                           ; 1 bytes @ 0x37
   508  000097                     	ds	1
   509  000098                     find_volume@fs:
   510                           	opt callstack 0
   511                           
   512                           ; 2 bytes @ 0x38
   513  000098                     	ds	2
   514  00009A                     f_open@fp:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x3A
   518  00009A                     	ds	2
   519  00009C                     f_open@path:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x3C
   523  00009C                     	ds	2
   524  00009E                     f_open@mode:
   525                           	opt callstack 0
   526                           
   527                           ; 1 bytes @ 0x3E
   528  00009E                     	ds	1
   529  00009F                     ??_f_open:
   530                           
   531                           ; 1 bytes @ 0x3F
   532  00009F                     	ds	4
   533  0000A3                     f_open@sfn:
   534                           	opt callstack 0
   535                           
   536                           ; 12 bytes @ 0x43
   537  0000A3                     	ds	12
   538  0000AF                     f_open@cl:
   539                           	opt callstack 0
   540                           
   541                           ; 4 bytes @ 0x4F
   542  0000AF                     	ds	4
   543  0000B3                     f_open@dw:
   544                           	opt callstack 0
   545                           
   546                           ; 4 bytes @ 0x53
   547  0000B3                     	ds	4
   548  0000B7                     f_open@res:
   549                           	opt callstack 0
   550                           
   551                           ; 1 bytes @ 0x57
   552  0000B7                     	ds	1
   553  0000B8                     f_open@dir:
   554                           	opt callstack 0
   555                           
   556                           ; 2 bytes @ 0x58
   557  0000B8                     	ds	2
   558  0000BA                     f_open@dj:
   559                           	opt callstack 0
   560                           
   561                           ; 22 bytes @ 0x5A
   562  0000BA                     	ds	22
   563  0000D0                     main@bw:
   564                           	opt callstack 0
   565                           
   566                           ; 2 bytes @ 0x70
   567  0000D0                     	ds	2
   568                           
   569                           	psect	cstackCOMRAM
   570  000001                     __pcstackCOMRAM:
   571                           	opt callstack 0
   572  000001                     ??___delay_sec:
   573  000001                     ?_mem_cmp:
   574                           	opt callstack 0
   575  000001                     ?_chk_chr:
   576                           	opt callstack 0
   577  000001                     ?_get_ldnumber:
   578                           	opt callstack 0
   579  000001                     ?___wmul:
   580                           	opt callstack 0
   581  000001                     ?_ld_clust:
   582                           	opt callstack 0
   583  000001                     ?___lmul:
   584                           	opt callstack 0
   585  000001                     ?___lldiv:
   586                           	opt callstack 0
   587  000001                     Error@a:
   588                           	opt callstack 0
   589  000001                     disk_status@pdrv:
   590                           	opt callstack 0
   591  000001                     SPI1_Exchange8bit@data:
   592                           	opt callstack 0
   593  000001                     mem_cpy@dst:
   594                           	opt callstack 0
   595  000001                     mem_set@dst:
   596                           	opt callstack 0
   597  000001                     mem_cmp@dst:
   598                           	opt callstack 0
   599  000001                     chk_chr@str:
   600                           	opt callstack 0
   601  000001                     ld_clust@fs:
   602                           	opt callstack 0
   603  000001                     st_clust@dir:
   604                           	opt callstack 0
   605  000001                     get_ldnumber@path:
   606                           	opt callstack 0
   607  000001                     ___wmul@multiplier:
   608                           	opt callstack 0
   609  000001                     ___lmul@multiplier:
   610                           	opt callstack 0
   611  000001                     ___lldiv@dividend:
   612                           	opt callstack 0
   613                           
   614                           ; 4 bytes @ 0x0
   615  000001                     	ds	1
   616  000002                     wait_ready@tmr:
   617                           	opt callstack 0
   618  000002                     rcvr_datablock@buff:
   619                           	opt callstack 0
   620  000002                     validate@obj:
   621                           	opt callstack 0
   622                           
   623                           ; 2 bytes @ 0x1
   624  000002                     	ds	1
   625  000003                     ??_get_ldnumber:
   626  000003                     mem_cpy@src:
   627                           	opt callstack 0
   628  000003                     mem_set@val:
   629                           	opt callstack 0
   630  000003                     mem_cmp@src:
   631                           	opt callstack 0
   632  000003                     chk_chr@chr:
   633                           	opt callstack 0
   634  000003                     ld_clust@dir:
   635                           	opt callstack 0
   636  000003                     ___wmul@multiplicand:
   637                           	opt callstack 0
   638  000003                     st_clust@cl:
   639                           	opt callstack 0
   640                           
   641                           ; 4 bytes @ 0x2
   642  000003                     	ds	1
   643  000004                     ??_validate:
   644  000004                     ___delay_sec@sec:
   645                           	opt callstack 0
   646  000004                     rcvr_datablock@btr:
   647                           	opt callstack 0
   648  000004                     xmit_datablock@buff:
   649                           	opt callstack 0
   650  000004                     ___send_cmd@arg:
   651                           	opt callstack 0
   652                           
   653                           ; 4 bytes @ 0x3
   654  000004                     	ds	1
   655  000005                     ??_chk_chr:
   656  000005                     ??_ld_clust:
   657  000005                     ___delay_sec@i:
   658                           	opt callstack 0
   659  000005                     mem_cpy@cnt:
   660                           	opt callstack 0
   661  000005                     mem_set@cnt:
   662                           	opt callstack 0
   663  000005                     mem_cmp@cnt:
   664                           	opt callstack 0
   665  000005                     ___wmul@product:
   666                           	opt callstack 0
   667  000005                     ___lmul@multiplicand:
   668                           	opt callstack 0
   669  000005                     ___lldiv@divisor:
   670                           	opt callstack 0
   671                           
   672                           ; 4 bytes @ 0x4
   673  000005                     	ds	1
   674  000006                     xmit_datablock@token:
   675                           	opt callstack 0
   676  000006                     rcvr_datablock@tmr:
   677                           	opt callstack 0
   678                           
   679                           ; 2 bytes @ 0x5
   680  000006                     	ds	1
   681  000007                     ??_mem_cpy:
   682  000007                     ??_mem_cmp:
   683  000007                     xmit_datablock@i:
   684                           	opt callstack 0
   685  000007                     mem_set@d:
   686                           	opt callstack 0
   687  000007                     get_ldnumber@tp:
   688                           	opt callstack 0
   689                           
   690                           ; 2 bytes @ 0x6
   691  000007                     	ds	1
   692  000008                     rcvr_datablock@token:
   693                           	opt callstack 0
   694  000008                     ___send_cmd@res:
   695                           	opt callstack 0
   696  000008                     validate@fil:
   697                           	opt callstack 0
   698                           
   699                           ; 2 bytes @ 0x7
   700  000008                     	ds	1
   701  000009                     xmit_datablock@resp:
   702                           	opt callstack 0
   703  000009                     ___send_cmd@n:
   704                           	opt callstack 0
   705  000009                     mem_cpy@d:
   706                           	opt callstack 0
   707  000009                     mem_cmp@d:
   708                           	opt callstack 0
   709  000009                     create_name@dp:
   710                           	opt callstack 0
   711  000009                     get_ldnumber@vol:
   712                           	opt callstack 0
   713  000009                     ___lmul@product:
   714                           	opt callstack 0
   715  000009                     ___lldiv@quotient:
   716                           	opt callstack 0
   717                           
   718                           ; 4 bytes @ 0x8
   719  000009                     	ds	1
   720  00000A                     ___send_cmd@cmd:
   721                           	opt callstack 0
   722                           
   723                           ; 1 bytes @ 0x9
   724  00000A                     	ds	1
   725  00000B                     mem_cpy@s:
   726                           	opt callstack 0
   727  00000B                     mem_cmp@s:
   728                           	opt callstack 0
   729  00000B                     create_name@path:
   730                           	opt callstack 0
   731  00000B                     get_ldnumber@i:
   732                           	opt callstack 0
   733  00000B                     send_cmd@arg:
   734                           	opt callstack 0
   735  00000B                     ld_clust@cl:
   736                           	opt callstack 0
   737                           
   738                           ; 4 bytes @ 0xA
   739  00000B                     	ds	2
   740  00000D                     ??_create_name:
   741  00000D                     ?_clust2sect:
   742                           	opt callstack 0
   743  00000D                     ___lldiv@counter:
   744                           	opt callstack 0
   745  00000D                     mem_cmp@r:
   746                           	opt callstack 0
   747  00000D                     clust2sect@fs:
   748                           	opt callstack 0
   749  00000D                     get_ldnumber@tt:
   750                           	opt callstack 0
   751                           
   752                           ; 2 bytes @ 0xC
   753  00000D                     	ds	2
   754  00000F                     send_cmd@cmd:
   755                           	opt callstack 0
   756  00000F                     clust2sect@clst:
   757                           	opt callstack 0
   758                           
   759                           ; 4 bytes @ 0xE
   760  00000F                     	ds	1
   761  000010                     send_cmd@res:
   762                           	opt callstack 0
   763                           
   764                           ; 1 bytes @ 0xF
   765  000010                     	ds	1
   766  000011                     ??_disk_initialize:
   767  000011                     disk_ioctl@cmd:
   768                           	opt callstack 0
   769  000011                     disk_read@buff:
   770                           	opt callstack 0
   771  000011                     disk_write@buff:
   772                           	opt callstack 0
   773  000011                     _create_name$893:
   774                           	opt callstack 0
   775                           
   776                           ; 2 bytes @ 0x10
   777  000011                     	ds	1
   778  000012                     disk_initialize@pdrv:
   779                           	opt callstack 0
   780  000012                     disk_ioctl@buff:
   781                           	opt callstack 0
   782                           
   783                           ; 2 bytes @ 0x11
   784  000012                     	ds	1
   785  000013                     ??_clust2sect:
   786  000013                     create_name@si:
   787                           	opt callstack 0
   788  000013                     disk_initialize@ocr:
   789                           	opt callstack 0
   790  000013                     disk_read@sector:
   791                           	opt callstack 0
   792  000013                     disk_write@sector:
   793                           	opt callstack 0
   794                           
   795                           ; 4 bytes @ 0x12
   796  000013                     	ds	1
   797  000014                     ??_disk_ioctl:
   798                           
   799                           ; 1 bytes @ 0x13
   800  000014                     	ds	1
   801  000015                     create_name@b:
   802                           	opt callstack 0
   803                           
   804                           ; 1 bytes @ 0x14
   805  000015                     	ds	1
   806  000016                     create_name@ni:
   807                           	opt callstack 0
   808                           
   809                           ; 2 bytes @ 0x15
   810  000016                     	ds	1
   811  000017                     _disk_initialize$403:
   812                           	opt callstack 0
   813  000017                     disk_read@count:
   814                           	opt callstack 0
   815  000017                     disk_write@count:
   816                           	opt callstack 0
   817                           
   818                           ; 2 bytes @ 0x16
   819  000017                     	ds	1
   820  000018                     create_name@p:
   821                           	opt callstack 0
   822                           
   823                           ; 2 bytes @ 0x17
   824  000018                     	ds	1
   825  000019                     ??_disk_write:
   826  000019                     disk_initialize@cmd:
   827                           	opt callstack 0
   828  000019                     disk_read@pdrv:
   829                           	opt callstack 0
   830                           
   831                           ; 1 bytes @ 0x18
   832  000019                     	ds	1
   833  00001A                     disk_initialize@ty:
   834                           	opt callstack 0
   835  00001A                     disk_write@pdrv:
   836                           	opt callstack 0
   837  00001A                     create_name@d:
   838                           	opt callstack 0
   839  00001A                     _disk_read$412:
   840                           	opt callstack 0
   841                           
   842                           ; 2 bytes @ 0x19
   843  00001A                     	ds	1
   844  00001B                     disk_initialize@tmr:
   845                           	opt callstack 0
   846  00001B                     sync_window@fs:
   847                           	opt callstack 0
   848  00001B                     create_name@sfn:
   849                           	opt callstack 0
   850                           
   851                           ; 2 bytes @ 0x1A
   852  00001B                     	ds	1
   853  00001C                     disk_read@cmd:
   854                           	opt callstack 0
   855                           
   856                           ; 1 bytes @ 0x1B
   857  00001C                     	ds	1
   858  00001D                     ??_sync_window:
   859  00001D                     disk_initialize@n:
   860                           	opt callstack 0
   861  00001D                     create_name@i:
   862                           	opt callstack 0
   863                           
   864                           ; 2 bytes @ 0x1C
   865  00001D                     	ds	2
   866  00001F                     create_name@c:
   867                           	opt callstack 0
   868                           
   869                           ; 1 bytes @ 0x1E
   870  00001F                     	ds	2
   871  000021                     disk_ioctl@csd:
   872                           	opt callstack 0
   873                           
   874                           ; 16 bytes @ 0x20
   875  000021                     	ds	8
   876  000029                     sync_window@res:
   877                           	opt callstack 0
   878                           
   879                           ; 1 bytes @ 0x28
   880  000029                     	ds	1
   881  00002A                     sync_window@nf:
   882                           	opt callstack 0
   883                           
   884                           ; 2 bytes @ 0x29
   885  00002A                     	ds	2
   886  00002C                     sync_window@wsect:
   887                           	opt callstack 0
   888                           
   889                           ; 4 bytes @ 0x2B
   890  00002C                     	ds	4
   891  000030                     move_window@fs:
   892                           	opt callstack 0
   893                           
   894                           ; 2 bytes @ 0x2F
   895  000030                     	ds	1
   896  000031                     disk_ioctl@pdrv:
   897                           	opt callstack 0
   898                           
   899                           ; 1 bytes @ 0x30
   900  000031                     	ds	1
   901  000032                     disk_ioctl@csize:
   902                           	opt callstack 0
   903  000032                     move_window@sector:
   904                           	opt callstack 0
   905                           
   906                           ; 4 bytes @ 0x31
   907  000032                     	ds	4
   908  000036                     disk_ioctl@res:
   909                           	opt callstack 0
   910                           
   911                           ; 1 bytes @ 0x35
   912  000036                     	ds	1
   913  000037                     disk_ioctl@n:
   914                           	opt callstack 0
   915                           
   916                           ; 1 bytes @ 0x36
   917  000037                     	ds	1
   918  000038                     disk_ioctl@ptr:
   919                           	opt callstack 0
   920                           
   921                           ; 2 bytes @ 0x37
   922  000038                     	ds	2
   923  00003A                     move_window@res:
   924                           	opt callstack 0
   925  00003A                     sync_fs@fs:
   926                           	opt callstack 0
   927                           
   928                           ; 2 bytes @ 0x39
   929  00003A                     	ds	1
   930  00003B                     ?_get_fat:
   931                           	opt callstack 0
   932  00003B                     get_fat@fs:
   933                           	opt callstack 0
   934  00003B                     put_fat@fs:
   935                           	opt callstack 0
   936  00003B                     check_fs@fs:
   937                           	opt callstack 0
   938                           
   939                           ; 2 bytes @ 0x3A
   940  00003B                     	ds	1
   941  00003C                     ??_sync_fs:
   942                           
   943                           ; 1 bytes @ 0x3B
   944  00003C                     	ds	1
   945  00003D                     get_fat@clst:
   946                           	opt callstack 0
   947  00003D                     put_fat@clst:
   948                           	opt callstack 0
   949  00003D                     check_fs@sect:
   950                           	opt callstack 0
   951                           
   952                           ; 4 bytes @ 0x3C
   953  00003D                     	ds	4
   954  000041                     ??_get_fat:
   955  000041                     ??_check_fs:
   956  000041                     put_fat@val:
   957                           	opt callstack 0
   958                           
   959                           ; 4 bytes @ 0x40
   960  000041                     	ds	3
   961  000044                     sync_fs@res:
   962                           	opt callstack 0
   963                           
   964                           ; 1 bytes @ 0x43
   965  000044                     	ds	1
   966  000045                     ??_put_fat:
   967  000045                     find_volume@rfs:
   968                           	opt callstack 0
   969  000045                     f_sync@fp:
   970                           	opt callstack 0
   971                           
   972                           ; 2 bytes @ 0x44
   973  000045                     	ds	2
   974  000047                     find_volume@path:
   975                           	opt callstack 0
   976                           
   977                           ; 2 bytes @ 0x46
   978  000047                     	ds	2
   979  000049                     find_volume@wmode:
   980                           	opt callstack 0
   981                           
   982                           ; 1 bytes @ 0x48
   983  000049                     	ds	1
   984  00004A                     ??_find_volume:
   985  00004A                     _get_fat$643:
   986                           	opt callstack 0
   987                           
   988                           ; 2 bytes @ 0x49
   989  00004A                     	ds	1
   990  00004B                     f_sync@res:
   991                           	opt callstack 0
   992                           
   993                           ; 1 bytes @ 0x4A
   994  00004B                     	ds	1
   995  00004C                     f_sync@dir:
   996                           	opt callstack 0
   997  00004C                     get_fat@val:
   998                           	opt callstack 0
   999                           
  1000                           ; 4 bytes @ 0x4B
  1001  00004C                     	ds	1
  1002  00004D                     _put_fat$669:
  1003                           	opt callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x4C
  1006  00004D                     	ds	1
  1007  00004E                     f_close@fp:
  1008                           	opt callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x4D
  1011  00004E                     	ds	1
  1012  00004F                     _put_fat$670:
  1013                           	opt callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x4E
  1016  00004F                     	ds	1
  1017  000050                     f_close@res:
  1018                           	opt callstack 0
  1019  000050                     get_fat@wc:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x4F
  1023  000050                     	ds	1
  1024  000051                     put_fat@bc:
  1025                           	opt callstack 0
  1026                           
  1027                           ; 2 bytes @ 0x50
  1028  000051                     	ds	1
  1029  000052                     get_fat@p:
  1030                           	opt callstack 0
  1031  000052                     f_mount@fs:
  1032                           	opt callstack 0
  1033                           
  1034                           ; 2 bytes @ 0x51
  1035  000052                     	ds	1
  1036  000053                     put_fat@res:
  1037                           	opt callstack 0
  1038                           
  1039                           ; 1 bytes @ 0x52
  1040  000053                     	ds	1
  1041  000054                     get_fat@bc:
  1042                           	opt callstack 0
  1043  000054                     put_fat@p:
  1044                           	opt callstack 0
  1045  000054                     f_mount@path:
  1046                           	opt callstack 0
  1047                           
  1048                           ; 2 bytes @ 0x53
  1049  000054                     	ds	2
  1050  000056                     ?_create_chain:
  1051                           	opt callstack 0
  1052  000056                     f_mount@opt:
  1053                           	opt callstack 0
  1054  000056                     remove_chain@fs:
  1055                           	opt callstack 0
  1056  000056                     create_chain@fs:
  1057                           	opt callstack 0
  1058  000056                     dir_sdi@dp:
  1059                           	opt callstack 0
  1060                           
  1061                           ; 2 bytes @ 0x55
  1062  000056                     	ds	1
  1063  000057                     f_mount@res:
  1064                           	opt callstack 0
  1065                           
  1066                           ; 1 bytes @ 0x56
  1067  000057                     	ds	1
  1068  000058                     dir_sdi@idx:
  1069                           	opt callstack 0
  1070  000058                     f_mount@cfs:
  1071                           	opt callstack 0
  1072  000058                     remove_chain@clst:
  1073                           	opt callstack 0
  1074  000058                     create_chain@clst:
  1075                           	opt callstack 0
  1076                           
  1077                           ; 4 bytes @ 0x57
  1078  000058                     	ds	2
  1079  00005A                     f_mount@rp:
  1080                           	opt callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x59
  1083  00005A                     	ds	2
  1084  00005C                     f_mount@vol:
  1085                           	opt callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x5B
  1088  00005C                     	ds	4
  1089  000060                     
  1090                           ; 1 bytes @ 0x5F
  1091 ;;
  1092 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1093 ;;
  1094 ;; *************** function _main *****************
  1095 ;; Defined at:
  1096 ;;		line 15 in file "Main.c"
  1097 ;; Parameters:    Size  Location     Type
  1098 ;;		None
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  bw              2  112[BANK0 ] unsigned short 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  1    wreg      void 
  1103 ;; Registers used:
  1104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1110 ;;      Params:         0       0       0       0       0       0       0       0       0
  1111 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1112 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1113 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1114 ;;Total ram usage:        2 bytes
  1115 ;; Hardware stack levels required when called:   14
  1116 ;; This function calls:
  1117 ;;		_Error
  1118 ;;		_SYSTEM_Initialize
  1119 ;;		___delay_sec
  1120 ;;		_f_close
  1121 ;;		_f_lseek
  1122 ;;		_f_mount
  1123 ;;		_f_open
  1124 ;;		_f_write
  1125 ;; This function is called by:
  1126 ;;		Startup code after reset
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text0
  1131  004466                     __ptext0:
  1132                           	opt callstack 0
  1133  004466                     _main:
  1134                           	opt callstack 17
  1135                           
  1136                           ;Main.c: 18:     LATA = 0x00;
  1137                           
  1138                           ;incstack = 0
  1139  004466  0E00               	movlw	0
  1140  004468  6E89               	movwf	3977,c	;volatile
  1141                           
  1142                           ;Main.c: 19:     TRISA = 0x00;
  1143  00446A  0E00               	movlw	0
  1144  00446C  6E92               	movwf	3986,c	;volatile
  1145                           
  1146                           ;Main.c: 20:     ANSELA = 0x00;
  1147  00446E  0E00               	movlw	0
  1148  004470  010F               	movlb	15	; () banked
  1149  004472  6F5B               	movwf	91,b	;volatile
  1150                           
  1151                           ; BSR set to: 15
  1152                           ;Main.c: 21:     UINT bw;;Main.c: 23:     SYSTEM_Initialize();
  1153  004474  ECE5  F02A         	call	_SYSTEM_Initialize	;wreg free
  1154                           
  1155                           ;Main.c: 24:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1156  004478  0ED2               	movlw	low _FatFs
  1157  00447A  6E52               	movwf	f_mount@fs,c
  1158  00447C  0E05               	movlw	high _FatFs
  1159  00447E  6E53               	movwf	f_mount@fs+1,c
  1160  004480  0E10               	movlw	low (STR_4+15)
  1161  004482  6E54               	movwf	f_mount@path,c
  1162  004484  0E08               	movlw	high (STR_4+15)
  1163  004486  6E55               	movwf	f_mount@path+1,c
  1164  004488  0E01               	movlw	1
  1165  00448A  6E56               	movwf	f_mount@opt,c
  1166  00448C  EC19  F027         	call	_f_mount	;wreg free
  1167  004490  0900               	iorlw	0
  1168  004492  B4D8               	btfsc	status,2,c
  1169  004494  D015               	goto	u8740
  1170                           
  1171                           ;Main.c: 25:         Error(1);
  1172  004496  0E01               	movlw	1
  1173  004498  ECF9  F025         	call	_Error
  1174                           
  1175                           ;Main.c: 26:         __delay_sec(2);
  1176  00449C  0E02               	movlw	2
  1177  00449E  EC3F  F02A         	call	___delay_sec
  1178  0044A2                     l6466:
  1179                           
  1180                           ;Main.c: 28:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1181  0044A2  0ED2               	movlw	low _FatFs
  1182  0044A4  6E52               	movwf	f_mount@fs,c
  1183  0044A6  0E05               	movlw	high _FatFs
  1184  0044A8  6E53               	movwf	f_mount@fs+1,c
  1185  0044AA  0E10               	movlw	low (STR_4+15)
  1186  0044AC  6E54               	movwf	f_mount@path,c
  1187  0044AE  0E08               	movlw	high (STR_4+15)
  1188  0044B0  6E55               	movwf	f_mount@path+1,c
  1189  0044B2  0E01               	movlw	1
  1190  0044B4  6E56               	movwf	f_mount@opt,c
  1191  0044B6  EC19  F027         	call	_f_mount	;wreg free
  1192  0044BA  0900               	iorlw	0
  1193  0044BC  A4D8               	btfss	status,2,c
  1194  0044BE  D7F1               	goto	l6466
  1195  0044C0                     u8740:
  1196                           
  1197                           ;Main.c: 33:     Error(2);
  1198  0044C0  0E02               	movlw	2
  1199  0044C2  ECF9  F025         	call	_Error
  1200                           
  1201                           ;Main.c: 34:     __delay_sec(2);
  1202  0044C6  0E02               	movlw	2
  1203  0044C8  EC3F  F02A         	call	___delay_sec
  1204                           
  1205                           ;Main.c: 36:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1206  0044CC  0ED7               	movlw	low _Fil
  1207  0044CE  0100               	movlb	0	; () banked
  1208  0044D0  6F9A               	movwf	f_open@fp& (0+255),b
  1209  0044D2  0E00               	movlw	high _Fil
  1210  0044D4  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1211  0044D6  0E20               	movlw	low STR_3
  1212  0044D8  6F9C               	movwf	f_open@path& (0+255),b
  1213  0044DA  0E08               	movlw	high STR_3
  1214  0044DC  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1215  0044DE  0E13               	movlw	19
  1216  0044E0  6F9E               	movwf	f_open@mode& (0+255),b
  1217  0044E2  ECDE  F017         	call	_f_open	;wreg free
  1218  0044E6  0900               	iorlw	0
  1219  0044E8  A4D8               	btfss	status,2,c
  1220  0044EA  D050               	goto	l6502
  1221                           
  1222                           ;Main.c: 37:         Error(3);
  1223  0044EC  0E03               	movlw	3
  1224  0044EE  ECF9  F025         	call	_Error
  1225                           
  1226                           ;Main.c: 38:         __delay_sec(2);
  1227  0044F2  0E02               	movlw	2
  1228  0044F4  EC3F  F02A         	call	___delay_sec
  1229                           
  1230                           ;Main.c: 40:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1231  0044F8  0100               	movlb	0	; () banked
  1232  0044FA  51E1               	movf	(_Fil+10)& (0+255),w,b
  1233  0044FC  11E2               	iorwf	(_Fil+11)& (0+255),w,b
  1234  0044FE  11E3               	iorwf	(_Fil+12)& (0+255),w,b
  1235  004500  11E4               	iorwf	(_Fil+13)& (0+255),w,b
  1236  004502  B4D8               	btfsc	status,2,c
  1237  004504  D011               	goto	l6484
  1238                           
  1239                           ; BSR set to: 0
  1240  004506  0ED7               	movlw	low _Fil
  1241  004508  6F6D               	movwf	f_lseek@fp& (0+255),b
  1242  00450A  0E00               	movlw	high _Fil
  1243  00450C  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1244  00450E  C0E1  F06F         	movff	_Fil+10,f_lseek@ofs
  1245  004512  C0E2  F070         	movff	_Fil+11,f_lseek@ofs+1
  1246  004516  C0E3  F071         	movff	_Fil+12,f_lseek@ofs+2
  1247  00451A  C0E4  F072         	movff	_Fil+13,f_lseek@ofs+3
  1248  00451E  EC9F  F00C         	call	_f_lseek	;wreg free
  1249  004522  0900               	iorlw	0
  1250  004524  A4D8               	btfss	status,2,c
  1251  004526  D01F               	goto	l6494
  1252  004528                     l6484:
  1253                           
  1254                           ;Main.c: 41:                 Error(4);
  1255  004528  0E04               	movlw	4
  1256  00452A  ECF9  F025         	call	_Error
  1257                           
  1258                           ;Main.c: 42:                 __delay_sec(2);
  1259  00452E  0E02               	movlw	2
  1260  004530  EC3F  F02A         	call	___delay_sec
  1261                           
  1262                           ;Main.c: 44:                 f_write(&Fil, "ESTAS MUERTO.\r\n", 46, &bw);
  1263  004534  0ED7               	movlw	low _Fil
  1264  004536  0100               	movlb	0	; () banked
  1265  004538  6F6D               	movwf	f_write@fp& (0+255),b
  1266  00453A  0E00               	movlw	high _Fil
  1267  00453C  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1268  00453E  0E01               	movlw	low STR_4
  1269  004540  6F6F               	movwf	f_write@buff& (0+255),b
  1270  004542  0E08               	movlw	high STR_4
  1271  004544  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1272  004546  0E00               	movlw	0
  1273  004548  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1274  00454A  0E2E               	movlw	46
  1275  00454C  6F71               	movwf	f_write@btw& (0+255),b
  1276  00454E  0ED0               	movlw	low main@bw
  1277  004550  6F73               	movwf	f_write@bw& (0+255),b
  1278  004552  0E00               	movlw	high main@bw
  1279  004554  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1280  004556  ECED  F008         	call	_f_write	;wreg free
  1281                           
  1282                           ;Main.c: 45:                 Error(5);
  1283  00455A  0E05               	movlw	5
  1284  00455C  ECF9  F025         	call	_Error
  1285                           
  1286                           ;Main.c: 46:                 __delay_sec(2);
  1287  004560  0E02               	movlw	2
  1288  004562  EC3F  F02A         	call	___delay_sec
  1289  004566                     l6494:
  1290  004566  0ED7               	movlw	low _Fil
  1291  004568  6E4E               	movwf	f_close@fp,c
  1292  00456A  0E00               	movlw	high _Fil
  1293  00456C  6E4F               	movwf	f_close@fp+1,c
  1294  00456E  EC22  F02A         	call	_f_close	;wreg free
  1295                           
  1296                           ;Main.c: 49:                 Error(6);
  1297  004572  0E06               	movlw	6
  1298  004574  ECF9  F025         	call	_Error
  1299                           
  1300                           ;Main.c: 50:                 __delay_sec(1);
  1301  004578  0E01               	movlw	1
  1302  00457A  EC3F  F02A         	call	___delay_sec
  1303                           
  1304                           ;Main.c: 51:                 Error(7);
  1305  00457E  0E07               	movlw	7
  1306  004580  ECF9  F025         	call	_Error
  1307                           
  1308                           ;Main.c: 52:                 __delay_sec(2);
  1309  004584  0E02               	movlw	2
  1310  004586  EC3F  F02A         	call	___delay_sec
  1311                           
  1312                           ;Main.c: 54:  }
  1313  00458A  D003               	goto	l100
  1314  00458C                     l6502:
  1315                           
  1316                           ;Main.c: 56:         Error(11);
  1317  00458C  0E0B               	movlw	11
  1318  00458E  ECF9  F025         	call	_Error
  1319  004592                     l100:
  1320                           
  1321                           ;Main.c: 60:     {;Main.c: 61:         Error(15);
  1322  004592  0E0F               	movlw	15
  1323  004594  ECF9  F025         	call	_Error
  1324  004598  D7FC               	goto	l100
  1325  00459A                     __end_of_main:
  1326                           	opt callstack 0
  1327                           
  1328 ;; *************** function _f_write *****************
  1329 ;; Defined at:
  1330 ;;		line 2691 in file "ff.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  fp              2   13[BANK0 ] PTR struct .
  1333 ;;		 -> Fil(32), 
  1334 ;;  buff            2   15[BANK0 ] PTR const void 
  1335 ;;		 -> STR_4(16), 
  1336 ;;  btw             2   17[BANK0 ] unsigned short 
  1337 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1338 ;;		 -> main@bw(2), 
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;  clst            4   43[BANK0 ] unsigned long 
  1341 ;;  sect            4   39[BANK0 ] unsigned long 
  1342 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1343 ;;  cc              2   37[BANK0 ] unsigned short 
  1344 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1345 ;;		 -> STR_4(16), 
  1346 ;;  csect           1   36[BANK0 ] unsigned char 
  1347 ;;  res             1   33[BANK0 ] enum E93
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      enum E4918
  1350 ;; Registers used:
  1351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1357 ;;      Params:         0       8       0       0       0       0       0       0       0
  1358 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1359 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1360 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1361 ;;Total ram usage:       36 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:   10
  1364 ;; This function calls:
  1365 ;;		_clust2sect
  1366 ;;		_create_chain
  1367 ;;		_disk_write
  1368 ;;		_mem_cpy
  1369 ;;		_move_window
  1370 ;;		_sync_window
  1371 ;;		_validate
  1372 ;; This function is called by:
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text1
  1378  0011DA                     __ptext1:
  1379                           	opt callstack 0
  1380  0011DA                     _f_write:
  1381                           	opt callstack 20
  1382                           
  1383                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1384                           
  1385                           ;incstack = 0
  1386  0011DA  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1387  0011DE  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1388                           
  1389                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1390  0011E2  C073  FFD9         	movff	f_write@bw,fsr2l
  1391  0011E6  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1392  0011EA  0E00               	movlw	0
  1393  0011EC  6EDE               	movwf	postinc2,c
  1394  0011EE  0E00               	movlw	0
  1395  0011F0  6EDD               	movwf	postdec2,c
  1396                           
  1397                           ;ff.c: 2707:  res = validate(fp);
  1398  0011F2  C06D  F002         	movff	f_write@fp,validate@obj
  1399  0011F6  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1400  0011FA  ECC4  F027         	call	_validate	;wreg free
  1401  0011FE  0100               	movlb	0	; () banked
  1402  001200  6F81               	movwf	f_write@res& (0+255),b
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1406  001202  5181               	movf	f_write@res& (0+255),w,b
  1407  001204  A4D8               	btfss	status,2,c
  1408  001206  0012               	return	
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;ff.c: 2709:  if (fp->err)
  1412  001208  EE20 F005          	lfsr	2,5
  1413  00120C  516D               	movf	f_write@fp& (0+255),w,b
  1414  00120E  26D9               	addwf	fsr2l,f,c
  1415  001210  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1416  001212  22DA               	addwfc	fsr2h,f,c
  1417  001214  50DF               	movf	indf2,w,c
  1418  001216  A4D8               	btfss	status,2,c
  1419  001218  0012               	return	
  1420                           
  1421                           ; BSR set to: 0
  1422                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1423  00121A  EE20 F004          	lfsr	2,4
  1424  00121E  516D               	movf	f_write@fp& (0+255),w,b
  1425  001220  26D9               	addwf	fsr2l,f,c
  1426  001222  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1427  001224  22DA               	addwfc	fsr2h,f,c
  1428  001226  A2DF               	btfss	indf2,1,c
  1429  001228  0012               	return	
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1433  00122A  EE20 F006          	lfsr	2,6
  1434  00122E  516D               	movf	f_write@fp& (0+255),w,b
  1435  001230  26D9               	addwf	fsr2l,f,c
  1436  001232  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1437  001234  22DA               	addwfc	fsr2h,f,c
  1438  001236  EE10 F006          	lfsr	1,6
  1439  00123A  516D               	movf	f_write@fp& (0+255),w,b
  1440  00123C  26E1               	addwf	fsr1l,f,c
  1441  00123E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1442  001240  22E2               	addwfc	fsr1h,f,c
  1443  001242  CFE6 F079          	movff	postinc1,??_f_write+4
  1444  001246  CFE6 F07A          	movff	postinc1,??_f_write+5
  1445  00124A  CFE6 F07B          	movff	postinc1,??_f_write+6
  1446  00124E  CFE6 F07C          	movff	postinc1,??_f_write+7
  1447  001252  5171               	movf	f_write@btw& (0+255),w,b
  1448  001254  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1449  001256  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1450  001258  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1451  00125A  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1452  00125C  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1453  00125E  0E00               	movlw	0
  1454  001260  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1455  001262  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1456  001264  0E00               	movlw	0
  1457  001266  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1458  001268  6F80               	movwf	(??_f_write+11)& (0+255),b
  1459  00126A  50DE               	movf	postinc2,w,c
  1460  00126C  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1461  00126E  50DE               	movf	postinc2,w,c
  1462  001270  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1463  001272  50DE               	movf	postinc2,w,c
  1464  001274  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1465  001276  50DE               	movf	postinc2,w,c
  1466  001278  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1467  00127A  B0D8               	btfsc	status,0,c
  1468  00127C  D329               	goto	l6434
  1469                           
  1470                           ; BSR set to: 0
  1471  00127E  0E00               	movlw	0
  1472  001280  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1473  001282  0E00               	movlw	0
  1474  001284  6F71               	movwf	f_write@btw& (0+255),b
  1475  001286  D324               	goto	l6434
  1476  001288                     l6326:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1480  001288  EE20 F006          	lfsr	2,6
  1481  00128C  516D               	movf	f_write@fp& (0+255),w,b
  1482  00128E  26D9               	addwf	fsr2l,f,c
  1483  001290  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1484  001292  22DA               	addwfc	fsr2h,f,c
  1485  001294  0EFF               	movlw	255
  1486  001296  14DE               	andwf	postinc2,w,c
  1487  001298  6F75               	movwf	??_f_write& (0+255),b
  1488  00129A  0E01               	movlw	1
  1489  00129C  14DE               	andwf	postinc2,w,c
  1490  00129E  6F76               	movwf	(??_f_write+1)& (0+255),b
  1491  0012A0  0E00               	movlw	0
  1492  0012A2  14DE               	andwf	postinc2,w,c
  1493  0012A4  6F77               	movwf	(??_f_write+2)& (0+255),b
  1494  0012A6  0E00               	movlw	0
  1495  0012A8  14DE               	andwf	postinc2,w,c
  1496  0012AA  6F78               	movwf	(??_f_write+3)& (0+255),b
  1497  0012AC  5175               	movf	??_f_write& (0+255),w,b
  1498  0012AE  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1499  0012B0  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1500  0012B2  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1501  0012B4  A4D8               	btfss	status,2,c
  1502  0012B6  D26A               	goto	l6410
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1506  0012B8  EE20 F006          	lfsr	2,6
  1507  0012BC  516D               	movf	f_write@fp& (0+255),w,b
  1508  0012BE  26D9               	addwf	fsr2l,f,c
  1509  0012C0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1510  0012C2  22DA               	addwfc	fsr2h,f,c
  1511  0012C4  CFDE F075          	movff	postinc2,??_f_write
  1512  0012C8  CFDE F076          	movff	postinc2,??_f_write+1
  1513  0012CC  CFDE F077          	movff	postinc2,??_f_write+2
  1514  0012D0  CFDE F078          	movff	postinc2,??_f_write+3
  1515  0012D4  0E0A               	movlw	10
  1516  0012D6  D005               	goto	u8470
  1517  0012D8                     u8475:
  1518  0012D8  90D8               	bcf	status,0,c
  1519  0012DA  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1520  0012DC  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1521  0012DE  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1522  0012E0  3375               	rrcf	??_f_write& (0+255),f,b
  1523  0012E2                     u8470:
  1524  0012E2  2EE8               	decfsz	wreg,f,c
  1525  0012E4  D7F9               	goto	u8475
  1526  0012E6  C06D  FFD9         	movff	f_write@fp,fsr2l
  1527  0012EA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1528  0012EE  EE10 F002          	lfsr	1,2
  1529  0012F2  50DE               	movf	postinc2,w,c
  1530  0012F4  26E1               	addwf	fsr1l,f,c
  1531  0012F6  50DD               	movf	postdec2,w,c
  1532  0012F8  22E2               	addwfc	fsr1h,f,c
  1533  0012FA  50E7               	movf	indf1,w,c
  1534  0012FC  6F79               	movwf	(??_f_write+4)& (0+255),b
  1535  0012FE  0579               	decf	(??_f_write+4)& (0+255),w,b
  1536  001300  1575               	andwf	??_f_write& (0+255),w,b
  1537  001302  6F84               	movwf	f_write@csect& (0+255),b
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;ff.c: 2719:    if (!csect) {
  1541  001304  5184               	movf	f_write@csect& (0+255),w,b
  1542  001306  A4D8               	btfss	status,2,c
  1543  001308  D0A3               	goto	l6362
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1547  00130A  EE20 F006          	lfsr	2,6
  1548  00130E  516D               	movf	f_write@fp& (0+255),w,b
  1549  001310  26D9               	addwf	fsr2l,f,c
  1550  001312  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1551  001314  22DA               	addwfc	fsr2h,f,c
  1552  001316  50DE               	movf	postinc2,w,c
  1553  001318  10DE               	iorwf	postinc2,w,c
  1554  00131A  10DE               	iorwf	postinc2,w,c
  1555  00131C  10DE               	iorwf	postinc2,w,c
  1556  00131E  A4D8               	btfss	status,2,c
  1557  001320  D027               	goto	l6340
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;ff.c: 2721:      clst = fp->sclust;
  1561  001322  EE20 F00E          	lfsr	2,14
  1562  001326  516D               	movf	f_write@fp& (0+255),w,b
  1563  001328  26D9               	addwf	fsr2l,f,c
  1564  00132A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1565  00132C  22DA               	addwfc	fsr2h,f,c
  1566  00132E  CFDE F08B          	movff	postinc2,f_write@clst
  1567  001332  CFDE F08C          	movff	postinc2,f_write@clst+1
  1568  001336  CFDE F08D          	movff	postinc2,f_write@clst+2
  1569  00133A  CFDE F08E          	movff	postinc2,f_write@clst+3
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;ff.c: 2722:      if (clst == 0)
  1573  00133E  518B               	movf	f_write@clst& (0+255),w,b
  1574  001340  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1575  001342  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1576  001344  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1577  001346  A4D8               	btfss	status,2,c
  1578  001348  D033               	goto	l6342
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1582  00134A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1583  00134E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1584  001352  CFDE F056          	movff	postinc2,create_chain@fs
  1585  001356  CFDD F057          	movff	postdec2,create_chain@fs+1
  1586  00135A  0E00               	movlw	0
  1587  00135C  6E58               	movwf	create_chain@clst,c
  1588  00135E  0E00               	movlw	0
  1589  001360  6E59               	movwf	create_chain@clst+1,c
  1590  001362  0E00               	movlw	0
  1591  001364  6E5A               	movwf	create_chain@clst+2,c
  1592  001366  0E00               	movlw	0
  1593  001368  6E5B               	movwf	create_chain@clst+3,c
  1594  00136A  ECA9  F019         	call	_create_chain	;wreg free
  1595  00136E  D018               	goto	L1
  1596  001370                     l6340:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1600  001370  C06D  FFD9         	movff	f_write@fp,fsr2l
  1601  001374  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1602  001378  CFDE F056          	movff	postinc2,create_chain@fs
  1603  00137C  CFDD F057          	movff	postdec2,create_chain@fs+1
  1604  001380  EE20 F012          	lfsr	2,18
  1605  001384  516D               	movf	f_write@fp& (0+255),w,b
  1606  001386  26D9               	addwf	fsr2l,f,c
  1607  001388  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1608  00138A  22DA               	addwfc	fsr2h,f,c
  1609  00138C  CFDE F058          	movff	postinc2,create_chain@clst
  1610  001390  CFDE F059          	movff	postinc2,create_chain@clst+1
  1611  001394  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1612  001398  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1613  00139C  ECA9  F019         	call	_create_chain	;wreg free
  1614  0013A0                     L1:
  1615  0013A0  C056  F08B         	movff	?_create_chain,f_write@clst
  1616  0013A4  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1617  0013A8  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1618  0013AC  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1619  0013B0                     l6342:
  1620                           
  1621                           ;ff.c: 2732:     if (clst == 0) break;
  1622  0013B0  0100               	movlb	0	; () banked
  1623  0013B2  518B               	movf	f_write@clst& (0+255),w,b
  1624  0013B4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1625  0013B6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1626  0013B8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1627  0013BA  B4D8               	btfsc	status,2,c
  1628  0013BC  D28D               	goto	u8690
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1632  0013BE  058B               	decf	f_write@clst& (0+255),w,b
  1633  0013C0  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1634  0013C2  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1635  0013C4  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1636  0013C6  A4D8               	btfss	status,2,c
  1637  0013C8  D009               	goto	l6352
  1638                           
  1639                           ; BSR set to: 0
  1640  0013CA  EE20 F005          	lfsr	2,5
  1641  0013CE  516D               	movf	f_write@fp& (0+255),w,b
  1642  0013D0  26D9               	addwf	fsr2l,f,c
  1643  0013D2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1644  0013D4  22DA               	addwfc	fsr2h,f,c
  1645  0013D6  0E02               	movlw	2
  1646  0013D8  6EDF               	movwf	indf2,c
  1647  0013DA  0012               	return	
  1648  0013DC                     l6352:
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1652  0013DC  298B               	incf	f_write@clst& (0+255),w,b
  1653  0013DE  E110               	bnz	l6358
  1654  0013E0  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1655  0013E2  E10E               	bnz	l6358
  1656  0013E4  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1657  0013E6  E10C               	bnz	l6358
  1658  0013E8  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1659  0013EA  A4D8               	btfss	status,2,c
  1660  0013EC  D009               	goto	l6358
  1661                           
  1662                           ; BSR set to: 0
  1663  0013EE  EE20 F005          	lfsr	2,5
  1664  0013F2  516D               	movf	f_write@fp& (0+255),w,b
  1665  0013F4  26D9               	addwf	fsr2l,f,c
  1666  0013F6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1667  0013F8  22DA               	addwfc	fsr2h,f,c
  1668  0013FA  0E01               	movlw	1
  1669  0013FC  6EDF               	movwf	indf2,c
  1670  0013FE  0012               	return	
  1671  001400                     l6358:
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;ff.c: 2735:     fp->clust = clst;
  1675  001400  EE20 F012          	lfsr	2,18
  1676  001404  516D               	movf	f_write@fp& (0+255),w,b
  1677  001406  26D9               	addwf	fsr2l,f,c
  1678  001408  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1679  00140A  22DA               	addwfc	fsr2h,f,c
  1680  00140C  C08B  FFDE         	movff	f_write@clst,postinc2
  1681  001410  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1682  001414  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1683  001418  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1684                           
  1685                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1686  00141C  EE20 F00E          	lfsr	2,14
  1687  001420  516D               	movf	f_write@fp& (0+255),w,b
  1688  001422  26D9               	addwf	fsr2l,f,c
  1689  001424  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1690  001426  22DA               	addwfc	fsr2h,f,c
  1691  001428  50DE               	movf	postinc2,w,c
  1692  00142A  10DE               	iorwf	postinc2,w,c
  1693  00142C  10DE               	iorwf	postinc2,w,c
  1694  00142E  10DE               	iorwf	postinc2,w,c
  1695  001430  A4D8               	btfss	status,2,c
  1696  001432  D00E               	goto	l6362
  1697                           
  1698                           ; BSR set to: 0
  1699  001434  EE20 F00E          	lfsr	2,14
  1700  001438  516D               	movf	f_write@fp& (0+255),w,b
  1701  00143A  26D9               	addwf	fsr2l,f,c
  1702  00143C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1703  00143E  22DA               	addwfc	fsr2h,f,c
  1704  001440  C08B  FFDE         	movff	f_write@clst,postinc2
  1705  001444  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1706  001448  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1707  00144C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1708  001450                     l6362:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1712  001450  EE20 F016          	lfsr	2,22
  1713  001454  516D               	movf	f_write@fp& (0+255),w,b
  1714  001456  26D9               	addwf	fsr2l,f,c
  1715  001458  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1716  00145A  22DA               	addwfc	fsr2h,f,c
  1717  00145C  C06D  FFE1         	movff	f_write@fp,fsr1l
  1718  001460  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1719  001464  EE00 F02A          	lfsr	0,42
  1720  001468  50E6               	movf	postinc1,w,c
  1721  00146A  26E9               	addwf	fsr0l,f,c
  1722  00146C  50E5               	movf	postdec1,w,c
  1723  00146E  22EA               	addwfc	fsr0h,f,c
  1724  001470  50DE               	movf	postinc2,w,c
  1725  001472  18EE               	xorwf	postinc0,w,c
  1726  001474  E121               	bnz	l6370
  1727  001476  50DE               	movf	postinc2,w,c
  1728  001478  18EE               	xorwf	postinc0,w,c
  1729  00147A  E11E               	bnz	l6370
  1730  00147C  50DE               	movf	postinc2,w,c
  1731  00147E  18EE               	xorwf	postinc0,w,c
  1732  001480  E11B               	bnz	l6370
  1733  001482  50DE               	movf	postinc2,w,c
  1734  001484  18EE               	xorwf	postinc0,w,c
  1735  001486  A4D8               	btfss	status,2,c
  1736  001488  D017               	goto	l6370
  1737                           
  1738                           ; BSR set to: 0
  1739  00148A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1740  00148E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1741  001492  CFDE F01B          	movff	postinc2,sync_window@fs
  1742  001496  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1743  00149A  EC9E  F01F         	call	_sync_window	;wreg free
  1744  00149E  0900               	iorlw	0
  1745  0014A0  B4D8               	btfsc	status,2,c
  1746  0014A2  D00A               	goto	l6370
  1747                           
  1748                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1749  0014A4  0100               	movlb	0	; () banked
  1750  0014A6  EE20 F005          	lfsr	2,5
  1751  0014AA  516D               	movf	f_write@fp& (0+255),w,b
  1752  0014AC  26D9               	addwf	fsr2l,f,c
  1753  0014AE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1754  0014B0  22DA               	addwfc	fsr2h,f,c
  1755  0014B2  0E01               	movlw	1
  1756  0014B4  6EDF               	movwf	indf2,c
  1757  0014B6  0012               	return	
  1758  0014B8                     l6370:
  1759                           
  1760                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1761  0014B8  C06D  FFD9         	movff	f_write@fp,fsr2l
  1762  0014BC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1763  0014C0  CFDE F00D          	movff	postinc2,clust2sect@fs
  1764  0014C4  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1765  0014C8  0100               	movlb	0	; () banked
  1766  0014CA  EE20 F012          	lfsr	2,18
  1767  0014CE  516D               	movf	f_write@fp& (0+255),w,b
  1768  0014D0  26D9               	addwf	fsr2l,f,c
  1769  0014D2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1770  0014D4  22DA               	addwfc	fsr2h,f,c
  1771  0014D6  CFDE F00F          	movff	postinc2,clust2sect@clst
  1772  0014DA  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1773  0014DE  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1774  0014E2  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1775  0014E6  ECBC  F026         	call	_clust2sect	;wreg free
  1776  0014EA  C00D  F087         	movff	?_clust2sect,f_write@sect
  1777  0014EE  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1778  0014F2  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1779  0014F6  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1780                           
  1781                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1782  0014FA  0100               	movlb	0	; () banked
  1783  0014FC  5187               	movf	f_write@sect& (0+255),w,b
  1784  0014FE  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1785  001500  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1786  001502  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1787  001504  A4D8               	btfss	status,2,c
  1788  001506  D009               	goto	l6378
  1789                           
  1790                           ; BSR set to: 0
  1791  001508  EE20 F005          	lfsr	2,5
  1792  00150C  516D               	movf	f_write@fp& (0+255),w,b
  1793  00150E  26D9               	addwf	fsr2l,f,c
  1794  001510  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1795  001512  22DA               	addwfc	fsr2h,f,c
  1796  001514  0E02               	movlw	2
  1797  001516  6EDF               	movwf	indf2,c
  1798  001518  0012               	return	
  1799  00151A                     l6378:
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;ff.c: 2750:    sect += csect;
  1803  00151A  5184               	movf	f_write@csect& (0+255),w,b
  1804  00151C  2787               	addwf	f_write@sect& (0+255),f,b
  1805  00151E  0E00               	movlw	0
  1806  001520  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1807  001522  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1808  001524  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1809                           
  1810                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1811  001526  C071  F075         	movff	f_write@btw,??_f_write
  1812  00152A  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1813  00152E  0E09               	movlw	9
  1814  001530  6F77               	movwf	(??_f_write+2)& (0+255),b
  1815  001532                     u8585:
  1816  001532  90D8               	bcf	status,0,c
  1817  001534  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1818  001536  3375               	rrcf	??_f_write& (0+255),f,b
  1819  001538  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1820  00153A  D7FB               	goto	u8585
  1821  00153C  C075  F085         	movff	??_f_write,f_write@cc
  1822  001540  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1823                           
  1824                           ;ff.c: 2752:    if (cc) {
  1825  001544  5185               	movf	f_write@cc& (0+255),w,b
  1826  001546  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1827  001548  B4D8               	btfsc	status,2,c
  1828  00154A  D0D2               	goto	l6398
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1832  00154C  5184               	movf	f_write@csect& (0+255),w,b
  1833  00154E  2585               	addwf	f_write@cc& (0+255),w,b
  1834  001550  6F75               	movwf	??_f_write& (0+255),b
  1835  001552  0E00               	movlw	0
  1836  001554  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1837  001556  6F76               	movwf	(??_f_write+1)& (0+255),b
  1838  001558  C06D  FFD9         	movff	f_write@fp,fsr2l
  1839  00155C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1840  001560  EE10 F002          	lfsr	1,2
  1841  001564  50DE               	movf	postinc2,w,c
  1842  001566  26E1               	addwf	fsr1l,f,c
  1843  001568  50DD               	movf	postdec2,w,c
  1844  00156A  22E2               	addwfc	fsr1h,f,c
  1845  00156C  50E7               	movf	indf1,w,c
  1846  00156E  6F77               	movwf	(??_f_write+2)& (0+255),b
  1847  001570  6B78               	clrf	(??_f_write+3)& (0+255),b
  1848  001572  5175               	movf	??_f_write& (0+255),w,b
  1849  001574  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1850  001576  5176               	movf	(??_f_write+1)& (0+255),w,b
  1851  001578  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1852  00157A  B0D8               	btfsc	status,0,c
  1853  00157C  D012               	goto	l6384
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  1857  00157E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1858  001582  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1859  001586  EE10 F002          	lfsr	1,2
  1860  00158A  50DE               	movf	postinc2,w,c
  1861  00158C  26E1               	addwf	fsr1l,f,c
  1862  00158E  50DD               	movf	postdec2,w,c
  1863  001590  22E2               	addwfc	fsr1h,f,c
  1864  001592  50E7               	movf	indf1,w,c
  1865  001594  6F75               	movwf	??_f_write& (0+255),b
  1866  001596  5184               	movf	f_write@csect& (0+255),w,b
  1867  001598  5D75               	subwf	??_f_write& (0+255),w,b
  1868  00159A  6F85               	movwf	f_write@cc& (0+255),b
  1869  00159C  6B86               	clrf	(f_write@cc+1)& (0+255),b
  1870  00159E  A0D8               	btfss	status,0,c
  1871  0015A0  0786               	decf	(f_write@cc+1)& (0+255),f,b
  1872  0015A2                     l6384:
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  1876  0015A2  C082  F011         	movff	f_write@wbuff,disk_write@buff
  1877  0015A6  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  1878  0015AA  C087  F013         	movff	f_write@sect,disk_write@sector
  1879  0015AE  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  1880  0015B2  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  1881  0015B6  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  1882  0015BA  C085  F017         	movff	f_write@cc,disk_write@count
  1883  0015BE  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  1884  0015C2  C06D  FFD9         	movff	f_write@fp,fsr2l
  1885  0015C6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1886  0015CA  EE10 F001          	lfsr	1,1
  1887  0015CE  50DE               	movf	postinc2,w,c
  1888  0015D0  26E1               	addwf	fsr1l,f,c
  1889  0015D2  50DD               	movf	postdec2,w,c
  1890  0015D4  22E2               	addwfc	fsr1h,f,c
  1891  0015D6  50E7               	movf	indf1,w,c
  1892  0015D8  ECCD  F022         	call	_disk_write
  1893  0015DC  0900               	iorlw	0
  1894  0015DE  B4D8               	btfsc	status,2,c
  1895  0015E0  D00A               	goto	l6390
  1896                           
  1897                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1898  0015E2  0100               	movlb	0	; () banked
  1899  0015E4  EE20 F005          	lfsr	2,5
  1900  0015E8  516D               	movf	f_write@fp& (0+255),w,b
  1901  0015EA  26D9               	addwf	fsr2l,f,c
  1902  0015EC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1903  0015EE  22DA               	addwfc	fsr2h,f,c
  1904  0015F0  0E01               	movlw	1
  1905  0015F2  6EDF               	movwf	indf2,c
  1906  0015F4  0012               	return	
  1907  0015F6                     l6390:
  1908                           
  1909                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  1910  0015F6  0100               	movlb	0	; () banked
  1911  0015F8  5185               	movf	f_write@cc& (0+255),w,b
  1912  0015FA  6F75               	movwf	??_f_write& (0+255),b
  1913  0015FC  5186               	movf	(f_write@cc+1)& (0+255),w,b
  1914  0015FE  6F76               	movwf	(??_f_write+1)& (0+255),b
  1915  001600  6B77               	clrf	(??_f_write+2)& (0+255),b
  1916  001602  6B78               	clrf	(??_f_write+3)& (0+255),b
  1917  001604  C06D  FFD9         	movff	f_write@fp,fsr2l
  1918  001608  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1919  00160C  EE10 F02A          	lfsr	1,42
  1920  001610  50DE               	movf	postinc2,w,c
  1921  001612  26E1               	addwf	fsr1l,f,c
  1922  001614  50DD               	movf	postdec2,w,c
  1923  001616  22E2               	addwfc	fsr1h,f,c
  1924  001618  CFE6 F079          	movff	postinc1,??_f_write+4
  1925  00161C  CFE6 F07A          	movff	postinc1,??_f_write+5
  1926  001620  CFE6 F07B          	movff	postinc1,??_f_write+6
  1927  001624  CFE6 F07C          	movff	postinc1,??_f_write+7
  1928  001628  5187               	movf	f_write@sect& (0+255),w,b
  1929  00162A  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  1930  00162C  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1931  00162E  5188               	movf	(f_write@sect+1)& (0+255),w,b
  1932  001630  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  1933  001632  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1934  001634  5189               	movf	(f_write@sect+2)& (0+255),w,b
  1935  001636  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  1936  001638  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1937  00163A  518A               	movf	(f_write@sect+3)& (0+255),w,b
  1938  00163C  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  1939  00163E  6F80               	movwf	(??_f_write+11)& (0+255),b
  1940  001640  5175               	movf	??_f_write& (0+255),w,b
  1941  001642  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1942  001644  5176               	movf	(??_f_write+1)& (0+255),w,b
  1943  001646  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1944  001648  5177               	movf	(??_f_write+2)& (0+255),w,b
  1945  00164A  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1946  00164C  5178               	movf	(??_f_write+3)& (0+255),w,b
  1947  00164E  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1948  001650  B0D8               	btfsc	status,0,c
  1949  001652  D03E               	goto	l6396
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  1953  001654  C06D  FFD9         	movff	f_write@fp,fsr2l
  1954  001658  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1955  00165C  CFDE F075          	movff	postinc2,??_f_write
  1956  001660  CFDD F076          	movff	postdec2,??_f_write+1
  1957  001664  0E2E               	movlw	46
  1958  001666  2575               	addwf	??_f_write& (0+255),w,b
  1959  001668  6E01               	movwf	mem_cpy@dst,c
  1960  00166A  0E00               	movlw	0
  1961  00166C  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  1962  00166E  6E02               	movwf	mem_cpy@dst+1,c
  1963  001670  C06D  FFD9         	movff	f_write@fp,fsr2l
  1964  001674  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1965  001678  EE10 F02A          	lfsr	1,42
  1966  00167C  50DE               	movf	postinc2,w,c
  1967  00167E  26E1               	addwf	fsr1l,f,c
  1968  001680  50DD               	movf	postdec2,w,c
  1969  001682  22E2               	addwfc	fsr1h,f,c
  1970  001684  CFE6 F077          	movff	postinc1,??_f_write+2
  1971  001688  CFE5 F078          	movff	postdec1,??_f_write+3
  1972  00168C  5187               	movf	f_write@sect& (0+255),w,b
  1973  00168E  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  1974  001690  5188               	movf	(f_write@sect+1)& (0+255),w,b
  1975  001692  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  1976  001694  0E09               	movlw	9
  1977  001696                     u8635:
  1978  001696  90D8               	bcf	status,0,c
  1979  001698  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  1980  00169A  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  1981  00169C  2EE8               	decfsz	wreg,f,c
  1982  00169E  D7FB               	goto	u8635
  1983  0016A0  5177               	movf	(??_f_write+2)& (0+255),w,b
  1984  0016A2  2582               	addwf	f_write@wbuff& (0+255),w,b
  1985  0016A4  6E03               	movwf	mem_cpy@src,c
  1986  0016A6  5178               	movf	(??_f_write+3)& (0+255),w,b
  1987  0016A8  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  1988  0016AA  6E04               	movwf	mem_cpy@src+1,c
  1989  0016AC  0E02               	movlw	2
  1990  0016AE  6E06               	movwf	mem_cpy@cnt+1,c
  1991  0016B0  0E00               	movlw	0
  1992  0016B2  6E05               	movwf	mem_cpy@cnt,c
  1993  0016B4  EC5F  F026         	call	_mem_cpy	;wreg free
  1994                           
  1995                           ;ff.c: 2761:      fp->fs->wflag = 0;
  1996  0016B8  C06D  FFD9         	movff	f_write@fp,fsr2l
  1997  0016BC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1998  0016C0  EE10 F004          	lfsr	1,4
  1999  0016C4  50DE               	movf	postinc2,w,c
  2000  0016C6  26E1               	addwf	fsr1l,f,c
  2001  0016C8  50DD               	movf	postdec2,w,c
  2002  0016CA  22E2               	addwfc	fsr1h,f,c
  2003  0016CC  0E00               	movlw	0
  2004  0016CE  6EE7               	movwf	indf1,c
  2005  0016D0                     l6396:
  2006                           
  2007                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2008  0016D0  C085  F075         	movff	f_write@cc,??_f_write
  2009  0016D4  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2010  0016D8  0E09               	movlw	9
  2011  0016DA                     u8645:
  2012  0016DA  90D8               	bcf	status,0,c
  2013  0016DC  0100               	movlb	0	; () banked
  2014  0016DE  3775               	rlcf	??_f_write& (0+255),f,b
  2015  0016E0  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2016  0016E2  2EE8               	decfsz	wreg,f,c
  2017  0016E4  D7FA               	goto	u8645
  2018  0016E6  C075  F08F         	movff	??_f_write,f_write@wcnt
  2019  0016EA  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2020                           
  2021                           ;ff.c: 2771:     continue;
  2022  0016EE  D0D2               	goto	l6426
  2023  0016F0                     l6398:
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2027  0016F0  EE20 F00A          	lfsr	2,10
  2028  0016F4  516D               	movf	f_write@fp& (0+255),w,b
  2029  0016F6  26D9               	addwf	fsr2l,f,c
  2030  0016F8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2031  0016FA  22DA               	addwfc	fsr2h,f,c
  2032  0016FC  EE10 F006          	lfsr	1,6
  2033  001700  516D               	movf	f_write@fp& (0+255),w,b
  2034  001702  26E1               	addwf	fsr1l,f,c
  2035  001704  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2036  001706  22E2               	addwfc	fsr1h,f,c
  2037  001708  50DE               	movf	postinc2,w,c
  2038  00170A  5CE6               	subwf	postinc1,w,c
  2039  00170C  50DE               	movf	postinc2,w,c
  2040  00170E  58E6               	subwfb	postinc1,w,c
  2041  001710  50DE               	movf	postinc2,w,c
  2042  001712  58E6               	subwfb	postinc1,w,c
  2043  001714  50DE               	movf	postinc2,w,c
  2044  001716  58E6               	subwfb	postinc1,w,c
  2045  001718  A0D8               	btfss	status,0,c
  2046  00171A  D029               	goto	l6408
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2050  00171C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2051  001720  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2052  001724  CFDE F01B          	movff	postinc2,sync_window@fs
  2053  001728  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2054  00172C  EC9E  F01F         	call	_sync_window	;wreg free
  2055  001730  0900               	iorlw	0
  2056  001732  B4D8               	btfsc	status,2,c
  2057  001734  D00A               	goto	l6406
  2058  001736  0100               	movlb	0	; () banked
  2059  001738  EE20 F005          	lfsr	2,5
  2060  00173C  516D               	movf	f_write@fp& (0+255),w,b
  2061  00173E  26D9               	addwf	fsr2l,f,c
  2062  001740  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2063  001742  22DA               	addwfc	fsr2h,f,c
  2064  001744  0E01               	movlw	1
  2065  001746  6EDF               	movwf	indf2,c
  2066  001748  0012               	return	
  2067  00174A                     l6406:
  2068                           
  2069                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2070  00174A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2071  00174E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2072  001752  EE10 F02A          	lfsr	1,42
  2073  001756  50DE               	movf	postinc2,w,c
  2074  001758  26E1               	addwf	fsr1l,f,c
  2075  00175A  50DD               	movf	postdec2,w,c
  2076  00175C  22E2               	addwfc	fsr1h,f,c
  2077  00175E  C087  FFE6         	movff	f_write@sect,postinc1
  2078  001762  C088  FFE6         	movff	f_write@sect+1,postinc1
  2079  001766  C089  FFE6         	movff	f_write@sect+2,postinc1
  2080  00176A  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2081  00176E                     l6408:
  2082                           
  2083                           ;ff.c: 2785:    fp->dsect = sect;
  2084  00176E  0100               	movlb	0	; () banked
  2085  001770  EE20 F016          	lfsr	2,22
  2086  001774  516D               	movf	f_write@fp& (0+255),w,b
  2087  001776  26D9               	addwf	fsr2l,f,c
  2088  001778  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2089  00177A  22DA               	addwfc	fsr2h,f,c
  2090  00177C  C087  FFDE         	movff	f_write@sect,postinc2
  2091  001780  C088  FFDE         	movff	f_write@sect+1,postinc2
  2092  001784  C089  FFDE         	movff	f_write@sect+2,postinc2
  2093  001788  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2094  00178C                     l6410:
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2098  00178C  0EFF               	movlw	255
  2099  00178E  6F75               	movwf	??_f_write& (0+255),b
  2100  001790  0E01               	movlw	1
  2101  001792  6F76               	movwf	(??_f_write+1)& (0+255),b
  2102  001794  EE20 F006          	lfsr	2,6
  2103  001798  516D               	movf	f_write@fp& (0+255),w,b
  2104  00179A  26D9               	addwf	fsr2l,f,c
  2105  00179C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2106  00179E  22DA               	addwfc	fsr2h,f,c
  2107  0017A0  CFDE F077          	movff	postinc2,??_f_write+2
  2108  0017A4  CFDD F078          	movff	postdec2,??_f_write+3
  2109  0017A8  5175               	movf	??_f_write& (0+255),w,b
  2110  0017AA  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2111  0017AC  5176               	movf	(??_f_write+1)& (0+255),w,b
  2112  0017AE  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2113  0017B0  5177               	movf	(??_f_write+2)& (0+255),w,b
  2114  0017B2  0800               	sublw	0
  2115  0017B4  6F8F               	movwf	f_write@wcnt& (0+255),b
  2116  0017B6  5178               	movf	(??_f_write+3)& (0+255),w,b
  2117  0017B8  A0D8               	btfss	status,0,c
  2118  0017BA  2AE8               	incf	wreg,f,c
  2119  0017BC  0802               	sublw	2
  2120  0017BE  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2124  0017C0  518F               	movf	f_write@wcnt& (0+255),w,b
  2125  0017C2  5D71               	subwf	f_write@btw& (0+255),w,b
  2126  0017C4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2127  0017C6  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2128  0017C8  B0D8               	btfsc	status,0,c
  2129  0017CA  D004               	goto	l6416
  2130                           
  2131                           ; BSR set to: 0
  2132  0017CC  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2133  0017D0  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2134  0017D4                     l6416:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2138  0017D4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2139  0017D8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2140  0017DC  CFDE F030          	movff	postinc2,move_window@fs
  2141  0017E0  CFDD F031          	movff	postdec2,move_window@fs+1
  2142  0017E4  EE20 F016          	lfsr	2,22
  2143  0017E8  516D               	movf	f_write@fp& (0+255),w,b
  2144  0017EA  26D9               	addwf	fsr2l,f,c
  2145  0017EC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2146  0017EE  22DA               	addwfc	fsr2h,f,c
  2147  0017F0  CFDE F032          	movff	postinc2,move_window@sector
  2148  0017F4  CFDE F033          	movff	postinc2,move_window@sector+1
  2149  0017F8  CFDE F034          	movff	postinc2,move_window@sector+2
  2150  0017FC  CFDE F035          	movff	postinc2,move_window@sector+3
  2151  001800  EC71  F027         	call	_move_window	;wreg free
  2152  001804  0900               	iorlw	0
  2153  001806  B4D8               	btfsc	status,2,c
  2154  001808  D00A               	goto	l6422
  2155                           
  2156                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2157  00180A  0100               	movlb	0	; () banked
  2158  00180C  EE20 F005          	lfsr	2,5
  2159  001810  516D               	movf	f_write@fp& (0+255),w,b
  2160  001812  26D9               	addwf	fsr2l,f,c
  2161  001814  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2162  001816  22DA               	addwfc	fsr2h,f,c
  2163  001818  0E01               	movlw	1
  2164  00181A  6EDF               	movwf	indf2,c
  2165  00181C  0012               	return	
  2166  00181E                     l6422:
  2167                           
  2168                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2169  00181E  0EFF               	movlw	255
  2170  001820  0100               	movlb	0	; () banked
  2171  001822  6F75               	movwf	??_f_write& (0+255),b
  2172  001824  0E01               	movlw	1
  2173  001826  6F76               	movwf	(??_f_write+1)& (0+255),b
  2174  001828  EE20 F006          	lfsr	2,6
  2175  00182C  516D               	movf	f_write@fp& (0+255),w,b
  2176  00182E  26D9               	addwf	fsr2l,f,c
  2177  001830  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2178  001832  22DA               	addwfc	fsr2h,f,c
  2179  001834  CFDE F077          	movff	postinc2,??_f_write+2
  2180  001838  CFDD F078          	movff	postdec2,??_f_write+3
  2181  00183C  5175               	movf	??_f_write& (0+255),w,b
  2182  00183E  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2183  001840  5176               	movf	(??_f_write+1)& (0+255),w,b
  2184  001842  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2185  001844  C06D  FFD9         	movff	f_write@fp,fsr2l
  2186  001848  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2187  00184C  CFDE F079          	movff	postinc2,??_f_write+4
  2188  001850  CFDD F07A          	movff	postdec2,??_f_write+5
  2189  001854  5177               	movf	(??_f_write+2)& (0+255),w,b
  2190  001856  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2191  001858  5178               	movf	(??_f_write+3)& (0+255),w,b
  2192  00185A  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2193  00185C  0E2E               	movlw	46
  2194  00185E  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2195  001860  6E01               	movwf	mem_cpy@dst,c
  2196  001862  0E00               	movlw	0
  2197  001864  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2198  001866  6E02               	movwf	mem_cpy@dst+1,c
  2199  001868  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2200  00186C  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2201  001870  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2202  001874  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2203  001878  EC5F  F026         	call	_mem_cpy	;wreg free
  2204                           
  2205                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2206  00187C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2207  001880  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2208  001884  EE10 F004          	lfsr	1,4
  2209  001888  50DE               	movf	postinc2,w,c
  2210  00188A  26E1               	addwf	fsr1l,f,c
  2211  00188C  50DD               	movf	postdec2,w,c
  2212  00188E  22E2               	addwfc	fsr1h,f,c
  2213  001890  0E01               	movlw	1
  2214  001892  6EE7               	movwf	indf1,c
  2215  001894                     l6426:
  2216  001894  0100               	movlb	0	; () banked
  2217  001896  518F               	movf	f_write@wcnt& (0+255),w,b
  2218  001898  2782               	addwf	f_write@wbuff& (0+255),f,b
  2219  00189A  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2220  00189C  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2221                           
  2222                           ; BSR set to: 0
  2223  00189E  EE20 F006          	lfsr	2,6
  2224  0018A2  516D               	movf	f_write@fp& (0+255),w,b
  2225  0018A4  26D9               	addwf	fsr2l,f,c
  2226  0018A6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2227  0018A8  22DA               	addwfc	fsr2h,f,c
  2228  0018AA  518F               	movf	f_write@wcnt& (0+255),w,b
  2229  0018AC  26DE               	addwf	postinc2,f,c
  2230  0018AE  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2231  0018B0  22DE               	addwfc	postinc2,f,c
  2232  0018B2  0E00               	movlw	0
  2233  0018B4  22DE               	addwfc	postinc2,f,c
  2234  0018B6  22DE               	addwfc	postinc2,f,c
  2235                           
  2236                           ; BSR set to: 0
  2237  0018B8  C073  FFD9         	movff	f_write@bw,fsr2l
  2238  0018BC  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2239  0018C0  518F               	movf	f_write@wcnt& (0+255),w,b
  2240  0018C2  26DE               	addwf	postinc2,f,c
  2241  0018C4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2242  0018C6  22DD               	addwfc	postdec2,f,c
  2243                           
  2244                           ; BSR set to: 0
  2245  0018C8  518F               	movf	f_write@wcnt& (0+255),w,b
  2246  0018CA  5F71               	subwf	f_write@btw& (0+255),f,b
  2247  0018CC  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2248  0018CE  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2249  0018D0                     l6434:
  2250                           
  2251                           ; BSR set to: 0
  2252  0018D0  5171               	movf	f_write@btw& (0+255),w,b
  2253  0018D2  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2254  0018D4  A4D8               	btfss	status,2,c
  2255  0018D6  D4D8               	goto	l6326
  2256  0018D8                     u8690:
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2260  0018D8  EE20 F006          	lfsr	2,6
  2261  0018DC  516D               	movf	f_write@fp& (0+255),w,b
  2262  0018DE  26D9               	addwf	fsr2l,f,c
  2263  0018E0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2264  0018E2  22DA               	addwfc	fsr2h,f,c
  2265  0018E4  EE10 F00A          	lfsr	1,10
  2266  0018E8  516D               	movf	f_write@fp& (0+255),w,b
  2267  0018EA  26E1               	addwf	fsr1l,f,c
  2268  0018EC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2269  0018EE  22E2               	addwfc	fsr1h,f,c
  2270  0018F0  50DE               	movf	postinc2,w,c
  2271  0018F2  5CE6               	subwf	postinc1,w,c
  2272  0018F4  50DE               	movf	postinc2,w,c
  2273  0018F6  58E6               	subwfb	postinc1,w,c
  2274  0018F8  50DE               	movf	postinc2,w,c
  2275  0018FA  58E6               	subwfb	postinc1,w,c
  2276  0018FC  50DE               	movf	postinc2,w,c
  2277  0018FE  58E6               	subwfb	postinc1,w,c
  2278  001900  B0D8               	btfsc	status,0,c
  2279  001902  D014               	goto	l6440
  2280                           
  2281                           ; BSR set to: 0
  2282  001904  EE20 F006          	lfsr	2,6
  2283  001908  516D               	movf	f_write@fp& (0+255),w,b
  2284  00190A  26D9               	addwf	fsr2l,f,c
  2285  00190C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2286  00190E  22DA               	addwfc	fsr2h,f,c
  2287  001910  EE10 F00A          	lfsr	1,10
  2288  001914  516D               	movf	f_write@fp& (0+255),w,b
  2289  001916  26E1               	addwf	fsr1l,f,c
  2290  001918  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2291  00191A  22E2               	addwfc	fsr1h,f,c
  2292  00191C  CFDE FFE6          	movff	postinc2,postinc1
  2293  001920  CFDE FFE6          	movff	postinc2,postinc1
  2294  001924  CFDE FFE6          	movff	postinc2,postinc1
  2295  001928  CFDE FFE6          	movff	postinc2,postinc1
  2296  00192C                     l6440:
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;ff.c: 2801:  fp->flag |= 0x20;
  2300  00192C  EE20 F004          	lfsr	2,4
  2301  001930  516D               	movf	f_write@fp& (0+255),w,b
  2302  001932  26D9               	addwf	fsr2l,f,c
  2303  001934  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2304  001936  22DA               	addwfc	fsr2h,f,c
  2305  001938  0E00               	movlw	0
  2306  00193A  8ADB               	bsf	plusw2,5,c
  2307                           
  2308                           ; BSR set to: 0
  2309  00193C  0012               	return		;funcret
  2310  00193E                     __end_of_f_write:
  2311                           	opt callstack 0
  2312                           
  2313 ;; *************** function _f_open *****************
  2314 ;; Defined at:
  2315 ;;		line 2449 in file "ff.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  fp              2   58[BANK0 ] PTR struct .
  2318 ;;		 -> Fil(32), 
  2319 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2320 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  2321 ;;  mode            1   62[BANK0 ] unsigned char 
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;  dj             22   90[BANK0 ] struct .
  2324 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2325 ;;  dw              4   83[BANK0 ] unsigned long 
  2326 ;;  cl              4   79[BANK0 ] unsigned long 
  2327 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2328 ;;		 -> NULL(0), FatFs(558), 
  2329 ;;  res             1   87[BANK0 ] enum E93
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      enum E4918
  2332 ;; Registers used:
  2333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2339 ;;      Params:         0       5       0       0       0       0       0       0       0
  2340 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2341 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2342 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2343 ;;Total ram usage:       54 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:   13
  2346 ;; This function calls:
  2347 ;;		_dir_register
  2348 ;;		_find_volume
  2349 ;;		_follow_path
  2350 ;;		_ld_clust
  2351 ;;		_move_window
  2352 ;;		_remove_chain
  2353 ;;		_st_clust
  2354 ;; This function is called by:
  2355 ;;		_main
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text2
  2360  002FBC                     __ptext2:
  2361                           	opt callstack 0
  2362  002FBC                     _f_open:
  2363                           	opt callstack 17
  2364                           
  2365                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;incstack = 0
  2369  002FBC  0100               	movlb	0	; () banked
  2370  002FBE  519A               	movf	f_open@fp& (0+255),w,b
  2371  002FC0  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2372  002FC2  A4D8               	btfss	status,2,c
  2373  002FC4  D002               	goto	l6072
  2374                           
  2375                           ; BSR set to: 0
  2376  002FC6  0E09               	movlw	9
  2377  002FC8  0012               	return	
  2378  002FCA                     l6072:
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;ff.c: 2465:  fp->fs = 0;
  2382  002FCA  C09A  FFD9         	movff	f_open@fp,fsr2l
  2383  002FCE  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2384  002FD2  0E00               	movlw	0
  2385  002FD4  6EDE               	movwf	postinc2,c
  2386  002FD6  0E00               	movlw	0
  2387  002FD8  6EDD               	movwf	postdec2,c
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2391  002FDA  C0D4  F0BA         	movff	ff@FatFs,f_open@dj
  2392  002FDE  C0D5  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2396  002FE2  0E1F               	movlw	31
  2397  002FE4  179E               	andwf	f_open@mode& (0+255),f,b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2401  002FE6  0EBA               	movlw	low f_open@dj
  2402  002FE8  6E45               	movwf	find_volume@rfs,c
  2403  002FEA  0E00               	movlw	high f_open@dj
  2404  002FEC  6E46               	movwf	find_volume@rfs+1,c
  2405  002FEE  0E9C               	movlw	low f_open@path
  2406  002FF0  6E47               	movwf	find_volume@path,c
  2407  002FF2  0E00               	movlw	high f_open@path
  2408  002FF4  6E48               	movwf	find_volume@path+1,c
  2409  002FF6  519E               	movf	f_open@mode& (0+255),w,b
  2410  002FF8  0BFE               	andlw	254
  2411  002FFA  6E49               	movwf	find_volume@wmode,c
  2412  002FFC  EC16  F004         	call	_find_volume	;wreg free
  2413  003000  0100               	movlb	0	; () banked
  2414  003002  6FB7               	movwf	f_open@res& (0+255),b
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;ff.c: 2479:  if (res == FR_OK) {
  2418  003004  51B7               	movf	f_open@res& (0+255),w,b
  2419  003006  A4D8               	btfss	status,2,c
  2420  003008  D1A2               	goto	l6176
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;ff.c: 2480:   (dj).fn = sfn;
  2424  00300A  0EA3               	movlw	low f_open@sfn
  2425  00300C  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2426  00300E  0E00               	movlw	high f_open@sfn
  2427  003010  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2431  003012  0EBA               	movlw	low f_open@dj
  2432  003014  6F86               	movwf	follow_path@dp& (0+255),b
  2433  003016  0E00               	movlw	high f_open@dj
  2434  003018  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2435  00301A  C09C  F088         	movff	f_open@path,follow_path@path
  2436  00301E  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2437  003022  ECEF  F020         	call	_follow_path	;wreg free
  2438  003026  0100               	movlb	0	; () banked
  2439  003028  6FB7               	movwf	f_open@res& (0+255),b
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;ff.c: 2482:   dir = dj.dir;
  2443  00302A  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2444  00302E  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;ff.c: 2484:   if (res == FR_OK) {
  2448  003032  51B7               	movf	f_open@res& (0+255),w,b
  2449  003034  A4D8               	btfss	status,2,c
  2450  003036  D006               	goto	l6094
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;ff.c: 2485:    if (!dir)
  2454  003038  51B8               	movf	f_open@dir& (0+255),w,b
  2455  00303A  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2456  00303C  A4D8               	btfss	status,2,c
  2457  00303E  D002               	goto	l6094
  2458                           
  2459                           ; BSR set to: 0
  2460                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2461  003040  0E06               	movlw	6
  2462  003042  6FB7               	movwf	f_open@res& (0+255),b
  2463  003044                     l6094:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2467  003044  C09E  F09F         	movff	f_open@mode,??_f_open
  2468  003048  0E1C               	movlw	28
  2469  00304A  179F               	andwf	??_f_open& (0+255),f,b
  2470  00304C  B4D8               	btfsc	status,2,c
  2471  00304E  D0D3               	goto	l6142
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;ff.c: 2494:    if (res != FR_OK) {
  2475  003050  51B7               	movf	f_open@res& (0+255),w,b
  2476  003052  B4D8               	btfsc	status,2,c
  2477  003054  D012               	goto	l6106
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2481  003056  0E04               	movlw	4
  2482  003058  19B7               	xorwf	f_open@res& (0+255),w,b
  2483  00305A  A4D8               	btfss	status,2,c
  2484  00305C  D008               	goto	l6102
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;ff.c: 2499:      res = dir_register(&dj);
  2488  00305E  0EBA               	movlw	low f_open@dj
  2489  003060  6F8A               	movwf	dir_register@dp& (0+255),b
  2490  003062  0E00               	movlw	high f_open@dj
  2491  003064  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2492  003066  EC28  F025         	call	_dir_register	;wreg free
  2493  00306A  0100               	movlb	0	; () banked
  2494  00306C  6FB7               	movwf	f_open@res& (0+255),b
  2495  00306E                     l6102:
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;ff.c: 2501:     mode |= 0x08;
  2499  00306E  879E               	bsf	f_open@mode& (0+255),3,b
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;ff.c: 2502:     dir = dj.dir;
  2503  003070  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2504  003074  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2505                           
  2506                           ;ff.c: 2503:    }
  2507  003078  D012               	goto	l684
  2508  00307A                     l6106:
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2512  00307A  EE20 F00B          	lfsr	2,11
  2513  00307E  51B8               	movf	f_open@dir& (0+255),w,b
  2514  003080  26D9               	addwf	fsr2l,f,c
  2515  003082  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2516  003084  22DA               	addwfc	fsr2h,f,c
  2517  003086  50DF               	movf	indf2,w,c
  2518  003088  6F9F               	movwf	??_f_open& (0+255),b
  2519  00308A  0E11               	movlw	17
  2520  00308C  179F               	andwf	??_f_open& (0+255),f,b
  2521  00308E  B4D8               	btfsc	status,2,c
  2522  003090  D002               	goto	l685
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;ff.c: 2506:      res = FR_DENIED;
  2526  003092  0E07               	movlw	7
  2527  003094  D003               	goto	L2
  2528  003096                     l685:
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;ff.c: 2508:      if (mode & 0x04)
  2532  003096  A59E               	btfss	f_open@mode& (0+255),2,b
  2533  003098  D002               	goto	l684
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;ff.c: 2509:       res = FR_EXIST;
  2537  00309A  0E08               	movlw	8
  2538  00309C                     L2:
  2539  00309C  6FB7               	movwf	f_open@res& (0+255),b
  2540  00309E                     l684:
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2544  00309E  51B7               	movf	f_open@res& (0+255),w,b
  2545  0030A0  B4D8               	btfsc	status,2,c
  2546                           
  2547                           ; BSR set to: 0
  2548  0030A2  A79E               	btfss	f_open@mode& (0+255),3,b
  2549  0030A4  D0C1               	goto	l691
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2553                           
  2554                           ; BSR set to: 0
  2555  0030A6  EE20 F00E          	lfsr	2,14
  2556  0030AA  51B8               	movf	f_open@dir& (0+255),w,b
  2557  0030AC  26D9               	addwf	fsr2l,f,c
  2558  0030AE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2559  0030B0  22DA               	addwfc	fsr2h,f,c
  2560  0030B2  0E00               	movlw	0
  2561  0030B4  6EDE               	movwf	postinc2,c
  2562  0030B6  0E00               	movlw	0
  2563  0030B8  6EDE               	movwf	postinc2,c
  2564  0030BA  0E21               	movlw	33
  2565  0030BC  6EDE               	movwf	postinc2,c
  2566  0030BE  0E46               	movlw	70
  2567  0030C0  6EDD               	movwf	postdec2,c
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2571  0030C2  EE20 F016          	lfsr	2,22
  2572  0030C6  51B8               	movf	f_open@dir& (0+255),w,b
  2573  0030C8  26D9               	addwf	fsr2l,f,c
  2574  0030CA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2575  0030CC  22DA               	addwfc	fsr2h,f,c
  2576  0030CE  0E00               	movlw	0
  2577  0030D0  6EDE               	movwf	postinc2,c
  2578  0030D2  0E00               	movlw	0
  2579  0030D4  6EDE               	movwf	postinc2,c
  2580  0030D6  0E21               	movlw	33
  2581  0030D8  6EDE               	movwf	postinc2,c
  2582  0030DA  0E46               	movlw	70
  2583  0030DC  6EDD               	movwf	postdec2,c
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;ff.c: 2516:     dir[11] = 0;
  2587  0030DE  EE20 F00B          	lfsr	2,11
  2588  0030E2  51B8               	movf	f_open@dir& (0+255),w,b
  2589  0030E4  26D9               	addwf	fsr2l,f,c
  2590  0030E6  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2591  0030E8  22DA               	addwfc	fsr2h,f,c
  2592  0030EA  0E00               	movlw	0
  2593  0030EC  6EDF               	movwf	indf2,c
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2597  0030EE  EE20 F01C          	lfsr	2,28
  2598  0030F2  51B8               	movf	f_open@dir& (0+255),w,b
  2599  0030F4  26D9               	addwf	fsr2l,f,c
  2600  0030F6  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2601  0030F8  22DA               	addwfc	fsr2h,f,c
  2602  0030FA  6ADE               	clrf	postinc2,c
  2603  0030FC  6ADE               	clrf	postinc2,c
  2604  0030FE  6ADE               	clrf	postinc2,c
  2605  003100  6ADD               	clrf	postdec2,c
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2609  003102  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2610  003106  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2611  00310A  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2612  00310E  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2613  003112  EC90  F028         	call	_ld_clust	;wreg free
  2614  003116  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2615  00311A  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2616  00311E  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2617  003122  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2618                           
  2619                           ;ff.c: 2519:     st_clust(dir, 0);
  2620  003126  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2621  00312A  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2622  00312E  0E00               	movlw	0
  2623  003130  6E03               	movwf	st_clust@cl,c
  2624  003132  0E00               	movlw	0
  2625  003134  6E04               	movwf	st_clust@cl+1,c
  2626  003136  0E00               	movlw	0
  2627  003138  6E05               	movwf	st_clust@cl+2,c
  2628  00313A  0E00               	movlw	0
  2629  00313C  6E06               	movwf	st_clust@cl+3,c
  2630  00313E  EC8D  F02A         	call	_st_clust	;wreg free
  2631                           
  2632                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2633  003142  0100               	movlb	0	; () banked
  2634  003144  EE20 F004          	lfsr	2,4
  2635  003148  51BA               	movf	f_open@dj& (0+255),w,b
  2636  00314A  26D9               	addwf	fsr2l,f,c
  2637  00314C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2638  00314E  22DA               	addwfc	fsr2h,f,c
  2639  003150  0E01               	movlw	1
  2640  003152  6EDF               	movwf	indf2,c
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;ff.c: 2521:     if (cl) {
  2644  003154  51AF               	movf	f_open@cl& (0+255),w,b
  2645  003156  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2646  003158  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2647  00315A  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2648  00315C  B4D8               	btfsc	status,2,c
  2649  00315E  D064               	goto	l691
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2653  003160  EE20 F02A          	lfsr	2,42
  2654  003164  51BA               	movf	f_open@dj& (0+255),w,b
  2655  003166  26D9               	addwf	fsr2l,f,c
  2656  003168  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2657  00316A  22DA               	addwfc	fsr2h,f,c
  2658  00316C  CFDE F0B3          	movff	postinc2,f_open@dw
  2659  003170  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2660  003174  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2661  003178  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2665  00317C  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2666  003180  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2667  003184  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2668  003188  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2669  00318C  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2670  003190  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2671  003194  EC4A  F020         	call	_remove_chain	;wreg free
  2672  003198  0100               	movlb	0	; () banked
  2673  00319A  6FB7               	movwf	f_open@res& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;ff.c: 2524:      if (res == FR_OK) {
  2677  00319C  51B7               	movf	f_open@res& (0+255),w,b
  2678  00319E  A4D8               	btfss	status,2,c
  2679  0031A0  D043               	goto	l691
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2683  0031A2  0EFF               	movlw	255
  2684  0031A4  25AF               	addwf	f_open@cl& (0+255),w,b
  2685  0031A6  6F9F               	movwf	??_f_open& (0+255),b
  2686  0031A8  0EFF               	movlw	255
  2687  0031AA  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2688  0031AC  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2689  0031AE  0EFF               	movlw	255
  2690  0031B0  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2691  0031B2  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2692  0031B4  0EFF               	movlw	255
  2693  0031B6  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2694  0031B8  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2695  0031BA  EE20 F00A          	lfsr	2,10
  2696  0031BE  51BA               	movf	f_open@dj& (0+255),w,b
  2697  0031C0  26D9               	addwf	fsr2l,f,c
  2698  0031C2  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2699  0031C4  22DA               	addwfc	fsr2h,f,c
  2700  0031C6  C09F  FFDE         	movff	??_f_open,postinc2
  2701  0031CA  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2702  0031CE  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2703  0031D2  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2707  0031D6  C0BA  F030         	movff	f_open@dj,move_window@fs
  2708  0031DA  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2709  0031DE  C0B3  F032         	movff	f_open@dw,move_window@sector
  2710  0031E2  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2711  0031E6  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2712  0031EA  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2713  0031EE  EC71  F027         	call	_move_window	;wreg free
  2714  0031F2  0100               	movlb	0	; () banked
  2715  0031F4  D018               	goto	L3
  2716  0031F6                     l6142:
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;ff.c: 2532:    if (res == FR_OK) {
  2720  0031F6  51B7               	movf	f_open@res& (0+255),w,b
  2721  0031F8  A4D8               	btfss	status,2,c
  2722  0031FA  D016               	goto	l691
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2726  0031FC  EE20 F00B          	lfsr	2,11
  2727  003200  51B8               	movf	f_open@dir& (0+255),w,b
  2728  003202  26D9               	addwf	fsr2l,f,c
  2729  003204  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2730  003206  22DA               	addwfc	fsr2h,f,c
  2731  003208  A8DF               	btfss	indf2,4,c
  2732  00320A  D002               	goto	l693
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;ff.c: 2534:      res = FR_NO_FILE;
  2736  00320C  0E04               	movlw	4
  2737  00320E  D00B               	goto	L3
  2738  003210                     l693:
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2742  003210  A39E               	btfss	f_open@mode& (0+255),1,b
  2743  003212  D00A               	goto	l691
  2744                           
  2745                           ; BSR set to: 0
  2746  003214  EE20 F00B          	lfsr	2,11
  2747  003218  51B8               	movf	f_open@dir& (0+255),w,b
  2748  00321A  26D9               	addwf	fsr2l,f,c
  2749  00321C  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2750  00321E  22DA               	addwfc	fsr2h,f,c
  2751  003220  A0DF               	btfss	indf2,0,c
  2752  003222  D002               	goto	l691
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;ff.c: 2537:       res = FR_DENIED;
  2756  003224  0E07               	movlw	7
  2757  003226                     L3:
  2758  003226  6FB7               	movwf	f_open@res& (0+255),b
  2759  003228                     l691:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;ff.c: 2541:   if (res == FR_OK) {
  2763  003228  51B7               	movf	f_open@res& (0+255),w,b
  2764  00322A  A4D8               	btfss	status,2,c
  2765  00322C  D020               	goto	l6160
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;ff.c: 2542:    if (mode & 0x08)
  2769  00322E  B79E               	btfsc	f_open@mode& (0+255),3,b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;ff.c: 2543:     mode |= 0x20;
  2773  003230  8B9E               	bsf	f_open@mode& (0+255),5,b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2777  003232  EE20 F02A          	lfsr	2,42
  2778  003236  51BA               	movf	f_open@dj& (0+255),w,b
  2779  003238  26D9               	addwf	fsr2l,f,c
  2780  00323A  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2781  00323C  22DA               	addwfc	fsr2h,f,c
  2782  00323E  EE10 F01A          	lfsr	1,26
  2783  003242  519A               	movf	f_open@fp& (0+255),w,b
  2784  003244  26E1               	addwf	fsr1l,f,c
  2785  003246  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2786  003248  22E2               	addwfc	fsr1h,f,c
  2787  00324A  CFDE FFE6          	movff	postinc2,postinc1
  2788  00324E  CFDE FFE6          	movff	postinc2,postinc1
  2789  003252  CFDE FFE6          	movff	postinc2,postinc1
  2790  003256  CFDE FFE6          	movff	postinc2,postinc1
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2794  00325A  EE20 F01E          	lfsr	2,30
  2795  00325E  519A               	movf	f_open@fp& (0+255),w,b
  2796  003260  26D9               	addwf	fsr2l,f,c
  2797  003262  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2798  003264  22DA               	addwfc	fsr2h,f,c
  2799  003266  C0B8  FFDE         	movff	f_open@dir,postinc2
  2800  00326A  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2801  00326E                     l6160:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;ff.c: 2565:   if (res == FR_OK) {
  2805  00326E  51B7               	movf	f_open@res& (0+255),w,b
  2806  003270  A4D8               	btfss	status,2,c
  2807  003272  D06D               	goto	l6176
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;ff.c: 2566:    fp->flag = mode;
  2811  003274  EE20 F004          	lfsr	2,4
  2812  003278  519A               	movf	f_open@fp& (0+255),w,b
  2813  00327A  26D9               	addwf	fsr2l,f,c
  2814  00327C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2815  00327E  22DA               	addwfc	fsr2h,f,c
  2816  003280  C09E  FFDF         	movff	f_open@mode,indf2
  2817                           
  2818                           ;ff.c: 2567:    fp->err = 0;
  2819  003284  EE20 F005          	lfsr	2,5
  2820  003288  519A               	movf	f_open@fp& (0+255),w,b
  2821  00328A  26D9               	addwf	fsr2l,f,c
  2822  00328C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2823  00328E  22DA               	addwfc	fsr2h,f,c
  2824  003290  0E00               	movlw	0
  2825  003292  6EDF               	movwf	indf2,c
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2829  003294  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2830  003298  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2831  00329C  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2832  0032A0  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2833  0032A4  EC90  F028         	call	_ld_clust	;wreg free
  2834  0032A8  0100               	movlb	0	; () banked
  2835  0032AA  EE20 F00E          	lfsr	2,14
  2836  0032AE  519A               	movf	f_open@fp& (0+255),w,b
  2837  0032B0  26D9               	addwf	fsr2l,f,c
  2838  0032B2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2839  0032B4  22DA               	addwfc	fsr2h,f,c
  2840  0032B6  C001  FFDE         	movff	?_ld_clust,postinc2
  2841  0032BA  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2842  0032BE  C003  FFDE         	movff	?_ld_clust+2,postinc2
  2843  0032C2  C004  FFDE         	movff	?_ld_clust+3,postinc2
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  2847  0032C6  EE20 F01C          	lfsr	2,28
  2848  0032CA  51B8               	movf	f_open@dir& (0+255),w,b
  2849  0032CC  26D9               	addwf	fsr2l,f,c
  2850  0032CE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2851  0032D0  22DA               	addwfc	fsr2h,f,c
  2852  0032D2  EE10 F00A          	lfsr	1,10
  2853  0032D6  519A               	movf	f_open@fp& (0+255),w,b
  2854  0032D8  26E1               	addwf	fsr1l,f,c
  2855  0032DA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2856  0032DC  22E2               	addwfc	fsr1h,f,c
  2857  0032DE  CFDE FFE6          	movff	postinc2,postinc1
  2858  0032E2  CFDE FFE6          	movff	postinc2,postinc1
  2859  0032E6  CFDE FFE6          	movff	postinc2,postinc1
  2860  0032EA  CFDE FFE6          	movff	postinc2,postinc1
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;ff.c: 2570:    fp->fptr = 0;
  2864  0032EE  EE20 F006          	lfsr	2,6
  2865  0032F2  519A               	movf	f_open@fp& (0+255),w,b
  2866  0032F4  26D9               	addwf	fsr2l,f,c
  2867  0032F6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2868  0032F8  22DA               	addwfc	fsr2h,f,c
  2869  0032FA  6ADE               	clrf	postinc2,c
  2870  0032FC  6ADE               	clrf	postinc2,c
  2871  0032FE  6ADE               	clrf	postinc2,c
  2872  003300  6ADD               	clrf	postdec2,c
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;ff.c: 2571:    fp->dsect = 0;
  2876  003302  EE20 F016          	lfsr	2,22
  2877  003306  519A               	movf	f_open@fp& (0+255),w,b
  2878  003308  26D9               	addwf	fsr2l,f,c
  2879  00330A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2880  00330C  22DA               	addwfc	fsr2h,f,c
  2881  00330E  6ADE               	clrf	postinc2,c
  2882  003310  6ADE               	clrf	postinc2,c
  2883  003312  6ADE               	clrf	postinc2,c
  2884  003314  6ADD               	clrf	postdec2,c
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;ff.c: 2575:    fp->fs = dj.fs;
  2888  003316  C09A  FFD9         	movff	f_open@fp,fsr2l
  2889  00331A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2890  00331E  C0BA  FFDE         	movff	f_open@dj,postinc2
  2891  003322  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;ff.c: 2576:    fp->id = fp->fs->id;
  2895  003326  C09A  FFD9         	movff	f_open@fp,fsr2l
  2896  00332A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2897  00332E  EE10 F006          	lfsr	1,6
  2898  003332  50DE               	movf	postinc2,w,c
  2899  003334  26E1               	addwf	fsr1l,f,c
  2900  003336  50DD               	movf	postdec2,w,c
  2901  003338  22E2               	addwfc	fsr1h,f,c
  2902  00333A  EE20 F002          	lfsr	2,2
  2903  00333E  519A               	movf	f_open@fp& (0+255),w,b
  2904  003340  26D9               	addwf	fsr2l,f,c
  2905  003342  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2906  003344  22DA               	addwfc	fsr2h,f,c
  2907  003346  CFE6 FFDE          	movff	postinc1,postinc2
  2908  00334A  CFE5 FFDD          	movff	postdec1,postdec2
  2909  00334E                     l6176:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;ff.c: 2580:  return res;
  2913  00334E  51B7               	movf	f_open@res& (0+255),w,b
  2914                           
  2915                           ; BSR set to: 0
  2916  003350  0012               	return		;funcret
  2917  003352                     __end_of_f_open:
  2918                           	opt callstack 0
  2919                           
  2920 ;; *************** function _remove_chain *****************
  2921 ;; Defined at:
  2922 ;;		line 937 in file "ff.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  fs              2   85[COMRAM] PTR struct .
  2925 ;;		 -> NULL(0), FatFs(558), 
  2926 ;;  clst            4   87[COMRAM] unsigned long 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  nxt             4    1[BANK0 ] unsigned long 
  2929 ;;  res             1    0[BANK0 ] enum E93
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      enum E93
  2932 ;; Registers used:
  2933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2939 ;;      Params:         6       0       0       0       0       0       0       0       0
  2940 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2941 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2942 ;;      Totals:        10       5       0       0       0       0       0       0       0
  2943 ;;Total ram usage:       15 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    9
  2946 ;; This function calls:
  2947 ;;		_get_fat
  2948 ;;		_put_fat
  2949 ;; This function is called by:
  2950 ;;		_f_open
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text3
  2955  004094                     __ptext3:
  2956                           	opt callstack 0
  2957  004094                     _remove_chain:
  2958                           	opt callstack 20
  2959                           
  2960                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;incstack = 0
  2964  004094  505B               	movf	remove_chain@clst+3,w,c
  2965  004096  105A               	iorwf	remove_chain@clst+2,w,c
  2966  004098  1059               	iorwf	remove_chain@clst+1,w,c
  2967  00409A  E104               	bnz	u7160
  2968  00409C  0E02               	movlw	2
  2969  00409E  5C58               	subwf	remove_chain@clst,w,c
  2970  0040A0  A0D8               	btfss	status,0,c
  2971  0040A2  D010               	goto	u7170
  2972  0040A4                     u7160:
  2973  0040A4  EE20 F012          	lfsr	2,18
  2974  0040A8  5056               	movf	remove_chain@fs,w,c
  2975  0040AA  26D9               	addwf	fsr2l,f,c
  2976  0040AC  5057               	movf	remove_chain@fs+1,w,c
  2977  0040AE  22DA               	addwfc	fsr2h,f,c
  2978  0040B0  50DE               	movf	postinc2,w,c
  2979  0040B2  5C58               	subwf	remove_chain@clst,w,c
  2980  0040B4  50DE               	movf	postinc2,w,c
  2981  0040B6  5859               	subwfb	remove_chain@clst+1,w,c
  2982  0040B8  50DE               	movf	postinc2,w,c
  2983  0040BA  585A               	subwfb	remove_chain@clst+2,w,c
  2984  0040BC  50DE               	movf	postinc2,w,c
  2985  0040BE  585B               	subwfb	remove_chain@clst+3,w,c
  2986  0040C0  A0D8               	btfss	status,0,c
  2987  0040C2  D003               	goto	l5524
  2988  0040C4                     u7170:
  2989                           
  2990                           ;ff.c: 949:   res = FR_INT_ERR;
  2991  0040C4  0E02               	movlw	2
  2992  0040C6  0100               	movlb	0	; () banked
  2993  0040C8  D031               	goto	L4
  2994  0040CA                     l5524:
  2995                           
  2996                           ;ff.c: 952:   res = FR_OK;
  2997  0040CA  0E00               	movlw	0
  2998  0040CC  0100               	movlb	0	; () banked
  2999  0040CE  6F60               	movwf	remove_chain@res& (0+255),b
  3000                           
  3001                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3002  0040D0  D074               	goto	l405
  3003  0040D2                     l5526:
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3007  0040D2  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3008  0040D6  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3009  0040DA  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3010  0040DE  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3011  0040E2  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3012  0040E6  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3013  0040EA  EC0D  F016         	call	_get_fat	;wreg free
  3014  0040EE  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3015  0040F2  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3016  0040F6  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3017  0040FA  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3018                           
  3019                           ;ff.c: 955:    if (nxt == 0) break;
  3020  0040FE  0100               	movlb	0	; () banked
  3021  004100  5161               	movf	remove_chain@nxt& (0+255),w,b
  3022  004102  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3023  004104  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3024  004106  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3025  004108  B4D8               	btfsc	status,2,c
  3026  00410A  D067               	goto	u7230
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3030  00410C  0561               	decf	remove_chain@nxt& (0+255),w,b
  3031  00410E  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3032  004110  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3033  004112  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3034  004114  B4D8               	btfsc	status,2,c
  3035  004116  D7D6               	goto	u7170
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3039  004118  2961               	incf	remove_chain@nxt& (0+255),w,b
  3040  00411A  E10A               	bnz	l5540
  3041  00411C  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3042  00411E  E108               	bnz	l5540
  3043  004120  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3044  004122  E106               	bnz	l5540
  3045  004124  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3046  004126  A4D8               	btfss	status,2,c
  3047  004128  D003               	goto	l5540
  3048                           
  3049                           ; BSR set to: 0
  3050  00412A  0E01               	movlw	1
  3051  00412C                     L4:
  3052  00412C  6F60               	movwf	remove_chain@res& (0+255),b
  3053  00412E  D055               	goto	u7230
  3054  004130                     l5540:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3058  004130  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3059  004134  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3060  004138  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3061  00413C  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3062  004140  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3063  004144  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3064  004148  0E00               	movlw	0
  3065  00414A  6E41               	movwf	put_fat@val,c
  3066  00414C  0E00               	movlw	0
  3067  00414E  6E42               	movwf	put_fat@val+1,c
  3068  004150  0E00               	movlw	0
  3069  004152  6E43               	movwf	put_fat@val+2,c
  3070  004154  0E00               	movlw	0
  3071  004156  6E44               	movwf	put_fat@val+3,c
  3072  004158  ECF5  F011         	call	_put_fat	;wreg free
  3073  00415C  0100               	movlb	0	; () banked
  3074  00415E  6F60               	movwf	remove_chain@res& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;ff.c: 959:    if (res != FR_OK) break;
  3078  004160  5160               	movf	remove_chain@res& (0+255),w,b
  3079  004162  A4D8               	btfss	status,2,c
  3080  004164  D03A               	goto	u7230
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3084  004166  EE20 F00E          	lfsr	2,14
  3085  00416A  5056               	movf	remove_chain@fs,w,c
  3086  00416C  26D9               	addwf	fsr2l,f,c
  3087  00416E  5057               	movf	remove_chain@fs+1,w,c
  3088  004170  22DA               	addwfc	fsr2h,f,c
  3089  004172  28DE               	incf	postinc2,w,c
  3090  004174  E107               	bnz	u7220
  3091  004176  28DE               	incf	postinc2,w,c
  3092  004178  E105               	bnz	u7220
  3093  00417A  28DE               	incf	postinc2,w,c
  3094  00417C  E103               	bnz	u7220
  3095  00417E  28DE               	incf	postinc2,w,c
  3096  004180  B4D8               	btfsc	status,2,c
  3097  004182  D013               	goto	l5550
  3098  004184                     u7220:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;ff.c: 961:     fs->free_clust++;
  3102  004184  EE20 F00E          	lfsr	2,14
  3103  004188  5056               	movf	remove_chain@fs,w,c
  3104  00418A  26D9               	addwf	fsr2l,f,c
  3105  00418C  5057               	movf	remove_chain@fs+1,w,c
  3106  00418E  22DA               	addwfc	fsr2h,f,c
  3107  004190  2ADE               	incf	postinc2,f,c
  3108  004192  0E00               	movlw	0
  3109  004194  22DE               	addwfc	postinc2,f,c
  3110  004196  22DE               	addwfc	postinc2,f,c
  3111  004198  22DE               	addwfc	postinc2,f,c
  3112                           
  3113                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3114  00419A  EE20 F005          	lfsr	2,5
  3115  00419E  5056               	movf	remove_chain@fs,w,c
  3116  0041A0  26D9               	addwf	fsr2l,f,c
  3117  0041A2  5057               	movf	remove_chain@fs+1,w,c
  3118  0041A4  22DA               	addwfc	fsr2h,f,c
  3119  0041A6  0E00               	movlw	0
  3120  0041A8  80DB               	bsf	plusw2,0,c
  3121  0041AA                     l5550:
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;ff.c: 974:    clst = nxt;
  3125  0041AA  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3126  0041AE  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3127  0041B2  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3128  0041B6  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3129  0041BA                     l405:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3133  0041BA  EE20 F012          	lfsr	2,18
  3134  0041BE  5056               	movf	remove_chain@fs,w,c
  3135  0041C0  26D9               	addwf	fsr2l,f,c
  3136  0041C2  5057               	movf	remove_chain@fs+1,w,c
  3137  0041C4  22DA               	addwfc	fsr2h,f,c
  3138  0041C6  50DE               	movf	postinc2,w,c
  3139  0041C8  5C58               	subwf	remove_chain@clst,w,c
  3140  0041CA  50DE               	movf	postinc2,w,c
  3141  0041CC  5859               	subwfb	remove_chain@clst+1,w,c
  3142  0041CE  50DE               	movf	postinc2,w,c
  3143  0041D0  585A               	subwfb	remove_chain@clst+2,w,c
  3144  0041D2  50DE               	movf	postinc2,w,c
  3145  0041D4  585B               	subwfb	remove_chain@clst+3,w,c
  3146  0041D6  A0D8               	btfss	status,0,c
  3147  0041D8  D77C               	goto	l5526
  3148  0041DA                     u7230:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;ff.c: 978:  return res;
  3152  0041DA  5160               	movf	remove_chain@res& (0+255),w,b
  3153                           
  3154                           ; BSR set to: 0
  3155  0041DC  0012               	return		;funcret
  3156  0041DE                     __end_of_remove_chain:
  3157                           	opt callstack 0
  3158                           
  3159 ;; *************** function _follow_path *****************
  3160 ;; Defined at:
  3161 ;;		line 2052 in file "ff.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  dp              2   38[BANK0 ] PTR struct .
  3164 ;;		 -> f_open@dj(22), 
  3165 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3166 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3169 ;;		 -> NULL(0), FatFs(558), 
  3170 ;;  res             1   45[BANK0 ] enum E93
  3171 ;;  ns              1   44[BANK0 ] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      enum E93
  3174 ;; Registers used:
  3175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3181 ;;      Params:         0       4       0       0       0       0       0       0       0
  3182 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3184 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3185 ;;Total ram usage:        8 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:   12
  3188 ;; This function calls:
  3189 ;;		_create_name
  3190 ;;		_dir_find
  3191 ;;		_dir_sdi
  3192 ;;		_ld_clust
  3193 ;; This function is called by:
  3194 ;;		_f_open
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text4
  3199  0041DE                     __ptext4:
  3200                           	opt callstack 0
  3201  0041DE                     _follow_path:
  3202                           	opt callstack 17
  3203                           
  3204                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;incstack = 0
  3208  0041DE  C088  FFF6         	movff	follow_path@path,tblptrl
  3209  0041E2  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3210  0041E6                     	if	0	;tblptru may be non-zero
  3211  0041E6                     	endif
  3212  0041E6                     	if	0	;tblptru may be non-zero
  3213  0041E6                     	endif
  3214  0041E6  0008               	tblrd		*
  3215  0041E8  50F5               	movf	tablat,w,c
  3216  0041EA  0A2F               	xorlw	47
  3217  0041EC  B4D8               	btfsc	status,2,c
  3218  0041EE  D009               	goto	u7270
  3219  0041F0  C088  FFF6         	movff	follow_path@path,tblptrl
  3220  0041F4  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3221  0041F8                     	if	0	;tblptru may be non-zero
  3222  0041F8                     	endif
  3223  0041F8                     	if	0	;tblptru may be non-zero
  3224  0041F8                     	endif
  3225  0041F8  0008               	tblrd		*
  3226  0041FA  50F5               	movf	tablat,w,c
  3227  0041FC  0A5C               	xorlw	92
  3228  0041FE  A4D8               	btfss	status,2,c
  3229  004200  D003               	goto	l5580
  3230  004202                     u7270:
  3231                           
  3232                           ;ff.c: 2069:   path++;
  3233  004202  0100               	movlb	0	; () banked
  3234  004204  4B88               	infsnz	follow_path@path& (0+255),f,b
  3235  004206  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3236  004208                     l5580:
  3237                           
  3238                           ;ff.c: 2070:  dp->sclust = 0;
  3239  004208  0100               	movlb	0	; () banked
  3240  00420A  EE20 F006          	lfsr	2,6
  3241  00420E  5186               	movf	follow_path@dp& (0+255),w,b
  3242  004210  26D9               	addwf	fsr2l,f,c
  3243  004212  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3244  004214  22DA               	addwfc	fsr2h,f,c
  3245  004216  6ADE               	clrf	postinc2,c
  3246  004218  6ADE               	clrf	postinc2,c
  3247  00421A  6ADE               	clrf	postinc2,c
  3248  00421C  6ADD               	clrf	postdec2,c
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3252  00421E  C088  FFF6         	movff	follow_path@path,tblptrl
  3253  004222  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3254  004226                     	if	0	;tblptru may be non-zero
  3255  004226                     	endif
  3256  004226                     	if	0	;tblptru may be non-zero
  3257  004226                     	endif
  3258  004226  0E20               	movlw	32
  3259  004228  0008               	tblrd		*
  3260  00422A  60F5               	cpfslt	tablat,c
  3261  00422C  D017               	goto	l5588
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3265  00422E  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3266  004232  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3267  004236  0E00               	movlw	0
  3268  004238  6E59               	movwf	dir_sdi@idx+1,c
  3269  00423A  0E00               	movlw	0
  3270  00423C  6E58               	movwf	dir_sdi@idx,c
  3271  00423E  EC26  F01B         	call	_dir_sdi	;wreg free
  3272  004242  0100               	movlb	0	; () banked
  3273  004244  6F8D               	movwf	follow_path@res& (0+255),b
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;ff.c: 2075:   dp->dir = 0;
  3277  004246  EE20 F012          	lfsr	2,18
  3278  00424A  5186               	movf	follow_path@dp& (0+255),w,b
  3279  00424C  26D9               	addwf	fsr2l,f,c
  3280  00424E  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3281  004250  22DA               	addwfc	fsr2h,f,c
  3282  004252  0E00               	movlw	0
  3283  004254  6EDE               	movwf	postinc2,c
  3284  004256  0E00               	movlw	0
  3285  004258  6EDD               	movwf	postdec2,c
  3286                           
  3287                           ;ff.c: 2076:  } else {
  3288  00425A  D062               	goto	l5624
  3289  00425C                     l5588:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;ff.c: 2078:    res = create_name(dp, &path);
  3293  00425C  C086  F009         	movff	follow_path@dp,create_name@dp
  3294  004260  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3295  004264  0E88               	movlw	low follow_path@path
  3296  004266  6E0B               	movwf	create_name@path,c
  3297  004268  0E00               	movlw	high follow_path@path
  3298  00426A  6E0C               	movwf	create_name@path+1,c
  3299  00426C  EC87  F01C         	call	_create_name	;wreg free
  3300  004270  0100               	movlb	0	; () banked
  3301  004272  6F8D               	movwf	follow_path@res& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;ff.c: 2079:    if (res != FR_OK) break;
  3305  004274  518D               	movf	follow_path@res& (0+255),w,b
  3306  004276  A4D8               	btfss	status,2,c
  3307  004278  D053               	goto	l5624
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;ff.c: 2080:    res = dir_find(dp);
  3311  00427A  C086  F080         	movff	follow_path@dp,dir_find@dp
  3312  00427E  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3313  004282  ECCD  F023         	call	_dir_find	;wreg free
  3314  004286  0100               	movlb	0	; () banked
  3315  004288  6F8D               	movwf	follow_path@res& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;ff.c: 2081:    ns = dp->fn[11];
  3319  00428A  EE20 F014          	lfsr	2,20
  3320  00428E  5186               	movf	follow_path@dp& (0+255),w,b
  3321  004290  26D9               	addwf	fsr2l,f,c
  3322  004292  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3323  004294  22DA               	addwfc	fsr2h,f,c
  3324  004296  EE10 F00B          	lfsr	1,11
  3325  00429A  50DE               	movf	postinc2,w,c
  3326  00429C  26E1               	addwf	fsr1l,f,c
  3327  00429E  50DD               	movf	postdec2,w,c
  3328  0042A0  22E2               	addwfc	fsr1h,f,c
  3329  0042A2  50E7               	movf	indf1,w,c
  3330  0042A4  6F8C               	movwf	follow_path@ns& (0+255),b
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;ff.c: 2082:    if (res != FR_OK) {
  3334  0042A6  518D               	movf	follow_path@res& (0+255),w,b
  3335  0042A8  B4D8               	btfsc	status,2,c
  3336  0042AA  D008               	goto	l572
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3340  0042AC  0E04               	movlw	4
  3341  0042AE  198D               	xorwf	follow_path@res& (0+255),w,b
  3342  0042B0  B4D8               	btfsc	status,2,c
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3346  0042B2  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3347  0042B4  D035               	goto	l5624
  3348  0042B6                     u7320:
  3349                           
  3350                           ; BSR set to: 0
  3351  0042B6  0E05               	movlw	5
  3352  0042B8  6F8D               	movwf	follow_path@res& (0+255),b
  3353  0042BA  D032               	goto	l5624
  3354  0042BC                     l572:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;ff.c: 2094:    if (ns & 0x04) break;
  3358  0042BC  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3359  0042BE  D030               	goto	l5624
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;ff.c: 2095:    dir = dp->dir;
  3363  0042C0  EE20 F012          	lfsr	2,18
  3364  0042C4  5186               	movf	follow_path@dp& (0+255),w,b
  3365  0042C6  26D9               	addwf	fsr2l,f,c
  3366  0042C8  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3367  0042CA  22DA               	addwfc	fsr2h,f,c
  3368  0042CC  CFDE F08A          	movff	postinc2,follow_path@dir
  3369  0042D0  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3370                           
  3371                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3372  0042D4  EE20 F00B          	lfsr	2,11
  3373  0042D8  518A               	movf	follow_path@dir& (0+255),w,b
  3374  0042DA  26D9               	addwf	fsr2l,f,c
  3375  0042DC  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3376  0042DE  22DA               	addwfc	fsr2h,f,c
  3377  0042E0  A8DF               	btfss	indf2,4,c
  3378  0042E2  D7E9               	goto	u7320
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3382  0042E4  C086  FFD9         	movff	follow_path@dp,fsr2l
  3383  0042E8  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3384  0042EC  CFDE F001          	movff	postinc2,ld_clust@fs
  3385  0042F0  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3386  0042F4  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3387  0042F8  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3388  0042FC  EC90  F028         	call	_ld_clust	;wreg free
  3389  004300  0100               	movlb	0	; () banked
  3390  004302  EE20 F006          	lfsr	2,6
  3391  004306  5186               	movf	follow_path@dp& (0+255),w,b
  3392  004308  26D9               	addwf	fsr2l,f,c
  3393  00430A  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3394  00430C  22DA               	addwfc	fsr2h,f,c
  3395  00430E  C001  FFDE         	movff	?_ld_clust,postinc2
  3396  004312  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3397  004316  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3398  00431A  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3399  00431E  D79E               	goto	l5588
  3400  004320                     l5624:
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;ff.c: 2103:  return res;
  3404  004320  518D               	movf	follow_path@res& (0+255),w,b
  3405                           
  3406                           ; BSR set to: 0
  3407  004322  0012               	return		;funcret
  3408  004324                     __end_of_follow_path:
  3409                           	opt callstack 0
  3410                           
  3411 ;; *************** function _ld_clust *****************
  3412 ;; Defined at:
  3413 ;;		line 1235 in file "ff.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  fs              2    0[COMRAM] PTR struct .
  3416 ;;		 -> NULL(0), FatFs(558), 
  3417 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3418 ;;		 -> NULL(0), FatFs(558), 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  cl              4   10[COMRAM] unsigned long 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  4    0[COMRAM] unsigned long 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3430 ;;      Params:         4       0       0       0       0       0       0       0       0
  3431 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3432 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3433 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3434 ;;Total ram usage:       14 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_follow_path
  3440 ;;		_f_open
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text5
  3445  005120                     __ptext5:
  3446                           	opt callstack 0
  3447  005120                     _ld_clust:
  3448                           	opt callstack 29
  3449                           
  3450                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;incstack = 0
  3454  005120  0E1A               	movlw	26
  3455  005122  2403               	addwf	ld_clust@dir,w,c
  3456  005124  6ED9               	movwf	fsr2l,c
  3457  005126  0E00               	movlw	0
  3458  005128  2004               	addwfc	ld_clust@dir+1,w,c
  3459  00512A  6EDA               	movwf	fsr2h,c
  3460  00512C  CFDE F005          	movff	postinc2,??_ld_clust
  3461  005130  CFDD F006          	movff	postdec2,??_ld_clust+1
  3462  005134  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3463  005138  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3464  00513C  6A0D               	clrf	ld_clust@cl+2,c
  3465  00513E  6A0E               	clrf	ld_clust@cl+3,c
  3466                           
  3467                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3468  005140  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3469  005144  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3470  005148  0E03               	movlw	3
  3471  00514A  18DE               	xorwf	postinc2,w,c
  3472  00514C  A4D8               	btfss	status,2,c
  3473  00514E  D01E               	goto	l5226
  3474                           
  3475                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3476  005150  0E14               	movlw	20
  3477  005152  2403               	addwf	ld_clust@dir,w,c
  3478  005154  6ED9               	movwf	fsr2l,c
  3479  005156  0E00               	movlw	0
  3480  005158  2004               	addwfc	ld_clust@dir+1,w,c
  3481  00515A  6EDA               	movwf	fsr2h,c
  3482  00515C  CFDE F005          	movff	postinc2,??_ld_clust
  3483  005160  CFDD F006          	movff	postdec2,??_ld_clust+1
  3484  005164  5005               	movf	??_ld_clust,w,c
  3485  005166  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3486  005168  5006               	movf	??_ld_clust+1,w,c
  3487  00516A  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3488  00516C  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3489  00516E  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3490  005170  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3491  005174  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3492  005178  6A08               	clrf	??_ld_clust+3,c
  3493  00517A  6A07               	clrf	??_ld_clust+2,c
  3494  00517C  5007               	movf	??_ld_clust+2,w,c
  3495  00517E  120B               	iorwf	ld_clust@cl,f,c
  3496  005180  5008               	movf	??_ld_clust+3,w,c
  3497  005182  120C               	iorwf	ld_clust@cl+1,f,c
  3498  005184  5009               	movf	??_ld_clust+4,w,c
  3499  005186  120D               	iorwf	ld_clust@cl+2,f,c
  3500  005188  500A               	movf	??_ld_clust+5,w,c
  3501  00518A  120E               	iorwf	ld_clust@cl+3,f,c
  3502  00518C                     l5226:
  3503                           
  3504                           ;ff.c: 1246:  return cl;
  3505  00518C  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3506  005190  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3507  005194  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3508  005198  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3509  00519C  0012               	return		;funcret
  3510  00519E                     __end_of_ld_clust:
  3511                           	opt callstack 0
  3512                           
  3513 ;; *************** function _dir_find *****************
  3514 ;; Defined at:
  3515 ;;		line 1458 in file "ff.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  dp              2   32[BANK0 ] PTR struct .
  3518 ;;		 -> f_open@dj(22), 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3521 ;;		 -> NULL(0), FatFs(558), 
  3522 ;;  res             1   37[BANK0 ] enum E93
  3523 ;;  c               1   34[BANK0 ] unsigned char 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      enum E93
  3526 ;; Registers used:
  3527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3533 ;;      Params:         0       2       0       0       0       0       0       0       0
  3534 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3536 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3537 ;;Total ram usage:        6 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; Hardware stack levels required when called:   11
  3540 ;; This function calls:
  3541 ;;		_dir_next
  3542 ;;		_dir_sdi
  3543 ;;		_mem_cmp
  3544 ;;		_move_window
  3545 ;; This function is called by:
  3546 ;;		_follow_path
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text6
  3551  00479A                     __ptext6:
  3552                           	opt callstack 0
  3553  00479A                     _dir_find:
  3554                           	opt callstack 17
  3555                           
  3556                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3557                           
  3558                           ;incstack = 0
  3559  00479A  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3560  00479E  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3561  0047A2  0E00               	movlw	0
  3562  0047A4  6E59               	movwf	dir_sdi@idx+1,c
  3563  0047A6  0E00               	movlw	0
  3564  0047A8  6E58               	movwf	dir_sdi@idx,c
  3565  0047AA  EC26  F01B         	call	_dir_sdi	;wreg free
  3566  0047AE  0100               	movlb	0	; () banked
  3567  0047B0  6F85               	movwf	dir_find@res& (0+255),b
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3571  0047B2  5185               	movf	dir_find@res& (0+255),w,b
  3572  0047B4  B4D8               	btfsc	status,2,c
  3573  0047B6  D003               	goto	l5240
  3574  0047B8                     u6610:
  3575  0047B8  0100               	movlb	0	; () banked
  3576  0047BA  5185               	movf	dir_find@res& (0+255),w,b
  3577  0047BC  0012               	return	
  3578  0047BE                     l5240:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3582  0047BE  C080  FFD9         	movff	dir_find@dp,fsr2l
  3583  0047C2  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3584  0047C6  CFDE F030          	movff	postinc2,move_window@fs
  3585  0047CA  CFDD F031          	movff	postdec2,move_window@fs+1
  3586  0047CE  EE20 F00E          	lfsr	2,14
  3587  0047D2  5180               	movf	dir_find@dp& (0+255),w,b
  3588  0047D4  26D9               	addwf	fsr2l,f,c
  3589  0047D6  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3590  0047D8  22DA               	addwfc	fsr2h,f,c
  3591  0047DA  CFDE F032          	movff	postinc2,move_window@sector
  3592  0047DE  CFDE F033          	movff	postinc2,move_window@sector+1
  3593  0047E2  CFDE F034          	movff	postinc2,move_window@sector+2
  3594  0047E6  CFDE F035          	movff	postinc2,move_window@sector+3
  3595  0047EA  EC71  F027         	call	_move_window	;wreg free
  3596  0047EE  0100               	movlb	0	; () banked
  3597  0047F0  6F85               	movwf	dir_find@res& (0+255),b
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;ff.c: 1476:   if (res != FR_OK) break;
  3601  0047F2  5185               	movf	dir_find@res& (0+255),w,b
  3602  0047F4  A4D8               	btfss	status,2,c
  3603  0047F6  D7E0               	goto	u6610
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;ff.c: 1477:   dir = dp->dir;
  3607  0047F8  EE20 F012          	lfsr	2,18
  3608  0047FC  5180               	movf	dir_find@dp& (0+255),w,b
  3609  0047FE  26D9               	addwf	fsr2l,f,c
  3610  004800  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3611  004802  22DA               	addwfc	fsr2h,f,c
  3612  004804  CFDE F083          	movff	postinc2,dir_find@dir
  3613  004808  CFDD F084          	movff	postdec2,dir_find@dir+1
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;ff.c: 1478:   c = dir[0];
  3617  00480C  C083  FFD9         	movff	dir_find@dir,fsr2l
  3618  004810  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3619  004814  50DF               	movf	indf2,w,c
  3620  004816  6F82               	movwf	dir_find@c& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3624  004818  5182               	movf	dir_find@c& (0+255),w,b
  3625  00481A  A4D8               	btfss	status,2,c
  3626  00481C  D003               	goto	l5254
  3627                           
  3628                           ; BSR set to: 0
  3629  00481E  0E04               	movlw	4
  3630  004820  6F85               	movwf	dir_find@res& (0+255),b
  3631  004822  D7CA               	goto	u6610
  3632  004824                     l5254:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3636  004824  EE20 F00B          	lfsr	2,11
  3637  004828  5183               	movf	dir_find@dir& (0+255),w,b
  3638  00482A  26D9               	addwf	fsr2l,f,c
  3639  00482C  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3640  00482E  22DA               	addwfc	fsr2h,f,c
  3641  004830  B6DF               	btfsc	indf2,3,c
  3642  004832  D018               	goto	l5260
  3643                           
  3644                           ; BSR set to: 0
  3645  004834  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3646  004838  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3647  00483C  EE20 F014          	lfsr	2,20
  3648  004840  5180               	movf	dir_find@dp& (0+255),w,b
  3649  004842  26D9               	addwf	fsr2l,f,c
  3650  004844  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3651  004846  22DA               	addwfc	fsr2h,f,c
  3652  004848  CFDE F003          	movff	postinc2,mem_cmp@src
  3653  00484C  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3654  004850  0E00               	movlw	0
  3655  004852  6E06               	movwf	mem_cmp@cnt+1,c
  3656  004854  0E0B               	movlw	11
  3657  004856  6E05               	movwf	mem_cmp@cnt,c
  3658  004858  EC43  F029         	call	_mem_cmp	;wreg free
  3659  00485C  5001               	movf	?_mem_cmp,w,c
  3660  00485E  1002               	iorwf	?_mem_cmp+1,w,c
  3661  004860  B4D8               	btfsc	status,2,c
  3662  004862  D7AA               	goto	u6610
  3663  004864                     l5260:
  3664                           
  3665                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3666  004864  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3667  004868  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3668  00486C  0E00               	movlw	0
  3669  00486E  0100               	movlb	0	; () banked
  3670  004870  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3671  004872  0E00               	movlw	0
  3672  004874  6F6F               	movwf	dir_next@stretch& (0+255),b
  3673  004876  EC0A  F014         	call	_dir_next	;wreg free
  3674  00487A  0100               	movlb	0	; () banked
  3675  00487C  6F85               	movwf	dir_find@res& (0+255),b
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;ff.c: 1506:  } while (res == FR_OK);
  3679  00487E  5185               	movf	dir_find@res& (0+255),w,b
  3680  004880  A4D8               	btfss	status,2,c
  3681  004882  D79A               	goto	u6610
  3682  004884  D79C               	goto	l5240
  3683  004886                     __end_of_dir_find:
  3684                           	opt callstack 0
  3685                           
  3686 ;; *************** function _mem_cmp *****************
  3687 ;; Defined at:
  3688 ;;		line 533 in file "ff.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  dst             2    0[COMRAM] PTR const void 
  3691 ;;		 -> NULL(0), FatFs(558), 
  3692 ;;  src             2    2[COMRAM] PTR const void 
  3693 ;;		 -> f_open@sfn(12), 
  3694 ;;  cnt             2    4[COMRAM] unsigned short 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  r               2   12[COMRAM] int 
  3697 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3698 ;;		 -> f_open@sfn(12), 
  3699 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3700 ;;		 -> NULL(0), FatFs(558), 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  2    0[COMRAM] int 
  3703 ;; Registers used:
  3704 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3710 ;;      Params:         6       0       0       0       0       0       0       0       0
  3711 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3712 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3713 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3714 ;;Total ram usage:       14 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; This function calls:
  3717 ;;		Nothing
  3718 ;; This function is called by:
  3719 ;;		_dir_find
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text7
  3724  005286                     __ptext7:
  3725                           	opt callstack 0
  3726  005286                     _mem_cmp:
  3727                           	opt callstack 27
  3728                           
  3729                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;incstack = 0
  3733  005286  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3734  00528A  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3735  00528E  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3736  005292  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3737                           
  3738                           ;ff.c: 535:  int r = 0;
  3739  005296  0E00               	movlw	0
  3740  005298  6E0E               	movwf	mem_cmp@r+1,c
  3741  00529A  0E00               	movlw	0
  3742  00529C  6E0D               	movwf	mem_cmp@r,c
  3743  00529E                     l4848:
  3744  00529E  0605               	decf	mem_cmp@cnt,f,c
  3745  0052A0  A0D8               	btfss	status,0,c
  3746  0052A2  0606               	decf	mem_cmp@cnt+1,f,c
  3747  0052A4  2805               	incf	mem_cmp@cnt,w,c
  3748  0052A6  E103               	bnz	u5900
  3749  0052A8  2806               	incf	mem_cmp@cnt+1,w,c
  3750  0052AA  B4D8               	btfsc	status,2,c
  3751  0052AC  D01A               	goto	u5910
  3752  0052AE                     u5900:
  3753  0052AE  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3754  0052B2  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3755  0052B6  4A09               	infsnz	mem_cmp@d,f,c
  3756  0052B8  2A0A               	incf	mem_cmp@d+1,f,c
  3757  0052BA  50DF               	movf	indf2,w,c
  3758  0052BC  6E07               	movwf	??_mem_cmp& (0+255),c
  3759  0052BE  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3760  0052C2  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3761  0052C6  4A0B               	infsnz	mem_cmp@s,f,c
  3762  0052C8  2A0C               	incf	mem_cmp@s+1,f,c
  3763  0052CA  50DF               	movf	indf2,w,c
  3764  0052CC  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  3765  0052CE  5008               	movf	??_mem_cmp+1,w,c
  3766  0052D0  5C07               	subwf	??_mem_cmp,w,c
  3767  0052D2  6E0D               	movwf	mem_cmp@r,c
  3768  0052D4  6A0E               	clrf	mem_cmp@r+1,c
  3769  0052D6  A0D8               	btfss	status,0,c
  3770  0052D8  060E               	decf	mem_cmp@r+1,f,c
  3771  0052DA  500D               	movf	mem_cmp@r,w,c
  3772  0052DC  100E               	iorwf	mem_cmp@r+1,w,c
  3773  0052DE  B4D8               	btfsc	status,2,c
  3774  0052E0  D7DE               	goto	l4848
  3775  0052E2                     u5910:
  3776                           
  3777                           ;ff.c: 538:  return r;
  3778  0052E2  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3779  0052E6  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3780  0052EA  0012               	return		;funcret
  3781  0052EC                     __end_of_mem_cmp:
  3782                           	opt callstack 0
  3783                           
  3784 ;; *************** function _create_name *****************
  3785 ;; Defined at:
  3786 ;;		line 1843 in file "ff.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  dp              2    8[COMRAM] PTR struct .
  3789 ;;		 -> f_open@dj(22), 
  3790 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3791 ;;		 -> follow_path@path(2), 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  i               2   28[COMRAM] unsigned short 
  3794 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  3795 ;;		 -> f_open@sfn(12), 
  3796 ;;  p               2   23[COMRAM] PTR const unsigned char 
  3797 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3798 ;;  ni              2   21[COMRAM] unsigned short 
  3799 ;;  si              2   18[COMRAM] unsigned short 
  3800 ;;  c               1   30[COMRAM] unsigned char 
  3801 ;;  d               1   25[COMRAM] unsigned char 
  3802 ;;  b               1   20[COMRAM] unsigned char 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      enum E93
  3805 ;; Registers used:
  3806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3812 ;;      Params:         4       0       0       0       0       0       0       0       0
  3813 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3814 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3815 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3816 ;;Total ram usage:       23 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    1
  3819 ;; This function calls:
  3820 ;;		_chk_chr
  3821 ;;		_mem_set
  3822 ;; This function is called by:
  3823 ;;		_follow_path
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text8
  3828  00390E                     __ptext8:
  3829                           	opt callstack 0
  3830  00390E                     _create_name:
  3831                           	opt callstack 27
  3832                           
  3833                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  3834                           
  3835                           ;incstack = 0
  3836  00390E  C00B  FFD9         	movff	create_name@path,fsr2l
  3837  003912  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3838  003916  CFDE F018          	movff	postinc2,create_name@p
  3839  00391A  CFDD F019          	movff	postdec2,create_name@p+1
  3840  00391E  D002               	goto	l5272
  3841  003920                     l5270:
  3842  003920  4A18               	infsnz	create_name@p,f,c
  3843  003922  2A19               	incf	create_name@p+1,f,c
  3844  003924                     l5272:
  3845  003924  C018  FFF6         	movff	create_name@p,tblptrl
  3846  003928  C019  FFF7         	movff	create_name@p+1,tblptrh
  3847  00392C                     	if	0	;tblptru may be non-zero
  3848  00392C                     	endif
  3849  00392C                     	if	0	;tblptru may be non-zero
  3850  00392C                     	endif
  3851  00392C  0008               	tblrd		*
  3852  00392E  50F5               	movf	tablat,w,c
  3853  003930  0A2F               	xorlw	47
  3854  003932  B4D8               	btfsc	status,2,c
  3855  003934  D7F5               	goto	l5270
  3856  003936  C018  FFF6         	movff	create_name@p,tblptrl
  3857  00393A  C019  FFF7         	movff	create_name@p+1,tblptrh
  3858  00393E                     	if	0	;tblptru may be non-zero
  3859  00393E                     	endif
  3860  00393E                     	if	0	;tblptru may be non-zero
  3861  00393E                     	endif
  3862  00393E  0008               	tblrd		*
  3863  003940  50F5               	movf	tablat,w,c
  3864  003942  0A5C               	xorlw	92
  3865  003944  B4D8               	btfsc	status,2,c
  3866  003946  D7EC               	goto	l5270
  3867                           
  3868                           ;ff.c: 1975:  sfn = dp->fn;
  3869  003948  EE20 F014          	lfsr	2,20
  3870  00394C  5009               	movf	create_name@dp,w,c
  3871  00394E  26D9               	addwf	fsr2l,f,c
  3872  003950  500A               	movf	create_name@dp+1,w,c
  3873  003952  22DA               	addwfc	fsr2h,f,c
  3874  003954  CFDE F01B          	movff	postinc2,create_name@sfn
  3875  003958  CFDD F01C          	movff	postdec2,create_name@sfn+1
  3876                           
  3877                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  3878  00395C  C01B  F001         	movff	create_name@sfn,mem_set@dst
  3879  003960  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  3880  003964  0E00               	movlw	0
  3881  003966  6E04               	movwf	mem_set@val+1,c
  3882  003968  0E20               	movlw	32
  3883  00396A  6E03               	movwf	mem_set@val,c
  3884  00396C  0E00               	movlw	0
  3885  00396E  6E06               	movwf	mem_set@cnt+1,c
  3886  003970  0E0B               	movlw	11
  3887  003972  6E05               	movwf	mem_set@cnt,c
  3888  003974  EC77  F02A         	call	_mem_set	;wreg free
  3889                           
  3890                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  3891  003978  0E00               	movlw	0
  3892  00397A  6E15               	movwf	create_name@b,c
  3893  00397C  C015  F01D         	movff	create_name@b,create_name@i
  3894  003980  6A1E               	clrf	create_name@i+1,c
  3895  003982  C01D  F013         	movff	create_name@i,create_name@si
  3896  003986  C01E  F014         	movff	create_name@i+1,create_name@si+1
  3897  00398A  0E00               	movlw	0
  3898  00398C  6E17               	movwf	create_name@ni+1,c
  3899  00398E  0E08               	movlw	8
  3900  003990  6E16               	movwf	create_name@ni,c
  3901  003992                     l5284:
  3902                           
  3903                           ;ff.c: 1992:   c = (BYTE)p[si++];
  3904  003992  5013               	movf	create_name@si,w,c
  3905  003994  2418               	addwf	create_name@p,w,c
  3906  003996  6E0D               	movwf	??_create_name& (0+255),c
  3907  003998  5014               	movf	create_name@si+1,w,c
  3908  00399A  2019               	addwfc	create_name@p+1,w,c
  3909  00399C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  3910  00399E  C00D  FFF6         	movff	??_create_name,tblptrl
  3911  0039A2  C00E  FFF7         	movff	??_create_name+1,tblptrh
  3912  0039A6                     	if	0	;tblptru may be non-zero
  3913  0039A6                     	endif
  3914  0039A6                     	if	0	;tblptru may be non-zero
  3915  0039A6                     	endif
  3916  0039A6  0008               	tblrd		*
  3917  0039A8  CFF5 F01F          	movff	tablat,create_name@c
  3918  0039AC  4A13               	infsnz	create_name@si,f,c
  3919  0039AE  2A14               	incf	create_name@si+1,f,c
  3920                           
  3921                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  3922  0039B0  0E20               	movlw	32
  3923  0039B2  641F               	cpfsgt	create_name@c,c
  3924  0039B4  D0A4               	goto	l5368
  3925  0039B6  0E2F               	movlw	47
  3926  0039B8  181F               	xorwf	create_name@c,w,c
  3927  0039BA  B4D8               	btfsc	status,2,c
  3928  0039BC  D0A0               	goto	l5368
  3929  0039BE  0E5C               	movlw	92
  3930  0039C0  181F               	xorwf	create_name@c,w,c
  3931  0039C2  B4D8               	btfsc	status,2,c
  3932  0039C4  D09C               	goto	l5368
  3933                           
  3934                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  3935  0039C6  0E2E               	movlw	46
  3936  0039C8  181F               	xorwf	create_name@c,w,c
  3937  0039CA  B4D8               	btfsc	status,2,c
  3938  0039CC  D006               	goto	u6730
  3939  0039CE  5016               	movf	create_name@ni,w,c
  3940  0039D0  5C1D               	subwf	create_name@i,w,c
  3941  0039D2  5017               	movf	create_name@ni+1,w,c
  3942  0039D4  581E               	subwfb	create_name@i+1,w,c
  3943  0039D6  A0D8               	btfss	status,0,c
  3944  0039D8  D018               	goto	l5310
  3945  0039DA                     u6730:
  3946                           
  3947                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  3948  0039DA  0E08               	movlw	8
  3949  0039DC  1816               	xorwf	create_name@ni,w,c
  3950  0039DE  1017               	iorwf	create_name@ni+1,w,c
  3951  0039E0  A4D8               	btfss	status,2,c
  3952  0039E2  D004               	goto	u6750
  3953  0039E4  0E2E               	movlw	46
  3954  0039E6  181F               	xorwf	create_name@c,w,c
  3955  0039E8  B4D8               	btfsc	status,2,c
  3956  0039EA  D002               	goto	l5306
  3957  0039EC                     u6750:
  3958  0039EC  0E06               	movlw	6
  3959  0039EE  0012               	return	
  3960  0039F0                     l5306:
  3961                           
  3962                           ;ff.c: 1996:    i = 8; ni = 11;
  3963  0039F0  0E00               	movlw	0
  3964  0039F2  6E1E               	movwf	create_name@i+1,c
  3965  0039F4  0E08               	movlw	8
  3966  0039F6  6E1D               	movwf	create_name@i,c
  3967  0039F8  0E00               	movlw	0
  3968  0039FA  6E17               	movwf	create_name@ni+1,c
  3969  0039FC  0E0B               	movlw	11
  3970  0039FE  6E16               	movwf	create_name@ni,c
  3971                           
  3972                           ;ff.c: 1997:    b <<= 2; continue;
  3973  003A00  90D8               	bcf	status,0,c
  3974  003A02  3615               	rlcf	create_name@b,f,c
  3975  003A04  90D8               	bcf	status,0,c
  3976  003A06  3615               	rlcf	create_name@b,f,c
  3977  003A08  D7C4               	goto	l5284
  3978  003A0A                     l5310:
  3979                           
  3980                           ;ff.c: 1999:   if (c >= 0x80) {
  3981  003A0A  0E7F               	movlw	127
  3982  003A0C  641F               	cpfsgt	create_name@c,c
  3983  003A0E  D002               	goto	l535
  3984                           
  3985                           ;ff.c: 2000:    b |= 3;
  3986  003A10  0E03               	movlw	3
  3987  003A12  1215               	iorwf	create_name@b,f,c
  3988  003A14                     l535:
  3989                           
  3990                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  3991  003A14  0E80               	movlw	128
  3992  003A16  641F               	cpfsgt	create_name@c,c
  3993  003A18  D003               	goto	u6780
  3994  003A1A  0E9F               	movlw	159
  3995  003A1C  641F               	cpfsgt	create_name@c,c
  3996  003A1E  D006               	goto	u6800
  3997  003A20                     u6780:
  3998  003A20  0EDF               	movlw	223
  3999  003A22  641F               	cpfsgt	create_name@c,c
  4000  003A24  D043               	goto	l5344
  4001  003A26  0EFD               	movlw	253
  4002  003A28  601F               	cpfslt	create_name@c,c
  4003  003A2A  D040               	goto	l5344
  4004  003A2C                     u6800:
  4005                           
  4006                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4007  003A2C  5013               	movf	create_name@si,w,c
  4008  003A2E  2418               	addwf	create_name@p,w,c
  4009  003A30  6E0D               	movwf	??_create_name& (0+255),c
  4010  003A32  5014               	movf	create_name@si+1,w,c
  4011  003A34  2019               	addwfc	create_name@p+1,w,c
  4012  003A36  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4013  003A38  C00D  FFF6         	movff	??_create_name,tblptrl
  4014  003A3C  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4015  003A40                     	if	0	;tblptru may be non-zero
  4016  003A40                     	endif
  4017  003A40                     	if	0	;tblptru may be non-zero
  4018  003A40                     	endif
  4019  003A40  0008               	tblrd		*
  4020  003A42  CFF5 F01A          	movff	tablat,create_name@d
  4021  003A46  4A13               	infsnz	create_name@si,f,c
  4022  003A48  2A14               	incf	create_name@si+1,f,c
  4023                           
  4024                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4025  003A4A  0E3F               	movlw	63
  4026  003A4C  641A               	cpfsgt	create_name@d,c
  4027  003A4E  D003               	goto	u6820
  4028  003A50  0E7E               	movlw	126
  4029  003A52  641A               	cpfsgt	create_name@d,c
  4030  003A54  D006               	goto	u6840
  4031  003A56                     u6820:
  4032  003A56  0E7F               	movlw	127
  4033  003A58  641A               	cpfsgt	create_name@d,c
  4034  003A5A  D7C8               	goto	u6750
  4035  003A5C  0EFD               	movlw	253
  4036  003A5E  601A               	cpfslt	create_name@d,c
  4037  003A60  D7C5               	goto	u6750
  4038  003A62                     u6840:
  4039  003A62  0EFF               	movlw	255
  4040  003A64  6E0D               	movwf	??_create_name& (0+255),c
  4041  003A66  0EFF               	movlw	255
  4042  003A68  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4043  003A6A  C016  F00F         	movff	create_name@ni,??_create_name+2
  4044  003A6E  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4045  003A72  500D               	movf	??_create_name,w,c
  4046  003A74  260F               	addwf	??_create_name+2,f,c
  4047  003A76  500E               	movf	??_create_name+1,w,c
  4048  003A78  2210               	addwfc	??_create_name+3,f,c
  4049  003A7A  500F               	movf	??_create_name+2,w,c
  4050  003A7C  5C1D               	subwf	create_name@i,w,c
  4051  003A7E  5010               	movf	??_create_name+3,w,c
  4052  003A80  581E               	subwfb	create_name@i+1,w,c
  4053  003A82  B0D8               	btfsc	status,0,c
  4054  003A84  D7B3               	goto	u6750
  4055                           
  4056                           ;ff.c: 2013:    sfn[i++] = c;
  4057  003A86  501D               	movf	create_name@i,w,c
  4058  003A88  241B               	addwf	create_name@sfn,w,c
  4059  003A8A  6ED9               	movwf	fsr2l,c
  4060  003A8C  501E               	movf	create_name@i+1,w,c
  4061  003A8E  201C               	addwfc	create_name@sfn+1,w,c
  4062  003A90  6EDA               	movwf	fsr2h,c
  4063  003A92  C01F  FFDF         	movff	create_name@c,indf2
  4064  003A96  4A1D               	infsnz	create_name@i,f,c
  4065  003A98  2A1E               	incf	create_name@i+1,f,c
  4066                           
  4067                           ;ff.c: 2014:    sfn[i++] = d;
  4068  003A9A  501D               	movf	create_name@i,w,c
  4069  003A9C  241B               	addwf	create_name@sfn,w,c
  4070  003A9E  6ED9               	movwf	fsr2l,c
  4071  003AA0  501E               	movf	create_name@i+1,w,c
  4072  003AA2  201C               	addwfc	create_name@sfn+1,w,c
  4073  003AA4  6EDA               	movwf	fsr2h,c
  4074  003AA6  C01A  FFDF         	movff	create_name@d,indf2
  4075  003AAA  D026               	goto	l5366
  4076  003AAC                     l5344:
  4077                           
  4078                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4079  003AAC  0E11               	movlw	low STR_5
  4080  003AAE  6E01               	movwf	chk_chr@str,c
  4081  003AB0  0E08               	movlw	high STR_5
  4082  003AB2  6E02               	movwf	chk_chr@str+1,c
  4083  003AB4  C01F  F003         	movff	create_name@c,chk_chr@chr
  4084  003AB8  6A04               	clrf	chk_chr@chr+1,c
  4085  003ABA  ECA1  F029         	call	_chk_chr	;wreg free
  4086  003ABE  5001               	movf	?_chk_chr,w,c
  4087  003AC0  1002               	iorwf	?_chk_chr+1,w,c
  4088  003AC2  A4D8               	btfss	status,2,c
  4089  003AC4  D793               	goto	u6750
  4090                           
  4091                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4092  003AC6  0E40               	movlw	64
  4093  003AC8  641F               	cpfsgt	create_name@c,c
  4094  003ACA  D005               	goto	l5356
  4095  003ACC  0E5B               	movlw	91
  4096  003ACE  601F               	cpfslt	create_name@c,c
  4097  003AD0  D002               	goto	l5356
  4098                           
  4099                           ;ff.c: 2019:     b |= 2;
  4100  003AD2  8215               	bsf	create_name@b,1,c
  4101                           
  4102                           ;ff.c: 2020:    } else {
  4103  003AD4  D009               	goto	l5364
  4104  003AD6                     l5356:
  4105                           
  4106                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4107  003AD6  0E60               	movlw	96
  4108  003AD8  641F               	cpfsgt	create_name@c,c
  4109  003ADA  D006               	goto	l5364
  4110  003ADC  0E7B               	movlw	123
  4111  003ADE  601F               	cpfslt	create_name@c,c
  4112  003AE0  D003               	goto	l5364
  4113                           
  4114                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4115  003AE2  8015               	bsf	create_name@b,0,c
  4116  003AE4  0E20               	movlw	32
  4117  003AE6  5E1F               	subwf	create_name@c,f,c
  4118  003AE8                     l5364:
  4119                           
  4120                           ;ff.c: 2025:    sfn[i++] = c;
  4121  003AE8  501D               	movf	create_name@i,w,c
  4122  003AEA  241B               	addwf	create_name@sfn,w,c
  4123  003AEC  6ED9               	movwf	fsr2l,c
  4124  003AEE  501E               	movf	create_name@i+1,w,c
  4125  003AF0  201C               	addwfc	create_name@sfn+1,w,c
  4126  003AF2  6EDA               	movwf	fsr2h,c
  4127  003AF4  C01F  FFDF         	movff	create_name@c,indf2
  4128  003AF8                     l5366:
  4129  003AF8  4A1D               	infsnz	create_name@i,f,c
  4130  003AFA  2A1E               	incf	create_name@i+1,f,c
  4131  003AFC  D74A               	goto	l5284
  4132  003AFE                     l5368:
  4133                           
  4134                           ;ff.c: 2028:  *path = &p[si];
  4135  003AFE  5013               	movf	create_name@si,w,c
  4136  003B00  2418               	addwf	create_name@p,w,c
  4137  003B02  6E0D               	movwf	??_create_name& (0+255),c
  4138  003B04  5014               	movf	create_name@si+1,w,c
  4139  003B06  2019               	addwfc	create_name@p+1,w,c
  4140  003B08  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4141  003B0A  C00B  FFD9         	movff	create_name@path,fsr2l
  4142  003B0E  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4143  003B12  C00D  FFDE         	movff	??_create_name,postinc2
  4144  003B16  C00E  FFDD         	movff	??_create_name+1,postdec2
  4145                           
  4146                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4147  003B1A  0E20               	movlw	32
  4148  003B1C  641F               	cpfsgt	create_name@c,c
  4149  003B1E  D004               	goto	l5374
  4150  003B20  0E00               	movlw	0
  4151  003B22  6E12               	movwf	_create_name$893+1,c
  4152  003B24  0E00               	movlw	0
  4153  003B26  D003               	goto	L5
  4154  003B28                     l5374:
  4155  003B28  0E00               	movlw	0
  4156  003B2A  6E12               	movwf	_create_name$893+1,c
  4157  003B2C  0E04               	movlw	4
  4158  003B2E                     L5:
  4159  003B2E  6E11               	movwf	_create_name$893,c
  4160  003B30  C011  F01F         	movff	_create_name$893,create_name@c
  4161                           
  4162                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4163  003B34  501D               	movf	create_name@i,w,c
  4164  003B36  101E               	iorwf	create_name@i+1,w,c
  4165  003B38  B4D8               	btfsc	status,2,c
  4166  003B3A  D758               	goto	u6750
  4167                           
  4168                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4169  003B3C  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4170  003B40  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4171  003B44  0EE5               	movlw	229
  4172  003B46  18DE               	xorwf	postinc2,w,c
  4173  003B48  A4D8               	btfss	status,2,c
  4174  003B4A  D006               	goto	l5388
  4175  003B4C  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4176  003B50  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4177  003B54  0E05               	movlw	5
  4178  003B56  6EDF               	movwf	indf2,c
  4179  003B58                     l5388:
  4180                           
  4181                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4182  003B58  0E08               	movlw	8
  4183  003B5A  1816               	xorwf	create_name@ni,w,c
  4184  003B5C  1017               	iorwf	create_name@ni+1,w,c
  4185  003B5E  A4D8               	btfss	status,2,c
  4186  003B60  D004               	goto	l559
  4187  003B62  90D8               	bcf	status,0,c
  4188  003B64  3615               	rlcf	create_name@b,f,c
  4189  003B66  90D8               	bcf	status,0,c
  4190  003B68  3615               	rlcf	create_name@b,f,c
  4191  003B6A                     l559:
  4192                           
  4193                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4194  003B6A  5015               	movf	create_name@b,w,c
  4195  003B6C  0B03               	andlw	3
  4196  003B6E  06E8               	decf	wreg,f,c
  4197  003B70  B4D8               	btfsc	status,2,c
  4198  003B72  881F               	bsf	create_name@c,4,c
  4199                           
  4200                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4201  003B74  5015               	movf	create_name@b,w,c
  4202  003B76  0B0C               	andlw	12
  4203  003B78  0A04               	xorlw	4
  4204  003B7A  B4D8               	btfsc	status,2,c
  4205  003B7C  861F               	bsf	create_name@c,3,c
  4206                           
  4207                           ;ff.c: 2038:  sfn[11] = c;
  4208  003B7E  EE20 F00B          	lfsr	2,11
  4209  003B82  501B               	movf	create_name@sfn,w,c
  4210  003B84  26D9               	addwf	fsr2l,f,c
  4211  003B86  501C               	movf	create_name@sfn+1,w,c
  4212  003B88  22DA               	addwfc	fsr2h,f,c
  4213  003B8A  C01F  FFDF         	movff	create_name@c,indf2
  4214                           
  4215                           ;ff.c: 2040:  return FR_OK;
  4216  003B8E  0E00               	movlw	0
  4217  003B90  0012               	return		;funcret
  4218  003B92                     __end_of_create_name:
  4219                           	opt callstack 0
  4220                           
  4221 ;; *************** function _chk_chr *****************
  4222 ;; Defined at:
  4223 ;;		line 543 in file "ff.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4226 ;;		 -> STR_6(15), 
  4227 ;;  chr             2    2[COMRAM] int 
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;		None
  4230 ;; Return value:  Size  Location     Type
  4231 ;;                  2    0[COMRAM] int 
  4232 ;; Registers used:
  4233 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4234 ;; Tracked objects:
  4235 ;;		On entry : 0/0
  4236 ;;		On exit  : 0/0
  4237 ;;		Unchanged: 0/0
  4238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4239 ;;      Params:         4       0       0       0       0       0       0       0       0
  4240 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4241 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4242 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4243 ;;Total ram usage:        6 bytes
  4244 ;; Hardware stack levels used:    1
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_create_name
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text9
  4253  005342                     __ptext9:
  4254                           	opt callstack 0
  4255  005342                     _chk_chr:
  4256                           	opt callstack 27
  4257                           
  4258                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4259                           
  4260                           ;incstack = 0
  4261  005342  D002               	goto	l4856
  4262  005344                     l4854:
  4263  005344  4A01               	infsnz	chk_chr@str,f,c
  4264  005346  2A02               	incf	chk_chr@str+1,f,c
  4265  005348                     l4856:
  4266  005348  C001  FFF6         	movff	chk_chr@str,tblptrl
  4267  00534C  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4268  005350                     	if	0	;tblptru may be non-zero
  4269  005350                     	endif
  4270  005350                     	if	0	;tblptru may be non-zero
  4271  005350                     	endif
  4272  005350  0008               	tblrd		*
  4273  005352  50F5               	movf	tablat,w,c
  4274  005354  0900               	iorlw	0
  4275  005356  B4D8               	btfsc	status,2,c
  4276  005358  D00F               	goto	u5930
  4277  00535A  C001  FFF6         	movff	chk_chr@str,tblptrl
  4278  00535E  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4279  005362                     	if	0	;tblptru may be non-zero
  4280  005362                     	endif
  4281  005362                     	if	0	;tblptru may be non-zero
  4282  005362                     	endif
  4283  005362  0008               	tblrd		*
  4284  005364  50F5               	movf	tablat,w,c
  4285  005366  6E05               	movwf	??_chk_chr& (0+255),c
  4286  005368  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4287  00536A  5003               	movf	chk_chr@chr,w,c
  4288  00536C  1805               	xorwf	??_chk_chr,w,c
  4289  00536E  E1EA               	bnz	l4854
  4290  005370  5004               	movf	chk_chr@chr+1,w,c
  4291  005372  1806               	xorwf	??_chk_chr+1,w,c
  4292  005374  A4D8               	btfss	status,2,c
  4293  005376  D7E6               	goto	l4854
  4294  005378                     u5930:
  4295                           
  4296                           ;ff.c: 545:  return *str;
  4297  005378  C001  FFF6         	movff	chk_chr@str,tblptrl
  4298  00537C  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4299  005380                     	if	0	;tblptru may be non-zero
  4300  005380                     	endif
  4301  005380                     	if	0	;tblptru may be non-zero
  4302  005380                     	endif
  4303  005380  0008               	tblrd		*
  4304  005382  50F5               	movf	tablat,w,c
  4305  005384  6E01               	movwf	?_chk_chr,c
  4306  005386  6A02               	clrf	?_chk_chr+1,c
  4307  005388  0012               	return		;funcret
  4308  00538A                     __end_of_chk_chr:
  4309                           	opt callstack 0
  4310                           
  4311 ;; *************** function _dir_register *****************
  4312 ;; Defined at:
  4313 ;;		line 1578 in file "ff.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  dp              2   42[BANK0 ] PTR struct .
  4316 ;;		 -> f_open@dj(22), 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  res             1   44[BANK0 ] enum E93
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      enum E93
  4321 ;; Registers used:
  4322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4328 ;;      Params:         0       2       0       0       0       0       0       0       0
  4329 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4330 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4331 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4332 ;;Total ram usage:        3 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:   12
  4335 ;; This function calls:
  4336 ;;		_dir_alloc
  4337 ;;		_mem_cpy
  4338 ;;		_mem_set
  4339 ;;		_move_window
  4340 ;; This function is called by:
  4341 ;;		_f_open
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text10
  4346  004A50                     __ptext10:
  4347                           	opt callstack 0
  4348  004A50                     _dir_register:
  4349                           	opt callstack 17
  4350                           
  4351                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4352                           
  4353                           ;incstack = 0
  4354  004A50  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4355  004A54  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4356  004A58  0E00               	movlw	0
  4357  004A5A  0100               	movlb	0	; () banked
  4358  004A5C  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4359  004A5E  0E01               	movlw	1
  4360  004A60  6F82               	movwf	dir_alloc@nent& (0+255),b
  4361  004A62  EC55  F023         	call	_dir_alloc	;wreg free
  4362  004A66  0100               	movlb	0	; () banked
  4363  004A68  6F8C               	movwf	dir_register@res& (0+255),b
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;ff.c: 1632:  if (res == FR_OK) {
  4367  004A6A  518C               	movf	dir_register@res& (0+255),w,b
  4368  004A6C  A4D8               	btfss	status,2,c
  4369  004A6E  D058               	goto	l5570
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4373  004A70  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4374  004A74  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4375  004A78  CFDE F030          	movff	postinc2,move_window@fs
  4376  004A7C  CFDD F031          	movff	postdec2,move_window@fs+1
  4377  004A80  EE20 F00E          	lfsr	2,14
  4378  004A84  518A               	movf	dir_register@dp& (0+255),w,b
  4379  004A86  26D9               	addwf	fsr2l,f,c
  4380  004A88  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4381  004A8A  22DA               	addwfc	fsr2h,f,c
  4382  004A8C  CFDE F032          	movff	postinc2,move_window@sector
  4383  004A90  CFDE F033          	movff	postinc2,move_window@sector+1
  4384  004A94  CFDE F034          	movff	postinc2,move_window@sector+2
  4385  004A98  CFDE F035          	movff	postinc2,move_window@sector+3
  4386  004A9C  EC71  F027         	call	_move_window	;wreg free
  4387  004AA0  0100               	movlb	0	; () banked
  4388  004AA2  6F8C               	movwf	dir_register@res& (0+255),b
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;ff.c: 1634:   if (res == FR_OK) {
  4392  004AA4  518C               	movf	dir_register@res& (0+255),w,b
  4393  004AA6  A4D8               	btfss	status,2,c
  4394  004AA8  D03B               	goto	l5570
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4398  004AAA  EE20 F012          	lfsr	2,18
  4399  004AAE  518A               	movf	dir_register@dp& (0+255),w,b
  4400  004AB0  26D9               	addwf	fsr2l,f,c
  4401  004AB2  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4402  004AB4  22DA               	addwfc	fsr2h,f,c
  4403  004AB6  CFDE F001          	movff	postinc2,mem_set@dst
  4404  004ABA  CFDD F002          	movff	postdec2,mem_set@dst+1
  4405  004ABE  0E00               	movlw	0
  4406  004AC0  6E04               	movwf	mem_set@val+1,c
  4407  004AC2  0E00               	movlw	0
  4408  004AC4  6E03               	movwf	mem_set@val,c
  4409  004AC6  0E00               	movlw	0
  4410  004AC8  6E06               	movwf	mem_set@cnt+1,c
  4411  004ACA  0E20               	movlw	32
  4412  004ACC  6E05               	movwf	mem_set@cnt,c
  4413  004ACE  EC77  F02A         	call	_mem_set	;wreg free
  4414                           
  4415                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4416  004AD2  0100               	movlb	0	; () banked
  4417  004AD4  EE20 F012          	lfsr	2,18
  4418  004AD8  518A               	movf	dir_register@dp& (0+255),w,b
  4419  004ADA  26D9               	addwf	fsr2l,f,c
  4420  004ADC  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4421  004ADE  22DA               	addwfc	fsr2h,f,c
  4422  004AE0  CFDE F001          	movff	postinc2,mem_cpy@dst
  4423  004AE4  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4424  004AE8  EE20 F014          	lfsr	2,20
  4425  004AEC  518A               	movf	dir_register@dp& (0+255),w,b
  4426  004AEE  26D9               	addwf	fsr2l,f,c
  4427  004AF0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4428  004AF2  22DA               	addwfc	fsr2h,f,c
  4429  004AF4  CFDE F003          	movff	postinc2,mem_cpy@src
  4430  004AF8  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4431  004AFC  0E00               	movlw	0
  4432  004AFE  6E06               	movwf	mem_cpy@cnt+1,c
  4433  004B00  0E0B               	movlw	11
  4434  004B02  6E05               	movwf	mem_cpy@cnt,c
  4435  004B04  EC5F  F026         	call	_mem_cpy	;wreg free
  4436                           
  4437                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4438  004B08  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4439  004B0C  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4440  004B10  EE10 F004          	lfsr	1,4
  4441  004B14  50DE               	movf	postinc2,w,c
  4442  004B16  26E1               	addwf	fsr1l,f,c
  4443  004B18  50DD               	movf	postdec2,w,c
  4444  004B1A  22E2               	addwfc	fsr1h,f,c
  4445  004B1C  0E01               	movlw	1
  4446  004B1E  6EE7               	movwf	indf1,c
  4447  004B20                     l5570:
  4448                           
  4449                           ;ff.c: 1644:  return res;
  4450  004B20  0100               	movlb	0	; () banked
  4451  004B22  518C               	movf	dir_register@res& (0+255),w,b
  4452                           
  4453                           ; BSR set to: 0
  4454  004B24  0012               	return		;funcret
  4455  004B26                     __end_of_dir_register:
  4456                           	opt callstack 0
  4457                           
  4458 ;; *************** function _mem_cpy *****************
  4459 ;; Defined at:
  4460 ;;		line 507 in file "ff.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;  dst             2    0[COMRAM] PTR void 
  4463 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4464 ;;  src             2    2[COMRAM] PTR const void 
  4465 ;;		 -> f_open@sfn(12), NULL(0), STR_4(16), FatFs(558), 
  4466 ;;  cnt             2    4[COMRAM] unsigned short 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4469 ;;		 -> f_open@sfn(12), NULL(0), STR_4(16), FatFs(558), 
  4470 ;;  d               2    8[COMRAM] PTR unsigned char 
  4471 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;                  1    wreg      void 
  4474 ;; Registers used:
  4475 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4481 ;;      Params:         6       0       0       0       0       0       0       0       0
  4482 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4483 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4484 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4485 ;;Total ram usage:       12 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; This function calls:
  4488 ;;		Nothing
  4489 ;; This function is called by:
  4490 ;;		_dir_register
  4491 ;;		_f_write
  4492 ;;		_f_read
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text11
  4497  004CBE                     __ptext11:
  4498                           	opt callstack 0
  4499  004CBE                     _mem_cpy:
  4500                           	opt callstack 29
  4501                           
  4502                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;incstack = 0
  4506  004CBE  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4507  004CC2  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4508                           
  4509                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4510  004CC6  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4511  004CCA  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4512                           
  4513                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4514  004CCE  D02B               	goto	l5148
  4515  004CD0                     l5140:
  4516                           
  4517                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4518  004CD0  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4519  004CD4  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4520  004CD8  6AF8               	clrf	tblptru,c
  4521  004CDA  0E07               	movlw	(high __ramtop+-1)
  4522  004CDC  64F7               	cpfsgt	tblptrh,c
  4523  004CDE  D007               	bra	u6457
  4524  004CE0  0009               	tblrd		*+
  4525  004CE2  CFF5 F007          	movff	tablat,??_mem_cpy
  4526  004CE6  0009               	tblrd		*+
  4527  004CE8  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4528  004CEC  D008               	bra	u6450
  4529  004CEE                     u6457:
  4530  004CEE  CFF6 FFE9          	movff	tblptrl,fsr0l
  4531  004CF2  CFF7 FFEA          	movff	tblptrh,fsr0h
  4532  004CF6  CFEE F007          	movff	postinc0,??_mem_cpy
  4533  004CFA  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4534  004CFE                     u6450:
  4535  004CFE  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4536  004D02  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4537  004D06  C007  FFDE         	movff	??_mem_cpy,postinc2
  4538  004D0A  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4539                           
  4540                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4541  004D0E  0E02               	movlw	2
  4542  004D10  2609               	addwf	mem_cpy@d,f,c
  4543  004D12  0E00               	movlw	0
  4544  004D14  220A               	addwfc	mem_cpy@d+1,f,c
  4545  004D16  0E02               	movlw	2
  4546  004D18  260B               	addwf	mem_cpy@s,f,c
  4547  004D1A  0E00               	movlw	0
  4548  004D1C  220C               	addwfc	mem_cpy@s+1,f,c
  4549                           
  4550                           ;ff.c: 515:   cnt -= sizeof (int);
  4551  004D1E  0E02               	movlw	2
  4552  004D20  5E05               	subwf	mem_cpy@cnt,f,c
  4553  004D22  0E00               	movlw	0
  4554  004D24  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4555  004D26                     l5148:
  4556                           
  4557                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4558  004D26  5006               	movf	mem_cpy@cnt+1,w,c
  4559  004D28  E1D3               	bnz	l5140
  4560  004D2A  0E02               	movlw	2
  4561  004D2C  5C05               	subwf	mem_cpy@cnt,w,c
  4562  004D2E  A0D8               	btfss	status,0,c
  4563  004D30  D01A               	goto	l5156
  4564  004D32  D7CE               	goto	l5140
  4565  004D34                     l5150:
  4566                           
  4567                           ;ff.c: 519:   *d++ = *s++;
  4568  004D34  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4569  004D38  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4570  004D3C  6AF8               	clrf	tblptru,c
  4571  004D3E  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4572  004D42  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4573  004D46  0E07               	movlw	(high __ramtop+-1)
  4574  004D48  64F7               	cpfsgt	tblptrh,c
  4575  004D4A  D003               	bra	u6477
  4576  004D4C  0008               	tblrd		*
  4577  004D4E  50F5               	movf	tablat,w,c
  4578  004D50  D005               	bra	u6470
  4579  004D52                     u6477:
  4580  004D52  CFF6 FFE9          	movff	tblptrl,fsr0l
  4581  004D56  CFF7 FFEA          	movff	tblptrh,fsr0h
  4582  004D5A  50EF               	movf	indf0,w,c
  4583  004D5C                     u6470:
  4584  004D5C  6EDF               	movwf	indf2,c
  4585  004D5E  4A0B               	infsnz	mem_cpy@s,f,c
  4586  004D60  2A0C               	incf	mem_cpy@s+1,f,c
  4587  004D62  4A09               	infsnz	mem_cpy@d,f,c
  4588  004D64  2A0A               	incf	mem_cpy@d+1,f,c
  4589  004D66                     l5156:
  4590                           
  4591                           ;ff.c: 518:  while (cnt--)
  4592  004D66  0605               	decf	mem_cpy@cnt,f,c
  4593  004D68  A0D8               	btfss	status,0,c
  4594  004D6A  0606               	decf	mem_cpy@cnt+1,f,c
  4595  004D6C  2805               	incf	mem_cpy@cnt,w,c
  4596  004D6E  E1E2               	bnz	l5150
  4597  004D70  2806               	incf	mem_cpy@cnt+1,w,c
  4598  004D72  B4D8               	btfsc	status,2,c
  4599  004D74  0012               	return	
  4600  004D76  D7DE               	goto	l5150
  4601  004D78                     __end_of_mem_cpy:
  4602                           	opt callstack 0
  4603                           
  4604 ;; *************** function _dir_alloc *****************
  4605 ;; Defined at:
  4606 ;;		line 1199 in file "ff.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  dp              2   32[BANK0 ] PTR struct .
  4609 ;;		 -> f_open@dj(22), 
  4610 ;;  nent            2   34[BANK0 ] unsigned short 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  n               2   39[BANK0 ] unsigned short 
  4613 ;;  res             1   41[BANK0 ] enum E93
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      enum E93
  4616 ;; Registers used:
  4617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4623 ;;      Params:         0       4       0       0       0       0       0       0       0
  4624 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4625 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4626 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4627 ;;Total ram usage:       10 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:   11
  4630 ;; This function calls:
  4631 ;;		_dir_next
  4632 ;;		_dir_sdi
  4633 ;;		_move_window
  4634 ;; This function is called by:
  4635 ;;		_dir_register
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text12
  4640  0046AA                     __ptext12:
  4641                           	opt callstack 0
  4642  0046AA                     _dir_alloc:
  4643                           	opt callstack 17
  4644                           
  4645                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4646                           
  4647                           ;incstack = 0
  4648  0046AA  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4649  0046AE  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4650  0046B2  0E00               	movlw	0
  4651  0046B4  6E59               	movwf	dir_sdi@idx+1,c
  4652  0046B6  0E00               	movlw	0
  4653  0046B8  6E58               	movwf	dir_sdi@idx,c
  4654  0046BA  EC26  F01B         	call	_dir_sdi	;wreg free
  4655  0046BE  0100               	movlb	0	; () banked
  4656  0046C0  6F89               	movwf	dir_alloc@res& (0+255),b
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;ff.c: 1209:  if (res == FR_OK) {
  4660  0046C2  5189               	movf	dir_alloc@res& (0+255),w,b
  4661  0046C4  A4D8               	btfss	status,2,c
  4662  0046C6  D061               	goto	u6580
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;ff.c: 1210:   n = 0;
  4666  0046C8  0E00               	movlw	0
  4667  0046CA  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4668  0046CC  0E00               	movlw	0
  4669  0046CE  6F87               	movwf	dir_alloc@n& (0+255),b
  4670  0046D0                     l5196:
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4674  0046D0  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4675  0046D4  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4676  0046D8  CFDE F030          	movff	postinc2,move_window@fs
  4677  0046DC  CFDD F031          	movff	postdec2,move_window@fs+1
  4678  0046E0  EE20 F00E          	lfsr	2,14
  4679  0046E4  5180               	movf	dir_alloc@dp& (0+255),w,b
  4680  0046E6  26D9               	addwf	fsr2l,f,c
  4681  0046E8  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4682  0046EA  22DA               	addwfc	fsr2h,f,c
  4683  0046EC  CFDE F032          	movff	postinc2,move_window@sector
  4684  0046F0  CFDE F033          	movff	postinc2,move_window@sector+1
  4685  0046F4  CFDE F034          	movff	postinc2,move_window@sector+2
  4686  0046F8  CFDE F035          	movff	postinc2,move_window@sector+3
  4687  0046FC  EC71  F027         	call	_move_window	;wreg free
  4688  004700  0100               	movlb	0	; () banked
  4689  004702  6F89               	movwf	dir_alloc@res& (0+255),b
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;ff.c: 1213:    if (res != FR_OK) break;
  4693  004704  5189               	movf	dir_alloc@res& (0+255),w,b
  4694  004706  A4D8               	btfss	status,2,c
  4695  004708  D040               	goto	u6580
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4699  00470A  EE20 F012          	lfsr	2,18
  4700  00470E  5180               	movf	dir_alloc@dp& (0+255),w,b
  4701  004710  26D9               	addwf	fsr2l,f,c
  4702  004712  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4703  004714  22DA               	addwfc	fsr2h,f,c
  4704  004716  CFDE F084          	movff	postinc2,??_dir_alloc
  4705  00471A  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4706  00471E  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4707  004722  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4708  004726  0EE5               	movlw	229
  4709  004728  18DE               	xorwf	postinc2,w,c
  4710  00472A  B4D8               	btfsc	status,2,c
  4711  00472C  D011               	goto	u6560
  4712                           
  4713                           ; BSR set to: 0
  4714  00472E  EE20 F012          	lfsr	2,18
  4715  004732  5180               	movf	dir_alloc@dp& (0+255),w,b
  4716  004734  26D9               	addwf	fsr2l,f,c
  4717  004736  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4718  004738  22DA               	addwfc	fsr2h,f,c
  4719  00473A  CFDE F084          	movff	postinc2,??_dir_alloc
  4720  00473E  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4721  004742  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4722  004746  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4723  00474A  50DF               	movf	indf2,w,c
  4724  00474C  A4D8               	btfss	status,2,c
  4725  00474E  D00A               	goto	l5210
  4726  004750                     u6560:
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;ff.c: 1215:     if (++n == nent) break;
  4730  004750  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  4731  004752  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  4732  004754  5182               	movf	dir_alloc@nent& (0+255),w,b
  4733  004756  1987               	xorwf	dir_alloc@n& (0+255),w,b
  4734  004758  E109               	bnz	l5212
  4735  00475A  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  4736  00475C  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  4737  00475E  B4D8               	btfsc	status,2,c
  4738  004760  D014               	goto	u6580
  4739  004762  D004               	goto	l5212
  4740  004764                     l5210:
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;ff.c: 1217:     n = 0;
  4744  004764  0E00               	movlw	0
  4745  004766  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4746  004768  0E00               	movlw	0
  4747  00476A  6F87               	movwf	dir_alloc@n& (0+255),b
  4748  00476C                     l5212:
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;ff.c: 1219:    res = dir_next(dp, 1);
  4752  00476C  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  4753  004770  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  4754  004774  0E00               	movlw	0
  4755  004776  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4756  004778  0E01               	movlw	1
  4757  00477A  6F6F               	movwf	dir_next@stretch& (0+255),b
  4758  00477C  EC0A  F014         	call	_dir_next	;wreg free
  4759  004780  0100               	movlb	0	; () banked
  4760  004782  6F89               	movwf	dir_alloc@res& (0+255),b
  4761                           
  4762                           ; BSR set to: 0
  4763                           ;ff.c: 1220:   } while (res == FR_OK);
  4764  004784  5189               	movf	dir_alloc@res& (0+255),w,b
  4765  004786  B4D8               	btfsc	status,2,c
  4766  004788  D7A3               	goto	l5196
  4767  00478A                     u6580:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  4771  00478A  0E04               	movlw	4
  4772  00478C  1989               	xorwf	dir_alloc@res& (0+255),w,b
  4773  00478E  A4D8               	btfss	status,2,c
  4774  004790  D002               	goto	l494
  4775                           
  4776                           ; BSR set to: 0
  4777  004792  0E07               	movlw	7
  4778  004794  6F89               	movwf	dir_alloc@res& (0+255),b
  4779  004796                     l494:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;ff.c: 1223:  return res;
  4783  004796  5189               	movf	dir_alloc@res& (0+255),w,b
  4784                           
  4785                           ; BSR set to: 0
  4786  004798  0012               	return		;funcret
  4787  00479A                     __end_of_dir_alloc:
  4788                           	opt callstack 0
  4789                           
  4790 ;; *************** function _dir_sdi *****************
  4791 ;; Defined at:
  4792 ;;		line 1080 in file "ff.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  dp              2   85[COMRAM] PTR struct .
  4795 ;;		 -> f_open@dj(22), 
  4796 ;;  idx             2   87[COMRAM] unsigned short 
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;  clst            4   13[BANK0 ] unsigned long 
  4799 ;;  sect            4    9[BANK0 ] unsigned long 
  4800 ;;  ic              2    7[BANK0 ] unsigned short 
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  1    wreg      enum E93
  4803 ;; Registers used:
  4804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4810 ;;      Params:         4       0       0       0       0       0       0       0       0
  4811 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4812 ;;      Temps:          0       7       0       0       0       0       0       0       0
  4813 ;;      Totals:         4      17       0       0       0       0       0       0       0
  4814 ;;Total ram usage:       21 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    9
  4817 ;; This function calls:
  4818 ;;		_clust2sect
  4819 ;;		_get_fat
  4820 ;; This function is called by:
  4821 ;;		_dir_alloc
  4822 ;;		_dir_find
  4823 ;;		_follow_path
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text13
  4828  00364C                     __ptext13:
  4829                           	opt callstack 0
  4830  00364C                     _dir_sdi:
  4831                           	opt callstack 19
  4832                           
  4833                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;incstack = 0
  4837  00364C  EE20 F004          	lfsr	2,4
  4838  003650  5056               	movf	dir_sdi@dp,w,c
  4839  003652  26D9               	addwf	fsr2l,f,c
  4840  003654  5057               	movf	dir_sdi@dp+1,w,c
  4841  003656  22DA               	addwfc	fsr2h,f,c
  4842  003658  C058  FFDE         	movff	dir_sdi@idx,postinc2
  4843  00365C  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  4844                           
  4845                           ;ff.c: 1090:  clst = dp->sclust;
  4846  003660  EE20 F006          	lfsr	2,6
  4847  003664  5056               	movf	dir_sdi@dp,w,c
  4848  003666  26D9               	addwf	fsr2l,f,c
  4849  003668  5057               	movf	dir_sdi@dp+1,w,c
  4850  00366A  22DA               	addwfc	fsr2h,f,c
  4851  00366C  CFDE F06D          	movff	postinc2,dir_sdi@clst
  4852  003670  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  4853  003674  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  4854  003678  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  4855                           
  4856                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  4857  00367C  0100               	movlb	0	; () banked
  4858  00367E  056D               	decf	dir_sdi@clst& (0+255),w,b
  4859  003680  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4860  003682  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4861  003684  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4862  003686  B4D8               	btfsc	status,2,c
  4863  003688  D014               	goto	u5950
  4864                           
  4865                           ; BSR set to: 0
  4866  00368A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4867  00368E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4868  003692  EE10 F012          	lfsr	1,18
  4869  003696  50DE               	movf	postinc2,w,c
  4870  003698  26E1               	addwf	fsr1l,f,c
  4871  00369A  50DD               	movf	postdec2,w,c
  4872  00369C  22E2               	addwfc	fsr1h,f,c
  4873  00369E  50E6               	movf	postinc1,w,c
  4874  0036A0  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  4875  0036A2  50E6               	movf	postinc1,w,c
  4876  0036A4  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  4877  0036A6  50E6               	movf	postinc1,w,c
  4878  0036A8  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  4879  0036AA  50E6               	movf	postinc1,w,c
  4880  0036AC  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  4881  0036AE  A0D8               	btfss	status,0,c
  4882  0036B0  D002               	goto	l4874
  4883  0036B2                     u5950:
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;ff.c: 1092:   return FR_INT_ERR;
  4887  0036B2  0E02               	movlw	2
  4888  0036B4  0012               	return	
  4889  0036B6                     l4874:
  4890                           
  4891                           ; BSR set to: 0
  4892                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  4893  0036B6  516D               	movf	dir_sdi@clst& (0+255),w,b
  4894  0036B8  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4895  0036BA  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4896  0036BC  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4897  0036BE  A4D8               	btfss	status,2,c
  4898  0036C0  D022               	goto	l4880
  4899                           
  4900                           ; BSR set to: 0
  4901  0036C2  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4902  0036C6  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4903  0036CA  CFDE F060          	movff	postinc2,??_dir_sdi
  4904  0036CE  CFDD F061          	movff	postdec2,??_dir_sdi+1
  4905  0036D2  C060  FFD9         	movff	??_dir_sdi,fsr2l
  4906  0036D6  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  4907  0036DA  0E03               	movlw	3
  4908  0036DC  18DE               	xorwf	postinc2,w,c
  4909  0036DE  A4D8               	btfss	status,2,c
  4910  0036E0  D012               	goto	l4880
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  4914  0036E2  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4915  0036E6  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4916  0036EA  EE10 F022          	lfsr	1,34
  4917  0036EE  50DE               	movf	postinc2,w,c
  4918  0036F0  26E1               	addwf	fsr1l,f,c
  4919  0036F2  50DD               	movf	postdec2,w,c
  4920  0036F4  22E2               	addwfc	fsr1h,f,c
  4921  0036F6  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  4922  0036FA  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  4923  0036FE  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  4924  003702  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  4925  003706                     l4880:
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;ff.c: 1096:  if (clst == 0) {
  4929  003706  516D               	movf	dir_sdi@clst& (0+255),w,b
  4930  003708  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4931  00370A  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4932  00370C  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4933  00370E  A4D8               	btfss	status,2,c
  4934  003710  D023               	goto	l4890
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  4938  003712  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4939  003716  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4940  00371A  EE10 F008          	lfsr	1,8
  4941  00371E  50DE               	movf	postinc2,w,c
  4942  003720  26E1               	addwf	fsr1l,f,c
  4943  003722  50DD               	movf	postdec2,w,c
  4944  003724  22E2               	addwfc	fsr1h,f,c
  4945  003726  50E6               	movf	postinc1,w,c
  4946  003728  5C58               	subwf	dir_sdi@idx,w,c
  4947  00372A  50E6               	movf	postinc1,w,c
  4948  00372C  5859               	subwfb	dir_sdi@idx+1,w,c
  4949  00372E  B0D8               	btfsc	status,0,c
  4950  003730  D7C0               	goto	u5950
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  4954  003732  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4955  003736  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4956  00373A  EE10 F022          	lfsr	1,34
  4957  00373E  50DE               	movf	postinc2,w,c
  4958  003740  26E1               	addwf	fsr1l,f,c
  4959  003742  50DD               	movf	postdec2,w,c
  4960  003744  22E2               	addwfc	fsr1h,f,c
  4961  003746  CFE6 F069          	movff	postinc1,dir_sdi@sect
  4962  00374A  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  4963  00374E  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  4964  003752  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  4965                           
  4966                           ;ff.c: 1100:  }
  4967  003756  D079               	goto	l4912
  4968  003758                     l4890:
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  4972  003758  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4973  00375C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4974  003760  EE10 F002          	lfsr	1,2
  4975  003764  50DE               	movf	postinc2,w,c
  4976  003766  26E1               	addwf	fsr1l,f,c
  4977  003768  50DD               	movf	postdec2,w,c
  4978  00376A  22E2               	addwfc	fsr1h,f,c
  4979  00376C  50E7               	movf	indf1,w,c
  4980  00376E  6F60               	movwf	??_dir_sdi& (0+255),b
  4981  003770  5160               	movf	??_dir_sdi& (0+255),w,b
  4982  003772  0D10               	mullw	16
  4983  003774  CFF3 F067          	movff	prodl,dir_sdi@ic
  4984  003778  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  4985                           
  4986                           ;ff.c: 1103:   while (idx >= ic) {
  4987  00377C  D046               	goto	l452
  4988  00377E                     l4892:
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  4992  00377E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4993  003782  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4994  003786  CFDE F03B          	movff	postinc2,get_fat@fs
  4995  00378A  CFDD F03C          	movff	postdec2,get_fat@fs+1
  4996  00378E  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  4997  003792  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  4998  003796  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  4999  00379A  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5000  00379E  EC0D  F016         	call	_get_fat	;wreg free
  5001  0037A2  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5002  0037A6  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5003  0037AA  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5004  0037AE  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5005                           
  5006                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5007  0037B2  0100               	movlb	0	; () banked
  5008  0037B4  296D               	incf	dir_sdi@clst& (0+255),w,b
  5009  0037B6  E109               	bnz	l4900
  5010  0037B8  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5011  0037BA  E107               	bnz	l4900
  5012  0037BC  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5013  0037BE  E105               	bnz	l4900
  5014  0037C0  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5015  0037C2  A4D8               	btfss	status,2,c
  5016  0037C4  D002               	goto	l4900
  5017                           
  5018                           ; BSR set to: 0
  5019  0037C6  0E01               	movlw	1
  5020  0037C8  0012               	return	
  5021  0037CA                     l4900:
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5025  0037CA  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5026  0037CC  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5027  0037CE  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5028  0037D0  E104               	bnz	u6010
  5029  0037D2  0E02               	movlw	2
  5030  0037D4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5031  0037D6  A0D8               	btfss	status,0,c
  5032  0037D8  D76C               	goto	u5950
  5033  0037DA                     u6010:
  5034                           
  5035                           ; BSR set to: 0
  5036  0037DA  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5037  0037DE  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5038  0037E2  EE10 F012          	lfsr	1,18
  5039  0037E6  50DE               	movf	postinc2,w,c
  5040  0037E8  26E1               	addwf	fsr1l,f,c
  5041  0037EA  50DD               	movf	postdec2,w,c
  5042  0037EC  22E2               	addwfc	fsr1h,f,c
  5043  0037EE  50E6               	movf	postinc1,w,c
  5044  0037F0  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5045  0037F2  50E6               	movf	postinc1,w,c
  5046  0037F4  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5047  0037F6  50E6               	movf	postinc1,w,c
  5048  0037F8  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5049  0037FA  50E6               	movf	postinc1,w,c
  5050  0037FC  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5051  0037FE  B0D8               	btfsc	status,0,c
  5052  003800  D758               	goto	u5950
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;ff.c: 1108:    idx -= ic;
  5056  003802  5167               	movf	dir_sdi@ic& (0+255),w,b
  5057  003804  5E58               	subwf	dir_sdi@idx,f,c
  5058  003806  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5059  003808  5A59               	subwfb	dir_sdi@idx+1,f,c
  5060  00380A                     l452:
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;ff.c: 1103:   while (idx >= ic) {
  5064  00380A  5167               	movf	dir_sdi@ic& (0+255),w,b
  5065  00380C  5C58               	subwf	dir_sdi@idx,w,c
  5066  00380E  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5067  003810  5859               	subwfb	dir_sdi@idx+1,w,c
  5068  003812  B0D8               	btfsc	status,0,c
  5069  003814  D7B4               	goto	l4892
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5073  003816  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5074  00381A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5075  00381E  CFDE F00D          	movff	postinc2,clust2sect@fs
  5076  003822  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5077  003826  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5078  00382A  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5079  00382E  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5080  003832  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5081  003836  ECBC  F026         	call	_clust2sect	;wreg free
  5082  00383A  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5083  00383E  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5084  003842  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5085  003846  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5086  00384A                     l4912:
  5087                           
  5088                           ;ff.c: 1112:  dp->clust = clst;
  5089  00384A  EE20 F00A          	lfsr	2,10
  5090  00384E  5056               	movf	dir_sdi@dp,w,c
  5091  003850  26D9               	addwf	fsr2l,f,c
  5092  003852  5057               	movf	dir_sdi@dp+1,w,c
  5093  003854  22DA               	addwfc	fsr2h,f,c
  5094  003856  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5095  00385A  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5096  00385E  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5097  003862  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5098                           
  5099                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5100  003866  0100               	movlb	0	; () banked
  5101  003868  5169               	movf	dir_sdi@sect& (0+255),w,b
  5102  00386A  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5103  00386C  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5104  00386E  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5105  003870  B4D8               	btfsc	status,2,c
  5106  003872  D71F               	goto	u5950
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5110  003874  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5111  003878  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5112  00387C  0E04               	movlw	4
  5113  00387E  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5114  003880                     u6055:
  5115  003880  90D8               	bcf	status,0,c
  5116  003882  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5117  003884  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5118  003886  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5119  003888  D7FB               	goto	u6055
  5120  00388A  5160               	movf	??_dir_sdi& (0+255),w,b
  5121  00388C  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5122  00388E  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5123  003890  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5124  003892  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5125  003894  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5126  003896  0E00               	movlw	0
  5127  003898  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5128  00389A  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5129  00389C  0E00               	movlw	0
  5130  00389E  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5131  0038A0  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5132  0038A2  EE20 F00E          	lfsr	2,14
  5133  0038A6  5056               	movf	dir_sdi@dp,w,c
  5134  0038A8  26D9               	addwf	fsr2l,f,c
  5135  0038AA  5057               	movf	dir_sdi@dp+1,w,c
  5136  0038AC  22DA               	addwfc	fsr2h,f,c
  5137  0038AE  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5138  0038B2  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5139  0038B6  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5140  0038BA  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5141                           
  5142                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5143  0038BE  0E0F               	movlw	15
  5144  0038C0  1458               	andwf	dir_sdi@idx,w,c
  5145  0038C2  6F60               	movwf	??_dir_sdi& (0+255),b
  5146  0038C4  0E00               	movlw	0
  5147  0038C6  1459               	andwf	dir_sdi@idx+1,w,c
  5148  0038C8  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5149  0038CA  0E05               	movlw	5
  5150  0038CC                     u6065:
  5151  0038CC  90D8               	bcf	status,0,c
  5152  0038CE  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5153  0038D0  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5154  0038D2  2EE8               	decfsz	wreg,f,c
  5155  0038D4  D7FB               	goto	u6065
  5156  0038D6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5157  0038DA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5158  0038DE  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5159  0038E2  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5160  0038E6  5160               	movf	??_dir_sdi& (0+255),w,b
  5161  0038E8  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5162  0038EA  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5163  0038EC  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5164  0038EE  0E2E               	movlw	46
  5165  0038F0  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5166  0038F2  0E00               	movlw	0
  5167  0038F4  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5168  0038F6  EE20 F012          	lfsr	2,18
  5169  0038FA  5056               	movf	dir_sdi@dp,w,c
  5170  0038FC  26D9               	addwf	fsr2l,f,c
  5171  0038FE  5057               	movf	dir_sdi@dp+1,w,c
  5172  003900  22DA               	addwfc	fsr2h,f,c
  5173  003902  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5174  003906  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;ff.c: 1117:  return FR_OK;
  5178  00390A  0E00               	movlw	0
  5179                           
  5180                           ; BSR set to: 0
  5181  00390C  0012               	return		;funcret
  5182  00390E                     __end_of_dir_sdi:
  5183                           	opt callstack 0
  5184                           
  5185 ;; *************** function _dir_next *****************
  5186 ;; Defined at:
  5187 ;;		line 1128 in file "ff.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;  dp              2   13[BANK0 ] PTR struct .
  5190 ;;		 -> f_open@dj(22), 
  5191 ;;  stretch         2   15[BANK0 ] int 
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  clst            4   28[BANK0 ] unsigned long 
  5194 ;;  i               2   26[BANK0 ] unsigned short 
  5195 ;;  c               2   24[BANK0 ] unsigned short 
  5196 ;; Return value:  Size  Location     Type
  5197 ;;                  1    wreg      enum E93
  5198 ;; Registers used:
  5199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5205 ;;      Params:         0       4       0       0       0       0       0       0       0
  5206 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5207 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5208 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5209 ;;Total ram usage:       19 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:   10
  5212 ;; This function calls:
  5213 ;;		_clust2sect
  5214 ;;		_create_chain
  5215 ;;		_get_fat
  5216 ;;		_mem_set
  5217 ;;		_sync_window
  5218 ;; This function is called by:
  5219 ;;		_dir_alloc
  5220 ;;		_dir_find
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text14
  5225  002814                     __ptext14:
  5226                           	opt callstack 0
  5227  002814                     _dir_next:
  5228                           	opt callstack 17
  5229                           
  5230                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;incstack = 0
  5234  002814  0100               	movlb	0	; () banked
  5235  002816  EE20 F004          	lfsr	2,4
  5236  00281A  516D               	movf	dir_next@dp& (0+255),w,b
  5237  00281C  26D9               	addwf	fsr2l,f,c
  5238  00281E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5239  002820  22DA               	addwfc	fsr2h,f,c
  5240  002822  CFDE F071          	movff	postinc2,??_dir_next
  5241  002826  CFDD F072          	movff	postdec2,??_dir_next+1
  5242  00282A  0E01               	movlw	1
  5243  00282C  2571               	addwf	??_dir_next& (0+255),w,b
  5244  00282E  6F7A               	movwf	dir_next@i& (0+255),b
  5245  002830  0E00               	movlw	0
  5246  002832  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5247  002834  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5251  002836  517A               	movf	dir_next@i& (0+255),w,b
  5252  002838  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5253  00283A  B4D8               	btfsc	status,2,c
  5254  00283C  D00C               	goto	u6080
  5255                           
  5256                           ; BSR set to: 0
  5257  00283E  EE20 F00E          	lfsr	2,14
  5258  002842  516D               	movf	dir_next@dp& (0+255),w,b
  5259  002844  26D9               	addwf	fsr2l,f,c
  5260  002846  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5261  002848  22DA               	addwfc	fsr2h,f,c
  5262  00284A  50DE               	movf	postinc2,w,c
  5263  00284C  10DE               	iorwf	postinc2,w,c
  5264  00284E  10DE               	iorwf	postinc2,w,c
  5265  002850  10DE               	iorwf	postinc2,w,c
  5266  002852  A4D8               	btfss	status,2,c
  5267  002854  D002               	goto	l4936
  5268  002856                     u6080:
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;ff.c: 1142:   return FR_NO_FILE;
  5272  002856  0E04               	movlw	4
  5273  002858  0012               	return	
  5274  00285A                     l4936:
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5278  00285A  0E0F               	movlw	15
  5279  00285C  157A               	andwf	dir_next@i& (0+255),w,b
  5280  00285E  6F71               	movwf	??_dir_next& (0+255),b
  5281  002860  0E00               	movlw	0
  5282  002862  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5283  002864  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5284  002866  5171               	movf	??_dir_next& (0+255),w,b
  5285  002868  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5286  00286A  A4D8               	btfss	status,2,c
  5287  00286C  D1A4               	goto	l5022
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;ff.c: 1145:   dp->sect++;
  5291  00286E  EE20 F00E          	lfsr	2,14
  5292  002872  516D               	movf	dir_next@dp& (0+255),w,b
  5293  002874  26D9               	addwf	fsr2l,f,c
  5294  002876  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5295  002878  22DA               	addwfc	fsr2h,f,c
  5296  00287A  2ADE               	incf	postinc2,f,c
  5297  00287C  0E00               	movlw	0
  5298  00287E  22DE               	addwfc	postinc2,f,c
  5299  002880  22DE               	addwfc	postinc2,f,c
  5300  002882  22DE               	addwfc	postinc2,f,c
  5301                           
  5302                           ;ff.c: 1147:   if (!dp->clust) {
  5303  002884  EE20 F00A          	lfsr	2,10
  5304  002888  516D               	movf	dir_next@dp& (0+255),w,b
  5305  00288A  26D9               	addwf	fsr2l,f,c
  5306  00288C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5307  00288E  22DA               	addwfc	fsr2h,f,c
  5308  002890  50DE               	movf	postinc2,w,c
  5309  002892  10DE               	iorwf	postinc2,w,c
  5310  002894  10DE               	iorwf	postinc2,w,c
  5311  002896  10DE               	iorwf	postinc2,w,c
  5312  002898  A4D8               	btfss	status,2,c
  5313  00289A  D011               	goto	l4946
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5317  00289C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5318  0028A0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5319  0028A4  EE10 F008          	lfsr	1,8
  5320  0028A8  50DE               	movf	postinc2,w,c
  5321  0028AA  26E1               	addwf	fsr1l,f,c
  5322  0028AC  50DD               	movf	postdec2,w,c
  5323  0028AE  22E2               	addwfc	fsr1h,f,c
  5324  0028B0  50E6               	movf	postinc1,w,c
  5325  0028B2  5D7A               	subwf	dir_next@i& (0+255),w,b
  5326  0028B4  50E6               	movf	postinc1,w,c
  5327  0028B6  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5328  0028B8  B0D8               	btfsc	status,0,c
  5329  0028BA  D7CD               	goto	u6080
  5330  0028BC  D17C               	goto	l5022
  5331  0028BE                     l4946:
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5335  0028BE  C07A  F071         	movff	dir_next@i,??_dir_next
  5336  0028C2  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5337  0028C6  0E04               	movlw	4
  5338  0028C8  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5339  0028CA                     u6125:
  5340  0028CA  90D8               	bcf	status,0,c
  5341  0028CC  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5342  0028CE  3371               	rrcf	??_dir_next& (0+255),f,b
  5343  0028D0  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5344  0028D2  D7FB               	goto	u6125
  5345  0028D4  0EFF               	movlw	255
  5346  0028D6  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5347  0028D8  0EFF               	movlw	255
  5348  0028DA  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5349  0028DC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5350  0028E0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5351  0028E4  EE10 F002          	lfsr	1,2
  5352  0028E8  50DE               	movf	postinc2,w,c
  5353  0028EA  26E1               	addwf	fsr1l,f,c
  5354  0028EC  50DD               	movf	postdec2,w,c
  5355  0028EE  22E2               	addwfc	fsr1h,f,c
  5356  0028F0  50E7               	movf	indf1,w,c
  5357  0028F2  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5358  0028F4  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5359  0028F6  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5360  0028F8  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5361  0028FA  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5362  0028FC  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5363  0028FE  5171               	movf	??_dir_next& (0+255),w,b
  5364  002900  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5365  002902  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5366  002904  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5367  002906  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5368  002908  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5369  00290A  A4D8               	btfss	status,2,c
  5370  00290C  D154               	goto	l5022
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5374  00290E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5375  002912  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5376  002916  CFDE F03B          	movff	postinc2,get_fat@fs
  5377  00291A  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5378  00291E  EE20 F00A          	lfsr	2,10
  5379  002922  516D               	movf	dir_next@dp& (0+255),w,b
  5380  002924  26D9               	addwf	fsr2l,f,c
  5381  002926  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5382  002928  22DA               	addwfc	fsr2h,f,c
  5383  00292A  CFDE F03D          	movff	postinc2,get_fat@clst
  5384  00292E  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5385  002932  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5386  002936  CFDE F040          	movff	postinc2,get_fat@clst+3
  5387  00293A  EC0D  F016         	call	_get_fat	;wreg free
  5388  00293E  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5389  002942  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5390  002946  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5391  00294A  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5392                           
  5393                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5394  00294E  0100               	movlb	0	; () banked
  5395  002950  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5396  002952  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5397  002954  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5398  002956  E106               	bnz	l4956
  5399  002958  0E02               	movlw	2
  5400  00295A  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5401  00295C  B0D8               	btfsc	status,0,c
  5402  00295E  D002               	goto	l4956
  5403  002960                     u6140:
  5404                           
  5405                           ; BSR set to: 0
  5406  002960  0E02               	movlw	2
  5407  002962  0012               	return	
  5408  002964                     l4956:
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5412  002964  297C               	incf	dir_next@clst& (0+255),w,b
  5413  002966  E109               	bnz	l4962
  5414  002968  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5415  00296A  E107               	bnz	l4962
  5416  00296C  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5417  00296E  E105               	bnz	l4962
  5418  002970  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5419  002972  A4D8               	btfss	status,2,c
  5420  002974  D002               	goto	l4962
  5421  002976                     u6150:
  5422  002976  0E01               	movlw	1
  5423  002978  0012               	return	
  5424  00297A                     l4962:
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5428  00297A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5429  00297E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5430  002982  EE10 F012          	lfsr	1,18
  5431  002986  50DE               	movf	postinc2,w,c
  5432  002988  26E1               	addwf	fsr1l,f,c
  5433  00298A  50DD               	movf	postdec2,w,c
  5434  00298C  22E2               	addwfc	fsr1h,f,c
  5435  00298E  50E6               	movf	postinc1,w,c
  5436  002990  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5437  002992  50E6               	movf	postinc1,w,c
  5438  002994  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5439  002996  50E6               	movf	postinc1,w,c
  5440  002998  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5441  00299A  50E6               	movf	postinc1,w,c
  5442  00299C  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5443  00299E  A0D8               	btfss	status,0,c
  5444  0029A0  D0DB               	goto	l5018
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5448  0029A2  516F               	movf	dir_next@stretch& (0+255),w,b
  5449  0029A4  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5450  0029A6  B4D8               	btfsc	status,2,c
  5451  0029A8  D756               	goto	u6080
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5455  0029AA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5456  0029AE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5457  0029B2  CFDE F056          	movff	postinc2,create_chain@fs
  5458  0029B6  CFDD F057          	movff	postdec2,create_chain@fs+1
  5459  0029BA  EE20 F00A          	lfsr	2,10
  5460  0029BE  516D               	movf	dir_next@dp& (0+255),w,b
  5461  0029C0  26D9               	addwf	fsr2l,f,c
  5462  0029C2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5463  0029C4  22DA               	addwfc	fsr2h,f,c
  5464  0029C6  CFDE F058          	movff	postinc2,create_chain@clst
  5465  0029CA  CFDE F059          	movff	postinc2,create_chain@clst+1
  5466  0029CE  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5467  0029D2  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5468  0029D6  ECA9  F019         	call	_create_chain	;wreg free
  5469  0029DA  C056  F07C         	movff	?_create_chain,dir_next@clst
  5470  0029DE  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5471  0029E2  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5472  0029E6  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5473                           
  5474                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5475  0029EA  0100               	movlb	0	; () banked
  5476  0029EC  517C               	movf	dir_next@clst& (0+255),w,b
  5477  0029EE  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5478  0029F0  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5479  0029F2  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5480  0029F4  A4D8               	btfss	status,2,c
  5481  0029F6  D002               	goto	l4978
  5482                           
  5483                           ; BSR set to: 0
  5484  0029F8  0E07               	movlw	7
  5485  0029FA  0012               	return	
  5486  0029FC                     l4978:
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5490  0029FC  057C               	decf	dir_next@clst& (0+255),w,b
  5491  0029FE  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5492  002A00  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5493  002A02  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5494  002A04  B4D8               	btfsc	status,2,c
  5495  002A06  D7AC               	goto	u6140
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5499  002A08  297C               	incf	dir_next@clst& (0+255),w,b
  5500  002A0A  E107               	bnz	l4990
  5501  002A0C  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5502  002A0E  E105               	bnz	l4990
  5503  002A10  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5504  002A12  E103               	bnz	l4990
  5505  002A14  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5506  002A16  B4D8               	btfsc	status,2,c
  5507  002A18  D7AE               	goto	u6150
  5508  002A1A                     l4990:
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5512  002A1A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5513  002A1E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5514  002A22  CFDE F01B          	movff	postinc2,sync_window@fs
  5515  002A26  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5516  002A2A  EC9E  F01F         	call	_sync_window	;wreg free
  5517  002A2E  0900               	iorlw	0
  5518  002A30  A4D8               	btfss	status,2,c
  5519  002A32  D7A1               	goto	u6150
  5520                           
  5521                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5522  002A34  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5523  002A38  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5524  002A3C  CFDE F071          	movff	postinc2,??_dir_next
  5525  002A40  CFDD F072          	movff	postdec2,??_dir_next+1
  5526  002A44  0E2E               	movlw	46
  5527  002A46  0100               	movlb	0	; () banked
  5528  002A48  2571               	addwf	??_dir_next& (0+255),w,b
  5529  002A4A  6E01               	movwf	mem_set@dst,c
  5530  002A4C  0E00               	movlw	0
  5531  002A4E  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5532  002A50  6E02               	movwf	mem_set@dst+1,c
  5533  002A52  0E00               	movlw	0
  5534  002A54  6E04               	movwf	mem_set@val+1,c
  5535  002A56  0E00               	movlw	0
  5536  002A58  6E03               	movwf	mem_set@val,c
  5537  002A5A  0E02               	movlw	2
  5538  002A5C  6E06               	movwf	mem_set@cnt+1,c
  5539  002A5E  0E00               	movlw	0
  5540  002A60  6E05               	movwf	mem_set@cnt,c
  5541  002A62  EC77  F02A         	call	_mem_set	;wreg free
  5542                           
  5543                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5544  002A66  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5545  002A6A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5546  002A6E  CFDE F00D          	movff	postinc2,clust2sect@fs
  5547  002A72  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5548  002A76  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5549  002A7A  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5550  002A7E  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5551  002A82  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5552  002A86  ECBC  F026         	call	_clust2sect	;wreg free
  5553  002A8A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5554  002A8E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5555  002A92  EE10 F02A          	lfsr	1,42
  5556  002A96  50DE               	movf	postinc2,w,c
  5557  002A98  26E1               	addwf	fsr1l,f,c
  5558  002A9A  50DD               	movf	postdec2,w,c
  5559  002A9C  22E2               	addwfc	fsr1h,f,c
  5560  002A9E  C00D  FFE6         	movff	?_clust2sect,postinc1
  5561  002AA2  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5562  002AA6  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5563  002AAA  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5564                           
  5565                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5566  002AAE  0E00               	movlw	0
  5567  002AB0  0100               	movlb	0	; () banked
  5568  002AB2  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5569  002AB4  0E00               	movlw	0
  5570  002AB6  6F78               	movwf	dir_next@c& (0+255),b
  5571  002AB8  D02B               	goto	l5014
  5572  002ABA                     l5002:
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5576  002ABA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5577  002ABE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5578  002AC2  EE10 F004          	lfsr	1,4
  5579  002AC6  50DE               	movf	postinc2,w,c
  5580  002AC8  26E1               	addwf	fsr1l,f,c
  5581  002ACA  50DD               	movf	postdec2,w,c
  5582  002ACC  22E2               	addwfc	fsr1h,f,c
  5583  002ACE  0E01               	movlw	1
  5584  002AD0  6EE7               	movwf	indf1,c
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5588  002AD2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5589  002AD6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5590  002ADA  CFDE F01B          	movff	postinc2,sync_window@fs
  5591  002ADE  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5592  002AE2  EC9E  F01F         	call	_sync_window	;wreg free
  5593  002AE6  0900               	iorlw	0
  5594  002AE8  A4D8               	btfss	status,2,c
  5595  002AEA  D745               	goto	u6150
  5596                           
  5597                           ;ff.c: 1170:       dp->fs->winsect++;
  5598  002AEC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5599  002AF0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5600  002AF4  EE10 F02A          	lfsr	1,42
  5601  002AF8  50DE               	movf	postinc2,w,c
  5602  002AFA  26E1               	addwf	fsr1l,f,c
  5603  002AFC  50DD               	movf	postdec2,w,c
  5604  002AFE  22E2               	addwfc	fsr1h,f,c
  5605  002B00  2AE6               	incf	postinc1,f,c
  5606  002B02  0E00               	movlw	0
  5607  002B04  22E6               	addwfc	postinc1,f,c
  5608  002B06  22E6               	addwfc	postinc1,f,c
  5609  002B08  22E6               	addwfc	postinc1,f,c
  5610                           
  5611                           ;ff.c: 1171:      }
  5612  002B0A  0100               	movlb	0	; () banked
  5613  002B0C  4B78               	infsnz	dir_next@c& (0+255),f,b
  5614  002B0E  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5615  002B10                     l5014:
  5616                           
  5617                           ; BSR set to: 0
  5618  002B10  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5619  002B14  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5620  002B18  EE10 F002          	lfsr	1,2
  5621  002B1C  50DE               	movf	postinc2,w,c
  5622  002B1E  26E1               	addwf	fsr1l,f,c
  5623  002B20  50DD               	movf	postdec2,w,c
  5624  002B22  22E2               	addwfc	fsr1h,f,c
  5625  002B24  50E7               	movf	indf1,w,c
  5626  002B26  6F71               	movwf	??_dir_next& (0+255),b
  5627  002B28  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5628  002B2A  5171               	movf	??_dir_next& (0+255),w,b
  5629  002B2C  5D78               	subwf	dir_next@c& (0+255),w,b
  5630  002B2E  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5631  002B30  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5632  002B32  A0D8               	btfss	status,0,c
  5633  002B34  D7C2               	goto	l5002
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5637  002B36  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5638  002B3A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5639  002B3E  EE10 F02A          	lfsr	1,42
  5640  002B42  50DE               	movf	postinc2,w,c
  5641  002B44  26E1               	addwf	fsr1l,f,c
  5642  002B46  50DD               	movf	postdec2,w,c
  5643  002B48  22E2               	addwfc	fsr1h,f,c
  5644  002B4A  5178               	movf	dir_next@c& (0+255),w,b
  5645  002B4C  5EE6               	subwf	postinc1,f,c
  5646  002B4E  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5647  002B50  5AE6               	subwfb	postinc1,f,c
  5648  002B52  0E00               	movlw	0
  5649  002B54  5AE6               	subwfb	postinc1,f,c
  5650  002B56  5AE6               	subwfb	postinc1,f,c
  5651  002B58                     l5018:
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;ff.c: 1178:     dp->clust = clst;
  5655  002B58  EE20 F00A          	lfsr	2,10
  5656  002B5C  516D               	movf	dir_next@dp& (0+255),w,b
  5657  002B5E  26D9               	addwf	fsr2l,f,c
  5658  002B60  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5659  002B62  22DA               	addwfc	fsr2h,f,c
  5660  002B64  C07C  FFDE         	movff	dir_next@clst,postinc2
  5661  002B68  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5662  002B6C  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5663  002B70  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5667  002B74  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5668  002B78  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5669  002B7C  CFDE F00D          	movff	postinc2,clust2sect@fs
  5670  002B80  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5671  002B84  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5672  002B88  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5673  002B8C  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5674  002B90  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5675  002B94  ECBC  F026         	call	_clust2sect	;wreg free
  5676  002B98  0100               	movlb	0	; () banked
  5677  002B9A  EE20 F00E          	lfsr	2,14
  5678  002B9E  516D               	movf	dir_next@dp& (0+255),w,b
  5679  002BA0  26D9               	addwf	fsr2l,f,c
  5680  002BA2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5681  002BA4  22DA               	addwfc	fsr2h,f,c
  5682  002BA6  C00D  FFDE         	movff	?_clust2sect,postinc2
  5683  002BAA  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5684  002BAE  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5685  002BB2  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5686  002BB6                     l5022:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;ff.c: 1184:  dp->index = (WORD)i;
  5690  002BB6  EE20 F004          	lfsr	2,4
  5691  002BBA  516D               	movf	dir_next@dp& (0+255),w,b
  5692  002BBC  26D9               	addwf	fsr2l,f,c
  5693  002BBE  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5694  002BC0  22DA               	addwfc	fsr2h,f,c
  5695  002BC2  C07A  FFDE         	movff	dir_next@i,postinc2
  5696  002BC6  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5700  002BCA  0E0F               	movlw	15
  5701  002BCC  157A               	andwf	dir_next@i& (0+255),w,b
  5702  002BCE  6F71               	movwf	??_dir_next& (0+255),b
  5703  002BD0  0E00               	movlw	0
  5704  002BD2  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5705  002BD4  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5706  002BD6  0E05               	movlw	5
  5707  002BD8                     u6245:
  5708  002BD8  90D8               	bcf	status,0,c
  5709  002BDA  3771               	rlcf	??_dir_next& (0+255),f,b
  5710  002BDC  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5711  002BDE  2EE8               	decfsz	wreg,f,c
  5712  002BE0  D7FB               	goto	u6245
  5713  002BE2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5714  002BE6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5715  002BEA  CFDE F073          	movff	postinc2,??_dir_next+2
  5716  002BEE  CFDD F074          	movff	postdec2,??_dir_next+3
  5717  002BF2  5171               	movf	??_dir_next& (0+255),w,b
  5718  002BF4  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5719  002BF6  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5720  002BF8  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5721  002BFA  0E2E               	movlw	46
  5722  002BFC  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5723  002BFE  0E00               	movlw	0
  5724  002C00  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5725  002C02  EE20 F012          	lfsr	2,18
  5726  002C06  516D               	movf	dir_next@dp& (0+255),w,b
  5727  002C08  26D9               	addwf	fsr2l,f,c
  5728  002C0A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5729  002C0C  22DA               	addwfc	fsr2h,f,c
  5730  002C0E  C073  FFDE         	movff	??_dir_next+2,postinc2
  5731  002C12  C074  FFDD         	movff	??_dir_next+3,postdec2
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;ff.c: 1187:  return FR_OK;
  5735  002C16  0E00               	movlw	0
  5736  002C18  0012               	return		;funcret
  5737  002C1A                     __end_of_dir_next:
  5738                           	opt callstack 0
  5739                           
  5740 ;; *************** function _f_mount *****************
  5741 ;; Defined at:
  5742 ;;		line 2402 in file "ff.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;  fs              2   81[COMRAM] PTR struct .
  5745 ;;		 -> NULL(0), FatFs(558), 
  5746 ;;  path            2   83[COMRAM] PTR const unsigned char 
  5747 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5748 ;;  opt             1   85[COMRAM] unsigned char 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  vol             2   91[COMRAM] int 
  5751 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  5752 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5753 ;;  cfs             2   87[COMRAM] PTR struct .
  5754 ;;		 -> NULL(0), FatFs(558), 
  5755 ;;  res             1   86[COMRAM] enum E93
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      enum E4918
  5758 ;; Registers used:
  5759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5765 ;;      Params:         5       0       0       0       0       0       0       0       0
  5766 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5767 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5768 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5769 ;;Total ram usage:       12 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:   10
  5772 ;; This function calls:
  5773 ;;		_find_volume
  5774 ;;		_get_ldnumber
  5775 ;; This function is called by:
  5776 ;;		_main
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           	psect	text15
  5781  004E32                     __ptext15:
  5782                           	opt callstack 0
  5783  004E32                     _f_mount:
  5784                           	opt callstack 20
  5785                           
  5786                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  5787                           
  5788                           ;incstack = 0
  5789  004E32  C054  F05A         	movff	f_mount@path,f_mount@rp
  5790  004E36  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  5791                           
  5792                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  5793  004E3A  0E5A               	movlw	low f_mount@rp
  5794  004E3C  6E01               	movwf	get_ldnumber@path,c
  5795  004E3E  0E00               	movlw	high f_mount@rp
  5796  004E40  6E02               	movwf	get_ldnumber@path+1,c
  5797  004E42  ECB9  F024         	call	_get_ldnumber	;wreg free
  5798  004E46  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  5799  004E4A  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  5800                           
  5801                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  5802  004E4E  AE5D               	btfss	f_mount@vol+1,7,c
  5803  004E50  D002               	goto	l6040
  5804  004E52  0E0B               	movlw	11
  5805  004E54  0012               	return	
  5806  004E56                     l6040:
  5807                           
  5808                           ;ff.c: 2416:  cfs = FatFs[vol];
  5809  004E56  90D8               	bcf	status,0,c
  5810  004E58  345C               	rlcf	f_mount@vol,w,c
  5811  004E5A  6ED9               	movwf	fsr2l,c
  5812  004E5C  345D               	rlcf	f_mount@vol+1,w,c
  5813  004E5E  6EDA               	movwf	fsr2h,c
  5814  004E60  0ED4               	movlw	low ff@FatFs
  5815  004E62  26D9               	addwf	fsr2l,f,c
  5816  004E64  0E00               	movlw	high ff@FatFs
  5817  004E66  22DA               	addwfc	fsr2h,f,c
  5818  004E68  CFDE F058          	movff	postinc2,f_mount@cfs
  5819  004E6C  CFDD F059          	movff	postdec2,f_mount@cfs+1
  5820                           
  5821                           ;ff.c: 2418:  if (cfs) {
  5822  004E70  5058               	movf	f_mount@cfs,w,c
  5823  004E72  1059               	iorwf	f_mount@cfs+1,w,c
  5824  004E74  B4D8               	btfsc	status,2,c
  5825  004E76  D006               	goto	l6046
  5826                           
  5827                           ;ff.c: 2425:   cfs->fs_type = 0;
  5828  004E78  C058  FFD9         	movff	f_mount@cfs,fsr2l
  5829  004E7C  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  5830  004E80  0E00               	movlw	0
  5831  004E82  6EDF               	movwf	indf2,c
  5832  004E84                     l6046:
  5833                           
  5834                           ;ff.c: 2428:  if (fs) {
  5835  004E84  5052               	movf	f_mount@fs,w,c
  5836  004E86  1053               	iorwf	f_mount@fs+1,w,c
  5837  004E88  B4D8               	btfsc	status,2,c
  5838  004E8A  D006               	goto	l6050
  5839                           
  5840                           ;ff.c: 2429:   fs->fs_type = 0;
  5841  004E8C  C052  FFD9         	movff	f_mount@fs,fsr2l
  5842  004E90  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  5843  004E94  0E00               	movlw	0
  5844  004E96  6EDF               	movwf	indf2,c
  5845  004E98                     l6050:
  5846                           
  5847                           ;ff.c: 2434:  FatFs[vol] = fs;
  5848  004E98  90D8               	bcf	status,0,c
  5849  004E9A  345C               	rlcf	f_mount@vol,w,c
  5850  004E9C  6ED9               	movwf	fsr2l,c
  5851  004E9E  345D               	rlcf	f_mount@vol+1,w,c
  5852  004EA0  6EDA               	movwf	fsr2h,c
  5853  004EA2  0ED4               	movlw	low ff@FatFs
  5854  004EA4  26D9               	addwf	fsr2l,f,c
  5855  004EA6  0E00               	movlw	high ff@FatFs
  5856  004EA8  22DA               	addwfc	fsr2h,f,c
  5857  004EAA  C052  FFDE         	movff	f_mount@fs,postinc2
  5858  004EAE  C053  FFDD         	movff	f_mount@fs+1,postdec2
  5859                           
  5860                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  5861  004EB2  5052               	movf	f_mount@fs,w,c
  5862  004EB4  1053               	iorwf	f_mount@fs+1,w,c
  5863  004EB6  B4D8               	btfsc	status,2,c
  5864  004EB8  D003               	goto	u7970
  5865  004EBA  0456               	decf	f_mount@opt,w,c
  5866  004EBC  B4D8               	btfsc	status,2,c
  5867  004EBE  D002               	goto	l6060
  5868  004EC0                     u7970:
  5869  004EC0  0E00               	movlw	0
  5870  004EC2  0012               	return	
  5871  004EC4                     l6060:
  5872                           
  5873                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  5874  004EC4  0E52               	movlw	low f_mount@fs
  5875  004EC6  6E45               	movwf	find_volume@rfs,c
  5876  004EC8  0E00               	movlw	high f_mount@fs
  5877  004ECA  6E46               	movwf	find_volume@rfs+1,c
  5878  004ECC  0E54               	movlw	low f_mount@path
  5879  004ECE  6E47               	movwf	find_volume@path,c
  5880  004ED0  0E00               	movlw	high f_mount@path
  5881  004ED2  6E48               	movwf	find_volume@path+1,c
  5882  004ED4  0E00               	movlw	0
  5883  004ED6  6E49               	movwf	find_volume@wmode,c
  5884  004ED8  EC16  F004         	call	_find_volume	;wreg free
  5885  004EDC  6E57               	movwf	f_mount@res,c
  5886                           
  5887                           ;ff.c: 2439:  return res;
  5888  004EDE  5057               	movf	f_mount@res,w,c
  5889  004EE0  0012               	return		;funcret
  5890  004EE2                     __end_of_f_mount:
  5891                           	opt callstack 0
  5892                           
  5893 ;; *************** function _find_volume *****************
  5894 ;; Defined at:
  5895 ;;		line 2203 in file "ff.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  5898 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  5899 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  5900 ;;		 -> f_open@path(2), f_mount@path(2), 
  5901 ;;  wmode           1   72[COMRAM] unsigned char 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  br             16    0[BANK0 ] unsigned long [4]
  5904 ;;  bsect           4   49[BANK0 ] unsigned long 
  5905 ;;  fasize          4   45[BANK0 ] unsigned long 
  5906 ;;  nclst           4   40[BANK0 ] unsigned long 
  5907 ;;  tsect           4   36[BANK0 ] unsigned long 
  5908 ;;  sysect          4   28[BANK0 ] unsigned long 
  5909 ;;  szbfat          4   22[BANK0 ] unsigned long 
  5910 ;;  fs              2   56[BANK0 ] PTR struct .
  5911 ;;		 -> NULL(0), FatFs(558), 
  5912 ;;  i               2   53[BANK0 ] unsigned short 
  5913 ;;  nrsv            2   34[BANK0 ] unsigned short 
  5914 ;;  vol             2   32[BANK0 ] int 
  5915 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  5916 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  5917 ;;  fmt             1   55[BANK0 ] unsigned char 
  5918 ;;  stat            1   44[BANK0 ] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      enum E93
  5921 ;; Registers used:
  5922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5928 ;;      Params:         5       0       0       0       0       0       0       0       0
  5929 ;;      Locals:         0      58       0       0       0       0       0       0       0
  5930 ;;      Temps:          8       0       0       0       0       0       0       0       0
  5931 ;;      Totals:        13      58       0       0       0       0       0       0       0
  5932 ;;Total ram usage:       71 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    9
  5935 ;; This function calls:
  5936 ;;		___lldiv
  5937 ;;		___lmul
  5938 ;;		_check_fs
  5939 ;;		_disk_initialize
  5940 ;;		_disk_status
  5941 ;;		_get_ldnumber
  5942 ;;		_move_window
  5943 ;; This function is called by:
  5944 ;;		_f_mount
  5945 ;;		_f_open
  5946 ;; This function uses a non-reentrant model
  5947 ;;
  5948                           
  5949                           	psect	text16
  5950  00082C                     __ptext16:
  5951                           	opt callstack 0
  5952  00082C                     _find_volume:
  5953                           	opt callstack 20
  5954                           
  5955                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  5956                           
  5957                           ;incstack = 0
  5958  00082C  C045  FFD9         	movff	find_volume@rfs,fsr2l
  5959  000830  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  5960  000834  0E00               	movlw	0
  5961  000836  6EDE               	movwf	postinc2,c
  5962  000838  0E00               	movlw	0
  5963  00083A  6EDD               	movwf	postdec2,c
  5964                           
  5965                           ;ff.c: 2220:  vol = get_ldnumber(path);
  5966  00083C  C047  F001         	movff	find_volume@path,get_ldnumber@path
  5967  000840  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  5968  000844  ECB9  F024         	call	_get_ldnumber	;wreg free
  5969  000848  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  5970  00084C  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  5971                           
  5972                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  5973  000850  0100               	movlb	0	; () banked
  5974  000852  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  5975  000854  D002               	goto	l5638
  5976                           
  5977                           ; BSR set to: 0
  5978  000856  0E0B               	movlw	11
  5979  000858  0012               	return	
  5980  00085A                     l5638:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;ff.c: 2224:  fs = FatFs[vol];
  5984  00085A  90D8               	bcf	status,0,c
  5985  00085C  3580               	rlcf	find_volume@vol& (0+255),w,b
  5986  00085E  6ED9               	movwf	fsr2l,c
  5987  000860  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  5988  000862  6EDA               	movwf	fsr2h,c
  5989  000864  0ED4               	movlw	low ff@FatFs
  5990  000866  26D9               	addwf	fsr2l,f,c
  5991  000868  0E00               	movlw	high ff@FatFs
  5992  00086A  22DA               	addwfc	fsr2h,f,c
  5993  00086C  CFDE F098          	movff	postinc2,find_volume@fs
  5994  000870  CFDD F099          	movff	postdec2,find_volume@fs+1
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  5998  000874  5198               	movf	find_volume@fs& (0+255),w,b
  5999  000876  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6000  000878  A4D8               	btfss	status,2,c
  6001  00087A  D002               	goto	l5646
  6002                           
  6003                           ; BSR set to: 0
  6004  00087C  0E0C               	movlw	12
  6005  00087E  0012               	return	
  6006  000880                     l5646:
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;ff.c: 2228:  *rfs = fs;
  6010  000880  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6011  000884  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6012  000888  C098  FFDE         	movff	find_volume@fs,postinc2
  6013  00088C  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;ff.c: 2230:  if (fs->fs_type) {
  6017  000890  C098  FFD9         	movff	find_volume@fs,fsr2l
  6018  000894  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6019  000898  50DF               	movf	indf2,w,c
  6020  00089A  B4D8               	btfsc	status,2,c
  6021  00089C  D015               	goto	l5666
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6025  00089E  EE20 F001          	lfsr	2,1
  6026  0008A2  5198               	movf	find_volume@fs& (0+255),w,b
  6027  0008A4  26D9               	addwf	fsr2l,f,c
  6028  0008A6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6029  0008A8  22DA               	addwfc	fsr2h,f,c
  6030  0008AA  50DF               	movf	indf2,w,c
  6031  0008AC  ECC4  F02A         	call	_disk_status
  6032  0008B0  0100               	movlb	0	; () banked
  6033  0008B2  6F8C               	movwf	find_volume@stat& (0+255),b
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6037  0008B4  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6038  0008B6  D008               	goto	l5666
  6039                           
  6040                           ; BSR set to: 0
  6041  0008B8  5049               	movf	find_volume@wmode,w,c
  6042  0008BA  A4D8               	btfss	status,2,c
  6043                           
  6044                           ; BSR set to: 0
  6045  0008BC  A58C               	btfss	find_volume@stat& (0+255),2,b
  6046  0008BE  D002               	goto	l5662
  6047  0008C0                     u7400:
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6051  0008C0  0E0A               	movlw	10
  6052  0008C2  0012               	return	
  6053  0008C4                     l5662:
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;ff.c: 2235:    return FR_OK;
  6057  0008C4  0E00               	movlw	0
  6058  0008C6  0012               	return	
  6059  0008C8                     l5666:
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;ff.c: 2242:  fs->fs_type = 0;
  6063  0008C8  C098  FFD9         	movff	find_volume@fs,fsr2l
  6064  0008CC  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6065  0008D0  0E00               	movlw	0
  6066  0008D2  6EDF               	movwf	indf2,c
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6070  0008D4  EE20 F001          	lfsr	2,1
  6071  0008D8  5198               	movf	find_volume@fs& (0+255),w,b
  6072  0008DA  26D9               	addwf	fsr2l,f,c
  6073  0008DC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6074  0008DE  22DA               	addwfc	fsr2h,f,c
  6075  0008E0  C080  FFDF         	movff	find_volume@vol,indf2
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6079  0008E4  EE20 F001          	lfsr	2,1
  6080  0008E8  5198               	movf	find_volume@fs& (0+255),w,b
  6081  0008EA  26D9               	addwf	fsr2l,f,c
  6082  0008EC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6083  0008EE  22DA               	addwfc	fsr2h,f,c
  6084  0008F0  50DF               	movf	indf2,w,c
  6085  0008F2  ECC9  F01D         	call	_disk_initialize
  6086  0008F6  0100               	movlb	0	; () banked
  6087  0008F8  6F8C               	movwf	find_volume@stat& (0+255),b
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;ff.c: 2245:  if (stat & 0x01)
  6091  0008FA  A18C               	btfss	find_volume@stat& (0+255),0,b
  6092  0008FC  D002               	goto	l5678
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;ff.c: 2246:   return FR_NOT_READY;
  6096  0008FE  0E03               	movlw	3
  6097  000900  0012               	return	
  6098  000902                     l5678:
  6099                           
  6100                           ; BSR set to: 0
  6101  000902  5049               	movf	find_volume@wmode,w,c
  6102  000904  B4D8               	btfsc	status,2,c
  6103  000906  D002               	goto	l5686
  6104                           
  6105                           ; BSR set to: 0
  6106  000908  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6107  00090A  D7DA               	goto	u7400
  6108  00090C                     l5686:
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;ff.c: 2254:  bsect = 0;
  6112  00090C  0E00               	movlw	0
  6113  00090E  6F91               	movwf	find_volume@bsect& (0+255),b
  6114  000910  0E00               	movlw	0
  6115  000912  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6116  000914  0E00               	movlw	0
  6117  000916  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6118  000918  0E00               	movlw	0
  6119  00091A  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6123  00091C  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6124  000920  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6125  000924  0E00               	movlw	0
  6126  000926  6E3D               	movwf	check_fs@sect,c
  6127  000928  0E00               	movlw	0
  6128  00092A  6E3E               	movwf	check_fs@sect+1,c
  6129  00092C  0E00               	movlw	0
  6130  00092E  6E3F               	movwf	check_fs@sect+2,c
  6131  000930  0E00               	movlw	0
  6132  000932  6E40               	movwf	check_fs@sect+3,c
  6133  000934  EC43  F024         	call	_check_fs	;wreg free
  6134  000938  0100               	movlb	0	; () banked
  6135  00093A  6F97               	movwf	find_volume@fmt& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6139  00093C  0597               	decf	find_volume@fmt& (0+255),w,b
  6140  00093E  A4D8               	btfss	status,2,c
  6141  000940  D0AE               	goto	u7500
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6145  000942  0E00               	movlw	0
  6146  000944  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6147  000946  0E00               	movlw	0
  6148  000948  6F95               	movwf	find_volume@i& (0+255),b
  6149  00094A                     l5698:
  6150                           
  6151                           ; BSR set to: 0
  6152  00094A  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6153  00094C  E15A               	bnz	l5714
  6154  00094E  0E04               	movlw	4
  6155  000950  5D95               	subwf	find_volume@i& (0+255),w,b
  6156  000952  B0D8               	btfsc	status,0,c
  6157  000954  D056               	goto	l5714
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6161  000956  C095  F04A         	movff	find_volume@i,??_find_volume
  6162  00095A  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6163  00095E  3A4A               	swapf	??_find_volume,f,c
  6164  000960  3A4B               	swapf	??_find_volume+1,f,c
  6165  000962  0EF0               	movlw	240
  6166  000964  164B               	andwf	??_find_volume+1,f,c
  6167  000966  504A               	movf	??_find_volume,w,c
  6168  000968  0B0F               	andlw	15
  6169  00096A  124B               	iorwf	??_find_volume+1,f,c
  6170  00096C  0EF0               	movlw	240
  6171  00096E  164A               	andwf	??_find_volume,f,c
  6172  000970  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6173  000974  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6174  000978  504A               	movf	??_find_volume,w,c
  6175  00097A  264C               	addwf	??_find_volume+2,f,c
  6176  00097C  504B               	movf	??_find_volume+1,w,c
  6177  00097E  224D               	addwfc	??_find_volume+3,f,c
  6178  000980  0EEC               	movlw	236
  6179  000982  244C               	addwf	??_find_volume+2,w,c
  6180  000984  6F7A               	movwf	find_volume@pt& (0+255),b
  6181  000986  0E01               	movlw	1
  6182  000988  204D               	addwfc	??_find_volume+3,w,c
  6183  00098A  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6187  00098C  EE20 F004          	lfsr	2,4
  6188  000990  517A               	movf	find_volume@pt& (0+255),w,b
  6189  000992  26D9               	addwf	fsr2l,f,c
  6190  000994  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6191  000996  22DA               	addwfc	fsr2h,f,c
  6192  000998  50DF               	movf	indf2,w,c
  6193  00099A  A4D8               	btfss	status,2,c
  6194  00099C  D009               	goto	l5708
  6195                           
  6196                           ; BSR set to: 0
  6197  00099E  0E00               	movlw	0
  6198  0009A0  6F70               	movwf	_find_volume$997& (0+255),b
  6199  0009A2  0E00               	movlw	0
  6200  0009A4  6F71               	movwf	(_find_volume$997+1)& (0+255),b
  6201  0009A6  0E00               	movlw	0
  6202  0009A8  6F72               	movwf	(_find_volume$997+2)& (0+255),b
  6203  0009AA  0E00               	movlw	0
  6204  0009AC  6F73               	movwf	(_find_volume$997+3)& (0+255),b
  6205  0009AE  D00E               	goto	l623
  6206  0009B0                     l5708:
  6207                           
  6208                           ; BSR set to: 0
  6209  0009B0  EE20 F008          	lfsr	2,8
  6210  0009B4  517A               	movf	find_volume@pt& (0+255),w,b
  6211  0009B6  26D9               	addwf	fsr2l,f,c
  6212  0009B8  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6213  0009BA  22DA               	addwfc	fsr2h,f,c
  6214  0009BC  CFDE F070          	movff	postinc2,_find_volume$997
  6215  0009C0  CFDE F071          	movff	postinc2,_find_volume$997+1
  6216  0009C4  CFDE F072          	movff	postinc2,_find_volume$997+2
  6217  0009C8  CFDE F073          	movff	postinc2,_find_volume$997+3
  6218  0009CC                     l623:
  6219                           
  6220                           ; BSR set to: 0
  6221  0009CC  0E60               	movlw	low find_volume@br
  6222  0009CE  6E4A               	movwf	??_find_volume& (0+255),c
  6223  0009D0  0E00               	movlw	high find_volume@br
  6224  0009D2  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6225  0009D4  90D8               	bcf	status,0,c
  6226  0009D6  3595               	rlcf	find_volume@i& (0+255),w,b
  6227  0009D8  6ED9               	movwf	fsr2l,c
  6228  0009DA  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6229  0009DC  6EDA               	movwf	fsr2h,c
  6230  0009DE  90D8               	bcf	status,0,c
  6231  0009E0  36D9               	rlcf	fsr2l,f,c
  6232  0009E2  36DA               	rlcf	fsr2h,f,c
  6233  0009E4  504A               	movf	??_find_volume,w,c
  6234  0009E6  26D9               	addwf	fsr2l,f,c
  6235  0009E8  504B               	movf	??_find_volume+1,w,c
  6236  0009EA  22DA               	addwfc	fsr2h,f,c
  6237  0009EC  C070  FFDE         	movff	_find_volume$997,postinc2
  6238  0009F0  C071  FFDE         	movff	_find_volume$997+1,postinc2
  6239  0009F4  C072  FFDE         	movff	_find_volume$997+2,postinc2
  6240  0009F8  C073  FFDE         	movff	_find_volume$997+3,postinc2
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;ff.c: 2260:   }
  6244  0009FC  4B95               	infsnz	find_volume@i& (0+255),f,b
  6245  0009FE  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6246  000A00  D7A4               	goto	l5698
  6247  000A02                     l5714:
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;ff.c: 2261:   i = 0;
  6251  000A02  0E00               	movlw	0
  6252  000A04  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6253  000A06  0E00               	movlw	0
  6254  000A08  6F95               	movwf	find_volume@i& (0+255),b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;ff.c: 2262:   if (i) i--;
  6258  000A0A  5195               	movf	find_volume@i& (0+255),w,b
  6259  000A0C  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6260  000A0E  B4D8               	btfsc	status,2,c
  6261  000A10  D003               	goto	l5720
  6262                           
  6263                           ; BSR set to: 0
  6264  000A12  0795               	decf	find_volume@i& (0+255),f,b
  6265  000A14  A0D8               	btfss	status,0,c
  6266  000A16  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6267  000A18                     l5720:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;ff.c: 2264:    bsect = br[i];
  6271  000A18  0E60               	movlw	low find_volume@br
  6272  000A1A  6E4A               	movwf	??_find_volume& (0+255),c
  6273  000A1C  0E00               	movlw	high find_volume@br
  6274  000A1E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6275  000A20  90D8               	bcf	status,0,c
  6276  000A22  3595               	rlcf	find_volume@i& (0+255),w,b
  6277  000A24  6ED9               	movwf	fsr2l,c
  6278  000A26  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6279  000A28  6EDA               	movwf	fsr2h,c
  6280  000A2A  90D8               	bcf	status,0,c
  6281  000A2C  36D9               	rlcf	fsr2l,f,c
  6282  000A2E  36DA               	rlcf	fsr2h,f,c
  6283  000A30  504A               	movf	??_find_volume,w,c
  6284  000A32  26D9               	addwf	fsr2l,f,c
  6285  000A34  504B               	movf	??_find_volume+1,w,c
  6286  000A36  22DA               	addwfc	fsr2h,f,c
  6287  000A38  CFDE F091          	movff	postinc2,find_volume@bsect
  6288  000A3C  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6289  000A40  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6290  000A44  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6294  000A48  5191               	movf	find_volume@bsect& (0+255),w,b
  6295  000A4A  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6296  000A4C  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6297  000A4E  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6298  000A50  A4D8               	btfss	status,2,c
  6299  000A52  D005               	goto	l5726
  6300                           
  6301                           ; BSR set to: 0
  6302  000A54  0E00               	movlw	0
  6303  000A56  6F75               	movwf	(_find_volume$998+1)& (0+255),b
  6304  000A58  0E02               	movlw	2
  6305  000A5A  6F74               	movwf	_find_volume$998& (0+255),b
  6306  000A5C  D013               	goto	l5728
  6307  000A5E                     l5726:
  6308                           
  6309                           ; BSR set to: 0
  6310  000A5E  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6311  000A62  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6312  000A66  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6313  000A6A  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6314  000A6E  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6315  000A72  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6316  000A76  EC43  F024         	call	_check_fs	;wreg free
  6317  000A7A  6E4A               	movwf	??_find_volume& (0+255),c
  6318  000A7C  504A               	movf	??_find_volume,w,c
  6319  000A7E  0100               	movlb	0	; () banked
  6320  000A80  6F74               	movwf	_find_volume$998& (0+255),b
  6321  000A82  6B75               	clrf	(_find_volume$998+1)& (0+255),b
  6322  000A84                     l5728:
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6326  000A84  C074  F097         	movff	_find_volume$998,find_volume@fmt
  6327                           
  6328                           ; BSR set to: 0
  6329  000A88  5197               	movf	find_volume@fmt& (0+255),w,b
  6330  000A8A  B4D8               	btfsc	status,2,c
  6331  000A8C  D008               	goto	u7500
  6332                           
  6333                           ; BSR set to: 0
  6334  000A8E  4B95               	infsnz	find_volume@i& (0+255),f,b
  6335  000A90  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6336  000A92  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6337  000A94  E104               	bnz	u7500
  6338  000A96  0E04               	movlw	4
  6339  000A98  5D95               	subwf	find_volume@i& (0+255),w,b
  6340  000A9A  A0D8               	btfss	status,0,c
  6341  000A9C  D7BD               	goto	l5720
  6342  000A9E                     u7500:
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6346  000A9E  0E03               	movlw	3
  6347  000AA0  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6348  000AA2  A4D8               	btfss	status,2,c
  6349  000AA4  D002               	goto	l5740
  6350                           
  6351                           ; BSR set to: 0
  6352  000AA6  0E01               	movlw	1
  6353  000AA8  0012               	return	
  6354  000AAA                     l5740:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6358  000AAA  5197               	movf	find_volume@fmt& (0+255),w,b
  6359  000AAC  B4D8               	btfsc	status,2,c
  6360  000AAE  D002               	goto	l5746
  6361  000AB0                     u7520:
  6362  000AB0                     l5742:
  6363                           
  6364                           ; BSR set to: 0
  6365  000AB0  0E0D               	movlw	13
  6366  000AB2  0012               	return	
  6367  000AB4                     l5746:
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6371  000AB4  EE20 F039          	lfsr	2,57
  6372  000AB8  5198               	movf	find_volume@fs& (0+255),w,b
  6373  000ABA  26D9               	addwf	fsr2l,f,c
  6374  000ABC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6375  000ABE  22DA               	addwfc	fsr2h,f,c
  6376  000AC0  50DE               	movf	postinc2,w,c
  6377  000AC2  E1F6               	bnz	l5742
  6378  000AC4  0E02               	movlw	2
  6379  000AC6  18DE               	xorwf	postinc2,w,c
  6380  000AC8  A4D8               	btfss	status,2,c
  6381  000ACA  D7F2               	goto	u7520
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6385  000ACC  EE20 F044          	lfsr	2,68
  6386  000AD0  5198               	movf	find_volume@fs& (0+255),w,b
  6387  000AD2  26D9               	addwf	fsr2l,f,c
  6388  000AD4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6389  000AD6  22DA               	addwfc	fsr2h,f,c
  6390  000AD8  CFDE F04A          	movff	postinc2,??_find_volume
  6391  000ADC  CFDD F04B          	movff	postdec2,??_find_volume+1
  6392  000AE0  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6393  000AE4  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6394  000AE8  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6395  000AEA  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6399  000AEC  518D               	movf	find_volume@fasize& (0+255),w,b
  6400  000AEE  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6401  000AF0  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6402  000AF2  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6403  000AF4  A4D8               	btfss	status,2,c
  6404  000AF6  D00E               	goto	l636
  6405                           
  6406                           ; BSR set to: 0
  6407  000AF8  EE20 F052          	lfsr	2,82
  6408  000AFC  5198               	movf	find_volume@fs& (0+255),w,b
  6409  000AFE  26D9               	addwf	fsr2l,f,c
  6410  000B00  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6411  000B02  22DA               	addwfc	fsr2h,f,c
  6412  000B04  CFDE F08D          	movff	postinc2,find_volume@fasize
  6413  000B08  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6414  000B0C  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6415  000B10  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6416  000B14                     l636:
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;ff.c: 2278:  fs->fsize = fasize;
  6420  000B14  EE20 F016          	lfsr	2,22
  6421  000B18  5198               	movf	find_volume@fs& (0+255),w,b
  6422  000B1A  26D9               	addwf	fsr2l,f,c
  6423  000B1C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6424  000B1E  22DA               	addwfc	fsr2h,f,c
  6425  000B20  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6426  000B24  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6427  000B28  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6428  000B2C  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6432  000B30  EE20 F03E          	lfsr	2,62
  6433  000B34  5198               	movf	find_volume@fs& (0+255),w,b
  6434  000B36  26D9               	addwf	fsr2l,f,c
  6435  000B38  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6436  000B3A  22DA               	addwfc	fsr2h,f,c
  6437  000B3C  EE10 F003          	lfsr	1,3
  6438  000B40  5198               	movf	find_volume@fs& (0+255),w,b
  6439  000B42  26E1               	addwf	fsr1l,f,c
  6440  000B44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6441  000B46  22E2               	addwfc	fsr1h,f,c
  6442  000B48  CFDF FFE7          	movff	indf2,indf1
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6446  000B4C  EE20 F003          	lfsr	2,3
  6447  000B50  5198               	movf	find_volume@fs& (0+255),w,b
  6448  000B52  26D9               	addwf	fsr2l,f,c
  6449  000B54  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6450  000B56  22DA               	addwfc	fsr2h,f,c
  6451  000B58  04DE               	decf	postinc2,w,c
  6452  000B5A  B4D8               	btfsc	status,2,c
  6453  000B5C  D00A               	goto	l5768
  6454                           
  6455                           ; BSR set to: 0
  6456  000B5E  EE20 F003          	lfsr	2,3
  6457  000B62  5198               	movf	find_volume@fs& (0+255),w,b
  6458  000B64  26D9               	addwf	fsr2l,f,c
  6459  000B66  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6460  000B68  22DA               	addwfc	fsr2h,f,c
  6461  000B6A  0E02               	movlw	2
  6462  000B6C  18DE               	xorwf	postinc2,w,c
  6463  000B6E  A4D8               	btfss	status,2,c
  6464  000B70  D79F               	goto	u7520
  6465  000B72                     l5768:
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6469  000B72  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6470  000B76  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6471  000B7A  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6472  000B7E  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6473  000B82  EE20 F003          	lfsr	2,3
  6474  000B86  5198               	movf	find_volume@fs& (0+255),w,b
  6475  000B88  26D9               	addwf	fsr2l,f,c
  6476  000B8A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6477  000B8C  22DA               	addwfc	fsr2h,f,c
  6478  000B8E  50DF               	movf	indf2,w,c
  6479  000B90  6E4A               	movwf	??_find_volume& (0+255),c
  6480  000B92  504A               	movf	??_find_volume,w,c
  6481  000B94  6E05               	movwf	___lmul@multiplicand,c
  6482  000B96  6A06               	clrf	___lmul@multiplicand+1,c
  6483  000B98  6A07               	clrf	___lmul@multiplicand+2,c
  6484  000B9A  6A08               	clrf	___lmul@multiplicand+3,c
  6485  000B9C  EC76  F029         	call	___lmul	;wreg free
  6486  000BA0  C001  F08D         	movff	?___lmul,find_volume@fasize
  6487  000BA4  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6488  000BA8  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6489  000BAC  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6490                           
  6491                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6492  000BB0  0100               	movlb	0	; () banked
  6493  000BB2  EE20 F03B          	lfsr	2,59
  6494  000BB6  5198               	movf	find_volume@fs& (0+255),w,b
  6495  000BB8  26D9               	addwf	fsr2l,f,c
  6496  000BBA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6497  000BBC  22DA               	addwfc	fsr2h,f,c
  6498  000BBE  EE10 F002          	lfsr	1,2
  6499  000BC2  5198               	movf	find_volume@fs& (0+255),w,b
  6500  000BC4  26E1               	addwf	fsr1l,f,c
  6501  000BC6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6502  000BC8  22E2               	addwfc	fsr1h,f,c
  6503  000BCA  CFDF FFE7          	movff	indf2,indf1
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6507  000BCE  EE20 F002          	lfsr	2,2
  6508  000BD2  5198               	movf	find_volume@fs& (0+255),w,b
  6509  000BD4  26D9               	addwf	fsr2l,f,c
  6510  000BD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6511  000BD8  22DA               	addwfc	fsr2h,f,c
  6512  000BDA  50DF               	movf	indf2,w,c
  6513  000BDC  B4D8               	btfsc	status,2,c
  6514  000BDE  D768               	goto	u7520
  6515                           
  6516                           ; BSR set to: 0
  6517  000BE0  0EFF               	movlw	255
  6518  000BE2  6E4A               	movwf	??_find_volume& (0+255),c
  6519  000BE4  0EFF               	movlw	255
  6520  000BE6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6521  000BE8  EE20 F002          	lfsr	2,2
  6522  000BEC  5198               	movf	find_volume@fs& (0+255),w,b
  6523  000BEE  26D9               	addwf	fsr2l,f,c
  6524  000BF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6525  000BF2  22DA               	addwfc	fsr2h,f,c
  6526  000BF4  50DF               	movf	indf2,w,c
  6527  000BF6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6528  000BF8  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6529  000BFA  504A               	movf	??_find_volume,w,c
  6530  000BFC  264C               	addwf	??_find_volume+2,f,c
  6531  000BFE  504B               	movf	??_find_volume+1,w,c
  6532  000C00  224D               	addwfc	??_find_volume+3,f,c
  6533  000C02  EE20 F002          	lfsr	2,2
  6534  000C06  5198               	movf	find_volume@fs& (0+255),w,b
  6535  000C08  26D9               	addwf	fsr2l,f,c
  6536  000C0A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6537  000C0C  22DA               	addwfc	fsr2h,f,c
  6538  000C0E  50DF               	movf	indf2,w,c
  6539  000C10  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6540  000C12  504E               	movf	??_find_volume+4,w,c
  6541  000C14  164C               	andwf	??_find_volume+2,f,c
  6542  000C16  0E00               	movlw	0
  6543  000C18  164D               	andwf	??_find_volume+3,f,c
  6544  000C1A  504C               	movf	??_find_volume+2,w,c
  6545  000C1C  104D               	iorwf	??_find_volume+3,w,c
  6546  000C1E  A4D8               	btfss	status,2,c
  6547  000C20  D747               	goto	u7520
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6551  000C22  EE20 F03F          	lfsr	2,63
  6552  000C26  5198               	movf	find_volume@fs& (0+255),w,b
  6553  000C28  26D9               	addwf	fsr2l,f,c
  6554  000C2A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6555  000C2C  22DA               	addwfc	fsr2h,f,c
  6556  000C2E  EE10 F008          	lfsr	1,8
  6557  000C32  5198               	movf	find_volume@fs& (0+255),w,b
  6558  000C34  26E1               	addwf	fsr1l,f,c
  6559  000C36  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6560  000C38  22E2               	addwfc	fsr1h,f,c
  6561  000C3A  CFDE FFE6          	movff	postinc2,postinc1
  6562  000C3E  CFDD FFE5          	movff	postdec2,postdec1
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6566  000C42  EE20 F008          	lfsr	2,8
  6567  000C46  5198               	movf	find_volume@fs& (0+255),w,b
  6568  000C48  26D9               	addwf	fsr2l,f,c
  6569  000C4A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6570  000C4C  22DA               	addwfc	fsr2h,f,c
  6571  000C4E  CFDE F04A          	movff	postinc2,??_find_volume
  6572  000C52  CFDD F04B          	movff	postdec2,??_find_volume+1
  6573  000C56  0E0F               	movlw	15
  6574  000C58  164A               	andwf	??_find_volume,f,c
  6575  000C5A  0E00               	movlw	0
  6576  000C5C  164B               	andwf	??_find_volume+1,f,c
  6577  000C5E  504A               	movf	??_find_volume,w,c
  6578  000C60  104B               	iorwf	??_find_volume+1,w,c
  6579  000C62  A4D8               	btfss	status,2,c
  6580  000C64  D725               	goto	u7520
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6584  000C66  EE20 F041          	lfsr	2,65
  6585  000C6A  5198               	movf	find_volume@fs& (0+255),w,b
  6586  000C6C  26D9               	addwf	fsr2l,f,c
  6587  000C6E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6588  000C70  22DA               	addwfc	fsr2h,f,c
  6589  000C72  CFDE F04A          	movff	postinc2,??_find_volume
  6590  000C76  CFDD F04B          	movff	postdec2,??_find_volume+1
  6591  000C7A  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6592  000C7E  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6593  000C82  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6594  000C84  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6598  000C86  5184               	movf	find_volume@tsect& (0+255),w,b
  6599  000C88  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6600  000C8A  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6601  000C8C  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6602  000C8E  A4D8               	btfss	status,2,c
  6603  000C90  D00E               	goto	l642
  6604                           
  6605                           ; BSR set to: 0
  6606  000C92  EE20 F04E          	lfsr	2,78
  6607  000C96  5198               	movf	find_volume@fs& (0+255),w,b
  6608  000C98  26D9               	addwf	fsr2l,f,c
  6609  000C9A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6610  000C9C  22DA               	addwfc	fsr2h,f,c
  6611  000C9E  CFDE F084          	movff	postinc2,find_volume@tsect
  6612  000CA2  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6613  000CA6  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6614  000CAA  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6615  000CAE                     l642:
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6619  000CAE  EE20 F03C          	lfsr	2,60
  6620  000CB2  5198               	movf	find_volume@fs& (0+255),w,b
  6621  000CB4  26D9               	addwf	fsr2l,f,c
  6622  000CB6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6623  000CB8  22DA               	addwfc	fsr2h,f,c
  6624  000CBA  CFDE F082          	movff	postinc2,find_volume@nrsv
  6625  000CBE  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6626                           
  6627                           ; BSR set to: 0
  6628                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6629  000CC2  5182               	movf	find_volume@nrsv& (0+255),w,b
  6630  000CC4  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6631  000CC6  B4D8               	btfsc	status,2,c
  6632  000CC8  D6F3               	goto	u7520
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6636  000CCA  EE20 F008          	lfsr	2,8
  6637  000CCE  5198               	movf	find_volume@fs& (0+255),w,b
  6638  000CD0  26D9               	addwf	fsr2l,f,c
  6639  000CD2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6640  000CD4  22DA               	addwfc	fsr2h,f,c
  6641  000CD6  CFDE F04A          	movff	postinc2,??_find_volume
  6642  000CDA  CFDD F04B          	movff	postdec2,??_find_volume+1
  6643  000CDE  0E04               	movlw	4
  6644  000CE0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6645  000CE2                     u7625:
  6646  000CE2  90D8               	bcf	status,0,c
  6647  000CE4  324B               	rrcf	??_find_volume+1,f,c
  6648  000CE6  324A               	rrcf	??_find_volume,f,c
  6649  000CE8  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6650  000CEA  D7FB               	goto	u7625
  6651  000CEC  5182               	movf	find_volume@nrsv& (0+255),w,b
  6652  000CEE  244A               	addwf	??_find_volume,w,c
  6653  000CF0  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6654  000CF2  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6655  000CF4  204B               	addwfc	??_find_volume+1,w,c
  6656  000CF6  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6657  000CF8  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6658  000CFA  B0D8               	btfsc	status,0,c
  6659  000CFC  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6660  000CFE  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6661  000D00  518D               	movf	find_volume@fasize& (0+255),w,b
  6662  000D02  244D               	addwf	??_find_volume+3,w,c
  6663  000D04  6F7C               	movwf	find_volume@sysect& (0+255),b
  6664  000D06  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6665  000D08  204E               	addwfc	??_find_volume+4,w,c
  6666  000D0A  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6667  000D0C  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6668  000D0E  204F               	addwfc	??_find_volume+5,w,c
  6669  000D10  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6670  000D12  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6671  000D14  2050               	addwfc	??_find_volume+6,w,c
  6672  000D16  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6676  000D18  517C               	movf	find_volume@sysect& (0+255),w,b
  6677  000D1A  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6678  000D1C  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6679  000D1E  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6680  000D20  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6681  000D22  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6682  000D24  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6683  000D26  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6684  000D28  A0D8               	btfss	status,0,c
  6685  000D2A  D6C2               	goto	u7520
  6686                           
  6687                           ; BSR set to: 0
  6688                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6689  000D2C  517C               	movf	find_volume@sysect& (0+255),w,b
  6690  000D2E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6691  000D30  6E01               	movwf	___lldiv@dividend,c
  6692  000D32  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6693  000D34  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6694  000D36  6E02               	movwf	___lldiv@dividend+1,c
  6695  000D38  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6696  000D3A  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6697  000D3C  6E03               	movwf	___lldiv@dividend+2,c
  6698  000D3E  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6699  000D40  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6700  000D42  6E04               	movwf	___lldiv@dividend+3,c
  6701  000D44  EE20 F002          	lfsr	2,2
  6702  000D48  5198               	movf	find_volume@fs& (0+255),w,b
  6703  000D4A  26D9               	addwf	fsr2l,f,c
  6704  000D4C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6705  000D4E  22DA               	addwfc	fsr2h,f,c
  6706  000D50  50DF               	movf	indf2,w,c
  6707  000D52  6E4A               	movwf	??_find_volume& (0+255),c
  6708  000D54  504A               	movf	??_find_volume,w,c
  6709  000D56  6E05               	movwf	___lldiv@divisor,c
  6710  000D58  6A06               	clrf	___lldiv@divisor+1,c
  6711  000D5A  6A07               	clrf	___lldiv@divisor+2,c
  6712  000D5C  6A08               	clrf	___lldiv@divisor+3,c
  6713  000D5E  EC0E  F028         	call	___lldiv	;wreg free
  6714  000D62  C001  F088         	movff	?___lldiv,find_volume@nclst
  6715  000D66  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6716  000D6A  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6717  000D6E  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6718                           
  6719                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6720  000D72  0100               	movlb	0	; () banked
  6721  000D74  5188               	movf	find_volume@nclst& (0+255),w,b
  6722  000D76  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  6723  000D78  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6724  000D7A  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  6725  000D7C  B4D8               	btfsc	status,2,c
  6726  000D7E  D698               	goto	u7520
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;ff.c: 2304:  fmt = 1;
  6730  000D80  0E01               	movlw	1
  6731  000D82  6F97               	movwf	find_volume@fmt& (0+255),b
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  6735  000D84  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6736  000D86  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6737  000D88  E106               	bnz	u7650
  6738  000D8A  0EF6               	movlw	246
  6739  000D8C  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6740  000D8E  0E0F               	movlw	15
  6741  000D90  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6742  000D92  A0D8               	btfss	status,0,c
  6743  000D94  D002               	goto	l5822
  6744  000D96                     u7650:
  6745                           
  6746                           ; BSR set to: 0
  6747  000D96  0E02               	movlw	2
  6748  000D98  6F97               	movwf	find_volume@fmt& (0+255),b
  6749  000D9A                     l5822:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  6753  000D9A  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6754  000D9C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6755  000D9E  E106               	bnz	u7660
  6756  000DA0  0EF6               	movlw	246
  6757  000DA2  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6758  000DA4  0EFF               	movlw	255
  6759  000DA6  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6760  000DA8  A0D8               	btfss	status,0,c
  6761  000DAA  D002               	goto	l5826
  6762  000DAC                     u7660:
  6763                           
  6764                           ; BSR set to: 0
  6765  000DAC  0E03               	movlw	3
  6766  000DAE  6F97               	movwf	find_volume@fmt& (0+255),b
  6767  000DB0                     l5826:
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  6771  000DB0  0E02               	movlw	2
  6772  000DB2  2588               	addwf	find_volume@nclst& (0+255),w,b
  6773  000DB4  6E4A               	movwf	??_find_volume& (0+255),c
  6774  000DB6  0E00               	movlw	0
  6775  000DB8  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  6776  000DBA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6777  000DBC  0E00               	movlw	0
  6778  000DBE  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  6779  000DC0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6780  000DC2  0E00               	movlw	0
  6781  000DC4  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  6782  000DC6  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6783  000DC8  EE20 F012          	lfsr	2,18
  6784  000DCC  5198               	movf	find_volume@fs& (0+255),w,b
  6785  000DCE  26D9               	addwf	fsr2l,f,c
  6786  000DD0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6787  000DD2  22DA               	addwfc	fsr2h,f,c
  6788  000DD4  C04A  FFDE         	movff	??_find_volume,postinc2
  6789  000DD8  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6790  000DDC  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6791  000DE0  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;ff.c: 2310:  fs->volbase = bsect;
  6795  000DE4  EE20 F01A          	lfsr	2,26
  6796  000DE8  5198               	movf	find_volume@fs& (0+255),w,b
  6797  000DEA  26D9               	addwf	fsr2l,f,c
  6798  000DEC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6799  000DEE  22DA               	addwfc	fsr2h,f,c
  6800  000DF0  C091  FFDE         	movff	find_volume@bsect,postinc2
  6801  000DF4  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  6802  000DF8  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  6803  000DFC  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  6807  000E00  5182               	movf	find_volume@nrsv& (0+255),w,b
  6808  000E02  2591               	addwf	find_volume@bsect& (0+255),w,b
  6809  000E04  6E4A               	movwf	??_find_volume& (0+255),c
  6810  000E06  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6811  000E08  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6812  000E0A  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6813  000E0C  0E00               	movlw	0
  6814  000E0E  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6815  000E10  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6816  000E12  0E00               	movlw	0
  6817  000E14  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6818  000E16  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6819  000E18  EE20 F01E          	lfsr	2,30
  6820  000E1C  5198               	movf	find_volume@fs& (0+255),w,b
  6821  000E1E  26D9               	addwf	fsr2l,f,c
  6822  000E20  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6823  000E22  22DA               	addwfc	fsr2h,f,c
  6824  000E24  C04A  FFDE         	movff	??_find_volume,postinc2
  6825  000E28  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6826  000E2C  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6827  000E30  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;ff.c: 2312:  fs->database = bsect + sysect;
  6831  000E34  517C               	movf	find_volume@sysect& (0+255),w,b
  6832  000E36  2591               	addwf	find_volume@bsect& (0+255),w,b
  6833  000E38  6E4A               	movwf	??_find_volume& (0+255),c
  6834  000E3A  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6835  000E3C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6836  000E3E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6837  000E40  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6838  000E42  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6839  000E44  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6840  000E46  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6841  000E48  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6842  000E4A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6843  000E4C  EE20 F026          	lfsr	2,38
  6844  000E50  5198               	movf	find_volume@fs& (0+255),w,b
  6845  000E52  26D9               	addwf	fsr2l,f,c
  6846  000E54  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6847  000E56  22DA               	addwfc	fsr2h,f,c
  6848  000E58  C04A  FFDE         	movff	??_find_volume,postinc2
  6849  000E5C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6850  000E60  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6851  000E64  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;ff.c: 2313:  if (fmt == 3) {
  6855  000E68  0E03               	movlw	3
  6856  000E6A  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6857  000E6C  A4D8               	btfss	status,2,c
  6858  000E6E  D03D               	goto	l5846
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  6862  000E70  EE20 F008          	lfsr	2,8
  6863  000E74  5198               	movf	find_volume@fs& (0+255),w,b
  6864  000E76  26D9               	addwf	fsr2l,f,c
  6865  000E78  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6866  000E7A  22DA               	addwfc	fsr2h,f,c
  6867  000E7C  50DE               	movf	postinc2,w,c
  6868  000E7E  10DE               	iorwf	postinc2,w,c
  6869  000E80  A4D8               	btfss	status,2,c
  6870  000E82  D616               	goto	u7520
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  6874  000E84  EE20 F05A          	lfsr	2,90
  6875  000E88  5198               	movf	find_volume@fs& (0+255),w,b
  6876  000E8A  26D9               	addwf	fsr2l,f,c
  6877  000E8C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6878  000E8E  22DA               	addwfc	fsr2h,f,c
  6879  000E90  EE10 F022          	lfsr	1,34
  6880  000E94  5198               	movf	find_volume@fs& (0+255),w,b
  6881  000E96  26E1               	addwf	fsr1l,f,c
  6882  000E98  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6883  000E9A  22E2               	addwfc	fsr1h,f,c
  6884  000E9C  CFDE FFE6          	movff	postinc2,postinc1
  6885  000EA0  CFDE FFE6          	movff	postinc2,postinc1
  6886  000EA4  CFDE FFE6          	movff	postinc2,postinc1
  6887  000EA8  CFDE FFE6          	movff	postinc2,postinc1
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  6891  000EAC  EE20 F012          	lfsr	2,18
  6892  000EB0  5198               	movf	find_volume@fs& (0+255),w,b
  6893  000EB2  26D9               	addwf	fsr2l,f,c
  6894  000EB4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6895  000EB6  22DA               	addwfc	fsr2h,f,c
  6896  000EB8  CFDE F04A          	movff	postinc2,??_find_volume
  6897  000EBC  CFDE F04B          	movff	postinc2,??_find_volume+1
  6898  000EC0  CFDE F04C          	movff	postinc2,??_find_volume+2
  6899  000EC4  CFDE F04D          	movff	postinc2,??_find_volume+3
  6900  000EC8  0E02               	movlw	2
  6901  000ECA                     u7695:
  6902  000ECA  90D8               	bcf	status,0,c
  6903  000ECC  364A               	rlcf	??_find_volume,f,c
  6904  000ECE  364B               	rlcf	??_find_volume+1,f,c
  6905  000ED0  364C               	rlcf	??_find_volume+2,f,c
  6906  000ED2  364D               	rlcf	??_find_volume+3,f,c
  6907  000ED4  2EE8               	decfsz	wreg,f,c
  6908  000ED6  D7F9               	goto	u7695
  6909  000ED8  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  6910  000EDC  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  6911  000EE0  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  6912  000EE4  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  6913                           
  6914                           ;ff.c: 2317:  } else {
  6915  000EE8  D091               	goto	l650
  6916  000EEA                     l5846:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  6920  000EEA  EE20 F008          	lfsr	2,8
  6921  000EEE  5198               	movf	find_volume@fs& (0+255),w,b
  6922  000EF0  26D9               	addwf	fsr2l,f,c
  6923  000EF2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6924  000EF4  22DA               	addwfc	fsr2h,f,c
  6925  000EF6  50DE               	movf	postinc2,w,c
  6926  000EF8  10DE               	iorwf	postinc2,w,c
  6927  000EFA  B4D8               	btfsc	status,2,c
  6928  000EFC  D5D9               	goto	u7520
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  6932  000EFE  EE20 F01E          	lfsr	2,30
  6933  000F02  5198               	movf	find_volume@fs& (0+255),w,b
  6934  000F04  26D9               	addwf	fsr2l,f,c
  6935  000F06  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6936  000F08  22DA               	addwfc	fsr2h,f,c
  6937  000F0A  CFDE F04A          	movff	postinc2,??_find_volume
  6938  000F0E  CFDE F04B          	movff	postinc2,??_find_volume+1
  6939  000F12  CFDE F04C          	movff	postinc2,??_find_volume+2
  6940  000F16  CFDE F04D          	movff	postinc2,??_find_volume+3
  6941  000F1A  518D               	movf	find_volume@fasize& (0+255),w,b
  6942  000F1C  244A               	addwf	??_find_volume,w,c
  6943  000F1E  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6944  000F20  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6945  000F22  204B               	addwfc	??_find_volume+1,w,c
  6946  000F24  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  6947  000F26  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6948  000F28  204C               	addwfc	??_find_volume+2,w,c
  6949  000F2A  6E50               	movwf	(??_find_volume+6)& (0+255),c
  6950  000F2C  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6951  000F2E  204D               	addwfc	??_find_volume+3,w,c
  6952  000F30  6E51               	movwf	(??_find_volume+7)& (0+255),c
  6953  000F32  EE20 F022          	lfsr	2,34
  6954  000F36  5198               	movf	find_volume@fs& (0+255),w,b
  6955  000F38  26D9               	addwf	fsr2l,f,c
  6956  000F3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6957  000F3C  22DA               	addwfc	fsr2h,f,c
  6958  000F3E  C04E  FFDE         	movff	??_find_volume+4,postinc2
  6959  000F42  C04F  FFDE         	movff	??_find_volume+5,postinc2
  6960  000F46  C050  FFDE         	movff	??_find_volume+6,postinc2
  6961  000F4A  C051  FFDE         	movff	??_find_volume+7,postinc2
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  6965  000F4E  0E02               	movlw	2
  6966  000F50  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6967  000F52  B4D8               	btfsc	status,2,c
  6968  000F54  D044               	goto	l5858
  6969                           
  6970                           ; BSR set to: 0
  6971  000F56  EE20 F012          	lfsr	2,18
  6972  000F5A  5198               	movf	find_volume@fs& (0+255),w,b
  6973  000F5C  26D9               	addwf	fsr2l,f,c
  6974  000F5E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6975  000F60  22DA               	addwfc	fsr2h,f,c
  6976  000F62  CFDE F04A          	movff	postinc2,??_find_volume
  6977  000F66  CFDE F04B          	movff	postinc2,??_find_volume+1
  6978  000F6A  CFDE F04C          	movff	postinc2,??_find_volume+2
  6979  000F6E  CFDE F04D          	movff	postinc2,??_find_volume+3
  6980  000F72  0E01               	movlw	1
  6981  000F74  144A               	andwf	??_find_volume,w,c
  6982  000F76  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6983  000F78  0E00               	movlw	0
  6984  000F7A  144B               	andwf	??_find_volume+1,w,c
  6985  000F7C  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  6986  000F7E  0E00               	movlw	0
  6987  000F80  144C               	andwf	??_find_volume+2,w,c
  6988  000F82  6E50               	movwf	(??_find_volume+6)& (0+255),c
  6989  000F84  0E00               	movlw	0
  6990  000F86  144D               	andwf	??_find_volume+3,w,c
  6991  000F88  6E51               	movwf	(??_find_volume+7)& (0+255),c
  6992  000F8A  EE20 F012          	lfsr	2,18
  6993  000F8E  5198               	movf	find_volume@fs& (0+255),w,b
  6994  000F90  26D9               	addwf	fsr2l,f,c
  6995  000F92  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6996  000F94  22DA               	addwfc	fsr2h,f,c
  6997  000F96  CFDE F001          	movff	postinc2,___lmul@multiplier
  6998  000F9A  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  6999  000F9E  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7000  000FA2  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7001  000FA6  0E03               	movlw	3
  7002  000FA8  6E05               	movwf	___lmul@multiplicand,c
  7003  000FAA  0E00               	movlw	0
  7004  000FAC  6E06               	movwf	___lmul@multiplicand+1,c
  7005  000FAE  0E00               	movlw	0
  7006  000FB0  6E07               	movwf	___lmul@multiplicand+2,c
  7007  000FB2  0E00               	movlw	0
  7008  000FB4  6E08               	movwf	___lmul@multiplicand+3,c
  7009  000FB6  EC76  F029         	call	___lmul	;wreg free
  7010  000FBA  90D8               	bcf	status,0,c
  7011  000FBC  3204               	rrcf	?___lmul+3,f,c
  7012  000FBE  3203               	rrcf	?___lmul+2,f,c
  7013  000FC0  3202               	rrcf	?___lmul+1,f,c
  7014  000FC2  3201               	rrcf	?___lmul,f,c
  7015  000FC4  504E               	movf	??_find_volume+4,w,c
  7016  000FC6  2401               	addwf	?___lmul,w,c
  7017  000FC8  0100               	movlb	0	; () banked
  7018  000FCA  6F76               	movwf	find_volume@szbfat& (0+255),b
  7019  000FCC  504F               	movf	??_find_volume+5,w,c
  7020  000FCE  2002               	addwfc	?___lmul+1,w,c
  7021  000FD0  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7022  000FD2  5050               	movf	??_find_volume+6,w,c
  7023  000FD4  2003               	addwfc	?___lmul+2,w,c
  7024  000FD6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7025  000FD8  5051               	movf	??_find_volume+7,w,c
  7026  000FDA  2004               	addwfc	?___lmul+3,w,c
  7027  000FDC  D016               	goto	L6
  7028  000FDE                     l5858:
  7029                           
  7030                           ; BSR set to: 0
  7031  000FDE  EE20 F012          	lfsr	2,18
  7032  000FE2  5198               	movf	find_volume@fs& (0+255),w,b
  7033  000FE4  26D9               	addwf	fsr2l,f,c
  7034  000FE6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7035  000FE8  22DA               	addwfc	fsr2h,f,c
  7036  000FEA  CFDE F04A          	movff	postinc2,??_find_volume
  7037  000FEE  CFDE F04B          	movff	postinc2,??_find_volume+1
  7038  000FF2  CFDE F04C          	movff	postinc2,??_find_volume+2
  7039  000FF6  CFDE F04D          	movff	postinc2,??_find_volume+3
  7040  000FFA  90D8               	bcf	status,0,c
  7041  000FFC  344A               	rlcf	??_find_volume,w,c
  7042  000FFE  6F76               	movwf	find_volume@szbfat& (0+255),b
  7043  001000  344B               	rlcf	??_find_volume+1,w,c
  7044  001002  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7045  001004  344C               	rlcf	??_find_volume+2,w,c
  7046  001006  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7047  001008  344D               	rlcf	??_find_volume+3,w,c
  7048  00100A                     L6:
  7049  00100A  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7050  00100C                     l650:
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7054  00100C  0EFF               	movlw	255
  7055  00100E  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7056  001010  6E4A               	movwf	??_find_volume& (0+255),c
  7057  001012  0E01               	movlw	1
  7058  001014  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7059  001016  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7060  001018  0E00               	movlw	0
  7061  00101A  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7062  00101C  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7063  00101E  0E00               	movlw	0
  7064  001020  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7065  001022  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7066  001024  0E0A               	movlw	10
  7067  001026  D005               	goto	u7720
  7068  001028                     u7725:
  7069  001028  90D8               	bcf	status,0,c
  7070  00102A  324D               	rrcf	??_find_volume+3,f,c
  7071  00102C  324C               	rrcf	??_find_volume+2,f,c
  7072  00102E  324B               	rrcf	??_find_volume+1,f,c
  7073  001030  324A               	rrcf	??_find_volume,f,c
  7074  001032                     u7720:
  7075  001032  2EE8               	decfsz	wreg,f,c
  7076  001034  D7F9               	goto	u7725
  7077  001036  EE20 F016          	lfsr	2,22
  7078  00103A  5198               	movf	find_volume@fs& (0+255),w,b
  7079  00103C  26D9               	addwf	fsr2l,f,c
  7080  00103E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7081  001040  22DA               	addwfc	fsr2h,f,c
  7082  001042  504A               	movf	??_find_volume,w,c
  7083  001044  5CDE               	subwf	postinc2,w,c
  7084  001046  504B               	movf	??_find_volume+1,w,c
  7085  001048  58DE               	subwfb	postinc2,w,c
  7086  00104A  504C               	movf	??_find_volume+2,w,c
  7087  00104C  58DE               	subwfb	postinc2,w,c
  7088  00104E  504D               	movf	??_find_volume+3,w,c
  7089  001050  58DE               	subwfb	postinc2,w,c
  7090  001052  A0D8               	btfss	status,0,c
  7091  001054  D52D               	goto	u7520
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7095  001056  EE20 F00E          	lfsr	2,14
  7096  00105A  5198               	movf	find_volume@fs& (0+255),w,b
  7097  00105C  26D9               	addwf	fsr2l,f,c
  7098  00105E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7099  001060  22DA               	addwfc	fsr2h,f,c
  7100  001062  0EFF               	movlw	255
  7101  001064  6EDE               	movwf	postinc2,c
  7102  001066  0EFF               	movlw	255
  7103  001068  6EDE               	movwf	postinc2,c
  7104  00106A  0EFF               	movlw	255
  7105  00106C  6EDE               	movwf	postinc2,c
  7106  00106E  0EFF               	movlw	255
  7107  001070  6EDD               	movwf	postdec2,c
  7108  001072  52DD               	movf	postdec2,f,c
  7109  001074  52DD               	movf	postdec2,f,c
  7110  001076  EE10 F00A          	lfsr	1,10
  7111  00107A  5198               	movf	find_volume@fs& (0+255),w,b
  7112  00107C  26E1               	addwf	fsr1l,f,c
  7113  00107E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7114  001080  22E2               	addwfc	fsr1h,f,c
  7115  001082  CFDE FFE6          	movff	postinc2,postinc1
  7116  001086  CFDE FFE6          	movff	postinc2,postinc1
  7117  00108A  CFDE FFE6          	movff	postinc2,postinc1
  7118  00108E  CFDE FFE6          	movff	postinc2,postinc1
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7122  001092  EE20 F005          	lfsr	2,5
  7123  001096  5198               	movf	find_volume@fs& (0+255),w,b
  7124  001098  26D9               	addwf	fsr2l,f,c
  7125  00109A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7126  00109C  22DA               	addwfc	fsr2h,f,c
  7127  00109E  0E80               	movlw	128
  7128  0010A0  6EDF               	movwf	indf2,c
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;ff.c: 2333:  if (fmt == 3
  7132  0010A2  0E03               	movlw	3
  7133  0010A4  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7134  0010A6  A4D8               	btfss	status,2,c
  7135  0010A8  D083               	goto	l5882
  7136                           
  7137                           ; BSR set to: 0
  7138  0010AA  EE20 F05E          	lfsr	2,94
  7139  0010AE  5198               	movf	find_volume@fs& (0+255),w,b
  7140  0010B0  26D9               	addwf	fsr2l,f,c
  7141  0010B2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7142  0010B4  22DA               	addwfc	fsr2h,f,c
  7143  0010B6  04DE               	decf	postinc2,w,c
  7144  0010B8  10DE               	iorwf	postinc2,w,c
  7145  0010BA  A4D8               	btfss	status,2,c
  7146  0010BC  D079               	goto	l5882
  7147                           
  7148                           ; BSR set to: 0
  7149  0010BE  C098  F030         	movff	find_volume@fs,move_window@fs
  7150  0010C2  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7151  0010C6  0E01               	movlw	1
  7152  0010C8  2591               	addwf	find_volume@bsect& (0+255),w,b
  7153  0010CA  6E32               	movwf	move_window@sector,c
  7154  0010CC  0E00               	movlw	0
  7155  0010CE  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7156  0010D0  6E33               	movwf	move_window@sector+1,c
  7157  0010D2  0E00               	movlw	0
  7158  0010D4  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7159  0010D6  6E34               	movwf	move_window@sector+2,c
  7160  0010D8  0E00               	movlw	0
  7161  0010DA  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7162  0010DC  6E35               	movwf	move_window@sector+3,c
  7163  0010DE  EC71  F027         	call	_move_window	;wreg free
  7164  0010E2  0900               	iorlw	0
  7165  0010E4  A4D8               	btfss	status,2,c
  7166  0010E6  D064               	goto	l5882
  7167                           
  7168                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7169  0010E8  0100               	movlb	0	; () banked
  7170  0010EA  EE20 F005          	lfsr	2,5
  7171  0010EE  5198               	movf	find_volume@fs& (0+255),w,b
  7172  0010F0  26D9               	addwf	fsr2l,f,c
  7173  0010F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7174  0010F4  22DA               	addwfc	fsr2h,f,c
  7175  0010F6  0E00               	movlw	0
  7176  0010F8  6EDF               	movwf	indf2,c
  7177                           
  7178                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7179  0010FA  EE22 F02C          	lfsr	2,556
  7180  0010FE  5198               	movf	find_volume@fs& (0+255),w,b
  7181  001100  26D9               	addwf	fsr2l,f,c
  7182  001102  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7183  001104  22DA               	addwfc	fsr2h,f,c
  7184  001106  0E55               	movlw	85
  7185  001108  18DE               	xorwf	postinc2,w,c
  7186  00110A  E152               	bnz	l5882
  7187  00110C  0EAA               	movlw	170
  7188  00110E  18DE               	xorwf	postinc2,w,c
  7189  001110  A4D8               	btfss	status,2,c
  7190  001112  D04E               	goto	l5882
  7191                           
  7192                           ; BSR set to: 0
  7193  001114  EE20 F02E          	lfsr	2,46
  7194  001118  5198               	movf	find_volume@fs& (0+255),w,b
  7195  00111A  26D9               	addwf	fsr2l,f,c
  7196  00111C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7197  00111E  22DA               	addwfc	fsr2h,f,c
  7198  001120  0E52               	movlw	82
  7199  001122  18DE               	xorwf	postinc2,w,c
  7200  001124  E145               	bnz	l5882
  7201  001126  0E52               	movlw	82
  7202  001128  18DE               	xorwf	postinc2,w,c
  7203  00112A  E142               	bnz	l5882
  7204  00112C  0E61               	movlw	97
  7205  00112E  18DE               	xorwf	postinc2,w,c
  7206  001130  E13F               	bnz	l5882
  7207  001132  0E41               	movlw	65
  7208  001134  18DE               	xorwf	postinc2,w,c
  7209  001136  A4D8               	btfss	status,2,c
  7210  001138  D03B               	goto	l5882
  7211                           
  7212                           ; BSR set to: 0
  7213  00113A  EE22 F012          	lfsr	2,530
  7214  00113E  5198               	movf	find_volume@fs& (0+255),w,b
  7215  001140  26D9               	addwf	fsr2l,f,c
  7216  001142  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7217  001144  22DA               	addwfc	fsr2h,f,c
  7218  001146  0E72               	movlw	114
  7219  001148  18DE               	xorwf	postinc2,w,c
  7220  00114A  E132               	bnz	l5882
  7221  00114C  0E72               	movlw	114
  7222  00114E  18DE               	xorwf	postinc2,w,c
  7223  001150  E12F               	bnz	l5882
  7224  001152  0E41               	movlw	65
  7225  001154  18DE               	xorwf	postinc2,w,c
  7226  001156  E12C               	bnz	l5882
  7227  001158  0E61               	movlw	97
  7228  00115A  18DE               	xorwf	postinc2,w,c
  7229  00115C  A4D8               	btfss	status,2,c
  7230  00115E  D028               	goto	l5882
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7234  001160  EE22 F016          	lfsr	2,534
  7235  001164  5198               	movf	find_volume@fs& (0+255),w,b
  7236  001166  26D9               	addwf	fsr2l,f,c
  7237  001168  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7238  00116A  22DA               	addwfc	fsr2h,f,c
  7239  00116C  EE10 F00E          	lfsr	1,14
  7240  001170  5198               	movf	find_volume@fs& (0+255),w,b
  7241  001172  26E1               	addwf	fsr1l,f,c
  7242  001174  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7243  001176  22E2               	addwfc	fsr1h,f,c
  7244  001178  CFDE FFE6          	movff	postinc2,postinc1
  7245  00117C  CFDE FFE6          	movff	postinc2,postinc1
  7246  001180  CFDE FFE6          	movff	postinc2,postinc1
  7247  001184  CFDE FFE6          	movff	postinc2,postinc1
  7248                           
  7249                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7250  001188  EE22 F01A          	lfsr	2,538
  7251  00118C  5198               	movf	find_volume@fs& (0+255),w,b
  7252  00118E  26D9               	addwf	fsr2l,f,c
  7253  001190  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7254  001192  22DA               	addwfc	fsr2h,f,c
  7255  001194  EE10 F00A          	lfsr	1,10
  7256  001198  5198               	movf	find_volume@fs& (0+255),w,b
  7257  00119A  26E1               	addwf	fsr1l,f,c
  7258  00119C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7259  00119E  22E2               	addwfc	fsr1h,f,c
  7260  0011A0  CFDE FFE6          	movff	postinc2,postinc1
  7261  0011A4  CFDE FFE6          	movff	postinc2,postinc1
  7262  0011A8  CFDE FFE6          	movff	postinc2,postinc1
  7263  0011AC  CFDE FFE6          	movff	postinc2,postinc1
  7264  0011B0                     l5882:
  7265                           
  7266                           ;ff.c: 2352:  fs->fs_type = fmt;
  7267  0011B0  C098  FFD9         	movff	find_volume@fs,fsr2l
  7268  0011B4  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7269  0011B8  C097  FFDF         	movff	find_volume@fmt,indf2
  7270                           
  7271                           ;ff.c: 2353:  fs->id = ++Fsid;
  7272  0011BC  0100               	movlb	0	; () banked
  7273  0011BE  4BD2               	infsnz	_Fsid& (0+255),f,b
  7274  0011C0  2BD3               	incf	(_Fsid+1)& (0+255),f,b
  7275  0011C2  EE20 F006          	lfsr	2,6
  7276  0011C6  5198               	movf	find_volume@fs& (0+255),w,b
  7277  0011C8  26D9               	addwf	fsr2l,f,c
  7278  0011CA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7279  0011CC  22DA               	addwfc	fsr2h,f,c
  7280  0011CE  C0D2  FFDE         	movff	_Fsid,postinc2
  7281  0011D2  C0D3  FFDD         	movff	_Fsid+1,postdec2
  7282  0011D6  EF62  F004         	goto	l5662
  7283  0011DA                     __end_of_find_volume:
  7284                           	opt callstack 0
  7285                           
  7286 ;; *************** function _get_ldnumber *****************
  7287 ;; Defined at:
  7288 ;;		line 2114 in file "ff.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7291 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7294 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7295 ;;  i               2   10[COMRAM] unsigned short 
  7296 ;;  vol             2    8[COMRAM] int 
  7297 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7298 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  2    0[COMRAM] int 
  7301 ;; Registers used:
  7302 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7308 ;;      Params:         2       0       0       0       0       0       0       0       0
  7309 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7310 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7311 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7312 ;;Total ram usage:       14 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; This function calls:
  7315 ;;		Nothing
  7316 ;; This function is called by:
  7317 ;;		_find_volume
  7318 ;;		_f_mount
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text17
  7323  004972                     __ptext17:
  7324                           	opt callstack 0
  7325  004972                     _get_ldnumber:
  7326                           	opt callstack 28
  7327                           
  7328                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;incstack = 0
  7332  004972  6809               	setf	get_ldnumber@vol,c
  7333  004974  680A               	setf	get_ldnumber@vol+1,c
  7334                           
  7335                           ;ff.c: 2129:  if (*path) {
  7336  004976  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7337  00497A  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7338  00497E  50DE               	movf	postinc2,w,c
  7339  004980  10DE               	iorwf	postinc2,w,c
  7340  004982  B4D8               	btfsc	status,2,c
  7341  004984  D05B               	goto	l5438
  7342                           
  7343                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7344  004986  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7345  00498A  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7346  00498E  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7347  004992  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7348  004996  D002               	goto	l5412
  7349  004998                     l5410:
  7350  004998  4A0D               	infsnz	get_ldnumber@tt,f,c
  7351  00499A  2A0E               	incf	get_ldnumber@tt+1,f,c
  7352  00499C                     l5412:
  7353  00499C  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7354  0049A0  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7355  0049A4                     	if	0	;tblptru may be non-zero
  7356  0049A4                     	endif
  7357  0049A4                     	if	0	;tblptru may be non-zero
  7358  0049A4                     	endif
  7359  0049A4  0E20               	movlw	32
  7360  0049A6  0008               	tblrd		*
  7361  0049A8  64F5               	cpfsgt	tablat,c
  7362  0049AA  D009               	goto	u6990
  7363  0049AC  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7364  0049B0  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7365  0049B4                     	if	0	;tblptru may be non-zero
  7366  0049B4                     	endif
  7367  0049B4                     	if	0	;tblptru may be non-zero
  7368  0049B4                     	endif
  7369  0049B4  0008               	tblrd		*
  7370  0049B6  50F5               	movf	tablat,w,c
  7371  0049B8  0A3A               	xorlw	58
  7372  0049BA  A4D8               	btfss	status,2,c
  7373  0049BC  D7ED               	goto	l5410
  7374  0049BE                     u6990:
  7375                           
  7376                           ;ff.c: 2131:   if (*tt == ':') {
  7377  0049BE  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7378  0049C2  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7379  0049C6                     	if	0	;tblptru may be non-zero
  7380  0049C6                     	endif
  7381  0049C6                     	if	0	;tblptru may be non-zero
  7382  0049C6                     	endif
  7383  0049C6  0008               	tblrd		*
  7384  0049C8  50F5               	movf	tablat,w,c
  7385  0049CA  0A3A               	xorlw	58
  7386  0049CC  A4D8               	btfss	status,2,c
  7387  0049CE  D03B               	goto	l5442
  7388                           
  7389                           ;ff.c: 2132:    tp = *path;
  7390  0049D0  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7391  0049D4  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7392  0049D8  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7393  0049DC  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7394                           
  7395                           ;ff.c: 2133:    i = *tp++ - '0';
  7396  0049E0  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7397  0049E4  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7398  0049E8                     	if	0	;tblptru may be non-zero
  7399  0049E8                     	endif
  7400  0049E8                     	if	0	;tblptru may be non-zero
  7401  0049E8                     	endif
  7402  0049E8  0008               	tblrd		*
  7403  0049EA  CFF5 F003          	movff	tablat,??_get_ldnumber
  7404  0049EE  0ED0               	movlw	208
  7405  0049F0  2403               	addwf	??_get_ldnumber,w,c
  7406  0049F2  6E0B               	movwf	get_ldnumber@i,c
  7407  0049F4  6A0C               	clrf	get_ldnumber@i+1,c
  7408  0049F6  0EFF               	movlw	255
  7409  0049F8  220C               	addwfc	get_ldnumber@i+1,f,c
  7410  0049FA  4A07               	infsnz	get_ldnumber@tp,f,c
  7411  0049FC  2A08               	incf	get_ldnumber@tp+1,f,c
  7412                           
  7413                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7414  0049FE  500C               	movf	get_ldnumber@i+1,w,c
  7415  004A00  E11D               	bnz	l5438
  7416  004A02  0E0A               	movlw	10
  7417  004A04  5C0B               	subwf	get_ldnumber@i,w,c
  7418  004A06  B0D8               	btfsc	status,0,c
  7419  004A08  D019               	goto	l5438
  7420  004A0A  500D               	movf	get_ldnumber@tt,w,c
  7421  004A0C  1807               	xorwf	get_ldnumber@tp,w,c
  7422  004A0E  E116               	bnz	l5438
  7423  004A10  500E               	movf	get_ldnumber@tt+1,w,c
  7424  004A12  1808               	xorwf	get_ldnumber@tp+1,w,c
  7425  004A14  A4D8               	btfss	status,2,c
  7426  004A16  D012               	goto	l5438
  7427                           
  7428                           ;ff.c: 2135:     if (i < 1) {
  7429  004A18  500B               	movf	get_ldnumber@i,w,c
  7430  004A1A  100C               	iorwf	get_ldnumber@i+1,w,c
  7431  004A1C  A4D8               	btfss	status,2,c
  7432  004A1E  D00E               	goto	l5438
  7433                           
  7434                           ;ff.c: 2136:      vol = (int)i;
  7435  004A20  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7436  004A24  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7437                           
  7438                           ;ff.c: 2137:      *path = ++tt;
  7439  004A28  4A0D               	infsnz	get_ldnumber@tt,f,c
  7440  004A2A  2A0E               	incf	get_ldnumber@tt+1,f,c
  7441  004A2C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7442  004A30  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7443  004A34  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7444  004A38  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7445  004A3C                     l5438:
  7446                           
  7447                           ;ff.c: 2156:    return vol;
  7448  004A3C  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7449  004A40  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7450  004A44  0012               	return	
  7451  004A46                     l5442:
  7452                           
  7453                           ;ff.c: 2161:   vol = 0;
  7454  004A46  0E00               	movlw	0
  7455  004A48  6E0A               	movwf	get_ldnumber@vol+1,c
  7456  004A4A  0E00               	movlw	0
  7457  004A4C  6E09               	movwf	get_ldnumber@vol,c
  7458  004A4E  D7F6               	goto	l5438
  7459  004A50                     __end_of_get_ldnumber:
  7460                           	opt callstack 0
  7461                           
  7462 ;; *************** function _disk_initialize *****************
  7463 ;; Defined at:
  7464 ;;		line 296 in file "diskio.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  pdrv            1    wreg     unsigned char 
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;  pdrv            1   17[COMRAM] unsigned char 
  7469 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7470 ;;  tmr             2   26[COMRAM] unsigned short 
  7471 ;;  n               1   28[COMRAM] unsigned char 
  7472 ;;  ty              1   25[COMRAM] unsigned char 
  7473 ;;  cmd             1   24[COMRAM] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      unsigned char 
  7476 ;; Registers used:
  7477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0
  7484 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7485 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7486 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7487 ;;Total ram usage:       13 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    5
  7490 ;; This function calls:
  7491 ;;		_SPI1_Exchange8bit
  7492 ;;		_SPI1_Initialize
  7493 ;;		_SPI1_Open
  7494 ;;		_deselect
  7495 ;;		_send_cmd
  7496 ;; This function is called by:
  7497 ;;		_find_volume
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text18
  7502  003B92                     __ptext18:
  7503                           	opt callstack 0
  7504  003B92                     _disk_initialize:
  7505                           	opt callstack 23
  7506                           
  7507                           ;incstack = 0
  7508                           ;disk_initialize@pdrv stored from wreg
  7509  003B92  6E12               	movwf	disk_initialize@pdrv,c
  7510                           
  7511                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7512  003B94  5012               	movf	disk_initialize@pdrv,w,c
  7513  003B96  B4D8               	btfsc	status,2,c
  7514  003B98  D002               	goto	l173
  7515  003B9A  0E01               	movlw	1
  7516  003B9C  0012               	return	
  7517  003B9E                     l173:
  7518                           
  7519                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7520  003B9E  0100               	movlb	0	; () banked
  7521  003BA0  A3F7               	btfss	_Stat& (0+255),1,b
  7522  003BA2  D003               	goto	l5040
  7523  003BA4                     u6260:
  7524  003BA4  0100               	movlb	0	; () banked
  7525  003BA6  51F7               	movf	_Stat& (0+255),w,b
  7526  003BA8  0012               	return	
  7527  003BAA                     l5040:
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;diskio.c: 308:  SPI1_Initialize();
  7531  003BAA  ECEC  F02A         	call	_SPI1_Initialize	;wreg free
  7532                           
  7533                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7534  003BAE  0E0A               	movlw	10
  7535  003BB0  6E1D               	movwf	disk_initialize@n,c
  7536  003BB2  D004               	goto	l5048
  7537  003BB4                     l5044:
  7538  003BB4  0EFF               	movlw	255
  7539  003BB6  ECD6  F02A         	call	_SPI1_Exchange8bit
  7540  003BBA  061D               	decf	disk_initialize@n,f,c
  7541  003BBC                     l5048:
  7542  003BBC  501D               	movf	disk_initialize@n,w,c
  7543  003BBE  A4D8               	btfss	status,2,c
  7544  003BC0  D7F9               	goto	l5044
  7545                           
  7546                           ;diskio.c: 311:  ty = 0;
  7547  003BC2  0E00               	movlw	0
  7548  003BC4  6E1A               	movwf	disk_initialize@ty,c
  7549                           
  7550                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7551  003BC6  0E00               	movlw	0
  7552  003BC8  6E0B               	movwf	send_cmd@arg,c
  7553  003BCA  0E00               	movlw	0
  7554  003BCC  6E0C               	movwf	send_cmd@arg+1,c
  7555  003BCE  0E00               	movlw	0
  7556  003BD0  6E0D               	movwf	send_cmd@arg+2,c
  7557  003BD2  0E00               	movlw	0
  7558  003BD4  6E0E               	movwf	send_cmd@arg+3,c
  7559  003BD6  0E00               	movlw	0
  7560  003BD8  ECC5  F029         	call	_send_cmd
  7561  003BDC  06E8               	decf	wreg,f,c
  7562  003BDE  A4D8               	btfss	status,2,c
  7563  003BE0  D0C1               	goto	l195
  7564                           
  7565                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7566  003BE2  0EAA               	movlw	170
  7567  003BE4  6E0B               	movwf	send_cmd@arg,c
  7568  003BE6  0E01               	movlw	1
  7569  003BE8  6E0C               	movwf	send_cmd@arg+1,c
  7570  003BEA  0E00               	movlw	0
  7571  003BEC  6E0D               	movwf	send_cmd@arg+2,c
  7572  003BEE  0E00               	movlw	0
  7573  003BF0  6E0E               	movwf	send_cmd@arg+3,c
  7574  003BF2  0E08               	movlw	8
  7575  003BF4  ECC5  F029         	call	_send_cmd
  7576  003BF8  06E8               	decf	wreg,f,c
  7577  003BFA  A4D8               	btfss	status,2,c
  7578  003BFC  D067               	goto	l5104
  7579                           
  7580                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7581  003BFE  0E00               	movlw	0
  7582  003C00  6E1D               	movwf	disk_initialize@n,c
  7583  003C02                     l5062:
  7584  003C02  0E13               	movlw	low disk_initialize@ocr
  7585  003C04  241D               	addwf	disk_initialize@n,w,c
  7586  003C06  6ED9               	movwf	fsr2l,c
  7587  003C08  6ADA               	clrf	fsr2h,c
  7588  003C0A  0E00               	movlw	high disk_initialize@ocr
  7589  003C0C  22DA               	addwfc	fsr2h,f,c
  7590  003C0E  0EFF               	movlw	255
  7591  003C10  ECD6  F02A         	call	_SPI1_Exchange8bit
  7592  003C14  6EDF               	movwf	indf2,c
  7593  003C16  2A1D               	incf	disk_initialize@n,f,c
  7594  003C18  0E03               	movlw	3
  7595  003C1A  641D               	cpfsgt	disk_initialize@n,c
  7596  003C1C  D7F2               	goto	l5062
  7597                           
  7598                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7599  003C1E  0415               	decf	disk_initialize@ocr+2,w,c
  7600  003C20  A4D8               	btfss	status,2,c
  7601  003C22  D0A0               	goto	l195
  7602  003C24  0EAA               	movlw	170
  7603  003C26  1816               	xorwf	disk_initialize@ocr+3,w,c
  7604  003C28  A4D8               	btfss	status,2,c
  7605  003C2A  D09C               	goto	l195
  7606                           
  7607                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7608  003C2C  0E03               	movlw	3
  7609  003C2E  6E1C               	movwf	disk_initialize@tmr+1,c
  7610  003C30  0EE8               	movlw	232
  7611  003C32  6E1B               	movwf	disk_initialize@tmr,c
  7612  003C34  D018               	goto	l184
  7613  003C36                     l5074:
  7614                           
  7615                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7616  003C36  0E00               	movlw	0
  7617  003C38  6E0B               	movwf	send_cmd@arg,c
  7618  003C3A  0E00               	movlw	0
  7619  003C3C  6E0C               	movwf	send_cmd@arg+1,c
  7620  003C3E  0E00               	movlw	0
  7621  003C40  6E0D               	movwf	send_cmd@arg+2,c
  7622  003C42  0E40               	movlw	64
  7623  003C44  6E0E               	movwf	send_cmd@arg+3,c
  7624  003C46  0EA9               	movlw	169
  7625  003C48  ECC5  F029         	call	_send_cmd
  7626  003C4C  0900               	iorlw	0
  7627  003C4E  B4D8               	btfsc	status,2,c
  7628  003C50  D00E               	goto	u6340
  7629                           
  7630                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7631  003C52  0E03               	movlw	3
  7632  003C54  6E11               	movwf	??_disk_initialize& (0+255),c
  7633  003C56  0E98               	movlw	152
  7634  003C58                     u9067:
  7635  003C58  2EE8               	decfsz	wreg,f,c
  7636  003C5A  D7FE               	bra	u9067
  7637  003C5C  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7638  003C5E  D7FC               	bra	u9067
  7639                           
  7640                           ;diskio.c: 319:     }
  7641  003C60  061B               	decf	disk_initialize@tmr,f,c
  7642  003C62  A0D8               	btfss	status,0,c
  7643  003C64  061C               	decf	disk_initialize@tmr+1,f,c
  7644  003C66                     l184:
  7645  003C66  501B               	movf	disk_initialize@tmr,w,c
  7646  003C68  101C               	iorwf	disk_initialize@tmr+1,w,c
  7647  003C6A  A4D8               	btfss	status,2,c
  7648  003C6C  D7E4               	goto	l5074
  7649  003C6E                     u6340:
  7650                           
  7651                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7652  003C6E  501B               	movf	disk_initialize@tmr,w,c
  7653  003C70  101C               	iorwf	disk_initialize@tmr+1,w,c
  7654  003C72  B4D8               	btfsc	status,2,c
  7655  003C74  D077               	goto	l195
  7656  003C76  0E00               	movlw	0
  7657  003C78  6E0B               	movwf	send_cmd@arg,c
  7658  003C7A  0E00               	movlw	0
  7659  003C7C  6E0C               	movwf	send_cmd@arg+1,c
  7660  003C7E  0E00               	movlw	0
  7661  003C80  6E0D               	movwf	send_cmd@arg+2,c
  7662  003C82  0E00               	movlw	0
  7663  003C84  6E0E               	movwf	send_cmd@arg+3,c
  7664  003C86  0E3A               	movlw	58
  7665  003C88  ECC5  F029         	call	_send_cmd
  7666  003C8C  0900               	iorlw	0
  7667  003C8E  A4D8               	btfss	status,2,c
  7668  003C90  D069               	goto	l195
  7669                           
  7670                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7671  003C92  0E00               	movlw	0
  7672  003C94  6E1D               	movwf	disk_initialize@n,c
  7673  003C96                     l5092:
  7674  003C96  0E13               	movlw	low disk_initialize@ocr
  7675  003C98  241D               	addwf	disk_initialize@n,w,c
  7676  003C9A  6ED9               	movwf	fsr2l,c
  7677  003C9C  6ADA               	clrf	fsr2h,c
  7678  003C9E  0E00               	movlw	high disk_initialize@ocr
  7679  003CA0  22DA               	addwfc	fsr2h,f,c
  7680  003CA2  0EFF               	movlw	255
  7681  003CA4  ECD6  F02A         	call	_SPI1_Exchange8bit
  7682  003CA8  6EDF               	movwf	indf2,c
  7683  003CAA  2A1D               	incf	disk_initialize@n,f,c
  7684  003CAC  0E03               	movlw	3
  7685  003CAE  641D               	cpfsgt	disk_initialize@n,c
  7686  003CB0  D7F2               	goto	l5092
  7687                           
  7688                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7689  003CB2  BC13               	btfsc	disk_initialize@ocr,6,c
  7690  003CB4  D004               	goto	l5100
  7691  003CB6  0E00               	movlw	0
  7692  003CB8  6E18               	movwf	_disk_initialize$403+1,c
  7693  003CBA  0E04               	movlw	4
  7694  003CBC  D003               	goto	L7
  7695  003CBE                     l5100:
  7696  003CBE  0E00               	movlw	0
  7697  003CC0  6E18               	movwf	_disk_initialize$403+1,c
  7698  003CC2  0E0C               	movlw	12
  7699  003CC4                     L7:
  7700  003CC4  6E17               	movwf	_disk_initialize$403,c
  7701  003CC6  C017  F01A         	movff	_disk_initialize$403,disk_initialize@ty
  7702  003CCA  D04C               	goto	l195
  7703  003CCC                     l5104:
  7704                           
  7705                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7706  003CCC  0E00               	movlw	0
  7707  003CCE  6E0B               	movwf	send_cmd@arg,c
  7708  003CD0  0E00               	movlw	0
  7709  003CD2  6E0C               	movwf	send_cmd@arg+1,c
  7710  003CD4  0E00               	movlw	0
  7711  003CD6  6E0D               	movwf	send_cmd@arg+2,c
  7712  003CD8  0E00               	movlw	0
  7713  003CDA  6E0E               	movwf	send_cmd@arg+3,c
  7714  003CDC  0EA9               	movlw	169
  7715  003CDE  ECC5  F029         	call	_send_cmd
  7716  003CE2  6E11               	movwf	??_disk_initialize& (0+255),c
  7717  003CE4  0E02               	movlw	2
  7718  003CE6  6011               	cpfslt	??_disk_initialize,c
  7719  003CE8  D004               	goto	l5108
  7720                           
  7721                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  7722  003CEA  0E02               	movlw	2
  7723  003CEC  6E1A               	movwf	disk_initialize@ty,c
  7724  003CEE  0EA9               	movlw	169
  7725  003CF0  D003               	goto	L8
  7726  003CF2                     l5108:
  7727                           
  7728                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  7729  003CF2  0E01               	movlw	1
  7730  003CF4  6E1A               	movwf	disk_initialize@ty,c
  7731  003CF6  0E01               	movlw	1
  7732  003CF8                     L8:
  7733  003CF8  6E19               	movwf	disk_initialize@cmd,c
  7734                           
  7735                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  7736                           
  7737                           ;diskio.c: 330:    }
  7738  003CFA  0E03               	movlw	3
  7739  003CFC  6E1C               	movwf	disk_initialize@tmr+1,c
  7740  003CFE  0EE8               	movlw	232
  7741  003D00  6E1B               	movwf	disk_initialize@tmr,c
  7742  003D02  D018               	goto	l198
  7743  003D04                     l5110:
  7744                           
  7745                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  7746  003D04  0E00               	movlw	0
  7747  003D06  6E0B               	movwf	send_cmd@arg,c
  7748  003D08  0E00               	movlw	0
  7749  003D0A  6E0C               	movwf	send_cmd@arg+1,c
  7750  003D0C  0E00               	movlw	0
  7751  003D0E  6E0D               	movwf	send_cmd@arg+2,c
  7752  003D10  0E00               	movlw	0
  7753  003D12  6E0E               	movwf	send_cmd@arg+3,c
  7754  003D14  5019               	movf	disk_initialize@cmd,w,c
  7755  003D16  ECC5  F029         	call	_send_cmd
  7756  003D1A  0900               	iorlw	0
  7757  003D1C  B4D8               	btfsc	status,2,c
  7758  003D1E  D00E               	goto	u6410
  7759                           
  7760                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  7761  003D20  0E03               	movlw	3
  7762  003D22  6E11               	movwf	??_disk_initialize& (0+255),c
  7763  003D24  0E98               	movlw	152
  7764  003D26                     u9077:
  7765  003D26  2EE8               	decfsz	wreg,f,c
  7766  003D28  D7FE               	bra	u9077
  7767  003D2A  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7768  003D2C  D7FC               	bra	u9077
  7769                           
  7770                           ;diskio.c: 334:    }
  7771  003D2E  061B               	decf	disk_initialize@tmr,f,c
  7772  003D30  A0D8               	btfss	status,0,c
  7773  003D32  061C               	decf	disk_initialize@tmr+1,f,c
  7774  003D34                     l198:
  7775  003D34  501B               	movf	disk_initialize@tmr,w,c
  7776  003D36  101C               	iorwf	disk_initialize@tmr+1,w,c
  7777  003D38  A4D8               	btfss	status,2,c
  7778  003D3A  D7E4               	goto	l5110
  7779  003D3C                     u6410:
  7780                           
  7781                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  7782  003D3C  501B               	movf	disk_initialize@tmr,w,c
  7783  003D3E  101C               	iorwf	disk_initialize@tmr+1,w,c
  7784  003D40  B4D8               	btfsc	status,2,c
  7785  003D42  D00E               	goto	u6430
  7786  003D44  0E00               	movlw	0
  7787  003D46  6E0B               	movwf	send_cmd@arg,c
  7788  003D48  0E02               	movlw	2
  7789  003D4A  6E0C               	movwf	send_cmd@arg+1,c
  7790  003D4C  0E00               	movlw	0
  7791  003D4E  6E0D               	movwf	send_cmd@arg+2,c
  7792  003D50  0E00               	movlw	0
  7793  003D52  6E0E               	movwf	send_cmd@arg+3,c
  7794  003D54  0E10               	movlw	16
  7795  003D56  ECC5  F029         	call	_send_cmd
  7796  003D5A  0900               	iorlw	0
  7797  003D5C  B4D8               	btfsc	status,2,c
  7798  003D5E  D002               	goto	l195
  7799  003D60                     u6430:
  7800                           
  7801                           ;diskio.c: 336:     ty = 0;
  7802  003D60  0E00               	movlw	0
  7803  003D62  6E1A               	movwf	disk_initialize@ty,c
  7804  003D64                     l195:
  7805                           
  7806                           ;diskio.c: 339:  CardType = ty;
  7807  003D64  C01A  F0D6         	movff	disk_initialize@ty,_CardType
  7808                           
  7809                           ;diskio.c: 340:  deselect();
  7810  003D68  ECF3  F02A         	call	_deselect	;wreg free
  7811                           
  7812                           ;diskio.c: 342:  if (ty) {
  7813  003D6C  501A               	movf	disk_initialize@ty,w,c
  7814  003D6E  B4D8               	btfsc	status,2,c
  7815  003D70  D719               	goto	u6260
  7816                           
  7817                           ;diskio.c: 343:   Stat &= ~0x01;
  7818  003D72  0100               	movlb	0	; () banked
  7819  003D74  91F7               	bcf	_Stat& (0+255),0,b
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;diskio.c: 344:   SPI1_Open();
  7823  003D76  ECDE  F02A         	call	_SPI1_Open	;wreg free
  7824  003D7A  D714               	goto	u6260
  7825  003D7C                     __end_of_disk_initialize:
  7826                           	opt callstack 0
  7827                           
  7828 ;; *************** function _SPI1_Open *****************
  7829 ;; Defined at:
  7830 ;;		line 77 in file "mcc_generated_files/spi1.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, status,2
  7839 ;; Tracked objects:
  7840 ;;		On entry : 0/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7844 ;;      Params:         0       0       0       0       0       0       0       0       0
  7845 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7846 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7847 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; This function calls:
  7851 ;;		Nothing
  7852 ;; This function is called by:
  7853 ;;		_disk_initialize
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text19
  7858  0055BC                     __ptext19:
  7859                           	opt callstack 0
  7860  0055BC                     _SPI1_Open:
  7861                           	opt callstack 27
  7862                           
  7863                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  7864                           
  7865                           ;incstack = 0
  7866  0055BC  0E40               	movlw	64
  7867  0055BE  6EC7               	movwf	4039,c	;volatile
  7868                           
  7869                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  7870  0055C0  0E20               	movlw	32
  7871  0055C2  6EC6               	movwf	4038,c	;volatile
  7872                           
  7873                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  7874  0055C4  0E00               	movlw	0
  7875  0055C6  6EC8               	movwf	4040,c	;volatile
  7876  0055C8  0012               	return		;funcret
  7877  0055CA                     __end_of_SPI1_Open:
  7878                           	opt callstack 0
  7879                           
  7880 ;; *************** function _check_fs *****************
  7881 ;; Defined at:
  7882 ;;		line 2175 in file "ff.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  fs              2   58[COMRAM] PTR struct .
  7885 ;;		 -> NULL(0), FatFs(558), 
  7886 ;;  sect            4   60[COMRAM] unsigned long 
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;		None
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      unsigned char 
  7891 ;; Registers used:
  7892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7898 ;;      Params:         6       0       0       0       0       0       0       0       0
  7899 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7900 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7901 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7902 ;;Total ram usage:       10 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    8
  7905 ;; This function calls:
  7906 ;;		_move_window
  7907 ;; This function is called by:
  7908 ;;		_find_volume
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text20
  7913  004886                     __ptext20:
  7914                           	opt callstack 0
  7915  004886                     _check_fs:
  7916                           	opt callstack 20
  7917                           
  7918                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  7919                           
  7920                           ;incstack = 0
  7921  004886  EE20 F004          	lfsr	2,4
  7922  00488A  503B               	movf	check_fs@fs,w,c
  7923  00488C  26D9               	addwf	fsr2l,f,c
  7924  00488E  503C               	movf	check_fs@fs+1,w,c
  7925  004890  22DA               	addwfc	fsr2h,f,c
  7926  004892  0E00               	movlw	0
  7927  004894  6EDF               	movwf	indf2,c
  7928  004896  EE20 F02A          	lfsr	2,42
  7929  00489A  503B               	movf	check_fs@fs,w,c
  7930  00489C  26D9               	addwf	fsr2l,f,c
  7931  00489E  503C               	movf	check_fs@fs+1,w,c
  7932  0048A0  22DA               	addwfc	fsr2h,f,c
  7933  0048A2  0EFF               	movlw	255
  7934  0048A4  6EDE               	movwf	postinc2,c
  7935  0048A6  0EFF               	movlw	255
  7936  0048A8  6EDE               	movwf	postinc2,c
  7937  0048AA  0EFF               	movlw	255
  7938  0048AC  6EDE               	movwf	postinc2,c
  7939  0048AE  0EFF               	movlw	255
  7940  0048B0  6EDD               	movwf	postdec2,c
  7941                           
  7942                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  7943  0048B2  C03B  F030         	movff	check_fs@fs,move_window@fs
  7944  0048B6  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  7945  0048BA  C03D  F032         	movff	check_fs@sect,move_window@sector
  7946  0048BE  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  7947  0048C2  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  7948  0048C6  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  7949  0048CA  EC71  F027         	call	_move_window	;wreg free
  7950  0048CE  0900               	iorlw	0
  7951  0048D0  B4D8               	btfsc	status,2,c
  7952  0048D2  D002               	goto	l5456
  7953                           
  7954                           ;ff.c: 2182:   return 3;
  7955  0048D4  0E03               	movlw	3
  7956  0048D6  0012               	return	
  7957  0048D8                     l5456:
  7958                           
  7959                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  7960  0048D8  EE22 F02C          	lfsr	2,556
  7961  0048DC  503B               	movf	check_fs@fs,w,c
  7962  0048DE  26D9               	addwf	fsr2l,f,c
  7963  0048E0  503C               	movf	check_fs@fs+1,w,c
  7964  0048E2  22DA               	addwfc	fsr2h,f,c
  7965  0048E4  0E55               	movlw	85
  7966  0048E6  18DE               	xorwf	postinc2,w,c
  7967  0048E8  E104               	bnz	u7050
  7968  0048EA  0EAA               	movlw	170
  7969  0048EC  18DE               	xorwf	postinc2,w,c
  7970  0048EE  B4D8               	btfsc	status,2,c
  7971  0048F0  D002               	goto	l5462
  7972  0048F2                     u7050:
  7973                           
  7974                           ;ff.c: 2185:   return 2;
  7975  0048F2  0E02               	movlw	2
  7976  0048F4  0012               	return	
  7977  0048F6                     l5462:
  7978                           
  7979                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  7980  0048F6  EE20 F064          	lfsr	2,100
  7981  0048FA  503B               	movf	check_fs@fs,w,c
  7982  0048FC  26D9               	addwf	fsr2l,f,c
  7983  0048FE  503C               	movf	check_fs@fs+1,w,c
  7984  004900  22DA               	addwfc	fsr2h,f,c
  7985  004902  0EFF               	movlw	255
  7986  004904  14DE               	andwf	postinc2,w,c
  7987  004906  6E41               	movwf	??_check_fs& (0+255),c
  7988  004908  0EFF               	movlw	255
  7989  00490A  14DE               	andwf	postinc2,w,c
  7990  00490C  6E42               	movwf	(??_check_fs+1)& (0+255),c
  7991  00490E  0EFF               	movlw	255
  7992  004910  14DE               	andwf	postinc2,w,c
  7993  004912  6E43               	movwf	(??_check_fs+2)& (0+255),c
  7994  004914  0E00               	movlw	0
  7995  004916  14DE               	andwf	postinc2,w,c
  7996  004918  6E44               	movwf	(??_check_fs+3)& (0+255),c
  7997  00491A  0E46               	movlw	70
  7998  00491C  1841               	xorwf	??_check_fs,w,c
  7999  00491E  E10A               	bnz	l5468
  8000  004920  0E41               	movlw	65
  8001  004922  1842               	xorwf	??_check_fs+1,w,c
  8002  004924  E107               	bnz	l5468
  8003  004926  0E54               	movlw	84
  8004  004928  1843               	xorwf	??_check_fs+2,w,c
  8005  00492A  1044               	iorwf	??_check_fs+3,w,c
  8006  00492C  A4D8               	btfss	status,2,c
  8007  00492E  D002               	goto	l5468
  8008  004930                     u7060:
  8009                           
  8010                           ;ff.c: 2188:   return 0;
  8011  004930  0E00               	movlw	0
  8012  004932  0012               	return	
  8013  004934                     l5468:
  8014                           
  8015                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8016  004934  EE20 F080          	lfsr	2,128
  8017  004938  503B               	movf	check_fs@fs,w,c
  8018  00493A  26D9               	addwf	fsr2l,f,c
  8019  00493C  503C               	movf	check_fs@fs+1,w,c
  8020  00493E  22DA               	addwfc	fsr2h,f,c
  8021  004940  0EFF               	movlw	255
  8022  004942  14DE               	andwf	postinc2,w,c
  8023  004944  6E41               	movwf	??_check_fs& (0+255),c
  8024  004946  0EFF               	movlw	255
  8025  004948  14DE               	andwf	postinc2,w,c
  8026  00494A  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8027  00494C  0EFF               	movlw	255
  8028  00494E  14DE               	andwf	postinc2,w,c
  8029  004950  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8030  004952  0E00               	movlw	0
  8031  004954  14DE               	andwf	postinc2,w,c
  8032  004956  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8033  004958  0E46               	movlw	70
  8034  00495A  1841               	xorwf	??_check_fs,w,c
  8035  00495C  E108               	bnz	l5474
  8036  00495E  0E41               	movlw	65
  8037  004960  1842               	xorwf	??_check_fs+1,w,c
  8038  004962  E105               	bnz	l5474
  8039  004964  0E54               	movlw	84
  8040  004966  1843               	xorwf	??_check_fs+2,w,c
  8041  004968  1044               	iorwf	??_check_fs+3,w,c
  8042  00496A  B4D8               	btfsc	status,2,c
  8043  00496C  D7E1               	goto	u7060
  8044  00496E                     l5474:
  8045                           
  8046                           ;ff.c: 2192:  return 1;
  8047  00496E  0E01               	movlw	1
  8048  004970  0012               	return		;funcret
  8049  004972                     __end_of_check_fs:
  8050                           	opt callstack 0
  8051                           
  8052 ;; *************** function _f_lseek *****************
  8053 ;; Defined at:
  8054 ;;		line 3033 in file "ff.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  fp              2   13[BANK0 ] PTR struct .
  8057 ;;		 -> Fil(32), 
  8058 ;;  ofs             4   15[BANK0 ] unsigned long 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  clst            4   48[BANK0 ] unsigned long 
  8061 ;;  bcs             4   44[BANK0 ] unsigned long 
  8062 ;;  nsect           4   40[BANK0 ] unsigned long 
  8063 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8064 ;;  res             1   39[BANK0 ] enum E93
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      enum E4918
  8067 ;; Registers used:
  8068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8074 ;;      Params:         0       6       0       0       0       0       0       0       0
  8075 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8076 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8077 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8078 ;;Total ram usage:       39 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:   10
  8081 ;; This function calls:
  8082 ;;		___lldiv
  8083 ;;		_clust2sect
  8084 ;;		_create_chain
  8085 ;;		_get_fat
  8086 ;;		_validate
  8087 ;; This function is called by:
  8088 ;;		_main
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           	psect	text21
  8093  00193E                     __ptext21:
  8094                           	opt callstack 0
  8095  00193E                     _f_lseek:
  8096                           	opt callstack 20
  8097                           
  8098                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8099                           
  8100                           ;incstack = 0
  8101  00193E  C06D  F002         	movff	f_lseek@fp,validate@obj
  8102  001942  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8103  001946  ECC4  F027         	call	_validate	;wreg free
  8104  00194A  0100               	movlb	0	; () banked
  8105  00194C  6F87               	movwf	f_lseek@res& (0+255),b
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8109  00194E  5187               	movf	f_lseek@res& (0+255),w,b
  8110  001950  B4D8               	btfsc	status,2,c
  8111  001952  D002               	goto	l6188
  8112  001954                     u8180:
  8113                           
  8114                           ; BSR set to: 0
  8115  001954  5187               	movf	f_lseek@res& (0+255),w,b
  8116  001956  0012               	return	
  8117  001958                     l6188:
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;ff.c: 3047:  if (fp->err)
  8121  001958  EE20 F005          	lfsr	2,5
  8122  00195C  516D               	movf	f_lseek@fp& (0+255),w,b
  8123  00195E  26D9               	addwf	fsr2l,f,c
  8124  001960  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8125  001962  22DA               	addwfc	fsr2h,f,c
  8126  001964  50DF               	movf	indf2,w,c
  8127  001966  B4D8               	btfsc	status,2,c
  8128  001968  D008               	goto	l6194
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8132  00196A  EE20 F005          	lfsr	2,5
  8133  00196E  516D               	movf	f_lseek@fp& (0+255),w,b
  8134  001970  26D9               	addwf	fsr2l,f,c
  8135  001972  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8136  001974  22DA               	addwfc	fsr2h,f,c
  8137  001976  50DF               	movf	indf2,w,c
  8138  001978  0012               	return	
  8139  00197A                     l6194:
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8143  00197A  EE20 F00A          	lfsr	2,10
  8144  00197E  516D               	movf	f_lseek@fp& (0+255),w,b
  8145  001980  26D9               	addwf	fsr2l,f,c
  8146  001982  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8147  001984  22DA               	addwfc	fsr2h,f,c
  8148  001986  516F               	movf	f_lseek@ofs& (0+255),w,b
  8149  001988  5CDE               	subwf	postinc2,w,c
  8150  00198A  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8151  00198C  58DE               	subwfb	postinc2,w,c
  8152  00198E  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8153  001990  58DE               	subwfb	postinc2,w,c
  8154  001992  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8155  001994  58DE               	subwfb	postinc2,w,c
  8156  001996  B0D8               	btfsc	status,0,c
  8157  001998  D016               	goto	l770
  8158                           
  8159                           ; BSR set to: 0
  8160  00199A  EE20 F004          	lfsr	2,4
  8161  00199E  516D               	movf	f_lseek@fp& (0+255),w,b
  8162  0019A0  26D9               	addwf	fsr2l,f,c
  8163  0019A2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8164  0019A4  22DA               	addwfc	fsr2h,f,c
  8165  0019A6  B2DF               	btfsc	indf2,1,c
  8166  0019A8  D00E               	goto	l770
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8170  0019AA  EE20 F00A          	lfsr	2,10
  8171  0019AE  516D               	movf	f_lseek@fp& (0+255),w,b
  8172  0019B0  26D9               	addwf	fsr2l,f,c
  8173  0019B2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8174  0019B4  22DA               	addwfc	fsr2h,f,c
  8175  0019B6  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8176  0019BA  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8177  0019BE  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8178  0019C2  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8179  0019C6                     l770:
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;ff.c: 3113:   ifptr = fp->fptr;
  8183  0019C6  EE20 F006          	lfsr	2,6
  8184  0019CA  516D               	movf	f_lseek@fp& (0+255),w,b
  8185  0019CC  26D9               	addwf	fsr2l,f,c
  8186  0019CE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8187  0019D0  22DA               	addwfc	fsr2h,f,c
  8188  0019D2  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8189  0019D6  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8190  0019DA  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8191  0019DE  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8192                           
  8193                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8194  0019E2  0E00               	movlw	0
  8195  0019E4  6F88               	movwf	f_lseek@nsect& (0+255),b
  8196  0019E6  0E00               	movlw	0
  8197  0019E8  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8198  0019EA  0E00               	movlw	0
  8199  0019EC  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8200  0019EE  0E00               	movlw	0
  8201  0019F0  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8202  0019F2  EE20 F006          	lfsr	2,6
  8203  0019F6  516D               	movf	f_lseek@fp& (0+255),w,b
  8204  0019F8  26D9               	addwf	fsr2l,f,c
  8205  0019FA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8206  0019FC  22DA               	addwfc	fsr2h,f,c
  8207  0019FE  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8208  001A02  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8209  001A06  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8210  001A0A  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;ff.c: 3115:   if (ofs) {
  8214  001A0E  516F               	movf	f_lseek@ofs& (0+255),w,b
  8215  001A10  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8216  001A12  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8217  001A14  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8218  001A16  B4D8               	btfsc	status,2,c
  8219  001A18  D22D               	goto	l6288
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8223  001A1A  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8224  001A1E  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8225  001A22  EE10 F002          	lfsr	1,2
  8226  001A26  50DE               	movf	postinc2,w,c
  8227  001A28  26E1               	addwf	fsr1l,f,c
  8228  001A2A  50DD               	movf	postdec2,w,c
  8229  001A2C  22E2               	addwfc	fsr1h,f,c
  8230  001A2E  50E7               	movf	indf1,w,c
  8231  001A30  6F73               	movwf	??_f_lseek& (0+255),b
  8232  001A32  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8233  001A36  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8234  001A38  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8235  001A3A  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8236  001A3C  0E09               	movlw	9
  8237  001A3E                     u8235:
  8238  001A3E  90D8               	bcf	status,0,c
  8239  001A40  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8240  001A42  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8241  001A44  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8242  001A46  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8243  001A48  2EE8               	decfsz	wreg,f,c
  8244  001A4A  D7F9               	goto	u8235
  8245  001A4C  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8246  001A50  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8247  001A54  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8248  001A58  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;ff.c: 3117:    if (ifptr > 0 &&
  8252  001A5C  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8253  001A5E  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8254  001A60  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8255  001A62  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8256  001A64  B4D8               	btfsc	status,2,c
  8257  001A66  D097               	goto	l6210
  8258                           
  8259                           ; BSR set to: 0
  8260  001A68  0EFF               	movlw	255
  8261  001A6A  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8262  001A6C  6E01               	movwf	___lldiv@dividend,c
  8263  001A6E  0EFF               	movlw	255
  8264  001A70  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8265  001A72  6E02               	movwf	___lldiv@dividend+1,c
  8266  001A74  0EFF               	movlw	255
  8267  001A76  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8268  001A78  6E03               	movwf	___lldiv@dividend+2,c
  8269  001A7A  0EFF               	movlw	255
  8270  001A7C  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8271  001A7E  6E04               	movwf	___lldiv@dividend+3,c
  8272  001A80  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8273  001A84  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8274  001A88  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8275  001A8C  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8276  001A90  EC0E  F028         	call	___lldiv	;wreg free
  8277  001A94  C001  F073         	movff	?___lldiv,??_f_lseek
  8278  001A98  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8279  001A9C  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8280  001AA0  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8281  001AA4  0EFF               	movlw	255
  8282  001AA6  0100               	movlb	0	; () banked
  8283  001AA8  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8284  001AAA  6E01               	movwf	___lldiv@dividend,c
  8285  001AAC  0EFF               	movlw	255
  8286  001AAE  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8287  001AB0  6E02               	movwf	___lldiv@dividend+1,c
  8288  001AB2  0EFF               	movlw	255
  8289  001AB4  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8290  001AB6  6E03               	movwf	___lldiv@dividend+2,c
  8291  001AB8  0EFF               	movlw	255
  8292  001ABA  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8293  001ABC  6E04               	movwf	___lldiv@dividend+3,c
  8294  001ABE  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8295  001AC2  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8296  001AC6  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8297  001ACA  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8298  001ACE  EC0E  F028         	call	___lldiv	;wreg free
  8299  001AD2  5001               	movf	?___lldiv,w,c
  8300  001AD4  0100               	movlb	0	; () banked
  8301  001AD6  5D73               	subwf	??_f_lseek& (0+255),w,b
  8302  001AD8  5002               	movf	?___lldiv+1,w,c
  8303  001ADA  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8304  001ADC  5003               	movf	?___lldiv+2,w,c
  8305  001ADE  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8306  001AE0  5004               	movf	?___lldiv+3,w,c
  8307  001AE2  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8308  001AE4  A0D8               	btfss	status,0,c
  8309  001AE6  D057               	goto	l6210
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8313  001AE8  0EFF               	movlw	255
  8314  001AEA  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8315  001AEC  6F73               	movwf	??_f_lseek& (0+255),b
  8316  001AEE  0EFF               	movlw	255
  8317  001AF0  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8318  001AF2  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8319  001AF4  0EFF               	movlw	255
  8320  001AF6  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8321  001AF8  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8322  001AFA  0EFF               	movlw	255
  8323  001AFC  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8324  001AFE  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8325  001B00  1D73               	comf	??_f_lseek& (0+255),w,b
  8326  001B02  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8327  001B04  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8328  001B06  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8329  001B08  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8330  001B0A  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8331  001B0C  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8332  001B0E  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8333  001B10  0EFF               	movlw	255
  8334  001B12  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8335  001B14  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8336  001B16  0EFF               	movlw	255
  8337  001B18  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8338  001B1A  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8339  001B1C  0EFF               	movlw	255
  8340  001B1E  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8341  001B20  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8342  001B22  0EFF               	movlw	255
  8343  001B24  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8344  001B26  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8345  001B28  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8346  001B2A  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8347  001B2C  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8348  001B2E  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8349  001B30  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8350  001B32  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8351  001B34  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8352  001B36  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8353  001B38  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8354  001B3A  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8355  001B3C  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8356  001B3E  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8357  001B40  EE20 F006          	lfsr	2,6
  8358  001B44  516D               	movf	f_lseek@fp& (0+255),w,b
  8359  001B46  26D9               	addwf	fsr2l,f,c
  8360  001B48  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8361  001B4A  22DA               	addwfc	fsr2h,f,c
  8362  001B4C  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8363  001B50  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8364  001B54  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8365  001B58  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8366                           
  8367                           ;ff.c: 3120:     ofs -= fp->fptr;
  8368  001B5C  EE20 F006          	lfsr	2,6
  8369  001B60  516D               	movf	f_lseek@fp& (0+255),w,b
  8370  001B62  26D9               	addwf	fsr2l,f,c
  8371  001B64  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8372  001B66  22DA               	addwfc	fsr2h,f,c
  8373  001B68  50DE               	movf	postinc2,w,c
  8374  001B6A  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8375  001B6C  50DE               	movf	postinc2,w,c
  8376  001B6E  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8377  001B70  50DE               	movf	postinc2,w,c
  8378  001B72  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8379  001B74  50DD               	movf	postdec2,w,c
  8380  001B76  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8381                           
  8382                           ;ff.c: 3121:     clst = fp->clust;
  8383  001B78  EE20 F012          	lfsr	2,18
  8384  001B7C  516D               	movf	f_lseek@fp& (0+255),w,b
  8385  001B7E  26D9               	addwf	fsr2l,f,c
  8386  001B80  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8387  001B82  22DA               	addwfc	fsr2h,f,c
  8388  001B84  CFDE F090          	movff	postinc2,f_lseek@clst
  8389  001B88  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8390  001B8C  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8391  001B90  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8392                           
  8393                           ;ff.c: 3122:    } else {
  8394  001B94  D06E               	goto	l6234
  8395  001B96                     l6210:
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;ff.c: 3123:     clst = fp->sclust;
  8399  001B96  EE20 F00E          	lfsr	2,14
  8400  001B9A  516D               	movf	f_lseek@fp& (0+255),w,b
  8401  001B9C  26D9               	addwf	fsr2l,f,c
  8402  001B9E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8403  001BA0  22DA               	addwfc	fsr2h,f,c
  8404  001BA2  CFDE F090          	movff	postinc2,f_lseek@clst
  8405  001BA6  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8406  001BAA  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8407  001BAE  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;ff.c: 3125:     if (clst == 0) {
  8411  001BB2  5190               	movf	f_lseek@clst& (0+255),w,b
  8412  001BB4  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8413  001BB6  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8414  001BB8  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8415  001BBA  A4D8               	btfss	status,2,c
  8416  001BBC  D04C               	goto	l774
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8420  001BBE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8421  001BC2  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8422  001BC6  CFDE F056          	movff	postinc2,create_chain@fs
  8423  001BCA  CFDD F057          	movff	postdec2,create_chain@fs+1
  8424  001BCE  0E00               	movlw	0
  8425  001BD0  6E58               	movwf	create_chain@clst,c
  8426  001BD2  0E00               	movlw	0
  8427  001BD4  6E59               	movwf	create_chain@clst+1,c
  8428  001BD6  0E00               	movlw	0
  8429  001BD8  6E5A               	movwf	create_chain@clst+2,c
  8430  001BDA  0E00               	movlw	0
  8431  001BDC  6E5B               	movwf	create_chain@clst+3,c
  8432  001BDE  ECA9  F019         	call	_create_chain	;wreg free
  8433  001BE2  C056  F090         	movff	?_create_chain,f_lseek@clst
  8434  001BE6  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8435  001BEA  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8436  001BEE  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8437                           
  8438                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8439  001BF2  0100               	movlb	0	; () banked
  8440  001BF4  0590               	decf	f_lseek@clst& (0+255),w,b
  8441  001BF6  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8442  001BF8  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8443  001BFA  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8444  001BFC  A4D8               	btfss	status,2,c
  8445  001BFE  D00A               	goto	l6224
  8446  001C00                     u8270:
  8447                           
  8448                           ; BSR set to: 0
  8449  001C00  EE20 F005          	lfsr	2,5
  8450  001C04  516D               	movf	f_lseek@fp& (0+255),w,b
  8451  001C06  26D9               	addwf	fsr2l,f,c
  8452  001C08  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8453  001C0A  22DA               	addwfc	fsr2h,f,c
  8454  001C0C  0E02               	movlw	2
  8455  001C0E  6EDF               	movwf	indf2,c
  8456                           
  8457                           ; BSR set to: 0
  8458  001C10  0E02               	movlw	2
  8459  001C12  0012               	return	
  8460  001C14                     l6224:
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8464  001C14  2990               	incf	f_lseek@clst& (0+255),w,b
  8465  001C16  E111               	bnz	l6232
  8466  001C18  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8467  001C1A  E10F               	bnz	l6232
  8468  001C1C  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8469  001C1E  E10D               	bnz	l6232
  8470  001C20  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8471  001C22  A4D8               	btfss	status,2,c
  8472  001C24  D00A               	goto	l6232
  8473  001C26                     u8280:
  8474                           
  8475                           ; BSR set to: 0
  8476  001C26  EE20 F005          	lfsr	2,5
  8477  001C2A  516D               	movf	f_lseek@fp& (0+255),w,b
  8478  001C2C  26D9               	addwf	fsr2l,f,c
  8479  001C2E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8480  001C30  22DA               	addwfc	fsr2h,f,c
  8481  001C32  0E01               	movlw	1
  8482  001C34  6EDF               	movwf	indf2,c
  8483                           
  8484                           ; BSR set to: 0
  8485  001C36  0E01               	movlw	1
  8486  001C38  0012               	return	
  8487  001C3A                     l6232:
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;ff.c: 3129:      fp->sclust = clst;
  8491  001C3A  EE20 F00E          	lfsr	2,14
  8492  001C3E  516D               	movf	f_lseek@fp& (0+255),w,b
  8493  001C40  26D9               	addwf	fsr2l,f,c
  8494  001C42  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8495  001C44  22DA               	addwfc	fsr2h,f,c
  8496  001C46  C090  FFDE         	movff	f_lseek@clst,postinc2
  8497  001C4A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8498  001C4E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8499  001C52  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8500  001C56                     l774:
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;ff.c: 3132:     fp->clust = clst;
  8504  001C56  EE20 F012          	lfsr	2,18
  8505  001C5A  516D               	movf	f_lseek@fp& (0+255),w,b
  8506  001C5C  26D9               	addwf	fsr2l,f,c
  8507  001C5E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8508  001C60  22DA               	addwfc	fsr2h,f,c
  8509  001C62  C090  FFDE         	movff	f_lseek@clst,postinc2
  8510  001C66  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8511  001C6A  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8512  001C6E  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8513  001C72                     l6234:
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;ff.c: 3134:    if (clst != 0) {
  8517  001C72  5190               	movf	f_lseek@clst& (0+255),w,b
  8518  001C74  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8519  001C76  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8520  001C78  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8521  001C7A  A4D8               	btfss	status,2,c
  8522  001C7C  D097               	goto	l6270
  8523  001C7E  D0FA               	goto	l6288
  8524  001C80                     l6238:
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8528  001C80  EE20 F004          	lfsr	2,4
  8529  001C84  516D               	movf	f_lseek@fp& (0+255),w,b
  8530  001C86  26D9               	addwf	fsr2l,f,c
  8531  001C88  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8532  001C8A  22DA               	addwfc	fsr2h,f,c
  8533  001C8C  A2DF               	btfss	indf2,1,c
  8534  001C8E  D02A               	goto	l6246
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8538  001C90  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8539  001C94  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8540  001C98  CFDE F056          	movff	postinc2,create_chain@fs
  8541  001C9C  CFDD F057          	movff	postdec2,create_chain@fs+1
  8542  001CA0  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8543  001CA4  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8544  001CA8  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8545  001CAC  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8546  001CB0  ECA9  F019         	call	_create_chain	;wreg free
  8547  001CB4  C056  F090         	movff	?_create_chain,f_lseek@clst
  8548  001CB8  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8549  001CBC  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8550  001CC0  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8551                           
  8552                           ;ff.c: 3139:       if (clst == 0) {
  8553  001CC4  0100               	movlb	0	; () banked
  8554  001CC6  5190               	movf	f_lseek@clst& (0+255),w,b
  8555  001CC8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8556  001CCA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8557  001CCC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8558  001CCE  A4D8               	btfss	status,2,c
  8559  001CD0  D023               	goto	l6248
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;ff.c: 3140:        ofs = bcs; break;
  8563  001CD2  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8564  001CD6  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8565  001CDA  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8566  001CDE  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8567  001CE2  D06E               	goto	u8350
  8568  001CE4                     l6246:
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8572  001CE4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8573  001CE8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8574  001CEC  CFDE F03B          	movff	postinc2,get_fat@fs
  8575  001CF0  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8576  001CF4  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8577  001CF8  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8578  001CFC  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8579  001D00  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8580  001D04  EC0D  F016         	call	_get_fat	;wreg free
  8581  001D08  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8582  001D0C  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8583  001D10  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8584  001D14  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8585  001D18                     l6248:
  8586                           
  8587                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8588  001D18  0100               	movlb	0	; () banked
  8589  001D1A  2990               	incf	f_lseek@clst& (0+255),w,b
  8590  001D1C  E107               	bnz	l6256
  8591  001D1E  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8592  001D20  E105               	bnz	l6256
  8593  001D22  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8594  001D24  E103               	bnz	l6256
  8595  001D26  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8596  001D28  B4D8               	btfsc	status,2,c
  8597  001D2A  D77D               	goto	u8280
  8598  001D2C                     l6256:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8602  001D2C  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8603  001D2E  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8604  001D30  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8605  001D32  E104               	bnz	u8330
  8606  001D34  0E02               	movlw	2
  8607  001D36  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8608  001D38  A0D8               	btfss	status,0,c
  8609  001D3A  D762               	goto	u8270
  8610  001D3C                     u8330:
  8611                           
  8612                           ; BSR set to: 0
  8613  001D3C  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8614  001D40  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8615  001D44  EE10 F012          	lfsr	1,18
  8616  001D48  50DE               	movf	postinc2,w,c
  8617  001D4A  26E1               	addwf	fsr1l,f,c
  8618  001D4C  50DD               	movf	postdec2,w,c
  8619  001D4E  22E2               	addwfc	fsr1h,f,c
  8620  001D50  50E6               	movf	postinc1,w,c
  8621  001D52  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8622  001D54  50E6               	movf	postinc1,w,c
  8623  001D56  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8624  001D58  50E6               	movf	postinc1,w,c
  8625  001D5A  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8626  001D5C  50E6               	movf	postinc1,w,c
  8627  001D5E  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8628  001D60  B0D8               	btfsc	status,0,c
  8629  001D62  D74E               	goto	u8270
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;ff.c: 3147:      fp->clust = clst;
  8633                           
  8634                           ; BSR set to: 0
  8635  001D64  EE20 F012          	lfsr	2,18
  8636  001D68  516D               	movf	f_lseek@fp& (0+255),w,b
  8637  001D6A  26D9               	addwf	fsr2l,f,c
  8638  001D6C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8639  001D6E  22DA               	addwfc	fsr2h,f,c
  8640  001D70  C090  FFDE         	movff	f_lseek@clst,postinc2
  8641  001D74  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8642  001D78  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8643  001D7C  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8644                           
  8645                           ;ff.c: 3148:      fp->fptr += bcs;
  8646  001D80  EE20 F006          	lfsr	2,6
  8647  001D84  516D               	movf	f_lseek@fp& (0+255),w,b
  8648  001D86  26D9               	addwf	fsr2l,f,c
  8649  001D88  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8650  001D8A  22DA               	addwfc	fsr2h,f,c
  8651  001D8C  518C               	movf	f_lseek@bcs& (0+255),w,b
  8652  001D8E  26DE               	addwf	postinc2,f,c
  8653  001D90  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8654  001D92  22DE               	addwfc	postinc2,f,c
  8655  001D94  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8656  001D96  22DE               	addwfc	postinc2,f,c
  8657  001D98  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8658  001D9A  22DE               	addwfc	postinc2,f,c
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;ff.c: 3149:      ofs -= bcs;
  8662  001D9C  518C               	movf	f_lseek@bcs& (0+255),w,b
  8663  001D9E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8664  001DA0  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8665  001DA2  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8666  001DA4  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8667  001DA6  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8668  001DA8  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8669  001DAA  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8670  001DAC                     l6270:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;ff.c: 3135:     while (ofs > bcs) {
  8674  001DAC  516F               	movf	f_lseek@ofs& (0+255),w,b
  8675  001DAE  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8676  001DB0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8677  001DB2  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8678  001DB4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8679  001DB6  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8680  001DB8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8681  001DBA  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8682  001DBC  A0D8               	btfss	status,0,c
  8683  001DBE  D760               	goto	l6238
  8684  001DC0                     u8350:
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;ff.c: 3151:     fp->fptr += ofs;
  8688  001DC0  EE20 F006          	lfsr	2,6
  8689  001DC4  516D               	movf	f_lseek@fp& (0+255),w,b
  8690  001DC6  26D9               	addwf	fsr2l,f,c
  8691  001DC8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8692  001DCA  22DA               	addwfc	fsr2h,f,c
  8693  001DCC  516F               	movf	f_lseek@ofs& (0+255),w,b
  8694  001DCE  26DE               	addwf	postinc2,f,c
  8695  001DD0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8696  001DD2  22DE               	addwfc	postinc2,f,c
  8697  001DD4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8698  001DD6  22DE               	addwfc	postinc2,f,c
  8699  001DD8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8700  001DDA  22DE               	addwfc	postinc2,f,c
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8704  001DDC  0EFF               	movlw	255
  8705  001DDE  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8706  001DE0  6F73               	movwf	??_f_lseek& (0+255),b
  8707  001DE2  0E01               	movlw	1
  8708  001DE4  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8709  001DE6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8710  001DE8  0E00               	movlw	0
  8711  001DEA  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8712  001DEC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8713  001DEE  0E00               	movlw	0
  8714  001DF0  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8715  001DF2  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8716  001DF4  5173               	movf	??_f_lseek& (0+255),w,b
  8717  001DF6  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8718  001DF8  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8719  001DFA  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8720  001DFC  B4D8               	btfsc	status,2,c
  8721  001DFE  D03A               	goto	l6288
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  8725  001E00  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8726  001E04  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8727  001E08  CFDE F00D          	movff	postinc2,clust2sect@fs
  8728  001E0C  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8729  001E10  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  8730  001E14  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  8731  001E18  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  8732  001E1C  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  8733  001E20  ECBC  F026         	call	_clust2sect	;wreg free
  8734  001E24  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  8735  001E28  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  8736  001E2C  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  8737  001E30  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  8738                           
  8739                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8740  001E34  0100               	movlb	0	; () banked
  8741  001E36  5188               	movf	f_lseek@nsect& (0+255),w,b
  8742  001E38  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8743  001E3A  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8744  001E3C  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8745  001E3E  B4D8               	btfsc	status,2,c
  8746  001E40  D6DF               	goto	u8270
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  8750                           
  8751                           ; BSR set to: 0
  8752  001E42  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  8753  001E46  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  8754  001E4A  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  8755  001E4E  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  8756  001E52  0E0A               	movlw	10
  8757  001E54  D005               	goto	u8380
  8758  001E56                     u8385:
  8759  001E56  90D8               	bcf	status,0,c
  8760  001E58  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8761  001E5A  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8762  001E5C  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8763  001E5E  3373               	rrcf	??_f_lseek& (0+255),f,b
  8764  001E60                     u8380:
  8765  001E60  2EE8               	decfsz	wreg,f,c
  8766  001E62  D7F9               	goto	u8385
  8767  001E64  5173               	movf	??_f_lseek& (0+255),w,b
  8768  001E66  2788               	addwf	f_lseek@nsect& (0+255),f,b
  8769  001E68  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  8770  001E6A  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8771  001E6C  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  8772  001E6E  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8773  001E70  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  8774  001E72  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8775  001E74                     l6288:
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8779  001E74  EE20 F006          	lfsr	2,6
  8780  001E78  516D               	movf	f_lseek@fp& (0+255),w,b
  8781  001E7A  26D9               	addwf	fsr2l,f,c
  8782  001E7C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8783  001E7E  22DA               	addwfc	fsr2h,f,c
  8784  001E80  0EFF               	movlw	255
  8785  001E82  14DE               	andwf	postinc2,w,c
  8786  001E84  6F73               	movwf	??_f_lseek& (0+255),b
  8787  001E86  0E01               	movlw	1
  8788  001E88  14DE               	andwf	postinc2,w,c
  8789  001E8A  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8790  001E8C  0E00               	movlw	0
  8791  001E8E  14DE               	andwf	postinc2,w,c
  8792  001E90  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8793  001E92  0E00               	movlw	0
  8794  001E94  14DE               	andwf	postinc2,w,c
  8795  001E96  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8796  001E98  5173               	movf	??_f_lseek& (0+255),w,b
  8797  001E9A  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8798  001E9C  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8799  001E9E  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8800  001EA0  B4D8               	btfsc	status,2,c
  8801  001EA2  D021               	goto	l6294
  8802                           
  8803                           ; BSR set to: 0
  8804  001EA4  EE20 F016          	lfsr	2,22
  8805  001EA8  516D               	movf	f_lseek@fp& (0+255),w,b
  8806  001EAA  26D9               	addwf	fsr2l,f,c
  8807  001EAC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8808  001EAE  22DA               	addwfc	fsr2h,f,c
  8809  001EB0  5188               	movf	f_lseek@nsect& (0+255),w,b
  8810  001EB2  18DE               	xorwf	postinc2,w,c
  8811  001EB4  E10A               	bnz	u8400
  8812  001EB6  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8813  001EB8  18DE               	xorwf	postinc2,w,c
  8814  001EBA  E107               	bnz	u8400
  8815  001EBC  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8816  001EBE  18DE               	xorwf	postinc2,w,c
  8817  001EC0  E104               	bnz	u8400
  8818  001EC2  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8819  001EC4  18DE               	xorwf	postinc2,w,c
  8820  001EC6  B4D8               	btfsc	status,2,c
  8821  001EC8  D00E               	goto	l6294
  8822  001ECA                     u8400:
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;ff.c: 3171:    fp->dsect = nsect;
  8826  001ECA  EE20 F016          	lfsr	2,22
  8827  001ECE  516D               	movf	f_lseek@fp& (0+255),w,b
  8828  001ED0  26D9               	addwf	fsr2l,f,c
  8829  001ED2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8830  001ED4  22DA               	addwfc	fsr2h,f,c
  8831  001ED6  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8832  001EDA  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8833  001EDE  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8834  001EE2  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8835  001EE6                     l6294:
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  8839  001EE6  EE20 F006          	lfsr	2,6
  8840  001EEA  516D               	movf	f_lseek@fp& (0+255),w,b
  8841  001EEC  26D9               	addwf	fsr2l,f,c
  8842  001EEE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8843  001EF0  22DA               	addwfc	fsr2h,f,c
  8844  001EF2  EE10 F00A          	lfsr	1,10
  8845  001EF6  516D               	movf	f_lseek@fp& (0+255),w,b
  8846  001EF8  26E1               	addwf	fsr1l,f,c
  8847  001EFA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8848  001EFC  22E2               	addwfc	fsr1h,f,c
  8849  001EFE  50DE               	movf	postinc2,w,c
  8850  001F00  5CE6               	subwf	postinc1,w,c
  8851  001F02  50DE               	movf	postinc2,w,c
  8852  001F04  58E6               	subwfb	postinc1,w,c
  8853  001F06  50DE               	movf	postinc2,w,c
  8854  001F08  58E6               	subwfb	postinc1,w,c
  8855  001F0A  50DE               	movf	postinc2,w,c
  8856  001F0C  58E6               	subwfb	postinc1,w,c
  8857  001F0E  B0D8               	btfsc	status,0,c
  8858  001F10  D521               	goto	u8180
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  8862  001F12  EE20 F006          	lfsr	2,6
  8863  001F16  516D               	movf	f_lseek@fp& (0+255),w,b
  8864  001F18  26D9               	addwf	fsr2l,f,c
  8865  001F1A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8866  001F1C  22DA               	addwfc	fsr2h,f,c
  8867  001F1E  EE10 F00A          	lfsr	1,10
  8868  001F22  516D               	movf	f_lseek@fp& (0+255),w,b
  8869  001F24  26E1               	addwf	fsr1l,f,c
  8870  001F26  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8871  001F28  22E2               	addwfc	fsr1h,f,c
  8872  001F2A  CFDE FFE6          	movff	postinc2,postinc1
  8873  001F2E  CFDE FFE6          	movff	postinc2,postinc1
  8874  001F32  CFDE FFE6          	movff	postinc2,postinc1
  8875  001F36  CFDE FFE6          	movff	postinc2,postinc1
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;ff.c: 3176:    fp->flag |= 0x20;
  8879  001F3A  EE20 F004          	lfsr	2,4
  8880  001F3E  516D               	movf	f_lseek@fp& (0+255),w,b
  8881  001F40  26D9               	addwf	fsr2l,f,c
  8882  001F42  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8883  001F44  22DA               	addwfc	fsr2h,f,c
  8884  001F46  0E00               	movlw	0
  8885  001F48  8ADB               	bsf	plusw2,5,c
  8886  001F4A  D504               	goto	u8180
  8887  001F4C                     __end_of_f_lseek:
  8888                           	opt callstack 0
  8889                           
  8890 ;; *************** function _create_chain *****************
  8891 ;; Defined at:
  8892 ;;		line 990 in file "ff.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  fs              2   85[COMRAM] PTR struct .
  8895 ;;		 -> NULL(0), FatFs(558), 
  8896 ;;  clst            4   87[COMRAM] unsigned long 
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;  cs              4    9[BANK0 ] unsigned long 
  8899 ;;  ncl             4    5[BANK0 ] unsigned long 
  8900 ;;  scl             4    1[BANK0 ] unsigned long 
  8901 ;;  res             1    0[BANK0 ] enum E93
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  4   85[COMRAM] unsigned long 
  8904 ;; Registers used:
  8905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8911 ;;      Params:         6       0       0       0       0       0       0       0       0
  8912 ;;      Locals:         0      13       0       0       0       0       0       0       0
  8913 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8914 ;;      Totals:        10      13       0       0       0       0       0       0       0
  8915 ;;Total ram usage:       23 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    9
  8918 ;; This function calls:
  8919 ;;		_get_fat
  8920 ;;		_put_fat
  8921 ;; This function is called by:
  8922 ;;		_dir_next
  8923 ;;		_f_write
  8924 ;;		_f_lseek
  8925 ;; This function uses a non-reentrant model
  8926 ;;
  8927                           
  8928                           	psect	text22
  8929  003352                     __ptext22:
  8930                           	opt callstack 0
  8931  003352                     _create_chain:
  8932                           	opt callstack 20
  8933                           
  8934                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;incstack = 0
  8938  003352  5058               	movf	create_chain@clst,w,c
  8939  003354  1059               	iorwf	create_chain@clst+1,w,c
  8940  003356  105A               	iorwf	create_chain@clst+2,w,c
  8941  003358  105B               	iorwf	create_chain@clst+3,w,c
  8942  00335A  A4D8               	btfss	status,2,c
  8943  00335C  D02E               	goto	l4640
  8944                           
  8945                           ;ff.c: 1000:   scl = fs->last_clust;
  8946  00335E  EE20 F00A          	lfsr	2,10
  8947  003362  5056               	movf	create_chain@fs,w,c
  8948  003364  26D9               	addwf	fsr2l,f,c
  8949  003366  5057               	movf	create_chain@fs+1,w,c
  8950  003368  22DA               	addwfc	fsr2h,f,c
  8951  00336A  CFDE F061          	movff	postinc2,create_chain@scl
  8952  00336E  CFDE F062          	movff	postinc2,create_chain@scl+1
  8953  003372  CFDE F063          	movff	postinc2,create_chain@scl+2
  8954  003376  CFDE F064          	movff	postinc2,create_chain@scl+3
  8955                           
  8956                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  8957  00337A  0100               	movlb	0	; () banked
  8958  00337C  5161               	movf	create_chain@scl& (0+255),w,b
  8959  00337E  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  8960  003380  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  8961  003382  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  8962  003384  B4D8               	btfsc	status,2,c
  8963  003386  D010               	goto	u5440
  8964                           
  8965                           ; BSR set to: 0
  8966  003388  EE20 F012          	lfsr	2,18
  8967  00338C  5056               	movf	create_chain@fs,w,c
  8968  00338E  26D9               	addwf	fsr2l,f,c
  8969  003390  5057               	movf	create_chain@fs+1,w,c
  8970  003392  22DA               	addwfc	fsr2h,f,c
  8971  003394  50DE               	movf	postinc2,w,c
  8972  003396  5D61               	subwf	create_chain@scl& (0+255),w,b
  8973  003398  50DE               	movf	postinc2,w,c
  8974  00339A  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  8975  00339C  50DE               	movf	postinc2,w,c
  8976  00339E  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  8977  0033A0  50DE               	movf	postinc2,w,c
  8978  0033A2  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  8979  0033A4  A0D8               	btfss	status,0,c
  8980  0033A6  D05B               	goto	l420
  8981  0033A8                     u5440:
  8982                           
  8983                           ; BSR set to: 0
  8984  0033A8  0E01               	movlw	1
  8985  0033AA  6F61               	movwf	create_chain@scl& (0+255),b
  8986  0033AC  0E00               	movlw	0
  8987  0033AE  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  8988  0033B0  0E00               	movlw	0
  8989  0033B2  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  8990  0033B4  0E00               	movlw	0
  8991  0033B6  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  8992  0033B8  D052               	goto	l420
  8993  0033BA                     l4640:
  8994                           
  8995                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  8996  0033BA  C056  F03B         	movff	create_chain@fs,get_fat@fs
  8997  0033BE  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  8998  0033C2  C058  F03D         	movff	create_chain@clst,get_fat@clst
  8999  0033C6  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9000  0033CA  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9001  0033CE  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9002  0033D2  EC0D  F016         	call	_get_fat	;wreg free
  9003  0033D6  C03B  F069         	movff	?_get_fat,create_chain@cs
  9004  0033DA  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9005  0033DE  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9006  0033E2  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9007                           
  9008                           ;ff.c: 1005:   if (cs < 2) return 1;
  9009  0033E6  0100               	movlb	0	; () banked
  9010  0033E8  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9011  0033EA  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9012  0033EC  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9013  0033EE  E10D               	bnz	l4648
  9014  0033F0  0E02               	movlw	2
  9015  0033F2  5D69               	subwf	create_chain@cs& (0+255),w,b
  9016  0033F4  B0D8               	btfsc	status,0,c
  9017  0033F6  D009               	goto	l4648
  9018                           
  9019                           ; BSR set to: 0
  9020  0033F8  0E01               	movlw	1
  9021  0033FA  6E56               	movwf	?_create_chain,c
  9022  0033FC  0E00               	movlw	0
  9023  0033FE  6E57               	movwf	?_create_chain+1,c
  9024  003400  0E00               	movlw	0
  9025  003402  6E58               	movwf	?_create_chain+2,c
  9026  003404  0E00               	movlw	0
  9027  003406  6E59               	movwf	?_create_chain+3,c
  9028  003408  0012               	return	
  9029  00340A                     l4648:
  9030                           
  9031                           ; BSR set to: 0
  9032                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9033  00340A  2969               	incf	create_chain@cs& (0+255),w,b
  9034  00340C  E110               	bnz	l4652
  9035  00340E  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9036  003410  E10E               	bnz	l4652
  9037  003412  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9038  003414  E10C               	bnz	l4652
  9039  003416  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9040  003418  A4D8               	btfss	status,2,c
  9041  00341A  D009               	goto	l4652
  9042  00341C                     u5460:
  9043                           
  9044                           ; BSR set to: 0
  9045  00341C  C069  F056         	movff	create_chain@cs,?_create_chain
  9046  003420  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9047  003424  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9048  003428  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9049  00342C  0012               	return	
  9050  00342E                     l4652:
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9054  00342E  EE20 F012          	lfsr	2,18
  9055  003432  5056               	movf	create_chain@fs,w,c
  9056  003434  26D9               	addwf	fsr2l,f,c
  9057  003436  5057               	movf	create_chain@fs+1,w,c
  9058  003438  22DA               	addwfc	fsr2h,f,c
  9059  00343A  50DE               	movf	postinc2,w,c
  9060  00343C  5D69               	subwf	create_chain@cs& (0+255),w,b
  9061  00343E  50DE               	movf	postinc2,w,c
  9062  003440  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9063  003442  50DE               	movf	postinc2,w,c
  9064  003444  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9065  003446  50DE               	movf	postinc2,w,c
  9066  003448  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9067  00344A  A0D8               	btfss	status,0,c
  9068  00344C  D7E7               	goto	u5460
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;ff.c: 1008:   scl = clst;
  9072  00344E  C058  F061         	movff	create_chain@clst,create_chain@scl
  9073  003452  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9074  003456  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9075  00345A  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9076  00345E                     l420:
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;ff.c: 1011:  ncl = scl;
  9080  00345E  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9081  003462  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9082  003466  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9083  00346A  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9084  00346E                     l4656:
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;ff.c: 1013:   ncl++;
  9088  00346E  0E01               	movlw	1
  9089  003470  2765               	addwf	create_chain@ncl& (0+255),f,b
  9090  003472  0E00               	movlw	0
  9091  003474  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9092  003476  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9093  003478  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9094                           
  9095                           ; BSR set to: 0
  9096                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9097  00347A  EE20 F012          	lfsr	2,18
  9098  00347E  5056               	movf	create_chain@fs,w,c
  9099  003480  26D9               	addwf	fsr2l,f,c
  9100  003482  5057               	movf	create_chain@fs+1,w,c
  9101  003484  22DA               	addwfc	fsr2h,f,c
  9102  003486  50DE               	movf	postinc2,w,c
  9103  003488  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9104  00348A  50DE               	movf	postinc2,w,c
  9105  00348C  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9106  00348E  50DE               	movf	postinc2,w,c
  9107  003490  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9108  003492  50DE               	movf	postinc2,w,c
  9109  003494  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9110  003496  A0D8               	btfss	status,0,c
  9111  003498  D019               	goto	l4668
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;ff.c: 1015:    ncl = 2;
  9115  00349A  0E02               	movlw	2
  9116  00349C  6F65               	movwf	create_chain@ncl& (0+255),b
  9117  00349E  0E00               	movlw	0
  9118  0034A0  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9119  0034A2  0E00               	movlw	0
  9120  0034A4  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9121  0034A6  0E00               	movlw	0
  9122  0034A8  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9126  0034AA  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9127  0034AC  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9128  0034AE  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9129  0034B0  E10D               	bnz	l4668
  9130  0034B2  0E02               	movlw	2
  9131  0034B4  5D61               	subwf	create_chain@scl& (0+255),w,b
  9132  0034B6  B0D8               	btfsc	status,0,c
  9133  0034B8  D009               	goto	l4668
  9134  0034BA                     u5490:
  9135                           
  9136                           ; BSR set to: 0
  9137  0034BA  0E00               	movlw	0
  9138  0034BC  6E56               	movwf	?_create_chain,c
  9139  0034BE  0E00               	movlw	0
  9140  0034C0  6E57               	movwf	?_create_chain+1,c
  9141  0034C2  0E00               	movlw	0
  9142  0034C4  6E58               	movwf	?_create_chain+2,c
  9143  0034C6  0E00               	movlw	0
  9144  0034C8  6E59               	movwf	?_create_chain+3,c
  9145  0034CA  0012               	return	
  9146  0034CC                     l4668:
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9150  0034CC  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9151  0034D0  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9152  0034D4  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9153  0034D8  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9154  0034DC  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9155  0034E0  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9156  0034E4  EC0D  F016         	call	_get_fat	;wreg free
  9157  0034E8  C03B  F069         	movff	?_get_fat,create_chain@cs
  9158  0034EC  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9159  0034F0  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9160  0034F4  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9161                           
  9162                           ;ff.c: 1019:   if (cs == 0) break;
  9163  0034F8  0100               	movlb	0	; () banked
  9164  0034FA  5169               	movf	create_chain@cs& (0+255),w,b
  9165  0034FC  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9166  0034FE  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9167  003500  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9168  003502  B4D8               	btfsc	status,2,c
  9169  003504  D01D               	goto	l4684
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9173  003506  2969               	incf	create_chain@cs& (0+255),w,b
  9174  003508  E107               	bnz	u5510
  9175  00350A  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9176  00350C  E105               	bnz	u5510
  9177  00350E  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9178  003510  E103               	bnz	u5510
  9179  003512  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9180  003514  B4D8               	btfsc	status,2,c
  9181  003516  D782               	goto	u5460
  9182  003518                     u5510:
  9183                           
  9184                           ; BSR set to: 0
  9185  003518  0569               	decf	create_chain@cs& (0+255),w,b
  9186  00351A  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9187  00351C  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9188  00351E  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9189  003520  B4D8               	btfsc	status,2,c
  9190  003522  D77C               	goto	u5460
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9194  003524  5161               	movf	create_chain@scl& (0+255),w,b
  9195  003526  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9196  003528  E1A2               	bnz	l4656
  9197  00352A  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9198  00352C  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9199  00352E  E19F               	bnz	l4656
  9200  003530  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9201  003532  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9202  003534  E19C               	bnz	l4656
  9203  003536  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9204  003538  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9205  00353A  B4D8               	btfsc	status,2,c
  9206  00353C  D7BE               	goto	u5490
  9207  00353E  D797               	goto	l4656
  9208  003540                     l4684:
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9212  003540  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9213  003544  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9214  003548  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9215  00354C  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9216  003550  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9217  003554  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9218  003558  0EFF               	movlw	255
  9219  00355A  6E41               	movwf	put_fat@val,c
  9220  00355C  0EFF               	movlw	255
  9221  00355E  6E42               	movwf	put_fat@val+1,c
  9222  003560  0EFF               	movlw	255
  9223  003562  6E43               	movwf	put_fat@val+2,c
  9224  003564  0E0F               	movlw	15
  9225  003566  6E44               	movwf	put_fat@val+3,c
  9226  003568  ECF5  F011         	call	_put_fat	;wreg free
  9227  00356C  0100               	movlb	0	; () banked
  9228  00356E  6F60               	movwf	create_chain@res& (0+255),b
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9232  003570  5160               	movf	create_chain@res& (0+255),w,b
  9233  003572  A4D8               	btfss	status,2,c
  9234  003574  D01E               	goto	l4692
  9235                           
  9236                           ; BSR set to: 0
  9237  003576  5058               	movf	create_chain@clst,w,c
  9238  003578  1059               	iorwf	create_chain@clst+1,w,c
  9239  00357A  105A               	iorwf	create_chain@clst+2,w,c
  9240  00357C  105B               	iorwf	create_chain@clst+3,w,c
  9241  00357E  B4D8               	btfsc	status,2,c
  9242  003580  D018               	goto	l4692
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9246  003582  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9247  003586  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9248  00358A  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9249  00358E  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9250  003592  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9251  003596  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9252  00359A  C065  F041         	movff	create_chain@ncl,put_fat@val
  9253  00359E  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9254  0035A2  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9255  0035A6  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9256  0035AA  ECF5  F011         	call	_put_fat	;wreg free
  9257  0035AE  0100               	movlb	0	; () banked
  9258  0035B0  6F60               	movwf	create_chain@res& (0+255),b
  9259  0035B2                     l4692:
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;ff.c: 1029:  if (res == FR_OK) {
  9263  0035B2  5160               	movf	create_chain@res& (0+255),w,b
  9264  0035B4  A4D8               	btfss	status,2,c
  9265  0035B6  D031               	goto	l4698
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;ff.c: 1030:   fs->last_clust = ncl;
  9269  0035B8  EE20 F00A          	lfsr	2,10
  9270  0035BC  5056               	movf	create_chain@fs,w,c
  9271  0035BE  26D9               	addwf	fsr2l,f,c
  9272  0035C0  5057               	movf	create_chain@fs+1,w,c
  9273  0035C2  22DA               	addwfc	fsr2h,f,c
  9274  0035C4  C065  FFDE         	movff	create_chain@ncl,postinc2
  9275  0035C8  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9276  0035CC  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9277  0035D0  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9278                           
  9279                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9280  0035D4  EE20 F00E          	lfsr	2,14
  9281  0035D8  5056               	movf	create_chain@fs,w,c
  9282  0035DA  26D9               	addwf	fsr2l,f,c
  9283  0035DC  5057               	movf	create_chain@fs+1,w,c
  9284  0035DE  22DA               	addwfc	fsr2h,f,c
  9285  0035E0  28DE               	incf	postinc2,w,c
  9286  0035E2  E107               	bnz	u5570
  9287  0035E4  28DE               	incf	postinc2,w,c
  9288  0035E6  E105               	bnz	u5570
  9289  0035E8  28DE               	incf	postinc2,w,c
  9290  0035EA  E103               	bnz	u5570
  9291  0035EC  28DE               	incf	postinc2,w,c
  9292  0035EE  B4D8               	btfsc	status,2,c
  9293  0035F0  D024               	goto	l437
  9294  0035F2                     u5570:
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;ff.c: 1032:    fs->free_clust--;
  9298  0035F2  EE20 F00E          	lfsr	2,14
  9299  0035F6  5056               	movf	create_chain@fs,w,c
  9300  0035F8  26D9               	addwf	fsr2l,f,c
  9301  0035FA  5057               	movf	create_chain@fs+1,w,c
  9302  0035FC  22DA               	addwfc	fsr2h,f,c
  9303  0035FE  06DE               	decf	postinc2,f,c
  9304  003600  0E00               	movlw	0
  9305  003602  5ADE               	subwfb	postinc2,f,c
  9306  003604  5ADE               	subwfb	postinc2,f,c
  9307  003606  5ADE               	subwfb	postinc2,f,c
  9308                           
  9309                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9310  003608  EE20 F005          	lfsr	2,5
  9311  00360C  5056               	movf	create_chain@fs,w,c
  9312  00360E  26D9               	addwf	fsr2l,f,c
  9313  003610  5057               	movf	create_chain@fs+1,w,c
  9314  003612  22DA               	addwfc	fsr2h,f,c
  9315  003614  0E00               	movlw	0
  9316  003616  80DB               	bsf	plusw2,0,c
  9317  003618  D010               	goto	l437
  9318  00361A                     l4698:
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9322  00361A  0560               	decf	create_chain@res& (0+255),w,b
  9323  00361C  B4D8               	btfsc	status,2,c
  9324  00361E  D009               	goto	l439
  9325                           
  9326                           ; BSR set to: 0
  9327  003620  0E01               	movlw	1
  9328  003622  6F65               	movwf	create_chain@ncl& (0+255),b
  9329  003624  0E00               	movlw	0
  9330  003626  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9331  003628  0E00               	movlw	0
  9332  00362A  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9333  00362C  0E00               	movlw	0
  9334  00362E  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9335  003630  D004               	goto	l437
  9336  003632                     l439:
  9337                           
  9338                           ; BSR set to: 0
  9339  003632  6965               	setf	create_chain@ncl& (0+255),b
  9340  003634  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9341  003636  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9342  003638  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9343  00363A                     l437:
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;ff.c: 1039:  return ncl;
  9347  00363A  C065  F056         	movff	create_chain@ncl,?_create_chain
  9348  00363E  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9349  003642  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9350  003646  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9351                           
  9352                           ; BSR set to: 0
  9353  00364A  0012               	return		;funcret
  9354  00364C                     __end_of_create_chain:
  9355                           	opt callstack 0
  9356                           
  9357 ;; *************** function _put_fat *****************
  9358 ;; Defined at:
  9359 ;;		line 873 in file "ff.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;  fs              2   58[COMRAM] PTR struct .
  9362 ;;		 -> NULL(0), FatFs(558), 
  9363 ;;  clst            4   60[COMRAM] unsigned long 
  9364 ;;  val             4   64[COMRAM] unsigned long 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  p               2   83[COMRAM] PTR unsigned char 
  9367 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9368 ;;  bc              2   80[COMRAM] unsigned short 
  9369 ;;  res             1   82[COMRAM] enum E93
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      enum E93
  9372 ;; Registers used:
  9373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9379 ;;      Params:        10       0       0       0       0       0       0       0       0
  9380 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9381 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9382 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9383 ;;Total ram usage:       27 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    8
  9386 ;; This function calls:
  9387 ;;		_move_window
  9388 ;; This function is called by:
  9389 ;;		_remove_chain
  9390 ;;		_create_chain
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text23
  9395  0023EA                     __ptext23:
  9396                           	opt callstack 0
  9397  0023EA                     _put_fat:
  9398                           	opt callstack 20
  9399                           
  9400                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;incstack = 0
  9404  0023EA  5040               	movf	put_fat@clst+3,w,c
  9405  0023EC  103F               	iorwf	put_fat@clst+2,w,c
  9406  0023EE  103E               	iorwf	put_fat@clst+1,w,c
  9407  0023F0  E104               	bnz	u5260
  9408  0023F2  0E02               	movlw	2
  9409  0023F4  5C3D               	subwf	put_fat@clst,w,c
  9410  0023F6  A0D8               	btfss	status,0,c
  9411  0023F8  D010               	goto	u5270
  9412  0023FA                     u5260:
  9413  0023FA  EE20 F012          	lfsr	2,18
  9414  0023FE  503B               	movf	put_fat@fs,w,c
  9415  002400  26D9               	addwf	fsr2l,f,c
  9416  002402  503C               	movf	put_fat@fs+1,w,c
  9417  002404  22DA               	addwfc	fsr2h,f,c
  9418  002406  50DE               	movf	postinc2,w,c
  9419  002408  5C3D               	subwf	put_fat@clst,w,c
  9420  00240A  50DE               	movf	postinc2,w,c
  9421  00240C  583E               	subwfb	put_fat@clst+1,w,c
  9422  00240E  50DE               	movf	postinc2,w,c
  9423  002410  583F               	subwfb	put_fat@clst+2,w,c
  9424  002412  50DE               	movf	postinc2,w,c
  9425  002414  5840               	subwfb	put_fat@clst+3,w,c
  9426  002416  A0D8               	btfss	status,0,c
  9427  002418  D1E5               	goto	l4590
  9428  00241A                     u5270:
  9429                           
  9430                           ;ff.c: 885:   res = FR_INT_ERR;
  9431  00241A  0E02               	movlw	2
  9432  00241C  6E53               	movwf	put_fat@res,c
  9433                           
  9434                           ;ff.c: 887:  } else {
  9435  00241E  D1F8               	goto	l4592
  9436  002420                     l381:
  9437                           
  9438                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9439  002420  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9440  002424  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9441  002428  90D8               	bcf	status,0,c
  9442  00242A  3052               	rrcf	put_fat@bc+1,w,c
  9443  00242C  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9444  00242E  3051               	rrcf	put_fat@bc,w,c
  9445  002430  6E45               	movwf	??_put_fat& (0+255),c
  9446  002432  5045               	movf	??_put_fat,w,c
  9447  002434  2651               	addwf	put_fat@bc,f,c
  9448  002436  5046               	movf	??_put_fat+1,w,c
  9449  002438  2252               	addwfc	put_fat@bc+1,f,c
  9450                           
  9451                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9452  00243A  C03B  F030         	movff	put_fat@fs,move_window@fs
  9453  00243E  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9454  002442  EE20 F01E          	lfsr	2,30
  9455  002446  503B               	movf	put_fat@fs,w,c
  9456  002448  26D9               	addwf	fsr2l,f,c
  9457  00244A  503C               	movf	put_fat@fs+1,w,c
  9458  00244C  22DA               	addwfc	fsr2h,f,c
  9459  00244E  CFDE F045          	movff	postinc2,??_put_fat
  9460  002452  CFDE F046          	movff	postinc2,??_put_fat+1
  9461  002456  CFDE F047          	movff	postinc2,??_put_fat+2
  9462  00245A  CFDE F048          	movff	postinc2,??_put_fat+3
  9463  00245E  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9464  002462  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9465  002466  0E09               	movlw	9
  9466  002468  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9467  00246A                     u5285:
  9468  00246A  90D8               	bcf	status,0,c
  9469  00246C  324A               	rrcf	??_put_fat+5,f,c
  9470  00246E  3249               	rrcf	??_put_fat+4,f,c
  9471  002470  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9472  002472  D7FB               	goto	u5285
  9473  002474  5049               	movf	??_put_fat+4,w,c
  9474  002476  2445               	addwf	??_put_fat,w,c
  9475  002478  6E32               	movwf	move_window@sector,c
  9476  00247A  504A               	movf	??_put_fat+5,w,c
  9477  00247C  2046               	addwfc	??_put_fat+1,w,c
  9478  00247E  6E33               	movwf	move_window@sector+1,c
  9479  002480  0E00               	movlw	0
  9480  002482  2047               	addwfc	??_put_fat+2,w,c
  9481  002484  6E34               	movwf	move_window@sector+2,c
  9482  002486  0E00               	movlw	0
  9483  002488  2048               	addwfc	??_put_fat+3,w,c
  9484  00248A  6E35               	movwf	move_window@sector+3,c
  9485  00248C  EC71  F027         	call	_move_window	;wreg free
  9486  002490  6E53               	movwf	put_fat@res,c
  9487                           
  9488                           ;ff.c: 892:    if (res != FR_OK) break;
  9489  002492  5053               	movf	put_fat@res,w,c
  9490  002494  A4D8               	btfss	status,2,c
  9491  002496  D1BC               	goto	l4592
  9492                           
  9493                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9494  002498  0EFF               	movlw	255
  9495  00249A  6E45               	movwf	??_put_fat& (0+255),c
  9496  00249C  0E01               	movlw	1
  9497  00249E  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9498  0024A0  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9499  0024A4  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9500  0024A8  5045               	movf	??_put_fat,w,c
  9501  0024AA  1647               	andwf	??_put_fat+2,f,c
  9502  0024AC  5046               	movf	??_put_fat+1,w,c
  9503  0024AE  1648               	andwf	??_put_fat+3,f,c
  9504  0024B0  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9505  0024B4  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9506  0024B8  5047               	movf	??_put_fat+2,w,c
  9507  0024BA  2649               	addwf	??_put_fat+4,f,c
  9508  0024BC  5048               	movf	??_put_fat+3,w,c
  9509  0024BE  224A               	addwfc	??_put_fat+5,f,c
  9510  0024C0  0E2E               	movlw	46
  9511  0024C2  2449               	addwf	??_put_fat+4,w,c
  9512  0024C4  6E54               	movwf	put_fat@p,c
  9513  0024C6  0E00               	movlw	0
  9514  0024C8  204A               	addwfc	??_put_fat+5,w,c
  9515  0024CA  6E55               	movwf	put_fat@p+1,c
  9516  0024CC  4A51               	infsnz	put_fat@bc,f,c
  9517  0024CE  2A52               	incf	put_fat@bc+1,f,c
  9518                           
  9519                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9520  0024D0  B03D               	btfsc	put_fat@clst,0,c
  9521  0024D2  D004               	goto	l4544
  9522  0024D4  C041  F04D         	movff	put_fat@val,_put_fat$669
  9523  0024D8  6A4E               	clrf	_put_fat$669+1,c
  9524  0024DA  D01A               	goto	l4546
  9525  0024DC                     l4544:
  9526  0024DC  5041               	movf	put_fat@val,w,c
  9527  0024DE  6E45               	movwf	??_put_fat& (0+255),c
  9528  0024E0  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9529  0024E2  3A45               	swapf	??_put_fat,f,c
  9530  0024E4  3A46               	swapf	??_put_fat+1,f,c
  9531  0024E6  0EF0               	movlw	240
  9532  0024E8  1646               	andwf	??_put_fat+1,f,c
  9533  0024EA  5045               	movf	??_put_fat,w,c
  9534  0024EC  0B0F               	andlw	15
  9535  0024EE  1246               	iorwf	??_put_fat+1,f,c
  9536  0024F0  0EF0               	movlw	240
  9537  0024F2  1645               	andwf	??_put_fat,f,c
  9538  0024F4  C054  FFD9         	movff	put_fat@p,fsr2l
  9539  0024F8  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9540  0024FC  50DF               	movf	indf2,w,c
  9541  0024FE  0B0F               	andlw	15
  9542  002500  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9543  002502  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9544  002504  5045               	movf	??_put_fat,w,c
  9545  002506  1047               	iorwf	??_put_fat+2,w,c
  9546  002508  6E4D               	movwf	_put_fat$669,c
  9547  00250A  5046               	movf	??_put_fat+1,w,c
  9548  00250C  1048               	iorwf	??_put_fat+3,w,c
  9549  00250E  6E4E               	movwf	_put_fat$669+1,c
  9550  002510                     l4546:
  9551  002510  C054  FFD9         	movff	put_fat@p,fsr2l
  9552  002514  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9553  002518  C04D  FFDF         	movff	_put_fat$669,indf2
  9554                           
  9555                           ;ff.c: 895:    fs->wflag = 1;
  9556  00251C  EE20 F004          	lfsr	2,4
  9557  002520  503B               	movf	put_fat@fs,w,c
  9558  002522  26D9               	addwf	fsr2l,f,c
  9559  002524  503C               	movf	put_fat@fs+1,w,c
  9560  002526  22DA               	addwfc	fsr2h,f,c
  9561  002528  0E01               	movlw	1
  9562  00252A  6EDF               	movwf	indf2,c
  9563                           
  9564                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9565  00252C  C03B  F030         	movff	put_fat@fs,move_window@fs
  9566  002530  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9567  002534  EE20 F01E          	lfsr	2,30
  9568  002538  503B               	movf	put_fat@fs,w,c
  9569  00253A  26D9               	addwf	fsr2l,f,c
  9570  00253C  503C               	movf	put_fat@fs+1,w,c
  9571  00253E  22DA               	addwfc	fsr2h,f,c
  9572  002540  CFDE F045          	movff	postinc2,??_put_fat
  9573  002544  CFDE F046          	movff	postinc2,??_put_fat+1
  9574  002548  CFDE F047          	movff	postinc2,??_put_fat+2
  9575  00254C  CFDE F048          	movff	postinc2,??_put_fat+3
  9576  002550  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9577  002554  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9578  002558  0E09               	movlw	9
  9579  00255A  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9580  00255C                     u5315:
  9581  00255C  90D8               	bcf	status,0,c
  9582  00255E  324A               	rrcf	??_put_fat+5,f,c
  9583  002560  3249               	rrcf	??_put_fat+4,f,c
  9584  002562  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9585  002564  D7FB               	goto	u5315
  9586  002566  5049               	movf	??_put_fat+4,w,c
  9587  002568  2445               	addwf	??_put_fat,w,c
  9588  00256A  6E32               	movwf	move_window@sector,c
  9589  00256C  504A               	movf	??_put_fat+5,w,c
  9590  00256E  2046               	addwfc	??_put_fat+1,w,c
  9591  002570  6E33               	movwf	move_window@sector+1,c
  9592  002572  0E00               	movlw	0
  9593  002574  2047               	addwfc	??_put_fat+2,w,c
  9594  002576  6E34               	movwf	move_window@sector+2,c
  9595  002578  0E00               	movlw	0
  9596  00257A  2048               	addwfc	??_put_fat+3,w,c
  9597  00257C  6E35               	movwf	move_window@sector+3,c
  9598  00257E  EC71  F027         	call	_move_window	;wreg free
  9599  002582  6E53               	movwf	put_fat@res,c
  9600                           
  9601                           ;ff.c: 897:    if (res != FR_OK) break;
  9602  002584  5053               	movf	put_fat@res,w,c
  9603  002586  A4D8               	btfss	status,2,c
  9604  002588  D143               	goto	l4592
  9605                           
  9606                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9607  00258A  0EFF               	movlw	255
  9608  00258C  6E45               	movwf	??_put_fat& (0+255),c
  9609  00258E  0E01               	movlw	1
  9610  002590  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9611  002592  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9612  002596  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9613  00259A  5045               	movf	??_put_fat,w,c
  9614  00259C  1647               	andwf	??_put_fat+2,f,c
  9615  00259E  5046               	movf	??_put_fat+1,w,c
  9616  0025A0  1648               	andwf	??_put_fat+3,f,c
  9617  0025A2  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9618  0025A6  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9619  0025AA  5047               	movf	??_put_fat+2,w,c
  9620  0025AC  2649               	addwf	??_put_fat+4,f,c
  9621  0025AE  5048               	movf	??_put_fat+3,w,c
  9622  0025B0  224A               	addwfc	??_put_fat+5,f,c
  9623  0025B2  0E2E               	movlw	46
  9624  0025B4  2449               	addwf	??_put_fat+4,w,c
  9625  0025B6  6E54               	movwf	put_fat@p,c
  9626  0025B8  0E00               	movlw	0
  9627  0025BA  204A               	addwfc	??_put_fat+5,w,c
  9628  0025BC  6E55               	movwf	put_fat@p+1,c
  9629                           
  9630                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9631  0025BE  B03D               	btfsc	put_fat@clst,0,c
  9632  0025C0  D01B               	goto	l4562
  9633  0025C2  C041  F045         	movff	put_fat@val,??_put_fat
  9634  0025C6  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9635  0025CA  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9636  0025CE  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9637  0025D2  C046  F045         	movff	??_put_fat+1,??_put_fat
  9638  0025D6  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9639  0025DA  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9640  0025DE  6A48               	clrf	??_put_fat+3,c
  9641  0025E0  0E0F               	movlw	15
  9642  0025E2  1645               	andwf	??_put_fat,f,c
  9643  0025E4  C054  FFD9         	movff	put_fat@p,fsr2l
  9644  0025E8  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9645  0025EC  50DF               	movf	indf2,w,c
  9646  0025EE  0BF0               	andlw	240
  9647  0025F0  1045               	iorwf	??_put_fat,w,c
  9648  0025F2  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9649  0025F4  5049               	movf	??_put_fat+4,w,c
  9650  0025F6  D012               	goto	L9
  9651  0025F8                     l4562:
  9652  0025F8  C041  F045         	movff	put_fat@val,??_put_fat
  9653  0025FC  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9654  002600  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9655  002604  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9656  002608  0E05               	movlw	5
  9657  00260A  D005               	goto	u5340
  9658  00260C                     u5345:
  9659  00260C  90D8               	bcf	status,0,c
  9660  00260E  3248               	rrcf	??_put_fat+3,f,c
  9661  002610  3247               	rrcf	??_put_fat+2,f,c
  9662  002612  3246               	rrcf	??_put_fat+1,f,c
  9663  002614  3245               	rrcf	??_put_fat,f,c
  9664  002616                     u5340:
  9665  002616  2EE8               	decfsz	wreg,f,c
  9666  002618  D7F9               	goto	u5345
  9667  00261A  5045               	movf	??_put_fat,w,c
  9668  00261C                     L9:
  9669  00261C  6E4F               	movwf	_put_fat$670,c
  9670  00261E  6A50               	clrf	_put_fat$670+1,c
  9671  002620  C054  FFD9         	movff	put_fat@p,fsr2l
  9672  002624  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9673  002628  C04F  FFDF         	movff	_put_fat$670,indf2
  9674  00262C  D0D2               	goto	l4586
  9675  00262E                     l4566:
  9676                           
  9677                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9678  00262E  C03B  F030         	movff	put_fat@fs,move_window@fs
  9679  002632  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9680  002636  EE20 F01E          	lfsr	2,30
  9681  00263A  503B               	movf	put_fat@fs,w,c
  9682  00263C  26D9               	addwf	fsr2l,f,c
  9683  00263E  503C               	movf	put_fat@fs+1,w,c
  9684  002640  22DA               	addwfc	fsr2h,f,c
  9685  002642  CFDE F045          	movff	postinc2,??_put_fat
  9686  002646  CFDE F046          	movff	postinc2,??_put_fat+1
  9687  00264A  CFDE F047          	movff	postinc2,??_put_fat+2
  9688  00264E  CFDE F048          	movff	postinc2,??_put_fat+3
  9689  002652  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9690  002656  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9691  00265A  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9692  00265E  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9693  002662  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9694  002666  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9695  00266A  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9696  00266E  6A4C               	clrf	??_put_fat+7,c
  9697  002670  5045               	movf	??_put_fat,w,c
  9698  002672  2449               	addwf	??_put_fat+4,w,c
  9699  002674  6E32               	movwf	move_window@sector,c
  9700  002676  5046               	movf	??_put_fat+1,w,c
  9701  002678  204A               	addwfc	??_put_fat+5,w,c
  9702  00267A  6E33               	movwf	move_window@sector+1,c
  9703  00267C  5047               	movf	??_put_fat+2,w,c
  9704  00267E  204B               	addwfc	??_put_fat+6,w,c
  9705  002680  6E34               	movwf	move_window@sector+2,c
  9706  002682  5048               	movf	??_put_fat+3,w,c
  9707  002684  204C               	addwfc	??_put_fat+7,w,c
  9708  002686  6E35               	movwf	move_window@sector+3,c
  9709  002688  EC71  F027         	call	_move_window	;wreg free
  9710  00268C  6E53               	movwf	put_fat@res,c
  9711                           
  9712                           ;ff.c: 905:    if (res != FR_OK) break;
  9713  00268E  5053               	movf	put_fat@res,w,c
  9714  002690  A4D8               	btfss	status,2,c
  9715  002692  D0BE               	goto	l4592
  9716                           
  9717                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9718  002694  0EFF               	movlw	255
  9719  002696  6E45               	movwf	??_put_fat& (0+255),c
  9720  002698  0E01               	movlw	1
  9721  00269A  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9722  00269C  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9723  0026A0  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9724  0026A4  90D8               	bcf	status,0,c
  9725  0026A6  3647               	rlcf	??_put_fat+2,f,c
  9726  0026A8  3648               	rlcf	??_put_fat+3,f,c
  9727  0026AA  5045               	movf	??_put_fat,w,c
  9728  0026AC  1647               	andwf	??_put_fat+2,f,c
  9729  0026AE  5046               	movf	??_put_fat+1,w,c
  9730  0026B0  1648               	andwf	??_put_fat+3,f,c
  9731  0026B2  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9732  0026B6  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9733  0026BA  5047               	movf	??_put_fat+2,w,c
  9734  0026BC  2649               	addwf	??_put_fat+4,f,c
  9735  0026BE  5048               	movf	??_put_fat+3,w,c
  9736  0026C0  224A               	addwfc	??_put_fat+5,f,c
  9737  0026C2  0E2E               	movlw	46
  9738  0026C4  2449               	addwf	??_put_fat+4,w,c
  9739  0026C6  6E54               	movwf	put_fat@p,c
  9740  0026C8  0E00               	movlw	0
  9741  0026CA  204A               	addwfc	??_put_fat+5,w,c
  9742  0026CC  6E55               	movwf	put_fat@p+1,c
  9743                           
  9744                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  9745  0026CE  C054  FFD9         	movff	put_fat@p,fsr2l
  9746  0026D2  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9747  0026D6  C041  FFDE         	movff	put_fat@val,postinc2
  9748  0026DA  C042  FFDD         	movff	put_fat@val+1,postdec2
  9749  0026DE  D079               	goto	l4586
  9750  0026E0                     l4576:
  9751                           
  9752                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  9753  0026E0  C03B  F030         	movff	put_fat@fs,move_window@fs
  9754  0026E4  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9755  0026E8  EE20 F01E          	lfsr	2,30
  9756  0026EC  503B               	movf	put_fat@fs,w,c
  9757  0026EE  26D9               	addwf	fsr2l,f,c
  9758  0026F0  503C               	movf	put_fat@fs+1,w,c
  9759  0026F2  22DA               	addwfc	fsr2h,f,c
  9760  0026F4  CFDE F045          	movff	postinc2,??_put_fat
  9761  0026F8  CFDE F046          	movff	postinc2,??_put_fat+1
  9762  0026FC  CFDE F047          	movff	postinc2,??_put_fat+2
  9763  002700  CFDE F048          	movff	postinc2,??_put_fat+3
  9764  002704  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9765  002708  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9766  00270C  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9767  002710  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9768  002714  0E08               	movlw	8
  9769  002716  D005               	goto	u5360
  9770  002718                     u5365:
  9771  002718  90D8               	bcf	status,0,c
  9772  00271A  324C               	rrcf	??_put_fat+7,f,c
  9773  00271C  324B               	rrcf	??_put_fat+6,f,c
  9774  00271E  324A               	rrcf	??_put_fat+5,f,c
  9775  002720  3249               	rrcf	??_put_fat+4,f,c
  9776  002722                     u5360:
  9777  002722  2EE8               	decfsz	wreg,f,c
  9778  002724  D7F9               	goto	u5365
  9779  002726  5045               	movf	??_put_fat,w,c
  9780  002728  2449               	addwf	??_put_fat+4,w,c
  9781  00272A  6E32               	movwf	move_window@sector,c
  9782  00272C  5046               	movf	??_put_fat+1,w,c
  9783  00272E  204A               	addwfc	??_put_fat+5,w,c
  9784  002730  6E33               	movwf	move_window@sector+1,c
  9785  002732  5047               	movf	??_put_fat+2,w,c
  9786  002734  204B               	addwfc	??_put_fat+6,w,c
  9787  002736  6E34               	movwf	move_window@sector+2,c
  9788  002738  5048               	movf	??_put_fat+3,w,c
  9789  00273A  204C               	addwfc	??_put_fat+7,w,c
  9790  00273C  6E35               	movwf	move_window@sector+3,c
  9791  00273E  EC71  F027         	call	_move_window	;wreg free
  9792  002742  6E53               	movwf	put_fat@res,c
  9793                           
  9794                           ;ff.c: 913:    if (res != FR_OK) break;
  9795  002744  5053               	movf	put_fat@res,w,c
  9796  002746  A4D8               	btfss	status,2,c
  9797  002748  D063               	goto	l4592
  9798                           
  9799                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  9800  00274A  0EFF               	movlw	255
  9801  00274C  6E45               	movwf	??_put_fat& (0+255),c
  9802  00274E  0E01               	movlw	1
  9803  002750  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9804  002752  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9805  002756  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9806  00275A  90D8               	bcf	status,0,c
  9807  00275C  3647               	rlcf	??_put_fat+2,f,c
  9808  00275E  3648               	rlcf	??_put_fat+3,f,c
  9809  002760  90D8               	bcf	status,0,c
  9810  002762  3647               	rlcf	??_put_fat+2,f,c
  9811  002764  3648               	rlcf	??_put_fat+3,f,c
  9812  002766  5045               	movf	??_put_fat,w,c
  9813  002768  1647               	andwf	??_put_fat+2,f,c
  9814  00276A  5046               	movf	??_put_fat+1,w,c
  9815  00276C  1648               	andwf	??_put_fat+3,f,c
  9816  00276E  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9817  002772  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9818  002776  5047               	movf	??_put_fat+2,w,c
  9819  002778  2649               	addwf	??_put_fat+4,f,c
  9820  00277A  5048               	movf	??_put_fat+3,w,c
  9821  00277C  224A               	addwfc	??_put_fat+5,f,c
  9822  00277E  0E2E               	movlw	46
  9823  002780  2449               	addwf	??_put_fat+4,w,c
  9824  002782  6E54               	movwf	put_fat@p,c
  9825  002784  0E00               	movlw	0
  9826  002786  204A               	addwfc	??_put_fat+5,w,c
  9827  002788  6E55               	movwf	put_fat@p+1,c
  9828                           
  9829                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  9830  00278A  C054  FFD9         	movff	put_fat@p,fsr2l
  9831  00278E  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9832  002792  0E00               	movlw	0
  9833  002794  14DE               	andwf	postinc2,w,c
  9834  002796  6E45               	movwf	??_put_fat& (0+255),c
  9835  002798  0E00               	movlw	0
  9836  00279A  14DE               	andwf	postinc2,w,c
  9837  00279C  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9838  00279E  0E00               	movlw	0
  9839  0027A0  14DE               	andwf	postinc2,w,c
  9840  0027A2  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9841  0027A4  0EF0               	movlw	240
  9842  0027A6  14DE               	andwf	postinc2,w,c
  9843  0027A8  6E48               	movwf	(??_put_fat+3)& (0+255),c
  9844  0027AA  5045               	movf	??_put_fat,w,c
  9845  0027AC  1241               	iorwf	put_fat@val,f,c
  9846  0027AE  5046               	movf	??_put_fat+1,w,c
  9847  0027B0  1242               	iorwf	put_fat@val+1,f,c
  9848  0027B2  5047               	movf	??_put_fat+2,w,c
  9849  0027B4  1243               	iorwf	put_fat@val+2,f,c
  9850  0027B6  5048               	movf	??_put_fat+3,w,c
  9851  0027B8  1244               	iorwf	put_fat@val+3,f,c
  9852                           
  9853                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
  9854  0027BA  C054  FFD9         	movff	put_fat@p,fsr2l
  9855  0027BE  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9856  0027C2  C041  FFDE         	movff	put_fat@val,postinc2
  9857  0027C6  C042  FFDE         	movff	put_fat@val+1,postinc2
  9858  0027CA  C043  FFDE         	movff	put_fat@val+2,postinc2
  9859  0027CE  C044  FFDE         	movff	put_fat@val+3,postinc2
  9860  0027D2                     l4586:
  9861                           
  9862                           ;ff.c: 917:    fs->wflag = 1;
  9863  0027D2  EE20 F004          	lfsr	2,4
  9864  0027D6  503B               	movf	put_fat@fs,w,c
  9865  0027D8  26D9               	addwf	fsr2l,f,c
  9866  0027DA  503C               	movf	put_fat@fs+1,w,c
  9867  0027DC  22DA               	addwfc	fsr2h,f,c
  9868  0027DE  0E01               	movlw	1
  9869  0027E0  6EDF               	movwf	indf2,c
  9870                           
  9871                           ;ff.c: 918:    break;
  9872  0027E2  D016               	goto	l4592
  9873  0027E4                     l4590:
  9874  0027E4  C03B  FFD9         	movff	put_fat@fs,fsr2l
  9875  0027E8  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
  9876  0027EC  50DF               	movf	indf2,w,c
  9877  0027EE  6E45               	movwf	??_put_fat& (0+255),c
  9878  0027F0  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9879                           
  9880                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9881                           ; Switch size 1, requested type "simple"
  9882                           ; Number of cases is 1, Range of values is 0 to 0
  9883                           ; switch strategies available:
  9884                           ; Name         Instructions Cycles
  9885                           ; simple_byte            4     3 (average)
  9886                           ;	Chosen strategy is simple_byte
  9887  0027F2  5046               	movf	??_put_fat+1,w,c
  9888  0027F4  0A00               	xorlw	0	; case 0
  9889  0027F6  A4D8               	btfss	status,2,c
  9890  0027F8  D610               	goto	u5270
  9891                           
  9892                           ; Switch size 1, requested type "simple"
  9893                           ; Number of cases is 3, Range of values is 1 to 3
  9894                           ; switch strategies available:
  9895                           ; Name         Instructions Cycles
  9896                           ; simple_byte           10     6 (average)
  9897                           ;	Chosen strategy is simple_byte
  9898  0027FA  5045               	movf	??_put_fat,w,c
  9899  0027FC  0A01               	xorlw	1	; case 1
  9900  0027FE  B4D8               	btfsc	status,2,c
  9901  002800  D60F               	goto	l381
  9902  002802  0A03               	xorlw	3	; case 2
  9903  002804  B4D8               	btfsc	status,2,c
  9904  002806  D713               	goto	l4566
  9905  002808  0A01               	xorlw	1	; case 3
  9906  00280A  B4D8               	btfsc	status,2,c
  9907  00280C  D769               	goto	l4576
  9908  00280E  D605               	goto	u5270
  9909  002810                     l4592:
  9910                           
  9911                           ;ff.c: 925:  return res;
  9912  002810  5053               	movf	put_fat@res,w,c
  9913  002812  0012               	return		;funcret
  9914  002814                     __end_of_put_fat:
  9915                           	opt callstack 0
  9916                           
  9917 ;; *************** function _get_fat *****************
  9918 ;; Defined at:
  9919 ;;		line 818 in file "ff.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;  fs              2   58[COMRAM] PTR struct .
  9922 ;;		 -> NULL(0), FatFs(558), 
  9923 ;;  clst            4   60[COMRAM] unsigned long 
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;  val             4   75[COMRAM] unsigned long 
  9926 ;;  bc              2   83[COMRAM] unsigned short 
  9927 ;;  p               2   81[COMRAM] PTR unsigned char 
  9928 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9929 ;;  wc              2   79[COMRAM] unsigned short 
  9930 ;; Return value:  Size  Location     Type
  9931 ;;                  4   58[COMRAM] unsigned long 
  9932 ;; Registers used:
  9933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9939 ;;      Params:         6       0       0       0       0       0       0       0       0
  9940 ;;      Locals:        12       0       0       0       0       0       0       0       0
  9941 ;;      Temps:          9       0       0       0       0       0       0       0       0
  9942 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9943 ;;Total ram usage:       27 bytes
  9944 ;; Hardware stack levels used:    1
  9945 ;; Hardware stack levels required when called:    8
  9946 ;; This function calls:
  9947 ;;		_move_window
  9948 ;; This function is called by:
  9949 ;;		_remove_chain
  9950 ;;		_create_chain
  9951 ;;		_dir_sdi
  9952 ;;		_dir_next
  9953 ;;		_f_lseek
  9954 ;;		_f_read
  9955 ;; This function uses a non-reentrant model
  9956 ;;
  9957                           
  9958                           	psect	text24
  9959  002C1A                     __ptext24:
  9960                           	opt callstack 0
  9961  002C1A                     _get_fat:
  9962                           	opt callstack 20
  9963                           
  9964                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
  9965                           
  9966                           ;incstack = 0
  9967  002C1A  5040               	movf	get_fat@clst+3,w,c
  9968  002C1C  103F               	iorwf	get_fat@clst+2,w,c
  9969  002C1E  103E               	iorwf	get_fat@clst+1,w,c
  9970  002C20  E104               	bnz	u5150
  9971  002C22  0E02               	movlw	2
  9972  002C24  5C3D               	subwf	get_fat@clst,w,c
  9973  002C26  A0D8               	btfss	status,0,c
  9974  002C28  D010               	goto	u5160
  9975  002C2A                     u5150:
  9976  002C2A  EE20 F012          	lfsr	2,18
  9977  002C2E  503B               	movf	get_fat@fs,w,c
  9978  002C30  26D9               	addwf	fsr2l,f,c
  9979  002C32  503C               	movf	get_fat@fs+1,w,c
  9980  002C34  22DA               	addwfc	fsr2h,f,c
  9981  002C36  50DE               	movf	postinc2,w,c
  9982  002C38  5C3D               	subwf	get_fat@clst,w,c
  9983  002C3A  50DE               	movf	postinc2,w,c
  9984  002C3C  583E               	subwfb	get_fat@clst+1,w,c
  9985  002C3E  50DE               	movf	postinc2,w,c
  9986  002C40  583F               	subwfb	get_fat@clst+2,w,c
  9987  002C42  50DE               	movf	postinc2,w,c
  9988  002C44  5840               	subwfb	get_fat@clst+3,w,c
  9989  002C46  A0D8               	btfss	status,0,c
  9990  002C48  D008               	goto	l355
  9991  002C4A                     u5160:
  9992                           
  9993                           ;ff.c: 829:   val = 1;
  9994  002C4A  0E01               	movlw	1
  9995  002C4C  6E4C               	movwf	get_fat@val,c
  9996  002C4E  0E00               	movlw	0
  9997  002C50  6E4D               	movwf	get_fat@val+1,c
  9998  002C52  0E00               	movlw	0
  9999  002C54  6E4E               	movwf	get_fat@val+2,c
 10000  002C56  0E00               	movlw	0
 10001  002C58  D190               	goto	L11
 10002  002C5A                     l355:
 10003                           
 10004                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10005  002C5A  684C               	setf	get_fat@val,c
 10006  002C5C  684D               	setf	get_fat@val+1,c
 10007  002C5E  684E               	setf	get_fat@val+2,c
 10008  002C60  684F               	setf	get_fat@val+3,c
 10009                           
 10010                           ;ff.c: 834:   switch (fs->fs_type) {
 10011  002C62  D18D               	goto	l4516
 10012  002C64                     l360:
 10013                           
 10014                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10015  002C64  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10016  002C68  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10017  002C6C  90D8               	bcf	status,0,c
 10018  002C6E  3055               	rrcf	get_fat@bc+1,w,c
 10019  002C70  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10020  002C72  3054               	rrcf	get_fat@bc,w,c
 10021  002C74  6E41               	movwf	??_get_fat& (0+255),c
 10022  002C76  5041               	movf	??_get_fat,w,c
 10023  002C78  2654               	addwf	get_fat@bc,f,c
 10024  002C7A  5042               	movf	??_get_fat+1,w,c
 10025  002C7C  2255               	addwfc	get_fat@bc+1,f,c
 10026                           
 10027                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10028  002C7E  C03B  F030         	movff	get_fat@fs,move_window@fs
 10029  002C82  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10030  002C86  EE20 F01E          	lfsr	2,30
 10031  002C8A  503B               	movf	get_fat@fs,w,c
 10032  002C8C  26D9               	addwf	fsr2l,f,c
 10033  002C8E  503C               	movf	get_fat@fs+1,w,c
 10034  002C90  22DA               	addwfc	fsr2h,f,c
 10035  002C92  CFDE F041          	movff	postinc2,??_get_fat
 10036  002C96  CFDE F042          	movff	postinc2,??_get_fat+1
 10037  002C9A  CFDE F043          	movff	postinc2,??_get_fat+2
 10038  002C9E  CFDE F044          	movff	postinc2,??_get_fat+3
 10039  002CA2  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10040  002CA6  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10041  002CAA  0E09               	movlw	9
 10042  002CAC  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10043  002CAE                     u5175:
 10044  002CAE  90D8               	bcf	status,0,c
 10045  002CB0  3246               	rrcf	??_get_fat+5,f,c
 10046  002CB2  3245               	rrcf	??_get_fat+4,f,c
 10047  002CB4  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10048  002CB6  D7FB               	goto	u5175
 10049  002CB8  5045               	movf	??_get_fat+4,w,c
 10050  002CBA  2441               	addwf	??_get_fat,w,c
 10051  002CBC  6E32               	movwf	move_window@sector,c
 10052  002CBE  5046               	movf	??_get_fat+5,w,c
 10053  002CC0  2042               	addwfc	??_get_fat+1,w,c
 10054  002CC2  6E33               	movwf	move_window@sector+1,c
 10055  002CC4  0E00               	movlw	0
 10056  002CC6  2043               	addwfc	??_get_fat+2,w,c
 10057  002CC8  6E34               	movwf	move_window@sector+2,c
 10058  002CCA  0E00               	movlw	0
 10059  002CCC  2044               	addwfc	??_get_fat+3,w,c
 10060  002CCE  6E35               	movwf	move_window@sector+3,c
 10061  002CD0  EC71  F027         	call	_move_window	;wreg free
 10062  002CD4  0900               	iorlw	0
 10063  002CD6  A4D8               	btfss	status,2,c
 10064  002CD8  D168               	goto	l358
 10065                           
 10066                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10067  002CDA  0EFF               	movlw	255
 10068  002CDC  6E41               	movwf	??_get_fat& (0+255),c
 10069  002CDE  0E01               	movlw	1
 10070  002CE0  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10071  002CE2  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10072  002CE6  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10073  002CEA  5041               	movf	??_get_fat,w,c
 10074  002CEC  1643               	andwf	??_get_fat+2,f,c
 10075  002CEE  5042               	movf	??_get_fat+1,w,c
 10076  002CF0  1644               	andwf	??_get_fat+3,f,c
 10077  002CF2  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10078  002CF6  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10079  002CFA  5043               	movf	??_get_fat+2,w,c
 10080  002CFC  2645               	addwf	??_get_fat+4,f,c
 10081  002CFE  5044               	movf	??_get_fat+3,w,c
 10082  002D00  2246               	addwfc	??_get_fat+5,f,c
 10083  002D02  0E2E               	movlw	46
 10084  002D04  2445               	addwf	??_get_fat+4,w,c
 10085  002D06  6ED9               	movwf	fsr2l,c
 10086  002D08  0E00               	movlw	0
 10087  002D0A  2046               	addwfc	??_get_fat+5,w,c
 10088  002D0C  6EDA               	movwf	fsr2h,c
 10089  002D0E  50DF               	movf	indf2,w,c
 10090  002D10  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10091  002D12  5047               	movf	??_get_fat+6,w,c
 10092  002D14  6E50               	movwf	get_fat@wc,c
 10093  002D16  6A51               	clrf	get_fat@wc+1,c
 10094  002D18  4A54               	infsnz	get_fat@bc,f,c
 10095  002D1A  2A55               	incf	get_fat@bc+1,f,c
 10096                           
 10097                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10098  002D1C  C03B  F030         	movff	get_fat@fs,move_window@fs
 10099  002D20  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10100  002D24  EE20 F01E          	lfsr	2,30
 10101  002D28  503B               	movf	get_fat@fs,w,c
 10102  002D2A  26D9               	addwf	fsr2l,f,c
 10103  002D2C  503C               	movf	get_fat@fs+1,w,c
 10104  002D2E  22DA               	addwfc	fsr2h,f,c
 10105  002D30  CFDE F041          	movff	postinc2,??_get_fat
 10106  002D34  CFDE F042          	movff	postinc2,??_get_fat+1
 10107  002D38  CFDE F043          	movff	postinc2,??_get_fat+2
 10108  002D3C  CFDE F044          	movff	postinc2,??_get_fat+3
 10109  002D40  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10110  002D44  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10111  002D48  0E09               	movlw	9
 10112  002D4A  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10113  002D4C                     u5195:
 10114  002D4C  90D8               	bcf	status,0,c
 10115  002D4E  3246               	rrcf	??_get_fat+5,f,c
 10116  002D50  3245               	rrcf	??_get_fat+4,f,c
 10117  002D52  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10118  002D54  D7FB               	goto	u5195
 10119  002D56  5045               	movf	??_get_fat+4,w,c
 10120  002D58  2441               	addwf	??_get_fat,w,c
 10121  002D5A  6E32               	movwf	move_window@sector,c
 10122  002D5C  5046               	movf	??_get_fat+5,w,c
 10123  002D5E  2042               	addwfc	??_get_fat+1,w,c
 10124  002D60  6E33               	movwf	move_window@sector+1,c
 10125  002D62  0E00               	movlw	0
 10126  002D64  2043               	addwfc	??_get_fat+2,w,c
 10127  002D66  6E34               	movwf	move_window@sector+2,c
 10128  002D68  0E00               	movlw	0
 10129  002D6A  2044               	addwfc	??_get_fat+3,w,c
 10130  002D6C  6E35               	movwf	move_window@sector+3,c
 10131  002D6E  EC71  F027         	call	_move_window	;wreg free
 10132  002D72  0900               	iorlw	0
 10133  002D74  A4D8               	btfss	status,2,c
 10134  002D76  D119               	goto	l358
 10135                           
 10136                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10137  002D78  0EFF               	movlw	255
 10138  002D7A  6E41               	movwf	??_get_fat& (0+255),c
 10139  002D7C  0E01               	movlw	1
 10140  002D7E  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10141  002D80  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10142  002D84  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10143  002D88  5041               	movf	??_get_fat,w,c
 10144  002D8A  1643               	andwf	??_get_fat+2,f,c
 10145  002D8C  5042               	movf	??_get_fat+1,w,c
 10146  002D8E  1644               	andwf	??_get_fat+3,f,c
 10147  002D90  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10148  002D94  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10149  002D98  5043               	movf	??_get_fat+2,w,c
 10150  002D9A  2645               	addwf	??_get_fat+4,f,c
 10151  002D9C  5044               	movf	??_get_fat+3,w,c
 10152  002D9E  2246               	addwfc	??_get_fat+5,f,c
 10153  002DA0  0E2E               	movlw	46
 10154  002DA2  2445               	addwf	??_get_fat+4,w,c
 10155  002DA4  6ED9               	movwf	fsr2l,c
 10156  002DA6  0E00               	movlw	0
 10157  002DA8  2046               	addwfc	??_get_fat+5,w,c
 10158  002DAA  6EDA               	movwf	fsr2h,c
 10159  002DAC  50DF               	movf	indf2,w,c
 10160  002DAE  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10161  002DB0  5047               	movf	??_get_fat+6,w,c
 10162  002DB2  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10163  002DB4  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10164  002DB6  5048               	movf	??_get_fat+7,w,c
 10165  002DB8  1250               	iorwf	get_fat@wc,f,c
 10166  002DBA  5049               	movf	??_get_fat+8,w,c
 10167  002DBC  1251               	iorwf	get_fat@wc+1,f,c
 10168                           
 10169                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10170  002DBE  B03D               	btfsc	get_fat@clst,0,c
 10171  002DC0  D007               	goto	l4494
 10172  002DC2  0EFF               	movlw	255
 10173  002DC4  1450               	andwf	get_fat@wc,w,c
 10174  002DC6  6E4A               	movwf	_get_fat$643,c
 10175  002DC8  0E0F               	movlw	15
 10176  002DCA  1451               	andwf	get_fat@wc+1,w,c
 10177  002DCC  6E4B               	movwf	_get_fat$643+1,c
 10178  002DCE  D00F               	goto	l4496
 10179  002DD0                     l4494:
 10180  002DD0  C050  F041         	movff	get_fat@wc,??_get_fat
 10181  002DD4  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10182  002DD8  0E04               	movlw	4
 10183  002DDA  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10184  002DDC                     u5225:
 10185  002DDC  90D8               	bcf	status,0,c
 10186  002DDE  3242               	rrcf	??_get_fat+1,f,c
 10187  002DE0  3241               	rrcf	??_get_fat,f,c
 10188  002DE2  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10189  002DE4  D7FB               	goto	u5225
 10190  002DE6  C041  F04A         	movff	??_get_fat,_get_fat$643
 10191  002DEA  C042  F04B         	movff	??_get_fat+1,_get_fat$643+1
 10192  002DEE                     l4496:
 10193  002DEE  C04A  F04C         	movff	_get_fat$643,get_fat@val
 10194  002DF2  C04B  F04D         	movff	_get_fat$643+1,get_fat@val+1
 10195  002DF6  D05B               	goto	L12
 10196  002DF8                     l4498:
 10197                           
 10198                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10199  002DF8  C03B  F030         	movff	get_fat@fs,move_window@fs
 10200  002DFC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10201  002E00  EE20 F01E          	lfsr	2,30
 10202  002E04  503B               	movf	get_fat@fs,w,c
 10203  002E06  26D9               	addwf	fsr2l,f,c
 10204  002E08  503C               	movf	get_fat@fs+1,w,c
 10205  002E0A  22DA               	addwfc	fsr2h,f,c
 10206  002E0C  CFDE F041          	movff	postinc2,??_get_fat
 10207  002E10  CFDE F042          	movff	postinc2,??_get_fat+1
 10208  002E14  CFDE F043          	movff	postinc2,??_get_fat+2
 10209  002E18  CFDE F044          	movff	postinc2,??_get_fat+3
 10210  002E1C  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10211  002E20  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10212  002E24  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10213  002E28  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10214  002E2C  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10215  002E30  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10216  002E34  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10217  002E38  6A48               	clrf	??_get_fat+7,c
 10218  002E3A  5041               	movf	??_get_fat,w,c
 10219  002E3C  2445               	addwf	??_get_fat+4,w,c
 10220  002E3E  6E32               	movwf	move_window@sector,c
 10221  002E40  5042               	movf	??_get_fat+1,w,c
 10222  002E42  2046               	addwfc	??_get_fat+5,w,c
 10223  002E44  6E33               	movwf	move_window@sector+1,c
 10224  002E46  5043               	movf	??_get_fat+2,w,c
 10225  002E48  2047               	addwfc	??_get_fat+6,w,c
 10226  002E4A  6E34               	movwf	move_window@sector+2,c
 10227  002E4C  5044               	movf	??_get_fat+3,w,c
 10228  002E4E  2048               	addwfc	??_get_fat+7,w,c
 10229  002E50  6E35               	movwf	move_window@sector+3,c
 10230  002E52  EC71  F027         	call	_move_window	;wreg free
 10231  002E56  0900               	iorlw	0
 10232  002E58  A4D8               	btfss	status,2,c
 10233  002E5A  D0A7               	goto	l358
 10234                           
 10235                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10236  002E5C  0EFF               	movlw	255
 10237  002E5E  6E41               	movwf	??_get_fat& (0+255),c
 10238  002E60  0E01               	movlw	1
 10239  002E62  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10240  002E64  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10241  002E68  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10242  002E6C  90D8               	bcf	status,0,c
 10243  002E6E  3643               	rlcf	??_get_fat+2,f,c
 10244  002E70  3644               	rlcf	??_get_fat+3,f,c
 10245  002E72  5041               	movf	??_get_fat,w,c
 10246  002E74  1643               	andwf	??_get_fat+2,f,c
 10247  002E76  5042               	movf	??_get_fat+1,w,c
 10248  002E78  1644               	andwf	??_get_fat+3,f,c
 10249  002E7A  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10250  002E7E  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10251  002E82  5043               	movf	??_get_fat+2,w,c
 10252  002E84  2645               	addwf	??_get_fat+4,f,c
 10253  002E86  5044               	movf	??_get_fat+3,w,c
 10254  002E88  2246               	addwfc	??_get_fat+5,f,c
 10255  002E8A  0E2E               	movlw	46
 10256  002E8C  2445               	addwf	??_get_fat+4,w,c
 10257  002E8E  6E52               	movwf	get_fat@p,c
 10258  002E90  0E00               	movlw	0
 10259  002E92  2046               	addwfc	??_get_fat+5,w,c
 10260  002E94  6E53               	movwf	get_fat@p+1,c
 10261                           
 10262                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10263  002E96  C052  FFD9         	movff	get_fat@p,fsr2l
 10264  002E9A  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10265  002E9E  CFDE F041          	movff	postinc2,??_get_fat
 10266  002EA2  CFDD F042          	movff	postdec2,??_get_fat+1
 10267  002EA6  C041  F04C         	movff	??_get_fat,get_fat@val
 10268  002EAA  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10269  002EAE                     L12:
 10270  002EAE  6A4E               	clrf	get_fat@val+2,c
 10271  002EB0  6A4F               	clrf	get_fat@val+3,c
 10272                           
 10273                           ;ff.c: 848:    break;
 10274  002EB2  D07B               	goto	l358
 10275  002EB4                     l4506:
 10276                           
 10277                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10278  002EB4  C03B  F030         	movff	get_fat@fs,move_window@fs
 10279  002EB8  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10280  002EBC  EE20 F01E          	lfsr	2,30
 10281  002EC0  503B               	movf	get_fat@fs,w,c
 10282  002EC2  26D9               	addwf	fsr2l,f,c
 10283  002EC4  503C               	movf	get_fat@fs+1,w,c
 10284  002EC6  22DA               	addwfc	fsr2h,f,c
 10285  002EC8  CFDE F041          	movff	postinc2,??_get_fat
 10286  002ECC  CFDE F042          	movff	postinc2,??_get_fat+1
 10287  002ED0  CFDE F043          	movff	postinc2,??_get_fat+2
 10288  002ED4  CFDE F044          	movff	postinc2,??_get_fat+3
 10289  002ED8  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10290  002EDC  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10291  002EE0  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10292  002EE4  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10293  002EE8  0E08               	movlw	8
 10294  002EEA  D005               	goto	u5240
 10295  002EEC                     u5245:
 10296  002EEC  90D8               	bcf	status,0,c
 10297  002EEE  3248               	rrcf	??_get_fat+7,f,c
 10298  002EF0  3247               	rrcf	??_get_fat+6,f,c
 10299  002EF2  3246               	rrcf	??_get_fat+5,f,c
 10300  002EF4  3245               	rrcf	??_get_fat+4,f,c
 10301  002EF6                     u5240:
 10302  002EF6  2EE8               	decfsz	wreg,f,c
 10303  002EF8  D7F9               	goto	u5245
 10304  002EFA  5041               	movf	??_get_fat,w,c
 10305  002EFC  2445               	addwf	??_get_fat+4,w,c
 10306  002EFE  6E32               	movwf	move_window@sector,c
 10307  002F00  5042               	movf	??_get_fat+1,w,c
 10308  002F02  2046               	addwfc	??_get_fat+5,w,c
 10309  002F04  6E33               	movwf	move_window@sector+1,c
 10310  002F06  5043               	movf	??_get_fat+2,w,c
 10311  002F08  2047               	addwfc	??_get_fat+6,w,c
 10312  002F0A  6E34               	movwf	move_window@sector+2,c
 10313  002F0C  5044               	movf	??_get_fat+3,w,c
 10314  002F0E  2048               	addwfc	??_get_fat+7,w,c
 10315  002F10  6E35               	movwf	move_window@sector+3,c
 10316  002F12  EC71  F027         	call	_move_window	;wreg free
 10317  002F16  0900               	iorlw	0
 10318  002F18  A4D8               	btfss	status,2,c
 10319  002F1A  D047               	goto	l358
 10320                           
 10321                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10322  002F1C  0EFF               	movlw	255
 10323  002F1E  6E41               	movwf	??_get_fat& (0+255),c
 10324  002F20  0E01               	movlw	1
 10325  002F22  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10326  002F24  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10327  002F28  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10328  002F2C  90D8               	bcf	status,0,c
 10329  002F2E  3643               	rlcf	??_get_fat+2,f,c
 10330  002F30  3644               	rlcf	??_get_fat+3,f,c
 10331  002F32  90D8               	bcf	status,0,c
 10332  002F34  3643               	rlcf	??_get_fat+2,f,c
 10333  002F36  3644               	rlcf	??_get_fat+3,f,c
 10334  002F38  5041               	movf	??_get_fat,w,c
 10335  002F3A  1643               	andwf	??_get_fat+2,f,c
 10336  002F3C  5042               	movf	??_get_fat+1,w,c
 10337  002F3E  1644               	andwf	??_get_fat+3,f,c
 10338  002F40  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10339  002F44  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10340  002F48  5043               	movf	??_get_fat+2,w,c
 10341  002F4A  2645               	addwf	??_get_fat+4,f,c
 10342  002F4C  5044               	movf	??_get_fat+3,w,c
 10343  002F4E  2246               	addwfc	??_get_fat+5,f,c
 10344  002F50  0E2E               	movlw	46
 10345  002F52  2445               	addwf	??_get_fat+4,w,c
 10346  002F54  6E52               	movwf	get_fat@p,c
 10347  002F56  0E00               	movlw	0
 10348  002F58  2046               	addwfc	??_get_fat+5,w,c
 10349  002F5A  6E53               	movwf	get_fat@p+1,c
 10350                           
 10351                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10352  002F5C  C052  FFD9         	movff	get_fat@p,fsr2l
 10353  002F60  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10354  002F64  0EFF               	movlw	255
 10355  002F66  14DE               	andwf	postinc2,w,c
 10356  002F68  6E4C               	movwf	get_fat@val,c
 10357  002F6A  0EFF               	movlw	255
 10358  002F6C  14DE               	andwf	postinc2,w,c
 10359  002F6E  6E4D               	movwf	get_fat@val+1,c
 10360  002F70  0EFF               	movlw	255
 10361  002F72  14DE               	andwf	postinc2,w,c
 10362  002F74  6E4E               	movwf	get_fat@val+2,c
 10363  002F76  0E0F               	movlw	15
 10364  002F78  14DE               	andwf	postinc2,w,c
 10365  002F7A                     L11:
 10366  002F7A  6E4F               	movwf	get_fat@val+3,c
 10367                           
 10368                           ;ff.c: 854:    break;
 10369  002F7C  D016               	goto	l358
 10370  002F7E                     l4516:
 10371  002F7E  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10372  002F82  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10373  002F86  50DF               	movf	indf2,w,c
 10374  002F88  6E41               	movwf	??_get_fat& (0+255),c
 10375  002F8A  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10376                           
 10377                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10378                           ; Switch size 1, requested type "simple"
 10379                           ; Number of cases is 1, Range of values is 0 to 0
 10380                           ; switch strategies available:
 10381                           ; Name         Instructions Cycles
 10382                           ; simple_byte            4     3 (average)
 10383                           ;	Chosen strategy is simple_byte
 10384  002F8C  5042               	movf	??_get_fat+1,w,c
 10385  002F8E  0A00               	xorlw	0	; case 0
 10386  002F90  A4D8               	btfss	status,2,c
 10387  002F92  D65B               	goto	u5160
 10388                           
 10389                           ; Switch size 1, requested type "simple"
 10390                           ; Number of cases is 3, Range of values is 1 to 3
 10391                           ; switch strategies available:
 10392                           ; Name         Instructions Cycles
 10393                           ; simple_byte           10     6 (average)
 10394                           ;	Chosen strategy is simple_byte
 10395  002F94  5041               	movf	??_get_fat,w,c
 10396  002F96  0A01               	xorlw	1	; case 1
 10397  002F98  B4D8               	btfsc	status,2,c
 10398  002F9A  D664               	goto	l360
 10399  002F9C  0A03               	xorlw	3	; case 2
 10400  002F9E  B4D8               	btfsc	status,2,c
 10401  002FA0  D72B               	goto	l4498
 10402  002FA2  0A01               	xorlw	1	; case 3
 10403  002FA4  B4D8               	btfsc	status,2,c
 10404  002FA6  D786               	goto	l4506
 10405  002FA8  D650               	goto	u5160
 10406  002FAA                     l358:
 10407                           
 10408                           ;ff.c: 861:  return val;
 10409  002FAA  C04C  F03B         	movff	get_fat@val,?_get_fat
 10410  002FAE  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10411  002FB2  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10412  002FB6  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10413  002FBA  0012               	return		;funcret
 10414  002FBC                     __end_of_get_fat:
 10415                           	opt callstack 0
 10416                           
 10417 ;; *************** function _clust2sect *****************
 10418 ;; Defined at:
 10419 ;;		line 800 in file "ff.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  fs              2   12[COMRAM] PTR struct .
 10422 ;;		 -> NULL(0), FatFs(558), 
 10423 ;;  clst            4   14[COMRAM] unsigned long 
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  4   12[COMRAM] unsigned long 
 10428 ;; Registers used:
 10429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10435 ;;      Params:         6       0       0       0       0       0       0       0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10437 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10438 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10439 ;;Total ram usage:       11 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    1
 10442 ;; This function calls:
 10443 ;;		___lmul
 10444 ;; This function is called by:
 10445 ;;		_dir_sdi
 10446 ;;		_dir_next
 10447 ;;		_f_write
 10448 ;;		_f_lseek
 10449 ;;		_f_read
 10450 ;; This function uses a non-reentrant model
 10451 ;;
 10452                           
 10453                           	psect	text25
 10454  004D78                     __ptext25:
 10455                           	opt callstack 0
 10456  004D78                     _clust2sect:
 10457                           	opt callstack 28
 10458                           
 10459                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10460                           
 10461                           ;incstack = 0
 10462  004D78  0E02               	movlw	2
 10463  004D7A  5E0F               	subwf	clust2sect@clst,f,c
 10464  004D7C  0E00               	movlw	0
 10465  004D7E  5A10               	subwfb	clust2sect@clst+1,f,c
 10466  004D80  5A11               	subwfb	clust2sect@clst+2,f,c
 10467  004D82  5A12               	subwfb	clust2sect@clst+3,f,c
 10468                           
 10469                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10470  004D84  EE20 F012          	lfsr	2,18
 10471  004D88  500D               	movf	clust2sect@fs,w,c
 10472  004D8A  26D9               	addwf	fsr2l,f,c
 10473  004D8C  500E               	movf	clust2sect@fs+1,w,c
 10474  004D8E  22DA               	addwfc	fsr2h,f,c
 10475  004D90  0EFE               	movlw	254
 10476  004D92  24DE               	addwf	postinc2,w,c
 10477  004D94  6E13               	movwf	??_clust2sect& (0+255),c
 10478  004D96  0EFF               	movlw	255
 10479  004D98  20DE               	addwfc	postinc2,w,c
 10480  004D9A  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10481  004D9C  0EFF               	movlw	255
 10482  004D9E  20DE               	addwfc	postinc2,w,c
 10483  004DA0  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10484  004DA2  0EFF               	movlw	255
 10485  004DA4  20DE               	addwfc	postinc2,w,c
 10486  004DA6  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10487  004DA8  5013               	movf	??_clust2sect,w,c
 10488  004DAA  5C0F               	subwf	clust2sect@clst,w,c
 10489  004DAC  5014               	movf	??_clust2sect+1,w,c
 10490  004DAE  5810               	subwfb	clust2sect@clst+1,w,c
 10491  004DB0  5015               	movf	??_clust2sect+2,w,c
 10492  004DB2  5811               	subwfb	clust2sect@clst+2,w,c
 10493  004DB4  5016               	movf	??_clust2sect+3,w,c
 10494  004DB6  5812               	subwfb	clust2sect@clst+3,w,c
 10495  004DB8  A0D8               	btfss	status,0,c
 10496  004DBA  D009               	goto	l4626
 10497  004DBC  0E00               	movlw	0
 10498  004DBE  6E0D               	movwf	?_clust2sect,c
 10499  004DC0  0E00               	movlw	0
 10500  004DC2  6E0E               	movwf	?_clust2sect+1,c
 10501  004DC4  0E00               	movlw	0
 10502  004DC6  6E0F               	movwf	?_clust2sect+2,c
 10503  004DC8  0E00               	movlw	0
 10504  004DCA  6E10               	movwf	?_clust2sect+3,c
 10505  004DCC  0012               	return	
 10506  004DCE                     l4626:
 10507                           
 10508                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10509  004DCE  EE20 F026          	lfsr	2,38
 10510  004DD2  500D               	movf	clust2sect@fs,w,c
 10511  004DD4  26D9               	addwf	fsr2l,f,c
 10512  004DD6  500E               	movf	clust2sect@fs+1,w,c
 10513  004DD8  22DA               	addwfc	fsr2h,f,c
 10514  004DDA  CFDE F013          	movff	postinc2,??_clust2sect
 10515  004DDE  CFDE F014          	movff	postinc2,??_clust2sect+1
 10516  004DE2  CFDE F015          	movff	postinc2,??_clust2sect+2
 10517  004DE6  CFDE F016          	movff	postinc2,??_clust2sect+3
 10518  004DEA  EE20 F002          	lfsr	2,2
 10519  004DEE  500D               	movf	clust2sect@fs,w,c
 10520  004DF0  26D9               	addwf	fsr2l,f,c
 10521  004DF2  500E               	movf	clust2sect@fs+1,w,c
 10522  004DF4  22DA               	addwfc	fsr2h,f,c
 10523  004DF6  50DF               	movf	indf2,w,c
 10524  004DF8  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10525  004DFA  5017               	movf	??_clust2sect+4,w,c
 10526  004DFC  6E01               	movwf	___lmul@multiplier,c
 10527  004DFE  6A02               	clrf	___lmul@multiplier+1,c
 10528  004E00  6A03               	clrf	___lmul@multiplier+2,c
 10529  004E02  6A04               	clrf	___lmul@multiplier+3,c
 10530  004E04  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10531  004E08  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10532  004E0C  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10533  004E10  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10534  004E14  EC76  F029         	call	___lmul	;wreg free
 10535  004E18  5013               	movf	??_clust2sect,w,c
 10536  004E1A  2401               	addwf	?___lmul,w,c
 10537  004E1C  6E0D               	movwf	?_clust2sect,c
 10538  004E1E  5014               	movf	??_clust2sect+1,w,c
 10539  004E20  2002               	addwfc	?___lmul+1,w,c
 10540  004E22  6E0E               	movwf	?_clust2sect+1,c
 10541  004E24  5015               	movf	??_clust2sect+2,w,c
 10542  004E26  2003               	addwfc	?___lmul+2,w,c
 10543  004E28  6E0F               	movwf	?_clust2sect+2,c
 10544  004E2A  5016               	movf	??_clust2sect+3,w,c
 10545  004E2C  2004               	addwfc	?___lmul+3,w,c
 10546  004E2E  6E10               	movwf	?_clust2sect+3,c
 10547  004E30  0012               	return		;funcret
 10548  004E32                     __end_of_clust2sect:
 10549                           	opt callstack 0
 10550                           
 10551 ;; *************** function ___lmul *****************
 10552 ;; Defined at:
 10553 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;  multiplier      4    0[COMRAM] unsigned long 
 10556 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10557 ;; Auto vars:     Size  Location     Type
 10558 ;;  product         4    8[COMRAM] unsigned long 
 10559 ;; Return value:  Size  Location     Type
 10560 ;;                  4    0[COMRAM] unsigned long 
 10561 ;; Registers used:
 10562 ;;		wreg, status,2, status,0
 10563 ;; Tracked objects:
 10564 ;;		On entry : 0/0
 10565 ;;		On exit  : 0/0
 10566 ;;		Unchanged: 0/0
 10567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10568 ;;      Params:         8       0       0       0       0       0       0       0       0
 10569 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10570 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10571 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10572 ;;Total ram usage:       12 bytes
 10573 ;; Hardware stack levels used:    1
 10574 ;; This function calls:
 10575 ;;		Nothing
 10576 ;; This function is called by:
 10577 ;;		_clust2sect
 10578 ;;		_find_volume
 10579 ;; This function uses a non-reentrant model
 10580 ;;
 10581                           
 10582                           	psect	text26
 10583  0052EC                     __ptext26:
 10584                           	opt callstack 0
 10585  0052EC                     ___lmul:
 10586                           	opt callstack 28
 10587                           
 10588                           ;incstack = 0
 10589  0052EC  0E00               	movlw	0
 10590  0052EE  6E09               	movwf	___lmul@product,c
 10591  0052F0  0E00               	movlw	0
 10592  0052F2  6E0A               	movwf	___lmul@product+1,c
 10593  0052F4  0E00               	movlw	0
 10594  0052F6  6E0B               	movwf	___lmul@product+2,c
 10595  0052F8  0E00               	movlw	0
 10596  0052FA  6E0C               	movwf	___lmul@product+3,c
 10597  0052FC                     l4602:
 10598  0052FC  A001               	btfss	___lmul@multiplier,0,c
 10599  0052FE  D008               	goto	l4606
 10600  005300  5005               	movf	___lmul@multiplicand,w,c
 10601  005302  2609               	addwf	___lmul@product,f,c
 10602  005304  5006               	movf	___lmul@multiplicand+1,w,c
 10603  005306  220A               	addwfc	___lmul@product+1,f,c
 10604  005308  5007               	movf	___lmul@multiplicand+2,w,c
 10605  00530A  220B               	addwfc	___lmul@product+2,f,c
 10606  00530C  5008               	movf	___lmul@multiplicand+3,w,c
 10607  00530E  220C               	addwfc	___lmul@product+3,f,c
 10608  005310                     l4606:
 10609  005310  90D8               	bcf	status,0,c
 10610  005312  3605               	rlcf	___lmul@multiplicand,f,c
 10611  005314  3606               	rlcf	___lmul@multiplicand+1,f,c
 10612  005316  3607               	rlcf	___lmul@multiplicand+2,f,c
 10613  005318  3608               	rlcf	___lmul@multiplicand+3,f,c
 10614  00531A  90D8               	bcf	status,0,c
 10615  00531C  3204               	rrcf	___lmul@multiplier+3,f,c
 10616  00531E  3203               	rrcf	___lmul@multiplier+2,f,c
 10617  005320  3202               	rrcf	___lmul@multiplier+1,f,c
 10618  005322  3201               	rrcf	___lmul@multiplier,f,c
 10619  005324  5001               	movf	___lmul@multiplier,w,c
 10620  005326  1002               	iorwf	___lmul@multiplier+1,w,c
 10621  005328  1003               	iorwf	___lmul@multiplier+2,w,c
 10622  00532A  1004               	iorwf	___lmul@multiplier+3,w,c
 10623  00532C  A4D8               	btfss	status,2,c
 10624  00532E  D7E6               	goto	l4602
 10625  005330  C009  F001         	movff	___lmul@product,?___lmul
 10626  005334  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10627  005338  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10628  00533C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10629  005340  0012               	return		;funcret
 10630  005342                     __end_of___lmul:
 10631                           	opt callstack 0
 10632                           
 10633 ;; *************** function ___lldiv *****************
 10634 ;; Defined at:
 10635 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;  dividend        4    0[COMRAM] unsigned long 
 10638 ;;  divisor         4    4[COMRAM] unsigned long 
 10639 ;; Auto vars:     Size  Location     Type
 10640 ;;  quotient        4    8[COMRAM] unsigned long 
 10641 ;;  counter         1   12[COMRAM] unsigned char 
 10642 ;; Return value:  Size  Location     Type
 10643 ;;                  4    0[COMRAM] unsigned long 
 10644 ;; Registers used:
 10645 ;;		wreg, status,2, status,0
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10651 ;;      Params:         8       0       0       0       0       0       0       0       0
 10652 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10653 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10654 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10655 ;;Total ram usage:       13 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; This function calls:
 10658 ;;		Nothing
 10659 ;; This function is called by:
 10660 ;;		_find_volume
 10661 ;;		_f_lseek
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           	psect	text27
 10666  00501C                     __ptext27:
 10667                           	opt callstack 0
 10668  00501C                     ___lldiv:
 10669                           	opt callstack 28
 10670                           
 10671                           ;incstack = 0
 10672  00501C  0E00               	movlw	0
 10673  00501E  6E09               	movwf	___lldiv@quotient,c
 10674  005020  0E00               	movlw	0
 10675  005022  6E0A               	movwf	___lldiv@quotient+1,c
 10676  005024  0E00               	movlw	0
 10677  005026  6E0B               	movwf	___lldiv@quotient+2,c
 10678  005028  0E00               	movlw	0
 10679  00502A  6E0C               	movwf	___lldiv@quotient+3,c
 10680  00502C  5005               	movf	___lldiv@divisor,w,c
 10681  00502E  1006               	iorwf	___lldiv@divisor+1,w,c
 10682  005030  1007               	iorwf	___lldiv@divisor+2,w,c
 10683  005032  1008               	iorwf	___lldiv@divisor+3,w,c
 10684  005034  B4D8               	btfsc	status,2,c
 10685  005036  D02A               	goto	l920
 10686  005038  0E01               	movlw	1
 10687  00503A  6E0D               	movwf	___lldiv@counter,c
 10688  00503C  D006               	goto	l5504
 10689  00503E                     l5502:
 10690  00503E  90D8               	bcf	status,0,c
 10691  005040  3605               	rlcf	___lldiv@divisor,f,c
 10692  005042  3606               	rlcf	___lldiv@divisor+1,f,c
 10693  005044  3607               	rlcf	___lldiv@divisor+2,f,c
 10694  005046  3608               	rlcf	___lldiv@divisor+3,f,c
 10695  005048  2A0D               	incf	___lldiv@counter,f,c
 10696  00504A                     l5504:
 10697  00504A  AE08               	btfss	___lldiv@divisor+3,7,c
 10698  00504C  D7F8               	goto	l5502
 10699  00504E                     u7140:
 10700  00504E  90D8               	bcf	status,0,c
 10701  005050  3609               	rlcf	___lldiv@quotient,f,c
 10702  005052  360A               	rlcf	___lldiv@quotient+1,f,c
 10703  005054  360B               	rlcf	___lldiv@quotient+2,f,c
 10704  005056  360C               	rlcf	___lldiv@quotient+3,f,c
 10705  005058  5005               	movf	___lldiv@divisor,w,c
 10706  00505A  5C01               	subwf	___lldiv@dividend,w,c
 10707  00505C  5006               	movf	___lldiv@divisor+1,w,c
 10708  00505E  5802               	subwfb	___lldiv@dividend+1,w,c
 10709  005060  5007               	movf	___lldiv@divisor+2,w,c
 10710  005062  5803               	subwfb	___lldiv@dividend+2,w,c
 10711  005064  5008               	movf	___lldiv@divisor+3,w,c
 10712  005066  5804               	subwfb	___lldiv@dividend+3,w,c
 10713  005068  A0D8               	btfss	status,0,c
 10714  00506A  D009               	goto	l5514
 10715  00506C  5005               	movf	___lldiv@divisor,w,c
 10716  00506E  5E01               	subwf	___lldiv@dividend,f,c
 10717  005070  5006               	movf	___lldiv@divisor+1,w,c
 10718  005072  5A02               	subwfb	___lldiv@dividend+1,f,c
 10719  005074  5007               	movf	___lldiv@divisor+2,w,c
 10720  005076  5A03               	subwfb	___lldiv@dividend+2,f,c
 10721  005078  5008               	movf	___lldiv@divisor+3,w,c
 10722  00507A  5A04               	subwfb	___lldiv@dividend+3,f,c
 10723  00507C  8009               	bsf	___lldiv@quotient,0,c
 10724  00507E                     l5514:
 10725  00507E  90D8               	bcf	status,0,c
 10726  005080  3208               	rrcf	___lldiv@divisor+3,f,c
 10727  005082  3207               	rrcf	___lldiv@divisor+2,f,c
 10728  005084  3206               	rrcf	___lldiv@divisor+1,f,c
 10729  005086  3205               	rrcf	___lldiv@divisor,f,c
 10730  005088  2E0D               	decfsz	___lldiv@counter,f,c
 10731  00508A  D7E1               	goto	u7140
 10732  00508C                     l920:
 10733  00508C  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10734  005090  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10735  005094  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10736  005098  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10737  00509C  0012               	return		;funcret
 10738  00509E                     __end_of___lldiv:
 10739                           	opt callstack 0
 10740                           
 10741 ;; *************** function _f_close *****************
 10742 ;; Defined at:
 10743 ;;		line 2861 in file "ff.c"
 10744 ;; Parameters:    Size  Location     Type
 10745 ;;  fp              2   77[COMRAM] PTR struct .
 10746 ;;		 -> Fil(32), 
 10747 ;; Auto vars:     Size  Location     Type
 10748 ;;  res             1   79[COMRAM] enum E93
 10749 ;; Return value:  Size  Location     Type
 10750 ;;                  1    wreg      enum E4918
 10751 ;; Registers used:
 10752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10753 ;; Tracked objects:
 10754 ;;		On entry : 0/0
 10755 ;;		On exit  : 0/0
 10756 ;;		Unchanged: 0/0
 10757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10758 ;;      Params:         2       0       0       0       0       0       0       0       0
 10759 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10760 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10761 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10762 ;;Total ram usage:        3 bytes
 10763 ;; Hardware stack levels used:    1
 10764 ;; Hardware stack levels required when called:    9
 10765 ;; This function calls:
 10766 ;;		_f_sync
 10767 ;;		_validate
 10768 ;; This function is called by:
 10769 ;;		_main
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           	psect	text28
 10774  005444                     __ptext28:
 10775                           	opt callstack 0
 10776  005444                     _f_close:
 10777                           	opt callstack 21
 10778                           
 10779                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10780                           
 10781                           ;incstack = 0
 10782  005444  C04E  F045         	movff	f_close@fp,f_sync@fp
 10783  005448  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 10784  00544C  EC92  F021         	call	_f_sync	;wreg free
 10785  005450  6E50               	movwf	f_close@res,c
 10786                           
 10787                           ;ff.c: 2870:  if (res == FR_OK)
 10788  005452  5050               	movf	f_close@res,w,c
 10789  005454  A4D8               	btfss	status,2,c
 10790  005456  0012               	return	
 10791                           
 10792                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10793  005458  C04E  F002         	movff	f_close@fp,validate@obj
 10794  00545C  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 10795  005460  ECC4  F027         	call	_validate	;wreg free
 10796  005464  6E50               	movwf	f_close@res,c
 10797                           
 10798                           ;ff.c: 2874:   if (res == FR_OK) {
 10799  005466  5050               	movf	f_close@res,w,c
 10800  005468  A4D8               	btfss	status,2,c
 10801  00546A  0012               	return	
 10802                           
 10803                           ;ff.c: 2882:     fp->fs = 0;
 10804  00546C  C04E  FFD9         	movff	f_close@fp,fsr2l
 10805  005470  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 10806  005474  0E00               	movlw	0
 10807  005476  6EDE               	movwf	postinc2,c
 10808  005478  0E00               	movlw	0
 10809  00547A  6EDD               	movwf	postdec2,c
 10810  00547C  0012               	return		;funcret
 10811  00547E                     __end_of_f_close:
 10812                           	opt callstack 0
 10813                           
 10814 ;; *************** function _f_sync *****************
 10815 ;; Defined at:
 10816 ;;		line 2813 in file "ff.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;  fp              2   68[COMRAM] PTR struct .
 10819 ;;		 -> Fil(32), 
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;  tm              4    0        unsigned long 
 10822 ;;  dir             2   75[COMRAM] PTR unsigned char 
 10823 ;;		 -> NULL(0), FatFs(558), 
 10824 ;;  res             1   74[COMRAM] enum E93
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  1    wreg      enum E93
 10827 ;; Registers used:
 10828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10834 ;;      Params:         2       0       0       0       0       0       0       0       0
 10835 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10837 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10838 ;;Total ram usage:        9 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    8
 10841 ;; This function calls:
 10842 ;;		_move_window
 10843 ;;		_st_clust
 10844 ;;		_sync_fs
 10845 ;;		_validate
 10846 ;; This function is called by:
 10847 ;;		_f_close
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           	psect	text29
 10852  004324                     __ptext29:
 10853                           	opt callstack 0
 10854  004324                     _f_sync:
 10855                           	opt callstack 21
 10856                           
 10857                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 10858                           
 10859                           ;incstack = 0
 10860  004324  C045  F002         	movff	f_sync@fp,validate@obj
 10861  004328  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 10862  00432C  ECC4  F027         	call	_validate	;wreg free
 10863  004330  6E4B               	movwf	f_sync@res,c
 10864                           
 10865                           ;ff.c: 2823:  if (res == FR_OK) {
 10866  004332  504B               	movf	f_sync@res,w,c
 10867  004334  A4D8               	btfss	status,2,c
 10868  004336  D095               	goto	l5918
 10869                           
 10870                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 10871  004338  EE20 F004          	lfsr	2,4
 10872  00433C  5045               	movf	f_sync@fp,w,c
 10873  00433E  26D9               	addwf	fsr2l,f,c
 10874  004340  5046               	movf	f_sync@fp+1,w,c
 10875  004342  22DA               	addwfc	fsr2h,f,c
 10876  004344  AADF               	btfss	indf2,5,c
 10877  004346  D08D               	goto	l5918
 10878                           
 10879                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 10880  004348  C045  FFD9         	movff	f_sync@fp,fsr2l
 10881  00434C  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 10882  004350  CFDE F030          	movff	postinc2,move_window@fs
 10883  004354  CFDD F031          	movff	postdec2,move_window@fs+1
 10884  004358  EE20 F01A          	lfsr	2,26
 10885  00435C  5045               	movf	f_sync@fp,w,c
 10886  00435E  26D9               	addwf	fsr2l,f,c
 10887  004360  5046               	movf	f_sync@fp+1,w,c
 10888  004362  22DA               	addwfc	fsr2h,f,c
 10889  004364  CFDE F032          	movff	postinc2,move_window@sector
 10890  004368  CFDE F033          	movff	postinc2,move_window@sector+1
 10891  00436C  CFDE F034          	movff	postinc2,move_window@sector+2
 10892  004370  CFDE F035          	movff	postinc2,move_window@sector+3
 10893  004374  EC71  F027         	call	_move_window	;wreg free
 10894  004378  6E4B               	movwf	f_sync@res,c
 10895                           
 10896                           ;ff.c: 2834:    if (res == FR_OK) {
 10897  00437A  504B               	movf	f_sync@res,w,c
 10898  00437C  A4D8               	btfss	status,2,c
 10899  00437E  D071               	goto	l5918
 10900                           
 10901                           ;ff.c: 2835:     dir = fp->dir_ptr;
 10902  004380  EE20 F01E          	lfsr	2,30
 10903  004384  5045               	movf	f_sync@fp,w,c
 10904  004386  26D9               	addwf	fsr2l,f,c
 10905  004388  5046               	movf	f_sync@fp+1,w,c
 10906  00438A  22DA               	addwfc	fsr2h,f,c
 10907  00438C  CFDE F04C          	movff	postinc2,f_sync@dir
 10908  004390  CFDD F04D          	movff	postdec2,f_sync@dir+1
 10909                           
 10910                           ;ff.c: 2836:     dir[11] |= 0x20;
 10911  004394  EE20 F00B          	lfsr	2,11
 10912  004398  504C               	movf	f_sync@dir,w,c
 10913  00439A  26D9               	addwf	fsr2l,f,c
 10914  00439C  504D               	movf	f_sync@dir+1,w,c
 10915  00439E  22DA               	addwfc	fsr2h,f,c
 10916  0043A0  0E00               	movlw	0
 10917  0043A2  8ADB               	bsf	plusw2,5,c
 10918                           
 10919                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 10920  0043A4  EE20 F00A          	lfsr	2,10
 10921  0043A8  5045               	movf	f_sync@fp,w,c
 10922  0043AA  26D9               	addwf	fsr2l,f,c
 10923  0043AC  5046               	movf	f_sync@fp+1,w,c
 10924  0043AE  22DA               	addwfc	fsr2h,f,c
 10925  0043B0  EE10 F01C          	lfsr	1,28
 10926  0043B4  504C               	movf	f_sync@dir,w,c
 10927  0043B6  26E1               	addwf	fsr1l,f,c
 10928  0043B8  504D               	movf	f_sync@dir+1,w,c
 10929  0043BA  22E2               	addwfc	fsr1h,f,c
 10930  0043BC  CFDE FFE6          	movff	postinc2,postinc1
 10931  0043C0  CFDE FFE6          	movff	postinc2,postinc1
 10932  0043C4  CFDE FFE6          	movff	postinc2,postinc1
 10933  0043C8  CFDE FFE6          	movff	postinc2,postinc1
 10934                           
 10935                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 10936  0043CC  C04C  F001         	movff	f_sync@dir,st_clust@dir
 10937  0043D0  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 10938  0043D4  EE20 F00E          	lfsr	2,14
 10939  0043D8  5045               	movf	f_sync@fp,w,c
 10940  0043DA  26D9               	addwf	fsr2l,f,c
 10941  0043DC  5046               	movf	f_sync@fp+1,w,c
 10942  0043DE  22DA               	addwfc	fsr2h,f,c
 10943  0043E0  CFDE F003          	movff	postinc2,st_clust@cl
 10944  0043E4  CFDE F004          	movff	postinc2,st_clust@cl+1
 10945  0043E8  CFDE F005          	movff	postinc2,st_clust@cl+2
 10946  0043EC  CFDE F006          	movff	postinc2,st_clust@cl+3
 10947  0043F0  EC8D  F02A         	call	_st_clust	;wreg free
 10948                           
 10949                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 10950  0043F4  EE20 F016          	lfsr	2,22
 10951  0043F8  504C               	movf	f_sync@dir,w,c
 10952  0043FA  26D9               	addwf	fsr2l,f,c
 10953  0043FC  504D               	movf	f_sync@dir+1,w,c
 10954  0043FE  22DA               	addwfc	fsr2h,f,c
 10955  004400  0E00               	movlw	0
 10956  004402  6EDE               	movwf	postinc2,c
 10957  004404  0E00               	movlw	0
 10958  004406  6EDE               	movwf	postinc2,c
 10959  004408  0E21               	movlw	33
 10960  00440A  6EDE               	movwf	postinc2,c
 10961  00440C  0E46               	movlw	70
 10962  00440E  6EDD               	movwf	postdec2,c
 10963                           
 10964                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 10965  004410  EE20 F012          	lfsr	2,18
 10966  004414  504C               	movf	f_sync@dir,w,c
 10967  004416  26D9               	addwf	fsr2l,f,c
 10968  004418  504D               	movf	f_sync@dir+1,w,c
 10969  00441A  22DA               	addwfc	fsr2h,f,c
 10970  00441C  0E00               	movlw	0
 10971  00441E  6EDE               	movwf	postinc2,c
 10972  004420  0E00               	movlw	0
 10973  004422  6EDD               	movwf	postdec2,c
 10974                           
 10975                           ;ff.c: 2842:     fp->flag &= ~0x20;
 10976  004424  EE20 F004          	lfsr	2,4
 10977  004428  5045               	movf	f_sync@fp,w,c
 10978  00442A  26D9               	addwf	fsr2l,f,c
 10979  00442C  5046               	movf	f_sync@fp+1,w,c
 10980  00442E  22DA               	addwfc	fsr2h,f,c
 10981  004430  0EDF               	movlw	223
 10982  004432  16DF               	andwf	indf2,f,c
 10983                           
 10984                           ;ff.c: 2843:     fp->fs->wflag = 1;
 10985  004434  C045  FFD9         	movff	f_sync@fp,fsr2l
 10986  004438  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 10987  00443C  EE10 F004          	lfsr	1,4
 10988  004440  50DE               	movf	postinc2,w,c
 10989  004442  26E1               	addwf	fsr1l,f,c
 10990  004444  50DD               	movf	postdec2,w,c
 10991  004446  22E2               	addwfc	fsr1h,f,c
 10992  004448  0E01               	movlw	1
 10993  00444A  6EE7               	movwf	indf1,c
 10994                           
 10995                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 10996  00444C  C045  FFD9         	movff	f_sync@fp,fsr2l
 10997  004450  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 10998  004454  CFDE F03A          	movff	postinc2,sync_fs@fs
 10999  004458  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11000  00445C  ECBE  F01E         	call	_sync_fs	;wreg free
 11001  004460  6E4B               	movwf	f_sync@res,c
 11002  004462                     l5918:
 11003                           
 11004                           ;ff.c: 2849:  return res;
 11005  004462  504B               	movf	f_sync@res,w,c
 11006  004464  0012               	return		;funcret
 11007  004466                     __end_of_f_sync:
 11008                           	opt callstack 0
 11009                           
 11010 ;; *************** function _validate *****************
 11011 ;; Defined at:
 11012 ;;		line 2372 in file "ff.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;  obj             2    1[COMRAM] PTR void 
 11015 ;;		 -> Fil(32), 
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  fil             2    7[COMRAM] PTR struct .
 11018 ;;		 -> Fil(32), 
 11019 ;; Return value:  Size  Location     Type
 11020 ;;                  1    wreg      enum E93
 11021 ;; Registers used:
 11022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11023 ;; Tracked objects:
 11024 ;;		On entry : 0/0
 11025 ;;		On exit  : 0/0
 11026 ;;		Unchanged: 0/0
 11027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11028 ;;      Params:         2       0       0       0       0       0       0       0       0
 11029 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11030 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11031 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11032 ;;Total ram usage:        8 bytes
 11033 ;; Hardware stack levels used:    1
 11034 ;; Hardware stack levels required when called:    1
 11035 ;; This function calls:
 11036 ;;		_disk_status
 11037 ;; This function is called by:
 11038 ;;		_f_write
 11039 ;;		_f_sync
 11040 ;;		_f_close
 11041 ;;		_f_lseek
 11042 ;;		_f_read
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           	psect	text30
 11047  004F88                     __ptext30:
 11048                           	opt callstack 0
 11049  004F88                     _validate:
 11050                           	opt callstack 28
 11051                           
 11052                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11053                           
 11054                           ;incstack = 0
 11055  004F88  C002  F008         	movff	validate@obj,validate@fil
 11056  004F8C  C003  F009         	movff	validate@obj+1,validate@fil+1
 11057                           
 11058                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11059  004F90  5008               	movf	validate@fil,w,c
 11060  004F92  1009               	iorwf	validate@fil+1,w,c
 11061  004F94  B4D8               	btfsc	status,2,c
 11062  004F96  D03E               	goto	u7120
 11063  004F98  C008  FFD9         	movff	validate@fil,fsr2l
 11064  004F9C  C009  FFDA         	movff	validate@fil+1,fsr2h
 11065  004FA0  50DE               	movf	postinc2,w,c
 11066  004FA2  10DE               	iorwf	postinc2,w,c
 11067  004FA4  B4D8               	btfsc	status,2,c
 11068  004FA6  D036               	goto	u7120
 11069  004FA8  C008  FFD9         	movff	validate@fil,fsr2l
 11070  004FAC  C009  FFDA         	movff	validate@fil+1,fsr2h
 11071  004FB0  CFDE F004          	movff	postinc2,??_validate
 11072  004FB4  CFDD F005          	movff	postdec2,??_validate+1
 11073  004FB8  C004  FFD9         	movff	??_validate,fsr2l
 11074  004FBC  C005  FFDA         	movff	??_validate+1,fsr2h
 11075  004FC0  50DF               	movf	indf2,w,c
 11076  004FC2  B4D8               	btfsc	status,2,c
 11077  004FC4  D027               	goto	u7120
 11078  004FC6  EE20 F002          	lfsr	2,2
 11079  004FCA  5008               	movf	validate@fil,w,c
 11080  004FCC  26D9               	addwf	fsr2l,f,c
 11081  004FCE  5009               	movf	validate@fil+1,w,c
 11082  004FD0  22DA               	addwfc	fsr2h,f,c
 11083  004FD2  C008  FFE1         	movff	validate@fil,fsr1l
 11084  004FD6  C009  FFE2         	movff	validate@fil+1,fsr1h
 11085  004FDA  EE00 F006          	lfsr	0,6
 11086  004FDE  50E6               	movf	postinc1,w,c
 11087  004FE0  26E9               	addwf	fsr0l,f,c
 11088  004FE2  50E5               	movf	postdec1,w,c
 11089  004FE4  22EA               	addwfc	fsr0h,f,c
 11090  004FE6  50DE               	movf	postinc2,w,c
 11091  004FE8  18EE               	xorwf	postinc0,w,c
 11092  004FEA  E114               	bnz	l5488
 11093  004FEC  50DE               	movf	postinc2,w,c
 11094  004FEE  18EE               	xorwf	postinc0,w,c
 11095  004FF0  A4D8               	btfss	status,2,c
 11096  004FF2  D010               	goto	u7120
 11097  004FF4  C008  FFD9         	movff	validate@fil,fsr2l
 11098  004FF8  C009  FFDA         	movff	validate@fil+1,fsr2h
 11099  004FFC  EE10 F001          	lfsr	1,1
 11100  005000  50DE               	movf	postinc2,w,c
 11101  005002  26E1               	addwf	fsr1l,f,c
 11102  005004  50DD               	movf	postdec2,w,c
 11103  005006  22E2               	addwfc	fsr1h,f,c
 11104  005008  50E7               	movf	indf1,w,c
 11105  00500A  ECC4  F02A         	call	_disk_status
 11106  00500E  6E04               	movwf	??_validate& (0+255),c
 11107  005010  A004               	btfss	??_validate,0,c
 11108  005012  D002               	goto	l5492
 11109  005014                     u7120:
 11110  005014                     l5488:
 11111                           
 11112                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11113  005014  0E09               	movlw	9
 11114  005016  0012               	return	
 11115  005018                     l5492:
 11116                           
 11117                           ;ff.c: 2384:  return FR_OK;
 11118  005018  0E00               	movlw	0
 11119  00501A  0012               	return		;funcret
 11120  00501C                     __end_of_validate:
 11121                           	opt callstack 0
 11122                           
 11123 ;; *************** function _disk_status *****************
 11124 ;; Defined at:
 11125 ;;		line 356 in file "diskio.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;  pdrv            1    wreg     unsigned char 
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;  pdrv            1    0[COMRAM] unsigned char 
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      unsigned char 
 11132 ;; Registers used:
 11133 ;;		wreg, status,2
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 0/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11139 ;;      Params:         0       0       0       0       0       0       0       0       0
 11140 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11141 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11142 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11143 ;;Total ram usage:        1 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; This function calls:
 11146 ;;		Nothing
 11147 ;; This function is called by:
 11148 ;;		_find_volume
 11149 ;;		_validate
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text31
 11154  005588                     __ptext31:
 11155                           	opt callstack 0
 11156  005588                     _disk_status:
 11157                           	opt callstack 28
 11158                           
 11159                           ;incstack = 0
 11160                           ;disk_status@pdrv stored from wreg
 11161  005588  6E01               	movwf	disk_status@pdrv,c
 11162                           
 11163                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11164  00558A  5001               	movf	disk_status@pdrv,w,c
 11165  00558C  B4D8               	btfsc	status,2,c
 11166  00558E  D002               	goto	l4718
 11167  005590  0E01               	movlw	1
 11168  005592  0012               	return	
 11169  005594                     l4718:
 11170                           
 11171                           ;diskio.c: 361:  return Stat;
 11172  005594  0100               	movlb	0	; () banked
 11173  005596  51F7               	movf	_Stat& (0+255),w,b
 11174  005598  0012               	return		;funcret
 11175  00559A                     __end_of_disk_status:
 11176                           	opt callstack 0
 11177                           
 11178 ;; *************** function _sync_fs *****************
 11179 ;; Defined at:
 11180 ;;		line 760 in file "ff.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  fs              2   57[COMRAM] PTR struct .
 11183 ;;		 -> NULL(0), FatFs(558), 
 11184 ;; Auto vars:     Size  Location     Type
 11185 ;;  res             1   67[COMRAM] enum E93
 11186 ;; Return value:  Size  Location     Type
 11187 ;;                  1    wreg      enum E93
 11188 ;; Registers used:
 11189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11190 ;; Tracked objects:
 11191 ;;		On entry : 0/0
 11192 ;;		On exit  : 0/0
 11193 ;;		Unchanged: 0/0
 11194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11195 ;;      Params:         2       0       0       0       0       0       0       0       0
 11196 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11197 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11198 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11199 ;;Total ram usage:       11 bytes
 11200 ;; Hardware stack levels used:    1
 11201 ;; Hardware stack levels required when called:    7
 11202 ;; This function calls:
 11203 ;;		_disk_ioctl
 11204 ;;		_disk_write
 11205 ;;		_mem_set
 11206 ;;		_sync_window
 11207 ;; This function is called by:
 11208 ;;		_f_sync
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           	psect	text32
 11213  003D7C                     __ptext32:
 11214                           	opt callstack 0
 11215  003D7C                     _sync_fs:
 11216                           	opt callstack 21
 11217                           
 11218                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11219                           
 11220                           ;incstack = 0
 11221  003D7C  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11222  003D80  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11223  003D84  EC9E  F01F         	call	_sync_window	;wreg free
 11224  003D88  6E44               	movwf	sync_fs@res,c
 11225                           
 11226                           ;ff.c: 768:  if (res == FR_OK) {
 11227  003D8A  5044               	movf	sync_fs@res,w,c
 11228  003D8C  A4D8               	btfss	status,2,c
 11229  003D8E  D0D4               	goto	l345
 11230                           
 11231                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11232  003D90  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11233  003D94  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11234  003D98  0E03               	movlw	3
 11235  003D9A  18DE               	xorwf	postinc2,w,c
 11236  003D9C  A4D8               	btfss	status,2,c
 11237  003D9E  D0B8               	goto	l5184
 11238  003DA0  EE20 F005          	lfsr	2,5
 11239  003DA4  503A               	movf	sync_fs@fs,w,c
 11240  003DA6  26D9               	addwf	fsr2l,f,c
 11241  003DA8  503B               	movf	sync_fs@fs+1,w,c
 11242  003DAA  22DA               	addwfc	fsr2h,f,c
 11243  003DAC  04DE               	decf	postinc2,w,c
 11244  003DAE  A4D8               	btfss	status,2,c
 11245  003DB0  D0AF               	goto	l5184
 11246                           
 11247                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11248  003DB2  0E2E               	movlw	46
 11249  003DB4  243A               	addwf	sync_fs@fs,w,c
 11250  003DB6  6E01               	movwf	mem_set@dst,c
 11251  003DB8  0E00               	movlw	0
 11252  003DBA  203B               	addwfc	sync_fs@fs+1,w,c
 11253  003DBC  6E02               	movwf	mem_set@dst+1,c
 11254  003DBE  0E00               	movlw	0
 11255  003DC0  6E04               	movwf	mem_set@val+1,c
 11256  003DC2  0E00               	movlw	0
 11257  003DC4  6E03               	movwf	mem_set@val,c
 11258  003DC6  0E02               	movlw	2
 11259  003DC8  6E06               	movwf	mem_set@cnt+1,c
 11260  003DCA  0E00               	movlw	0
 11261  003DCC  6E05               	movwf	mem_set@cnt,c
 11262  003DCE  EC77  F02A         	call	_mem_set	;wreg free
 11263                           
 11264                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11265  003DD2  EE22 F02C          	lfsr	2,556
 11266  003DD6  503A               	movf	sync_fs@fs,w,c
 11267  003DD8  26D9               	addwf	fsr2l,f,c
 11268  003DDA  503B               	movf	sync_fs@fs+1,w,c
 11269  003DDC  22DA               	addwfc	fsr2h,f,c
 11270  003DDE  0E55               	movlw	85
 11271  003DE0  6EDE               	movwf	postinc2,c
 11272  003DE2  0EAA               	movlw	170
 11273  003DE4  6EDD               	movwf	postdec2,c
 11274                           
 11275                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11276  003DE6  EE20 F02E          	lfsr	2,46
 11277  003DEA  503A               	movf	sync_fs@fs,w,c
 11278  003DEC  26D9               	addwf	fsr2l,f,c
 11279  003DEE  503B               	movf	sync_fs@fs+1,w,c
 11280  003DF0  22DA               	addwfc	fsr2h,f,c
 11281  003DF2  0E52               	movlw	82
 11282  003DF4  6EDE               	movwf	postinc2,c
 11283  003DF6  0E52               	movlw	82
 11284  003DF8  6EDE               	movwf	postinc2,c
 11285  003DFA  0E61               	movlw	97
 11286  003DFC  6EDE               	movwf	postinc2,c
 11287  003DFE  0E41               	movlw	65
 11288  003E00  6EDD               	movwf	postdec2,c
 11289                           
 11290                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11291  003E02  EE22 F012          	lfsr	2,530
 11292  003E06  503A               	movf	sync_fs@fs,w,c
 11293  003E08  26D9               	addwf	fsr2l,f,c
 11294  003E0A  503B               	movf	sync_fs@fs+1,w,c
 11295  003E0C  22DA               	addwfc	fsr2h,f,c
 11296  003E0E  0E72               	movlw	114
 11297  003E10  6EDE               	movwf	postinc2,c
 11298  003E12  0E72               	movlw	114
 11299  003E14  6EDE               	movwf	postinc2,c
 11300  003E16  0E41               	movlw	65
 11301  003E18  6EDE               	movwf	postinc2,c
 11302  003E1A  0E61               	movlw	97
 11303  003E1C  6EDD               	movwf	postdec2,c
 11304                           
 11305                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11306  003E1E  EE20 F00E          	lfsr	2,14
 11307  003E22  503A               	movf	sync_fs@fs,w,c
 11308  003E24  26D9               	addwf	fsr2l,f,c
 11309  003E26  503B               	movf	sync_fs@fs+1,w,c
 11310  003E28  22DA               	addwfc	fsr2h,f,c
 11311  003E2A  EE12 F016          	lfsr	1,534
 11312  003E2E  503A               	movf	sync_fs@fs,w,c
 11313  003E30  26E1               	addwf	fsr1l,f,c
 11314  003E32  503B               	movf	sync_fs@fs+1,w,c
 11315  003E34  22E2               	addwfc	fsr1h,f,c
 11316  003E36  CFDE FFE6          	movff	postinc2,postinc1
 11317  003E3A  CFDE FFE6          	movff	postinc2,postinc1
 11318  003E3E  CFDE FFE6          	movff	postinc2,postinc1
 11319  003E42  CFDE FFE6          	movff	postinc2,postinc1
 11320                           
 11321                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11322  003E46  EE20 F00A          	lfsr	2,10
 11323  003E4A  503A               	movf	sync_fs@fs,w,c
 11324  003E4C  26D9               	addwf	fsr2l,f,c
 11325  003E4E  503B               	movf	sync_fs@fs+1,w,c
 11326  003E50  22DA               	addwfc	fsr2h,f,c
 11327  003E52  EE12 F01A          	lfsr	1,538
 11328  003E56  503A               	movf	sync_fs@fs,w,c
 11329  003E58  26E1               	addwf	fsr1l,f,c
 11330  003E5A  503B               	movf	sync_fs@fs+1,w,c
 11331  003E5C  22E2               	addwfc	fsr1h,f,c
 11332  003E5E  CFDE FFE6          	movff	postinc2,postinc1
 11333  003E62  CFDE FFE6          	movff	postinc2,postinc1
 11334  003E66  CFDE FFE6          	movff	postinc2,postinc1
 11335  003E6A  CFDE FFE6          	movff	postinc2,postinc1
 11336                           
 11337                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11338  003E6E  EE20 F01A          	lfsr	2,26
 11339  003E72  503A               	movf	sync_fs@fs,w,c
 11340  003E74  26D9               	addwf	fsr2l,f,c
 11341  003E76  503B               	movf	sync_fs@fs+1,w,c
 11342  003E78  22DA               	addwfc	fsr2h,f,c
 11343  003E7A  CFDE F03C          	movff	postinc2,??_sync_fs
 11344  003E7E  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11345  003E82  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11346  003E86  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11347  003E8A  0E01               	movlw	1
 11348  003E8C  243C               	addwf	??_sync_fs,w,c
 11349  003E8E  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11350  003E90  0E00               	movlw	0
 11351  003E92  203D               	addwfc	??_sync_fs+1,w,c
 11352  003E94  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11353  003E96  0E00               	movlw	0
 11354  003E98  203E               	addwfc	??_sync_fs+2,w,c
 11355  003E9A  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11356  003E9C  0E00               	movlw	0
 11357  003E9E  203F               	addwfc	??_sync_fs+3,w,c
 11358  003EA0  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11359  003EA2  EE20 F02A          	lfsr	2,42
 11360  003EA6  503A               	movf	sync_fs@fs,w,c
 11361  003EA8  26D9               	addwf	fsr2l,f,c
 11362  003EAA  503B               	movf	sync_fs@fs+1,w,c
 11363  003EAC  22DA               	addwfc	fsr2h,f,c
 11364  003EAE  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11365  003EB2  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11366  003EB6  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11367  003EBA  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11368                           
 11369                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11370  003EBE  0E2E               	movlw	46
 11371  003EC0  243A               	addwf	sync_fs@fs,w,c
 11372  003EC2  6E11               	movwf	disk_write@buff,c
 11373  003EC4  0E00               	movlw	0
 11374  003EC6  203B               	addwfc	sync_fs@fs+1,w,c
 11375  003EC8  6E12               	movwf	disk_write@buff+1,c
 11376  003ECA  EE20 F02A          	lfsr	2,42
 11377  003ECE  503A               	movf	sync_fs@fs,w,c
 11378  003ED0  26D9               	addwf	fsr2l,f,c
 11379  003ED2  503B               	movf	sync_fs@fs+1,w,c
 11380  003ED4  22DA               	addwfc	fsr2h,f,c
 11381  003ED6  CFDE F013          	movff	postinc2,disk_write@sector
 11382  003EDA  CFDE F014          	movff	postinc2,disk_write@sector+1
 11383  003EDE  CFDE F015          	movff	postinc2,disk_write@sector+2
 11384  003EE2  CFDE F016          	movff	postinc2,disk_write@sector+3
 11385  003EE6  0E00               	movlw	0
 11386  003EE8  6E18               	movwf	disk_write@count+1,c
 11387  003EEA  0E01               	movlw	1
 11388  003EEC  6E17               	movwf	disk_write@count,c
 11389  003EEE  EE20 F001          	lfsr	2,1
 11390  003EF2  503A               	movf	sync_fs@fs,w,c
 11391  003EF4  26D9               	addwf	fsr2l,f,c
 11392  003EF6  503B               	movf	sync_fs@fs+1,w,c
 11393  003EF8  22DA               	addwfc	fsr2h,f,c
 11394  003EFA  50DF               	movf	indf2,w,c
 11395  003EFC  ECCD  F022         	call	_disk_write
 11396                           
 11397                           ;ff.c: 781:    fs->fsi_flag = 0;
 11398  003F00  EE20 F005          	lfsr	2,5
 11399  003F04  503A               	movf	sync_fs@fs,w,c
 11400  003F06  26D9               	addwf	fsr2l,f,c
 11401  003F08  503B               	movf	sync_fs@fs+1,w,c
 11402  003F0A  22DA               	addwfc	fsr2h,f,c
 11403  003F0C  0E00               	movlw	0
 11404  003F0E  6EDF               	movwf	indf2,c
 11405  003F10                     l5184:
 11406                           
 11407                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11408  003F10  0E00               	movlw	0
 11409  003F12  6E11               	movwf	disk_ioctl@cmd,c
 11410  003F14  0E00               	movlw	0
 11411  003F16  6E12               	movwf	disk_ioctl@buff,c
 11412  003F18  0E00               	movlw	0
 11413  003F1A  6E13               	movwf	disk_ioctl@buff+1,c
 11414  003F1C  EE20 F001          	lfsr	2,1
 11415  003F20  503A               	movf	sync_fs@fs,w,c
 11416  003F22  26D9               	addwf	fsr2l,f,c
 11417  003F24  503B               	movf	sync_fs@fs+1,w,c
 11418  003F26  22DA               	addwfc	fsr2h,f,c
 11419  003F28  50DF               	movf	indf2,w,c
 11420  003F2A  ECA6  F00F         	call	_disk_ioctl
 11421  003F2E  0900               	iorlw	0
 11422  003F30  B4D8               	btfsc	status,2,c
 11423  003F32  D002               	goto	l345
 11424                           
 11425                           ;ff.c: 785:    res = FR_DISK_ERR;
 11426  003F34  0E01               	movlw	1
 11427  003F36  6E44               	movwf	sync_fs@res,c
 11428  003F38                     l345:
 11429                           
 11430                           ;ff.c: 788:  return res;
 11431  003F38  5044               	movf	sync_fs@res,w,c
 11432  003F3A  0012               	return		;funcret
 11433  003F3C                     __end_of_sync_fs:
 11434                           	opt callstack 0
 11435                           
 11436 ;; *************** function _mem_set *****************
 11437 ;; Defined at:
 11438 ;;		line 524 in file "ff.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;  dst             2    0[COMRAM] PTR void 
 11441 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11442 ;;  val             2    2[COMRAM] int 
 11443 ;;  cnt             2    4[COMRAM] unsigned short 
 11444 ;; Auto vars:     Size  Location     Type
 11445 ;;  d               2    6[COMRAM] PTR unsigned char 
 11446 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11447 ;; Return value:  Size  Location     Type
 11448 ;;                  1    wreg      void 
 11449 ;; Registers used:
 11450 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11451 ;; Tracked objects:
 11452 ;;		On entry : 0/0
 11453 ;;		On exit  : 0/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11456 ;;      Params:         6       0       0       0       0       0       0       0       0
 11457 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11458 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11459 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11460 ;;Total ram usage:        8 bytes
 11461 ;; Hardware stack levels used:    1
 11462 ;; This function calls:
 11463 ;;		Nothing
 11464 ;; This function is called by:
 11465 ;;		_sync_fs
 11466 ;;		_dir_next
 11467 ;;		_dir_register
 11468 ;;		_create_name
 11469 ;; This function uses a non-reentrant model
 11470 ;;
 11471                           
 11472                           	psect	text33
 11473  0054EE                     __ptext33:
 11474                           	opt callstack 0
 11475  0054EE                     _mem_set:
 11476                           	opt callstack 26
 11477                           
 11478                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11479                           
 11480                           ;incstack = 0
 11481  0054EE  C001  F007         	movff	mem_set@dst,mem_set@d
 11482  0054F2  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11483                           
 11484                           ;ff.c: 527:  while (cnt--)
 11485  0054F6  D008               	goto	l4616
 11486  0054F8                     l4612:
 11487                           
 11488                           ;ff.c: 528:   *d++ = (BYTE)val;
 11489  0054F8  C007  FFD9         	movff	mem_set@d,fsr2l
 11490  0054FC  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11491  005500  C003  FFDF         	movff	mem_set@val,indf2
 11492  005504  4A07               	infsnz	mem_set@d,f,c
 11493  005506  2A08               	incf	mem_set@d+1,f,c
 11494  005508                     l4616:
 11495                           
 11496                           ;ff.c: 527:  while (cnt--)
 11497  005508  0605               	decf	mem_set@cnt,f,c
 11498  00550A  A0D8               	btfss	status,0,c
 11499  00550C  0606               	decf	mem_set@cnt+1,f,c
 11500  00550E  2805               	incf	mem_set@cnt,w,c
 11501  005510  E1F3               	bnz	l4612
 11502  005512  2806               	incf	mem_set@cnt+1,w,c
 11503  005514  B4D8               	btfsc	status,2,c
 11504  005516  0012               	return	
 11505  005518  D7EF               	goto	l4612
 11506  00551A                     __end_of_mem_set:
 11507                           	opt callstack 0
 11508                           
 11509 ;; *************** function _disk_ioctl *****************
 11510 ;; Defined at:
 11511 ;;		line 446 in file "diskio.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;  pdrv            1    wreg     unsigned char 
 11514 ;;  cmd             1   16[COMRAM] unsigned char 
 11515 ;;  buff            2   17[COMRAM] PTR void 
 11516 ;;		 -> NULL(0), 
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;  pdrv            1   48[COMRAM] unsigned char 
 11519 ;;  csd            16   32[COMRAM] unsigned char [16]
 11520 ;;  csize           4   49[COMRAM] unsigned long 
 11521 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11522 ;;		 -> NULL(0), 
 11523 ;;  n               1   54[COMRAM] unsigned char 
 11524 ;;  res             1   53[COMRAM] enum E43
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  1    wreg      enum E43
 11527 ;; Registers used:
 11528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11534 ;;      Params:         3       0       0       0       0       0       0       0       0
 11535 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11536 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11537 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11538 ;;Total ram usage:       41 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:    5
 11541 ;; This function calls:
 11542 ;;		_SPI1_Exchange8bit
 11543 ;;		___wmul
 11544 ;;		_deselect
 11545 ;;		_rcvr_datablock
 11546 ;;		_select
 11547 ;;		_send_cmd
 11548 ;; This function is called by:
 11549 ;;		_sync_fs
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text34
 11554  001F4C                     __ptext34:
 11555                           	opt callstack 0
 11556  001F4C                     _disk_ioctl:
 11557                           	opt callstack 22
 11558                           
 11559                           ;incstack = 0
 11560                           ;disk_ioctl@pdrv stored from wreg
 11561  001F4C  6E31               	movwf	disk_ioctl@pdrv,c
 11562                           
 11563                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11564  001F4E  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11565  001F52  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11566                           
 11567                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11568  001F56  5031               	movf	disk_ioctl@pdrv,w,c
 11569  001F58  B4D8               	btfsc	status,2,c
 11570  001F5A  D002               	goto	l4730
 11571  001F5C  0E04               	movlw	4
 11572  001F5E  0012               	return	
 11573  001F60                     l4730:
 11574                           
 11575                           ;diskio.c: 459:  res = RES_ERROR;
 11576  001F60  0E01               	movlw	1
 11577  001F62  6E36               	movwf	disk_ioctl@res,c
 11578                           
 11579                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11580  001F64  0100               	movlb	0	; () banked
 11581  001F66  A1F7               	btfss	_Stat& (0+255),0,b
 11582  001F68  D21B               	goto	l4830
 11583                           
 11584                           ; BSR set to: 0
 11585  001F6A  0E03               	movlw	3
 11586  001F6C  0012               	return	
 11587  001F6E                     l4738:
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11591  001F6E  ECB5  F02A         	call	_select	;wreg free
 11592  001F72  0900               	iorlw	0
 11593  001F74  B4D8               	btfsc	status,2,c
 11594  001F76  D235               	goto	l4832
 11595  001F78                     u5620:
 11596  001F78  0E00               	movlw	0
 11597  001F7A  D210               	goto	L13
 11598  001F7C                     l4742:
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11602  001F7C  0E00               	movlw	0
 11603  001F7E  6E0B               	movwf	send_cmd@arg,c
 11604  001F80  0E00               	movlw	0
 11605  001F82  6E0C               	movwf	send_cmd@arg+1,c
 11606  001F84  0E00               	movlw	0
 11607  001F86  6E0D               	movwf	send_cmd@arg+2,c
 11608  001F88  0E00               	movlw	0
 11609  001F8A  6E0E               	movwf	send_cmd@arg+3,c
 11610  001F8C  0E09               	movlw	9
 11611  001F8E  ECC5  F029         	call	_send_cmd
 11612  001F92  0900               	iorlw	0
 11613  001F94  A4D8               	btfss	status,2,c
 11614  001F96  D225               	goto	l4832
 11615  001F98  0E21               	movlw	low disk_ioctl@csd
 11616  001F9A  6E02               	movwf	rcvr_datablock@buff,c
 11617  001F9C  0E00               	movlw	high disk_ioctl@csd
 11618  001F9E  6E03               	movwf	rcvr_datablock@buff+1,c
 11619  001FA0  0E00               	movlw	0
 11620  001FA2  6E05               	movwf	rcvr_datablock@btr+1,c
 11621  001FA4  0E10               	movlw	16
 11622  001FA6  6E04               	movwf	rcvr_datablock@btr,c
 11623  001FA8  EC0D  F029         	call	_rcvr_datablock	;wreg free
 11624  001FAC  0900               	iorlw	0
 11625  001FAE  B4D8               	btfsc	status,2,c
 11626  001FB0  D218               	goto	l4832
 11627                           
 11628                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11629  001FB2  4421               	rlncf	disk_ioctl@csd,w,c
 11630  001FB4  46E8               	rlncf	wreg,f,c
 11631  001FB6  0B03               	andlw	3
 11632  001FB8  06E8               	decf	wreg,f,c
 11633  001FBA  A4D8               	btfss	status,2,c
 11634  001FBC  D04E               	goto	l4752
 11635                           
 11636                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11637  001FBE  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11638  001FC2  0E3F               	movlw	63
 11639  001FC4  1614               	andwf	??_disk_ioctl,f,c
 11640  001FC6  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11641  001FCA  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11642  001FCC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11643  001FCE  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11644  001FD0  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11645  001FD4  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11646  001FD8  6A16               	clrf	??_disk_ioctl+2,c
 11647  001FDA  6A15               	clrf	??_disk_ioctl+1,c
 11648  001FDC  5029               	movf	disk_ioctl@csd+8,w,c
 11649  001FDE  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11650  001FE0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11651  001FE2  502A               	movf	disk_ioctl@csd+9,w,c
 11652  001FE4  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11653  001FE6  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11654  001FE8  5019               	movf	??_disk_ioctl+5,w,c
 11655  001FEA  261B               	addwf	??_disk_ioctl+7,f,c
 11656  001FEC  501A               	movf	??_disk_ioctl+6,w,c
 11657  001FEE  221C               	addwfc	??_disk_ioctl+8,f,c
 11658  001FF0  501B               	movf	??_disk_ioctl+7,w,c
 11659  001FF2  2415               	addwf	??_disk_ioctl+1,w,c
 11660  001FF4  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11661  001FF6  501C               	movf	??_disk_ioctl+8,w,c
 11662  001FF8  2016               	addwfc	??_disk_ioctl+2,w,c
 11663  001FFA  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11664  001FFC  0E00               	movlw	0
 11665  001FFE  2017               	addwfc	??_disk_ioctl+3,w,c
 11666  002000  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11667  002002  0E00               	movlw	0
 11668  002004  2018               	addwfc	??_disk_ioctl+4,w,c
 11669  002006  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11670  002008  0E01               	movlw	1
 11671  00200A  241D               	addwf	??_disk_ioctl+9,w,c
 11672  00200C  6E32               	movwf	disk_ioctl@csize,c
 11673  00200E  0E00               	movlw	0
 11674  002010  201E               	addwfc	??_disk_ioctl+10,w,c
 11675  002012  6E33               	movwf	disk_ioctl@csize+1,c
 11676  002014  0E00               	movlw	0
 11677  002016  201F               	addwfc	??_disk_ioctl+11,w,c
 11678  002018  6E34               	movwf	disk_ioctl@csize+2,c
 11679  00201A  0E00               	movlw	0
 11680  00201C  2020               	addwfc	??_disk_ioctl+12,w,c
 11681  00201E  6E35               	movwf	disk_ioctl@csize+3,c
 11682                           
 11683                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11684  002020  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11685  002024  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11686  002028  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11687  00202C  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11688  002030  0E0A               	movlw	10
 11689  002032                     u5665:
 11690  002032  90D8               	bcf	status,0,c
 11691  002034  3614               	rlcf	??_disk_ioctl,f,c
 11692  002036  3615               	rlcf	??_disk_ioctl+1,f,c
 11693  002038  3616               	rlcf	??_disk_ioctl+2,f,c
 11694  00203A  3617               	rlcf	??_disk_ioctl+3,f,c
 11695  00203C  2EE8               	decfsz	wreg,f,c
 11696  00203E  D7F9               	goto	u5665
 11697  002040  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11698  002044  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11699  002048  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11700  00204C  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11701  002050  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11702  002054  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11703                           
 11704                           ;diskio.c: 473:    } else {
 11705  002058  D78F               	goto	u5620
 11706  00205A                     l4752:
 11707                           
 11708                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11709  00205A  6A14               	clrf	??_disk_ioctl& (0+255),c
 11710  00205C  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11711  00205E  D001               	bra	u5675
 11712  002060  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11713  002062                     u5675:
 11714  002062  0E01               	movlw	1
 11715  002064  1614               	andwf	??_disk_ioctl,f,c
 11716  002066  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11717  00206A  0E0F               	movlw	15
 11718  00206C  1615               	andwf	??_disk_ioctl+1,f,c
 11719  00206E  502A               	movf	disk_ioctl@csd+9,w,c
 11720  002070  0B03               	andlw	3
 11721  002072  0D02               	mullw	2
 11722  002074  50F3               	movf	prodl,w,c
 11723  002076  2415               	addwf	??_disk_ioctl+1,w,c
 11724  002078  2414               	addwf	??_disk_ioctl,w,c
 11725  00207A  0F02               	addlw	2
 11726  00207C  6E37               	movwf	disk_ioctl@n,c
 11727                           
 11728                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11729  00207E  5027               	movf	disk_ioctl@csd+6,w,c
 11730  002080  0B03               	andlw	3
 11731  002082  6E14               	movwf	??_disk_ioctl& (0+255),c
 11732  002084  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 11733  002086  0E0A               	movlw	10
 11734  002088                     u5685:
 11735  002088  90D8               	bcf	status,0,c
 11736  00208A  3614               	rlcf	??_disk_ioctl,f,c
 11737  00208C  3615               	rlcf	??_disk_ioctl+1,f,c
 11738  00208E  2EE8               	decfsz	wreg,f,c
 11739  002090  D7FB               	goto	u5685
 11740  002092  5028               	movf	disk_ioctl@csd+7,w,c
 11741  002094  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11742  002096  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11743  002098  90D8               	bcf	status,0,c
 11744  00209A  3616               	rlcf	??_disk_ioctl+2,f,c
 11745  00209C  3617               	rlcf	??_disk_ioctl+3,f,c
 11746  00209E  90D8               	bcf	status,0,c
 11747  0020A0  3616               	rlcf	??_disk_ioctl+2,f,c
 11748  0020A2  3617               	rlcf	??_disk_ioctl+3,f,c
 11749  0020A4  4429               	rlncf	disk_ioctl@csd+8,w,c
 11750  0020A6  46E8               	rlncf	wreg,f,c
 11751  0020A8  0B03               	andlw	3
 11752  0020AA  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11753  0020AC  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11754  0020AE  5016               	movf	??_disk_ioctl+2,w,c
 11755  0020B0  2618               	addwf	??_disk_ioctl+4,f,c
 11756  0020B2  5017               	movf	??_disk_ioctl+3,w,c
 11757  0020B4  2219               	addwfc	??_disk_ioctl+5,f,c
 11758  0020B6  5014               	movf	??_disk_ioctl,w,c
 11759  0020B8  2618               	addwf	??_disk_ioctl+4,f,c
 11760  0020BA  5015               	movf	??_disk_ioctl+1,w,c
 11761  0020BC  2219               	addwfc	??_disk_ioctl+5,f,c
 11762  0020BE  0E01               	movlw	1
 11763  0020C0  2618               	addwf	??_disk_ioctl+4,f,c
 11764  0020C2  0E00               	movlw	0
 11765  0020C4  2219               	addwfc	??_disk_ioctl+5,f,c
 11766  0020C6  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 11767  0020CA  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 11768  0020CE  6A34               	clrf	disk_ioctl@csize+2,c
 11769  0020D0  6A35               	clrf	disk_ioctl@csize+3,c
 11770                           
 11771                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 11772  0020D2  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11773  0020D6  0EF7               	movlw	-9
 11774  0020D8  2614               	addwf	??_disk_ioctl,f,c
 11775  0020DA  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11776  0020DE  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11777  0020E2  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11778  0020E6  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 11779  0020EA  2A14               	incf	??_disk_ioctl,f,c
 11780  0020EC  D005               	goto	u5690
 11781  0020EE                     u5695:
 11782  0020EE  90D8               	bcf	status,0,c
 11783  0020F0  3615               	rlcf	??_disk_ioctl+1,f,c
 11784  0020F2  3616               	rlcf	??_disk_ioctl+2,f,c
 11785  0020F4  3617               	rlcf	??_disk_ioctl+3,f,c
 11786  0020F6  3618               	rlcf	??_disk_ioctl+4,f,c
 11787  0020F8                     u5690:
 11788  0020F8  2E14               	decfsz	??_disk_ioctl,f,c
 11789  0020FA  D7F9               	goto	u5695
 11790  0020FC  D03D               	goto	L15
 11791  0020FE                     l258:
 11792                           
 11793                           ; BSR set to: 0
 11794                           ;diskio.c: 483:   if (CardType & 0x04) {
 11795  0020FE  A5D6               	btfss	_CardType& (0+255),2,b
 11796  002100  D048               	goto	l4778
 11797                           
 11798                           ; BSR set to: 0
 11799                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 11800  002102  0E00               	movlw	0
 11801  002104  6E0B               	movwf	send_cmd@arg,c
 11802  002106  0E00               	movlw	0
 11803  002108  6E0C               	movwf	send_cmd@arg+1,c
 11804  00210A  0E00               	movlw	0
 11805  00210C  6E0D               	movwf	send_cmd@arg+2,c
 11806  00210E  0E00               	movlw	0
 11807  002110  6E0E               	movwf	send_cmd@arg+3,c
 11808  002112  0E8D               	movlw	141
 11809  002114  ECC5  F029         	call	_send_cmd
 11810  002118  0900               	iorlw	0
 11811  00211A  A4D8               	btfss	status,2,c
 11812  00211C  D162               	goto	l4832
 11813                           
 11814                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 11815  00211E  0EFF               	movlw	255
 11816  002120  ECD6  F02A         	call	_SPI1_Exchange8bit
 11817                           
 11818                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 11819  002124  0E21               	movlw	low disk_ioctl@csd
 11820  002126  6E02               	movwf	rcvr_datablock@buff,c
 11821  002128  0E00               	movlw	high disk_ioctl@csd
 11822  00212A  6E03               	movwf	rcvr_datablock@buff+1,c
 11823  00212C  0E00               	movlw	0
 11824  00212E  6E05               	movwf	rcvr_datablock@btr+1,c
 11825  002130  0E10               	movlw	16
 11826  002132  6E04               	movwf	rcvr_datablock@btr,c
 11827  002134  EC0D  F029         	call	_rcvr_datablock	;wreg free
 11828  002138  0900               	iorlw	0
 11829  00213A  B4D8               	btfsc	status,2,c
 11830  00213C  D152               	goto	l4832
 11831                           
 11832                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 11833  00213E  0E30               	movlw	48
 11834  002140  6E37               	movwf	disk_ioctl@n,c
 11835  002142  D004               	goto	l4772
 11836  002144                     l4768:
 11837  002144  0EFF               	movlw	255
 11838  002146  ECD6  F02A         	call	_SPI1_Exchange8bit
 11839  00214A  0637               	decf	disk_ioctl@n,f,c
 11840  00214C                     l4772:
 11841  00214C  5037               	movf	disk_ioctl@n,w,c
 11842  00214E  A4D8               	btfss	status,2,c
 11843  002150  D7F9               	goto	l4768
 11844                           
 11845                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 11846  002152  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 11847  002156  3A14               	swapf	??_disk_ioctl,f,c
 11848  002158  0E0F               	movlw	15
 11849  00215A  1614               	andwf	??_disk_ioctl,f,c
 11850  00215C  0E10               	movlw	16
 11851  00215E  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11852  002160  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11853  002162  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11854  002164  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11855  002166  2A14               	incf	??_disk_ioctl,f,c
 11856  002168  D005               	goto	u5740
 11857  00216A                     u5745:
 11858  00216A  90D8               	bcf	status,0,c
 11859  00216C  3615               	rlcf	??_disk_ioctl+1,f,c
 11860  00216E  3616               	rlcf	??_disk_ioctl+2,f,c
 11861  002170  3617               	rlcf	??_disk_ioctl+3,f,c
 11862  002172  3618               	rlcf	??_disk_ioctl+4,f,c
 11863  002174                     u5740:
 11864  002174  2E14               	decfsz	??_disk_ioctl,f,c
 11865  002176  D7F9               	goto	u5745
 11866  002178                     L15:
 11867  002178  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11868  00217C  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11869  002180  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11870  002184  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11871  002188  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11872  00218C  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 11873  002190  D6F3               	goto	u5620
 11874  002192                     l4778:
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11878  002192  0E00               	movlw	0
 11879  002194  6E0B               	movwf	send_cmd@arg,c
 11880  002196  0E00               	movlw	0
 11881  002198  6E0C               	movwf	send_cmd@arg+1,c
 11882  00219A  0E00               	movlw	0
 11883  00219C  6E0D               	movwf	send_cmd@arg+2,c
 11884  00219E  0E00               	movlw	0
 11885  0021A0  6E0E               	movwf	send_cmd@arg+3,c
 11886  0021A2  0E09               	movlw	9
 11887  0021A4  ECC5  F029         	call	_send_cmd
 11888  0021A8  0900               	iorlw	0
 11889  0021AA  A4D8               	btfss	status,2,c
 11890  0021AC  D11A               	goto	l4832
 11891  0021AE  0E21               	movlw	low disk_ioctl@csd
 11892  0021B0  6E02               	movwf	rcvr_datablock@buff,c
 11893  0021B2  0E00               	movlw	high disk_ioctl@csd
 11894  0021B4  6E03               	movwf	rcvr_datablock@buff+1,c
 11895  0021B6  0E00               	movlw	0
 11896  0021B8  6E05               	movwf	rcvr_datablock@btr+1,c
 11897  0021BA  0E10               	movlw	16
 11898  0021BC  6E04               	movwf	rcvr_datablock@btr,c
 11899  0021BE  EC0D  F029         	call	_rcvr_datablock	;wreg free
 11900  0021C2  0900               	iorlw	0
 11901  0021C4  B4D8               	btfsc	status,2,c
 11902  0021C6  D10D               	goto	l4832
 11903                           
 11904                           ;diskio.c: 494:     if (CardType & 0x02) {
 11905  0021C8  0100               	movlb	0	; () banked
 11906  0021CA  A3D6               	btfss	_CardType& (0+255),1,b
 11907  0021CC  D02A               	goto	l4786
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 11911  0021CE  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 11912  0021D2  0E06               	movlw	6
 11913  0021D4  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11914  0021D6                     u5785:
 11915  0021D6  90D8               	bcf	status,0,c
 11916  0021D8  3214               	rrcf	??_disk_ioctl,f,c
 11917  0021DA  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 11918  0021DC  D7FC               	goto	u5785
 11919  0021DE  0EFF               	movlw	-1
 11920  0021E0  2614               	addwf	??_disk_ioctl,f,c
 11921  0021E2  502B               	movf	disk_ioctl@csd+10,w,c
 11922  0021E4  0B3F               	andlw	63
 11923  0021E6  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11924  0021E8  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11925  0021EA  90D8               	bcf	status,0,c
 11926  0021EC  3616               	rlcf	??_disk_ioctl+2,f,c
 11927  0021EE  3617               	rlcf	??_disk_ioctl+3,f,c
 11928  0021F0  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11929  0021F2  AE2C               	btfss	disk_ioctl@csd+11,7,c
 11930  0021F4  D001               	bra	u5795
 11931  0021F6  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 11932  0021F8                     u5795:
 11933  0021F8  0E01               	movlw	1
 11934  0021FA  1618               	andwf	??_disk_ioctl+4,f,c
 11935  0021FC  5018               	movf	??_disk_ioctl+4,w,c
 11936  0021FE  2616               	addwf	??_disk_ioctl+2,f,c
 11937  002200  0E00               	movlw	0
 11938  002202  2217               	addwfc	??_disk_ioctl+3,f,c
 11939  002204  0E01               	movlw	1
 11940  002206  2616               	addwf	??_disk_ioctl+2,f,c
 11941  002208  0E00               	movlw	0
 11942  00220A  2217               	addwfc	??_disk_ioctl+3,f,c
 11943  00220C  2A14               	incf	??_disk_ioctl,f,c
 11944  00220E  D003               	goto	u5804
 11945  002210                     u5805:
 11946  002210  90D8               	bcf	status,0,c
 11947  002212  3616               	rlcf	??_disk_ioctl+2,f,c
 11948  002214  3617               	rlcf	??_disk_ioctl+3,f,c
 11949  002216                     u5804:
 11950  002216  2E14               	decfsz	??_disk_ioctl,f,c
 11951  002218  D7FB               	goto	u5805
 11952  00221A  5016               	movf	??_disk_ioctl+2,w,c
 11953  00221C  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 11954  00221E  5017               	movf	??_disk_ioctl+3,w,c
 11955  002220  D034               	goto	L16
 11956  002222                     l4786:
 11957                           
 11958                           ; BSR set to: 0
 11959                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 11960  002222  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 11961  002226  90D8               	bcf	status,0,c
 11962  002228  3214               	rrcf	??_disk_ioctl,f,c
 11963  00222A  90D8               	bcf	status,0,c
 11964  00222C  3214               	rrcf	??_disk_ioctl,f,c
 11965  00222E  0E1F               	movlw	31
 11966  002230  1614               	andwf	??_disk_ioctl,f,c
 11967  002232  0E01               	movlw	1
 11968  002234  2414               	addwf	??_disk_ioctl,w,c
 11969  002236  6E01               	movwf	___wmul@multiplier,c
 11970  002238  6A02               	clrf	___wmul@multiplier+1,c
 11971  00223A  0E00               	movlw	0
 11972  00223C  2202               	addwfc	___wmul@multiplier+1,f,c
 11973  00223E  502C               	movf	disk_ioctl@csd+11,w,c
 11974  002240  0B03               	andlw	3
 11975  002242  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11976  002244  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11977  002246  90D8               	bcf	status,0,c
 11978  002248  3615               	rlcf	??_disk_ioctl+1,f,c
 11979  00224A  3616               	rlcf	??_disk_ioctl+2,f,c
 11980  00224C  90D8               	bcf	status,0,c
 11981  00224E  3615               	rlcf	??_disk_ioctl+1,f,c
 11982  002250  3616               	rlcf	??_disk_ioctl+2,f,c
 11983  002252  90D8               	bcf	status,0,c
 11984  002254  3615               	rlcf	??_disk_ioctl+1,f,c
 11985  002256  3616               	rlcf	??_disk_ioctl+2,f,c
 11986  002258  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 11987  00225C  0E05               	movlw	5
 11988  00225E  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11989  002260                     u5815:
 11990  002260  90D8               	bcf	status,0,c
 11991  002262  3217               	rrcf	??_disk_ioctl+3,f,c
 11992  002264  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 11993  002266  D7FC               	goto	u5815
 11994  002268  0E07               	movlw	7
 11995  00226A  1617               	andwf	??_disk_ioctl+3,f,c
 11996  00226C  5017               	movf	??_disk_ioctl+3,w,c
 11997  00226E  2615               	addwf	??_disk_ioctl+1,f,c
 11998  002270  0E00               	movlw	0
 11999  002272  2216               	addwfc	??_disk_ioctl+2,f,c
 12000  002274  0E01               	movlw	1
 12001  002276  2415               	addwf	??_disk_ioctl+1,w,c
 12002  002278  6E03               	movwf	___wmul@multiplicand,c
 12003  00227A  0E00               	movlw	0
 12004  00227C  2016               	addwfc	??_disk_ioctl+2,w,c
 12005  00227E  6E04               	movwf	___wmul@multiplicand+1,c
 12006  002280  ECA2  F02A         	call	___wmul	;wreg free
 12007  002284  5001               	movf	?___wmul,w,c
 12008  002286  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12009  002288  5002               	movf	?___wmul+1,w,c
 12010  00228A                     L16:
 12011  00228A  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12012  00228C  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12013  00228E  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12014  002290  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12015  002294  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12016  002298  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12017  00229C  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12018  0022A0  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12019  0022A4  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12020  0022A8  D667               	goto	u5620
 12021  0022AA                     l4790:
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;diskio.c: 507:   *ptr = CardType;
 12025  0022AA  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12026  0022AE  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12027  0022B2  C0D6  FFDF         	movff	_CardType,indf2
 12028  0022B6  D660               	goto	u5620
 12029  0022B8                     l4794:
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12033  0022B8  0E00               	movlw	0
 12034  0022BA  6E0B               	movwf	send_cmd@arg,c
 12035  0022BC  0E00               	movlw	0
 12036  0022BE  6E0C               	movwf	send_cmd@arg+1,c
 12037  0022C0  0E00               	movlw	0
 12038  0022C2  6E0D               	movwf	send_cmd@arg+2,c
 12039  0022C4  0E00               	movlw	0
 12040  0022C6  6E0E               	movwf	send_cmd@arg+3,c
 12041  0022C8  0E09               	movlw	9
 12042  0022CA  ECC5  F029         	call	_send_cmd
 12043  0022CE  0900               	iorlw	0
 12044  0022D0  A4D8               	btfss	status,2,c
 12045  0022D2  D087               	goto	l4832
 12046  0022D4  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12047  0022D8  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12048  0022DC  0E00               	movlw	0
 12049  0022DE  6E05               	movwf	rcvr_datablock@btr+1,c
 12050  0022E0  0E10               	movlw	16
 12051  0022E2  6E04               	movwf	rcvr_datablock@btr,c
 12052  0022E4  EC0D  F029         	call	_rcvr_datablock	;wreg free
 12053  0022E8                     L14:
 12054  0022E8  0900               	iorlw	0
 12055  0022EA  A4D8               	btfss	status,2,c
 12056  0022EC  D645               	goto	u5620
 12057  0022EE  D079               	goto	l4832
 12058  0022F0                     l4800:
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12062  0022F0  0E00               	movlw	0
 12063  0022F2  6E0B               	movwf	send_cmd@arg,c
 12064  0022F4  0E00               	movlw	0
 12065  0022F6  6E0C               	movwf	send_cmd@arg+1,c
 12066  0022F8  0E00               	movlw	0
 12067  0022FA  6E0D               	movwf	send_cmd@arg+2,c
 12068  0022FC  0E00               	movlw	0
 12069  0022FE  6E0E               	movwf	send_cmd@arg+3,c
 12070  002300  0E0A               	movlw	10
 12071  002302  ECC5  F029         	call	_send_cmd
 12072  002306  0900               	iorlw	0
 12073  002308  A4D8               	btfss	status,2,c
 12074  00230A  D06B               	goto	l4832
 12075  00230C  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12076  002310  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12077  002314  0E00               	movlw	0
 12078  002316  6E05               	movwf	rcvr_datablock@btr+1,c
 12079  002318  0E10               	movlw	16
 12080  00231A  6E04               	movwf	rcvr_datablock@btr,c
 12081  00231C  EC0D  F029         	call	_rcvr_datablock	;wreg free
 12082  002320  D7E3               	goto	L14
 12083  002322                     l4806:
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12087  002322  0E00               	movlw	0
 12088  002324  6E0B               	movwf	send_cmd@arg,c
 12089  002326  0E00               	movlw	0
 12090  002328  6E0C               	movwf	send_cmd@arg+1,c
 12091  00232A  0E00               	movlw	0
 12092  00232C  6E0D               	movwf	send_cmd@arg+2,c
 12093  00232E  0E00               	movlw	0
 12094  002330  6E0E               	movwf	send_cmd@arg+3,c
 12095  002332  0E3A               	movlw	58
 12096  002334  ECC5  F029         	call	_send_cmd
 12097  002338  0900               	iorlw	0
 12098  00233A  A4D8               	btfss	status,2,c
 12099  00233C  D052               	goto	l4832
 12100                           
 12101                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12102  00233E  0E04               	movlw	4
 12103  002340  6E37               	movwf	disk_ioctl@n,c
 12104  002342  D00B               	goto	l4816
 12105  002344                     l4810:
 12106  002344  0EFF               	movlw	255
 12107  002346  ECD6  F02A         	call	_SPI1_Exchange8bit
 12108  00234A  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12109  00234E  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12110  002352  6EDF               	movwf	indf2,c
 12111  002354  4A38               	infsnz	disk_ioctl@ptr,f,c
 12112  002356  2A39               	incf	disk_ioctl@ptr+1,f,c
 12113  002358  0637               	decf	disk_ioctl@n,f,c
 12114  00235A                     l4816:
 12115  00235A  5037               	movf	disk_ioctl@n,w,c
 12116  00235C  B4D8               	btfsc	status,2,c
 12117  00235E  D60C               	goto	u5620
 12118  002360  D7F1               	goto	l4810
 12119  002362                     l4820:
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12123  002362  0E00               	movlw	0
 12124  002364  6E0B               	movwf	send_cmd@arg,c
 12125  002366  0E00               	movlw	0
 12126  002368  6E0C               	movwf	send_cmd@arg+1,c
 12127  00236A  0E00               	movlw	0
 12128  00236C  6E0D               	movwf	send_cmd@arg+2,c
 12129  00236E  0E00               	movlw	0
 12130  002370  6E0E               	movwf	send_cmd@arg+3,c
 12131  002372  0E8D               	movlw	141
 12132  002374  ECC5  F029         	call	_send_cmd
 12133  002378  0900               	iorlw	0
 12134  00237A  A4D8               	btfss	status,2,c
 12135  00237C  D032               	goto	l4832
 12136                           
 12137                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12138  00237E  0EFF               	movlw	255
 12139  002380  ECD6  F02A         	call	_SPI1_Exchange8bit
 12140                           
 12141                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12142  002384  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12143  002388  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12144  00238C  0E00               	movlw	0
 12145  00238E  6E05               	movwf	rcvr_datablock@btr+1,c
 12146  002390  0E40               	movlw	64
 12147  002392  6E04               	movwf	rcvr_datablock@btr,c
 12148  002394  EC0D  F029         	call	_rcvr_datablock	;wreg free
 12149  002398  D7A7               	goto	L14
 12150  00239A                     l4828:
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;diskio.c: 539:   res = RES_PARERR;
 12154  00239A  0E04               	movlw	4
 12155  00239C                     L13:
 12156  00239C  6E36               	movwf	disk_ioctl@res,c
 12157                           
 12158                           ;diskio.c: 540:  }
 12159  00239E  D021               	goto	l4832
 12160  0023A0                     l4830:
 12161                           
 12162                           ; BSR set to: 0
 12163  0023A0  5011               	movf	disk_ioctl@cmd,w,c
 12164  0023A2  6E14               	movwf	??_disk_ioctl& (0+255),c
 12165  0023A4  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12166                           
 12167                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12168                           ; Switch size 1, requested type "simple"
 12169                           ; Number of cases is 1, Range of values is 0 to 0
 12170                           ; switch strategies available:
 12171                           ; Name         Instructions Cycles
 12172                           ; simple_byte            4     3 (average)
 12173                           ;	Chosen strategy is simple_byte
 12174  0023A6  5015               	movf	??_disk_ioctl+1,w,c
 12175  0023A8  0A00               	xorlw	0	; case 0
 12176  0023AA  A4D8               	btfss	status,2,c
 12177  0023AC  D7F6               	goto	l4828
 12178                           
 12179                           ; BSR set to: 0
 12180                           ; Switch size 1, requested type "simple"
 12181                           ; Number of cases is 8, Range of values is 0 to 14
 12182                           ; switch strategies available:
 12183                           ; Name         Instructions Cycles
 12184                           ; simple_byte           25    13 (average)
 12185                           ;	Chosen strategy is simple_byte
 12186  0023AE  5014               	movf	??_disk_ioctl,w,c
 12187  0023B0  0A00               	xorlw	0	; case 0
 12188  0023B2  B4D8               	btfsc	status,2,c
 12189  0023B4  D5DC               	goto	l4738
 12190  0023B6  0A01               	xorlw	1	; case 1
 12191  0023B8  B4D8               	btfsc	status,2,c
 12192  0023BA  D5E0               	goto	l4742
 12193  0023BC  0A02               	xorlw	2	; case 3
 12194  0023BE  B4D8               	btfsc	status,2,c
 12195  0023C0  D69E               	goto	l258
 12196  0023C2  0A09               	xorlw	9	; case 10
 12197  0023C4  B4D8               	btfsc	status,2,c
 12198  0023C6  D771               	goto	l4790
 12199  0023C8  0A01               	xorlw	1	; case 11
 12200  0023CA  B4D8               	btfsc	status,2,c
 12201  0023CC  D775               	goto	l4794
 12202  0023CE  0A07               	xorlw	7	; case 12
 12203  0023D0  B4D8               	btfsc	status,2,c
 12204  0023D2  D78E               	goto	l4800
 12205  0023D4  0A01               	xorlw	1	; case 13
 12206  0023D6  B4D8               	btfsc	status,2,c
 12207  0023D8  D7A4               	goto	l4806
 12208  0023DA  0A03               	xorlw	3	; case 14
 12209  0023DC  B4D8               	btfsc	status,2,c
 12210  0023DE  D7C1               	goto	l4820
 12211  0023E0  D7DC               	goto	l4828
 12212  0023E2                     l4832:
 12213                           
 12214                           ;diskio.c: 542:  deselect();
 12215  0023E2  ECF3  F02A         	call	_deselect	;wreg free
 12216                           
 12217                           ;diskio.c: 544:  return res;
 12218  0023E6  5036               	movf	disk_ioctl@res,w,c
 12219  0023E8  0012               	return		;funcret
 12220  0023EA                     __end_of_disk_ioctl:
 12221                           	opt callstack 0
 12222                           
 12223 ;; *************** function ___wmul *****************
 12224 ;; Defined at:
 12225 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  multiplier      2    0[COMRAM] unsigned int 
 12228 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  product         2    4[COMRAM] unsigned int 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;                  2    0[COMRAM] unsigned int 
 12233 ;; Registers used:
 12234 ;;		wreg, status,2, status,0, prodl, prodh
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12240 ;;      Params:         4       0       0       0       0       0       0       0       0
 12241 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12242 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12243 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12244 ;;Total ram usage:        6 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; This function calls:
 12247 ;;		Nothing
 12248 ;; This function is called by:
 12249 ;;		_disk_ioctl
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text35
 12254  005544                     __ptext35:
 12255                           	opt callstack 0
 12256  005544                     ___wmul:
 12257                           	opt callstack 26
 12258                           
 12259                           ;incstack = 0
 12260  005544  5001               	movf	___wmul@multiplier,w,c
 12261  005546  0203               	mulwf	___wmul@multiplicand,c
 12262  005548  CFF3 F005          	movff	prodl,___wmul@product
 12263  00554C  CFF4 F006          	movff	prodh,___wmul@product+1
 12264  005550  5001               	movf	___wmul@multiplier,w,c
 12265  005552  0204               	mulwf	___wmul@multiplicand+1,c
 12266  005554  50F3               	movf	prodl,w,c
 12267  005556  2606               	addwf	___wmul@product+1,f,c
 12268  005558  5002               	movf	___wmul@multiplier+1,w,c
 12269  00555A  0203               	mulwf	___wmul@multiplicand,c
 12270  00555C  50F3               	movf	prodl,w,c
 12271  00555E  2606               	addwf	___wmul@product+1,f,c
 12272  005560  C005  F001         	movff	___wmul@product,?___wmul
 12273  005564  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12274  005568  0012               	return		;funcret
 12275  00556A                     __end_of___wmul:
 12276                           	opt callstack 0
 12277                           
 12278 ;; *************** function _st_clust *****************
 12279 ;; Defined at:
 12280 ;;		line 1252 in file "ff.c"
 12281 ;; Parameters:    Size  Location     Type
 12282 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12283 ;;		 -> NULL(0), FatFs(558), 
 12284 ;;  cl              4    2[COMRAM] unsigned long 
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;		None
 12287 ;; Return value:  Size  Location     Type
 12288 ;;                  1    wreg      void 
 12289 ;; Registers used:
 12290 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12291 ;; Tracked objects:
 12292 ;;		On entry : 0/0
 12293 ;;		On exit  : 0/0
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12296 ;;      Params:         6       0       0       0       0       0       0       0       0
 12297 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12298 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12299 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12300 ;;Total ram usage:        6 bytes
 12301 ;; Hardware stack levels used:    1
 12302 ;; This function calls:
 12303 ;;		Nothing
 12304 ;; This function is called by:
 12305 ;;		_f_open
 12306 ;;		_f_sync
 12307 ;; This function uses a non-reentrant model
 12308 ;;
 12309                           
 12310                           	psect	text36
 12311  00551A                     __ptext36:
 12312                           	opt callstack 0
 12313  00551A                     _st_clust:
 12314                           	opt callstack 29
 12315                           
 12316                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12317                           
 12318                           ;incstack = 0
 12319  00551A  EE20 F01A          	lfsr	2,26
 12320  00551E  5001               	movf	st_clust@dir,w,c
 12321  005520  26D9               	addwf	fsr2l,f,c
 12322  005522  5002               	movf	st_clust@dir+1,w,c
 12323  005524  22DA               	addwfc	fsr2h,f,c
 12324  005526  C003  FFDE         	movff	st_clust@cl,postinc2
 12325  00552A  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12326                           
 12327                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12328  00552E  EE20 F014          	lfsr	2,20
 12329  005532  5001               	movf	st_clust@dir,w,c
 12330  005534  26D9               	addwf	fsr2l,f,c
 12331  005536  5002               	movf	st_clust@dir+1,w,c
 12332  005538  22DA               	addwfc	fsr2h,f,c
 12333  00553A  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12334  00553E  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12335  005542  0012               	return		;funcret
 12336  005544                     __end_of_st_clust:
 12337                           	opt callstack 0
 12338                           
 12339 ;; *************** function _move_window *****************
 12340 ;; Defined at:
 12341 ;;		line 729 in file "ff.c"
 12342 ;; Parameters:    Size  Location     Type
 12343 ;;  fs              2   47[COMRAM] PTR struct .
 12344 ;;		 -> NULL(0), FatFs(558), 
 12345 ;;  sector          4   49[COMRAM] unsigned long 
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;  res             1   57[COMRAM] enum E93
 12348 ;; Return value:  Size  Location     Type
 12349 ;;                  1    wreg      enum E93
 12350 ;; Registers used:
 12351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : 0/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12357 ;;      Params:         6       0       0       0       0       0       0       0       0
 12358 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12359 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12360 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12361 ;;Total ram usage:       11 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; Hardware stack levels required when called:    7
 12364 ;; This function calls:
 12365 ;;		_disk_read
 12366 ;;		_sync_window
 12367 ;; This function is called by:
 12368 ;;		_get_fat
 12369 ;;		_put_fat
 12370 ;;		_dir_alloc
 12371 ;;		_dir_find
 12372 ;;		_dir_register
 12373 ;;		_check_fs
 12374 ;;		_find_volume
 12375 ;;		_f_open
 12376 ;;		_f_write
 12377 ;;		_f_sync
 12378 ;;		_f_read
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           	psect	text37
 12383  004EE2                     __ptext37:
 12384                           	opt callstack 0
 12385  004EE2                     _move_window:
 12386                           	opt callstack 22
 12387                           
 12388                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12389                           
 12390                           ;incstack = 0
 12391  004EE2  0E00               	movlw	0
 12392  004EE4  6E3A               	movwf	move_window@res,c
 12393                           
 12394                           ;ff.c: 737:  if (sector != fs->winsect) {
 12395  004EE6  EE20 F02A          	lfsr	2,42
 12396  004EEA  5030               	movf	move_window@fs,w,c
 12397  004EEC  26D9               	addwf	fsr2l,f,c
 12398  004EEE  5031               	movf	move_window@fs+1,w,c
 12399  004EF0  22DA               	addwfc	fsr2h,f,c
 12400  004EF2  5032               	movf	move_window@sector,w,c
 12401  004EF4  18DE               	xorwf	postinc2,w,c
 12402  004EF6  E10A               	bnz	u5120
 12403  004EF8  5033               	movf	move_window@sector+1,w,c
 12404  004EFA  18DE               	xorwf	postinc2,w,c
 12405  004EFC  E107               	bnz	u5120
 12406  004EFE  5034               	movf	move_window@sector+2,w,c
 12407  004F00  18DE               	xorwf	postinc2,w,c
 12408  004F02  E104               	bnz	u5120
 12409  004F04  5035               	movf	move_window@sector+3,w,c
 12410  004F06  18DE               	xorwf	postinc2,w,c
 12411  004F08  B4D8               	btfsc	status,2,c
 12412  004F0A  D03C               	goto	l4464
 12413  004F0C                     u5120:
 12414                           
 12415                           ;ff.c: 739:   res = sync_window(fs);
 12416  004F0C  C030  F01B         	movff	move_window@fs,sync_window@fs
 12417  004F10  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12418  004F14  EC9E  F01F         	call	_sync_window	;wreg free
 12419  004F18  6E3A               	movwf	move_window@res,c
 12420                           
 12421                           ;ff.c: 741:   if (res == FR_OK) {
 12422  004F1A  503A               	movf	move_window@res,w,c
 12423  004F1C  A4D8               	btfss	status,2,c
 12424  004F1E  D032               	goto	l4464
 12425                           
 12426                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12427  004F20  0E2E               	movlw	46
 12428  004F22  2430               	addwf	move_window@fs,w,c
 12429  004F24  6E11               	movwf	disk_read@buff,c
 12430  004F26  0E00               	movlw	0
 12431  004F28  2031               	addwfc	move_window@fs+1,w,c
 12432  004F2A  6E12               	movwf	disk_read@buff+1,c
 12433  004F2C  C032  F013         	movff	move_window@sector,disk_read@sector
 12434  004F30  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12435  004F34  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12436  004F38  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12437  004F3C  0E00               	movlw	0
 12438  004F3E  6E18               	movwf	disk_read@count+1,c
 12439  004F40  0E01               	movlw	1
 12440  004F42  6E17               	movwf	disk_read@count,c
 12441  004F44  EE20 F001          	lfsr	2,1
 12442  004F48  5030               	movf	move_window@fs,w,c
 12443  004F4A  26D9               	addwf	fsr2l,f,c
 12444  004F4C  5031               	movf	move_window@fs+1,w,c
 12445  004F4E  22DA               	addwfc	fsr2h,f,c
 12446  004F50  50DF               	movf	indf2,w,c
 12447  004F52  EC93  F025         	call	_disk_read
 12448  004F56  0900               	iorlw	0
 12449  004F58  B4D8               	btfsc	status,2,c
 12450  004F5A  D006               	goto	l4462
 12451                           
 12452                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12453  004F5C  6832               	setf	move_window@sector,c
 12454  004F5E  6833               	setf	move_window@sector+1,c
 12455  004F60  6834               	setf	move_window@sector+2,c
 12456  004F62  6835               	setf	move_window@sector+3,c
 12457                           
 12458                           ;ff.c: 744:     res = FR_DISK_ERR;
 12459  004F64  0E01               	movlw	1
 12460  004F66  6E3A               	movwf	move_window@res,c
 12461  004F68                     l4462:
 12462                           
 12463                           ;ff.c: 746:    fs->winsect = sector;
 12464  004F68  EE20 F02A          	lfsr	2,42
 12465  004F6C  5030               	movf	move_window@fs,w,c
 12466  004F6E  26D9               	addwf	fsr2l,f,c
 12467  004F70  5031               	movf	move_window@fs+1,w,c
 12468  004F72  22DA               	addwfc	fsr2h,f,c
 12469  004F74  C032  FFDE         	movff	move_window@sector,postinc2
 12470  004F78  C033  FFDE         	movff	move_window@sector+1,postinc2
 12471  004F7C  C034  FFDE         	movff	move_window@sector+2,postinc2
 12472  004F80  C035  FFDE         	movff	move_window@sector+3,postinc2
 12473  004F84                     l4464:
 12474                           
 12475                           ;ff.c: 749:  return res;
 12476  004F84  503A               	movf	move_window@res,w,c
 12477  004F86  0012               	return		;funcret
 12478  004F88                     __end_of_move_window:
 12479                           	opt callstack 0
 12480                           
 12481 ;; *************** function _sync_window *****************
 12482 ;; Defined at:
 12483 ;;		line 700 in file "ff.c"
 12484 ;; Parameters:    Size  Location     Type
 12485 ;;  fs              2   26[COMRAM] PTR struct .
 12486 ;;		 -> NULL(0), FatFs(558), 
 12487 ;; Auto vars:     Size  Location     Type
 12488 ;;  wsect           4   43[COMRAM] unsigned long 
 12489 ;;  nf              2   41[COMRAM] unsigned short 
 12490 ;;  res             1   40[COMRAM] enum E93
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      enum E93
 12493 ;; Registers used:
 12494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12500 ;;      Params:         2       0       0       0       0       0       0       0       0
 12501 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12502 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12503 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12504 ;;Total ram usage:       21 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:    6
 12507 ;; This function calls:
 12508 ;;		_disk_write
 12509 ;; This function is called by:
 12510 ;;		_move_window
 12511 ;;		_sync_fs
 12512 ;;		_dir_next
 12513 ;;		_f_write
 12514 ;; This function uses a non-reentrant model
 12515 ;;
 12516                           
 12517                           	psect	text38
 12518  003F3C                     __ptext38:
 12519                           	opt callstack 0
 12520  003F3C                     _sync_window:
 12521                           	opt callstack 23
 12522                           
 12523                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12524                           
 12525                           ;incstack = 0
 12526  003F3C  0E00               	movlw	0
 12527  003F3E  6E29               	movwf	sync_window@res,c
 12528                           
 12529                           ;ff.c: 709:  if (fs->wflag) {
 12530  003F40  EE20 F004          	lfsr	2,4
 12531  003F44  501B               	movf	sync_window@fs,w,c
 12532  003F46  26D9               	addwf	fsr2l,f,c
 12533  003F48  501C               	movf	sync_window@fs+1,w,c
 12534  003F4A  22DA               	addwfc	fsr2h,f,c
 12535  003F4C  50DF               	movf	indf2,w,c
 12536  003F4E  B4D8               	btfsc	status,2,c
 12537  003F50  D09F               	goto	l4444
 12538                           
 12539                           ;ff.c: 710:   wsect = fs->winsect;
 12540  003F52  EE20 F02A          	lfsr	2,42
 12541  003F56  501B               	movf	sync_window@fs,w,c
 12542  003F58  26D9               	addwf	fsr2l,f,c
 12543  003F5A  501C               	movf	sync_window@fs+1,w,c
 12544  003F5C  22DA               	addwfc	fsr2h,f,c
 12545  003F5E  CFDE F02C          	movff	postinc2,sync_window@wsect
 12546  003F62  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12547  003F66  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12548  003F6A  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12549                           
 12550                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12551  003F6E  0E2E               	movlw	46
 12552  003F70  241B               	addwf	sync_window@fs,w,c
 12553  003F72  6E11               	movwf	disk_write@buff,c
 12554  003F74  0E00               	movlw	0
 12555  003F76  201C               	addwfc	sync_window@fs+1,w,c
 12556  003F78  6E12               	movwf	disk_write@buff+1,c
 12557  003F7A  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12558  003F7E  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12559  003F82  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12560  003F86  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12561  003F8A  0E00               	movlw	0
 12562  003F8C  6E18               	movwf	disk_write@count+1,c
 12563  003F8E  0E01               	movlw	1
 12564  003F90  6E17               	movwf	disk_write@count,c
 12565  003F92  EE20 F001          	lfsr	2,1
 12566  003F96  501B               	movf	sync_window@fs,w,c
 12567  003F98  26D9               	addwf	fsr2l,f,c
 12568  003F9A  501C               	movf	sync_window@fs+1,w,c
 12569  003F9C  22DA               	addwfc	fsr2h,f,c
 12570  003F9E  50DF               	movf	indf2,w,c
 12571  003FA0  ECCD  F022         	call	_disk_write
 12572  003FA4  0900               	iorlw	0
 12573  003FA6  B4D8               	btfsc	status,2,c
 12574  003FA8  D003               	goto	l4426
 12575                           
 12576                           ;ff.c: 712:    res = FR_DISK_ERR;
 12577  003FAA  0E01               	movlw	1
 12578  003FAC  6E29               	movwf	sync_window@res,c
 12579                           
 12580                           ;ff.c: 713:   } else {
 12581  003FAE  D070               	goto	l4444
 12582  003FB0                     l4426:
 12583                           
 12584                           ;ff.c: 714:    fs->wflag = 0;
 12585  003FB0  EE20 F004          	lfsr	2,4
 12586  003FB4  501B               	movf	sync_window@fs,w,c
 12587  003FB6  26D9               	addwf	fsr2l,f,c
 12588  003FB8  501C               	movf	sync_window@fs+1,w,c
 12589  003FBA  22DA               	addwfc	fsr2h,f,c
 12590  003FBC  0E00               	movlw	0
 12591  003FBE  6EDF               	movwf	indf2,c
 12592                           
 12593                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12594  003FC0  EE20 F016          	lfsr	2,22
 12595  003FC4  501B               	movf	sync_window@fs,w,c
 12596  003FC6  26D9               	addwf	fsr2l,f,c
 12597  003FC8  501C               	movf	sync_window@fs+1,w,c
 12598  003FCA  22DA               	addwfc	fsr2h,f,c
 12599  003FCC  EE10 F01E          	lfsr	1,30
 12600  003FD0  501B               	movf	sync_window@fs,w,c
 12601  003FD2  26E1               	addwf	fsr1l,f,c
 12602  003FD4  501C               	movf	sync_window@fs+1,w,c
 12603  003FD6  22E2               	addwfc	fsr1h,f,c
 12604  003FD8  CFE6 F021          	movff	postinc1,??_sync_window+4
 12605  003FDC  CFE6 F022          	movff	postinc1,??_sync_window+5
 12606  003FE0  CFE6 F023          	movff	postinc1,??_sync_window+6
 12607  003FE4  CFE6 F024          	movff	postinc1,??_sync_window+7
 12608  003FE8  5021               	movf	??_sync_window+4,w,c
 12609  003FEA  5C2C               	subwf	sync_window@wsect,w,c
 12610  003FEC  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12611  003FEE  5022               	movf	??_sync_window+5,w,c
 12612  003FF0  582D               	subwfb	sync_window@wsect+1,w,c
 12613  003FF2  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12614  003FF4  5023               	movf	??_sync_window+6,w,c
 12615  003FF6  582E               	subwfb	sync_window@wsect+2,w,c
 12616  003FF8  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12617  003FFA  5024               	movf	??_sync_window+7,w,c
 12618  003FFC  582F               	subwfb	sync_window@wsect+3,w,c
 12619  003FFE  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12620  004000  50DE               	movf	postinc2,w,c
 12621  004002  5C25               	subwf	??_sync_window+8,w,c
 12622  004004  50DE               	movf	postinc2,w,c
 12623  004006  5826               	subwfb	??_sync_window+9,w,c
 12624  004008  50DE               	movf	postinc2,w,c
 12625  00400A  5827               	subwfb	??_sync_window+10,w,c
 12626  00400C  50DE               	movf	postinc2,w,c
 12627  00400E  5828               	subwfb	??_sync_window+11,w,c
 12628  004010  B0D8               	btfsc	status,0,c
 12629  004012  D03E               	goto	l4444
 12630                           
 12631                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12632  004014  EE20 F003          	lfsr	2,3
 12633  004018  501B               	movf	sync_window@fs,w,c
 12634  00401A  26D9               	addwf	fsr2l,f,c
 12635  00401C  501C               	movf	sync_window@fs+1,w,c
 12636  00401E  22DA               	addwfc	fsr2h,f,c
 12637  004020  50DF               	movf	indf2,w,c
 12638  004022  6E1D               	movwf	??_sync_window& (0+255),c
 12639  004024  501D               	movf	??_sync_window,w,c
 12640  004026  6E2A               	movwf	sync_window@nf,c
 12641  004028  6A2B               	clrf	sync_window@nf+1,c
 12642  00402A                     l4432:
 12643  00402A  502B               	movf	sync_window@nf+1,w,c
 12644  00402C  E104               	bnz	l4436
 12645  00402E  0E02               	movlw	2
 12646  004030  5C2A               	subwf	sync_window@nf,w,c
 12647  004032  A0D8               	btfss	status,0,c
 12648  004034  D02D               	goto	l4444
 12649  004036                     l4436:
 12650                           
 12651                           ;ff.c: 717:      wsect += fs->fsize;
 12652  004036  EE20 F016          	lfsr	2,22
 12653  00403A  501B               	movf	sync_window@fs,w,c
 12654  00403C  26D9               	addwf	fsr2l,f,c
 12655  00403E  501C               	movf	sync_window@fs+1,w,c
 12656  004040  22DA               	addwfc	fsr2h,f,c
 12657  004042  50DE               	movf	postinc2,w,c
 12658  004044  262C               	addwf	sync_window@wsect,f,c
 12659  004046  50DE               	movf	postinc2,w,c
 12660  004048  222D               	addwfc	sync_window@wsect+1,f,c
 12661  00404A  50DE               	movf	postinc2,w,c
 12662  00404C  222E               	addwfc	sync_window@wsect+2,f,c
 12663  00404E  50DD               	movf	postdec2,w,c
 12664  004050  222F               	addwfc	sync_window@wsect+3,f,c
 12665                           
 12666                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12667  004052  0E2E               	movlw	46
 12668  004054  241B               	addwf	sync_window@fs,w,c
 12669  004056  6E11               	movwf	disk_write@buff,c
 12670  004058  0E00               	movlw	0
 12671  00405A  201C               	addwfc	sync_window@fs+1,w,c
 12672  00405C  6E12               	movwf	disk_write@buff+1,c
 12673  00405E  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12674  004062  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12675  004066  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12676  00406A  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12677  00406E  0E00               	movlw	0
 12678  004070  6E18               	movwf	disk_write@count+1,c
 12679  004072  0E01               	movlw	1
 12680  004074  6E17               	movwf	disk_write@count,c
 12681  004076  EE20 F001          	lfsr	2,1
 12682  00407A  501B               	movf	sync_window@fs,w,c
 12683  00407C  26D9               	addwf	fsr2l,f,c
 12684  00407E  501C               	movf	sync_window@fs+1,w,c
 12685  004080  22DA               	addwfc	fsr2h,f,c
 12686  004082  50DF               	movf	indf2,w,c
 12687  004084  ECCD  F022         	call	_disk_write
 12688                           
 12689                           ;ff.c: 719:     }
 12690  004088  062A               	decf	sync_window@nf,f,c
 12691  00408A  A0D8               	btfss	status,0,c
 12692  00408C  062B               	decf	sync_window@nf+1,f,c
 12693  00408E  D7CD               	goto	l4432
 12694  004090                     l4444:
 12695                           
 12696                           ;ff.c: 723:  return res;
 12697  004090  5029               	movf	sync_window@res,w,c
 12698  004092  0012               	return		;funcret
 12699  004094                     __end_of_sync_window:
 12700                           	opt callstack 0
 12701                           
 12702 ;; *************** function _disk_write *****************
 12703 ;; Defined at:
 12704 ;;		line 405 in file "diskio.c"
 12705 ;; Parameters:    Size  Location     Type
 12706 ;;  pdrv            1    wreg     unsigned char 
 12707 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12708 ;;		 -> FatFs.win(512), NULL(0), STR_4(16), FatFs(558), 
 12709 ;;  sector          4   18[COMRAM] unsigned long 
 12710 ;;  count           2   22[COMRAM] unsigned short 
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;  pdrv            1   25[COMRAM] unsigned char 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      enum E43
 12715 ;; Registers used:
 12716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12722 ;;      Params:         8       0       0       0       0       0       0       0       0
 12723 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12724 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12725 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12726 ;;Total ram usage:       10 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    5
 12729 ;; This function calls:
 12730 ;;		_deselect
 12731 ;;		_send_cmd
 12732 ;;		_xmit_datablock
 12733 ;; This function is called by:
 12734 ;;		_sync_window
 12735 ;;		_sync_fs
 12736 ;;		_f_write
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           	psect	text39
 12741  00459A                     __ptext39:
 12742                           	opt callstack 0
 12743  00459A                     _disk_write:
 12744                           	opt callstack 23
 12745                           
 12746                           ;incstack = 0
 12747                           ;disk_write@pdrv stored from wreg
 12748  00459A  6E1A               	movwf	disk_write@pdrv,c
 12749                           
 12750                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 12751  00459C  501A               	movf	disk_write@pdrv,w,c
 12752  00459E  A4D8               	btfss	status,2,c
 12753  0045A0  D004               	goto	u4810
 12754  0045A2  5017               	movf	disk_write@count,w,c
 12755  0045A4  1018               	iorwf	disk_write@count+1,w,c
 12756  0045A6  A4D8               	btfss	status,2,c
 12757  0045A8  D002               	goto	l229
 12758  0045AA                     u4810:
 12759  0045AA  0E04               	movlw	4
 12760  0045AC  0012               	return	
 12761  0045AE                     l229:
 12762                           
 12763                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 12764  0045AE  0100               	movlb	0	; () banked
 12765  0045B0  A1F7               	btfss	_Stat& (0+255),0,b
 12766  0045B2  D002               	goto	l233
 12767                           
 12768                           ; BSR set to: 0
 12769  0045B4  0E03               	movlw	3
 12770  0045B6  0012               	return	
 12771  0045B8                     l233:
 12772                           
 12773                           ; BSR set to: 0
 12774                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 12775  0045B8  A5F7               	btfss	_Stat& (0+255),2,b
 12776  0045BA  D002               	goto	l234
 12777                           
 12778                           ; BSR set to: 0
 12779  0045BC  0E02               	movlw	2
 12780  0045BE  0012               	return	
 12781  0045C0                     l234:
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 12785  0045C0  B7D6               	btfsc	_CardType& (0+255),3,b
 12786  0045C2  D008               	goto	l235
 12787                           
 12788                           ; BSR set to: 0
 12789  0045C4  0E09               	movlw	9
 12790  0045C6                     u4855:
 12791  0045C6  90D8               	bcf	status,0,c
 12792  0045C8  3613               	rlcf	disk_write@sector,f,c
 12793  0045CA  3614               	rlcf	disk_write@sector+1,f,c
 12794  0045CC  3615               	rlcf	disk_write@sector+2,f,c
 12795  0045CE  3616               	rlcf	disk_write@sector+3,f,c
 12796  0045D0  2EE8               	decfsz	wreg,f,c
 12797  0045D2  D7F9               	goto	u4855
 12798  0045D4                     l235:
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;diskio.c: 418:  if (count == 1) {
 12802  0045D4  0417               	decf	disk_write@count,w,c
 12803  0045D6  1018               	iorwf	disk_write@count+1,w,c
 12804  0045D8  A4D8               	btfss	status,2,c
 12805  0045DA  D01D               	goto	l4358
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 12809  0045DC  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12810  0045E0  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12811  0045E4  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12812  0045E8  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12813  0045EC  0E18               	movlw	24
 12814  0045EE  ECC5  F029         	call	_send_cmd
 12815  0045F2  0900               	iorlw	0
 12816  0045F4  A4D8               	btfss	status,2,c
 12817  0045F6  D04F               	goto	l4372
 12818  0045F8  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12819  0045FC  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12820  004600  0EFE               	movlw	254
 12821  004602  6E06               	movwf	xmit_datablock@token,c
 12822  004604  ECCF  F028         	call	_xmit_datablock	;wreg free
 12823  004608  0900               	iorlw	0
 12824  00460A  B4D8               	btfsc	status,2,c
 12825  00460C  D044               	goto	l4372
 12826                           
 12827                           ;diskio.c: 421:    count = 0;
 12828  00460E  0E00               	movlw	0
 12829  004610  6E18               	movwf	disk_write@count+1,c
 12830  004612  0E00               	movlw	0
 12831  004614  D03F               	goto	L17
 12832  004616                     l4358:
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 12836  004616  C0D6  F019         	movff	_CardType,??_disk_write
 12837  00461A  0E06               	movlw	6
 12838  00461C  1619               	andwf	??_disk_write,f,c
 12839  00461E  B4D8               	btfsc	status,2,c
 12840  004620  D009               	goto	l239
 12841                           
 12842                           ; BSR set to: 0
 12843  004622  C017  F00B         	movff	disk_write@count,send_cmd@arg
 12844  004626  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 12845  00462A  6A0D               	clrf	send_cmd@arg+2,c
 12846  00462C  6A0E               	clrf	send_cmd@arg+3,c
 12847  00462E  0E97               	movlw	151
 12848  004630  ECC5  F029         	call	_send_cmd
 12849  004634                     l239:
 12850                           
 12851                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 12852  004634  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12853  004638  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12854  00463C  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12855  004640  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12856  004644  0E19               	movlw	25
 12857  004646  ECC5  F029         	call	_send_cmd
 12858  00464A  0900               	iorlw	0
 12859  00464C  A4D8               	btfss	status,2,c
 12860  00464E  D023               	goto	l4372
 12861  004650                     u4900:
 12862                           
 12863                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 12864  004650  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12865  004654  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12866  004658  0EFC               	movlw	252
 12867  00465A  6E06               	movwf	xmit_datablock@token,c
 12868  00465C  ECCF  F028         	call	_xmit_datablock	;wreg free
 12869  004660  0900               	iorlw	0
 12870  004662  B4D8               	btfsc	status,2,c
 12871  004664  D009               	goto	u4920
 12872                           
 12873                           ;diskio.c: 428:     buff += 512;
 12874  004666  0E02               	movlw	2
 12875  004668  2612               	addwf	disk_write@buff+1,f,c
 12876                           
 12877                           ;diskio.c: 429:    } while (--count);
 12878  00466A  0617               	decf	disk_write@count,f,c
 12879  00466C  A0D8               	btfss	status,0,c
 12880  00466E  0618               	decf	disk_write@count+1,f,c
 12881  004670  5017               	movf	disk_write@count,w,c
 12882  004672  1018               	iorwf	disk_write@count+1,w,c
 12883  004674  A4D8               	btfss	status,2,c
 12884  004676  D7EC               	goto	u4900
 12885  004678                     u4920:
 12886                           
 12887                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 12888  004678  0E00               	movlw	0
 12889  00467A  6E04               	movwf	xmit_datablock@buff,c
 12890  00467C  0E00               	movlw	0
 12891  00467E  6E05               	movwf	xmit_datablock@buff+1,c
 12892  004680  0EFD               	movlw	253
 12893  004682  6E06               	movwf	xmit_datablock@token,c
 12894  004684  ECCF  F028         	call	_xmit_datablock	;wreg free
 12895  004688  0900               	iorlw	0
 12896  00468A  A4D8               	btfss	status,2,c
 12897  00468C  D004               	goto	l4372
 12898                           
 12899                           ;diskio.c: 431:     count = 1;
 12900  00468E  0E00               	movlw	0
 12901  004690  6E18               	movwf	disk_write@count+1,c
 12902  004692  0E01               	movlw	1
 12903  004694                     L17:
 12904  004694  6E17               	movwf	disk_write@count,c
 12905  004696                     l4372:
 12906                           
 12907                           ;diskio.c: 434:  deselect();
 12908  004696  ECF3  F02A         	call	_deselect	;wreg free
 12909                           
 12910                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 12911  00469A  5017               	movf	disk_write@count,w,c
 12912  00469C  1018               	iorwf	disk_write@count+1,w,c
 12913  00469E  B4D8               	btfsc	status,2,c
 12914  0046A0  D002               	goto	u4940
 12915  0046A2  0E01               	movlw	1
 12916  0046A4  0012               	return	
 12917  0046A6                     u4940:
 12918  0046A6  0E00               	movlw	0
 12919  0046A8  0012               	return		;funcret
 12920  0046AA                     __end_of_disk_write:
 12921                           	opt callstack 0
 12922                           
 12923 ;; *************** function _xmit_datablock *****************
 12924 ;; Defined at:
 12925 ;;		line 156 in file "diskio.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 12928 ;;		 -> FatFs.win(512), NULL(0), STR_4(16), FatFs(558), 
 12929 ;;  token           1    5[COMRAM] unsigned char 
 12930 ;; Auto vars:     Size  Location     Type
 12931 ;;  i               2    6[COMRAM] unsigned short 
 12932 ;;  resp            1    8[COMRAM] unsigned char 
 12933 ;; Return value:  Size  Location     Type
 12934 ;;                  1    wreg      unsigned char 
 12935 ;; Registers used:
 12936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12942 ;;      Params:         3       0       0       0       0       0       0       0       0
 12943 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12944 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12945 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12946 ;;Total ram usage:        6 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; Hardware stack levels required when called:    2
 12949 ;; This function calls:
 12950 ;;		_SPI1_Exchange8bit
 12951 ;;		_wait_ready
 12952 ;; This function is called by:
 12953 ;;		_disk_write
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text40
 12958  00519E                     __ptext40:
 12959                           	opt callstack 0
 12960  00519E                     _xmit_datablock:
 12961                           	opt callstack 25
 12962                           
 12963                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 12964                           
 12965                           ;incstack = 0
 12966  00519E  EC04  F02A         	call	_wait_ready	;wreg free
 12967  0051A2  0900               	iorlw	0
 12968  0051A4  A4D8               	btfss	status,2,c
 12969  0051A6  D002               	goto	l4264
 12970  0051A8                     u4690:
 12971  0051A8  0E00               	movlw	0
 12972  0051AA  0012               	return	
 12973  0051AC                     l4264:
 12974                           
 12975                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 12976  0051AC  5006               	movf	xmit_datablock@token,w,c
 12977  0051AE  ECD6  F02A         	call	_SPI1_Exchange8bit
 12978                           
 12979                           ;diskio.c: 168:  if (token != 0xFD) {
 12980  0051B2  0EFD               	movlw	253
 12981  0051B4  1806               	xorwf	xmit_datablock@token,w,c
 12982  0051B6  B4D8               	btfsc	status,2,c
 12983  0051B8  D02E               	goto	l4284
 12984                           
 12985                           ;diskio.c: 169:   i = 512;
 12986  0051BA  0E02               	movlw	2
 12987  0051BC  6E08               	movwf	xmit_datablock@i+1,c
 12988  0051BE  0E00               	movlw	0
 12989  0051C0  6E07               	movwf	xmit_datablock@i,c
 12990  0051C2                     l4270:
 12991                           
 12992                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 12993  0051C2  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 12994  0051C6  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 12995  0051CA  6AF8               	clrf	tblptru,c
 12996  0051CC  0E07               	movlw	(high __ramtop+-1)
 12997  0051CE  64F7               	cpfsgt	tblptrh,c
 12998  0051D0  D003               	bra	u4717
 12999  0051D2  0008               	tblrd		*
 13000  0051D4  50F5               	movf	tablat,w,c
 13001  0051D6  D005               	bra	u4710
 13002  0051D8                     u4717:
 13003  0051D8  CFF6 FFE9          	movff	tblptrl,fsr0l
 13004  0051DC  CFF7 FFEA          	movff	tblptrh,fsr0h
 13005  0051E0  50EF               	movf	indf0,w,c
 13006  0051E2                     u4710:
 13007  0051E2  ECD6  F02A         	call	_SPI1_Exchange8bit
 13008  0051E6  4A04               	infsnz	xmit_datablock@buff,f,c
 13009  0051E8  2A05               	incf	xmit_datablock@buff+1,f,c
 13010  0051EA  0607               	decf	xmit_datablock@i,f,c
 13011  0051EC  A0D8               	btfss	status,0,c
 13012  0051EE  0608               	decf	xmit_datablock@i+1,f,c
 13013  0051F0  5007               	movf	xmit_datablock@i,w,c
 13014  0051F2  1008               	iorwf	xmit_datablock@i+1,w,c
 13015  0051F4  A4D8               	btfss	status,2,c
 13016  0051F6  D7E5               	goto	l4270
 13017                           
 13018                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13019  0051F8  0EFF               	movlw	255
 13020  0051FA  ECD6  F02A         	call	_SPI1_Exchange8bit
 13021                           
 13022                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13023  0051FE  0EFF               	movlw	255
 13024  005200  ECD6  F02A         	call	_SPI1_Exchange8bit
 13025                           
 13026                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13027  005204  0EFF               	movlw	255
 13028  005206  ECD6  F02A         	call	_SPI1_Exchange8bit
 13029  00520A  6E09               	movwf	xmit_datablock@resp,c
 13030                           
 13031                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13032  00520C  5009               	movf	xmit_datablock@resp,w,c
 13033  00520E  0B1F               	andlw	31
 13034  005210  0A05               	xorlw	5
 13035  005212  A4D8               	btfss	status,2,c
 13036  005214  D7C9               	goto	u4690
 13037  005216                     l4284:
 13038                           
 13039                           ;diskio.c: 180:  return 1;
 13040  005216  0E01               	movlw	1
 13041  005218  0012               	return		;funcret
 13042  00521A                     __end_of_xmit_datablock:
 13043                           	opt callstack 0
 13044                           
 13045 ;; *************** function _disk_read *****************
 13046 ;; Defined at:
 13047 ;;		line 370 in file "diskio.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;  pdrv            1    wreg     unsigned char 
 13050 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13051 ;;		 -> NULL(0), FatFs(558), 
 13052 ;;  sector          4   18[COMRAM] unsigned long 
 13053 ;;  count           2   22[COMRAM] unsigned short 
 13054 ;; Auto vars:     Size  Location     Type
 13055 ;;  pdrv            1   24[COMRAM] unsigned char 
 13056 ;;  cmd             1   27[COMRAM] unsigned char 
 13057 ;; Return value:  Size  Location     Type
 13058 ;;                  1    wreg      enum E43
 13059 ;; Registers used:
 13060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13061 ;; Tracked objects:
 13062 ;;		On entry : 0/0
 13063 ;;		On exit  : 0/0
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13066 ;;      Params:         8       0       0       0       0       0       0       0       0
 13067 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13068 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13069 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13070 ;;Total ram usage:       12 bytes
 13071 ;; Hardware stack levels used:    1
 13072 ;; Hardware stack levels required when called:    5
 13073 ;; This function calls:
 13074 ;;		_deselect
 13075 ;;		_rcvr_datablock
 13076 ;;		_send_cmd
 13077 ;; This function is called by:
 13078 ;;		_move_window
 13079 ;;		_f_read
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           	psect	text41
 13084  004B26                     __ptext41:
 13085                           	opt callstack 0
 13086  004B26                     _disk_read:
 13087                           	opt callstack 23
 13088                           
 13089                           ;incstack = 0
 13090                           ;disk_read@pdrv stored from wreg
 13091  004B26  6E19               	movwf	disk_read@pdrv,c
 13092                           
 13093                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13094  004B28  5019               	movf	disk_read@pdrv,w,c
 13095  004B2A  A4D8               	btfss	status,2,c
 13096  004B2C  D004               	goto	u4970
 13097  004B2E  5017               	movf	disk_read@count,w,c
 13098  004B30  1018               	iorwf	disk_read@count+1,w,c
 13099  004B32  A4D8               	btfss	status,2,c
 13100  004B34  D002               	goto	l212
 13101  004B36                     u4970:
 13102  004B36  0E04               	movlw	4
 13103  004B38  0012               	return	
 13104  004B3A                     l212:
 13105                           
 13106                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13107  004B3A  0100               	movlb	0	; () banked
 13108  004B3C  A1F7               	btfss	_Stat& (0+255),0,b
 13109  004B3E  D002               	goto	l216
 13110                           
 13111                           ; BSR set to: 0
 13112  004B40  0E03               	movlw	3
 13113  004B42  0012               	return	
 13114  004B44                     l216:
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13118  004B44  B7D6               	btfsc	_CardType& (0+255),3,b
 13119  004B46  D008               	goto	l217
 13120                           
 13121                           ; BSR set to: 0
 13122  004B48  0E09               	movlw	9
 13123  004B4A                     u5005:
 13124  004B4A  90D8               	bcf	status,0,c
 13125  004B4C  3613               	rlcf	disk_read@sector,f,c
 13126  004B4E  3614               	rlcf	disk_read@sector+1,f,c
 13127  004B50  3615               	rlcf	disk_read@sector+2,f,c
 13128  004B52  3616               	rlcf	disk_read@sector+3,f,c
 13129  004B54  2EE8               	decfsz	wreg,f,c
 13130  004B56  D7F9               	goto	u5005
 13131  004B58                     l217:
 13132                           
 13133                           ; BSR set to: 0
 13134                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13135  004B58  5018               	movf	disk_read@count+1,w,c
 13136  004B5A  E108               	bnz	l4394
 13137  004B5C  0E02               	movlw	2
 13138  004B5E  5C17               	subwf	disk_read@count,w,c
 13139  004B60  B0D8               	btfsc	status,0,c
 13140  004B62  D004               	goto	l4394
 13141                           
 13142                           ; BSR set to: 0
 13143  004B64  0E00               	movlw	0
 13144  004B66  6E1B               	movwf	_disk_read$412+1,c
 13145  004B68  0E11               	movlw	17
 13146  004B6A  D003               	goto	L18
 13147  004B6C                     l4394:
 13148                           
 13149                           ; BSR set to: 0
 13150  004B6C  0E00               	movlw	0
 13151  004B6E  6E1B               	movwf	_disk_read$412+1,c
 13152  004B70  0E12               	movlw	18
 13153  004B72                     L18:
 13154  004B72  6E1A               	movwf	_disk_read$412,c
 13155                           
 13156                           ; BSR set to: 0
 13157  004B74  C01A  F01C         	movff	_disk_read$412,disk_read@cmd
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13161  004B78  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13162  004B7C  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13163  004B80  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13164  004B84  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13165  004B88  501C               	movf	disk_read@cmd,w,c
 13166  004B8A  ECC5  F029         	call	_send_cmd
 13167  004B8E  0900               	iorlw	0
 13168  004B90  A4D8               	btfss	status,2,c
 13169  004B92  D025               	goto	l4410
 13170  004B94                     u5020:
 13171                           
 13172                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13173  004B94  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13174  004B98  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13175  004B9C  0E02               	movlw	2
 13176  004B9E  6E05               	movwf	rcvr_datablock@btr+1,c
 13177  004BA0  0E00               	movlw	0
 13178  004BA2  6E04               	movwf	rcvr_datablock@btr,c
 13179  004BA4  EC0D  F029         	call	_rcvr_datablock	;wreg free
 13180  004BA8  0900               	iorlw	0
 13181  004BAA  B4D8               	btfsc	status,2,c
 13182  004BAC  D009               	goto	u5040
 13183                           
 13184                           ;diskio.c: 389:    buff += 512;
 13185  004BAE  0E02               	movlw	2
 13186  004BB0  2612               	addwf	disk_read@buff+1,f,c
 13187                           
 13188                           ;diskio.c: 390:   } while (--count);
 13189  004BB2  0617               	decf	disk_read@count,f,c
 13190  004BB4  A0D8               	btfss	status,0,c
 13191  004BB6  0618               	decf	disk_read@count+1,f,c
 13192  004BB8  5017               	movf	disk_read@count,w,c
 13193  004BBA  1018               	iorwf	disk_read@count+1,w,c
 13194  004BBC  A4D8               	btfss	status,2,c
 13195  004BBE  D7EA               	goto	u5020
 13196  004BC0                     u5040:
 13197                           
 13198                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13199  004BC0  0E12               	movlw	18
 13200  004BC2  181C               	xorwf	disk_read@cmd,w,c
 13201  004BC4  A4D8               	btfss	status,2,c
 13202  004BC6  D00B               	goto	l4410
 13203  004BC8  0E00               	movlw	0
 13204  004BCA  6E0B               	movwf	send_cmd@arg,c
 13205  004BCC  0E00               	movlw	0
 13206  004BCE  6E0C               	movwf	send_cmd@arg+1,c
 13207  004BD0  0E00               	movlw	0
 13208  004BD2  6E0D               	movwf	send_cmd@arg+2,c
 13209  004BD4  0E00               	movlw	0
 13210  004BD6  6E0E               	movwf	send_cmd@arg+3,c
 13211  004BD8  0E0C               	movlw	12
 13212  004BDA  ECC5  F029         	call	_send_cmd
 13213  004BDE                     l4410:
 13214                           
 13215                           ;diskio.c: 393:  deselect();
 13216  004BDE  ECF3  F02A         	call	_deselect	;wreg free
 13217                           
 13218                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13219  004BE2  5017               	movf	disk_read@count,w,c
 13220  004BE4  1018               	iorwf	disk_read@count+1,w,c
 13221  004BE6  B4D8               	btfsc	status,2,c
 13222  004BE8  D002               	goto	u5060
 13223  004BEA  0E01               	movlw	1
 13224  004BEC  0012               	return	
 13225  004BEE                     u5060:
 13226  004BEE  0E00               	movlw	0
 13227  004BF0  0012               	return		;funcret
 13228  004BF2                     __end_of_disk_read:
 13229                           	opt callstack 0
 13230                           
 13231 ;; *************** function _send_cmd *****************
 13232 ;; Defined at:
 13233 ;;		line 231 in file "diskio.c"
 13234 ;; Parameters:    Size  Location     Type
 13235 ;;  cmd             1    wreg     unsigned char 
 13236 ;;  arg             4   10[COMRAM] unsigned long 
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;  cmd             1   14[COMRAM] unsigned char 
 13239 ;;  res             1   15[COMRAM] unsigned char 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      unsigned char 
 13242 ;; Registers used:
 13243 ;;		wreg, status,2, status,0, cstack
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13249 ;;      Params:         4       0       0       0       0       0       0       0       0
 13250 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13252 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13253 ;;Total ram usage:        6 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    4
 13256 ;; This function calls:
 13257 ;;		___send_cmd
 13258 ;; This function is called by:
 13259 ;;		_disk_initialize
 13260 ;;		_disk_read
 13261 ;;		_disk_write
 13262 ;;		_disk_ioctl
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           	psect	text42
 13267  00538A                     __ptext42:
 13268                           	opt callstack 0
 13269  00538A                     _send_cmd:
 13270                           	opt callstack 23
 13271                           
 13272                           ;incstack = 0
 13273                           ;send_cmd@cmd stored from wreg
 13274  00538A  6E0F               	movwf	send_cmd@cmd,c
 13275                           
 13276                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13277  00538C  AE0F               	btfss	send_cmd@cmd,7,c
 13278  00538E  D012               	goto	l4300
 13279                           
 13280                           ;diskio.c: 243:   cmd &= 0x7F;
 13281  005390  9E0F               	bcf	send_cmd@cmd,7,c
 13282                           
 13283                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13284  005392  0E00               	movlw	0
 13285  005394  6E04               	movwf	___send_cmd@arg,c
 13286  005396  0E00               	movlw	0
 13287  005398  6E05               	movwf	___send_cmd@arg+1,c
 13288  00539A  0E00               	movlw	0
 13289  00539C  6E06               	movwf	___send_cmd@arg+2,c
 13290  00539E  0E00               	movlw	0
 13291  0053A0  6E07               	movwf	___send_cmd@arg+3,c
 13292  0053A2  0E37               	movlw	55
 13293  0053A4  EC4F  F028         	call	___send_cmd
 13294  0053A8  6E10               	movwf	send_cmd@res,c
 13295                           
 13296                           ;diskio.c: 249:   if (res > 1) return res;
 13297  0053AA  0E01               	movlw	1
 13298  0053AC  6410               	cpfsgt	send_cmd@res,c
 13299  0053AE  D002               	goto	l4300
 13300  0053B0  5010               	movf	send_cmd@res,w,c
 13301  0053B2  0012               	return	
 13302  0053B4                     l4300:
 13303                           
 13304                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13305  0053B4  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13306  0053B8  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13307  0053BC  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13308  0053C0  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13309  0053C4  500F               	movf	send_cmd@cmd,w,c
 13310  0053C6  EC4F  F028         	call	___send_cmd
 13311  0053CA  0012               	return		;funcret
 13312  0053CC                     __end_of_send_cmd:
 13313                           	opt callstack 0
 13314                           
 13315 ;; *************** function ___send_cmd *****************
 13316 ;; Defined at:
 13317 ;;		line 195 in file "diskio.c"
 13318 ;; Parameters:    Size  Location     Type
 13319 ;;  cmd             1    wreg     unsigned char 
 13320 ;;  arg             4    3[COMRAM] unsigned long 
 13321 ;; Auto vars:     Size  Location     Type
 13322 ;;  cmd             1    9[COMRAM] unsigned char 
 13323 ;;  n               1    8[COMRAM] unsigned char 
 13324 ;;  res             1    7[COMRAM] unsigned char 
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      unsigned char 
 13327 ;; Registers used:
 13328 ;;		wreg, status,2, status,0, cstack
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13334 ;;      Params:         4       0       0       0       0       0       0       0       0
 13335 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13336 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13337 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13338 ;;Total ram usage:        7 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; Hardware stack levels required when called:    3
 13341 ;; This function calls:
 13342 ;;		_SPI1_Exchange8bit
 13343 ;;		_deselect
 13344 ;;		_select
 13345 ;; This function is called by:
 13346 ;;		_send_cmd
 13347 ;; This function uses a non-reentrant model
 13348 ;;
 13349                           
 13350                           	psect	text43
 13351  00509E                     __ptext43:
 13352                           	opt callstack 0
 13353  00509E                     ___send_cmd:
 13354                           	opt callstack 23
 13355                           
 13356                           ;incstack = 0
 13357                           ;___send_cmd@cmd stored from wreg
 13358  00509E  6E0A               	movwf	___send_cmd@cmd,c
 13359                           
 13360                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13361  0050A0  0E0C               	movlw	12
 13362  0050A2  180A               	xorwf	___send_cmd@cmd,w,c
 13363  0050A4  B4D8               	btfsc	status,2,c
 13364  0050A6  D009               	goto	l4220
 13365                           
 13366                           ;diskio.c: 204:   deselect();
 13367  0050A8  ECF3  F02A         	call	_deselect	;wreg free
 13368                           
 13369                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13370  0050AC  ECB5  F02A         	call	_select	;wreg free
 13371  0050B0  0900               	iorlw	0
 13372  0050B2  A4D8               	btfss	status,2,c
 13373  0050B4  D002               	goto	l4220
 13374  0050B6  0EFF               	movlw	255
 13375  0050B8  0012               	return	
 13376  0050BA                     l4220:
 13377                           
 13378                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13379  0050BA  500A               	movf	___send_cmd@cmd,w,c
 13380  0050BC  0940               	iorlw	64
 13381  0050BE  ECD6  F02A         	call	_SPI1_Exchange8bit
 13382                           
 13383                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13384  0050C2  5007               	movf	___send_cmd@arg+3,w,c
 13385  0050C4  ECD6  F02A         	call	_SPI1_Exchange8bit
 13386                           
 13387                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13388  0050C8  5006               	movf	___send_cmd@arg+2,w,c
 13389  0050CA  ECD6  F02A         	call	_SPI1_Exchange8bit
 13390                           
 13391                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13392  0050CE  5005               	movf	___send_cmd@arg+1,w,c
 13393  0050D0  ECD6  F02A         	call	_SPI1_Exchange8bit
 13394                           
 13395                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13396  0050D4  5004               	movf	___send_cmd@arg,w,c
 13397  0050D6  ECD6  F02A         	call	_SPI1_Exchange8bit
 13398                           
 13399                           ;diskio.c: 214:  n = 0x01;
 13400  0050DA  0E01               	movlw	1
 13401  0050DC  6E09               	movwf	___send_cmd@n,c
 13402                           
 13403                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13404  0050DE  500A               	movf	___send_cmd@cmd,w,c
 13405  0050E0  A4D8               	btfss	status,2,c
 13406  0050E2  D002               	goto	l4236
 13407  0050E4  0E95               	movlw	149
 13408  0050E6  6E09               	movwf	___send_cmd@n,c
 13409  0050E8                     l4236:
 13410                           
 13411                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13412  0050E8  0E08               	movlw	8
 13413  0050EA  180A               	xorwf	___send_cmd@cmd,w,c
 13414  0050EC  A4D8               	btfss	status,2,c
 13415  0050EE  D002               	goto	l4240
 13416  0050F0  0E87               	movlw	135
 13417  0050F2  6E09               	movwf	___send_cmd@n,c
 13418  0050F4                     l4240:
 13419                           
 13420                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13421  0050F4  5009               	movf	___send_cmd@n,w,c
 13422  0050F6  ECD6  F02A         	call	_SPI1_Exchange8bit
 13423                           
 13424                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13425  0050FA  0E0C               	movlw	12
 13426  0050FC  180A               	xorwf	___send_cmd@cmd,w,c
 13427  0050FE  A4D8               	btfss	status,2,c
 13428  005100  D003               	goto	l4246
 13429  005102  0EFF               	movlw	255
 13430  005104  ECD6  F02A         	call	_SPI1_Exchange8bit
 13431  005108                     l4246:
 13432                           
 13433                           ;diskio.c: 221:  n = 10;
 13434  005108  0E0A               	movlw	10
 13435  00510A  6E09               	movwf	___send_cmd@n,c
 13436  00510C                     l4248:
 13437                           
 13438                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13439  00510C  0EFF               	movlw	255
 13440  00510E  ECD6  F02A         	call	_SPI1_Exchange8bit
 13441  005112  6E08               	movwf	___send_cmd@res,c
 13442  005114  AE08               	btfss	___send_cmd@res,7,c
 13443  005116  D002               	goto	l4254
 13444  005118  2E09               	decfsz	___send_cmd@n,f,c
 13445  00511A  D7F8               	goto	l4248
 13446  00511C                     l4254:
 13447                           
 13448                           ;diskio.c: 226:  return res;
 13449  00511C  5008               	movf	___send_cmd@res,w,c
 13450  00511E  0012               	return		;funcret
 13451  005120                     __end_of___send_cmd:
 13452                           	opt callstack 0
 13453                           
 13454 ;; *************** function _select *****************
 13455 ;; Defined at:
 13456 ;;		line 106 in file "diskio.c"
 13457 ;; Parameters:    Size  Location     Type
 13458 ;;		None
 13459 ;; Auto vars:     Size  Location     Type
 13460 ;;		None
 13461 ;; Return value:  Size  Location     Type
 13462 ;;                  1    wreg      unsigned char 
 13463 ;; Registers used:
 13464 ;;		wreg, status,2, status,0, cstack
 13465 ;; Tracked objects:
 13466 ;;		On entry : 0/0
 13467 ;;		On exit  : 0/0
 13468 ;;		Unchanged: 0/0
 13469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13470 ;;      Params:         0       0       0       0       0       0       0       0       0
 13471 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13472 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13473 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13474 ;;Total ram usage:        0 bytes
 13475 ;; Hardware stack levels used:    1
 13476 ;; Hardware stack levels required when called:    2
 13477 ;; This function calls:
 13478 ;;		_SPI1_Exchange8bit
 13479 ;;		_deselect
 13480 ;;		_wait_ready
 13481 ;; This function is called by:
 13482 ;;		___send_cmd
 13483 ;;		_disk_ioctl
 13484 ;; This function uses a non-reentrant model
 13485 ;;
 13486                           
 13487                           	psect	text44
 13488  00556A                     __ptext44:
 13489                           	opt callstack 0
 13490  00556A                     _select:
 13491                           	opt callstack 23
 13492                           
 13493                           ;incstack = 0
 13494                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13495  00556A  948A               	bcf	3978,2,c	;volatile
 13496                           
 13497                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13498  00556C  0EFF               	movlw	255
 13499  00556E  ECD6  F02A         	call	_SPI1_Exchange8bit
 13500                           
 13501                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13502  005572  EC04  F02A         	call	_wait_ready	;wreg free
 13503  005576  0900               	iorlw	0
 13504  005578  B4D8               	btfsc	status,2,c
 13505  00557A  D002               	goto	l4204
 13506  00557C  0E01               	movlw	1
 13507  00557E  0012               	return	
 13508  005580                     l4204:
 13509                           
 13510                           ;diskio.c: 112:  deselect();
 13511  005580  ECF3  F02A         	call	_deselect	;wreg free
 13512                           
 13513                           ;diskio.c: 113:  return 0;
 13514  005584  0E00               	movlw	0
 13515  005586  0012               	return		;funcret
 13516  005588                     __end_of_select:
 13517                           	opt callstack 0
 13518                           
 13519 ;; *************** function _wait_ready *****************
 13520 ;; Defined at:
 13521 ;;		line 74 in file "diskio.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;		None
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  tmr             2    1[COMRAM] unsigned short 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      unsigned char 
 13528 ;; Registers used:
 13529 ;;		wreg, status,2, status,0, cstack
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0
 13536 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13538 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13539 ;;Total ram usage:        2 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    1
 13542 ;; This function calls:
 13543 ;;		_SPI1_Exchange8bit
 13544 ;; This function is called by:
 13545 ;;		_select
 13546 ;;		_xmit_datablock
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text45
 13551  005408                     __ptext45:
 13552                           	opt callstack 0
 13553  005408                     _wait_ready:
 13554                           	opt callstack 25
 13555                           
 13556                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13557                           
 13558                           ;incstack = 0
 13559  005408  0E13               	movlw	19
 13560  00540A  6E03               	movwf	wait_ready@tmr+1,c
 13561  00540C  0E88               	movlw	136
 13562  00540E  6E02               	movwf	wait_ready@tmr,c
 13563  005410  D00D               	goto	l120
 13564  005412                     l4182:
 13565                           
 13566                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13567  005412  0EFF               	movlw	255
 13568  005414  ECD6  F02A         	call	_SPI1_Exchange8bit
 13569  005418  0AFF               	xorlw	255
 13570  00541A  B4D8               	btfsc	status,2,c
 13571  00541C  D00B               	goto	u4590
 13572                           
 13573                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13574  00541E  0E42               	movlw	66
 13575  005420                     u9087:
 13576  005420  2EE8               	decfsz	wreg,f,c
 13577  005422  D7FE               	bra	u9087
 13578  005424  D000               	nop2	
 13579                           
 13580                           ;diskio.c: 81:  }
 13581  005426  0602               	decf	wait_ready@tmr,f,c
 13582  005428  A0D8               	btfss	status,0,c
 13583  00542A  0603               	decf	wait_ready@tmr+1,f,c
 13584  00542C                     l120:
 13585  00542C  5002               	movf	wait_ready@tmr,w,c
 13586  00542E  1003               	iorwf	wait_ready@tmr+1,w,c
 13587  005430  A4D8               	btfss	status,2,c
 13588  005432  D7EF               	goto	l4182
 13589  005434                     u4590:
 13590                           
 13591                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13592  005434  5002               	movf	wait_ready@tmr,w,c
 13593  005436  1003               	iorwf	wait_ready@tmr+1,w,c
 13594  005438  B4D8               	btfsc	status,2,c
 13595  00543A  D002               	goto	u4600
 13596  00543C  0E01               	movlw	1
 13597  00543E  0012               	return	
 13598  005440                     u4600:
 13599  005440  0E00               	movlw	0
 13600  005442  0012               	return		;funcret
 13601  005444                     __end_of_wait_ready:
 13602                           	opt callstack 0
 13603                           
 13604 ;; *************** function _deselect *****************
 13605 ;; Defined at:
 13606 ;;		line 93 in file "diskio.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;		None
 13609 ;; Auto vars:     Size  Location     Type
 13610 ;;		None
 13611 ;; Return value:  Size  Location     Type
 13612 ;;                  1    wreg      void 
 13613 ;; Registers used:
 13614 ;;		wreg, status,2, cstack
 13615 ;; Tracked objects:
 13616 ;;		On entry : 0/0
 13617 ;;		On exit  : 0/0
 13618 ;;		Unchanged: 0/0
 13619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13620 ;;      Params:         0       0       0       0       0       0       0       0       0
 13621 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13622 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13623 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13624 ;;Total ram usage:        0 bytes
 13625 ;; Hardware stack levels used:    1
 13626 ;; Hardware stack levels required when called:    1
 13627 ;; This function calls:
 13628 ;;		_SPI1_Exchange8bit
 13629 ;; This function is called by:
 13630 ;;		_select
 13631 ;;		___send_cmd
 13632 ;;		_disk_initialize
 13633 ;;		_disk_read
 13634 ;;		_disk_write
 13635 ;;		_disk_ioctl
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           	psect	text46
 13640  0055E6                     __ptext46:
 13641                           	opt callstack 0
 13642  0055E6                     _deselect:
 13643                           	opt callstack 23
 13644                           
 13645                           ;incstack = 0
 13646                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13647  0055E6  848A               	bsf	3978,2,c	;volatile
 13648                           
 13649                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13650  0055E8  0EFF               	movlw	255
 13651  0055EA  ECD6  F02A         	call	_SPI1_Exchange8bit
 13652  0055EE  0012               	return		;funcret
 13653  0055F0                     __end_of_deselect:
 13654                           	opt callstack 0
 13655                           
 13656 ;; *************** function _rcvr_datablock *****************
 13657 ;; Defined at:
 13658 ;;		line 123 in file "diskio.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13661 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 13662 ;;  btr             2    3[COMRAM] unsigned short 
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;  tmr             2    5[COMRAM] unsigned short 
 13665 ;;  token           1    7[COMRAM] unsigned char 
 13666 ;; Return value:  Size  Location     Type
 13667 ;;                  1    wreg      unsigned char 
 13668 ;; Registers used:
 13669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13670 ;; Tracked objects:
 13671 ;;		On entry : 0/0
 13672 ;;		On exit  : 0/0
 13673 ;;		Unchanged: 0/0
 13674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13675 ;;      Params:         4       0       0       0       0       0       0       0       0
 13676 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13677 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13678 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13679 ;;Total ram usage:        7 bytes
 13680 ;; Hardware stack levels used:    1
 13681 ;; Hardware stack levels required when called:    1
 13682 ;; This function calls:
 13683 ;;		_SPI1_Exchange8bit
 13684 ;; This function is called by:
 13685 ;;		_disk_read
 13686 ;;		_disk_ioctl
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           	psect	text47
 13691  00521A                     __ptext47:
 13692                           	opt callstack 0
 13693  00521A                     _rcvr_datablock:
 13694                           	opt callstack 26
 13695                           
 13696                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13697                           
 13698                           ;incstack = 0
 13699  00521A  0E07               	movlw	7
 13700  00521C  6E07               	movwf	rcvr_datablock@tmr+1,c
 13701  00521E  0ED0               	movlw	208
 13702  005220  6E06               	movwf	rcvr_datablock@tmr,c
 13703  005222  D00E               	goto	l138
 13704  005224                     l4306:
 13705                           
 13706                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13707  005224  0EFF               	movlw	255
 13708  005226  ECD6  F02A         	call	_SPI1_Exchange8bit
 13709  00522A  6E08               	movwf	rcvr_datablock@token,c
 13710                           
 13711                           ;diskio.c: 134:   if (token != 0xFF) break;
 13712  00522C  2808               	incf	rcvr_datablock@token,w,c
 13713  00522E  A4D8               	btfss	status,2,c
 13714  005230  D00B               	goto	u4770
 13715                           
 13716                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13717  005232  0E42               	movlw	66
 13718  005234                     u9097:
 13719  005234  2EE8               	decfsz	wreg,f,c
 13720  005236  D7FE               	bra	u9097
 13721  005238  D000               	nop2	
 13722                           
 13723                           ;diskio.c: 136:  }
 13724  00523A  0606               	decf	rcvr_datablock@tmr,f,c
 13725  00523C  A0D8               	btfss	status,0,c
 13726  00523E  0607               	decf	rcvr_datablock@tmr+1,f,c
 13727  005240                     l138:
 13728  005240  5006               	movf	rcvr_datablock@tmr,w,c
 13729  005242  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13730  005244  A4D8               	btfss	status,2,c
 13731  005246  D7EE               	goto	l4306
 13732  005248                     u4770:
 13733                           
 13734                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 13735  005248  0EFE               	movlw	254
 13736  00524A  1808               	xorwf	rcvr_datablock@token,w,c
 13737  00524C  B4D8               	btfsc	status,2,c
 13738  00524E  D002               	goto	l4322
 13739  005250  0E00               	movlw	0
 13740  005252  0012               	return	
 13741  005254                     l4322:
 13742                           
 13743                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 13744  005254  0EFF               	movlw	255
 13745  005256  ECD6  F02A         	call	_SPI1_Exchange8bit
 13746  00525A  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 13747  00525E  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 13748  005262  6EDF               	movwf	indf2,c
 13749  005264  4A02               	infsnz	rcvr_datablock@buff,f,c
 13750  005266  2A03               	incf	rcvr_datablock@buff+1,f,c
 13751  005268  0604               	decf	rcvr_datablock@btr,f,c
 13752  00526A  A0D8               	btfss	status,0,c
 13753  00526C  0605               	decf	rcvr_datablock@btr+1,f,c
 13754  00526E  5004               	movf	rcvr_datablock@btr,w,c
 13755  005270  1005               	iorwf	rcvr_datablock@btr+1,w,c
 13756  005272  A4D8               	btfss	status,2,c
 13757  005274  D7EF               	goto	l4322
 13758                           
 13759                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 13760  005276  0EFF               	movlw	255
 13761  005278  ECD6  F02A         	call	_SPI1_Exchange8bit
 13762                           
 13763                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 13764  00527C  0EFF               	movlw	255
 13765  00527E  ECD6  F02A         	call	_SPI1_Exchange8bit
 13766                           
 13767                           ;diskio.c: 145:  return 1;
 13768  005282  0E01               	movlw	1
 13769  005284  0012               	return		;funcret
 13770  005286                     __end_of_rcvr_datablock:
 13771                           	opt callstack 0
 13772                           
 13773 ;; *************** function _SPI1_Exchange8bit *****************
 13774 ;; Defined at:
 13775 ;;		line 90 in file "mcc_generated_files/spi1.c"
 13776 ;; Parameters:    Size  Location     Type
 13777 ;;  data            1    wreg     unsigned char 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  data            1    0[COMRAM] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  1    wreg      unsigned char 
 13782 ;; Registers used:
 13783 ;;		wreg, status,2
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13789 ;;      Params:         0       0       0       0       0       0       0       0       0
 13790 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13792 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13793 ;;Total ram usage:        1 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; This function calls:
 13796 ;;		Nothing
 13797 ;; This function is called by:
 13798 ;;		_wait_ready
 13799 ;;		_deselect
 13800 ;;		_select
 13801 ;;		_rcvr_datablock
 13802 ;;		_xmit_datablock
 13803 ;;		___send_cmd
 13804 ;;		_disk_initialize
 13805 ;;		_disk_ioctl
 13806 ;;		_SPI1_Exchange8bitBuffer
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           	psect	text48
 13811  0055AC                     __ptext48:
 13812                           	opt callstack 0
 13813  0055AC                     _SPI1_Exchange8bit:
 13814                           	opt callstack 25
 13815                           
 13816                           ;incstack = 0
 13817                           ;SPI1_Exchange8bit@data stored from wreg
 13818  0055AC  6E01               	movwf	SPI1_Exchange8bit@data,c
 13819                           
 13820                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 13821  0055AE  9EC6               	bcf	4038,7,c	;volatile
 13822                           
 13823                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 13824  0055B0  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 13825  0055B4                     l863:
 13826                           
 13827                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 13828  0055B4  A0C7               	btfss	4039,0,c	;volatile
 13829  0055B6  D7FE               	goto	l863
 13830                           
 13831                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 13832  0055B8  50C9               	movf	4041,w,c	;volatile
 13833  0055BA  0012               	return		;funcret
 13834  0055BC                     __end_of_SPI1_Exchange8bit:
 13835                           	opt callstack 0
 13836                           
 13837 ;; *************** function ___delay_sec *****************
 13838 ;; Defined at:
 13839 ;;		line 9 in file "Main.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;  sec             1    wreg     unsigned char 
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;  sec             1    3[COMRAM] unsigned char 
 13844 ;;  i               1    4[COMRAM] unsigned char 
 13845 ;; Return value:  Size  Location     Type
 13846 ;;                  1    wreg      void 
 13847 ;; Registers used:
 13848 ;;		wreg, status,2, status,0, prodl, prodh
 13849 ;; Tracked objects:
 13850 ;;		On entry : 0/0
 13851 ;;		On exit  : 0/0
 13852 ;;		Unchanged: 0/0
 13853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13854 ;;      Params:         0       0       0       0       0       0       0       0       0
 13855 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13856 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13857 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13858 ;;Total ram usage:        5 bytes
 13859 ;; Hardware stack levels used:    1
 13860 ;; This function calls:
 13861 ;;		Nothing
 13862 ;; This function is called by:
 13863 ;;		_main
 13864 ;; This function uses a non-reentrant model
 13865 ;;
 13866                           
 13867                           	psect	text49
 13868  00547E                     __ptext49:
 13869                           	opt callstack 0
 13870  00547E                     ___delay_sec:
 13871                           	opt callstack 30
 13872                           
 13873                           ;incstack = 0
 13874                           ;___delay_sec@sec stored from wreg
 13875  00547E  6E04               	movwf	___delay_sec@sec,c
 13876                           
 13877                           ;Main.c: 10:     for(char i=0;i<=(50*sec);i++) {
 13878  005480  0E00               	movlw	0
 13879  005482  6E05               	movwf	___delay_sec@i,c
 13880  005484  D008               	goto	l6026
 13881  005486                     l6022:
 13882                           
 13883                           ;Main.c: 11:         _delay((unsigned long)((20)*(8000000/4000.0)));
 13884  005486  0E34               	movlw	52
 13885  005488  6E01               	movwf	??___delay_sec& (0+255),c
 13886  00548A  0EF2               	movlw	242
 13887  00548C                     u9107:
 13888  00548C  2EE8               	decfsz	wreg,f,c
 13889  00548E  D7FE               	bra	u9107
 13890  005490  2E01               	decfsz	??___delay_sec& (0+255),f,c
 13891  005492  D7FC               	bra	u9107
 13892                           
 13893                           ;Main.c: 12:     }
 13894  005494  2A05               	incf	___delay_sec@i,f,c
 13895  005496                     l6026:
 13896  005496  5005               	movf	___delay_sec@i,w,c
 13897  005498  6E01               	movwf	??___delay_sec& (0+255),c
 13898  00549A  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 13899  00549C  5004               	movf	___delay_sec@sec,w,c
 13900  00549E  0D32               	mullw	50
 13901  0054A0  5001               	movf	??___delay_sec,w,c
 13902  0054A2  5CF3               	subwf	prodl,w,c
 13903  0054A4  50F4               	movf	prodh,w,c
 13904  0054A6  0A80               	xorlw	128
 13905  0054A8  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 13906  0054AA  5002               	movf	??___delay_sec+1,w,c
 13907  0054AC  0A80               	xorlw	128
 13908  0054AE  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 13909  0054B0  A0D8               	btfss	status,0,c
 13910  0054B2  0012               	return	
 13911  0054B4  D7E8               	goto	l6022
 13912  0054B6                     __end_of___delay_sec:
 13913                           	opt callstack 0
 13914                           
 13915 ;; *************** function _SYSTEM_Initialize *****************
 13916 ;; Defined at:
 13917 ;;		line 116 in file "mcc_generated_files/mcc.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;		None
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;		None
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  1    wreg      void 
 13924 ;; Registers used:
 13925 ;;		wreg, status,2, cstack
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13931 ;;      Params:         0       0       0       0       0       0       0       0       0
 13932 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13933 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13934 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13935 ;;Total ram usage:        0 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    1
 13938 ;; This function calls:
 13939 ;;		_OSCILLATOR_Initialize
 13940 ;;		_PIN_MANAGER_Initialize
 13941 ;;		_SPI1_Initialize
 13942 ;; This function is called by:
 13943 ;;		_main
 13944 ;; This function uses a non-reentrant model
 13945 ;;
 13946                           
 13947                           	psect	text50
 13948  0055CA                     __ptext50:
 13949                           	opt callstack 0
 13950  0055CA                     _SYSTEM_Initialize:
 13951                           	opt callstack 29
 13952                           
 13953                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 13954                           
 13955                           ;incstack = 0
 13956  0055CA  EC5B  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 13957                           
 13958                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 13959  0055CE  ECCD  F02A         	call	_OSCILLATOR_Initialize	;wreg free
 13960                           
 13961                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 13962  0055D2  ECEC  F02A         	call	_SPI1_Initialize	;wreg free
 13963  0055D6  0012               	return		;funcret
 13964  0055D8                     __end_of_SYSTEM_Initialize:
 13965                           	opt callstack 0
 13966                           
 13967 ;; *************** function _SPI1_Initialize *****************
 13968 ;; Defined at:
 13969 ;;		line 63 in file "mcc_generated_files/spi1.c"
 13970 ;; Parameters:    Size  Location     Type
 13971 ;;		None
 13972 ;; Auto vars:     Size  Location     Type
 13973 ;;		None
 13974 ;; Return value:  Size  Location     Type
 13975 ;;                  1    wreg      void 
 13976 ;; Registers used:
 13977 ;;		wreg, status,2
 13978 ;; Tracked objects:
 13979 ;;		On entry : 0/0
 13980 ;;		On exit  : 0/0
 13981 ;;		Unchanged: 0/0
 13982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13983 ;;      Params:         0       0       0       0       0       0       0       0       0
 13984 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13985 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13986 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13987 ;;Total ram usage:        0 bytes
 13988 ;; Hardware stack levels used:    1
 13989 ;; This function calls:
 13990 ;;		Nothing
 13991 ;; This function is called by:
 13992 ;;		_disk_initialize
 13993 ;;		_SYSTEM_Initialize
 13994 ;; This function uses a non-reentrant model
 13995 ;;
 13996                           
 13997                           	psect	text51
 13998  0055D8                     __ptext51:
 13999                           	opt callstack 0
 14000  0055D8                     _SPI1_Initialize:
 14001                           	opt callstack 27
 14002                           
 14003                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14004                           
 14005                           ;incstack = 0
 14006  0055D8  0E40               	movlw	64
 14007  0055DA  6EC7               	movwf	4039,c	;volatile
 14008                           
 14009                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14010  0055DC  0E22               	movlw	34
 14011  0055DE  6EC6               	movwf	4038,c	;volatile
 14012                           
 14013                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14014  0055E0  0E00               	movlw	0
 14015  0055E2  6EC8               	movwf	4040,c	;volatile
 14016  0055E4  0012               	return		;funcret
 14017  0055E6                     __end_of_SPI1_Initialize:
 14018                           	opt callstack 0
 14019                           
 14020 ;; *************** function _PIN_MANAGER_Initialize *****************
 14021 ;; Defined at:
 14022 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14023 ;; Parameters:    Size  Location     Type
 14024 ;;		None
 14025 ;; Auto vars:     Size  Location     Type
 14026 ;;		None
 14027 ;; Return value:  Size  Location     Type
 14028 ;;                  1    wreg      void 
 14029 ;; Registers used:
 14030 ;;		wreg, status,2
 14031 ;; Tracked objects:
 14032 ;;		On entry : 0/0
 14033 ;;		On exit  : 0/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14036 ;;      Params:         0       0       0       0       0       0       0       0       0
 14037 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14038 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14039 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14040 ;;Total ram usage:        0 bytes
 14041 ;; Hardware stack levels used:    1
 14042 ;; This function calls:
 14043 ;;		Nothing
 14044 ;; This function is called by:
 14045 ;;		_SYSTEM_Initialize
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           	psect	text52
 14050  0054B6                     __ptext52:
 14051                           	opt callstack 0
 14052  0054B6                     _PIN_MANAGER_Initialize:
 14053                           	opt callstack 29
 14054                           
 14055                           ;mcc_generated_files/pin_manager.c: 56:     LATE = 0x00;
 14056                           
 14057                           ;incstack = 0
 14058  0054B6  0E00               	movlw	0
 14059  0054B8  6E8D               	movwf	3981,c	;volatile
 14060                           
 14061                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 14062  0054BA  0E00               	movlw	0
 14063  0054BC  6E8C               	movwf	3980,c	;volatile
 14064                           
 14065                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14066  0054BE  0E04               	movlw	4
 14067  0054C0  6E8A               	movwf	3978,c	;volatile
 14068                           
 14069                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14070  0054C2  0E00               	movlw	0
 14071  0054C4  6E8B               	movwf	3979,c	;volatile
 14072                           
 14073                           ;mcc_generated_files/pin_manager.c: 65:     TRISE = 0x07;
 14074  0054C6  0E07               	movlw	7
 14075  0054C8  6E96               	movwf	3990,c	;volatile
 14076                           
 14077                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14078  0054CA  0EF1               	movlw	241
 14079  0054CC  6E93               	movwf	3987,c	;volatile
 14080                           
 14081                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14082  0054CE  0EC7               	movlw	199
 14083  0054D0  6E94               	movwf	3988,c	;volatile
 14084                           
 14085                           ;mcc_generated_files/pin_manager.c: 69:     TRISD = 0x00;
 14086  0054D2  0E00               	movlw	0
 14087  0054D4  6E95               	movwf	3989,c	;volatile
 14088                           
 14089                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14090  0054D6  0EC4               	movlw	196
 14091  0054D8  010F               	movlb	15	; () banked
 14092  0054DA  6F5D               	movwf	93,b	;volatile
 14093                           
 14094                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14095  0054DC  0E30               	movlw	48
 14096  0054DE  6F5C               	movwf	92,b	;volatile
 14097                           
 14098                           ;mcc_generated_files/pin_manager.c: 76:     ANSELD = 0x00;
 14099  0054E0  0E00               	movlw	0
 14100  0054E2  6F5E               	movwf	94,b	;volatile
 14101                           
 14102                           ;mcc_generated_files/pin_manager.c: 77:     ANSELE = 0x07;
 14103  0054E4  0E07               	movlw	7
 14104  0054E6  6F5F               	movwf	95,b	;volatile
 14105                           
 14106                           ; BSR set to: 15
 14107                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14108  0054E8  6885               	setf	3973,c	;volatile
 14109                           
 14110                           ; BSR set to: 15
 14111                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14112  0054EA  9EF1               	bcf	4081,7,c	;volatile
 14113                           
 14114                           ; BSR set to: 15
 14115  0054EC  0012               	return		;funcret
 14116  0054EE                     __end_of_PIN_MANAGER_Initialize:
 14117                           	opt callstack 0
 14118                           
 14119 ;; *************** function _OSCILLATOR_Initialize *****************
 14120 ;; Defined at:
 14121 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;		None
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;		None
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      void 
 14128 ;; Registers used:
 14129 ;;		wreg, status,2
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14135 ;;      Params:         0       0       0       0       0       0       0       0       0
 14136 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14137 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14138 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14139 ;;Total ram usage:        0 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; This function calls:
 14142 ;;		Nothing
 14143 ;; This function is called by:
 14144 ;;		_SYSTEM_Initialize
 14145 ;; This function uses a non-reentrant model
 14146 ;;
 14147                           
 14148                           	psect	text53
 14149  00559A                     __ptext53:
 14150                           	opt callstack 0
 14151  00559A                     _OSCILLATOR_Initialize:
 14152                           	opt callstack 29
 14153                           
 14154                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14155                           
 14156                           ; BSR set to: 15
 14157                           ;incstack = 0
 14158  00559A  0E60               	movlw	96
 14159  00559C  6ED3               	movwf	4051,c	;volatile
 14160                           
 14161                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14162  00559E  0E00               	movlw	0
 14163  0055A0  6ED2               	movwf	4050,c	;volatile
 14164                           
 14165                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14166  0055A2  0E00               	movlw	0
 14167  0055A4  6E9B               	movwf	3995,c	;volatile
 14168                           
 14169                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14170  0055A6  0E00               	movlw	0
 14171  0055A8  6EB5               	movwf	4021,c	;volatile
 14172  0055AA  0012               	return		;funcret
 14173  0055AC                     __end_of_OSCILLATOR_Initialize:
 14174                           	opt callstack 0
 14175                           
 14176 ;; *************** function _Error *****************
 14177 ;; Defined at:
 14178 ;;		line 11 in file "./Errores.h"
 14179 ;; Parameters:    Size  Location     Type
 14180 ;;  a               1    wreg     unsigned char 
 14181 ;; Auto vars:     Size  Location     Type
 14182 ;;  a               1    0[COMRAM] unsigned char 
 14183 ;; Return value:  Size  Location     Type
 14184 ;;                  1    wreg      void 
 14185 ;; Registers used:
 14186 ;;		wreg, status,2, status,0
 14187 ;; Tracked objects:
 14188 ;;		On entry : 0/0
 14189 ;;		On exit  : 0/0
 14190 ;;		Unchanged: 0/0
 14191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14192 ;;      Params:         0       0       0       0       0       0       0       0       0
 14193 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14194 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14195 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14196 ;;Total ram usage:        1 bytes
 14197 ;; Hardware stack levels used:    1
 14198 ;; This function calls:
 14199 ;;		Nothing
 14200 ;; This function is called by:
 14201 ;;		_main
 14202 ;; This function uses a non-reentrant model
 14203 ;;
 14204                           
 14205                           	psect	text54
 14206  004BF2                     __ptext54:
 14207                           	opt callstack 0
 14208  004BF2                     _Error:
 14209                           	opt callstack 30
 14210                           
 14211                           ;incstack = 0
 14212                           ;Error@a stored from wreg
 14213  004BF2  6E01               	movwf	Error@a,c
 14214                           
 14215                           ;./Errores.h: 12:     if (a == 1){
 14216  004BF4  0401               	decf	Error@a,w,c
 14217  004BF6  A4D8               	btfss	status,2,c
 14218  004BF8  D008               	goto	l5934
 14219                           
 14220                           ;./Errores.h: 13:         LATAbits.LATA0 ^= 1;
 14221  004BFA  7089               	btg	3977,0,c	;volatile
 14222                           
 14223                           ;./Errores.h: 14:         LATAbits.LATA1 ^= 1;
 14224  004BFC  7289               	btg	3977,1,c	;volatile
 14225                           
 14226                           ;./Errores.h: 15:         LATAbits.LATA2 ^= 1;
 14227  004BFE  7489               	btg	3977,2,c	;volatile
 14228                           
 14229                           ;./Errores.h: 16:         LATAbits.LATA3 ^= 1;
 14230  004C00  7689               	btg	3977,3,c	;volatile
 14231                           
 14232                           ;./Errores.h: 17:         LATAbits.LATA4 ^= 1;
 14233  004C02  7889               	btg	3977,4,c	;volatile
 14234                           
 14235                           ;./Errores.h: 18:         LATAbits.LATA5 ^= 1;
 14236  004C04  7A89               	btg	3977,5,c	;volatile
 14237                           
 14238                           ;./Errores.h: 19:         LATAbits.LATA6 ^= 1;
 14239  004C06  7C89               	btg	3977,6,c	;volatile
 14240                           
 14241                           ;./Errores.h: 20:         LATAbits.LATA7 ^= 1;
 14242  004C08  7E89               	btg	3977,7,c	;volatile
 14243  004C0A                     l5934:
 14244                           
 14245                           ;./Errores.h: 22:     if (a == 2){
 14246  004C0A  0E02               	movlw	2
 14247  004C0C  1801               	xorwf	Error@a,w,c
 14248  004C0E  A4D8               	btfss	status,2,c
 14249  004C10  D008               	goto	l5940
 14250                           
 14251                           ;./Errores.h: 23:         LATAbits.LATA0 ^= 0;
 14252  004C12  5089               	movf	3977,w,c	;volatile
 14253                           
 14254                           ;./Errores.h: 24:         LATAbits.LATA1 ^= 0;
 14255  004C14  5089               	movf	3977,w,c	;volatile
 14256                           
 14257                           ;./Errores.h: 25:         LATAbits.LATA2 ^= 0;
 14258  004C16  5089               	movf	3977,w,c	;volatile
 14259                           
 14260                           ;./Errores.h: 26:         LATAbits.LATA3 ^= 0;
 14261  004C18  5089               	movf	3977,w,c	;volatile
 14262                           
 14263                           ;./Errores.h: 27:         LATAbits.LATA4 ^= 0;
 14264  004C1A  5089               	movf	3977,w,c	;volatile
 14265                           
 14266                           ;./Errores.h: 28:         LATAbits.LATA5 ^= 0;
 14267  004C1C  5089               	movf	3977,w,c	;volatile
 14268                           
 14269                           ;./Errores.h: 29:         LATAbits.LATA6 ^= 0;
 14270  004C1E  5089               	movf	3977,w,c	;volatile
 14271                           
 14272                           ;./Errores.h: 30:         LATAbits.LATA7 ^= 1;
 14273  004C20  7E89               	btg	3977,7,c	;volatile
 14274  004C22                     l5940:
 14275                           
 14276                           ;./Errores.h: 32:     if (a == 3){
 14277  004C22  0E03               	movlw	3
 14278  004C24  1801               	xorwf	Error@a,w,c
 14279  004C26  A4D8               	btfss	status,2,c
 14280  004C28  D008               	goto	l5948
 14281                           
 14282                           ;./Errores.h: 33:         LATAbits.LATA0 ^= 0;
 14283  004C2A  5089               	movf	3977,w,c	;volatile
 14284                           
 14285                           ;./Errores.h: 34:         LATAbits.LATA1 ^= 0;
 14286  004C2C  5089               	movf	3977,w,c	;volatile
 14287                           
 14288                           ;./Errores.h: 35:         LATAbits.LATA2 ^= 0;
 14289  004C2E  5089               	movf	3977,w,c	;volatile
 14290                           
 14291                           ;./Errores.h: 36:         LATAbits.LATA3 ^= 0;
 14292  004C30  5089               	movf	3977,w,c	;volatile
 14293                           
 14294                           ;./Errores.h: 37:         LATAbits.LATA4 ^= 0;
 14295  004C32  5089               	movf	3977,w,c	;volatile
 14296                           
 14297                           ;./Errores.h: 38:         LATAbits.LATA5 ^= 0;
 14298  004C34  5089               	movf	3977,w,c	;volatile
 14299                           
 14300                           ;./Errores.h: 39:         LATAbits.LATA6 ^= 1;
 14301  004C36  7C89               	btg	3977,6,c	;volatile
 14302                           
 14303                           ;./Errores.h: 40:         LATAbits.LATA7 ^= 1;
 14304  004C38  7E89               	btg	3977,7,c	;volatile
 14305  004C3A                     l5948:
 14306                           
 14307                           ;./Errores.h: 42:     if (a == 4){
 14308  004C3A  0E04               	movlw	4
 14309  004C3C  1801               	xorwf	Error@a,w,c
 14310  004C3E  A4D8               	btfss	status,2,c
 14311  004C40  D008               	goto	l5958
 14312                           
 14313                           ;./Errores.h: 43:         LATAbits.LATA0 ^= 0;
 14314  004C42  5089               	movf	3977,w,c	;volatile
 14315                           
 14316                           ;./Errores.h: 44:         LATAbits.LATA1 ^= 0;
 14317  004C44  5089               	movf	3977,w,c	;volatile
 14318                           
 14319                           ;./Errores.h: 45:         LATAbits.LATA2 ^= 0;
 14320  004C46  5089               	movf	3977,w,c	;volatile
 14321                           
 14322                           ;./Errores.h: 46:         LATAbits.LATA3 ^= 0;
 14323  004C48  5089               	movf	3977,w,c	;volatile
 14324                           
 14325                           ;./Errores.h: 47:         LATAbits.LATA4 ^= 0;
 14326  004C4A  5089               	movf	3977,w,c	;volatile
 14327                           
 14328                           ;./Errores.h: 48:         LATAbits.LATA5 ^= 1;
 14329  004C4C  7A89               	btg	3977,5,c	;volatile
 14330                           
 14331                           ;./Errores.h: 49:         LATAbits.LATA6 ^= 1;
 14332  004C4E  7C89               	btg	3977,6,c	;volatile
 14333                           
 14334                           ;./Errores.h: 50:         LATAbits.LATA7 ^= 1;
 14335  004C50  7E89               	btg	3977,7,c	;volatile
 14336  004C52                     l5958:
 14337                           
 14338                           ;./Errores.h: 52:     if (a == 5){
 14339  004C52  0E05               	movlw	5
 14340  004C54  1801               	xorwf	Error@a,w,c
 14341  004C56  A4D8               	btfss	status,2,c
 14342  004C58  D008               	goto	l5970
 14343                           
 14344                           ;./Errores.h: 53:         LATAbits.LATA0 ^= 0;
 14345  004C5A  5089               	movf	3977,w,c	;volatile
 14346                           
 14347                           ;./Errores.h: 54:         LATAbits.LATA1 ^= 0;
 14348  004C5C  5089               	movf	3977,w,c	;volatile
 14349                           
 14350                           ;./Errores.h: 55:         LATAbits.LATA2 ^= 0;
 14351  004C5E  5089               	movf	3977,w,c	;volatile
 14352                           
 14353                           ;./Errores.h: 56:         LATAbits.LATA3 ^= 0;
 14354  004C60  5089               	movf	3977,w,c	;volatile
 14355                           
 14356                           ;./Errores.h: 57:         LATAbits.LATA4 ^= 1;
 14357  004C62  7889               	btg	3977,4,c	;volatile
 14358                           
 14359                           ;./Errores.h: 58:         LATAbits.LATA5 ^= 1;
 14360  004C64  7A89               	btg	3977,5,c	;volatile
 14361                           
 14362                           ;./Errores.h: 59:         LATAbits.LATA6 ^= 1;
 14363  004C66  7C89               	btg	3977,6,c	;volatile
 14364                           
 14365                           ;./Errores.h: 60:         LATAbits.LATA7 ^= 1;
 14366  004C68  7E89               	btg	3977,7,c	;volatile
 14367  004C6A                     l5970:
 14368                           
 14369                           ;./Errores.h: 62:     if (a == 6){
 14370  004C6A  0E06               	movlw	6
 14371  004C6C  1801               	xorwf	Error@a,w,c
 14372  004C6E  A4D8               	btfss	status,2,c
 14373  004C70  D008               	goto	l5984
 14374                           
 14375                           ;./Errores.h: 63:         LATAbits.LATA0 ^= 0;
 14376  004C72  5089               	movf	3977,w,c	;volatile
 14377                           
 14378                           ;./Errores.h: 64:         LATAbits.LATA1 ^= 0;
 14379  004C74  5089               	movf	3977,w,c	;volatile
 14380                           
 14381                           ;./Errores.h: 65:         LATAbits.LATA2 ^= 0;
 14382  004C76  5089               	movf	3977,w,c	;volatile
 14383                           
 14384                           ;./Errores.h: 66:         LATAbits.LATA3 ^= 1;
 14385  004C78  7689               	btg	3977,3,c	;volatile
 14386                           
 14387                           ;./Errores.h: 67:         LATAbits.LATA4 ^= 1;
 14388  004C7A  7889               	btg	3977,4,c	;volatile
 14389                           
 14390                           ;./Errores.h: 68:         LATAbits.LATA5 ^= 1;
 14391  004C7C  7A89               	btg	3977,5,c	;volatile
 14392                           
 14393                           ;./Errores.h: 69:         LATAbits.LATA6 ^= 1;
 14394  004C7E  7C89               	btg	3977,6,c	;volatile
 14395                           
 14396                           ;./Errores.h: 70:         LATAbits.LATA7 ^= 1;
 14397  004C80  7E89               	btg	3977,7,c	;volatile
 14398  004C82                     l5984:
 14399                           
 14400                           ;./Errores.h: 72:     if (a == 7){
 14401  004C82  0E07               	movlw	7
 14402  004C84  1801               	xorwf	Error@a,w,c
 14403  004C86  A4D8               	btfss	status,2,c
 14404  004C88  D008               	goto	l6000
 14405                           
 14406                           ;./Errores.h: 73:         LATAbits.LATA0 ^= 0;
 14407  004C8A  5089               	movf	3977,w,c	;volatile
 14408                           
 14409                           ;./Errores.h: 74:         LATAbits.LATA1 ^= 0;
 14410  004C8C  5089               	movf	3977,w,c	;volatile
 14411                           
 14412                           ;./Errores.h: 75:         LATAbits.LATA2 ^= 1;
 14413  004C8E  7489               	btg	3977,2,c	;volatile
 14414                           
 14415                           ;./Errores.h: 76:         LATAbits.LATA3 ^= 1;
 14416  004C90  7689               	btg	3977,3,c	;volatile
 14417                           
 14418                           ;./Errores.h: 77:         LATAbits.LATA4 ^= 1;
 14419  004C92  7889               	btg	3977,4,c	;volatile
 14420                           
 14421                           ;./Errores.h: 78:         LATAbits.LATA5 ^= 1;
 14422  004C94  7A89               	btg	3977,5,c	;volatile
 14423                           
 14424                           ;./Errores.h: 79:         LATAbits.LATA6 ^= 1;
 14425  004C96  7C89               	btg	3977,6,c	;volatile
 14426                           
 14427                           ;./Errores.h: 80:         LATAbits.LATA7 ^= 1;
 14428  004C98  7E89               	btg	3977,7,c	;volatile
 14429  004C9A                     l6000:
 14430                           
 14431                           ;./Errores.h: 82:     if (a == 11){
 14432  004C9A  0E0B               	movlw	11
 14433  004C9C  1801               	xorwf	Error@a,w,c
 14434  004C9E  A4D8               	btfss	status,2,c
 14435  004CA0  D008               	goto	l6016
 14436                           
 14437                           ;./Errores.h: 83:         LATAbits.LATA0 ^= 0;
 14438  004CA2  5089               	movf	3977,w,c	;volatile
 14439                           
 14440                           ;./Errores.h: 84:         LATAbits.LATA1 ^= 1;
 14441  004CA4  7289               	btg	3977,1,c	;volatile
 14442                           
 14443                           ;./Errores.h: 85:         LATAbits.LATA2 ^= 0;
 14444  004CA6  5089               	movf	3977,w,c	;volatile
 14445                           
 14446                           ;./Errores.h: 86:         LATAbits.LATA3 ^= 0;
 14447  004CA8  5089               	movf	3977,w,c	;volatile
 14448                           
 14449                           ;./Errores.h: 87:         LATAbits.LATA4 ^= 0;
 14450  004CAA  5089               	movf	3977,w,c	;volatile
 14451                           
 14452                           ;./Errores.h: 88:         LATAbits.LATA5 ^= 1;
 14453  004CAC  7A89               	btg	3977,5,c	;volatile
 14454                           
 14455                           ;./Errores.h: 89:         LATAbits.LATA6 ^= 0;
 14456  004CAE  5089               	movf	3977,w,c	;volatile
 14457                           
 14458                           ;./Errores.h: 90:         LATAbits.LATA7 ^= 1;
 14459  004CB0  7E89               	btg	3977,7,c	;volatile
 14460  004CB2                     l6016:
 14461                           
 14462                           ;./Errores.h: 92:     if(a == 15) {
 14463  004CB2  0E0F               	movlw	15
 14464  004CB4  1801               	xorwf	Error@a,w,c
 14465  004CB6  A4D8               	btfss	status,2,c
 14466  004CB8  0012               	return	
 14467                           
 14468                           ;./Errores.h: 93:         LATAbits.LATA0 ^= 0;
 14469  004CBA  5089               	movf	3977,w,c	;volatile
 14470  004CBC  0012               	return		;funcret
 14471  004CBE                     __end_of_Error:
 14472                           	opt callstack 0
 14473                           
 14474                           	psect	rparam
 14475  0000                     tosu	equ	0xFFF
 14476                           tosh	equ	0xFFE
 14477                           tosl	equ	0xFFD
 14478                           stkptr	equ	0xFFC
 14479                           pclatu	equ	0xFFB
 14480                           pclath	equ	0xFFA
 14481                           pcl	equ	0xFF9
 14482                           tblptru	equ	0xFF8
 14483                           tblptrh	equ	0xFF7
 14484                           tblptrl	equ	0xFF6
 14485                           tablat	equ	0xFF5
 14486                           prodh	equ	0xFF4
 14487                           prodl	equ	0xFF3
 14488                           indf0	equ	0xFEF
 14489                           postinc0	equ	0xFEE
 14490                           postdec0	equ	0xFED
 14491                           preinc0	equ	0xFEC
 14492                           plusw0	equ	0xFEB
 14493                           fsr0h	equ	0xFEA
 14494                           fsr0l	equ	0xFE9
 14495                           wreg	equ	0xFE8
 14496                           indf1	equ	0xFE7
 14497                           postinc1	equ	0xFE6
 14498                           postdec1	equ	0xFE5
 14499                           preinc1	equ	0xFE4
 14500                           plusw1	equ	0xFE3
 14501                           fsr1h	equ	0xFE2
 14502                           fsr1l	equ	0xFE1
 14503                           bsr	equ	0xFE0
 14504                           indf2	equ	0xFDF
 14505                           postinc2	equ	0xFDE
 14506                           postdec2	equ	0xFDD
 14507                           preinc2	equ	0xFDC
 14508                           plusw2	equ	0xFDB
 14509                           fsr2h	equ	0xFDA
 14510                           fsr2l	equ	0xFD9
 14511                           status	equ	0xFD8


Data Sizes:
    Strings     42
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    114     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> main@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 16
		 -> STR_4(CODE[16]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[16]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S479$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S479$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S479$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[16]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[16]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[16]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[16]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S136$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S136$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  430195
                                            112 BANK0      2     2      0
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (1) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (3) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (1) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (4) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Error                                                1     1      0     198
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   ___delay_sec
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI1_Exchange8bit
           ___wmul
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_set
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _validate
         _disk_status
     _validate
       _disk_status
   _f_lseek
     ___lldiv
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _get_fat
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _validate
       _disk_status
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _mem_cpy
       _mem_set
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _mem_cmp
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _dir_sdi
         _clust2sect
           ___lmul
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _ld_clust
     _ld_clust
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _remove_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _st_clust
   _f_write
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _disk_write
       _deselect
         _SPI1_Exchange8bit
       _send_cmd
         ___send_cmd
           _SPI1_Exchange8bit
           _deselect
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _xmit_datablock
         _SPI1_Exchange8bit
         _wait_ready
           _SPI1_Exchange8bit
     _mem_cpy
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _sync_window
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
     _validate
       _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7       6        0.0%
DATA                 0      0     325       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 15 17:23:26 2019

              _SPI1_Exchange8bit 55AC                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                      disk_ioctl@n 0037  
            ___wmul@multiplicand 0003                   ??_dir_register 0060  
               disk_write@sector 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                    create_name@dp 0009  
                  create_name@ni 0016                     __CFG_CP2$OFF 000000  
                  create_name@si 0013                   create_chain@cs 0069  
                   __CFG_CP3$OFF 000000                   create_chain@fs 0056  
                    __CFG_LVP$ON 000000                              l100 4592  
                            l120 542C                              l212 4B3A  
                            l216 4B44                              l217 4B58  
                            l233 45B8                              l138 5240  
                            l234 45C0                              l235 45D4  
                            l420 345E                              l229 45AE  
                            l173 3B9E                              l405 41BA  
                            l239 4634                              l360 2C64  
                            l184 3C66                              l345 3F38  
                            l258 20FE                              l355 2C5A  
                            l195 3D64                              l452 380A  
                            l381 2420                              l437 363A  
                            l358 2FAA                              l198 3D34  
                            l439 3632                              l623 09CC  
                            l535 3A14                              l650 100C  
                            l642 0CAE                              l636 0B14  
                            l572 42BC                              l494 4796  
                            l559 3B6A                              l920 508C  
                            l770 19C6                              l691 3228  
                            l684 309E                              l693 3210  
                            l685 3096                              l774 1C56  
                            l863 55B4                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _Fil 00D7  
            ??_SPI1_Exchange8bit 0001                     disk_read@cmd 001C  
                 ??_create_chain 005C                              wreg 000FE8  
              disk_initialize@ty 001A                   create_name@sfn 001B  
                create_chain@ncl 0065                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l5002 2ABA                             l4204 5580  
                           l4220 50BA                             l4300 53B4  
                           l5100 3CBE                             l5110 3D04  
                           l5014 2B10                             l5022 2BB6  
                           l6000 4C9A                             l4240 50F4  
                           l5104 3CCC                             l5040 3BAA  
                           l4322 5254                             l4306 5224  
                           l4410 4BDE                             l5018 2B58  
                           l5210 4764                             l4236 50E8  
                           l5108 3CF2                             l5044 3BB4  
                           l5212 476C                             l5140 4CD0  
                           l6022 5486                             l4182 5412  
                           l4254 511C                             l4246 5108  
                           l4270 51C2                             l5062 3C02  
                           l5150 4D34                             l5310 3A0A  
                           l6102 306E                             l6016 4CB2  
                           l4248 510C                             l4264 51AC  
                           l4432 402A                             l5048 3BBC  
                           l6040 4E56                             l5240 47BE  
                           l6026 5496                             l4426 3FB0  
                           l4602 52FC                             l4506 2EB4  
                           l6210 1B96                             l5074 3C36  
                           l5410 4998                             l6050 4E98  
                           l5306 39F0                             l5226 518C  
                           l6106 307A                             l4284 5216  
                           l4372 4696                             l4436 4036  
                           l4444 4090                             l4612 54F8  
                           l4516 2F7E                             l5092 3C96  
                           l5412 499C                             l6060 4EC4  
                           l5156 4D66                             l5148 4D26  
                           l5260 4864                             l4358 4616  
                           l4462 4F68                             l5502 503E  
                           l4606 5310                             l6046 4E84  
                           l5270 3920                             l5254 4824  
                           l6142 31F6                             l4464 4F84  
                           l4800 22F0                             l4616 5508  
                           l5184 3F10                             l5504 504A  
                           l4544 24DC                             l4640 33BA  
                           l6232 1C3A                             l6224 1C14  
                           l5344 3AAC                             l5272 3924  
                           l6160 326E                             l6072 2FCA  
                           l4394 4B6C                             l4810 2344  
                           l4730 1F60                             l5514 507E  
                           l4626 4DCE                             l4562 25F8  
                           l4546 2510                             l6234 1C72  
                           l5442 4A46                             l6410 178C  
                           l4820 2362                             l4652 342E  
                           l4900 37CA                             l5196 46D0  
                           l5364 3AE8                             l5356 3AD6  
                           l5284 3992                             l5540 4130  
                           l5524 40CA                             l6340 1370  
                           l4806 2322                             l4742 1F7C  
                           l4830 23A0                             l4718 5594  
                           l4494 2DD0                             l4566 262E  
                           l4590 27E4                             l6246 1CE4  
                           l6238 1C80                             l6270 1DAC  
                           l5462 48F6                             l5438 4A3C  
                           l5374 3B28                             l5366 3AF8  
                           l5550 41AA                             l5526 40D2  
                           l6094 3044                             l6422 181E  
                           l6406 174A                             l6342 13B0  
                           l6326 1288                             l6502 458C  
                           l4816 235A                             l4752 205A  
                           l4832 23E2                             l4496 2DEE  
                           l4576 26E0                             l4592 2810  
                           l4656 346E                             l4648 340A  
                           l6256 1D2C                             l6248 1D18  
                           l5456 48D8                             l5720 0A18  
                           l4912 384A                             l5368 3AFE  
                           l5624 4320                             l6176 334E  
                           l6440 192C                             l6416 17D4  
                           l6408 176E                             l6352 13DC  
                           l4738 1F6E                             l4498 2DF8  
                           l4586 27D2                             l6194 197A  
                           l5474 496E                             l5714 0A02  
                           l5570 4B20                             l6426 1894  
                           l6370 14B8                             l6362 1450  
                           l6434 18D0                             l4828 239A  
                           l4772 214C                             l5492 5018  
                           l4692 35B2                             l4684 3540  
                           l4668 34CC                             l6188 1958  
                           l5468 4934                             l5740 0AAA  
                           l5708 09B0                             l5388 3B58  
                           l5580 4208                             l4790 22AA  
                           l6294 1EE6                             l5822 0D9A  
                           l5742 0AB0                             l5726 0A5E  
                           l5662 08C4                             l5646 0880  
                           l5638 085A                             l4854 5344  
                           l6390 15F6                             l6358 1400  
                           l4768 2144                             l5488 5014  
                           l6288 1E74                             l5728 0A84  
                           l4936 285A                             l4880 3706  
                           l4856 5348                             l4848 529E  
                           l6384 15A2                             l4794 22B8  
                           l4786 2222                             l4778 2192  
                           l4698 361A                             l5826 0DB0  
                           l5746 0AB4                             l5666 08C8  
                           l4962 297A                             l4946 28BE  
                           l4890 3758                             l4874 36B6  
                           l6378 151A                             l6466 44A2  
                           l5940 4C22                             l4956 2964  
                           l4892 377E                             l5588 425C  
                           l6396 16D0                             l6484 4528  
                           l5934 4C0A                             l5918 4462  
                           l5846 0EEA                             l5686 090C  
                           l5678 0902                             l4990 2A1A  
                           l6398 16F0                             l6494 4566  
                           l5768 0B72                             l5970 4C6A  
                           l5882 11B0                             l5858 0FDE  
                           l5698 094A                             l4978 29FC  
                           l5948 4C3A                             l5958 4C52  
                           l5984 4C82                             STR_1 0810  
                           STR_2 0810                             STR_3 0820  
                           STR_4 0801                             STR_5 0811  
                           STR_6 0811                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5020 4B94                             u5005 4B4A  
                           u5040 4BC0                             u5120 4F0C  
                           u6010 37DA                             u5060 4BEE  
                           u5150 2C2A                             u4600 5440  
                           u5240 2EF6                             u5160 2C4A  
                           u5225 2DDC                             u5315 255C  
                           u5340 2616                             u5260 23FA  
                           u6140 2960                             u5245 2EEC  
                           u6125 28CA                             u4710 51E2  
                           u5270 241A                             u5510 3518  
                           u6150 2976                             u5175 2CAE  
                           u6055 3880                             u7120 5014  
                           u5360 2722                             u5440 33A8  
                           u6080 2856                             u5345 260C  
                           u6065 38CC                             u4810 45AA  
                           u7050 48F2                             u6410 3D3C  
                           u5195 2D4C                             u4900 4650  
                           u5620 1F78                             u7140 504E  
                           u5460 341C                             u7060 4930  
                           u6340 3C6E                             u6260 3BA4  
                           u7220 4184                             u4717 51D8  
                           u5365 2718                             u5285 246A  
                           u6245 2BD8                             u4590 5434  
                           u6430 3D60                             u7230 41DA  
                           u4920 4678                             u7400 08C0  
                           u7320 42B6                             u7160 40A4  
                           u4770 5248                             u4690 51A8  
                           u5570 35F2                             u5490 34BA  
                           u6450 4CFE                             u6610 47B8  
                           u7170 40C4                             u4940 46A6  
                           u5804 2216                             u5740 2174  
                           u7500 0A9E                             u5900 52AE  
                           u5805 2210                             u6470 4D5C  
                           u5910 52E2                             u7270 4202  
                           u4855 45C6                             u5815 2260  
                           u8400 1ECA                             u7520 0AB0  
                           u6560 4750                             u6800 3A2C  
                           u5745 216A                             u5665 2032  
                           u6457 4CEE                             u4970 4B36  
                           u5690 20F8                             u8330 1D3C  
                           u5930 5378                             u6730 39DA  
                           u9107 548C                             u5675 2062  
                           u8235 1A3E                             u8180 1954  
                           u6580 478A                             u6820 3A56  
                           u5685 2088                             u6477 4D52  
                           u8350 1DC0                             u8270 1C00  
                           u5950 36B2                             u6750 39EC  
                           u5695 20EE                             u8280 1C26  
                           u7720 1032                             u6840 3A62  
                           u5785 21D6                             u7625 0CE2  
                           u7650 0D96                             u5795 21F8  
                           u9067 3C58                             u8380 1E60  
                           u7660 0DAC                             u6780 3A20  
                           u9077 3D26                             u7725 1028  
                           u8470 12E2                             u9087 5420  
                           u9097 5234                             u8385 1E56  
                           u8635 1696                             u8475 12D8  
                           u8740 44C0                             u8645 16DA  
                           u6990 49BE                             u7695 0ECA  
                           u8585 1532                             u7970 4EC0  
                           u8690 18D8                             _WPUB 000F85  
                           _Fsid 00D2                             _Stat 00F7  
                           _main 4466                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 55BC                    __CFG_IESO$OFF 000000  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0019  
                   ?_follow_path 0086               disk_initialize@ocr 0013  
                   ___param_bank 000000               disk_initialize@tmr 001B  
                create_name@path 000B                 create_chain@clst 0058  
                    _sync_window 3F3C   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 55AC                            ?_main 0001  
                __end_of___lldiv 509E                   __CFG_DEBUG$OFF 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  __end_of_f_close 547E  
                          _FatFs 05D2                  __end_of_chk_chr 538A  
             __size_of_SPI1_Open 000E                  __end_of_f_lseek 1F4C  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000              ___lmul@multiplicand 0005  
                  __CFG_WRT3$OFF 000000                  __end_of_f_mount 4EE2  
                          _Error 4BF2                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                     ___send_cmd@n 0009  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                __end_of_dir_sdi 390E                   __CFG_EBTR3$OFF 000000  
                __end_of_f_write 193E                  __end_of_get_fat 2FBC  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                __end_of_mem_cmp 52EC                  __end_of_mem_cpy 4D78  
                __end_of_mem_set 551A                    find_volume@br 0060  
                  find_volume@fs 0098                    find_volume@pt 007A  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw2 000FDB                  __end_of_put_fat 2814  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                __end_of_sync_fs 3F3C                   __CFG_ICPRT$OFF 000000  
                  get_ldnumber@i 000B         __size_of_SPI1_Initialize 000E  
                __initialization 53CC              disk_initialize@pdrv 0012  
                   __end_of_main 459A                     clust2sect@fs 000D  
                 __CFG_PCLKEN$ON 000000                           ??_main 0060  
                  __activetblptr 000002                   __CFG_SDOMX$RB3 000000  
                         ?_Error 0001                  __CFG_CCP2MX$RC1 000000  
                         _ACTCON 000FB5                           _ANSELA 000F5B  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
           __end_of_dir_register 4B26                 __end_of_check_fs 4972  
          SPI1_Exchange8bit@data 0001                           Error@a 0001  
     __size_of_SPI1_Exchange8bit 0010             __size_of_create_name 0284  
       __size_of_disk_initialize 01EA                 __end_of_deselect 55F0  
               __end_of_dir_find 4886                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 55CA                 __end_of_dir_next 2C1A  
                   ?_move_window 0030             __end_of_create_chain 364C  
               __end_of_ld_clust 519E                           ___lmul 52EC  
           __size_of_find_volume 09AE             __size_of_disk_status 0012  
                         ___wmul 5544                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0009                           _f_open 2FBC  
                         _f_sync 4324                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 53E6  
                         clear_1 53F8                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 556A                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
                         main@bw 00D0                 __end_of_send_cmd 53CC  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                  disk_ioctl@csize 0032  
               __end_of_validate 501C             __end_of_get_ldnumber 4A50  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5544  
                      ??_put_fat 0045                  xmit_datablock@i 0007  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 55CA  
                     __accesstop 0060          __end_of__initialization 53FE  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
                  __end_of_Error 4CBE                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                     __pidataBANK0 55F0  
            ??_SYSTEM_Initialize 0001                       ___send_cmd 509E  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
                  ??___delay_sec 0001               __size_of_dir_alloc 00F0  
                        ??_Error 0001               __size_of_disk_read 00CC  
      __end_of_SYSTEM_Initialize 55D8                       __pbssBANK0 00D2  
              __CFG_PLLSEL$PLL4X 000000                          ?___lmul 0001  
                        ?___wmul 0001                          ?_f_open 009A  
        __size_of_xmit_datablock 007C                          ?_f_sync 0045  
              ??_disk_initialize 0011                     ?_sync_window 001B  
                 ___lmul@product 0009                          ?_select 0001  
                      ?_check_fs 003B                       _disk_ioctl 1F4C  
                 follow_path@dir 008A                          _OSCCON2 000FD2  
                 follow_path@res 008D                       _disk_write 459A  
                        _OSCTUNE 000F9B                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                        _SSP1ADD 000FC8                      send_cmd@res 0010  
                 remove_chain@fs 0056                          _SSP1BUF 000FC9  
                      ?_dir_find 0080              __end_of___delay_sec 54B6  
                      ?_dir_next 006D            __size_of_dir_register 00D6  
                      ?_ld_clust 0001                       _clust2sect 4D78  
               sync_window@wsect 002C                    ?_remove_chain 0056  
          __size_of_create_chain 02FA                __end_of_dir_alloc 479A  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 4BF2  
                        ff@FatFs 00D4                       f_close@res 0050  
                __size_of___lmul 0056                        ?_st_clust 0001  
                    ?___send_cmd 0004                          ___lldiv 501C  
                __size_of___wmul 0026             __size_of_move_window 00A6  
                     check_fs@fs 003B                  __size_of_f_open 0396  
                   __psmallconst 0800                  __size_of_f_sync 0142  
                        _f_close 5444            __size_of_get_ldnumber 00DE  
            _disk_initialize$403 0017                          __pcinit 53CC  
                        _chk_chr 5342                          _f_lseek 193E  
                        __ramtop 0800                          _f_mount 4E32  
                __size_of_select 001E                          __ptext0 4466  
                        __ptext1 11DA                          __ptext2 2FBC  
                        __ptext3 4094                          __ptext4 41DE  
                        __ptext5 5120                          __ptext6 479A  
                        __ptext7 5286                          __ptext8 390E  
                        __ptext9 5342                          _dir_sdi 364C  
                    validate@fil 0008                          _f_write 11DA  
                    validate@obj 0002                          _get_fat 2C1A  
                     chk_chr@chr 0003                     _dir_register 4A50  
                     chk_chr@str 0001                          _mem_cmp 5286  
                        _mem_cpy 4CBE            _OSCILLATOR_Initialize 559A  
                        _mem_set 54EE                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3352                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23EA  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 3D7C                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 53FE  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 521A  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 4972  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 55BC                       _wait_ready 5408  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                        _PORTDbits 000F83  
                _create_name$893 0011                       dir_sdi@idx 0058  
                    ___delay_sec 547E                       dir_next@dp 006D  
                    ?_disk_ioctl 0011              rcvr_datablock@token 0008  
                     f_write@btw 0071                       f_write@res 0081  
                    ?_disk_write 0011                       get_fat@val 004C  
                get_ldnumber@vol 0009                  disk_write@count 0017  
                    ?_clust2sect 000D              __size_of___send_cmd 0082  
         __end_of_rcvr_datablock 5286                    ??_create_name 000D  
               disk_initialize@n 001D                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 55D8  
                  ??_find_volume 004A                    ??_disk_status 0001  
                 _xmit_datablock 519E                       ?_SPI1_Open 0001  
                 __end_of___lmul 5342                      st_clust@dir 0001  
                 __end_of___wmul 556A                   __end_of_f_open 3352  
                 __end_of_f_sync 4466                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                   __end_of_select 5588  
           __size_of_sync_window 0158              start_initialization 53CC  
__size_of_PIN_MANAGER_Initialize 0038                       mem_cmp@cnt 0005  
                     mem_cmp@dst 0001                       mem_cmp@src 0003  
                     mem_cpy@cnt 0005                      put_fat@clst 003D  
                     mem_cpy@dst 0001                       mem_cpy@src 0003  
                ?_rcvr_datablock 0002                  __CFG_nLPBOR$OFF 000000  
                _disk_initialize 3B92                       mem_set@cnt 0005  
                     mem_set@dst 0001                       mem_set@val 0003  
         __end_of_xmit_datablock 521A                    ??_follow_path 0060  
            __size_of_disk_ioctl 049E              __end_of_create_name 3B92  
            __size_of_disk_write 0110                         ??___lmul 0009  
                       ??___wmul 0005                         ??_f_open 009F  
                       ??_f_sync 0047                      ?_wait_ready 0001  
                    __pdataBANK0 00F7              __end_of_find_volume 11DA  
            __end_of_disk_status 559A              __size_of_clust2sect 00BA  
                       ??_select 0004             __end_of_remove_chain 41DE  
              rcvr_datablock@btr 0004                rcvr_datablock@tmr 0006  
                    __pbssBIGRAM 05D2                    __pcstackBANK0 0060  
              __size_of_check_fs 00EC          __end_of_SPI1_Initialize 55E6  
                   check_fs@sect 003D                __size_of_deselect 000A  
              __size_of_dir_find 00EC                __size_of_dir_next 0406  
              __size_of_ld_clust 007E           _PIN_MANAGER_Initialize 54B6  
                _find_volume$997 0070                  _find_volume$998 0074  
                ?_xmit_datablock 0004                __size_of_send_cmd 0042  
                   ??___send_cmd 0008                        _dir_alloc 46AA  
                       ?___lldiv 0001                __size_of_validate 0094  
                    ??_SPI1_Open 0001                         ?_f_close 004E  
                      _disk_read 4B26                         ?_chk_chr 0001  
                  follow_path@dp 0086                         ?_f_lseek 006D  
                  follow_path@ns 008C                __size_of_st_clust 002A  
            __end_of_follow_path 4324                         ?_f_mount 0052  
                       ?_dir_sdi 0056                         ?_f_write 006D  
                       ?_get_fat 003B                      __smallconst 0800  
                       ?_mem_cmp 0001                         ?_mem_cpy 0001  
                       ?_mem_set 0001                   __size_of_Error 00CC  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 3D7C                         ?_sync_fs 003A  
                    _get_fat$643 004A                find_volume@fasize 008D  
            __size_of_wait_ready 003C               __end_of___send_cmd 5120  
                    _create_name 390E                   ___wmul@product 0005  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 082C                      _disk_status 5588  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00D6  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                     put_fat@res 0053                       put_fat@val 0041  
              move_window@sector 0032                  dir_next@stretch 006F  
                       __Hrparam 0000                         __Lrparam 0000  
                    _follow_path 41DE               __CFG_BOREN$SBORDIS 000000  
             __end_of_disk_ioctl 23EA            __size_of_remove_chain 014A  
             __end_of_disk_write 46AA          ??_OSCILLATOR_Initialize 0001  
               __size_of___lldiv 0082              __end_of_move_window 4F88  
             __end_of_clust2sect 4E32                 __size_of_f_close 003A  
               __size_of_chk_chr 0048                 __size_of_f_lseek 060E  
               __size_of_f_mount 00B0                 __size_of_dir_sdi 02C2  
               __size_of_f_write 0764                 __size_of_get_fat 03A2  
                       _check_fs 4886                 __size_of_mem_cmp 0066  
               __size_of_mem_cpy 00BA                 __size_of_mem_set 002C  
            xmit_datablock@token 0006                  ___delay_sec@sec 0004  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 55E6                         __ptext10 4A50  
                       __ptext11 4CBE                         __ptext20 4886  
                       __ptext12 46AA                         __ptext21 193E  
                       __ptext13 364C                         __ptext30 4F88  
                       __ptext22 3352                         __ptext14 2814  
                       __ptext31 5588                         __ptext23 23EA  
                       __ptext15 4E32                         __ptext40 519E  
                       __ptext32 3D7C                         __ptext24 2C1A  
                       __ptext16 082C                         __ptext41 4B26  
                       __ptext33 54EE                         __ptext25 4D78  
                       __ptext17 4972                         __ptext50 55CA  
                       __ptext42 538A                         __ptext34 1F4C  
                       __ptext26 52EC                         __ptext18 3B92  
                       __ptext51 55D8                         __ptext43 509E  
                       __ptext35 5544                         __ptext27 501C  
                       __ptext19 55BC                         __ptext52 54B6  
                       __ptext44 556A                         __ptext36 551A  
                       __ptext28 5444                         __ptext53 559A  
                       __ptext45 5408                         __ptext37 4EE2  
                       __ptext29 4324                         __ptext54 4BF2  
                       __ptext46 55E6                         __ptext38 3F3C  
                       __ptext47 521A                         __ptext39 459A  
                       __ptext48 55AC                         __ptext49 547E  
                       _dir_find 479A                     _SSP1CON1bits 000FC6  
                       _dir_next 2814                    dir_alloc@nent 0082  
               ?_disk_initialize 0001                         _ld_clust 5120  
               __size_of_put_fat 042A                   sync_window@res 0029  
               __size_of_sync_fs 01C0                    __size_of_main 0134  
                     sync_fs@res 0044                     _remove_chain 4094  
               find_volume@bsect 0091                 find_volume@nclst 0088  
               find_volume@tsect 0084                 find_volume@wmode 0049  
                       f_open@dj 00BA                         f_open@cl 00AF  
                       f_open@fp 009A                         f_open@dw 00B3  
                       _send_cmd 538A                         _validate 4F88  
                       f_sync@fp 0045                      ??_dir_alloc 0084  
                       _st_clust 551A                         get_fat@p 0052  
                   ??_wait_ready 0002                    ??_sync_window 001D  
                   _SSP1STATbits 000FC7                      ??_disk_read 0019  
                  _disk_read$412 001A                      f_lseek@clst 0090  
                       mem_cmp@d 0009                         mem_cmp@r 000D  
                       mem_cmp@s 000B                        put_fat@bc 0051  
                       mem_cpy@d 0009                        put_fat@fs 003B  
                       mem_cpy@s 000B                         mem_set@d 0007  
                  wait_ready@tmr 0002               xmit_datablock@buff 0004  
             xmit_datablock@resp 0009                   dir_register@dp 008A  
               ??_xmit_datablock 0007               __end_of_wait_ready 5444  
               ___lldiv@dividend 0001          ?_PIN_MANAGER_Initialize 0001  
                   dir_alloc@res 0089                    sync_window@fs 001B  
                  sync_window@nf 002A                      f_mount@path 0054  
                      sync_fs@fs 003A                      _move_window 4EE2  
           __CFG_CPUDIV$NOCLKDIV 000000                         put_fat@p 0054  
                  ?_dir_register 008A                    ___delay_sec@i 0005  
                    dir_alloc@dp 0080                 ___lldiv@quotient 0009  
                    dir_find@dir 0083              __end_of_sync_window 4094  
                    dir_find@res 0085             __size_of___delay_sec 0038  
                  ?_create_chain 0056                     dir_next@clst 007C  
             __CFG_FOSC$INTOSCIO 000000                      dir_sdi@clst 006D  
 __end_of_PIN_MANAGER_Initialize 54EE                      dir_sdi@sect 0069  
                   ?_create_name 0009                     f_write@csect 0084  
                   f_write@wbuff 0082                      f_write@buff 006F  
                    f_write@clst 008B                      f_write@sect 0087  
                   ?_find_volume 0045                      f_write@wcnt 008F  
                  ?_get_ldnumber 0001                     ?_disk_status 0001  
                    _put_fat$670 004F                      _put_fat$669 004D  
