

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 15 16:41:23 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    75                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    76  0000                     
    77                           ; Version 2.05
    78                           ; Generated 20/12/2018 GMT
    79                           ; 
    80                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F45K50 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     
   112                           	psect	idataBANK0
   113  00580E                     __pidataBANK0:
   114                           	opt callstack 0
   115                           
   116                           ;initializer for _Stat
   117  00580E  01                 	db	1
   118  0000                     _ANSELE	set	3935
   119  0000                     _ANSELD	set	3934
   120  0000                     _ANSELB	set	3932
   121  0000                     _ANSELC	set	3933
   122  0000                     _ANSELA	set	3931
   123  0000                     _SSP1STATbits	set	4039
   124  0000                     _SSP1BUF	set	4041
   125  0000                     _SSP1CON1bits	set	4038
   126  0000                     _SSP1ADD	set	4040
   127  0000                     _SSP1CON1	set	4038
   128  0000                     _SSP1STAT	set	4039
   129  0000                     _INTCON2bits	set	4081
   130  0000                     _WPUB	set	3973
   131  0000                     _TRISD	set	3989
   132  0000                     _TRISC	set	3988
   133  0000                     _TRISB	set	3987
   134  0000                     _TRISE	set	3990
   135  0000                     _LATC	set	3979
   136  0000                     _LATB	set	3978
   137  0000                     _LATD	set	3980
   138  0000                     _LATE	set	3981
   139  0000                     _ACTCON	set	4021
   140  0000                     _OSCTUNE	set	3995
   141  0000                     _OSCCON2	set	4050
   142  0000                     _OSCCON	set	4051
   143  0000                     _LATBbits	set	3978
   144  0000                     _LATAbits	set	3977
   145  0000                     _TRISA	set	3986
   146  0000                     _LATA	set	3977
   147  0000                     _PORTDbits	set	3971
   148                           
   149                           	psect	smallconst
   150  000800                     __psmallconst:
   151                           	opt callstack 0
   152  000800  00                 	db	0
   153  000801                     STR_8:
   154  000801  45                 	db	69	;'E'
   155  000802  73                 	db	115	;'s'
   156  000803  74                 	db	116	;'t'
   157  000804  65                 	db	101	;'e'
   158  000805  20                 	db	32
   159  000806  61                 	db	97	;'a'
   160  000807  72                 	db	114	;'r'
   161  000808  63                 	db	99	;'c'
   162  000809  68                 	db	104	;'h'
   163  00080A  69                 	db	105	;'i'
   164  00080B  76                 	db	118	;'v'
   165  00080C  6F                 	db	111	;'o'
   166  00080D  20                 	db	32
   167  00080E  54                 	db	84	;'T'
   168  00080F  58                 	db	88	;'X'
   169  000810  54                 	db	84	;'T'
   170  000811  20                 	db	32
   171  000812  66                 	db	102	;'f'
   172  000813  75                 	db	117	;'u'
   173  000814  65                 	db	101	;'e'
   174  000815  20                 	db	32
   175  000816  63                 	db	99	;'c'
   176  000817  72                 	db	114	;'r'
   177  000818  65                 	db	101	;'e'
   178  000819  61                 	db	97	;'a'
   179  00081A  64                 	db	100	;'d'
   180  00081B  6F                 	db	111	;'o'
   181  00081C  20                 	db	32
   182  00081D  64                 	db	100	;'d'
   183  00081E  65                 	db	101	;'e'
   184  00081F  73                 	db	115	;'s'
   185  000820  64                 	db	100	;'d'
   186  000821  65                 	db	101	;'e'
   187  000822  20                 	db	32
   188  000823  42                 	db	66	;'B'
   189  000824  65                 	db	101	;'e'
   190  000825  65                 	db	101	;'e'
   191  000826  44                 	db	68	;'D'
   192  000827  65                 	db	101	;'e'
   193  000828  76                 	db	118	;'v'
   194  000829  5F                 	db	95	;'_'
   195  00082A  55                 	db	85	;'U'
   196  00082B  47                 	db	71	;'G'
   197  00082C  2E                 	db	46
   198  00082D  0D                 	db	13
   199  00082E  0A                 	db	10
   200  00082F  00                 	db	0
   201  000830                     STR_10:
   202  000830  41                 	db	65	;'A'
   203  000831  72                 	db	114	;'r'
   204  000832  63                 	db	99	;'c'
   205  000833  68                 	db	104	;'h'
   206  000834  69                 	db	105	;'i'
   207  000835  76                 	db	118	;'v'
   208  000836  6F                 	db	111	;'o'
   209  000837  20                 	db	32
   210  000838  47                 	db	71	;'G'
   211  000839  55                 	db	85	;'U'
   212  00083A  41                 	db	65	;'A'
   213  00083B  52                 	db	82	;'R'
   214  00083C  44                 	db	68	;'D'
   215  00083D  41                 	db	65	;'A'
   216  00083E  44                 	db	68	;'D'
   217  00083F  4F                 	db	79	;'O'
   218  000840  00                 	db	0
   219  000841                     STR_4:
   220  000841  53                 	db	83	;'S'
   221  000842  44                 	db	68	;'D'
   222  000843  20                 	db	32
   223  000844  49                 	db	73	;'I'
   224  000845  4E                 	db	78	;'N'
   225  000846  49                 	db	73	;'I'
   226  000847  43                 	db	67	;'C'
   227  000848  49                 	db	73	;'I'
   228  000849  41                 	db	65	;'A'
   229  00084A  4C                 	db	76	;'L'
   230  00084B  49                 	db	73	;'I'
   231  00084C  5A                 	db	90	;'Z'
   232  00084D  41                 	db	65	;'A'
   233  00084E  44                 	db	68	;'D'
   234  00084F  41                 	db	65	;'A'
   235  000850  00                 	db	0
   236  000851                     STR_9:
   237  000851  41                 	db	65	;'A'
   238  000852  72                 	db	114	;'r'
   239  000853  63                 	db	99	;'c'
   240  000854  68                 	db	104	;'h'
   241  000855  69                 	db	105	;'i'
   242  000856  76                 	db	118	;'v'
   243  000857  6F                 	db	111	;'o'
   244  000858  20                 	db	32
   245  000859  45                 	db	69	;'E'
   246  00085A  44                 	db	68	;'D'
   247  00085B  49                 	db	73	;'I'
   248  00085C  54                 	db	84	;'T'
   249  00085D  41                 	db	65	;'A'
   250  00085E  44                 	db	68	;'D'
   251  00085F  4F                 	db	79	;'O'
   252  000860  00                 	db	0
   253  000861                     STR_7:
   254  000861  41                 	db	65	;'A'
   255  000862  72                 	db	114	;'r'
   256  000863  63                 	db	99	;'c'
   257  000864  68                 	db	104	;'h'
   258  000865  69                 	db	105	;'i'
   259  000866  76                 	db	118	;'v'
   260  000867  6F                 	db	111	;'o'
   261  000868  20                 	db	32
   262  000869  41                 	db	65	;'A'
   263  00086A  42                 	db	66	;'B'
   264  00086B  49                 	db	73	;'I'
   265  00086C  45                 	db	69	;'E'
   266  00086D  52                 	db	82	;'R'
   267  00086E  54                 	db	84	;'T'
   268  00086F  4F                 	db	79	;'O'
   269  000870  00                 	db	0
   270  000871                     STR_13:
   271  000871  22                 	db	34
   272  000872  2A                 	db	42
   273  000873  2B                 	db	43
   274  000874  2C                 	db	44
   275  000875  3A                 	db	58	;':'
   276  000876  3B                 	db	59	;';'
   277  000877  3C                 	db	60	;'<'
   278  000878  3D                 	db	61	;'='
   279  000879  3E                 	db	62	;'>'
   280  00087A  3F                 	db	63	;'?'
   281  00087B  5B                 	db	91	;'['
   282  00087C  5D                 	db	93	;']'
   283  00087D  7C                 	db	124
   284  00087E  7F                 	db	127
   285  00087F  00                 	db	0
   286  000880                     STR_6:
   287  000880  41                 	db	65	;'A'
   288  000881  72                 	db	114	;'r'
   289  000882  63                 	db	99	;'c'
   290  000883  68                 	db	104	;'h'
   291  000884  69                 	db	105	;'i'
   292  000885  76                 	db	118	;'v'
   293  000886  6F                 	db	111	;'o'
   294  000887  20                 	db	32
   295  000888  43                 	db	67	;'C'
   296  000889  52                 	db	82	;'R'
   297  00088A  45                 	db	69	;'E'
   298  00088B  41                 	db	65	;'A'
   299  00088C  44                 	db	68	;'D'
   300  00088D  4F                 	db	79	;'O'
   301  00088E  00                 	db	0
   302  00088F                     STR_12:
   303  00088F  41                 	db	65	;'A'
   304  000890  72                 	db	114	;'r'
   305  000891  63                 	db	99	;'c'
   306  000892  68                 	db	104	;'h'
   307  000893  69                 	db	105	;'i'
   308  000894  76                 	db	118	;'v'
   309  000895  6F                 	db	111	;'o'
   310  000896  3A                 	db	58	;':'
   311  000897  20                 	db	32
   312  000898  45                 	db	69	;'E'
   313  000899  52                 	db	82	;'R'
   314  00089A  52                 	db	82	;'R'
   315  00089B  4F                 	db	79	;'O'
   316  00089C  52                 	db	82	;'R'
   317  00089D  00                 	db	0
   318  00089E                     STR_2:
   319  00089E  49                 	db	73	;'I'
   320  00089F  6E                 	db	110	;'n'
   321  0008A0  69                 	db	105	;'i'
   322  0008A1  63                 	db	99	;'c'
   323  0008A2  69                 	db	105	;'i'
   324  0008A3  6F                 	db	111	;'o'
   325  0008A4  3A                 	db	58	;':'
   326  0008A5  20                 	db	32
   327  0008A6  45                 	db	69	;'E'
   328  0008A7  52                 	db	82	;'R'
   329  0008A8  52                 	db	82	;'R'
   330  0008A9  4F                 	db	79	;'O'
   331  0008AA  52                 	db	82	;'R'
   332  0008AB  00                 	db	0
   333  0008AC                     STR_11:
   334  0008AC  45                 	db	69	;'E'
   335  0008AD  78                 	db	120	;'x'
   336  0008AE  74                 	db	116	;'t'
   337  0008AF  72                 	db	114	;'r'
   338  0008B0  61                 	db	97	;'a'
   339  0008B1  65                 	db	101	;'e'
   340  0008B2  72                 	db	114	;'r'
   341  0008B3  20                 	db	32
   342  0008B4  53                 	db	83	;'S'
   343  0008B5  44                 	db	68	;'D'
   344  0008B6  00                 	db	0
   345  0008B7                     STR_5:
   346  0008B7  42                 	db	66	;'B'
   347  0008B8  65                 	db	101	;'e'
   348  0008B9  65                 	db	101	;'e'
   349  0008BA  44                 	db	68	;'D'
   350  0008BB  65                 	db	101	;'e'
   351  0008BC  76                 	db	118	;'v'
   352  0008BD  2E                 	db	46
   353  0008BE  74                 	db	116	;'t'
   354  0008BF  78                 	db	120	;'x'
   355  0008C0  74                 	db	116	;'t'
   356  0008C1  00                 	db	0
   357  0000                     
   358                           ; #config settings
   359  0008C2  00                 	db	0	; dummy byte at the end
   360  0000                     
   361                           	psect	cinit
   362  005556                     __pcinit:
   363                           	opt callstack 0
   364  005556                     start_initialization:
   365                           	opt callstack 0
   366  005556                     __initialization:
   367                           	opt callstack 0
   368                           
   369                           ; Initialize objects allocated to BANK0 (1 bytes)
   370                           ; load TBLPTR registers with __pidataBANK0
   371  005556  0E0E               	movlw	low __pidataBANK0
   372  005558  6EF6               	movwf	tblptrl,c
   373  00555A  0E58               	movlw	high __pidataBANK0
   374  00555C  6EF7               	movwf	tblptrh,c
   375  00555E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   376  005560  6EF8               	movwf	tblptru,c
   377  005562  0009               	tblrd		*+	;fetch initializer
   378  005564  CFF5 F0F7          	movff	tablat,__pdataBANK0
   379                           
   380                           ; Clear objects allocated to BIGRAM (558 bytes)
   381  005568  EE05  F0D2         	lfsr	0,__pbssBIGRAM
   382  00556C  EE12 F02E          	lfsr	1,558
   383  005570                     clear_0:
   384  005570  6AEE               	clrf	postinc0,c
   385  005572  50E5               	movf	postdec1,w,c
   386  005574  50E1               	movf	fsr1l,w,c
   387  005576  E1FC               	bnz	clear_0
   388  005578  50E2               	movf	fsr1h,w,c
   389  00557A  E1FA               	bnz	clear_0
   390                           
   391                           ; Clear objects allocated to BANK0 (37 bytes)
   392  00557C  EE00  F0D2         	lfsr	0,__pbssBANK0
   393  005580  0E25               	movlw	37
   394  005582                     clear_1:
   395  005582  6AEE               	clrf	postinc0,c
   396  005584  06E8               	decf	wreg,f,c
   397  005586  E1FD               	bnz	clear_1
   398  005588                     end_of_initialization:
   399                           	opt callstack 0
   400  005588                     __end_of__initialization:
   401                           	opt callstack 0
   402  005588  0E00               	movlw	low (__Lmediumconst shr (0+16))
   403  00558A  6EF8               	movwf	tblptru,c
   404  00558C  0100               	movlb	0
   405  00558E  EF0A  F01F         	goto	_main	;jump to C main() function
   406                           
   407                           	psect	bssBANK0
   408  0000D2                     __pbssBANK0:
   409                           	opt callstack 0
   410  0000D2                     _Fsid:
   411                           	opt callstack 0
   412  0000D2                     	ds	2
   413  0000D4                     ff@FatFs:
   414                           	opt callstack 0
   415  0000D4                     	ds	2
   416  0000D6                     _CardType:
   417                           	opt callstack 0
   418  0000D6                     	ds	1
   419  0000D7                     _Fil:
   420                           	opt callstack 0
   421  0000D7                     	ds	32
   422                           
   423                           	psect	dataBANK0
   424  0000F7                     __pdataBANK0:
   425                           	opt callstack 0
   426  0000F7                     _Stat:
   427                           	opt callstack 0
   428  0000F7                     	ds	1
   429                           
   430                           	psect	bssBIGRAM
   431  0005D2                     __pbssBIGRAM:
   432                           	opt callstack 0
   433  0005D2                     _FatFs:
   434                           	opt callstack 0
   435  0005D2                     	ds	558
   436                           
   437                           	psect	cstackBANK0
   438  000060                     __pcstackBANK0:
   439                           	opt callstack 0
   440  000060                     ??_dir_sdi:
   441  000060                     remove_chain@res:
   442                           	opt callstack 0
   443  000060                     create_chain@res:
   444                           	opt callstack 0
   445  000060                     find_volume@br:
   446                           	opt callstack 0
   447                           
   448                           ; 16 bytes @ 0x0
   449  000060                     	ds	1
   450  000061                     remove_chain@nxt:
   451                           	opt callstack 0
   452  000061                     create_chain@scl:
   453                           	opt callstack 0
   454                           
   455                           ; 4 bytes @ 0x1
   456  000061                     	ds	4
   457  000065                     create_chain@ncl:
   458                           	opt callstack 0
   459                           
   460                           ; 4 bytes @ 0x5
   461  000065                     	ds	2
   462  000067                     dir_sdi@ic:
   463                           	opt callstack 0
   464                           
   465                           ; 2 bytes @ 0x7
   466  000067                     	ds	2
   467  000069                     create_chain@cs:
   468                           	opt callstack 0
   469  000069                     dir_sdi@sect:
   470                           	opt callstack 0
   471                           
   472                           ; 4 bytes @ 0x9
   473  000069                     	ds	4
   474  00006D                     dir_next@dp:
   475                           	opt callstack 0
   476  00006D                     f_write@fp:
   477                           	opt callstack 0
   478  00006D                     f_lseek@fp:
   479                           	opt callstack 0
   480  00006D                     dir_sdi@clst:
   481                           	opt callstack 0
   482                           
   483                           ; 4 bytes @ 0xD
   484  00006D                     	ds	2
   485  00006F                     dir_next@stretch:
   486                           	opt callstack 0
   487  00006F                     f_write@buff:
   488                           	opt callstack 0
   489  00006F                     f_lseek@ofs:
   490                           	opt callstack 0
   491                           
   492                           ; 4 bytes @ 0xF
   493  00006F                     	ds	1
   494  000070                     _find_volume$1006:
   495                           	opt callstack 0
   496                           
   497                           ; 4 bytes @ 0x10
   498  000070                     	ds	1
   499  000071                     ??_dir_next:
   500  000071                     f_write@btw:
   501                           	opt callstack 0
   502                           
   503                           ; 2 bytes @ 0x11
   504  000071                     	ds	2
   505  000073                     ??_f_lseek:
   506  000073                     f_write@bw:
   507                           	opt callstack 0
   508                           
   509                           ; 2 bytes @ 0x13
   510  000073                     	ds	1
   511  000074                     _find_volume$1007:
   512                           	opt callstack 0
   513                           
   514                           ; 2 bytes @ 0x14
   515  000074                     	ds	1
   516  000075                     ??_f_write:
   517                           
   518                           ; 1 bytes @ 0x15
   519  000075                     	ds	1
   520  000076                     find_volume@szbfat:
   521                           	opt callstack 0
   522                           
   523                           ; 4 bytes @ 0x16
   524  000076                     	ds	2
   525  000078                     dir_next@c:
   526                           	opt callstack 0
   527                           
   528                           ; 2 bytes @ 0x18
   529  000078                     	ds	2
   530  00007A                     dir_next@i:
   531                           	opt callstack 0
   532  00007A                     find_volume@pt:
   533                           	opt callstack 0
   534                           
   535                           ; 2 bytes @ 0x1A
   536  00007A                     	ds	2
   537  00007C                     dir_next@clst:
   538                           	opt callstack 0
   539  00007C                     find_volume@sysect:
   540                           	opt callstack 0
   541                           
   542                           ; 4 bytes @ 0x1C
   543  00007C                     	ds	4
   544  000080                     dir_alloc@dp:
   545                           	opt callstack 0
   546  000080                     dir_find@dp:
   547                           	opt callstack 0
   548  000080                     find_volume@vol:
   549                           	opt callstack 0
   550                           
   551                           ; 2 bytes @ 0x20
   552  000080                     	ds	1
   553  000081                     f_write@res:
   554                           	opt callstack 0
   555                           
   556                           ; 1 bytes @ 0x21
   557  000081                     	ds	1
   558  000082                     dir_find@c:
   559                           	opt callstack 0
   560  000082                     dir_alloc@nent:
   561                           	opt callstack 0
   562  000082                     find_volume@nrsv:
   563                           	opt callstack 0
   564  000082                     f_write@wbuff:
   565                           	opt callstack 0
   566                           
   567                           ; 2 bytes @ 0x22
   568  000082                     	ds	1
   569  000083                     dir_find@dir:
   570                           	opt callstack 0
   571  000083                     f_lseek@ifptr:
   572                           	opt callstack 0
   573                           
   574                           ; 4 bytes @ 0x23
   575  000083                     	ds	1
   576  000084                     ??_dir_alloc:
   577  000084                     f_write@csect:
   578                           	opt callstack 0
   579  000084                     find_volume@tsect:
   580                           	opt callstack 0
   581                           
   582                           ; 4 bytes @ 0x24
   583  000084                     	ds	1
   584  000085                     dir_find@res:
   585                           	opt callstack 0
   586  000085                     f_write@cc:
   587                           	opt callstack 0
   588                           
   589                           ; 2 bytes @ 0x25
   590  000085                     	ds	1
   591  000086                     follow_path@dp:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x26
   595  000086                     	ds	1
   596  000087                     f_lseek@res:
   597                           	opt callstack 0
   598  000087                     dir_alloc@n:
   599                           	opt callstack 0
   600  000087                     f_write@sect:
   601                           	opt callstack 0
   602                           
   603                           ; 4 bytes @ 0x27
   604  000087                     	ds	1
   605  000088                     follow_path@path:
   606                           	opt callstack 0
   607  000088                     find_volume@nclst:
   608                           	opt callstack 0
   609  000088                     f_lseek@nsect:
   610                           	opt callstack 0
   611                           
   612                           ; 4 bytes @ 0x28
   613  000088                     	ds	1
   614  000089                     dir_alloc@res:
   615                           	opt callstack 0
   616                           
   617                           ; 1 bytes @ 0x29
   618  000089                     	ds	1
   619  00008A                     dir_register@dp:
   620                           	opt callstack 0
   621  00008A                     follow_path@dir:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0x2A
   625  00008A                     	ds	1
   626  00008B                     f_write@clst:
   627                           	opt callstack 0
   628                           
   629                           ; 4 bytes @ 0x2B
   630  00008B                     	ds	1
   631  00008C                     dir_register@res:
   632                           	opt callstack 0
   633  00008C                     follow_path@ns:
   634                           	opt callstack 0
   635  00008C                     find_volume@stat:
   636                           	opt callstack 0
   637  00008C                     f_lseek@bcs:
   638                           	opt callstack 0
   639                           
   640                           ; 4 bytes @ 0x2C
   641  00008C                     	ds	1
   642  00008D                     follow_path@res:
   643                           	opt callstack 0
   644  00008D                     find_volume@fasize:
   645                           	opt callstack 0
   646                           
   647                           ; 4 bytes @ 0x2D
   648  00008D                     	ds	2
   649  00008F                     f_write@wcnt:
   650                           	opt callstack 0
   651                           
   652                           ; 2 bytes @ 0x2F
   653  00008F                     	ds	1
   654  000090                     f_lseek@clst:
   655                           	opt callstack 0
   656                           
   657                           ; 4 bytes @ 0x30
   658  000090                     	ds	1
   659  000091                     find_volume@bsect:
   660                           	opt callstack 0
   661                           
   662                           ; 4 bytes @ 0x31
   663  000091                     	ds	4
   664  000095                     find_volume@i:
   665                           	opt callstack 0
   666                           
   667                           ; 2 bytes @ 0x35
   668  000095                     	ds	2
   669  000097                     find_volume@fmt:
   670                           	opt callstack 0
   671                           
   672                           ; 1 bytes @ 0x37
   673  000097                     	ds	1
   674  000098                     find_volume@fs:
   675                           	opt callstack 0
   676                           
   677                           ; 2 bytes @ 0x38
   678  000098                     	ds	2
   679  00009A                     f_open@fp:
   680                           	opt callstack 0
   681                           
   682                           ; 2 bytes @ 0x3A
   683  00009A                     	ds	2
   684  00009C                     f_open@path:
   685                           	opt callstack 0
   686                           
   687                           ; 2 bytes @ 0x3C
   688  00009C                     	ds	2
   689  00009E                     f_open@mode:
   690                           	opt callstack 0
   691                           
   692                           ; 1 bytes @ 0x3E
   693  00009E                     	ds	1
   694  00009F                     ??_f_open:
   695                           
   696                           ; 1 bytes @ 0x3F
   697  00009F                     	ds	4
   698  0000A3                     f_open@sfn:
   699                           	opt callstack 0
   700                           
   701                           ; 12 bytes @ 0x43
   702  0000A3                     	ds	12
   703  0000AF                     f_open@cl:
   704                           	opt callstack 0
   705                           
   706                           ; 4 bytes @ 0x4F
   707  0000AF                     	ds	4
   708  0000B3                     f_open@dw:
   709                           	opt callstack 0
   710                           
   711                           ; 4 bytes @ 0x53
   712  0000B3                     	ds	4
   713  0000B7                     f_open@res:
   714                           	opt callstack 0
   715                           
   716                           ; 1 bytes @ 0x57
   717  0000B7                     	ds	1
   718  0000B8                     f_open@dir:
   719                           	opt callstack 0
   720                           
   721                           ; 2 bytes @ 0x58
   722  0000B8                     	ds	2
   723  0000BA                     f_open@dj:
   724                           	opt callstack 0
   725                           
   726                           ; 22 bytes @ 0x5A
   727  0000BA                     	ds	22
   728  0000D0                     main@bw:
   729                           	opt callstack 0
   730                           
   731                           ; 2 bytes @ 0x70
   732  0000D0                     	ds	2
   733                           
   734                           	psect	cstackCOMRAM
   735  000001                     __pcstackCOMRAM:
   736                           	opt callstack 0
   737  000001                     ??___delay_sec:
   738  000001                     ?_mem_cmp:
   739                           	opt callstack 0
   740  000001                     ?_chk_chr:
   741                           	opt callstack 0
   742  000001                     ?_get_ldnumber:
   743                           	opt callstack 0
   744  000001                     ?___wmul:
   745                           	opt callstack 0
   746  000001                     ?_ld_clust:
   747                           	opt callstack 0
   748  000001                     ?___lmul:
   749                           	opt callstack 0
   750  000001                     ?___lldiv:
   751                           	opt callstack 0
   752  000001                     Lcd_Port@a:
   753                           	opt callstack 0
   754  000001                     disk_status@pdrv:
   755                           	opt callstack 0
   756  000001                     SPI1_Exchange8bit@data:
   757                           	opt callstack 0
   758  000001                     mem_cpy@dst:
   759                           	opt callstack 0
   760  000001                     mem_set@dst:
   761                           	opt callstack 0
   762  000001                     mem_cmp@dst:
   763                           	opt callstack 0
   764  000001                     chk_chr@str:
   765                           	opt callstack 0
   766  000001                     ld_clust@fs:
   767                           	opt callstack 0
   768  000001                     st_clust@dir:
   769                           	opt callstack 0
   770  000001                     get_ldnumber@path:
   771                           	opt callstack 0
   772  000001                     ___wmul@multiplier:
   773                           	opt callstack 0
   774  000001                     ___lmul@multiplier:
   775                           	opt callstack 0
   776  000001                     ___lldiv@dividend:
   777                           	opt callstack 0
   778                           
   779                           ; 4 bytes @ 0x0
   780  000001                     	ds	1
   781  000002                     ??_Lcd_Cmd:
   782  000002                     Lcd_Write_Char@temp:
   783                           	opt callstack 0
   784  000002                     wait_ready@tmr:
   785                           	opt callstack 0
   786  000002                     rcvr_datablock@buff:
   787                           	opt callstack 0
   788  000002                     validate@obj:
   789                           	opt callstack 0
   790                           
   791                           ; 2 bytes @ 0x1
   792  000002                     	ds	1
   793  000003                     ??_get_ldnumber:
   794  000003                     Lcd_Cmd@a:
   795                           	opt callstack 0
   796  000003                     Lcd_Write_Char@y:
   797                           	opt callstack 0
   798  000003                     mem_cpy@src:
   799                           	opt callstack 0
   800  000003                     mem_set@val:
   801                           	opt callstack 0
   802  000003                     mem_cmp@src:
   803                           	opt callstack 0
   804  000003                     chk_chr@chr:
   805                           	opt callstack 0
   806  000003                     ld_clust@dir:
   807                           	opt callstack 0
   808  000003                     ___wmul@multiplicand:
   809                           	opt callstack 0
   810  000003                     st_clust@cl:
   811                           	opt callstack 0
   812                           
   813                           ; 4 bytes @ 0x2
   814  000003                     	ds	1
   815  000004                     ??_Lcd_Init:
   816  000004                     ??_validate:
   817  000004                     Lcd_Set_Cursor@b:
   818                           	opt callstack 0
   819  000004                     Lcd_Write_Char@a:
   820                           	opt callstack 0
   821  000004                     ___delay_sec@sec:
   822                           	opt callstack 0
   823  000004                     rcvr_datablock@btr:
   824                           	opt callstack 0
   825  000004                     xmit_datablock@buff:
   826                           	opt callstack 0
   827  000004                     ___send_cmd@arg:
   828                           	opt callstack 0
   829                           
   830                           ; 4 bytes @ 0x3
   831  000004                     	ds	1
   832  000005                     ??_chk_chr:
   833  000005                     ??_ld_clust:
   834  000005                     Lcd_Set_Cursor@a:
   835                           	opt callstack 0
   836  000005                     ___delay_sec@i:
   837                           	opt callstack 0
   838  000005                     Lcd_Write_String@a:
   839                           	opt callstack 0
   840  000005                     mem_cpy@cnt:
   841                           	opt callstack 0
   842  000005                     mem_set@cnt:
   843                           	opt callstack 0
   844  000005                     mem_cmp@cnt:
   845                           	opt callstack 0
   846  000005                     ___wmul@product:
   847                           	opt callstack 0
   848  000005                     ___lmul@multiplicand:
   849                           	opt callstack 0
   850  000005                     ___lldiv@divisor:
   851                           	opt callstack 0
   852                           
   853                           ; 4 bytes @ 0x4
   854  000005                     	ds	1
   855  000006                     Lcd_Set_Cursor@z:
   856                           	opt callstack 0
   857  000006                     xmit_datablock@token:
   858                           	opt callstack 0
   859  000006                     rcvr_datablock@tmr:
   860                           	opt callstack 0
   861                           
   862                           ; 2 bytes @ 0x5
   863  000006                     	ds	1
   864  000007                     ??_Lcd_Write_String:
   865  000007                     ??_mem_cpy:
   866  000007                     ??_mem_cmp:
   867  000007                     Lcd_Set_Cursor@y:
   868                           	opt callstack 0
   869  000007                     xmit_datablock@i:
   870                           	opt callstack 0
   871  000007                     mem_set@d:
   872                           	opt callstack 0
   873  000007                     get_ldnumber@tp:
   874                           	opt callstack 0
   875                           
   876                           ; 2 bytes @ 0x6
   877  000007                     	ds	1
   878  000008                     Lcd_Set_Cursor@temp:
   879                           	opt callstack 0
   880  000008                     rcvr_datablock@token:
   881                           	opt callstack 0
   882  000008                     ___send_cmd@res:
   883                           	opt callstack 0
   884  000008                     validate@fil:
   885                           	opt callstack 0
   886                           
   887                           ; 2 bytes @ 0x7
   888  000008                     	ds	1
   889  000009                     xmit_datablock@resp:
   890                           	opt callstack 0
   891  000009                     ___send_cmd@n:
   892                           	opt callstack 0
   893  000009                     Lcd_Write_String@i:
   894                           	opt callstack 0
   895  000009                     mem_cpy@d:
   896                           	opt callstack 0
   897  000009                     mem_cmp@d:
   898                           	opt callstack 0
   899  000009                     create_name@dp:
   900                           	opt callstack 0
   901  000009                     get_ldnumber@vol:
   902                           	opt callstack 0
   903  000009                     ___lmul@product:
   904                           	opt callstack 0
   905  000009                     ___lldiv@quotient:
   906                           	opt callstack 0
   907                           
   908                           ; 4 bytes @ 0x8
   909  000009                     	ds	1
   910  00000A                     ___send_cmd@cmd:
   911                           	opt callstack 0
   912                           
   913                           ; 1 bytes @ 0x9
   914  00000A                     	ds	1
   915  00000B                     mem_cpy@s:
   916                           	opt callstack 0
   917  00000B                     mem_cmp@s:
   918                           	opt callstack 0
   919  00000B                     create_name@path:
   920                           	opt callstack 0
   921  00000B                     get_ldnumber@i:
   922                           	opt callstack 0
   923  00000B                     send_cmd@arg:
   924                           	opt callstack 0
   925  00000B                     ld_clust@cl:
   926                           	opt callstack 0
   927                           
   928                           ; 4 bytes @ 0xA
   929  00000B                     	ds	2
   930  00000D                     ??_create_name:
   931  00000D                     ?_clust2sect:
   932                           	opt callstack 0
   933  00000D                     ___lldiv@counter:
   934                           	opt callstack 0
   935  00000D                     mem_cmp@r:
   936                           	opt callstack 0
   937  00000D                     clust2sect@fs:
   938                           	opt callstack 0
   939  00000D                     get_ldnumber@tt:
   940                           	opt callstack 0
   941                           
   942                           ; 2 bytes @ 0xC
   943  00000D                     	ds	2
   944  00000F                     send_cmd@cmd:
   945                           	opt callstack 0
   946  00000F                     clust2sect@clst:
   947                           	opt callstack 0
   948                           
   949                           ; 4 bytes @ 0xE
   950  00000F                     	ds	1
   951  000010                     send_cmd@res:
   952                           	opt callstack 0
   953                           
   954                           ; 1 bytes @ 0xF
   955  000010                     	ds	1
   956  000011                     ??_disk_initialize:
   957  000011                     disk_ioctl@cmd:
   958                           	opt callstack 0
   959  000011                     disk_read@buff:
   960                           	opt callstack 0
   961  000011                     disk_write@buff:
   962                           	opt callstack 0
   963  000011                     _create_name$902:
   964                           	opt callstack 0
   965                           
   966                           ; 2 bytes @ 0x10
   967  000011                     	ds	1
   968  000012                     disk_initialize@pdrv:
   969                           	opt callstack 0
   970  000012                     disk_ioctl@buff:
   971                           	opt callstack 0
   972                           
   973                           ; 2 bytes @ 0x11
   974  000012                     	ds	1
   975  000013                     ??_clust2sect:
   976  000013                     create_name@si:
   977                           	opt callstack 0
   978  000013                     disk_initialize@ocr:
   979                           	opt callstack 0
   980  000013                     disk_read@sector:
   981                           	opt callstack 0
   982  000013                     disk_write@sector:
   983                           	opt callstack 0
   984                           
   985                           ; 4 bytes @ 0x12
   986  000013                     	ds	1
   987  000014                     ??_disk_ioctl:
   988                           
   989                           ; 1 bytes @ 0x13
   990  000014                     	ds	1
   991  000015                     create_name@b:
   992                           	opt callstack 0
   993                           
   994                           ; 1 bytes @ 0x14
   995  000015                     	ds	1
   996  000016                     create_name@ni:
   997                           	opt callstack 0
   998                           
   999                           ; 2 bytes @ 0x15
  1000  000016                     	ds	1
  1001  000017                     _disk_initialize$412:
  1002                           	opt callstack 0
  1003  000017                     disk_read@count:
  1004                           	opt callstack 0
  1005  000017                     disk_write@count:
  1006                           	opt callstack 0
  1007                           
  1008                           ; 2 bytes @ 0x16
  1009  000017                     	ds	1
  1010  000018                     create_name@p:
  1011                           	opt callstack 0
  1012                           
  1013                           ; 2 bytes @ 0x17
  1014  000018                     	ds	1
  1015  000019                     ??_disk_write:
  1016  000019                     disk_initialize@cmd:
  1017                           	opt callstack 0
  1018  000019                     disk_read@pdrv:
  1019                           	opt callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x18
  1022  000019                     	ds	1
  1023  00001A                     disk_initialize@ty:
  1024                           	opt callstack 0
  1025  00001A                     disk_write@pdrv:
  1026                           	opt callstack 0
  1027  00001A                     create_name@d:
  1028                           	opt callstack 0
  1029  00001A                     _disk_read$421:
  1030                           	opt callstack 0
  1031                           
  1032                           ; 2 bytes @ 0x19
  1033  00001A                     	ds	1
  1034  00001B                     disk_initialize@tmr:
  1035                           	opt callstack 0
  1036  00001B                     sync_window@fs:
  1037                           	opt callstack 0
  1038  00001B                     create_name@sfn:
  1039                           	opt callstack 0
  1040                           
  1041                           ; 2 bytes @ 0x1A
  1042  00001B                     	ds	1
  1043  00001C                     disk_read@cmd:
  1044                           	opt callstack 0
  1045                           
  1046                           ; 1 bytes @ 0x1B
  1047  00001C                     	ds	1
  1048  00001D                     ??_sync_window:
  1049  00001D                     disk_initialize@n:
  1050                           	opt callstack 0
  1051  00001D                     create_name@i:
  1052                           	opt callstack 0
  1053                           
  1054                           ; 2 bytes @ 0x1C
  1055  00001D                     	ds	2
  1056  00001F                     create_name@c:
  1057                           	opt callstack 0
  1058                           
  1059                           ; 1 bytes @ 0x1E
  1060  00001F                     	ds	2
  1061  000021                     disk_ioctl@csd:
  1062                           	opt callstack 0
  1063                           
  1064                           ; 16 bytes @ 0x20
  1065  000021                     	ds	8
  1066  000029                     sync_window@res:
  1067                           	opt callstack 0
  1068                           
  1069                           ; 1 bytes @ 0x28
  1070  000029                     	ds	1
  1071  00002A                     sync_window@nf:
  1072                           	opt callstack 0
  1073                           
  1074                           ; 2 bytes @ 0x29
  1075  00002A                     	ds	2
  1076  00002C                     sync_window@wsect:
  1077                           	opt callstack 0
  1078                           
  1079                           ; 4 bytes @ 0x2B
  1080  00002C                     	ds	4
  1081  000030                     move_window@fs:
  1082                           	opt callstack 0
  1083                           
  1084                           ; 2 bytes @ 0x2F
  1085  000030                     	ds	1
  1086  000031                     disk_ioctl@pdrv:
  1087                           	opt callstack 0
  1088                           
  1089                           ; 1 bytes @ 0x30
  1090  000031                     	ds	1
  1091  000032                     disk_ioctl@csize:
  1092                           	opt callstack 0
  1093  000032                     move_window@sector:
  1094                           	opt callstack 0
  1095                           
  1096                           ; 4 bytes @ 0x31
  1097  000032                     	ds	4
  1098  000036                     disk_ioctl@res:
  1099                           	opt callstack 0
  1100                           
  1101                           ; 1 bytes @ 0x35
  1102  000036                     	ds	1
  1103  000037                     disk_ioctl@n:
  1104                           	opt callstack 0
  1105                           
  1106                           ; 1 bytes @ 0x36
  1107  000037                     	ds	1
  1108  000038                     disk_ioctl@ptr:
  1109                           	opt callstack 0
  1110                           
  1111                           ; 2 bytes @ 0x37
  1112  000038                     	ds	2
  1113  00003A                     move_window@res:
  1114                           	opt callstack 0
  1115  00003A                     sync_fs@fs:
  1116                           	opt callstack 0
  1117                           
  1118                           ; 2 bytes @ 0x39
  1119  00003A                     	ds	1
  1120  00003B                     ?_get_fat:
  1121                           	opt callstack 0
  1122  00003B                     get_fat@fs:
  1123                           	opt callstack 0
  1124  00003B                     put_fat@fs:
  1125                           	opt callstack 0
  1126  00003B                     check_fs@fs:
  1127                           	opt callstack 0
  1128                           
  1129                           ; 2 bytes @ 0x3A
  1130  00003B                     	ds	1
  1131  00003C                     ??_sync_fs:
  1132                           
  1133                           ; 1 bytes @ 0x3B
  1134  00003C                     	ds	1
  1135  00003D                     get_fat@clst:
  1136                           	opt callstack 0
  1137  00003D                     put_fat@clst:
  1138                           	opt callstack 0
  1139  00003D                     check_fs@sect:
  1140                           	opt callstack 0
  1141                           
  1142                           ; 4 bytes @ 0x3C
  1143  00003D                     	ds	4
  1144  000041                     ??_get_fat:
  1145  000041                     ??_check_fs:
  1146  000041                     put_fat@val:
  1147                           	opt callstack 0
  1148                           
  1149                           ; 4 bytes @ 0x40
  1150  000041                     	ds	3
  1151  000044                     sync_fs@res:
  1152                           	opt callstack 0
  1153                           
  1154                           ; 1 bytes @ 0x43
  1155  000044                     	ds	1
  1156  000045                     ??_put_fat:
  1157  000045                     find_volume@rfs:
  1158                           	opt callstack 0
  1159  000045                     f_sync@fp:
  1160                           	opt callstack 0
  1161                           
  1162                           ; 2 bytes @ 0x44
  1163  000045                     	ds	2
  1164  000047                     find_volume@path:
  1165                           	opt callstack 0
  1166                           
  1167                           ; 2 bytes @ 0x46
  1168  000047                     	ds	2
  1169  000049                     find_volume@wmode:
  1170                           	opt callstack 0
  1171                           
  1172                           ; 1 bytes @ 0x48
  1173  000049                     	ds	1
  1174  00004A                     ??_find_volume:
  1175  00004A                     _get_fat$652:
  1176                           	opt callstack 0
  1177                           
  1178                           ; 2 bytes @ 0x49
  1179  00004A                     	ds	1
  1180  00004B                     f_sync@res:
  1181                           	opt callstack 0
  1182                           
  1183                           ; 1 bytes @ 0x4A
  1184  00004B                     	ds	1
  1185  00004C                     f_sync@dir:
  1186                           	opt callstack 0
  1187  00004C                     get_fat@val:
  1188                           	opt callstack 0
  1189                           
  1190                           ; 4 bytes @ 0x4B
  1191  00004C                     	ds	1
  1192  00004D                     _put_fat$678:
  1193                           	opt callstack 0
  1194                           
  1195                           ; 2 bytes @ 0x4C
  1196  00004D                     	ds	1
  1197  00004E                     f_close@fp:
  1198                           	opt callstack 0
  1199                           
  1200                           ; 2 bytes @ 0x4D
  1201  00004E                     	ds	1
  1202  00004F                     _put_fat$679:
  1203                           	opt callstack 0
  1204                           
  1205                           ; 2 bytes @ 0x4E
  1206  00004F                     	ds	1
  1207  000050                     f_close@res:
  1208                           	opt callstack 0
  1209  000050                     get_fat@wc:
  1210                           	opt callstack 0
  1211                           
  1212                           ; 2 bytes @ 0x4F
  1213  000050                     	ds	1
  1214  000051                     put_fat@bc:
  1215                           	opt callstack 0
  1216                           
  1217                           ; 2 bytes @ 0x50
  1218  000051                     	ds	1
  1219  000052                     get_fat@p:
  1220                           	opt callstack 0
  1221  000052                     f_mount@fs:
  1222                           	opt callstack 0
  1223                           
  1224                           ; 2 bytes @ 0x51
  1225  000052                     	ds	1
  1226  000053                     put_fat@res:
  1227                           	opt callstack 0
  1228                           
  1229                           ; 1 bytes @ 0x52
  1230  000053                     	ds	1
  1231  000054                     get_fat@bc:
  1232                           	opt callstack 0
  1233  000054                     put_fat@p:
  1234                           	opt callstack 0
  1235  000054                     f_mount@path:
  1236                           	opt callstack 0
  1237                           
  1238                           ; 2 bytes @ 0x53
  1239  000054                     	ds	2
  1240  000056                     ?_create_chain:
  1241                           	opt callstack 0
  1242  000056                     f_mount@opt:
  1243                           	opt callstack 0
  1244  000056                     remove_chain@fs:
  1245                           	opt callstack 0
  1246  000056                     create_chain@fs:
  1247                           	opt callstack 0
  1248  000056                     dir_sdi@dp:
  1249                           	opt callstack 0
  1250                           
  1251                           ; 2 bytes @ 0x55
  1252  000056                     	ds	1
  1253  000057                     f_mount@res:
  1254                           	opt callstack 0
  1255                           
  1256                           ; 1 bytes @ 0x56
  1257  000057                     	ds	1
  1258  000058                     dir_sdi@idx:
  1259                           	opt callstack 0
  1260  000058                     f_mount@cfs:
  1261                           	opt callstack 0
  1262  000058                     remove_chain@clst:
  1263                           	opt callstack 0
  1264  000058                     create_chain@clst:
  1265                           	opt callstack 0
  1266                           
  1267                           ; 4 bytes @ 0x57
  1268  000058                     	ds	2
  1269  00005A                     f_mount@rp:
  1270                           	opt callstack 0
  1271                           
  1272                           ; 2 bytes @ 0x59
  1273  00005A                     	ds	2
  1274  00005C                     f_mount@vol:
  1275                           	opt callstack 0
  1276                           
  1277                           ; 2 bytes @ 0x5B
  1278  00005C                     	ds	4
  1279  000060                     
  1280                           ; 1 bytes @ 0x5F
  1281 ;;
  1282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1283 ;;
  1284 ;; *************** function _main *****************
  1285 ;; Defined at:
  1286 ;;		line 17 in file "Main.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  bw              2  112[BANK0 ] unsigned short 
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1300 ;;      Params:         0       0       0       0       0       0       0       0       0
  1301 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1303 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1304 ;;Total ram usage:        2 bytes
  1305 ;; Hardware stack levels required when called:   14
  1306 ;; This function calls:
  1307 ;;		_Lcd_Clear
  1308 ;;		_Lcd_Init
  1309 ;;		_Lcd_Set_Cursor
  1310 ;;		_Lcd_Write_String
  1311 ;;		_SYSTEM_Initialize
  1312 ;;		___delay_sec
  1313 ;;		_f_close
  1314 ;;		_f_lseek
  1315 ;;		_f_mount
  1316 ;;		_f_open
  1317 ;;		_f_write
  1318 ;; This function is called by:
  1319 ;;		Startup code after reset
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text0
  1324  003E14                     __ptext0:
  1325                           	opt callstack 0
  1326  003E14                     _main:
  1327                           	opt callstack 17
  1328                           
  1329                           ;Main.c: 20:     LATA = 0x00;
  1330                           
  1331                           ;incstack = 0
  1332  003E14  0E00               	movlw	0
  1333  003E16  6E89               	movwf	3977,c	;volatile
  1334                           
  1335                           ;Main.c: 21:     TRISA = 0x00;
  1336  003E18  0E00               	movlw	0
  1337  003E1A  6E92               	movwf	3986,c	;volatile
  1338                           
  1339                           ;Main.c: 22:     ANSELA = 0x00;
  1340  003E1C  0E00               	movlw	0
  1341  003E1E  010F               	movlb	15	; () banked
  1342  003E20  6F5B               	movwf	91,b	;volatile
  1343                           
  1344                           ; BSR set to: 15
  1345                           ;Main.c: 23:     UINT bw;;Main.c: 26:     SYSTEM_Initialize();
  1346  003E22  ECED  F02B         	call	_SYSTEM_Initialize	;wreg free
  1347                           
  1348                           ;Main.c: 56:     Lcd_Init();
  1349  003E26  EC4D  F029         	call	_Lcd_Init	;wreg free
  1350                           
  1351                           ;Main.c: 57:     Lcd_Clear();
  1352  003E2A  ECFB  F02B         	call	_Lcd_Clear	;wreg free
  1353                           
  1354                           ;Main.c: 59:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1355  003E2E  0ED2               	movlw	low _FatFs
  1356  003E30  6E52               	movwf	f_mount@fs,c
  1357  003E32  0E05               	movlw	high _FatFs
  1358  003E34  6E53               	movwf	f_mount@fs+1,c
  1359  003E36  0E2F               	movlw	low (STR_8+46)
  1360  003E38  6E54               	movwf	f_mount@path,c
  1361  003E3A  0E08               	movlw	high (STR_8+46)
  1362  003E3C  6E55               	movwf	f_mount@path+1,c
  1363  003E3E  0E01               	movlw	1
  1364  003E40  6E56               	movwf	f_mount@opt,c
  1365  003E42  EC59  F027         	call	_f_mount	;wreg free
  1366  003E46  0900               	iorlw	0
  1367  003E48  B4D8               	btfsc	status,2,c
  1368  003E4A  D025               	goto	u8630
  1369                           
  1370                           ;Main.c: 60:         Lcd_Set_Cursor(1,1);
  1371  003E4C  0E01               	movlw	1
  1372  003E4E  6E04               	movwf	Lcd_Set_Cursor@b,c
  1373  003E50  0E01               	movlw	1
  1374  003E52  EC19  F02A         	call	_Lcd_Set_Cursor
  1375                           
  1376                           ;Main.c: 61:         Lcd_Write_String("Inicio: ERROR");
  1377  003E56  0E9E               	movlw	low STR_2
  1378  003E58  6E05               	movwf	Lcd_Write_String@a,c
  1379  003E5A  0E08               	movlw	high STR_2
  1380  003E5C  6E06               	movwf	Lcd_Write_String@a+1,c
  1381  003E5E  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1382                           
  1383                           ;Main.c: 62:         LATAbits.LATA0 ^= 1;
  1384  003E62  7089               	btg	3977,0,c	;volatile
  1385                           
  1386                           ;Main.c: 63:         LATAbits.LATA1 ^= 1;
  1387  003E64  7289               	btg	3977,1,c	;volatile
  1388                           
  1389                           ;Main.c: 64:         LATAbits.LATA2 ^= 1;
  1390  003E66  7489               	btg	3977,2,c	;volatile
  1391                           
  1392                           ;Main.c: 65:         LATAbits.LATA3 ^= 1;
  1393  003E68  7689               	btg	3977,3,c	;volatile
  1394                           
  1395                           ;Main.c: 66:         LATAbits.LATA4 ^= 1;
  1396  003E6A  7889               	btg	3977,4,c	;volatile
  1397                           
  1398                           ;Main.c: 67:         LATAbits.LATA5 ^= 1;
  1399  003E6C  7A89               	btg	3977,5,c	;volatile
  1400                           
  1401                           ;Main.c: 68:         LATAbits.LATA6 ^= 1;
  1402  003E6E  7C89               	btg	3977,6,c	;volatile
  1403                           
  1404                           ;Main.c: 69:         LATAbits.LATA7 ^= 1;
  1405  003E70  7E89               	btg	3977,7,c	;volatile
  1406                           
  1407                           ;Main.c: 70:         __delay_sec(2);
  1408  003E72  0E02               	movlw	2
  1409  003E74  EC04  F02B         	call	___delay_sec
  1410  003E78                     l6472:
  1411                           
  1412                           ;Main.c: 72:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1413  003E78  0ED2               	movlw	low _FatFs
  1414  003E7A  6E52               	movwf	f_mount@fs,c
  1415  003E7C  0E05               	movlw	high _FatFs
  1416  003E7E  6E53               	movwf	f_mount@fs+1,c
  1417  003E80  0E2F               	movlw	low (STR_8+46)
  1418  003E82  6E54               	movwf	f_mount@path,c
  1419  003E84  0E08               	movlw	high (STR_8+46)
  1420  003E86  6E55               	movwf	f_mount@path+1,c
  1421  003E88  0E01               	movlw	1
  1422  003E8A  6E56               	movwf	f_mount@opt,c
  1423  003E8C  EC59  F027         	call	_f_mount	;wreg free
  1424  003E90  0900               	iorlw	0
  1425  003E92  A4D8               	btfss	status,2,c
  1426  003E94  D7F1               	goto	l6472
  1427  003E96                     u8630:
  1428                           
  1429                           ;Main.c: 77:     Lcd_Clear();
  1430  003E96  ECFB  F02B         	call	_Lcd_Clear	;wreg free
  1431                           
  1432                           ;Main.c: 78:     Lcd_Set_Cursor(1,1);
  1433  003E9A  0E01               	movlw	1
  1434  003E9C  6E04               	movwf	Lcd_Set_Cursor@b,c
  1435  003E9E  0E01               	movlw	1
  1436  003EA0  EC19  F02A         	call	_Lcd_Set_Cursor
  1437                           
  1438                           ;Main.c: 79:          LATAbits.LATA0 ^= 0;
  1439  003EA4  5089               	movf	3977,w,c	;volatile
  1440                           
  1441                           ;Main.c: 80:         LATAbits.LATA1 ^= 0;
  1442  003EA6  5089               	movf	3977,w,c	;volatile
  1443                           
  1444                           ;Main.c: 81:         LATAbits.LATA2 ^= 0;
  1445  003EA8  5089               	movf	3977,w,c	;volatile
  1446                           
  1447                           ;Main.c: 82:         LATAbits.LATA3 ^= 0;
  1448  003EAA  5089               	movf	3977,w,c	;volatile
  1449                           
  1450                           ;Main.c: 83:         LATAbits.LATA4 ^= 0;
  1451  003EAC  5089               	movf	3977,w,c	;volatile
  1452                           
  1453                           ;Main.c: 84:         LATAbits.LATA5 ^= 0;
  1454  003EAE  5089               	movf	3977,w,c	;volatile
  1455                           
  1456                           ;Main.c: 85:         LATAbits.LATA6 ^= 0;
  1457  003EB0  5089               	movf	3977,w,c	;volatile
  1458                           
  1459                           ;Main.c: 86:         LATAbits.LATA7 ^= 1;
  1460  003EB2  7E89               	btg	3977,7,c	;volatile
  1461                           
  1462                           ;Main.c: 87:     Lcd_Write_String("SD INICIALIZADA");
  1463  003EB4  0E41               	movlw	low STR_4
  1464  003EB6  6E05               	movwf	Lcd_Write_String@a,c
  1465  003EB8  0E08               	movlw	high STR_4
  1466  003EBA  6E06               	movwf	Lcd_Write_String@a+1,c
  1467  003EBC  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1468                           
  1469                           ;Main.c: 88:     __delay_sec(2);
  1470  003EC0  0E02               	movlw	2
  1471  003EC2  EC04  F02B         	call	___delay_sec
  1472                           
  1473                           ;Main.c: 90:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1474  003EC6  0ED7               	movlw	low _Fil
  1475  003EC8  0100               	movlb	0	; () banked
  1476  003ECA  6F9A               	movwf	f_open@fp& (0+255),b
  1477  003ECC  0E00               	movlw	high _Fil
  1478  003ECE  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1479  003ED0  0EB7               	movlw	low STR_5
  1480  003ED2  6F9C               	movwf	f_open@path& (0+255),b
  1481  003ED4  0E08               	movlw	high STR_5
  1482  003ED6  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1483  003ED8  0E13               	movlw	19
  1484  003EDA  6F9E               	movwf	f_open@mode& (0+255),b
  1485  003EDC  EC2A  F018         	call	_f_open	;wreg free
  1486  003EE0  0900               	iorlw	0
  1487  003EE2  A4D8               	btfss	status,2,c
  1488  003EE4  D07A               	goto	l6548
  1489                           
  1490                           ;Main.c: 91:         Lcd_Set_Cursor(1,1);
  1491  003EE6  0E01               	movlw	1
  1492  003EE8  6E04               	movwf	Lcd_Set_Cursor@b,c
  1493  003EEA  0E01               	movlw	1
  1494  003EEC  EC19  F02A         	call	_Lcd_Set_Cursor
  1495                           
  1496                           ;Main.c: 92:         Lcd_Write_String("Archivo CREADO");
  1497  003EF0  0E80               	movlw	low STR_6
  1498  003EF2  6E05               	movwf	Lcd_Write_String@a,c
  1499  003EF4  0E08               	movlw	high STR_6
  1500  003EF6  6E06               	movwf	Lcd_Write_String@a+1,c
  1501  003EF8  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1502                           
  1503                           ;Main.c: 93:         LATAbits.LATA1 ^= 1;
  1504  003EFC  7289               	btg	3977,1,c	;volatile
  1505                           
  1506                           ;Main.c: 94:         __delay_sec(2);
  1507  003EFE  0E02               	movlw	2
  1508  003F00  EC04  F02B         	call	___delay_sec
  1509                           
  1510                           ;Main.c: 96:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1511  003F04  0100               	movlb	0	; () banked
  1512  003F06  51E1               	movf	(_Fil+10)& (0+255),w,b
  1513  003F08  11E2               	iorwf	(_Fil+11)& (0+255),w,b
  1514  003F0A  11E3               	iorwf	(_Fil+12)& (0+255),w,b
  1515  003F0C  11E4               	iorwf	(_Fil+13)& (0+255),w,b
  1516  003F0E  B4D8               	btfsc	status,2,c
  1517  003F10  D011               	goto	l6514
  1518                           
  1519                           ; BSR set to: 0
  1520  003F12  0ED7               	movlw	low _Fil
  1521  003F14  6F6D               	movwf	f_lseek@fp& (0+255),b
  1522  003F16  0E00               	movlw	high _Fil
  1523  003F18  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1524  003F1A  C0E1  F06F         	movff	_Fil+10,f_lseek@ofs
  1525  003F1E  C0E2  F070         	movff	_Fil+11,f_lseek@ofs+1
  1526  003F22  C0E3  F071         	movff	_Fil+12,f_lseek@ofs+2
  1527  003F26  C0E4  F072         	movff	_Fil+13,f_lseek@ofs+3
  1528  003F2A  ECEB  F00C         	call	_f_lseek	;wreg free
  1529  003F2E  0900               	iorlw	0
  1530  003F30  A4D8               	btfss	status,2,c
  1531  003F32  D031               	goto	l6532
  1532  003F34                     l6514:
  1533                           
  1534                           ;Main.c: 97:                 Lcd_Set_Cursor(1,1);
  1535  003F34  0E01               	movlw	1
  1536  003F36  6E04               	movwf	Lcd_Set_Cursor@b,c
  1537  003F38  0E01               	movlw	1
  1538  003F3A  EC19  F02A         	call	_Lcd_Set_Cursor
  1539                           
  1540                           ;Main.c: 98:                 LATAbits.LATA1 ^= 0;
  1541  003F3E  5089               	movf	3977,w,c	;volatile
  1542                           
  1543                           ;Main.c: 99:                 Lcd_Write_String("Archivo ABIERTO");
  1544  003F40  0E61               	movlw	low STR_7
  1545  003F42  6E05               	movwf	Lcd_Write_String@a,c
  1546  003F44  0E08               	movlw	high STR_7
  1547  003F46  6E06               	movwf	Lcd_Write_String@a+1,c
  1548  003F48  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1549                           
  1550                           ;Main.c: 100:                 __delay_sec(2);
  1551  003F4C  0E02               	movlw	2
  1552  003F4E  EC04  F02B         	call	___delay_sec
  1553                           
  1554                           ;Main.c: 102:                 f_write(&Fil, "Este archivo TXT fue creado desde BeeDev_UG
      +                          .\r\n", 46, &bw);
  1555  003F52  0ED7               	movlw	low _Fil
  1556  003F54  0100               	movlb	0	; () banked
  1557  003F56  6F6D               	movwf	f_write@fp& (0+255),b
  1558  003F58  0E00               	movlw	high _Fil
  1559  003F5A  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1560  003F5C  0E01               	movlw	low STR_8
  1561  003F5E  6F6F               	movwf	f_write@buff& (0+255),b
  1562  003F60  0E08               	movlw	high STR_8
  1563  003F62  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1564  003F64  0E00               	movlw	0
  1565  003F66  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1566  003F68  0E2E               	movlw	46
  1567  003F6A  6F71               	movwf	f_write@btw& (0+255),b
  1568  003F6C  0ED0               	movlw	low main@bw
  1569  003F6E  6F73               	movwf	f_write@bw& (0+255),b
  1570  003F70  0E00               	movlw	high main@bw
  1571  003F72  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1572  003F74  EC39  F009         	call	_f_write	;wreg free
  1573                           
  1574                           ;Main.c: 103:                 Lcd_Set_Cursor(1,1);
  1575  003F78  0E01               	movlw	1
  1576  003F7A  6E04               	movwf	Lcd_Set_Cursor@b,c
  1577  003F7C  0E01               	movlw	1
  1578  003F7E  EC19  F02A         	call	_Lcd_Set_Cursor
  1579                           
  1580                           ;Main.c: 104:                 LATAbits.LATA2 ^= 1;
  1581  003F82  7489               	btg	3977,2,c	;volatile
  1582                           
  1583                           ;Main.c: 105:                 Lcd_Write_String("Archivo EDITADO");
  1584  003F84  0E51               	movlw	low STR_9
  1585  003F86  6E05               	movwf	Lcd_Write_String@a,c
  1586  003F88  0E08               	movlw	high STR_9
  1587  003F8A  6E06               	movwf	Lcd_Write_String@a+1,c
  1588  003F8C  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1589                           
  1590                           ;Main.c: 106:                 __delay_sec(2);
  1591  003F90  0E02               	movlw	2
  1592  003F92  EC04  F02B         	call	___delay_sec
  1593  003F96                     l6532:
  1594  003F96  0ED7               	movlw	low _Fil
  1595  003F98  6E4E               	movwf	f_close@fp,c
  1596  003F9A  0E00               	movlw	high _Fil
  1597  003F9C  6E4F               	movwf	f_close@fp+1,c
  1598  003F9E  ECE7  F02A         	call	_f_close	;wreg free
  1599                           
  1600                           ;Main.c: 109:                 Lcd_Set_Cursor(1,1);
  1601  003FA2  0E01               	movlw	1
  1602  003FA4  6E04               	movwf	Lcd_Set_Cursor@b,c
  1603  003FA6  0E01               	movlw	1
  1604  003FA8  EC19  F02A         	call	_Lcd_Set_Cursor
  1605                           
  1606                           ;Main.c: 110:                 Lcd_Write_String("Archivo GUARDADO");
  1607  003FAC  0E30               	movlw	low STR_10
  1608  003FAE  6E05               	movwf	Lcd_Write_String@a,c
  1609  003FB0  0E08               	movlw	high STR_10
  1610  003FB2  6E06               	movwf	Lcd_Write_String@a+1,c
  1611  003FB4  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1612                           
  1613                           ;Main.c: 111:                 LATAbits.LATA2 ^= 0;
  1614  003FB8  5089               	movf	3977,w,c	;volatile
  1615                           
  1616                           ;Main.c: 112:                 Lcd_Set_Cursor(2,1);
  1617  003FBA  0E01               	movlw	1
  1618  003FBC  6E04               	movwf	Lcd_Set_Cursor@b,c
  1619  003FBE  0E02               	movlw	2
  1620  003FC0  EC19  F02A         	call	_Lcd_Set_Cursor
  1621                           
  1622                           ;Main.c: 113:                 Lcd_Write_String("Extraer SD");
  1623  003FC4  0EAC               	movlw	low STR_11
  1624  003FC6  6E05               	movwf	Lcd_Write_String@a,c
  1625  003FC8  0E08               	movlw	high STR_11
  1626  003FCA  6E06               	movwf	Lcd_Write_String@a+1,c
  1627  003FCC  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1628                           
  1629                           ;Main.c: 114:                 LATAbits.LATA3 ^= 1;
  1630  003FD0  7689               	btg	3977,3,c	;volatile
  1631                           
  1632                           ;Main.c: 115:                 __delay_sec(2);
  1633  003FD2  0E02               	movlw	2
  1634  003FD4  EC04  F02B         	call	___delay_sec
  1635                           
  1636                           ;Main.c: 117:  }
  1637  003FD8  D010               	goto	l88
  1638  003FDA                     l6548:
  1639                           
  1640                           ;Main.c: 119:        Lcd_Clear();
  1641  003FDA  ECFB  F02B         	call	_Lcd_Clear	;wreg free
  1642                           
  1643                           ;Main.c: 120:        Lcd_Set_Cursor(1,1);
  1644  003FDE  0E01               	movlw	1
  1645  003FE0  6E04               	movwf	Lcd_Set_Cursor@b,c
  1646  003FE2  0E01               	movlw	1
  1647  003FE4  EC19  F02A         	call	_Lcd_Set_Cursor
  1648                           
  1649                           ;Main.c: 121:        Lcd_Write_String("Archivo: ERROR");
  1650  003FE8  0E8F               	movlw	low STR_12
  1651  003FEA  6E05               	movwf	Lcd_Write_String@a,c
  1652  003FEC  0E08               	movlw	high STR_12
  1653  003FEE  6E06               	movwf	Lcd_Write_String@a+1,c
  1654  003FF0  EC41  F02A         	call	_Lcd_Write_String	;wreg free
  1655                           
  1656                           ;Main.c: 122:        LATAbits.LATA1 ^= 1;
  1657  003FF4  7289               	btg	3977,1,c	;volatile
  1658                           
  1659                           ;Main.c: 123:        LATAbits.LATA2 ^= 1;
  1660  003FF6  7489               	btg	3977,2,c	;volatile
  1661                           
  1662                           ;Main.c: 124:        LATAbits.LATA3 ^= 1;
  1663  003FF8  7689               	btg	3977,3,c	;volatile
  1664  003FFA                     l88:
  1665  003FFA  D7FF               	goto	l88
  1666  003FFC                     __end_of_main:
  1667                           	opt callstack 0
  1668                           
  1669 ;; *************** function _f_write *****************
  1670 ;; Defined at:
  1671 ;;		line 2691 in file "ff.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  fp              2   13[BANK0 ] PTR struct .
  1674 ;;		 -> Fil(32), 
  1675 ;;  buff            2   15[BANK0 ] PTR const void 
  1676 ;;		 -> STR_8(47), 
  1677 ;;  btw             2   17[BANK0 ] unsigned short 
  1678 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1679 ;;		 -> main@bw(2), 
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  clst            4   43[BANK0 ] unsigned long 
  1682 ;;  sect            4   39[BANK0 ] unsigned long 
  1683 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1684 ;;  cc              2   37[BANK0 ] unsigned short 
  1685 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1686 ;;		 -> STR_8(47), 
  1687 ;;  csect           1   36[BANK0 ] unsigned char 
  1688 ;;  res             1   33[BANK0 ] enum E93
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      enum E4918
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1698 ;;      Params:         0       8       0       0       0       0       0       0       0
  1699 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1700 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1701 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1702 ;;Total ram usage:       36 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:   10
  1705 ;; This function calls:
  1706 ;;		_clust2sect
  1707 ;;		_create_chain
  1708 ;;		_disk_write
  1709 ;;		_mem_cpy
  1710 ;;		_move_window
  1711 ;;		_sync_window
  1712 ;;		_validate
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text1
  1719  001272                     __ptext1:
  1720                           	opt callstack 0
  1721  001272                     _f_write:
  1722                           	opt callstack 20
  1723                           
  1724                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1725                           
  1726                           ;incstack = 0
  1727  001272  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1728  001276  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1729                           
  1730                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1731  00127A  C073  FFD9         	movff	f_write@bw,fsr2l
  1732  00127E  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1733  001282  0E00               	movlw	0
  1734  001284  6EDE               	movwf	postinc2,c
  1735  001286  0E00               	movlw	0
  1736  001288  6EDD               	movwf	postdec2,c
  1737                           
  1738                           ;ff.c: 2707:  res = validate(fp);
  1739  00128A  C06D  F002         	movff	f_write@fp,validate@obj
  1740  00128E  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1741  001292  EC04  F028         	call	_validate	;wreg free
  1742  001296  0100               	movlb	0	; () banked
  1743  001298  6F81               	movwf	f_write@res& (0+255),b
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1747  00129A  5181               	movf	f_write@res& (0+255),w,b
  1748  00129C  A4D8               	btfss	status,2,c
  1749  00129E  0012               	return	
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;ff.c: 2709:  if (fp->err)
  1753  0012A0  EE20 F005          	lfsr	2,5
  1754  0012A4  516D               	movf	f_write@fp& (0+255),w,b
  1755  0012A6  26D9               	addwf	fsr2l,f,c
  1756  0012A8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1757  0012AA  22DA               	addwfc	fsr2h,f,c
  1758  0012AC  50DF               	movf	indf2,w,c
  1759  0012AE  A4D8               	btfss	status,2,c
  1760  0012B0  0012               	return	
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1764  0012B2  EE20 F004          	lfsr	2,4
  1765  0012B6  516D               	movf	f_write@fp& (0+255),w,b
  1766  0012B8  26D9               	addwf	fsr2l,f,c
  1767  0012BA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1768  0012BC  22DA               	addwfc	fsr2h,f,c
  1769  0012BE  A2DF               	btfss	indf2,1,c
  1770  0012C0  0012               	return	
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1774  0012C2  EE20 F006          	lfsr	2,6
  1775  0012C6  516D               	movf	f_write@fp& (0+255),w,b
  1776  0012C8  26D9               	addwf	fsr2l,f,c
  1777  0012CA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1778  0012CC  22DA               	addwfc	fsr2h,f,c
  1779  0012CE  EE10 F006          	lfsr	1,6
  1780  0012D2  516D               	movf	f_write@fp& (0+255),w,b
  1781  0012D4  26E1               	addwf	fsr1l,f,c
  1782  0012D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1783  0012D8  22E2               	addwfc	fsr1h,f,c
  1784  0012DA  CFE6 F079          	movff	postinc1,??_f_write+4
  1785  0012DE  CFE6 F07A          	movff	postinc1,??_f_write+5
  1786  0012E2  CFE6 F07B          	movff	postinc1,??_f_write+6
  1787  0012E6  CFE6 F07C          	movff	postinc1,??_f_write+7
  1788  0012EA  5171               	movf	f_write@btw& (0+255),w,b
  1789  0012EC  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1790  0012EE  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1791  0012F0  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1792  0012F2  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1793  0012F4  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1794  0012F6  0E00               	movlw	0
  1795  0012F8  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1796  0012FA  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1797  0012FC  0E00               	movlw	0
  1798  0012FE  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1799  001300  6F80               	movwf	(??_f_write+11)& (0+255),b
  1800  001302  50DE               	movf	postinc2,w,c
  1801  001304  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1802  001306  50DE               	movf	postinc2,w,c
  1803  001308  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1804  00130A  50DE               	movf	postinc2,w,c
  1805  00130C  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1806  00130E  50DE               	movf	postinc2,w,c
  1807  001310  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1808  001312  B0D8               	btfsc	status,0,c
  1809  001314  D329               	goto	l6414
  1810                           
  1811                           ; BSR set to: 0
  1812  001316  0E00               	movlw	0
  1813  001318  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1814  00131A  0E00               	movlw	0
  1815  00131C  6F71               	movwf	f_write@btw& (0+255),b
  1816  00131E  D324               	goto	l6414
  1817  001320                     l6306:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1821  001320  EE20 F006          	lfsr	2,6
  1822  001324  516D               	movf	f_write@fp& (0+255),w,b
  1823  001326  26D9               	addwf	fsr2l,f,c
  1824  001328  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1825  00132A  22DA               	addwfc	fsr2h,f,c
  1826  00132C  0EFF               	movlw	255
  1827  00132E  14DE               	andwf	postinc2,w,c
  1828  001330  6F75               	movwf	??_f_write& (0+255),b
  1829  001332  0E01               	movlw	1
  1830  001334  14DE               	andwf	postinc2,w,c
  1831  001336  6F76               	movwf	(??_f_write+1)& (0+255),b
  1832  001338  0E00               	movlw	0
  1833  00133A  14DE               	andwf	postinc2,w,c
  1834  00133C  6F77               	movwf	(??_f_write+2)& (0+255),b
  1835  00133E  0E00               	movlw	0
  1836  001340  14DE               	andwf	postinc2,w,c
  1837  001342  6F78               	movwf	(??_f_write+3)& (0+255),b
  1838  001344  5175               	movf	??_f_write& (0+255),w,b
  1839  001346  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1840  001348  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1841  00134A  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1842  00134C  A4D8               	btfss	status,2,c
  1843  00134E  D26A               	goto	l6390
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1847  001350  EE20 F006          	lfsr	2,6
  1848  001354  516D               	movf	f_write@fp& (0+255),w,b
  1849  001356  26D9               	addwf	fsr2l,f,c
  1850  001358  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1851  00135A  22DA               	addwfc	fsr2h,f,c
  1852  00135C  CFDE F075          	movff	postinc2,??_f_write
  1853  001360  CFDE F076          	movff	postinc2,??_f_write+1
  1854  001364  CFDE F077          	movff	postinc2,??_f_write+2
  1855  001368  CFDE F078          	movff	postinc2,??_f_write+3
  1856  00136C  0E0A               	movlw	10
  1857  00136E  D005               	goto	u8360
  1858  001370                     u8365:
  1859  001370  90D8               	bcf	status,0,c
  1860  001372  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1861  001374  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1862  001376  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1863  001378  3375               	rrcf	??_f_write& (0+255),f,b
  1864  00137A                     u8360:
  1865  00137A  2EE8               	decfsz	wreg,f,c
  1866  00137C  D7F9               	goto	u8365
  1867  00137E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1868  001382  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1869  001386  EE10 F002          	lfsr	1,2
  1870  00138A  50DE               	movf	postinc2,w,c
  1871  00138C  26E1               	addwf	fsr1l,f,c
  1872  00138E  50DD               	movf	postdec2,w,c
  1873  001390  22E2               	addwfc	fsr1h,f,c
  1874  001392  50E7               	movf	indf1,w,c
  1875  001394  6F79               	movwf	(??_f_write+4)& (0+255),b
  1876  001396  0579               	decf	(??_f_write+4)& (0+255),w,b
  1877  001398  1575               	andwf	??_f_write& (0+255),w,b
  1878  00139A  6F84               	movwf	f_write@csect& (0+255),b
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;ff.c: 2719:    if (!csect) {
  1882  00139C  5184               	movf	f_write@csect& (0+255),w,b
  1883  00139E  A4D8               	btfss	status,2,c
  1884  0013A0  D0A3               	goto	l6342
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1888  0013A2  EE20 F006          	lfsr	2,6
  1889  0013A6  516D               	movf	f_write@fp& (0+255),w,b
  1890  0013A8  26D9               	addwf	fsr2l,f,c
  1891  0013AA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1892  0013AC  22DA               	addwfc	fsr2h,f,c
  1893  0013AE  50DE               	movf	postinc2,w,c
  1894  0013B0  10DE               	iorwf	postinc2,w,c
  1895  0013B2  10DE               	iorwf	postinc2,w,c
  1896  0013B4  10DE               	iorwf	postinc2,w,c
  1897  0013B6  A4D8               	btfss	status,2,c
  1898  0013B8  D027               	goto	l6320
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;ff.c: 2721:      clst = fp->sclust;
  1902  0013BA  EE20 F00E          	lfsr	2,14
  1903  0013BE  516D               	movf	f_write@fp& (0+255),w,b
  1904  0013C0  26D9               	addwf	fsr2l,f,c
  1905  0013C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1906  0013C4  22DA               	addwfc	fsr2h,f,c
  1907  0013C6  CFDE F08B          	movff	postinc2,f_write@clst
  1908  0013CA  CFDE F08C          	movff	postinc2,f_write@clst+1
  1909  0013CE  CFDE F08D          	movff	postinc2,f_write@clst+2
  1910  0013D2  CFDE F08E          	movff	postinc2,f_write@clst+3
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;ff.c: 2722:      if (clst == 0)
  1914  0013D6  518B               	movf	f_write@clst& (0+255),w,b
  1915  0013D8  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1916  0013DA  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1917  0013DC  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1918  0013DE  A4D8               	btfss	status,2,c
  1919  0013E0  D033               	goto	l6322
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1923  0013E2  C06D  FFD9         	movff	f_write@fp,fsr2l
  1924  0013E6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1925  0013EA  CFDE F056          	movff	postinc2,create_chain@fs
  1926  0013EE  CFDD F057          	movff	postdec2,create_chain@fs+1
  1927  0013F2  0E00               	movlw	0
  1928  0013F4  6E58               	movwf	create_chain@clst,c
  1929  0013F6  0E00               	movlw	0
  1930  0013F8  6E59               	movwf	create_chain@clst+1,c
  1931  0013FA  0E00               	movlw	0
  1932  0013FC  6E5A               	movwf	create_chain@clst+2,c
  1933  0013FE  0E00               	movlw	0
  1934  001400  6E5B               	movwf	create_chain@clst+3,c
  1935  001402  ECF5  F019         	call	_create_chain	;wreg free
  1936  001406  D018               	goto	L1
  1937  001408                     l6320:
  1938                           
  1939                           ; BSR set to: 0
  1940                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1941  001408  C06D  FFD9         	movff	f_write@fp,fsr2l
  1942  00140C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1943  001410  CFDE F056          	movff	postinc2,create_chain@fs
  1944  001414  CFDD F057          	movff	postdec2,create_chain@fs+1
  1945  001418  EE20 F012          	lfsr	2,18
  1946  00141C  516D               	movf	f_write@fp& (0+255),w,b
  1947  00141E  26D9               	addwf	fsr2l,f,c
  1948  001420  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1949  001422  22DA               	addwfc	fsr2h,f,c
  1950  001424  CFDE F058          	movff	postinc2,create_chain@clst
  1951  001428  CFDE F059          	movff	postinc2,create_chain@clst+1
  1952  00142C  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1953  001430  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1954  001434  ECF5  F019         	call	_create_chain	;wreg free
  1955  001438                     L1:
  1956  001438  C056  F08B         	movff	?_create_chain,f_write@clst
  1957  00143C  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1958  001440  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1959  001444  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1960  001448                     l6322:
  1961                           
  1962                           ;ff.c: 2732:     if (clst == 0) break;
  1963  001448  0100               	movlb	0	; () banked
  1964  00144A  518B               	movf	f_write@clst& (0+255),w,b
  1965  00144C  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1966  00144E  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1967  001450  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1968  001452  B4D8               	btfsc	status,2,c
  1969  001454  D28D               	goto	u8580
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1973  001456  058B               	decf	f_write@clst& (0+255),w,b
  1974  001458  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1975  00145A  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1976  00145C  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1977  00145E  A4D8               	btfss	status,2,c
  1978  001460  D009               	goto	l6332
  1979                           
  1980                           ; BSR set to: 0
  1981  001462  EE20 F005          	lfsr	2,5
  1982  001466  516D               	movf	f_write@fp& (0+255),w,b
  1983  001468  26D9               	addwf	fsr2l,f,c
  1984  00146A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1985  00146C  22DA               	addwfc	fsr2h,f,c
  1986  00146E  0E02               	movlw	2
  1987  001470  6EDF               	movwf	indf2,c
  1988  001472  0012               	return	
  1989  001474                     l6332:
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1993  001474  298B               	incf	f_write@clst& (0+255),w,b
  1994  001476  E110               	bnz	l6338
  1995  001478  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1996  00147A  E10E               	bnz	l6338
  1997  00147C  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1998  00147E  E10C               	bnz	l6338
  1999  001480  298E               	incf	(f_write@clst+3)& (0+255),w,b
  2000  001482  A4D8               	btfss	status,2,c
  2001  001484  D009               	goto	l6338
  2002                           
  2003                           ; BSR set to: 0
  2004  001486  EE20 F005          	lfsr	2,5
  2005  00148A  516D               	movf	f_write@fp& (0+255),w,b
  2006  00148C  26D9               	addwf	fsr2l,f,c
  2007  00148E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2008  001490  22DA               	addwfc	fsr2h,f,c
  2009  001492  0E01               	movlw	1
  2010  001494  6EDF               	movwf	indf2,c
  2011  001496  0012               	return	
  2012  001498                     l6338:
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;ff.c: 2735:     fp->clust = clst;
  2016  001498  EE20 F012          	lfsr	2,18
  2017  00149C  516D               	movf	f_write@fp& (0+255),w,b
  2018  00149E  26D9               	addwf	fsr2l,f,c
  2019  0014A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2020  0014A2  22DA               	addwfc	fsr2h,f,c
  2021  0014A4  C08B  FFDE         	movff	f_write@clst,postinc2
  2022  0014A8  C08C  FFDE         	movff	f_write@clst+1,postinc2
  2023  0014AC  C08D  FFDE         	movff	f_write@clst+2,postinc2
  2024  0014B0  C08E  FFDE         	movff	f_write@clst+3,postinc2
  2025                           
  2026                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  2027  0014B4  EE20 F00E          	lfsr	2,14
  2028  0014B8  516D               	movf	f_write@fp& (0+255),w,b
  2029  0014BA  26D9               	addwf	fsr2l,f,c
  2030  0014BC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2031  0014BE  22DA               	addwfc	fsr2h,f,c
  2032  0014C0  50DE               	movf	postinc2,w,c
  2033  0014C2  10DE               	iorwf	postinc2,w,c
  2034  0014C4  10DE               	iorwf	postinc2,w,c
  2035  0014C6  10DE               	iorwf	postinc2,w,c
  2036  0014C8  A4D8               	btfss	status,2,c
  2037  0014CA  D00E               	goto	l6342
  2038                           
  2039                           ; BSR set to: 0
  2040  0014CC  EE20 F00E          	lfsr	2,14
  2041  0014D0  516D               	movf	f_write@fp& (0+255),w,b
  2042  0014D2  26D9               	addwf	fsr2l,f,c
  2043  0014D4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2044  0014D6  22DA               	addwfc	fsr2h,f,c
  2045  0014D8  C08B  FFDE         	movff	f_write@clst,postinc2
  2046  0014DC  C08C  FFDE         	movff	f_write@clst+1,postinc2
  2047  0014E0  C08D  FFDE         	movff	f_write@clst+2,postinc2
  2048  0014E4  C08E  FFDE         	movff	f_write@clst+3,postinc2
  2049  0014E8                     l6342:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  2053  0014E8  EE20 F016          	lfsr	2,22
  2054  0014EC  516D               	movf	f_write@fp& (0+255),w,b
  2055  0014EE  26D9               	addwf	fsr2l,f,c
  2056  0014F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2057  0014F2  22DA               	addwfc	fsr2h,f,c
  2058  0014F4  C06D  FFE1         	movff	f_write@fp,fsr1l
  2059  0014F8  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  2060  0014FC  EE00 F02A          	lfsr	0,42
  2061  001500  50E6               	movf	postinc1,w,c
  2062  001502  26E9               	addwf	fsr0l,f,c
  2063  001504  50E5               	movf	postdec1,w,c
  2064  001506  22EA               	addwfc	fsr0h,f,c
  2065  001508  50DE               	movf	postinc2,w,c
  2066  00150A  18EE               	xorwf	postinc0,w,c
  2067  00150C  E121               	bnz	l6350
  2068  00150E  50DE               	movf	postinc2,w,c
  2069  001510  18EE               	xorwf	postinc0,w,c
  2070  001512  E11E               	bnz	l6350
  2071  001514  50DE               	movf	postinc2,w,c
  2072  001516  18EE               	xorwf	postinc0,w,c
  2073  001518  E11B               	bnz	l6350
  2074  00151A  50DE               	movf	postinc2,w,c
  2075  00151C  18EE               	xorwf	postinc0,w,c
  2076  00151E  A4D8               	btfss	status,2,c
  2077  001520  D017               	goto	l6350
  2078                           
  2079                           ; BSR set to: 0
  2080  001522  C06D  FFD9         	movff	f_write@fp,fsr2l
  2081  001526  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2082  00152A  CFDE F01B          	movff	postinc2,sync_window@fs
  2083  00152E  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2084  001532  ECDE  F020         	call	_sync_window	;wreg free
  2085  001536  0900               	iorlw	0
  2086  001538  B4D8               	btfsc	status,2,c
  2087  00153A  D00A               	goto	l6350
  2088                           
  2089                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2090  00153C  0100               	movlb	0	; () banked
  2091  00153E  EE20 F005          	lfsr	2,5
  2092  001542  516D               	movf	f_write@fp& (0+255),w,b
  2093  001544  26D9               	addwf	fsr2l,f,c
  2094  001546  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2095  001548  22DA               	addwfc	fsr2h,f,c
  2096  00154A  0E01               	movlw	1
  2097  00154C  6EDF               	movwf	indf2,c
  2098  00154E  0012               	return	
  2099  001550                     l6350:
  2100                           
  2101                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  2102  001550  C06D  FFD9         	movff	f_write@fp,fsr2l
  2103  001554  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2104  001558  CFDE F00D          	movff	postinc2,clust2sect@fs
  2105  00155C  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  2106  001560  0100               	movlb	0	; () banked
  2107  001562  EE20 F012          	lfsr	2,18
  2108  001566  516D               	movf	f_write@fp& (0+255),w,b
  2109  001568  26D9               	addwf	fsr2l,f,c
  2110  00156A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2111  00156C  22DA               	addwfc	fsr2h,f,c
  2112  00156E  CFDE F00F          	movff	postinc2,clust2sect@clst
  2113  001572  CFDE F010          	movff	postinc2,clust2sect@clst+1
  2114  001576  CFDE F011          	movff	postinc2,clust2sect@clst+2
  2115  00157A  CFDE F012          	movff	postinc2,clust2sect@clst+3
  2116  00157E  ECFC  F026         	call	_clust2sect	;wreg free
  2117  001582  C00D  F087         	movff	?_clust2sect,f_write@sect
  2118  001586  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  2119  00158A  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  2120  00158E  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  2121                           
  2122                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2123  001592  0100               	movlb	0	; () banked
  2124  001594  5187               	movf	f_write@sect& (0+255),w,b
  2125  001596  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  2126  001598  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  2127  00159A  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  2128  00159C  A4D8               	btfss	status,2,c
  2129  00159E  D009               	goto	l6358
  2130                           
  2131                           ; BSR set to: 0
  2132  0015A0  EE20 F005          	lfsr	2,5
  2133  0015A4  516D               	movf	f_write@fp& (0+255),w,b
  2134  0015A6  26D9               	addwf	fsr2l,f,c
  2135  0015A8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2136  0015AA  22DA               	addwfc	fsr2h,f,c
  2137  0015AC  0E02               	movlw	2
  2138  0015AE  6EDF               	movwf	indf2,c
  2139  0015B0  0012               	return	
  2140  0015B2                     l6358:
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;ff.c: 2750:    sect += csect;
  2144  0015B2  5184               	movf	f_write@csect& (0+255),w,b
  2145  0015B4  2787               	addwf	f_write@sect& (0+255),f,b
  2146  0015B6  0E00               	movlw	0
  2147  0015B8  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  2148  0015BA  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  2149  0015BC  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  2150                           
  2151                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  2152  0015BE  C071  F075         	movff	f_write@btw,??_f_write
  2153  0015C2  C072  F076         	movff	f_write@btw+1,??_f_write+1
  2154  0015C6  0E09               	movlw	9
  2155  0015C8  6F77               	movwf	(??_f_write+2)& (0+255),b
  2156  0015CA                     u8475:
  2157  0015CA  90D8               	bcf	status,0,c
  2158  0015CC  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  2159  0015CE  3375               	rrcf	??_f_write& (0+255),f,b
  2160  0015D0  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  2161  0015D2  D7FB               	goto	u8475
  2162  0015D4  C075  F085         	movff	??_f_write,f_write@cc
  2163  0015D8  C076  F086         	movff	??_f_write+1,f_write@cc+1
  2164                           
  2165                           ;ff.c: 2752:    if (cc) {
  2166  0015DC  5185               	movf	f_write@cc& (0+255),w,b
  2167  0015DE  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  2168  0015E0  B4D8               	btfsc	status,2,c
  2169  0015E2  D0D2               	goto	l6378
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  2173  0015E4  5184               	movf	f_write@csect& (0+255),w,b
  2174  0015E6  2585               	addwf	f_write@cc& (0+255),w,b
  2175  0015E8  6F75               	movwf	??_f_write& (0+255),b
  2176  0015EA  0E00               	movlw	0
  2177  0015EC  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  2178  0015EE  6F76               	movwf	(??_f_write+1)& (0+255),b
  2179  0015F0  C06D  FFD9         	movff	f_write@fp,fsr2l
  2180  0015F4  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2181  0015F8  EE10 F002          	lfsr	1,2
  2182  0015FC  50DE               	movf	postinc2,w,c
  2183  0015FE  26E1               	addwf	fsr1l,f,c
  2184  001600  50DD               	movf	postdec2,w,c
  2185  001602  22E2               	addwfc	fsr1h,f,c
  2186  001604  50E7               	movf	indf1,w,c
  2187  001606  6F77               	movwf	(??_f_write+2)& (0+255),b
  2188  001608  6B78               	clrf	(??_f_write+3)& (0+255),b
  2189  00160A  5175               	movf	??_f_write& (0+255),w,b
  2190  00160C  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  2191  00160E  5176               	movf	(??_f_write+1)& (0+255),w,b
  2192  001610  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  2193  001612  B0D8               	btfsc	status,0,c
  2194  001614  D012               	goto	l6364
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  2198  001616  C06D  FFD9         	movff	f_write@fp,fsr2l
  2199  00161A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2200  00161E  EE10 F002          	lfsr	1,2
  2201  001622  50DE               	movf	postinc2,w,c
  2202  001624  26E1               	addwf	fsr1l,f,c
  2203  001626  50DD               	movf	postdec2,w,c
  2204  001628  22E2               	addwfc	fsr1h,f,c
  2205  00162A  50E7               	movf	indf1,w,c
  2206  00162C  6F75               	movwf	??_f_write& (0+255),b
  2207  00162E  5184               	movf	f_write@csect& (0+255),w,b
  2208  001630  5D75               	subwf	??_f_write& (0+255),w,b
  2209  001632  6F85               	movwf	f_write@cc& (0+255),b
  2210  001634  6B86               	clrf	(f_write@cc+1)& (0+255),b
  2211  001636  A0D8               	btfss	status,0,c
  2212  001638  0786               	decf	(f_write@cc+1)& (0+255),f,b
  2213  00163A                     l6364:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2217  00163A  C082  F011         	movff	f_write@wbuff,disk_write@buff
  2218  00163E  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2219  001642  C087  F013         	movff	f_write@sect,disk_write@sector
  2220  001646  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  2221  00164A  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  2222  00164E  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  2223  001652  C085  F017         	movff	f_write@cc,disk_write@count
  2224  001656  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  2225  00165A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2226  00165E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2227  001662  EE10 F001          	lfsr	1,1
  2228  001666  50DE               	movf	postinc2,w,c
  2229  001668  26E1               	addwf	fsr1l,f,c
  2230  00166A  50DD               	movf	postdec2,w,c
  2231  00166C  22E2               	addwfc	fsr1h,f,c
  2232  00166E  50E7               	movf	indf1,w,c
  2233  001670  EC73  F023         	call	_disk_write
  2234  001674  0900               	iorlw	0
  2235  001676  B4D8               	btfsc	status,2,c
  2236  001678  D00A               	goto	l6370
  2237                           
  2238                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2239  00167A  0100               	movlb	0	; () banked
  2240  00167C  EE20 F005          	lfsr	2,5
  2241  001680  516D               	movf	f_write@fp& (0+255),w,b
  2242  001682  26D9               	addwf	fsr2l,f,c
  2243  001684  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2244  001686  22DA               	addwfc	fsr2h,f,c
  2245  001688  0E01               	movlw	1
  2246  00168A  6EDF               	movwf	indf2,c
  2247  00168C  0012               	return	
  2248  00168E                     l6370:
  2249                           
  2250                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2251  00168E  0100               	movlb	0	; () banked
  2252  001690  5185               	movf	f_write@cc& (0+255),w,b
  2253  001692  6F75               	movwf	??_f_write& (0+255),b
  2254  001694  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2255  001696  6F76               	movwf	(??_f_write+1)& (0+255),b
  2256  001698  6B77               	clrf	(??_f_write+2)& (0+255),b
  2257  00169A  6B78               	clrf	(??_f_write+3)& (0+255),b
  2258  00169C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2259  0016A0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2260  0016A4  EE10 F02A          	lfsr	1,42
  2261  0016A8  50DE               	movf	postinc2,w,c
  2262  0016AA  26E1               	addwf	fsr1l,f,c
  2263  0016AC  50DD               	movf	postdec2,w,c
  2264  0016AE  22E2               	addwfc	fsr1h,f,c
  2265  0016B0  CFE6 F079          	movff	postinc1,??_f_write+4
  2266  0016B4  CFE6 F07A          	movff	postinc1,??_f_write+5
  2267  0016B8  CFE6 F07B          	movff	postinc1,??_f_write+6
  2268  0016BC  CFE6 F07C          	movff	postinc1,??_f_write+7
  2269  0016C0  5187               	movf	f_write@sect& (0+255),w,b
  2270  0016C2  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2271  0016C4  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2272  0016C6  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2273  0016C8  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2274  0016CA  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2275  0016CC  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2276  0016CE  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2277  0016D0  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2278  0016D2  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2279  0016D4  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2280  0016D6  6F80               	movwf	(??_f_write+11)& (0+255),b
  2281  0016D8  5175               	movf	??_f_write& (0+255),w,b
  2282  0016DA  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2283  0016DC  5176               	movf	(??_f_write+1)& (0+255),w,b
  2284  0016DE  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2285  0016E0  5177               	movf	(??_f_write+2)& (0+255),w,b
  2286  0016E2  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2287  0016E4  5178               	movf	(??_f_write+3)& (0+255),w,b
  2288  0016E6  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2289  0016E8  B0D8               	btfsc	status,0,c
  2290  0016EA  D03E               	goto	l6376
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2294  0016EC  C06D  FFD9         	movff	f_write@fp,fsr2l
  2295  0016F0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2296  0016F4  CFDE F075          	movff	postinc2,??_f_write
  2297  0016F8  CFDD F076          	movff	postdec2,??_f_write+1
  2298  0016FC  0E2E               	movlw	46
  2299  0016FE  2575               	addwf	??_f_write& (0+255),w,b
  2300  001700  6E01               	movwf	mem_cpy@dst,c
  2301  001702  0E00               	movlw	0
  2302  001704  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2303  001706  6E02               	movwf	mem_cpy@dst+1,c
  2304  001708  C06D  FFD9         	movff	f_write@fp,fsr2l
  2305  00170C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2306  001710  EE10 F02A          	lfsr	1,42
  2307  001714  50DE               	movf	postinc2,w,c
  2308  001716  26E1               	addwf	fsr1l,f,c
  2309  001718  50DD               	movf	postdec2,w,c
  2310  00171A  22E2               	addwfc	fsr1h,f,c
  2311  00171C  CFE6 F077          	movff	postinc1,??_f_write+2
  2312  001720  CFE5 F078          	movff	postdec1,??_f_write+3
  2313  001724  5187               	movf	f_write@sect& (0+255),w,b
  2314  001726  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2315  001728  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2316  00172A  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2317  00172C  0E09               	movlw	9
  2318  00172E                     u8525:
  2319  00172E  90D8               	bcf	status,0,c
  2320  001730  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2321  001732  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2322  001734  2EE8               	decfsz	wreg,f,c
  2323  001736  D7FB               	goto	u8525
  2324  001738  5177               	movf	(??_f_write+2)& (0+255),w,b
  2325  00173A  2582               	addwf	f_write@wbuff& (0+255),w,b
  2326  00173C  6E03               	movwf	mem_cpy@src,c
  2327  00173E  5178               	movf	(??_f_write+3)& (0+255),w,b
  2328  001740  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2329  001742  6E04               	movwf	mem_cpy@src+1,c
  2330  001744  0E02               	movlw	2
  2331  001746  6E06               	movwf	mem_cpy@cnt+1,c
  2332  001748  0E00               	movlw	0
  2333  00174A  6E05               	movwf	mem_cpy@cnt,c
  2334  00174C  EC9F  F026         	call	_mem_cpy	;wreg free
  2335                           
  2336                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2337  001750  C06D  FFD9         	movff	f_write@fp,fsr2l
  2338  001754  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2339  001758  EE10 F004          	lfsr	1,4
  2340  00175C  50DE               	movf	postinc2,w,c
  2341  00175E  26E1               	addwf	fsr1l,f,c
  2342  001760  50DD               	movf	postdec2,w,c
  2343  001762  22E2               	addwfc	fsr1h,f,c
  2344  001764  0E00               	movlw	0
  2345  001766  6EE7               	movwf	indf1,c
  2346  001768                     l6376:
  2347                           
  2348                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2349  001768  C085  F075         	movff	f_write@cc,??_f_write
  2350  00176C  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2351  001770  0E09               	movlw	9
  2352  001772                     u8535:
  2353  001772  90D8               	bcf	status,0,c
  2354  001774  0100               	movlb	0	; () banked
  2355  001776  3775               	rlcf	??_f_write& (0+255),f,b
  2356  001778  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2357  00177A  2EE8               	decfsz	wreg,f,c
  2358  00177C  D7FA               	goto	u8535
  2359  00177E  C075  F08F         	movff	??_f_write,f_write@wcnt
  2360  001782  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2361                           
  2362                           ;ff.c: 2771:     continue;
  2363  001786  D0D2               	goto	l6406
  2364  001788                     l6378:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2368  001788  EE20 F00A          	lfsr	2,10
  2369  00178C  516D               	movf	f_write@fp& (0+255),w,b
  2370  00178E  26D9               	addwf	fsr2l,f,c
  2371  001790  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2372  001792  22DA               	addwfc	fsr2h,f,c
  2373  001794  EE10 F006          	lfsr	1,6
  2374  001798  516D               	movf	f_write@fp& (0+255),w,b
  2375  00179A  26E1               	addwf	fsr1l,f,c
  2376  00179C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2377  00179E  22E2               	addwfc	fsr1h,f,c
  2378  0017A0  50DE               	movf	postinc2,w,c
  2379  0017A2  5CE6               	subwf	postinc1,w,c
  2380  0017A4  50DE               	movf	postinc2,w,c
  2381  0017A6  58E6               	subwfb	postinc1,w,c
  2382  0017A8  50DE               	movf	postinc2,w,c
  2383  0017AA  58E6               	subwfb	postinc1,w,c
  2384  0017AC  50DE               	movf	postinc2,w,c
  2385  0017AE  58E6               	subwfb	postinc1,w,c
  2386  0017B0  A0D8               	btfss	status,0,c
  2387  0017B2  D029               	goto	l6388
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2391  0017B4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2392  0017B8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2393  0017BC  CFDE F01B          	movff	postinc2,sync_window@fs
  2394  0017C0  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2395  0017C4  ECDE  F020         	call	_sync_window	;wreg free
  2396  0017C8  0900               	iorlw	0
  2397  0017CA  B4D8               	btfsc	status,2,c
  2398  0017CC  D00A               	goto	l6386
  2399  0017CE  0100               	movlb	0	; () banked
  2400  0017D0  EE20 F005          	lfsr	2,5
  2401  0017D4  516D               	movf	f_write@fp& (0+255),w,b
  2402  0017D6  26D9               	addwf	fsr2l,f,c
  2403  0017D8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2404  0017DA  22DA               	addwfc	fsr2h,f,c
  2405  0017DC  0E01               	movlw	1
  2406  0017DE  6EDF               	movwf	indf2,c
  2407  0017E0  0012               	return	
  2408  0017E2                     l6386:
  2409                           
  2410                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2411  0017E2  C06D  FFD9         	movff	f_write@fp,fsr2l
  2412  0017E6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2413  0017EA  EE10 F02A          	lfsr	1,42
  2414  0017EE  50DE               	movf	postinc2,w,c
  2415  0017F0  26E1               	addwf	fsr1l,f,c
  2416  0017F2  50DD               	movf	postdec2,w,c
  2417  0017F4  22E2               	addwfc	fsr1h,f,c
  2418  0017F6  C087  FFE6         	movff	f_write@sect,postinc1
  2419  0017FA  C088  FFE6         	movff	f_write@sect+1,postinc1
  2420  0017FE  C089  FFE6         	movff	f_write@sect+2,postinc1
  2421  001802  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2422  001806                     l6388:
  2423                           
  2424                           ;ff.c: 2785:    fp->dsect = sect;
  2425  001806  0100               	movlb	0	; () banked
  2426  001808  EE20 F016          	lfsr	2,22
  2427  00180C  516D               	movf	f_write@fp& (0+255),w,b
  2428  00180E  26D9               	addwf	fsr2l,f,c
  2429  001810  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2430  001812  22DA               	addwfc	fsr2h,f,c
  2431  001814  C087  FFDE         	movff	f_write@sect,postinc2
  2432  001818  C088  FFDE         	movff	f_write@sect+1,postinc2
  2433  00181C  C089  FFDE         	movff	f_write@sect+2,postinc2
  2434  001820  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2435  001824                     l6390:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2439  001824  0EFF               	movlw	255
  2440  001826  6F75               	movwf	??_f_write& (0+255),b
  2441  001828  0E01               	movlw	1
  2442  00182A  6F76               	movwf	(??_f_write+1)& (0+255),b
  2443  00182C  EE20 F006          	lfsr	2,6
  2444  001830  516D               	movf	f_write@fp& (0+255),w,b
  2445  001832  26D9               	addwf	fsr2l,f,c
  2446  001834  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2447  001836  22DA               	addwfc	fsr2h,f,c
  2448  001838  CFDE F077          	movff	postinc2,??_f_write+2
  2449  00183C  CFDD F078          	movff	postdec2,??_f_write+3
  2450  001840  5175               	movf	??_f_write& (0+255),w,b
  2451  001842  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2452  001844  5176               	movf	(??_f_write+1)& (0+255),w,b
  2453  001846  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2454  001848  5177               	movf	(??_f_write+2)& (0+255),w,b
  2455  00184A  0800               	sublw	0
  2456  00184C  6F8F               	movwf	f_write@wcnt& (0+255),b
  2457  00184E  5178               	movf	(??_f_write+3)& (0+255),w,b
  2458  001850  A0D8               	btfss	status,0,c
  2459  001852  2AE8               	incf	wreg,f,c
  2460  001854  0802               	sublw	2
  2461  001856  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2465  001858  518F               	movf	f_write@wcnt& (0+255),w,b
  2466  00185A  5D71               	subwf	f_write@btw& (0+255),w,b
  2467  00185C  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2468  00185E  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2469  001860  B0D8               	btfsc	status,0,c
  2470  001862  D004               	goto	l6396
  2471                           
  2472                           ; BSR set to: 0
  2473  001864  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2474  001868  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2475  00186C                     l6396:
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2479  00186C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2480  001870  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2481  001874  CFDE F030          	movff	postinc2,move_window@fs
  2482  001878  CFDD F031          	movff	postdec2,move_window@fs+1
  2483  00187C  EE20 F016          	lfsr	2,22
  2484  001880  516D               	movf	f_write@fp& (0+255),w,b
  2485  001882  26D9               	addwf	fsr2l,f,c
  2486  001884  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2487  001886  22DA               	addwfc	fsr2h,f,c
  2488  001888  CFDE F032          	movff	postinc2,move_window@sector
  2489  00188C  CFDE F033          	movff	postinc2,move_window@sector+1
  2490  001890  CFDE F034          	movff	postinc2,move_window@sector+2
  2491  001894  CFDE F035          	movff	postinc2,move_window@sector+3
  2492  001898  ECB1  F027         	call	_move_window	;wreg free
  2493  00189C  0900               	iorlw	0
  2494  00189E  B4D8               	btfsc	status,2,c
  2495  0018A0  D00A               	goto	l6402
  2496                           
  2497                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2498  0018A2  0100               	movlb	0	; () banked
  2499  0018A4  EE20 F005          	lfsr	2,5
  2500  0018A8  516D               	movf	f_write@fp& (0+255),w,b
  2501  0018AA  26D9               	addwf	fsr2l,f,c
  2502  0018AC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2503  0018AE  22DA               	addwfc	fsr2h,f,c
  2504  0018B0  0E01               	movlw	1
  2505  0018B2  6EDF               	movwf	indf2,c
  2506  0018B4  0012               	return	
  2507  0018B6                     l6402:
  2508                           
  2509                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2510  0018B6  0EFF               	movlw	255
  2511  0018B8  0100               	movlb	0	; () banked
  2512  0018BA  6F75               	movwf	??_f_write& (0+255),b
  2513  0018BC  0E01               	movlw	1
  2514  0018BE  6F76               	movwf	(??_f_write+1)& (0+255),b
  2515  0018C0  EE20 F006          	lfsr	2,6
  2516  0018C4  516D               	movf	f_write@fp& (0+255),w,b
  2517  0018C6  26D9               	addwf	fsr2l,f,c
  2518  0018C8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2519  0018CA  22DA               	addwfc	fsr2h,f,c
  2520  0018CC  CFDE F077          	movff	postinc2,??_f_write+2
  2521  0018D0  CFDD F078          	movff	postdec2,??_f_write+3
  2522  0018D4  5175               	movf	??_f_write& (0+255),w,b
  2523  0018D6  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2524  0018D8  5176               	movf	(??_f_write+1)& (0+255),w,b
  2525  0018DA  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2526  0018DC  C06D  FFD9         	movff	f_write@fp,fsr2l
  2527  0018E0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2528  0018E4  CFDE F079          	movff	postinc2,??_f_write+4
  2529  0018E8  CFDD F07A          	movff	postdec2,??_f_write+5
  2530  0018EC  5177               	movf	(??_f_write+2)& (0+255),w,b
  2531  0018EE  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2532  0018F0  5178               	movf	(??_f_write+3)& (0+255),w,b
  2533  0018F2  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2534  0018F4  0E2E               	movlw	46
  2535  0018F6  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2536  0018F8  6E01               	movwf	mem_cpy@dst,c
  2537  0018FA  0E00               	movlw	0
  2538  0018FC  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2539  0018FE  6E02               	movwf	mem_cpy@dst+1,c
  2540  001900  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2541  001904  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2542  001908  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2543  00190C  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2544  001910  EC9F  F026         	call	_mem_cpy	;wreg free
  2545                           
  2546                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2547  001914  C06D  FFD9         	movff	f_write@fp,fsr2l
  2548  001918  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2549  00191C  EE10 F004          	lfsr	1,4
  2550  001920  50DE               	movf	postinc2,w,c
  2551  001922  26E1               	addwf	fsr1l,f,c
  2552  001924  50DD               	movf	postdec2,w,c
  2553  001926  22E2               	addwfc	fsr1h,f,c
  2554  001928  0E01               	movlw	1
  2555  00192A  6EE7               	movwf	indf1,c
  2556  00192C                     l6406:
  2557  00192C  0100               	movlb	0	; () banked
  2558  00192E  518F               	movf	f_write@wcnt& (0+255),w,b
  2559  001930  2782               	addwf	f_write@wbuff& (0+255),f,b
  2560  001932  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2561  001934  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2562                           
  2563                           ; BSR set to: 0
  2564  001936  EE20 F006          	lfsr	2,6
  2565  00193A  516D               	movf	f_write@fp& (0+255),w,b
  2566  00193C  26D9               	addwf	fsr2l,f,c
  2567  00193E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2568  001940  22DA               	addwfc	fsr2h,f,c
  2569  001942  518F               	movf	f_write@wcnt& (0+255),w,b
  2570  001944  26DE               	addwf	postinc2,f,c
  2571  001946  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2572  001948  22DE               	addwfc	postinc2,f,c
  2573  00194A  0E00               	movlw	0
  2574  00194C  22DE               	addwfc	postinc2,f,c
  2575  00194E  22DE               	addwfc	postinc2,f,c
  2576                           
  2577                           ; BSR set to: 0
  2578  001950  C073  FFD9         	movff	f_write@bw,fsr2l
  2579  001954  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2580  001958  518F               	movf	f_write@wcnt& (0+255),w,b
  2581  00195A  26DE               	addwf	postinc2,f,c
  2582  00195C  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2583  00195E  22DD               	addwfc	postdec2,f,c
  2584                           
  2585                           ; BSR set to: 0
  2586  001960  518F               	movf	f_write@wcnt& (0+255),w,b
  2587  001962  5F71               	subwf	f_write@btw& (0+255),f,b
  2588  001964  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2589  001966  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2590  001968                     l6414:
  2591                           
  2592                           ; BSR set to: 0
  2593  001968  5171               	movf	f_write@btw& (0+255),w,b
  2594  00196A  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2595  00196C  A4D8               	btfss	status,2,c
  2596  00196E  D4D8               	goto	l6306
  2597  001970                     u8580:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2601  001970  EE20 F006          	lfsr	2,6
  2602  001974  516D               	movf	f_write@fp& (0+255),w,b
  2603  001976  26D9               	addwf	fsr2l,f,c
  2604  001978  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2605  00197A  22DA               	addwfc	fsr2h,f,c
  2606  00197C  EE10 F00A          	lfsr	1,10
  2607  001980  516D               	movf	f_write@fp& (0+255),w,b
  2608  001982  26E1               	addwf	fsr1l,f,c
  2609  001984  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2610  001986  22E2               	addwfc	fsr1h,f,c
  2611  001988  50DE               	movf	postinc2,w,c
  2612  00198A  5CE6               	subwf	postinc1,w,c
  2613  00198C  50DE               	movf	postinc2,w,c
  2614  00198E  58E6               	subwfb	postinc1,w,c
  2615  001990  50DE               	movf	postinc2,w,c
  2616  001992  58E6               	subwfb	postinc1,w,c
  2617  001994  50DE               	movf	postinc2,w,c
  2618  001996  58E6               	subwfb	postinc1,w,c
  2619  001998  B0D8               	btfsc	status,0,c
  2620  00199A  D014               	goto	l6420
  2621                           
  2622                           ; BSR set to: 0
  2623  00199C  EE20 F006          	lfsr	2,6
  2624  0019A0  516D               	movf	f_write@fp& (0+255),w,b
  2625  0019A2  26D9               	addwf	fsr2l,f,c
  2626  0019A4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2627  0019A6  22DA               	addwfc	fsr2h,f,c
  2628  0019A8  EE10 F00A          	lfsr	1,10
  2629  0019AC  516D               	movf	f_write@fp& (0+255),w,b
  2630  0019AE  26E1               	addwf	fsr1l,f,c
  2631  0019B0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2632  0019B2  22E2               	addwfc	fsr1h,f,c
  2633  0019B4  CFDE FFE6          	movff	postinc2,postinc1
  2634  0019B8  CFDE FFE6          	movff	postinc2,postinc1
  2635  0019BC  CFDE FFE6          	movff	postinc2,postinc1
  2636  0019C0  CFDE FFE6          	movff	postinc2,postinc1
  2637  0019C4                     l6420:
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;ff.c: 2801:  fp->flag |= 0x20;
  2641  0019C4  EE20 F004          	lfsr	2,4
  2642  0019C8  516D               	movf	f_write@fp& (0+255),w,b
  2643  0019CA  26D9               	addwf	fsr2l,f,c
  2644  0019CC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2645  0019CE  22DA               	addwfc	fsr2h,f,c
  2646  0019D0  0E00               	movlw	0
  2647  0019D2  8ADB               	bsf	plusw2,5,c
  2648                           
  2649                           ; BSR set to: 0
  2650  0019D4  0012               	return		;funcret
  2651  0019D6                     __end_of_f_write:
  2652                           	opt callstack 0
  2653                           
  2654 ;; *************** function _f_open *****************
  2655 ;; Defined at:
  2656 ;;		line 2449 in file "ff.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  fp              2   58[BANK0 ] PTR struct .
  2659 ;;		 -> Fil(32), 
  2660 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2661 ;;		 -> STR_5(11), STR_3(1), STR_1(1), 
  2662 ;;  mode            1   62[BANK0 ] unsigned char 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;  dj             22   90[BANK0 ] struct .
  2665 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2666 ;;  dw              4   83[BANK0 ] unsigned long 
  2667 ;;  cl              4   79[BANK0 ] unsigned long 
  2668 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2669 ;;		 -> NULL(0), FatFs(558), 
  2670 ;;  res             1   87[BANK0 ] enum E93
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      enum E4918
  2673 ;; Registers used:
  2674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2680 ;;      Params:         0       5       0       0       0       0       0       0       0
  2681 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2682 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2683 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2684 ;;Total ram usage:       54 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:   13
  2687 ;; This function calls:
  2688 ;;		_dir_register
  2689 ;;		_find_volume
  2690 ;;		_follow_path
  2691 ;;		_ld_clust
  2692 ;;		_move_window
  2693 ;;		_remove_chain
  2694 ;;		_st_clust
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text2
  2701  003054                     __ptext2:
  2702                           	opt callstack 0
  2703  003054                     _f_open:
  2704                           	opt callstack 17
  2705                           
  2706                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;incstack = 0
  2710  003054  0100               	movlb	0	; () banked
  2711  003056  519A               	movf	f_open@fp& (0+255),w,b
  2712  003058  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2713  00305A  A4D8               	btfss	status,2,c
  2714  00305C  D002               	goto	l6052
  2715                           
  2716                           ; BSR set to: 0
  2717  00305E  0E09               	movlw	9
  2718  003060  0012               	return	
  2719  003062                     l6052:
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;ff.c: 2465:  fp->fs = 0;
  2723  003062  C09A  FFD9         	movff	f_open@fp,fsr2l
  2724  003066  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2725  00306A  0E00               	movlw	0
  2726  00306C  6EDE               	movwf	postinc2,c
  2727  00306E  0E00               	movlw	0
  2728  003070  6EDD               	movwf	postdec2,c
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2732  003072  C0D4  F0BA         	movff	ff@FatFs,f_open@dj
  2733  003076  C0D5  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2737  00307A  0E1F               	movlw	31
  2738  00307C  179E               	andwf	f_open@mode& (0+255),f,b
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2742  00307E  0EBA               	movlw	low f_open@dj
  2743  003080  6E45               	movwf	find_volume@rfs,c
  2744  003082  0E00               	movlw	high f_open@dj
  2745  003084  6E46               	movwf	find_volume@rfs+1,c
  2746  003086  0E9C               	movlw	low f_open@path
  2747  003088  6E47               	movwf	find_volume@path,c
  2748  00308A  0E00               	movlw	high f_open@path
  2749  00308C  6E48               	movwf	find_volume@path+1,c
  2750  00308E  519E               	movf	f_open@mode& (0+255),w,b
  2751  003090  0BFE               	andlw	254
  2752  003092  6E49               	movwf	find_volume@wmode,c
  2753  003094  EC62  F004         	call	_find_volume	;wreg free
  2754  003098  0100               	movlb	0	; () banked
  2755  00309A  6FB7               	movwf	f_open@res& (0+255),b
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;ff.c: 2479:  if (res == FR_OK) {
  2759  00309C  51B7               	movf	f_open@res& (0+255),w,b
  2760  00309E  A4D8               	btfss	status,2,c
  2761  0030A0  D1A2               	goto	l6156
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;ff.c: 2480:   (dj).fn = sfn;
  2765  0030A2  0EA3               	movlw	low f_open@sfn
  2766  0030A4  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2767  0030A6  0E00               	movlw	high f_open@sfn
  2768  0030A8  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2772  0030AA  0EBA               	movlw	low f_open@dj
  2773  0030AC  6F86               	movwf	follow_path@dp& (0+255),b
  2774  0030AE  0E00               	movlw	high f_open@dj
  2775  0030B0  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2776  0030B2  C09C  F088         	movff	f_open@path,follow_path@path
  2777  0030B6  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2778  0030BA  EC2F  F022         	call	_follow_path	;wreg free
  2779  0030BE  0100               	movlb	0	; () banked
  2780  0030C0  6FB7               	movwf	f_open@res& (0+255),b
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;ff.c: 2482:   dir = dj.dir;
  2784  0030C2  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2785  0030C6  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;ff.c: 2484:   if (res == FR_OK) {
  2789  0030CA  51B7               	movf	f_open@res& (0+255),w,b
  2790  0030CC  A4D8               	btfss	status,2,c
  2791  0030CE  D006               	goto	l6074
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;ff.c: 2485:    if (!dir)
  2795  0030D0  51B8               	movf	f_open@dir& (0+255),w,b
  2796  0030D2  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2797  0030D4  A4D8               	btfss	status,2,c
  2798  0030D6  D002               	goto	l6074
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2802  0030D8  0E06               	movlw	6
  2803  0030DA  6FB7               	movwf	f_open@res& (0+255),b
  2804  0030DC                     l6074:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2808  0030DC  C09E  F09F         	movff	f_open@mode,??_f_open
  2809  0030E0  0E1C               	movlw	28
  2810  0030E2  179F               	andwf	??_f_open& (0+255),f,b
  2811  0030E4  B4D8               	btfsc	status,2,c
  2812  0030E6  D0D3               	goto	l6122
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;ff.c: 2494:    if (res != FR_OK) {
  2816  0030E8  51B7               	movf	f_open@res& (0+255),w,b
  2817  0030EA  B4D8               	btfsc	status,2,c
  2818  0030EC  D012               	goto	l6086
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2822  0030EE  0E04               	movlw	4
  2823  0030F0  19B7               	xorwf	f_open@res& (0+255),w,b
  2824  0030F2  A4D8               	btfss	status,2,c
  2825  0030F4  D008               	goto	l6082
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;ff.c: 2499:      res = dir_register(&dj);
  2829  0030F6  0EBA               	movlw	low f_open@dj
  2830  0030F8  6F8A               	movwf	dir_register@dp& (0+255),b
  2831  0030FA  0E00               	movlw	high f_open@dj
  2832  0030FC  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2833  0030FE  ECCE  F025         	call	_dir_register	;wreg free
  2834  003102  0100               	movlb	0	; () banked
  2835  003104  6FB7               	movwf	f_open@res& (0+255),b
  2836  003106                     l6082:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;ff.c: 2501:     mode |= 0x08;
  2840  003106  879E               	bsf	f_open@mode& (0+255),3,b
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;ff.c: 2502:     dir = dj.dir;
  2844  003108  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2845  00310C  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2846                           
  2847                           ;ff.c: 2503:    }
  2848  003110  D012               	goto	l672
  2849  003112                     l6086:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2853  003112  EE20 F00B          	lfsr	2,11
  2854  003116  51B8               	movf	f_open@dir& (0+255),w,b
  2855  003118  26D9               	addwf	fsr2l,f,c
  2856  00311A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2857  00311C  22DA               	addwfc	fsr2h,f,c
  2858  00311E  50DF               	movf	indf2,w,c
  2859  003120  6F9F               	movwf	??_f_open& (0+255),b
  2860  003122  0E11               	movlw	17
  2861  003124  179F               	andwf	??_f_open& (0+255),f,b
  2862  003126  B4D8               	btfsc	status,2,c
  2863  003128  D002               	goto	l673
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;ff.c: 2506:      res = FR_DENIED;
  2867  00312A  0E07               	movlw	7
  2868  00312C  D003               	goto	L2
  2869  00312E                     l673:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;ff.c: 2508:      if (mode & 0x04)
  2873  00312E  A59E               	btfss	f_open@mode& (0+255),2,b
  2874  003130  D002               	goto	l672
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;ff.c: 2509:       res = FR_EXIST;
  2878  003132  0E08               	movlw	8
  2879  003134                     L2:
  2880  003134  6FB7               	movwf	f_open@res& (0+255),b
  2881  003136                     l672:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2885  003136  51B7               	movf	f_open@res& (0+255),w,b
  2886  003138  B4D8               	btfsc	status,2,c
  2887                           
  2888                           ; BSR set to: 0
  2889  00313A  A79E               	btfss	f_open@mode& (0+255),3,b
  2890  00313C  D0C1               	goto	l679
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2894                           
  2895                           ; BSR set to: 0
  2896  00313E  EE20 F00E          	lfsr	2,14
  2897  003142  51B8               	movf	f_open@dir& (0+255),w,b
  2898  003144  26D9               	addwf	fsr2l,f,c
  2899  003146  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2900  003148  22DA               	addwfc	fsr2h,f,c
  2901  00314A  0E00               	movlw	0
  2902  00314C  6EDE               	movwf	postinc2,c
  2903  00314E  0E00               	movlw	0
  2904  003150  6EDE               	movwf	postinc2,c
  2905  003152  0E21               	movlw	33
  2906  003154  6EDE               	movwf	postinc2,c
  2907  003156  0E46               	movlw	70
  2908  003158  6EDD               	movwf	postdec2,c
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2912  00315A  EE20 F016          	lfsr	2,22
  2913  00315E  51B8               	movf	f_open@dir& (0+255),w,b
  2914  003160  26D9               	addwf	fsr2l,f,c
  2915  003162  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2916  003164  22DA               	addwfc	fsr2h,f,c
  2917  003166  0E00               	movlw	0
  2918  003168  6EDE               	movwf	postinc2,c
  2919  00316A  0E00               	movlw	0
  2920  00316C  6EDE               	movwf	postinc2,c
  2921  00316E  0E21               	movlw	33
  2922  003170  6EDE               	movwf	postinc2,c
  2923  003172  0E46               	movlw	70
  2924  003174  6EDD               	movwf	postdec2,c
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;ff.c: 2516:     dir[11] = 0;
  2928  003176  EE20 F00B          	lfsr	2,11
  2929  00317A  51B8               	movf	f_open@dir& (0+255),w,b
  2930  00317C  26D9               	addwf	fsr2l,f,c
  2931  00317E  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2932  003180  22DA               	addwfc	fsr2h,f,c
  2933  003182  0E00               	movlw	0
  2934  003184  6EDF               	movwf	indf2,c
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2938  003186  EE20 F01C          	lfsr	2,28
  2939  00318A  51B8               	movf	f_open@dir& (0+255),w,b
  2940  00318C  26D9               	addwf	fsr2l,f,c
  2941  00318E  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2942  003190  22DA               	addwfc	fsr2h,f,c
  2943  003192  6ADE               	clrf	postinc2,c
  2944  003194  6ADE               	clrf	postinc2,c
  2945  003196  6ADE               	clrf	postinc2,c
  2946  003198  6ADD               	clrf	postdec2,c
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2950  00319A  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2951  00319E  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2952  0031A2  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2953  0031A6  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2954  0031AA  ECD0  F028         	call	_ld_clust	;wreg free
  2955  0031AE  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2956  0031B2  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2957  0031B6  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2958  0031BA  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2959                           
  2960                           ;ff.c: 2519:     st_clust(dir, 0);
  2961  0031BE  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2962  0031C2  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2963  0031C6  0E00               	movlw	0
  2964  0031C8  6E03               	movwf	st_clust@cl,c
  2965  0031CA  0E00               	movlw	0
  2966  0031CC  6E04               	movwf	st_clust@cl+1,c
  2967  0031CE  0E00               	movlw	0
  2968  0031D0  6E05               	movwf	st_clust@cl+2,c
  2969  0031D2  0E00               	movlw	0
  2970  0031D4  6E06               	movwf	st_clust@cl+3,c
  2971  0031D6  EC84  F02B         	call	_st_clust	;wreg free
  2972                           
  2973                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2974  0031DA  0100               	movlb	0	; () banked
  2975  0031DC  EE20 F004          	lfsr	2,4
  2976  0031E0  51BA               	movf	f_open@dj& (0+255),w,b
  2977  0031E2  26D9               	addwf	fsr2l,f,c
  2978  0031E4  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2979  0031E6  22DA               	addwfc	fsr2h,f,c
  2980  0031E8  0E01               	movlw	1
  2981  0031EA  6EDF               	movwf	indf2,c
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;ff.c: 2521:     if (cl) {
  2985  0031EC  51AF               	movf	f_open@cl& (0+255),w,b
  2986  0031EE  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2987  0031F0  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2988  0031F2  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2989  0031F4  B4D8               	btfsc	status,2,c
  2990  0031F6  D064               	goto	l679
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2994  0031F8  EE20 F02A          	lfsr	2,42
  2995  0031FC  51BA               	movf	f_open@dj& (0+255),w,b
  2996  0031FE  26D9               	addwf	fsr2l,f,c
  2997  003200  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2998  003202  22DA               	addwfc	fsr2h,f,c
  2999  003204  CFDE F0B3          	movff	postinc2,f_open@dw
  3000  003208  CFDE F0B4          	movff	postinc2,f_open@dw+1
  3001  00320C  CFDE F0B5          	movff	postinc2,f_open@dw+2
  3002  003210  CFDE F0B6          	movff	postinc2,f_open@dw+3
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  3006  003214  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  3007  003218  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  3008  00321C  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  3009  003220  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  3010  003224  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  3011  003228  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  3012  00322C  EC8A  F021         	call	_remove_chain	;wreg free
  3013  003230  0100               	movlb	0	; () banked
  3014  003232  6FB7               	movwf	f_open@res& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;ff.c: 2524:      if (res == FR_OK) {
  3018  003234  51B7               	movf	f_open@res& (0+255),w,b
  3019  003236  A4D8               	btfss	status,2,c
  3020  003238  D043               	goto	l679
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  3024  00323A  0EFF               	movlw	255
  3025  00323C  25AF               	addwf	f_open@cl& (0+255),w,b
  3026  00323E  6F9F               	movwf	??_f_open& (0+255),b
  3027  003240  0EFF               	movlw	255
  3028  003242  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  3029  003244  6FA0               	movwf	(??_f_open+1)& (0+255),b
  3030  003246  0EFF               	movlw	255
  3031  003248  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  3032  00324A  6FA1               	movwf	(??_f_open+2)& (0+255),b
  3033  00324C  0EFF               	movlw	255
  3034  00324E  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  3035  003250  6FA2               	movwf	(??_f_open+3)& (0+255),b
  3036  003252  EE20 F00A          	lfsr	2,10
  3037  003256  51BA               	movf	f_open@dj& (0+255),w,b
  3038  003258  26D9               	addwf	fsr2l,f,c
  3039  00325A  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3040  00325C  22DA               	addwfc	fsr2h,f,c
  3041  00325E  C09F  FFDE         	movff	??_f_open,postinc2
  3042  003262  C0A0  FFDE         	movff	??_f_open+1,postinc2
  3043  003266  C0A1  FFDE         	movff	??_f_open+2,postinc2
  3044  00326A  C0A2  FFDE         	movff	??_f_open+3,postinc2
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  3048  00326E  C0BA  F030         	movff	f_open@dj,move_window@fs
  3049  003272  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  3050  003276  C0B3  F032         	movff	f_open@dw,move_window@sector
  3051  00327A  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  3052  00327E  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  3053  003282  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  3054  003286  ECB1  F027         	call	_move_window	;wreg free
  3055  00328A  0100               	movlb	0	; () banked
  3056  00328C  D018               	goto	L3
  3057  00328E                     l6122:
  3058                           
  3059                           ; BSR set to: 0
  3060                           ;ff.c: 2532:    if (res == FR_OK) {
  3061  00328E  51B7               	movf	f_open@res& (0+255),w,b
  3062  003290  A4D8               	btfss	status,2,c
  3063  003292  D016               	goto	l679
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  3067  003294  EE20 F00B          	lfsr	2,11
  3068  003298  51B8               	movf	f_open@dir& (0+255),w,b
  3069  00329A  26D9               	addwf	fsr2l,f,c
  3070  00329C  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3071  00329E  22DA               	addwfc	fsr2h,f,c
  3072  0032A0  A8DF               	btfss	indf2,4,c
  3073  0032A2  D002               	goto	l681
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;ff.c: 2534:      res = FR_NO_FILE;
  3077  0032A4  0E04               	movlw	4
  3078  0032A6  D00B               	goto	L3
  3079  0032A8                     l681:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  3083  0032A8  A39E               	btfss	f_open@mode& (0+255),1,b
  3084  0032AA  D00A               	goto	l679
  3085                           
  3086                           ; BSR set to: 0
  3087  0032AC  EE20 F00B          	lfsr	2,11
  3088  0032B0  51B8               	movf	f_open@dir& (0+255),w,b
  3089  0032B2  26D9               	addwf	fsr2l,f,c
  3090  0032B4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3091  0032B6  22DA               	addwfc	fsr2h,f,c
  3092  0032B8  A0DF               	btfss	indf2,0,c
  3093  0032BA  D002               	goto	l679
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;ff.c: 2537:       res = FR_DENIED;
  3097  0032BC  0E07               	movlw	7
  3098  0032BE                     L3:
  3099  0032BE  6FB7               	movwf	f_open@res& (0+255),b
  3100  0032C0                     l679:
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;ff.c: 2541:   if (res == FR_OK) {
  3104  0032C0  51B7               	movf	f_open@res& (0+255),w,b
  3105  0032C2  A4D8               	btfss	status,2,c
  3106  0032C4  D020               	goto	l6140
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;ff.c: 2542:    if (mode & 0x08)
  3110  0032C6  B79E               	btfsc	f_open@mode& (0+255),3,b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;ff.c: 2543:     mode |= 0x20;
  3114  0032C8  8B9E               	bsf	f_open@mode& (0+255),5,b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  3118  0032CA  EE20 F02A          	lfsr	2,42
  3119  0032CE  51BA               	movf	f_open@dj& (0+255),w,b
  3120  0032D0  26D9               	addwf	fsr2l,f,c
  3121  0032D2  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  3122  0032D4  22DA               	addwfc	fsr2h,f,c
  3123  0032D6  EE10 F01A          	lfsr	1,26
  3124  0032DA  519A               	movf	f_open@fp& (0+255),w,b
  3125  0032DC  26E1               	addwf	fsr1l,f,c
  3126  0032DE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3127  0032E0  22E2               	addwfc	fsr1h,f,c
  3128  0032E2  CFDE FFE6          	movff	postinc2,postinc1
  3129  0032E6  CFDE FFE6          	movff	postinc2,postinc1
  3130  0032EA  CFDE FFE6          	movff	postinc2,postinc1
  3131  0032EE  CFDE FFE6          	movff	postinc2,postinc1
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;ff.c: 2545:    fp->dir_ptr = dir;
  3135  0032F2  EE20 F01E          	lfsr	2,30
  3136  0032F6  519A               	movf	f_open@fp& (0+255),w,b
  3137  0032F8  26D9               	addwf	fsr2l,f,c
  3138  0032FA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3139  0032FC  22DA               	addwfc	fsr2h,f,c
  3140  0032FE  C0B8  FFDE         	movff	f_open@dir,postinc2
  3141  003302  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  3142  003306                     l6140:
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;ff.c: 2565:   if (res == FR_OK) {
  3146  003306  51B7               	movf	f_open@res& (0+255),w,b
  3147  003308  A4D8               	btfss	status,2,c
  3148  00330A  D06D               	goto	l6156
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;ff.c: 2566:    fp->flag = mode;
  3152  00330C  EE20 F004          	lfsr	2,4
  3153  003310  519A               	movf	f_open@fp& (0+255),w,b
  3154  003312  26D9               	addwf	fsr2l,f,c
  3155  003314  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3156  003316  22DA               	addwfc	fsr2h,f,c
  3157  003318  C09E  FFDF         	movff	f_open@mode,indf2
  3158                           
  3159                           ;ff.c: 2567:    fp->err = 0;
  3160  00331C  EE20 F005          	lfsr	2,5
  3161  003320  519A               	movf	f_open@fp& (0+255),w,b
  3162  003322  26D9               	addwf	fsr2l,f,c
  3163  003324  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3164  003326  22DA               	addwfc	fsr2h,f,c
  3165  003328  0E00               	movlw	0
  3166  00332A  6EDF               	movwf	indf2,c
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  3170  00332C  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  3171  003330  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  3172  003334  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  3173  003338  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  3174  00333C  ECD0  F028         	call	_ld_clust	;wreg free
  3175  003340  0100               	movlb	0	; () banked
  3176  003342  EE20 F00E          	lfsr	2,14
  3177  003346  519A               	movf	f_open@fp& (0+255),w,b
  3178  003348  26D9               	addwf	fsr2l,f,c
  3179  00334A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3180  00334C  22DA               	addwfc	fsr2h,f,c
  3181  00334E  C001  FFDE         	movff	?_ld_clust,postinc2
  3182  003352  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3183  003356  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3184  00335A  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  3188  00335E  EE20 F01C          	lfsr	2,28
  3189  003362  51B8               	movf	f_open@dir& (0+255),w,b
  3190  003364  26D9               	addwf	fsr2l,f,c
  3191  003366  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3192  003368  22DA               	addwfc	fsr2h,f,c
  3193  00336A  EE10 F00A          	lfsr	1,10
  3194  00336E  519A               	movf	f_open@fp& (0+255),w,b
  3195  003370  26E1               	addwf	fsr1l,f,c
  3196  003372  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3197  003374  22E2               	addwfc	fsr1h,f,c
  3198  003376  CFDE FFE6          	movff	postinc2,postinc1
  3199  00337A  CFDE FFE6          	movff	postinc2,postinc1
  3200  00337E  CFDE FFE6          	movff	postinc2,postinc1
  3201  003382  CFDE FFE6          	movff	postinc2,postinc1
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;ff.c: 2570:    fp->fptr = 0;
  3205  003386  EE20 F006          	lfsr	2,6
  3206  00338A  519A               	movf	f_open@fp& (0+255),w,b
  3207  00338C  26D9               	addwf	fsr2l,f,c
  3208  00338E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3209  003390  22DA               	addwfc	fsr2h,f,c
  3210  003392  6ADE               	clrf	postinc2,c
  3211  003394  6ADE               	clrf	postinc2,c
  3212  003396  6ADE               	clrf	postinc2,c
  3213  003398  6ADD               	clrf	postdec2,c
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;ff.c: 2571:    fp->dsect = 0;
  3217  00339A  EE20 F016          	lfsr	2,22
  3218  00339E  519A               	movf	f_open@fp& (0+255),w,b
  3219  0033A0  26D9               	addwf	fsr2l,f,c
  3220  0033A2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3221  0033A4  22DA               	addwfc	fsr2h,f,c
  3222  0033A6  6ADE               	clrf	postinc2,c
  3223  0033A8  6ADE               	clrf	postinc2,c
  3224  0033AA  6ADE               	clrf	postinc2,c
  3225  0033AC  6ADD               	clrf	postdec2,c
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;ff.c: 2575:    fp->fs = dj.fs;
  3229  0033AE  C09A  FFD9         	movff	f_open@fp,fsr2l
  3230  0033B2  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3231  0033B6  C0BA  FFDE         	movff	f_open@dj,postinc2
  3232  0033BA  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;ff.c: 2576:    fp->id = fp->fs->id;
  3236  0033BE  C09A  FFD9         	movff	f_open@fp,fsr2l
  3237  0033C2  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3238  0033C6  EE10 F006          	lfsr	1,6
  3239  0033CA  50DE               	movf	postinc2,w,c
  3240  0033CC  26E1               	addwf	fsr1l,f,c
  3241  0033CE  50DD               	movf	postdec2,w,c
  3242  0033D0  22E2               	addwfc	fsr1h,f,c
  3243  0033D2  EE20 F002          	lfsr	2,2
  3244  0033D6  519A               	movf	f_open@fp& (0+255),w,b
  3245  0033D8  26D9               	addwf	fsr2l,f,c
  3246  0033DA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3247  0033DC  22DA               	addwfc	fsr2h,f,c
  3248  0033DE  CFE6 FFDE          	movff	postinc1,postinc2
  3249  0033E2  CFE5 FFDD          	movff	postdec1,postdec2
  3250  0033E6                     l6156:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;ff.c: 2580:  return res;
  3254  0033E6  51B7               	movf	f_open@res& (0+255),w,b
  3255                           
  3256                           ; BSR set to: 0
  3257  0033E8  0012               	return		;funcret
  3258  0033EA                     __end_of_f_open:
  3259                           	opt callstack 0
  3260                           
  3261 ;; *************** function _remove_chain *****************
  3262 ;; Defined at:
  3263 ;;		line 937 in file "ff.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  fs              2   85[COMRAM] PTR struct .
  3266 ;;		 -> NULL(0), FatFs(558), 
  3267 ;;  clst            4   87[COMRAM] unsigned long 
  3268 ;; Auto vars:     Size  Location     Type
  3269 ;;  nxt             4    1[BANK0 ] unsigned long 
  3270 ;;  res             1    0[BANK0 ] enum E93
  3271 ;; Return value:  Size  Location     Type
  3272 ;;                  1    wreg      enum E93
  3273 ;; Registers used:
  3274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3280 ;;      Params:         6       0       0       0       0       0       0       0       0
  3281 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3282 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3283 ;;      Totals:        10       5       0       0       0       0       0       0       0
  3284 ;;Total ram usage:       15 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    9
  3287 ;; This function calls:
  3288 ;;		_get_fat
  3289 ;;		_put_fat
  3290 ;; This function is called by:
  3291 ;;		_f_open
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text3
  3296  004314                     __ptext3:
  3297                           	opt callstack 0
  3298  004314                     _remove_chain:
  3299                           	opt callstack 20
  3300                           
  3301                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;incstack = 0
  3305  004314  505B               	movf	remove_chain@clst+3,w,c
  3306  004316  105A               	iorwf	remove_chain@clst+2,w,c
  3307  004318  1059               	iorwf	remove_chain@clst+1,w,c
  3308  00431A  E104               	bnz	u7110
  3309  00431C  0E02               	movlw	2
  3310  00431E  5C58               	subwf	remove_chain@clst,w,c
  3311  004320  A0D8               	btfss	status,0,c
  3312  004322  D010               	goto	u7120
  3313  004324                     u7110:
  3314  004324  EE20 F012          	lfsr	2,18
  3315  004328  5056               	movf	remove_chain@fs,w,c
  3316  00432A  26D9               	addwf	fsr2l,f,c
  3317  00432C  5057               	movf	remove_chain@fs+1,w,c
  3318  00432E  22DA               	addwfc	fsr2h,f,c
  3319  004330  50DE               	movf	postinc2,w,c
  3320  004332  5C58               	subwf	remove_chain@clst,w,c
  3321  004334  50DE               	movf	postinc2,w,c
  3322  004336  5859               	subwfb	remove_chain@clst+1,w,c
  3323  004338  50DE               	movf	postinc2,w,c
  3324  00433A  585A               	subwfb	remove_chain@clst+2,w,c
  3325  00433C  50DE               	movf	postinc2,w,c
  3326  00433E  585B               	subwfb	remove_chain@clst+3,w,c
  3327  004340  A0D8               	btfss	status,0,c
  3328  004342  D003               	goto	l5540
  3329  004344                     u7120:
  3330                           
  3331                           ;ff.c: 949:   res = FR_INT_ERR;
  3332  004344  0E02               	movlw	2
  3333  004346  0100               	movlb	0	; () banked
  3334  004348  D031               	goto	L4
  3335  00434A                     l5540:
  3336                           
  3337                           ;ff.c: 952:   res = FR_OK;
  3338  00434A  0E00               	movlw	0
  3339  00434C  0100               	movlb	0	; () banked
  3340  00434E  6F60               	movwf	remove_chain@res& (0+255),b
  3341                           
  3342                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3343  004350  D074               	goto	l393
  3344  004352                     l5542:
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3348  004352  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3349  004356  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3350  00435A  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3351  00435E  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3352  004362  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3353  004366  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3354  00436A  EC59  F016         	call	_get_fat	;wreg free
  3355  00436E  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3356  004372  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3357  004376  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3358  00437A  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3359                           
  3360                           ;ff.c: 955:    if (nxt == 0) break;
  3361  00437E  0100               	movlb	0	; () banked
  3362  004380  5161               	movf	remove_chain@nxt& (0+255),w,b
  3363  004382  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3364  004384  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3365  004386  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3366  004388  B4D8               	btfsc	status,2,c
  3367  00438A  D067               	goto	u7180
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3371  00438C  0561               	decf	remove_chain@nxt& (0+255),w,b
  3372  00438E  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3373  004390  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3374  004392  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3375  004394  B4D8               	btfsc	status,2,c
  3376  004396  D7D6               	goto	u7120
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3380  004398  2961               	incf	remove_chain@nxt& (0+255),w,b
  3381  00439A  E10A               	bnz	l5556
  3382  00439C  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3383  00439E  E108               	bnz	l5556
  3384  0043A0  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3385  0043A2  E106               	bnz	l5556
  3386  0043A4  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3387  0043A6  A4D8               	btfss	status,2,c
  3388  0043A8  D003               	goto	l5556
  3389                           
  3390                           ; BSR set to: 0
  3391  0043AA  0E01               	movlw	1
  3392  0043AC                     L4:
  3393  0043AC  6F60               	movwf	remove_chain@res& (0+255),b
  3394  0043AE  D055               	goto	u7180
  3395  0043B0                     l5556:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3399  0043B0  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3400  0043B4  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3401  0043B8  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3402  0043BC  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3403  0043C0  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3404  0043C4  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3405  0043C8  0E00               	movlw	0
  3406  0043CA  6E41               	movwf	put_fat@val,c
  3407  0043CC  0E00               	movlw	0
  3408  0043CE  6E42               	movwf	put_fat@val+1,c
  3409  0043D0  0E00               	movlw	0
  3410  0043D2  6E43               	movwf	put_fat@val+2,c
  3411  0043D4  0E00               	movlw	0
  3412  0043D6  6E44               	movwf	put_fat@val+3,c
  3413  0043D8  EC41  F012         	call	_put_fat	;wreg free
  3414  0043DC  0100               	movlb	0	; () banked
  3415  0043DE  6F60               	movwf	remove_chain@res& (0+255),b
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;ff.c: 959:    if (res != FR_OK) break;
  3419  0043E0  5160               	movf	remove_chain@res& (0+255),w,b
  3420  0043E2  A4D8               	btfss	status,2,c
  3421  0043E4  D03A               	goto	u7180
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3425  0043E6  EE20 F00E          	lfsr	2,14
  3426  0043EA  5056               	movf	remove_chain@fs,w,c
  3427  0043EC  26D9               	addwf	fsr2l,f,c
  3428  0043EE  5057               	movf	remove_chain@fs+1,w,c
  3429  0043F0  22DA               	addwfc	fsr2h,f,c
  3430  0043F2  28DE               	incf	postinc2,w,c
  3431  0043F4  E107               	bnz	u7170
  3432  0043F6  28DE               	incf	postinc2,w,c
  3433  0043F8  E105               	bnz	u7170
  3434  0043FA  28DE               	incf	postinc2,w,c
  3435  0043FC  E103               	bnz	u7170
  3436  0043FE  28DE               	incf	postinc2,w,c
  3437  004400  B4D8               	btfsc	status,2,c
  3438  004402  D013               	goto	l5566
  3439  004404                     u7170:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;ff.c: 961:     fs->free_clust++;
  3443  004404  EE20 F00E          	lfsr	2,14
  3444  004408  5056               	movf	remove_chain@fs,w,c
  3445  00440A  26D9               	addwf	fsr2l,f,c
  3446  00440C  5057               	movf	remove_chain@fs+1,w,c
  3447  00440E  22DA               	addwfc	fsr2h,f,c
  3448  004410  2ADE               	incf	postinc2,f,c
  3449  004412  0E00               	movlw	0
  3450  004414  22DE               	addwfc	postinc2,f,c
  3451  004416  22DE               	addwfc	postinc2,f,c
  3452  004418  22DE               	addwfc	postinc2,f,c
  3453                           
  3454                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3455  00441A  EE20 F005          	lfsr	2,5
  3456  00441E  5056               	movf	remove_chain@fs,w,c
  3457  004420  26D9               	addwf	fsr2l,f,c
  3458  004422  5057               	movf	remove_chain@fs+1,w,c
  3459  004424  22DA               	addwfc	fsr2h,f,c
  3460  004426  0E00               	movlw	0
  3461  004428  80DB               	bsf	plusw2,0,c
  3462  00442A                     l5566:
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;ff.c: 974:    clst = nxt;
  3466  00442A  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3467  00442E  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3468  004432  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3469  004436  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3470  00443A                     l393:
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3474  00443A  EE20 F012          	lfsr	2,18
  3475  00443E  5056               	movf	remove_chain@fs,w,c
  3476  004440  26D9               	addwf	fsr2l,f,c
  3477  004442  5057               	movf	remove_chain@fs+1,w,c
  3478  004444  22DA               	addwfc	fsr2h,f,c
  3479  004446  50DE               	movf	postinc2,w,c
  3480  004448  5C58               	subwf	remove_chain@clst,w,c
  3481  00444A  50DE               	movf	postinc2,w,c
  3482  00444C  5859               	subwfb	remove_chain@clst+1,w,c
  3483  00444E  50DE               	movf	postinc2,w,c
  3484  004450  585A               	subwfb	remove_chain@clst+2,w,c
  3485  004452  50DE               	movf	postinc2,w,c
  3486  004454  585B               	subwfb	remove_chain@clst+3,w,c
  3487  004456  A0D8               	btfss	status,0,c
  3488  004458  D77C               	goto	l5542
  3489  00445A                     u7180:
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;ff.c: 978:  return res;
  3493  00445A  5160               	movf	remove_chain@res& (0+255),w,b
  3494                           
  3495                           ; BSR set to: 0
  3496  00445C  0012               	return		;funcret
  3497  00445E                     __end_of_remove_chain:
  3498                           	opt callstack 0
  3499                           
  3500 ;; *************** function _follow_path *****************
  3501 ;; Defined at:
  3502 ;;		line 2052 in file "ff.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;  dp              2   38[BANK0 ] PTR struct .
  3505 ;;		 -> f_open@dj(22), 
  3506 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3507 ;;		 -> STR_5(11), STR_3(1), STR_1(1), 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3510 ;;		 -> NULL(0), FatFs(558), 
  3511 ;;  res             1   45[BANK0 ] enum E93
  3512 ;;  ns              1   44[BANK0 ] unsigned char 
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      enum E93
  3515 ;; Registers used:
  3516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3522 ;;      Params:         0       4       0       0       0       0       0       0       0
  3523 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3525 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3526 ;;Total ram usage:        8 bytes
  3527 ;; Hardware stack levels used:    1
  3528 ;; Hardware stack levels required when called:   12
  3529 ;; This function calls:
  3530 ;;		_create_name
  3531 ;;		_dir_find
  3532 ;;		_dir_sdi
  3533 ;;		_ld_clust
  3534 ;; This function is called by:
  3535 ;;		_f_open
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text4
  3540  00445E                     __ptext4:
  3541                           	opt callstack 0
  3542  00445E                     _follow_path:
  3543                           	opt callstack 17
  3544                           
  3545                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;incstack = 0
  3549  00445E  C088  FFF6         	movff	follow_path@path,tblptrl
  3550  004462  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3551  004466                     	if	0	;tblptru may be non-zero
  3552  004466                     	endif
  3553  004466                     	if	0	;tblptru may be non-zero
  3554  004466                     	endif
  3555  004466  0008               	tblrd		*
  3556  004468  50F5               	movf	tablat,w,c
  3557  00446A  0A2F               	xorlw	47
  3558  00446C  B4D8               	btfsc	status,2,c
  3559  00446E  D009               	goto	u7220
  3560  004470  C088  FFF6         	movff	follow_path@path,tblptrl
  3561  004474  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3562  004478                     	if	0	;tblptru may be non-zero
  3563  004478                     	endif
  3564  004478                     	if	0	;tblptru may be non-zero
  3565  004478                     	endif
  3566  004478  0008               	tblrd		*
  3567  00447A  50F5               	movf	tablat,w,c
  3568  00447C  0A5C               	xorlw	92
  3569  00447E  A4D8               	btfss	status,2,c
  3570  004480  D003               	goto	l5596
  3571  004482                     u7220:
  3572                           
  3573                           ;ff.c: 2069:   path++;
  3574  004482  0100               	movlb	0	; () banked
  3575  004484  4B88               	infsnz	follow_path@path& (0+255),f,b
  3576  004486  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3577  004488                     l5596:
  3578                           
  3579                           ;ff.c: 2070:  dp->sclust = 0;
  3580  004488  0100               	movlb	0	; () banked
  3581  00448A  EE20 F006          	lfsr	2,6
  3582  00448E  5186               	movf	follow_path@dp& (0+255),w,b
  3583  004490  26D9               	addwf	fsr2l,f,c
  3584  004492  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3585  004494  22DA               	addwfc	fsr2h,f,c
  3586  004496  6ADE               	clrf	postinc2,c
  3587  004498  6ADE               	clrf	postinc2,c
  3588  00449A  6ADE               	clrf	postinc2,c
  3589  00449C  6ADD               	clrf	postdec2,c
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3593  00449E  C088  FFF6         	movff	follow_path@path,tblptrl
  3594  0044A2  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3595  0044A6                     	if	0	;tblptru may be non-zero
  3596  0044A6                     	endif
  3597  0044A6                     	if	0	;tblptru may be non-zero
  3598  0044A6                     	endif
  3599  0044A6  0E20               	movlw	32
  3600  0044A8  0008               	tblrd		*
  3601  0044AA  60F5               	cpfslt	tablat,c
  3602  0044AC  D017               	goto	l5604
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3606  0044AE  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3607  0044B2  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3608  0044B6  0E00               	movlw	0
  3609  0044B8  6E59               	movwf	dir_sdi@idx+1,c
  3610  0044BA  0E00               	movlw	0
  3611  0044BC  6E58               	movwf	dir_sdi@idx,c
  3612  0044BE  EC72  F01B         	call	_dir_sdi	;wreg free
  3613  0044C2  0100               	movlb	0	; () banked
  3614  0044C4  6F8D               	movwf	follow_path@res& (0+255),b
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;ff.c: 2075:   dp->dir = 0;
  3618  0044C6  EE20 F012          	lfsr	2,18
  3619  0044CA  5186               	movf	follow_path@dp& (0+255),w,b
  3620  0044CC  26D9               	addwf	fsr2l,f,c
  3621  0044CE  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3622  0044D0  22DA               	addwfc	fsr2h,f,c
  3623  0044D2  0E00               	movlw	0
  3624  0044D4  6EDE               	movwf	postinc2,c
  3625  0044D6  0E00               	movlw	0
  3626  0044D8  6EDD               	movwf	postdec2,c
  3627                           
  3628                           ;ff.c: 2076:  } else {
  3629  0044DA  D062               	goto	l5640
  3630  0044DC                     l5604:
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;ff.c: 2078:    res = create_name(dp, &path);
  3634  0044DC  C086  F009         	movff	follow_path@dp,create_name@dp
  3635  0044E0  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3636  0044E4  0E88               	movlw	low follow_path@path
  3637  0044E6  6E0B               	movwf	create_name@path,c
  3638  0044E8  0E00               	movlw	high follow_path@path
  3639  0044EA  6E0C               	movwf	create_name@path+1,c
  3640  0044EC  ECD3  F01C         	call	_create_name	;wreg free
  3641  0044F0  0100               	movlb	0	; () banked
  3642  0044F2  6F8D               	movwf	follow_path@res& (0+255),b
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;ff.c: 2079:    if (res != FR_OK) break;
  3646  0044F4  518D               	movf	follow_path@res& (0+255),w,b
  3647  0044F6  A4D8               	btfss	status,2,c
  3648  0044F8  D053               	goto	l5640
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;ff.c: 2080:    res = dir_find(dp);
  3652  0044FA  C086  F080         	movff	follow_path@dp,dir_find@dp
  3653  0044FE  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3654  004502  EC73  F024         	call	_dir_find	;wreg free
  3655  004506  0100               	movlb	0	; () banked
  3656  004508  6F8D               	movwf	follow_path@res& (0+255),b
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;ff.c: 2081:    ns = dp->fn[11];
  3660  00450A  EE20 F014          	lfsr	2,20
  3661  00450E  5186               	movf	follow_path@dp& (0+255),w,b
  3662  004510  26D9               	addwf	fsr2l,f,c
  3663  004512  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3664  004514  22DA               	addwfc	fsr2h,f,c
  3665  004516  EE10 F00B          	lfsr	1,11
  3666  00451A  50DE               	movf	postinc2,w,c
  3667  00451C  26E1               	addwf	fsr1l,f,c
  3668  00451E  50DD               	movf	postdec2,w,c
  3669  004520  22E2               	addwfc	fsr1h,f,c
  3670  004522  50E7               	movf	indf1,w,c
  3671  004524  6F8C               	movwf	follow_path@ns& (0+255),b
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;ff.c: 2082:    if (res != FR_OK) {
  3675  004526  518D               	movf	follow_path@res& (0+255),w,b
  3676  004528  B4D8               	btfsc	status,2,c
  3677  00452A  D008               	goto	l560
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3681  00452C  0E04               	movlw	4
  3682  00452E  198D               	xorwf	follow_path@res& (0+255),w,b
  3683  004530  B4D8               	btfsc	status,2,c
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3687  004532  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3688  004534  D035               	goto	l5640
  3689  004536                     u7270:
  3690                           
  3691                           ; BSR set to: 0
  3692  004536  0E05               	movlw	5
  3693  004538  6F8D               	movwf	follow_path@res& (0+255),b
  3694  00453A  D032               	goto	l5640
  3695  00453C                     l560:
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;ff.c: 2094:    if (ns & 0x04) break;
  3699  00453C  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3700  00453E  D030               	goto	l5640
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;ff.c: 2095:    dir = dp->dir;
  3704  004540  EE20 F012          	lfsr	2,18
  3705  004544  5186               	movf	follow_path@dp& (0+255),w,b
  3706  004546  26D9               	addwf	fsr2l,f,c
  3707  004548  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3708  00454A  22DA               	addwfc	fsr2h,f,c
  3709  00454C  CFDE F08A          	movff	postinc2,follow_path@dir
  3710  004550  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3711                           
  3712                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3713  004554  EE20 F00B          	lfsr	2,11
  3714  004558  518A               	movf	follow_path@dir& (0+255),w,b
  3715  00455A  26D9               	addwf	fsr2l,f,c
  3716  00455C  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3717  00455E  22DA               	addwfc	fsr2h,f,c
  3718  004560  A8DF               	btfss	indf2,4,c
  3719  004562  D7E9               	goto	u7270
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3723  004564  C086  FFD9         	movff	follow_path@dp,fsr2l
  3724  004568  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3725  00456C  CFDE F001          	movff	postinc2,ld_clust@fs
  3726  004570  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3727  004574  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3728  004578  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3729  00457C  ECD0  F028         	call	_ld_clust	;wreg free
  3730  004580  0100               	movlb	0	; () banked
  3731  004582  EE20 F006          	lfsr	2,6
  3732  004586  5186               	movf	follow_path@dp& (0+255),w,b
  3733  004588  26D9               	addwf	fsr2l,f,c
  3734  00458A  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3735  00458C  22DA               	addwfc	fsr2h,f,c
  3736  00458E  C001  FFDE         	movff	?_ld_clust,postinc2
  3737  004592  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3738  004596  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3739  00459A  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3740  00459E  D79E               	goto	l5604
  3741  0045A0                     l5640:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;ff.c: 2103:  return res;
  3745  0045A0  518D               	movf	follow_path@res& (0+255),w,b
  3746                           
  3747                           ; BSR set to: 0
  3748  0045A2  0012               	return		;funcret
  3749  0045A4                     __end_of_follow_path:
  3750                           	opt callstack 0
  3751                           
  3752 ;; *************** function _ld_clust *****************
  3753 ;; Defined at:
  3754 ;;		line 1235 in file "ff.c"
  3755 ;; Parameters:    Size  Location     Type
  3756 ;;  fs              2    0[COMRAM] PTR struct .
  3757 ;;		 -> NULL(0), FatFs(558), 
  3758 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3759 ;;		 -> NULL(0), FatFs(558), 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  cl              4   10[COMRAM] unsigned long 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  4    0[COMRAM] unsigned long 
  3764 ;; Registers used:
  3765 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3771 ;;      Params:         4       0       0       0       0       0       0       0       0
  3772 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3773 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3774 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3775 ;;Total ram usage:       14 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_follow_path
  3781 ;;		_f_open
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text5
  3786  0051A0                     __ptext5:
  3787                           	opt callstack 0
  3788  0051A0                     _ld_clust:
  3789                           	opt callstack 29
  3790                           
  3791                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;incstack = 0
  3795  0051A0  0E1A               	movlw	26
  3796  0051A2  2403               	addwf	ld_clust@dir,w,c
  3797  0051A4  6ED9               	movwf	fsr2l,c
  3798  0051A6  0E00               	movlw	0
  3799  0051A8  2004               	addwfc	ld_clust@dir+1,w,c
  3800  0051AA  6EDA               	movwf	fsr2h,c
  3801  0051AC  CFDE F005          	movff	postinc2,??_ld_clust
  3802  0051B0  CFDD F006          	movff	postdec2,??_ld_clust+1
  3803  0051B4  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3804  0051B8  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3805  0051BC  6A0D               	clrf	ld_clust@cl+2,c
  3806  0051BE  6A0E               	clrf	ld_clust@cl+3,c
  3807                           
  3808                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3809  0051C0  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3810  0051C4  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3811  0051C8  0E03               	movlw	3
  3812  0051CA  18DE               	xorwf	postinc2,w,c
  3813  0051CC  A4D8               	btfss	status,2,c
  3814  0051CE  D01E               	goto	l5212
  3815                           
  3816                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3817  0051D0  0E14               	movlw	20
  3818  0051D2  2403               	addwf	ld_clust@dir,w,c
  3819  0051D4  6ED9               	movwf	fsr2l,c
  3820  0051D6  0E00               	movlw	0
  3821  0051D8  2004               	addwfc	ld_clust@dir+1,w,c
  3822  0051DA  6EDA               	movwf	fsr2h,c
  3823  0051DC  CFDE F005          	movff	postinc2,??_ld_clust
  3824  0051E0  CFDD F006          	movff	postdec2,??_ld_clust+1
  3825  0051E4  5005               	movf	??_ld_clust,w,c
  3826  0051E6  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3827  0051E8  5006               	movf	??_ld_clust+1,w,c
  3828  0051EA  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3829  0051EC  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3830  0051EE  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3831  0051F0  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3832  0051F4  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3833  0051F8  6A08               	clrf	??_ld_clust+3,c
  3834  0051FA  6A07               	clrf	??_ld_clust+2,c
  3835  0051FC  5007               	movf	??_ld_clust+2,w,c
  3836  0051FE  120B               	iorwf	ld_clust@cl,f,c
  3837  005200  5008               	movf	??_ld_clust+3,w,c
  3838  005202  120C               	iorwf	ld_clust@cl+1,f,c
  3839  005204  5009               	movf	??_ld_clust+4,w,c
  3840  005206  120D               	iorwf	ld_clust@cl+2,f,c
  3841  005208  500A               	movf	??_ld_clust+5,w,c
  3842  00520A  120E               	iorwf	ld_clust@cl+3,f,c
  3843  00520C                     l5212:
  3844                           
  3845                           ;ff.c: 1246:  return cl;
  3846  00520C  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3847  005210  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3848  005214  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3849  005218  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3850  00521C  0012               	return		;funcret
  3851  00521E                     __end_of_ld_clust:
  3852                           	opt callstack 0
  3853                           
  3854 ;; *************** function _dir_find *****************
  3855 ;; Defined at:
  3856 ;;		line 1458 in file "ff.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  dp              2   32[BANK0 ] PTR struct .
  3859 ;;		 -> f_open@dj(22), 
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3862 ;;		 -> NULL(0), FatFs(558), 
  3863 ;;  res             1   37[BANK0 ] enum E93
  3864 ;;  c               1   34[BANK0 ] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      enum E93
  3867 ;; Registers used:
  3868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3874 ;;      Params:         0       2       0       0       0       0       0       0       0
  3875 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3877 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3878 ;;Total ram usage:        6 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:   11
  3881 ;; This function calls:
  3882 ;;		_dir_next
  3883 ;;		_dir_sdi
  3884 ;;		_mem_cmp
  3885 ;;		_move_window
  3886 ;; This function is called by:
  3887 ;;		_follow_path
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text6
  3892  0048E6                     __ptext6:
  3893                           	opt callstack 0
  3894  0048E6                     _dir_find:
  3895                           	opt callstack 17
  3896                           
  3897                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3898                           
  3899                           ;incstack = 0
  3900  0048E6  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3901  0048EA  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3902  0048EE  0E00               	movlw	0
  3903  0048F0  6E59               	movwf	dir_sdi@idx+1,c
  3904  0048F2  0E00               	movlw	0
  3905  0048F4  6E58               	movwf	dir_sdi@idx,c
  3906  0048F6  EC72  F01B         	call	_dir_sdi	;wreg free
  3907  0048FA  0100               	movlb	0	; () banked
  3908  0048FC  6F85               	movwf	dir_find@res& (0+255),b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3912  0048FE  5185               	movf	dir_find@res& (0+255),w,b
  3913  004900  B4D8               	btfsc	status,2,c
  3914  004902  D003               	goto	l5226
  3915  004904                     u6560:
  3916  004904  0100               	movlb	0	; () banked
  3917  004906  5185               	movf	dir_find@res& (0+255),w,b
  3918  004908  0012               	return	
  3919  00490A                     l5226:
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3923  00490A  C080  FFD9         	movff	dir_find@dp,fsr2l
  3924  00490E  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3925  004912  CFDE F030          	movff	postinc2,move_window@fs
  3926  004916  CFDD F031          	movff	postdec2,move_window@fs+1
  3927  00491A  EE20 F00E          	lfsr	2,14
  3928  00491E  5180               	movf	dir_find@dp& (0+255),w,b
  3929  004920  26D9               	addwf	fsr2l,f,c
  3930  004922  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3931  004924  22DA               	addwfc	fsr2h,f,c
  3932  004926  CFDE F032          	movff	postinc2,move_window@sector
  3933  00492A  CFDE F033          	movff	postinc2,move_window@sector+1
  3934  00492E  CFDE F034          	movff	postinc2,move_window@sector+2
  3935  004932  CFDE F035          	movff	postinc2,move_window@sector+3
  3936  004936  ECB1  F027         	call	_move_window	;wreg free
  3937  00493A  0100               	movlb	0	; () banked
  3938  00493C  6F85               	movwf	dir_find@res& (0+255),b
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;ff.c: 1476:   if (res != FR_OK) break;
  3942  00493E  5185               	movf	dir_find@res& (0+255),w,b
  3943  004940  A4D8               	btfss	status,2,c
  3944  004942  D7E0               	goto	u6560
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;ff.c: 1477:   dir = dp->dir;
  3948  004944  EE20 F012          	lfsr	2,18
  3949  004948  5180               	movf	dir_find@dp& (0+255),w,b
  3950  00494A  26D9               	addwf	fsr2l,f,c
  3951  00494C  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3952  00494E  22DA               	addwfc	fsr2h,f,c
  3953  004950  CFDE F083          	movff	postinc2,dir_find@dir
  3954  004954  CFDD F084          	movff	postdec2,dir_find@dir+1
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;ff.c: 1478:   c = dir[0];
  3958  004958  C083  FFD9         	movff	dir_find@dir,fsr2l
  3959  00495C  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3960  004960  50DF               	movf	indf2,w,c
  3961  004962  6F82               	movwf	dir_find@c& (0+255),b
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3965  004964  5182               	movf	dir_find@c& (0+255),w,b
  3966  004966  A4D8               	btfss	status,2,c
  3967  004968  D003               	goto	l5240
  3968                           
  3969                           ; BSR set to: 0
  3970  00496A  0E04               	movlw	4
  3971  00496C  6F85               	movwf	dir_find@res& (0+255),b
  3972  00496E  D7CA               	goto	u6560
  3973  004970                     l5240:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3977  004970  EE20 F00B          	lfsr	2,11
  3978  004974  5183               	movf	dir_find@dir& (0+255),w,b
  3979  004976  26D9               	addwf	fsr2l,f,c
  3980  004978  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3981  00497A  22DA               	addwfc	fsr2h,f,c
  3982  00497C  B6DF               	btfsc	indf2,3,c
  3983  00497E  D018               	goto	l5246
  3984                           
  3985                           ; BSR set to: 0
  3986  004980  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3987  004984  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3988  004988  EE20 F014          	lfsr	2,20
  3989  00498C  5180               	movf	dir_find@dp& (0+255),w,b
  3990  00498E  26D9               	addwf	fsr2l,f,c
  3991  004990  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3992  004992  22DA               	addwfc	fsr2h,f,c
  3993  004994  CFDE F003          	movff	postinc2,mem_cmp@src
  3994  004998  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3995  00499C  0E00               	movlw	0
  3996  00499E  6E06               	movwf	mem_cmp@cnt+1,c
  3997  0049A0  0E0B               	movlw	11
  3998  0049A2  6E05               	movwf	mem_cmp@cnt,c
  3999  0049A4  ECBB  F029         	call	_mem_cmp	;wreg free
  4000  0049A8  5001               	movf	?_mem_cmp,w,c
  4001  0049AA  1002               	iorwf	?_mem_cmp+1,w,c
  4002  0049AC  B4D8               	btfsc	status,2,c
  4003  0049AE  D7AA               	goto	u6560
  4004  0049B0                     l5246:
  4005                           
  4006                           ;ff.c: 1505:   res = dir_next(dp, 0);
  4007  0049B0  C080  F06D         	movff	dir_find@dp,dir_next@dp
  4008  0049B4  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  4009  0049B8  0E00               	movlw	0
  4010  0049BA  0100               	movlb	0	; () banked
  4011  0049BC  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4012  0049BE  0E00               	movlw	0
  4013  0049C0  6F6F               	movwf	dir_next@stretch& (0+255),b
  4014  0049C2  EC56  F014         	call	_dir_next	;wreg free
  4015  0049C6  0100               	movlb	0	; () banked
  4016  0049C8  6F85               	movwf	dir_find@res& (0+255),b
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;ff.c: 1506:  } while (res == FR_OK);
  4020  0049CA  5185               	movf	dir_find@res& (0+255),w,b
  4021  0049CC  A4D8               	btfss	status,2,c
  4022  0049CE  D79A               	goto	u6560
  4023  0049D0  D79C               	goto	l5226
  4024  0049D2                     __end_of_dir_find:
  4025                           	opt callstack 0
  4026                           
  4027 ;; *************** function _mem_cmp *****************
  4028 ;; Defined at:
  4029 ;;		line 533 in file "ff.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  dst             2    0[COMRAM] PTR const void 
  4032 ;;		 -> NULL(0), FatFs(558), 
  4033 ;;  src             2    2[COMRAM] PTR const void 
  4034 ;;		 -> f_open@sfn(12), 
  4035 ;;  cnt             2    4[COMRAM] unsigned short 
  4036 ;; Auto vars:     Size  Location     Type
  4037 ;;  r               2   12[COMRAM] int 
  4038 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4039 ;;		 -> f_open@sfn(12), 
  4040 ;;  d               2    8[COMRAM] PTR const unsigned char 
  4041 ;;		 -> NULL(0), FatFs(558), 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  2    0[COMRAM] int 
  4044 ;; Registers used:
  4045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4051 ;;      Params:         6       0       0       0       0       0       0       0       0
  4052 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4053 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4054 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4055 ;;Total ram usage:       14 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_dir_find
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text7
  4065  005376                     __ptext7:
  4066                           	opt callstack 0
  4067  005376                     _mem_cmp:
  4068                           	opt callstack 27
  4069                           
  4070                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;incstack = 0
  4074  005376  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  4075  00537A  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  4076  00537E  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  4077  005382  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  4078                           
  4079                           ;ff.c: 535:  int r = 0;
  4080  005386  0E00               	movlw	0
  4081  005388  6E0E               	movwf	mem_cmp@r+1,c
  4082  00538A  0E00               	movlw	0
  4083  00538C  6E0D               	movwf	mem_cmp@r,c
  4084  00538E                     l4818:
  4085  00538E  0605               	decf	mem_cmp@cnt,f,c
  4086  005390  A0D8               	btfss	status,0,c
  4087  005392  0606               	decf	mem_cmp@cnt+1,f,c
  4088  005394  2805               	incf	mem_cmp@cnt,w,c
  4089  005396  E103               	bnz	u5810
  4090  005398  2806               	incf	mem_cmp@cnt+1,w,c
  4091  00539A  B4D8               	btfsc	status,2,c
  4092  00539C  D01A               	goto	u5820
  4093  00539E                     u5810:
  4094  00539E  C009  FFD9         	movff	mem_cmp@d,fsr2l
  4095  0053A2  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  4096  0053A6  4A09               	infsnz	mem_cmp@d,f,c
  4097  0053A8  2A0A               	incf	mem_cmp@d+1,f,c
  4098  0053AA  50DF               	movf	indf2,w,c
  4099  0053AC  6E07               	movwf	??_mem_cmp& (0+255),c
  4100  0053AE  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  4101  0053B2  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  4102  0053B6  4A0B               	infsnz	mem_cmp@s,f,c
  4103  0053B8  2A0C               	incf	mem_cmp@s+1,f,c
  4104  0053BA  50DF               	movf	indf2,w,c
  4105  0053BC  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  4106  0053BE  5008               	movf	??_mem_cmp+1,w,c
  4107  0053C0  5C07               	subwf	??_mem_cmp,w,c
  4108  0053C2  6E0D               	movwf	mem_cmp@r,c
  4109  0053C4  6A0E               	clrf	mem_cmp@r+1,c
  4110  0053C6  A0D8               	btfss	status,0,c
  4111  0053C8  060E               	decf	mem_cmp@r+1,f,c
  4112  0053CA  500D               	movf	mem_cmp@r,w,c
  4113  0053CC  100E               	iorwf	mem_cmp@r+1,w,c
  4114  0053CE  B4D8               	btfsc	status,2,c
  4115  0053D0  D7DE               	goto	l4818
  4116  0053D2                     u5820:
  4117                           
  4118                           ;ff.c: 538:  return r;
  4119  0053D2  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  4120  0053D6  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  4121  0053DA  0012               	return		;funcret
  4122  0053DC                     __end_of_mem_cmp:
  4123                           	opt callstack 0
  4124                           
  4125 ;; *************** function _create_name *****************
  4126 ;; Defined at:
  4127 ;;		line 1843 in file "ff.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  dp              2    8[COMRAM] PTR struct .
  4130 ;;		 -> f_open@dj(22), 
  4131 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  4132 ;;		 -> follow_path@path(2), 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  i               2   28[COMRAM] unsigned short 
  4135 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  4136 ;;		 -> f_open@sfn(12), 
  4137 ;;  p               2   23[COMRAM] PTR const unsigned char 
  4138 ;;		 -> STR_5(11), STR_3(1), STR_1(1), 
  4139 ;;  ni              2   21[COMRAM] unsigned short 
  4140 ;;  si              2   18[COMRAM] unsigned short 
  4141 ;;  c               1   30[COMRAM] unsigned char 
  4142 ;;  d               1   25[COMRAM] unsigned char 
  4143 ;;  b               1   20[COMRAM] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      enum E93
  4146 ;; Registers used:
  4147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4153 ;;      Params:         4       0       0       0       0       0       0       0       0
  4154 ;;      Locals:        15       0       0       0       0       0       0       0       0
  4155 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4156 ;;      Totals:        23       0       0       0       0       0       0       0       0
  4157 ;;Total ram usage:       23 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    1
  4160 ;; This function calls:
  4161 ;;		_chk_chr
  4162 ;;		_mem_set
  4163 ;; This function is called by:
  4164 ;;		_follow_path
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text8
  4169  0039A6                     __ptext8:
  4170                           	opt callstack 0
  4171  0039A6                     _create_name:
  4172                           	opt callstack 27
  4173                           
  4174                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  4175                           
  4176                           ;incstack = 0
  4177  0039A6  C00B  FFD9         	movff	create_name@path,fsr2l
  4178  0039AA  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4179  0039AE  CFDE F018          	movff	postinc2,create_name@p
  4180  0039B2  CFDD F019          	movff	postdec2,create_name@p+1
  4181  0039B6  D002               	goto	l5258
  4182  0039B8                     l5256:
  4183  0039B8  4A18               	infsnz	create_name@p,f,c
  4184  0039BA  2A19               	incf	create_name@p+1,f,c
  4185  0039BC                     l5258:
  4186  0039BC  C018  FFF6         	movff	create_name@p,tblptrl
  4187  0039C0  C019  FFF7         	movff	create_name@p+1,tblptrh
  4188  0039C4                     	if	0	;tblptru may be non-zero
  4189  0039C4                     	endif
  4190  0039C4                     	if	0	;tblptru may be non-zero
  4191  0039C4                     	endif
  4192  0039C4  0008               	tblrd		*
  4193  0039C6  50F5               	movf	tablat,w,c
  4194  0039C8  0A2F               	xorlw	47
  4195  0039CA  B4D8               	btfsc	status,2,c
  4196  0039CC  D7F5               	goto	l5256
  4197  0039CE  C018  FFF6         	movff	create_name@p,tblptrl
  4198  0039D2  C019  FFF7         	movff	create_name@p+1,tblptrh
  4199  0039D6                     	if	0	;tblptru may be non-zero
  4200  0039D6                     	endif
  4201  0039D6                     	if	0	;tblptru may be non-zero
  4202  0039D6                     	endif
  4203  0039D6  0008               	tblrd		*
  4204  0039D8  50F5               	movf	tablat,w,c
  4205  0039DA  0A5C               	xorlw	92
  4206  0039DC  B4D8               	btfsc	status,2,c
  4207  0039DE  D7EC               	goto	l5256
  4208                           
  4209                           ;ff.c: 1975:  sfn = dp->fn;
  4210  0039E0  EE20 F014          	lfsr	2,20
  4211  0039E4  5009               	movf	create_name@dp,w,c
  4212  0039E6  26D9               	addwf	fsr2l,f,c
  4213  0039E8  500A               	movf	create_name@dp+1,w,c
  4214  0039EA  22DA               	addwfc	fsr2h,f,c
  4215  0039EC  CFDE F01B          	movff	postinc2,create_name@sfn
  4216  0039F0  CFDD F01C          	movff	postdec2,create_name@sfn+1
  4217                           
  4218                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  4219  0039F4  C01B  F001         	movff	create_name@sfn,mem_set@dst
  4220  0039F8  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  4221  0039FC  0E00               	movlw	0
  4222  0039FE  6E04               	movwf	mem_set@val+1,c
  4223  003A00  0E20               	movlw	32
  4224  003A02  6E03               	movwf	mem_set@val,c
  4225  003A04  0E00               	movlw	0
  4226  003A06  6E06               	movwf	mem_set@cnt+1,c
  4227  003A08  0E0B               	movlw	11
  4228  003A0A  6E05               	movwf	mem_set@cnt,c
  4229  003A0C  EC58  F02B         	call	_mem_set	;wreg free
  4230                           
  4231                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  4232  003A10  0E00               	movlw	0
  4233  003A12  6E15               	movwf	create_name@b,c
  4234  003A14  C015  F01D         	movff	create_name@b,create_name@i
  4235  003A18  6A1E               	clrf	create_name@i+1,c
  4236  003A1A  C01D  F013         	movff	create_name@i,create_name@si
  4237  003A1E  C01E  F014         	movff	create_name@i+1,create_name@si+1
  4238  003A22  0E00               	movlw	0
  4239  003A24  6E17               	movwf	create_name@ni+1,c
  4240  003A26  0E08               	movlw	8
  4241  003A28  6E16               	movwf	create_name@ni,c
  4242  003A2A                     l5270:
  4243                           
  4244                           ;ff.c: 1992:   c = (BYTE)p[si++];
  4245  003A2A  5013               	movf	create_name@si,w,c
  4246  003A2C  2418               	addwf	create_name@p,w,c
  4247  003A2E  6E0D               	movwf	??_create_name& (0+255),c
  4248  003A30  5014               	movf	create_name@si+1,w,c
  4249  003A32  2019               	addwfc	create_name@p+1,w,c
  4250  003A34  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4251  003A36  C00D  FFF6         	movff	??_create_name,tblptrl
  4252  003A3A  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4253  003A3E                     	if	0	;tblptru may be non-zero
  4254  003A3E                     	endif
  4255  003A3E                     	if	0	;tblptru may be non-zero
  4256  003A3E                     	endif
  4257  003A3E  0008               	tblrd		*
  4258  003A40  CFF5 F01F          	movff	tablat,create_name@c
  4259  003A44  4A13               	infsnz	create_name@si,f,c
  4260  003A46  2A14               	incf	create_name@si+1,f,c
  4261                           
  4262                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4263  003A48  0E20               	movlw	32
  4264  003A4A  641F               	cpfsgt	create_name@c,c
  4265  003A4C  D0A4               	goto	l5354
  4266  003A4E  0E2F               	movlw	47
  4267  003A50  181F               	xorwf	create_name@c,w,c
  4268  003A52  B4D8               	btfsc	status,2,c
  4269  003A54  D0A0               	goto	l5354
  4270  003A56  0E5C               	movlw	92
  4271  003A58  181F               	xorwf	create_name@c,w,c
  4272  003A5A  B4D8               	btfsc	status,2,c
  4273  003A5C  D09C               	goto	l5354
  4274                           
  4275                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4276  003A5E  0E2E               	movlw	46
  4277  003A60  181F               	xorwf	create_name@c,w,c
  4278  003A62  B4D8               	btfsc	status,2,c
  4279  003A64  D006               	goto	u6680
  4280  003A66  5016               	movf	create_name@ni,w,c
  4281  003A68  5C1D               	subwf	create_name@i,w,c
  4282  003A6A  5017               	movf	create_name@ni+1,w,c
  4283  003A6C  581E               	subwfb	create_name@i+1,w,c
  4284  003A6E  A0D8               	btfss	status,0,c
  4285  003A70  D018               	goto	l5296
  4286  003A72                     u6680:
  4287                           
  4288                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4289  003A72  0E08               	movlw	8
  4290  003A74  1816               	xorwf	create_name@ni,w,c
  4291  003A76  1017               	iorwf	create_name@ni+1,w,c
  4292  003A78  A4D8               	btfss	status,2,c
  4293  003A7A  D004               	goto	u6700
  4294  003A7C  0E2E               	movlw	46
  4295  003A7E  181F               	xorwf	create_name@c,w,c
  4296  003A80  B4D8               	btfsc	status,2,c
  4297  003A82  D002               	goto	l5292
  4298  003A84                     u6700:
  4299  003A84  0E06               	movlw	6
  4300  003A86  0012               	return	
  4301  003A88                     l5292:
  4302                           
  4303                           ;ff.c: 1996:    i = 8; ni = 11;
  4304  003A88  0E00               	movlw	0
  4305  003A8A  6E1E               	movwf	create_name@i+1,c
  4306  003A8C  0E08               	movlw	8
  4307  003A8E  6E1D               	movwf	create_name@i,c
  4308  003A90  0E00               	movlw	0
  4309  003A92  6E17               	movwf	create_name@ni+1,c
  4310  003A94  0E0B               	movlw	11
  4311  003A96  6E16               	movwf	create_name@ni,c
  4312                           
  4313                           ;ff.c: 1997:    b <<= 2; continue;
  4314  003A98  90D8               	bcf	status,0,c
  4315  003A9A  3615               	rlcf	create_name@b,f,c
  4316  003A9C  90D8               	bcf	status,0,c
  4317  003A9E  3615               	rlcf	create_name@b,f,c
  4318  003AA0  D7C4               	goto	l5270
  4319  003AA2                     l5296:
  4320                           
  4321                           ;ff.c: 1999:   if (c >= 0x80) {
  4322  003AA2  0E7F               	movlw	127
  4323  003AA4  641F               	cpfsgt	create_name@c,c
  4324  003AA6  D002               	goto	l523
  4325                           
  4326                           ;ff.c: 2000:    b |= 3;
  4327  003AA8  0E03               	movlw	3
  4328  003AAA  1215               	iorwf	create_name@b,f,c
  4329  003AAC                     l523:
  4330                           
  4331                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4332  003AAC  0E80               	movlw	128
  4333  003AAE  641F               	cpfsgt	create_name@c,c
  4334  003AB0  D003               	goto	u6730
  4335  003AB2  0E9F               	movlw	159
  4336  003AB4  641F               	cpfsgt	create_name@c,c
  4337  003AB6  D006               	goto	u6750
  4338  003AB8                     u6730:
  4339  003AB8  0EDF               	movlw	223
  4340  003ABA  641F               	cpfsgt	create_name@c,c
  4341  003ABC  D043               	goto	l5330
  4342  003ABE  0EFD               	movlw	253
  4343  003AC0  601F               	cpfslt	create_name@c,c
  4344  003AC2  D040               	goto	l5330
  4345  003AC4                     u6750:
  4346                           
  4347                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4348  003AC4  5013               	movf	create_name@si,w,c
  4349  003AC6  2418               	addwf	create_name@p,w,c
  4350  003AC8  6E0D               	movwf	??_create_name& (0+255),c
  4351  003ACA  5014               	movf	create_name@si+1,w,c
  4352  003ACC  2019               	addwfc	create_name@p+1,w,c
  4353  003ACE  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4354  003AD0  C00D  FFF6         	movff	??_create_name,tblptrl
  4355  003AD4  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4356  003AD8                     	if	0	;tblptru may be non-zero
  4357  003AD8                     	endif
  4358  003AD8                     	if	0	;tblptru may be non-zero
  4359  003AD8                     	endif
  4360  003AD8  0008               	tblrd		*
  4361  003ADA  CFF5 F01A          	movff	tablat,create_name@d
  4362  003ADE  4A13               	infsnz	create_name@si,f,c
  4363  003AE0  2A14               	incf	create_name@si+1,f,c
  4364                           
  4365                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4366  003AE2  0E3F               	movlw	63
  4367  003AE4  641A               	cpfsgt	create_name@d,c
  4368  003AE6  D003               	goto	u6770
  4369  003AE8  0E7E               	movlw	126
  4370  003AEA  641A               	cpfsgt	create_name@d,c
  4371  003AEC  D006               	goto	u6790
  4372  003AEE                     u6770:
  4373  003AEE  0E7F               	movlw	127
  4374  003AF0  641A               	cpfsgt	create_name@d,c
  4375  003AF2  D7C8               	goto	u6700
  4376  003AF4  0EFD               	movlw	253
  4377  003AF6  601A               	cpfslt	create_name@d,c
  4378  003AF8  D7C5               	goto	u6700
  4379  003AFA                     u6790:
  4380  003AFA  0EFF               	movlw	255
  4381  003AFC  6E0D               	movwf	??_create_name& (0+255),c
  4382  003AFE  0EFF               	movlw	255
  4383  003B00  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4384  003B02  C016  F00F         	movff	create_name@ni,??_create_name+2
  4385  003B06  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4386  003B0A  500D               	movf	??_create_name,w,c
  4387  003B0C  260F               	addwf	??_create_name+2,f,c
  4388  003B0E  500E               	movf	??_create_name+1,w,c
  4389  003B10  2210               	addwfc	??_create_name+3,f,c
  4390  003B12  500F               	movf	??_create_name+2,w,c
  4391  003B14  5C1D               	subwf	create_name@i,w,c
  4392  003B16  5010               	movf	??_create_name+3,w,c
  4393  003B18  581E               	subwfb	create_name@i+1,w,c
  4394  003B1A  B0D8               	btfsc	status,0,c
  4395  003B1C  D7B3               	goto	u6700
  4396                           
  4397                           ;ff.c: 2013:    sfn[i++] = c;
  4398  003B1E  501D               	movf	create_name@i,w,c
  4399  003B20  241B               	addwf	create_name@sfn,w,c
  4400  003B22  6ED9               	movwf	fsr2l,c
  4401  003B24  501E               	movf	create_name@i+1,w,c
  4402  003B26  201C               	addwfc	create_name@sfn+1,w,c
  4403  003B28  6EDA               	movwf	fsr2h,c
  4404  003B2A  C01F  FFDF         	movff	create_name@c,indf2
  4405  003B2E  4A1D               	infsnz	create_name@i,f,c
  4406  003B30  2A1E               	incf	create_name@i+1,f,c
  4407                           
  4408                           ;ff.c: 2014:    sfn[i++] = d;
  4409  003B32  501D               	movf	create_name@i,w,c
  4410  003B34  241B               	addwf	create_name@sfn,w,c
  4411  003B36  6ED9               	movwf	fsr2l,c
  4412  003B38  501E               	movf	create_name@i+1,w,c
  4413  003B3A  201C               	addwfc	create_name@sfn+1,w,c
  4414  003B3C  6EDA               	movwf	fsr2h,c
  4415  003B3E  C01A  FFDF         	movff	create_name@d,indf2
  4416  003B42  D026               	goto	l5352
  4417  003B44                     l5330:
  4418                           
  4419                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4420  003B44  0E71               	movlw	low STR_13
  4421  003B46  6E01               	movwf	chk_chr@str,c
  4422  003B48  0E08               	movlw	high STR_13
  4423  003B4A  6E02               	movwf	chk_chr@str+1,c
  4424  003B4C  C01F  F003         	movff	create_name@c,chk_chr@chr
  4425  003B50  6A04               	clrf	chk_chr@chr+1,c
  4426  003B52  EC66  F02A         	call	_chk_chr	;wreg free
  4427  003B56  5001               	movf	?_chk_chr,w,c
  4428  003B58  1002               	iorwf	?_chk_chr+1,w,c
  4429  003B5A  A4D8               	btfss	status,2,c
  4430  003B5C  D793               	goto	u6700
  4431                           
  4432                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4433  003B5E  0E40               	movlw	64
  4434  003B60  641F               	cpfsgt	create_name@c,c
  4435  003B62  D005               	goto	l5342
  4436  003B64  0E5B               	movlw	91
  4437  003B66  601F               	cpfslt	create_name@c,c
  4438  003B68  D002               	goto	l5342
  4439                           
  4440                           ;ff.c: 2019:     b |= 2;
  4441  003B6A  8215               	bsf	create_name@b,1,c
  4442                           
  4443                           ;ff.c: 2020:    } else {
  4444  003B6C  D009               	goto	l5350
  4445  003B6E                     l5342:
  4446                           
  4447                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4448  003B6E  0E60               	movlw	96
  4449  003B70  641F               	cpfsgt	create_name@c,c
  4450  003B72  D006               	goto	l5350
  4451  003B74  0E7B               	movlw	123
  4452  003B76  601F               	cpfslt	create_name@c,c
  4453  003B78  D003               	goto	l5350
  4454                           
  4455                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4456  003B7A  8015               	bsf	create_name@b,0,c
  4457  003B7C  0E20               	movlw	32
  4458  003B7E  5E1F               	subwf	create_name@c,f,c
  4459  003B80                     l5350:
  4460                           
  4461                           ;ff.c: 2025:    sfn[i++] = c;
  4462  003B80  501D               	movf	create_name@i,w,c
  4463  003B82  241B               	addwf	create_name@sfn,w,c
  4464  003B84  6ED9               	movwf	fsr2l,c
  4465  003B86  501E               	movf	create_name@i+1,w,c
  4466  003B88  201C               	addwfc	create_name@sfn+1,w,c
  4467  003B8A  6EDA               	movwf	fsr2h,c
  4468  003B8C  C01F  FFDF         	movff	create_name@c,indf2
  4469  003B90                     l5352:
  4470  003B90  4A1D               	infsnz	create_name@i,f,c
  4471  003B92  2A1E               	incf	create_name@i+1,f,c
  4472  003B94  D74A               	goto	l5270
  4473  003B96                     l5354:
  4474                           
  4475                           ;ff.c: 2028:  *path = &p[si];
  4476  003B96  5013               	movf	create_name@si,w,c
  4477  003B98  2418               	addwf	create_name@p,w,c
  4478  003B9A  6E0D               	movwf	??_create_name& (0+255),c
  4479  003B9C  5014               	movf	create_name@si+1,w,c
  4480  003B9E  2019               	addwfc	create_name@p+1,w,c
  4481  003BA0  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4482  003BA2  C00B  FFD9         	movff	create_name@path,fsr2l
  4483  003BA6  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4484  003BAA  C00D  FFDE         	movff	??_create_name,postinc2
  4485  003BAE  C00E  FFDD         	movff	??_create_name+1,postdec2
  4486                           
  4487                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4488  003BB2  0E20               	movlw	32
  4489  003BB4  641F               	cpfsgt	create_name@c,c
  4490  003BB6  D004               	goto	l5360
  4491  003BB8  0E00               	movlw	0
  4492  003BBA  6E12               	movwf	_create_name$902+1,c
  4493  003BBC  0E00               	movlw	0
  4494  003BBE  D003               	goto	L5
  4495  003BC0                     l5360:
  4496  003BC0  0E00               	movlw	0
  4497  003BC2  6E12               	movwf	_create_name$902+1,c
  4498  003BC4  0E04               	movlw	4
  4499  003BC6                     L5:
  4500  003BC6  6E11               	movwf	_create_name$902,c
  4501  003BC8  C011  F01F         	movff	_create_name$902,create_name@c
  4502                           
  4503                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4504  003BCC  501D               	movf	create_name@i,w,c
  4505  003BCE  101E               	iorwf	create_name@i+1,w,c
  4506  003BD0  B4D8               	btfsc	status,2,c
  4507  003BD2  D758               	goto	u6700
  4508                           
  4509                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4510  003BD4  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4511  003BD8  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4512  003BDC  0EE5               	movlw	229
  4513  003BDE  18DE               	xorwf	postinc2,w,c
  4514  003BE0  A4D8               	btfss	status,2,c
  4515  003BE2  D006               	goto	l5374
  4516  003BE4  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4517  003BE8  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4518  003BEC  0E05               	movlw	5
  4519  003BEE  6EDF               	movwf	indf2,c
  4520  003BF0                     l5374:
  4521                           
  4522                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4523  003BF0  0E08               	movlw	8
  4524  003BF2  1816               	xorwf	create_name@ni,w,c
  4525  003BF4  1017               	iorwf	create_name@ni+1,w,c
  4526  003BF6  A4D8               	btfss	status,2,c
  4527  003BF8  D004               	goto	l547
  4528  003BFA  90D8               	bcf	status,0,c
  4529  003BFC  3615               	rlcf	create_name@b,f,c
  4530  003BFE  90D8               	bcf	status,0,c
  4531  003C00  3615               	rlcf	create_name@b,f,c
  4532  003C02                     l547:
  4533                           
  4534                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4535  003C02  5015               	movf	create_name@b,w,c
  4536  003C04  0B03               	andlw	3
  4537  003C06  06E8               	decf	wreg,f,c
  4538  003C08  B4D8               	btfsc	status,2,c
  4539  003C0A  881F               	bsf	create_name@c,4,c
  4540                           
  4541                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4542  003C0C  5015               	movf	create_name@b,w,c
  4543  003C0E  0B0C               	andlw	12
  4544  003C10  0A04               	xorlw	4
  4545  003C12  B4D8               	btfsc	status,2,c
  4546  003C14  861F               	bsf	create_name@c,3,c
  4547                           
  4548                           ;ff.c: 2038:  sfn[11] = c;
  4549  003C16  EE20 F00B          	lfsr	2,11
  4550  003C1A  501B               	movf	create_name@sfn,w,c
  4551  003C1C  26D9               	addwf	fsr2l,f,c
  4552  003C1E  501C               	movf	create_name@sfn+1,w,c
  4553  003C20  22DA               	addwfc	fsr2h,f,c
  4554  003C22  C01F  FFDF         	movff	create_name@c,indf2
  4555                           
  4556                           ;ff.c: 2040:  return FR_OK;
  4557  003C26  0E00               	movlw	0
  4558  003C28  0012               	return		;funcret
  4559  003C2A                     __end_of_create_name:
  4560                           	opt callstack 0
  4561                           
  4562 ;; *************** function _chk_chr *****************
  4563 ;; Defined at:
  4564 ;;		line 543 in file "ff.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4567 ;;		 -> STR_14(15), 
  4568 ;;  chr             2    2[COMRAM] int 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;		None
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  2    0[COMRAM] int 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4580 ;;      Params:         4       0       0       0       0       0       0       0       0
  4581 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4582 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4583 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4584 ;;Total ram usage:        6 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; This function calls:
  4587 ;;		Nothing
  4588 ;; This function is called by:
  4589 ;;		_create_name
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text9
  4594  0054CC                     __ptext9:
  4595                           	opt callstack 0
  4596  0054CC                     _chk_chr:
  4597                           	opt callstack 27
  4598                           
  4599                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4600                           
  4601                           ;incstack = 0
  4602  0054CC  D002               	goto	l4826
  4603  0054CE                     l4824:
  4604  0054CE  4A01               	infsnz	chk_chr@str,f,c
  4605  0054D0  2A02               	incf	chk_chr@str+1,f,c
  4606  0054D2                     l4826:
  4607  0054D2  C001  FFF6         	movff	chk_chr@str,tblptrl
  4608  0054D6  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4609  0054DA                     	if	0	;tblptru may be non-zero
  4610  0054DA                     	endif
  4611  0054DA                     	if	0	;tblptru may be non-zero
  4612  0054DA                     	endif
  4613  0054DA  0008               	tblrd		*
  4614  0054DC  50F5               	movf	tablat,w,c
  4615  0054DE  0900               	iorlw	0
  4616  0054E0  B4D8               	btfsc	status,2,c
  4617  0054E2  D00F               	goto	u5840
  4618  0054E4  C001  FFF6         	movff	chk_chr@str,tblptrl
  4619  0054E8  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4620  0054EC                     	if	0	;tblptru may be non-zero
  4621  0054EC                     	endif
  4622  0054EC                     	if	0	;tblptru may be non-zero
  4623  0054EC                     	endif
  4624  0054EC  0008               	tblrd		*
  4625  0054EE  50F5               	movf	tablat,w,c
  4626  0054F0  6E05               	movwf	??_chk_chr& (0+255),c
  4627  0054F2  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4628  0054F4  5003               	movf	chk_chr@chr,w,c
  4629  0054F6  1805               	xorwf	??_chk_chr,w,c
  4630  0054F8  E1EA               	bnz	l4824
  4631  0054FA  5004               	movf	chk_chr@chr+1,w,c
  4632  0054FC  1806               	xorwf	??_chk_chr+1,w,c
  4633  0054FE  A4D8               	btfss	status,2,c
  4634  005500  D7E6               	goto	l4824
  4635  005502                     u5840:
  4636                           
  4637                           ;ff.c: 545:  return *str;
  4638  005502  C001  FFF6         	movff	chk_chr@str,tblptrl
  4639  005506  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4640  00550A                     	if	0	;tblptru may be non-zero
  4641  00550A                     	endif
  4642  00550A                     	if	0	;tblptru may be non-zero
  4643  00550A                     	endif
  4644  00550A  0008               	tblrd		*
  4645  00550C  50F5               	movf	tablat,w,c
  4646  00550E  6E01               	movwf	?_chk_chr,c
  4647  005510  6A02               	clrf	?_chk_chr+1,c
  4648  005512  0012               	return		;funcret
  4649  005514                     __end_of_chk_chr:
  4650                           	opt callstack 0
  4651                           
  4652 ;; *************** function _dir_register *****************
  4653 ;; Defined at:
  4654 ;;		line 1578 in file "ff.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  dp              2   42[BANK0 ] PTR struct .
  4657 ;;		 -> f_open@dj(22), 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  res             1   44[BANK0 ] enum E93
  4660 ;; Return value:  Size  Location     Type
  4661 ;;                  1    wreg      enum E93
  4662 ;; Registers used:
  4663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4669 ;;      Params:         0       2       0       0       0       0       0       0       0
  4670 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4672 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4673 ;;Total ram usage:        3 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:   12
  4676 ;; This function calls:
  4677 ;;		_dir_alloc
  4678 ;;		_mem_cpy
  4679 ;;		_mem_set
  4680 ;;		_move_window
  4681 ;; This function is called by:
  4682 ;;		_f_open
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text10
  4687  004B9C                     __ptext10:
  4688                           	opt callstack 0
  4689  004B9C                     _dir_register:
  4690                           	opt callstack 17
  4691                           
  4692                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4693                           
  4694                           ;incstack = 0
  4695  004B9C  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4696  004BA0  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4697  004BA4  0E00               	movlw	0
  4698  004BA6  0100               	movlb	0	; () banked
  4699  004BA8  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4700  004BAA  0E01               	movlw	1
  4701  004BAC  6F82               	movwf	dir_alloc@nent& (0+255),b
  4702  004BAE  ECFB  F023         	call	_dir_alloc	;wreg free
  4703  004BB2  0100               	movlb	0	; () banked
  4704  004BB4  6F8C               	movwf	dir_register@res& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;ff.c: 1632:  if (res == FR_OK) {
  4708  004BB6  518C               	movf	dir_register@res& (0+255),w,b
  4709  004BB8  A4D8               	btfss	status,2,c
  4710  004BBA  D058               	goto	l5586
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4714  004BBC  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4715  004BC0  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4716  004BC4  CFDE F030          	movff	postinc2,move_window@fs
  4717  004BC8  CFDD F031          	movff	postdec2,move_window@fs+1
  4718  004BCC  EE20 F00E          	lfsr	2,14
  4719  004BD0  518A               	movf	dir_register@dp& (0+255),w,b
  4720  004BD2  26D9               	addwf	fsr2l,f,c
  4721  004BD4  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4722  004BD6  22DA               	addwfc	fsr2h,f,c
  4723  004BD8  CFDE F032          	movff	postinc2,move_window@sector
  4724  004BDC  CFDE F033          	movff	postinc2,move_window@sector+1
  4725  004BE0  CFDE F034          	movff	postinc2,move_window@sector+2
  4726  004BE4  CFDE F035          	movff	postinc2,move_window@sector+3
  4727  004BE8  ECB1  F027         	call	_move_window	;wreg free
  4728  004BEC  0100               	movlb	0	; () banked
  4729  004BEE  6F8C               	movwf	dir_register@res& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;ff.c: 1634:   if (res == FR_OK) {
  4733  004BF0  518C               	movf	dir_register@res& (0+255),w,b
  4734  004BF2  A4D8               	btfss	status,2,c
  4735  004BF4  D03B               	goto	l5586
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4739  004BF6  EE20 F012          	lfsr	2,18
  4740  004BFA  518A               	movf	dir_register@dp& (0+255),w,b
  4741  004BFC  26D9               	addwf	fsr2l,f,c
  4742  004BFE  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4743  004C00  22DA               	addwfc	fsr2h,f,c
  4744  004C02  CFDE F001          	movff	postinc2,mem_set@dst
  4745  004C06  CFDD F002          	movff	postdec2,mem_set@dst+1
  4746  004C0A  0E00               	movlw	0
  4747  004C0C  6E04               	movwf	mem_set@val+1,c
  4748  004C0E  0E00               	movlw	0
  4749  004C10  6E03               	movwf	mem_set@val,c
  4750  004C12  0E00               	movlw	0
  4751  004C14  6E06               	movwf	mem_set@cnt+1,c
  4752  004C16  0E20               	movlw	32
  4753  004C18  6E05               	movwf	mem_set@cnt,c
  4754  004C1A  EC58  F02B         	call	_mem_set	;wreg free
  4755                           
  4756                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4757  004C1E  0100               	movlb	0	; () banked
  4758  004C20  EE20 F012          	lfsr	2,18
  4759  004C24  518A               	movf	dir_register@dp& (0+255),w,b
  4760  004C26  26D9               	addwf	fsr2l,f,c
  4761  004C28  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4762  004C2A  22DA               	addwfc	fsr2h,f,c
  4763  004C2C  CFDE F001          	movff	postinc2,mem_cpy@dst
  4764  004C30  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4765  004C34  EE20 F014          	lfsr	2,20
  4766  004C38  518A               	movf	dir_register@dp& (0+255),w,b
  4767  004C3A  26D9               	addwf	fsr2l,f,c
  4768  004C3C  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4769  004C3E  22DA               	addwfc	fsr2h,f,c
  4770  004C40  CFDE F003          	movff	postinc2,mem_cpy@src
  4771  004C44  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4772  004C48  0E00               	movlw	0
  4773  004C4A  6E06               	movwf	mem_cpy@cnt+1,c
  4774  004C4C  0E0B               	movlw	11
  4775  004C4E  6E05               	movwf	mem_cpy@cnt,c
  4776  004C50  EC9F  F026         	call	_mem_cpy	;wreg free
  4777                           
  4778                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4779  004C54  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4780  004C58  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4781  004C5C  EE10 F004          	lfsr	1,4
  4782  004C60  50DE               	movf	postinc2,w,c
  4783  004C62  26E1               	addwf	fsr1l,f,c
  4784  004C64  50DD               	movf	postdec2,w,c
  4785  004C66  22E2               	addwfc	fsr1h,f,c
  4786  004C68  0E01               	movlw	1
  4787  004C6A  6EE7               	movwf	indf1,c
  4788  004C6C                     l5586:
  4789                           
  4790                           ;ff.c: 1644:  return res;
  4791  004C6C  0100               	movlb	0	; () banked
  4792  004C6E  518C               	movf	dir_register@res& (0+255),w,b
  4793                           
  4794                           ; BSR set to: 0
  4795  004C70  0012               	return		;funcret
  4796  004C72                     __end_of_dir_register:
  4797                           	opt callstack 0
  4798                           
  4799 ;; *************** function _mem_cpy *****************
  4800 ;; Defined at:
  4801 ;;		line 507 in file "ff.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  dst             2    0[COMRAM] PTR void 
  4804 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4805 ;;  src             2    2[COMRAM] PTR const void 
  4806 ;;		 -> f_open@sfn(12), NULL(0), STR_8(47), FatFs(558), 
  4807 ;;  cnt             2    4[COMRAM] unsigned short 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4810 ;;		 -> f_open@sfn(12), NULL(0), STR_8(47), FatFs(558), 
  4811 ;;  d               2    8[COMRAM] PTR unsigned char 
  4812 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4822 ;;      Params:         6       0       0       0       0       0       0       0       0
  4823 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4824 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4825 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4826 ;;Total ram usage:       12 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_dir_register
  4832 ;;		_f_write
  4833 ;;		_f_read
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text11
  4838  004D3E                     __ptext11:
  4839                           	opt callstack 0
  4840  004D3E                     _mem_cpy:
  4841                           	opt callstack 29
  4842                           
  4843                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;incstack = 0
  4847  004D3E  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4848  004D42  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4849                           
  4850                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4851  004D46  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4852  004D4A  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4853                           
  4854                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4855  004D4E  D02B               	goto	l5134
  4856  004D50                     l5126:
  4857                           
  4858                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4859  004D50  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4860  004D54  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4861  004D58  6AF8               	clrf	tblptru,c
  4862  004D5A  0E07               	movlw	(high __ramtop+-1)
  4863  004D5C  64F7               	cpfsgt	tblptrh,c
  4864  004D5E  D007               	bra	u6407
  4865  004D60  0009               	tblrd		*+
  4866  004D62  CFF5 F007          	movff	tablat,??_mem_cpy
  4867  004D66  0009               	tblrd		*+
  4868  004D68  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4869  004D6C  D008               	bra	u6400
  4870  004D6E                     u6407:
  4871  004D6E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4872  004D72  CFF7 FFEA          	movff	tblptrh,fsr0h
  4873  004D76  CFEE F007          	movff	postinc0,??_mem_cpy
  4874  004D7A  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4875  004D7E                     u6400:
  4876  004D7E  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4877  004D82  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4878  004D86  C007  FFDE         	movff	??_mem_cpy,postinc2
  4879  004D8A  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4880                           
  4881                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4882  004D8E  0E02               	movlw	2
  4883  004D90  2609               	addwf	mem_cpy@d,f,c
  4884  004D92  0E00               	movlw	0
  4885  004D94  220A               	addwfc	mem_cpy@d+1,f,c
  4886  004D96  0E02               	movlw	2
  4887  004D98  260B               	addwf	mem_cpy@s,f,c
  4888  004D9A  0E00               	movlw	0
  4889  004D9C  220C               	addwfc	mem_cpy@s+1,f,c
  4890                           
  4891                           ;ff.c: 515:   cnt -= sizeof (int);
  4892  004D9E  0E02               	movlw	2
  4893  004DA0  5E05               	subwf	mem_cpy@cnt,f,c
  4894  004DA2  0E00               	movlw	0
  4895  004DA4  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4896  004DA6                     l5134:
  4897                           
  4898                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4899  004DA6  5006               	movf	mem_cpy@cnt+1,w,c
  4900  004DA8  E1D3               	bnz	l5126
  4901  004DAA  0E02               	movlw	2
  4902  004DAC  5C05               	subwf	mem_cpy@cnt,w,c
  4903  004DAE  A0D8               	btfss	status,0,c
  4904  004DB0  D01A               	goto	l5142
  4905  004DB2  D7CE               	goto	l5126
  4906  004DB4                     l5136:
  4907                           
  4908                           ;ff.c: 519:   *d++ = *s++;
  4909  004DB4  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4910  004DB8  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4911  004DBC  6AF8               	clrf	tblptru,c
  4912  004DBE  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4913  004DC2  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4914  004DC6  0E07               	movlw	(high __ramtop+-1)
  4915  004DC8  64F7               	cpfsgt	tblptrh,c
  4916  004DCA  D003               	bra	u6427
  4917  004DCC  0008               	tblrd		*
  4918  004DCE  50F5               	movf	tablat,w,c
  4919  004DD0  D005               	bra	u6420
  4920  004DD2                     u6427:
  4921  004DD2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4922  004DD6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4923  004DDA  50EF               	movf	indf0,w,c
  4924  004DDC                     u6420:
  4925  004DDC  6EDF               	movwf	indf2,c
  4926  004DDE  4A0B               	infsnz	mem_cpy@s,f,c
  4927  004DE0  2A0C               	incf	mem_cpy@s+1,f,c
  4928  004DE2  4A09               	infsnz	mem_cpy@d,f,c
  4929  004DE4  2A0A               	incf	mem_cpy@d+1,f,c
  4930  004DE6                     l5142:
  4931                           
  4932                           ;ff.c: 518:  while (cnt--)
  4933  004DE6  0605               	decf	mem_cpy@cnt,f,c
  4934  004DE8  A0D8               	btfss	status,0,c
  4935  004DEA  0606               	decf	mem_cpy@cnt+1,f,c
  4936  004DEC  2805               	incf	mem_cpy@cnt,w,c
  4937  004DEE  E1E2               	bnz	l5136
  4938  004DF0  2806               	incf	mem_cpy@cnt+1,w,c
  4939  004DF2  B4D8               	btfsc	status,2,c
  4940  004DF4  0012               	return	
  4941  004DF6  D7DE               	goto	l5136
  4942  004DF8                     __end_of_mem_cpy:
  4943                           	opt callstack 0
  4944                           
  4945 ;; *************** function _dir_alloc *****************
  4946 ;; Defined at:
  4947 ;;		line 1199 in file "ff.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  dp              2   32[BANK0 ] PTR struct .
  4950 ;;		 -> f_open@dj(22), 
  4951 ;;  nent            2   34[BANK0 ] unsigned short 
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  n               2   39[BANK0 ] unsigned short 
  4954 ;;  res             1   41[BANK0 ] enum E93
  4955 ;; Return value:  Size  Location     Type
  4956 ;;                  1    wreg      enum E93
  4957 ;; Registers used:
  4958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4964 ;;      Params:         0       4       0       0       0       0       0       0       0
  4965 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4966 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4967 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4968 ;;Total ram usage:       10 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:   11
  4971 ;; This function calls:
  4972 ;;		_dir_next
  4973 ;;		_dir_sdi
  4974 ;;		_move_window
  4975 ;; This function is called by:
  4976 ;;		_dir_register
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text12
  4981  0047F6                     __ptext12:
  4982                           	opt callstack 0
  4983  0047F6                     _dir_alloc:
  4984                           	opt callstack 17
  4985                           
  4986                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4987                           
  4988                           ;incstack = 0
  4989  0047F6  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4990  0047FA  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4991  0047FE  0E00               	movlw	0
  4992  004800  6E59               	movwf	dir_sdi@idx+1,c
  4993  004802  0E00               	movlw	0
  4994  004804  6E58               	movwf	dir_sdi@idx,c
  4995  004806  EC72  F01B         	call	_dir_sdi	;wreg free
  4996  00480A  0100               	movlb	0	; () banked
  4997  00480C  6F89               	movwf	dir_alloc@res& (0+255),b
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;ff.c: 1209:  if (res == FR_OK) {
  5001  00480E  5189               	movf	dir_alloc@res& (0+255),w,b
  5002  004810  A4D8               	btfss	status,2,c
  5003  004812  D061               	goto	u6530
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;ff.c: 1210:   n = 0;
  5007  004814  0E00               	movlw	0
  5008  004816  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  5009  004818  0E00               	movlw	0
  5010  00481A  6F87               	movwf	dir_alloc@n& (0+255),b
  5011  00481C                     l5182:
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  5015  00481C  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  5016  004820  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  5017  004824  CFDE F030          	movff	postinc2,move_window@fs
  5018  004828  CFDD F031          	movff	postdec2,move_window@fs+1
  5019  00482C  EE20 F00E          	lfsr	2,14
  5020  004830  5180               	movf	dir_alloc@dp& (0+255),w,b
  5021  004832  26D9               	addwf	fsr2l,f,c
  5022  004834  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5023  004836  22DA               	addwfc	fsr2h,f,c
  5024  004838  CFDE F032          	movff	postinc2,move_window@sector
  5025  00483C  CFDE F033          	movff	postinc2,move_window@sector+1
  5026  004840  CFDE F034          	movff	postinc2,move_window@sector+2
  5027  004844  CFDE F035          	movff	postinc2,move_window@sector+3
  5028  004848  ECB1  F027         	call	_move_window	;wreg free
  5029  00484C  0100               	movlb	0	; () banked
  5030  00484E  6F89               	movwf	dir_alloc@res& (0+255),b
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;ff.c: 1213:    if (res != FR_OK) break;
  5034  004850  5189               	movf	dir_alloc@res& (0+255),w,b
  5035  004852  A4D8               	btfss	status,2,c
  5036  004854  D040               	goto	u6530
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  5040  004856  EE20 F012          	lfsr	2,18
  5041  00485A  5180               	movf	dir_alloc@dp& (0+255),w,b
  5042  00485C  26D9               	addwf	fsr2l,f,c
  5043  00485E  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5044  004860  22DA               	addwfc	fsr2h,f,c
  5045  004862  CFDE F084          	movff	postinc2,??_dir_alloc
  5046  004866  CFDD F085          	movff	postdec2,??_dir_alloc+1
  5047  00486A  C084  FFD9         	movff	??_dir_alloc,fsr2l
  5048  00486E  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  5049  004872  0EE5               	movlw	229
  5050  004874  18DE               	xorwf	postinc2,w,c
  5051  004876  B4D8               	btfsc	status,2,c
  5052  004878  D011               	goto	u6510
  5053                           
  5054                           ; BSR set to: 0
  5055  00487A  EE20 F012          	lfsr	2,18
  5056  00487E  5180               	movf	dir_alloc@dp& (0+255),w,b
  5057  004880  26D9               	addwf	fsr2l,f,c
  5058  004882  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  5059  004884  22DA               	addwfc	fsr2h,f,c
  5060  004886  CFDE F084          	movff	postinc2,??_dir_alloc
  5061  00488A  CFDD F085          	movff	postdec2,??_dir_alloc+1
  5062  00488E  C084  FFD9         	movff	??_dir_alloc,fsr2l
  5063  004892  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  5064  004896  50DF               	movf	indf2,w,c
  5065  004898  A4D8               	btfss	status,2,c
  5066  00489A  D00A               	goto	l5196
  5067  00489C                     u6510:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;ff.c: 1215:     if (++n == nent) break;
  5071  00489C  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  5072  00489E  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  5073  0048A0  5182               	movf	dir_alloc@nent& (0+255),w,b
  5074  0048A2  1987               	xorwf	dir_alloc@n& (0+255),w,b
  5075  0048A4  E109               	bnz	l5198
  5076  0048A6  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  5077  0048A8  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  5078  0048AA  B4D8               	btfsc	status,2,c
  5079  0048AC  D014               	goto	u6530
  5080  0048AE  D004               	goto	l5198
  5081  0048B0                     l5196:
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;ff.c: 1217:     n = 0;
  5085  0048B0  0E00               	movlw	0
  5086  0048B2  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  5087  0048B4  0E00               	movlw	0
  5088  0048B6  6F87               	movwf	dir_alloc@n& (0+255),b
  5089  0048B8                     l5198:
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;ff.c: 1219:    res = dir_next(dp, 1);
  5093  0048B8  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  5094  0048BC  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  5095  0048C0  0E00               	movlw	0
  5096  0048C2  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5097  0048C4  0E01               	movlw	1
  5098  0048C6  6F6F               	movwf	dir_next@stretch& (0+255),b
  5099  0048C8  EC56  F014         	call	_dir_next	;wreg free
  5100  0048CC  0100               	movlb	0	; () banked
  5101  0048CE  6F89               	movwf	dir_alloc@res& (0+255),b
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;ff.c: 1220:   } while (res == FR_OK);
  5105  0048D0  5189               	movf	dir_alloc@res& (0+255),w,b
  5106  0048D2  B4D8               	btfsc	status,2,c
  5107  0048D4  D7A3               	goto	l5182
  5108  0048D6                     u6530:
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  5112  0048D6  0E04               	movlw	4
  5113  0048D8  1989               	xorwf	dir_alloc@res& (0+255),w,b
  5114  0048DA  A4D8               	btfss	status,2,c
  5115  0048DC  D002               	goto	l482
  5116                           
  5117                           ; BSR set to: 0
  5118  0048DE  0E07               	movlw	7
  5119  0048E0  6F89               	movwf	dir_alloc@res& (0+255),b
  5120  0048E2                     l482:
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;ff.c: 1223:  return res;
  5124  0048E2  5189               	movf	dir_alloc@res& (0+255),w,b
  5125                           
  5126                           ; BSR set to: 0
  5127  0048E4  0012               	return		;funcret
  5128  0048E6                     __end_of_dir_alloc:
  5129                           	opt callstack 0
  5130                           
  5131 ;; *************** function _dir_sdi *****************
  5132 ;; Defined at:
  5133 ;;		line 1080 in file "ff.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  dp              2   85[COMRAM] PTR struct .
  5136 ;;		 -> f_open@dj(22), 
  5137 ;;  idx             2   87[COMRAM] unsigned short 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  clst            4   13[BANK0 ] unsigned long 
  5140 ;;  sect            4    9[BANK0 ] unsigned long 
  5141 ;;  ic              2    7[BANK0 ] unsigned short 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      enum E93
  5144 ;; Registers used:
  5145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5151 ;;      Params:         4       0       0       0       0       0       0       0       0
  5152 ;;      Locals:         0      10       0       0       0       0       0       0       0
  5153 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5154 ;;      Totals:         4      17       0       0       0       0       0       0       0
  5155 ;;Total ram usage:       21 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    9
  5158 ;; This function calls:
  5159 ;;		_clust2sect
  5160 ;;		_get_fat
  5161 ;; This function is called by:
  5162 ;;		_dir_alloc
  5163 ;;		_dir_find
  5164 ;;		_follow_path
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           	psect	text13
  5169  0036E4                     __ptext13:
  5170                           	opt callstack 0
  5171  0036E4                     _dir_sdi:
  5172                           	opt callstack 19
  5173                           
  5174                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;incstack = 0
  5178  0036E4  EE20 F004          	lfsr	2,4
  5179  0036E8  5056               	movf	dir_sdi@dp,w,c
  5180  0036EA  26D9               	addwf	fsr2l,f,c
  5181  0036EC  5057               	movf	dir_sdi@dp+1,w,c
  5182  0036EE  22DA               	addwfc	fsr2h,f,c
  5183  0036F0  C058  FFDE         	movff	dir_sdi@idx,postinc2
  5184  0036F4  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  5185                           
  5186                           ;ff.c: 1090:  clst = dp->sclust;
  5187  0036F8  EE20 F006          	lfsr	2,6
  5188  0036FC  5056               	movf	dir_sdi@dp,w,c
  5189  0036FE  26D9               	addwf	fsr2l,f,c
  5190  003700  5057               	movf	dir_sdi@dp+1,w,c
  5191  003702  22DA               	addwfc	fsr2h,f,c
  5192  003704  CFDE F06D          	movff	postinc2,dir_sdi@clst
  5193  003708  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  5194  00370C  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  5195  003710  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  5196                           
  5197                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  5198  003714  0100               	movlb	0	; () banked
  5199  003716  056D               	decf	dir_sdi@clst& (0+255),w,b
  5200  003718  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5201  00371A  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5202  00371C  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5203  00371E  B4D8               	btfsc	status,2,c
  5204  003720  D014               	goto	u5860
  5205                           
  5206                           ; BSR set to: 0
  5207  003722  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5208  003726  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5209  00372A  EE10 F012          	lfsr	1,18
  5210  00372E  50DE               	movf	postinc2,w,c
  5211  003730  26E1               	addwf	fsr1l,f,c
  5212  003732  50DD               	movf	postdec2,w,c
  5213  003734  22E2               	addwfc	fsr1h,f,c
  5214  003736  50E6               	movf	postinc1,w,c
  5215  003738  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5216  00373A  50E6               	movf	postinc1,w,c
  5217  00373C  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5218  00373E  50E6               	movf	postinc1,w,c
  5219  003740  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5220  003742  50E6               	movf	postinc1,w,c
  5221  003744  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5222  003746  A0D8               	btfss	status,0,c
  5223  003748  D002               	goto	l4844
  5224  00374A                     u5860:
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;ff.c: 1092:   return FR_INT_ERR;
  5228  00374A  0E02               	movlw	2
  5229  00374C  0012               	return	
  5230  00374E                     l4844:
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  5234  00374E  516D               	movf	dir_sdi@clst& (0+255),w,b
  5235  003750  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5236  003752  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5237  003754  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5238  003756  A4D8               	btfss	status,2,c
  5239  003758  D022               	goto	l4850
  5240                           
  5241                           ; BSR set to: 0
  5242  00375A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5243  00375E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5244  003762  CFDE F060          	movff	postinc2,??_dir_sdi
  5245  003766  CFDD F061          	movff	postdec2,??_dir_sdi+1
  5246  00376A  C060  FFD9         	movff	??_dir_sdi,fsr2l
  5247  00376E  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  5248  003772  0E03               	movlw	3
  5249  003774  18DE               	xorwf	postinc2,w,c
  5250  003776  A4D8               	btfss	status,2,c
  5251  003778  D012               	goto	l4850
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5255  00377A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5256  00377E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5257  003782  EE10 F022          	lfsr	1,34
  5258  003786  50DE               	movf	postinc2,w,c
  5259  003788  26E1               	addwf	fsr1l,f,c
  5260  00378A  50DD               	movf	postdec2,w,c
  5261  00378C  22E2               	addwfc	fsr1h,f,c
  5262  00378E  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  5263  003792  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  5264  003796  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  5265  00379A  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  5266  00379E                     l4850:
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;ff.c: 1096:  if (clst == 0) {
  5270  00379E  516D               	movf	dir_sdi@clst& (0+255),w,b
  5271  0037A0  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5272  0037A2  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5273  0037A4  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5274  0037A6  A4D8               	btfss	status,2,c
  5275  0037A8  D023               	goto	l4860
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5279  0037AA  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5280  0037AE  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5281  0037B2  EE10 F008          	lfsr	1,8
  5282  0037B6  50DE               	movf	postinc2,w,c
  5283  0037B8  26E1               	addwf	fsr1l,f,c
  5284  0037BA  50DD               	movf	postdec2,w,c
  5285  0037BC  22E2               	addwfc	fsr1h,f,c
  5286  0037BE  50E6               	movf	postinc1,w,c
  5287  0037C0  5C58               	subwf	dir_sdi@idx,w,c
  5288  0037C2  50E6               	movf	postinc1,w,c
  5289  0037C4  5859               	subwfb	dir_sdi@idx+1,w,c
  5290  0037C6  B0D8               	btfsc	status,0,c
  5291  0037C8  D7C0               	goto	u5860
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5295  0037CA  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5296  0037CE  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5297  0037D2  EE10 F022          	lfsr	1,34
  5298  0037D6  50DE               	movf	postinc2,w,c
  5299  0037D8  26E1               	addwf	fsr1l,f,c
  5300  0037DA  50DD               	movf	postdec2,w,c
  5301  0037DC  22E2               	addwfc	fsr1h,f,c
  5302  0037DE  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5303  0037E2  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5304  0037E6  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5305  0037EA  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5306                           
  5307                           ;ff.c: 1100:  }
  5308  0037EE  D079               	goto	l4882
  5309  0037F0                     l4860:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5313  0037F0  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5314  0037F4  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5315  0037F8  EE10 F002          	lfsr	1,2
  5316  0037FC  50DE               	movf	postinc2,w,c
  5317  0037FE  26E1               	addwf	fsr1l,f,c
  5318  003800  50DD               	movf	postdec2,w,c
  5319  003802  22E2               	addwfc	fsr1h,f,c
  5320  003804  50E7               	movf	indf1,w,c
  5321  003806  6F60               	movwf	??_dir_sdi& (0+255),b
  5322  003808  5160               	movf	??_dir_sdi& (0+255),w,b
  5323  00380A  0D10               	mullw	16
  5324  00380C  CFF3 F067          	movff	prodl,dir_sdi@ic
  5325  003810  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5326                           
  5327                           ;ff.c: 1103:   while (idx >= ic) {
  5328  003814  D046               	goto	l440
  5329  003816                     l4862:
  5330                           
  5331                           ; BSR set to: 0
  5332                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5333  003816  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5334  00381A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5335  00381E  CFDE F03B          	movff	postinc2,get_fat@fs
  5336  003822  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5337  003826  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5338  00382A  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5339  00382E  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5340  003832  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5341  003836  EC59  F016         	call	_get_fat	;wreg free
  5342  00383A  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5343  00383E  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5344  003842  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5345  003846  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5346                           
  5347                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5348  00384A  0100               	movlb	0	; () banked
  5349  00384C  296D               	incf	dir_sdi@clst& (0+255),w,b
  5350  00384E  E109               	bnz	l4870
  5351  003850  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5352  003852  E107               	bnz	l4870
  5353  003854  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5354  003856  E105               	bnz	l4870
  5355  003858  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5356  00385A  A4D8               	btfss	status,2,c
  5357  00385C  D002               	goto	l4870
  5358                           
  5359                           ; BSR set to: 0
  5360  00385E  0E01               	movlw	1
  5361  003860  0012               	return	
  5362  003862                     l4870:
  5363                           
  5364                           ; BSR set to: 0
  5365                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5366  003862  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5367  003864  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5368  003866  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5369  003868  E104               	bnz	u5920
  5370  00386A  0E02               	movlw	2
  5371  00386C  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5372  00386E  A0D8               	btfss	status,0,c
  5373  003870  D76C               	goto	u5860
  5374  003872                     u5920:
  5375                           
  5376                           ; BSR set to: 0
  5377  003872  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5378  003876  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5379  00387A  EE10 F012          	lfsr	1,18
  5380  00387E  50DE               	movf	postinc2,w,c
  5381  003880  26E1               	addwf	fsr1l,f,c
  5382  003882  50DD               	movf	postdec2,w,c
  5383  003884  22E2               	addwfc	fsr1h,f,c
  5384  003886  50E6               	movf	postinc1,w,c
  5385  003888  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5386  00388A  50E6               	movf	postinc1,w,c
  5387  00388C  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5388  00388E  50E6               	movf	postinc1,w,c
  5389  003890  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5390  003892  50E6               	movf	postinc1,w,c
  5391  003894  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5392  003896  B0D8               	btfsc	status,0,c
  5393  003898  D758               	goto	u5860
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;ff.c: 1108:    idx -= ic;
  5397  00389A  5167               	movf	dir_sdi@ic& (0+255),w,b
  5398  00389C  5E58               	subwf	dir_sdi@idx,f,c
  5399  00389E  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5400  0038A0  5A59               	subwfb	dir_sdi@idx+1,f,c
  5401  0038A2                     l440:
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;ff.c: 1103:   while (idx >= ic) {
  5405  0038A2  5167               	movf	dir_sdi@ic& (0+255),w,b
  5406  0038A4  5C58               	subwf	dir_sdi@idx,w,c
  5407  0038A6  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5408  0038A8  5859               	subwfb	dir_sdi@idx+1,w,c
  5409  0038AA  B0D8               	btfsc	status,0,c
  5410  0038AC  D7B4               	goto	l4862
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5414  0038AE  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5415  0038B2  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5416  0038B6  CFDE F00D          	movff	postinc2,clust2sect@fs
  5417  0038BA  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5418  0038BE  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5419  0038C2  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5420  0038C6  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5421  0038CA  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5422  0038CE  ECFC  F026         	call	_clust2sect	;wreg free
  5423  0038D2  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5424  0038D6  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5425  0038DA  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5426  0038DE  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5427  0038E2                     l4882:
  5428                           
  5429                           ;ff.c: 1112:  dp->clust = clst;
  5430  0038E2  EE20 F00A          	lfsr	2,10
  5431  0038E6  5056               	movf	dir_sdi@dp,w,c
  5432  0038E8  26D9               	addwf	fsr2l,f,c
  5433  0038EA  5057               	movf	dir_sdi@dp+1,w,c
  5434  0038EC  22DA               	addwfc	fsr2h,f,c
  5435  0038EE  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5436  0038F2  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5437  0038F6  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5438  0038FA  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5439                           
  5440                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5441  0038FE  0100               	movlb	0	; () banked
  5442  003900  5169               	movf	dir_sdi@sect& (0+255),w,b
  5443  003902  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5444  003904  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5445  003906  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5446  003908  B4D8               	btfsc	status,2,c
  5447  00390A  D71F               	goto	u5860
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5451  00390C  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5452  003910  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5453  003914  0E04               	movlw	4
  5454  003916  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5455  003918                     u5965:
  5456  003918  90D8               	bcf	status,0,c
  5457  00391A  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5458  00391C  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5459  00391E  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5460  003920  D7FB               	goto	u5965
  5461  003922  5160               	movf	??_dir_sdi& (0+255),w,b
  5462  003924  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5463  003926  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5464  003928  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5465  00392A  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5466  00392C  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5467  00392E  0E00               	movlw	0
  5468  003930  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5469  003932  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5470  003934  0E00               	movlw	0
  5471  003936  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5472  003938  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5473  00393A  EE20 F00E          	lfsr	2,14
  5474  00393E  5056               	movf	dir_sdi@dp,w,c
  5475  003940  26D9               	addwf	fsr2l,f,c
  5476  003942  5057               	movf	dir_sdi@dp+1,w,c
  5477  003944  22DA               	addwfc	fsr2h,f,c
  5478  003946  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5479  00394A  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5480  00394E  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5481  003952  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5482                           
  5483                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5484  003956  0E0F               	movlw	15
  5485  003958  1458               	andwf	dir_sdi@idx,w,c
  5486  00395A  6F60               	movwf	??_dir_sdi& (0+255),b
  5487  00395C  0E00               	movlw	0
  5488  00395E  1459               	andwf	dir_sdi@idx+1,w,c
  5489  003960  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5490  003962  0E05               	movlw	5
  5491  003964                     u5975:
  5492  003964  90D8               	bcf	status,0,c
  5493  003966  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5494  003968  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5495  00396A  2EE8               	decfsz	wreg,f,c
  5496  00396C  D7FB               	goto	u5975
  5497  00396E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5498  003972  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5499  003976  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5500  00397A  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5501  00397E  5160               	movf	??_dir_sdi& (0+255),w,b
  5502  003980  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5503  003982  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5504  003984  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5505  003986  0E2E               	movlw	46
  5506  003988  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5507  00398A  0E00               	movlw	0
  5508  00398C  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5509  00398E  EE20 F012          	lfsr	2,18
  5510  003992  5056               	movf	dir_sdi@dp,w,c
  5511  003994  26D9               	addwf	fsr2l,f,c
  5512  003996  5057               	movf	dir_sdi@dp+1,w,c
  5513  003998  22DA               	addwfc	fsr2h,f,c
  5514  00399A  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5515  00399E  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;ff.c: 1117:  return FR_OK;
  5519  0039A2  0E00               	movlw	0
  5520                           
  5521                           ; BSR set to: 0
  5522  0039A4  0012               	return		;funcret
  5523  0039A6                     __end_of_dir_sdi:
  5524                           	opt callstack 0
  5525                           
  5526 ;; *************** function _dir_next *****************
  5527 ;; Defined at:
  5528 ;;		line 1128 in file "ff.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  dp              2   13[BANK0 ] PTR struct .
  5531 ;;		 -> f_open@dj(22), 
  5532 ;;  stretch         2   15[BANK0 ] int 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  clst            4   28[BANK0 ] unsigned long 
  5535 ;;  i               2   26[BANK0 ] unsigned short 
  5536 ;;  c               2   24[BANK0 ] unsigned short 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      enum E93
  5539 ;; Registers used:
  5540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5546 ;;      Params:         0       4       0       0       0       0       0       0       0
  5547 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5548 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5549 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5550 ;;Total ram usage:       19 bytes
  5551 ;; Hardware stack levels used:    1
  5552 ;; Hardware stack levels required when called:   10
  5553 ;; This function calls:
  5554 ;;		_clust2sect
  5555 ;;		_create_chain
  5556 ;;		_get_fat
  5557 ;;		_mem_set
  5558 ;;		_sync_window
  5559 ;; This function is called by:
  5560 ;;		_dir_alloc
  5561 ;;		_dir_find
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text14
  5566  0028AC                     __ptext14:
  5567                           	opt callstack 0
  5568  0028AC                     _dir_next:
  5569                           	opt callstack 17
  5570                           
  5571                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;incstack = 0
  5575  0028AC  0100               	movlb	0	; () banked
  5576  0028AE  EE20 F004          	lfsr	2,4
  5577  0028B2  516D               	movf	dir_next@dp& (0+255),w,b
  5578  0028B4  26D9               	addwf	fsr2l,f,c
  5579  0028B6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5580  0028B8  22DA               	addwfc	fsr2h,f,c
  5581  0028BA  CFDE F071          	movff	postinc2,??_dir_next
  5582  0028BE  CFDD F072          	movff	postdec2,??_dir_next+1
  5583  0028C2  0E01               	movlw	1
  5584  0028C4  2571               	addwf	??_dir_next& (0+255),w,b
  5585  0028C6  6F7A               	movwf	dir_next@i& (0+255),b
  5586  0028C8  0E00               	movlw	0
  5587  0028CA  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5588  0028CC  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5592  0028CE  517A               	movf	dir_next@i& (0+255),w,b
  5593  0028D0  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5594  0028D2  B4D8               	btfsc	status,2,c
  5595  0028D4  D00C               	goto	u5990
  5596                           
  5597                           ; BSR set to: 0
  5598  0028D6  EE20 F00E          	lfsr	2,14
  5599  0028DA  516D               	movf	dir_next@dp& (0+255),w,b
  5600  0028DC  26D9               	addwf	fsr2l,f,c
  5601  0028DE  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5602  0028E0  22DA               	addwfc	fsr2h,f,c
  5603  0028E2  50DE               	movf	postinc2,w,c
  5604  0028E4  10DE               	iorwf	postinc2,w,c
  5605  0028E6  10DE               	iorwf	postinc2,w,c
  5606  0028E8  10DE               	iorwf	postinc2,w,c
  5607  0028EA  A4D8               	btfss	status,2,c
  5608  0028EC  D002               	goto	l4906
  5609  0028EE                     u5990:
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;ff.c: 1142:   return FR_NO_FILE;
  5613  0028EE  0E04               	movlw	4
  5614  0028F0  0012               	return	
  5615  0028F2                     l4906:
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5619  0028F2  0E0F               	movlw	15
  5620  0028F4  157A               	andwf	dir_next@i& (0+255),w,b
  5621  0028F6  6F71               	movwf	??_dir_next& (0+255),b
  5622  0028F8  0E00               	movlw	0
  5623  0028FA  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5624  0028FC  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5625  0028FE  5171               	movf	??_dir_next& (0+255),w,b
  5626  002900  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5627  002902  A4D8               	btfss	status,2,c
  5628  002904  D1A4               	goto	l4992
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;ff.c: 1145:   dp->sect++;
  5632  002906  EE20 F00E          	lfsr	2,14
  5633  00290A  516D               	movf	dir_next@dp& (0+255),w,b
  5634  00290C  26D9               	addwf	fsr2l,f,c
  5635  00290E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5636  002910  22DA               	addwfc	fsr2h,f,c
  5637  002912  2ADE               	incf	postinc2,f,c
  5638  002914  0E00               	movlw	0
  5639  002916  22DE               	addwfc	postinc2,f,c
  5640  002918  22DE               	addwfc	postinc2,f,c
  5641  00291A  22DE               	addwfc	postinc2,f,c
  5642                           
  5643                           ;ff.c: 1147:   if (!dp->clust) {
  5644  00291C  EE20 F00A          	lfsr	2,10
  5645  002920  516D               	movf	dir_next@dp& (0+255),w,b
  5646  002922  26D9               	addwf	fsr2l,f,c
  5647  002924  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5648  002926  22DA               	addwfc	fsr2h,f,c
  5649  002928  50DE               	movf	postinc2,w,c
  5650  00292A  10DE               	iorwf	postinc2,w,c
  5651  00292C  10DE               	iorwf	postinc2,w,c
  5652  00292E  10DE               	iorwf	postinc2,w,c
  5653  002930  A4D8               	btfss	status,2,c
  5654  002932  D011               	goto	l4916
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5658  002934  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5659  002938  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5660  00293C  EE10 F008          	lfsr	1,8
  5661  002940  50DE               	movf	postinc2,w,c
  5662  002942  26E1               	addwf	fsr1l,f,c
  5663  002944  50DD               	movf	postdec2,w,c
  5664  002946  22E2               	addwfc	fsr1h,f,c
  5665  002948  50E6               	movf	postinc1,w,c
  5666  00294A  5D7A               	subwf	dir_next@i& (0+255),w,b
  5667  00294C  50E6               	movf	postinc1,w,c
  5668  00294E  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5669  002950  B0D8               	btfsc	status,0,c
  5670  002952  D7CD               	goto	u5990
  5671  002954  D17C               	goto	l4992
  5672  002956                     l4916:
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5676  002956  C07A  F071         	movff	dir_next@i,??_dir_next
  5677  00295A  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5678  00295E  0E04               	movlw	4
  5679  002960  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5680  002962                     u6035:
  5681  002962  90D8               	bcf	status,0,c
  5682  002964  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5683  002966  3371               	rrcf	??_dir_next& (0+255),f,b
  5684  002968  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5685  00296A  D7FB               	goto	u6035
  5686  00296C  0EFF               	movlw	255
  5687  00296E  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5688  002970  0EFF               	movlw	255
  5689  002972  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5690  002974  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5691  002978  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5692  00297C  EE10 F002          	lfsr	1,2
  5693  002980  50DE               	movf	postinc2,w,c
  5694  002982  26E1               	addwf	fsr1l,f,c
  5695  002984  50DD               	movf	postdec2,w,c
  5696  002986  22E2               	addwfc	fsr1h,f,c
  5697  002988  50E7               	movf	indf1,w,c
  5698  00298A  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5699  00298C  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5700  00298E  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5701  002990  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5702  002992  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5703  002994  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5704  002996  5171               	movf	??_dir_next& (0+255),w,b
  5705  002998  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5706  00299A  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5707  00299C  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5708  00299E  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5709  0029A0  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5710  0029A2  A4D8               	btfss	status,2,c
  5711  0029A4  D154               	goto	l4992
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5715  0029A6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5716  0029AA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5717  0029AE  CFDE F03B          	movff	postinc2,get_fat@fs
  5718  0029B2  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5719  0029B6  EE20 F00A          	lfsr	2,10
  5720  0029BA  516D               	movf	dir_next@dp& (0+255),w,b
  5721  0029BC  26D9               	addwf	fsr2l,f,c
  5722  0029BE  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5723  0029C0  22DA               	addwfc	fsr2h,f,c
  5724  0029C2  CFDE F03D          	movff	postinc2,get_fat@clst
  5725  0029C6  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5726  0029CA  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5727  0029CE  CFDE F040          	movff	postinc2,get_fat@clst+3
  5728  0029D2  EC59  F016         	call	_get_fat	;wreg free
  5729  0029D6  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5730  0029DA  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5731  0029DE  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5732  0029E2  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5733                           
  5734                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5735  0029E6  0100               	movlb	0	; () banked
  5736  0029E8  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5737  0029EA  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5738  0029EC  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5739  0029EE  E106               	bnz	l4926
  5740  0029F0  0E02               	movlw	2
  5741  0029F2  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5742  0029F4  B0D8               	btfsc	status,0,c
  5743  0029F6  D002               	goto	l4926
  5744  0029F8                     u6050:
  5745                           
  5746                           ; BSR set to: 0
  5747  0029F8  0E02               	movlw	2
  5748  0029FA  0012               	return	
  5749  0029FC                     l4926:
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5753  0029FC  297C               	incf	dir_next@clst& (0+255),w,b
  5754  0029FE  E109               	bnz	l4932
  5755  002A00  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5756  002A02  E107               	bnz	l4932
  5757  002A04  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5758  002A06  E105               	bnz	l4932
  5759  002A08  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5760  002A0A  A4D8               	btfss	status,2,c
  5761  002A0C  D002               	goto	l4932
  5762  002A0E                     u6060:
  5763  002A0E  0E01               	movlw	1
  5764  002A10  0012               	return	
  5765  002A12                     l4932:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5769  002A12  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5770  002A16  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5771  002A1A  EE10 F012          	lfsr	1,18
  5772  002A1E  50DE               	movf	postinc2,w,c
  5773  002A20  26E1               	addwf	fsr1l,f,c
  5774  002A22  50DD               	movf	postdec2,w,c
  5775  002A24  22E2               	addwfc	fsr1h,f,c
  5776  002A26  50E6               	movf	postinc1,w,c
  5777  002A28  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5778  002A2A  50E6               	movf	postinc1,w,c
  5779  002A2C  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5780  002A2E  50E6               	movf	postinc1,w,c
  5781  002A30  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5782  002A32  50E6               	movf	postinc1,w,c
  5783  002A34  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5784  002A36  A0D8               	btfss	status,0,c
  5785  002A38  D0DB               	goto	l4988
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5789  002A3A  516F               	movf	dir_next@stretch& (0+255),w,b
  5790  002A3C  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5791  002A3E  B4D8               	btfsc	status,2,c
  5792  002A40  D756               	goto	u5990
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5796  002A42  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5797  002A46  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5798  002A4A  CFDE F056          	movff	postinc2,create_chain@fs
  5799  002A4E  CFDD F057          	movff	postdec2,create_chain@fs+1
  5800  002A52  EE20 F00A          	lfsr	2,10
  5801  002A56  516D               	movf	dir_next@dp& (0+255),w,b
  5802  002A58  26D9               	addwf	fsr2l,f,c
  5803  002A5A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5804  002A5C  22DA               	addwfc	fsr2h,f,c
  5805  002A5E  CFDE F058          	movff	postinc2,create_chain@clst
  5806  002A62  CFDE F059          	movff	postinc2,create_chain@clst+1
  5807  002A66  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5808  002A6A  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5809  002A6E  ECF5  F019         	call	_create_chain	;wreg free
  5810  002A72  C056  F07C         	movff	?_create_chain,dir_next@clst
  5811  002A76  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5812  002A7A  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5813  002A7E  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5814                           
  5815                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5816  002A82  0100               	movlb	0	; () banked
  5817  002A84  517C               	movf	dir_next@clst& (0+255),w,b
  5818  002A86  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5819  002A88  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5820  002A8A  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5821  002A8C  A4D8               	btfss	status,2,c
  5822  002A8E  D002               	goto	l4948
  5823                           
  5824                           ; BSR set to: 0
  5825  002A90  0E07               	movlw	7
  5826  002A92  0012               	return	
  5827  002A94                     l4948:
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5831  002A94  057C               	decf	dir_next@clst& (0+255),w,b
  5832  002A96  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5833  002A98  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5834  002A9A  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5835  002A9C  B4D8               	btfsc	status,2,c
  5836  002A9E  D7AC               	goto	u6050
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5840  002AA0  297C               	incf	dir_next@clst& (0+255),w,b
  5841  002AA2  E107               	bnz	l4960
  5842  002AA4  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5843  002AA6  E105               	bnz	l4960
  5844  002AA8  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5845  002AAA  E103               	bnz	l4960
  5846  002AAC  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5847  002AAE  B4D8               	btfsc	status,2,c
  5848  002AB0  D7AE               	goto	u6060
  5849  002AB2                     l4960:
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5853  002AB2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5854  002AB6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5855  002ABA  CFDE F01B          	movff	postinc2,sync_window@fs
  5856  002ABE  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5857  002AC2  ECDE  F020         	call	_sync_window	;wreg free
  5858  002AC6  0900               	iorlw	0
  5859  002AC8  A4D8               	btfss	status,2,c
  5860  002ACA  D7A1               	goto	u6060
  5861                           
  5862                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5863  002ACC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5864  002AD0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5865  002AD4  CFDE F071          	movff	postinc2,??_dir_next
  5866  002AD8  CFDD F072          	movff	postdec2,??_dir_next+1
  5867  002ADC  0E2E               	movlw	46
  5868  002ADE  0100               	movlb	0	; () banked
  5869  002AE0  2571               	addwf	??_dir_next& (0+255),w,b
  5870  002AE2  6E01               	movwf	mem_set@dst,c
  5871  002AE4  0E00               	movlw	0
  5872  002AE6  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5873  002AE8  6E02               	movwf	mem_set@dst+1,c
  5874  002AEA  0E00               	movlw	0
  5875  002AEC  6E04               	movwf	mem_set@val+1,c
  5876  002AEE  0E00               	movlw	0
  5877  002AF0  6E03               	movwf	mem_set@val,c
  5878  002AF2  0E02               	movlw	2
  5879  002AF4  6E06               	movwf	mem_set@cnt+1,c
  5880  002AF6  0E00               	movlw	0
  5881  002AF8  6E05               	movwf	mem_set@cnt,c
  5882  002AFA  EC58  F02B         	call	_mem_set	;wreg free
  5883                           
  5884                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5885  002AFE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5886  002B02  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5887  002B06  CFDE F00D          	movff	postinc2,clust2sect@fs
  5888  002B0A  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5889  002B0E  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5890  002B12  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5891  002B16  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5892  002B1A  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5893  002B1E  ECFC  F026         	call	_clust2sect	;wreg free
  5894  002B22  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5895  002B26  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5896  002B2A  EE10 F02A          	lfsr	1,42
  5897  002B2E  50DE               	movf	postinc2,w,c
  5898  002B30  26E1               	addwf	fsr1l,f,c
  5899  002B32  50DD               	movf	postdec2,w,c
  5900  002B34  22E2               	addwfc	fsr1h,f,c
  5901  002B36  C00D  FFE6         	movff	?_clust2sect,postinc1
  5902  002B3A  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5903  002B3E  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5904  002B42  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5905                           
  5906                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5907  002B46  0E00               	movlw	0
  5908  002B48  0100               	movlb	0	; () banked
  5909  002B4A  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5910  002B4C  0E00               	movlw	0
  5911  002B4E  6F78               	movwf	dir_next@c& (0+255),b
  5912  002B50  D02B               	goto	l4984
  5913  002B52                     l4972:
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5917  002B52  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5918  002B56  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5919  002B5A  EE10 F004          	lfsr	1,4
  5920  002B5E  50DE               	movf	postinc2,w,c
  5921  002B60  26E1               	addwf	fsr1l,f,c
  5922  002B62  50DD               	movf	postdec2,w,c
  5923  002B64  22E2               	addwfc	fsr1h,f,c
  5924  002B66  0E01               	movlw	1
  5925  002B68  6EE7               	movwf	indf1,c
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5929  002B6A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5930  002B6E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5931  002B72  CFDE F01B          	movff	postinc2,sync_window@fs
  5932  002B76  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5933  002B7A  ECDE  F020         	call	_sync_window	;wreg free
  5934  002B7E  0900               	iorlw	0
  5935  002B80  A4D8               	btfss	status,2,c
  5936  002B82  D745               	goto	u6060
  5937                           
  5938                           ;ff.c: 1170:       dp->fs->winsect++;
  5939  002B84  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5940  002B88  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5941  002B8C  EE10 F02A          	lfsr	1,42
  5942  002B90  50DE               	movf	postinc2,w,c
  5943  002B92  26E1               	addwf	fsr1l,f,c
  5944  002B94  50DD               	movf	postdec2,w,c
  5945  002B96  22E2               	addwfc	fsr1h,f,c
  5946  002B98  2AE6               	incf	postinc1,f,c
  5947  002B9A  0E00               	movlw	0
  5948  002B9C  22E6               	addwfc	postinc1,f,c
  5949  002B9E  22E6               	addwfc	postinc1,f,c
  5950  002BA0  22E6               	addwfc	postinc1,f,c
  5951                           
  5952                           ;ff.c: 1171:      }
  5953  002BA2  0100               	movlb	0	; () banked
  5954  002BA4  4B78               	infsnz	dir_next@c& (0+255),f,b
  5955  002BA6  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5956  002BA8                     l4984:
  5957                           
  5958                           ; BSR set to: 0
  5959  002BA8  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5960  002BAC  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5961  002BB0  EE10 F002          	lfsr	1,2
  5962  002BB4  50DE               	movf	postinc2,w,c
  5963  002BB6  26E1               	addwf	fsr1l,f,c
  5964  002BB8  50DD               	movf	postdec2,w,c
  5965  002BBA  22E2               	addwfc	fsr1h,f,c
  5966  002BBC  50E7               	movf	indf1,w,c
  5967  002BBE  6F71               	movwf	??_dir_next& (0+255),b
  5968  002BC0  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5969  002BC2  5171               	movf	??_dir_next& (0+255),w,b
  5970  002BC4  5D78               	subwf	dir_next@c& (0+255),w,b
  5971  002BC6  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5972  002BC8  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5973  002BCA  A0D8               	btfss	status,0,c
  5974  002BCC  D7C2               	goto	l4972
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5978  002BCE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5979  002BD2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5980  002BD6  EE10 F02A          	lfsr	1,42
  5981  002BDA  50DE               	movf	postinc2,w,c
  5982  002BDC  26E1               	addwf	fsr1l,f,c
  5983  002BDE  50DD               	movf	postdec2,w,c
  5984  002BE0  22E2               	addwfc	fsr1h,f,c
  5985  002BE2  5178               	movf	dir_next@c& (0+255),w,b
  5986  002BE4  5EE6               	subwf	postinc1,f,c
  5987  002BE6  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5988  002BE8  5AE6               	subwfb	postinc1,f,c
  5989  002BEA  0E00               	movlw	0
  5990  002BEC  5AE6               	subwfb	postinc1,f,c
  5991  002BEE  5AE6               	subwfb	postinc1,f,c
  5992  002BF0                     l4988:
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;ff.c: 1178:     dp->clust = clst;
  5996  002BF0  EE20 F00A          	lfsr	2,10
  5997  002BF4  516D               	movf	dir_next@dp& (0+255),w,b
  5998  002BF6  26D9               	addwf	fsr2l,f,c
  5999  002BF8  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6000  002BFA  22DA               	addwfc	fsr2h,f,c
  6001  002BFC  C07C  FFDE         	movff	dir_next@clst,postinc2
  6002  002C00  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  6003  002C04  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  6004  002C08  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  6008  002C0C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6009  002C10  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6010  002C14  CFDE F00D          	movff	postinc2,clust2sect@fs
  6011  002C18  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6012  002C1C  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  6013  002C20  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6014  002C24  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6015  002C28  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6016  002C2C  ECFC  F026         	call	_clust2sect	;wreg free
  6017  002C30  0100               	movlb	0	; () banked
  6018  002C32  EE20 F00E          	lfsr	2,14
  6019  002C36  516D               	movf	dir_next@dp& (0+255),w,b
  6020  002C38  26D9               	addwf	fsr2l,f,c
  6021  002C3A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6022  002C3C  22DA               	addwfc	fsr2h,f,c
  6023  002C3E  C00D  FFDE         	movff	?_clust2sect,postinc2
  6024  002C42  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  6025  002C46  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  6026  002C4A  C010  FFDE         	movff	?_clust2sect+3,postinc2
  6027  002C4E                     l4992:
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;ff.c: 1184:  dp->index = (WORD)i;
  6031  002C4E  EE20 F004          	lfsr	2,4
  6032  002C52  516D               	movf	dir_next@dp& (0+255),w,b
  6033  002C54  26D9               	addwf	fsr2l,f,c
  6034  002C56  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6035  002C58  22DA               	addwfc	fsr2h,f,c
  6036  002C5A  C07A  FFDE         	movff	dir_next@i,postinc2
  6037  002C5E  C07B  FFDD         	movff	dir_next@i+1,postdec2
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  6041  002C62  0E0F               	movlw	15
  6042  002C64  157A               	andwf	dir_next@i& (0+255),w,b
  6043  002C66  6F71               	movwf	??_dir_next& (0+255),b
  6044  002C68  0E00               	movlw	0
  6045  002C6A  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  6046  002C6C  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6047  002C6E  0E05               	movlw	5
  6048  002C70                     u6155:
  6049  002C70  90D8               	bcf	status,0,c
  6050  002C72  3771               	rlcf	??_dir_next& (0+255),f,b
  6051  002C74  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  6052  002C76  2EE8               	decfsz	wreg,f,c
  6053  002C78  D7FB               	goto	u6155
  6054  002C7A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6055  002C7E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6056  002C82  CFDE F073          	movff	postinc2,??_dir_next+2
  6057  002C86  CFDD F074          	movff	postdec2,??_dir_next+3
  6058  002C8A  5171               	movf	??_dir_next& (0+255),w,b
  6059  002C8C  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  6060  002C8E  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6061  002C90  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  6062  002C92  0E2E               	movlw	46
  6063  002C94  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  6064  002C96  0E00               	movlw	0
  6065  002C98  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  6066  002C9A  EE20 F012          	lfsr	2,18
  6067  002C9E  516D               	movf	dir_next@dp& (0+255),w,b
  6068  002CA0  26D9               	addwf	fsr2l,f,c
  6069  002CA2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6070  002CA4  22DA               	addwfc	fsr2h,f,c
  6071  002CA6  C073  FFDE         	movff	??_dir_next+2,postinc2
  6072  002CAA  C074  FFDD         	movff	??_dir_next+3,postdec2
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;ff.c: 1187:  return FR_OK;
  6076  002CAE  0E00               	movlw	0
  6077  002CB0  0012               	return		;funcret
  6078  002CB2                     __end_of_dir_next:
  6079                           	opt callstack 0
  6080                           
  6081 ;; *************** function _f_mount *****************
  6082 ;; Defined at:
  6083 ;;		line 2402 in file "ff.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  fs              2   81[COMRAM] PTR struct .
  6086 ;;		 -> NULL(0), FatFs(558), 
  6087 ;;  path            2   83[COMRAM] PTR const unsigned char 
  6088 ;;		 -> STR_5(11), STR_3(1), STR_1(1), 
  6089 ;;  opt             1   85[COMRAM] unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  vol             2   91[COMRAM] int 
  6092 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  6093 ;;		 -> STR_5(11), STR_3(1), STR_1(1), 
  6094 ;;  cfs             2   87[COMRAM] PTR struct .
  6095 ;;		 -> NULL(0), FatFs(558), 
  6096 ;;  res             1   86[COMRAM] enum E93
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      enum E4918
  6099 ;; Registers used:
  6100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6106 ;;      Params:         5       0       0       0       0       0       0       0       0
  6107 ;;      Locals:         7       0       0       0       0       0       0       0       0
  6108 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6109 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6110 ;;Total ram usage:       12 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:   10
  6113 ;; This function calls:
  6114 ;;		_find_volume
  6115 ;;		_get_ldnumber
  6116 ;; This function is called by:
  6117 ;;		_main
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           	psect	text15
  6122  004EB2                     __ptext15:
  6123                           	opt callstack 0
  6124  004EB2                     _f_mount:
  6125                           	opt callstack 20
  6126                           
  6127                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  6128                           
  6129                           ;incstack = 0
  6130  004EB2  C054  F05A         	movff	f_mount@path,f_mount@rp
  6131  004EB6  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  6132                           
  6133                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  6134  004EBA  0E5A               	movlw	low f_mount@rp
  6135  004EBC  6E01               	movwf	get_ldnumber@path,c
  6136  004EBE  0E00               	movlw	high f_mount@rp
  6137  004EC0  6E02               	movwf	get_ldnumber@path+1,c
  6138  004EC2  EC5F  F025         	call	_get_ldnumber	;wreg free
  6139  004EC6  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  6140  004ECA  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  6141                           
  6142                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  6143  004ECE  AE5D               	btfss	f_mount@vol+1,7,c
  6144  004ED0  D002               	goto	l6020
  6145  004ED2  0E0B               	movlw	11
  6146  004ED4  0012               	return	
  6147  004ED6                     l6020:
  6148                           
  6149                           ;ff.c: 2416:  cfs = FatFs[vol];
  6150  004ED6  90D8               	bcf	status,0,c
  6151  004ED8  345C               	rlcf	f_mount@vol,w,c
  6152  004EDA  6ED9               	movwf	fsr2l,c
  6153  004EDC  345D               	rlcf	f_mount@vol+1,w,c
  6154  004EDE  6EDA               	movwf	fsr2h,c
  6155  004EE0  0ED4               	movlw	low ff@FatFs
  6156  004EE2  26D9               	addwf	fsr2l,f,c
  6157  004EE4  0E00               	movlw	high ff@FatFs
  6158  004EE6  22DA               	addwfc	fsr2h,f,c
  6159  004EE8  CFDE F058          	movff	postinc2,f_mount@cfs
  6160  004EEC  CFDD F059          	movff	postdec2,f_mount@cfs+1
  6161                           
  6162                           ;ff.c: 2418:  if (cfs) {
  6163  004EF0  5058               	movf	f_mount@cfs,w,c
  6164  004EF2  1059               	iorwf	f_mount@cfs+1,w,c
  6165  004EF4  B4D8               	btfsc	status,2,c
  6166  004EF6  D006               	goto	l6026
  6167                           
  6168                           ;ff.c: 2425:   cfs->fs_type = 0;
  6169  004EF8  C058  FFD9         	movff	f_mount@cfs,fsr2l
  6170  004EFC  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  6171  004F00  0E00               	movlw	0
  6172  004F02  6EDF               	movwf	indf2,c
  6173  004F04                     l6026:
  6174                           
  6175                           ;ff.c: 2428:  if (fs) {
  6176  004F04  5052               	movf	f_mount@fs,w,c
  6177  004F06  1053               	iorwf	f_mount@fs+1,w,c
  6178  004F08  B4D8               	btfsc	status,2,c
  6179  004F0A  D006               	goto	l6030
  6180                           
  6181                           ;ff.c: 2429:   fs->fs_type = 0;
  6182  004F0C  C052  FFD9         	movff	f_mount@fs,fsr2l
  6183  004F10  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  6184  004F14  0E00               	movlw	0
  6185  004F16  6EDF               	movwf	indf2,c
  6186  004F18                     l6030:
  6187                           
  6188                           ;ff.c: 2434:  FatFs[vol] = fs;
  6189  004F18  90D8               	bcf	status,0,c
  6190  004F1A  345C               	rlcf	f_mount@vol,w,c
  6191  004F1C  6ED9               	movwf	fsr2l,c
  6192  004F1E  345D               	rlcf	f_mount@vol+1,w,c
  6193  004F20  6EDA               	movwf	fsr2h,c
  6194  004F22  0ED4               	movlw	low ff@FatFs
  6195  004F24  26D9               	addwf	fsr2l,f,c
  6196  004F26  0E00               	movlw	high ff@FatFs
  6197  004F28  22DA               	addwfc	fsr2h,f,c
  6198  004F2A  C052  FFDE         	movff	f_mount@fs,postinc2
  6199  004F2E  C053  FFDD         	movff	f_mount@fs+1,postdec2
  6200                           
  6201                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  6202  004F32  5052               	movf	f_mount@fs,w,c
  6203  004F34  1053               	iorwf	f_mount@fs+1,w,c
  6204  004F36  B4D8               	btfsc	status,2,c
  6205  004F38  D003               	goto	u7860
  6206  004F3A  0456               	decf	f_mount@opt,w,c
  6207  004F3C  B4D8               	btfsc	status,2,c
  6208  004F3E  D002               	goto	l6040
  6209  004F40                     u7860:
  6210  004F40  0E00               	movlw	0
  6211  004F42  0012               	return	
  6212  004F44                     l6040:
  6213                           
  6214                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  6215  004F44  0E52               	movlw	low f_mount@fs
  6216  004F46  6E45               	movwf	find_volume@rfs,c
  6217  004F48  0E00               	movlw	high f_mount@fs
  6218  004F4A  6E46               	movwf	find_volume@rfs+1,c
  6219  004F4C  0E54               	movlw	low f_mount@path
  6220  004F4E  6E47               	movwf	find_volume@path,c
  6221  004F50  0E00               	movlw	high f_mount@path
  6222  004F52  6E48               	movwf	find_volume@path+1,c
  6223  004F54  0E00               	movlw	0
  6224  004F56  6E49               	movwf	find_volume@wmode,c
  6225  004F58  EC62  F004         	call	_find_volume	;wreg free
  6226  004F5C  6E57               	movwf	f_mount@res,c
  6227                           
  6228                           ;ff.c: 2439:  return res;
  6229  004F5E  5057               	movf	f_mount@res,w,c
  6230  004F60  0012               	return		;funcret
  6231  004F62                     __end_of_f_mount:
  6232                           	opt callstack 0
  6233                           
  6234 ;; *************** function _find_volume *****************
  6235 ;; Defined at:
  6236 ;;		line 2203 in file "ff.c"
  6237 ;; Parameters:    Size  Location     Type
  6238 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  6239 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  6240 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  6241 ;;		 -> f_open@path(2), f_mount@path(2), 
  6242 ;;  wmode           1   72[COMRAM] unsigned char 
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;  br             16    0[BANK0 ] unsigned long [4]
  6245 ;;  bsect           4   49[BANK0 ] unsigned long 
  6246 ;;  fasize          4   45[BANK0 ] unsigned long 
  6247 ;;  nclst           4   40[BANK0 ] unsigned long 
  6248 ;;  tsect           4   36[BANK0 ] unsigned long 
  6249 ;;  sysect          4   28[BANK0 ] unsigned long 
  6250 ;;  szbfat          4   22[BANK0 ] unsigned long 
  6251 ;;  fs              2   56[BANK0 ] PTR struct .
  6252 ;;		 -> NULL(0), FatFs(558), 
  6253 ;;  i               2   53[BANK0 ] unsigned short 
  6254 ;;  nrsv            2   34[BANK0 ] unsigned short 
  6255 ;;  vol             2   32[BANK0 ] int 
  6256 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  6257 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  6258 ;;  fmt             1   55[BANK0 ] unsigned char 
  6259 ;;  stat            1   44[BANK0 ] unsigned char 
  6260 ;; Return value:  Size  Location     Type
  6261 ;;                  1    wreg      enum E93
  6262 ;; Registers used:
  6263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6269 ;;      Params:         5       0       0       0       0       0       0       0       0
  6270 ;;      Locals:         0      58       0       0       0       0       0       0       0
  6271 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6272 ;;      Totals:        13      58       0       0       0       0       0       0       0
  6273 ;;Total ram usage:       71 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    9
  6276 ;; This function calls:
  6277 ;;		___lldiv
  6278 ;;		___lmul
  6279 ;;		_check_fs
  6280 ;;		_disk_initialize
  6281 ;;		_disk_status
  6282 ;;		_get_ldnumber
  6283 ;;		_move_window
  6284 ;; This function is called by:
  6285 ;;		_f_mount
  6286 ;;		_f_open
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           	psect	text16
  6291  0008C4                     __ptext16:
  6292                           	opt callstack 0
  6293  0008C4                     _find_volume:
  6294                           	opt callstack 20
  6295                           
  6296                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  6297                           
  6298                           ;incstack = 0
  6299  0008C4  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6300  0008C8  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6301  0008CC  0E00               	movlw	0
  6302  0008CE  6EDE               	movwf	postinc2,c
  6303  0008D0  0E00               	movlw	0
  6304  0008D2  6EDD               	movwf	postdec2,c
  6305                           
  6306                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6307  0008D4  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6308  0008D8  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6309  0008DC  EC5F  F025         	call	_get_ldnumber	;wreg free
  6310  0008E0  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6311  0008E4  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6312                           
  6313                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6314  0008E8  0100               	movlb	0	; () banked
  6315  0008EA  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6316  0008EC  D002               	goto	l5654
  6317                           
  6318                           ; BSR set to: 0
  6319  0008EE  0E0B               	movlw	11
  6320  0008F0  0012               	return	
  6321  0008F2                     l5654:
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;ff.c: 2224:  fs = FatFs[vol];
  6325  0008F2  90D8               	bcf	status,0,c
  6326  0008F4  3580               	rlcf	find_volume@vol& (0+255),w,b
  6327  0008F6  6ED9               	movwf	fsr2l,c
  6328  0008F8  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6329  0008FA  6EDA               	movwf	fsr2h,c
  6330  0008FC  0ED4               	movlw	low ff@FatFs
  6331  0008FE  26D9               	addwf	fsr2l,f,c
  6332  000900  0E00               	movlw	high ff@FatFs
  6333  000902  22DA               	addwfc	fsr2h,f,c
  6334  000904  CFDE F098          	movff	postinc2,find_volume@fs
  6335  000908  CFDD F099          	movff	postdec2,find_volume@fs+1
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6339  00090C  5198               	movf	find_volume@fs& (0+255),w,b
  6340  00090E  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6341  000910  A4D8               	btfss	status,2,c
  6342  000912  D002               	goto	l5662
  6343                           
  6344                           ; BSR set to: 0
  6345  000914  0E0C               	movlw	12
  6346  000916  0012               	return	
  6347  000918                     l5662:
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;ff.c: 2228:  *rfs = fs;
  6351  000918  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6352  00091C  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6353  000920  C098  FFDE         	movff	find_volume@fs,postinc2
  6354  000924  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;ff.c: 2230:  if (fs->fs_type) {
  6358  000928  C098  FFD9         	movff	find_volume@fs,fsr2l
  6359  00092C  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6360  000930  50DF               	movf	indf2,w,c
  6361  000932  B4D8               	btfsc	status,2,c
  6362  000934  D015               	goto	l5682
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6366  000936  EE20 F001          	lfsr	2,1
  6367  00093A  5198               	movf	find_volume@fs& (0+255),w,b
  6368  00093C  26D9               	addwf	fsr2l,f,c
  6369  00093E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6370  000940  22DA               	addwfc	fsr2h,f,c
  6371  000942  50DF               	movf	indf2,w,c
  6372  000944  ECCC  F02B         	call	_disk_status
  6373  000948  0100               	movlb	0	; () banked
  6374  00094A  6F8C               	movwf	find_volume@stat& (0+255),b
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6378  00094C  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6379  00094E  D008               	goto	l5682
  6380                           
  6381                           ; BSR set to: 0
  6382  000950  5049               	movf	find_volume@wmode,w,c
  6383  000952  A4D8               	btfss	status,2,c
  6384                           
  6385                           ; BSR set to: 0
  6386  000954  A58C               	btfss	find_volume@stat& (0+255),2,b
  6387  000956  D002               	goto	l5678
  6388  000958                     u7350:
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6392  000958  0E0A               	movlw	10
  6393  00095A  0012               	return	
  6394  00095C                     l5678:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;ff.c: 2235:    return FR_OK;
  6398  00095C  0E00               	movlw	0
  6399  00095E  0012               	return	
  6400  000960                     l5682:
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;ff.c: 2242:  fs->fs_type = 0;
  6404  000960  C098  FFD9         	movff	find_volume@fs,fsr2l
  6405  000964  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6406  000968  0E00               	movlw	0
  6407  00096A  6EDF               	movwf	indf2,c
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6411  00096C  EE20 F001          	lfsr	2,1
  6412  000970  5198               	movf	find_volume@fs& (0+255),w,b
  6413  000972  26D9               	addwf	fsr2l,f,c
  6414  000974  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6415  000976  22DA               	addwfc	fsr2h,f,c
  6416  000978  C080  FFDF         	movff	find_volume@vol,indf2
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6420  00097C  EE20 F001          	lfsr	2,1
  6421  000980  5198               	movf	find_volume@fs& (0+255),w,b
  6422  000982  26D9               	addwf	fsr2l,f,c
  6423  000984  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6424  000986  22DA               	addwfc	fsr2h,f,c
  6425  000988  50DF               	movf	indf2,w,c
  6426  00098A  EC15  F01E         	call	_disk_initialize
  6427  00098E  0100               	movlb	0	; () banked
  6428  000990  6F8C               	movwf	find_volume@stat& (0+255),b
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;ff.c: 2245:  if (stat & 0x01)
  6432  000992  A18C               	btfss	find_volume@stat& (0+255),0,b
  6433  000994  D002               	goto	l5694
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;ff.c: 2246:   return FR_NOT_READY;
  6437  000996  0E03               	movlw	3
  6438  000998  0012               	return	
  6439  00099A                     l5694:
  6440                           
  6441                           ; BSR set to: 0
  6442  00099A  5049               	movf	find_volume@wmode,w,c
  6443  00099C  B4D8               	btfsc	status,2,c
  6444  00099E  D002               	goto	l5702
  6445                           
  6446                           ; BSR set to: 0
  6447  0009A0  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6448  0009A2  D7DA               	goto	u7350
  6449  0009A4                     l5702:
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;ff.c: 2254:  bsect = 0;
  6453  0009A4  0E00               	movlw	0
  6454  0009A6  6F91               	movwf	find_volume@bsect& (0+255),b
  6455  0009A8  0E00               	movlw	0
  6456  0009AA  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6457  0009AC  0E00               	movlw	0
  6458  0009AE  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6459  0009B0  0E00               	movlw	0
  6460  0009B2  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6464  0009B4  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6465  0009B8  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6466  0009BC  0E00               	movlw	0
  6467  0009BE  6E3D               	movwf	check_fs@sect,c
  6468  0009C0  0E00               	movlw	0
  6469  0009C2  6E3E               	movwf	check_fs@sect+1,c
  6470  0009C4  0E00               	movlw	0
  6471  0009C6  6E3F               	movwf	check_fs@sect+2,c
  6472  0009C8  0E00               	movlw	0
  6473  0009CA  6E40               	movwf	check_fs@sect+3,c
  6474  0009CC  ECE9  F024         	call	_check_fs	;wreg free
  6475  0009D0  0100               	movlb	0	; () banked
  6476  0009D2  6F97               	movwf	find_volume@fmt& (0+255),b
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6480  0009D4  0597               	decf	find_volume@fmt& (0+255),w,b
  6481  0009D6  A4D8               	btfss	status,2,c
  6482  0009D8  D0AE               	goto	u7450
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6486  0009DA  0E00               	movlw	0
  6487  0009DC  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6488  0009DE  0E00               	movlw	0
  6489  0009E0  6F95               	movwf	find_volume@i& (0+255),b
  6490  0009E2                     l5714:
  6491                           
  6492                           ; BSR set to: 0
  6493  0009E2  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6494  0009E4  E15A               	bnz	l5730
  6495  0009E6  0E04               	movlw	4
  6496  0009E8  5D95               	subwf	find_volume@i& (0+255),w,b
  6497  0009EA  B0D8               	btfsc	status,0,c
  6498  0009EC  D056               	goto	l5730
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6502  0009EE  C095  F04A         	movff	find_volume@i,??_find_volume
  6503  0009F2  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6504  0009F6  3A4A               	swapf	??_find_volume,f,c
  6505  0009F8  3A4B               	swapf	??_find_volume+1,f,c
  6506  0009FA  0EF0               	movlw	240
  6507  0009FC  164B               	andwf	??_find_volume+1,f,c
  6508  0009FE  504A               	movf	??_find_volume,w,c
  6509  000A00  0B0F               	andlw	15
  6510  000A02  124B               	iorwf	??_find_volume+1,f,c
  6511  000A04  0EF0               	movlw	240
  6512  000A06  164A               	andwf	??_find_volume,f,c
  6513  000A08  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6514  000A0C  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6515  000A10  504A               	movf	??_find_volume,w,c
  6516  000A12  264C               	addwf	??_find_volume+2,f,c
  6517  000A14  504B               	movf	??_find_volume+1,w,c
  6518  000A16  224D               	addwfc	??_find_volume+3,f,c
  6519  000A18  0EEC               	movlw	236
  6520  000A1A  244C               	addwf	??_find_volume+2,w,c
  6521  000A1C  6F7A               	movwf	find_volume@pt& (0+255),b
  6522  000A1E  0E01               	movlw	1
  6523  000A20  204D               	addwfc	??_find_volume+3,w,c
  6524  000A22  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6528  000A24  EE20 F004          	lfsr	2,4
  6529  000A28  517A               	movf	find_volume@pt& (0+255),w,b
  6530  000A2A  26D9               	addwf	fsr2l,f,c
  6531  000A2C  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6532  000A2E  22DA               	addwfc	fsr2h,f,c
  6533  000A30  50DF               	movf	indf2,w,c
  6534  000A32  A4D8               	btfss	status,2,c
  6535  000A34  D009               	goto	l5724
  6536                           
  6537                           ; BSR set to: 0
  6538  000A36  0E00               	movlw	0
  6539  000A38  6F70               	movwf	_find_volume$1006& (0+255),b
  6540  000A3A  0E00               	movlw	0
  6541  000A3C  6F71               	movwf	(_find_volume$1006+1)& (0+255),b
  6542  000A3E  0E00               	movlw	0
  6543  000A40  6F72               	movwf	(_find_volume$1006+2)& (0+255),b
  6544  000A42  0E00               	movlw	0
  6545  000A44  6F73               	movwf	(_find_volume$1006+3)& (0+255),b
  6546  000A46  D00E               	goto	l611
  6547  000A48                     l5724:
  6548                           
  6549                           ; BSR set to: 0
  6550  000A48  EE20 F008          	lfsr	2,8
  6551  000A4C  517A               	movf	find_volume@pt& (0+255),w,b
  6552  000A4E  26D9               	addwf	fsr2l,f,c
  6553  000A50  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6554  000A52  22DA               	addwfc	fsr2h,f,c
  6555  000A54  CFDE F070          	movff	postinc2,_find_volume$1006
  6556  000A58  CFDE F071          	movff	postinc2,_find_volume$1006+1
  6557  000A5C  CFDE F072          	movff	postinc2,_find_volume$1006+2
  6558  000A60  CFDE F073          	movff	postinc2,_find_volume$1006+3
  6559  000A64                     l611:
  6560                           
  6561                           ; BSR set to: 0
  6562  000A64  0E60               	movlw	low find_volume@br
  6563  000A66  6E4A               	movwf	??_find_volume& (0+255),c
  6564  000A68  0E00               	movlw	high find_volume@br
  6565  000A6A  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6566  000A6C  90D8               	bcf	status,0,c
  6567  000A6E  3595               	rlcf	find_volume@i& (0+255),w,b
  6568  000A70  6ED9               	movwf	fsr2l,c
  6569  000A72  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6570  000A74  6EDA               	movwf	fsr2h,c
  6571  000A76  90D8               	bcf	status,0,c
  6572  000A78  36D9               	rlcf	fsr2l,f,c
  6573  000A7A  36DA               	rlcf	fsr2h,f,c
  6574  000A7C  504A               	movf	??_find_volume,w,c
  6575  000A7E  26D9               	addwf	fsr2l,f,c
  6576  000A80  504B               	movf	??_find_volume+1,w,c
  6577  000A82  22DA               	addwfc	fsr2h,f,c
  6578  000A84  C070  FFDE         	movff	_find_volume$1006,postinc2
  6579  000A88  C071  FFDE         	movff	_find_volume$1006+1,postinc2
  6580  000A8C  C072  FFDE         	movff	_find_volume$1006+2,postinc2
  6581  000A90  C073  FFDE         	movff	_find_volume$1006+3,postinc2
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;ff.c: 2260:   }
  6585  000A94  4B95               	infsnz	find_volume@i& (0+255),f,b
  6586  000A96  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6587  000A98  D7A4               	goto	l5714
  6588  000A9A                     l5730:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;ff.c: 2261:   i = 0;
  6592  000A9A  0E00               	movlw	0
  6593  000A9C  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6594  000A9E  0E00               	movlw	0
  6595  000AA0  6F95               	movwf	find_volume@i& (0+255),b
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;ff.c: 2262:   if (i) i--;
  6599  000AA2  5195               	movf	find_volume@i& (0+255),w,b
  6600  000AA4  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6601  000AA6  B4D8               	btfsc	status,2,c
  6602  000AA8  D003               	goto	l5736
  6603                           
  6604                           ; BSR set to: 0
  6605  000AAA  0795               	decf	find_volume@i& (0+255),f,b
  6606  000AAC  A0D8               	btfss	status,0,c
  6607  000AAE  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6608  000AB0                     l5736:
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;ff.c: 2264:    bsect = br[i];
  6612  000AB0  0E60               	movlw	low find_volume@br
  6613  000AB2  6E4A               	movwf	??_find_volume& (0+255),c
  6614  000AB4  0E00               	movlw	high find_volume@br
  6615  000AB6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6616  000AB8  90D8               	bcf	status,0,c
  6617  000ABA  3595               	rlcf	find_volume@i& (0+255),w,b
  6618  000ABC  6ED9               	movwf	fsr2l,c
  6619  000ABE  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6620  000AC0  6EDA               	movwf	fsr2h,c
  6621  000AC2  90D8               	bcf	status,0,c
  6622  000AC4  36D9               	rlcf	fsr2l,f,c
  6623  000AC6  36DA               	rlcf	fsr2h,f,c
  6624  000AC8  504A               	movf	??_find_volume,w,c
  6625  000ACA  26D9               	addwf	fsr2l,f,c
  6626  000ACC  504B               	movf	??_find_volume+1,w,c
  6627  000ACE  22DA               	addwfc	fsr2h,f,c
  6628  000AD0  CFDE F091          	movff	postinc2,find_volume@bsect
  6629  000AD4  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6630  000AD8  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6631  000ADC  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6635  000AE0  5191               	movf	find_volume@bsect& (0+255),w,b
  6636  000AE2  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6637  000AE4  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6638  000AE6  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6639  000AE8  A4D8               	btfss	status,2,c
  6640  000AEA  D005               	goto	l5742
  6641                           
  6642                           ; BSR set to: 0
  6643  000AEC  0E00               	movlw	0
  6644  000AEE  6F75               	movwf	(_find_volume$1007+1)& (0+255),b
  6645  000AF0  0E02               	movlw	2
  6646  000AF2  6F74               	movwf	_find_volume$1007& (0+255),b
  6647  000AF4  D013               	goto	l5744
  6648  000AF6                     l5742:
  6649                           
  6650                           ; BSR set to: 0
  6651  000AF6  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6652  000AFA  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6653  000AFE  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6654  000B02  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6655  000B06  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6656  000B0A  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6657  000B0E  ECE9  F024         	call	_check_fs	;wreg free
  6658  000B12  6E4A               	movwf	??_find_volume& (0+255),c
  6659  000B14  504A               	movf	??_find_volume,w,c
  6660  000B16  0100               	movlb	0	; () banked
  6661  000B18  6F74               	movwf	_find_volume$1007& (0+255),b
  6662  000B1A  6B75               	clrf	(_find_volume$1007+1)& (0+255),b
  6663  000B1C                     l5744:
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6667  000B1C  C074  F097         	movff	_find_volume$1007,find_volume@fmt
  6668                           
  6669                           ; BSR set to: 0
  6670  000B20  5197               	movf	find_volume@fmt& (0+255),w,b
  6671  000B22  B4D8               	btfsc	status,2,c
  6672  000B24  D008               	goto	u7450
  6673                           
  6674                           ; BSR set to: 0
  6675  000B26  4B95               	infsnz	find_volume@i& (0+255),f,b
  6676  000B28  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6677  000B2A  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6678  000B2C  E104               	bnz	u7450
  6679  000B2E  0E04               	movlw	4
  6680  000B30  5D95               	subwf	find_volume@i& (0+255),w,b
  6681  000B32  A0D8               	btfss	status,0,c
  6682  000B34  D7BD               	goto	l5736
  6683  000B36                     u7450:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6687  000B36  0E03               	movlw	3
  6688  000B38  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6689  000B3A  A4D8               	btfss	status,2,c
  6690  000B3C  D002               	goto	l5756
  6691                           
  6692                           ; BSR set to: 0
  6693  000B3E  0E01               	movlw	1
  6694  000B40  0012               	return	
  6695  000B42                     l5756:
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6699  000B42  5197               	movf	find_volume@fmt& (0+255),w,b
  6700  000B44  B4D8               	btfsc	status,2,c
  6701  000B46  D002               	goto	l5762
  6702  000B48                     u7470:
  6703  000B48                     l5758:
  6704                           
  6705                           ; BSR set to: 0
  6706  000B48  0E0D               	movlw	13
  6707  000B4A  0012               	return	
  6708  000B4C                     l5762:
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6712  000B4C  EE20 F039          	lfsr	2,57
  6713  000B50  5198               	movf	find_volume@fs& (0+255),w,b
  6714  000B52  26D9               	addwf	fsr2l,f,c
  6715  000B54  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6716  000B56  22DA               	addwfc	fsr2h,f,c
  6717  000B58  50DE               	movf	postinc2,w,c
  6718  000B5A  E1F6               	bnz	l5758
  6719  000B5C  0E02               	movlw	2
  6720  000B5E  18DE               	xorwf	postinc2,w,c
  6721  000B60  A4D8               	btfss	status,2,c
  6722  000B62  D7F2               	goto	u7470
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6726  000B64  EE20 F044          	lfsr	2,68
  6727  000B68  5198               	movf	find_volume@fs& (0+255),w,b
  6728  000B6A  26D9               	addwf	fsr2l,f,c
  6729  000B6C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6730  000B6E  22DA               	addwfc	fsr2h,f,c
  6731  000B70  CFDE F04A          	movff	postinc2,??_find_volume
  6732  000B74  CFDD F04B          	movff	postdec2,??_find_volume+1
  6733  000B78  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6734  000B7C  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6735  000B80  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6736  000B82  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6740  000B84  518D               	movf	find_volume@fasize& (0+255),w,b
  6741  000B86  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6742  000B88  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6743  000B8A  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6744  000B8C  A4D8               	btfss	status,2,c
  6745  000B8E  D00E               	goto	l624
  6746                           
  6747                           ; BSR set to: 0
  6748  000B90  EE20 F052          	lfsr	2,82
  6749  000B94  5198               	movf	find_volume@fs& (0+255),w,b
  6750  000B96  26D9               	addwf	fsr2l,f,c
  6751  000B98  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6752  000B9A  22DA               	addwfc	fsr2h,f,c
  6753  000B9C  CFDE F08D          	movff	postinc2,find_volume@fasize
  6754  000BA0  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6755  000BA4  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6756  000BA8  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6757  000BAC                     l624:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;ff.c: 2278:  fs->fsize = fasize;
  6761  000BAC  EE20 F016          	lfsr	2,22
  6762  000BB0  5198               	movf	find_volume@fs& (0+255),w,b
  6763  000BB2  26D9               	addwf	fsr2l,f,c
  6764  000BB4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6765  000BB6  22DA               	addwfc	fsr2h,f,c
  6766  000BB8  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6767  000BBC  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6768  000BC0  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6769  000BC4  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6773  000BC8  EE20 F03E          	lfsr	2,62
  6774  000BCC  5198               	movf	find_volume@fs& (0+255),w,b
  6775  000BCE  26D9               	addwf	fsr2l,f,c
  6776  000BD0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6777  000BD2  22DA               	addwfc	fsr2h,f,c
  6778  000BD4  EE10 F003          	lfsr	1,3
  6779  000BD8  5198               	movf	find_volume@fs& (0+255),w,b
  6780  000BDA  26E1               	addwf	fsr1l,f,c
  6781  000BDC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6782  000BDE  22E2               	addwfc	fsr1h,f,c
  6783  000BE0  CFDF FFE7          	movff	indf2,indf1
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6787  000BE4  EE20 F003          	lfsr	2,3
  6788  000BE8  5198               	movf	find_volume@fs& (0+255),w,b
  6789  000BEA  26D9               	addwf	fsr2l,f,c
  6790  000BEC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6791  000BEE  22DA               	addwfc	fsr2h,f,c
  6792  000BF0  04DE               	decf	postinc2,w,c
  6793  000BF2  B4D8               	btfsc	status,2,c
  6794  000BF4  D00A               	goto	l5784
  6795                           
  6796                           ; BSR set to: 0
  6797  000BF6  EE20 F003          	lfsr	2,3
  6798  000BFA  5198               	movf	find_volume@fs& (0+255),w,b
  6799  000BFC  26D9               	addwf	fsr2l,f,c
  6800  000BFE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6801  000C00  22DA               	addwfc	fsr2h,f,c
  6802  000C02  0E02               	movlw	2
  6803  000C04  18DE               	xorwf	postinc2,w,c
  6804  000C06  A4D8               	btfss	status,2,c
  6805  000C08  D79F               	goto	u7470
  6806  000C0A                     l5784:
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6810  000C0A  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6811  000C0E  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6812  000C12  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6813  000C16  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6814  000C1A  EE20 F003          	lfsr	2,3
  6815  000C1E  5198               	movf	find_volume@fs& (0+255),w,b
  6816  000C20  26D9               	addwf	fsr2l,f,c
  6817  000C22  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6818  000C24  22DA               	addwfc	fsr2h,f,c
  6819  000C26  50DF               	movf	indf2,w,c
  6820  000C28  6E4A               	movwf	??_find_volume& (0+255),c
  6821  000C2A  504A               	movf	??_find_volume,w,c
  6822  000C2C  6E05               	movwf	___lmul@multiplicand,c
  6823  000C2E  6A06               	clrf	___lmul@multiplicand+1,c
  6824  000C30  6A07               	clrf	___lmul@multiplicand+2,c
  6825  000C32  6A08               	clrf	___lmul@multiplicand+3,c
  6826  000C34  ECEE  F029         	call	___lmul	;wreg free
  6827  000C38  C001  F08D         	movff	?___lmul,find_volume@fasize
  6828  000C3C  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6829  000C40  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6830  000C44  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6831                           
  6832                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6833  000C48  0100               	movlb	0	; () banked
  6834  000C4A  EE20 F03B          	lfsr	2,59
  6835  000C4E  5198               	movf	find_volume@fs& (0+255),w,b
  6836  000C50  26D9               	addwf	fsr2l,f,c
  6837  000C52  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6838  000C54  22DA               	addwfc	fsr2h,f,c
  6839  000C56  EE10 F002          	lfsr	1,2
  6840  000C5A  5198               	movf	find_volume@fs& (0+255),w,b
  6841  000C5C  26E1               	addwf	fsr1l,f,c
  6842  000C5E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6843  000C60  22E2               	addwfc	fsr1h,f,c
  6844  000C62  CFDF FFE7          	movff	indf2,indf1
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6848  000C66  EE20 F002          	lfsr	2,2
  6849  000C6A  5198               	movf	find_volume@fs& (0+255),w,b
  6850  000C6C  26D9               	addwf	fsr2l,f,c
  6851  000C6E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6852  000C70  22DA               	addwfc	fsr2h,f,c
  6853  000C72  50DF               	movf	indf2,w,c
  6854  000C74  B4D8               	btfsc	status,2,c
  6855  000C76  D768               	goto	u7470
  6856                           
  6857                           ; BSR set to: 0
  6858  000C78  0EFF               	movlw	255
  6859  000C7A  6E4A               	movwf	??_find_volume& (0+255),c
  6860  000C7C  0EFF               	movlw	255
  6861  000C7E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6862  000C80  EE20 F002          	lfsr	2,2
  6863  000C84  5198               	movf	find_volume@fs& (0+255),w,b
  6864  000C86  26D9               	addwf	fsr2l,f,c
  6865  000C88  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6866  000C8A  22DA               	addwfc	fsr2h,f,c
  6867  000C8C  50DF               	movf	indf2,w,c
  6868  000C8E  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6869  000C90  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6870  000C92  504A               	movf	??_find_volume,w,c
  6871  000C94  264C               	addwf	??_find_volume+2,f,c
  6872  000C96  504B               	movf	??_find_volume+1,w,c
  6873  000C98  224D               	addwfc	??_find_volume+3,f,c
  6874  000C9A  EE20 F002          	lfsr	2,2
  6875  000C9E  5198               	movf	find_volume@fs& (0+255),w,b
  6876  000CA0  26D9               	addwf	fsr2l,f,c
  6877  000CA2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6878  000CA4  22DA               	addwfc	fsr2h,f,c
  6879  000CA6  50DF               	movf	indf2,w,c
  6880  000CA8  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6881  000CAA  504E               	movf	??_find_volume+4,w,c
  6882  000CAC  164C               	andwf	??_find_volume+2,f,c
  6883  000CAE  0E00               	movlw	0
  6884  000CB0  164D               	andwf	??_find_volume+3,f,c
  6885  000CB2  504C               	movf	??_find_volume+2,w,c
  6886  000CB4  104D               	iorwf	??_find_volume+3,w,c
  6887  000CB6  A4D8               	btfss	status,2,c
  6888  000CB8  D747               	goto	u7470
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6892  000CBA  EE20 F03F          	lfsr	2,63
  6893  000CBE  5198               	movf	find_volume@fs& (0+255),w,b
  6894  000CC0  26D9               	addwf	fsr2l,f,c
  6895  000CC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6896  000CC4  22DA               	addwfc	fsr2h,f,c
  6897  000CC6  EE10 F008          	lfsr	1,8
  6898  000CCA  5198               	movf	find_volume@fs& (0+255),w,b
  6899  000CCC  26E1               	addwf	fsr1l,f,c
  6900  000CCE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6901  000CD0  22E2               	addwfc	fsr1h,f,c
  6902  000CD2  CFDE FFE6          	movff	postinc2,postinc1
  6903  000CD6  CFDD FFE5          	movff	postdec2,postdec1
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6907  000CDA  EE20 F008          	lfsr	2,8
  6908  000CDE  5198               	movf	find_volume@fs& (0+255),w,b
  6909  000CE0  26D9               	addwf	fsr2l,f,c
  6910  000CE2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6911  000CE4  22DA               	addwfc	fsr2h,f,c
  6912  000CE6  CFDE F04A          	movff	postinc2,??_find_volume
  6913  000CEA  CFDD F04B          	movff	postdec2,??_find_volume+1
  6914  000CEE  0E0F               	movlw	15
  6915  000CF0  164A               	andwf	??_find_volume,f,c
  6916  000CF2  0E00               	movlw	0
  6917  000CF4  164B               	andwf	??_find_volume+1,f,c
  6918  000CF6  504A               	movf	??_find_volume,w,c
  6919  000CF8  104B               	iorwf	??_find_volume+1,w,c
  6920  000CFA  A4D8               	btfss	status,2,c
  6921  000CFC  D725               	goto	u7470
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6925  000CFE  EE20 F041          	lfsr	2,65
  6926  000D02  5198               	movf	find_volume@fs& (0+255),w,b
  6927  000D04  26D9               	addwf	fsr2l,f,c
  6928  000D06  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6929  000D08  22DA               	addwfc	fsr2h,f,c
  6930  000D0A  CFDE F04A          	movff	postinc2,??_find_volume
  6931  000D0E  CFDD F04B          	movff	postdec2,??_find_volume+1
  6932  000D12  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6933  000D16  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6934  000D1A  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6935  000D1C  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6939  000D1E  5184               	movf	find_volume@tsect& (0+255),w,b
  6940  000D20  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6941  000D22  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6942  000D24  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6943  000D26  A4D8               	btfss	status,2,c
  6944  000D28  D00E               	goto	l630
  6945                           
  6946                           ; BSR set to: 0
  6947  000D2A  EE20 F04E          	lfsr	2,78
  6948  000D2E  5198               	movf	find_volume@fs& (0+255),w,b
  6949  000D30  26D9               	addwf	fsr2l,f,c
  6950  000D32  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6951  000D34  22DA               	addwfc	fsr2h,f,c
  6952  000D36  CFDE F084          	movff	postinc2,find_volume@tsect
  6953  000D3A  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6954  000D3E  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6955  000D42  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6956  000D46                     l630:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6960  000D46  EE20 F03C          	lfsr	2,60
  6961  000D4A  5198               	movf	find_volume@fs& (0+255),w,b
  6962  000D4C  26D9               	addwf	fsr2l,f,c
  6963  000D4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6964  000D50  22DA               	addwfc	fsr2h,f,c
  6965  000D52  CFDE F082          	movff	postinc2,find_volume@nrsv
  6966  000D56  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6970  000D5A  5182               	movf	find_volume@nrsv& (0+255),w,b
  6971  000D5C  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6972  000D5E  B4D8               	btfsc	status,2,c
  6973  000D60  D6F3               	goto	u7470
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6977  000D62  EE20 F008          	lfsr	2,8
  6978  000D66  5198               	movf	find_volume@fs& (0+255),w,b
  6979  000D68  26D9               	addwf	fsr2l,f,c
  6980  000D6A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6981  000D6C  22DA               	addwfc	fsr2h,f,c
  6982  000D6E  CFDE F04A          	movff	postinc2,??_find_volume
  6983  000D72  CFDD F04B          	movff	postdec2,??_find_volume+1
  6984  000D76  0E04               	movlw	4
  6985  000D78  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6986  000D7A                     u7575:
  6987  000D7A  90D8               	bcf	status,0,c
  6988  000D7C  324B               	rrcf	??_find_volume+1,f,c
  6989  000D7E  324A               	rrcf	??_find_volume,f,c
  6990  000D80  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6991  000D82  D7FB               	goto	u7575
  6992  000D84  5182               	movf	find_volume@nrsv& (0+255),w,b
  6993  000D86  244A               	addwf	??_find_volume,w,c
  6994  000D88  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6995  000D8A  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6996  000D8C  204B               	addwfc	??_find_volume+1,w,c
  6997  000D8E  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6998  000D90  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6999  000D92  B0D8               	btfsc	status,0,c
  7000  000D94  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  7001  000D96  6A50               	clrf	(??_find_volume+6)& (0+255),c
  7002  000D98  518D               	movf	find_volume@fasize& (0+255),w,b
  7003  000D9A  244D               	addwf	??_find_volume+3,w,c
  7004  000D9C  6F7C               	movwf	find_volume@sysect& (0+255),b
  7005  000D9E  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7006  000DA0  204E               	addwfc	??_find_volume+4,w,c
  7007  000DA2  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  7008  000DA4  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7009  000DA6  204F               	addwfc	??_find_volume+5,w,c
  7010  000DA8  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  7011  000DAA  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7012  000DAC  2050               	addwfc	??_find_volume+6,w,c
  7013  000DAE  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  7017  000DB0  517C               	movf	find_volume@sysect& (0+255),w,b
  7018  000DB2  5D84               	subwf	find_volume@tsect& (0+255),w,b
  7019  000DB4  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  7020  000DB6  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  7021  000DB8  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  7022  000DBA  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  7023  000DBC  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  7024  000DBE  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  7025  000DC0  A0D8               	btfss	status,0,c
  7026  000DC2  D6C2               	goto	u7470
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  7030  000DC4  517C               	movf	find_volume@sysect& (0+255),w,b
  7031  000DC6  5D84               	subwf	find_volume@tsect& (0+255),w,b
  7032  000DC8  6E01               	movwf	___lldiv@dividend,c
  7033  000DCA  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  7034  000DCC  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  7035  000DCE  6E02               	movwf	___lldiv@dividend+1,c
  7036  000DD0  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  7037  000DD2  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  7038  000DD4  6E03               	movwf	___lldiv@dividend+2,c
  7039  000DD6  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  7040  000DD8  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  7041  000DDA  6E04               	movwf	___lldiv@dividend+3,c
  7042  000DDC  EE20 F002          	lfsr	2,2
  7043  000DE0  5198               	movf	find_volume@fs& (0+255),w,b
  7044  000DE2  26D9               	addwf	fsr2l,f,c
  7045  000DE4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7046  000DE6  22DA               	addwfc	fsr2h,f,c
  7047  000DE8  50DF               	movf	indf2,w,c
  7048  000DEA  6E4A               	movwf	??_find_volume& (0+255),c
  7049  000DEC  504A               	movf	??_find_volume,w,c
  7050  000DEE  6E05               	movwf	___lldiv@divisor,c
  7051  000DF0  6A06               	clrf	___lldiv@divisor+1,c
  7052  000DF2  6A07               	clrf	___lldiv@divisor+2,c
  7053  000DF4  6A08               	clrf	___lldiv@divisor+3,c
  7054  000DF6  EC4E  F028         	call	___lldiv	;wreg free
  7055  000DFA  C001  F088         	movff	?___lldiv,find_volume@nclst
  7056  000DFE  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  7057  000E02  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  7058  000E06  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  7059                           
  7060                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  7061  000E0A  0100               	movlb	0	; () banked
  7062  000E0C  5188               	movf	find_volume@nclst& (0+255),w,b
  7063  000E0E  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  7064  000E10  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  7065  000E12  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  7066  000E14  B4D8               	btfsc	status,2,c
  7067  000E16  D698               	goto	u7470
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;ff.c: 2304:  fmt = 1;
  7071  000E18  0E01               	movlw	1
  7072  000E1A  6F97               	movwf	find_volume@fmt& (0+255),b
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  7076  000E1C  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  7077  000E1E  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  7078  000E20  E106               	bnz	u7600
  7079  000E22  0EF6               	movlw	246
  7080  000E24  5D88               	subwf	find_volume@nclst& (0+255),w,b
  7081  000E26  0E0F               	movlw	15
  7082  000E28  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  7083  000E2A  A0D8               	btfss	status,0,c
  7084  000E2C  D002               	goto	l5838
  7085  000E2E                     u7600:
  7086                           
  7087                           ; BSR set to: 0
  7088  000E2E  0E02               	movlw	2
  7089  000E30  6F97               	movwf	find_volume@fmt& (0+255),b
  7090  000E32                     l5838:
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  7094  000E32  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  7095  000E34  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  7096  000E36  E106               	bnz	u7610
  7097  000E38  0EF6               	movlw	246
  7098  000E3A  5D88               	subwf	find_volume@nclst& (0+255),w,b
  7099  000E3C  0EFF               	movlw	255
  7100  000E3E  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  7101  000E40  A0D8               	btfss	status,0,c
  7102  000E42  D002               	goto	l5842
  7103  000E44                     u7610:
  7104                           
  7105                           ; BSR set to: 0
  7106  000E44  0E03               	movlw	3
  7107  000E46  6F97               	movwf	find_volume@fmt& (0+255),b
  7108  000E48                     l5842:
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  7112  000E48  0E02               	movlw	2
  7113  000E4A  2588               	addwf	find_volume@nclst& (0+255),w,b
  7114  000E4C  6E4A               	movwf	??_find_volume& (0+255),c
  7115  000E4E  0E00               	movlw	0
  7116  000E50  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  7117  000E52  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7118  000E54  0E00               	movlw	0
  7119  000E56  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  7120  000E58  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7121  000E5A  0E00               	movlw	0
  7122  000E5C  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  7123  000E5E  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7124  000E60  EE20 F012          	lfsr	2,18
  7125  000E64  5198               	movf	find_volume@fs& (0+255),w,b
  7126  000E66  26D9               	addwf	fsr2l,f,c
  7127  000E68  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7128  000E6A  22DA               	addwfc	fsr2h,f,c
  7129  000E6C  C04A  FFDE         	movff	??_find_volume,postinc2
  7130  000E70  C04B  FFDE         	movff	??_find_volume+1,postinc2
  7131  000E74  C04C  FFDE         	movff	??_find_volume+2,postinc2
  7132  000E78  C04D  FFDE         	movff	??_find_volume+3,postinc2
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;ff.c: 2310:  fs->volbase = bsect;
  7136  000E7C  EE20 F01A          	lfsr	2,26
  7137  000E80  5198               	movf	find_volume@fs& (0+255),w,b
  7138  000E82  26D9               	addwf	fsr2l,f,c
  7139  000E84  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7140  000E86  22DA               	addwfc	fsr2h,f,c
  7141  000E88  C091  FFDE         	movff	find_volume@bsect,postinc2
  7142  000E8C  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  7143  000E90  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  7144  000E94  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  7148  000E98  5182               	movf	find_volume@nrsv& (0+255),w,b
  7149  000E9A  2591               	addwf	find_volume@bsect& (0+255),w,b
  7150  000E9C  6E4A               	movwf	??_find_volume& (0+255),c
  7151  000E9E  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  7152  000EA0  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7153  000EA2  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7154  000EA4  0E00               	movlw	0
  7155  000EA6  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7156  000EA8  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7157  000EAA  0E00               	movlw	0
  7158  000EAC  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7159  000EAE  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7160  000EB0  EE20 F01E          	lfsr	2,30
  7161  000EB4  5198               	movf	find_volume@fs& (0+255),w,b
  7162  000EB6  26D9               	addwf	fsr2l,f,c
  7163  000EB8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7164  000EBA  22DA               	addwfc	fsr2h,f,c
  7165  000EBC  C04A  FFDE         	movff	??_find_volume,postinc2
  7166  000EC0  C04B  FFDE         	movff	??_find_volume+1,postinc2
  7167  000EC4  C04C  FFDE         	movff	??_find_volume+2,postinc2
  7168  000EC8  C04D  FFDE         	movff	??_find_volume+3,postinc2
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;ff.c: 2312:  fs->database = bsect + sysect;
  7172  000ECC  517C               	movf	find_volume@sysect& (0+255),w,b
  7173  000ECE  2591               	addwf	find_volume@bsect& (0+255),w,b
  7174  000ED0  6E4A               	movwf	??_find_volume& (0+255),c
  7175  000ED2  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  7176  000ED4  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7177  000ED6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7178  000ED8  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  7179  000EDA  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7180  000EDC  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7181  000EDE  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  7182  000EE0  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7183  000EE2  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7184  000EE4  EE20 F026          	lfsr	2,38
  7185  000EE8  5198               	movf	find_volume@fs& (0+255),w,b
  7186  000EEA  26D9               	addwf	fsr2l,f,c
  7187  000EEC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7188  000EEE  22DA               	addwfc	fsr2h,f,c
  7189  000EF0  C04A  FFDE         	movff	??_find_volume,postinc2
  7190  000EF4  C04B  FFDE         	movff	??_find_volume+1,postinc2
  7191  000EF8  C04C  FFDE         	movff	??_find_volume+2,postinc2
  7192  000EFC  C04D  FFDE         	movff	??_find_volume+3,postinc2
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;ff.c: 2313:  if (fmt == 3) {
  7196  000F00  0E03               	movlw	3
  7197  000F02  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7198  000F04  A4D8               	btfss	status,2,c
  7199  000F06  D03D               	goto	l5862
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  7203  000F08  EE20 F008          	lfsr	2,8
  7204  000F0C  5198               	movf	find_volume@fs& (0+255),w,b
  7205  000F0E  26D9               	addwf	fsr2l,f,c
  7206  000F10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7207  000F12  22DA               	addwfc	fsr2h,f,c
  7208  000F14  50DE               	movf	postinc2,w,c
  7209  000F16  10DE               	iorwf	postinc2,w,c
  7210  000F18  A4D8               	btfss	status,2,c
  7211  000F1A  D616               	goto	u7470
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  7215  000F1C  EE20 F05A          	lfsr	2,90
  7216  000F20  5198               	movf	find_volume@fs& (0+255),w,b
  7217  000F22  26D9               	addwf	fsr2l,f,c
  7218  000F24  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7219  000F26  22DA               	addwfc	fsr2h,f,c
  7220  000F28  EE10 F022          	lfsr	1,34
  7221  000F2C  5198               	movf	find_volume@fs& (0+255),w,b
  7222  000F2E  26E1               	addwf	fsr1l,f,c
  7223  000F30  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7224  000F32  22E2               	addwfc	fsr1h,f,c
  7225  000F34  CFDE FFE6          	movff	postinc2,postinc1
  7226  000F38  CFDE FFE6          	movff	postinc2,postinc1
  7227  000F3C  CFDE FFE6          	movff	postinc2,postinc1
  7228  000F40  CFDE FFE6          	movff	postinc2,postinc1
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  7232  000F44  EE20 F012          	lfsr	2,18
  7233  000F48  5198               	movf	find_volume@fs& (0+255),w,b
  7234  000F4A  26D9               	addwf	fsr2l,f,c
  7235  000F4C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7236  000F4E  22DA               	addwfc	fsr2h,f,c
  7237  000F50  CFDE F04A          	movff	postinc2,??_find_volume
  7238  000F54  CFDE F04B          	movff	postinc2,??_find_volume+1
  7239  000F58  CFDE F04C          	movff	postinc2,??_find_volume+2
  7240  000F5C  CFDE F04D          	movff	postinc2,??_find_volume+3
  7241  000F60  0E02               	movlw	2
  7242  000F62                     u7645:
  7243  000F62  90D8               	bcf	status,0,c
  7244  000F64  364A               	rlcf	??_find_volume,f,c
  7245  000F66  364B               	rlcf	??_find_volume+1,f,c
  7246  000F68  364C               	rlcf	??_find_volume+2,f,c
  7247  000F6A  364D               	rlcf	??_find_volume+3,f,c
  7248  000F6C  2EE8               	decfsz	wreg,f,c
  7249  000F6E  D7F9               	goto	u7645
  7250  000F70  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  7251  000F74  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  7252  000F78  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  7253  000F7C  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  7254                           
  7255                           ;ff.c: 2317:  } else {
  7256  000F80  D091               	goto	l638
  7257  000F82                     l5862:
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  7261  000F82  EE20 F008          	lfsr	2,8
  7262  000F86  5198               	movf	find_volume@fs& (0+255),w,b
  7263  000F88  26D9               	addwf	fsr2l,f,c
  7264  000F8A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7265  000F8C  22DA               	addwfc	fsr2h,f,c
  7266  000F8E  50DE               	movf	postinc2,w,c
  7267  000F90  10DE               	iorwf	postinc2,w,c
  7268  000F92  B4D8               	btfsc	status,2,c
  7269  000F94  D5D9               	goto	u7470
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  7273  000F96  EE20 F01E          	lfsr	2,30
  7274  000F9A  5198               	movf	find_volume@fs& (0+255),w,b
  7275  000F9C  26D9               	addwf	fsr2l,f,c
  7276  000F9E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7277  000FA0  22DA               	addwfc	fsr2h,f,c
  7278  000FA2  CFDE F04A          	movff	postinc2,??_find_volume
  7279  000FA6  CFDE F04B          	movff	postinc2,??_find_volume+1
  7280  000FAA  CFDE F04C          	movff	postinc2,??_find_volume+2
  7281  000FAE  CFDE F04D          	movff	postinc2,??_find_volume+3
  7282  000FB2  518D               	movf	find_volume@fasize& (0+255),w,b
  7283  000FB4  244A               	addwf	??_find_volume,w,c
  7284  000FB6  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7285  000FB8  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7286  000FBA  204B               	addwfc	??_find_volume+1,w,c
  7287  000FBC  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7288  000FBE  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7289  000FC0  204C               	addwfc	??_find_volume+2,w,c
  7290  000FC2  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7291  000FC4  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7292  000FC6  204D               	addwfc	??_find_volume+3,w,c
  7293  000FC8  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7294  000FCA  EE20 F022          	lfsr	2,34
  7295  000FCE  5198               	movf	find_volume@fs& (0+255),w,b
  7296  000FD0  26D9               	addwf	fsr2l,f,c
  7297  000FD2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7298  000FD4  22DA               	addwfc	fsr2h,f,c
  7299  000FD6  C04E  FFDE         	movff	??_find_volume+4,postinc2
  7300  000FDA  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7301  000FDE  C050  FFDE         	movff	??_find_volume+6,postinc2
  7302  000FE2  C051  FFDE         	movff	??_find_volume+7,postinc2
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7306  000FE6  0E02               	movlw	2
  7307  000FE8  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7308  000FEA  B4D8               	btfsc	status,2,c
  7309  000FEC  D044               	goto	l5874
  7310                           
  7311                           ; BSR set to: 0
  7312  000FEE  EE20 F012          	lfsr	2,18
  7313  000FF2  5198               	movf	find_volume@fs& (0+255),w,b
  7314  000FF4  26D9               	addwf	fsr2l,f,c
  7315  000FF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7316  000FF8  22DA               	addwfc	fsr2h,f,c
  7317  000FFA  CFDE F04A          	movff	postinc2,??_find_volume
  7318  000FFE  CFDE F04B          	movff	postinc2,??_find_volume+1
  7319  001002  CFDE F04C          	movff	postinc2,??_find_volume+2
  7320  001006  CFDE F04D          	movff	postinc2,??_find_volume+3
  7321  00100A  0E01               	movlw	1
  7322  00100C  144A               	andwf	??_find_volume,w,c
  7323  00100E  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7324  001010  0E00               	movlw	0
  7325  001012  144B               	andwf	??_find_volume+1,w,c
  7326  001014  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7327  001016  0E00               	movlw	0
  7328  001018  144C               	andwf	??_find_volume+2,w,c
  7329  00101A  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7330  00101C  0E00               	movlw	0
  7331  00101E  144D               	andwf	??_find_volume+3,w,c
  7332  001020  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7333  001022  EE20 F012          	lfsr	2,18
  7334  001026  5198               	movf	find_volume@fs& (0+255),w,b
  7335  001028  26D9               	addwf	fsr2l,f,c
  7336  00102A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7337  00102C  22DA               	addwfc	fsr2h,f,c
  7338  00102E  CFDE F001          	movff	postinc2,___lmul@multiplier
  7339  001032  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7340  001036  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7341  00103A  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7342  00103E  0E03               	movlw	3
  7343  001040  6E05               	movwf	___lmul@multiplicand,c
  7344  001042  0E00               	movlw	0
  7345  001044  6E06               	movwf	___lmul@multiplicand+1,c
  7346  001046  0E00               	movlw	0
  7347  001048  6E07               	movwf	___lmul@multiplicand+2,c
  7348  00104A  0E00               	movlw	0
  7349  00104C  6E08               	movwf	___lmul@multiplicand+3,c
  7350  00104E  ECEE  F029         	call	___lmul	;wreg free
  7351  001052  90D8               	bcf	status,0,c
  7352  001054  3204               	rrcf	?___lmul+3,f,c
  7353  001056  3203               	rrcf	?___lmul+2,f,c
  7354  001058  3202               	rrcf	?___lmul+1,f,c
  7355  00105A  3201               	rrcf	?___lmul,f,c
  7356  00105C  504E               	movf	??_find_volume+4,w,c
  7357  00105E  2401               	addwf	?___lmul,w,c
  7358  001060  0100               	movlb	0	; () banked
  7359  001062  6F76               	movwf	find_volume@szbfat& (0+255),b
  7360  001064  504F               	movf	??_find_volume+5,w,c
  7361  001066  2002               	addwfc	?___lmul+1,w,c
  7362  001068  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7363  00106A  5050               	movf	??_find_volume+6,w,c
  7364  00106C  2003               	addwfc	?___lmul+2,w,c
  7365  00106E  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7366  001070  5051               	movf	??_find_volume+7,w,c
  7367  001072  2004               	addwfc	?___lmul+3,w,c
  7368  001074  D016               	goto	L6
  7369  001076                     l5874:
  7370                           
  7371                           ; BSR set to: 0
  7372  001076  EE20 F012          	lfsr	2,18
  7373  00107A  5198               	movf	find_volume@fs& (0+255),w,b
  7374  00107C  26D9               	addwf	fsr2l,f,c
  7375  00107E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7376  001080  22DA               	addwfc	fsr2h,f,c
  7377  001082  CFDE F04A          	movff	postinc2,??_find_volume
  7378  001086  CFDE F04B          	movff	postinc2,??_find_volume+1
  7379  00108A  CFDE F04C          	movff	postinc2,??_find_volume+2
  7380  00108E  CFDE F04D          	movff	postinc2,??_find_volume+3
  7381  001092  90D8               	bcf	status,0,c
  7382  001094  344A               	rlcf	??_find_volume,w,c
  7383  001096  6F76               	movwf	find_volume@szbfat& (0+255),b
  7384  001098  344B               	rlcf	??_find_volume+1,w,c
  7385  00109A  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7386  00109C  344C               	rlcf	??_find_volume+2,w,c
  7387  00109E  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7388  0010A0  344D               	rlcf	??_find_volume+3,w,c
  7389  0010A2                     L6:
  7390  0010A2  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7391  0010A4                     l638:
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7395  0010A4  0EFF               	movlw	255
  7396  0010A6  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7397  0010A8  6E4A               	movwf	??_find_volume& (0+255),c
  7398  0010AA  0E01               	movlw	1
  7399  0010AC  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7400  0010AE  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7401  0010B0  0E00               	movlw	0
  7402  0010B2  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7403  0010B4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7404  0010B6  0E00               	movlw	0
  7405  0010B8  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7406  0010BA  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7407  0010BC  0E0A               	movlw	10
  7408  0010BE  D005               	goto	u7670
  7409  0010C0                     u7675:
  7410  0010C0  90D8               	bcf	status,0,c
  7411  0010C2  324D               	rrcf	??_find_volume+3,f,c
  7412  0010C4  324C               	rrcf	??_find_volume+2,f,c
  7413  0010C6  324B               	rrcf	??_find_volume+1,f,c
  7414  0010C8  324A               	rrcf	??_find_volume,f,c
  7415  0010CA                     u7670:
  7416  0010CA  2EE8               	decfsz	wreg,f,c
  7417  0010CC  D7F9               	goto	u7675
  7418  0010CE  EE20 F016          	lfsr	2,22
  7419  0010D2  5198               	movf	find_volume@fs& (0+255),w,b
  7420  0010D4  26D9               	addwf	fsr2l,f,c
  7421  0010D6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7422  0010D8  22DA               	addwfc	fsr2h,f,c
  7423  0010DA  504A               	movf	??_find_volume,w,c
  7424  0010DC  5CDE               	subwf	postinc2,w,c
  7425  0010DE  504B               	movf	??_find_volume+1,w,c
  7426  0010E0  58DE               	subwfb	postinc2,w,c
  7427  0010E2  504C               	movf	??_find_volume+2,w,c
  7428  0010E4  58DE               	subwfb	postinc2,w,c
  7429  0010E6  504D               	movf	??_find_volume+3,w,c
  7430  0010E8  58DE               	subwfb	postinc2,w,c
  7431  0010EA  A0D8               	btfss	status,0,c
  7432  0010EC  D52D               	goto	u7470
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7436  0010EE  EE20 F00E          	lfsr	2,14
  7437  0010F2  5198               	movf	find_volume@fs& (0+255),w,b
  7438  0010F4  26D9               	addwf	fsr2l,f,c
  7439  0010F6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7440  0010F8  22DA               	addwfc	fsr2h,f,c
  7441  0010FA  0EFF               	movlw	255
  7442  0010FC  6EDE               	movwf	postinc2,c
  7443  0010FE  0EFF               	movlw	255
  7444  001100  6EDE               	movwf	postinc2,c
  7445  001102  0EFF               	movlw	255
  7446  001104  6EDE               	movwf	postinc2,c
  7447  001106  0EFF               	movlw	255
  7448  001108  6EDD               	movwf	postdec2,c
  7449  00110A  52DD               	movf	postdec2,f,c
  7450  00110C  52DD               	movf	postdec2,f,c
  7451  00110E  EE10 F00A          	lfsr	1,10
  7452  001112  5198               	movf	find_volume@fs& (0+255),w,b
  7453  001114  26E1               	addwf	fsr1l,f,c
  7454  001116  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7455  001118  22E2               	addwfc	fsr1h,f,c
  7456  00111A  CFDE FFE6          	movff	postinc2,postinc1
  7457  00111E  CFDE FFE6          	movff	postinc2,postinc1
  7458  001122  CFDE FFE6          	movff	postinc2,postinc1
  7459  001126  CFDE FFE6          	movff	postinc2,postinc1
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7463  00112A  EE20 F005          	lfsr	2,5
  7464  00112E  5198               	movf	find_volume@fs& (0+255),w,b
  7465  001130  26D9               	addwf	fsr2l,f,c
  7466  001132  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7467  001134  22DA               	addwfc	fsr2h,f,c
  7468  001136  0E80               	movlw	128
  7469  001138  6EDF               	movwf	indf2,c
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;ff.c: 2333:  if (fmt == 3
  7473  00113A  0E03               	movlw	3
  7474  00113C  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7475  00113E  A4D8               	btfss	status,2,c
  7476  001140  D083               	goto	l5898
  7477                           
  7478                           ; BSR set to: 0
  7479  001142  EE20 F05E          	lfsr	2,94
  7480  001146  5198               	movf	find_volume@fs& (0+255),w,b
  7481  001148  26D9               	addwf	fsr2l,f,c
  7482  00114A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7483  00114C  22DA               	addwfc	fsr2h,f,c
  7484  00114E  04DE               	decf	postinc2,w,c
  7485  001150  10DE               	iorwf	postinc2,w,c
  7486  001152  A4D8               	btfss	status,2,c
  7487  001154  D079               	goto	l5898
  7488                           
  7489                           ; BSR set to: 0
  7490  001156  C098  F030         	movff	find_volume@fs,move_window@fs
  7491  00115A  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7492  00115E  0E01               	movlw	1
  7493  001160  2591               	addwf	find_volume@bsect& (0+255),w,b
  7494  001162  6E32               	movwf	move_window@sector,c
  7495  001164  0E00               	movlw	0
  7496  001166  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7497  001168  6E33               	movwf	move_window@sector+1,c
  7498  00116A  0E00               	movlw	0
  7499  00116C  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7500  00116E  6E34               	movwf	move_window@sector+2,c
  7501  001170  0E00               	movlw	0
  7502  001172  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7503  001174  6E35               	movwf	move_window@sector+3,c
  7504  001176  ECB1  F027         	call	_move_window	;wreg free
  7505  00117A  0900               	iorlw	0
  7506  00117C  A4D8               	btfss	status,2,c
  7507  00117E  D064               	goto	l5898
  7508                           
  7509                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7510  001180  0100               	movlb	0	; () banked
  7511  001182  EE20 F005          	lfsr	2,5
  7512  001186  5198               	movf	find_volume@fs& (0+255),w,b
  7513  001188  26D9               	addwf	fsr2l,f,c
  7514  00118A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7515  00118C  22DA               	addwfc	fsr2h,f,c
  7516  00118E  0E00               	movlw	0
  7517  001190  6EDF               	movwf	indf2,c
  7518                           
  7519                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7520  001192  EE22 F02C          	lfsr	2,556
  7521  001196  5198               	movf	find_volume@fs& (0+255),w,b
  7522  001198  26D9               	addwf	fsr2l,f,c
  7523  00119A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7524  00119C  22DA               	addwfc	fsr2h,f,c
  7525  00119E  0E55               	movlw	85
  7526  0011A0  18DE               	xorwf	postinc2,w,c
  7527  0011A2  E152               	bnz	l5898
  7528  0011A4  0EAA               	movlw	170
  7529  0011A6  18DE               	xorwf	postinc2,w,c
  7530  0011A8  A4D8               	btfss	status,2,c
  7531  0011AA  D04E               	goto	l5898
  7532                           
  7533                           ; BSR set to: 0
  7534  0011AC  EE20 F02E          	lfsr	2,46
  7535  0011B0  5198               	movf	find_volume@fs& (0+255),w,b
  7536  0011B2  26D9               	addwf	fsr2l,f,c
  7537  0011B4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7538  0011B6  22DA               	addwfc	fsr2h,f,c
  7539  0011B8  0E52               	movlw	82
  7540  0011BA  18DE               	xorwf	postinc2,w,c
  7541  0011BC  E145               	bnz	l5898
  7542  0011BE  0E52               	movlw	82
  7543  0011C0  18DE               	xorwf	postinc2,w,c
  7544  0011C2  E142               	bnz	l5898
  7545  0011C4  0E61               	movlw	97
  7546  0011C6  18DE               	xorwf	postinc2,w,c
  7547  0011C8  E13F               	bnz	l5898
  7548  0011CA  0E41               	movlw	65
  7549  0011CC  18DE               	xorwf	postinc2,w,c
  7550  0011CE  A4D8               	btfss	status,2,c
  7551  0011D0  D03B               	goto	l5898
  7552                           
  7553                           ; BSR set to: 0
  7554  0011D2  EE22 F012          	lfsr	2,530
  7555  0011D6  5198               	movf	find_volume@fs& (0+255),w,b
  7556  0011D8  26D9               	addwf	fsr2l,f,c
  7557  0011DA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7558  0011DC  22DA               	addwfc	fsr2h,f,c
  7559  0011DE  0E72               	movlw	114
  7560  0011E0  18DE               	xorwf	postinc2,w,c
  7561  0011E2  E132               	bnz	l5898
  7562  0011E4  0E72               	movlw	114
  7563  0011E6  18DE               	xorwf	postinc2,w,c
  7564  0011E8  E12F               	bnz	l5898
  7565  0011EA  0E41               	movlw	65
  7566  0011EC  18DE               	xorwf	postinc2,w,c
  7567  0011EE  E12C               	bnz	l5898
  7568  0011F0  0E61               	movlw	97
  7569  0011F2  18DE               	xorwf	postinc2,w,c
  7570  0011F4  A4D8               	btfss	status,2,c
  7571  0011F6  D028               	goto	l5898
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7575  0011F8  EE22 F016          	lfsr	2,534
  7576  0011FC  5198               	movf	find_volume@fs& (0+255),w,b
  7577  0011FE  26D9               	addwf	fsr2l,f,c
  7578  001200  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7579  001202  22DA               	addwfc	fsr2h,f,c
  7580  001204  EE10 F00E          	lfsr	1,14
  7581  001208  5198               	movf	find_volume@fs& (0+255),w,b
  7582  00120A  26E1               	addwf	fsr1l,f,c
  7583  00120C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7584  00120E  22E2               	addwfc	fsr1h,f,c
  7585  001210  CFDE FFE6          	movff	postinc2,postinc1
  7586  001214  CFDE FFE6          	movff	postinc2,postinc1
  7587  001218  CFDE FFE6          	movff	postinc2,postinc1
  7588  00121C  CFDE FFE6          	movff	postinc2,postinc1
  7589                           
  7590                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7591  001220  EE22 F01A          	lfsr	2,538
  7592  001224  5198               	movf	find_volume@fs& (0+255),w,b
  7593  001226  26D9               	addwf	fsr2l,f,c
  7594  001228  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7595  00122A  22DA               	addwfc	fsr2h,f,c
  7596  00122C  EE10 F00A          	lfsr	1,10
  7597  001230  5198               	movf	find_volume@fs& (0+255),w,b
  7598  001232  26E1               	addwf	fsr1l,f,c
  7599  001234  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7600  001236  22E2               	addwfc	fsr1h,f,c
  7601  001238  CFDE FFE6          	movff	postinc2,postinc1
  7602  00123C  CFDE FFE6          	movff	postinc2,postinc1
  7603  001240  CFDE FFE6          	movff	postinc2,postinc1
  7604  001244  CFDE FFE6          	movff	postinc2,postinc1
  7605  001248                     l5898:
  7606                           
  7607                           ;ff.c: 2352:  fs->fs_type = fmt;
  7608  001248  C098  FFD9         	movff	find_volume@fs,fsr2l
  7609  00124C  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7610  001250  C097  FFDF         	movff	find_volume@fmt,indf2
  7611                           
  7612                           ;ff.c: 2353:  fs->id = ++Fsid;
  7613  001254  0100               	movlb	0	; () banked
  7614  001256  4BD2               	infsnz	_Fsid& (0+255),f,b
  7615  001258  2BD3               	incf	(_Fsid+1)& (0+255),f,b
  7616  00125A  EE20 F006          	lfsr	2,6
  7617  00125E  5198               	movf	find_volume@fs& (0+255),w,b
  7618  001260  26D9               	addwf	fsr2l,f,c
  7619  001262  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7620  001264  22DA               	addwfc	fsr2h,f,c
  7621  001266  C0D2  FFDE         	movff	_Fsid,postinc2
  7622  00126A  C0D3  FFDD         	movff	_Fsid+1,postdec2
  7623  00126E  EFAE  F004         	goto	l5678
  7624  001272                     __end_of_find_volume:
  7625                           	opt callstack 0
  7626                           
  7627 ;; *************** function _get_ldnumber *****************
  7628 ;; Defined at:
  7629 ;;		line 2114 in file "ff.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7632 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7635 ;;		 -> STR_5(11), STR_3(1), STR_1(1), 
  7636 ;;  i               2   10[COMRAM] unsigned short 
  7637 ;;  vol             2    8[COMRAM] int 
  7638 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7639 ;;		 -> STR_5(11), STR_3(1), STR_1(1), 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  2    0[COMRAM] int 
  7642 ;; Registers used:
  7643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7649 ;;      Params:         2       0       0       0       0       0       0       0       0
  7650 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7651 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7652 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7653 ;;Total ram usage:       14 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; This function calls:
  7656 ;;		Nothing
  7657 ;; This function is called by:
  7658 ;;		_find_volume
  7659 ;;		_f_mount
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           	psect	text17
  7664  004ABE                     __ptext17:
  7665                           	opt callstack 0
  7666  004ABE                     _get_ldnumber:
  7667                           	opt callstack 28
  7668                           
  7669                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;incstack = 0
  7673  004ABE  6809               	setf	get_ldnumber@vol,c
  7674  004AC0  680A               	setf	get_ldnumber@vol+1,c
  7675                           
  7676                           ;ff.c: 2129:  if (*path) {
  7677  004AC2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7678  004AC6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7679  004ACA  50DE               	movf	postinc2,w,c
  7680  004ACC  10DE               	iorwf	postinc2,w,c
  7681  004ACE  B4D8               	btfsc	status,2,c
  7682  004AD0  D05B               	goto	l5424
  7683                           
  7684                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7685  004AD2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7686  004AD6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7687  004ADA  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7688  004ADE  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7689  004AE2  D002               	goto	l5398
  7690  004AE4                     l5396:
  7691  004AE4  4A0D               	infsnz	get_ldnumber@tt,f,c
  7692  004AE6  2A0E               	incf	get_ldnumber@tt+1,f,c
  7693  004AE8                     l5398:
  7694  004AE8  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7695  004AEC  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7696  004AF0                     	if	0	;tblptru may be non-zero
  7697  004AF0                     	endif
  7698  004AF0                     	if	0	;tblptru may be non-zero
  7699  004AF0                     	endif
  7700  004AF0  0E20               	movlw	32
  7701  004AF2  0008               	tblrd		*
  7702  004AF4  64F5               	cpfsgt	tablat,c
  7703  004AF6  D009               	goto	u6940
  7704  004AF8  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7705  004AFC  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7706  004B00                     	if	0	;tblptru may be non-zero
  7707  004B00                     	endif
  7708  004B00                     	if	0	;tblptru may be non-zero
  7709  004B00                     	endif
  7710  004B00  0008               	tblrd		*
  7711  004B02  50F5               	movf	tablat,w,c
  7712  004B04  0A3A               	xorlw	58
  7713  004B06  A4D8               	btfss	status,2,c
  7714  004B08  D7ED               	goto	l5396
  7715  004B0A                     u6940:
  7716                           
  7717                           ;ff.c: 2131:   if (*tt == ':') {
  7718  004B0A  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7719  004B0E  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7720  004B12                     	if	0	;tblptru may be non-zero
  7721  004B12                     	endif
  7722  004B12                     	if	0	;tblptru may be non-zero
  7723  004B12                     	endif
  7724  004B12  0008               	tblrd		*
  7725  004B14  50F5               	movf	tablat,w,c
  7726  004B16  0A3A               	xorlw	58
  7727  004B18  A4D8               	btfss	status,2,c
  7728  004B1A  D03B               	goto	l5428
  7729                           
  7730                           ;ff.c: 2132:    tp = *path;
  7731  004B1C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7732  004B20  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7733  004B24  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7734  004B28  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7735                           
  7736                           ;ff.c: 2133:    i = *tp++ - '0';
  7737  004B2C  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7738  004B30  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7739  004B34                     	if	0	;tblptru may be non-zero
  7740  004B34                     	endif
  7741  004B34                     	if	0	;tblptru may be non-zero
  7742  004B34                     	endif
  7743  004B34  0008               	tblrd		*
  7744  004B36  CFF5 F003          	movff	tablat,??_get_ldnumber
  7745  004B3A  0ED0               	movlw	208
  7746  004B3C  2403               	addwf	??_get_ldnumber,w,c
  7747  004B3E  6E0B               	movwf	get_ldnumber@i,c
  7748  004B40  6A0C               	clrf	get_ldnumber@i+1,c
  7749  004B42  0EFF               	movlw	255
  7750  004B44  220C               	addwfc	get_ldnumber@i+1,f,c
  7751  004B46  4A07               	infsnz	get_ldnumber@tp,f,c
  7752  004B48  2A08               	incf	get_ldnumber@tp+1,f,c
  7753                           
  7754                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7755  004B4A  500C               	movf	get_ldnumber@i+1,w,c
  7756  004B4C  E11D               	bnz	l5424
  7757  004B4E  0E0A               	movlw	10
  7758  004B50  5C0B               	subwf	get_ldnumber@i,w,c
  7759  004B52  B0D8               	btfsc	status,0,c
  7760  004B54  D019               	goto	l5424
  7761  004B56  500D               	movf	get_ldnumber@tt,w,c
  7762  004B58  1807               	xorwf	get_ldnumber@tp,w,c
  7763  004B5A  E116               	bnz	l5424
  7764  004B5C  500E               	movf	get_ldnumber@tt+1,w,c
  7765  004B5E  1808               	xorwf	get_ldnumber@tp+1,w,c
  7766  004B60  A4D8               	btfss	status,2,c
  7767  004B62  D012               	goto	l5424
  7768                           
  7769                           ;ff.c: 2135:     if (i < 1) {
  7770  004B64  500B               	movf	get_ldnumber@i,w,c
  7771  004B66  100C               	iorwf	get_ldnumber@i+1,w,c
  7772  004B68  A4D8               	btfss	status,2,c
  7773  004B6A  D00E               	goto	l5424
  7774                           
  7775                           ;ff.c: 2136:      vol = (int)i;
  7776  004B6C  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7777  004B70  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7778                           
  7779                           ;ff.c: 2137:      *path = ++tt;
  7780  004B74  4A0D               	infsnz	get_ldnumber@tt,f,c
  7781  004B76  2A0E               	incf	get_ldnumber@tt+1,f,c
  7782  004B78  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7783  004B7C  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7784  004B80  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7785  004B84  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7786  004B88                     l5424:
  7787                           
  7788                           ;ff.c: 2156:    return vol;
  7789  004B88  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7790  004B8C  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7791  004B90  0012               	return	
  7792  004B92                     l5428:
  7793                           
  7794                           ;ff.c: 2161:   vol = 0;
  7795  004B92  0E00               	movlw	0
  7796  004B94  6E0A               	movwf	get_ldnumber@vol+1,c
  7797  004B96  0E00               	movlw	0
  7798  004B98  6E09               	movwf	get_ldnumber@vol,c
  7799  004B9A  D7F6               	goto	l5424
  7800  004B9C                     __end_of_get_ldnumber:
  7801                           	opt callstack 0
  7802                           
  7803 ;; *************** function _disk_initialize *****************
  7804 ;; Defined at:
  7805 ;;		line 296 in file "diskio.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;  pdrv            1    wreg     unsigned char 
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;  pdrv            1   17[COMRAM] unsigned char 
  7810 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7811 ;;  tmr             2   26[COMRAM] unsigned short 
  7812 ;;  n               1   28[COMRAM] unsigned char 
  7813 ;;  ty              1   25[COMRAM] unsigned char 
  7814 ;;  cmd             1   24[COMRAM] unsigned char 
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  1    wreg      unsigned char 
  7817 ;; Registers used:
  7818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7824 ;;      Params:         0       0       0       0       0       0       0       0       0
  7825 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7826 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7827 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7828 ;;Total ram usage:       13 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    5
  7831 ;; This function calls:
  7832 ;;		_SPI1_Exchange8bit
  7833 ;;		_SPI1_Initialize
  7834 ;;		_SPI1_Open
  7835 ;;		_deselect
  7836 ;;		_send_cmd
  7837 ;; This function is called by:
  7838 ;;		_find_volume
  7839 ;; This function uses a non-reentrant model
  7840 ;;
  7841                           
  7842                           	psect	text18
  7843  003C2A                     __ptext18:
  7844                           	opt callstack 0
  7845  003C2A                     _disk_initialize:
  7846                           	opt callstack 23
  7847                           
  7848                           ;incstack = 0
  7849                           ;disk_initialize@pdrv stored from wreg
  7850  003C2A  6E12               	movwf	disk_initialize@pdrv,c
  7851                           
  7852                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7853  003C2C  5012               	movf	disk_initialize@pdrv,w,c
  7854  003C2E  B4D8               	btfsc	status,2,c
  7855  003C30  D002               	goto	l161
  7856  003C32  0E01               	movlw	1
  7857  003C34  0012               	return	
  7858  003C36                     l161:
  7859                           
  7860                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7861  003C36  0100               	movlb	0	; () banked
  7862  003C38  A3F7               	btfss	_Stat& (0+255),1,b
  7863  003C3A  D003               	goto	l5026
  7864  003C3C                     u6210:
  7865  003C3C  0100               	movlb	0	; () banked
  7866  003C3E  51F7               	movf	_Stat& (0+255),w,b
  7867  003C40  0012               	return	
  7868  003C42                     l5026:
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;diskio.c: 308:  SPI1_Initialize();
  7872  003C42  ECF4  F02B         	call	_SPI1_Initialize	;wreg free
  7873                           
  7874                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7875  003C46  0E0A               	movlw	10
  7876  003C48  6E1D               	movwf	disk_initialize@n,c
  7877  003C4A  D004               	goto	l5034
  7878  003C4C                     l5030:
  7879  003C4C  0EFF               	movlw	255
  7880  003C4E  ECDE  F02B         	call	_SPI1_Exchange8bit
  7881  003C52  061D               	decf	disk_initialize@n,f,c
  7882  003C54                     l5034:
  7883  003C54  501D               	movf	disk_initialize@n,w,c
  7884  003C56  A4D8               	btfss	status,2,c
  7885  003C58  D7F9               	goto	l5030
  7886                           
  7887                           ;diskio.c: 311:  ty = 0;
  7888  003C5A  0E00               	movlw	0
  7889  003C5C  6E1A               	movwf	disk_initialize@ty,c
  7890                           
  7891                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7892  003C5E  0E00               	movlw	0
  7893  003C60  6E0B               	movwf	send_cmd@arg,c
  7894  003C62  0E00               	movlw	0
  7895  003C64  6E0C               	movwf	send_cmd@arg+1,c
  7896  003C66  0E00               	movlw	0
  7897  003C68  6E0D               	movwf	send_cmd@arg+2,c
  7898  003C6A  0E00               	movlw	0
  7899  003C6C  6E0E               	movwf	send_cmd@arg+3,c
  7900  003C6E  0E00               	movlw	0
  7901  003C70  EC8A  F02A         	call	_send_cmd
  7902  003C74  06E8               	decf	wreg,f,c
  7903  003C76  A4D8               	btfss	status,2,c
  7904  003C78  D0C1               	goto	l183
  7905                           
  7906                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7907  003C7A  0EAA               	movlw	170
  7908  003C7C  6E0B               	movwf	send_cmd@arg,c
  7909  003C7E  0E01               	movlw	1
  7910  003C80  6E0C               	movwf	send_cmd@arg+1,c
  7911  003C82  0E00               	movlw	0
  7912  003C84  6E0D               	movwf	send_cmd@arg+2,c
  7913  003C86  0E00               	movlw	0
  7914  003C88  6E0E               	movwf	send_cmd@arg+3,c
  7915  003C8A  0E08               	movlw	8
  7916  003C8C  EC8A  F02A         	call	_send_cmd
  7917  003C90  06E8               	decf	wreg,f,c
  7918  003C92  A4D8               	btfss	status,2,c
  7919  003C94  D067               	goto	l5090
  7920                           
  7921                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7922  003C96  0E00               	movlw	0
  7923  003C98  6E1D               	movwf	disk_initialize@n,c
  7924  003C9A                     l5048:
  7925  003C9A  0E13               	movlw	low disk_initialize@ocr
  7926  003C9C  241D               	addwf	disk_initialize@n,w,c
  7927  003C9E  6ED9               	movwf	fsr2l,c
  7928  003CA0  6ADA               	clrf	fsr2h,c
  7929  003CA2  0E00               	movlw	high disk_initialize@ocr
  7930  003CA4  22DA               	addwfc	fsr2h,f,c
  7931  003CA6  0EFF               	movlw	255
  7932  003CA8  ECDE  F02B         	call	_SPI1_Exchange8bit
  7933  003CAC  6EDF               	movwf	indf2,c
  7934  003CAE  2A1D               	incf	disk_initialize@n,f,c
  7935  003CB0  0E03               	movlw	3
  7936  003CB2  641D               	cpfsgt	disk_initialize@n,c
  7937  003CB4  D7F2               	goto	l5048
  7938                           
  7939                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7940  003CB6  0415               	decf	disk_initialize@ocr+2,w,c
  7941  003CB8  A4D8               	btfss	status,2,c
  7942  003CBA  D0A0               	goto	l183
  7943  003CBC  0EAA               	movlw	170
  7944  003CBE  1816               	xorwf	disk_initialize@ocr+3,w,c
  7945  003CC0  A4D8               	btfss	status,2,c
  7946  003CC2  D09C               	goto	l183
  7947                           
  7948                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7949  003CC4  0E03               	movlw	3
  7950  003CC6  6E1C               	movwf	disk_initialize@tmr+1,c
  7951  003CC8  0EE8               	movlw	232
  7952  003CCA  6E1B               	movwf	disk_initialize@tmr,c
  7953  003CCC  D018               	goto	l172
  7954  003CCE                     l5060:
  7955                           
  7956                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7957  003CCE  0E00               	movlw	0
  7958  003CD0  6E0B               	movwf	send_cmd@arg,c
  7959  003CD2  0E00               	movlw	0
  7960  003CD4  6E0C               	movwf	send_cmd@arg+1,c
  7961  003CD6  0E00               	movlw	0
  7962  003CD8  6E0D               	movwf	send_cmd@arg+2,c
  7963  003CDA  0E40               	movlw	64
  7964  003CDC  6E0E               	movwf	send_cmd@arg+3,c
  7965  003CDE  0EA9               	movlw	169
  7966  003CE0  EC8A  F02A         	call	_send_cmd
  7967  003CE4  0900               	iorlw	0
  7968  003CE6  B4D8               	btfsc	status,2,c
  7969  003CE8  D00E               	goto	u6290
  7970                           
  7971                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7972  003CEA  0E03               	movlw	3
  7973  003CEC  6E11               	movwf	??_disk_initialize& (0+255),c
  7974  003CEE  0E98               	movlw	152
  7975  003CF0                     u8957:
  7976  003CF0  2EE8               	decfsz	wreg,f,c
  7977  003CF2  D7FE               	bra	u8957
  7978  003CF4  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7979  003CF6  D7FC               	bra	u8957
  7980                           
  7981                           ;diskio.c: 319:     }
  7982  003CF8  061B               	decf	disk_initialize@tmr,f,c
  7983  003CFA  A0D8               	btfss	status,0,c
  7984  003CFC  061C               	decf	disk_initialize@tmr+1,f,c
  7985  003CFE                     l172:
  7986  003CFE  501B               	movf	disk_initialize@tmr,w,c
  7987  003D00  101C               	iorwf	disk_initialize@tmr+1,w,c
  7988  003D02  A4D8               	btfss	status,2,c
  7989  003D04  D7E4               	goto	l5060
  7990  003D06                     u6290:
  7991                           
  7992                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7993  003D06  501B               	movf	disk_initialize@tmr,w,c
  7994  003D08  101C               	iorwf	disk_initialize@tmr+1,w,c
  7995  003D0A  B4D8               	btfsc	status,2,c
  7996  003D0C  D077               	goto	l183
  7997  003D0E  0E00               	movlw	0
  7998  003D10  6E0B               	movwf	send_cmd@arg,c
  7999  003D12  0E00               	movlw	0
  8000  003D14  6E0C               	movwf	send_cmd@arg+1,c
  8001  003D16  0E00               	movlw	0
  8002  003D18  6E0D               	movwf	send_cmd@arg+2,c
  8003  003D1A  0E00               	movlw	0
  8004  003D1C  6E0E               	movwf	send_cmd@arg+3,c
  8005  003D1E  0E3A               	movlw	58
  8006  003D20  EC8A  F02A         	call	_send_cmd
  8007  003D24  0900               	iorlw	0
  8008  003D26  A4D8               	btfss	status,2,c
  8009  003D28  D069               	goto	l183
  8010                           
  8011                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  8012  003D2A  0E00               	movlw	0
  8013  003D2C  6E1D               	movwf	disk_initialize@n,c
  8014  003D2E                     l5078:
  8015  003D2E  0E13               	movlw	low disk_initialize@ocr
  8016  003D30  241D               	addwf	disk_initialize@n,w,c
  8017  003D32  6ED9               	movwf	fsr2l,c
  8018  003D34  6ADA               	clrf	fsr2h,c
  8019  003D36  0E00               	movlw	high disk_initialize@ocr
  8020  003D38  22DA               	addwfc	fsr2h,f,c
  8021  003D3A  0EFF               	movlw	255
  8022  003D3C  ECDE  F02B         	call	_SPI1_Exchange8bit
  8023  003D40  6EDF               	movwf	indf2,c
  8024  003D42  2A1D               	incf	disk_initialize@n,f,c
  8025  003D44  0E03               	movlw	3
  8026  003D46  641D               	cpfsgt	disk_initialize@n,c
  8027  003D48  D7F2               	goto	l5078
  8028                           
  8029                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  8030  003D4A  BC13               	btfsc	disk_initialize@ocr,6,c
  8031  003D4C  D004               	goto	l5086
  8032  003D4E  0E00               	movlw	0
  8033  003D50  6E18               	movwf	_disk_initialize$412+1,c
  8034  003D52  0E04               	movlw	4
  8035  003D54  D003               	goto	L7
  8036  003D56                     l5086:
  8037  003D56  0E00               	movlw	0
  8038  003D58  6E18               	movwf	_disk_initialize$412+1,c
  8039  003D5A  0E0C               	movlw	12
  8040  003D5C                     L7:
  8041  003D5C  6E17               	movwf	_disk_initialize$412,c
  8042  003D5E  C017  F01A         	movff	_disk_initialize$412,disk_initialize@ty
  8043  003D62  D04C               	goto	l183
  8044  003D64                     l5090:
  8045                           
  8046                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  8047  003D64  0E00               	movlw	0
  8048  003D66  6E0B               	movwf	send_cmd@arg,c
  8049  003D68  0E00               	movlw	0
  8050  003D6A  6E0C               	movwf	send_cmd@arg+1,c
  8051  003D6C  0E00               	movlw	0
  8052  003D6E  6E0D               	movwf	send_cmd@arg+2,c
  8053  003D70  0E00               	movlw	0
  8054  003D72  6E0E               	movwf	send_cmd@arg+3,c
  8055  003D74  0EA9               	movlw	169
  8056  003D76  EC8A  F02A         	call	_send_cmd
  8057  003D7A  6E11               	movwf	??_disk_initialize& (0+255),c
  8058  003D7C  0E02               	movlw	2
  8059  003D7E  6011               	cpfslt	??_disk_initialize,c
  8060  003D80  D004               	goto	l5094
  8061                           
  8062                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  8063  003D82  0E02               	movlw	2
  8064  003D84  6E1A               	movwf	disk_initialize@ty,c
  8065  003D86  0EA9               	movlw	169
  8066  003D88  D003               	goto	L8
  8067  003D8A                     l5094:
  8068                           
  8069                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  8070  003D8A  0E01               	movlw	1
  8071  003D8C  6E1A               	movwf	disk_initialize@ty,c
  8072  003D8E  0E01               	movlw	1
  8073  003D90                     L8:
  8074  003D90  6E19               	movwf	disk_initialize@cmd,c
  8075                           
  8076                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  8077                           
  8078                           ;diskio.c: 330:    }
  8079  003D92  0E03               	movlw	3
  8080  003D94  6E1C               	movwf	disk_initialize@tmr+1,c
  8081  003D96  0EE8               	movlw	232
  8082  003D98  6E1B               	movwf	disk_initialize@tmr,c
  8083  003D9A  D018               	goto	l186
  8084  003D9C                     l5096:
  8085                           
  8086                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  8087  003D9C  0E00               	movlw	0
  8088  003D9E  6E0B               	movwf	send_cmd@arg,c
  8089  003DA0  0E00               	movlw	0
  8090  003DA2  6E0C               	movwf	send_cmd@arg+1,c
  8091  003DA4  0E00               	movlw	0
  8092  003DA6  6E0D               	movwf	send_cmd@arg+2,c
  8093  003DA8  0E00               	movlw	0
  8094  003DAA  6E0E               	movwf	send_cmd@arg+3,c
  8095  003DAC  5019               	movf	disk_initialize@cmd,w,c
  8096  003DAE  EC8A  F02A         	call	_send_cmd
  8097  003DB2  0900               	iorlw	0
  8098  003DB4  B4D8               	btfsc	status,2,c
  8099  003DB6  D00E               	goto	u6360
  8100                           
  8101                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  8102  003DB8  0E03               	movlw	3
  8103  003DBA  6E11               	movwf	??_disk_initialize& (0+255),c
  8104  003DBC  0E98               	movlw	152
  8105  003DBE                     u8967:
  8106  003DBE  2EE8               	decfsz	wreg,f,c
  8107  003DC0  D7FE               	bra	u8967
  8108  003DC2  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  8109  003DC4  D7FC               	bra	u8967
  8110                           
  8111                           ;diskio.c: 334:    }
  8112  003DC6  061B               	decf	disk_initialize@tmr,f,c
  8113  003DC8  A0D8               	btfss	status,0,c
  8114  003DCA  061C               	decf	disk_initialize@tmr+1,f,c
  8115  003DCC                     l186:
  8116  003DCC  501B               	movf	disk_initialize@tmr,w,c
  8117  003DCE  101C               	iorwf	disk_initialize@tmr+1,w,c
  8118  003DD0  A4D8               	btfss	status,2,c
  8119  003DD2  D7E4               	goto	l5096
  8120  003DD4                     u6360:
  8121                           
  8122                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  8123  003DD4  501B               	movf	disk_initialize@tmr,w,c
  8124  003DD6  101C               	iorwf	disk_initialize@tmr+1,w,c
  8125  003DD8  B4D8               	btfsc	status,2,c
  8126  003DDA  D00E               	goto	u6380
  8127  003DDC  0E00               	movlw	0
  8128  003DDE  6E0B               	movwf	send_cmd@arg,c
  8129  003DE0  0E02               	movlw	2
  8130  003DE2  6E0C               	movwf	send_cmd@arg+1,c
  8131  003DE4  0E00               	movlw	0
  8132  003DE6  6E0D               	movwf	send_cmd@arg+2,c
  8133  003DE8  0E00               	movlw	0
  8134  003DEA  6E0E               	movwf	send_cmd@arg+3,c
  8135  003DEC  0E10               	movlw	16
  8136  003DEE  EC8A  F02A         	call	_send_cmd
  8137  003DF2  0900               	iorlw	0
  8138  003DF4  B4D8               	btfsc	status,2,c
  8139  003DF6  D002               	goto	l183
  8140  003DF8                     u6380:
  8141                           
  8142                           ;diskio.c: 336:     ty = 0;
  8143  003DF8  0E00               	movlw	0
  8144  003DFA  6E1A               	movwf	disk_initialize@ty,c
  8145  003DFC                     l183:
  8146                           
  8147                           ;diskio.c: 339:  CardType = ty;
  8148  003DFC  C01A  F0D6         	movff	disk_initialize@ty,_CardType
  8149                           
  8150                           ;diskio.c: 340:  deselect();
  8151  003E00  EC02  F02C         	call	_deselect	;wreg free
  8152                           
  8153                           ;diskio.c: 342:  if (ty) {
  8154  003E04  501A               	movf	disk_initialize@ty,w,c
  8155  003E06  B4D8               	btfsc	status,2,c
  8156  003E08  D719               	goto	u6210
  8157                           
  8158                           ;diskio.c: 343:   Stat &= ~0x01;
  8159  003E0A  0100               	movlb	0	; () banked
  8160  003E0C  91F7               	bcf	_Stat& (0+255),0,b
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;diskio.c: 344:   SPI1_Open();
  8164  003E0E  ECE6  F02B         	call	_SPI1_Open	;wreg free
  8165  003E12  D714               	goto	u6210
  8166  003E14                     __end_of_disk_initialize:
  8167                           	opt callstack 0
  8168                           
  8169 ;; *************** function _SPI1_Open *****************
  8170 ;; Defined at:
  8171 ;;		line 77 in file "mcc_generated_files/spi1.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;		None
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;		None
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  1    wreg      void 
  8178 ;; Registers used:
  8179 ;;		wreg, status,2
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8185 ;;      Params:         0       0       0       0       0       0       0       0       0
  8186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8188 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8189 ;;Total ram usage:        0 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; This function calls:
  8192 ;;		Nothing
  8193 ;; This function is called by:
  8194 ;;		_disk_initialize
  8195 ;; This function uses a non-reentrant model
  8196 ;;
  8197                           
  8198                           	psect	text19
  8199  0057CC                     __ptext19:
  8200                           	opt callstack 0
  8201  0057CC                     _SPI1_Open:
  8202                           	opt callstack 27
  8203                           
  8204                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  8205                           
  8206                           ;incstack = 0
  8207  0057CC  0E40               	movlw	64
  8208  0057CE  6EC7               	movwf	4039,c	;volatile
  8209                           
  8210                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  8211  0057D0  0E20               	movlw	32
  8212  0057D2  6EC6               	movwf	4038,c	;volatile
  8213                           
  8214                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  8215  0057D4  0E00               	movlw	0
  8216  0057D6  6EC8               	movwf	4040,c	;volatile
  8217  0057D8  0012               	return		;funcret
  8218  0057DA                     __end_of_SPI1_Open:
  8219                           	opt callstack 0
  8220                           
  8221 ;; *************** function _check_fs *****************
  8222 ;; Defined at:
  8223 ;;		line 2175 in file "ff.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;  fs              2   58[COMRAM] PTR struct .
  8226 ;;		 -> NULL(0), FatFs(558), 
  8227 ;;  sect            4   60[COMRAM] unsigned long 
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;		None
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      unsigned char 
  8232 ;; Registers used:
  8233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8239 ;;      Params:         6       0       0       0       0       0       0       0       0
  8240 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8241 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8242 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8243 ;;Total ram usage:       10 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    8
  8246 ;; This function calls:
  8247 ;;		_move_window
  8248 ;; This function is called by:
  8249 ;;		_find_volume
  8250 ;; This function uses a non-reentrant model
  8251 ;;
  8252                           
  8253                           	psect	text20
  8254  0049D2                     __ptext20:
  8255                           	opt callstack 0
  8256  0049D2                     _check_fs:
  8257                           	opt callstack 20
  8258                           
  8259                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  8260                           
  8261                           ;incstack = 0
  8262  0049D2  EE20 F004          	lfsr	2,4
  8263  0049D6  503B               	movf	check_fs@fs,w,c
  8264  0049D8  26D9               	addwf	fsr2l,f,c
  8265  0049DA  503C               	movf	check_fs@fs+1,w,c
  8266  0049DC  22DA               	addwfc	fsr2h,f,c
  8267  0049DE  0E00               	movlw	0
  8268  0049E0  6EDF               	movwf	indf2,c
  8269  0049E2  EE20 F02A          	lfsr	2,42
  8270  0049E6  503B               	movf	check_fs@fs,w,c
  8271  0049E8  26D9               	addwf	fsr2l,f,c
  8272  0049EA  503C               	movf	check_fs@fs+1,w,c
  8273  0049EC  22DA               	addwfc	fsr2h,f,c
  8274  0049EE  0EFF               	movlw	255
  8275  0049F0  6EDE               	movwf	postinc2,c
  8276  0049F2  0EFF               	movlw	255
  8277  0049F4  6EDE               	movwf	postinc2,c
  8278  0049F6  0EFF               	movlw	255
  8279  0049F8  6EDE               	movwf	postinc2,c
  8280  0049FA  0EFF               	movlw	255
  8281  0049FC  6EDD               	movwf	postdec2,c
  8282                           
  8283                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  8284  0049FE  C03B  F030         	movff	check_fs@fs,move_window@fs
  8285  004A02  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  8286  004A06  C03D  F032         	movff	check_fs@sect,move_window@sector
  8287  004A0A  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  8288  004A0E  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  8289  004A12  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  8290  004A16  ECB1  F027         	call	_move_window	;wreg free
  8291  004A1A  0900               	iorlw	0
  8292  004A1C  B4D8               	btfsc	status,2,c
  8293  004A1E  D002               	goto	l5442
  8294                           
  8295                           ;ff.c: 2182:   return 3;
  8296  004A20  0E03               	movlw	3
  8297  004A22  0012               	return	
  8298  004A24                     l5442:
  8299                           
  8300                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8301  004A24  EE22 F02C          	lfsr	2,556
  8302  004A28  503B               	movf	check_fs@fs,w,c
  8303  004A2A  26D9               	addwf	fsr2l,f,c
  8304  004A2C  503C               	movf	check_fs@fs+1,w,c
  8305  004A2E  22DA               	addwfc	fsr2h,f,c
  8306  004A30  0E55               	movlw	85
  8307  004A32  18DE               	xorwf	postinc2,w,c
  8308  004A34  E104               	bnz	u7000
  8309  004A36  0EAA               	movlw	170
  8310  004A38  18DE               	xorwf	postinc2,w,c
  8311  004A3A  B4D8               	btfsc	status,2,c
  8312  004A3C  D002               	goto	l5448
  8313  004A3E                     u7000:
  8314                           
  8315                           ;ff.c: 2185:   return 2;
  8316  004A3E  0E02               	movlw	2
  8317  004A40  0012               	return	
  8318  004A42                     l5448:
  8319                           
  8320                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8321  004A42  EE20 F064          	lfsr	2,100
  8322  004A46  503B               	movf	check_fs@fs,w,c
  8323  004A48  26D9               	addwf	fsr2l,f,c
  8324  004A4A  503C               	movf	check_fs@fs+1,w,c
  8325  004A4C  22DA               	addwfc	fsr2h,f,c
  8326  004A4E  0EFF               	movlw	255
  8327  004A50  14DE               	andwf	postinc2,w,c
  8328  004A52  6E41               	movwf	??_check_fs& (0+255),c
  8329  004A54  0EFF               	movlw	255
  8330  004A56  14DE               	andwf	postinc2,w,c
  8331  004A58  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8332  004A5A  0EFF               	movlw	255
  8333  004A5C  14DE               	andwf	postinc2,w,c
  8334  004A5E  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8335  004A60  0E00               	movlw	0
  8336  004A62  14DE               	andwf	postinc2,w,c
  8337  004A64  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8338  004A66  0E46               	movlw	70
  8339  004A68  1841               	xorwf	??_check_fs,w,c
  8340  004A6A  E10A               	bnz	l5454
  8341  004A6C  0E41               	movlw	65
  8342  004A6E  1842               	xorwf	??_check_fs+1,w,c
  8343  004A70  E107               	bnz	l5454
  8344  004A72  0E54               	movlw	84
  8345  004A74  1843               	xorwf	??_check_fs+2,w,c
  8346  004A76  1044               	iorwf	??_check_fs+3,w,c
  8347  004A78  A4D8               	btfss	status,2,c
  8348  004A7A  D002               	goto	l5454
  8349  004A7C                     u7010:
  8350                           
  8351                           ;ff.c: 2188:   return 0;
  8352  004A7C  0E00               	movlw	0
  8353  004A7E  0012               	return	
  8354  004A80                     l5454:
  8355                           
  8356                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8357  004A80  EE20 F080          	lfsr	2,128
  8358  004A84  503B               	movf	check_fs@fs,w,c
  8359  004A86  26D9               	addwf	fsr2l,f,c
  8360  004A88  503C               	movf	check_fs@fs+1,w,c
  8361  004A8A  22DA               	addwfc	fsr2h,f,c
  8362  004A8C  0EFF               	movlw	255
  8363  004A8E  14DE               	andwf	postinc2,w,c
  8364  004A90  6E41               	movwf	??_check_fs& (0+255),c
  8365  004A92  0EFF               	movlw	255
  8366  004A94  14DE               	andwf	postinc2,w,c
  8367  004A96  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8368  004A98  0EFF               	movlw	255
  8369  004A9A  14DE               	andwf	postinc2,w,c
  8370  004A9C  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8371  004A9E  0E00               	movlw	0
  8372  004AA0  14DE               	andwf	postinc2,w,c
  8373  004AA2  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8374  004AA4  0E46               	movlw	70
  8375  004AA6  1841               	xorwf	??_check_fs,w,c
  8376  004AA8  E108               	bnz	l5460
  8377  004AAA  0E41               	movlw	65
  8378  004AAC  1842               	xorwf	??_check_fs+1,w,c
  8379  004AAE  E105               	bnz	l5460
  8380  004AB0  0E54               	movlw	84
  8381  004AB2  1843               	xorwf	??_check_fs+2,w,c
  8382  004AB4  1044               	iorwf	??_check_fs+3,w,c
  8383  004AB6  B4D8               	btfsc	status,2,c
  8384  004AB8  D7E1               	goto	u7010
  8385  004ABA                     l5460:
  8386                           
  8387                           ;ff.c: 2192:  return 1;
  8388  004ABA  0E01               	movlw	1
  8389  004ABC  0012               	return		;funcret
  8390  004ABE                     __end_of_check_fs:
  8391                           	opt callstack 0
  8392                           
  8393 ;; *************** function _f_lseek *****************
  8394 ;; Defined at:
  8395 ;;		line 3033 in file "ff.c"
  8396 ;; Parameters:    Size  Location     Type
  8397 ;;  fp              2   13[BANK0 ] PTR struct .
  8398 ;;		 -> Fil(32), 
  8399 ;;  ofs             4   15[BANK0 ] unsigned long 
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;  clst            4   48[BANK0 ] unsigned long 
  8402 ;;  bcs             4   44[BANK0 ] unsigned long 
  8403 ;;  nsect           4   40[BANK0 ] unsigned long 
  8404 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8405 ;;  res             1   39[BANK0 ] enum E93
  8406 ;; Return value:  Size  Location     Type
  8407 ;;                  1    wreg      enum E4918
  8408 ;; Registers used:
  8409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8410 ;; Tracked objects:
  8411 ;;		On entry : 0/0
  8412 ;;		On exit  : 0/0
  8413 ;;		Unchanged: 0/0
  8414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8415 ;;      Params:         0       6       0       0       0       0       0       0       0
  8416 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8417 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8418 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8419 ;;Total ram usage:       39 bytes
  8420 ;; Hardware stack levels used:    1
  8421 ;; Hardware stack levels required when called:   10
  8422 ;; This function calls:
  8423 ;;		___lldiv
  8424 ;;		_clust2sect
  8425 ;;		_create_chain
  8426 ;;		_get_fat
  8427 ;;		_validate
  8428 ;; This function is called by:
  8429 ;;		_main
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           	psect	text21
  8434  0019D6                     __ptext21:
  8435                           	opt callstack 0
  8436  0019D6                     _f_lseek:
  8437                           	opt callstack 20
  8438                           
  8439                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8440                           
  8441                           ;incstack = 0
  8442  0019D6  C06D  F002         	movff	f_lseek@fp,validate@obj
  8443  0019DA  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8444  0019DE  EC04  F028         	call	_validate	;wreg free
  8445  0019E2  0100               	movlb	0	; () banked
  8446  0019E4  6F87               	movwf	f_lseek@res& (0+255),b
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8450  0019E6  5187               	movf	f_lseek@res& (0+255),w,b
  8451  0019E8  B4D8               	btfsc	status,2,c
  8452  0019EA  D002               	goto	l6168
  8453  0019EC                     u8070:
  8454                           
  8455                           ; BSR set to: 0
  8456  0019EC  5187               	movf	f_lseek@res& (0+255),w,b
  8457  0019EE  0012               	return	
  8458  0019F0                     l6168:
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;ff.c: 3047:  if (fp->err)
  8462  0019F0  EE20 F005          	lfsr	2,5
  8463  0019F4  516D               	movf	f_lseek@fp& (0+255),w,b
  8464  0019F6  26D9               	addwf	fsr2l,f,c
  8465  0019F8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8466  0019FA  22DA               	addwfc	fsr2h,f,c
  8467  0019FC  50DF               	movf	indf2,w,c
  8468  0019FE  B4D8               	btfsc	status,2,c
  8469  001A00  D008               	goto	l6174
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8473  001A02  EE20 F005          	lfsr	2,5
  8474  001A06  516D               	movf	f_lseek@fp& (0+255),w,b
  8475  001A08  26D9               	addwf	fsr2l,f,c
  8476  001A0A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8477  001A0C  22DA               	addwfc	fsr2h,f,c
  8478  001A0E  50DF               	movf	indf2,w,c
  8479  001A10  0012               	return	
  8480  001A12                     l6174:
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8484  001A12  EE20 F00A          	lfsr	2,10
  8485  001A16  516D               	movf	f_lseek@fp& (0+255),w,b
  8486  001A18  26D9               	addwf	fsr2l,f,c
  8487  001A1A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8488  001A1C  22DA               	addwfc	fsr2h,f,c
  8489  001A1E  516F               	movf	f_lseek@ofs& (0+255),w,b
  8490  001A20  5CDE               	subwf	postinc2,w,c
  8491  001A22  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8492  001A24  58DE               	subwfb	postinc2,w,c
  8493  001A26  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8494  001A28  58DE               	subwfb	postinc2,w,c
  8495  001A2A  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8496  001A2C  58DE               	subwfb	postinc2,w,c
  8497  001A2E  B0D8               	btfsc	status,0,c
  8498  001A30  D016               	goto	l758
  8499                           
  8500                           ; BSR set to: 0
  8501  001A32  EE20 F004          	lfsr	2,4
  8502  001A36  516D               	movf	f_lseek@fp& (0+255),w,b
  8503  001A38  26D9               	addwf	fsr2l,f,c
  8504  001A3A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8505  001A3C  22DA               	addwfc	fsr2h,f,c
  8506  001A3E  B2DF               	btfsc	indf2,1,c
  8507  001A40  D00E               	goto	l758
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8511  001A42  EE20 F00A          	lfsr	2,10
  8512  001A46  516D               	movf	f_lseek@fp& (0+255),w,b
  8513  001A48  26D9               	addwf	fsr2l,f,c
  8514  001A4A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8515  001A4C  22DA               	addwfc	fsr2h,f,c
  8516  001A4E  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8517  001A52  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8518  001A56  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8519  001A5A  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8520  001A5E                     l758:
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;ff.c: 3113:   ifptr = fp->fptr;
  8524  001A5E  EE20 F006          	lfsr	2,6
  8525  001A62  516D               	movf	f_lseek@fp& (0+255),w,b
  8526  001A64  26D9               	addwf	fsr2l,f,c
  8527  001A66  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8528  001A68  22DA               	addwfc	fsr2h,f,c
  8529  001A6A  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8530  001A6E  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8531  001A72  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8532  001A76  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8533                           
  8534                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8535  001A7A  0E00               	movlw	0
  8536  001A7C  6F88               	movwf	f_lseek@nsect& (0+255),b
  8537  001A7E  0E00               	movlw	0
  8538  001A80  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8539  001A82  0E00               	movlw	0
  8540  001A84  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8541  001A86  0E00               	movlw	0
  8542  001A88  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8543  001A8A  EE20 F006          	lfsr	2,6
  8544  001A8E  516D               	movf	f_lseek@fp& (0+255),w,b
  8545  001A90  26D9               	addwf	fsr2l,f,c
  8546  001A92  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8547  001A94  22DA               	addwfc	fsr2h,f,c
  8548  001A96  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8549  001A9A  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8550  001A9E  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8551  001AA2  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;ff.c: 3115:   if (ofs) {
  8555  001AA6  516F               	movf	f_lseek@ofs& (0+255),w,b
  8556  001AA8  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8557  001AAA  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8558  001AAC  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8559  001AAE  B4D8               	btfsc	status,2,c
  8560  001AB0  D22D               	goto	l6268
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8564  001AB2  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8565  001AB6  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8566  001ABA  EE10 F002          	lfsr	1,2
  8567  001ABE  50DE               	movf	postinc2,w,c
  8568  001AC0  26E1               	addwf	fsr1l,f,c
  8569  001AC2  50DD               	movf	postdec2,w,c
  8570  001AC4  22E2               	addwfc	fsr1h,f,c
  8571  001AC6  50E7               	movf	indf1,w,c
  8572  001AC8  6F73               	movwf	??_f_lseek& (0+255),b
  8573  001ACA  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8574  001ACE  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8575  001AD0  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8576  001AD2  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8577  001AD4  0E09               	movlw	9
  8578  001AD6                     u8125:
  8579  001AD6  90D8               	bcf	status,0,c
  8580  001AD8  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8581  001ADA  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8582  001ADC  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8583  001ADE  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8584  001AE0  2EE8               	decfsz	wreg,f,c
  8585  001AE2  D7F9               	goto	u8125
  8586  001AE4  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8587  001AE8  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8588  001AEC  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8589  001AF0  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;ff.c: 3117:    if (ifptr > 0 &&
  8593  001AF4  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8594  001AF6  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8595  001AF8  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8596  001AFA  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8597  001AFC  B4D8               	btfsc	status,2,c
  8598  001AFE  D097               	goto	l6190
  8599                           
  8600                           ; BSR set to: 0
  8601  001B00  0EFF               	movlw	255
  8602  001B02  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8603  001B04  6E01               	movwf	___lldiv@dividend,c
  8604  001B06  0EFF               	movlw	255
  8605  001B08  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8606  001B0A  6E02               	movwf	___lldiv@dividend+1,c
  8607  001B0C  0EFF               	movlw	255
  8608  001B0E  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8609  001B10  6E03               	movwf	___lldiv@dividend+2,c
  8610  001B12  0EFF               	movlw	255
  8611  001B14  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8612  001B16  6E04               	movwf	___lldiv@dividend+3,c
  8613  001B18  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8614  001B1C  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8615  001B20  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8616  001B24  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8617  001B28  EC4E  F028         	call	___lldiv	;wreg free
  8618  001B2C  C001  F073         	movff	?___lldiv,??_f_lseek
  8619  001B30  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8620  001B34  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8621  001B38  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8622  001B3C  0EFF               	movlw	255
  8623  001B3E  0100               	movlb	0	; () banked
  8624  001B40  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8625  001B42  6E01               	movwf	___lldiv@dividend,c
  8626  001B44  0EFF               	movlw	255
  8627  001B46  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8628  001B48  6E02               	movwf	___lldiv@dividend+1,c
  8629  001B4A  0EFF               	movlw	255
  8630  001B4C  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8631  001B4E  6E03               	movwf	___lldiv@dividend+2,c
  8632  001B50  0EFF               	movlw	255
  8633  001B52  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8634  001B54  6E04               	movwf	___lldiv@dividend+3,c
  8635  001B56  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8636  001B5A  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8637  001B5E  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8638  001B62  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8639  001B66  EC4E  F028         	call	___lldiv	;wreg free
  8640  001B6A  5001               	movf	?___lldiv,w,c
  8641  001B6C  0100               	movlb	0	; () banked
  8642  001B6E  5D73               	subwf	??_f_lseek& (0+255),w,b
  8643  001B70  5002               	movf	?___lldiv+1,w,c
  8644  001B72  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8645  001B74  5003               	movf	?___lldiv+2,w,c
  8646  001B76  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8647  001B78  5004               	movf	?___lldiv+3,w,c
  8648  001B7A  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8649  001B7C  A0D8               	btfss	status,0,c
  8650  001B7E  D057               	goto	l6190
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8654  001B80  0EFF               	movlw	255
  8655  001B82  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8656  001B84  6F73               	movwf	??_f_lseek& (0+255),b
  8657  001B86  0EFF               	movlw	255
  8658  001B88  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8659  001B8A  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8660  001B8C  0EFF               	movlw	255
  8661  001B8E  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8662  001B90  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8663  001B92  0EFF               	movlw	255
  8664  001B94  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8665  001B96  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8666  001B98  1D73               	comf	??_f_lseek& (0+255),w,b
  8667  001B9A  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8668  001B9C  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8669  001B9E  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8670  001BA0  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8671  001BA2  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8672  001BA4  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8673  001BA6  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8674  001BA8  0EFF               	movlw	255
  8675  001BAA  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8676  001BAC  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8677  001BAE  0EFF               	movlw	255
  8678  001BB0  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8679  001BB2  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8680  001BB4  0EFF               	movlw	255
  8681  001BB6  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8682  001BB8  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8683  001BBA  0EFF               	movlw	255
  8684  001BBC  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8685  001BBE  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8686  001BC0  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8687  001BC2  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8688  001BC4  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8689  001BC6  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8690  001BC8  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8691  001BCA  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8692  001BCC  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8693  001BCE  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8694  001BD0  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8695  001BD2  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8696  001BD4  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8697  001BD6  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8698  001BD8  EE20 F006          	lfsr	2,6
  8699  001BDC  516D               	movf	f_lseek@fp& (0+255),w,b
  8700  001BDE  26D9               	addwf	fsr2l,f,c
  8701  001BE0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8702  001BE2  22DA               	addwfc	fsr2h,f,c
  8703  001BE4  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8704  001BE8  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8705  001BEC  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8706  001BF0  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8707                           
  8708                           ;ff.c: 3120:     ofs -= fp->fptr;
  8709  001BF4  EE20 F006          	lfsr	2,6
  8710  001BF8  516D               	movf	f_lseek@fp& (0+255),w,b
  8711  001BFA  26D9               	addwf	fsr2l,f,c
  8712  001BFC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8713  001BFE  22DA               	addwfc	fsr2h,f,c
  8714  001C00  50DE               	movf	postinc2,w,c
  8715  001C02  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8716  001C04  50DE               	movf	postinc2,w,c
  8717  001C06  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8718  001C08  50DE               	movf	postinc2,w,c
  8719  001C0A  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8720  001C0C  50DD               	movf	postdec2,w,c
  8721  001C0E  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8722                           
  8723                           ;ff.c: 3121:     clst = fp->clust;
  8724  001C10  EE20 F012          	lfsr	2,18
  8725  001C14  516D               	movf	f_lseek@fp& (0+255),w,b
  8726  001C16  26D9               	addwf	fsr2l,f,c
  8727  001C18  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8728  001C1A  22DA               	addwfc	fsr2h,f,c
  8729  001C1C  CFDE F090          	movff	postinc2,f_lseek@clst
  8730  001C20  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8731  001C24  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8732  001C28  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8733                           
  8734                           ;ff.c: 3122:    } else {
  8735  001C2C  D06E               	goto	l6214
  8736  001C2E                     l6190:
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;ff.c: 3123:     clst = fp->sclust;
  8740  001C2E  EE20 F00E          	lfsr	2,14
  8741  001C32  516D               	movf	f_lseek@fp& (0+255),w,b
  8742  001C34  26D9               	addwf	fsr2l,f,c
  8743  001C36  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8744  001C38  22DA               	addwfc	fsr2h,f,c
  8745  001C3A  CFDE F090          	movff	postinc2,f_lseek@clst
  8746  001C3E  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8747  001C42  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8748  001C46  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;ff.c: 3125:     if (clst == 0) {
  8752  001C4A  5190               	movf	f_lseek@clst& (0+255),w,b
  8753  001C4C  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8754  001C4E  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8755  001C50  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8756  001C52  A4D8               	btfss	status,2,c
  8757  001C54  D04C               	goto	l762
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8761  001C56  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8762  001C5A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8763  001C5E  CFDE F056          	movff	postinc2,create_chain@fs
  8764  001C62  CFDD F057          	movff	postdec2,create_chain@fs+1
  8765  001C66  0E00               	movlw	0
  8766  001C68  6E58               	movwf	create_chain@clst,c
  8767  001C6A  0E00               	movlw	0
  8768  001C6C  6E59               	movwf	create_chain@clst+1,c
  8769  001C6E  0E00               	movlw	0
  8770  001C70  6E5A               	movwf	create_chain@clst+2,c
  8771  001C72  0E00               	movlw	0
  8772  001C74  6E5B               	movwf	create_chain@clst+3,c
  8773  001C76  ECF5  F019         	call	_create_chain	;wreg free
  8774  001C7A  C056  F090         	movff	?_create_chain,f_lseek@clst
  8775  001C7E  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8776  001C82  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8777  001C86  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8778                           
  8779                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8780  001C8A  0100               	movlb	0	; () banked
  8781  001C8C  0590               	decf	f_lseek@clst& (0+255),w,b
  8782  001C8E  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8783  001C90  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8784  001C92  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8785  001C94  A4D8               	btfss	status,2,c
  8786  001C96  D00A               	goto	l6204
  8787  001C98                     u8160:
  8788                           
  8789                           ; BSR set to: 0
  8790  001C98  EE20 F005          	lfsr	2,5
  8791  001C9C  516D               	movf	f_lseek@fp& (0+255),w,b
  8792  001C9E  26D9               	addwf	fsr2l,f,c
  8793  001CA0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8794  001CA2  22DA               	addwfc	fsr2h,f,c
  8795  001CA4  0E02               	movlw	2
  8796  001CA6  6EDF               	movwf	indf2,c
  8797                           
  8798                           ; BSR set to: 0
  8799  001CA8  0E02               	movlw	2
  8800  001CAA  0012               	return	
  8801  001CAC                     l6204:
  8802                           
  8803                           ; BSR set to: 0
  8804                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8805  001CAC  2990               	incf	f_lseek@clst& (0+255),w,b
  8806  001CAE  E111               	bnz	l6212
  8807  001CB0  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8808  001CB2  E10F               	bnz	l6212
  8809  001CB4  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8810  001CB6  E10D               	bnz	l6212
  8811  001CB8  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8812  001CBA  A4D8               	btfss	status,2,c
  8813  001CBC  D00A               	goto	l6212
  8814  001CBE                     u8170:
  8815                           
  8816                           ; BSR set to: 0
  8817  001CBE  EE20 F005          	lfsr	2,5
  8818  001CC2  516D               	movf	f_lseek@fp& (0+255),w,b
  8819  001CC4  26D9               	addwf	fsr2l,f,c
  8820  001CC6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8821  001CC8  22DA               	addwfc	fsr2h,f,c
  8822  001CCA  0E01               	movlw	1
  8823  001CCC  6EDF               	movwf	indf2,c
  8824                           
  8825                           ; BSR set to: 0
  8826  001CCE  0E01               	movlw	1
  8827  001CD0  0012               	return	
  8828  001CD2                     l6212:
  8829                           
  8830                           ; BSR set to: 0
  8831                           ;ff.c: 3129:      fp->sclust = clst;
  8832  001CD2  EE20 F00E          	lfsr	2,14
  8833  001CD6  516D               	movf	f_lseek@fp& (0+255),w,b
  8834  001CD8  26D9               	addwf	fsr2l,f,c
  8835  001CDA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8836  001CDC  22DA               	addwfc	fsr2h,f,c
  8837  001CDE  C090  FFDE         	movff	f_lseek@clst,postinc2
  8838  001CE2  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8839  001CE6  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8840  001CEA  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8841  001CEE                     l762:
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;ff.c: 3132:     fp->clust = clst;
  8845  001CEE  EE20 F012          	lfsr	2,18
  8846  001CF2  516D               	movf	f_lseek@fp& (0+255),w,b
  8847  001CF4  26D9               	addwf	fsr2l,f,c
  8848  001CF6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8849  001CF8  22DA               	addwfc	fsr2h,f,c
  8850  001CFA  C090  FFDE         	movff	f_lseek@clst,postinc2
  8851  001CFE  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8852  001D02  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8853  001D06  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8854  001D0A                     l6214:
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;ff.c: 3134:    if (clst != 0) {
  8858  001D0A  5190               	movf	f_lseek@clst& (0+255),w,b
  8859  001D0C  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8860  001D0E  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8861  001D10  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8862  001D12  A4D8               	btfss	status,2,c
  8863  001D14  D097               	goto	l6250
  8864  001D16  D0FA               	goto	l6268
  8865  001D18                     l6218:
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8869  001D18  EE20 F004          	lfsr	2,4
  8870  001D1C  516D               	movf	f_lseek@fp& (0+255),w,b
  8871  001D1E  26D9               	addwf	fsr2l,f,c
  8872  001D20  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8873  001D22  22DA               	addwfc	fsr2h,f,c
  8874  001D24  A2DF               	btfss	indf2,1,c
  8875  001D26  D02A               	goto	l6226
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8879  001D28  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8880  001D2C  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8881  001D30  CFDE F056          	movff	postinc2,create_chain@fs
  8882  001D34  CFDD F057          	movff	postdec2,create_chain@fs+1
  8883  001D38  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8884  001D3C  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8885  001D40  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8886  001D44  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8887  001D48  ECF5  F019         	call	_create_chain	;wreg free
  8888  001D4C  C056  F090         	movff	?_create_chain,f_lseek@clst
  8889  001D50  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8890  001D54  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8891  001D58  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8892                           
  8893                           ;ff.c: 3139:       if (clst == 0) {
  8894  001D5C  0100               	movlb	0	; () banked
  8895  001D5E  5190               	movf	f_lseek@clst& (0+255),w,b
  8896  001D60  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8897  001D62  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8898  001D64  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8899  001D66  A4D8               	btfss	status,2,c
  8900  001D68  D023               	goto	l6228
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;ff.c: 3140:        ofs = bcs; break;
  8904  001D6A  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8905  001D6E  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8906  001D72  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8907  001D76  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8908  001D7A  D06E               	goto	u8240
  8909  001D7C                     l6226:
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8913  001D7C  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8914  001D80  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8915  001D84  CFDE F03B          	movff	postinc2,get_fat@fs
  8916  001D88  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8917  001D8C  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8918  001D90  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8919  001D94  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8920  001D98  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8921  001D9C  EC59  F016         	call	_get_fat	;wreg free
  8922  001DA0  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8923  001DA4  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8924  001DA8  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8925  001DAC  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8926  001DB0                     l6228:
  8927                           
  8928                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8929  001DB0  0100               	movlb	0	; () banked
  8930  001DB2  2990               	incf	f_lseek@clst& (0+255),w,b
  8931  001DB4  E107               	bnz	l6236
  8932  001DB6  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8933  001DB8  E105               	bnz	l6236
  8934  001DBA  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8935  001DBC  E103               	bnz	l6236
  8936  001DBE  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8937  001DC0  B4D8               	btfsc	status,2,c
  8938  001DC2  D77D               	goto	u8170
  8939  001DC4                     l6236:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8943  001DC4  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8944  001DC6  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8945  001DC8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8946  001DCA  E104               	bnz	u8220
  8947  001DCC  0E02               	movlw	2
  8948  001DCE  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8949  001DD0  A0D8               	btfss	status,0,c
  8950  001DD2  D762               	goto	u8160
  8951  001DD4                     u8220:
  8952                           
  8953                           ; BSR set to: 0
  8954  001DD4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8955  001DD8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8956  001DDC  EE10 F012          	lfsr	1,18
  8957  001DE0  50DE               	movf	postinc2,w,c
  8958  001DE2  26E1               	addwf	fsr1l,f,c
  8959  001DE4  50DD               	movf	postdec2,w,c
  8960  001DE6  22E2               	addwfc	fsr1h,f,c
  8961  001DE8  50E6               	movf	postinc1,w,c
  8962  001DEA  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8963  001DEC  50E6               	movf	postinc1,w,c
  8964  001DEE  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8965  001DF0  50E6               	movf	postinc1,w,c
  8966  001DF2  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8967  001DF4  50E6               	movf	postinc1,w,c
  8968  001DF6  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8969  001DF8  B0D8               	btfsc	status,0,c
  8970  001DFA  D74E               	goto	u8160
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;ff.c: 3147:      fp->clust = clst;
  8974                           
  8975                           ; BSR set to: 0
  8976  001DFC  EE20 F012          	lfsr	2,18
  8977  001E00  516D               	movf	f_lseek@fp& (0+255),w,b
  8978  001E02  26D9               	addwf	fsr2l,f,c
  8979  001E04  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8980  001E06  22DA               	addwfc	fsr2h,f,c
  8981  001E08  C090  FFDE         	movff	f_lseek@clst,postinc2
  8982  001E0C  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8983  001E10  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8984  001E14  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8985                           
  8986                           ;ff.c: 3148:      fp->fptr += bcs;
  8987  001E18  EE20 F006          	lfsr	2,6
  8988  001E1C  516D               	movf	f_lseek@fp& (0+255),w,b
  8989  001E1E  26D9               	addwf	fsr2l,f,c
  8990  001E20  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8991  001E22  22DA               	addwfc	fsr2h,f,c
  8992  001E24  518C               	movf	f_lseek@bcs& (0+255),w,b
  8993  001E26  26DE               	addwf	postinc2,f,c
  8994  001E28  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8995  001E2A  22DE               	addwfc	postinc2,f,c
  8996  001E2C  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8997  001E2E  22DE               	addwfc	postinc2,f,c
  8998  001E30  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8999  001E32  22DE               	addwfc	postinc2,f,c
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;ff.c: 3149:      ofs -= bcs;
  9003  001E34  518C               	movf	f_lseek@bcs& (0+255),w,b
  9004  001E36  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  9005  001E38  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  9006  001E3A  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  9007  001E3C  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  9008  001E3E  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  9009  001E40  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  9010  001E42  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  9011  001E44                     l6250:
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;ff.c: 3135:     while (ofs > bcs) {
  9015  001E44  516F               	movf	f_lseek@ofs& (0+255),w,b
  9016  001E46  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  9017  001E48  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9018  001E4A  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  9019  001E4C  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9020  001E4E  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  9021  001E50  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9022  001E52  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  9023  001E54  A0D8               	btfss	status,0,c
  9024  001E56  D760               	goto	l6218
  9025  001E58                     u8240:
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;ff.c: 3151:     fp->fptr += ofs;
  9029  001E58  EE20 F006          	lfsr	2,6
  9030  001E5C  516D               	movf	f_lseek@fp& (0+255),w,b
  9031  001E5E  26D9               	addwf	fsr2l,f,c
  9032  001E60  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9033  001E62  22DA               	addwfc	fsr2h,f,c
  9034  001E64  516F               	movf	f_lseek@ofs& (0+255),w,b
  9035  001E66  26DE               	addwf	postinc2,f,c
  9036  001E68  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9037  001E6A  22DE               	addwfc	postinc2,f,c
  9038  001E6C  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9039  001E6E  22DE               	addwfc	postinc2,f,c
  9040  001E70  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9041  001E72  22DE               	addwfc	postinc2,f,c
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  9045  001E74  0EFF               	movlw	255
  9046  001E76  156F               	andwf	f_lseek@ofs& (0+255),w,b
  9047  001E78  6F73               	movwf	??_f_lseek& (0+255),b
  9048  001E7A  0E01               	movlw	1
  9049  001E7C  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  9050  001E7E  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  9051  001E80  0E00               	movlw	0
  9052  001E82  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  9053  001E84  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  9054  001E86  0E00               	movlw	0
  9055  001E88  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  9056  001E8A  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  9057  001E8C  5173               	movf	??_f_lseek& (0+255),w,b
  9058  001E8E  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  9059  001E90  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  9060  001E92  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  9061  001E94  B4D8               	btfsc	status,2,c
  9062  001E96  D03A               	goto	l6268
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  9066  001E98  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9067  001E9C  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9068  001EA0  CFDE F00D          	movff	postinc2,clust2sect@fs
  9069  001EA4  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  9070  001EA8  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  9071  001EAC  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  9072  001EB0  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  9073  001EB4  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  9074  001EB8  ECFC  F026         	call	_clust2sect	;wreg free
  9075  001EBC  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  9076  001EC0  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  9077  001EC4  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  9078  001EC8  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  9079                           
  9080                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  9081  001ECC  0100               	movlb	0	; () banked
  9082  001ECE  5188               	movf	f_lseek@nsect& (0+255),w,b
  9083  001ED0  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  9084  001ED2  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  9085  001ED4  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  9086  001ED6  B4D8               	btfsc	status,2,c
  9087  001ED8  D6DF               	goto	u8160
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  9091                           
  9092                           ; BSR set to: 0
  9093  001EDA  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  9094  001EDE  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  9095  001EE2  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  9096  001EE6  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  9097  001EEA  0E0A               	movlw	10
  9098  001EEC  D005               	goto	u8270
  9099  001EEE                     u8275:
  9100  001EEE  90D8               	bcf	status,0,c
  9101  001EF0  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  9102  001EF2  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  9103  001EF4  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  9104  001EF6  3373               	rrcf	??_f_lseek& (0+255),f,b
  9105  001EF8                     u8270:
  9106  001EF8  2EE8               	decfsz	wreg,f,c
  9107  001EFA  D7F9               	goto	u8275
  9108  001EFC  5173               	movf	??_f_lseek& (0+255),w,b
  9109  001EFE  2788               	addwf	f_lseek@nsect& (0+255),f,b
  9110  001F00  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  9111  001F02  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  9112  001F04  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  9113  001F06  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  9114  001F08  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  9115  001F0A  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  9116  001F0C                     l6268:
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  9120  001F0C  EE20 F006          	lfsr	2,6
  9121  001F10  516D               	movf	f_lseek@fp& (0+255),w,b
  9122  001F12  26D9               	addwf	fsr2l,f,c
  9123  001F14  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9124  001F16  22DA               	addwfc	fsr2h,f,c
  9125  001F18  0EFF               	movlw	255
  9126  001F1A  14DE               	andwf	postinc2,w,c
  9127  001F1C  6F73               	movwf	??_f_lseek& (0+255),b
  9128  001F1E  0E01               	movlw	1
  9129  001F20  14DE               	andwf	postinc2,w,c
  9130  001F22  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  9131  001F24  0E00               	movlw	0
  9132  001F26  14DE               	andwf	postinc2,w,c
  9133  001F28  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  9134  001F2A  0E00               	movlw	0
  9135  001F2C  14DE               	andwf	postinc2,w,c
  9136  001F2E  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  9137  001F30  5173               	movf	??_f_lseek& (0+255),w,b
  9138  001F32  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  9139  001F34  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  9140  001F36  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  9141  001F38  B4D8               	btfsc	status,2,c
  9142  001F3A  D021               	goto	l6274
  9143                           
  9144                           ; BSR set to: 0
  9145  001F3C  EE20 F016          	lfsr	2,22
  9146  001F40  516D               	movf	f_lseek@fp& (0+255),w,b
  9147  001F42  26D9               	addwf	fsr2l,f,c
  9148  001F44  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9149  001F46  22DA               	addwfc	fsr2h,f,c
  9150  001F48  5188               	movf	f_lseek@nsect& (0+255),w,b
  9151  001F4A  18DE               	xorwf	postinc2,w,c
  9152  001F4C  E10A               	bnz	u8290
  9153  001F4E  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  9154  001F50  18DE               	xorwf	postinc2,w,c
  9155  001F52  E107               	bnz	u8290
  9156  001F54  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  9157  001F56  18DE               	xorwf	postinc2,w,c
  9158  001F58  E104               	bnz	u8290
  9159  001F5A  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  9160  001F5C  18DE               	xorwf	postinc2,w,c
  9161  001F5E  B4D8               	btfsc	status,2,c
  9162  001F60  D00E               	goto	l6274
  9163  001F62                     u8290:
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;ff.c: 3171:    fp->dsect = nsect;
  9167  001F62  EE20 F016          	lfsr	2,22
  9168  001F66  516D               	movf	f_lseek@fp& (0+255),w,b
  9169  001F68  26D9               	addwf	fsr2l,f,c
  9170  001F6A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9171  001F6C  22DA               	addwfc	fsr2h,f,c
  9172  001F6E  C088  FFDE         	movff	f_lseek@nsect,postinc2
  9173  001F72  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  9174  001F76  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  9175  001F7A  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  9176  001F7E                     l6274:
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  9180  001F7E  EE20 F006          	lfsr	2,6
  9181  001F82  516D               	movf	f_lseek@fp& (0+255),w,b
  9182  001F84  26D9               	addwf	fsr2l,f,c
  9183  001F86  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9184  001F88  22DA               	addwfc	fsr2h,f,c
  9185  001F8A  EE10 F00A          	lfsr	1,10
  9186  001F8E  516D               	movf	f_lseek@fp& (0+255),w,b
  9187  001F90  26E1               	addwf	fsr1l,f,c
  9188  001F92  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9189  001F94  22E2               	addwfc	fsr1h,f,c
  9190  001F96  50DE               	movf	postinc2,w,c
  9191  001F98  5CE6               	subwf	postinc1,w,c
  9192  001F9A  50DE               	movf	postinc2,w,c
  9193  001F9C  58E6               	subwfb	postinc1,w,c
  9194  001F9E  50DE               	movf	postinc2,w,c
  9195  001FA0  58E6               	subwfb	postinc1,w,c
  9196  001FA2  50DE               	movf	postinc2,w,c
  9197  001FA4  58E6               	subwfb	postinc1,w,c
  9198  001FA6  B0D8               	btfsc	status,0,c
  9199  001FA8  D521               	goto	u8070
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  9203  001FAA  EE20 F006          	lfsr	2,6
  9204  001FAE  516D               	movf	f_lseek@fp& (0+255),w,b
  9205  001FB0  26D9               	addwf	fsr2l,f,c
  9206  001FB2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9207  001FB4  22DA               	addwfc	fsr2h,f,c
  9208  001FB6  EE10 F00A          	lfsr	1,10
  9209  001FBA  516D               	movf	f_lseek@fp& (0+255),w,b
  9210  001FBC  26E1               	addwf	fsr1l,f,c
  9211  001FBE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9212  001FC0  22E2               	addwfc	fsr1h,f,c
  9213  001FC2  CFDE FFE6          	movff	postinc2,postinc1
  9214  001FC6  CFDE FFE6          	movff	postinc2,postinc1
  9215  001FCA  CFDE FFE6          	movff	postinc2,postinc1
  9216  001FCE  CFDE FFE6          	movff	postinc2,postinc1
  9217                           
  9218                           ; BSR set to: 0
  9219                           ;ff.c: 3176:    fp->flag |= 0x20;
  9220  001FD2  EE20 F004          	lfsr	2,4
  9221  001FD6  516D               	movf	f_lseek@fp& (0+255),w,b
  9222  001FD8  26D9               	addwf	fsr2l,f,c
  9223  001FDA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9224  001FDC  22DA               	addwfc	fsr2h,f,c
  9225  001FDE  0E00               	movlw	0
  9226  001FE0  8ADB               	bsf	plusw2,5,c
  9227  001FE2  D504               	goto	u8070
  9228  001FE4                     __end_of_f_lseek:
  9229                           	opt callstack 0
  9230                           
  9231 ;; *************** function _create_chain *****************
  9232 ;; Defined at:
  9233 ;;		line 990 in file "ff.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;  fs              2   85[COMRAM] PTR struct .
  9236 ;;		 -> NULL(0), FatFs(558), 
  9237 ;;  clst            4   87[COMRAM] unsigned long 
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;  cs              4    9[BANK0 ] unsigned long 
  9240 ;;  ncl             4    5[BANK0 ] unsigned long 
  9241 ;;  scl             4    1[BANK0 ] unsigned long 
  9242 ;;  res             1    0[BANK0 ] enum E93
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  4   85[COMRAM] unsigned long 
  9245 ;; Registers used:
  9246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9247 ;; Tracked objects:
  9248 ;;		On entry : 0/0
  9249 ;;		On exit  : 0/0
  9250 ;;		Unchanged: 0/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9252 ;;      Params:         6       0       0       0       0       0       0       0       0
  9253 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9254 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9255 ;;      Totals:        10      13       0       0       0       0       0       0       0
  9256 ;;Total ram usage:       23 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    9
  9259 ;; This function calls:
  9260 ;;		_get_fat
  9261 ;;		_put_fat
  9262 ;; This function is called by:
  9263 ;;		_dir_next
  9264 ;;		_f_write
  9265 ;;		_f_lseek
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           	psect	text22
  9270  0033EA                     __ptext22:
  9271                           	opt callstack 0
  9272  0033EA                     _create_chain:
  9273                           	opt callstack 20
  9274                           
  9275                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  9276                           
  9277                           ; BSR set to: 0
  9278                           ;incstack = 0
  9279  0033EA  5058               	movf	create_chain@clst,w,c
  9280  0033EC  1059               	iorwf	create_chain@clst+1,w,c
  9281  0033EE  105A               	iorwf	create_chain@clst+2,w,c
  9282  0033F0  105B               	iorwf	create_chain@clst+3,w,c
  9283  0033F2  A4D8               	btfss	status,2,c
  9284  0033F4  D02E               	goto	l4610
  9285                           
  9286                           ;ff.c: 1000:   scl = fs->last_clust;
  9287  0033F6  EE20 F00A          	lfsr	2,10
  9288  0033FA  5056               	movf	create_chain@fs,w,c
  9289  0033FC  26D9               	addwf	fsr2l,f,c
  9290  0033FE  5057               	movf	create_chain@fs+1,w,c
  9291  003400  22DA               	addwfc	fsr2h,f,c
  9292  003402  CFDE F061          	movff	postinc2,create_chain@scl
  9293  003406  CFDE F062          	movff	postinc2,create_chain@scl+1
  9294  00340A  CFDE F063          	movff	postinc2,create_chain@scl+2
  9295  00340E  CFDE F064          	movff	postinc2,create_chain@scl+3
  9296                           
  9297                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  9298  003412  0100               	movlb	0	; () banked
  9299  003414  5161               	movf	create_chain@scl& (0+255),w,b
  9300  003416  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9301  003418  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9302  00341A  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9303  00341C  B4D8               	btfsc	status,2,c
  9304  00341E  D010               	goto	u5350
  9305                           
  9306                           ; BSR set to: 0
  9307  003420  EE20 F012          	lfsr	2,18
  9308  003424  5056               	movf	create_chain@fs,w,c
  9309  003426  26D9               	addwf	fsr2l,f,c
  9310  003428  5057               	movf	create_chain@fs+1,w,c
  9311  00342A  22DA               	addwfc	fsr2h,f,c
  9312  00342C  50DE               	movf	postinc2,w,c
  9313  00342E  5D61               	subwf	create_chain@scl& (0+255),w,b
  9314  003430  50DE               	movf	postinc2,w,c
  9315  003432  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9316  003434  50DE               	movf	postinc2,w,c
  9317  003436  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9318  003438  50DE               	movf	postinc2,w,c
  9319  00343A  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9320  00343C  A0D8               	btfss	status,0,c
  9321  00343E  D05B               	goto	l408
  9322  003440                     u5350:
  9323                           
  9324                           ; BSR set to: 0
  9325  003440  0E01               	movlw	1
  9326  003442  6F61               	movwf	create_chain@scl& (0+255),b
  9327  003444  0E00               	movlw	0
  9328  003446  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9329  003448  0E00               	movlw	0
  9330  00344A  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9331  00344C  0E00               	movlw	0
  9332  00344E  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9333  003450  D052               	goto	l408
  9334  003452                     l4610:
  9335                           
  9336                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9337  003452  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9338  003456  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9339  00345A  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9340  00345E  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9341  003462  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9342  003466  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9343  00346A  EC59  F016         	call	_get_fat	;wreg free
  9344  00346E  C03B  F069         	movff	?_get_fat,create_chain@cs
  9345  003472  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9346  003476  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9347  00347A  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9348                           
  9349                           ;ff.c: 1005:   if (cs < 2) return 1;
  9350  00347E  0100               	movlb	0	; () banked
  9351  003480  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9352  003482  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9353  003484  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9354  003486  E10D               	bnz	l4618
  9355  003488  0E02               	movlw	2
  9356  00348A  5D69               	subwf	create_chain@cs& (0+255),w,b
  9357  00348C  B0D8               	btfsc	status,0,c
  9358  00348E  D009               	goto	l4618
  9359                           
  9360                           ; BSR set to: 0
  9361  003490  0E01               	movlw	1
  9362  003492  6E56               	movwf	?_create_chain,c
  9363  003494  0E00               	movlw	0
  9364  003496  6E57               	movwf	?_create_chain+1,c
  9365  003498  0E00               	movlw	0
  9366  00349A  6E58               	movwf	?_create_chain+2,c
  9367  00349C  0E00               	movlw	0
  9368  00349E  6E59               	movwf	?_create_chain+3,c
  9369  0034A0  0012               	return	
  9370  0034A2                     l4618:
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9374  0034A2  2969               	incf	create_chain@cs& (0+255),w,b
  9375  0034A4  E110               	bnz	l4622
  9376  0034A6  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9377  0034A8  E10E               	bnz	l4622
  9378  0034AA  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9379  0034AC  E10C               	bnz	l4622
  9380  0034AE  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9381  0034B0  A4D8               	btfss	status,2,c
  9382  0034B2  D009               	goto	l4622
  9383  0034B4                     u5370:
  9384                           
  9385                           ; BSR set to: 0
  9386  0034B4  C069  F056         	movff	create_chain@cs,?_create_chain
  9387  0034B8  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9388  0034BC  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9389  0034C0  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9390  0034C4  0012               	return	
  9391  0034C6                     l4622:
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9395  0034C6  EE20 F012          	lfsr	2,18
  9396  0034CA  5056               	movf	create_chain@fs,w,c
  9397  0034CC  26D9               	addwf	fsr2l,f,c
  9398  0034CE  5057               	movf	create_chain@fs+1,w,c
  9399  0034D0  22DA               	addwfc	fsr2h,f,c
  9400  0034D2  50DE               	movf	postinc2,w,c
  9401  0034D4  5D69               	subwf	create_chain@cs& (0+255),w,b
  9402  0034D6  50DE               	movf	postinc2,w,c
  9403  0034D8  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9404  0034DA  50DE               	movf	postinc2,w,c
  9405  0034DC  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9406  0034DE  50DE               	movf	postinc2,w,c
  9407  0034E0  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9408  0034E2  A0D8               	btfss	status,0,c
  9409  0034E4  D7E7               	goto	u5370
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;ff.c: 1008:   scl = clst;
  9413  0034E6  C058  F061         	movff	create_chain@clst,create_chain@scl
  9414  0034EA  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9415  0034EE  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9416  0034F2  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9417  0034F6                     l408:
  9418                           
  9419                           ; BSR set to: 0
  9420                           ;ff.c: 1011:  ncl = scl;
  9421  0034F6  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9422  0034FA  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9423  0034FE  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9424  003502  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9425  003506                     l4626:
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;ff.c: 1013:   ncl++;
  9429  003506  0E01               	movlw	1
  9430  003508  2765               	addwf	create_chain@ncl& (0+255),f,b
  9431  00350A  0E00               	movlw	0
  9432  00350C  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9433  00350E  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9434  003510  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9438  003512  EE20 F012          	lfsr	2,18
  9439  003516  5056               	movf	create_chain@fs,w,c
  9440  003518  26D9               	addwf	fsr2l,f,c
  9441  00351A  5057               	movf	create_chain@fs+1,w,c
  9442  00351C  22DA               	addwfc	fsr2h,f,c
  9443  00351E  50DE               	movf	postinc2,w,c
  9444  003520  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9445  003522  50DE               	movf	postinc2,w,c
  9446  003524  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9447  003526  50DE               	movf	postinc2,w,c
  9448  003528  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9449  00352A  50DE               	movf	postinc2,w,c
  9450  00352C  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9451  00352E  A0D8               	btfss	status,0,c
  9452  003530  D019               	goto	l4638
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;ff.c: 1015:    ncl = 2;
  9456  003532  0E02               	movlw	2
  9457  003534  6F65               	movwf	create_chain@ncl& (0+255),b
  9458  003536  0E00               	movlw	0
  9459  003538  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9460  00353A  0E00               	movlw	0
  9461  00353C  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9462  00353E  0E00               	movlw	0
  9463  003540  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9467  003542  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9468  003544  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9469  003546  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9470  003548  E10D               	bnz	l4638
  9471  00354A  0E02               	movlw	2
  9472  00354C  5D61               	subwf	create_chain@scl& (0+255),w,b
  9473  00354E  B0D8               	btfsc	status,0,c
  9474  003550  D009               	goto	l4638
  9475  003552                     u5400:
  9476                           
  9477                           ; BSR set to: 0
  9478  003552  0E00               	movlw	0
  9479  003554  6E56               	movwf	?_create_chain,c
  9480  003556  0E00               	movlw	0
  9481  003558  6E57               	movwf	?_create_chain+1,c
  9482  00355A  0E00               	movlw	0
  9483  00355C  6E58               	movwf	?_create_chain+2,c
  9484  00355E  0E00               	movlw	0
  9485  003560  6E59               	movwf	?_create_chain+3,c
  9486  003562  0012               	return	
  9487  003564                     l4638:
  9488                           
  9489                           ; BSR set to: 0
  9490                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9491  003564  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9492  003568  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9493  00356C  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9494  003570  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9495  003574  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9496  003578  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9497  00357C  EC59  F016         	call	_get_fat	;wreg free
  9498  003580  C03B  F069         	movff	?_get_fat,create_chain@cs
  9499  003584  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9500  003588  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9501  00358C  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9502                           
  9503                           ;ff.c: 1019:   if (cs == 0) break;
  9504  003590  0100               	movlb	0	; () banked
  9505  003592  5169               	movf	create_chain@cs& (0+255),w,b
  9506  003594  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9507  003596  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9508  003598  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9509  00359A  B4D8               	btfsc	status,2,c
  9510  00359C  D01D               	goto	l4654
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9514  00359E  2969               	incf	create_chain@cs& (0+255),w,b
  9515  0035A0  E107               	bnz	u5420
  9516  0035A2  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9517  0035A4  E105               	bnz	u5420
  9518  0035A6  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9519  0035A8  E103               	bnz	u5420
  9520  0035AA  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9521  0035AC  B4D8               	btfsc	status,2,c
  9522  0035AE  D782               	goto	u5370
  9523  0035B0                     u5420:
  9524                           
  9525                           ; BSR set to: 0
  9526  0035B0  0569               	decf	create_chain@cs& (0+255),w,b
  9527  0035B2  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9528  0035B4  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9529  0035B6  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9530  0035B8  B4D8               	btfsc	status,2,c
  9531  0035BA  D77C               	goto	u5370
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9535  0035BC  5161               	movf	create_chain@scl& (0+255),w,b
  9536  0035BE  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9537  0035C0  E1A2               	bnz	l4626
  9538  0035C2  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9539  0035C4  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9540  0035C6  E19F               	bnz	l4626
  9541  0035C8  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9542  0035CA  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9543  0035CC  E19C               	bnz	l4626
  9544  0035CE  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9545  0035D0  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9546  0035D2  B4D8               	btfsc	status,2,c
  9547  0035D4  D7BE               	goto	u5400
  9548  0035D6  D797               	goto	l4626
  9549  0035D8                     l4654:
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9553  0035D8  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9554  0035DC  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9555  0035E0  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9556  0035E4  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9557  0035E8  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9558  0035EC  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9559  0035F0  0EFF               	movlw	255
  9560  0035F2  6E41               	movwf	put_fat@val,c
  9561  0035F4  0EFF               	movlw	255
  9562  0035F6  6E42               	movwf	put_fat@val+1,c
  9563  0035F8  0EFF               	movlw	255
  9564  0035FA  6E43               	movwf	put_fat@val+2,c
  9565  0035FC  0E0F               	movlw	15
  9566  0035FE  6E44               	movwf	put_fat@val+3,c
  9567  003600  EC41  F012         	call	_put_fat	;wreg free
  9568  003604  0100               	movlb	0	; () banked
  9569  003606  6F60               	movwf	create_chain@res& (0+255),b
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9573  003608  5160               	movf	create_chain@res& (0+255),w,b
  9574  00360A  A4D8               	btfss	status,2,c
  9575  00360C  D01E               	goto	l4662
  9576                           
  9577                           ; BSR set to: 0
  9578  00360E  5058               	movf	create_chain@clst,w,c
  9579  003610  1059               	iorwf	create_chain@clst+1,w,c
  9580  003612  105A               	iorwf	create_chain@clst+2,w,c
  9581  003614  105B               	iorwf	create_chain@clst+3,w,c
  9582  003616  B4D8               	btfsc	status,2,c
  9583  003618  D018               	goto	l4662
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9587  00361A  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9588  00361E  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9589  003622  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9590  003626  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9591  00362A  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9592  00362E  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9593  003632  C065  F041         	movff	create_chain@ncl,put_fat@val
  9594  003636  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9595  00363A  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9596  00363E  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9597  003642  EC41  F012         	call	_put_fat	;wreg free
  9598  003646  0100               	movlb	0	; () banked
  9599  003648  6F60               	movwf	create_chain@res& (0+255),b
  9600  00364A                     l4662:
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;ff.c: 1029:  if (res == FR_OK) {
  9604  00364A  5160               	movf	create_chain@res& (0+255),w,b
  9605  00364C  A4D8               	btfss	status,2,c
  9606  00364E  D031               	goto	l4668
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;ff.c: 1030:   fs->last_clust = ncl;
  9610  003650  EE20 F00A          	lfsr	2,10
  9611  003654  5056               	movf	create_chain@fs,w,c
  9612  003656  26D9               	addwf	fsr2l,f,c
  9613  003658  5057               	movf	create_chain@fs+1,w,c
  9614  00365A  22DA               	addwfc	fsr2h,f,c
  9615  00365C  C065  FFDE         	movff	create_chain@ncl,postinc2
  9616  003660  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9617  003664  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9618  003668  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9619                           
  9620                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9621  00366C  EE20 F00E          	lfsr	2,14
  9622  003670  5056               	movf	create_chain@fs,w,c
  9623  003672  26D9               	addwf	fsr2l,f,c
  9624  003674  5057               	movf	create_chain@fs+1,w,c
  9625  003676  22DA               	addwfc	fsr2h,f,c
  9626  003678  28DE               	incf	postinc2,w,c
  9627  00367A  E107               	bnz	u5480
  9628  00367C  28DE               	incf	postinc2,w,c
  9629  00367E  E105               	bnz	u5480
  9630  003680  28DE               	incf	postinc2,w,c
  9631  003682  E103               	bnz	u5480
  9632  003684  28DE               	incf	postinc2,w,c
  9633  003686  B4D8               	btfsc	status,2,c
  9634  003688  D024               	goto	l425
  9635  00368A                     u5480:
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;ff.c: 1032:    fs->free_clust--;
  9639  00368A  EE20 F00E          	lfsr	2,14
  9640  00368E  5056               	movf	create_chain@fs,w,c
  9641  003690  26D9               	addwf	fsr2l,f,c
  9642  003692  5057               	movf	create_chain@fs+1,w,c
  9643  003694  22DA               	addwfc	fsr2h,f,c
  9644  003696  06DE               	decf	postinc2,f,c
  9645  003698  0E00               	movlw	0
  9646  00369A  5ADE               	subwfb	postinc2,f,c
  9647  00369C  5ADE               	subwfb	postinc2,f,c
  9648  00369E  5ADE               	subwfb	postinc2,f,c
  9649                           
  9650                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9651  0036A0  EE20 F005          	lfsr	2,5
  9652  0036A4  5056               	movf	create_chain@fs,w,c
  9653  0036A6  26D9               	addwf	fsr2l,f,c
  9654  0036A8  5057               	movf	create_chain@fs+1,w,c
  9655  0036AA  22DA               	addwfc	fsr2h,f,c
  9656  0036AC  0E00               	movlw	0
  9657  0036AE  80DB               	bsf	plusw2,0,c
  9658  0036B0  D010               	goto	l425
  9659  0036B2                     l4668:
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9663  0036B2  0560               	decf	create_chain@res& (0+255),w,b
  9664  0036B4  B4D8               	btfsc	status,2,c
  9665  0036B6  D009               	goto	l427
  9666                           
  9667                           ; BSR set to: 0
  9668  0036B8  0E01               	movlw	1
  9669  0036BA  6F65               	movwf	create_chain@ncl& (0+255),b
  9670  0036BC  0E00               	movlw	0
  9671  0036BE  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9672  0036C0  0E00               	movlw	0
  9673  0036C2  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9674  0036C4  0E00               	movlw	0
  9675  0036C6  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9676  0036C8  D004               	goto	l425
  9677  0036CA                     l427:
  9678                           
  9679                           ; BSR set to: 0
  9680  0036CA  6965               	setf	create_chain@ncl& (0+255),b
  9681  0036CC  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9682  0036CE  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9683  0036D0  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9684  0036D2                     l425:
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;ff.c: 1039:  return ncl;
  9688  0036D2  C065  F056         	movff	create_chain@ncl,?_create_chain
  9689  0036D6  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9690  0036DA  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9691  0036DE  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9692                           
  9693                           ; BSR set to: 0
  9694  0036E2  0012               	return		;funcret
  9695  0036E4                     __end_of_create_chain:
  9696                           	opt callstack 0
  9697                           
  9698 ;; *************** function _put_fat *****************
  9699 ;; Defined at:
  9700 ;;		line 873 in file "ff.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  fs              2   58[COMRAM] PTR struct .
  9703 ;;		 -> NULL(0), FatFs(558), 
  9704 ;;  clst            4   60[COMRAM] unsigned long 
  9705 ;;  val             4   64[COMRAM] unsigned long 
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;  p               2   83[COMRAM] PTR unsigned char 
  9708 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9709 ;;  bc              2   80[COMRAM] unsigned short 
  9710 ;;  res             1   82[COMRAM] enum E93
  9711 ;; Return value:  Size  Location     Type
  9712 ;;                  1    wreg      enum E93
  9713 ;; Registers used:
  9714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9720 ;;      Params:        10       0       0       0       0       0       0       0       0
  9721 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9722 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9723 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9724 ;;Total ram usage:       27 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    8
  9727 ;; This function calls:
  9728 ;;		_move_window
  9729 ;; This function is called by:
  9730 ;;		_remove_chain
  9731 ;;		_create_chain
  9732 ;; This function uses a non-reentrant model
  9733 ;;
  9734                           
  9735                           	psect	text23
  9736  002482                     __ptext23:
  9737                           	opt callstack 0
  9738  002482                     _put_fat:
  9739                           	opt callstack 20
  9740                           
  9741                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;incstack = 0
  9745  002482  5040               	movf	put_fat@clst+3,w,c
  9746  002484  103F               	iorwf	put_fat@clst+2,w,c
  9747  002486  103E               	iorwf	put_fat@clst+1,w,c
  9748  002488  E104               	bnz	u5170
  9749  00248A  0E02               	movlw	2
  9750  00248C  5C3D               	subwf	put_fat@clst,w,c
  9751  00248E  A0D8               	btfss	status,0,c
  9752  002490  D010               	goto	u5180
  9753  002492                     u5170:
  9754  002492  EE20 F012          	lfsr	2,18
  9755  002496  503B               	movf	put_fat@fs,w,c
  9756  002498  26D9               	addwf	fsr2l,f,c
  9757  00249A  503C               	movf	put_fat@fs+1,w,c
  9758  00249C  22DA               	addwfc	fsr2h,f,c
  9759  00249E  50DE               	movf	postinc2,w,c
  9760  0024A0  5C3D               	subwf	put_fat@clst,w,c
  9761  0024A2  50DE               	movf	postinc2,w,c
  9762  0024A4  583E               	subwfb	put_fat@clst+1,w,c
  9763  0024A6  50DE               	movf	postinc2,w,c
  9764  0024A8  583F               	subwfb	put_fat@clst+2,w,c
  9765  0024AA  50DE               	movf	postinc2,w,c
  9766  0024AC  5840               	subwfb	put_fat@clst+3,w,c
  9767  0024AE  A0D8               	btfss	status,0,c
  9768  0024B0  D1E5               	goto	l4560
  9769  0024B2                     u5180:
  9770                           
  9771                           ;ff.c: 885:   res = FR_INT_ERR;
  9772  0024B2  0E02               	movlw	2
  9773  0024B4  6E53               	movwf	put_fat@res,c
  9774                           
  9775                           ;ff.c: 887:  } else {
  9776  0024B6  D1F8               	goto	l4562
  9777  0024B8                     l369:
  9778                           
  9779                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9780  0024B8  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9781  0024BC  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9782  0024C0  90D8               	bcf	status,0,c
  9783  0024C2  3052               	rrcf	put_fat@bc+1,w,c
  9784  0024C4  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9785  0024C6  3051               	rrcf	put_fat@bc,w,c
  9786  0024C8  6E45               	movwf	??_put_fat& (0+255),c
  9787  0024CA  5045               	movf	??_put_fat,w,c
  9788  0024CC  2651               	addwf	put_fat@bc,f,c
  9789  0024CE  5046               	movf	??_put_fat+1,w,c
  9790  0024D0  2252               	addwfc	put_fat@bc+1,f,c
  9791                           
  9792                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9793  0024D2  C03B  F030         	movff	put_fat@fs,move_window@fs
  9794  0024D6  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9795  0024DA  EE20 F01E          	lfsr	2,30
  9796  0024DE  503B               	movf	put_fat@fs,w,c
  9797  0024E0  26D9               	addwf	fsr2l,f,c
  9798  0024E2  503C               	movf	put_fat@fs+1,w,c
  9799  0024E4  22DA               	addwfc	fsr2h,f,c
  9800  0024E6  CFDE F045          	movff	postinc2,??_put_fat
  9801  0024EA  CFDE F046          	movff	postinc2,??_put_fat+1
  9802  0024EE  CFDE F047          	movff	postinc2,??_put_fat+2
  9803  0024F2  CFDE F048          	movff	postinc2,??_put_fat+3
  9804  0024F6  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9805  0024FA  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9806  0024FE  0E09               	movlw	9
  9807  002500  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9808  002502                     u5195:
  9809  002502  90D8               	bcf	status,0,c
  9810  002504  324A               	rrcf	??_put_fat+5,f,c
  9811  002506  3249               	rrcf	??_put_fat+4,f,c
  9812  002508  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9813  00250A  D7FB               	goto	u5195
  9814  00250C  5049               	movf	??_put_fat+4,w,c
  9815  00250E  2445               	addwf	??_put_fat,w,c
  9816  002510  6E32               	movwf	move_window@sector,c
  9817  002512  504A               	movf	??_put_fat+5,w,c
  9818  002514  2046               	addwfc	??_put_fat+1,w,c
  9819  002516  6E33               	movwf	move_window@sector+1,c
  9820  002518  0E00               	movlw	0
  9821  00251A  2047               	addwfc	??_put_fat+2,w,c
  9822  00251C  6E34               	movwf	move_window@sector+2,c
  9823  00251E  0E00               	movlw	0
  9824  002520  2048               	addwfc	??_put_fat+3,w,c
  9825  002522  6E35               	movwf	move_window@sector+3,c
  9826  002524  ECB1  F027         	call	_move_window	;wreg free
  9827  002528  6E53               	movwf	put_fat@res,c
  9828                           
  9829                           ;ff.c: 892:    if (res != FR_OK) break;
  9830  00252A  5053               	movf	put_fat@res,w,c
  9831  00252C  A4D8               	btfss	status,2,c
  9832  00252E  D1BC               	goto	l4562
  9833                           
  9834                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9835  002530  0EFF               	movlw	255
  9836  002532  6E45               	movwf	??_put_fat& (0+255),c
  9837  002534  0E01               	movlw	1
  9838  002536  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9839  002538  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9840  00253C  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9841  002540  5045               	movf	??_put_fat,w,c
  9842  002542  1647               	andwf	??_put_fat+2,f,c
  9843  002544  5046               	movf	??_put_fat+1,w,c
  9844  002546  1648               	andwf	??_put_fat+3,f,c
  9845  002548  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9846  00254C  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9847  002550  5047               	movf	??_put_fat+2,w,c
  9848  002552  2649               	addwf	??_put_fat+4,f,c
  9849  002554  5048               	movf	??_put_fat+3,w,c
  9850  002556  224A               	addwfc	??_put_fat+5,f,c
  9851  002558  0E2E               	movlw	46
  9852  00255A  2449               	addwf	??_put_fat+4,w,c
  9853  00255C  6E54               	movwf	put_fat@p,c
  9854  00255E  0E00               	movlw	0
  9855  002560  204A               	addwfc	??_put_fat+5,w,c
  9856  002562  6E55               	movwf	put_fat@p+1,c
  9857  002564  4A51               	infsnz	put_fat@bc,f,c
  9858  002566  2A52               	incf	put_fat@bc+1,f,c
  9859                           
  9860                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9861  002568  B03D               	btfsc	put_fat@clst,0,c
  9862  00256A  D004               	goto	l4514
  9863  00256C  C041  F04D         	movff	put_fat@val,_put_fat$678
  9864  002570  6A4E               	clrf	_put_fat$678+1,c
  9865  002572  D01A               	goto	l4516
  9866  002574                     l4514:
  9867  002574  5041               	movf	put_fat@val,w,c
  9868  002576  6E45               	movwf	??_put_fat& (0+255),c
  9869  002578  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9870  00257A  3A45               	swapf	??_put_fat,f,c
  9871  00257C  3A46               	swapf	??_put_fat+1,f,c
  9872  00257E  0EF0               	movlw	240
  9873  002580  1646               	andwf	??_put_fat+1,f,c
  9874  002582  5045               	movf	??_put_fat,w,c
  9875  002584  0B0F               	andlw	15
  9876  002586  1246               	iorwf	??_put_fat+1,f,c
  9877  002588  0EF0               	movlw	240
  9878  00258A  1645               	andwf	??_put_fat,f,c
  9879  00258C  C054  FFD9         	movff	put_fat@p,fsr2l
  9880  002590  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9881  002594  50DF               	movf	indf2,w,c
  9882  002596  0B0F               	andlw	15
  9883  002598  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9884  00259A  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9885  00259C  5045               	movf	??_put_fat,w,c
  9886  00259E  1047               	iorwf	??_put_fat+2,w,c
  9887  0025A0  6E4D               	movwf	_put_fat$678,c
  9888  0025A2  5046               	movf	??_put_fat+1,w,c
  9889  0025A4  1048               	iorwf	??_put_fat+3,w,c
  9890  0025A6  6E4E               	movwf	_put_fat$678+1,c
  9891  0025A8                     l4516:
  9892  0025A8  C054  FFD9         	movff	put_fat@p,fsr2l
  9893  0025AC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9894  0025B0  C04D  FFDF         	movff	_put_fat$678,indf2
  9895                           
  9896                           ;ff.c: 895:    fs->wflag = 1;
  9897  0025B4  EE20 F004          	lfsr	2,4
  9898  0025B8  503B               	movf	put_fat@fs,w,c
  9899  0025BA  26D9               	addwf	fsr2l,f,c
  9900  0025BC  503C               	movf	put_fat@fs+1,w,c
  9901  0025BE  22DA               	addwfc	fsr2h,f,c
  9902  0025C0  0E01               	movlw	1
  9903  0025C2  6EDF               	movwf	indf2,c
  9904                           
  9905                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9906  0025C4  C03B  F030         	movff	put_fat@fs,move_window@fs
  9907  0025C8  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9908  0025CC  EE20 F01E          	lfsr	2,30
  9909  0025D0  503B               	movf	put_fat@fs,w,c
  9910  0025D2  26D9               	addwf	fsr2l,f,c
  9911  0025D4  503C               	movf	put_fat@fs+1,w,c
  9912  0025D6  22DA               	addwfc	fsr2h,f,c
  9913  0025D8  CFDE F045          	movff	postinc2,??_put_fat
  9914  0025DC  CFDE F046          	movff	postinc2,??_put_fat+1
  9915  0025E0  CFDE F047          	movff	postinc2,??_put_fat+2
  9916  0025E4  CFDE F048          	movff	postinc2,??_put_fat+3
  9917  0025E8  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9918  0025EC  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9919  0025F0  0E09               	movlw	9
  9920  0025F2  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9921  0025F4                     u5225:
  9922  0025F4  90D8               	bcf	status,0,c
  9923  0025F6  324A               	rrcf	??_put_fat+5,f,c
  9924  0025F8  3249               	rrcf	??_put_fat+4,f,c
  9925  0025FA  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9926  0025FC  D7FB               	goto	u5225
  9927  0025FE  5049               	movf	??_put_fat+4,w,c
  9928  002600  2445               	addwf	??_put_fat,w,c
  9929  002602  6E32               	movwf	move_window@sector,c
  9930  002604  504A               	movf	??_put_fat+5,w,c
  9931  002606  2046               	addwfc	??_put_fat+1,w,c
  9932  002608  6E33               	movwf	move_window@sector+1,c
  9933  00260A  0E00               	movlw	0
  9934  00260C  2047               	addwfc	??_put_fat+2,w,c
  9935  00260E  6E34               	movwf	move_window@sector+2,c
  9936  002610  0E00               	movlw	0
  9937  002612  2048               	addwfc	??_put_fat+3,w,c
  9938  002614  6E35               	movwf	move_window@sector+3,c
  9939  002616  ECB1  F027         	call	_move_window	;wreg free
  9940  00261A  6E53               	movwf	put_fat@res,c
  9941                           
  9942                           ;ff.c: 897:    if (res != FR_OK) break;
  9943  00261C  5053               	movf	put_fat@res,w,c
  9944  00261E  A4D8               	btfss	status,2,c
  9945  002620  D143               	goto	l4562
  9946                           
  9947                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9948  002622  0EFF               	movlw	255
  9949  002624  6E45               	movwf	??_put_fat& (0+255),c
  9950  002626  0E01               	movlw	1
  9951  002628  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9952  00262A  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9953  00262E  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9954  002632  5045               	movf	??_put_fat,w,c
  9955  002634  1647               	andwf	??_put_fat+2,f,c
  9956  002636  5046               	movf	??_put_fat+1,w,c
  9957  002638  1648               	andwf	??_put_fat+3,f,c
  9958  00263A  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9959  00263E  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9960  002642  5047               	movf	??_put_fat+2,w,c
  9961  002644  2649               	addwf	??_put_fat+4,f,c
  9962  002646  5048               	movf	??_put_fat+3,w,c
  9963  002648  224A               	addwfc	??_put_fat+5,f,c
  9964  00264A  0E2E               	movlw	46
  9965  00264C  2449               	addwf	??_put_fat+4,w,c
  9966  00264E  6E54               	movwf	put_fat@p,c
  9967  002650  0E00               	movlw	0
  9968  002652  204A               	addwfc	??_put_fat+5,w,c
  9969  002654  6E55               	movwf	put_fat@p+1,c
  9970                           
  9971                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9972  002656  B03D               	btfsc	put_fat@clst,0,c
  9973  002658  D01B               	goto	l4532
  9974  00265A  C041  F045         	movff	put_fat@val,??_put_fat
  9975  00265E  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9976  002662  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9977  002666  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9978  00266A  C046  F045         	movff	??_put_fat+1,??_put_fat
  9979  00266E  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9980  002672  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9981  002676  6A48               	clrf	??_put_fat+3,c
  9982  002678  0E0F               	movlw	15
  9983  00267A  1645               	andwf	??_put_fat,f,c
  9984  00267C  C054  FFD9         	movff	put_fat@p,fsr2l
  9985  002680  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9986  002684  50DF               	movf	indf2,w,c
  9987  002686  0BF0               	andlw	240
  9988  002688  1045               	iorwf	??_put_fat,w,c
  9989  00268A  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9990  00268C  5049               	movf	??_put_fat+4,w,c
  9991  00268E  D012               	goto	L9
  9992  002690                     l4532:
  9993  002690  C041  F045         	movff	put_fat@val,??_put_fat
  9994  002694  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9995  002698  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9996  00269C  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9997  0026A0  0E05               	movlw	5
  9998  0026A2  D005               	goto	u5250
  9999  0026A4                     u5255:
 10000  0026A4  90D8               	bcf	status,0,c
 10001  0026A6  3248               	rrcf	??_put_fat+3,f,c
 10002  0026A8  3247               	rrcf	??_put_fat+2,f,c
 10003  0026AA  3246               	rrcf	??_put_fat+1,f,c
 10004  0026AC  3245               	rrcf	??_put_fat,f,c
 10005  0026AE                     u5250:
 10006  0026AE  2EE8               	decfsz	wreg,f,c
 10007  0026B0  D7F9               	goto	u5255
 10008  0026B2  5045               	movf	??_put_fat,w,c
 10009  0026B4                     L9:
 10010  0026B4  6E4F               	movwf	_put_fat$679,c
 10011  0026B6  6A50               	clrf	_put_fat$679+1,c
 10012  0026B8  C054  FFD9         	movff	put_fat@p,fsr2l
 10013  0026BC  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10014  0026C0  C04F  FFDF         	movff	_put_fat$679,indf2
 10015  0026C4  D0D2               	goto	l4556
 10016  0026C6                     l4536:
 10017                           
 10018                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 10019  0026C6  C03B  F030         	movff	put_fat@fs,move_window@fs
 10020  0026CA  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 10021  0026CE  EE20 F01E          	lfsr	2,30
 10022  0026D2  503B               	movf	put_fat@fs,w,c
 10023  0026D4  26D9               	addwf	fsr2l,f,c
 10024  0026D6  503C               	movf	put_fat@fs+1,w,c
 10025  0026D8  22DA               	addwfc	fsr2h,f,c
 10026  0026DA  CFDE F045          	movff	postinc2,??_put_fat
 10027  0026DE  CFDE F046          	movff	postinc2,??_put_fat+1
 10028  0026E2  CFDE F047          	movff	postinc2,??_put_fat+2
 10029  0026E6  CFDE F048          	movff	postinc2,??_put_fat+3
 10030  0026EA  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 10031  0026EE  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 10032  0026F2  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 10033  0026F6  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 10034  0026FA  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 10035  0026FE  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 10036  002702  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 10037  002706  6A4C               	clrf	??_put_fat+7,c
 10038  002708  5045               	movf	??_put_fat,w,c
 10039  00270A  2449               	addwf	??_put_fat+4,w,c
 10040  00270C  6E32               	movwf	move_window@sector,c
 10041  00270E  5046               	movf	??_put_fat+1,w,c
 10042  002710  204A               	addwfc	??_put_fat+5,w,c
 10043  002712  6E33               	movwf	move_window@sector+1,c
 10044  002714  5047               	movf	??_put_fat+2,w,c
 10045  002716  204B               	addwfc	??_put_fat+6,w,c
 10046  002718  6E34               	movwf	move_window@sector+2,c
 10047  00271A  5048               	movf	??_put_fat+3,w,c
 10048  00271C  204C               	addwfc	??_put_fat+7,w,c
 10049  00271E  6E35               	movwf	move_window@sector+3,c
 10050  002720  ECB1  F027         	call	_move_window	;wreg free
 10051  002724  6E53               	movwf	put_fat@res,c
 10052                           
 10053                           ;ff.c: 905:    if (res != FR_OK) break;
 10054  002726  5053               	movf	put_fat@res,w,c
 10055  002728  A4D8               	btfss	status,2,c
 10056  00272A  D0BE               	goto	l4562
 10057                           
 10058                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
 10059  00272C  0EFF               	movlw	255
 10060  00272E  6E45               	movwf	??_put_fat& (0+255),c
 10061  002730  0E01               	movlw	1
 10062  002732  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10063  002734  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 10064  002738  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 10065  00273C  90D8               	bcf	status,0,c
 10066  00273E  3647               	rlcf	??_put_fat+2,f,c
 10067  002740  3648               	rlcf	??_put_fat+3,f,c
 10068  002742  5045               	movf	??_put_fat,w,c
 10069  002744  1647               	andwf	??_put_fat+2,f,c
 10070  002746  5046               	movf	??_put_fat+1,w,c
 10071  002748  1648               	andwf	??_put_fat+3,f,c
 10072  00274A  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 10073  00274E  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 10074  002752  5047               	movf	??_put_fat+2,w,c
 10075  002754  2649               	addwf	??_put_fat+4,f,c
 10076  002756  5048               	movf	??_put_fat+3,w,c
 10077  002758  224A               	addwfc	??_put_fat+5,f,c
 10078  00275A  0E2E               	movlw	46
 10079  00275C  2449               	addwf	??_put_fat+4,w,c
 10080  00275E  6E54               	movwf	put_fat@p,c
 10081  002760  0E00               	movlw	0
 10082  002762  204A               	addwfc	??_put_fat+5,w,c
 10083  002764  6E55               	movwf	put_fat@p+1,c
 10084                           
 10085                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 10086  002766  C054  FFD9         	movff	put_fat@p,fsr2l
 10087  00276A  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10088  00276E  C041  FFDE         	movff	put_fat@val,postinc2
 10089  002772  C042  FFDD         	movff	put_fat@val+1,postdec2
 10090  002776  D079               	goto	l4556
 10091  002778                     l4546:
 10092                           
 10093                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 10094  002778  C03B  F030         	movff	put_fat@fs,move_window@fs
 10095  00277C  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 10096  002780  EE20 F01E          	lfsr	2,30
 10097  002784  503B               	movf	put_fat@fs,w,c
 10098  002786  26D9               	addwf	fsr2l,f,c
 10099  002788  503C               	movf	put_fat@fs+1,w,c
 10100  00278A  22DA               	addwfc	fsr2h,f,c
 10101  00278C  CFDE F045          	movff	postinc2,??_put_fat
 10102  002790  CFDE F046          	movff	postinc2,??_put_fat+1
 10103  002794  CFDE F047          	movff	postinc2,??_put_fat+2
 10104  002798  CFDE F048          	movff	postinc2,??_put_fat+3
 10105  00279C  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 10106  0027A0  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 10107  0027A4  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 10108  0027A8  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 10109  0027AC  0E08               	movlw	8
 10110  0027AE  D005               	goto	u5270
 10111  0027B0                     u5275:
 10112  0027B0  90D8               	bcf	status,0,c
 10113  0027B2  324C               	rrcf	??_put_fat+7,f,c
 10114  0027B4  324B               	rrcf	??_put_fat+6,f,c
 10115  0027B6  324A               	rrcf	??_put_fat+5,f,c
 10116  0027B8  3249               	rrcf	??_put_fat+4,f,c
 10117  0027BA                     u5270:
 10118  0027BA  2EE8               	decfsz	wreg,f,c
 10119  0027BC  D7F9               	goto	u5275
 10120  0027BE  5045               	movf	??_put_fat,w,c
 10121  0027C0  2449               	addwf	??_put_fat+4,w,c
 10122  0027C2  6E32               	movwf	move_window@sector,c
 10123  0027C4  5046               	movf	??_put_fat+1,w,c
 10124  0027C6  204A               	addwfc	??_put_fat+5,w,c
 10125  0027C8  6E33               	movwf	move_window@sector+1,c
 10126  0027CA  5047               	movf	??_put_fat+2,w,c
 10127  0027CC  204B               	addwfc	??_put_fat+6,w,c
 10128  0027CE  6E34               	movwf	move_window@sector+2,c
 10129  0027D0  5048               	movf	??_put_fat+3,w,c
 10130  0027D2  204C               	addwfc	??_put_fat+7,w,c
 10131  0027D4  6E35               	movwf	move_window@sector+3,c
 10132  0027D6  ECB1  F027         	call	_move_window	;wreg free
 10133  0027DA  6E53               	movwf	put_fat@res,c
 10134                           
 10135                           ;ff.c: 913:    if (res != FR_OK) break;
 10136  0027DC  5053               	movf	put_fat@res,w,c
 10137  0027DE  A4D8               	btfss	status,2,c
 10138  0027E0  D063               	goto	l4562
 10139                           
 10140                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 10141  0027E2  0EFF               	movlw	255
 10142  0027E4  6E45               	movwf	??_put_fat& (0+255),c
 10143  0027E6  0E01               	movlw	1
 10144  0027E8  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10145  0027EA  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 10146  0027EE  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 10147  0027F2  90D8               	bcf	status,0,c
 10148  0027F4  3647               	rlcf	??_put_fat+2,f,c
 10149  0027F6  3648               	rlcf	??_put_fat+3,f,c
 10150  0027F8  90D8               	bcf	status,0,c
 10151  0027FA  3647               	rlcf	??_put_fat+2,f,c
 10152  0027FC  3648               	rlcf	??_put_fat+3,f,c
 10153  0027FE  5045               	movf	??_put_fat,w,c
 10154  002800  1647               	andwf	??_put_fat+2,f,c
 10155  002802  5046               	movf	??_put_fat+1,w,c
 10156  002804  1648               	andwf	??_put_fat+3,f,c
 10157  002806  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 10158  00280A  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 10159  00280E  5047               	movf	??_put_fat+2,w,c
 10160  002810  2649               	addwf	??_put_fat+4,f,c
 10161  002812  5048               	movf	??_put_fat+3,w,c
 10162  002814  224A               	addwfc	??_put_fat+5,f,c
 10163  002816  0E2E               	movlw	46
 10164  002818  2449               	addwf	??_put_fat+4,w,c
 10165  00281A  6E54               	movwf	put_fat@p,c
 10166  00281C  0E00               	movlw	0
 10167  00281E  204A               	addwfc	??_put_fat+5,w,c
 10168  002820  6E55               	movwf	put_fat@p+1,c
 10169                           
 10170                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 10171  002822  C054  FFD9         	movff	put_fat@p,fsr2l
 10172  002826  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10173  00282A  0E00               	movlw	0
 10174  00282C  14DE               	andwf	postinc2,w,c
 10175  00282E  6E45               	movwf	??_put_fat& (0+255),c
 10176  002830  0E00               	movlw	0
 10177  002832  14DE               	andwf	postinc2,w,c
 10178  002834  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10179  002836  0E00               	movlw	0
 10180  002838  14DE               	andwf	postinc2,w,c
 10181  00283A  6E47               	movwf	(??_put_fat+2)& (0+255),c
 10182  00283C  0EF0               	movlw	240
 10183  00283E  14DE               	andwf	postinc2,w,c
 10184  002840  6E48               	movwf	(??_put_fat+3)& (0+255),c
 10185  002842  5045               	movf	??_put_fat,w,c
 10186  002844  1241               	iorwf	put_fat@val,f,c
 10187  002846  5046               	movf	??_put_fat+1,w,c
 10188  002848  1242               	iorwf	put_fat@val+1,f,c
 10189  00284A  5047               	movf	??_put_fat+2,w,c
 10190  00284C  1243               	iorwf	put_fat@val+2,f,c
 10191  00284E  5048               	movf	??_put_fat+3,w,c
 10192  002850  1244               	iorwf	put_fat@val+3,f,c
 10193                           
 10194                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 10195  002852  C054  FFD9         	movff	put_fat@p,fsr2l
 10196  002856  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10197  00285A  C041  FFDE         	movff	put_fat@val,postinc2
 10198  00285E  C042  FFDE         	movff	put_fat@val+1,postinc2
 10199  002862  C043  FFDE         	movff	put_fat@val+2,postinc2
 10200  002866  C044  FFDE         	movff	put_fat@val+3,postinc2
 10201  00286A                     l4556:
 10202                           
 10203                           ;ff.c: 917:    fs->wflag = 1;
 10204  00286A  EE20 F004          	lfsr	2,4
 10205  00286E  503B               	movf	put_fat@fs,w,c
 10206  002870  26D9               	addwf	fsr2l,f,c
 10207  002872  503C               	movf	put_fat@fs+1,w,c
 10208  002874  22DA               	addwfc	fsr2h,f,c
 10209  002876  0E01               	movlw	1
 10210  002878  6EDF               	movwf	indf2,c
 10211                           
 10212                           ;ff.c: 918:    break;
 10213  00287A  D016               	goto	l4562
 10214  00287C                     l4560:
 10215  00287C  C03B  FFD9         	movff	put_fat@fs,fsr2l
 10216  002880  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 10217  002884  50DF               	movf	indf2,w,c
 10218  002886  6E45               	movwf	??_put_fat& (0+255),c
 10219  002888  6A46               	clrf	(??_put_fat+1)& (0+255),c
 10220                           
 10221                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10222                           ; Switch size 1, requested type "simple"
 10223                           ; Number of cases is 1, Range of values is 0 to 0
 10224                           ; switch strategies available:
 10225                           ; Name         Instructions Cycles
 10226                           ; simple_byte            4     3 (average)
 10227                           ;	Chosen strategy is simple_byte
 10228  00288A  5046               	movf	??_put_fat+1,w,c
 10229  00288C  0A00               	xorlw	0	; case 0
 10230  00288E  A4D8               	btfss	status,2,c
 10231  002890  D610               	goto	u5180
 10232                           
 10233                           ; Switch size 1, requested type "simple"
 10234                           ; Number of cases is 3, Range of values is 1 to 3
 10235                           ; switch strategies available:
 10236                           ; Name         Instructions Cycles
 10237                           ; simple_byte           10     6 (average)
 10238                           ;	Chosen strategy is simple_byte
 10239  002892  5045               	movf	??_put_fat,w,c
 10240  002894  0A01               	xorlw	1	; case 1
 10241  002896  B4D8               	btfsc	status,2,c
 10242  002898  D60F               	goto	l369
 10243  00289A  0A03               	xorlw	3	; case 2
 10244  00289C  B4D8               	btfsc	status,2,c
 10245  00289E  D713               	goto	l4536
 10246  0028A0  0A01               	xorlw	1	; case 3
 10247  0028A2  B4D8               	btfsc	status,2,c
 10248  0028A4  D769               	goto	l4546
 10249  0028A6  D605               	goto	u5180
 10250  0028A8                     l4562:
 10251                           
 10252                           ;ff.c: 925:  return res;
 10253  0028A8  5053               	movf	put_fat@res,w,c
 10254  0028AA  0012               	return		;funcret
 10255  0028AC                     __end_of_put_fat:
 10256                           	opt callstack 0
 10257                           
 10258 ;; *************** function _get_fat *****************
 10259 ;; Defined at:
 10260 ;;		line 818 in file "ff.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;  fs              2   58[COMRAM] PTR struct .
 10263 ;;		 -> NULL(0), FatFs(558), 
 10264 ;;  clst            4   60[COMRAM] unsigned long 
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;  val             4   75[COMRAM] unsigned long 
 10267 ;;  bc              2   83[COMRAM] unsigned short 
 10268 ;;  p               2   81[COMRAM] PTR unsigned char 
 10269 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 10270 ;;  wc              2   79[COMRAM] unsigned short 
 10271 ;; Return value:  Size  Location     Type
 10272 ;;                  4   58[COMRAM] unsigned long 
 10273 ;; Registers used:
 10274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10275 ;; Tracked objects:
 10276 ;;		On entry : 0/0
 10277 ;;		On exit  : 0/0
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10280 ;;      Params:         6       0       0       0       0       0       0       0       0
 10281 ;;      Locals:        12       0       0       0       0       0       0       0       0
 10282 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10283 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10284 ;;Total ram usage:       27 bytes
 10285 ;; Hardware stack levels used:    1
 10286 ;; Hardware stack levels required when called:    8
 10287 ;; This function calls:
 10288 ;;		_move_window
 10289 ;; This function is called by:
 10290 ;;		_remove_chain
 10291 ;;		_create_chain
 10292 ;;		_dir_sdi
 10293 ;;		_dir_next
 10294 ;;		_f_lseek
 10295 ;;		_f_read
 10296 ;; This function uses a non-reentrant model
 10297 ;;
 10298                           
 10299                           	psect	text24
 10300  002CB2                     __ptext24:
 10301                           	opt callstack 0
 10302  002CB2                     _get_fat:
 10303                           	opt callstack 20
 10304                           
 10305                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10306                           
 10307                           ;incstack = 0
 10308  002CB2  5040               	movf	get_fat@clst+3,w,c
 10309  002CB4  103F               	iorwf	get_fat@clst+2,w,c
 10310  002CB6  103E               	iorwf	get_fat@clst+1,w,c
 10311  002CB8  E104               	bnz	u5060
 10312  002CBA  0E02               	movlw	2
 10313  002CBC  5C3D               	subwf	get_fat@clst,w,c
 10314  002CBE  A0D8               	btfss	status,0,c
 10315  002CC0  D010               	goto	u5070
 10316  002CC2                     u5060:
 10317  002CC2  EE20 F012          	lfsr	2,18
 10318  002CC6  503B               	movf	get_fat@fs,w,c
 10319  002CC8  26D9               	addwf	fsr2l,f,c
 10320  002CCA  503C               	movf	get_fat@fs+1,w,c
 10321  002CCC  22DA               	addwfc	fsr2h,f,c
 10322  002CCE  50DE               	movf	postinc2,w,c
 10323  002CD0  5C3D               	subwf	get_fat@clst,w,c
 10324  002CD2  50DE               	movf	postinc2,w,c
 10325  002CD4  583E               	subwfb	get_fat@clst+1,w,c
 10326  002CD6  50DE               	movf	postinc2,w,c
 10327  002CD8  583F               	subwfb	get_fat@clst+2,w,c
 10328  002CDA  50DE               	movf	postinc2,w,c
 10329  002CDC  5840               	subwfb	get_fat@clst+3,w,c
 10330  002CDE  A0D8               	btfss	status,0,c
 10331  002CE0  D008               	goto	l343
 10332  002CE2                     u5070:
 10333                           
 10334                           ;ff.c: 829:   val = 1;
 10335  002CE2  0E01               	movlw	1
 10336  002CE4  6E4C               	movwf	get_fat@val,c
 10337  002CE6  0E00               	movlw	0
 10338  002CE8  6E4D               	movwf	get_fat@val+1,c
 10339  002CEA  0E00               	movlw	0
 10340  002CEC  6E4E               	movwf	get_fat@val+2,c
 10341  002CEE  0E00               	movlw	0
 10342  002CF0  D190               	goto	L11
 10343  002CF2                     l343:
 10344                           
 10345                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10346  002CF2  684C               	setf	get_fat@val,c
 10347  002CF4  684D               	setf	get_fat@val+1,c
 10348  002CF6  684E               	setf	get_fat@val+2,c
 10349  002CF8  684F               	setf	get_fat@val+3,c
 10350                           
 10351                           ;ff.c: 834:   switch (fs->fs_type) {
 10352  002CFA  D18D               	goto	l4486
 10353  002CFC                     l348:
 10354                           
 10355                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10356  002CFC  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10357  002D00  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10358  002D04  90D8               	bcf	status,0,c
 10359  002D06  3055               	rrcf	get_fat@bc+1,w,c
 10360  002D08  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10361  002D0A  3054               	rrcf	get_fat@bc,w,c
 10362  002D0C  6E41               	movwf	??_get_fat& (0+255),c
 10363  002D0E  5041               	movf	??_get_fat,w,c
 10364  002D10  2654               	addwf	get_fat@bc,f,c
 10365  002D12  5042               	movf	??_get_fat+1,w,c
 10366  002D14  2255               	addwfc	get_fat@bc+1,f,c
 10367                           
 10368                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10369  002D16  C03B  F030         	movff	get_fat@fs,move_window@fs
 10370  002D1A  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10371  002D1E  EE20 F01E          	lfsr	2,30
 10372  002D22  503B               	movf	get_fat@fs,w,c
 10373  002D24  26D9               	addwf	fsr2l,f,c
 10374  002D26  503C               	movf	get_fat@fs+1,w,c
 10375  002D28  22DA               	addwfc	fsr2h,f,c
 10376  002D2A  CFDE F041          	movff	postinc2,??_get_fat
 10377  002D2E  CFDE F042          	movff	postinc2,??_get_fat+1
 10378  002D32  CFDE F043          	movff	postinc2,??_get_fat+2
 10379  002D36  CFDE F044          	movff	postinc2,??_get_fat+3
 10380  002D3A  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10381  002D3E  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10382  002D42  0E09               	movlw	9
 10383  002D44  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10384  002D46                     u5085:
 10385  002D46  90D8               	bcf	status,0,c
 10386  002D48  3246               	rrcf	??_get_fat+5,f,c
 10387  002D4A  3245               	rrcf	??_get_fat+4,f,c
 10388  002D4C  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10389  002D4E  D7FB               	goto	u5085
 10390  002D50  5045               	movf	??_get_fat+4,w,c
 10391  002D52  2441               	addwf	??_get_fat,w,c
 10392  002D54  6E32               	movwf	move_window@sector,c
 10393  002D56  5046               	movf	??_get_fat+5,w,c
 10394  002D58  2042               	addwfc	??_get_fat+1,w,c
 10395  002D5A  6E33               	movwf	move_window@sector+1,c
 10396  002D5C  0E00               	movlw	0
 10397  002D5E  2043               	addwfc	??_get_fat+2,w,c
 10398  002D60  6E34               	movwf	move_window@sector+2,c
 10399  002D62  0E00               	movlw	0
 10400  002D64  2044               	addwfc	??_get_fat+3,w,c
 10401  002D66  6E35               	movwf	move_window@sector+3,c
 10402  002D68  ECB1  F027         	call	_move_window	;wreg free
 10403  002D6C  0900               	iorlw	0
 10404  002D6E  A4D8               	btfss	status,2,c
 10405  002D70  D168               	goto	l346
 10406                           
 10407                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10408  002D72  0EFF               	movlw	255
 10409  002D74  6E41               	movwf	??_get_fat& (0+255),c
 10410  002D76  0E01               	movlw	1
 10411  002D78  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10412  002D7A  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10413  002D7E  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10414  002D82  5041               	movf	??_get_fat,w,c
 10415  002D84  1643               	andwf	??_get_fat+2,f,c
 10416  002D86  5042               	movf	??_get_fat+1,w,c
 10417  002D88  1644               	andwf	??_get_fat+3,f,c
 10418  002D8A  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10419  002D8E  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10420  002D92  5043               	movf	??_get_fat+2,w,c
 10421  002D94  2645               	addwf	??_get_fat+4,f,c
 10422  002D96  5044               	movf	??_get_fat+3,w,c
 10423  002D98  2246               	addwfc	??_get_fat+5,f,c
 10424  002D9A  0E2E               	movlw	46
 10425  002D9C  2445               	addwf	??_get_fat+4,w,c
 10426  002D9E  6ED9               	movwf	fsr2l,c
 10427  002DA0  0E00               	movlw	0
 10428  002DA2  2046               	addwfc	??_get_fat+5,w,c
 10429  002DA4  6EDA               	movwf	fsr2h,c
 10430  002DA6  50DF               	movf	indf2,w,c
 10431  002DA8  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10432  002DAA  5047               	movf	??_get_fat+6,w,c
 10433  002DAC  6E50               	movwf	get_fat@wc,c
 10434  002DAE  6A51               	clrf	get_fat@wc+1,c
 10435  002DB0  4A54               	infsnz	get_fat@bc,f,c
 10436  002DB2  2A55               	incf	get_fat@bc+1,f,c
 10437                           
 10438                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10439  002DB4  C03B  F030         	movff	get_fat@fs,move_window@fs
 10440  002DB8  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10441  002DBC  EE20 F01E          	lfsr	2,30
 10442  002DC0  503B               	movf	get_fat@fs,w,c
 10443  002DC2  26D9               	addwf	fsr2l,f,c
 10444  002DC4  503C               	movf	get_fat@fs+1,w,c
 10445  002DC6  22DA               	addwfc	fsr2h,f,c
 10446  002DC8  CFDE F041          	movff	postinc2,??_get_fat
 10447  002DCC  CFDE F042          	movff	postinc2,??_get_fat+1
 10448  002DD0  CFDE F043          	movff	postinc2,??_get_fat+2
 10449  002DD4  CFDE F044          	movff	postinc2,??_get_fat+3
 10450  002DD8  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10451  002DDC  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10452  002DE0  0E09               	movlw	9
 10453  002DE2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10454  002DE4                     u5105:
 10455  002DE4  90D8               	bcf	status,0,c
 10456  002DE6  3246               	rrcf	??_get_fat+5,f,c
 10457  002DE8  3245               	rrcf	??_get_fat+4,f,c
 10458  002DEA  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10459  002DEC  D7FB               	goto	u5105
 10460  002DEE  5045               	movf	??_get_fat+4,w,c
 10461  002DF0  2441               	addwf	??_get_fat,w,c
 10462  002DF2  6E32               	movwf	move_window@sector,c
 10463  002DF4  5046               	movf	??_get_fat+5,w,c
 10464  002DF6  2042               	addwfc	??_get_fat+1,w,c
 10465  002DF8  6E33               	movwf	move_window@sector+1,c
 10466  002DFA  0E00               	movlw	0
 10467  002DFC  2043               	addwfc	??_get_fat+2,w,c
 10468  002DFE  6E34               	movwf	move_window@sector+2,c
 10469  002E00  0E00               	movlw	0
 10470  002E02  2044               	addwfc	??_get_fat+3,w,c
 10471  002E04  6E35               	movwf	move_window@sector+3,c
 10472  002E06  ECB1  F027         	call	_move_window	;wreg free
 10473  002E0A  0900               	iorlw	0
 10474  002E0C  A4D8               	btfss	status,2,c
 10475  002E0E  D119               	goto	l346
 10476                           
 10477                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10478  002E10  0EFF               	movlw	255
 10479  002E12  6E41               	movwf	??_get_fat& (0+255),c
 10480  002E14  0E01               	movlw	1
 10481  002E16  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10482  002E18  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10483  002E1C  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10484  002E20  5041               	movf	??_get_fat,w,c
 10485  002E22  1643               	andwf	??_get_fat+2,f,c
 10486  002E24  5042               	movf	??_get_fat+1,w,c
 10487  002E26  1644               	andwf	??_get_fat+3,f,c
 10488  002E28  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10489  002E2C  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10490  002E30  5043               	movf	??_get_fat+2,w,c
 10491  002E32  2645               	addwf	??_get_fat+4,f,c
 10492  002E34  5044               	movf	??_get_fat+3,w,c
 10493  002E36  2246               	addwfc	??_get_fat+5,f,c
 10494  002E38  0E2E               	movlw	46
 10495  002E3A  2445               	addwf	??_get_fat+4,w,c
 10496  002E3C  6ED9               	movwf	fsr2l,c
 10497  002E3E  0E00               	movlw	0
 10498  002E40  2046               	addwfc	??_get_fat+5,w,c
 10499  002E42  6EDA               	movwf	fsr2h,c
 10500  002E44  50DF               	movf	indf2,w,c
 10501  002E46  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10502  002E48  5047               	movf	??_get_fat+6,w,c
 10503  002E4A  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10504  002E4C  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10505  002E4E  5048               	movf	??_get_fat+7,w,c
 10506  002E50  1250               	iorwf	get_fat@wc,f,c
 10507  002E52  5049               	movf	??_get_fat+8,w,c
 10508  002E54  1251               	iorwf	get_fat@wc+1,f,c
 10509                           
 10510                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10511  002E56  B03D               	btfsc	get_fat@clst,0,c
 10512  002E58  D007               	goto	l4464
 10513  002E5A  0EFF               	movlw	255
 10514  002E5C  1450               	andwf	get_fat@wc,w,c
 10515  002E5E  6E4A               	movwf	_get_fat$652,c
 10516  002E60  0E0F               	movlw	15
 10517  002E62  1451               	andwf	get_fat@wc+1,w,c
 10518  002E64  6E4B               	movwf	_get_fat$652+1,c
 10519  002E66  D00F               	goto	l4466
 10520  002E68                     l4464:
 10521  002E68  C050  F041         	movff	get_fat@wc,??_get_fat
 10522  002E6C  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10523  002E70  0E04               	movlw	4
 10524  002E72  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10525  002E74                     u5135:
 10526  002E74  90D8               	bcf	status,0,c
 10527  002E76  3242               	rrcf	??_get_fat+1,f,c
 10528  002E78  3241               	rrcf	??_get_fat,f,c
 10529  002E7A  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10530  002E7C  D7FB               	goto	u5135
 10531  002E7E  C041  F04A         	movff	??_get_fat,_get_fat$652
 10532  002E82  C042  F04B         	movff	??_get_fat+1,_get_fat$652+1
 10533  002E86                     l4466:
 10534  002E86  C04A  F04C         	movff	_get_fat$652,get_fat@val
 10535  002E8A  C04B  F04D         	movff	_get_fat$652+1,get_fat@val+1
 10536  002E8E  D05B               	goto	L12
 10537  002E90                     l4468:
 10538                           
 10539                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10540  002E90  C03B  F030         	movff	get_fat@fs,move_window@fs
 10541  002E94  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10542  002E98  EE20 F01E          	lfsr	2,30
 10543  002E9C  503B               	movf	get_fat@fs,w,c
 10544  002E9E  26D9               	addwf	fsr2l,f,c
 10545  002EA0  503C               	movf	get_fat@fs+1,w,c
 10546  002EA2  22DA               	addwfc	fsr2h,f,c
 10547  002EA4  CFDE F041          	movff	postinc2,??_get_fat
 10548  002EA8  CFDE F042          	movff	postinc2,??_get_fat+1
 10549  002EAC  CFDE F043          	movff	postinc2,??_get_fat+2
 10550  002EB0  CFDE F044          	movff	postinc2,??_get_fat+3
 10551  002EB4  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10552  002EB8  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10553  002EBC  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10554  002EC0  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10555  002EC4  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10556  002EC8  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10557  002ECC  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10558  002ED0  6A48               	clrf	??_get_fat+7,c
 10559  002ED2  5041               	movf	??_get_fat,w,c
 10560  002ED4  2445               	addwf	??_get_fat+4,w,c
 10561  002ED6  6E32               	movwf	move_window@sector,c
 10562  002ED8  5042               	movf	??_get_fat+1,w,c
 10563  002EDA  2046               	addwfc	??_get_fat+5,w,c
 10564  002EDC  6E33               	movwf	move_window@sector+1,c
 10565  002EDE  5043               	movf	??_get_fat+2,w,c
 10566  002EE0  2047               	addwfc	??_get_fat+6,w,c
 10567  002EE2  6E34               	movwf	move_window@sector+2,c
 10568  002EE4  5044               	movf	??_get_fat+3,w,c
 10569  002EE6  2048               	addwfc	??_get_fat+7,w,c
 10570  002EE8  6E35               	movwf	move_window@sector+3,c
 10571  002EEA  ECB1  F027         	call	_move_window	;wreg free
 10572  002EEE  0900               	iorlw	0
 10573  002EF0  A4D8               	btfss	status,2,c
 10574  002EF2  D0A7               	goto	l346
 10575                           
 10576                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10577  002EF4  0EFF               	movlw	255
 10578  002EF6  6E41               	movwf	??_get_fat& (0+255),c
 10579  002EF8  0E01               	movlw	1
 10580  002EFA  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10581  002EFC  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10582  002F00  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10583  002F04  90D8               	bcf	status,0,c
 10584  002F06  3643               	rlcf	??_get_fat+2,f,c
 10585  002F08  3644               	rlcf	??_get_fat+3,f,c
 10586  002F0A  5041               	movf	??_get_fat,w,c
 10587  002F0C  1643               	andwf	??_get_fat+2,f,c
 10588  002F0E  5042               	movf	??_get_fat+1,w,c
 10589  002F10  1644               	andwf	??_get_fat+3,f,c
 10590  002F12  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10591  002F16  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10592  002F1A  5043               	movf	??_get_fat+2,w,c
 10593  002F1C  2645               	addwf	??_get_fat+4,f,c
 10594  002F1E  5044               	movf	??_get_fat+3,w,c
 10595  002F20  2246               	addwfc	??_get_fat+5,f,c
 10596  002F22  0E2E               	movlw	46
 10597  002F24  2445               	addwf	??_get_fat+4,w,c
 10598  002F26  6E52               	movwf	get_fat@p,c
 10599  002F28  0E00               	movlw	0
 10600  002F2A  2046               	addwfc	??_get_fat+5,w,c
 10601  002F2C  6E53               	movwf	get_fat@p+1,c
 10602                           
 10603                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10604  002F2E  C052  FFD9         	movff	get_fat@p,fsr2l
 10605  002F32  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10606  002F36  CFDE F041          	movff	postinc2,??_get_fat
 10607  002F3A  CFDD F042          	movff	postdec2,??_get_fat+1
 10608  002F3E  C041  F04C         	movff	??_get_fat,get_fat@val
 10609  002F42  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10610  002F46                     L12:
 10611  002F46  6A4E               	clrf	get_fat@val+2,c
 10612  002F48  6A4F               	clrf	get_fat@val+3,c
 10613                           
 10614                           ;ff.c: 848:    break;
 10615  002F4A  D07B               	goto	l346
 10616  002F4C                     l4476:
 10617                           
 10618                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10619  002F4C  C03B  F030         	movff	get_fat@fs,move_window@fs
 10620  002F50  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10621  002F54  EE20 F01E          	lfsr	2,30
 10622  002F58  503B               	movf	get_fat@fs,w,c
 10623  002F5A  26D9               	addwf	fsr2l,f,c
 10624  002F5C  503C               	movf	get_fat@fs+1,w,c
 10625  002F5E  22DA               	addwfc	fsr2h,f,c
 10626  002F60  CFDE F041          	movff	postinc2,??_get_fat
 10627  002F64  CFDE F042          	movff	postinc2,??_get_fat+1
 10628  002F68  CFDE F043          	movff	postinc2,??_get_fat+2
 10629  002F6C  CFDE F044          	movff	postinc2,??_get_fat+3
 10630  002F70  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10631  002F74  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10632  002F78  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10633  002F7C  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10634  002F80  0E08               	movlw	8
 10635  002F82  D005               	goto	u5150
 10636  002F84                     u5155:
 10637  002F84  90D8               	bcf	status,0,c
 10638  002F86  3248               	rrcf	??_get_fat+7,f,c
 10639  002F88  3247               	rrcf	??_get_fat+6,f,c
 10640  002F8A  3246               	rrcf	??_get_fat+5,f,c
 10641  002F8C  3245               	rrcf	??_get_fat+4,f,c
 10642  002F8E                     u5150:
 10643  002F8E  2EE8               	decfsz	wreg,f,c
 10644  002F90  D7F9               	goto	u5155
 10645  002F92  5041               	movf	??_get_fat,w,c
 10646  002F94  2445               	addwf	??_get_fat+4,w,c
 10647  002F96  6E32               	movwf	move_window@sector,c
 10648  002F98  5042               	movf	??_get_fat+1,w,c
 10649  002F9A  2046               	addwfc	??_get_fat+5,w,c
 10650  002F9C  6E33               	movwf	move_window@sector+1,c
 10651  002F9E  5043               	movf	??_get_fat+2,w,c
 10652  002FA0  2047               	addwfc	??_get_fat+6,w,c
 10653  002FA2  6E34               	movwf	move_window@sector+2,c
 10654  002FA4  5044               	movf	??_get_fat+3,w,c
 10655  002FA6  2048               	addwfc	??_get_fat+7,w,c
 10656  002FA8  6E35               	movwf	move_window@sector+3,c
 10657  002FAA  ECB1  F027         	call	_move_window	;wreg free
 10658  002FAE  0900               	iorlw	0
 10659  002FB0  A4D8               	btfss	status,2,c
 10660  002FB2  D047               	goto	l346
 10661                           
 10662                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10663  002FB4  0EFF               	movlw	255
 10664  002FB6  6E41               	movwf	??_get_fat& (0+255),c
 10665  002FB8  0E01               	movlw	1
 10666  002FBA  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10667  002FBC  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10668  002FC0  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10669  002FC4  90D8               	bcf	status,0,c
 10670  002FC6  3643               	rlcf	??_get_fat+2,f,c
 10671  002FC8  3644               	rlcf	??_get_fat+3,f,c
 10672  002FCA  90D8               	bcf	status,0,c
 10673  002FCC  3643               	rlcf	??_get_fat+2,f,c
 10674  002FCE  3644               	rlcf	??_get_fat+3,f,c
 10675  002FD0  5041               	movf	??_get_fat,w,c
 10676  002FD2  1643               	andwf	??_get_fat+2,f,c
 10677  002FD4  5042               	movf	??_get_fat+1,w,c
 10678  002FD6  1644               	andwf	??_get_fat+3,f,c
 10679  002FD8  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10680  002FDC  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10681  002FE0  5043               	movf	??_get_fat+2,w,c
 10682  002FE2  2645               	addwf	??_get_fat+4,f,c
 10683  002FE4  5044               	movf	??_get_fat+3,w,c
 10684  002FE6  2246               	addwfc	??_get_fat+5,f,c
 10685  002FE8  0E2E               	movlw	46
 10686  002FEA  2445               	addwf	??_get_fat+4,w,c
 10687  002FEC  6E52               	movwf	get_fat@p,c
 10688  002FEE  0E00               	movlw	0
 10689  002FF0  2046               	addwfc	??_get_fat+5,w,c
 10690  002FF2  6E53               	movwf	get_fat@p+1,c
 10691                           
 10692                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10693  002FF4  C052  FFD9         	movff	get_fat@p,fsr2l
 10694  002FF8  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10695  002FFC  0EFF               	movlw	255
 10696  002FFE  14DE               	andwf	postinc2,w,c
 10697  003000  6E4C               	movwf	get_fat@val,c
 10698  003002  0EFF               	movlw	255
 10699  003004  14DE               	andwf	postinc2,w,c
 10700  003006  6E4D               	movwf	get_fat@val+1,c
 10701  003008  0EFF               	movlw	255
 10702  00300A  14DE               	andwf	postinc2,w,c
 10703  00300C  6E4E               	movwf	get_fat@val+2,c
 10704  00300E  0E0F               	movlw	15
 10705  003010  14DE               	andwf	postinc2,w,c
 10706  003012                     L11:
 10707  003012  6E4F               	movwf	get_fat@val+3,c
 10708                           
 10709                           ;ff.c: 854:    break;
 10710  003014  D016               	goto	l346
 10711  003016                     l4486:
 10712  003016  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10713  00301A  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10714  00301E  50DF               	movf	indf2,w,c
 10715  003020  6E41               	movwf	??_get_fat& (0+255),c
 10716  003022  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10717                           
 10718                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10719                           ; Switch size 1, requested type "simple"
 10720                           ; Number of cases is 1, Range of values is 0 to 0
 10721                           ; switch strategies available:
 10722                           ; Name         Instructions Cycles
 10723                           ; simple_byte            4     3 (average)
 10724                           ;	Chosen strategy is simple_byte
 10725  003024  5042               	movf	??_get_fat+1,w,c
 10726  003026  0A00               	xorlw	0	; case 0
 10727  003028  A4D8               	btfss	status,2,c
 10728  00302A  D65B               	goto	u5070
 10729                           
 10730                           ; Switch size 1, requested type "simple"
 10731                           ; Number of cases is 3, Range of values is 1 to 3
 10732                           ; switch strategies available:
 10733                           ; Name         Instructions Cycles
 10734                           ; simple_byte           10     6 (average)
 10735                           ;	Chosen strategy is simple_byte
 10736  00302C  5041               	movf	??_get_fat,w,c
 10737  00302E  0A01               	xorlw	1	; case 1
 10738  003030  B4D8               	btfsc	status,2,c
 10739  003032  D664               	goto	l348
 10740  003034  0A03               	xorlw	3	; case 2
 10741  003036  B4D8               	btfsc	status,2,c
 10742  003038  D72B               	goto	l4468
 10743  00303A  0A01               	xorlw	1	; case 3
 10744  00303C  B4D8               	btfsc	status,2,c
 10745  00303E  D786               	goto	l4476
 10746  003040  D650               	goto	u5070
 10747  003042                     l346:
 10748                           
 10749                           ;ff.c: 861:  return val;
 10750  003042  C04C  F03B         	movff	get_fat@val,?_get_fat
 10751  003046  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10752  00304A  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10753  00304E  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10754  003052  0012               	return		;funcret
 10755  003054                     __end_of_get_fat:
 10756                           	opt callstack 0
 10757                           
 10758 ;; *************** function _clust2sect *****************
 10759 ;; Defined at:
 10760 ;;		line 800 in file "ff.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;  fs              2   12[COMRAM] PTR struct .
 10763 ;;		 -> NULL(0), FatFs(558), 
 10764 ;;  clst            4   14[COMRAM] unsigned long 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  4   12[COMRAM] unsigned long 
 10769 ;; Registers used:
 10770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10776 ;;      Params:         6       0       0       0       0       0       0       0       0
 10777 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10778 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10779 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10780 ;;Total ram usage:       11 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    1
 10783 ;; This function calls:
 10784 ;;		___lmul
 10785 ;; This function is called by:
 10786 ;;		_dir_sdi
 10787 ;;		_dir_next
 10788 ;;		_f_write
 10789 ;;		_f_lseek
 10790 ;;		_f_read
 10791 ;; This function uses a non-reentrant model
 10792 ;;
 10793                           
 10794                           	psect	text25
 10795  004DF8                     __ptext25:
 10796                           	opt callstack 0
 10797  004DF8                     _clust2sect:
 10798                           	opt callstack 28
 10799                           
 10800                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10801                           
 10802                           ;incstack = 0
 10803  004DF8  0E02               	movlw	2
 10804  004DFA  5E0F               	subwf	clust2sect@clst,f,c
 10805  004DFC  0E00               	movlw	0
 10806  004DFE  5A10               	subwfb	clust2sect@clst+1,f,c
 10807  004E00  5A11               	subwfb	clust2sect@clst+2,f,c
 10808  004E02  5A12               	subwfb	clust2sect@clst+3,f,c
 10809                           
 10810                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10811  004E04  EE20 F012          	lfsr	2,18
 10812  004E08  500D               	movf	clust2sect@fs,w,c
 10813  004E0A  26D9               	addwf	fsr2l,f,c
 10814  004E0C  500E               	movf	clust2sect@fs+1,w,c
 10815  004E0E  22DA               	addwfc	fsr2h,f,c
 10816  004E10  0EFE               	movlw	254
 10817  004E12  24DE               	addwf	postinc2,w,c
 10818  004E14  6E13               	movwf	??_clust2sect& (0+255),c
 10819  004E16  0EFF               	movlw	255
 10820  004E18  20DE               	addwfc	postinc2,w,c
 10821  004E1A  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10822  004E1C  0EFF               	movlw	255
 10823  004E1E  20DE               	addwfc	postinc2,w,c
 10824  004E20  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10825  004E22  0EFF               	movlw	255
 10826  004E24  20DE               	addwfc	postinc2,w,c
 10827  004E26  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10828  004E28  5013               	movf	??_clust2sect,w,c
 10829  004E2A  5C0F               	subwf	clust2sect@clst,w,c
 10830  004E2C  5014               	movf	??_clust2sect+1,w,c
 10831  004E2E  5810               	subwfb	clust2sect@clst+1,w,c
 10832  004E30  5015               	movf	??_clust2sect+2,w,c
 10833  004E32  5811               	subwfb	clust2sect@clst+2,w,c
 10834  004E34  5016               	movf	??_clust2sect+3,w,c
 10835  004E36  5812               	subwfb	clust2sect@clst+3,w,c
 10836  004E38  A0D8               	btfss	status,0,c
 10837  004E3A  D009               	goto	l4596
 10838  004E3C  0E00               	movlw	0
 10839  004E3E  6E0D               	movwf	?_clust2sect,c
 10840  004E40  0E00               	movlw	0
 10841  004E42  6E0E               	movwf	?_clust2sect+1,c
 10842  004E44  0E00               	movlw	0
 10843  004E46  6E0F               	movwf	?_clust2sect+2,c
 10844  004E48  0E00               	movlw	0
 10845  004E4A  6E10               	movwf	?_clust2sect+3,c
 10846  004E4C  0012               	return	
 10847  004E4E                     l4596:
 10848                           
 10849                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10850  004E4E  EE20 F026          	lfsr	2,38
 10851  004E52  500D               	movf	clust2sect@fs,w,c
 10852  004E54  26D9               	addwf	fsr2l,f,c
 10853  004E56  500E               	movf	clust2sect@fs+1,w,c
 10854  004E58  22DA               	addwfc	fsr2h,f,c
 10855  004E5A  CFDE F013          	movff	postinc2,??_clust2sect
 10856  004E5E  CFDE F014          	movff	postinc2,??_clust2sect+1
 10857  004E62  CFDE F015          	movff	postinc2,??_clust2sect+2
 10858  004E66  CFDE F016          	movff	postinc2,??_clust2sect+3
 10859  004E6A  EE20 F002          	lfsr	2,2
 10860  004E6E  500D               	movf	clust2sect@fs,w,c
 10861  004E70  26D9               	addwf	fsr2l,f,c
 10862  004E72  500E               	movf	clust2sect@fs+1,w,c
 10863  004E74  22DA               	addwfc	fsr2h,f,c
 10864  004E76  50DF               	movf	indf2,w,c
 10865  004E78  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10866  004E7A  5017               	movf	??_clust2sect+4,w,c
 10867  004E7C  6E01               	movwf	___lmul@multiplier,c
 10868  004E7E  6A02               	clrf	___lmul@multiplier+1,c
 10869  004E80  6A03               	clrf	___lmul@multiplier+2,c
 10870  004E82  6A04               	clrf	___lmul@multiplier+3,c
 10871  004E84  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10872  004E88  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10873  004E8C  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10874  004E90  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10875  004E94  ECEE  F029         	call	___lmul	;wreg free
 10876  004E98  5013               	movf	??_clust2sect,w,c
 10877  004E9A  2401               	addwf	?___lmul,w,c
 10878  004E9C  6E0D               	movwf	?_clust2sect,c
 10879  004E9E  5014               	movf	??_clust2sect+1,w,c
 10880  004EA0  2002               	addwfc	?___lmul+1,w,c
 10881  004EA2  6E0E               	movwf	?_clust2sect+1,c
 10882  004EA4  5015               	movf	??_clust2sect+2,w,c
 10883  004EA6  2003               	addwfc	?___lmul+2,w,c
 10884  004EA8  6E0F               	movwf	?_clust2sect+2,c
 10885  004EAA  5016               	movf	??_clust2sect+3,w,c
 10886  004EAC  2004               	addwfc	?___lmul+3,w,c
 10887  004EAE  6E10               	movwf	?_clust2sect+3,c
 10888  004EB0  0012               	return		;funcret
 10889  004EB2                     __end_of_clust2sect:
 10890                           	opt callstack 0
 10891                           
 10892 ;; *************** function ___lmul *****************
 10893 ;; Defined at:
 10894 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;  multiplier      4    0[COMRAM] unsigned long 
 10897 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  product         4    8[COMRAM] unsigned long 
 10900 ;; Return value:  Size  Location     Type
 10901 ;;                  4    0[COMRAM] unsigned long 
 10902 ;; Registers used:
 10903 ;;		wreg, status,2, status,0
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10909 ;;      Params:         8       0       0       0       0       0       0       0       0
 10910 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10911 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10912 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10913 ;;Total ram usage:       12 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; This function calls:
 10916 ;;		Nothing
 10917 ;; This function is called by:
 10918 ;;		_clust2sect
 10919 ;;		_find_volume
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           	psect	text26
 10924  0053DC                     __ptext26:
 10925                           	opt callstack 0
 10926  0053DC                     ___lmul:
 10927                           	opt callstack 28
 10928                           
 10929                           ;incstack = 0
 10930  0053DC  0E00               	movlw	0
 10931  0053DE  6E09               	movwf	___lmul@product,c
 10932  0053E0  0E00               	movlw	0
 10933  0053E2  6E0A               	movwf	___lmul@product+1,c
 10934  0053E4  0E00               	movlw	0
 10935  0053E6  6E0B               	movwf	___lmul@product+2,c
 10936  0053E8  0E00               	movlw	0
 10937  0053EA  6E0C               	movwf	___lmul@product+3,c
 10938  0053EC                     l4572:
 10939  0053EC  A001               	btfss	___lmul@multiplier,0,c
 10940  0053EE  D008               	goto	l4576
 10941  0053F0  5005               	movf	___lmul@multiplicand,w,c
 10942  0053F2  2609               	addwf	___lmul@product,f,c
 10943  0053F4  5006               	movf	___lmul@multiplicand+1,w,c
 10944  0053F6  220A               	addwfc	___lmul@product+1,f,c
 10945  0053F8  5007               	movf	___lmul@multiplicand+2,w,c
 10946  0053FA  220B               	addwfc	___lmul@product+2,f,c
 10947  0053FC  5008               	movf	___lmul@multiplicand+3,w,c
 10948  0053FE  220C               	addwfc	___lmul@product+3,f,c
 10949  005400                     l4576:
 10950  005400  90D8               	bcf	status,0,c
 10951  005402  3605               	rlcf	___lmul@multiplicand,f,c
 10952  005404  3606               	rlcf	___lmul@multiplicand+1,f,c
 10953  005406  3607               	rlcf	___lmul@multiplicand+2,f,c
 10954  005408  3608               	rlcf	___lmul@multiplicand+3,f,c
 10955  00540A  90D8               	bcf	status,0,c
 10956  00540C  3204               	rrcf	___lmul@multiplier+3,f,c
 10957  00540E  3203               	rrcf	___lmul@multiplier+2,f,c
 10958  005410  3202               	rrcf	___lmul@multiplier+1,f,c
 10959  005412  3201               	rrcf	___lmul@multiplier,f,c
 10960  005414  5001               	movf	___lmul@multiplier,w,c
 10961  005416  1002               	iorwf	___lmul@multiplier+1,w,c
 10962  005418  1003               	iorwf	___lmul@multiplier+2,w,c
 10963  00541A  1004               	iorwf	___lmul@multiplier+3,w,c
 10964  00541C  A4D8               	btfss	status,2,c
 10965  00541E  D7E6               	goto	l4572
 10966  005420  C009  F001         	movff	___lmul@product,?___lmul
 10967  005424  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10968  005428  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10969  00542C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10970  005430  0012               	return		;funcret
 10971  005432                     __end_of___lmul:
 10972                           	opt callstack 0
 10973                           
 10974 ;; *************** function ___lldiv *****************
 10975 ;; Defined at:
 10976 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;  dividend        4    0[COMRAM] unsigned long 
 10979 ;;  divisor         4    4[COMRAM] unsigned long 
 10980 ;; Auto vars:     Size  Location     Type
 10981 ;;  quotient        4    8[COMRAM] unsigned long 
 10982 ;;  counter         1   12[COMRAM] unsigned char 
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  4    0[COMRAM] unsigned long 
 10985 ;; Registers used:
 10986 ;;		wreg, status,2, status,0
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10992 ;;      Params:         8       0       0       0       0       0       0       0       0
 10993 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10995 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10996 ;;Total ram usage:       13 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; This function calls:
 10999 ;;		Nothing
 11000 ;; This function is called by:
 11001 ;;		_find_volume
 11002 ;;		_f_lseek
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text27
 11007  00509C                     __ptext27:
 11008                           	opt callstack 0
 11009  00509C                     ___lldiv:
 11010                           	opt callstack 28
 11011                           
 11012                           ;incstack = 0
 11013  00509C  0E00               	movlw	0
 11014  00509E  6E09               	movwf	___lldiv@quotient,c
 11015  0050A0  0E00               	movlw	0
 11016  0050A2  6E0A               	movwf	___lldiv@quotient+1,c
 11017  0050A4  0E00               	movlw	0
 11018  0050A6  6E0B               	movwf	___lldiv@quotient+2,c
 11019  0050A8  0E00               	movlw	0
 11020  0050AA  6E0C               	movwf	___lldiv@quotient+3,c
 11021  0050AC  5005               	movf	___lldiv@divisor,w,c
 11022  0050AE  1006               	iorwf	___lldiv@divisor+1,w,c
 11023  0050B0  1007               	iorwf	___lldiv@divisor+2,w,c
 11024  0050B2  1008               	iorwf	___lldiv@divisor+3,w,c
 11025  0050B4  B4D8               	btfsc	status,2,c
 11026  0050B6  D02A               	goto	l908
 11027  0050B8  0E01               	movlw	1
 11028  0050BA  6E0D               	movwf	___lldiv@counter,c
 11029  0050BC  D006               	goto	l5490
 11030  0050BE                     l5488:
 11031  0050BE  90D8               	bcf	status,0,c
 11032  0050C0  3605               	rlcf	___lldiv@divisor,f,c
 11033  0050C2  3606               	rlcf	___lldiv@divisor+1,f,c
 11034  0050C4  3607               	rlcf	___lldiv@divisor+2,f,c
 11035  0050C6  3608               	rlcf	___lldiv@divisor+3,f,c
 11036  0050C8  2A0D               	incf	___lldiv@counter,f,c
 11037  0050CA                     l5490:
 11038  0050CA  AE08               	btfss	___lldiv@divisor+3,7,c
 11039  0050CC  D7F8               	goto	l5488
 11040  0050CE                     u7090:
 11041  0050CE  90D8               	bcf	status,0,c
 11042  0050D0  3609               	rlcf	___lldiv@quotient,f,c
 11043  0050D2  360A               	rlcf	___lldiv@quotient+1,f,c
 11044  0050D4  360B               	rlcf	___lldiv@quotient+2,f,c
 11045  0050D6  360C               	rlcf	___lldiv@quotient+3,f,c
 11046  0050D8  5005               	movf	___lldiv@divisor,w,c
 11047  0050DA  5C01               	subwf	___lldiv@dividend,w,c
 11048  0050DC  5006               	movf	___lldiv@divisor+1,w,c
 11049  0050DE  5802               	subwfb	___lldiv@dividend+1,w,c
 11050  0050E0  5007               	movf	___lldiv@divisor+2,w,c
 11051  0050E2  5803               	subwfb	___lldiv@dividend+2,w,c
 11052  0050E4  5008               	movf	___lldiv@divisor+3,w,c
 11053  0050E6  5804               	subwfb	___lldiv@dividend+3,w,c
 11054  0050E8  A0D8               	btfss	status,0,c
 11055  0050EA  D009               	goto	l5500
 11056  0050EC  5005               	movf	___lldiv@divisor,w,c
 11057  0050EE  5E01               	subwf	___lldiv@dividend,f,c
 11058  0050F0  5006               	movf	___lldiv@divisor+1,w,c
 11059  0050F2  5A02               	subwfb	___lldiv@dividend+1,f,c
 11060  0050F4  5007               	movf	___lldiv@divisor+2,w,c
 11061  0050F6  5A03               	subwfb	___lldiv@dividend+2,f,c
 11062  0050F8  5008               	movf	___lldiv@divisor+3,w,c
 11063  0050FA  5A04               	subwfb	___lldiv@dividend+3,f,c
 11064  0050FC  8009               	bsf	___lldiv@quotient,0,c
 11065  0050FE                     l5500:
 11066  0050FE  90D8               	bcf	status,0,c
 11067  005100  3208               	rrcf	___lldiv@divisor+3,f,c
 11068  005102  3207               	rrcf	___lldiv@divisor+2,f,c
 11069  005104  3206               	rrcf	___lldiv@divisor+1,f,c
 11070  005106  3205               	rrcf	___lldiv@divisor,f,c
 11071  005108  2E0D               	decfsz	___lldiv@counter,f,c
 11072  00510A  D7E1               	goto	u7090
 11073  00510C                     l908:
 11074  00510C  C009  F001         	movff	___lldiv@quotient,?___lldiv
 11075  005110  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 11076  005114  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 11077  005118  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 11078  00511C  0012               	return		;funcret
 11079  00511E                     __end_of___lldiv:
 11080                           	opt callstack 0
 11081                           
 11082 ;; *************** function _f_close *****************
 11083 ;; Defined at:
 11084 ;;		line 2861 in file "ff.c"
 11085 ;; Parameters:    Size  Location     Type
 11086 ;;  fp              2   77[COMRAM] PTR struct .
 11087 ;;		 -> Fil(32), 
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;  res             1   79[COMRAM] enum E93
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      enum E4918
 11092 ;; Registers used:
 11093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11099 ;;      Params:         2       0       0       0       0       0       0       0       0
 11100 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11101 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11102 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11103 ;;Total ram usage:        3 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    9
 11106 ;; This function calls:
 11107 ;;		_f_sync
 11108 ;;		_validate
 11109 ;; This function is called by:
 11110 ;;		_main
 11111 ;; This function uses a non-reentrant model
 11112 ;;
 11113                           
 11114                           	psect	text28
 11115  0055CE                     __ptext28:
 11116                           	opt callstack 0
 11117  0055CE                     _f_close:
 11118                           	opt callstack 21
 11119                           
 11120                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 11121                           
 11122                           ;incstack = 0
 11123  0055CE  C04E  F045         	movff	f_close@fp,f_sync@fp
 11124  0055D2  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 11125  0055D6  ECD2  F022         	call	_f_sync	;wreg free
 11126  0055DA  6E50               	movwf	f_close@res,c
 11127                           
 11128                           ;ff.c: 2870:  if (res == FR_OK)
 11129  0055DC  5050               	movf	f_close@res,w,c
 11130  0055DE  A4D8               	btfss	status,2,c
 11131  0055E0  0012               	return	
 11132                           
 11133                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 11134  0055E2  C04E  F002         	movff	f_close@fp,validate@obj
 11135  0055E6  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 11136  0055EA  EC04  F028         	call	_validate	;wreg free
 11137  0055EE  6E50               	movwf	f_close@res,c
 11138                           
 11139                           ;ff.c: 2874:   if (res == FR_OK) {
 11140  0055F0  5050               	movf	f_close@res,w,c
 11141  0055F2  A4D8               	btfss	status,2,c
 11142  0055F4  0012               	return	
 11143                           
 11144                           ;ff.c: 2882:     fp->fs = 0;
 11145  0055F6  C04E  FFD9         	movff	f_close@fp,fsr2l
 11146  0055FA  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 11147  0055FE  0E00               	movlw	0
 11148  005600  6EDE               	movwf	postinc2,c
 11149  005602  0E00               	movlw	0
 11150  005604  6EDD               	movwf	postdec2,c
 11151  005606  0012               	return		;funcret
 11152  005608                     __end_of_f_close:
 11153                           	opt callstack 0
 11154                           
 11155 ;; *************** function _f_sync *****************
 11156 ;; Defined at:
 11157 ;;		line 2813 in file "ff.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;  fp              2   68[COMRAM] PTR struct .
 11160 ;;		 -> Fil(32), 
 11161 ;; Auto vars:     Size  Location     Type
 11162 ;;  tm              4    0        unsigned long 
 11163 ;;  dir             2   75[COMRAM] PTR unsigned char 
 11164 ;;		 -> NULL(0), FatFs(558), 
 11165 ;;  res             1   74[COMRAM] enum E93
 11166 ;; Return value:  Size  Location     Type
 11167 ;;                  1    wreg      enum E93
 11168 ;; Registers used:
 11169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11170 ;; Tracked objects:
 11171 ;;		On entry : 0/0
 11172 ;;		On exit  : 0/0
 11173 ;;		Unchanged: 0/0
 11174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11175 ;;      Params:         2       0       0       0       0       0       0       0       0
 11176 ;;      Locals:         7       0       0       0       0       0       0       0       0
 11177 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11178 ;;      Totals:         9       0       0       0       0       0       0       0       0
 11179 ;;Total ram usage:        9 bytes
 11180 ;; Hardware stack levels used:    1
 11181 ;; Hardware stack levels required when called:    8
 11182 ;; This function calls:
 11183 ;;		_move_window
 11184 ;;		_st_clust
 11185 ;;		_sync_fs
 11186 ;;		_validate
 11187 ;; This function is called by:
 11188 ;;		_f_close
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           	psect	text29
 11193  0045A4                     __ptext29:
 11194                           	opt callstack 0
 11195  0045A4                     _f_sync:
 11196                           	opt callstack 21
 11197                           
 11198                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 11199                           
 11200                           ;incstack = 0
 11201  0045A4  C045  F002         	movff	f_sync@fp,validate@obj
 11202  0045A8  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 11203  0045AC  EC04  F028         	call	_validate	;wreg free
 11204  0045B0  6E4B               	movwf	f_sync@res,c
 11205                           
 11206                           ;ff.c: 2823:  if (res == FR_OK) {
 11207  0045B2  504B               	movf	f_sync@res,w,c
 11208  0045B4  A4D8               	btfss	status,2,c
 11209  0045B6  D095               	goto	l5934
 11210                           
 11211                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 11212  0045B8  EE20 F004          	lfsr	2,4
 11213  0045BC  5045               	movf	f_sync@fp,w,c
 11214  0045BE  26D9               	addwf	fsr2l,f,c
 11215  0045C0  5046               	movf	f_sync@fp+1,w,c
 11216  0045C2  22DA               	addwfc	fsr2h,f,c
 11217  0045C4  AADF               	btfss	indf2,5,c
 11218  0045C6  D08D               	goto	l5934
 11219                           
 11220                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 11221  0045C8  C045  FFD9         	movff	f_sync@fp,fsr2l
 11222  0045CC  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11223  0045D0  CFDE F030          	movff	postinc2,move_window@fs
 11224  0045D4  CFDD F031          	movff	postdec2,move_window@fs+1
 11225  0045D8  EE20 F01A          	lfsr	2,26
 11226  0045DC  5045               	movf	f_sync@fp,w,c
 11227  0045DE  26D9               	addwf	fsr2l,f,c
 11228  0045E0  5046               	movf	f_sync@fp+1,w,c
 11229  0045E2  22DA               	addwfc	fsr2h,f,c
 11230  0045E4  CFDE F032          	movff	postinc2,move_window@sector
 11231  0045E8  CFDE F033          	movff	postinc2,move_window@sector+1
 11232  0045EC  CFDE F034          	movff	postinc2,move_window@sector+2
 11233  0045F0  CFDE F035          	movff	postinc2,move_window@sector+3
 11234  0045F4  ECB1  F027         	call	_move_window	;wreg free
 11235  0045F8  6E4B               	movwf	f_sync@res,c
 11236                           
 11237                           ;ff.c: 2834:    if (res == FR_OK) {
 11238  0045FA  504B               	movf	f_sync@res,w,c
 11239  0045FC  A4D8               	btfss	status,2,c
 11240  0045FE  D071               	goto	l5934
 11241                           
 11242                           ;ff.c: 2835:     dir = fp->dir_ptr;
 11243  004600  EE20 F01E          	lfsr	2,30
 11244  004604  5045               	movf	f_sync@fp,w,c
 11245  004606  26D9               	addwf	fsr2l,f,c
 11246  004608  5046               	movf	f_sync@fp+1,w,c
 11247  00460A  22DA               	addwfc	fsr2h,f,c
 11248  00460C  CFDE F04C          	movff	postinc2,f_sync@dir
 11249  004610  CFDD F04D          	movff	postdec2,f_sync@dir+1
 11250                           
 11251                           ;ff.c: 2836:     dir[11] |= 0x20;
 11252  004614  EE20 F00B          	lfsr	2,11
 11253  004618  504C               	movf	f_sync@dir,w,c
 11254  00461A  26D9               	addwf	fsr2l,f,c
 11255  00461C  504D               	movf	f_sync@dir+1,w,c
 11256  00461E  22DA               	addwfc	fsr2h,f,c
 11257  004620  0E00               	movlw	0
 11258  004622  8ADB               	bsf	plusw2,5,c
 11259                           
 11260                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11261  004624  EE20 F00A          	lfsr	2,10
 11262  004628  5045               	movf	f_sync@fp,w,c
 11263  00462A  26D9               	addwf	fsr2l,f,c
 11264  00462C  5046               	movf	f_sync@fp+1,w,c
 11265  00462E  22DA               	addwfc	fsr2h,f,c
 11266  004630  EE10 F01C          	lfsr	1,28
 11267  004634  504C               	movf	f_sync@dir,w,c
 11268  004636  26E1               	addwf	fsr1l,f,c
 11269  004638  504D               	movf	f_sync@dir+1,w,c
 11270  00463A  22E2               	addwfc	fsr1h,f,c
 11271  00463C  CFDE FFE6          	movff	postinc2,postinc1
 11272  004640  CFDE FFE6          	movff	postinc2,postinc1
 11273  004644  CFDE FFE6          	movff	postinc2,postinc1
 11274  004648  CFDE FFE6          	movff	postinc2,postinc1
 11275                           
 11276                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11277  00464C  C04C  F001         	movff	f_sync@dir,st_clust@dir
 11278  004650  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11279  004654  EE20 F00E          	lfsr	2,14
 11280  004658  5045               	movf	f_sync@fp,w,c
 11281  00465A  26D9               	addwf	fsr2l,f,c
 11282  00465C  5046               	movf	f_sync@fp+1,w,c
 11283  00465E  22DA               	addwfc	fsr2h,f,c
 11284  004660  CFDE F003          	movff	postinc2,st_clust@cl
 11285  004664  CFDE F004          	movff	postinc2,st_clust@cl+1
 11286  004668  CFDE F005          	movff	postinc2,st_clust@cl+2
 11287  00466C  CFDE F006          	movff	postinc2,st_clust@cl+3
 11288  004670  EC84  F02B         	call	_st_clust	;wreg free
 11289                           
 11290                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11291  004674  EE20 F016          	lfsr	2,22
 11292  004678  504C               	movf	f_sync@dir,w,c
 11293  00467A  26D9               	addwf	fsr2l,f,c
 11294  00467C  504D               	movf	f_sync@dir+1,w,c
 11295  00467E  22DA               	addwfc	fsr2h,f,c
 11296  004680  0E00               	movlw	0
 11297  004682  6EDE               	movwf	postinc2,c
 11298  004684  0E00               	movlw	0
 11299  004686  6EDE               	movwf	postinc2,c
 11300  004688  0E21               	movlw	33
 11301  00468A  6EDE               	movwf	postinc2,c
 11302  00468C  0E46               	movlw	70
 11303  00468E  6EDD               	movwf	postdec2,c
 11304                           
 11305                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11306  004690  EE20 F012          	lfsr	2,18
 11307  004694  504C               	movf	f_sync@dir,w,c
 11308  004696  26D9               	addwf	fsr2l,f,c
 11309  004698  504D               	movf	f_sync@dir+1,w,c
 11310  00469A  22DA               	addwfc	fsr2h,f,c
 11311  00469C  0E00               	movlw	0
 11312  00469E  6EDE               	movwf	postinc2,c
 11313  0046A0  0E00               	movlw	0
 11314  0046A2  6EDD               	movwf	postdec2,c
 11315                           
 11316                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11317  0046A4  EE20 F004          	lfsr	2,4
 11318  0046A8  5045               	movf	f_sync@fp,w,c
 11319  0046AA  26D9               	addwf	fsr2l,f,c
 11320  0046AC  5046               	movf	f_sync@fp+1,w,c
 11321  0046AE  22DA               	addwfc	fsr2h,f,c
 11322  0046B0  0EDF               	movlw	223
 11323  0046B2  16DF               	andwf	indf2,f,c
 11324                           
 11325                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11326  0046B4  C045  FFD9         	movff	f_sync@fp,fsr2l
 11327  0046B8  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11328  0046BC  EE10 F004          	lfsr	1,4
 11329  0046C0  50DE               	movf	postinc2,w,c
 11330  0046C2  26E1               	addwf	fsr1l,f,c
 11331  0046C4  50DD               	movf	postdec2,w,c
 11332  0046C6  22E2               	addwfc	fsr1h,f,c
 11333  0046C8  0E01               	movlw	1
 11334  0046CA  6EE7               	movwf	indf1,c
 11335                           
 11336                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11337  0046CC  C045  FFD9         	movff	f_sync@fp,fsr2l
 11338  0046D0  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11339  0046D4  CFDE F03A          	movff	postinc2,sync_fs@fs
 11340  0046D8  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11341  0046DC  ECFE  F01F         	call	_sync_fs	;wreg free
 11342  0046E0  6E4B               	movwf	f_sync@res,c
 11343  0046E2                     l5934:
 11344                           
 11345                           ;ff.c: 2849:  return res;
 11346  0046E2  504B               	movf	f_sync@res,w,c
 11347  0046E4  0012               	return		;funcret
 11348  0046E6                     __end_of_f_sync:
 11349                           	opt callstack 0
 11350                           
 11351 ;; *************** function _validate *****************
 11352 ;; Defined at:
 11353 ;;		line 2372 in file "ff.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;  obj             2    1[COMRAM] PTR void 
 11356 ;;		 -> Fil(32), 
 11357 ;; Auto vars:     Size  Location     Type
 11358 ;;  fil             2    7[COMRAM] PTR struct .
 11359 ;;		 -> Fil(32), 
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  1    wreg      enum E93
 11362 ;; Registers used:
 11363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11369 ;;      Params:         2       0       0       0       0       0       0       0       0
 11370 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11371 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11372 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11373 ;;Total ram usage:        8 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    1
 11376 ;; This function calls:
 11377 ;;		_disk_status
 11378 ;; This function is called by:
 11379 ;;		_f_write
 11380 ;;		_f_sync
 11381 ;;		_f_close
 11382 ;;		_f_lseek
 11383 ;;		_f_read
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           	psect	text30
 11388  005008                     __ptext30:
 11389                           	opt callstack 0
 11390  005008                     _validate:
 11391                           	opt callstack 28
 11392                           
 11393                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11394                           
 11395                           ;incstack = 0
 11396  005008  C002  F008         	movff	validate@obj,validate@fil
 11397  00500C  C003  F009         	movff	validate@obj+1,validate@fil+1
 11398                           
 11399                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11400  005010  5008               	movf	validate@fil,w,c
 11401  005012  1009               	iorwf	validate@fil+1,w,c
 11402  005014  B4D8               	btfsc	status,2,c
 11403  005016  D03E               	goto	u7070
 11404  005018  C008  FFD9         	movff	validate@fil,fsr2l
 11405  00501C  C009  FFDA         	movff	validate@fil+1,fsr2h
 11406  005020  50DE               	movf	postinc2,w,c
 11407  005022  10DE               	iorwf	postinc2,w,c
 11408  005024  B4D8               	btfsc	status,2,c
 11409  005026  D036               	goto	u7070
 11410  005028  C008  FFD9         	movff	validate@fil,fsr2l
 11411  00502C  C009  FFDA         	movff	validate@fil+1,fsr2h
 11412  005030  CFDE F004          	movff	postinc2,??_validate
 11413  005034  CFDD F005          	movff	postdec2,??_validate+1
 11414  005038  C004  FFD9         	movff	??_validate,fsr2l
 11415  00503C  C005  FFDA         	movff	??_validate+1,fsr2h
 11416  005040  50DF               	movf	indf2,w,c
 11417  005042  B4D8               	btfsc	status,2,c
 11418  005044  D027               	goto	u7070
 11419  005046  EE20 F002          	lfsr	2,2
 11420  00504A  5008               	movf	validate@fil,w,c
 11421  00504C  26D9               	addwf	fsr2l,f,c
 11422  00504E  5009               	movf	validate@fil+1,w,c
 11423  005050  22DA               	addwfc	fsr2h,f,c
 11424  005052  C008  FFE1         	movff	validate@fil,fsr1l
 11425  005056  C009  FFE2         	movff	validate@fil+1,fsr1h
 11426  00505A  EE00 F006          	lfsr	0,6
 11427  00505E  50E6               	movf	postinc1,w,c
 11428  005060  26E9               	addwf	fsr0l,f,c
 11429  005062  50E5               	movf	postdec1,w,c
 11430  005064  22EA               	addwfc	fsr0h,f,c
 11431  005066  50DE               	movf	postinc2,w,c
 11432  005068  18EE               	xorwf	postinc0,w,c
 11433  00506A  E114               	bnz	l5474
 11434  00506C  50DE               	movf	postinc2,w,c
 11435  00506E  18EE               	xorwf	postinc0,w,c
 11436  005070  A4D8               	btfss	status,2,c
 11437  005072  D010               	goto	u7070
 11438  005074  C008  FFD9         	movff	validate@fil,fsr2l
 11439  005078  C009  FFDA         	movff	validate@fil+1,fsr2h
 11440  00507C  EE10 F001          	lfsr	1,1
 11441  005080  50DE               	movf	postinc2,w,c
 11442  005082  26E1               	addwf	fsr1l,f,c
 11443  005084  50DD               	movf	postdec2,w,c
 11444  005086  22E2               	addwfc	fsr1h,f,c
 11445  005088  50E7               	movf	indf1,w,c
 11446  00508A  ECCC  F02B         	call	_disk_status
 11447  00508E  6E04               	movwf	??_validate& (0+255),c
 11448  005090  A004               	btfss	??_validate,0,c
 11449  005092  D002               	goto	l5478
 11450  005094                     u7070:
 11451  005094                     l5474:
 11452                           
 11453                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11454  005094  0E09               	movlw	9
 11455  005096  0012               	return	
 11456  005098                     l5478:
 11457                           
 11458                           ;ff.c: 2384:  return FR_OK;
 11459  005098  0E00               	movlw	0
 11460  00509A  0012               	return		;funcret
 11461  00509C                     __end_of_validate:
 11462                           	opt callstack 0
 11463                           
 11464 ;; *************** function _disk_status *****************
 11465 ;; Defined at:
 11466 ;;		line 356 in file "diskio.c"
 11467 ;; Parameters:    Size  Location     Type
 11468 ;;  pdrv            1    wreg     unsigned char 
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;  pdrv            1    0[COMRAM] unsigned char 
 11471 ;; Return value:  Size  Location     Type
 11472 ;;                  1    wreg      unsigned char 
 11473 ;; Registers used:
 11474 ;;		wreg, status,2
 11475 ;; Tracked objects:
 11476 ;;		On entry : 0/0
 11477 ;;		On exit  : 0/0
 11478 ;;		Unchanged: 0/0
 11479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11480 ;;      Params:         0       0       0       0       0       0       0       0       0
 11481 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11482 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11483 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11484 ;;Total ram usage:        1 bytes
 11485 ;; Hardware stack levels used:    1
 11486 ;; This function calls:
 11487 ;;		Nothing
 11488 ;; This function is called by:
 11489 ;;		_find_volume
 11490 ;;		_validate
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text31
 11495  005798                     __ptext31:
 11496                           	opt callstack 0
 11497  005798                     _disk_status:
 11498                           	opt callstack 28
 11499                           
 11500                           ;incstack = 0
 11501                           ;disk_status@pdrv stored from wreg
 11502  005798  6E01               	movwf	disk_status@pdrv,c
 11503                           
 11504                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11505  00579A  5001               	movf	disk_status@pdrv,w,c
 11506  00579C  B4D8               	btfsc	status,2,c
 11507  00579E  D002               	goto	l4688
 11508  0057A0  0E01               	movlw	1
 11509  0057A2  0012               	return	
 11510  0057A4                     l4688:
 11511                           
 11512                           ;diskio.c: 361:  return Stat;
 11513  0057A4  0100               	movlb	0	; () banked
 11514  0057A6  51F7               	movf	_Stat& (0+255),w,b
 11515  0057A8  0012               	return		;funcret
 11516  0057AA                     __end_of_disk_status:
 11517                           	opt callstack 0
 11518                           
 11519 ;; *************** function _sync_fs *****************
 11520 ;; Defined at:
 11521 ;;		line 760 in file "ff.c"
 11522 ;; Parameters:    Size  Location     Type
 11523 ;;  fs              2   57[COMRAM] PTR struct .
 11524 ;;		 -> NULL(0), FatFs(558), 
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;  res             1   67[COMRAM] enum E93
 11527 ;; Return value:  Size  Location     Type
 11528 ;;                  1    wreg      enum E93
 11529 ;; Registers used:
 11530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11536 ;;      Params:         2       0       0       0       0       0       0       0       0
 11537 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11538 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11539 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11540 ;;Total ram usage:       11 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:    7
 11543 ;; This function calls:
 11544 ;;		_disk_ioctl
 11545 ;;		_disk_write
 11546 ;;		_mem_set
 11547 ;;		_sync_window
 11548 ;; This function is called by:
 11549 ;;		_f_sync
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text32
 11554  003FFC                     __ptext32:
 11555                           	opt callstack 0
 11556  003FFC                     _sync_fs:
 11557                           	opt callstack 21
 11558                           
 11559                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11560                           
 11561                           ;incstack = 0
 11562  003FFC  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11563  004000  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11564  004004  ECDE  F020         	call	_sync_window	;wreg free
 11565  004008  6E44               	movwf	sync_fs@res,c
 11566                           
 11567                           ;ff.c: 768:  if (res == FR_OK) {
 11568  00400A  5044               	movf	sync_fs@res,w,c
 11569  00400C  A4D8               	btfss	status,2,c
 11570  00400E  D0D4               	goto	l333
 11571                           
 11572                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11573  004010  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11574  004014  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11575  004018  0E03               	movlw	3
 11576  00401A  18DE               	xorwf	postinc2,w,c
 11577  00401C  A4D8               	btfss	status,2,c
 11578  00401E  D0B8               	goto	l5170
 11579  004020  EE20 F005          	lfsr	2,5
 11580  004024  503A               	movf	sync_fs@fs,w,c
 11581  004026  26D9               	addwf	fsr2l,f,c
 11582  004028  503B               	movf	sync_fs@fs+1,w,c
 11583  00402A  22DA               	addwfc	fsr2h,f,c
 11584  00402C  04DE               	decf	postinc2,w,c
 11585  00402E  A4D8               	btfss	status,2,c
 11586  004030  D0AF               	goto	l5170
 11587                           
 11588                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11589  004032  0E2E               	movlw	46
 11590  004034  243A               	addwf	sync_fs@fs,w,c
 11591  004036  6E01               	movwf	mem_set@dst,c
 11592  004038  0E00               	movlw	0
 11593  00403A  203B               	addwfc	sync_fs@fs+1,w,c
 11594  00403C  6E02               	movwf	mem_set@dst+1,c
 11595  00403E  0E00               	movlw	0
 11596  004040  6E04               	movwf	mem_set@val+1,c
 11597  004042  0E00               	movlw	0
 11598  004044  6E03               	movwf	mem_set@val,c
 11599  004046  0E02               	movlw	2
 11600  004048  6E06               	movwf	mem_set@cnt+1,c
 11601  00404A  0E00               	movlw	0
 11602  00404C  6E05               	movwf	mem_set@cnt,c
 11603  00404E  EC58  F02B         	call	_mem_set	;wreg free
 11604                           
 11605                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11606  004052  EE22 F02C          	lfsr	2,556
 11607  004056  503A               	movf	sync_fs@fs,w,c
 11608  004058  26D9               	addwf	fsr2l,f,c
 11609  00405A  503B               	movf	sync_fs@fs+1,w,c
 11610  00405C  22DA               	addwfc	fsr2h,f,c
 11611  00405E  0E55               	movlw	85
 11612  004060  6EDE               	movwf	postinc2,c
 11613  004062  0EAA               	movlw	170
 11614  004064  6EDD               	movwf	postdec2,c
 11615                           
 11616                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11617  004066  EE20 F02E          	lfsr	2,46
 11618  00406A  503A               	movf	sync_fs@fs,w,c
 11619  00406C  26D9               	addwf	fsr2l,f,c
 11620  00406E  503B               	movf	sync_fs@fs+1,w,c
 11621  004070  22DA               	addwfc	fsr2h,f,c
 11622  004072  0E52               	movlw	82
 11623  004074  6EDE               	movwf	postinc2,c
 11624  004076  0E52               	movlw	82
 11625  004078  6EDE               	movwf	postinc2,c
 11626  00407A  0E61               	movlw	97
 11627  00407C  6EDE               	movwf	postinc2,c
 11628  00407E  0E41               	movlw	65
 11629  004080  6EDD               	movwf	postdec2,c
 11630                           
 11631                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11632  004082  EE22 F012          	lfsr	2,530
 11633  004086  503A               	movf	sync_fs@fs,w,c
 11634  004088  26D9               	addwf	fsr2l,f,c
 11635  00408A  503B               	movf	sync_fs@fs+1,w,c
 11636  00408C  22DA               	addwfc	fsr2h,f,c
 11637  00408E  0E72               	movlw	114
 11638  004090  6EDE               	movwf	postinc2,c
 11639  004092  0E72               	movlw	114
 11640  004094  6EDE               	movwf	postinc2,c
 11641  004096  0E41               	movlw	65
 11642  004098  6EDE               	movwf	postinc2,c
 11643  00409A  0E61               	movlw	97
 11644  00409C  6EDD               	movwf	postdec2,c
 11645                           
 11646                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11647  00409E  EE20 F00E          	lfsr	2,14
 11648  0040A2  503A               	movf	sync_fs@fs,w,c
 11649  0040A4  26D9               	addwf	fsr2l,f,c
 11650  0040A6  503B               	movf	sync_fs@fs+1,w,c
 11651  0040A8  22DA               	addwfc	fsr2h,f,c
 11652  0040AA  EE12 F016          	lfsr	1,534
 11653  0040AE  503A               	movf	sync_fs@fs,w,c
 11654  0040B0  26E1               	addwf	fsr1l,f,c
 11655  0040B2  503B               	movf	sync_fs@fs+1,w,c
 11656  0040B4  22E2               	addwfc	fsr1h,f,c
 11657  0040B6  CFDE FFE6          	movff	postinc2,postinc1
 11658  0040BA  CFDE FFE6          	movff	postinc2,postinc1
 11659  0040BE  CFDE FFE6          	movff	postinc2,postinc1
 11660  0040C2  CFDE FFE6          	movff	postinc2,postinc1
 11661                           
 11662                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11663  0040C6  EE20 F00A          	lfsr	2,10
 11664  0040CA  503A               	movf	sync_fs@fs,w,c
 11665  0040CC  26D9               	addwf	fsr2l,f,c
 11666  0040CE  503B               	movf	sync_fs@fs+1,w,c
 11667  0040D0  22DA               	addwfc	fsr2h,f,c
 11668  0040D2  EE12 F01A          	lfsr	1,538
 11669  0040D6  503A               	movf	sync_fs@fs,w,c
 11670  0040D8  26E1               	addwf	fsr1l,f,c
 11671  0040DA  503B               	movf	sync_fs@fs+1,w,c
 11672  0040DC  22E2               	addwfc	fsr1h,f,c
 11673  0040DE  CFDE FFE6          	movff	postinc2,postinc1
 11674  0040E2  CFDE FFE6          	movff	postinc2,postinc1
 11675  0040E6  CFDE FFE6          	movff	postinc2,postinc1
 11676  0040EA  CFDE FFE6          	movff	postinc2,postinc1
 11677                           
 11678                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11679  0040EE  EE20 F01A          	lfsr	2,26
 11680  0040F2  503A               	movf	sync_fs@fs,w,c
 11681  0040F4  26D9               	addwf	fsr2l,f,c
 11682  0040F6  503B               	movf	sync_fs@fs+1,w,c
 11683  0040F8  22DA               	addwfc	fsr2h,f,c
 11684  0040FA  CFDE F03C          	movff	postinc2,??_sync_fs
 11685  0040FE  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11686  004102  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11687  004106  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11688  00410A  0E01               	movlw	1
 11689  00410C  243C               	addwf	??_sync_fs,w,c
 11690  00410E  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11691  004110  0E00               	movlw	0
 11692  004112  203D               	addwfc	??_sync_fs+1,w,c
 11693  004114  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11694  004116  0E00               	movlw	0
 11695  004118  203E               	addwfc	??_sync_fs+2,w,c
 11696  00411A  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11697  00411C  0E00               	movlw	0
 11698  00411E  203F               	addwfc	??_sync_fs+3,w,c
 11699  004120  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11700  004122  EE20 F02A          	lfsr	2,42
 11701  004126  503A               	movf	sync_fs@fs,w,c
 11702  004128  26D9               	addwf	fsr2l,f,c
 11703  00412A  503B               	movf	sync_fs@fs+1,w,c
 11704  00412C  22DA               	addwfc	fsr2h,f,c
 11705  00412E  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11706  004132  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11707  004136  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11708  00413A  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11709                           
 11710                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11711  00413E  0E2E               	movlw	46
 11712  004140  243A               	addwf	sync_fs@fs,w,c
 11713  004142  6E11               	movwf	disk_write@buff,c
 11714  004144  0E00               	movlw	0
 11715  004146  203B               	addwfc	sync_fs@fs+1,w,c
 11716  004148  6E12               	movwf	disk_write@buff+1,c
 11717  00414A  EE20 F02A          	lfsr	2,42
 11718  00414E  503A               	movf	sync_fs@fs,w,c
 11719  004150  26D9               	addwf	fsr2l,f,c
 11720  004152  503B               	movf	sync_fs@fs+1,w,c
 11721  004154  22DA               	addwfc	fsr2h,f,c
 11722  004156  CFDE F013          	movff	postinc2,disk_write@sector
 11723  00415A  CFDE F014          	movff	postinc2,disk_write@sector+1
 11724  00415E  CFDE F015          	movff	postinc2,disk_write@sector+2
 11725  004162  CFDE F016          	movff	postinc2,disk_write@sector+3
 11726  004166  0E00               	movlw	0
 11727  004168  6E18               	movwf	disk_write@count+1,c
 11728  00416A  0E01               	movlw	1
 11729  00416C  6E17               	movwf	disk_write@count,c
 11730  00416E  EE20 F001          	lfsr	2,1
 11731  004172  503A               	movf	sync_fs@fs,w,c
 11732  004174  26D9               	addwf	fsr2l,f,c
 11733  004176  503B               	movf	sync_fs@fs+1,w,c
 11734  004178  22DA               	addwfc	fsr2h,f,c
 11735  00417A  50DF               	movf	indf2,w,c
 11736  00417C  EC73  F023         	call	_disk_write
 11737                           
 11738                           ;ff.c: 781:    fs->fsi_flag = 0;
 11739  004180  EE20 F005          	lfsr	2,5
 11740  004184  503A               	movf	sync_fs@fs,w,c
 11741  004186  26D9               	addwf	fsr2l,f,c
 11742  004188  503B               	movf	sync_fs@fs+1,w,c
 11743  00418A  22DA               	addwfc	fsr2h,f,c
 11744  00418C  0E00               	movlw	0
 11745  00418E  6EDF               	movwf	indf2,c
 11746  004190                     l5170:
 11747                           
 11748                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11749  004190  0E00               	movlw	0
 11750  004192  6E11               	movwf	disk_ioctl@cmd,c
 11751  004194  0E00               	movlw	0
 11752  004196  6E12               	movwf	disk_ioctl@buff,c
 11753  004198  0E00               	movlw	0
 11754  00419A  6E13               	movwf	disk_ioctl@buff+1,c
 11755  00419C  EE20 F001          	lfsr	2,1
 11756  0041A0  503A               	movf	sync_fs@fs,w,c
 11757  0041A2  26D9               	addwf	fsr2l,f,c
 11758  0041A4  503B               	movf	sync_fs@fs+1,w,c
 11759  0041A6  22DA               	addwfc	fsr2h,f,c
 11760  0041A8  50DF               	movf	indf2,w,c
 11761  0041AA  ECF2  F00F         	call	_disk_ioctl
 11762  0041AE  0900               	iorlw	0
 11763  0041B0  B4D8               	btfsc	status,2,c
 11764  0041B2  D002               	goto	l333
 11765                           
 11766                           ;ff.c: 785:    res = FR_DISK_ERR;
 11767  0041B4  0E01               	movlw	1
 11768  0041B6  6E44               	movwf	sync_fs@res,c
 11769  0041B8                     l333:
 11770                           
 11771                           ;ff.c: 788:  return res;
 11772  0041B8  5044               	movf	sync_fs@res,w,c
 11773  0041BA  0012               	return		;funcret
 11774  0041BC                     __end_of_sync_fs:
 11775                           	opt callstack 0
 11776                           
 11777 ;; *************** function _mem_set *****************
 11778 ;; Defined at:
 11779 ;;		line 524 in file "ff.c"
 11780 ;; Parameters:    Size  Location     Type
 11781 ;;  dst             2    0[COMRAM] PTR void 
 11782 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11783 ;;  val             2    2[COMRAM] int 
 11784 ;;  cnt             2    4[COMRAM] unsigned short 
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;  d               2    6[COMRAM] PTR unsigned char 
 11787 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11788 ;; Return value:  Size  Location     Type
 11789 ;;                  1    wreg      void 
 11790 ;; Registers used:
 11791 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11797 ;;      Params:         6       0       0       0       0       0       0       0       0
 11798 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11799 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11800 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11801 ;;Total ram usage:        8 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; This function calls:
 11804 ;;		Nothing
 11805 ;; This function is called by:
 11806 ;;		_sync_fs
 11807 ;;		_dir_next
 11808 ;;		_dir_register
 11809 ;;		_create_name
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           	psect	text33
 11814  0056B0                     __ptext33:
 11815                           	opt callstack 0
 11816  0056B0                     _mem_set:
 11817                           	opt callstack 26
 11818                           
 11819                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11820                           
 11821                           ;incstack = 0
 11822  0056B0  C001  F007         	movff	mem_set@dst,mem_set@d
 11823  0056B4  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11824                           
 11825                           ;ff.c: 527:  while (cnt--)
 11826  0056B8  D008               	goto	l4586
 11827  0056BA                     l4582:
 11828                           
 11829                           ;ff.c: 528:   *d++ = (BYTE)val;
 11830  0056BA  C007  FFD9         	movff	mem_set@d,fsr2l
 11831  0056BE  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11832  0056C2  C003  FFDF         	movff	mem_set@val,indf2
 11833  0056C6  4A07               	infsnz	mem_set@d,f,c
 11834  0056C8  2A08               	incf	mem_set@d+1,f,c
 11835  0056CA                     l4586:
 11836                           
 11837                           ;ff.c: 527:  while (cnt--)
 11838  0056CA  0605               	decf	mem_set@cnt,f,c
 11839  0056CC  A0D8               	btfss	status,0,c
 11840  0056CE  0606               	decf	mem_set@cnt+1,f,c
 11841  0056D0  2805               	incf	mem_set@cnt,w,c
 11842  0056D2  E1F3               	bnz	l4582
 11843  0056D4  2806               	incf	mem_set@cnt+1,w,c
 11844  0056D6  B4D8               	btfsc	status,2,c
 11845  0056D8  0012               	return	
 11846  0056DA  D7EF               	goto	l4582
 11847  0056DC                     __end_of_mem_set:
 11848                           	opt callstack 0
 11849                           
 11850 ;; *************** function _disk_ioctl *****************
 11851 ;; Defined at:
 11852 ;;		line 446 in file "diskio.c"
 11853 ;; Parameters:    Size  Location     Type
 11854 ;;  pdrv            1    wreg     unsigned char 
 11855 ;;  cmd             1   16[COMRAM] unsigned char 
 11856 ;;  buff            2   17[COMRAM] PTR void 
 11857 ;;		 -> NULL(0), 
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;  pdrv            1   48[COMRAM] unsigned char 
 11860 ;;  csd            16   32[COMRAM] unsigned char [16]
 11861 ;;  csize           4   49[COMRAM] unsigned long 
 11862 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11863 ;;		 -> NULL(0), 
 11864 ;;  n               1   54[COMRAM] unsigned char 
 11865 ;;  res             1   53[COMRAM] enum E43
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      enum E43
 11868 ;; Registers used:
 11869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11875 ;;      Params:         3       0       0       0       0       0       0       0       0
 11876 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11877 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11878 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11879 ;;Total ram usage:       41 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    5
 11882 ;; This function calls:
 11883 ;;		_SPI1_Exchange8bit
 11884 ;;		___wmul
 11885 ;;		_deselect
 11886 ;;		_rcvr_datablock
 11887 ;;		_select
 11888 ;;		_send_cmd
 11889 ;; This function is called by:
 11890 ;;		_sync_fs
 11891 ;; This function uses a non-reentrant model
 11892 ;;
 11893                           
 11894                           	psect	text34
 11895  001FE4                     __ptext34:
 11896                           	opt callstack 0
 11897  001FE4                     _disk_ioctl:
 11898                           	opt callstack 22
 11899                           
 11900                           ;incstack = 0
 11901                           ;disk_ioctl@pdrv stored from wreg
 11902  001FE4  6E31               	movwf	disk_ioctl@pdrv,c
 11903                           
 11904                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11905  001FE6  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11906  001FEA  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11907                           
 11908                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11909  001FEE  5031               	movf	disk_ioctl@pdrv,w,c
 11910  001FF0  B4D8               	btfsc	status,2,c
 11911  001FF2  D002               	goto	l4700
 11912  001FF4  0E04               	movlw	4
 11913  001FF6  0012               	return	
 11914  001FF8                     l4700:
 11915                           
 11916                           ;diskio.c: 459:  res = RES_ERROR;
 11917  001FF8  0E01               	movlw	1
 11918  001FFA  6E36               	movwf	disk_ioctl@res,c
 11919                           
 11920                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11921  001FFC  0100               	movlb	0	; () banked
 11922  001FFE  A1F7               	btfss	_Stat& (0+255),0,b
 11923  002000  D21B               	goto	l4800
 11924                           
 11925                           ; BSR set to: 0
 11926  002002  0E03               	movlw	3
 11927  002004  0012               	return	
 11928  002006                     l4708:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11932  002006  ECBD  F02B         	call	_select	;wreg free
 11933  00200A  0900               	iorlw	0
 11934  00200C  B4D8               	btfsc	status,2,c
 11935  00200E  D235               	goto	l4802
 11936  002010                     u5530:
 11937  002010  0E00               	movlw	0
 11938  002012  D210               	goto	L13
 11939  002014                     l4712:
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11943  002014  0E00               	movlw	0
 11944  002016  6E0B               	movwf	send_cmd@arg,c
 11945  002018  0E00               	movlw	0
 11946  00201A  6E0C               	movwf	send_cmd@arg+1,c
 11947  00201C  0E00               	movlw	0
 11948  00201E  6E0D               	movwf	send_cmd@arg+2,c
 11949  002020  0E00               	movlw	0
 11950  002022  6E0E               	movwf	send_cmd@arg+3,c
 11951  002024  0E09               	movlw	9
 11952  002026  EC8A  F02A         	call	_send_cmd
 11953  00202A  0900               	iorlw	0
 11954  00202C  A4D8               	btfss	status,2,c
 11955  00202E  D225               	goto	l4802
 11956  002030  0E21               	movlw	low disk_ioctl@csd
 11957  002032  6E02               	movwf	rcvr_datablock@buff,c
 11958  002034  0E00               	movlw	high disk_ioctl@csd
 11959  002036  6E03               	movwf	rcvr_datablock@buff+1,c
 11960  002038  0E00               	movlw	0
 11961  00203A  6E05               	movwf	rcvr_datablock@btr+1,c
 11962  00203C  0E10               	movlw	16
 11963  00203E  6E04               	movwf	rcvr_datablock@btr,c
 11964  002040  EC85  F029         	call	_rcvr_datablock	;wreg free
 11965  002044  0900               	iorlw	0
 11966  002046  B4D8               	btfsc	status,2,c
 11967  002048  D218               	goto	l4802
 11968                           
 11969                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11970  00204A  4421               	rlncf	disk_ioctl@csd,w,c
 11971  00204C  46E8               	rlncf	wreg,f,c
 11972  00204E  0B03               	andlw	3
 11973  002050  06E8               	decf	wreg,f,c
 11974  002052  A4D8               	btfss	status,2,c
 11975  002054  D04E               	goto	l4722
 11976                           
 11977                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11978  002056  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11979  00205A  0E3F               	movlw	63
 11980  00205C  1614               	andwf	??_disk_ioctl,f,c
 11981  00205E  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11982  002062  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11983  002064  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11984  002066  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11985  002068  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11986  00206C  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11987  002070  6A16               	clrf	??_disk_ioctl+2,c
 11988  002072  6A15               	clrf	??_disk_ioctl+1,c
 11989  002074  5029               	movf	disk_ioctl@csd+8,w,c
 11990  002076  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11991  002078  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11992  00207A  502A               	movf	disk_ioctl@csd+9,w,c
 11993  00207C  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11994  00207E  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11995  002080  5019               	movf	??_disk_ioctl+5,w,c
 11996  002082  261B               	addwf	??_disk_ioctl+7,f,c
 11997  002084  501A               	movf	??_disk_ioctl+6,w,c
 11998  002086  221C               	addwfc	??_disk_ioctl+8,f,c
 11999  002088  501B               	movf	??_disk_ioctl+7,w,c
 12000  00208A  2415               	addwf	??_disk_ioctl+1,w,c
 12001  00208C  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 12002  00208E  501C               	movf	??_disk_ioctl+8,w,c
 12003  002090  2016               	addwfc	??_disk_ioctl+2,w,c
 12004  002092  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 12005  002094  0E00               	movlw	0
 12006  002096  2017               	addwfc	??_disk_ioctl+3,w,c
 12007  002098  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 12008  00209A  0E00               	movlw	0
 12009  00209C  2018               	addwfc	??_disk_ioctl+4,w,c
 12010  00209E  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 12011  0020A0  0E01               	movlw	1
 12012  0020A2  241D               	addwf	??_disk_ioctl+9,w,c
 12013  0020A4  6E32               	movwf	disk_ioctl@csize,c
 12014  0020A6  0E00               	movlw	0
 12015  0020A8  201E               	addwfc	??_disk_ioctl+10,w,c
 12016  0020AA  6E33               	movwf	disk_ioctl@csize+1,c
 12017  0020AC  0E00               	movlw	0
 12018  0020AE  201F               	addwfc	??_disk_ioctl+11,w,c
 12019  0020B0  6E34               	movwf	disk_ioctl@csize+2,c
 12020  0020B2  0E00               	movlw	0
 12021  0020B4  2020               	addwfc	??_disk_ioctl+12,w,c
 12022  0020B6  6E35               	movwf	disk_ioctl@csize+3,c
 12023                           
 12024                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 12025  0020B8  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 12026  0020BC  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 12027  0020C0  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 12028  0020C4  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 12029  0020C8  0E0A               	movlw	10
 12030  0020CA                     u5575:
 12031  0020CA  90D8               	bcf	status,0,c
 12032  0020CC  3614               	rlcf	??_disk_ioctl,f,c
 12033  0020CE  3615               	rlcf	??_disk_ioctl+1,f,c
 12034  0020D0  3616               	rlcf	??_disk_ioctl+2,f,c
 12035  0020D2  3617               	rlcf	??_disk_ioctl+3,f,c
 12036  0020D4  2EE8               	decfsz	wreg,f,c
 12037  0020D6  D7F9               	goto	u5575
 12038  0020D8  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12039  0020DC  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12040  0020E0  C014  FFDE         	movff	??_disk_ioctl,postinc2
 12041  0020E4  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 12042  0020E8  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 12043  0020EC  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 12044                           
 12045                           ;diskio.c: 473:    } else {
 12046  0020F0  D78F               	goto	u5530
 12047  0020F2                     l4722:
 12048                           
 12049                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 12050  0020F2  6A14               	clrf	??_disk_ioctl& (0+255),c
 12051  0020F4  AE2B               	btfss	disk_ioctl@csd+10,7,c
 12052  0020F6  D001               	bra	u5585
 12053  0020F8  2A14               	incf	??_disk_ioctl& (0+255),f,c
 12054  0020FA                     u5585:
 12055  0020FA  0E01               	movlw	1
 12056  0020FC  1614               	andwf	??_disk_ioctl,f,c
 12057  0020FE  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 12058  002102  0E0F               	movlw	15
 12059  002104  1615               	andwf	??_disk_ioctl+1,f,c
 12060  002106  502A               	movf	disk_ioctl@csd+9,w,c
 12061  002108  0B03               	andlw	3
 12062  00210A  0D02               	mullw	2
 12063  00210C  50F3               	movf	prodl,w,c
 12064  00210E  2415               	addwf	??_disk_ioctl+1,w,c
 12065  002110  2414               	addwf	??_disk_ioctl,w,c
 12066  002112  0F02               	addlw	2
 12067  002114  6E37               	movwf	disk_ioctl@n,c
 12068                           
 12069                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 12070  002116  5027               	movf	disk_ioctl@csd+6,w,c
 12071  002118  0B03               	andlw	3
 12072  00211A  6E14               	movwf	??_disk_ioctl& (0+255),c
 12073  00211C  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12074  00211E  0E0A               	movlw	10
 12075  002120                     u5595:
 12076  002120  90D8               	bcf	status,0,c
 12077  002122  3614               	rlcf	??_disk_ioctl,f,c
 12078  002124  3615               	rlcf	??_disk_ioctl+1,f,c
 12079  002126  2EE8               	decfsz	wreg,f,c
 12080  002128  D7FB               	goto	u5595
 12081  00212A  5028               	movf	disk_ioctl@csd+7,w,c
 12082  00212C  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12083  00212E  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12084  002130  90D8               	bcf	status,0,c
 12085  002132  3616               	rlcf	??_disk_ioctl+2,f,c
 12086  002134  3617               	rlcf	??_disk_ioctl+3,f,c
 12087  002136  90D8               	bcf	status,0,c
 12088  002138  3616               	rlcf	??_disk_ioctl+2,f,c
 12089  00213A  3617               	rlcf	??_disk_ioctl+3,f,c
 12090  00213C  4429               	rlncf	disk_ioctl@csd+8,w,c
 12091  00213E  46E8               	rlncf	wreg,f,c
 12092  002140  0B03               	andlw	3
 12093  002142  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12094  002144  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 12095  002146  5016               	movf	??_disk_ioctl+2,w,c
 12096  002148  2618               	addwf	??_disk_ioctl+4,f,c
 12097  00214A  5017               	movf	??_disk_ioctl+3,w,c
 12098  00214C  2219               	addwfc	??_disk_ioctl+5,f,c
 12099  00214E  5014               	movf	??_disk_ioctl,w,c
 12100  002150  2618               	addwf	??_disk_ioctl+4,f,c
 12101  002152  5015               	movf	??_disk_ioctl+1,w,c
 12102  002154  2219               	addwfc	??_disk_ioctl+5,f,c
 12103  002156  0E01               	movlw	1
 12104  002158  2618               	addwf	??_disk_ioctl+4,f,c
 12105  00215A  0E00               	movlw	0
 12106  00215C  2219               	addwfc	??_disk_ioctl+5,f,c
 12107  00215E  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 12108  002162  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 12109  002166  6A34               	clrf	disk_ioctl@csize+2,c
 12110  002168  6A35               	clrf	disk_ioctl@csize+3,c
 12111                           
 12112                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 12113  00216A  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 12114  00216E  0EF7               	movlw	-9
 12115  002170  2614               	addwf	??_disk_ioctl,f,c
 12116  002172  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 12117  002176  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 12118  00217A  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 12119  00217E  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 12120  002182  2A14               	incf	??_disk_ioctl,f,c
 12121  002184  D005               	goto	u5600
 12122  002186                     u5605:
 12123  002186  90D8               	bcf	status,0,c
 12124  002188  3615               	rlcf	??_disk_ioctl+1,f,c
 12125  00218A  3616               	rlcf	??_disk_ioctl+2,f,c
 12126  00218C  3617               	rlcf	??_disk_ioctl+3,f,c
 12127  00218E  3618               	rlcf	??_disk_ioctl+4,f,c
 12128  002190                     u5600:
 12129  002190  2E14               	decfsz	??_disk_ioctl,f,c
 12130  002192  D7F9               	goto	u5605
 12131  002194  D03D               	goto	L15
 12132  002196                     l246:
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;diskio.c: 483:   if (CardType & 0x04) {
 12136  002196  A5D6               	btfss	_CardType& (0+255),2,b
 12137  002198  D048               	goto	l4748
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 12141  00219A  0E00               	movlw	0
 12142  00219C  6E0B               	movwf	send_cmd@arg,c
 12143  00219E  0E00               	movlw	0
 12144  0021A0  6E0C               	movwf	send_cmd@arg+1,c
 12145  0021A2  0E00               	movlw	0
 12146  0021A4  6E0D               	movwf	send_cmd@arg+2,c
 12147  0021A6  0E00               	movlw	0
 12148  0021A8  6E0E               	movwf	send_cmd@arg+3,c
 12149  0021AA  0E8D               	movlw	141
 12150  0021AC  EC8A  F02A         	call	_send_cmd
 12151  0021B0  0900               	iorlw	0
 12152  0021B2  A4D8               	btfss	status,2,c
 12153  0021B4  D162               	goto	l4802
 12154                           
 12155                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 12156  0021B6  0EFF               	movlw	255
 12157  0021B8  ECDE  F02B         	call	_SPI1_Exchange8bit
 12158                           
 12159                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 12160  0021BC  0E21               	movlw	low disk_ioctl@csd
 12161  0021BE  6E02               	movwf	rcvr_datablock@buff,c
 12162  0021C0  0E00               	movlw	high disk_ioctl@csd
 12163  0021C2  6E03               	movwf	rcvr_datablock@buff+1,c
 12164  0021C4  0E00               	movlw	0
 12165  0021C6  6E05               	movwf	rcvr_datablock@btr+1,c
 12166  0021C8  0E10               	movlw	16
 12167  0021CA  6E04               	movwf	rcvr_datablock@btr,c
 12168  0021CC  EC85  F029         	call	_rcvr_datablock	;wreg free
 12169  0021D0  0900               	iorlw	0
 12170  0021D2  B4D8               	btfsc	status,2,c
 12171  0021D4  D152               	goto	l4802
 12172                           
 12173                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 12174  0021D6  0E30               	movlw	48
 12175  0021D8  6E37               	movwf	disk_ioctl@n,c
 12176  0021DA  D004               	goto	l4742
 12177  0021DC                     l4738:
 12178  0021DC  0EFF               	movlw	255
 12179  0021DE  ECDE  F02B         	call	_SPI1_Exchange8bit
 12180  0021E2  0637               	decf	disk_ioctl@n,f,c
 12181  0021E4                     l4742:
 12182  0021E4  5037               	movf	disk_ioctl@n,w,c
 12183  0021E6  A4D8               	btfss	status,2,c
 12184  0021E8  D7F9               	goto	l4738
 12185                           
 12186                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 12187  0021EA  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12188  0021EE  3A14               	swapf	??_disk_ioctl,f,c
 12189  0021F0  0E0F               	movlw	15
 12190  0021F2  1614               	andwf	??_disk_ioctl,f,c
 12191  0021F4  0E10               	movlw	16
 12192  0021F6  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12193  0021F8  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12194  0021FA  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12195  0021FC  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12196  0021FE  2A14               	incf	??_disk_ioctl,f,c
 12197  002200  D005               	goto	u5650
 12198  002202                     u5655:
 12199  002202  90D8               	bcf	status,0,c
 12200  002204  3615               	rlcf	??_disk_ioctl+1,f,c
 12201  002206  3616               	rlcf	??_disk_ioctl+2,f,c
 12202  002208  3617               	rlcf	??_disk_ioctl+3,f,c
 12203  00220A  3618               	rlcf	??_disk_ioctl+4,f,c
 12204  00220C                     u5650:
 12205  00220C  2E14               	decfsz	??_disk_ioctl,f,c
 12206  00220E  D7F9               	goto	u5655
 12207  002210                     L15:
 12208  002210  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12209  002214  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12210  002218  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 12211  00221C  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 12212  002220  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 12213  002224  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 12214  002228  D6F3               	goto	u5530
 12215  00222A                     l4748:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 12219  00222A  0E00               	movlw	0
 12220  00222C  6E0B               	movwf	send_cmd@arg,c
 12221  00222E  0E00               	movlw	0
 12222  002230  6E0C               	movwf	send_cmd@arg+1,c
 12223  002232  0E00               	movlw	0
 12224  002234  6E0D               	movwf	send_cmd@arg+2,c
 12225  002236  0E00               	movlw	0
 12226  002238  6E0E               	movwf	send_cmd@arg+3,c
 12227  00223A  0E09               	movlw	9
 12228  00223C  EC8A  F02A         	call	_send_cmd
 12229  002240  0900               	iorlw	0
 12230  002242  A4D8               	btfss	status,2,c
 12231  002244  D11A               	goto	l4802
 12232  002246  0E21               	movlw	low disk_ioctl@csd
 12233  002248  6E02               	movwf	rcvr_datablock@buff,c
 12234  00224A  0E00               	movlw	high disk_ioctl@csd
 12235  00224C  6E03               	movwf	rcvr_datablock@buff+1,c
 12236  00224E  0E00               	movlw	0
 12237  002250  6E05               	movwf	rcvr_datablock@btr+1,c
 12238  002252  0E10               	movlw	16
 12239  002254  6E04               	movwf	rcvr_datablock@btr,c
 12240  002256  EC85  F029         	call	_rcvr_datablock	;wreg free
 12241  00225A  0900               	iorlw	0
 12242  00225C  B4D8               	btfsc	status,2,c
 12243  00225E  D10D               	goto	l4802
 12244                           
 12245                           ;diskio.c: 494:     if (CardType & 0x02) {
 12246  002260  0100               	movlb	0	; () banked
 12247  002262  A3D6               	btfss	_CardType& (0+255),1,b
 12248  002264  D02A               	goto	l4756
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 12252  002266  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 12253  00226A  0E06               	movlw	6
 12254  00226C  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12255  00226E                     u5695:
 12256  00226E  90D8               	bcf	status,0,c
 12257  002270  3214               	rrcf	??_disk_ioctl,f,c
 12258  002272  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 12259  002274  D7FC               	goto	u5695
 12260  002276  0EFF               	movlw	-1
 12261  002278  2614               	addwf	??_disk_ioctl,f,c
 12262  00227A  502B               	movf	disk_ioctl@csd+10,w,c
 12263  00227C  0B3F               	andlw	63
 12264  00227E  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12265  002280  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12266  002282  90D8               	bcf	status,0,c
 12267  002284  3616               	rlcf	??_disk_ioctl+2,f,c
 12268  002286  3617               	rlcf	??_disk_ioctl+3,f,c
 12269  002288  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12270  00228A  AE2C               	btfss	disk_ioctl@csd+11,7,c
 12271  00228C  D001               	bra	u5705
 12272  00228E  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 12273  002290                     u5705:
 12274  002290  0E01               	movlw	1
 12275  002292  1618               	andwf	??_disk_ioctl+4,f,c
 12276  002294  5018               	movf	??_disk_ioctl+4,w,c
 12277  002296  2616               	addwf	??_disk_ioctl+2,f,c
 12278  002298  0E00               	movlw	0
 12279  00229A  2217               	addwfc	??_disk_ioctl+3,f,c
 12280  00229C  0E01               	movlw	1
 12281  00229E  2616               	addwf	??_disk_ioctl+2,f,c
 12282  0022A0  0E00               	movlw	0
 12283  0022A2  2217               	addwfc	??_disk_ioctl+3,f,c
 12284  0022A4  2A14               	incf	??_disk_ioctl,f,c
 12285  0022A6  D003               	goto	u5714
 12286  0022A8                     u5715:
 12287  0022A8  90D8               	bcf	status,0,c
 12288  0022AA  3616               	rlcf	??_disk_ioctl+2,f,c
 12289  0022AC  3617               	rlcf	??_disk_ioctl+3,f,c
 12290  0022AE                     u5714:
 12291  0022AE  2E14               	decfsz	??_disk_ioctl,f,c
 12292  0022B0  D7FB               	goto	u5715
 12293  0022B2  5016               	movf	??_disk_ioctl+2,w,c
 12294  0022B4  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12295  0022B6  5017               	movf	??_disk_ioctl+3,w,c
 12296  0022B8  D034               	goto	L16
 12297  0022BA                     l4756:
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12301  0022BA  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12302  0022BE  90D8               	bcf	status,0,c
 12303  0022C0  3214               	rrcf	??_disk_ioctl,f,c
 12304  0022C2  90D8               	bcf	status,0,c
 12305  0022C4  3214               	rrcf	??_disk_ioctl,f,c
 12306  0022C6  0E1F               	movlw	31
 12307  0022C8  1614               	andwf	??_disk_ioctl,f,c
 12308  0022CA  0E01               	movlw	1
 12309  0022CC  2414               	addwf	??_disk_ioctl,w,c
 12310  0022CE  6E01               	movwf	___wmul@multiplier,c
 12311  0022D0  6A02               	clrf	___wmul@multiplier+1,c
 12312  0022D2  0E00               	movlw	0
 12313  0022D4  2202               	addwfc	___wmul@multiplier+1,f,c
 12314  0022D6  502C               	movf	disk_ioctl@csd+11,w,c
 12315  0022D8  0B03               	andlw	3
 12316  0022DA  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12317  0022DC  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12318  0022DE  90D8               	bcf	status,0,c
 12319  0022E0  3615               	rlcf	??_disk_ioctl+1,f,c
 12320  0022E2  3616               	rlcf	??_disk_ioctl+2,f,c
 12321  0022E4  90D8               	bcf	status,0,c
 12322  0022E6  3615               	rlcf	??_disk_ioctl+1,f,c
 12323  0022E8  3616               	rlcf	??_disk_ioctl+2,f,c
 12324  0022EA  90D8               	bcf	status,0,c
 12325  0022EC  3615               	rlcf	??_disk_ioctl+1,f,c
 12326  0022EE  3616               	rlcf	??_disk_ioctl+2,f,c
 12327  0022F0  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12328  0022F4  0E05               	movlw	5
 12329  0022F6  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12330  0022F8                     u5725:
 12331  0022F8  90D8               	bcf	status,0,c
 12332  0022FA  3217               	rrcf	??_disk_ioctl+3,f,c
 12333  0022FC  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12334  0022FE  D7FC               	goto	u5725
 12335  002300  0E07               	movlw	7
 12336  002302  1617               	andwf	??_disk_ioctl+3,f,c
 12337  002304  5017               	movf	??_disk_ioctl+3,w,c
 12338  002306  2615               	addwf	??_disk_ioctl+1,f,c
 12339  002308  0E00               	movlw	0
 12340  00230A  2216               	addwfc	??_disk_ioctl+2,f,c
 12341  00230C  0E01               	movlw	1
 12342  00230E  2415               	addwf	??_disk_ioctl+1,w,c
 12343  002310  6E03               	movwf	___wmul@multiplicand,c
 12344  002312  0E00               	movlw	0
 12345  002314  2016               	addwfc	??_disk_ioctl+2,w,c
 12346  002316  6E04               	movwf	___wmul@multiplicand+1,c
 12347  002318  EC99  F02B         	call	___wmul	;wreg free
 12348  00231C  5001               	movf	?___wmul,w,c
 12349  00231E  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12350  002320  5002               	movf	?___wmul+1,w,c
 12351  002322                     L16:
 12352  002322  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12353  002324  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12354  002326  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12355  002328  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12356  00232C  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12357  002330  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12358  002334  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12359  002338  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12360  00233C  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12361  002340  D667               	goto	u5530
 12362  002342                     l4760:
 12363                           
 12364                           ; BSR set to: 0
 12365                           ;diskio.c: 507:   *ptr = CardType;
 12366  002342  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12367  002346  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12368  00234A  C0D6  FFDF         	movff	_CardType,indf2
 12369  00234E  D660               	goto	u5530
 12370  002350                     l4764:
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12374  002350  0E00               	movlw	0
 12375  002352  6E0B               	movwf	send_cmd@arg,c
 12376  002354  0E00               	movlw	0
 12377  002356  6E0C               	movwf	send_cmd@arg+1,c
 12378  002358  0E00               	movlw	0
 12379  00235A  6E0D               	movwf	send_cmd@arg+2,c
 12380  00235C  0E00               	movlw	0
 12381  00235E  6E0E               	movwf	send_cmd@arg+3,c
 12382  002360  0E09               	movlw	9
 12383  002362  EC8A  F02A         	call	_send_cmd
 12384  002366  0900               	iorlw	0
 12385  002368  A4D8               	btfss	status,2,c
 12386  00236A  D087               	goto	l4802
 12387  00236C  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12388  002370  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12389  002374  0E00               	movlw	0
 12390  002376  6E05               	movwf	rcvr_datablock@btr+1,c
 12391  002378  0E10               	movlw	16
 12392  00237A  6E04               	movwf	rcvr_datablock@btr,c
 12393  00237C  EC85  F029         	call	_rcvr_datablock	;wreg free
 12394  002380                     L14:
 12395  002380  0900               	iorlw	0
 12396  002382  A4D8               	btfss	status,2,c
 12397  002384  D645               	goto	u5530
 12398  002386  D079               	goto	l4802
 12399  002388                     l4770:
 12400                           
 12401                           ; BSR set to: 0
 12402                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12403  002388  0E00               	movlw	0
 12404  00238A  6E0B               	movwf	send_cmd@arg,c
 12405  00238C  0E00               	movlw	0
 12406  00238E  6E0C               	movwf	send_cmd@arg+1,c
 12407  002390  0E00               	movlw	0
 12408  002392  6E0D               	movwf	send_cmd@arg+2,c
 12409  002394  0E00               	movlw	0
 12410  002396  6E0E               	movwf	send_cmd@arg+3,c
 12411  002398  0E0A               	movlw	10
 12412  00239A  EC8A  F02A         	call	_send_cmd
 12413  00239E  0900               	iorlw	0
 12414  0023A0  A4D8               	btfss	status,2,c
 12415  0023A2  D06B               	goto	l4802
 12416  0023A4  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12417  0023A8  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12418  0023AC  0E00               	movlw	0
 12419  0023AE  6E05               	movwf	rcvr_datablock@btr+1,c
 12420  0023B0  0E10               	movlw	16
 12421  0023B2  6E04               	movwf	rcvr_datablock@btr,c
 12422  0023B4  EC85  F029         	call	_rcvr_datablock	;wreg free
 12423  0023B8  D7E3               	goto	L14
 12424  0023BA                     l4776:
 12425                           
 12426                           ; BSR set to: 0
 12427                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12428  0023BA  0E00               	movlw	0
 12429  0023BC  6E0B               	movwf	send_cmd@arg,c
 12430  0023BE  0E00               	movlw	0
 12431  0023C0  6E0C               	movwf	send_cmd@arg+1,c
 12432  0023C2  0E00               	movlw	0
 12433  0023C4  6E0D               	movwf	send_cmd@arg+2,c
 12434  0023C6  0E00               	movlw	0
 12435  0023C8  6E0E               	movwf	send_cmd@arg+3,c
 12436  0023CA  0E3A               	movlw	58
 12437  0023CC  EC8A  F02A         	call	_send_cmd
 12438  0023D0  0900               	iorlw	0
 12439  0023D2  A4D8               	btfss	status,2,c
 12440  0023D4  D052               	goto	l4802
 12441                           
 12442                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12443  0023D6  0E04               	movlw	4
 12444  0023D8  6E37               	movwf	disk_ioctl@n,c
 12445  0023DA  D00B               	goto	l4786
 12446  0023DC                     l4780:
 12447  0023DC  0EFF               	movlw	255
 12448  0023DE  ECDE  F02B         	call	_SPI1_Exchange8bit
 12449  0023E2  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12450  0023E6  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12451  0023EA  6EDF               	movwf	indf2,c
 12452  0023EC  4A38               	infsnz	disk_ioctl@ptr,f,c
 12453  0023EE  2A39               	incf	disk_ioctl@ptr+1,f,c
 12454  0023F0  0637               	decf	disk_ioctl@n,f,c
 12455  0023F2                     l4786:
 12456  0023F2  5037               	movf	disk_ioctl@n,w,c
 12457  0023F4  B4D8               	btfsc	status,2,c
 12458  0023F6  D60C               	goto	u5530
 12459  0023F8  D7F1               	goto	l4780
 12460  0023FA                     l4790:
 12461                           
 12462                           ; BSR set to: 0
 12463                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12464  0023FA  0E00               	movlw	0
 12465  0023FC  6E0B               	movwf	send_cmd@arg,c
 12466  0023FE  0E00               	movlw	0
 12467  002400  6E0C               	movwf	send_cmd@arg+1,c
 12468  002402  0E00               	movlw	0
 12469  002404  6E0D               	movwf	send_cmd@arg+2,c
 12470  002406  0E00               	movlw	0
 12471  002408  6E0E               	movwf	send_cmd@arg+3,c
 12472  00240A  0E8D               	movlw	141
 12473  00240C  EC8A  F02A         	call	_send_cmd
 12474  002410  0900               	iorlw	0
 12475  002412  A4D8               	btfss	status,2,c
 12476  002414  D032               	goto	l4802
 12477                           
 12478                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12479  002416  0EFF               	movlw	255
 12480  002418  ECDE  F02B         	call	_SPI1_Exchange8bit
 12481                           
 12482                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12483  00241C  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12484  002420  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12485  002424  0E00               	movlw	0
 12486  002426  6E05               	movwf	rcvr_datablock@btr+1,c
 12487  002428  0E40               	movlw	64
 12488  00242A  6E04               	movwf	rcvr_datablock@btr,c
 12489  00242C  EC85  F029         	call	_rcvr_datablock	;wreg free
 12490  002430  D7A7               	goto	L14
 12491  002432                     l4798:
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;diskio.c: 539:   res = RES_PARERR;
 12495  002432  0E04               	movlw	4
 12496  002434                     L13:
 12497  002434  6E36               	movwf	disk_ioctl@res,c
 12498                           
 12499                           ;diskio.c: 540:  }
 12500  002436  D021               	goto	l4802
 12501  002438                     l4800:
 12502                           
 12503                           ; BSR set to: 0
 12504  002438  5011               	movf	disk_ioctl@cmd,w,c
 12505  00243A  6E14               	movwf	??_disk_ioctl& (0+255),c
 12506  00243C  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12507                           
 12508                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12509                           ; Switch size 1, requested type "simple"
 12510                           ; Number of cases is 1, Range of values is 0 to 0
 12511                           ; switch strategies available:
 12512                           ; Name         Instructions Cycles
 12513                           ; simple_byte            4     3 (average)
 12514                           ;	Chosen strategy is simple_byte
 12515  00243E  5015               	movf	??_disk_ioctl+1,w,c
 12516  002440  0A00               	xorlw	0	; case 0
 12517  002442  A4D8               	btfss	status,2,c
 12518  002444  D7F6               	goto	l4798
 12519                           
 12520                           ; BSR set to: 0
 12521                           ; Switch size 1, requested type "simple"
 12522                           ; Number of cases is 8, Range of values is 0 to 14
 12523                           ; switch strategies available:
 12524                           ; Name         Instructions Cycles
 12525                           ; simple_byte           25    13 (average)
 12526                           ;	Chosen strategy is simple_byte
 12527  002446  5014               	movf	??_disk_ioctl,w,c
 12528  002448  0A00               	xorlw	0	; case 0
 12529  00244A  B4D8               	btfsc	status,2,c
 12530  00244C  D5DC               	goto	l4708
 12531  00244E  0A01               	xorlw	1	; case 1
 12532  002450  B4D8               	btfsc	status,2,c
 12533  002452  D5E0               	goto	l4712
 12534  002454  0A02               	xorlw	2	; case 3
 12535  002456  B4D8               	btfsc	status,2,c
 12536  002458  D69E               	goto	l246
 12537  00245A  0A09               	xorlw	9	; case 10
 12538  00245C  B4D8               	btfsc	status,2,c
 12539  00245E  D771               	goto	l4760
 12540  002460  0A01               	xorlw	1	; case 11
 12541  002462  B4D8               	btfsc	status,2,c
 12542  002464  D775               	goto	l4764
 12543  002466  0A07               	xorlw	7	; case 12
 12544  002468  B4D8               	btfsc	status,2,c
 12545  00246A  D78E               	goto	l4770
 12546  00246C  0A01               	xorlw	1	; case 13
 12547  00246E  B4D8               	btfsc	status,2,c
 12548  002470  D7A4               	goto	l4776
 12549  002472  0A03               	xorlw	3	; case 14
 12550  002474  B4D8               	btfsc	status,2,c
 12551  002476  D7C1               	goto	l4790
 12552  002478  D7DC               	goto	l4798
 12553  00247A                     l4802:
 12554                           
 12555                           ;diskio.c: 542:  deselect();
 12556  00247A  EC02  F02C         	call	_deselect	;wreg free
 12557                           
 12558                           ;diskio.c: 544:  return res;
 12559  00247E  5036               	movf	disk_ioctl@res,w,c
 12560  002480  0012               	return		;funcret
 12561  002482                     __end_of_disk_ioctl:
 12562                           	opt callstack 0
 12563                           
 12564 ;; *************** function ___wmul *****************
 12565 ;; Defined at:
 12566 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  multiplier      2    0[COMRAM] unsigned int 
 12569 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;  product         2    4[COMRAM] unsigned int 
 12572 ;; Return value:  Size  Location     Type
 12573 ;;                  2    0[COMRAM] unsigned int 
 12574 ;; Registers used:
 12575 ;;		wreg, status,2, status,0, prodl, prodh
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12581 ;;      Params:         4       0       0       0       0       0       0       0       0
 12582 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12583 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12584 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12585 ;;Total ram usage:        6 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; This function calls:
 12588 ;;		Nothing
 12589 ;; This function is called by:
 12590 ;;		_disk_ioctl
 12591 ;; This function uses a non-reentrant model
 12592 ;;
 12593                           
 12594                           	psect	text35
 12595  005732                     __ptext35:
 12596                           	opt callstack 0
 12597  005732                     ___wmul:
 12598                           	opt callstack 26
 12599                           
 12600                           ;incstack = 0
 12601  005732  5001               	movf	___wmul@multiplier,w,c
 12602  005734  0203               	mulwf	___wmul@multiplicand,c
 12603  005736  CFF3 F005          	movff	prodl,___wmul@product
 12604  00573A  CFF4 F006          	movff	prodh,___wmul@product+1
 12605  00573E  5001               	movf	___wmul@multiplier,w,c
 12606  005740  0204               	mulwf	___wmul@multiplicand+1,c
 12607  005742  50F3               	movf	prodl,w,c
 12608  005744  2606               	addwf	___wmul@product+1,f,c
 12609  005746  5002               	movf	___wmul@multiplier+1,w,c
 12610  005748  0203               	mulwf	___wmul@multiplicand,c
 12611  00574A  50F3               	movf	prodl,w,c
 12612  00574C  2606               	addwf	___wmul@product+1,f,c
 12613  00574E  C005  F001         	movff	___wmul@product,?___wmul
 12614  005752  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12615  005756  0012               	return		;funcret
 12616  005758                     __end_of___wmul:
 12617                           	opt callstack 0
 12618                           
 12619 ;; *************** function _st_clust *****************
 12620 ;; Defined at:
 12621 ;;		line 1252 in file "ff.c"
 12622 ;; Parameters:    Size  Location     Type
 12623 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12624 ;;		 -> NULL(0), FatFs(558), 
 12625 ;;  cl              4    2[COMRAM] unsigned long 
 12626 ;; Auto vars:     Size  Location     Type
 12627 ;;		None
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  1    wreg      void 
 12630 ;; Registers used:
 12631 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12632 ;; Tracked objects:
 12633 ;;		On entry : 0/0
 12634 ;;		On exit  : 0/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12637 ;;      Params:         6       0       0       0       0       0       0       0       0
 12638 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12639 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12640 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12641 ;;Total ram usage:        6 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; This function calls:
 12644 ;;		Nothing
 12645 ;; This function is called by:
 12646 ;;		_f_open
 12647 ;;		_f_sync
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           	psect	text36
 12652  005708                     __ptext36:
 12653                           	opt callstack 0
 12654  005708                     _st_clust:
 12655                           	opt callstack 29
 12656                           
 12657                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12658                           
 12659                           ;incstack = 0
 12660  005708  EE20 F01A          	lfsr	2,26
 12661  00570C  5001               	movf	st_clust@dir,w,c
 12662  00570E  26D9               	addwf	fsr2l,f,c
 12663  005710  5002               	movf	st_clust@dir+1,w,c
 12664  005712  22DA               	addwfc	fsr2h,f,c
 12665  005714  C003  FFDE         	movff	st_clust@cl,postinc2
 12666  005718  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12667                           
 12668                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12669  00571C  EE20 F014          	lfsr	2,20
 12670  005720  5001               	movf	st_clust@dir,w,c
 12671  005722  26D9               	addwf	fsr2l,f,c
 12672  005724  5002               	movf	st_clust@dir+1,w,c
 12673  005726  22DA               	addwfc	fsr2h,f,c
 12674  005728  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12675  00572C  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12676  005730  0012               	return		;funcret
 12677  005732                     __end_of_st_clust:
 12678                           	opt callstack 0
 12679                           
 12680 ;; *************** function _move_window *****************
 12681 ;; Defined at:
 12682 ;;		line 729 in file "ff.c"
 12683 ;; Parameters:    Size  Location     Type
 12684 ;;  fs              2   47[COMRAM] PTR struct .
 12685 ;;		 -> NULL(0), FatFs(558), 
 12686 ;;  sector          4   49[COMRAM] unsigned long 
 12687 ;; Auto vars:     Size  Location     Type
 12688 ;;  res             1   57[COMRAM] enum E93
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  1    wreg      enum E93
 12691 ;; Registers used:
 12692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12693 ;; Tracked objects:
 12694 ;;		On entry : 0/0
 12695 ;;		On exit  : 0/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12698 ;;      Params:         6       0       0       0       0       0       0       0       0
 12699 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12700 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12701 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12702 ;;Total ram usage:       11 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    7
 12705 ;; This function calls:
 12706 ;;		_disk_read
 12707 ;;		_sync_window
 12708 ;; This function is called by:
 12709 ;;		_get_fat
 12710 ;;		_put_fat
 12711 ;;		_dir_alloc
 12712 ;;		_dir_find
 12713 ;;		_dir_register
 12714 ;;		_check_fs
 12715 ;;		_find_volume
 12716 ;;		_f_open
 12717 ;;		_f_write
 12718 ;;		_f_sync
 12719 ;;		_f_read
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           	psect	text37
 12724  004F62                     __ptext37:
 12725                           	opt callstack 0
 12726  004F62                     _move_window:
 12727                           	opt callstack 22
 12728                           
 12729                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12730                           
 12731                           ;incstack = 0
 12732  004F62  0E00               	movlw	0
 12733  004F64  6E3A               	movwf	move_window@res,c
 12734                           
 12735                           ;ff.c: 737:  if (sector != fs->winsect) {
 12736  004F66  EE20 F02A          	lfsr	2,42
 12737  004F6A  5030               	movf	move_window@fs,w,c
 12738  004F6C  26D9               	addwf	fsr2l,f,c
 12739  004F6E  5031               	movf	move_window@fs+1,w,c
 12740  004F70  22DA               	addwfc	fsr2h,f,c
 12741  004F72  5032               	movf	move_window@sector,w,c
 12742  004F74  18DE               	xorwf	postinc2,w,c
 12743  004F76  E10A               	bnz	u5030
 12744  004F78  5033               	movf	move_window@sector+1,w,c
 12745  004F7A  18DE               	xorwf	postinc2,w,c
 12746  004F7C  E107               	bnz	u5030
 12747  004F7E  5034               	movf	move_window@sector+2,w,c
 12748  004F80  18DE               	xorwf	postinc2,w,c
 12749  004F82  E104               	bnz	u5030
 12750  004F84  5035               	movf	move_window@sector+3,w,c
 12751  004F86  18DE               	xorwf	postinc2,w,c
 12752  004F88  B4D8               	btfsc	status,2,c
 12753  004F8A  D03C               	goto	l4434
 12754  004F8C                     u5030:
 12755                           
 12756                           ;ff.c: 739:   res = sync_window(fs);
 12757  004F8C  C030  F01B         	movff	move_window@fs,sync_window@fs
 12758  004F90  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12759  004F94  ECDE  F020         	call	_sync_window	;wreg free
 12760  004F98  6E3A               	movwf	move_window@res,c
 12761                           
 12762                           ;ff.c: 741:   if (res == FR_OK) {
 12763  004F9A  503A               	movf	move_window@res,w,c
 12764  004F9C  A4D8               	btfss	status,2,c
 12765  004F9E  D032               	goto	l4434
 12766                           
 12767                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12768  004FA0  0E2E               	movlw	46
 12769  004FA2  2430               	addwf	move_window@fs,w,c
 12770  004FA4  6E11               	movwf	disk_read@buff,c
 12771  004FA6  0E00               	movlw	0
 12772  004FA8  2031               	addwfc	move_window@fs+1,w,c
 12773  004FAA  6E12               	movwf	disk_read@buff+1,c
 12774  004FAC  C032  F013         	movff	move_window@sector,disk_read@sector
 12775  004FB0  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12776  004FB4  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12777  004FB8  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12778  004FBC  0E00               	movlw	0
 12779  004FBE  6E18               	movwf	disk_read@count+1,c
 12780  004FC0  0E01               	movlw	1
 12781  004FC2  6E17               	movwf	disk_read@count,c
 12782  004FC4  EE20 F001          	lfsr	2,1
 12783  004FC8  5030               	movf	move_window@fs,w,c
 12784  004FCA  26D9               	addwf	fsr2l,f,c
 12785  004FCC  5031               	movf	move_window@fs+1,w,c
 12786  004FCE  22DA               	addwfc	fsr2h,f,c
 12787  004FD0  50DF               	movf	indf2,w,c
 12788  004FD2  EC39  F026         	call	_disk_read
 12789  004FD6  0900               	iorlw	0
 12790  004FD8  B4D8               	btfsc	status,2,c
 12791  004FDA  D006               	goto	l4432
 12792                           
 12793                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12794  004FDC  6832               	setf	move_window@sector,c
 12795  004FDE  6833               	setf	move_window@sector+1,c
 12796  004FE0  6834               	setf	move_window@sector+2,c
 12797  004FE2  6835               	setf	move_window@sector+3,c
 12798                           
 12799                           ;ff.c: 744:     res = FR_DISK_ERR;
 12800  004FE4  0E01               	movlw	1
 12801  004FE6  6E3A               	movwf	move_window@res,c
 12802  004FE8                     l4432:
 12803                           
 12804                           ;ff.c: 746:    fs->winsect = sector;
 12805  004FE8  EE20 F02A          	lfsr	2,42
 12806  004FEC  5030               	movf	move_window@fs,w,c
 12807  004FEE  26D9               	addwf	fsr2l,f,c
 12808  004FF0  5031               	movf	move_window@fs+1,w,c
 12809  004FF2  22DA               	addwfc	fsr2h,f,c
 12810  004FF4  C032  FFDE         	movff	move_window@sector,postinc2
 12811  004FF8  C033  FFDE         	movff	move_window@sector+1,postinc2
 12812  004FFC  C034  FFDE         	movff	move_window@sector+2,postinc2
 12813  005000  C035  FFDE         	movff	move_window@sector+3,postinc2
 12814  005004                     l4434:
 12815                           
 12816                           ;ff.c: 749:  return res;
 12817  005004  503A               	movf	move_window@res,w,c
 12818  005006  0012               	return		;funcret
 12819  005008                     __end_of_move_window:
 12820                           	opt callstack 0
 12821                           
 12822 ;; *************** function _sync_window *****************
 12823 ;; Defined at:
 12824 ;;		line 700 in file "ff.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;  fs              2   26[COMRAM] PTR struct .
 12827 ;;		 -> NULL(0), FatFs(558), 
 12828 ;; Auto vars:     Size  Location     Type
 12829 ;;  wsect           4   43[COMRAM] unsigned long 
 12830 ;;  nf              2   41[COMRAM] unsigned short 
 12831 ;;  res             1   40[COMRAM] enum E93
 12832 ;; Return value:  Size  Location     Type
 12833 ;;                  1    wreg      enum E93
 12834 ;; Registers used:
 12835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12836 ;; Tracked objects:
 12837 ;;		On entry : 0/0
 12838 ;;		On exit  : 0/0
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12841 ;;      Params:         2       0       0       0       0       0       0       0       0
 12842 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12843 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12844 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12845 ;;Total ram usage:       21 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; Hardware stack levels required when called:    6
 12848 ;; This function calls:
 12849 ;;		_disk_write
 12850 ;; This function is called by:
 12851 ;;		_move_window
 12852 ;;		_sync_fs
 12853 ;;		_dir_next
 12854 ;;		_f_write
 12855 ;; This function uses a non-reentrant model
 12856 ;;
 12857                           
 12858                           	psect	text38
 12859  0041BC                     __ptext38:
 12860                           	opt callstack 0
 12861  0041BC                     _sync_window:
 12862                           	opt callstack 23
 12863                           
 12864                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12865                           
 12866                           ;incstack = 0
 12867  0041BC  0E00               	movlw	0
 12868  0041BE  6E29               	movwf	sync_window@res,c
 12869                           
 12870                           ;ff.c: 709:  if (fs->wflag) {
 12871  0041C0  EE20 F004          	lfsr	2,4
 12872  0041C4  501B               	movf	sync_window@fs,w,c
 12873  0041C6  26D9               	addwf	fsr2l,f,c
 12874  0041C8  501C               	movf	sync_window@fs+1,w,c
 12875  0041CA  22DA               	addwfc	fsr2h,f,c
 12876  0041CC  50DF               	movf	indf2,w,c
 12877  0041CE  B4D8               	btfsc	status,2,c
 12878  0041D0  D09F               	goto	l4414
 12879                           
 12880                           ;ff.c: 710:   wsect = fs->winsect;
 12881  0041D2  EE20 F02A          	lfsr	2,42
 12882  0041D6  501B               	movf	sync_window@fs,w,c
 12883  0041D8  26D9               	addwf	fsr2l,f,c
 12884  0041DA  501C               	movf	sync_window@fs+1,w,c
 12885  0041DC  22DA               	addwfc	fsr2h,f,c
 12886  0041DE  CFDE F02C          	movff	postinc2,sync_window@wsect
 12887  0041E2  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12888  0041E6  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12889  0041EA  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12890                           
 12891                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12892  0041EE  0E2E               	movlw	46
 12893  0041F0  241B               	addwf	sync_window@fs,w,c
 12894  0041F2  6E11               	movwf	disk_write@buff,c
 12895  0041F4  0E00               	movlw	0
 12896  0041F6  201C               	addwfc	sync_window@fs+1,w,c
 12897  0041F8  6E12               	movwf	disk_write@buff+1,c
 12898  0041FA  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12899  0041FE  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12900  004202  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12901  004206  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12902  00420A  0E00               	movlw	0
 12903  00420C  6E18               	movwf	disk_write@count+1,c
 12904  00420E  0E01               	movlw	1
 12905  004210  6E17               	movwf	disk_write@count,c
 12906  004212  EE20 F001          	lfsr	2,1
 12907  004216  501B               	movf	sync_window@fs,w,c
 12908  004218  26D9               	addwf	fsr2l,f,c
 12909  00421A  501C               	movf	sync_window@fs+1,w,c
 12910  00421C  22DA               	addwfc	fsr2h,f,c
 12911  00421E  50DF               	movf	indf2,w,c
 12912  004220  EC73  F023         	call	_disk_write
 12913  004224  0900               	iorlw	0
 12914  004226  B4D8               	btfsc	status,2,c
 12915  004228  D003               	goto	l4396
 12916                           
 12917                           ;ff.c: 712:    res = FR_DISK_ERR;
 12918  00422A  0E01               	movlw	1
 12919  00422C  6E29               	movwf	sync_window@res,c
 12920                           
 12921                           ;ff.c: 713:   } else {
 12922  00422E  D070               	goto	l4414
 12923  004230                     l4396:
 12924                           
 12925                           ;ff.c: 714:    fs->wflag = 0;
 12926  004230  EE20 F004          	lfsr	2,4
 12927  004234  501B               	movf	sync_window@fs,w,c
 12928  004236  26D9               	addwf	fsr2l,f,c
 12929  004238  501C               	movf	sync_window@fs+1,w,c
 12930  00423A  22DA               	addwfc	fsr2h,f,c
 12931  00423C  0E00               	movlw	0
 12932  00423E  6EDF               	movwf	indf2,c
 12933                           
 12934                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12935  004240  EE20 F016          	lfsr	2,22
 12936  004244  501B               	movf	sync_window@fs,w,c
 12937  004246  26D9               	addwf	fsr2l,f,c
 12938  004248  501C               	movf	sync_window@fs+1,w,c
 12939  00424A  22DA               	addwfc	fsr2h,f,c
 12940  00424C  EE10 F01E          	lfsr	1,30
 12941  004250  501B               	movf	sync_window@fs,w,c
 12942  004252  26E1               	addwf	fsr1l,f,c
 12943  004254  501C               	movf	sync_window@fs+1,w,c
 12944  004256  22E2               	addwfc	fsr1h,f,c
 12945  004258  CFE6 F021          	movff	postinc1,??_sync_window+4
 12946  00425C  CFE6 F022          	movff	postinc1,??_sync_window+5
 12947  004260  CFE6 F023          	movff	postinc1,??_sync_window+6
 12948  004264  CFE6 F024          	movff	postinc1,??_sync_window+7
 12949  004268  5021               	movf	??_sync_window+4,w,c
 12950  00426A  5C2C               	subwf	sync_window@wsect,w,c
 12951  00426C  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12952  00426E  5022               	movf	??_sync_window+5,w,c
 12953  004270  582D               	subwfb	sync_window@wsect+1,w,c
 12954  004272  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12955  004274  5023               	movf	??_sync_window+6,w,c
 12956  004276  582E               	subwfb	sync_window@wsect+2,w,c
 12957  004278  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12958  00427A  5024               	movf	??_sync_window+7,w,c
 12959  00427C  582F               	subwfb	sync_window@wsect+3,w,c
 12960  00427E  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12961  004280  50DE               	movf	postinc2,w,c
 12962  004282  5C25               	subwf	??_sync_window+8,w,c
 12963  004284  50DE               	movf	postinc2,w,c
 12964  004286  5826               	subwfb	??_sync_window+9,w,c
 12965  004288  50DE               	movf	postinc2,w,c
 12966  00428A  5827               	subwfb	??_sync_window+10,w,c
 12967  00428C  50DE               	movf	postinc2,w,c
 12968  00428E  5828               	subwfb	??_sync_window+11,w,c
 12969  004290  B0D8               	btfsc	status,0,c
 12970  004292  D03E               	goto	l4414
 12971                           
 12972                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12973  004294  EE20 F003          	lfsr	2,3
 12974  004298  501B               	movf	sync_window@fs,w,c
 12975  00429A  26D9               	addwf	fsr2l,f,c
 12976  00429C  501C               	movf	sync_window@fs+1,w,c
 12977  00429E  22DA               	addwfc	fsr2h,f,c
 12978  0042A0  50DF               	movf	indf2,w,c
 12979  0042A2  6E1D               	movwf	??_sync_window& (0+255),c
 12980  0042A4  501D               	movf	??_sync_window,w,c
 12981  0042A6  6E2A               	movwf	sync_window@nf,c
 12982  0042A8  6A2B               	clrf	sync_window@nf+1,c
 12983  0042AA                     l4402:
 12984  0042AA  502B               	movf	sync_window@nf+1,w,c
 12985  0042AC  E104               	bnz	l4406
 12986  0042AE  0E02               	movlw	2
 12987  0042B0  5C2A               	subwf	sync_window@nf,w,c
 12988  0042B2  A0D8               	btfss	status,0,c
 12989  0042B4  D02D               	goto	l4414
 12990  0042B6                     l4406:
 12991                           
 12992                           ;ff.c: 717:      wsect += fs->fsize;
 12993  0042B6  EE20 F016          	lfsr	2,22
 12994  0042BA  501B               	movf	sync_window@fs,w,c
 12995  0042BC  26D9               	addwf	fsr2l,f,c
 12996  0042BE  501C               	movf	sync_window@fs+1,w,c
 12997  0042C0  22DA               	addwfc	fsr2h,f,c
 12998  0042C2  50DE               	movf	postinc2,w,c
 12999  0042C4  262C               	addwf	sync_window@wsect,f,c
 13000  0042C6  50DE               	movf	postinc2,w,c
 13001  0042C8  222D               	addwfc	sync_window@wsect+1,f,c
 13002  0042CA  50DE               	movf	postinc2,w,c
 13003  0042CC  222E               	addwfc	sync_window@wsect+2,f,c
 13004  0042CE  50DD               	movf	postdec2,w,c
 13005  0042D0  222F               	addwfc	sync_window@wsect+3,f,c
 13006                           
 13007                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 13008  0042D2  0E2E               	movlw	46
 13009  0042D4  241B               	addwf	sync_window@fs,w,c
 13010  0042D6  6E11               	movwf	disk_write@buff,c
 13011  0042D8  0E00               	movlw	0
 13012  0042DA  201C               	addwfc	sync_window@fs+1,w,c
 13013  0042DC  6E12               	movwf	disk_write@buff+1,c
 13014  0042DE  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 13015  0042E2  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 13016  0042E6  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 13017  0042EA  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 13018  0042EE  0E00               	movlw	0
 13019  0042F0  6E18               	movwf	disk_write@count+1,c
 13020  0042F2  0E01               	movlw	1
 13021  0042F4  6E17               	movwf	disk_write@count,c
 13022  0042F6  EE20 F001          	lfsr	2,1
 13023  0042FA  501B               	movf	sync_window@fs,w,c
 13024  0042FC  26D9               	addwf	fsr2l,f,c
 13025  0042FE  501C               	movf	sync_window@fs+1,w,c
 13026  004300  22DA               	addwfc	fsr2h,f,c
 13027  004302  50DF               	movf	indf2,w,c
 13028  004304  EC73  F023         	call	_disk_write
 13029                           
 13030                           ;ff.c: 719:     }
 13031  004308  062A               	decf	sync_window@nf,f,c
 13032  00430A  A0D8               	btfss	status,0,c
 13033  00430C  062B               	decf	sync_window@nf+1,f,c
 13034  00430E  D7CD               	goto	l4402
 13035  004310                     l4414:
 13036                           
 13037                           ;ff.c: 723:  return res;
 13038  004310  5029               	movf	sync_window@res,w,c
 13039  004312  0012               	return		;funcret
 13040  004314                     __end_of_sync_window:
 13041                           	opt callstack 0
 13042                           
 13043 ;; *************** function _disk_write *****************
 13044 ;; Defined at:
 13045 ;;		line 405 in file "diskio.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  pdrv            1    wreg     unsigned char 
 13048 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 13049 ;;		 -> FatFs.win(512), NULL(0), STR_8(47), FatFs(558), 
 13050 ;;  sector          4   18[COMRAM] unsigned long 
 13051 ;;  count           2   22[COMRAM] unsigned short 
 13052 ;; Auto vars:     Size  Location     Type
 13053 ;;  pdrv            1   25[COMRAM] unsigned char 
 13054 ;; Return value:  Size  Location     Type
 13055 ;;                  1    wreg      enum E43
 13056 ;; Registers used:
 13057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13058 ;; Tracked objects:
 13059 ;;		On entry : 0/0
 13060 ;;		On exit  : 0/0
 13061 ;;		Unchanged: 0/0
 13062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13063 ;;      Params:         8       0       0       0       0       0       0       0       0
 13064 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13065 ;;      Temps:          1       0       0       0       0       0       0       0       0
 13066 ;;      Totals:        10       0       0       0       0       0       0       0       0
 13067 ;;Total ram usage:       10 bytes
 13068 ;; Hardware stack levels used:    1
 13069 ;; Hardware stack levels required when called:    5
 13070 ;; This function calls:
 13071 ;;		_deselect
 13072 ;;		_send_cmd
 13073 ;;		_xmit_datablock
 13074 ;; This function is called by:
 13075 ;;		_sync_window
 13076 ;;		_sync_fs
 13077 ;;		_f_write
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           	psect	text39
 13082  0046E6                     __ptext39:
 13083                           	opt callstack 0
 13084  0046E6                     _disk_write:
 13085                           	opt callstack 23
 13086                           
 13087                           ;incstack = 0
 13088                           ;disk_write@pdrv stored from wreg
 13089  0046E6  6E1A               	movwf	disk_write@pdrv,c
 13090                           
 13091                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 13092  0046E8  501A               	movf	disk_write@pdrv,w,c
 13093  0046EA  A4D8               	btfss	status,2,c
 13094  0046EC  D004               	goto	u4720
 13095  0046EE  5017               	movf	disk_write@count,w,c
 13096  0046F0  1018               	iorwf	disk_write@count+1,w,c
 13097  0046F2  A4D8               	btfss	status,2,c
 13098  0046F4  D002               	goto	l217
 13099  0046F6                     u4720:
 13100  0046F6  0E04               	movlw	4
 13101  0046F8  0012               	return	
 13102  0046FA                     l217:
 13103                           
 13104                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 13105  0046FA  0100               	movlb	0	; () banked
 13106  0046FC  A1F7               	btfss	_Stat& (0+255),0,b
 13107  0046FE  D002               	goto	l221
 13108                           
 13109                           ; BSR set to: 0
 13110  004700  0E03               	movlw	3
 13111  004702  0012               	return	
 13112  004704                     l221:
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 13116  004704  A5F7               	btfss	_Stat& (0+255),2,b
 13117  004706  D002               	goto	l222
 13118                           
 13119                           ; BSR set to: 0
 13120  004708  0E02               	movlw	2
 13121  00470A  0012               	return	
 13122  00470C                     l222:
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 13126  00470C  B7D6               	btfsc	_CardType& (0+255),3,b
 13127  00470E  D008               	goto	l223
 13128                           
 13129                           ; BSR set to: 0
 13130  004710  0E09               	movlw	9
 13131  004712                     u4765:
 13132  004712  90D8               	bcf	status,0,c
 13133  004714  3613               	rlcf	disk_write@sector,f,c
 13134  004716  3614               	rlcf	disk_write@sector+1,f,c
 13135  004718  3615               	rlcf	disk_write@sector+2,f,c
 13136  00471A  3616               	rlcf	disk_write@sector+3,f,c
 13137  00471C  2EE8               	decfsz	wreg,f,c
 13138  00471E  D7F9               	goto	u4765
 13139  004720                     l223:
 13140                           
 13141                           ; BSR set to: 0
 13142                           ;diskio.c: 418:  if (count == 1) {
 13143  004720  0417               	decf	disk_write@count,w,c
 13144  004722  1018               	iorwf	disk_write@count+1,w,c
 13145  004724  A4D8               	btfss	status,2,c
 13146  004726  D01D               	goto	l4328
 13147                           
 13148                           ; BSR set to: 0
 13149                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 13150  004728  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 13151  00472C  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 13152  004730  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 13153  004734  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 13154  004738  0E18               	movlw	24
 13155  00473A  EC8A  F02A         	call	_send_cmd
 13156  00473E  0900               	iorlw	0
 13157  004740  A4D8               	btfss	status,2,c
 13158  004742  D04F               	goto	l4342
 13159  004744  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 13160  004748  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 13161  00474C  0EFE               	movlw	254
 13162  00474E  6E06               	movwf	xmit_datablock@token,c
 13163  004750  EC0F  F029         	call	_xmit_datablock	;wreg free
 13164  004754  0900               	iorlw	0
 13165  004756  B4D8               	btfsc	status,2,c
 13166  004758  D044               	goto	l4342
 13167                           
 13168                           ;diskio.c: 421:    count = 0;
 13169  00475A  0E00               	movlw	0
 13170  00475C  6E18               	movwf	disk_write@count+1,c
 13171  00475E  0E00               	movlw	0
 13172  004760  D03F               	goto	L17
 13173  004762                     l4328:
 13174                           
 13175                           ; BSR set to: 0
 13176                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 13177  004762  C0D6  F019         	movff	_CardType,??_disk_write
 13178  004766  0E06               	movlw	6
 13179  004768  1619               	andwf	??_disk_write,f,c
 13180  00476A  B4D8               	btfsc	status,2,c
 13181  00476C  D009               	goto	l227
 13182                           
 13183                           ; BSR set to: 0
 13184  00476E  C017  F00B         	movff	disk_write@count,send_cmd@arg
 13185  004772  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 13186  004776  6A0D               	clrf	send_cmd@arg+2,c
 13187  004778  6A0E               	clrf	send_cmd@arg+3,c
 13188  00477A  0E97               	movlw	151
 13189  00477C  EC8A  F02A         	call	_send_cmd
 13190  004780                     l227:
 13191                           
 13192                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 13193  004780  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 13194  004784  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 13195  004788  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 13196  00478C  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 13197  004790  0E19               	movlw	25
 13198  004792  EC8A  F02A         	call	_send_cmd
 13199  004796  0900               	iorlw	0
 13200  004798  A4D8               	btfss	status,2,c
 13201  00479A  D023               	goto	l4342
 13202  00479C                     u4810:
 13203                           
 13204                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 13205  00479C  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 13206  0047A0  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 13207  0047A4  0EFC               	movlw	252
 13208  0047A6  6E06               	movwf	xmit_datablock@token,c
 13209  0047A8  EC0F  F029         	call	_xmit_datablock	;wreg free
 13210  0047AC  0900               	iorlw	0
 13211  0047AE  B4D8               	btfsc	status,2,c
 13212  0047B0  D009               	goto	u4830
 13213                           
 13214                           ;diskio.c: 428:     buff += 512;
 13215  0047B2  0E02               	movlw	2
 13216  0047B4  2612               	addwf	disk_write@buff+1,f,c
 13217                           
 13218                           ;diskio.c: 429:    } while (--count);
 13219  0047B6  0617               	decf	disk_write@count,f,c
 13220  0047B8  A0D8               	btfss	status,0,c
 13221  0047BA  0618               	decf	disk_write@count+1,f,c
 13222  0047BC  5017               	movf	disk_write@count,w,c
 13223  0047BE  1018               	iorwf	disk_write@count+1,w,c
 13224  0047C0  A4D8               	btfss	status,2,c
 13225  0047C2  D7EC               	goto	u4810
 13226  0047C4                     u4830:
 13227                           
 13228                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 13229  0047C4  0E00               	movlw	0
 13230  0047C6  6E04               	movwf	xmit_datablock@buff,c
 13231  0047C8  0E00               	movlw	0
 13232  0047CA  6E05               	movwf	xmit_datablock@buff+1,c
 13233  0047CC  0EFD               	movlw	253
 13234  0047CE  6E06               	movwf	xmit_datablock@token,c
 13235  0047D0  EC0F  F029         	call	_xmit_datablock	;wreg free
 13236  0047D4  0900               	iorlw	0
 13237  0047D6  A4D8               	btfss	status,2,c
 13238  0047D8  D004               	goto	l4342
 13239                           
 13240                           ;diskio.c: 431:     count = 1;
 13241  0047DA  0E00               	movlw	0
 13242  0047DC  6E18               	movwf	disk_write@count+1,c
 13243  0047DE  0E01               	movlw	1
 13244  0047E0                     L17:
 13245  0047E0  6E17               	movwf	disk_write@count,c
 13246  0047E2                     l4342:
 13247                           
 13248                           ;diskio.c: 434:  deselect();
 13249  0047E2  EC02  F02C         	call	_deselect	;wreg free
 13250                           
 13251                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 13252  0047E6  5017               	movf	disk_write@count,w,c
 13253  0047E8  1018               	iorwf	disk_write@count+1,w,c
 13254  0047EA  B4D8               	btfsc	status,2,c
 13255  0047EC  D002               	goto	u4850
 13256  0047EE  0E01               	movlw	1
 13257  0047F0  0012               	return	
 13258  0047F2                     u4850:
 13259  0047F2  0E00               	movlw	0
 13260  0047F4  0012               	return		;funcret
 13261  0047F6                     __end_of_disk_write:
 13262                           	opt callstack 0
 13263                           
 13264 ;; *************** function _xmit_datablock *****************
 13265 ;; Defined at:
 13266 ;;		line 156 in file "diskio.c"
 13267 ;; Parameters:    Size  Location     Type
 13268 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13269 ;;		 -> FatFs.win(512), NULL(0), STR_8(47), FatFs(558), 
 13270 ;;  token           1    5[COMRAM] unsigned char 
 13271 ;; Auto vars:     Size  Location     Type
 13272 ;;  i               2    6[COMRAM] unsigned short 
 13273 ;;  resp            1    8[COMRAM] unsigned char 
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  1    wreg      unsigned char 
 13276 ;; Registers used:
 13277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13283 ;;      Params:         3       0       0       0       0       0       0       0       0
 13284 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13285 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13286 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13287 ;;Total ram usage:        6 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    2
 13290 ;; This function calls:
 13291 ;;		_SPI1_Exchange8bit
 13292 ;;		_wait_ready
 13293 ;; This function is called by:
 13294 ;;		_disk_write
 13295 ;; This function uses a non-reentrant model
 13296 ;;
 13297                           
 13298                           	psect	text40
 13299  00521E                     __ptext40:
 13300                           	opt callstack 0
 13301  00521E                     _xmit_datablock:
 13302                           	opt callstack 25
 13303                           
 13304                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13305                           
 13306                           ;incstack = 0
 13307  00521E  ECC9  F02A         	call	_wait_ready	;wreg free
 13308  005222  0900               	iorlw	0
 13309  005224  A4D8               	btfss	status,2,c
 13310  005226  D002               	goto	l4234
 13311  005228                     u4600:
 13312  005228  0E00               	movlw	0
 13313  00522A  0012               	return	
 13314  00522C                     l4234:
 13315                           
 13316                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13317  00522C  5006               	movf	xmit_datablock@token,w,c
 13318  00522E  ECDE  F02B         	call	_SPI1_Exchange8bit
 13319                           
 13320                           ;diskio.c: 168:  if (token != 0xFD) {
 13321  005232  0EFD               	movlw	253
 13322  005234  1806               	xorwf	xmit_datablock@token,w,c
 13323  005236  B4D8               	btfsc	status,2,c
 13324  005238  D02E               	goto	l4254
 13325                           
 13326                           ;diskio.c: 169:   i = 512;
 13327  00523A  0E02               	movlw	2
 13328  00523C  6E08               	movwf	xmit_datablock@i+1,c
 13329  00523E  0E00               	movlw	0
 13330  005240  6E07               	movwf	xmit_datablock@i,c
 13331  005242                     l4240:
 13332                           
 13333                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13334  005242  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13335  005246  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13336  00524A  6AF8               	clrf	tblptru,c
 13337  00524C  0E07               	movlw	(high __ramtop+-1)
 13338  00524E  64F7               	cpfsgt	tblptrh,c
 13339  005250  D003               	bra	u4627
 13340  005252  0008               	tblrd		*
 13341  005254  50F5               	movf	tablat,w,c
 13342  005256  D005               	bra	u4620
 13343  005258                     u4627:
 13344  005258  CFF6 FFE9          	movff	tblptrl,fsr0l
 13345  00525C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13346  005260  50EF               	movf	indf0,w,c
 13347  005262                     u4620:
 13348  005262  ECDE  F02B         	call	_SPI1_Exchange8bit
 13349  005266  4A04               	infsnz	xmit_datablock@buff,f,c
 13350  005268  2A05               	incf	xmit_datablock@buff+1,f,c
 13351  00526A  0607               	decf	xmit_datablock@i,f,c
 13352  00526C  A0D8               	btfss	status,0,c
 13353  00526E  0608               	decf	xmit_datablock@i+1,f,c
 13354  005270  5007               	movf	xmit_datablock@i,w,c
 13355  005272  1008               	iorwf	xmit_datablock@i+1,w,c
 13356  005274  A4D8               	btfss	status,2,c
 13357  005276  D7E5               	goto	l4240
 13358                           
 13359                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13360  005278  0EFF               	movlw	255
 13361  00527A  ECDE  F02B         	call	_SPI1_Exchange8bit
 13362                           
 13363                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13364  00527E  0EFF               	movlw	255
 13365  005280  ECDE  F02B         	call	_SPI1_Exchange8bit
 13366                           
 13367                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13368  005284  0EFF               	movlw	255
 13369  005286  ECDE  F02B         	call	_SPI1_Exchange8bit
 13370  00528A  6E09               	movwf	xmit_datablock@resp,c
 13371                           
 13372                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13373  00528C  5009               	movf	xmit_datablock@resp,w,c
 13374  00528E  0B1F               	andlw	31
 13375  005290  0A05               	xorlw	5
 13376  005292  A4D8               	btfss	status,2,c
 13377  005294  D7C9               	goto	u4600
 13378  005296                     l4254:
 13379                           
 13380                           ;diskio.c: 180:  return 1;
 13381  005296  0E01               	movlw	1
 13382  005298  0012               	return		;funcret
 13383  00529A                     __end_of_xmit_datablock:
 13384                           	opt callstack 0
 13385                           
 13386 ;; *************** function _disk_read *****************
 13387 ;; Defined at:
 13388 ;;		line 370 in file "diskio.c"
 13389 ;; Parameters:    Size  Location     Type
 13390 ;;  pdrv            1    wreg     unsigned char 
 13391 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13392 ;;		 -> NULL(0), FatFs(558), 
 13393 ;;  sector          4   18[COMRAM] unsigned long 
 13394 ;;  count           2   22[COMRAM] unsigned short 
 13395 ;; Auto vars:     Size  Location     Type
 13396 ;;  pdrv            1   24[COMRAM] unsigned char 
 13397 ;;  cmd             1   27[COMRAM] unsigned char 
 13398 ;; Return value:  Size  Location     Type
 13399 ;;                  1    wreg      enum E43
 13400 ;; Registers used:
 13401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13402 ;; Tracked objects:
 13403 ;;		On entry : 0/0
 13404 ;;		On exit  : 0/0
 13405 ;;		Unchanged: 0/0
 13406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13407 ;;      Params:         8       0       0       0       0       0       0       0       0
 13408 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13409 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13410 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13411 ;;Total ram usage:       12 bytes
 13412 ;; Hardware stack levels used:    1
 13413 ;; Hardware stack levels required when called:    5
 13414 ;; This function calls:
 13415 ;;		_deselect
 13416 ;;		_rcvr_datablock
 13417 ;;		_send_cmd
 13418 ;; This function is called by:
 13419 ;;		_move_window
 13420 ;;		_f_read
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           	psect	text41
 13425  004C72                     __ptext41:
 13426                           	opt callstack 0
 13427  004C72                     _disk_read:
 13428                           	opt callstack 23
 13429                           
 13430                           ;incstack = 0
 13431                           ;disk_read@pdrv stored from wreg
 13432  004C72  6E19               	movwf	disk_read@pdrv,c
 13433                           
 13434                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13435  004C74  5019               	movf	disk_read@pdrv,w,c
 13436  004C76  A4D8               	btfss	status,2,c
 13437  004C78  D004               	goto	u4880
 13438  004C7A  5017               	movf	disk_read@count,w,c
 13439  004C7C  1018               	iorwf	disk_read@count+1,w,c
 13440  004C7E  A4D8               	btfss	status,2,c
 13441  004C80  D002               	goto	l200
 13442  004C82                     u4880:
 13443  004C82  0E04               	movlw	4
 13444  004C84  0012               	return	
 13445  004C86                     l200:
 13446                           
 13447                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13448  004C86  0100               	movlb	0	; () banked
 13449  004C88  A1F7               	btfss	_Stat& (0+255),0,b
 13450  004C8A  D002               	goto	l204
 13451                           
 13452                           ; BSR set to: 0
 13453  004C8C  0E03               	movlw	3
 13454  004C8E  0012               	return	
 13455  004C90                     l204:
 13456                           
 13457                           ; BSR set to: 0
 13458                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13459  004C90  B7D6               	btfsc	_CardType& (0+255),3,b
 13460  004C92  D008               	goto	l205
 13461                           
 13462                           ; BSR set to: 0
 13463  004C94  0E09               	movlw	9
 13464  004C96                     u4915:
 13465  004C96  90D8               	bcf	status,0,c
 13466  004C98  3613               	rlcf	disk_read@sector,f,c
 13467  004C9A  3614               	rlcf	disk_read@sector+1,f,c
 13468  004C9C  3615               	rlcf	disk_read@sector+2,f,c
 13469  004C9E  3616               	rlcf	disk_read@sector+3,f,c
 13470  004CA0  2EE8               	decfsz	wreg,f,c
 13471  004CA2  D7F9               	goto	u4915
 13472  004CA4                     l205:
 13473                           
 13474                           ; BSR set to: 0
 13475                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13476  004CA4  5018               	movf	disk_read@count+1,w,c
 13477  004CA6  E108               	bnz	l4364
 13478  004CA8  0E02               	movlw	2
 13479  004CAA  5C17               	subwf	disk_read@count,w,c
 13480  004CAC  B0D8               	btfsc	status,0,c
 13481  004CAE  D004               	goto	l4364
 13482                           
 13483                           ; BSR set to: 0
 13484  004CB0  0E00               	movlw	0
 13485  004CB2  6E1B               	movwf	_disk_read$421+1,c
 13486  004CB4  0E11               	movlw	17
 13487  004CB6  D003               	goto	L18
 13488  004CB8                     l4364:
 13489                           
 13490                           ; BSR set to: 0
 13491  004CB8  0E00               	movlw	0
 13492  004CBA  6E1B               	movwf	_disk_read$421+1,c
 13493  004CBC  0E12               	movlw	18
 13494  004CBE                     L18:
 13495  004CBE  6E1A               	movwf	_disk_read$421,c
 13496                           
 13497                           ; BSR set to: 0
 13498  004CC0  C01A  F01C         	movff	_disk_read$421,disk_read@cmd
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13502  004CC4  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13503  004CC8  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13504  004CCC  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13505  004CD0  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13506  004CD4  501C               	movf	disk_read@cmd,w,c
 13507  004CD6  EC8A  F02A         	call	_send_cmd
 13508  004CDA  0900               	iorlw	0
 13509  004CDC  A4D8               	btfss	status,2,c
 13510  004CDE  D025               	goto	l4380
 13511  004CE0                     u4930:
 13512                           
 13513                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13514  004CE0  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13515  004CE4  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13516  004CE8  0E02               	movlw	2
 13517  004CEA  6E05               	movwf	rcvr_datablock@btr+1,c
 13518  004CEC  0E00               	movlw	0
 13519  004CEE  6E04               	movwf	rcvr_datablock@btr,c
 13520  004CF0  EC85  F029         	call	_rcvr_datablock	;wreg free
 13521  004CF4  0900               	iorlw	0
 13522  004CF6  B4D8               	btfsc	status,2,c
 13523  004CF8  D009               	goto	u4950
 13524                           
 13525                           ;diskio.c: 389:    buff += 512;
 13526  004CFA  0E02               	movlw	2
 13527  004CFC  2612               	addwf	disk_read@buff+1,f,c
 13528                           
 13529                           ;diskio.c: 390:   } while (--count);
 13530  004CFE  0617               	decf	disk_read@count,f,c
 13531  004D00  A0D8               	btfss	status,0,c
 13532  004D02  0618               	decf	disk_read@count+1,f,c
 13533  004D04  5017               	movf	disk_read@count,w,c
 13534  004D06  1018               	iorwf	disk_read@count+1,w,c
 13535  004D08  A4D8               	btfss	status,2,c
 13536  004D0A  D7EA               	goto	u4930
 13537  004D0C                     u4950:
 13538                           
 13539                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13540  004D0C  0E12               	movlw	18
 13541  004D0E  181C               	xorwf	disk_read@cmd,w,c
 13542  004D10  A4D8               	btfss	status,2,c
 13543  004D12  D00B               	goto	l4380
 13544  004D14  0E00               	movlw	0
 13545  004D16  6E0B               	movwf	send_cmd@arg,c
 13546  004D18  0E00               	movlw	0
 13547  004D1A  6E0C               	movwf	send_cmd@arg+1,c
 13548  004D1C  0E00               	movlw	0
 13549  004D1E  6E0D               	movwf	send_cmd@arg+2,c
 13550  004D20  0E00               	movlw	0
 13551  004D22  6E0E               	movwf	send_cmd@arg+3,c
 13552  004D24  0E0C               	movlw	12
 13553  004D26  EC8A  F02A         	call	_send_cmd
 13554  004D2A                     l4380:
 13555                           
 13556                           ;diskio.c: 393:  deselect();
 13557  004D2A  EC02  F02C         	call	_deselect	;wreg free
 13558                           
 13559                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13560  004D2E  5017               	movf	disk_read@count,w,c
 13561  004D30  1018               	iorwf	disk_read@count+1,w,c
 13562  004D32  B4D8               	btfsc	status,2,c
 13563  004D34  D002               	goto	u4970
 13564  004D36  0E01               	movlw	1
 13565  004D38  0012               	return	
 13566  004D3A                     u4970:
 13567  004D3A  0E00               	movlw	0
 13568  004D3C  0012               	return		;funcret
 13569  004D3E                     __end_of_disk_read:
 13570                           	opt callstack 0
 13571                           
 13572 ;; *************** function _send_cmd *****************
 13573 ;; Defined at:
 13574 ;;		line 231 in file "diskio.c"
 13575 ;; Parameters:    Size  Location     Type
 13576 ;;  cmd             1    wreg     unsigned char 
 13577 ;;  arg             4   10[COMRAM] unsigned long 
 13578 ;; Auto vars:     Size  Location     Type
 13579 ;;  cmd             1   14[COMRAM] unsigned char 
 13580 ;;  res             1   15[COMRAM] unsigned char 
 13581 ;; Return value:  Size  Location     Type
 13582 ;;                  1    wreg      unsigned char 
 13583 ;; Registers used:
 13584 ;;		wreg, status,2, status,0, cstack
 13585 ;; Tracked objects:
 13586 ;;		On entry : 0/0
 13587 ;;		On exit  : 0/0
 13588 ;;		Unchanged: 0/0
 13589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13590 ;;      Params:         4       0       0       0       0       0       0       0       0
 13591 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13592 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13593 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13594 ;;Total ram usage:        6 bytes
 13595 ;; Hardware stack levels used:    1
 13596 ;; Hardware stack levels required when called:    4
 13597 ;; This function calls:
 13598 ;;		___send_cmd
 13599 ;; This function is called by:
 13600 ;;		_disk_initialize
 13601 ;;		_disk_read
 13602 ;;		_disk_write
 13603 ;;		_disk_ioctl
 13604 ;; This function uses a non-reentrant model
 13605 ;;
 13606                           
 13607                           	psect	text42
 13608  005514                     __ptext42:
 13609                           	opt callstack 0
 13610  005514                     _send_cmd:
 13611                           	opt callstack 23
 13612                           
 13613                           ;incstack = 0
 13614                           ;send_cmd@cmd stored from wreg
 13615  005514  6E0F               	movwf	send_cmd@cmd,c
 13616                           
 13617                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13618  005516  AE0F               	btfss	send_cmd@cmd,7,c
 13619  005518  D012               	goto	l4270
 13620                           
 13621                           ;diskio.c: 243:   cmd &= 0x7F;
 13622  00551A  9E0F               	bcf	send_cmd@cmd,7,c
 13623                           
 13624                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13625  00551C  0E00               	movlw	0
 13626  00551E  6E04               	movwf	___send_cmd@arg,c
 13627  005520  0E00               	movlw	0
 13628  005522  6E05               	movwf	___send_cmd@arg+1,c
 13629  005524  0E00               	movlw	0
 13630  005526  6E06               	movwf	___send_cmd@arg+2,c
 13631  005528  0E00               	movlw	0
 13632  00552A  6E07               	movwf	___send_cmd@arg+3,c
 13633  00552C  0E37               	movlw	55
 13634  00552E  EC8F  F028         	call	___send_cmd
 13635  005532  6E10               	movwf	send_cmd@res,c
 13636                           
 13637                           ;diskio.c: 249:   if (res > 1) return res;
 13638  005534  0E01               	movlw	1
 13639  005536  6410               	cpfsgt	send_cmd@res,c
 13640  005538  D002               	goto	l4270
 13641  00553A  5010               	movf	send_cmd@res,w,c
 13642  00553C  0012               	return	
 13643  00553E                     l4270:
 13644                           
 13645                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13646  00553E  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13647  005542  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13648  005546  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13649  00554A  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13650  00554E  500F               	movf	send_cmd@cmd,w,c
 13651  005550  EC8F  F028         	call	___send_cmd
 13652  005554  0012               	return		;funcret
 13653  005556                     __end_of_send_cmd:
 13654                           	opt callstack 0
 13655                           
 13656 ;; *************** function ___send_cmd *****************
 13657 ;; Defined at:
 13658 ;;		line 195 in file "diskio.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  cmd             1    wreg     unsigned char 
 13661 ;;  arg             4    3[COMRAM] unsigned long 
 13662 ;; Auto vars:     Size  Location     Type
 13663 ;;  cmd             1    9[COMRAM] unsigned char 
 13664 ;;  n               1    8[COMRAM] unsigned char 
 13665 ;;  res             1    7[COMRAM] unsigned char 
 13666 ;; Return value:  Size  Location     Type
 13667 ;;                  1    wreg      unsigned char 
 13668 ;; Registers used:
 13669 ;;		wreg, status,2, status,0, cstack
 13670 ;; Tracked objects:
 13671 ;;		On entry : 0/0
 13672 ;;		On exit  : 0/0
 13673 ;;		Unchanged: 0/0
 13674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13675 ;;      Params:         4       0       0       0       0       0       0       0       0
 13676 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13677 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13678 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13679 ;;Total ram usage:        7 bytes
 13680 ;; Hardware stack levels used:    1
 13681 ;; Hardware stack levels required when called:    3
 13682 ;; This function calls:
 13683 ;;		_SPI1_Exchange8bit
 13684 ;;		_deselect
 13685 ;;		_select
 13686 ;; This function is called by:
 13687 ;;		_send_cmd
 13688 ;; This function uses a non-reentrant model
 13689 ;;
 13690                           
 13691                           	psect	text43
 13692  00511E                     __ptext43:
 13693                           	opt callstack 0
 13694  00511E                     ___send_cmd:
 13695                           	opt callstack 23
 13696                           
 13697                           ;incstack = 0
 13698                           ;___send_cmd@cmd stored from wreg
 13699  00511E  6E0A               	movwf	___send_cmd@cmd,c
 13700                           
 13701                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13702  005120  0E0C               	movlw	12
 13703  005122  180A               	xorwf	___send_cmd@cmd,w,c
 13704  005124  B4D8               	btfsc	status,2,c
 13705  005126  D009               	goto	l4190
 13706                           
 13707                           ;diskio.c: 204:   deselect();
 13708  005128  EC02  F02C         	call	_deselect	;wreg free
 13709                           
 13710                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13711  00512C  ECBD  F02B         	call	_select	;wreg free
 13712  005130  0900               	iorlw	0
 13713  005132  A4D8               	btfss	status,2,c
 13714  005134  D002               	goto	l4190
 13715  005136  0EFF               	movlw	255
 13716  005138  0012               	return	
 13717  00513A                     l4190:
 13718                           
 13719                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13720  00513A  500A               	movf	___send_cmd@cmd,w,c
 13721  00513C  0940               	iorlw	64
 13722  00513E  ECDE  F02B         	call	_SPI1_Exchange8bit
 13723                           
 13724                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13725  005142  5007               	movf	___send_cmd@arg+3,w,c
 13726  005144  ECDE  F02B         	call	_SPI1_Exchange8bit
 13727                           
 13728                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13729  005148  5006               	movf	___send_cmd@arg+2,w,c
 13730  00514A  ECDE  F02B         	call	_SPI1_Exchange8bit
 13731                           
 13732                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13733  00514E  5005               	movf	___send_cmd@arg+1,w,c
 13734  005150  ECDE  F02B         	call	_SPI1_Exchange8bit
 13735                           
 13736                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13737  005154  5004               	movf	___send_cmd@arg,w,c
 13738  005156  ECDE  F02B         	call	_SPI1_Exchange8bit
 13739                           
 13740                           ;diskio.c: 214:  n = 0x01;
 13741  00515A  0E01               	movlw	1
 13742  00515C  6E09               	movwf	___send_cmd@n,c
 13743                           
 13744                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13745  00515E  500A               	movf	___send_cmd@cmd,w,c
 13746  005160  A4D8               	btfss	status,2,c
 13747  005162  D002               	goto	l4206
 13748  005164  0E95               	movlw	149
 13749  005166  6E09               	movwf	___send_cmd@n,c
 13750  005168                     l4206:
 13751                           
 13752                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13753  005168  0E08               	movlw	8
 13754  00516A  180A               	xorwf	___send_cmd@cmd,w,c
 13755  00516C  A4D8               	btfss	status,2,c
 13756  00516E  D002               	goto	l4210
 13757  005170  0E87               	movlw	135
 13758  005172  6E09               	movwf	___send_cmd@n,c
 13759  005174                     l4210:
 13760                           
 13761                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13762  005174  5009               	movf	___send_cmd@n,w,c
 13763  005176  ECDE  F02B         	call	_SPI1_Exchange8bit
 13764                           
 13765                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13766  00517A  0E0C               	movlw	12
 13767  00517C  180A               	xorwf	___send_cmd@cmd,w,c
 13768  00517E  A4D8               	btfss	status,2,c
 13769  005180  D003               	goto	l4216
 13770  005182  0EFF               	movlw	255
 13771  005184  ECDE  F02B         	call	_SPI1_Exchange8bit
 13772  005188                     l4216:
 13773                           
 13774                           ;diskio.c: 221:  n = 10;
 13775  005188  0E0A               	movlw	10
 13776  00518A  6E09               	movwf	___send_cmd@n,c
 13777  00518C                     l4218:
 13778                           
 13779                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13780  00518C  0EFF               	movlw	255
 13781  00518E  ECDE  F02B         	call	_SPI1_Exchange8bit
 13782  005192  6E08               	movwf	___send_cmd@res,c
 13783  005194  AE08               	btfss	___send_cmd@res,7,c
 13784  005196  D002               	goto	l4224
 13785  005198  2E09               	decfsz	___send_cmd@n,f,c
 13786  00519A  D7F8               	goto	l4218
 13787  00519C                     l4224:
 13788                           
 13789                           ;diskio.c: 226:  return res;
 13790  00519C  5008               	movf	___send_cmd@res,w,c
 13791  00519E  0012               	return		;funcret
 13792  0051A0                     __end_of___send_cmd:
 13793                           	opt callstack 0
 13794                           
 13795 ;; *************** function _select *****************
 13796 ;; Defined at:
 13797 ;;		line 106 in file "diskio.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;		None
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;		None
 13802 ;; Return value:  Size  Location     Type
 13803 ;;                  1    wreg      unsigned char 
 13804 ;; Registers used:
 13805 ;;		wreg, status,2, status,0, cstack
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13811 ;;      Params:         0       0       0       0       0       0       0       0       0
 13812 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13813 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13814 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13815 ;;Total ram usage:        0 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:    2
 13818 ;; This function calls:
 13819 ;;		_SPI1_Exchange8bit
 13820 ;;		_deselect
 13821 ;;		_wait_ready
 13822 ;; This function is called by:
 13823 ;;		___send_cmd
 13824 ;;		_disk_ioctl
 13825 ;; This function uses a non-reentrant model
 13826 ;;
 13827                           
 13828                           	psect	text44
 13829  00577A                     __ptext44:
 13830                           	opt callstack 0
 13831  00577A                     _select:
 13832                           	opt callstack 23
 13833                           
 13834                           ;incstack = 0
 13835                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13836  00577A  948A               	bcf	3978,2,c	;volatile
 13837                           
 13838                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13839  00577C  0EFF               	movlw	255
 13840  00577E  ECDE  F02B         	call	_SPI1_Exchange8bit
 13841                           
 13842                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13843  005782  ECC9  F02A         	call	_wait_ready	;wreg free
 13844  005786  0900               	iorlw	0
 13845  005788  B4D8               	btfsc	status,2,c
 13846  00578A  D002               	goto	l4174
 13847  00578C  0E01               	movlw	1
 13848  00578E  0012               	return	
 13849  005790                     l4174:
 13850                           
 13851                           ;diskio.c: 112:  deselect();
 13852  005790  EC02  F02C         	call	_deselect	;wreg free
 13853                           
 13854                           ;diskio.c: 113:  return 0;
 13855  005794  0E00               	movlw	0
 13856  005796  0012               	return		;funcret
 13857  005798                     __end_of_select:
 13858                           	opt callstack 0
 13859                           
 13860 ;; *************** function _wait_ready *****************
 13861 ;; Defined at:
 13862 ;;		line 74 in file "diskio.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;		None
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;  tmr             2    1[COMRAM] unsigned short 
 13867 ;; Return value:  Size  Location     Type
 13868 ;;                  1    wreg      unsigned char 
 13869 ;; Registers used:
 13870 ;;		wreg, status,2, status,0, cstack
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13876 ;;      Params:         0       0       0       0       0       0       0       0       0
 13877 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13878 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13879 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13880 ;;Total ram usage:        2 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:    1
 13883 ;; This function calls:
 13884 ;;		_SPI1_Exchange8bit
 13885 ;; This function is called by:
 13886 ;;		_select
 13887 ;;		_xmit_datablock
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           	psect	text45
 13892  005592                     __ptext45:
 13893                           	opt callstack 0
 13894  005592                     _wait_ready:
 13895                           	opt callstack 25
 13896                           
 13897                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13898                           
 13899                           ;incstack = 0
 13900  005592  0E13               	movlw	19
 13901  005594  6E03               	movwf	wait_ready@tmr+1,c
 13902  005596  0E88               	movlw	136
 13903  005598  6E02               	movwf	wait_ready@tmr,c
 13904  00559A  D00D               	goto	l108
 13905  00559C                     l4152:
 13906                           
 13907                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13908  00559C  0EFF               	movlw	255
 13909  00559E  ECDE  F02B         	call	_SPI1_Exchange8bit
 13910  0055A2  0AFF               	xorlw	255
 13911  0055A4  B4D8               	btfsc	status,2,c
 13912  0055A6  D00B               	goto	u4500
 13913                           
 13914                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13915  0055A8  0E42               	movlw	66
 13916  0055AA                     u8977:
 13917  0055AA  2EE8               	decfsz	wreg,f,c
 13918  0055AC  D7FE               	bra	u8977
 13919  0055AE  D000               	nop2	
 13920                           
 13921                           ;diskio.c: 81:  }
 13922  0055B0  0602               	decf	wait_ready@tmr,f,c
 13923  0055B2  A0D8               	btfss	status,0,c
 13924  0055B4  0603               	decf	wait_ready@tmr+1,f,c
 13925  0055B6                     l108:
 13926  0055B6  5002               	movf	wait_ready@tmr,w,c
 13927  0055B8  1003               	iorwf	wait_ready@tmr+1,w,c
 13928  0055BA  A4D8               	btfss	status,2,c
 13929  0055BC  D7EF               	goto	l4152
 13930  0055BE                     u4500:
 13931                           
 13932                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13933  0055BE  5002               	movf	wait_ready@tmr,w,c
 13934  0055C0  1003               	iorwf	wait_ready@tmr+1,w,c
 13935  0055C2  B4D8               	btfsc	status,2,c
 13936  0055C4  D002               	goto	u4510
 13937  0055C6  0E01               	movlw	1
 13938  0055C8  0012               	return	
 13939  0055CA                     u4510:
 13940  0055CA  0E00               	movlw	0
 13941  0055CC  0012               	return		;funcret
 13942  0055CE                     __end_of_wait_ready:
 13943                           	opt callstack 0
 13944                           
 13945 ;; *************** function _deselect *****************
 13946 ;; Defined at:
 13947 ;;		line 93 in file "diskio.c"
 13948 ;; Parameters:    Size  Location     Type
 13949 ;;		None
 13950 ;; Auto vars:     Size  Location     Type
 13951 ;;		None
 13952 ;; Return value:  Size  Location     Type
 13953 ;;                  1    wreg      void 
 13954 ;; Registers used:
 13955 ;;		wreg, status,2, cstack
 13956 ;; Tracked objects:
 13957 ;;		On entry : 0/0
 13958 ;;		On exit  : 0/0
 13959 ;;		Unchanged: 0/0
 13960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13961 ;;      Params:         0       0       0       0       0       0       0       0       0
 13962 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13963 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13964 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13965 ;;Total ram usage:        0 bytes
 13966 ;; Hardware stack levels used:    1
 13967 ;; Hardware stack levels required when called:    1
 13968 ;; This function calls:
 13969 ;;		_SPI1_Exchange8bit
 13970 ;; This function is called by:
 13971 ;;		_select
 13972 ;;		___send_cmd
 13973 ;;		_disk_initialize
 13974 ;;		_disk_read
 13975 ;;		_disk_write
 13976 ;;		_disk_ioctl
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           	psect	text46
 13981  005804                     __ptext46:
 13982                           	opt callstack 0
 13983  005804                     _deselect:
 13984                           	opt callstack 23
 13985                           
 13986                           ;incstack = 0
 13987                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13988  005804  848A               	bsf	3978,2,c	;volatile
 13989                           
 13990                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13991  005806  0EFF               	movlw	255
 13992  005808  ECDE  F02B         	call	_SPI1_Exchange8bit
 13993  00580C  0012               	return		;funcret
 13994  00580E                     __end_of_deselect:
 13995                           	opt callstack 0
 13996                           
 13997 ;; *************** function _rcvr_datablock *****************
 13998 ;; Defined at:
 13999 ;;		line 123 in file "diskio.c"
 14000 ;; Parameters:    Size  Location     Type
 14001 ;;  buff            2    1[COMRAM] PTR unsigned char 
 14002 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 14003 ;;  btr             2    3[COMRAM] unsigned short 
 14004 ;; Auto vars:     Size  Location     Type
 14005 ;;  tmr             2    5[COMRAM] unsigned short 
 14006 ;;  token           1    7[COMRAM] unsigned char 
 14007 ;; Return value:  Size  Location     Type
 14008 ;;                  1    wreg      unsigned char 
 14009 ;; Registers used:
 14010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14011 ;; Tracked objects:
 14012 ;;		On entry : 0/0
 14013 ;;		On exit  : 0/0
 14014 ;;		Unchanged: 0/0
 14015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14016 ;;      Params:         4       0       0       0       0       0       0       0       0
 14017 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14018 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14019 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14020 ;;Total ram usage:        7 bytes
 14021 ;; Hardware stack levels used:    1
 14022 ;; Hardware stack levels required when called:    1
 14023 ;; This function calls:
 14024 ;;		_SPI1_Exchange8bit
 14025 ;; This function is called by:
 14026 ;;		_disk_read
 14027 ;;		_disk_ioctl
 14028 ;; This function uses a non-reentrant model
 14029 ;;
 14030                           
 14031                           	psect	text47
 14032  00530A                     __ptext47:
 14033                           	opt callstack 0
 14034  00530A                     _rcvr_datablock:
 14035                           	opt callstack 26
 14036                           
 14037                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 14038                           
 14039                           ;incstack = 0
 14040  00530A  0E07               	movlw	7
 14041  00530C  6E07               	movwf	rcvr_datablock@tmr+1,c
 14042  00530E  0ED0               	movlw	208
 14043  005310  6E06               	movwf	rcvr_datablock@tmr,c
 14044  005312  D00E               	goto	l126
 14045  005314                     l4276:
 14046                           
 14047                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 14048  005314  0EFF               	movlw	255
 14049  005316  ECDE  F02B         	call	_SPI1_Exchange8bit
 14050  00531A  6E08               	movwf	rcvr_datablock@token,c
 14051                           
 14052                           ;diskio.c: 134:   if (token != 0xFF) break;
 14053  00531C  2808               	incf	rcvr_datablock@token,w,c
 14054  00531E  A4D8               	btfss	status,2,c
 14055  005320  D00B               	goto	u4680
 14056                           
 14057                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 14058  005322  0E42               	movlw	66
 14059  005324                     u8987:
 14060  005324  2EE8               	decfsz	wreg,f,c
 14061  005326  D7FE               	bra	u8987
 14062  005328  D000               	nop2	
 14063                           
 14064                           ;diskio.c: 136:  }
 14065  00532A  0606               	decf	rcvr_datablock@tmr,f,c
 14066  00532C  A0D8               	btfss	status,0,c
 14067  00532E  0607               	decf	rcvr_datablock@tmr+1,f,c
 14068  005330                     l126:
 14069  005330  5006               	movf	rcvr_datablock@tmr,w,c
 14070  005332  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 14071  005334  A4D8               	btfss	status,2,c
 14072  005336  D7EE               	goto	l4276
 14073  005338                     u4680:
 14074                           
 14075                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 14076  005338  0EFE               	movlw	254
 14077  00533A  1808               	xorwf	rcvr_datablock@token,w,c
 14078  00533C  B4D8               	btfsc	status,2,c
 14079  00533E  D002               	goto	l4292
 14080  005340  0E00               	movlw	0
 14081  005342  0012               	return	
 14082  005344                     l4292:
 14083                           
 14084                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 14085  005344  0EFF               	movlw	255
 14086  005346  ECDE  F02B         	call	_SPI1_Exchange8bit
 14087  00534A  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 14088  00534E  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 14089  005352  6EDF               	movwf	indf2,c
 14090  005354  4A02               	infsnz	rcvr_datablock@buff,f,c
 14091  005356  2A03               	incf	rcvr_datablock@buff+1,f,c
 14092  005358  0604               	decf	rcvr_datablock@btr,f,c
 14093  00535A  A0D8               	btfss	status,0,c
 14094  00535C  0605               	decf	rcvr_datablock@btr+1,f,c
 14095  00535E  5004               	movf	rcvr_datablock@btr,w,c
 14096  005360  1005               	iorwf	rcvr_datablock@btr+1,w,c
 14097  005362  A4D8               	btfss	status,2,c
 14098  005364  D7EF               	goto	l4292
 14099                           
 14100                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 14101  005366  0EFF               	movlw	255
 14102  005368  ECDE  F02B         	call	_SPI1_Exchange8bit
 14103                           
 14104                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 14105  00536C  0EFF               	movlw	255
 14106  00536E  ECDE  F02B         	call	_SPI1_Exchange8bit
 14107                           
 14108                           ;diskio.c: 145:  return 1;
 14109  005372  0E01               	movlw	1
 14110  005374  0012               	return		;funcret
 14111  005376                     __end_of_rcvr_datablock:
 14112                           	opt callstack 0
 14113                           
 14114 ;; *************** function _SPI1_Exchange8bit *****************
 14115 ;; Defined at:
 14116 ;;		line 90 in file "mcc_generated_files/spi1.c"
 14117 ;; Parameters:    Size  Location     Type
 14118 ;;  data            1    wreg     unsigned char 
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  data            1    0[COMRAM] unsigned char 
 14121 ;; Return value:  Size  Location     Type
 14122 ;;                  1    wreg      unsigned char 
 14123 ;; Registers used:
 14124 ;;		wreg, status,2
 14125 ;; Tracked objects:
 14126 ;;		On entry : 0/0
 14127 ;;		On exit  : 0/0
 14128 ;;		Unchanged: 0/0
 14129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14130 ;;      Params:         0       0       0       0       0       0       0       0       0
 14131 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14132 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14133 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14134 ;;Total ram usage:        1 bytes
 14135 ;; Hardware stack levels used:    1
 14136 ;; This function calls:
 14137 ;;		Nothing
 14138 ;; This function is called by:
 14139 ;;		_wait_ready
 14140 ;;		_deselect
 14141 ;;		_select
 14142 ;;		_rcvr_datablock
 14143 ;;		_xmit_datablock
 14144 ;;		___send_cmd
 14145 ;;		_disk_initialize
 14146 ;;		_disk_ioctl
 14147 ;;		_SPI1_Exchange8bitBuffer
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           	psect	text48
 14152  0057BC                     __ptext48:
 14153                           	opt callstack 0
 14154  0057BC                     _SPI1_Exchange8bit:
 14155                           	opt callstack 25
 14156                           
 14157                           ;incstack = 0
 14158                           ;SPI1_Exchange8bit@data stored from wreg
 14159  0057BC  6E01               	movwf	SPI1_Exchange8bit@data,c
 14160                           
 14161                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 14162  0057BE  9EC6               	bcf	4038,7,c	;volatile
 14163                           
 14164                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 14165  0057C0  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 14166  0057C4                     l851:
 14167                           
 14168                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 14169  0057C4  A0C7               	btfss	4039,0,c	;volatile
 14170  0057C6  D7FE               	goto	l851
 14171                           
 14172                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 14173  0057C8  50C9               	movf	4041,w,c	;volatile
 14174  0057CA  0012               	return		;funcret
 14175  0057CC                     __end_of_SPI1_Exchange8bit:
 14176                           	opt callstack 0
 14177                           
 14178 ;; *************** function ___delay_sec *****************
 14179 ;; Defined at:
 14180 ;;		line 8 in file "Main.c"
 14181 ;; Parameters:    Size  Location     Type
 14182 ;;  sec             1    wreg     unsigned char 
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;  sec             1    3[COMRAM] unsigned char 
 14185 ;;  i               1    4[COMRAM] unsigned char 
 14186 ;; Return value:  Size  Location     Type
 14187 ;;                  1    wreg      void 
 14188 ;; Registers used:
 14189 ;;		wreg, status,2, status,0, prodl, prodh
 14190 ;; Tracked objects:
 14191 ;;		On entry : 0/0
 14192 ;;		On exit  : 0/0
 14193 ;;		Unchanged: 0/0
 14194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14195 ;;      Params:         0       0       0       0       0       0       0       0       0
 14196 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14197 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14198 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14199 ;;Total ram usage:        5 bytes
 14200 ;; Hardware stack levels used:    1
 14201 ;; This function calls:
 14202 ;;		Nothing
 14203 ;; This function is called by:
 14204 ;;		_main
 14205 ;; This function uses a non-reentrant model
 14206 ;;
 14207                           
 14208                           	psect	text49
 14209  005608                     __ptext49:
 14210                           	opt callstack 0
 14211  005608                     ___delay_sec:
 14212                           	opt callstack 30
 14213                           
 14214                           ;incstack = 0
 14215                           ;___delay_sec@sec stored from wreg
 14216  005608  6E04               	movwf	___delay_sec@sec,c
 14217                           
 14218                           ;Main.c: 9:     for(char i=0;i<=(50*sec);i++) {
 14219  00560A  0E00               	movlw	0
 14220  00560C  6E05               	movwf	___delay_sec@i,c
 14221  00560E  D008               	goto	l6006
 14222  005610                     l6002:
 14223                           
 14224                           ;Main.c: 10:         _delay((unsigned long)((20)*(8000000/4000.0)));
 14225  005610  0E34               	movlw	52
 14226  005612  6E01               	movwf	??___delay_sec& (0+255),c
 14227  005614  0EF2               	movlw	242
 14228  005616                     u8997:
 14229  005616  2EE8               	decfsz	wreg,f,c
 14230  005618  D7FE               	bra	u8997
 14231  00561A  2E01               	decfsz	??___delay_sec& (0+255),f,c
 14232  00561C  D7FC               	bra	u8997
 14233                           
 14234                           ;Main.c: 11:     }
 14235  00561E  2A05               	incf	___delay_sec@i,f,c
 14236  005620                     l6006:
 14237  005620  5005               	movf	___delay_sec@i,w,c
 14238  005622  6E01               	movwf	??___delay_sec& (0+255),c
 14239  005624  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 14240  005626  5004               	movf	___delay_sec@sec,w,c
 14241  005628  0D32               	mullw	50
 14242  00562A  5001               	movf	??___delay_sec,w,c
 14243  00562C  5CF3               	subwf	prodl,w,c
 14244  00562E  50F4               	movf	prodh,w,c
 14245  005630  0A80               	xorlw	128
 14246  005632  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 14247  005634  5002               	movf	??___delay_sec+1,w,c
 14248  005636  0A80               	xorlw	128
 14249  005638  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 14250  00563A  A0D8               	btfss	status,0,c
 14251  00563C  0012               	return	
 14252  00563E  D7E8               	goto	l6002
 14253  005640                     __end_of___delay_sec:
 14254                           	opt callstack 0
 14255                           
 14256 ;; *************** function _SYSTEM_Initialize *****************
 14257 ;; Defined at:
 14258 ;;		line 116 in file "mcc_generated_files/mcc.c"
 14259 ;; Parameters:    Size  Location     Type
 14260 ;;		None
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;		None
 14263 ;; Return value:  Size  Location     Type
 14264 ;;                  1    wreg      void 
 14265 ;; Registers used:
 14266 ;;		wreg, status,2, cstack
 14267 ;; Tracked objects:
 14268 ;;		On entry : 0/0
 14269 ;;		On exit  : 0/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14272 ;;      Params:         0       0       0       0       0       0       0       0       0
 14273 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14274 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14275 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14276 ;;Total ram usage:        0 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; Hardware stack levels required when called:    1
 14279 ;; This function calls:
 14280 ;;		_OSCILLATOR_Initialize
 14281 ;;		_PIN_MANAGER_Initialize
 14282 ;;		_SPI1_Initialize
 14283 ;; This function is called by:
 14284 ;;		_main
 14285 ;; This function uses a non-reentrant model
 14286 ;;
 14287                           
 14288                           	psect	text50
 14289  0057DA                     __ptext50:
 14290                           	opt callstack 0
 14291  0057DA                     _SYSTEM_Initialize:
 14292                           	opt callstack 29
 14293                           
 14294                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 14295                           
 14296                           ;incstack = 0
 14297  0057DA  EC20  F02B         	call	_PIN_MANAGER_Initialize	;wreg free
 14298                           
 14299                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 14300  0057DE  ECD5  F02B         	call	_OSCILLATOR_Initialize	;wreg free
 14301                           
 14302                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14303  0057E2  ECF4  F02B         	call	_SPI1_Initialize	;wreg free
 14304  0057E6  0012               	return		;funcret
 14305  0057E8                     __end_of_SYSTEM_Initialize:
 14306                           	opt callstack 0
 14307                           
 14308 ;; *************** function _SPI1_Initialize *****************
 14309 ;; Defined at:
 14310 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;		None
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;		None
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      void 
 14317 ;; Registers used:
 14318 ;;		wreg, status,2
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14324 ;;      Params:         0       0       0       0       0       0       0       0       0
 14325 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14326 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14327 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14328 ;;Total ram usage:        0 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; This function calls:
 14331 ;;		Nothing
 14332 ;; This function is called by:
 14333 ;;		_disk_initialize
 14334 ;;		_SYSTEM_Initialize
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text51
 14339  0057E8                     __ptext51:
 14340                           	opt callstack 0
 14341  0057E8                     _SPI1_Initialize:
 14342                           	opt callstack 27
 14343                           
 14344                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14345                           
 14346                           ;incstack = 0
 14347  0057E8  0E40               	movlw	64
 14348  0057EA  6EC7               	movwf	4039,c	;volatile
 14349                           
 14350                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14351  0057EC  0E22               	movlw	34
 14352  0057EE  6EC6               	movwf	4038,c	;volatile
 14353                           
 14354                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14355  0057F0  0E00               	movlw	0
 14356  0057F2  6EC8               	movwf	4040,c	;volatile
 14357  0057F4  0012               	return		;funcret
 14358  0057F6                     __end_of_SPI1_Initialize:
 14359                           	opt callstack 0
 14360                           
 14361 ;; *************** function _PIN_MANAGER_Initialize *****************
 14362 ;; Defined at:
 14363 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14364 ;; Parameters:    Size  Location     Type
 14365 ;;		None
 14366 ;; Auto vars:     Size  Location     Type
 14367 ;;		None
 14368 ;; Return value:  Size  Location     Type
 14369 ;;                  1    wreg      void 
 14370 ;; Registers used:
 14371 ;;		wreg, status,2
 14372 ;; Tracked objects:
 14373 ;;		On entry : 0/0
 14374 ;;		On exit  : 0/0
 14375 ;;		Unchanged: 0/0
 14376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14377 ;;      Params:         0       0       0       0       0       0       0       0       0
 14378 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14379 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14380 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14381 ;;Total ram usage:        0 bytes
 14382 ;; Hardware stack levels used:    1
 14383 ;; This function calls:
 14384 ;;		Nothing
 14385 ;; This function is called by:
 14386 ;;		_SYSTEM_Initialize
 14387 ;; This function uses a non-reentrant model
 14388 ;;
 14389                           
 14390                           	psect	text52
 14391  005640                     __ptext52:
 14392                           	opt callstack 0
 14393  005640                     _PIN_MANAGER_Initialize:
 14394                           	opt callstack 29
 14395                           
 14396                           ;mcc_generated_files/pin_manager.c: 56:     LATE = 0x00;
 14397                           
 14398                           ;incstack = 0
 14399  005640  0E00               	movlw	0
 14400  005642  6E8D               	movwf	3981,c	;volatile
 14401                           
 14402                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 14403  005644  0E00               	movlw	0
 14404  005646  6E8C               	movwf	3980,c	;volatile
 14405                           
 14406                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14407  005648  0E04               	movlw	4
 14408  00564A  6E8A               	movwf	3978,c	;volatile
 14409                           
 14410                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14411  00564C  0E00               	movlw	0
 14412  00564E  6E8B               	movwf	3979,c	;volatile
 14413                           
 14414                           ;mcc_generated_files/pin_manager.c: 65:     TRISE = 0x07;
 14415  005650  0E07               	movlw	7
 14416  005652  6E96               	movwf	3990,c	;volatile
 14417                           
 14418                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14419  005654  0EF1               	movlw	241
 14420  005656  6E93               	movwf	3987,c	;volatile
 14421                           
 14422                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14423  005658  0EC7               	movlw	199
 14424  00565A  6E94               	movwf	3988,c	;volatile
 14425                           
 14426                           ;mcc_generated_files/pin_manager.c: 69:     TRISD = 0x00;
 14427  00565C  0E00               	movlw	0
 14428  00565E  6E95               	movwf	3989,c	;volatile
 14429                           
 14430                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14431  005660  0EC4               	movlw	196
 14432  005662  010F               	movlb	15	; () banked
 14433  005664  6F5D               	movwf	93,b	;volatile
 14434                           
 14435                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14436  005666  0E30               	movlw	48
 14437  005668  6F5C               	movwf	92,b	;volatile
 14438                           
 14439                           ;mcc_generated_files/pin_manager.c: 76:     ANSELD = 0x00;
 14440  00566A  0E00               	movlw	0
 14441  00566C  6F5E               	movwf	94,b	;volatile
 14442                           
 14443                           ;mcc_generated_files/pin_manager.c: 77:     ANSELE = 0x07;
 14444  00566E  0E07               	movlw	7
 14445  005670  6F5F               	movwf	95,b	;volatile
 14446                           
 14447                           ; BSR set to: 15
 14448                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14449  005672  6885               	setf	3973,c	;volatile
 14450                           
 14451                           ; BSR set to: 15
 14452                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14453  005674  9EF1               	bcf	4081,7,c	;volatile
 14454                           
 14455                           ; BSR set to: 15
 14456  005676  0012               	return		;funcret
 14457  005678                     __end_of_PIN_MANAGER_Initialize:
 14458                           	opt callstack 0
 14459                           
 14460 ;; *************** function _OSCILLATOR_Initialize *****************
 14461 ;; Defined at:
 14462 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14463 ;; Parameters:    Size  Location     Type
 14464 ;;		None
 14465 ;; Auto vars:     Size  Location     Type
 14466 ;;		None
 14467 ;; Return value:  Size  Location     Type
 14468 ;;                  1    wreg      void 
 14469 ;; Registers used:
 14470 ;;		wreg, status,2
 14471 ;; Tracked objects:
 14472 ;;		On entry : 0/0
 14473 ;;		On exit  : 0/0
 14474 ;;		Unchanged: 0/0
 14475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14476 ;;      Params:         0       0       0       0       0       0       0       0       0
 14477 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14478 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14479 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14480 ;;Total ram usage:        0 bytes
 14481 ;; Hardware stack levels used:    1
 14482 ;; This function calls:
 14483 ;;		Nothing
 14484 ;; This function is called by:
 14485 ;;		_SYSTEM_Initialize
 14486 ;; This function uses a non-reentrant model
 14487 ;;
 14488                           
 14489                           	psect	text53
 14490  0057AA                     __ptext53:
 14491                           	opt callstack 0
 14492  0057AA                     _OSCILLATOR_Initialize:
 14493                           	opt callstack 29
 14494                           
 14495                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14496                           
 14497                           ; BSR set to: 15
 14498                           ;incstack = 0
 14499  0057AA  0E60               	movlw	96
 14500  0057AC  6ED3               	movwf	4051,c	;volatile
 14501                           
 14502                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14503  0057AE  0E00               	movlw	0
 14504  0057B0  6ED2               	movwf	4050,c	;volatile
 14505                           
 14506                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14507  0057B2  0E00               	movlw	0
 14508  0057B4  6E9B               	movwf	3995,c	;volatile
 14509                           
 14510                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14511  0057B6  0E00               	movlw	0
 14512  0057B8  6EB5               	movwf	4021,c	;volatile
 14513  0057BA  0012               	return		;funcret
 14514  0057BC                     __end_of_OSCILLATOR_Initialize:
 14515                           	opt callstack 0
 14516                           
 14517 ;; *************** function _Lcd_Write_String *****************
 14518 ;; Defined at:
 14519 ;;		line 108 in file "./lcd_lib.h"
 14520 ;; Parameters:    Size  Location     Type
 14521 ;;  a               2    4[COMRAM] PTR const unsigned char 
 14522 ;;		 -> STR_12(15), STR_11(11), STR_10(17), STR_9(16), 
 14523 ;;		 -> STR_7(16), STR_6(15), STR_4(16), STR_2(14), 
 14524 ;; Auto vars:     Size  Location     Type
 14525 ;;  i               2    8[COMRAM] int 
 14526 ;; Return value:  Size  Location     Type
 14527 ;;                  1    wreg      void 
 14528 ;; Registers used:
 14529 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14530 ;; Tracked objects:
 14531 ;;		On entry : 0/0
 14532 ;;		On exit  : 0/0
 14533 ;;		Unchanged: 0/0
 14534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14535 ;;      Params:         2       0       0       0       0       0       0       0       0
 14536 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14537 ;;      Temps:          2       0       0       0       0       0       0       0       0
 14538 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14539 ;;Total ram usage:        6 bytes
 14540 ;; Hardware stack levels used:    1
 14541 ;; Hardware stack levels required when called:    2
 14542 ;; This function calls:
 14543 ;;		_Lcd_Write_Char
 14544 ;; This function is called by:
 14545 ;;		_main
 14546 ;; This function uses a non-reentrant model
 14547 ;;
 14548                           
 14549                           	psect	text54
 14550  005482                     __ptext54:
 14551                           	opt callstack 0
 14552  005482                     _Lcd_Write_String:
 14553                           	opt callstack 28
 14554                           
 14555                           ;./lcd_lib.h: 108: void Lcd_Write_String(const char *a);./lcd_lib.h: 109: {;./lcd_lib.h:
      +                           110:  int i;;./lcd_lib.h: 111:  for(i=0;a[i]!='\0';i++)
 14556                           
 14557                           ;incstack = 0
 14558  005482  0E00               	movlw	0
 14559  005484  6E0A               	movwf	Lcd_Write_String@i+1,c
 14560  005486  0E00               	movlw	0
 14561  005488  6E09               	movwf	Lcd_Write_String@i,c
 14562  00548A  D010               	goto	l5998
 14563  00548C                     l5994:
 14564                           
 14565                           ;./lcd_lib.h: 112:     Lcd_Write_Char(a[i]);
 14566  00548C  5009               	movf	Lcd_Write_String@i,w,c
 14567  00548E  2405               	addwf	Lcd_Write_String@a,w,c
 14568  005490  6E07               	movwf	??_Lcd_Write_String& (0+255),c
 14569  005492  500A               	movf	Lcd_Write_String@i+1,w,c
 14570  005494  2006               	addwfc	Lcd_Write_String@a+1,w,c
 14571  005496  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
 14572  005498  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
 14573  00549C  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 14574  0054A0                     	if	0	;tblptru may be non-zero
 14575  0054A0                     	endif
 14576  0054A0                     	if	0	;tblptru may be non-zero
 14577  0054A0                     	endif
 14578  0054A0  0008               	tblrd		*
 14579  0054A2  50F5               	movf	tablat,w,c
 14580  0054A4  EC3C  F02B         	call	_Lcd_Write_Char
 14581  0054A8  4A09               	infsnz	Lcd_Write_String@i,f,c
 14582  0054AA  2A0A               	incf	Lcd_Write_String@i+1,f,c
 14583  0054AC                     l5998:
 14584  0054AC  5009               	movf	Lcd_Write_String@i,w,c
 14585  0054AE  2405               	addwf	Lcd_Write_String@a,w,c
 14586  0054B0  6E07               	movwf	??_Lcd_Write_String& (0+255),c
 14587  0054B2  500A               	movf	Lcd_Write_String@i+1,w,c
 14588  0054B4  2006               	addwfc	Lcd_Write_String@a+1,w,c
 14589  0054B6  6E08               	movwf	(??_Lcd_Write_String+1)& (0+255),c
 14590  0054B8  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
 14591  0054BC  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
 14592  0054C0                     	if	0	;tblptru may be non-zero
 14593  0054C0                     	endif
 14594  0054C0                     	if	0	;tblptru may be non-zero
 14595  0054C0                     	endif
 14596  0054C0  0008               	tblrd		*
 14597  0054C2  50F5               	movf	tablat,w,c
 14598  0054C4  0900               	iorlw	0
 14599  0054C6  B4D8               	btfsc	status,2,c
 14600  0054C8  0012               	return	
 14601  0054CA  D7E0               	goto	l5994
 14602  0054CC                     __end_of_Lcd_Write_String:
 14603                           	opt callstack 0
 14604                           
 14605 ;; *************** function _Lcd_Write_Char *****************
 14606 ;; Defined at:
 14607 ;;		line 92 in file "./lcd_lib.h"
 14608 ;; Parameters:    Size  Location     Type
 14609 ;;  a               1    wreg     unsigned char 
 14610 ;; Auto vars:     Size  Location     Type
 14611 ;;  a               1    3[COMRAM] unsigned char 
 14612 ;;  y               1    2[COMRAM] unsigned char 
 14613 ;;  temp            1    1[COMRAM] unsigned char 
 14614 ;; Return value:  Size  Location     Type
 14615 ;;                  1    wreg      void 
 14616 ;; Registers used:
 14617 ;;		wreg, status,2, status,0, cstack
 14618 ;; Tracked objects:
 14619 ;;		On entry : 0/0
 14620 ;;		On exit  : 0/0
 14621 ;;		Unchanged: 0/0
 14622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14623 ;;      Params:         0       0       0       0       0       0       0       0       0
 14624 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14625 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14626 ;;      Totals:         3       0       0       0       0       0       0       0       0
 14627 ;;Total ram usage:        3 bytes
 14628 ;; Hardware stack levels used:    1
 14629 ;; Hardware stack levels required when called:    1
 14630 ;; This function calls:
 14631 ;;		_Lcd_Port
 14632 ;; This function is called by:
 14633 ;;		_Lcd_Write_String
 14634 ;; This function uses a non-reentrant model
 14635 ;;
 14636                           
 14637                           	psect	text55
 14638  005678                     __ptext55:
 14639                           	opt callstack 0
 14640  005678                     _Lcd_Write_Char:
 14641                           	opt callstack 28
 14642                           
 14643                           ;incstack = 0
 14644                           ;Lcd_Write_Char@a stored from wreg
 14645  005678  6E04               	movwf	Lcd_Write_Char@a,c
 14646                           
 14647                           ;./lcd_lib.h: 92: void Lcd_Write_Char(char a);./lcd_lib.h: 93: {;./lcd_lib.h: 94:    cha
      +                          r temp,y;;./lcd_lib.h: 95:    temp = a&0x0F;
 14648  00567A  5004               	movf	Lcd_Write_Char@a,w,c
 14649  00567C  0B0F               	andlw	15
 14650  00567E  6E02               	movwf	Lcd_Write_Char@temp,c
 14651                           
 14652                           ;./lcd_lib.h: 96:    y = a&0xF0;
 14653  005680  5004               	movf	Lcd_Write_Char@a,w,c
 14654  005682  0BF0               	andlw	240
 14655  005684  6E03               	movwf	Lcd_Write_Char@y,c
 14656                           
 14657                           ;./lcd_lib.h: 97:    PORTDbits.RD0 = 1;
 14658  005686  8083               	bsf	3971,0,c	;volatile
 14659                           
 14660                           ;./lcd_lib.h: 98:    Lcd_Port(y>>4);
 14661  005688  3803               	swapf	Lcd_Write_Char@y,w,c
 14662  00568A  0B0F               	andlw	15
 14663  00568C  EC6E  F02B         	call	_Lcd_Port
 14664                           
 14665                           ;./lcd_lib.h: 99:    PORTDbits.RD2 = 1;
 14666  005690  8483               	bsf	3971,2,c	;volatile
 14667                           
 14668                           ;./lcd_lib.h: 100:    _delay((unsigned long)((40)*(8000000/4000000.0)));
 14669  005692  0E1A               	movlw	26
 14670  005694                     u9007:
 14671  005694  2EE8               	decfsz	wreg,f,c
 14672  005696  D7FE               	bra	u9007
 14673  005698  D000               	nop2	
 14674                           
 14675                           ;./lcd_lib.h: 101:    PORTDbits.RD2 = 0;
 14676  00569A  9483               	bcf	3971,2,c	;volatile
 14677                           
 14678                           ;./lcd_lib.h: 102:    Lcd_Port(temp);
 14679  00569C  5002               	movf	Lcd_Write_Char@temp,w,c
 14680  00569E  EC6E  F02B         	call	_Lcd_Port
 14681                           
 14682                           ;./lcd_lib.h: 103:    PORTDbits.RD2 = 1;
 14683  0056A2  8483               	bsf	3971,2,c	;volatile
 14684                           
 14685                           ;./lcd_lib.h: 104:    _delay((unsigned long)((40)*(8000000/4000000.0)));
 14686  0056A4  0E1A               	movlw	26
 14687  0056A6                     u9017:
 14688  0056A6  2EE8               	decfsz	wreg,f,c
 14689  0056A8  D7FE               	bra	u9017
 14690  0056AA  D000               	nop2	
 14691                           
 14692                           ;./lcd_lib.h: 105:    PORTDbits.RD2 = 0;
 14693  0056AC  9483               	bcf	3971,2,c	;volatile
 14694  0056AE  0012               	return		;funcret
 14695  0056B0                     __end_of_Lcd_Write_Char:
 14696                           	opt callstack 0
 14697                           
 14698 ;; *************** function _Lcd_Set_Cursor *****************
 14699 ;; Defined at:
 14700 ;;		line 52 in file "./lcd_lib.h"
 14701 ;; Parameters:    Size  Location     Type
 14702 ;;  a               1    wreg     unsigned char 
 14703 ;;  b               1    3[COMRAM] unsigned char 
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;  a               1    4[COMRAM] unsigned char 
 14706 ;;  temp            1    7[COMRAM] unsigned char 
 14707 ;;  y               1    6[COMRAM] unsigned char 
 14708 ;;  z               1    5[COMRAM] unsigned char 
 14709 ;; Return value:  Size  Location     Type
 14710 ;;                  1    wreg      void 
 14711 ;; Registers used:
 14712 ;;		wreg, status,2, status,0, cstack
 14713 ;; Tracked objects:
 14714 ;;		On entry : 0/0
 14715 ;;		On exit  : 0/0
 14716 ;;		Unchanged: 0/0
 14717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14718 ;;      Params:         1       0       0       0       0       0       0       0       0
 14719 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14720 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14721 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14722 ;;Total ram usage:        5 bytes
 14723 ;; Hardware stack levels used:    1
 14724 ;; Hardware stack levels required when called:    2
 14725 ;; This function calls:
 14726 ;;		_Lcd_Cmd
 14727 ;; This function is called by:
 14728 ;;		_main
 14729 ;; This function uses a non-reentrant model
 14730 ;;
 14731                           
 14732                           	psect	text56
 14733  005432                     __ptext56:
 14734                           	opt callstack 0
 14735  005432                     _Lcd_Set_Cursor:
 14736                           	opt callstack 28
 14737                           
 14738                           ;incstack = 0
 14739                           ;Lcd_Set_Cursor@a stored from wreg
 14740  005432  6E05               	movwf	Lcd_Set_Cursor@a,c
 14741                           
 14742                           ;./lcd_lib.h: 52: void Lcd_Set_Cursor(char a, char b);./lcd_lib.h: 53: {;./lcd_lib.h: 54
      +                          :  char temp,z,y;;./lcd_lib.h: 55:  if(a == 1)
 14743  005434  0405               	decf	Lcd_Set_Cursor@a,w,c
 14744  005436  A4D8               	btfss	status,2,c
 14745  005438  D010               	goto	l5956
 14746                           
 14747                           ;./lcd_lib.h: 56:  {;./lcd_lib.h: 57:    temp = 0x80 + b - 1;
 14748  00543A  5004               	movf	Lcd_Set_Cursor@b,w,c
 14749  00543C  0F7F               	addlw	127
 14750  00543E  6E08               	movwf	Lcd_Set_Cursor@temp,c
 14751                           
 14752                           ;./lcd_lib.h: 58:   z = temp>>4;
 14753  005440  3808               	swapf	Lcd_Set_Cursor@temp,w,c
 14754  005442  0B0F               	andlw	15
 14755  005444  6E06               	movwf	Lcd_Set_Cursor@z,c
 14756                           
 14757                           ;./lcd_lib.h: 59:   y = temp & 0x0F;
 14758  005446  5008               	movf	Lcd_Set_Cursor@temp,w,c
 14759  005448  0B0F               	andlw	15
 14760  00544A  6E07               	movwf	Lcd_Set_Cursor@y,c
 14761                           
 14762                           ;./lcd_lib.h: 60:   Lcd_Cmd(z);
 14763  00544C  5006               	movf	Lcd_Set_Cursor@z,w,c
 14764  00544E  ECAC  F02B         	call	_Lcd_Cmd
 14765                           
 14766                           ;./lcd_lib.h: 61:   Lcd_Cmd(y);
 14767  005452  5007               	movf	Lcd_Set_Cursor@y,w,c
 14768  005454  ECAC  F02B         	call	_Lcd_Cmd
 14769                           
 14770                           ;./lcd_lib.h: 62:  }
 14771  005458  0012               	return	
 14772  00545A                     l5956:
 14773  00545A  0E02               	movlw	2
 14774  00545C  1805               	xorwf	Lcd_Set_Cursor@a,w,c
 14775  00545E  A4D8               	btfss	status,2,c
 14776  005460  0012               	return	
 14777                           
 14778                           ;./lcd_lib.h: 64:  {;./lcd_lib.h: 65:   temp = 0xC0 + b - 1;
 14779  005462  5004               	movf	Lcd_Set_Cursor@b,w,c
 14780  005464  0FBF               	addlw	191
 14781  005466  6E08               	movwf	Lcd_Set_Cursor@temp,c
 14782                           
 14783                           ;./lcd_lib.h: 66:   z = temp>>4;
 14784  005468  3808               	swapf	Lcd_Set_Cursor@temp,w,c
 14785  00546A  0B0F               	andlw	15
 14786  00546C  6E06               	movwf	Lcd_Set_Cursor@z,c
 14787                           
 14788                           ;./lcd_lib.h: 67:   y = temp & 0x0F;
 14789  00546E  5008               	movf	Lcd_Set_Cursor@temp,w,c
 14790  005470  0B0F               	andlw	15
 14791  005472  6E07               	movwf	Lcd_Set_Cursor@y,c
 14792                           
 14793                           ;./lcd_lib.h: 68:   Lcd_Cmd(z);
 14794  005474  5006               	movf	Lcd_Set_Cursor@z,w,c
 14795  005476  ECAC  F02B         	call	_Lcd_Cmd
 14796                           
 14797                           ;./lcd_lib.h: 69:   Lcd_Cmd(y);
 14798  00547A  5007               	movf	Lcd_Set_Cursor@y,w,c
 14799  00547C  ECAC  F02B         	call	_Lcd_Cmd
 14800  005480  0012               	return		;funcret
 14801  005482                     __end_of_Lcd_Set_Cursor:
 14802                           	opt callstack 0
 14803                           
 14804 ;; *************** function _Lcd_Init *****************
 14805 ;; Defined at:
 14806 ;;		line 73 in file "./lcd_lib.h"
 14807 ;; Parameters:    Size  Location     Type
 14808 ;;		None
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;		None
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  1    wreg      void 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2, cstack
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14820 ;;      Params:         0       0       0       0       0       0       0       0       0
 14821 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14822 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14823 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14824 ;;Total ram usage:        1 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:    2
 14827 ;; This function calls:
 14828 ;;		_Lcd_Cmd
 14829 ;;		_Lcd_Port
 14830 ;; This function is called by:
 14831 ;;		_main
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           	psect	text57
 14836  00529A                     __ptext57:
 14837                           	opt callstack 0
 14838  00529A                     _Lcd_Init:
 14839                           	opt callstack 28
 14840                           
 14841                           ;./lcd_lib.h: 75:   Lcd_Port(0x00);
 14842                           
 14843                           ;incstack = 0
 14844  00529A  0E00               	movlw	0
 14845  00529C  EC6E  F02B         	call	_Lcd_Port
 14846                           
 14847                           ;./lcd_lib.h: 76:    _delay((unsigned long)((20)*(8000000/4000.0)));
 14848  0052A0  0E34               	movlw	52
 14849  0052A2  6E04               	movwf	??_Lcd_Init& (0+255),c
 14850  0052A4  0EF2               	movlw	242
 14851  0052A6                     u9027:
 14852  0052A6  2EE8               	decfsz	wreg,f,c
 14853  0052A8  D7FE               	bra	u9027
 14854  0052AA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 14855  0052AC  D7FC               	bra	u9027
 14856                           
 14857                           ;./lcd_lib.h: 77:   Lcd_Cmd(0x03);
 14858  0052AE  0E03               	movlw	3
 14859  0052B0  ECAC  F02B         	call	_Lcd_Cmd
 14860                           
 14861                           ;./lcd_lib.h: 78:  _delay((unsigned long)((5)*(8000000/4000.0)));
 14862  0052B4  0E0D               	movlw	13
 14863  0052B6  6E04               	movwf	??_Lcd_Init& (0+255),c
 14864  0052B8  0EFC               	movlw	252
 14865  0052BA                     u9037:
 14866  0052BA  2EE8               	decfsz	wreg,f,c
 14867  0052BC  D7FE               	bra	u9037
 14868  0052BE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 14869  0052C0  D7FC               	bra	u9037
 14870                           
 14871                           ;./lcd_lib.h: 79:   Lcd_Cmd(0x03);
 14872  0052C2  0E03               	movlw	3
 14873  0052C4  ECAC  F02B         	call	_Lcd_Cmd
 14874                           
 14875                           ;./lcd_lib.h: 80:  _delay((unsigned long)((11)*(8000000/4000.0)));
 14876  0052C8  0E1D               	movlw	29
 14877  0052CA  6E04               	movwf	??_Lcd_Init& (0+255),c
 14878  0052CC  0E91               	movlw	145
 14879  0052CE                     u9047:
 14880  0052CE  2EE8               	decfsz	wreg,f,c
 14881  0052D0  D7FE               	bra	u9047
 14882  0052D2  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 14883  0052D4  D7FC               	bra	u9047
 14884  0052D6  F000               	nop	
 14885                           
 14886                           ;./lcd_lib.h: 81:   Lcd_Cmd(0x03);
 14887  0052D8  0E03               	movlw	3
 14888  0052DA  ECAC  F02B         	call	_Lcd_Cmd
 14889                           
 14890                           ;./lcd_lib.h: 83:   Lcd_Cmd(0x02);
 14891  0052DE  0E02               	movlw	2
 14892  0052E0  ECAC  F02B         	call	_Lcd_Cmd
 14893                           
 14894                           ;./lcd_lib.h: 84:   Lcd_Cmd(0x02);
 14895  0052E4  0E02               	movlw	2
 14896  0052E6  ECAC  F02B         	call	_Lcd_Cmd
 14897                           
 14898                           ;./lcd_lib.h: 85:   Lcd_Cmd(0x08);
 14899  0052EA  0E08               	movlw	8
 14900  0052EC  ECAC  F02B         	call	_Lcd_Cmd
 14901                           
 14902                           ;./lcd_lib.h: 86:   Lcd_Cmd(0x00);
 14903  0052F0  0E00               	movlw	0
 14904  0052F2  ECAC  F02B         	call	_Lcd_Cmd
 14905                           
 14906                           ;./lcd_lib.h: 87:   Lcd_Cmd(0x0C);
 14907  0052F6  0E0C               	movlw	12
 14908  0052F8  ECAC  F02B         	call	_Lcd_Cmd
 14909                           
 14910                           ;./lcd_lib.h: 88:   Lcd_Cmd(0x00);
 14911  0052FC  0E00               	movlw	0
 14912  0052FE  ECAC  F02B         	call	_Lcd_Cmd
 14913                           
 14914                           ;./lcd_lib.h: 89:   Lcd_Cmd(0x06);
 14915  005302  0E06               	movlw	6
 14916  005304  ECAC  F02B         	call	_Lcd_Cmd
 14917  005308  0012               	return		;funcret
 14918  00530A                     __end_of_Lcd_Init:
 14919                           	opt callstack 0
 14920                           
 14921 ;; *************** function _Lcd_Clear *****************
 14922 ;; Defined at:
 14923 ;;		line 46 in file "./lcd_lib.h"
 14924 ;; Parameters:    Size  Location     Type
 14925 ;;		None
 14926 ;; Auto vars:     Size  Location     Type
 14927 ;;		None
 14928 ;; Return value:  Size  Location     Type
 14929 ;;                  1    wreg      void 
 14930 ;; Registers used:
 14931 ;;		wreg, status,2, cstack
 14932 ;; Tracked objects:
 14933 ;;		On entry : 0/0
 14934 ;;		On exit  : 0/0
 14935 ;;		Unchanged: 0/0
 14936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14937 ;;      Params:         0       0       0       0       0       0       0       0       0
 14938 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14939 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14940 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14941 ;;Total ram usage:        0 bytes
 14942 ;; Hardware stack levels used:    1
 14943 ;; Hardware stack levels required when called:    2
 14944 ;; This function calls:
 14945 ;;		_Lcd_Cmd
 14946 ;; This function is called by:
 14947 ;;		_main
 14948 ;; This function uses a non-reentrant model
 14949 ;;
 14950                           
 14951                           	psect	text58
 14952  0057F6                     __ptext58:
 14953                           	opt callstack 0
 14954  0057F6                     _Lcd_Clear:
 14955                           	opt callstack 28
 14956                           
 14957                           ;./lcd_lib.h: 48:  Lcd_Cmd(0);
 14958                           
 14959                           ;incstack = 0
 14960  0057F6  0E00               	movlw	0
 14961  0057F8  ECAC  F02B         	call	_Lcd_Cmd
 14962                           
 14963                           ;./lcd_lib.h: 49:  Lcd_Cmd(1);
 14964  0057FC  0E01               	movlw	1
 14965  0057FE  ECAC  F02B         	call	_Lcd_Cmd
 14966  005802  0012               	return		;funcret
 14967  005804                     __end_of_Lcd_Clear:
 14968                           	opt callstack 0
 14969                           
 14970 ;; *************** function _Lcd_Cmd *****************
 14971 ;; Defined at:
 14972 ;;		line 36 in file "./lcd_lib.h"
 14973 ;; Parameters:    Size  Location     Type
 14974 ;;  a               1    wreg     unsigned char 
 14975 ;; Auto vars:     Size  Location     Type
 14976 ;;  a               1    2[COMRAM] unsigned char 
 14977 ;; Return value:  Size  Location     Type
 14978 ;;                  1    wreg      void 
 14979 ;; Registers used:
 14980 ;;		wreg, status,2, cstack
 14981 ;; Tracked objects:
 14982 ;;		On entry : 0/0
 14983 ;;		On exit  : 0/0
 14984 ;;		Unchanged: 0/0
 14985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14986 ;;      Params:         0       0       0       0       0       0       0       0       0
 14987 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14988 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14989 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14990 ;;Total ram usage:        2 bytes
 14991 ;; Hardware stack levels used:    1
 14992 ;; Hardware stack levels required when called:    1
 14993 ;; This function calls:
 14994 ;;		_Lcd_Port
 14995 ;; This function is called by:
 14996 ;;		_Lcd_Clear
 14997 ;;		_Lcd_Set_Cursor
 14998 ;;		_Lcd_Init
 14999 ;;		_Lcd_Shift_Right
 15000 ;;		_Lcd_Shift_Left
 15001 ;; This function uses a non-reentrant model
 15002 ;;
 15003                           
 15004                           	psect	text59
 15005  005758                     __ptext59:
 15006                           	opt callstack 0
 15007  005758                     _Lcd_Cmd:
 15008                           	opt callstack 28
 15009                           
 15010                           ;incstack = 0
 15011                           ;Lcd_Cmd@a stored from wreg
 15012  005758  6E03               	movwf	Lcd_Cmd@a,c
 15013                           
 15014                           ;./lcd_lib.h: 36: void Lcd_Cmd(char a);./lcd_lib.h: 37: {;./lcd_lib.h: 38:  PORTDbits.RD
      +                          0 = 0;
 15015  00575A  9083               	bcf	3971,0,c	;volatile
 15016                           
 15017                           ;./lcd_lib.h: 39:     PORTDbits.RD1 = 0;
 15018  00575C  9283               	bcf	3971,1,c	;volatile
 15019                           
 15020                           ;./lcd_lib.h: 40:  Lcd_Port(a);
 15021  00575E  5003               	movf	Lcd_Cmd@a,w,c
 15022  005760  EC6E  F02B         	call	_Lcd_Port
 15023                           
 15024                           ;./lcd_lib.h: 41:  PORTDbits.RD2 = 1;
 15025  005764  8483               	bsf	3971,2,c	;volatile
 15026                           
 15027                           ;./lcd_lib.h: 42:         _delay((unsigned long)((4)*(8000000/4000.0)));
 15028  005766  0E0B               	movlw	11
 15029  005768  6E02               	movwf	??_Lcd_Cmd& (0+255),c
 15030  00576A  0E62               	movlw	98
 15031  00576C                     u9057:
 15032  00576C  2EE8               	decfsz	wreg,f,c
 15033  00576E  D7FE               	bra	u9057
 15034  005770  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
 15035  005772  D7FC               	bra	u9057
 15036  005774  D000               	nop2	
 15037                           
 15038                           ;./lcd_lib.h: 43:         PORTDbits.RD2 = 0;
 15039  005776  9483               	bcf	3971,2,c	;volatile
 15040  005778  0012               	return		;funcret
 15041  00577A                     __end_of_Lcd_Cmd:
 15042                           	opt callstack 0
 15043                           
 15044 ;; *************** function _Lcd_Port *****************
 15045 ;; Defined at:
 15046 ;;		line 14 in file "./lcd_lib.h"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;  a               1    wreg     unsigned char 
 15049 ;; Auto vars:     Size  Location     Type
 15050 ;;  a               1    0[COMRAM] unsigned char 
 15051 ;; Return value:  Size  Location     Type
 15052 ;;                  1    wreg      void 
 15053 ;; Registers used:
 15054 ;;		wreg
 15055 ;; Tracked objects:
 15056 ;;		On entry : 0/0
 15057 ;;		On exit  : 0/0
 15058 ;;		Unchanged: 0/0
 15059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15060 ;;      Params:         0       0       0       0       0       0       0       0       0
 15061 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15062 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15063 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15064 ;;Total ram usage:        1 bytes
 15065 ;; Hardware stack levels used:    1
 15066 ;; This function calls:
 15067 ;;		Nothing
 15068 ;; This function is called by:
 15069 ;;		_Lcd_Cmd
 15070 ;;		_Lcd_Init
 15071 ;;		_Lcd_Write_Char
 15072 ;; This function uses a non-reentrant model
 15073 ;;
 15074                           
 15075                           	psect	text60
 15076  0056DC                     __ptext60:
 15077                           	opt callstack 0
 15078  0056DC                     _Lcd_Port:
 15079                           	opt callstack 28
 15080                           
 15081                           ;incstack = 0
 15082                           ;Lcd_Port@a stored from wreg
 15083  0056DC  6E01               	movwf	Lcd_Port@a,c
 15084                           
 15085                           ;./lcd_lib.h: 14: void Lcd_Port(char a);./lcd_lib.h: 15: {;./lcd_lib.h: 16:  if(a & 1)
 15086  0056DE  A001               	btfss	Lcd_Port@a,0,c
 15087  0056E0  D002               	goto	l27
 15088                           
 15089                           ;./lcd_lib.h: 17:   PORTDbits.RD4 = 1;
 15090  0056E2  8883               	bsf	3971,4,c	;volatile
 15091  0056E4  D001               	goto	l5004
 15092  0056E6                     l27:
 15093                           
 15094                           ;./lcd_lib.h: 19:   PORTDbits.RD4 = 0;
 15095  0056E6  9883               	bcf	3971,4,c	;volatile
 15096  0056E8                     l5004:
 15097                           
 15098                           ;./lcd_lib.h: 21:  if(a & 2)
 15099  0056E8  A201               	btfss	Lcd_Port@a,1,c
 15100  0056EA  D002               	goto	l29
 15101                           
 15102                           ;./lcd_lib.h: 22:   PORTDbits.RD5 = 1;
 15103  0056EC  8A83               	bsf	3971,5,c	;volatile
 15104  0056EE  D001               	goto	l5008
 15105  0056F0                     l29:
 15106                           
 15107                           ;./lcd_lib.h: 24:   PORTDbits.RD5 = 0;
 15108  0056F0  9A83               	bcf	3971,5,c	;volatile
 15109  0056F2                     l5008:
 15110                           
 15111                           ;./lcd_lib.h: 26:  if(a & 4)
 15112  0056F2  A401               	btfss	Lcd_Port@a,2,c
 15113  0056F4  D002               	goto	l31
 15114                           
 15115                           ;./lcd_lib.h: 27:   PORTDbits.RD6 = 1;
 15116  0056F6  8C83               	bsf	3971,6,c	;volatile
 15117  0056F8  D001               	goto	l5012
 15118  0056FA                     l31:
 15119                           
 15120                           ;./lcd_lib.h: 29:   PORTDbits.RD6 = 0;
 15121  0056FA  9C83               	bcf	3971,6,c	;volatile
 15122  0056FC                     l5012:
 15123                           
 15124                           ;./lcd_lib.h: 31:  if(a & 8)
 15125  0056FC  A601               	btfss	Lcd_Port@a,3,c
 15126  0056FE  D002               	goto	l33
 15127                           
 15128                           ;./lcd_lib.h: 32:   PORTDbits.RD7 = 1;
 15129  005700  8E83               	bsf	3971,7,c	;volatile
 15130  005702  0012               	return	
 15131  005704                     l33:
 15132                           
 15133                           ;./lcd_lib.h: 34:   PORTDbits.RD7 = 0;
 15134  005704  9E83               	bcf	3971,7,c	;volatile
 15135  005706  0012               	return		;funcret
 15136  005708                     __end_of_Lcd_Port:
 15137                           	opt callstack 0
 15138                           
 15139                           	psect	rparam
 15140  0000                     tosu	equ	0xFFF
 15141                           tosh	equ	0xFFE
 15142                           tosl	equ	0xFFD
 15143                           stkptr	equ	0xFFC
 15144                           pclatu	equ	0xFFB
 15145                           pclath	equ	0xFFA
 15146                           pcl	equ	0xFF9
 15147                           tblptru	equ	0xFF8
 15148                           tblptrh	equ	0xFF7
 15149                           tblptrl	equ	0xFF6
 15150                           tablat	equ	0xFF5
 15151                           prodh	equ	0xFF4
 15152                           prodl	equ	0xFF3
 15153                           indf0	equ	0xFEF
 15154                           postinc0	equ	0xFEE
 15155                           postdec0	equ	0xFED
 15156                           preinc0	equ	0xFEC
 15157                           plusw0	equ	0xFEB
 15158                           fsr0h	equ	0xFEA
 15159                           fsr0l	equ	0xFE9
 15160                           wreg	equ	0xFE8
 15161                           indf1	equ	0xFE7
 15162                           postinc1	equ	0xFE6
 15163                           postdec1	equ	0xFE5
 15164                           preinc1	equ	0xFE4
 15165                           plusw1	equ	0xFE3
 15166                           fsr1h	equ	0xFE2
 15167                           fsr1l	equ	0xFE1
 15168                           bsr	equ	0xFE0
 15169                           indf2	equ	0xFDF
 15170                           postinc2	equ	0xFDE
 15171                           postdec2	equ	0xFDD
 15172                           preinc2	equ	0xFDC
 15173                           plusw2	equ	0xFDB
 15174                           fsr2h	equ	0xFDA
 15175                           fsr2l	equ	0xFD9
 15176                           status	equ	0xFD8


Data Sizes:
    Strings     193
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    114     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> main@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 47
		 -> STR_8(CODE[47]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 47
		 -> STR_8(CODE[47]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_3(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_3(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_3(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_3(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_3(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_3(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_3(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S488$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S488$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S488$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_14(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_8(CODE[47]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_8(CODE[47]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_8(CODE[47]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_8(CODE[47]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S96$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S96$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_12(CODE[15]), STR_11(CODE[11]), STR_10(CODE[17]), STR_9(CODE[16]), 
		 -> STR_7(CODE[16]), STR_6(CODE[15]), STR_4(CODE[16]), STR_2(CODE[14]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  432169
                                            112 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (1) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (3) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (1) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (4) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     876
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     988
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   ___delay_sec
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI1_Exchange8bit
           ___wmul
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_set
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _validate
         _disk_status
     _validate
       _disk_status
   _f_lseek
     ___lldiv
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _get_fat
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _validate
       _disk_status
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _mem_cpy
       _mem_set
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _mem_cmp
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _dir_sdi
         _clust2sect
           ___lmul
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _ld_clust
     _ld_clust
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _remove_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _st_clust
   _f_write
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _disk_write
       _deselect
         _SPI1_Exchange8bit
       _send_cmd
         ___send_cmd
           _SPI1_Exchange8bit
           _deselect
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _xmit_datablock
         _SPI1_Exchange8bit
         _wait_ready
           _SPI1_Exchange8bit
     _mem_cpy
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _sync_window
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
     _validate
       _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7       6        0.0%
DATA                 0      0     325       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 15 16:41:23 2019

              _SPI1_Exchange8bit 57BC                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l31 56FA  
                             l33 5704                               l27 56E6  
                             l29 56F0                               l88 3FFA  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                      __CFG_LVP$ON 000000  
                            l200 4C86                              l108 55B6  
                            l204 4C90                              l205 4CA4  
                            l221 4704                              l126 5330  
                            l222 470C                              l223 4720  
                            l217 46FA                              l161 3C36  
                            l227 4780                              l172 3CFE  
                            l333 41B8                              l246 2196  
                            l343 2CF2                              l183 3DFC  
                            l408 34F6                              l440 38A2  
                            l425 36D2                              l346 3042  
                            l186 3DCC                              l427 36CA  
                            l611 0A64                              l523 3AAC  
                            l348 2CFC                              l630 0D46  
                            l624 0BAC                              l560 453C  
                            l369 24B8                              l393 443A  
                            l482 48E2                              l547 3C02  
                            l638 10A4                              l672 3136  
                            l681 32A8                              l673 312E  
                            l762 1CEE                              l851 57C4  
                            l908 510C                              l758 1A5E  
                            l679 32C0                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _Fil 00D7  
            ??_SPI1_Exchange8bit 0001                     disk_read@cmd 001C  
                 ??_create_chain 005C                              wreg 000FE8  
              disk_initialize@ty 001A                   create_name@sfn 001B  
                create_chain@ncl 0065                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l4210 5174                             l5012 56FC  
                           l5004 56E8                             l4206 5168  
                           l5030 3C4C                             l5008 56F2  
                           l4152 559C                             l4224 519C  
                           l4216 5188                             l4240 5242  
                           l6002 5610                             l4218 518C  
                           l4234 522C                             l4402 42AA  
                           l5034 3C54                             l5026 3C42  
                           l5060 3CCE                             l6020 4ED6  
                           l5212 520C                             l6006 5620  
                           l4174 5790                             l4190 513A  
                           l4270 553E                             l4254 5296  
                           l4342 47E2                             l4406 42B6  
                           l4414 4310                             l6030 4F18  
                           l5142 4DE6                             l5126 4D50  
                           l5134 4DA6                             l4328 4762  
                           l4432 4FE8                             l5048 3C9A  
                           l6040 4F44                             l5136 4DB4  
                           l5240 4970                             l4434 5004  
                           l5170 4190                             l4514 2574  
                           l4610 3452                             l5090 3D64  
                           l6026 4F04                             l5330 3B44  
                           l5226 490A                             l6122 328E  
                           l4292 5344                             l4276 5314  
                           l4380 4D2A                             l4364 4CB8  
                           l4700 1FF8                             l5500 50FE  
                           l4532 2690                             l4516 25A8  
                           l6212 1CD2                             l6204 1CAC  
                           l6140 3306                             l6052 3062  
                           l4622 34C6                             l6214 1D0A  
                           l5094 3D8A                             l5086 3D56  
                           l5078 3D2E                             l5182 481C  
                           l5350 3B80                             l5342 3B6E  
                           l5270 3A2A                             l5246 49B0  
                           l4712 2014                             l4800 2438  
                           l4464 2E68                             l4536 26C6  
                           l4560 287C                             l5096 3D9C  
                           l5424 4B88                             l5360 3BC0  
                           l5352 3B90                             l5256 39B8  
                           l6320 1408                             l4722 20F2  
                           l4802 247A                             l4466 2E86  
                           l4546 2778                             l4562 28A8  
                           l4626 3506                             l4618 34A2  
                           l6226 1D7C                             l6218 1D18  
                           l6250 1E44                             l5442 4A24  
                           l5354 3B96                             l5258 39BC  
                           l6082 3106                             l6074 30DC  
                           l6402 18B6                             l6322 1448  
                           l6306 1320                             l4396 4230  
                           l4708 2006                             l4572 53EC  
                           l4476 2F4C                             l4468 2E90  
                           l4556 286A                             l6236 1DC4  
                           l6228 1DB0                             l5460 4ABA  
                           l5428 4B92                             l5196 48B0  
                           l5292 3A88                             l5604 44DC  
                           l5540 434A                             l6156 33E6  
                           l6420 19C4                             l6332 1474  
                           l4742 21E4                             l4582 56BA  
                           l4486 3016                             l4662 364A  
                           l4654 35D8                             l4638 3564  
                           l6190 1C2E                             l6174 1A12  
                           l5454 4A80                             l5702 09A4  
                           l5198 48B8                             l5374 3BF0  
                           l5542 4352                             l6086 3112  
                           l6406 192C                             l6350 1550  
                           l6342 14E8                             l6414 1968  
                           l4760 2342                             l4576 5400  
                           l6168 19F0                             l5448 4A42  
                           l4824 54CE                             l5296 3AA2  
                           l5640 45A0                             l4770 2388  
                           l4738 21DC                             l4586 56CA  
                           l5474 5094                             l5490 50CA  
                           l6274 1F7E                             l5730 0A9A  
                           l5714 09E2                             l4906 28F2  
                           l4850 379E                             l4826 54D2  
                           l4818 538E                             l6370 168E  
                           l6338 1498                             l6514 3F34  
                           l4780 23DC                             l4764 2350  
                           l4756 22BA                             l4748 222A  
                           l4596 4E4E                             l4668 36B2  
                           l6268 1F0C                             l5396 4AE4  
                           l5724 0A48                             l4932 2A12  
                           l4916 2956                             l4860 37F0  
                           l4844 374E                             l5556 43B0  
                           l6364 163A                             l6532 3F96  
                           l4790 23FA                             l5478 5098  
                           l5398 4AE8                             l5742 0AF6  
                           l5662 0918                             l5654 08F2  
                           l4926 29FC                             l4870 3862  
                           l4862 3816                             l5566 442A  
                           l6358 15B2                             l6390 1824  
                           l4776 23BA                             l4688 57A4  
                           l5488 50BE                             l5744 0B1C  
                           l5736 0AB0                             l4960 2AB2  
                           l6376 1768                             l6472 3E78  
                           l4786 23F2                             l5842 0E48  
                           l5762 0B4C                             l5682 0960  
                           l4882 38E2                             l5586 4C6C  
                           l6386 17E2                             l6378 1788  
                           l5756 0B42                             l4972 2B52  
                           l4948 2A94                             l5596 4488  
                           l6396 186C                             l6388 1806  
                           l6548 3FDA                             l4798 2432  
                           l5934 46E2                             l5862 0F82  
                           l5838 0E32                             l5758 0B48  
                           l5694 099A                             l5678 095C  
                           l5784 0C0A                             l4984 2BA8  
                           l4992 2C4E                             l5874 1076  
                           l5956 545A                             l4988 2BF0  
                           l5994 548C                             l5898 1248  
                           l5998 54AC                             STR_1 082F  
                           STR_2 089E                             STR_3 082F  
                           STR_4 0841                             STR_5 08B7  
                           STR_6 0880                             STR_7 0861  
                           STR_8 0801                             STR_9 0851  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             u5030 4F8C  
                           u5105 2DE4                             u4500 55BE  
                           u5060 2CC2                             u4510 55CA  
                           u5150 2F8E                             u5070 2CE2  
                           u5135 2E74                             u4600 5228  
                           u5400 3552                             u7000 4A3E  
                           u5225 25F4                             u5250 26AE  
                           u5170 2492                             u7010 4A7C  
                           u6210 3C3C                             u6050 29F8  
                           u5155 2F84                             u6035 2962  
                           u4620 5262                             u5180 24B2  
                           u5420 35B0                             u6060 2A0E  
                           u5085 2D46                             u5270 27BA  
                           u5350 3440                             u7110 4324  
                           u5255 26A4                             u4720 46F6  
                           u5600 2190                             u6400 4D7E  
                           u7120 4344                             u4810 479C  
                           u5530 2010                             u5370 34B4  
                           u4627 5258                             u5275 27B0  
                           u5195 2502                             u6155 2C70  
                           u6420 4DDC                             u7220 4482  
                           u5605 2186                             u4830 47C4  
                           u7070 5094                             u6510 489C  
                           u6407 4D6E                             u4680 5338  
                           u5480 368A                             u6360 3DD4  
                           u5705 2290                             u4930 4CE0  
                           u4850 47F2                             u5714 22AE  
                           u5650 220C                             u7090 50CE  
                           u6290 3D06                             u6530 48D6  
                           u5810 539E                             u7170 4404  
                           u4915 4C96                             u5715 22A8  
                           u6427 4DD2                             u8220 1DD4  
                           u6380 3DF8                             u6700 3A84  
                           u5820 53D2                             u7180 445A  
                           u4765 4712                             u5725 22F8  
                           u8125 1AD6                             u4950 4D0C  
                           u8070 19EC                             u7350 0958  
                           u7270 4536                             u9007 5694  
                           u5655 2202                             u5575 20CA  
                           u4880 4C82                             u8240 1E58  
                           u8160 1C98                             u7600 0E2E  
                           u5920 3872                             u5840 5502  
                           u6560 4904                             u9017 56A6  
                           u5585 20FA                             u4970 4D3A  
                           u8170 1CBE                             u7610 0E44  
                           u7450 0B36                             u6730 3AB8  
                           u9027 52A6                             u5595 2120  
                           u5860 374A                             u9037 52BA  
                           u8270 1EF8                             u7470 0B48  
                           u6750 3AC4                             u9047 52CE  
                           u5695 226E                             u6680 3A72  
                           u8360 137A                             u9057 576C  
                           u8290 1F62                             u6770 3AEE  
                           u8275 1EEE                             u6940 4B0A  
                           u7645 0F62                             u5965 3918  
                           u8525 172E                             u8365 1370  
                           u7670 10CA                             u5990 28EE  
                           u6790 3AFA                             u8630 3E96  
                           u7575 0D7A                             u5975 3964  
                           u8535 1772                             u7675 10C0  
                           u8475 15CA                             u7860 4F40  
                           u8580 1970                             u8957 3CF0  
                           u8967 3DBE                             u8977 55AA  
                           u8987 5324                             u8997 5616  
                           _WPUB 000F85                             _Fsid 00D2  
                           _Stat 00F7                ?_Lcd_Write_String 0005  
                           _main 3E14                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
             ??_Lcd_Write_String 0007        __end_of_SPI1_Exchange8bit 57CC  
                  __CFG_IESO$OFF 000000                  __end_of_Lcd_Cmd 577A  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0019  
                   ?_follow_path 0086               disk_initialize@ocr 0013  
                   ___param_bank 000000               disk_initialize@tmr 001B  
                create_name@path 000B                 create_chain@clst 0058  
                    _sync_window 41BC   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 57BC                            ?_main 0001  
                          STR_10 0830                            STR_11 08AC  
                          STR_12 088F                            STR_13 0871  
                          STR_14 0871                  __end_of___lldiv 511E  
                 __CFG_DEBUG$OFF 000000          __size_of_Lcd_Set_Cursor 0050  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  __end_of_f_close 5608  
                          _FatFs 05D2                  __end_of_chk_chr 5514  
             __size_of_SPI1_Open 000E                  __end_of_f_lseek 1FE4  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000              ___lmul@multiplicand 0005  
                  __CFG_WRT3$OFF 000000                  __end_of_f_mount 4F62  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 39A6  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 19D6  
                __end_of_get_fat 3054                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 53DC  
                __end_of_mem_cpy 4DF8                  __end_of_mem_set 56DC  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A                   disk_ioctl@buff 0012  
                 disk_read@count 0017                            tablat 000FF5  
                 disk_ioctl@pdrv 0031                            plusw2 000FDB  
                __end_of_put_fat 28AC                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                  __end_of_sync_fs 41BC  
                 __CFG_ICPRT$OFF 000000                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                 __end_of_Lcd_Init 530A  
               __end_of_Lcd_Port 5708                  __initialization 5556  
            disk_initialize@pdrv 0012                     __end_of_main 3FFC  
                   clust2sect@fs 000D                   __CFG_PCLKEN$ON 000000  
                         ??_main 0060               __size_of_Lcd_Clear 000E  
                  __activetblptr 000002                   __CFG_SDOMX$RB3 000000  
                __CFG_CCP2MX$RC1 000000                           _ACTCON 000FB5  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F                   __CFG_WDTEN$OFF 000000  
                         _OSCCON 000FD3                        ??_Lcd_Cmd 0002  
        __size_of_Lcd_Write_Char 0038             __end_of_dir_register 4C72  
               __end_of_check_fs 4ABE            SPI1_Exchange8bit@data 0001  
     __size_of_SPI1_Exchange8bit 0010             __size_of_create_name 0284  
       __size_of_disk_initialize 01EA                 __end_of_deselect 580E  
               __end_of_dir_find 49D2                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 57DA                 __end_of_dir_next 2CB2  
                   ?_move_window 0030             __end_of_create_chain 36E4  
               __end_of_ld_clust 521E                           ___lmul 53DC  
           __size_of_find_volume 09AE             __size_of_disk_status 0012  
                         ___wmul 5732                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0009                           _f_open 3054  
                         _f_sync 45A4                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 5570  
                         clear_1 5582                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 577A                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
                         main@bw 00D0                 __end_of_send_cmd 5556  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                  disk_ioctl@csize 0032  
               __end_of_validate 509C             __end_of_get_ldnumber 4B9C  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5732  
                      ??_put_fat 0045                  xmit_datablock@i 0007  
                      ??_sync_fs 003C                  Lcd_Set_Cursor@a 0005  
                Lcd_Set_Cursor@b 0004                  Lcd_Set_Cursor@y 0007  
                Lcd_Set_Cursor@z 0006               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 57DA  
                     __accesstop 0060          __end_of__initialization 5588  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
              __end_of_Lcd_Clear 5804                    ___rparam_used 000001  
        __size_of_rcvr_datablock 006C                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                     __pidataBANK0 580E  
            ??_SYSTEM_Initialize 0001                       ___send_cmd 511E  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
                  ??___delay_sec 0001                   _Lcd_Set_Cursor 5432  
             __size_of_dir_alloc 00F0               __size_of_disk_read 00CC  
                      ?_Lcd_Init 0001                        ?_Lcd_Port 0001  
      __end_of_SYSTEM_Initialize 57E8                       __pbssBANK0 00D2  
               _find_volume$1006 0070                 _find_volume$1007 0074  
              __CFG_PLLSEL$PLL4X 000000                          ?___lmul 0001  
                        ?___wmul 0001                          ?_f_open 009A  
        __size_of_xmit_datablock 007C                          ?_f_sync 0045  
              ??_disk_initialize 0011                     ?_sync_window 001B  
                 ___lmul@product 0009        __size_of_Lcd_Write_String 004A  
                        ?_select 0001           __end_of_Lcd_Set_Cursor 5482  
                      ?_check_fs 003B                       _disk_ioctl 1FE4  
                 follow_path@dir 008A                          _OSCCON2 000FD2  
                 follow_path@res 008D                       _disk_write 46E6  
                        _OSCTUNE 000F9B                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                     ??_Lcd_Init 0004                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0056  
                        _SSP1BUF 000FC9                       ??_Lcd_Port 0001  
                      ?_dir_find 0080              __end_of___delay_sec 5640  
                      ?_dir_next 006D            __size_of_dir_register 00D6  
                      ?_ld_clust 0001                       _clust2sect 4DF8  
               sync_window@wsect 002C                   _Lcd_Write_Char 5678  
                        _Lcd_Cmd 5758                    ?_remove_chain 0056  
          __size_of_create_chain 02FA                __end_of_dir_alloc 48E6  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 4D3E  
                        ff@FatFs 00D4                       f_close@res 0050  
                __size_of___lmul 0056                        ?_st_clust 0001  
                    ?___send_cmd 0004                          ___lldiv 509C  
                __size_of___wmul 0026             __size_of_move_window 00A6  
                     check_fs@fs 003B                  __size_of_f_open 0396  
                   __psmallconst 0800                  __size_of_f_sync 0142  
                        _f_close 55CE            __size_of_get_ldnumber 00DE  
            _disk_initialize$412 0017                          __pcinit 5556  
                        _chk_chr 54CC                          _f_lseek 19D6  
                        __ramtop 0800                  ?_Lcd_Set_Cursor 0004  
                        _f_mount 4EB2                  __size_of_select 001E  
                        __ptext0 3E14                          __ptext1 1272  
                        __ptext2 3054                          __ptext3 4314  
                        __ptext4 445E                          __ptext5 51A0  
                        __ptext6 48E6                          __ptext7 5376  
                        __ptext8 39A6                          __ptext9 54CC  
                        _dir_sdi 36E4                      validate@fil 0008  
                        _f_write 1272                      validate@obj 0002  
                        _get_fat 2CB2                       chk_chr@chr 0003  
                   _dir_register 4B9C                       chk_chr@str 0001  
                        _mem_cmp 5376                          _mem_cpy 4D3E  
          _OSCILLATOR_Initialize 57AA                          _mem_set 56B0  
                     ??_check_fs 0041                  find_volume@path 0047  
                find_volume@nrsv 0082                  find_volume@stat 008C  
       ??_PIN_MANAGER_Initialize 0001                     _create_chain 33EA  
                     ??_deselect 0002                       ??_dir_find 0060  
                        _put_fat 2482                       ??_dir_next 0071  
     __size_of_SYSTEM_Initialize 000E                       f_lseek@bcs 008C  
                     ??_ld_clust 0005                          _sync_fs 3FFC  
         __end_of_Lcd_Write_Char 56B0                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 5588  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 530A  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 4ABE  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      Lcd_Port@a 0001                        _SPI1_Open 57CC  
                     _wait_ready 5592                       dir_alloc@n 0087  
               remove_chain@clst 0058                       dir_find@dp 0080  
                      _PORTDbits 000F83                  _create_name$902 0011  
                     dir_sdi@idx 0058                      ___delay_sec 5608  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
                ?_Lcd_Write_Char 0001                Lcd_Write_String@a 0005  
              Lcd_Write_String@i 0009              __size_of___send_cmd 0082  
         __end_of_rcvr_datablock 5376                    ??_create_name 000D  
               disk_initialize@n 001D                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 57E8  
                  ??_find_volume 004A                    ??_disk_status 0001  
                      _Lcd_Clear 57F6                   _xmit_datablock 521E  
                     ?_SPI1_Open 0001                   __end_of___lmul 5432  
                    st_clust@dir 0001                   __end_of___wmul 5758  
               _Lcd_Write_String 5482                   __end_of_f_open 33EA  
                 __end_of_f_sync 46E6                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                   __end_of_select 5798  
           __size_of_sync_window 0158              start_initialization 5556  
__size_of_PIN_MANAGER_Initialize 0038                       mem_cmp@cnt 0005  
                     mem_cmp@dst 0001                       mem_cmp@src 0003  
              __size_of_Lcd_Init 0070                __size_of_Lcd_Port 002C  
                     mem_cpy@cnt 0005                      put_fat@clst 003D  
                     mem_cpy@dst 0001                       mem_cpy@src 0003  
                ?_rcvr_datablock 0002                  __CFG_nLPBOR$OFF 000000  
                _disk_initialize 3C2A                       mem_set@cnt 0005  
                     mem_set@dst 0001                       mem_set@val 0003  
         __end_of_xmit_datablock 529A                    ??_follow_path 0060  
            __size_of_disk_ioctl 049E              __end_of_create_name 3C2A  
                     ?_Lcd_Clear 0001              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00F7  
            __end_of_find_volume 1272              __end_of_disk_status 57AA  
            __size_of_clust2sect 00BA                  Lcd_Write_Char@a 0004  
                Lcd_Write_Char@y 0003                         ??_select 0004  
           __end_of_remove_chain 445E                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 05D2  
                  __pcstackBANK0 0060                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 57F6                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                         ?_Lcd_Cmd 0001  
              __size_of_ld_clust 007E           _PIN_MANAGER_Initialize 5640  
                ?_xmit_datablock 0004                 ??_Lcd_Set_Cursor 0005  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 47F6                         ?___lldiv 0001  
              __size_of_validate 0094                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 4C72  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 45A4  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 3E14                         ?_sync_fs 003A  
                    _get_fat$652 004A                find_volume@fasize 008D  
            __size_of_wait_ready 003C               __end_of___send_cmd 51A0  
                    _create_name 39A6                   ___wmul@product 0005  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 08C4                      _disk_status 5798  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                         Lcd_Cmd@a 0003  
                follow_path@path 0088                      ??_Lcd_Clear 0004  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00D6  
                   ??_disk_ioctl 0014                 ??_Lcd_Write_Char 0002  
              __CFG_CFGPLLEN$OFF 000000                     ??_disk_write 0019  
                   f_lseek@ifptr 0083                         _Lcd_Init 529A  
                   f_lseek@nsect 0088                         _Lcd_Port 56DC  
                     st_clust@cl 0003                 ?_SPI1_Initialize 0001  
                   ??_clust2sect 0013                ___lmul@multiplier 0001  
                    _INTCON2bits 000FF1         __end_of_Lcd_Write_String 54CC  
               __size_of_Lcd_Cmd 0022                       put_fat@res 0053  
                     put_fat@val 0041                move_window@sector 0032  
                dir_next@stretch 006F                         __Hrparam 0000  
                       __Lrparam 0000                      _follow_path 445E  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 2482  
          __size_of_remove_chain 014A               __end_of_disk_write 47F6  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 0082  
            __end_of_move_window 5008               __end_of_clust2sect 4EB2  
               __size_of_f_close 003A                 __size_of_chk_chr 0048  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 0764  
               __size_of_get_fat 03A2                         _check_fs 49D2  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 00BA  
               __size_of_mem_set 002C              xmit_datablock@token 0006  
                ___delay_sec@sec 0004                 ??_rcvr_datablock 0006  
                dir_register@res 008C                         _deselect 5804  
                       __ptext10 4B9C                         __ptext11 4D3E  
                       __ptext20 49D2                         __ptext12 47F6  
                       __ptext21 19D6                         __ptext13 36E4  
                       __ptext30 5008                         __ptext22 33EA  
                       __ptext14 28AC                         __ptext31 5798  
                       __ptext23 2482                         __ptext15 4EB2  
                       __ptext40 521E                         __ptext32 3FFC  
                       __ptext24 2CB2                         __ptext16 08C4  
                       __ptext41 4C72                         __ptext33 56B0  
                       __ptext25 4DF8                         __ptext17 4ABE  
                       __ptext50 57DA                         __ptext42 5514  
                       __ptext34 1FE4                         __ptext26 53DC  
                       __ptext18 3C2A                         __ptext51 57E8  
                       __ptext43 511E                         __ptext35 5732  
                       __ptext27 509C                         __ptext19 57CC  
                       __ptext60 56DC                         __ptext52 5640  
                       __ptext44 577A                         __ptext36 5708  
                       __ptext28 55CE                         __ptext53 57AA  
                       __ptext45 5592                         __ptext37 4F62  
                       __ptext29 45A4                         __ptext54 5482  
                       __ptext46 5804                         __ptext38 41BC  
                       __ptext55 5678                         __ptext47 530A  
                       __ptext39 46E6                         __ptext56 5432  
                       __ptext48 57BC                         __ptext57 529A  
                       __ptext49 5608                         __ptext58 57F6  
                       __ptext59 5758                         _dir_find 48E6  
                   _SSP1CON1bits 000FC6                         _dir_next 28AC  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 51A0                 __size_of_put_fat 042A  
                 sync_window@res 0029                 __size_of_sync_fs 01C0  
                  __size_of_main 01E8                       sync_fs@res 0044  
                   _remove_chain 4314                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 5514  
                       _validate 5008                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 5708  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$421 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0009  
                      put_fat@fs 003B                         mem_cpy@s 000B  
                       mem_set@d 0007               Lcd_Write_Char@temp 0002  
                  wait_ready@tmr 0002               xmit_datablock@buff 0004  
             xmit_datablock@resp 0009                   dir_register@dp 008A  
               ??_xmit_datablock 0007               __end_of_wait_ready 55CE  
               ___lldiv@dividend 0001          ?_PIN_MANAGER_Initialize 0001  
                   dir_alloc@res 0089                    sync_window@fs 001B  
                  sync_window@nf 002A                      f_mount@path 0054  
                      sync_fs@fs 003A                      _move_window 4F62  
           __CFG_CPUDIV$NOCLKDIV 000000               Lcd_Set_Cursor@temp 0008  
                       put_fat@p 0054                    ?_dir_register 008A  
                  ___delay_sec@i 0005                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 4314                      dir_find@res 0085  
           __size_of___delay_sec 0038                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 5678  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                   ?_disk_status 0001                      _put_fat$678 004D  
                    _put_fat$679 004F  
