

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 15 21:07:44 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70  0000                     
    71                           ; Version 2.05
    72                           ; Generated 20/12/2018 GMT
    73                           ; 
    74                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F45K50 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataBANK0
   107  00562C                     __pidataBANK0:
   108                           	opt callstack 0
   109                           
   110                           ;initializer for _Stat
   111  00562C  01                 	db	1
   112  0000                     _ANSELE	set	3935
   113  0000                     _ANSELD	set	3934
   114  0000                     _ANSELB	set	3932
   115  0000                     _ANSELC	set	3933
   116  0000                     _ANSELA	set	3931
   117  0000                     _SSP1STATbits	set	4039
   118  0000                     _SSP1BUF	set	4041
   119  0000                     _SSP1CON1bits	set	4038
   120  0000                     _SSP1ADD	set	4040
   121  0000                     _SSP1CON1	set	4038
   122  0000                     _SSP1STAT	set	4039
   123  0000                     _INTCON2bits	set	4081
   124  0000                     _WPUB	set	3973
   125  0000                     _TRISD	set	3989
   126  0000                     _TRISC	set	3988
   127  0000                     _TRISB	set	3987
   128  0000                     _TRISE	set	3990
   129  0000                     _LATC	set	3979
   130  0000                     _LATB	set	3978
   131  0000                     _LATD	set	3980
   132  0000                     _LATE	set	3981
   133  0000                     _ACTCON	set	4021
   134  0000                     _OSCTUNE	set	3995
   135  0000                     _OSCCON2	set	4050
   136  0000                     _OSCCON	set	4051
   137  0000                     _LATBbits	set	3978
   138  0000                     _TRISA	set	3986
   139  0000                     _LATA	set	3977
   140  0000                     _LATAbits	set	3977
   141                           
   142                           	psect	smallconst
   143  000800                     __psmallconst:
   144                           	opt callstack 0
   145  000800  00                 	db	0
   146  000801                     STR_4:
   147  000801  43                 	db	67	;'C'
   148  000802  52                 	db	82	;'R'
   149  000803  45                 	db	69	;'E'
   150  000804  41                 	db	65	;'A'
   151  000805  44                 	db	68	;'D'
   152  000806  4F                 	db	79	;'O'
   153  000807  20                 	db	32
   154  000808  50                 	db	80	;'P'
   155  000809  4F                 	db	79	;'O'
   156  00080A  52                 	db	82	;'R'
   157  00080B  20                 	db	32
   158  00080C  4D                 	db	77	;'M'
   159  00080D  49                 	db	73	;'I'
   160  00080E  20                 	db	32
   161  00080F  3A                 	db	58	;':'
   162  000810  56                 	db	86	;'V'
   163  000811  20                 	db	32
   164  000812  2E                 	db	46
   165  000813  0D                 	db	13
   166  000814  0A                 	db	10
   167  000815  00                 	db	0
   168  000816                     STR_5:
   169  000816  22                 	db	34
   170  000817  2A                 	db	42
   171  000818  2B                 	db	43
   172  000819  2C                 	db	44
   173  00081A  3A                 	db	58	;':'
   174  00081B  3B                 	db	59	;';'
   175  00081C  3C                 	db	60	;'<'
   176  00081D  3D                 	db	61	;'='
   177  00081E  3E                 	db	62	;'>'
   178  00081F  3F                 	db	63	;'?'
   179  000820  5B                 	db	91	;'['
   180  000821  5D                 	db	93	;']'
   181  000822  7C                 	db	124
   182  000823  7F                 	db	127
   183  000824  00                 	db	0
   184  000825                     STR_3:
   185  000825  42                 	db	66	;'B'
   186  000826  65                 	db	101	;'e'
   187  000827  65                 	db	101	;'e'
   188  000828  44                 	db	68	;'D'
   189  000829  65                 	db	101	;'e'
   190  00082A  76                 	db	118	;'v'
   191  00082B  2E                 	db	46
   192  00082C  74                 	db	116	;'t'
   193  00082D  78                 	db	120	;'x'
   194  00082E  74                 	db	116	;'t'
   195  00082F  00                 	db	0
   196  0000                     
   197                           ; #config settings
   198  000830  00                 	db	0	; dummy byte at the end
   199  0000                     
   200                           	psect	cinit
   201  005408                     __pcinit:
   202                           	opt callstack 0
   203  005408                     start_initialization:
   204                           	opt callstack 0
   205  005408                     __initialization:
   206                           	opt callstack 0
   207                           
   208                           ; Initialize objects allocated to BANK0 (1 bytes)
   209                           ; load TBLPTR registers with __pidataBANK0
   210  005408  0E2C               	movlw	low __pidataBANK0
   211  00540A  6EF6               	movwf	tblptrl,c
   212  00540C  0E56               	movlw	high __pidataBANK0
   213  00540E  6EF7               	movwf	tblptrh,c
   214  005410  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   215  005412  6EF8               	movwf	tblptru,c
   216  005414  0009               	tblrd		*+	;fetch initializer
   217  005416  CFF5 F0F7          	movff	tablat,__pdataBANK0
   218                           
   219                           ; Clear objects allocated to BIGRAM (558 bytes)
   220  00541A  EE05  F0D2         	lfsr	0,__pbssBIGRAM
   221  00541E  EE12 F02E          	lfsr	1,558
   222  005422                     clear_0:
   223  005422  6AEE               	clrf	postinc0,c
   224  005424  50E5               	movf	postdec1,w,c
   225  005426  50E1               	movf	fsr1l,w,c
   226  005428  E1FC               	bnz	clear_0
   227  00542A  50E2               	movf	fsr1h,w,c
   228  00542C  E1FA               	bnz	clear_0
   229                           
   230                           ; Clear objects allocated to BANK0 (37 bytes)
   231  00542E  EE00  F0D2         	lfsr	0,__pbssBANK0
   232  005432  0E25               	movlw	37
   233  005434                     clear_1:
   234  005434  6AEE               	clrf	postinc0,c
   235  005436  06E8               	decf	wreg,f,c
   236  005438  E1FD               	bnz	clear_1
   237  00543A                     end_of_initialization:
   238                           	opt callstack 0
   239  00543A                     __end_of__initialization:
   240                           	opt callstack 0
   241  00543A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   242  00543C  6EF8               	movwf	tblptru,c
   243  00543E  0100               	movlb	0
   244  005440  EFA1  F01F         	goto	_main	;jump to C main() function
   245                           
   246                           	psect	bssBANK0
   247  0000D2                     __pbssBANK0:
   248                           	opt callstack 0
   249  0000D2                     _Fsid:
   250                           	opt callstack 0
   251  0000D2                     	ds	2
   252  0000D4                     ff@FatFs:
   253                           	opt callstack 0
   254  0000D4                     	ds	2
   255  0000D6                     _CardType:
   256                           	opt callstack 0
   257  0000D6                     	ds	1
   258  0000D7                     _Fil:
   259                           	opt callstack 0
   260  0000D7                     	ds	32
   261                           
   262                           	psect	dataBANK0
   263  0000F7                     __pdataBANK0:
   264                           	opt callstack 0
   265  0000F7                     _Stat:
   266                           	opt callstack 0
   267  0000F7                     	ds	1
   268                           
   269                           	psect	bssBIGRAM
   270  0005D2                     __pbssBIGRAM:
   271                           	opt callstack 0
   272  0005D2                     _FatFs:
   273                           	opt callstack 0
   274  0005D2                     	ds	558
   275                           
   276                           	psect	cstackBANK0
   277  000060                     __pcstackBANK0:
   278                           	opt callstack 0
   279  000060                     ??_dir_sdi:
   280  000060                     remove_chain@res:
   281                           	opt callstack 0
   282  000060                     create_chain@res:
   283                           	opt callstack 0
   284  000060                     find_volume@br:
   285                           	opt callstack 0
   286                           
   287                           ; 16 bytes @ 0x0
   288  000060                     	ds	1
   289  000061                     remove_chain@nxt:
   290                           	opt callstack 0
   291  000061                     create_chain@scl:
   292                           	opt callstack 0
   293                           
   294                           ; 4 bytes @ 0x1
   295  000061                     	ds	4
   296  000065                     create_chain@ncl:
   297                           	opt callstack 0
   298                           
   299                           ; 4 bytes @ 0x5
   300  000065                     	ds	2
   301  000067                     dir_sdi@ic:
   302                           	opt callstack 0
   303                           
   304                           ; 2 bytes @ 0x7
   305  000067                     	ds	2
   306  000069                     create_chain@cs:
   307                           	opt callstack 0
   308  000069                     dir_sdi@sect:
   309                           	opt callstack 0
   310                           
   311                           ; 4 bytes @ 0x9
   312  000069                     	ds	4
   313  00006D                     dir_next@dp:
   314                           	opt callstack 0
   315  00006D                     f_write@fp:
   316                           	opt callstack 0
   317  00006D                     f_lseek@fp:
   318                           	opt callstack 0
   319  00006D                     dir_sdi@clst:
   320                           	opt callstack 0
   321                           
   322                           ; 4 bytes @ 0xD
   323  00006D                     	ds	2
   324  00006F                     dir_next@stretch:
   325                           	opt callstack 0
   326  00006F                     f_write@buff:
   327                           	opt callstack 0
   328  00006F                     f_lseek@ofs:
   329                           	opt callstack 0
   330                           
   331                           ; 4 bytes @ 0xF
   332  00006F                     	ds	1
   333  000070                     _find_volume$918:
   334                           	opt callstack 0
   335                           
   336                           ; 4 bytes @ 0x10
   337  000070                     	ds	1
   338  000071                     ??_dir_next:
   339  000071                     f_write@btw:
   340                           	opt callstack 0
   341                           
   342                           ; 2 bytes @ 0x11
   343  000071                     	ds	2
   344  000073                     ??_f_lseek:
   345  000073                     f_write@bw:
   346                           	opt callstack 0
   347                           
   348                           ; 2 bytes @ 0x13
   349  000073                     	ds	1
   350  000074                     _find_volume$919:
   351                           	opt callstack 0
   352                           
   353                           ; 2 bytes @ 0x14
   354  000074                     	ds	1
   355  000075                     ??_f_write:
   356                           
   357                           ; 1 bytes @ 0x15
   358  000075                     	ds	1
   359  000076                     find_volume@szbfat:
   360                           	opt callstack 0
   361                           
   362                           ; 4 bytes @ 0x16
   363  000076                     	ds	2
   364  000078                     dir_next@c:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x18
   368  000078                     	ds	2
   369  00007A                     dir_next@i:
   370                           	opt callstack 0
   371  00007A                     find_volume@pt:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x1A
   375  00007A                     	ds	2
   376  00007C                     dir_next@clst:
   377                           	opt callstack 0
   378  00007C                     find_volume@sysect:
   379                           	opt callstack 0
   380                           
   381                           ; 4 bytes @ 0x1C
   382  00007C                     	ds	4
   383  000080                     dir_alloc@dp:
   384                           	opt callstack 0
   385  000080                     dir_find@dp:
   386                           	opt callstack 0
   387  000080                     find_volume@vol:
   388                           	opt callstack 0
   389                           
   390                           ; 2 bytes @ 0x20
   391  000080                     	ds	1
   392  000081                     f_write@res:
   393                           	opt callstack 0
   394                           
   395                           ; 1 bytes @ 0x21
   396  000081                     	ds	1
   397  000082                     dir_find@c:
   398                           	opt callstack 0
   399  000082                     dir_alloc@nent:
   400                           	opt callstack 0
   401  000082                     find_volume@nrsv:
   402                           	opt callstack 0
   403  000082                     f_write@wbuff:
   404                           	opt callstack 0
   405                           
   406                           ; 2 bytes @ 0x22
   407  000082                     	ds	1
   408  000083                     dir_find@dir:
   409                           	opt callstack 0
   410  000083                     f_lseek@ifptr:
   411                           	opt callstack 0
   412                           
   413                           ; 4 bytes @ 0x23
   414  000083                     	ds	1
   415  000084                     ??_dir_alloc:
   416  000084                     f_write@csect:
   417                           	opt callstack 0
   418  000084                     find_volume@tsect:
   419                           	opt callstack 0
   420                           
   421                           ; 4 bytes @ 0x24
   422  000084                     	ds	1
   423  000085                     dir_find@res:
   424                           	opt callstack 0
   425  000085                     f_write@cc:
   426                           	opt callstack 0
   427                           
   428                           ; 2 bytes @ 0x25
   429  000085                     	ds	1
   430  000086                     follow_path@dp:
   431                           	opt callstack 0
   432                           
   433                           ; 2 bytes @ 0x26
   434  000086                     	ds	1
   435  000087                     f_lseek@res:
   436                           	opt callstack 0
   437  000087                     dir_alloc@n:
   438                           	opt callstack 0
   439  000087                     f_write@sect:
   440                           	opt callstack 0
   441                           
   442                           ; 4 bytes @ 0x27
   443  000087                     	ds	1
   444  000088                     follow_path@path:
   445                           	opt callstack 0
   446  000088                     find_volume@nclst:
   447                           	opt callstack 0
   448  000088                     f_lseek@nsect:
   449                           	opt callstack 0
   450                           
   451                           ; 4 bytes @ 0x28
   452  000088                     	ds	1
   453  000089                     dir_alloc@res:
   454                           	opt callstack 0
   455                           
   456                           ; 1 bytes @ 0x29
   457  000089                     	ds	1
   458  00008A                     dir_register@dp:
   459                           	opt callstack 0
   460  00008A                     follow_path@dir:
   461                           	opt callstack 0
   462                           
   463                           ; 2 bytes @ 0x2A
   464  00008A                     	ds	1
   465  00008B                     f_write@clst:
   466                           	opt callstack 0
   467                           
   468                           ; 4 bytes @ 0x2B
   469  00008B                     	ds	1
   470  00008C                     dir_register@res:
   471                           	opt callstack 0
   472  00008C                     follow_path@ns:
   473                           	opt callstack 0
   474  00008C                     find_volume@stat:
   475                           	opt callstack 0
   476  00008C                     f_lseek@bcs:
   477                           	opt callstack 0
   478                           
   479                           ; 4 bytes @ 0x2C
   480  00008C                     	ds	1
   481  00008D                     follow_path@res:
   482                           	opt callstack 0
   483  00008D                     find_volume@fasize:
   484                           	opt callstack 0
   485                           
   486                           ; 4 bytes @ 0x2D
   487  00008D                     	ds	2
   488  00008F                     f_write@wcnt:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x2F
   492  00008F                     	ds	1
   493  000090                     f_lseek@clst:
   494                           	opt callstack 0
   495                           
   496                           ; 4 bytes @ 0x30
   497  000090                     	ds	1
   498  000091                     find_volume@bsect:
   499                           	opt callstack 0
   500                           
   501                           ; 4 bytes @ 0x31
   502  000091                     	ds	4
   503  000095                     find_volume@i:
   504                           	opt callstack 0
   505                           
   506                           ; 2 bytes @ 0x35
   507  000095                     	ds	2
   508  000097                     find_volume@fmt:
   509                           	opt callstack 0
   510                           
   511                           ; 1 bytes @ 0x37
   512  000097                     	ds	1
   513  000098                     find_volume@fs:
   514                           	opt callstack 0
   515                           
   516                           ; 2 bytes @ 0x38
   517  000098                     	ds	2
   518  00009A                     f_open@fp:
   519                           	opt callstack 0
   520                           
   521                           ; 2 bytes @ 0x3A
   522  00009A                     	ds	2
   523  00009C                     f_open@path:
   524                           	opt callstack 0
   525                           
   526                           ; 2 bytes @ 0x3C
   527  00009C                     	ds	2
   528  00009E                     f_open@mode:
   529                           	opt callstack 0
   530                           
   531                           ; 1 bytes @ 0x3E
   532  00009E                     	ds	1
   533  00009F                     ??_f_open:
   534                           
   535                           ; 1 bytes @ 0x3F
   536  00009F                     	ds	4
   537  0000A3                     f_open@sfn:
   538                           	opt callstack 0
   539                           
   540                           ; 12 bytes @ 0x43
   541  0000A3                     	ds	12
   542  0000AF                     f_open@cl:
   543                           	opt callstack 0
   544                           
   545                           ; 4 bytes @ 0x4F
   546  0000AF                     	ds	4
   547  0000B3                     f_open@dw:
   548                           	opt callstack 0
   549                           
   550                           ; 4 bytes @ 0x53
   551  0000B3                     	ds	4
   552  0000B7                     f_open@res:
   553                           	opt callstack 0
   554                           
   555                           ; 1 bytes @ 0x57
   556  0000B7                     	ds	1
   557  0000B8                     f_open@dir:
   558                           	opt callstack 0
   559                           
   560                           ; 2 bytes @ 0x58
   561  0000B8                     	ds	2
   562  0000BA                     f_open@dj:
   563                           	opt callstack 0
   564                           
   565                           ; 22 bytes @ 0x5A
   566  0000BA                     	ds	22
   567  0000D0                     main@bw:
   568                           	opt callstack 0
   569                           
   570                           ; 2 bytes @ 0x70
   571  0000D0                     	ds	2
   572                           
   573                           	psect	cstackCOMRAM
   574  000001                     __pcstackCOMRAM:
   575                           	opt callstack 0
   576  000001                     ??___delay_sec:
   577  000001                     ?_mem_cmp:
   578                           	opt callstack 0
   579  000001                     ?_chk_chr:
   580                           	opt callstack 0
   581  000001                     ?_get_ldnumber:
   582                           	opt callstack 0
   583  000001                     ?___wmul:
   584                           	opt callstack 0
   585  000001                     ?_ld_clust:
   586                           	opt callstack 0
   587  000001                     ?___lmul:
   588                           	opt callstack 0
   589  000001                     ?___lldiv:
   590                           	opt callstack 0
   591  000001                     Error@a:
   592                           	opt callstack 0
   593  000001                     disk_status@pdrv:
   594                           	opt callstack 0
   595  000001                     SPI1_Exchange8bit@data:
   596                           	opt callstack 0
   597  000001                     mem_cpy@dst:
   598                           	opt callstack 0
   599  000001                     mem_set@dst:
   600                           	opt callstack 0
   601  000001                     mem_cmp@dst:
   602                           	opt callstack 0
   603  000001                     chk_chr@str:
   604                           	opt callstack 0
   605  000001                     ld_clust@fs:
   606                           	opt callstack 0
   607  000001                     st_clust@dir:
   608                           	opt callstack 0
   609  000001                     get_ldnumber@path:
   610                           	opt callstack 0
   611  000001                     ___wmul@multiplier:
   612                           	opt callstack 0
   613  000001                     ___lmul@multiplier:
   614                           	opt callstack 0
   615  000001                     ___lldiv@dividend:
   616                           	opt callstack 0
   617                           
   618                           ; 4 bytes @ 0x0
   619  000001                     	ds	1
   620  000002                     wait_ready@tmr:
   621                           	opt callstack 0
   622  000002                     rcvr_datablock@buff:
   623                           	opt callstack 0
   624  000002                     validate@obj:
   625                           	opt callstack 0
   626                           
   627                           ; 2 bytes @ 0x1
   628  000002                     	ds	1
   629  000003                     ??_get_ldnumber:
   630  000003                     mem_cpy@src:
   631                           	opt callstack 0
   632  000003                     mem_set@val:
   633                           	opt callstack 0
   634  000003                     mem_cmp@src:
   635                           	opt callstack 0
   636  000003                     chk_chr@chr:
   637                           	opt callstack 0
   638  000003                     ld_clust@dir:
   639                           	opt callstack 0
   640  000003                     ___wmul@multiplicand:
   641                           	opt callstack 0
   642  000003                     st_clust@cl:
   643                           	opt callstack 0
   644                           
   645                           ; 4 bytes @ 0x2
   646  000003                     	ds	1
   647  000004                     ??_validate:
   648  000004                     ___delay_sec@sec:
   649                           	opt callstack 0
   650  000004                     rcvr_datablock@btr:
   651                           	opt callstack 0
   652  000004                     xmit_datablock@buff:
   653                           	opt callstack 0
   654  000004                     ___send_cmd@arg:
   655                           	opt callstack 0
   656                           
   657                           ; 4 bytes @ 0x3
   658  000004                     	ds	1
   659  000005                     ??_chk_chr:
   660  000005                     ??_ld_clust:
   661  000005                     ___delay_sec@i:
   662                           	opt callstack 0
   663  000005                     mem_cpy@cnt:
   664                           	opt callstack 0
   665  000005                     mem_set@cnt:
   666                           	opt callstack 0
   667  000005                     mem_cmp@cnt:
   668                           	opt callstack 0
   669  000005                     ___wmul@product:
   670                           	opt callstack 0
   671  000005                     ___lmul@multiplicand:
   672                           	opt callstack 0
   673  000005                     ___lldiv@divisor:
   674                           	opt callstack 0
   675                           
   676                           ; 4 bytes @ 0x4
   677  000005                     	ds	1
   678  000006                     xmit_datablock@token:
   679                           	opt callstack 0
   680  000006                     rcvr_datablock@tmr:
   681                           	opt callstack 0
   682                           
   683                           ; 2 bytes @ 0x5
   684  000006                     	ds	1
   685  000007                     ??_mem_cpy:
   686  000007                     ??_mem_cmp:
   687  000007                     xmit_datablock@i:
   688                           	opt callstack 0
   689  000007                     mem_set@d:
   690                           	opt callstack 0
   691  000007                     get_ldnumber@tp:
   692                           	opt callstack 0
   693                           
   694                           ; 2 bytes @ 0x6
   695  000007                     	ds	1
   696  000008                     rcvr_datablock@token:
   697                           	opt callstack 0
   698  000008                     ___send_cmd@res:
   699                           	opt callstack 0
   700  000008                     validate@fil:
   701                           	opt callstack 0
   702                           
   703                           ; 2 bytes @ 0x7
   704  000008                     	ds	1
   705  000009                     xmit_datablock@resp:
   706                           	opt callstack 0
   707  000009                     ___send_cmd@n:
   708                           	opt callstack 0
   709  000009                     mem_cpy@d:
   710                           	opt callstack 0
   711  000009                     mem_cmp@d:
   712                           	opt callstack 0
   713  000009                     create_name@dp:
   714                           	opt callstack 0
   715  000009                     get_ldnumber@vol:
   716                           	opt callstack 0
   717  000009                     ___lmul@product:
   718                           	opt callstack 0
   719  000009                     ___lldiv@quotient:
   720                           	opt callstack 0
   721                           
   722                           ; 4 bytes @ 0x8
   723  000009                     	ds	1
   724  00000A                     ___send_cmd@cmd:
   725                           	opt callstack 0
   726                           
   727                           ; 1 bytes @ 0x9
   728  00000A                     	ds	1
   729  00000B                     mem_cpy@s:
   730                           	opt callstack 0
   731  00000B                     mem_cmp@s:
   732                           	opt callstack 0
   733  00000B                     create_name@path:
   734                           	opt callstack 0
   735  00000B                     get_ldnumber@i:
   736                           	opt callstack 0
   737  00000B                     send_cmd@arg:
   738                           	opt callstack 0
   739  00000B                     ld_clust@cl:
   740                           	opt callstack 0
   741                           
   742                           ; 4 bytes @ 0xA
   743  00000B                     	ds	2
   744  00000D                     ??_create_name:
   745  00000D                     ?_clust2sect:
   746                           	opt callstack 0
   747  00000D                     ___lldiv@counter:
   748                           	opt callstack 0
   749  00000D                     mem_cmp@r:
   750                           	opt callstack 0
   751  00000D                     clust2sect@fs:
   752                           	opt callstack 0
   753  00000D                     get_ldnumber@tt:
   754                           	opt callstack 0
   755                           
   756                           ; 2 bytes @ 0xC
   757  00000D                     	ds	2
   758  00000F                     send_cmd@cmd:
   759                           	opt callstack 0
   760  00000F                     clust2sect@clst:
   761                           	opt callstack 0
   762                           
   763                           ; 4 bytes @ 0xE
   764  00000F                     	ds	1
   765  000010                     send_cmd@res:
   766                           	opt callstack 0
   767                           
   768                           ; 1 bytes @ 0xF
   769  000010                     	ds	1
   770  000011                     ??_disk_initialize:
   771  000011                     disk_ioctl@cmd:
   772                           	opt callstack 0
   773  000011                     disk_read@buff:
   774                           	opt callstack 0
   775  000011                     disk_write@buff:
   776                           	opt callstack 0
   777  000011                     _create_name$814:
   778                           	opt callstack 0
   779                           
   780                           ; 2 bytes @ 0x10
   781  000011                     	ds	1
   782  000012                     disk_initialize@pdrv:
   783                           	opt callstack 0
   784  000012                     disk_ioctl@buff:
   785                           	opt callstack 0
   786                           
   787                           ; 2 bytes @ 0x11
   788  000012                     	ds	1
   789  000013                     ??_clust2sect:
   790  000013                     create_name@si:
   791                           	opt callstack 0
   792  000013                     disk_initialize@ocr:
   793                           	opt callstack 0
   794  000013                     disk_read@sector:
   795                           	opt callstack 0
   796  000013                     disk_write@sector:
   797                           	opt callstack 0
   798                           
   799                           ; 4 bytes @ 0x12
   800  000013                     	ds	1
   801  000014                     ??_disk_ioctl:
   802                           
   803                           ; 1 bytes @ 0x13
   804  000014                     	ds	1
   805  000015                     create_name@b:
   806                           	opt callstack 0
   807                           
   808                           ; 1 bytes @ 0x14
   809  000015                     	ds	1
   810  000016                     create_name@ni:
   811                           	opt callstack 0
   812                           
   813                           ; 2 bytes @ 0x15
   814  000016                     	ds	1
   815  000017                     _disk_initialize$324:
   816                           	opt callstack 0
   817  000017                     disk_read@count:
   818                           	opt callstack 0
   819  000017                     disk_write@count:
   820                           	opt callstack 0
   821                           
   822                           ; 2 bytes @ 0x16
   823  000017                     	ds	1
   824  000018                     create_name@p:
   825                           	opt callstack 0
   826                           
   827                           ; 2 bytes @ 0x17
   828  000018                     	ds	1
   829  000019                     ??_disk_write:
   830  000019                     disk_initialize@cmd:
   831                           	opt callstack 0
   832  000019                     disk_read@pdrv:
   833                           	opt callstack 0
   834                           
   835                           ; 1 bytes @ 0x18
   836  000019                     	ds	1
   837  00001A                     disk_initialize@ty:
   838                           	opt callstack 0
   839  00001A                     disk_write@pdrv:
   840                           	opt callstack 0
   841  00001A                     create_name@d:
   842                           	opt callstack 0
   843  00001A                     _disk_read$333:
   844                           	opt callstack 0
   845                           
   846                           ; 2 bytes @ 0x19
   847  00001A                     	ds	1
   848  00001B                     disk_initialize@tmr:
   849                           	opt callstack 0
   850  00001B                     sync_window@fs:
   851                           	opt callstack 0
   852  00001B                     create_name@sfn:
   853                           	opt callstack 0
   854                           
   855                           ; 2 bytes @ 0x1A
   856  00001B                     	ds	1
   857  00001C                     disk_read@cmd:
   858                           	opt callstack 0
   859                           
   860                           ; 1 bytes @ 0x1B
   861  00001C                     	ds	1
   862  00001D                     ??_sync_window:
   863  00001D                     disk_initialize@n:
   864                           	opt callstack 0
   865  00001D                     create_name@i:
   866                           	opt callstack 0
   867                           
   868                           ; 2 bytes @ 0x1C
   869  00001D                     	ds	2
   870  00001F                     create_name@c:
   871                           	opt callstack 0
   872                           
   873                           ; 1 bytes @ 0x1E
   874  00001F                     	ds	2
   875  000021                     disk_ioctl@csd:
   876                           	opt callstack 0
   877                           
   878                           ; 16 bytes @ 0x20
   879  000021                     	ds	8
   880  000029                     sync_window@res:
   881                           	opt callstack 0
   882                           
   883                           ; 1 bytes @ 0x28
   884  000029                     	ds	1
   885  00002A                     sync_window@nf:
   886                           	opt callstack 0
   887                           
   888                           ; 2 bytes @ 0x29
   889  00002A                     	ds	2
   890  00002C                     sync_window@wsect:
   891                           	opt callstack 0
   892                           
   893                           ; 4 bytes @ 0x2B
   894  00002C                     	ds	4
   895  000030                     move_window@fs:
   896                           	opt callstack 0
   897                           
   898                           ; 2 bytes @ 0x2F
   899  000030                     	ds	1
   900  000031                     disk_ioctl@pdrv:
   901                           	opt callstack 0
   902                           
   903                           ; 1 bytes @ 0x30
   904  000031                     	ds	1
   905  000032                     disk_ioctl@csize:
   906                           	opt callstack 0
   907  000032                     move_window@sector:
   908                           	opt callstack 0
   909                           
   910                           ; 4 bytes @ 0x31
   911  000032                     	ds	4
   912  000036                     disk_ioctl@res:
   913                           	opt callstack 0
   914                           
   915                           ; 1 bytes @ 0x35
   916  000036                     	ds	1
   917  000037                     disk_ioctl@n:
   918                           	opt callstack 0
   919                           
   920                           ; 1 bytes @ 0x36
   921  000037                     	ds	1
   922  000038                     disk_ioctl@ptr:
   923                           	opt callstack 0
   924                           
   925                           ; 2 bytes @ 0x37
   926  000038                     	ds	2
   927  00003A                     move_window@res:
   928                           	opt callstack 0
   929  00003A                     sync_fs@fs:
   930                           	opt callstack 0
   931                           
   932                           ; 2 bytes @ 0x39
   933  00003A                     	ds	1
   934  00003B                     ?_get_fat:
   935                           	opt callstack 0
   936  00003B                     get_fat@fs:
   937                           	opt callstack 0
   938  00003B                     put_fat@fs:
   939                           	opt callstack 0
   940  00003B                     check_fs@fs:
   941                           	opt callstack 0
   942                           
   943                           ; 2 bytes @ 0x3A
   944  00003B                     	ds	1
   945  00003C                     ??_sync_fs:
   946                           
   947                           ; 1 bytes @ 0x3B
   948  00003C                     	ds	1
   949  00003D                     get_fat@clst:
   950                           	opt callstack 0
   951  00003D                     put_fat@clst:
   952                           	opt callstack 0
   953  00003D                     check_fs@sect:
   954                           	opt callstack 0
   955                           
   956                           ; 4 bytes @ 0x3C
   957  00003D                     	ds	4
   958  000041                     ??_get_fat:
   959  000041                     ??_check_fs:
   960  000041                     put_fat@val:
   961                           	opt callstack 0
   962                           
   963                           ; 4 bytes @ 0x40
   964  000041                     	ds	3
   965  000044                     sync_fs@res:
   966                           	opt callstack 0
   967                           
   968                           ; 1 bytes @ 0x43
   969  000044                     	ds	1
   970  000045                     ??_put_fat:
   971  000045                     find_volume@rfs:
   972                           	opt callstack 0
   973  000045                     f_sync@fp:
   974                           	opt callstack 0
   975                           
   976                           ; 2 bytes @ 0x44
   977  000045                     	ds	2
   978  000047                     find_volume@path:
   979                           	opt callstack 0
   980                           
   981                           ; 2 bytes @ 0x46
   982  000047                     	ds	2
   983  000049                     find_volume@wmode:
   984                           	opt callstack 0
   985                           
   986                           ; 1 bytes @ 0x48
   987  000049                     	ds	1
   988  00004A                     ??_find_volume:
   989  00004A                     _get_fat$564:
   990                           	opt callstack 0
   991                           
   992                           ; 2 bytes @ 0x49
   993  00004A                     	ds	1
   994  00004B                     f_sync@res:
   995                           	opt callstack 0
   996                           
   997                           ; 1 bytes @ 0x4A
   998  00004B                     	ds	1
   999  00004C                     f_sync@dir:
  1000                           	opt callstack 0
  1001  00004C                     get_fat@val:
  1002                           	opt callstack 0
  1003                           
  1004                           ; 4 bytes @ 0x4B
  1005  00004C                     	ds	1
  1006  00004D                     _put_fat$590:
  1007                           	opt callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x4C
  1010  00004D                     	ds	1
  1011  00004E                     f_close@fp:
  1012                           	opt callstack 0
  1013                           
  1014                           ; 2 bytes @ 0x4D
  1015  00004E                     	ds	1
  1016  00004F                     _put_fat$591:
  1017                           	opt callstack 0
  1018                           
  1019                           ; 2 bytes @ 0x4E
  1020  00004F                     	ds	1
  1021  000050                     f_close@res:
  1022                           	opt callstack 0
  1023  000050                     get_fat@wc:
  1024                           	opt callstack 0
  1025                           
  1026                           ; 2 bytes @ 0x4F
  1027  000050                     	ds	1
  1028  000051                     put_fat@bc:
  1029                           	opt callstack 0
  1030                           
  1031                           ; 2 bytes @ 0x50
  1032  000051                     	ds	1
  1033  000052                     get_fat@p:
  1034                           	opt callstack 0
  1035  000052                     f_mount@fs:
  1036                           	opt callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x51
  1039  000052                     	ds	1
  1040  000053                     put_fat@res:
  1041                           	opt callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x52
  1044  000053                     	ds	1
  1045  000054                     get_fat@bc:
  1046                           	opt callstack 0
  1047  000054                     put_fat@p:
  1048                           	opt callstack 0
  1049  000054                     f_mount@path:
  1050                           	opt callstack 0
  1051                           
  1052                           ; 2 bytes @ 0x53
  1053  000054                     	ds	2
  1054  000056                     ?_create_chain:
  1055                           	opt callstack 0
  1056  000056                     f_mount@opt:
  1057                           	opt callstack 0
  1058  000056                     remove_chain@fs:
  1059                           	opt callstack 0
  1060  000056                     create_chain@fs:
  1061                           	opt callstack 0
  1062  000056                     dir_sdi@dp:
  1063                           	opt callstack 0
  1064                           
  1065                           ; 2 bytes @ 0x55
  1066  000056                     	ds	1
  1067  000057                     f_mount@res:
  1068                           	opt callstack 0
  1069                           
  1070                           ; 1 bytes @ 0x56
  1071  000057                     	ds	1
  1072  000058                     dir_sdi@idx:
  1073                           	opt callstack 0
  1074  000058                     f_mount@cfs:
  1075                           	opt callstack 0
  1076  000058                     remove_chain@clst:
  1077                           	opt callstack 0
  1078  000058                     create_chain@clst:
  1079                           	opt callstack 0
  1080                           
  1081                           ; 4 bytes @ 0x57
  1082  000058                     	ds	2
  1083  00005A                     f_mount@rp:
  1084                           	opt callstack 0
  1085                           
  1086                           ; 2 bytes @ 0x59
  1087  00005A                     	ds	2
  1088  00005C                     f_mount@vol:
  1089                           	opt callstack 0
  1090                           
  1091                           ; 2 bytes @ 0x5B
  1092  00005C                     	ds	4
  1093  000060                     
  1094                           ; 1 bytes @ 0x5F
  1095 ;;
  1096 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1097 ;;
  1098 ;; *************** function _main *****************
  1099 ;; Defined at:
  1100 ;;		line 15 in file "Main.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  bw              2  112[BANK0 ] unsigned short 
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1114 ;;      Params:         0       0       0       0       0       0       0       0       0
  1115 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1117 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1118 ;;Total ram usage:        2 bytes
  1119 ;; Hardware stack levels required when called:   14
  1120 ;; This function calls:
  1121 ;;		_Error
  1122 ;;		_SYSTEM_Initialize
  1123 ;;		___delay_sec
  1124 ;;		_f_close
  1125 ;;		_f_lseek
  1126 ;;		_f_mount
  1127 ;;		_f_open
  1128 ;;		_f_write
  1129 ;; This function is called by:
  1130 ;;		Startup code after reset
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text0
  1135  003F42                     __ptext0:
  1136                           	opt callstack 0
  1137  003F42                     _main:
  1138                           	opt callstack 17
  1139                           
  1140                           ;Main.c: 18:     LATA = 0x00;
  1141                           
  1142                           ;incstack = 0
  1143  003F42  0E00               	movlw	0
  1144  003F44  6E89               	movwf	3977,c	;volatile
  1145                           
  1146                           ;Main.c: 19:     TRISA = 0x00;
  1147  003F46  0E00               	movlw	0
  1148  003F48  6E92               	movwf	3986,c	;volatile
  1149                           
  1150                           ;Main.c: 20:     ANSELA = 0x00;
  1151  003F4A  0E00               	movlw	0
  1152  003F4C  010F               	movlb	15	; () banked
  1153  003F4E  6F5B               	movwf	91,b	;volatile
  1154                           
  1155                           ; BSR set to: 15
  1156                           ;Main.c: 21:     UINT bw;;Main.c: 23:     SYSTEM_Initialize();
  1157  003F50  EC03  F02B         	call	_SYSTEM_Initialize	;wreg free
  1158                           
  1159                           ;Main.c: 24:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1160  003F54  0ED2               	movlw	low _FatFs
  1161  003F56  6E52               	movwf	f_mount@fs,c
  1162  003F58  0E05               	movlw	high _FatFs
  1163  003F5A  6E53               	movwf	f_mount@fs+1,c
  1164  003F5C  0E15               	movlw	low (STR_4+20)
  1165  003F5E  6E54               	movwf	f_mount@path,c
  1166  003F60  0E08               	movlw	high (STR_4+20)
  1167  003F62  6E55               	movwf	f_mount@path+1,c
  1168  003F64  0E01               	movlw	1
  1169  003F66  6E56               	movwf	f_mount@opt,c
  1170  003F68  EC37  F027         	call	_f_mount	;wreg free
  1171  003F6C  0900               	iorlw	0
  1172  003F6E  B4D8               	btfsc	status,2,c
  1173  003F70  D018               	goto	u8670
  1174                           
  1175                           ;Main.c: 25:         Error(1);
  1176  003F72  0E01               	movlw	1
  1177  003F74  EC17  F026         	call	_Error
  1178                           
  1179                           ;Main.c: 26:         __delay_sec(2);
  1180  003F78  0E02               	movlw	2
  1181  003F7A  EC5D  F02A         	call	___delay_sec
  1182                           
  1183                           ;Main.c: 27:         Error(99);
  1184  003F7E  0E63               	movlw	99
  1185  003F80  EC17  F026         	call	_Error
  1186  003F84                     l6335:
  1187                           
  1188                           ;Main.c: 28:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1189  003F84  0ED2               	movlw	low _FatFs
  1190  003F86  6E52               	movwf	f_mount@fs,c
  1191  003F88  0E05               	movlw	high _FatFs
  1192  003F8A  6E53               	movwf	f_mount@fs+1,c
  1193  003F8C  0E15               	movlw	low (STR_4+20)
  1194  003F8E  6E54               	movwf	f_mount@path,c
  1195  003F90  0E08               	movlw	high (STR_4+20)
  1196  003F92  6E55               	movwf	f_mount@path+1,c
  1197  003F94  0E01               	movlw	1
  1198  003F96  6E56               	movwf	f_mount@opt,c
  1199  003F98  EC37  F027         	call	_f_mount	;wreg free
  1200  003F9C  0900               	iorlw	0
  1201  003F9E  A4D8               	btfss	status,2,c
  1202  003FA0  D7F1               	goto	l6335
  1203  003FA2                     u8670:
  1204                           
  1205                           ;Main.c: 33:     Error(2);
  1206  003FA2  0E02               	movlw	2
  1207  003FA4  EC17  F026         	call	_Error
  1208                           
  1209                           ;Main.c: 34:     __delay_sec(2);
  1210  003FA8  0E02               	movlw	2
  1211  003FAA  EC5D  F02A         	call	___delay_sec
  1212                           
  1213                           ;Main.c: 35:     Error(99);
  1214  003FAE  0E63               	movlw	99
  1215  003FB0  EC17  F026         	call	_Error
  1216                           
  1217                           ;Main.c: 37:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1218  003FB4  0ED7               	movlw	low _Fil
  1219  003FB6  0100               	movlb	0	; () banked
  1220  003FB8  6F9A               	movwf	f_open@fp& (0+255),b
  1221  003FBA  0E00               	movlw	high _Fil
  1222  003FBC  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1223  003FBE  0E25               	movlw	low STR_3
  1224  003FC0  6F9C               	movwf	f_open@path& (0+255),b
  1225  003FC2  0E08               	movlw	high STR_3
  1226  003FC4  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1227  003FC6  0E13               	movlw	19
  1228  003FC8  6F9E               	movwf	f_open@mode& (0+255),b
  1229  003FCA  ECE1  F017         	call	_f_open	;wreg free
  1230  003FCE  0900               	iorlw	0
  1231  003FD0  A4D8               	btfss	status,2,c
  1232  003FD2  D05C               	goto	l6379
  1233                           
  1234                           ;Main.c: 38:         Error(3);
  1235  003FD4  0E03               	movlw	3
  1236  003FD6  EC17  F026         	call	_Error
  1237                           
  1238                           ;Main.c: 41:         __delay_sec(2);
  1239  003FDA  0E02               	movlw	2
  1240  003FDC  EC5D  F02A         	call	___delay_sec
  1241                           
  1242                           ;Main.c: 42:          Error(99);
  1243  003FE0  0E63               	movlw	99
  1244  003FE2  EC17  F026         	call	_Error
  1245                           
  1246                           ;Main.c: 44:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1247  003FE6  0100               	movlb	0	; () banked
  1248  003FE8  51E1               	movf	(_Fil+10)& (0+255),w,b
  1249  003FEA  11E2               	iorwf	(_Fil+11)& (0+255),w,b
  1250  003FEC  11E3               	iorwf	(_Fil+12)& (0+255),w,b
  1251  003FEE  11E4               	iorwf	(_Fil+13)& (0+255),w,b
  1252  003FF0  B4D8               	btfsc	status,2,c
  1253  003FF2  D011               	goto	l6357
  1254                           
  1255                           ; BSR set to: 0
  1256  003FF4  0ED7               	movlw	low _Fil
  1257  003FF6  6F6D               	movwf	f_lseek@fp& (0+255),b
  1258  003FF8  0E00               	movlw	high _Fil
  1259  003FFA  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1260  003FFC  C0E1  F06F         	movff	_Fil+10,f_lseek@ofs
  1261  004000  C0E2  F070         	movff	_Fil+11,f_lseek@ofs+1
  1262  004004  C0E3  F071         	movff	_Fil+12,f_lseek@ofs+2
  1263  004008  C0E4  F072         	movff	_Fil+13,f_lseek@ofs+3
  1264  00400C  ECA2  F00C         	call	_f_lseek	;wreg free
  1265  004010  0900               	iorlw	0
  1266  004012  A4D8               	btfss	status,2,c
  1267  004014  D025               	goto	l6371
  1268  004016                     l6357:
  1269                           
  1270                           ;Main.c: 45:                 Error(4);
  1271  004016  0E04               	movlw	4
  1272  004018  EC17  F026         	call	_Error
  1273                           
  1274                           ;Main.c: 46:                 __delay_sec(2);
  1275  00401C  0E02               	movlw	2
  1276  00401E  EC5D  F02A         	call	___delay_sec
  1277                           
  1278                           ;Main.c: 48:                 Error(99);
  1279  004022  0E63               	movlw	99
  1280  004024  EC17  F026         	call	_Error
  1281                           
  1282                           ;Main.c: 49:                 f_write(&Fil, "CREADO POR MI :V .\r\n", 46, &bw);
  1283  004028  0ED7               	movlw	low _Fil
  1284  00402A  0100               	movlb	0	; () banked
  1285  00402C  6F6D               	movwf	f_write@fp& (0+255),b
  1286  00402E  0E00               	movlw	high _Fil
  1287  004030  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1288  004032  0E01               	movlw	low STR_4
  1289  004034  6F6F               	movwf	f_write@buff& (0+255),b
  1290  004036  0E08               	movlw	high STR_4
  1291  004038  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1292  00403A  0E00               	movlw	0
  1293  00403C  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1294  00403E  0E2E               	movlw	46
  1295  004040  6F71               	movwf	f_write@btw& (0+255),b
  1296  004042  0ED0               	movlw	low main@bw
  1297  004044  6F73               	movwf	f_write@bw& (0+255),b
  1298  004046  0E00               	movlw	high main@bw
  1299  004048  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1300  00404A  ECF0  F008         	call	_f_write	;wreg free
  1301                           
  1302                           ;Main.c: 50:                 Error(5);
  1303  00404E  0E05               	movlw	5
  1304  004050  EC17  F026         	call	_Error
  1305                           
  1306                           ;Main.c: 51:                 __delay_sec(2);
  1307  004054  0E02               	movlw	2
  1308  004056  EC5D  F02A         	call	___delay_sec
  1309                           
  1310                           ;Main.c: 52:                  Error(99);
  1311  00405A  0E63               	movlw	99
  1312  00405C  EC17  F026         	call	_Error
  1313  004060                     l6371:
  1314  004060  0ED7               	movlw	low _Fil
  1315  004062  6E4E               	movwf	f_close@fp,c
  1316  004064  0E00               	movlw	high _Fil
  1317  004066  6E4F               	movwf	f_close@fp+1,c
  1318  004068  EC40  F02A         	call	_f_close	;wreg free
  1319                           
  1320                           ;Main.c: 54:                 Error(6);
  1321  00406C  0E06               	movlw	6
  1322  00406E  EC17  F026         	call	_Error
  1323                           
  1324                           ;Main.c: 55:                 __delay_sec(1);
  1325  004072  0E01               	movlw	1
  1326  004074  EC5D  F02A         	call	___delay_sec
  1327                           
  1328                           ;Main.c: 57:                 Error(7);
  1329  004078  0E07               	movlw	7
  1330  00407A  EC17  F026         	call	_Error
  1331                           
  1332                           ;Main.c: 58:                 __delay_sec(2);
  1333  00407E  0E02               	movlw	2
  1334  004080  EC5D  F02A         	call	___delay_sec
  1335                           
  1336                           ;Main.c: 59:                  Error(99);
  1337  004084  0E63               	movlw	99
  1338  004086  EC17  F026         	call	_Error
  1339                           
  1340                           ;Main.c: 61:  }
  1341  00408A  D003               	goto	l57
  1342  00408C                     l6379:
  1343                           
  1344                           ;Main.c: 63:         Error(11);
  1345  00408C  0E0B               	movlw	11
  1346  00408E  EC17  F026         	call	_Error
  1347  004092                     l57:
  1348                           
  1349                           ;Main.c: 67:     {;Main.c: 68:         Error(15);
  1350  004092  0E0F               	movlw	15
  1351  004094  EC17  F026         	call	_Error
  1352                           
  1353                           ;Main.c: 69:  __delay_sec(5);
  1354  004098  0E05               	movlw	5
  1355  00409A  EC5D  F02A         	call	___delay_sec
  1356                           
  1357                           ;Main.c: 70:  Error(99);
  1358  00409E  0E63               	movlw	99
  1359  0040A0  EC17  F026         	call	_Error
  1360                           
  1361                           ;Main.c: 71:   __delay_sec(10);
  1362  0040A4  0E0A               	movlw	10
  1363  0040A6  EC5D  F02A         	call	___delay_sec
  1364  0040AA  D7F3               	goto	l57
  1365  0040AC                     __end_of_main:
  1366                           	opt callstack 0
  1367                           
  1368 ;; *************** function _f_write *****************
  1369 ;; Defined at:
  1370 ;;		line 2691 in file "ff.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  fp              2   13[BANK0 ] PTR struct .
  1373 ;;		 -> Fil(32), 
  1374 ;;  buff            2   15[BANK0 ] PTR const void 
  1375 ;;		 -> STR_4(21), 
  1376 ;;  btw             2   17[BANK0 ] unsigned short 
  1377 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1378 ;;		 -> main@bw(2), 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  clst            4   43[BANK0 ] unsigned long 
  1381 ;;  sect            4   39[BANK0 ] unsigned long 
  1382 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1383 ;;  cc              2   37[BANK0 ] unsigned short 
  1384 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1385 ;;		 -> STR_4(21), 
  1386 ;;  csect           1   36[BANK0 ] unsigned char 
  1387 ;;  res             1   33[BANK0 ] enum E93
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      enum E4918
  1390 ;; Registers used:
  1391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1397 ;;      Params:         0       8       0       0       0       0       0       0       0
  1398 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1399 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1400 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1401 ;;Total ram usage:       36 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:   10
  1404 ;; This function calls:
  1405 ;;		_clust2sect
  1406 ;;		_create_chain
  1407 ;;		_disk_write
  1408 ;;		_mem_cpy
  1409 ;;		_move_window
  1410 ;;		_sync_window
  1411 ;;		_validate
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text1
  1418  0011E0                     __ptext1:
  1419                           	opt callstack 0
  1420  0011E0                     _f_write:
  1421                           	opt callstack 20
  1422                           
  1423                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1424                           
  1425                           ;incstack = 0
  1426  0011E0  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1427  0011E4  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1428                           
  1429                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1430  0011E8  C073  FFD9         	movff	f_write@bw,fsr2l
  1431  0011EC  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1432  0011F0  0E00               	movlw	0
  1433  0011F2  6EDE               	movwf	postinc2,c
  1434  0011F4  0E00               	movlw	0
  1435  0011F6  6EDD               	movwf	postdec2,c
  1436                           
  1437                           ;ff.c: 2707:  res = validate(fp);
  1438  0011F8  C06D  F002         	movff	f_write@fp,validate@obj
  1439  0011FC  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1440  001200  ECE2  F027         	call	_validate	;wreg free
  1441  001204  0100               	movlb	0	; () banked
  1442  001206  6F81               	movwf	f_write@res& (0+255),b
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1446  001208  5181               	movf	f_write@res& (0+255),w,b
  1447  00120A  A4D8               	btfss	status,2,c
  1448  00120C  0012               	return	
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;ff.c: 2709:  if (fp->err)
  1452  00120E  EE20 F005          	lfsr	2,5
  1453  001212  516D               	movf	f_write@fp& (0+255),w,b
  1454  001214  26D9               	addwf	fsr2l,f,c
  1455  001216  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1456  001218  22DA               	addwfc	fsr2h,f,c
  1457  00121A  50DF               	movf	indf2,w,c
  1458  00121C  A4D8               	btfss	status,2,c
  1459  00121E  0012               	return	
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1463  001220  EE20 F004          	lfsr	2,4
  1464  001224  516D               	movf	f_write@fp& (0+255),w,b
  1465  001226  26D9               	addwf	fsr2l,f,c
  1466  001228  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1467  00122A  22DA               	addwfc	fsr2h,f,c
  1468  00122C  A2DF               	btfss	indf2,1,c
  1469  00122E  0012               	return	
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1473  001230  EE20 F006          	lfsr	2,6
  1474  001234  516D               	movf	f_write@fp& (0+255),w,b
  1475  001236  26D9               	addwf	fsr2l,f,c
  1476  001238  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1477  00123A  22DA               	addwfc	fsr2h,f,c
  1478  00123C  EE10 F006          	lfsr	1,6
  1479  001240  516D               	movf	f_write@fp& (0+255),w,b
  1480  001242  26E1               	addwf	fsr1l,f,c
  1481  001244  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1482  001246  22E2               	addwfc	fsr1h,f,c
  1483  001248  CFE6 F079          	movff	postinc1,??_f_write+4
  1484  00124C  CFE6 F07A          	movff	postinc1,??_f_write+5
  1485  001250  CFE6 F07B          	movff	postinc1,??_f_write+6
  1486  001254  CFE6 F07C          	movff	postinc1,??_f_write+7
  1487  001258  5171               	movf	f_write@btw& (0+255),w,b
  1488  00125A  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1489  00125C  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1490  00125E  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1491  001260  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1492  001262  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1493  001264  0E00               	movlw	0
  1494  001266  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1495  001268  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1496  00126A  0E00               	movlw	0
  1497  00126C  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1498  00126E  6F80               	movwf	(??_f_write+11)& (0+255),b
  1499  001270  50DE               	movf	postinc2,w,c
  1500  001272  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1501  001274  50DE               	movf	postinc2,w,c
  1502  001276  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1503  001278  50DE               	movf	postinc2,w,c
  1504  00127A  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1505  00127C  50DE               	movf	postinc2,w,c
  1506  00127E  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1507  001280  B0D8               	btfsc	status,0,c
  1508  001282  D329               	goto	l6301
  1509                           
  1510                           ; BSR set to: 0
  1511  001284  0E00               	movlw	0
  1512  001286  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1513  001288  0E00               	movlw	0
  1514  00128A  6F71               	movwf	f_write@btw& (0+255),b
  1515  00128C  D324               	goto	l6301
  1516  00128E                     l6193:
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1520  00128E  EE20 F006          	lfsr	2,6
  1521  001292  516D               	movf	f_write@fp& (0+255),w,b
  1522  001294  26D9               	addwf	fsr2l,f,c
  1523  001296  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1524  001298  22DA               	addwfc	fsr2h,f,c
  1525  00129A  0EFF               	movlw	255
  1526  00129C  14DE               	andwf	postinc2,w,c
  1527  00129E  6F75               	movwf	??_f_write& (0+255),b
  1528  0012A0  0E01               	movlw	1
  1529  0012A2  14DE               	andwf	postinc2,w,c
  1530  0012A4  6F76               	movwf	(??_f_write+1)& (0+255),b
  1531  0012A6  0E00               	movlw	0
  1532  0012A8  14DE               	andwf	postinc2,w,c
  1533  0012AA  6F77               	movwf	(??_f_write+2)& (0+255),b
  1534  0012AC  0E00               	movlw	0
  1535  0012AE  14DE               	andwf	postinc2,w,c
  1536  0012B0  6F78               	movwf	(??_f_write+3)& (0+255),b
  1537  0012B2  5175               	movf	??_f_write& (0+255),w,b
  1538  0012B4  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1539  0012B6  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1540  0012B8  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1541  0012BA  A4D8               	btfss	status,2,c
  1542  0012BC  D26A               	goto	l6277
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1546  0012BE  EE20 F006          	lfsr	2,6
  1547  0012C2  516D               	movf	f_write@fp& (0+255),w,b
  1548  0012C4  26D9               	addwf	fsr2l,f,c
  1549  0012C6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1550  0012C8  22DA               	addwfc	fsr2h,f,c
  1551  0012CA  CFDE F075          	movff	postinc2,??_f_write
  1552  0012CE  CFDE F076          	movff	postinc2,??_f_write+1
  1553  0012D2  CFDE F077          	movff	postinc2,??_f_write+2
  1554  0012D6  CFDE F078          	movff	postinc2,??_f_write+3
  1555  0012DA  0E0A               	movlw	10
  1556  0012DC  D005               	goto	u8400
  1557  0012DE                     u8405:
  1558  0012DE  90D8               	bcf	status,0,c
  1559  0012E0  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1560  0012E2  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1561  0012E4  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1562  0012E6  3375               	rrcf	??_f_write& (0+255),f,b
  1563  0012E8                     u8400:
  1564  0012E8  2EE8               	decfsz	wreg,f,c
  1565  0012EA  D7F9               	goto	u8405
  1566  0012EC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1567  0012F0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1568  0012F4  EE10 F002          	lfsr	1,2
  1569  0012F8  50DE               	movf	postinc2,w,c
  1570  0012FA  26E1               	addwf	fsr1l,f,c
  1571  0012FC  50DD               	movf	postdec2,w,c
  1572  0012FE  22E2               	addwfc	fsr1h,f,c
  1573  001300  50E7               	movf	indf1,w,c
  1574  001302  6F79               	movwf	(??_f_write+4)& (0+255),b
  1575  001304  0579               	decf	(??_f_write+4)& (0+255),w,b
  1576  001306  1575               	andwf	??_f_write& (0+255),w,b
  1577  001308  6F84               	movwf	f_write@csect& (0+255),b
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;ff.c: 2719:    if (!csect) {
  1581  00130A  5184               	movf	f_write@csect& (0+255),w,b
  1582  00130C  A4D8               	btfss	status,2,c
  1583  00130E  D0A3               	goto	l6229
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1587  001310  EE20 F006          	lfsr	2,6
  1588  001314  516D               	movf	f_write@fp& (0+255),w,b
  1589  001316  26D9               	addwf	fsr2l,f,c
  1590  001318  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1591  00131A  22DA               	addwfc	fsr2h,f,c
  1592  00131C  50DE               	movf	postinc2,w,c
  1593  00131E  10DE               	iorwf	postinc2,w,c
  1594  001320  10DE               	iorwf	postinc2,w,c
  1595  001322  10DE               	iorwf	postinc2,w,c
  1596  001324  A4D8               	btfss	status,2,c
  1597  001326  D027               	goto	l6207
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;ff.c: 2721:      clst = fp->sclust;
  1601  001328  EE20 F00E          	lfsr	2,14
  1602  00132C  516D               	movf	f_write@fp& (0+255),w,b
  1603  00132E  26D9               	addwf	fsr2l,f,c
  1604  001330  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1605  001332  22DA               	addwfc	fsr2h,f,c
  1606  001334  CFDE F08B          	movff	postinc2,f_write@clst
  1607  001338  CFDE F08C          	movff	postinc2,f_write@clst+1
  1608  00133C  CFDE F08D          	movff	postinc2,f_write@clst+2
  1609  001340  CFDE F08E          	movff	postinc2,f_write@clst+3
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;ff.c: 2722:      if (clst == 0)
  1613  001344  518B               	movf	f_write@clst& (0+255),w,b
  1614  001346  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1615  001348  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1616  00134A  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1617  00134C  A4D8               	btfss	status,2,c
  1618  00134E  D033               	goto	l6209
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1622  001350  C06D  FFD9         	movff	f_write@fp,fsr2l
  1623  001354  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1624  001358  CFDE F056          	movff	postinc2,create_chain@fs
  1625  00135C  CFDD F057          	movff	postdec2,create_chain@fs+1
  1626  001360  0E00               	movlw	0
  1627  001362  6E58               	movwf	create_chain@clst,c
  1628  001364  0E00               	movlw	0
  1629  001366  6E59               	movwf	create_chain@clst+1,c
  1630  001368  0E00               	movlw	0
  1631  00136A  6E5A               	movwf	create_chain@clst+2,c
  1632  00136C  0E00               	movlw	0
  1633  00136E  6E5B               	movwf	create_chain@clst+3,c
  1634  001370  ECAC  F019         	call	_create_chain	;wreg free
  1635  001374  D018               	goto	L1
  1636  001376                     l6207:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1640  001376  C06D  FFD9         	movff	f_write@fp,fsr2l
  1641  00137A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1642  00137E  CFDE F056          	movff	postinc2,create_chain@fs
  1643  001382  CFDD F057          	movff	postdec2,create_chain@fs+1
  1644  001386  EE20 F012          	lfsr	2,18
  1645  00138A  516D               	movf	f_write@fp& (0+255),w,b
  1646  00138C  26D9               	addwf	fsr2l,f,c
  1647  00138E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1648  001390  22DA               	addwfc	fsr2h,f,c
  1649  001392  CFDE F058          	movff	postinc2,create_chain@clst
  1650  001396  CFDE F059          	movff	postinc2,create_chain@clst+1
  1651  00139A  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1652  00139E  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1653  0013A2  ECAC  F019         	call	_create_chain	;wreg free
  1654  0013A6                     L1:
  1655  0013A6  C056  F08B         	movff	?_create_chain,f_write@clst
  1656  0013AA  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1657  0013AE  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1658  0013B2  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1659  0013B6                     l6209:
  1660                           
  1661                           ;ff.c: 2732:     if (clst == 0) break;
  1662  0013B6  0100               	movlb	0	; () banked
  1663  0013B8  518B               	movf	f_write@clst& (0+255),w,b
  1664  0013BA  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1665  0013BC  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1666  0013BE  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1667  0013C0  B4D8               	btfsc	status,2,c
  1668  0013C2  D28D               	goto	u8620
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1672  0013C4  058B               	decf	f_write@clst& (0+255),w,b
  1673  0013C6  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1674  0013C8  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1675  0013CA  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1676  0013CC  A4D8               	btfss	status,2,c
  1677  0013CE  D009               	goto	l6219
  1678                           
  1679                           ; BSR set to: 0
  1680  0013D0  EE20 F005          	lfsr	2,5
  1681  0013D4  516D               	movf	f_write@fp& (0+255),w,b
  1682  0013D6  26D9               	addwf	fsr2l,f,c
  1683  0013D8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1684  0013DA  22DA               	addwfc	fsr2h,f,c
  1685  0013DC  0E02               	movlw	2
  1686  0013DE  6EDF               	movwf	indf2,c
  1687  0013E0  0012               	return	
  1688  0013E2                     l6219:
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1692  0013E2  298B               	incf	f_write@clst& (0+255),w,b
  1693  0013E4  E110               	bnz	l6225
  1694  0013E6  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1695  0013E8  E10E               	bnz	l6225
  1696  0013EA  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1697  0013EC  E10C               	bnz	l6225
  1698  0013EE  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1699  0013F0  A4D8               	btfss	status,2,c
  1700  0013F2  D009               	goto	l6225
  1701                           
  1702                           ; BSR set to: 0
  1703  0013F4  EE20 F005          	lfsr	2,5
  1704  0013F8  516D               	movf	f_write@fp& (0+255),w,b
  1705  0013FA  26D9               	addwf	fsr2l,f,c
  1706  0013FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1707  0013FE  22DA               	addwfc	fsr2h,f,c
  1708  001400  0E01               	movlw	1
  1709  001402  6EDF               	movwf	indf2,c
  1710  001404  0012               	return	
  1711  001406                     l6225:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;ff.c: 2735:     fp->clust = clst;
  1715  001406  EE20 F012          	lfsr	2,18
  1716  00140A  516D               	movf	f_write@fp& (0+255),w,b
  1717  00140C  26D9               	addwf	fsr2l,f,c
  1718  00140E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1719  001410  22DA               	addwfc	fsr2h,f,c
  1720  001412  C08B  FFDE         	movff	f_write@clst,postinc2
  1721  001416  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1722  00141A  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1723  00141E  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1724                           
  1725                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1726  001422  EE20 F00E          	lfsr	2,14
  1727  001426  516D               	movf	f_write@fp& (0+255),w,b
  1728  001428  26D9               	addwf	fsr2l,f,c
  1729  00142A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1730  00142C  22DA               	addwfc	fsr2h,f,c
  1731  00142E  50DE               	movf	postinc2,w,c
  1732  001430  10DE               	iorwf	postinc2,w,c
  1733  001432  10DE               	iorwf	postinc2,w,c
  1734  001434  10DE               	iorwf	postinc2,w,c
  1735  001436  A4D8               	btfss	status,2,c
  1736  001438  D00E               	goto	l6229
  1737                           
  1738                           ; BSR set to: 0
  1739  00143A  EE20 F00E          	lfsr	2,14
  1740  00143E  516D               	movf	f_write@fp& (0+255),w,b
  1741  001440  26D9               	addwf	fsr2l,f,c
  1742  001442  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1743  001444  22DA               	addwfc	fsr2h,f,c
  1744  001446  C08B  FFDE         	movff	f_write@clst,postinc2
  1745  00144A  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1746  00144E  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1747  001452  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1748  001456                     l6229:
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1752  001456  EE20 F016          	lfsr	2,22
  1753  00145A  516D               	movf	f_write@fp& (0+255),w,b
  1754  00145C  26D9               	addwf	fsr2l,f,c
  1755  00145E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1756  001460  22DA               	addwfc	fsr2h,f,c
  1757  001462  C06D  FFE1         	movff	f_write@fp,fsr1l
  1758  001466  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1759  00146A  EE00 F02A          	lfsr	0,42
  1760  00146E  50E6               	movf	postinc1,w,c
  1761  001470  26E9               	addwf	fsr0l,f,c
  1762  001472  50E5               	movf	postdec1,w,c
  1763  001474  22EA               	addwfc	fsr0h,f,c
  1764  001476  50DE               	movf	postinc2,w,c
  1765  001478  18EE               	xorwf	postinc0,w,c
  1766  00147A  E121               	bnz	l6237
  1767  00147C  50DE               	movf	postinc2,w,c
  1768  00147E  18EE               	xorwf	postinc0,w,c
  1769  001480  E11E               	bnz	l6237
  1770  001482  50DE               	movf	postinc2,w,c
  1771  001484  18EE               	xorwf	postinc0,w,c
  1772  001486  E11B               	bnz	l6237
  1773  001488  50DE               	movf	postinc2,w,c
  1774  00148A  18EE               	xorwf	postinc0,w,c
  1775  00148C  A4D8               	btfss	status,2,c
  1776  00148E  D017               	goto	l6237
  1777                           
  1778                           ; BSR set to: 0
  1779  001490  C06D  FFD9         	movff	f_write@fp,fsr2l
  1780  001494  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1781  001498  CFDE F01B          	movff	postinc2,sync_window@fs
  1782  00149C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1783  0014A0  EC56  F020         	call	_sync_window	;wreg free
  1784  0014A4  0900               	iorlw	0
  1785  0014A6  B4D8               	btfsc	status,2,c
  1786  0014A8  D00A               	goto	l6237
  1787                           
  1788                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1789  0014AA  0100               	movlb	0	; () banked
  1790  0014AC  EE20 F005          	lfsr	2,5
  1791  0014B0  516D               	movf	f_write@fp& (0+255),w,b
  1792  0014B2  26D9               	addwf	fsr2l,f,c
  1793  0014B4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1794  0014B6  22DA               	addwfc	fsr2h,f,c
  1795  0014B8  0E01               	movlw	1
  1796  0014BA  6EDF               	movwf	indf2,c
  1797  0014BC  0012               	return	
  1798  0014BE                     l6237:
  1799                           
  1800                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1801  0014BE  C06D  FFD9         	movff	f_write@fp,fsr2l
  1802  0014C2  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1803  0014C6  CFDE F00D          	movff	postinc2,clust2sect@fs
  1804  0014CA  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1805  0014CE  0100               	movlb	0	; () banked
  1806  0014D0  EE20 F012          	lfsr	2,18
  1807  0014D4  516D               	movf	f_write@fp& (0+255),w,b
  1808  0014D6  26D9               	addwf	fsr2l,f,c
  1809  0014D8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1810  0014DA  22DA               	addwfc	fsr2h,f,c
  1811  0014DC  CFDE F00F          	movff	postinc2,clust2sect@clst
  1812  0014E0  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1813  0014E4  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1814  0014E8  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1815  0014EC  ECDA  F026         	call	_clust2sect	;wreg free
  1816  0014F0  C00D  F087         	movff	?_clust2sect,f_write@sect
  1817  0014F4  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1818  0014F8  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1819  0014FC  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1820                           
  1821                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1822  001500  0100               	movlb	0	; () banked
  1823  001502  5187               	movf	f_write@sect& (0+255),w,b
  1824  001504  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1825  001506  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1826  001508  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1827  00150A  A4D8               	btfss	status,2,c
  1828  00150C  D009               	goto	l6245
  1829                           
  1830                           ; BSR set to: 0
  1831  00150E  EE20 F005          	lfsr	2,5
  1832  001512  516D               	movf	f_write@fp& (0+255),w,b
  1833  001514  26D9               	addwf	fsr2l,f,c
  1834  001516  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1835  001518  22DA               	addwfc	fsr2h,f,c
  1836  00151A  0E02               	movlw	2
  1837  00151C  6EDF               	movwf	indf2,c
  1838  00151E  0012               	return	
  1839  001520                     l6245:
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;ff.c: 2750:    sect += csect;
  1843  001520  5184               	movf	f_write@csect& (0+255),w,b
  1844  001522  2787               	addwf	f_write@sect& (0+255),f,b
  1845  001524  0E00               	movlw	0
  1846  001526  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1847  001528  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1848  00152A  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1849                           
  1850                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1851  00152C  C071  F075         	movff	f_write@btw,??_f_write
  1852  001530  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1853  001534  0E09               	movlw	9
  1854  001536  6F77               	movwf	(??_f_write+2)& (0+255),b
  1855  001538                     u8515:
  1856  001538  90D8               	bcf	status,0,c
  1857  00153A  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1858  00153C  3375               	rrcf	??_f_write& (0+255),f,b
  1859  00153E  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1860  001540  D7FB               	goto	u8515
  1861  001542  C075  F085         	movff	??_f_write,f_write@cc
  1862  001546  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1863                           
  1864                           ;ff.c: 2752:    if (cc) {
  1865  00154A  5185               	movf	f_write@cc& (0+255),w,b
  1866  00154C  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1867  00154E  B4D8               	btfsc	status,2,c
  1868  001550  D0D2               	goto	l6265
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1872  001552  5184               	movf	f_write@csect& (0+255),w,b
  1873  001554  2585               	addwf	f_write@cc& (0+255),w,b
  1874  001556  6F75               	movwf	??_f_write& (0+255),b
  1875  001558  0E00               	movlw	0
  1876  00155A  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1877  00155C  6F76               	movwf	(??_f_write+1)& (0+255),b
  1878  00155E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1879  001562  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1880  001566  EE10 F002          	lfsr	1,2
  1881  00156A  50DE               	movf	postinc2,w,c
  1882  00156C  26E1               	addwf	fsr1l,f,c
  1883  00156E  50DD               	movf	postdec2,w,c
  1884  001570  22E2               	addwfc	fsr1h,f,c
  1885  001572  50E7               	movf	indf1,w,c
  1886  001574  6F77               	movwf	(??_f_write+2)& (0+255),b
  1887  001576  6B78               	clrf	(??_f_write+3)& (0+255),b
  1888  001578  5175               	movf	??_f_write& (0+255),w,b
  1889  00157A  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1890  00157C  5176               	movf	(??_f_write+1)& (0+255),w,b
  1891  00157E  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1892  001580  B0D8               	btfsc	status,0,c
  1893  001582  D012               	goto	l6251
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  1897  001584  C06D  FFD9         	movff	f_write@fp,fsr2l
  1898  001588  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1899  00158C  EE10 F002          	lfsr	1,2
  1900  001590  50DE               	movf	postinc2,w,c
  1901  001592  26E1               	addwf	fsr1l,f,c
  1902  001594  50DD               	movf	postdec2,w,c
  1903  001596  22E2               	addwfc	fsr1h,f,c
  1904  001598  50E7               	movf	indf1,w,c
  1905  00159A  6F75               	movwf	??_f_write& (0+255),b
  1906  00159C  5184               	movf	f_write@csect& (0+255),w,b
  1907  00159E  5D75               	subwf	??_f_write& (0+255),w,b
  1908  0015A0  6F85               	movwf	f_write@cc& (0+255),b
  1909  0015A2  6B86               	clrf	(f_write@cc+1)& (0+255),b
  1910  0015A4  A0D8               	btfss	status,0,c
  1911  0015A6  0786               	decf	(f_write@cc+1)& (0+255),f,b
  1912  0015A8                     l6251:
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  1916  0015A8  C082  F011         	movff	f_write@wbuff,disk_write@buff
  1917  0015AC  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  1918  0015B0  C087  F013         	movff	f_write@sect,disk_write@sector
  1919  0015B4  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  1920  0015B8  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  1921  0015BC  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  1922  0015C0  C085  F017         	movff	f_write@cc,disk_write@count
  1923  0015C4  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  1924  0015C8  C06D  FFD9         	movff	f_write@fp,fsr2l
  1925  0015CC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1926  0015D0  EE10 F001          	lfsr	1,1
  1927  0015D4  50DE               	movf	postinc2,w,c
  1928  0015D6  26E1               	addwf	fsr1l,f,c
  1929  0015D8  50DD               	movf	postdec2,w,c
  1930  0015DA  22E2               	addwfc	fsr1h,f,c
  1931  0015DC  50E7               	movf	indf1,w,c
  1932  0015DE  ECEB  F022         	call	_disk_write
  1933  0015E2  0900               	iorlw	0
  1934  0015E4  B4D8               	btfsc	status,2,c
  1935  0015E6  D00A               	goto	l6257
  1936                           
  1937                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1938  0015E8  0100               	movlb	0	; () banked
  1939  0015EA  EE20 F005          	lfsr	2,5
  1940  0015EE  516D               	movf	f_write@fp& (0+255),w,b
  1941  0015F0  26D9               	addwf	fsr2l,f,c
  1942  0015F2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1943  0015F4  22DA               	addwfc	fsr2h,f,c
  1944  0015F6  0E01               	movlw	1
  1945  0015F8  6EDF               	movwf	indf2,c
  1946  0015FA  0012               	return	
  1947  0015FC                     l6257:
  1948                           
  1949                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  1950  0015FC  0100               	movlb	0	; () banked
  1951  0015FE  5185               	movf	f_write@cc& (0+255),w,b
  1952  001600  6F75               	movwf	??_f_write& (0+255),b
  1953  001602  5186               	movf	(f_write@cc+1)& (0+255),w,b
  1954  001604  6F76               	movwf	(??_f_write+1)& (0+255),b
  1955  001606  6B77               	clrf	(??_f_write+2)& (0+255),b
  1956  001608  6B78               	clrf	(??_f_write+3)& (0+255),b
  1957  00160A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1958  00160E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1959  001612  EE10 F02A          	lfsr	1,42
  1960  001616  50DE               	movf	postinc2,w,c
  1961  001618  26E1               	addwf	fsr1l,f,c
  1962  00161A  50DD               	movf	postdec2,w,c
  1963  00161C  22E2               	addwfc	fsr1h,f,c
  1964  00161E  CFE6 F079          	movff	postinc1,??_f_write+4
  1965  001622  CFE6 F07A          	movff	postinc1,??_f_write+5
  1966  001626  CFE6 F07B          	movff	postinc1,??_f_write+6
  1967  00162A  CFE6 F07C          	movff	postinc1,??_f_write+7
  1968  00162E  5187               	movf	f_write@sect& (0+255),w,b
  1969  001630  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  1970  001632  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1971  001634  5188               	movf	(f_write@sect+1)& (0+255),w,b
  1972  001636  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  1973  001638  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1974  00163A  5189               	movf	(f_write@sect+2)& (0+255),w,b
  1975  00163C  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  1976  00163E  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1977  001640  518A               	movf	(f_write@sect+3)& (0+255),w,b
  1978  001642  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  1979  001644  6F80               	movwf	(??_f_write+11)& (0+255),b
  1980  001646  5175               	movf	??_f_write& (0+255),w,b
  1981  001648  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1982  00164A  5176               	movf	(??_f_write+1)& (0+255),w,b
  1983  00164C  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1984  00164E  5177               	movf	(??_f_write+2)& (0+255),w,b
  1985  001650  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1986  001652  5178               	movf	(??_f_write+3)& (0+255),w,b
  1987  001654  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1988  001656  B0D8               	btfsc	status,0,c
  1989  001658  D03E               	goto	l6263
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  1993  00165A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1994  00165E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1995  001662  CFDE F075          	movff	postinc2,??_f_write
  1996  001666  CFDD F076          	movff	postdec2,??_f_write+1
  1997  00166A  0E2E               	movlw	46
  1998  00166C  2575               	addwf	??_f_write& (0+255),w,b
  1999  00166E  6E01               	movwf	mem_cpy@dst,c
  2000  001670  0E00               	movlw	0
  2001  001672  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2002  001674  6E02               	movwf	mem_cpy@dst+1,c
  2003  001676  C06D  FFD9         	movff	f_write@fp,fsr2l
  2004  00167A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2005  00167E  EE10 F02A          	lfsr	1,42
  2006  001682  50DE               	movf	postinc2,w,c
  2007  001684  26E1               	addwf	fsr1l,f,c
  2008  001686  50DD               	movf	postdec2,w,c
  2009  001688  22E2               	addwfc	fsr1h,f,c
  2010  00168A  CFE6 F077          	movff	postinc1,??_f_write+2
  2011  00168E  CFE5 F078          	movff	postdec1,??_f_write+3
  2012  001692  5187               	movf	f_write@sect& (0+255),w,b
  2013  001694  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2014  001696  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2015  001698  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2016  00169A  0E09               	movlw	9
  2017  00169C                     u8565:
  2018  00169C  90D8               	bcf	status,0,c
  2019  00169E  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2020  0016A0  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2021  0016A2  2EE8               	decfsz	wreg,f,c
  2022  0016A4  D7FB               	goto	u8565
  2023  0016A6  5177               	movf	(??_f_write+2)& (0+255),w,b
  2024  0016A8  2582               	addwf	f_write@wbuff& (0+255),w,b
  2025  0016AA  6E03               	movwf	mem_cpy@src,c
  2026  0016AC  5178               	movf	(??_f_write+3)& (0+255),w,b
  2027  0016AE  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2028  0016B0  6E04               	movwf	mem_cpy@src+1,c
  2029  0016B2  0E02               	movlw	2
  2030  0016B4  6E06               	movwf	mem_cpy@cnt+1,c
  2031  0016B6  0E00               	movlw	0
  2032  0016B8  6E05               	movwf	mem_cpy@cnt,c
  2033  0016BA  EC7D  F026         	call	_mem_cpy	;wreg free
  2034                           
  2035                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2036  0016BE  C06D  FFD9         	movff	f_write@fp,fsr2l
  2037  0016C2  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2038  0016C6  EE10 F004          	lfsr	1,4
  2039  0016CA  50DE               	movf	postinc2,w,c
  2040  0016CC  26E1               	addwf	fsr1l,f,c
  2041  0016CE  50DD               	movf	postdec2,w,c
  2042  0016D0  22E2               	addwfc	fsr1h,f,c
  2043  0016D2  0E00               	movlw	0
  2044  0016D4  6EE7               	movwf	indf1,c
  2045  0016D6                     l6263:
  2046                           
  2047                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2048  0016D6  C085  F075         	movff	f_write@cc,??_f_write
  2049  0016DA  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2050  0016DE  0E09               	movlw	9
  2051  0016E0                     u8575:
  2052  0016E0  90D8               	bcf	status,0,c
  2053  0016E2  0100               	movlb	0	; () banked
  2054  0016E4  3775               	rlcf	??_f_write& (0+255),f,b
  2055  0016E6  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2056  0016E8  2EE8               	decfsz	wreg,f,c
  2057  0016EA  D7FA               	goto	u8575
  2058  0016EC  C075  F08F         	movff	??_f_write,f_write@wcnt
  2059  0016F0  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2060                           
  2061                           ;ff.c: 2771:     continue;
  2062  0016F4  D0D2               	goto	l6293
  2063  0016F6                     l6265:
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2067  0016F6  EE20 F00A          	lfsr	2,10
  2068  0016FA  516D               	movf	f_write@fp& (0+255),w,b
  2069  0016FC  26D9               	addwf	fsr2l,f,c
  2070  0016FE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2071  001700  22DA               	addwfc	fsr2h,f,c
  2072  001702  EE10 F006          	lfsr	1,6
  2073  001706  516D               	movf	f_write@fp& (0+255),w,b
  2074  001708  26E1               	addwf	fsr1l,f,c
  2075  00170A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2076  00170C  22E2               	addwfc	fsr1h,f,c
  2077  00170E  50DE               	movf	postinc2,w,c
  2078  001710  5CE6               	subwf	postinc1,w,c
  2079  001712  50DE               	movf	postinc2,w,c
  2080  001714  58E6               	subwfb	postinc1,w,c
  2081  001716  50DE               	movf	postinc2,w,c
  2082  001718  58E6               	subwfb	postinc1,w,c
  2083  00171A  50DE               	movf	postinc2,w,c
  2084  00171C  58E6               	subwfb	postinc1,w,c
  2085  00171E  A0D8               	btfss	status,0,c
  2086  001720  D029               	goto	l6275
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2090  001722  C06D  FFD9         	movff	f_write@fp,fsr2l
  2091  001726  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2092  00172A  CFDE F01B          	movff	postinc2,sync_window@fs
  2093  00172E  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2094  001732  EC56  F020         	call	_sync_window	;wreg free
  2095  001736  0900               	iorlw	0
  2096  001738  B4D8               	btfsc	status,2,c
  2097  00173A  D00A               	goto	l6273
  2098  00173C  0100               	movlb	0	; () banked
  2099  00173E  EE20 F005          	lfsr	2,5
  2100  001742  516D               	movf	f_write@fp& (0+255),w,b
  2101  001744  26D9               	addwf	fsr2l,f,c
  2102  001746  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2103  001748  22DA               	addwfc	fsr2h,f,c
  2104  00174A  0E01               	movlw	1
  2105  00174C  6EDF               	movwf	indf2,c
  2106  00174E  0012               	return	
  2107  001750                     l6273:
  2108                           
  2109                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2110  001750  C06D  FFD9         	movff	f_write@fp,fsr2l
  2111  001754  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2112  001758  EE10 F02A          	lfsr	1,42
  2113  00175C  50DE               	movf	postinc2,w,c
  2114  00175E  26E1               	addwf	fsr1l,f,c
  2115  001760  50DD               	movf	postdec2,w,c
  2116  001762  22E2               	addwfc	fsr1h,f,c
  2117  001764  C087  FFE6         	movff	f_write@sect,postinc1
  2118  001768  C088  FFE6         	movff	f_write@sect+1,postinc1
  2119  00176C  C089  FFE6         	movff	f_write@sect+2,postinc1
  2120  001770  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2121  001774                     l6275:
  2122                           
  2123                           ;ff.c: 2785:    fp->dsect = sect;
  2124  001774  0100               	movlb	0	; () banked
  2125  001776  EE20 F016          	lfsr	2,22
  2126  00177A  516D               	movf	f_write@fp& (0+255),w,b
  2127  00177C  26D9               	addwf	fsr2l,f,c
  2128  00177E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2129  001780  22DA               	addwfc	fsr2h,f,c
  2130  001782  C087  FFDE         	movff	f_write@sect,postinc2
  2131  001786  C088  FFDE         	movff	f_write@sect+1,postinc2
  2132  00178A  C089  FFDE         	movff	f_write@sect+2,postinc2
  2133  00178E  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2134  001792                     l6277:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2138  001792  0EFF               	movlw	255
  2139  001794  6F75               	movwf	??_f_write& (0+255),b
  2140  001796  0E01               	movlw	1
  2141  001798  6F76               	movwf	(??_f_write+1)& (0+255),b
  2142  00179A  EE20 F006          	lfsr	2,6
  2143  00179E  516D               	movf	f_write@fp& (0+255),w,b
  2144  0017A0  26D9               	addwf	fsr2l,f,c
  2145  0017A2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2146  0017A4  22DA               	addwfc	fsr2h,f,c
  2147  0017A6  CFDE F077          	movff	postinc2,??_f_write+2
  2148  0017AA  CFDD F078          	movff	postdec2,??_f_write+3
  2149  0017AE  5175               	movf	??_f_write& (0+255),w,b
  2150  0017B0  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2151  0017B2  5176               	movf	(??_f_write+1)& (0+255),w,b
  2152  0017B4  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2153  0017B6  5177               	movf	(??_f_write+2)& (0+255),w,b
  2154  0017B8  0800               	sublw	0
  2155  0017BA  6F8F               	movwf	f_write@wcnt& (0+255),b
  2156  0017BC  5178               	movf	(??_f_write+3)& (0+255),w,b
  2157  0017BE  A0D8               	btfss	status,0,c
  2158  0017C0  2AE8               	incf	wreg,f,c
  2159  0017C2  0802               	sublw	2
  2160  0017C4  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2164  0017C6  518F               	movf	f_write@wcnt& (0+255),w,b
  2165  0017C8  5D71               	subwf	f_write@btw& (0+255),w,b
  2166  0017CA  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2167  0017CC  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2168  0017CE  B0D8               	btfsc	status,0,c
  2169  0017D0  D004               	goto	l6283
  2170                           
  2171                           ; BSR set to: 0
  2172  0017D2  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2173  0017D6  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2174  0017DA                     l6283:
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2178  0017DA  C06D  FFD9         	movff	f_write@fp,fsr2l
  2179  0017DE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2180  0017E2  CFDE F030          	movff	postinc2,move_window@fs
  2181  0017E6  CFDD F031          	movff	postdec2,move_window@fs+1
  2182  0017EA  EE20 F016          	lfsr	2,22
  2183  0017EE  516D               	movf	f_write@fp& (0+255),w,b
  2184  0017F0  26D9               	addwf	fsr2l,f,c
  2185  0017F2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2186  0017F4  22DA               	addwfc	fsr2h,f,c
  2187  0017F6  CFDE F032          	movff	postinc2,move_window@sector
  2188  0017FA  CFDE F033          	movff	postinc2,move_window@sector+1
  2189  0017FE  CFDE F034          	movff	postinc2,move_window@sector+2
  2190  001802  CFDE F035          	movff	postinc2,move_window@sector+3
  2191  001806  EC8F  F027         	call	_move_window	;wreg free
  2192  00180A  0900               	iorlw	0
  2193  00180C  B4D8               	btfsc	status,2,c
  2194  00180E  D00A               	goto	l6289
  2195                           
  2196                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2197  001810  0100               	movlb	0	; () banked
  2198  001812  EE20 F005          	lfsr	2,5
  2199  001816  516D               	movf	f_write@fp& (0+255),w,b
  2200  001818  26D9               	addwf	fsr2l,f,c
  2201  00181A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2202  00181C  22DA               	addwfc	fsr2h,f,c
  2203  00181E  0E01               	movlw	1
  2204  001820  6EDF               	movwf	indf2,c
  2205  001822  0012               	return	
  2206  001824                     l6289:
  2207                           
  2208                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2209  001824  0EFF               	movlw	255
  2210  001826  0100               	movlb	0	; () banked
  2211  001828  6F75               	movwf	??_f_write& (0+255),b
  2212  00182A  0E01               	movlw	1
  2213  00182C  6F76               	movwf	(??_f_write+1)& (0+255),b
  2214  00182E  EE20 F006          	lfsr	2,6
  2215  001832  516D               	movf	f_write@fp& (0+255),w,b
  2216  001834  26D9               	addwf	fsr2l,f,c
  2217  001836  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2218  001838  22DA               	addwfc	fsr2h,f,c
  2219  00183A  CFDE F077          	movff	postinc2,??_f_write+2
  2220  00183E  CFDD F078          	movff	postdec2,??_f_write+3
  2221  001842  5175               	movf	??_f_write& (0+255),w,b
  2222  001844  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2223  001846  5176               	movf	(??_f_write+1)& (0+255),w,b
  2224  001848  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2225  00184A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2226  00184E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2227  001852  CFDE F079          	movff	postinc2,??_f_write+4
  2228  001856  CFDD F07A          	movff	postdec2,??_f_write+5
  2229  00185A  5177               	movf	(??_f_write+2)& (0+255),w,b
  2230  00185C  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2231  00185E  5178               	movf	(??_f_write+3)& (0+255),w,b
  2232  001860  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2233  001862  0E2E               	movlw	46
  2234  001864  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2235  001866  6E01               	movwf	mem_cpy@dst,c
  2236  001868  0E00               	movlw	0
  2237  00186A  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2238  00186C  6E02               	movwf	mem_cpy@dst+1,c
  2239  00186E  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2240  001872  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2241  001876  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2242  00187A  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2243  00187E  EC7D  F026         	call	_mem_cpy	;wreg free
  2244                           
  2245                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2246  001882  C06D  FFD9         	movff	f_write@fp,fsr2l
  2247  001886  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2248  00188A  EE10 F004          	lfsr	1,4
  2249  00188E  50DE               	movf	postinc2,w,c
  2250  001890  26E1               	addwf	fsr1l,f,c
  2251  001892  50DD               	movf	postdec2,w,c
  2252  001894  22E2               	addwfc	fsr1h,f,c
  2253  001896  0E01               	movlw	1
  2254  001898  6EE7               	movwf	indf1,c
  2255  00189A                     l6293:
  2256  00189A  0100               	movlb	0	; () banked
  2257  00189C  518F               	movf	f_write@wcnt& (0+255),w,b
  2258  00189E  2782               	addwf	f_write@wbuff& (0+255),f,b
  2259  0018A0  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2260  0018A2  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2261                           
  2262                           ; BSR set to: 0
  2263  0018A4  EE20 F006          	lfsr	2,6
  2264  0018A8  516D               	movf	f_write@fp& (0+255),w,b
  2265  0018AA  26D9               	addwf	fsr2l,f,c
  2266  0018AC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2267  0018AE  22DA               	addwfc	fsr2h,f,c
  2268  0018B0  518F               	movf	f_write@wcnt& (0+255),w,b
  2269  0018B2  26DE               	addwf	postinc2,f,c
  2270  0018B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2271  0018B6  22DE               	addwfc	postinc2,f,c
  2272  0018B8  0E00               	movlw	0
  2273  0018BA  22DE               	addwfc	postinc2,f,c
  2274  0018BC  22DE               	addwfc	postinc2,f,c
  2275                           
  2276                           ; BSR set to: 0
  2277  0018BE  C073  FFD9         	movff	f_write@bw,fsr2l
  2278  0018C2  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2279  0018C6  518F               	movf	f_write@wcnt& (0+255),w,b
  2280  0018C8  26DE               	addwf	postinc2,f,c
  2281  0018CA  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2282  0018CC  22DD               	addwfc	postdec2,f,c
  2283                           
  2284                           ; BSR set to: 0
  2285  0018CE  518F               	movf	f_write@wcnt& (0+255),w,b
  2286  0018D0  5F71               	subwf	f_write@btw& (0+255),f,b
  2287  0018D2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2288  0018D4  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2289  0018D6                     l6301:
  2290                           
  2291                           ; BSR set to: 0
  2292  0018D6  5171               	movf	f_write@btw& (0+255),w,b
  2293  0018D8  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2294  0018DA  A4D8               	btfss	status,2,c
  2295  0018DC  D4D8               	goto	l6193
  2296  0018DE                     u8620:
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2300  0018DE  EE20 F006          	lfsr	2,6
  2301  0018E2  516D               	movf	f_write@fp& (0+255),w,b
  2302  0018E4  26D9               	addwf	fsr2l,f,c
  2303  0018E6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2304  0018E8  22DA               	addwfc	fsr2h,f,c
  2305  0018EA  EE10 F00A          	lfsr	1,10
  2306  0018EE  516D               	movf	f_write@fp& (0+255),w,b
  2307  0018F0  26E1               	addwf	fsr1l,f,c
  2308  0018F2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2309  0018F4  22E2               	addwfc	fsr1h,f,c
  2310  0018F6  50DE               	movf	postinc2,w,c
  2311  0018F8  5CE6               	subwf	postinc1,w,c
  2312  0018FA  50DE               	movf	postinc2,w,c
  2313  0018FC  58E6               	subwfb	postinc1,w,c
  2314  0018FE  50DE               	movf	postinc2,w,c
  2315  001900  58E6               	subwfb	postinc1,w,c
  2316  001902  50DE               	movf	postinc2,w,c
  2317  001904  58E6               	subwfb	postinc1,w,c
  2318  001906  B0D8               	btfsc	status,0,c
  2319  001908  D014               	goto	l6307
  2320                           
  2321                           ; BSR set to: 0
  2322  00190A  EE20 F006          	lfsr	2,6
  2323  00190E  516D               	movf	f_write@fp& (0+255),w,b
  2324  001910  26D9               	addwf	fsr2l,f,c
  2325  001912  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2326  001914  22DA               	addwfc	fsr2h,f,c
  2327  001916  EE10 F00A          	lfsr	1,10
  2328  00191A  516D               	movf	f_write@fp& (0+255),w,b
  2329  00191C  26E1               	addwf	fsr1l,f,c
  2330  00191E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2331  001920  22E2               	addwfc	fsr1h,f,c
  2332  001922  CFDE FFE6          	movff	postinc2,postinc1
  2333  001926  CFDE FFE6          	movff	postinc2,postinc1
  2334  00192A  CFDE FFE6          	movff	postinc2,postinc1
  2335  00192E  CFDE FFE6          	movff	postinc2,postinc1
  2336  001932                     l6307:
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;ff.c: 2801:  fp->flag |= 0x20;
  2340  001932  EE20 F004          	lfsr	2,4
  2341  001936  516D               	movf	f_write@fp& (0+255),w,b
  2342  001938  26D9               	addwf	fsr2l,f,c
  2343  00193A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2344  00193C  22DA               	addwfc	fsr2h,f,c
  2345  00193E  0E00               	movlw	0
  2346  001940  8ADB               	bsf	plusw2,5,c
  2347                           
  2348                           ; BSR set to: 0
  2349  001942  0012               	return		;funcret
  2350  001944                     __end_of_f_write:
  2351                           	opt callstack 0
  2352                           
  2353 ;; *************** function _f_open *****************
  2354 ;; Defined at:
  2355 ;;		line 2449 in file "ff.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  fp              2   58[BANK0 ] PTR struct .
  2358 ;;		 -> Fil(32), 
  2359 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2360 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  2361 ;;  mode            1   62[BANK0 ] unsigned char 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  dj             22   90[BANK0 ] struct .
  2364 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2365 ;;  dw              4   83[BANK0 ] unsigned long 
  2366 ;;  cl              4   79[BANK0 ] unsigned long 
  2367 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2368 ;;		 -> NULL(0), FatFs(558), 
  2369 ;;  res             1   87[BANK0 ] enum E93
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      enum E4918
  2372 ;; Registers used:
  2373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2379 ;;      Params:         0       5       0       0       0       0       0       0       0
  2380 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2381 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2382 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2383 ;;Total ram usage:       54 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:   13
  2386 ;; This function calls:
  2387 ;;		_dir_register
  2388 ;;		_find_volume
  2389 ;;		_follow_path
  2390 ;;		_ld_clust
  2391 ;;		_move_window
  2392 ;;		_remove_chain
  2393 ;;		_st_clust
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text2
  2400  002FC2                     __ptext2:
  2401                           	opt callstack 0
  2402  002FC2                     _f_open:
  2403                           	opt callstack 17
  2404                           
  2405                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;incstack = 0
  2409  002FC2  0100               	movlb	0	; () banked
  2410  002FC4  519A               	movf	f_open@fp& (0+255),w,b
  2411  002FC6  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2412  002FC8  A4D8               	btfss	status,2,c
  2413  002FCA  D002               	goto	l5939
  2414                           
  2415                           ; BSR set to: 0
  2416  002FCC  0E09               	movlw	9
  2417  002FCE  0012               	return	
  2418  002FD0                     l5939:
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;ff.c: 2465:  fp->fs = 0;
  2422  002FD0  C09A  FFD9         	movff	f_open@fp,fsr2l
  2423  002FD4  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2424  002FD8  0E00               	movlw	0
  2425  002FDA  6EDE               	movwf	postinc2,c
  2426  002FDC  0E00               	movlw	0
  2427  002FDE  6EDD               	movwf	postdec2,c
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2431  002FE0  C0D4  F0BA         	movff	ff@FatFs,f_open@dj
  2432  002FE4  C0D5  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2436  002FE8  0E1F               	movlw	31
  2437  002FEA  179E               	andwf	f_open@mode& (0+255),f,b
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2441  002FEC  0EBA               	movlw	low f_open@dj
  2442  002FEE  6E45               	movwf	find_volume@rfs,c
  2443  002FF0  0E00               	movlw	high f_open@dj
  2444  002FF2  6E46               	movwf	find_volume@rfs+1,c
  2445  002FF4  0E9C               	movlw	low f_open@path
  2446  002FF6  6E47               	movwf	find_volume@path,c
  2447  002FF8  0E00               	movlw	high f_open@path
  2448  002FFA  6E48               	movwf	find_volume@path+1,c
  2449  002FFC  519E               	movf	f_open@mode& (0+255),w,b
  2450  002FFE  0BFE               	andlw	254
  2451  003000  6E49               	movwf	find_volume@wmode,c
  2452  003002  EC19  F004         	call	_find_volume	;wreg free
  2453  003006  0100               	movlb	0	; () banked
  2454  003008  6FB7               	movwf	f_open@res& (0+255),b
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;ff.c: 2479:  if (res == FR_OK) {
  2458  00300A  51B7               	movf	f_open@res& (0+255),w,b
  2459  00300C  A4D8               	btfss	status,2,c
  2460  00300E  D1A2               	goto	l6043
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;ff.c: 2480:   (dj).fn = sfn;
  2464  003010  0EA3               	movlw	low f_open@sfn
  2465  003012  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2466  003014  0E00               	movlw	high f_open@sfn
  2467  003016  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2471  003018  0EBA               	movlw	low f_open@dj
  2472  00301A  6F86               	movwf	follow_path@dp& (0+255),b
  2473  00301C  0E00               	movlw	high f_open@dj
  2474  00301E  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2475  003020  C09C  F088         	movff	f_open@path,follow_path@path
  2476  003024  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2477  003028  ECA7  F021         	call	_follow_path	;wreg free
  2478  00302C  0100               	movlb	0	; () banked
  2479  00302E  6FB7               	movwf	f_open@res& (0+255),b
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;ff.c: 2482:   dir = dj.dir;
  2483  003030  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2484  003034  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;ff.c: 2484:   if (res == FR_OK) {
  2488  003038  51B7               	movf	f_open@res& (0+255),w,b
  2489  00303A  A4D8               	btfss	status,2,c
  2490  00303C  D006               	goto	l5961
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;ff.c: 2485:    if (!dir)
  2494  00303E  51B8               	movf	f_open@dir& (0+255),w,b
  2495  003040  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2496  003042  A4D8               	btfss	status,2,c
  2497  003044  D002               	goto	l5961
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2501  003046  0E06               	movlw	6
  2502  003048  6FB7               	movwf	f_open@res& (0+255),b
  2503  00304A                     l5961:
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2507  00304A  C09E  F09F         	movff	f_open@mode,??_f_open
  2508  00304E  0E1C               	movlw	28
  2509  003050  179F               	andwf	??_f_open& (0+255),f,b
  2510  003052  B4D8               	btfsc	status,2,c
  2511  003054  D0D3               	goto	l6009
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;ff.c: 2494:    if (res != FR_OK) {
  2515  003056  51B7               	movf	f_open@res& (0+255),w,b
  2516  003058  B4D8               	btfsc	status,2,c
  2517  00305A  D012               	goto	l5973
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2521  00305C  0E04               	movlw	4
  2522  00305E  19B7               	xorwf	f_open@res& (0+255),w,b
  2523  003060  A4D8               	btfss	status,2,c
  2524  003062  D008               	goto	l5969
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;ff.c: 2499:      res = dir_register(&dj);
  2528  003064  0EBA               	movlw	low f_open@dj
  2529  003066  6F8A               	movwf	dir_register@dp& (0+255),b
  2530  003068  0E00               	movlw	high f_open@dj
  2531  00306A  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2532  00306C  EC46  F025         	call	_dir_register	;wreg free
  2533  003070  0100               	movlb	0	; () banked
  2534  003072  6FB7               	movwf	f_open@res& (0+255),b
  2535  003074                     l5969:
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;ff.c: 2501:     mode |= 0x08;
  2539  003074  879E               	bsf	f_open@mode& (0+255),3,b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;ff.c: 2502:     dir = dj.dir;
  2543  003076  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2544  00307A  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2545                           
  2546                           ;ff.c: 2503:    }
  2547  00307E  D012               	goto	l641
  2548  003080                     l5973:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2552  003080  EE20 F00B          	lfsr	2,11
  2553  003084  51B8               	movf	f_open@dir& (0+255),w,b
  2554  003086  26D9               	addwf	fsr2l,f,c
  2555  003088  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2556  00308A  22DA               	addwfc	fsr2h,f,c
  2557  00308C  50DF               	movf	indf2,w,c
  2558  00308E  6F9F               	movwf	??_f_open& (0+255),b
  2559  003090  0E11               	movlw	17
  2560  003092  179F               	andwf	??_f_open& (0+255),f,b
  2561  003094  B4D8               	btfsc	status,2,c
  2562  003096  D002               	goto	l642
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;ff.c: 2506:      res = FR_DENIED;
  2566  003098  0E07               	movlw	7
  2567  00309A  D003               	goto	L2
  2568  00309C                     l642:
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;ff.c: 2508:      if (mode & 0x04)
  2572  00309C  A59E               	btfss	f_open@mode& (0+255),2,b
  2573  00309E  D002               	goto	l641
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;ff.c: 2509:       res = FR_EXIST;
  2577  0030A0  0E08               	movlw	8
  2578  0030A2                     L2:
  2579  0030A2  6FB7               	movwf	f_open@res& (0+255),b
  2580  0030A4                     l641:
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2584  0030A4  51B7               	movf	f_open@res& (0+255),w,b
  2585  0030A6  B4D8               	btfsc	status,2,c
  2586                           
  2587                           ; BSR set to: 0
  2588  0030A8  A79E               	btfss	f_open@mode& (0+255),3,b
  2589  0030AA  D0C1               	goto	l648
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2593                           
  2594                           ; BSR set to: 0
  2595  0030AC  EE20 F00E          	lfsr	2,14
  2596  0030B0  51B8               	movf	f_open@dir& (0+255),w,b
  2597  0030B2  26D9               	addwf	fsr2l,f,c
  2598  0030B4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2599  0030B6  22DA               	addwfc	fsr2h,f,c
  2600  0030B8  0E00               	movlw	0
  2601  0030BA  6EDE               	movwf	postinc2,c
  2602  0030BC  0E00               	movlw	0
  2603  0030BE  6EDE               	movwf	postinc2,c
  2604  0030C0  0E21               	movlw	33
  2605  0030C2  6EDE               	movwf	postinc2,c
  2606  0030C4  0E46               	movlw	70
  2607  0030C6  6EDD               	movwf	postdec2,c
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2611  0030C8  EE20 F016          	lfsr	2,22
  2612  0030CC  51B8               	movf	f_open@dir& (0+255),w,b
  2613  0030CE  26D9               	addwf	fsr2l,f,c
  2614  0030D0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2615  0030D2  22DA               	addwfc	fsr2h,f,c
  2616  0030D4  0E00               	movlw	0
  2617  0030D6  6EDE               	movwf	postinc2,c
  2618  0030D8  0E00               	movlw	0
  2619  0030DA  6EDE               	movwf	postinc2,c
  2620  0030DC  0E21               	movlw	33
  2621  0030DE  6EDE               	movwf	postinc2,c
  2622  0030E0  0E46               	movlw	70
  2623  0030E2  6EDD               	movwf	postdec2,c
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;ff.c: 2516:     dir[11] = 0;
  2627  0030E4  EE20 F00B          	lfsr	2,11
  2628  0030E8  51B8               	movf	f_open@dir& (0+255),w,b
  2629  0030EA  26D9               	addwf	fsr2l,f,c
  2630  0030EC  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2631  0030EE  22DA               	addwfc	fsr2h,f,c
  2632  0030F0  0E00               	movlw	0
  2633  0030F2  6EDF               	movwf	indf2,c
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2637  0030F4  EE20 F01C          	lfsr	2,28
  2638  0030F8  51B8               	movf	f_open@dir& (0+255),w,b
  2639  0030FA  26D9               	addwf	fsr2l,f,c
  2640  0030FC  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2641  0030FE  22DA               	addwfc	fsr2h,f,c
  2642  003100  6ADE               	clrf	postinc2,c
  2643  003102  6ADE               	clrf	postinc2,c
  2644  003104  6ADE               	clrf	postinc2,c
  2645  003106  6ADD               	clrf	postdec2,c
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2649  003108  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2650  00310C  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2651  003110  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2652  003114  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2653  003118  ECAE  F028         	call	_ld_clust	;wreg free
  2654  00311C  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2655  003120  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2656  003124  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2657  003128  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2658                           
  2659                           ;ff.c: 2519:     st_clust(dir, 0);
  2660  00312C  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2661  003130  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2662  003134  0E00               	movlw	0
  2663  003136  6E03               	movwf	st_clust@cl,c
  2664  003138  0E00               	movlw	0
  2665  00313A  6E04               	movwf	st_clust@cl+1,c
  2666  00313C  0E00               	movlw	0
  2667  00313E  6E05               	movwf	st_clust@cl+2,c
  2668  003140  0E00               	movlw	0
  2669  003142  6E06               	movwf	st_clust@cl+3,c
  2670  003144  ECAB  F02A         	call	_st_clust	;wreg free
  2671                           
  2672                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2673  003148  0100               	movlb	0	; () banked
  2674  00314A  EE20 F004          	lfsr	2,4
  2675  00314E  51BA               	movf	f_open@dj& (0+255),w,b
  2676  003150  26D9               	addwf	fsr2l,f,c
  2677  003152  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2678  003154  22DA               	addwfc	fsr2h,f,c
  2679  003156  0E01               	movlw	1
  2680  003158  6EDF               	movwf	indf2,c
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;ff.c: 2521:     if (cl) {
  2684  00315A  51AF               	movf	f_open@cl& (0+255),w,b
  2685  00315C  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2686  00315E  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2687  003160  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2688  003162  B4D8               	btfsc	status,2,c
  2689  003164  D064               	goto	l648
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2693  003166  EE20 F02A          	lfsr	2,42
  2694  00316A  51BA               	movf	f_open@dj& (0+255),w,b
  2695  00316C  26D9               	addwf	fsr2l,f,c
  2696  00316E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2697  003170  22DA               	addwfc	fsr2h,f,c
  2698  003172  CFDE F0B3          	movff	postinc2,f_open@dw
  2699  003176  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2700  00317A  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2701  00317E  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2705  003182  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2706  003186  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2707  00318A  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2708  00318E  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2709  003192  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2710  003196  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2711  00319A  EC02  F021         	call	_remove_chain	;wreg free
  2712  00319E  0100               	movlb	0	; () banked
  2713  0031A0  6FB7               	movwf	f_open@res& (0+255),b
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;ff.c: 2524:      if (res == FR_OK) {
  2717  0031A2  51B7               	movf	f_open@res& (0+255),w,b
  2718  0031A4  A4D8               	btfss	status,2,c
  2719  0031A6  D043               	goto	l648
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2723  0031A8  0EFF               	movlw	255
  2724  0031AA  25AF               	addwf	f_open@cl& (0+255),w,b
  2725  0031AC  6F9F               	movwf	??_f_open& (0+255),b
  2726  0031AE  0EFF               	movlw	255
  2727  0031B0  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2728  0031B2  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2729  0031B4  0EFF               	movlw	255
  2730  0031B6  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2731  0031B8  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2732  0031BA  0EFF               	movlw	255
  2733  0031BC  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2734  0031BE  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2735  0031C0  EE20 F00A          	lfsr	2,10
  2736  0031C4  51BA               	movf	f_open@dj& (0+255),w,b
  2737  0031C6  26D9               	addwf	fsr2l,f,c
  2738  0031C8  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2739  0031CA  22DA               	addwfc	fsr2h,f,c
  2740  0031CC  C09F  FFDE         	movff	??_f_open,postinc2
  2741  0031D0  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2742  0031D4  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2743  0031D8  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2747  0031DC  C0BA  F030         	movff	f_open@dj,move_window@fs
  2748  0031E0  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2749  0031E4  C0B3  F032         	movff	f_open@dw,move_window@sector
  2750  0031E8  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2751  0031EC  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2752  0031F0  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2753  0031F4  EC8F  F027         	call	_move_window	;wreg free
  2754  0031F8  0100               	movlb	0	; () banked
  2755  0031FA  D018               	goto	L3
  2756  0031FC                     l6009:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;ff.c: 2532:    if (res == FR_OK) {
  2760  0031FC  51B7               	movf	f_open@res& (0+255),w,b
  2761  0031FE  A4D8               	btfss	status,2,c
  2762  003200  D016               	goto	l648
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2766  003202  EE20 F00B          	lfsr	2,11
  2767  003206  51B8               	movf	f_open@dir& (0+255),w,b
  2768  003208  26D9               	addwf	fsr2l,f,c
  2769  00320A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2770  00320C  22DA               	addwfc	fsr2h,f,c
  2771  00320E  A8DF               	btfss	indf2,4,c
  2772  003210  D002               	goto	l650
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;ff.c: 2534:      res = FR_NO_FILE;
  2776  003212  0E04               	movlw	4
  2777  003214  D00B               	goto	L3
  2778  003216                     l650:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2782  003216  A39E               	btfss	f_open@mode& (0+255),1,b
  2783  003218  D00A               	goto	l648
  2784                           
  2785                           ; BSR set to: 0
  2786  00321A  EE20 F00B          	lfsr	2,11
  2787  00321E  51B8               	movf	f_open@dir& (0+255),w,b
  2788  003220  26D9               	addwf	fsr2l,f,c
  2789  003222  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2790  003224  22DA               	addwfc	fsr2h,f,c
  2791  003226  A0DF               	btfss	indf2,0,c
  2792  003228  D002               	goto	l648
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;ff.c: 2537:       res = FR_DENIED;
  2796  00322A  0E07               	movlw	7
  2797  00322C                     L3:
  2798  00322C  6FB7               	movwf	f_open@res& (0+255),b
  2799  00322E                     l648:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;ff.c: 2541:   if (res == FR_OK) {
  2803  00322E  51B7               	movf	f_open@res& (0+255),w,b
  2804  003230  A4D8               	btfss	status,2,c
  2805  003232  D020               	goto	l6027
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;ff.c: 2542:    if (mode & 0x08)
  2809  003234  B79E               	btfsc	f_open@mode& (0+255),3,b
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;ff.c: 2543:     mode |= 0x20;
  2813  003236  8B9E               	bsf	f_open@mode& (0+255),5,b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2817  003238  EE20 F02A          	lfsr	2,42
  2818  00323C  51BA               	movf	f_open@dj& (0+255),w,b
  2819  00323E  26D9               	addwf	fsr2l,f,c
  2820  003240  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2821  003242  22DA               	addwfc	fsr2h,f,c
  2822  003244  EE10 F01A          	lfsr	1,26
  2823  003248  519A               	movf	f_open@fp& (0+255),w,b
  2824  00324A  26E1               	addwf	fsr1l,f,c
  2825  00324C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2826  00324E  22E2               	addwfc	fsr1h,f,c
  2827  003250  CFDE FFE6          	movff	postinc2,postinc1
  2828  003254  CFDE FFE6          	movff	postinc2,postinc1
  2829  003258  CFDE FFE6          	movff	postinc2,postinc1
  2830  00325C  CFDE FFE6          	movff	postinc2,postinc1
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2834  003260  EE20 F01E          	lfsr	2,30
  2835  003264  519A               	movf	f_open@fp& (0+255),w,b
  2836  003266  26D9               	addwf	fsr2l,f,c
  2837  003268  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2838  00326A  22DA               	addwfc	fsr2h,f,c
  2839  00326C  C0B8  FFDE         	movff	f_open@dir,postinc2
  2840  003270  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2841  003274                     l6027:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;ff.c: 2565:   if (res == FR_OK) {
  2845  003274  51B7               	movf	f_open@res& (0+255),w,b
  2846  003276  A4D8               	btfss	status,2,c
  2847  003278  D06D               	goto	l6043
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;ff.c: 2566:    fp->flag = mode;
  2851  00327A  EE20 F004          	lfsr	2,4
  2852  00327E  519A               	movf	f_open@fp& (0+255),w,b
  2853  003280  26D9               	addwf	fsr2l,f,c
  2854  003282  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2855  003284  22DA               	addwfc	fsr2h,f,c
  2856  003286  C09E  FFDF         	movff	f_open@mode,indf2
  2857                           
  2858                           ;ff.c: 2567:    fp->err = 0;
  2859  00328A  EE20 F005          	lfsr	2,5
  2860  00328E  519A               	movf	f_open@fp& (0+255),w,b
  2861  003290  26D9               	addwf	fsr2l,f,c
  2862  003292  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2863  003294  22DA               	addwfc	fsr2h,f,c
  2864  003296  0E00               	movlw	0
  2865  003298  6EDF               	movwf	indf2,c
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2869  00329A  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2870  00329E  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2871  0032A2  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2872  0032A6  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2873  0032AA  ECAE  F028         	call	_ld_clust	;wreg free
  2874  0032AE  0100               	movlb	0	; () banked
  2875  0032B0  EE20 F00E          	lfsr	2,14
  2876  0032B4  519A               	movf	f_open@fp& (0+255),w,b
  2877  0032B6  26D9               	addwf	fsr2l,f,c
  2878  0032B8  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2879  0032BA  22DA               	addwfc	fsr2h,f,c
  2880  0032BC  C001  FFDE         	movff	?_ld_clust,postinc2
  2881  0032C0  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2882  0032C4  C003  FFDE         	movff	?_ld_clust+2,postinc2
  2883  0032C8  C004  FFDE         	movff	?_ld_clust+3,postinc2
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  2887  0032CC  EE20 F01C          	lfsr	2,28
  2888  0032D0  51B8               	movf	f_open@dir& (0+255),w,b
  2889  0032D2  26D9               	addwf	fsr2l,f,c
  2890  0032D4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2891  0032D6  22DA               	addwfc	fsr2h,f,c
  2892  0032D8  EE10 F00A          	lfsr	1,10
  2893  0032DC  519A               	movf	f_open@fp& (0+255),w,b
  2894  0032DE  26E1               	addwf	fsr1l,f,c
  2895  0032E0  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2896  0032E2  22E2               	addwfc	fsr1h,f,c
  2897  0032E4  CFDE FFE6          	movff	postinc2,postinc1
  2898  0032E8  CFDE FFE6          	movff	postinc2,postinc1
  2899  0032EC  CFDE FFE6          	movff	postinc2,postinc1
  2900  0032F0  CFDE FFE6          	movff	postinc2,postinc1
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;ff.c: 2570:    fp->fptr = 0;
  2904  0032F4  EE20 F006          	lfsr	2,6
  2905  0032F8  519A               	movf	f_open@fp& (0+255),w,b
  2906  0032FA  26D9               	addwf	fsr2l,f,c
  2907  0032FC  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2908  0032FE  22DA               	addwfc	fsr2h,f,c
  2909  003300  6ADE               	clrf	postinc2,c
  2910  003302  6ADE               	clrf	postinc2,c
  2911  003304  6ADE               	clrf	postinc2,c
  2912  003306  6ADD               	clrf	postdec2,c
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;ff.c: 2571:    fp->dsect = 0;
  2916  003308  EE20 F016          	lfsr	2,22
  2917  00330C  519A               	movf	f_open@fp& (0+255),w,b
  2918  00330E  26D9               	addwf	fsr2l,f,c
  2919  003310  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2920  003312  22DA               	addwfc	fsr2h,f,c
  2921  003314  6ADE               	clrf	postinc2,c
  2922  003316  6ADE               	clrf	postinc2,c
  2923  003318  6ADE               	clrf	postinc2,c
  2924  00331A  6ADD               	clrf	postdec2,c
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;ff.c: 2575:    fp->fs = dj.fs;
  2928  00331C  C09A  FFD9         	movff	f_open@fp,fsr2l
  2929  003320  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2930  003324  C0BA  FFDE         	movff	f_open@dj,postinc2
  2931  003328  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;ff.c: 2576:    fp->id = fp->fs->id;
  2935  00332C  C09A  FFD9         	movff	f_open@fp,fsr2l
  2936  003330  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2937  003334  EE10 F006          	lfsr	1,6
  2938  003338  50DE               	movf	postinc2,w,c
  2939  00333A  26E1               	addwf	fsr1l,f,c
  2940  00333C  50DD               	movf	postdec2,w,c
  2941  00333E  22E2               	addwfc	fsr1h,f,c
  2942  003340  EE20 F002          	lfsr	2,2
  2943  003344  519A               	movf	f_open@fp& (0+255),w,b
  2944  003346  26D9               	addwf	fsr2l,f,c
  2945  003348  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2946  00334A  22DA               	addwfc	fsr2h,f,c
  2947  00334C  CFE6 FFDE          	movff	postinc1,postinc2
  2948  003350  CFE5 FFDD          	movff	postdec1,postdec2
  2949  003354                     l6043:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;ff.c: 2580:  return res;
  2953  003354  51B7               	movf	f_open@res& (0+255),w,b
  2954                           
  2955                           ; BSR set to: 0
  2956  003356  0012               	return		;funcret
  2957  003358                     __end_of_f_open:
  2958                           	opt callstack 0
  2959                           
  2960 ;; *************** function _remove_chain *****************
  2961 ;; Defined at:
  2962 ;;		line 937 in file "ff.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  fs              2   85[COMRAM] PTR struct .
  2965 ;;		 -> NULL(0), FatFs(558), 
  2966 ;;  clst            4   87[COMRAM] unsigned long 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  nxt             4    1[BANK0 ] unsigned long 
  2969 ;;  res             1    0[BANK0 ] enum E93
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      enum E93
  2972 ;; Registers used:
  2973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2979 ;;      Params:         6       0       0       0       0       0       0       0       0
  2980 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2981 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2982 ;;      Totals:        10       5       0       0       0       0       0       0       0
  2983 ;;Total ram usage:       15 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    9
  2986 ;; This function calls:
  2987 ;;		_get_fat
  2988 ;;		_put_fat
  2989 ;; This function is called by:
  2990 ;;		_f_open
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text3
  2995  004204                     __ptext3:
  2996                           	opt callstack 0
  2997  004204                     _remove_chain:
  2998                           	opt callstack 20
  2999                           
  3000                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;incstack = 0
  3004  004204  505B               	movf	remove_chain@clst+3,w,c
  3005  004206  105A               	iorwf	remove_chain@clst+2,w,c
  3006  004208  1059               	iorwf	remove_chain@clst+1,w,c
  3007  00420A  E104               	bnz	u7090
  3008  00420C  0E02               	movlw	2
  3009  00420E  5C58               	subwf	remove_chain@clst,w,c
  3010  004210  A0D8               	btfss	status,0,c
  3011  004212  D010               	goto	u7100
  3012  004214                     u7090:
  3013  004214  EE20 F012          	lfsr	2,18
  3014  004218  5056               	movf	remove_chain@fs,w,c
  3015  00421A  26D9               	addwf	fsr2l,f,c
  3016  00421C  5057               	movf	remove_chain@fs+1,w,c
  3017  00421E  22DA               	addwfc	fsr2h,f,c
  3018  004220  50DE               	movf	postinc2,w,c
  3019  004222  5C58               	subwf	remove_chain@clst,w,c
  3020  004224  50DE               	movf	postinc2,w,c
  3021  004226  5859               	subwfb	remove_chain@clst+1,w,c
  3022  004228  50DE               	movf	postinc2,w,c
  3023  00422A  585A               	subwfb	remove_chain@clst+2,w,c
  3024  00422C  50DE               	movf	postinc2,w,c
  3025  00422E  585B               	subwfb	remove_chain@clst+3,w,c
  3026  004230  A0D8               	btfss	status,0,c
  3027  004232  D003               	goto	l5391
  3028  004234                     u7100:
  3029                           
  3030                           ;ff.c: 949:   res = FR_INT_ERR;
  3031  004234  0E02               	movlw	2
  3032  004236  0100               	movlb	0	; () banked
  3033  004238  D031               	goto	L4
  3034  00423A                     l5391:
  3035                           
  3036                           ;ff.c: 952:   res = FR_OK;
  3037  00423A  0E00               	movlw	0
  3038  00423C  0100               	movlb	0	; () banked
  3039  00423E  6F60               	movwf	remove_chain@res& (0+255),b
  3040                           
  3041                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3042  004240  D074               	goto	l362
  3043  004242                     l5393:
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3047  004242  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3048  004246  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3049  00424A  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3050  00424E  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3051  004252  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3052  004256  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3053  00425A  EC10  F016         	call	_get_fat	;wreg free
  3054  00425E  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3055  004262  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3056  004266  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3057  00426A  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3058                           
  3059                           ;ff.c: 955:    if (nxt == 0) break;
  3060  00426E  0100               	movlb	0	; () banked
  3061  004270  5161               	movf	remove_chain@nxt& (0+255),w,b
  3062  004272  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3063  004274  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3064  004276  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3065  004278  B4D8               	btfsc	status,2,c
  3066  00427A  D067               	goto	u7160
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3070  00427C  0561               	decf	remove_chain@nxt& (0+255),w,b
  3071  00427E  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3072  004280  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3073  004282  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3074  004284  B4D8               	btfsc	status,2,c
  3075  004286  D7D6               	goto	u7100
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3079  004288  2961               	incf	remove_chain@nxt& (0+255),w,b
  3080  00428A  E10A               	bnz	l5407
  3081  00428C  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3082  00428E  E108               	bnz	l5407
  3083  004290  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3084  004292  E106               	bnz	l5407
  3085  004294  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3086  004296  A4D8               	btfss	status,2,c
  3087  004298  D003               	goto	l5407
  3088                           
  3089                           ; BSR set to: 0
  3090  00429A  0E01               	movlw	1
  3091  00429C                     L4:
  3092  00429C  6F60               	movwf	remove_chain@res& (0+255),b
  3093  00429E  D055               	goto	u7160
  3094  0042A0                     l5407:
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3098  0042A0  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3099  0042A4  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3100  0042A8  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3101  0042AC  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3102  0042B0  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3103  0042B4  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3104  0042B8  0E00               	movlw	0
  3105  0042BA  6E41               	movwf	put_fat@val,c
  3106  0042BC  0E00               	movlw	0
  3107  0042BE  6E42               	movwf	put_fat@val+1,c
  3108  0042C0  0E00               	movlw	0
  3109  0042C2  6E43               	movwf	put_fat@val+2,c
  3110  0042C4  0E00               	movlw	0
  3111  0042C6  6E44               	movwf	put_fat@val+3,c
  3112  0042C8  ECF8  F011         	call	_put_fat	;wreg free
  3113  0042CC  0100               	movlb	0	; () banked
  3114  0042CE  6F60               	movwf	remove_chain@res& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;ff.c: 959:    if (res != FR_OK) break;
  3118  0042D0  5160               	movf	remove_chain@res& (0+255),w,b
  3119  0042D2  A4D8               	btfss	status,2,c
  3120  0042D4  D03A               	goto	u7160
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3124  0042D6  EE20 F00E          	lfsr	2,14
  3125  0042DA  5056               	movf	remove_chain@fs,w,c
  3126  0042DC  26D9               	addwf	fsr2l,f,c
  3127  0042DE  5057               	movf	remove_chain@fs+1,w,c
  3128  0042E0  22DA               	addwfc	fsr2h,f,c
  3129  0042E2  28DE               	incf	postinc2,w,c
  3130  0042E4  E107               	bnz	u7150
  3131  0042E6  28DE               	incf	postinc2,w,c
  3132  0042E8  E105               	bnz	u7150
  3133  0042EA  28DE               	incf	postinc2,w,c
  3134  0042EC  E103               	bnz	u7150
  3135  0042EE  28DE               	incf	postinc2,w,c
  3136  0042F0  B4D8               	btfsc	status,2,c
  3137  0042F2  D013               	goto	l5417
  3138  0042F4                     u7150:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;ff.c: 961:     fs->free_clust++;
  3142  0042F4  EE20 F00E          	lfsr	2,14
  3143  0042F8  5056               	movf	remove_chain@fs,w,c
  3144  0042FA  26D9               	addwf	fsr2l,f,c
  3145  0042FC  5057               	movf	remove_chain@fs+1,w,c
  3146  0042FE  22DA               	addwfc	fsr2h,f,c
  3147  004300  2ADE               	incf	postinc2,f,c
  3148  004302  0E00               	movlw	0
  3149  004304  22DE               	addwfc	postinc2,f,c
  3150  004306  22DE               	addwfc	postinc2,f,c
  3151  004308  22DE               	addwfc	postinc2,f,c
  3152                           
  3153                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3154  00430A  EE20 F005          	lfsr	2,5
  3155  00430E  5056               	movf	remove_chain@fs,w,c
  3156  004310  26D9               	addwf	fsr2l,f,c
  3157  004312  5057               	movf	remove_chain@fs+1,w,c
  3158  004314  22DA               	addwfc	fsr2h,f,c
  3159  004316  0E00               	movlw	0
  3160  004318  80DB               	bsf	plusw2,0,c
  3161  00431A                     l5417:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;ff.c: 974:    clst = nxt;
  3165  00431A  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3166  00431E  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3167  004322  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3168  004326  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3169  00432A                     l362:
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3173  00432A  EE20 F012          	lfsr	2,18
  3174  00432E  5056               	movf	remove_chain@fs,w,c
  3175  004330  26D9               	addwf	fsr2l,f,c
  3176  004332  5057               	movf	remove_chain@fs+1,w,c
  3177  004334  22DA               	addwfc	fsr2h,f,c
  3178  004336  50DE               	movf	postinc2,w,c
  3179  004338  5C58               	subwf	remove_chain@clst,w,c
  3180  00433A  50DE               	movf	postinc2,w,c
  3181  00433C  5859               	subwfb	remove_chain@clst+1,w,c
  3182  00433E  50DE               	movf	postinc2,w,c
  3183  004340  585A               	subwfb	remove_chain@clst+2,w,c
  3184  004342  50DE               	movf	postinc2,w,c
  3185  004344  585B               	subwfb	remove_chain@clst+3,w,c
  3186  004346  A0D8               	btfss	status,0,c
  3187  004348  D77C               	goto	l5393
  3188  00434A                     u7160:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;ff.c: 978:  return res;
  3192  00434A  5160               	movf	remove_chain@res& (0+255),w,b
  3193                           
  3194                           ; BSR set to: 0
  3195  00434C  0012               	return		;funcret
  3196  00434E                     __end_of_remove_chain:
  3197                           	opt callstack 0
  3198                           
  3199 ;; *************** function _follow_path *****************
  3200 ;; Defined at:
  3201 ;;		line 2052 in file "ff.c"
  3202 ;; Parameters:    Size  Location     Type
  3203 ;;  dp              2   38[BANK0 ] PTR struct .
  3204 ;;		 -> f_open@dj(22), 
  3205 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3206 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3209 ;;		 -> NULL(0), FatFs(558), 
  3210 ;;  res             1   45[BANK0 ] enum E93
  3211 ;;  ns              1   44[BANK0 ] unsigned char 
  3212 ;; Return value:  Size  Location     Type
  3213 ;;                  1    wreg      enum E93
  3214 ;; Registers used:
  3215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3216 ;; Tracked objects:
  3217 ;;		On entry : 0/0
  3218 ;;		On exit  : 0/0
  3219 ;;		Unchanged: 0/0
  3220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3221 ;;      Params:         0       4       0       0       0       0       0       0       0
  3222 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3224 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3225 ;;Total ram usage:        8 bytes
  3226 ;; Hardware stack levels used:    1
  3227 ;; Hardware stack levels required when called:   12
  3228 ;; This function calls:
  3229 ;;		_create_name
  3230 ;;		_dir_find
  3231 ;;		_dir_sdi
  3232 ;;		_ld_clust
  3233 ;; This function is called by:
  3234 ;;		_f_open
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text4
  3239  00434E                     __ptext4:
  3240                           	opt callstack 0
  3241  00434E                     _follow_path:
  3242                           	opt callstack 17
  3243                           
  3244                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;incstack = 0
  3248  00434E  C088  FFF6         	movff	follow_path@path,tblptrl
  3249  004352  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3250  004356                     	if	0	;tblptru may be non-zero
  3251  004356                     	endif
  3252  004356                     	if	0	;tblptru may be non-zero
  3253  004356                     	endif
  3254  004356  0008               	tblrd		*
  3255  004358  50F5               	movf	tablat,w,c
  3256  00435A  0A2F               	xorlw	47
  3257  00435C  B4D8               	btfsc	status,2,c
  3258  00435E  D009               	goto	u7200
  3259  004360  C088  FFF6         	movff	follow_path@path,tblptrl
  3260  004364  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3261  004368                     	if	0	;tblptru may be non-zero
  3262  004368                     	endif
  3263  004368                     	if	0	;tblptru may be non-zero
  3264  004368                     	endif
  3265  004368  0008               	tblrd		*
  3266  00436A  50F5               	movf	tablat,w,c
  3267  00436C  0A5C               	xorlw	92
  3268  00436E  A4D8               	btfss	status,2,c
  3269  004370  D003               	goto	l5447
  3270  004372                     u7200:
  3271                           
  3272                           ;ff.c: 2069:   path++;
  3273  004372  0100               	movlb	0	; () banked
  3274  004374  4B88               	infsnz	follow_path@path& (0+255),f,b
  3275  004376  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3276  004378                     l5447:
  3277                           
  3278                           ;ff.c: 2070:  dp->sclust = 0;
  3279  004378  0100               	movlb	0	; () banked
  3280  00437A  EE20 F006          	lfsr	2,6
  3281  00437E  5186               	movf	follow_path@dp& (0+255),w,b
  3282  004380  26D9               	addwf	fsr2l,f,c
  3283  004382  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3284  004384  22DA               	addwfc	fsr2h,f,c
  3285  004386  6ADE               	clrf	postinc2,c
  3286  004388  6ADE               	clrf	postinc2,c
  3287  00438A  6ADE               	clrf	postinc2,c
  3288  00438C  6ADD               	clrf	postdec2,c
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3292  00438E  C088  FFF6         	movff	follow_path@path,tblptrl
  3293  004392  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3294  004396                     	if	0	;tblptru may be non-zero
  3295  004396                     	endif
  3296  004396                     	if	0	;tblptru may be non-zero
  3297  004396                     	endif
  3298  004396  0E20               	movlw	32
  3299  004398  0008               	tblrd		*
  3300  00439A  60F5               	cpfslt	tablat,c
  3301  00439C  D017               	goto	l5455
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3305  00439E  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3306  0043A2  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3307  0043A6  0E00               	movlw	0
  3308  0043A8  6E59               	movwf	dir_sdi@idx+1,c
  3309  0043AA  0E00               	movlw	0
  3310  0043AC  6E58               	movwf	dir_sdi@idx,c
  3311  0043AE  EC29  F01B         	call	_dir_sdi	;wreg free
  3312  0043B2  0100               	movlb	0	; () banked
  3313  0043B4  6F8D               	movwf	follow_path@res& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;ff.c: 2075:   dp->dir = 0;
  3317  0043B6  EE20 F012          	lfsr	2,18
  3318  0043BA  5186               	movf	follow_path@dp& (0+255),w,b
  3319  0043BC  26D9               	addwf	fsr2l,f,c
  3320  0043BE  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3321  0043C0  22DA               	addwfc	fsr2h,f,c
  3322  0043C2  0E00               	movlw	0
  3323  0043C4  6EDE               	movwf	postinc2,c
  3324  0043C6  0E00               	movlw	0
  3325  0043C8  6EDD               	movwf	postdec2,c
  3326                           
  3327                           ;ff.c: 2076:  } else {
  3328  0043CA  D062               	goto	l5491
  3329  0043CC                     l5455:
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;ff.c: 2078:    res = create_name(dp, &path);
  3333  0043CC  C086  F009         	movff	follow_path@dp,create_name@dp
  3334  0043D0  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3335  0043D4  0E88               	movlw	low follow_path@path
  3336  0043D6  6E0B               	movwf	create_name@path,c
  3337  0043D8  0E00               	movlw	high follow_path@path
  3338  0043DA  6E0C               	movwf	create_name@path+1,c
  3339  0043DC  EC8A  F01C         	call	_create_name	;wreg free
  3340  0043E0  0100               	movlb	0	; () banked
  3341  0043E2  6F8D               	movwf	follow_path@res& (0+255),b
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;ff.c: 2079:    if (res != FR_OK) break;
  3345  0043E4  518D               	movf	follow_path@res& (0+255),w,b
  3346  0043E6  A4D8               	btfss	status,2,c
  3347  0043E8  D053               	goto	l5491
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;ff.c: 2080:    res = dir_find(dp);
  3351  0043EA  C086  F080         	movff	follow_path@dp,dir_find@dp
  3352  0043EE  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3353  0043F2  ECEB  F023         	call	_dir_find	;wreg free
  3354  0043F6  0100               	movlb	0	; () banked
  3355  0043F8  6F8D               	movwf	follow_path@res& (0+255),b
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;ff.c: 2081:    ns = dp->fn[11];
  3359  0043FA  EE20 F014          	lfsr	2,20
  3360  0043FE  5186               	movf	follow_path@dp& (0+255),w,b
  3361  004400  26D9               	addwf	fsr2l,f,c
  3362  004402  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3363  004404  22DA               	addwfc	fsr2h,f,c
  3364  004406  EE10 F00B          	lfsr	1,11
  3365  00440A  50DE               	movf	postinc2,w,c
  3366  00440C  26E1               	addwf	fsr1l,f,c
  3367  00440E  50DD               	movf	postdec2,w,c
  3368  004410  22E2               	addwfc	fsr1h,f,c
  3369  004412  50E7               	movf	indf1,w,c
  3370  004414  6F8C               	movwf	follow_path@ns& (0+255),b
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;ff.c: 2082:    if (res != FR_OK) {
  3374  004416  518D               	movf	follow_path@res& (0+255),w,b
  3375  004418  B4D8               	btfsc	status,2,c
  3376  00441A  D008               	goto	l529
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3380  00441C  0E04               	movlw	4
  3381  00441E  198D               	xorwf	follow_path@res& (0+255),w,b
  3382  004420  B4D8               	btfsc	status,2,c
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3386  004422  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3387  004424  D035               	goto	l5491
  3388  004426                     u7250:
  3389                           
  3390                           ; BSR set to: 0
  3391  004426  0E05               	movlw	5
  3392  004428  6F8D               	movwf	follow_path@res& (0+255),b
  3393  00442A  D032               	goto	l5491
  3394  00442C                     l529:
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;ff.c: 2094:    if (ns & 0x04) break;
  3398  00442C  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3399  00442E  D030               	goto	l5491
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;ff.c: 2095:    dir = dp->dir;
  3403  004430  EE20 F012          	lfsr	2,18
  3404  004434  5186               	movf	follow_path@dp& (0+255),w,b
  3405  004436  26D9               	addwf	fsr2l,f,c
  3406  004438  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3407  00443A  22DA               	addwfc	fsr2h,f,c
  3408  00443C  CFDE F08A          	movff	postinc2,follow_path@dir
  3409  004440  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3410                           
  3411                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3412  004444  EE20 F00B          	lfsr	2,11
  3413  004448  518A               	movf	follow_path@dir& (0+255),w,b
  3414  00444A  26D9               	addwf	fsr2l,f,c
  3415  00444C  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3416  00444E  22DA               	addwfc	fsr2h,f,c
  3417  004450  A8DF               	btfss	indf2,4,c
  3418  004452  D7E9               	goto	u7250
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3422  004454  C086  FFD9         	movff	follow_path@dp,fsr2l
  3423  004458  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3424  00445C  CFDE F001          	movff	postinc2,ld_clust@fs
  3425  004460  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3426  004464  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3427  004468  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3428  00446C  ECAE  F028         	call	_ld_clust	;wreg free
  3429  004470  0100               	movlb	0	; () banked
  3430  004472  EE20 F006          	lfsr	2,6
  3431  004476  5186               	movf	follow_path@dp& (0+255),w,b
  3432  004478  26D9               	addwf	fsr2l,f,c
  3433  00447A  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3434  00447C  22DA               	addwfc	fsr2h,f,c
  3435  00447E  C001  FFDE         	movff	?_ld_clust,postinc2
  3436  004482  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3437  004486  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3438  00448A  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3439  00448E  D79E               	goto	l5455
  3440  004490                     l5491:
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;ff.c: 2103:  return res;
  3444  004490  518D               	movf	follow_path@res& (0+255),w,b
  3445                           
  3446                           ; BSR set to: 0
  3447  004492  0012               	return		;funcret
  3448  004494                     __end_of_follow_path:
  3449                           	opt callstack 0
  3450                           
  3451 ;; *************** function _ld_clust *****************
  3452 ;; Defined at:
  3453 ;;		line 1235 in file "ff.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;  fs              2    0[COMRAM] PTR struct .
  3456 ;;		 -> NULL(0), FatFs(558), 
  3457 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3458 ;;		 -> NULL(0), FatFs(558), 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  cl              4   10[COMRAM] unsigned long 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  4    0[COMRAM] unsigned long 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3470 ;;      Params:         4       0       0       0       0       0       0       0       0
  3471 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3472 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3473 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3474 ;;Total ram usage:       14 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; This function calls:
  3477 ;;		Nothing
  3478 ;; This function is called by:
  3479 ;;		_follow_path
  3480 ;;		_f_open
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text5
  3485  00515C                     __ptext5:
  3486                           	opt callstack 0
  3487  00515C                     _ld_clust:
  3488                           	opt callstack 29
  3489                           
  3490                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;incstack = 0
  3494  00515C  0E1A               	movlw	26
  3495  00515E  2403               	addwf	ld_clust@dir,w,c
  3496  005160  6ED9               	movwf	fsr2l,c
  3497  005162  0E00               	movlw	0
  3498  005164  2004               	addwfc	ld_clust@dir+1,w,c
  3499  005166  6EDA               	movwf	fsr2h,c
  3500  005168  CFDE F005          	movff	postinc2,??_ld_clust
  3501  00516C  CFDD F006          	movff	postdec2,??_ld_clust+1
  3502  005170  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3503  005174  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3504  005178  6A0D               	clrf	ld_clust@cl+2,c
  3505  00517A  6A0E               	clrf	ld_clust@cl+3,c
  3506                           
  3507                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3508  00517C  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3509  005180  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3510  005184  0E03               	movlw	3
  3511  005186  18DE               	xorwf	postinc2,w,c
  3512  005188  A4D8               	btfss	status,2,c
  3513  00518A  D01E               	goto	l5093
  3514                           
  3515                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3516  00518C  0E14               	movlw	20
  3517  00518E  2403               	addwf	ld_clust@dir,w,c
  3518  005190  6ED9               	movwf	fsr2l,c
  3519  005192  0E00               	movlw	0
  3520  005194  2004               	addwfc	ld_clust@dir+1,w,c
  3521  005196  6EDA               	movwf	fsr2h,c
  3522  005198  CFDE F005          	movff	postinc2,??_ld_clust
  3523  00519C  CFDD F006          	movff	postdec2,??_ld_clust+1
  3524  0051A0  5005               	movf	??_ld_clust,w,c
  3525  0051A2  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3526  0051A4  5006               	movf	??_ld_clust+1,w,c
  3527  0051A6  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3528  0051A8  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3529  0051AA  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3530  0051AC  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3531  0051B0  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3532  0051B4  6A08               	clrf	??_ld_clust+3,c
  3533  0051B6  6A07               	clrf	??_ld_clust+2,c
  3534  0051B8  5007               	movf	??_ld_clust+2,w,c
  3535  0051BA  120B               	iorwf	ld_clust@cl,f,c
  3536  0051BC  5008               	movf	??_ld_clust+3,w,c
  3537  0051BE  120C               	iorwf	ld_clust@cl+1,f,c
  3538  0051C0  5009               	movf	??_ld_clust+4,w,c
  3539  0051C2  120D               	iorwf	ld_clust@cl+2,f,c
  3540  0051C4  500A               	movf	??_ld_clust+5,w,c
  3541  0051C6  120E               	iorwf	ld_clust@cl+3,f,c
  3542  0051C8                     l5093:
  3543                           
  3544                           ;ff.c: 1246:  return cl;
  3545  0051C8  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3546  0051CC  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3547  0051D0  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3548  0051D4  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3549  0051D8  0012               	return		;funcret
  3550  0051DA                     __end_of_ld_clust:
  3551                           	opt callstack 0
  3552                           
  3553 ;; *************** function _dir_find *****************
  3554 ;; Defined at:
  3555 ;;		line 1458 in file "ff.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  dp              2   32[BANK0 ] PTR struct .
  3558 ;;		 -> f_open@dj(22), 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3561 ;;		 -> NULL(0), FatFs(558), 
  3562 ;;  res             1   37[BANK0 ] enum E93
  3563 ;;  c               1   34[BANK0 ] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      enum E93
  3566 ;; Registers used:
  3567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3573 ;;      Params:         0       2       0       0       0       0       0       0       0
  3574 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3576 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3577 ;;Total ram usage:        6 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:   11
  3580 ;; This function calls:
  3581 ;;		_dir_next
  3582 ;;		_dir_sdi
  3583 ;;		_mem_cmp
  3584 ;;		_move_window
  3585 ;; This function is called by:
  3586 ;;		_follow_path
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text6
  3591  0047D6                     __ptext6:
  3592                           	opt callstack 0
  3593  0047D6                     _dir_find:
  3594                           	opt callstack 17
  3595                           
  3596                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3597                           
  3598                           ;incstack = 0
  3599  0047D6  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3600  0047DA  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3601  0047DE  0E00               	movlw	0
  3602  0047E0  6E59               	movwf	dir_sdi@idx+1,c
  3603  0047E2  0E00               	movlw	0
  3604  0047E4  6E58               	movwf	dir_sdi@idx,c
  3605  0047E6  EC29  F01B         	call	_dir_sdi	;wreg free
  3606  0047EA  0100               	movlb	0	; () banked
  3607  0047EC  6F85               	movwf	dir_find@res& (0+255),b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3611  0047EE  5185               	movf	dir_find@res& (0+255),w,b
  3612  0047F0  B4D8               	btfsc	status,2,c
  3613  0047F2  D003               	goto	l5107
  3614  0047F4                     u6540:
  3615  0047F4  0100               	movlb	0	; () banked
  3616  0047F6  5185               	movf	dir_find@res& (0+255),w,b
  3617  0047F8  0012               	return	
  3618  0047FA                     l5107:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3622  0047FA  C080  FFD9         	movff	dir_find@dp,fsr2l
  3623  0047FE  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3624  004802  CFDE F030          	movff	postinc2,move_window@fs
  3625  004806  CFDD F031          	movff	postdec2,move_window@fs+1
  3626  00480A  EE20 F00E          	lfsr	2,14
  3627  00480E  5180               	movf	dir_find@dp& (0+255),w,b
  3628  004810  26D9               	addwf	fsr2l,f,c
  3629  004812  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3630  004814  22DA               	addwfc	fsr2h,f,c
  3631  004816  CFDE F032          	movff	postinc2,move_window@sector
  3632  00481A  CFDE F033          	movff	postinc2,move_window@sector+1
  3633  00481E  CFDE F034          	movff	postinc2,move_window@sector+2
  3634  004822  CFDE F035          	movff	postinc2,move_window@sector+3
  3635  004826  EC8F  F027         	call	_move_window	;wreg free
  3636  00482A  0100               	movlb	0	; () banked
  3637  00482C  6F85               	movwf	dir_find@res& (0+255),b
  3638                           
  3639                           ; BSR set to: 0
  3640                           ;ff.c: 1476:   if (res != FR_OK) break;
  3641  00482E  5185               	movf	dir_find@res& (0+255),w,b
  3642  004830  A4D8               	btfss	status,2,c
  3643  004832  D7E0               	goto	u6540
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;ff.c: 1477:   dir = dp->dir;
  3647  004834  EE20 F012          	lfsr	2,18
  3648  004838  5180               	movf	dir_find@dp& (0+255),w,b
  3649  00483A  26D9               	addwf	fsr2l,f,c
  3650  00483C  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3651  00483E  22DA               	addwfc	fsr2h,f,c
  3652  004840  CFDE F083          	movff	postinc2,dir_find@dir
  3653  004844  CFDD F084          	movff	postdec2,dir_find@dir+1
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;ff.c: 1478:   c = dir[0];
  3657  004848  C083  FFD9         	movff	dir_find@dir,fsr2l
  3658  00484C  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3659  004850  50DF               	movf	indf2,w,c
  3660  004852  6F82               	movwf	dir_find@c& (0+255),b
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3664  004854  5182               	movf	dir_find@c& (0+255),w,b
  3665  004856  A4D8               	btfss	status,2,c
  3666  004858  D003               	goto	l5121
  3667                           
  3668                           ; BSR set to: 0
  3669  00485A  0E04               	movlw	4
  3670  00485C  6F85               	movwf	dir_find@res& (0+255),b
  3671  00485E  D7CA               	goto	u6540
  3672  004860                     l5121:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3676  004860  EE20 F00B          	lfsr	2,11
  3677  004864  5183               	movf	dir_find@dir& (0+255),w,b
  3678  004866  26D9               	addwf	fsr2l,f,c
  3679  004868  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3680  00486A  22DA               	addwfc	fsr2h,f,c
  3681  00486C  B6DF               	btfsc	indf2,3,c
  3682  00486E  D018               	goto	l5127
  3683                           
  3684                           ; BSR set to: 0
  3685  004870  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3686  004874  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3687  004878  EE20 F014          	lfsr	2,20
  3688  00487C  5180               	movf	dir_find@dp& (0+255),w,b
  3689  00487E  26D9               	addwf	fsr2l,f,c
  3690  004880  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3691  004882  22DA               	addwfc	fsr2h,f,c
  3692  004884  CFDE F003          	movff	postinc2,mem_cmp@src
  3693  004888  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3694  00488C  0E00               	movlw	0
  3695  00488E  6E06               	movwf	mem_cmp@cnt+1,c
  3696  004890  0E0B               	movlw	11
  3697  004892  6E05               	movwf	mem_cmp@cnt,c
  3698  004894  EC61  F029         	call	_mem_cmp	;wreg free
  3699  004898  5001               	movf	?_mem_cmp,w,c
  3700  00489A  1002               	iorwf	?_mem_cmp+1,w,c
  3701  00489C  B4D8               	btfsc	status,2,c
  3702  00489E  D7AA               	goto	u6540
  3703  0048A0                     l5127:
  3704                           
  3705                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3706  0048A0  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3707  0048A4  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3708  0048A8  0E00               	movlw	0
  3709  0048AA  0100               	movlb	0	; () banked
  3710  0048AC  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3711  0048AE  0E00               	movlw	0
  3712  0048B0  6F6F               	movwf	dir_next@stretch& (0+255),b
  3713  0048B2  EC0D  F014         	call	_dir_next	;wreg free
  3714  0048B6  0100               	movlb	0	; () banked
  3715  0048B8  6F85               	movwf	dir_find@res& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;ff.c: 1506:  } while (res == FR_OK);
  3719  0048BA  5185               	movf	dir_find@res& (0+255),w,b
  3720  0048BC  A4D8               	btfss	status,2,c
  3721  0048BE  D79A               	goto	u6540
  3722  0048C0  D79C               	goto	l5107
  3723  0048C2                     __end_of_dir_find:
  3724                           	opt callstack 0
  3725                           
  3726 ;; *************** function _mem_cmp *****************
  3727 ;; Defined at:
  3728 ;;		line 533 in file "ff.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  dst             2    0[COMRAM] PTR const void 
  3731 ;;		 -> NULL(0), FatFs(558), 
  3732 ;;  src             2    2[COMRAM] PTR const void 
  3733 ;;		 -> f_open@sfn(12), 
  3734 ;;  cnt             2    4[COMRAM] unsigned short 
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;  r               2   12[COMRAM] int 
  3737 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3738 ;;		 -> f_open@sfn(12), 
  3739 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3740 ;;		 -> NULL(0), FatFs(558), 
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  2    0[COMRAM] int 
  3743 ;; Registers used:
  3744 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3750 ;;      Params:         6       0       0       0       0       0       0       0       0
  3751 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3752 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3753 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3754 ;;Total ram usage:       14 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; This function calls:
  3757 ;;		Nothing
  3758 ;; This function is called by:
  3759 ;;		_dir_find
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           	psect	text7
  3764  0052C2                     __ptext7:
  3765                           	opt callstack 0
  3766  0052C2                     _mem_cmp:
  3767                           	opt callstack 27
  3768                           
  3769                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;incstack = 0
  3773  0052C2  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3774  0052C6  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3775  0052CA  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3776  0052CE  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3777                           
  3778                           ;ff.c: 535:  int r = 0;
  3779  0052D2  0E00               	movlw	0
  3780  0052D4  6E0E               	movwf	mem_cmp@r+1,c
  3781  0052D6  0E00               	movlw	0
  3782  0052D8  6E0D               	movwf	mem_cmp@r,c
  3783  0052DA                     l4715:
  3784  0052DA  0605               	decf	mem_cmp@cnt,f,c
  3785  0052DC  A0D8               	btfss	status,0,c
  3786  0052DE  0606               	decf	mem_cmp@cnt+1,f,c
  3787  0052E0  2805               	incf	mem_cmp@cnt,w,c
  3788  0052E2  E103               	bnz	u5830
  3789  0052E4  2806               	incf	mem_cmp@cnt+1,w,c
  3790  0052E6  B4D8               	btfsc	status,2,c
  3791  0052E8  D01A               	goto	u5840
  3792  0052EA                     u5830:
  3793  0052EA  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3794  0052EE  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3795  0052F2  4A09               	infsnz	mem_cmp@d,f,c
  3796  0052F4  2A0A               	incf	mem_cmp@d+1,f,c
  3797  0052F6  50DF               	movf	indf2,w,c
  3798  0052F8  6E07               	movwf	??_mem_cmp& (0+255),c
  3799  0052FA  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3800  0052FE  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3801  005302  4A0B               	infsnz	mem_cmp@s,f,c
  3802  005304  2A0C               	incf	mem_cmp@s+1,f,c
  3803  005306  50DF               	movf	indf2,w,c
  3804  005308  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  3805  00530A  5008               	movf	??_mem_cmp+1,w,c
  3806  00530C  5C07               	subwf	??_mem_cmp,w,c
  3807  00530E  6E0D               	movwf	mem_cmp@r,c
  3808  005310  6A0E               	clrf	mem_cmp@r+1,c
  3809  005312  A0D8               	btfss	status,0,c
  3810  005314  060E               	decf	mem_cmp@r+1,f,c
  3811  005316  500D               	movf	mem_cmp@r,w,c
  3812  005318  100E               	iorwf	mem_cmp@r+1,w,c
  3813  00531A  B4D8               	btfsc	status,2,c
  3814  00531C  D7DE               	goto	l4715
  3815  00531E                     u5840:
  3816                           
  3817                           ;ff.c: 538:  return r;
  3818  00531E  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3819  005322  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3820  005326  0012               	return		;funcret
  3821  005328                     __end_of_mem_cmp:
  3822                           	opt callstack 0
  3823                           
  3824 ;; *************** function _create_name *****************
  3825 ;; Defined at:
  3826 ;;		line 1843 in file "ff.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  dp              2    8[COMRAM] PTR struct .
  3829 ;;		 -> f_open@dj(22), 
  3830 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3831 ;;		 -> follow_path@path(2), 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  i               2   28[COMRAM] unsigned short 
  3834 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  3835 ;;		 -> f_open@sfn(12), 
  3836 ;;  p               2   23[COMRAM] PTR const unsigned char 
  3837 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3838 ;;  ni              2   21[COMRAM] unsigned short 
  3839 ;;  si              2   18[COMRAM] unsigned short 
  3840 ;;  c               1   30[COMRAM] unsigned char 
  3841 ;;  d               1   25[COMRAM] unsigned char 
  3842 ;;  b               1   20[COMRAM] unsigned char 
  3843 ;; Return value:  Size  Location     Type
  3844 ;;                  1    wreg      enum E93
  3845 ;; Registers used:
  3846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3847 ;; Tracked objects:
  3848 ;;		On entry : 0/0
  3849 ;;		On exit  : 0/0
  3850 ;;		Unchanged: 0/0
  3851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3852 ;;      Params:         4       0       0       0       0       0       0       0       0
  3853 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3854 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3855 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3856 ;;Total ram usage:       23 bytes
  3857 ;; Hardware stack levels used:    1
  3858 ;; Hardware stack levels required when called:    1
  3859 ;; This function calls:
  3860 ;;		_chk_chr
  3861 ;;		_mem_set
  3862 ;; This function is called by:
  3863 ;;		_follow_path
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867                           	psect	text8
  3868  003914                     __ptext8:
  3869                           	opt callstack 0
  3870  003914                     _create_name:
  3871                           	opt callstack 27
  3872                           
  3873                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  3874                           
  3875                           ;incstack = 0
  3876  003914  C00B  FFD9         	movff	create_name@path,fsr2l
  3877  003918  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3878  00391C  CFDE F018          	movff	postinc2,create_name@p
  3879  003920  CFDD F019          	movff	postdec2,create_name@p+1
  3880  003924  D002               	goto	l5139
  3881  003926                     l5137:
  3882  003926  4A18               	infsnz	create_name@p,f,c
  3883  003928  2A19               	incf	create_name@p+1,f,c
  3884  00392A                     l5139:
  3885  00392A  C018  FFF6         	movff	create_name@p,tblptrl
  3886  00392E  C019  FFF7         	movff	create_name@p+1,tblptrh
  3887  003932                     	if	0	;tblptru may be non-zero
  3888  003932                     	endif
  3889  003932                     	if	0	;tblptru may be non-zero
  3890  003932                     	endif
  3891  003932  0008               	tblrd		*
  3892  003934  50F5               	movf	tablat,w,c
  3893  003936  0A2F               	xorlw	47
  3894  003938  B4D8               	btfsc	status,2,c
  3895  00393A  D7F5               	goto	l5137
  3896  00393C  C018  FFF6         	movff	create_name@p,tblptrl
  3897  003940  C019  FFF7         	movff	create_name@p+1,tblptrh
  3898  003944                     	if	0	;tblptru may be non-zero
  3899  003944                     	endif
  3900  003944                     	if	0	;tblptru may be non-zero
  3901  003944                     	endif
  3902  003944  0008               	tblrd		*
  3903  003946  50F5               	movf	tablat,w,c
  3904  003948  0A5C               	xorlw	92
  3905  00394A  B4D8               	btfsc	status,2,c
  3906  00394C  D7EC               	goto	l5137
  3907                           
  3908                           ;ff.c: 1975:  sfn = dp->fn;
  3909  00394E  EE20 F014          	lfsr	2,20
  3910  003952  5009               	movf	create_name@dp,w,c
  3911  003954  26D9               	addwf	fsr2l,f,c
  3912  003956  500A               	movf	create_name@dp+1,w,c
  3913  003958  22DA               	addwfc	fsr2h,f,c
  3914  00395A  CFDE F01B          	movff	postinc2,create_name@sfn
  3915  00395E  CFDD F01C          	movff	postdec2,create_name@sfn+1
  3916                           
  3917                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  3918  003962  C01B  F001         	movff	create_name@sfn,mem_set@dst
  3919  003966  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  3920  00396A  0E00               	movlw	0
  3921  00396C  6E04               	movwf	mem_set@val+1,c
  3922  00396E  0E20               	movlw	32
  3923  003970  6E03               	movwf	mem_set@val,c
  3924  003972  0E00               	movlw	0
  3925  003974  6E06               	movwf	mem_set@cnt+1,c
  3926  003976  0E0B               	movlw	11
  3927  003978  6E05               	movwf	mem_set@cnt,c
  3928  00397A  EC95  F02A         	call	_mem_set	;wreg free
  3929                           
  3930                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  3931  00397E  0E00               	movlw	0
  3932  003980  6E15               	movwf	create_name@b,c
  3933  003982  C015  F01D         	movff	create_name@b,create_name@i
  3934  003986  6A1E               	clrf	create_name@i+1,c
  3935  003988  C01D  F013         	movff	create_name@i,create_name@si
  3936  00398C  C01E  F014         	movff	create_name@i+1,create_name@si+1
  3937  003990  0E00               	movlw	0
  3938  003992  6E17               	movwf	create_name@ni+1,c
  3939  003994  0E08               	movlw	8
  3940  003996  6E16               	movwf	create_name@ni,c
  3941  003998                     l5151:
  3942                           
  3943                           ;ff.c: 1992:   c = (BYTE)p[si++];
  3944  003998  5013               	movf	create_name@si,w,c
  3945  00399A  2418               	addwf	create_name@p,w,c
  3946  00399C  6E0D               	movwf	??_create_name& (0+255),c
  3947  00399E  5014               	movf	create_name@si+1,w,c
  3948  0039A0  2019               	addwfc	create_name@p+1,w,c
  3949  0039A2  6E0E               	movwf	(??_create_name+1)& (0+255),c
  3950  0039A4  C00D  FFF6         	movff	??_create_name,tblptrl
  3951  0039A8  C00E  FFF7         	movff	??_create_name+1,tblptrh
  3952  0039AC                     	if	0	;tblptru may be non-zero
  3953  0039AC                     	endif
  3954  0039AC                     	if	0	;tblptru may be non-zero
  3955  0039AC                     	endif
  3956  0039AC  0008               	tblrd		*
  3957  0039AE  CFF5 F01F          	movff	tablat,create_name@c
  3958  0039B2  4A13               	infsnz	create_name@si,f,c
  3959  0039B4  2A14               	incf	create_name@si+1,f,c
  3960                           
  3961                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  3962  0039B6  0E20               	movlw	32
  3963  0039B8  641F               	cpfsgt	create_name@c,c
  3964  0039BA  D0A4               	goto	l5235
  3965  0039BC  0E2F               	movlw	47
  3966  0039BE  181F               	xorwf	create_name@c,w,c
  3967  0039C0  B4D8               	btfsc	status,2,c
  3968  0039C2  D0A0               	goto	l5235
  3969  0039C4  0E5C               	movlw	92
  3970  0039C6  181F               	xorwf	create_name@c,w,c
  3971  0039C8  B4D8               	btfsc	status,2,c
  3972  0039CA  D09C               	goto	l5235
  3973                           
  3974                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  3975  0039CC  0E2E               	movlw	46
  3976  0039CE  181F               	xorwf	create_name@c,w,c
  3977  0039D0  B4D8               	btfsc	status,2,c
  3978  0039D2  D006               	goto	u6660
  3979  0039D4  5016               	movf	create_name@ni,w,c
  3980  0039D6  5C1D               	subwf	create_name@i,w,c
  3981  0039D8  5017               	movf	create_name@ni+1,w,c
  3982  0039DA  581E               	subwfb	create_name@i+1,w,c
  3983  0039DC  A0D8               	btfss	status,0,c
  3984  0039DE  D018               	goto	l5177
  3985  0039E0                     u6660:
  3986                           
  3987                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  3988  0039E0  0E08               	movlw	8
  3989  0039E2  1816               	xorwf	create_name@ni,w,c
  3990  0039E4  1017               	iorwf	create_name@ni+1,w,c
  3991  0039E6  A4D8               	btfss	status,2,c
  3992  0039E8  D004               	goto	u6680
  3993  0039EA  0E2E               	movlw	46
  3994  0039EC  181F               	xorwf	create_name@c,w,c
  3995  0039EE  B4D8               	btfsc	status,2,c
  3996  0039F0  D002               	goto	l5173
  3997  0039F2                     u6680:
  3998  0039F2  0E06               	movlw	6
  3999  0039F4  0012               	return	
  4000  0039F6                     l5173:
  4001                           
  4002                           ;ff.c: 1996:    i = 8; ni = 11;
  4003  0039F6  0E00               	movlw	0
  4004  0039F8  6E1E               	movwf	create_name@i+1,c
  4005  0039FA  0E08               	movlw	8
  4006  0039FC  6E1D               	movwf	create_name@i,c
  4007  0039FE  0E00               	movlw	0
  4008  003A00  6E17               	movwf	create_name@ni+1,c
  4009  003A02  0E0B               	movlw	11
  4010  003A04  6E16               	movwf	create_name@ni,c
  4011                           
  4012                           ;ff.c: 1997:    b <<= 2; continue;
  4013  003A06  90D8               	bcf	status,0,c
  4014  003A08  3615               	rlcf	create_name@b,f,c
  4015  003A0A  90D8               	bcf	status,0,c
  4016  003A0C  3615               	rlcf	create_name@b,f,c
  4017  003A0E  D7C4               	goto	l5151
  4018  003A10                     l5177:
  4019                           
  4020                           ;ff.c: 1999:   if (c >= 0x80) {
  4021  003A10  0E7F               	movlw	127
  4022  003A12  641F               	cpfsgt	create_name@c,c
  4023  003A14  D002               	goto	l492
  4024                           
  4025                           ;ff.c: 2000:    b |= 3;
  4026  003A16  0E03               	movlw	3
  4027  003A18  1215               	iorwf	create_name@b,f,c
  4028  003A1A                     l492:
  4029                           
  4030                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4031  003A1A  0E80               	movlw	128
  4032  003A1C  641F               	cpfsgt	create_name@c,c
  4033  003A1E  D003               	goto	u6710
  4034  003A20  0E9F               	movlw	159
  4035  003A22  641F               	cpfsgt	create_name@c,c
  4036  003A24  D006               	goto	u6730
  4037  003A26                     u6710:
  4038  003A26  0EDF               	movlw	223
  4039  003A28  641F               	cpfsgt	create_name@c,c
  4040  003A2A  D043               	goto	l5211
  4041  003A2C  0EFD               	movlw	253
  4042  003A2E  601F               	cpfslt	create_name@c,c
  4043  003A30  D040               	goto	l5211
  4044  003A32                     u6730:
  4045                           
  4046                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4047  003A32  5013               	movf	create_name@si,w,c
  4048  003A34  2418               	addwf	create_name@p,w,c
  4049  003A36  6E0D               	movwf	??_create_name& (0+255),c
  4050  003A38  5014               	movf	create_name@si+1,w,c
  4051  003A3A  2019               	addwfc	create_name@p+1,w,c
  4052  003A3C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4053  003A3E  C00D  FFF6         	movff	??_create_name,tblptrl
  4054  003A42  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4055  003A46                     	if	0	;tblptru may be non-zero
  4056  003A46                     	endif
  4057  003A46                     	if	0	;tblptru may be non-zero
  4058  003A46                     	endif
  4059  003A46  0008               	tblrd		*
  4060  003A48  CFF5 F01A          	movff	tablat,create_name@d
  4061  003A4C  4A13               	infsnz	create_name@si,f,c
  4062  003A4E  2A14               	incf	create_name@si+1,f,c
  4063                           
  4064                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4065  003A50  0E3F               	movlw	63
  4066  003A52  641A               	cpfsgt	create_name@d,c
  4067  003A54  D003               	goto	u6750
  4068  003A56  0E7E               	movlw	126
  4069  003A58  641A               	cpfsgt	create_name@d,c
  4070  003A5A  D006               	goto	u6770
  4071  003A5C                     u6750:
  4072  003A5C  0E7F               	movlw	127
  4073  003A5E  641A               	cpfsgt	create_name@d,c
  4074  003A60  D7C8               	goto	u6680
  4075  003A62  0EFD               	movlw	253
  4076  003A64  601A               	cpfslt	create_name@d,c
  4077  003A66  D7C5               	goto	u6680
  4078  003A68                     u6770:
  4079  003A68  0EFF               	movlw	255
  4080  003A6A  6E0D               	movwf	??_create_name& (0+255),c
  4081  003A6C  0EFF               	movlw	255
  4082  003A6E  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4083  003A70  C016  F00F         	movff	create_name@ni,??_create_name+2
  4084  003A74  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4085  003A78  500D               	movf	??_create_name,w,c
  4086  003A7A  260F               	addwf	??_create_name+2,f,c
  4087  003A7C  500E               	movf	??_create_name+1,w,c
  4088  003A7E  2210               	addwfc	??_create_name+3,f,c
  4089  003A80  500F               	movf	??_create_name+2,w,c
  4090  003A82  5C1D               	subwf	create_name@i,w,c
  4091  003A84  5010               	movf	??_create_name+3,w,c
  4092  003A86  581E               	subwfb	create_name@i+1,w,c
  4093  003A88  B0D8               	btfsc	status,0,c
  4094  003A8A  D7B3               	goto	u6680
  4095                           
  4096                           ;ff.c: 2013:    sfn[i++] = c;
  4097  003A8C  501D               	movf	create_name@i,w,c
  4098  003A8E  241B               	addwf	create_name@sfn,w,c
  4099  003A90  6ED9               	movwf	fsr2l,c
  4100  003A92  501E               	movf	create_name@i+1,w,c
  4101  003A94  201C               	addwfc	create_name@sfn+1,w,c
  4102  003A96  6EDA               	movwf	fsr2h,c
  4103  003A98  C01F  FFDF         	movff	create_name@c,indf2
  4104  003A9C  4A1D               	infsnz	create_name@i,f,c
  4105  003A9E  2A1E               	incf	create_name@i+1,f,c
  4106                           
  4107                           ;ff.c: 2014:    sfn[i++] = d;
  4108  003AA0  501D               	movf	create_name@i,w,c
  4109  003AA2  241B               	addwf	create_name@sfn,w,c
  4110  003AA4  6ED9               	movwf	fsr2l,c
  4111  003AA6  501E               	movf	create_name@i+1,w,c
  4112  003AA8  201C               	addwfc	create_name@sfn+1,w,c
  4113  003AAA  6EDA               	movwf	fsr2h,c
  4114  003AAC  C01A  FFDF         	movff	create_name@d,indf2
  4115  003AB0  D026               	goto	l5233
  4116  003AB2                     l5211:
  4117                           
  4118                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4119  003AB2  0E16               	movlw	low STR_5
  4120  003AB4  6E01               	movwf	chk_chr@str,c
  4121  003AB6  0E08               	movlw	high STR_5
  4122  003AB8  6E02               	movwf	chk_chr@str+1,c
  4123  003ABA  C01F  F003         	movff	create_name@c,chk_chr@chr
  4124  003ABE  6A04               	clrf	chk_chr@chr+1,c
  4125  003AC0  ECBF  F029         	call	_chk_chr	;wreg free
  4126  003AC4  5001               	movf	?_chk_chr,w,c
  4127  003AC6  1002               	iorwf	?_chk_chr+1,w,c
  4128  003AC8  A4D8               	btfss	status,2,c
  4129  003ACA  D793               	goto	u6680
  4130                           
  4131                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4132  003ACC  0E40               	movlw	64
  4133  003ACE  641F               	cpfsgt	create_name@c,c
  4134  003AD0  D005               	goto	l5223
  4135  003AD2  0E5B               	movlw	91
  4136  003AD4  601F               	cpfslt	create_name@c,c
  4137  003AD6  D002               	goto	l5223
  4138                           
  4139                           ;ff.c: 2019:     b |= 2;
  4140  003AD8  8215               	bsf	create_name@b,1,c
  4141                           
  4142                           ;ff.c: 2020:    } else {
  4143  003ADA  D009               	goto	l5231
  4144  003ADC                     l5223:
  4145                           
  4146                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4147  003ADC  0E60               	movlw	96
  4148  003ADE  641F               	cpfsgt	create_name@c,c
  4149  003AE0  D006               	goto	l5231
  4150  003AE2  0E7B               	movlw	123
  4151  003AE4  601F               	cpfslt	create_name@c,c
  4152  003AE6  D003               	goto	l5231
  4153                           
  4154                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4155  003AE8  8015               	bsf	create_name@b,0,c
  4156  003AEA  0E20               	movlw	32
  4157  003AEC  5E1F               	subwf	create_name@c,f,c
  4158  003AEE                     l5231:
  4159                           
  4160                           ;ff.c: 2025:    sfn[i++] = c;
  4161  003AEE  501D               	movf	create_name@i,w,c
  4162  003AF0  241B               	addwf	create_name@sfn,w,c
  4163  003AF2  6ED9               	movwf	fsr2l,c
  4164  003AF4  501E               	movf	create_name@i+1,w,c
  4165  003AF6  201C               	addwfc	create_name@sfn+1,w,c
  4166  003AF8  6EDA               	movwf	fsr2h,c
  4167  003AFA  C01F  FFDF         	movff	create_name@c,indf2
  4168  003AFE                     l5233:
  4169  003AFE  4A1D               	infsnz	create_name@i,f,c
  4170  003B00  2A1E               	incf	create_name@i+1,f,c
  4171  003B02  D74A               	goto	l5151
  4172  003B04                     l5235:
  4173                           
  4174                           ;ff.c: 2028:  *path = &p[si];
  4175  003B04  5013               	movf	create_name@si,w,c
  4176  003B06  2418               	addwf	create_name@p,w,c
  4177  003B08  6E0D               	movwf	??_create_name& (0+255),c
  4178  003B0A  5014               	movf	create_name@si+1,w,c
  4179  003B0C  2019               	addwfc	create_name@p+1,w,c
  4180  003B0E  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4181  003B10  C00B  FFD9         	movff	create_name@path,fsr2l
  4182  003B14  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4183  003B18  C00D  FFDE         	movff	??_create_name,postinc2
  4184  003B1C  C00E  FFDD         	movff	??_create_name+1,postdec2
  4185                           
  4186                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4187  003B20  0E20               	movlw	32
  4188  003B22  641F               	cpfsgt	create_name@c,c
  4189  003B24  D004               	goto	l5241
  4190  003B26  0E00               	movlw	0
  4191  003B28  6E12               	movwf	_create_name$814+1,c
  4192  003B2A  0E00               	movlw	0
  4193  003B2C  D003               	goto	L5
  4194  003B2E                     l5241:
  4195  003B2E  0E00               	movlw	0
  4196  003B30  6E12               	movwf	_create_name$814+1,c
  4197  003B32  0E04               	movlw	4
  4198  003B34                     L5:
  4199  003B34  6E11               	movwf	_create_name$814,c
  4200  003B36  C011  F01F         	movff	_create_name$814,create_name@c
  4201                           
  4202                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4203  003B3A  501D               	movf	create_name@i,w,c
  4204  003B3C  101E               	iorwf	create_name@i+1,w,c
  4205  003B3E  B4D8               	btfsc	status,2,c
  4206  003B40  D758               	goto	u6680
  4207                           
  4208                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4209  003B42  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4210  003B46  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4211  003B4A  0EE5               	movlw	229
  4212  003B4C  18DE               	xorwf	postinc2,w,c
  4213  003B4E  A4D8               	btfss	status,2,c
  4214  003B50  D006               	goto	l5255
  4215  003B52  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4216  003B56  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4217  003B5A  0E05               	movlw	5
  4218  003B5C  6EDF               	movwf	indf2,c
  4219  003B5E                     l5255:
  4220                           
  4221                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4222  003B5E  0E08               	movlw	8
  4223  003B60  1816               	xorwf	create_name@ni,w,c
  4224  003B62  1017               	iorwf	create_name@ni+1,w,c
  4225  003B64  A4D8               	btfss	status,2,c
  4226  003B66  D004               	goto	l516
  4227  003B68  90D8               	bcf	status,0,c
  4228  003B6A  3615               	rlcf	create_name@b,f,c
  4229  003B6C  90D8               	bcf	status,0,c
  4230  003B6E  3615               	rlcf	create_name@b,f,c
  4231  003B70                     l516:
  4232                           
  4233                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4234  003B70  5015               	movf	create_name@b,w,c
  4235  003B72  0B03               	andlw	3
  4236  003B74  06E8               	decf	wreg,f,c
  4237  003B76  B4D8               	btfsc	status,2,c
  4238  003B78  881F               	bsf	create_name@c,4,c
  4239                           
  4240                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4241  003B7A  5015               	movf	create_name@b,w,c
  4242  003B7C  0B0C               	andlw	12
  4243  003B7E  0A04               	xorlw	4
  4244  003B80  B4D8               	btfsc	status,2,c
  4245  003B82  861F               	bsf	create_name@c,3,c
  4246                           
  4247                           ;ff.c: 2038:  sfn[11] = c;
  4248  003B84  EE20 F00B          	lfsr	2,11
  4249  003B88  501B               	movf	create_name@sfn,w,c
  4250  003B8A  26D9               	addwf	fsr2l,f,c
  4251  003B8C  501C               	movf	create_name@sfn+1,w,c
  4252  003B8E  22DA               	addwfc	fsr2h,f,c
  4253  003B90  C01F  FFDF         	movff	create_name@c,indf2
  4254                           
  4255                           ;ff.c: 2040:  return FR_OK;
  4256  003B94  0E00               	movlw	0
  4257  003B96  0012               	return		;funcret
  4258  003B98                     __end_of_create_name:
  4259                           	opt callstack 0
  4260                           
  4261 ;; *************** function _chk_chr *****************
  4262 ;; Defined at:
  4263 ;;		line 543 in file "ff.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4266 ;;		 -> STR_6(15), 
  4267 ;;  chr             2    2[COMRAM] int 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  2    0[COMRAM] int 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4279 ;;      Params:         4       0       0       0       0       0       0       0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4281 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4282 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4283 ;;Total ram usage:        6 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; This function calls:
  4286 ;;		Nothing
  4287 ;; This function is called by:
  4288 ;;		_create_name
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text9
  4293  00537E                     __ptext9:
  4294                           	opt callstack 0
  4295  00537E                     _chk_chr:
  4296                           	opt callstack 27
  4297                           
  4298                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4299                           
  4300                           ;incstack = 0
  4301  00537E  D002               	goto	l4723
  4302  005380                     l4721:
  4303  005380  4A01               	infsnz	chk_chr@str,f,c
  4304  005382  2A02               	incf	chk_chr@str+1,f,c
  4305  005384                     l4723:
  4306  005384  C001  FFF6         	movff	chk_chr@str,tblptrl
  4307  005388  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4308  00538C                     	if	0	;tblptru may be non-zero
  4309  00538C                     	endif
  4310  00538C                     	if	0	;tblptru may be non-zero
  4311  00538C                     	endif
  4312  00538C  0008               	tblrd		*
  4313  00538E  50F5               	movf	tablat,w,c
  4314  005390  0900               	iorlw	0
  4315  005392  B4D8               	btfsc	status,2,c
  4316  005394  D00F               	goto	u5860
  4317  005396  C001  FFF6         	movff	chk_chr@str,tblptrl
  4318  00539A  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4319  00539E                     	if	0	;tblptru may be non-zero
  4320  00539E                     	endif
  4321  00539E                     	if	0	;tblptru may be non-zero
  4322  00539E                     	endif
  4323  00539E  0008               	tblrd		*
  4324  0053A0  50F5               	movf	tablat,w,c
  4325  0053A2  6E05               	movwf	??_chk_chr& (0+255),c
  4326  0053A4  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4327  0053A6  5003               	movf	chk_chr@chr,w,c
  4328  0053A8  1805               	xorwf	??_chk_chr,w,c
  4329  0053AA  E1EA               	bnz	l4721
  4330  0053AC  5004               	movf	chk_chr@chr+1,w,c
  4331  0053AE  1806               	xorwf	??_chk_chr+1,w,c
  4332  0053B0  A4D8               	btfss	status,2,c
  4333  0053B2  D7E6               	goto	l4721
  4334  0053B4                     u5860:
  4335                           
  4336                           ;ff.c: 545:  return *str;
  4337  0053B4  C001  FFF6         	movff	chk_chr@str,tblptrl
  4338  0053B8  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4339  0053BC                     	if	0	;tblptru may be non-zero
  4340  0053BC                     	endif
  4341  0053BC                     	if	0	;tblptru may be non-zero
  4342  0053BC                     	endif
  4343  0053BC  0008               	tblrd		*
  4344  0053BE  50F5               	movf	tablat,w,c
  4345  0053C0  6E01               	movwf	?_chk_chr,c
  4346  0053C2  6A02               	clrf	?_chk_chr+1,c
  4347  0053C4  0012               	return		;funcret
  4348  0053C6                     __end_of_chk_chr:
  4349                           	opt callstack 0
  4350                           
  4351 ;; *************** function _dir_register *****************
  4352 ;; Defined at:
  4353 ;;		line 1578 in file "ff.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  dp              2   42[BANK0 ] PTR struct .
  4356 ;;		 -> f_open@dj(22), 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  res             1   44[BANK0 ] enum E93
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  1    wreg      enum E93
  4361 ;; Registers used:
  4362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4368 ;;      Params:         0       2       0       0       0       0       0       0       0
  4369 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4371 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4372 ;;Total ram usage:        3 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:   12
  4375 ;; This function calls:
  4376 ;;		_dir_alloc
  4377 ;;		_mem_cpy
  4378 ;;		_mem_set
  4379 ;;		_move_window
  4380 ;; This function is called by:
  4381 ;;		_f_open
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	text10
  4386  004A8C                     __ptext10:
  4387                           	opt callstack 0
  4388  004A8C                     _dir_register:
  4389                           	opt callstack 17
  4390                           
  4391                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4392                           
  4393                           ;incstack = 0
  4394  004A8C  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4395  004A90  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4396  004A94  0E00               	movlw	0
  4397  004A96  0100               	movlb	0	; () banked
  4398  004A98  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4399  004A9A  0E01               	movlw	1
  4400  004A9C  6F82               	movwf	dir_alloc@nent& (0+255),b
  4401  004A9E  EC73  F023         	call	_dir_alloc	;wreg free
  4402  004AA2  0100               	movlb	0	; () banked
  4403  004AA4  6F8C               	movwf	dir_register@res& (0+255),b
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;ff.c: 1632:  if (res == FR_OK) {
  4407  004AA6  518C               	movf	dir_register@res& (0+255),w,b
  4408  004AA8  A4D8               	btfss	status,2,c
  4409  004AAA  D058               	goto	l5437
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4413  004AAC  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4414  004AB0  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4415  004AB4  CFDE F030          	movff	postinc2,move_window@fs
  4416  004AB8  CFDD F031          	movff	postdec2,move_window@fs+1
  4417  004ABC  EE20 F00E          	lfsr	2,14
  4418  004AC0  518A               	movf	dir_register@dp& (0+255),w,b
  4419  004AC2  26D9               	addwf	fsr2l,f,c
  4420  004AC4  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4421  004AC6  22DA               	addwfc	fsr2h,f,c
  4422  004AC8  CFDE F032          	movff	postinc2,move_window@sector
  4423  004ACC  CFDE F033          	movff	postinc2,move_window@sector+1
  4424  004AD0  CFDE F034          	movff	postinc2,move_window@sector+2
  4425  004AD4  CFDE F035          	movff	postinc2,move_window@sector+3
  4426  004AD8  EC8F  F027         	call	_move_window	;wreg free
  4427  004ADC  0100               	movlb	0	; () banked
  4428  004ADE  6F8C               	movwf	dir_register@res& (0+255),b
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;ff.c: 1634:   if (res == FR_OK) {
  4432  004AE0  518C               	movf	dir_register@res& (0+255),w,b
  4433  004AE2  A4D8               	btfss	status,2,c
  4434  004AE4  D03B               	goto	l5437
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4438  004AE6  EE20 F012          	lfsr	2,18
  4439  004AEA  518A               	movf	dir_register@dp& (0+255),w,b
  4440  004AEC  26D9               	addwf	fsr2l,f,c
  4441  004AEE  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4442  004AF0  22DA               	addwfc	fsr2h,f,c
  4443  004AF2  CFDE F001          	movff	postinc2,mem_set@dst
  4444  004AF6  CFDD F002          	movff	postdec2,mem_set@dst+1
  4445  004AFA  0E00               	movlw	0
  4446  004AFC  6E04               	movwf	mem_set@val+1,c
  4447  004AFE  0E00               	movlw	0
  4448  004B00  6E03               	movwf	mem_set@val,c
  4449  004B02  0E00               	movlw	0
  4450  004B04  6E06               	movwf	mem_set@cnt+1,c
  4451  004B06  0E20               	movlw	32
  4452  004B08  6E05               	movwf	mem_set@cnt,c
  4453  004B0A  EC95  F02A         	call	_mem_set	;wreg free
  4454                           
  4455                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4456  004B0E  0100               	movlb	0	; () banked
  4457  004B10  EE20 F012          	lfsr	2,18
  4458  004B14  518A               	movf	dir_register@dp& (0+255),w,b
  4459  004B16  26D9               	addwf	fsr2l,f,c
  4460  004B18  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4461  004B1A  22DA               	addwfc	fsr2h,f,c
  4462  004B1C  CFDE F001          	movff	postinc2,mem_cpy@dst
  4463  004B20  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4464  004B24  EE20 F014          	lfsr	2,20
  4465  004B28  518A               	movf	dir_register@dp& (0+255),w,b
  4466  004B2A  26D9               	addwf	fsr2l,f,c
  4467  004B2C  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4468  004B2E  22DA               	addwfc	fsr2h,f,c
  4469  004B30  CFDE F003          	movff	postinc2,mem_cpy@src
  4470  004B34  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4471  004B38  0E00               	movlw	0
  4472  004B3A  6E06               	movwf	mem_cpy@cnt+1,c
  4473  004B3C  0E0B               	movlw	11
  4474  004B3E  6E05               	movwf	mem_cpy@cnt,c
  4475  004B40  EC7D  F026         	call	_mem_cpy	;wreg free
  4476                           
  4477                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4478  004B44  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4479  004B48  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4480  004B4C  EE10 F004          	lfsr	1,4
  4481  004B50  50DE               	movf	postinc2,w,c
  4482  004B52  26E1               	addwf	fsr1l,f,c
  4483  004B54  50DD               	movf	postdec2,w,c
  4484  004B56  22E2               	addwfc	fsr1h,f,c
  4485  004B58  0E01               	movlw	1
  4486  004B5A  6EE7               	movwf	indf1,c
  4487  004B5C                     l5437:
  4488                           
  4489                           ;ff.c: 1644:  return res;
  4490  004B5C  0100               	movlb	0	; () banked
  4491  004B5E  518C               	movf	dir_register@res& (0+255),w,b
  4492                           
  4493                           ; BSR set to: 0
  4494  004B60  0012               	return		;funcret
  4495  004B62                     __end_of_dir_register:
  4496                           	opt callstack 0
  4497                           
  4498 ;; *************** function _mem_cpy *****************
  4499 ;; Defined at:
  4500 ;;		line 507 in file "ff.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  dst             2    0[COMRAM] PTR void 
  4503 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4504 ;;  src             2    2[COMRAM] PTR const void 
  4505 ;;		 -> f_open@sfn(12), NULL(0), STR_4(21), FatFs(558), 
  4506 ;;  cnt             2    4[COMRAM] unsigned short 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4509 ;;		 -> f_open@sfn(12), NULL(0), STR_4(21), FatFs(558), 
  4510 ;;  d               2    8[COMRAM] PTR unsigned char 
  4511 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4521 ;;      Params:         6       0       0       0       0       0       0       0       0
  4522 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4523 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4524 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4525 ;;Total ram usage:       12 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_dir_register
  4531 ;;		_f_write
  4532 ;;		_f_read
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text11
  4537  004CFA                     __ptext11:
  4538                           	opt callstack 0
  4539  004CFA                     _mem_cpy:
  4540                           	opt callstack 29
  4541                           
  4542                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;incstack = 0
  4546  004CFA  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4547  004CFE  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4548                           
  4549                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4550  004D02  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4551  004D06  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4552                           
  4553                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4554  004D0A  D02B               	goto	l5015
  4555  004D0C                     l5007:
  4556                           
  4557                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4558  004D0C  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4559  004D10  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4560  004D14  6AF8               	clrf	tblptru,c
  4561  004D16  0E07               	movlw	(high __ramtop+-1)
  4562  004D18  64F7               	cpfsgt	tblptrh,c
  4563  004D1A  D007               	bra	u6387
  4564  004D1C  0009               	tblrd		*+
  4565  004D1E  CFF5 F007          	movff	tablat,??_mem_cpy
  4566  004D22  0009               	tblrd		*+
  4567  004D24  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4568  004D28  D008               	bra	u6380
  4569  004D2A                     u6387:
  4570  004D2A  CFF6 FFE9          	movff	tblptrl,fsr0l
  4571  004D2E  CFF7 FFEA          	movff	tblptrh,fsr0h
  4572  004D32  CFEE F007          	movff	postinc0,??_mem_cpy
  4573  004D36  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4574  004D3A                     u6380:
  4575  004D3A  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4576  004D3E  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4577  004D42  C007  FFDE         	movff	??_mem_cpy,postinc2
  4578  004D46  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4579                           
  4580                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4581  004D4A  0E02               	movlw	2
  4582  004D4C  2609               	addwf	mem_cpy@d,f,c
  4583  004D4E  0E00               	movlw	0
  4584  004D50  220A               	addwfc	mem_cpy@d+1,f,c
  4585  004D52  0E02               	movlw	2
  4586  004D54  260B               	addwf	mem_cpy@s,f,c
  4587  004D56  0E00               	movlw	0
  4588  004D58  220C               	addwfc	mem_cpy@s+1,f,c
  4589                           
  4590                           ;ff.c: 515:   cnt -= sizeof (int);
  4591  004D5A  0E02               	movlw	2
  4592  004D5C  5E05               	subwf	mem_cpy@cnt,f,c
  4593  004D5E  0E00               	movlw	0
  4594  004D60  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4595  004D62                     l5015:
  4596                           
  4597                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4598  004D62  5006               	movf	mem_cpy@cnt+1,w,c
  4599  004D64  E1D3               	bnz	l5007
  4600  004D66  0E02               	movlw	2
  4601  004D68  5C05               	subwf	mem_cpy@cnt,w,c
  4602  004D6A  A0D8               	btfss	status,0,c
  4603  004D6C  D01A               	goto	l5023
  4604  004D6E  D7CE               	goto	l5007
  4605  004D70                     l5017:
  4606                           
  4607                           ;ff.c: 519:   *d++ = *s++;
  4608  004D70  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4609  004D74  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4610  004D78  6AF8               	clrf	tblptru,c
  4611  004D7A  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4612  004D7E  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4613  004D82  0E07               	movlw	(high __ramtop+-1)
  4614  004D84  64F7               	cpfsgt	tblptrh,c
  4615  004D86  D003               	bra	u6407
  4616  004D88  0008               	tblrd		*
  4617  004D8A  50F5               	movf	tablat,w,c
  4618  004D8C  D005               	bra	u6400
  4619  004D8E                     u6407:
  4620  004D8E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4621  004D92  CFF7 FFEA          	movff	tblptrh,fsr0h
  4622  004D96  50EF               	movf	indf0,w,c
  4623  004D98                     u6400:
  4624  004D98  6EDF               	movwf	indf2,c
  4625  004D9A  4A0B               	infsnz	mem_cpy@s,f,c
  4626  004D9C  2A0C               	incf	mem_cpy@s+1,f,c
  4627  004D9E  4A09               	infsnz	mem_cpy@d,f,c
  4628  004DA0  2A0A               	incf	mem_cpy@d+1,f,c
  4629  004DA2                     l5023:
  4630                           
  4631                           ;ff.c: 518:  while (cnt--)
  4632  004DA2  0605               	decf	mem_cpy@cnt,f,c
  4633  004DA4  A0D8               	btfss	status,0,c
  4634  004DA6  0606               	decf	mem_cpy@cnt+1,f,c
  4635  004DA8  2805               	incf	mem_cpy@cnt,w,c
  4636  004DAA  E1E2               	bnz	l5017
  4637  004DAC  2806               	incf	mem_cpy@cnt+1,w,c
  4638  004DAE  B4D8               	btfsc	status,2,c
  4639  004DB0  0012               	return	
  4640  004DB2  D7DE               	goto	l5017
  4641  004DB4                     __end_of_mem_cpy:
  4642                           	opt callstack 0
  4643                           
  4644 ;; *************** function _dir_alloc *****************
  4645 ;; Defined at:
  4646 ;;		line 1199 in file "ff.c"
  4647 ;; Parameters:    Size  Location     Type
  4648 ;;  dp              2   32[BANK0 ] PTR struct .
  4649 ;;		 -> f_open@dj(22), 
  4650 ;;  nent            2   34[BANK0 ] unsigned short 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  n               2   39[BANK0 ] unsigned short 
  4653 ;;  res             1   41[BANK0 ] enum E93
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      enum E93
  4656 ;; Registers used:
  4657 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4663 ;;      Params:         0       4       0       0       0       0       0       0       0
  4664 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4665 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4666 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4667 ;;Total ram usage:       10 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:   11
  4670 ;; This function calls:
  4671 ;;		_dir_next
  4672 ;;		_dir_sdi
  4673 ;;		_move_window
  4674 ;; This function is called by:
  4675 ;;		_dir_register
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text12
  4680  0046E6                     __ptext12:
  4681                           	opt callstack 0
  4682  0046E6                     _dir_alloc:
  4683                           	opt callstack 17
  4684                           
  4685                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4686                           
  4687                           ;incstack = 0
  4688  0046E6  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4689  0046EA  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4690  0046EE  0E00               	movlw	0
  4691  0046F0  6E59               	movwf	dir_sdi@idx+1,c
  4692  0046F2  0E00               	movlw	0
  4693  0046F4  6E58               	movwf	dir_sdi@idx,c
  4694  0046F6  EC29  F01B         	call	_dir_sdi	;wreg free
  4695  0046FA  0100               	movlb	0	; () banked
  4696  0046FC  6F89               	movwf	dir_alloc@res& (0+255),b
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;ff.c: 1209:  if (res == FR_OK) {
  4700  0046FE  5189               	movf	dir_alloc@res& (0+255),w,b
  4701  004700  A4D8               	btfss	status,2,c
  4702  004702  D061               	goto	u6510
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;ff.c: 1210:   n = 0;
  4706  004704  0E00               	movlw	0
  4707  004706  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4708  004708  0E00               	movlw	0
  4709  00470A  6F87               	movwf	dir_alloc@n& (0+255),b
  4710  00470C                     l5063:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4714  00470C  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4715  004710  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4716  004714  CFDE F030          	movff	postinc2,move_window@fs
  4717  004718  CFDD F031          	movff	postdec2,move_window@fs+1
  4718  00471C  EE20 F00E          	lfsr	2,14
  4719  004720  5180               	movf	dir_alloc@dp& (0+255),w,b
  4720  004722  26D9               	addwf	fsr2l,f,c
  4721  004724  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4722  004726  22DA               	addwfc	fsr2h,f,c
  4723  004728  CFDE F032          	movff	postinc2,move_window@sector
  4724  00472C  CFDE F033          	movff	postinc2,move_window@sector+1
  4725  004730  CFDE F034          	movff	postinc2,move_window@sector+2
  4726  004734  CFDE F035          	movff	postinc2,move_window@sector+3
  4727  004738  EC8F  F027         	call	_move_window	;wreg free
  4728  00473C  0100               	movlb	0	; () banked
  4729  00473E  6F89               	movwf	dir_alloc@res& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;ff.c: 1213:    if (res != FR_OK) break;
  4733  004740  5189               	movf	dir_alloc@res& (0+255),w,b
  4734  004742  A4D8               	btfss	status,2,c
  4735  004744  D040               	goto	u6510
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4739  004746  EE20 F012          	lfsr	2,18
  4740  00474A  5180               	movf	dir_alloc@dp& (0+255),w,b
  4741  00474C  26D9               	addwf	fsr2l,f,c
  4742  00474E  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4743  004750  22DA               	addwfc	fsr2h,f,c
  4744  004752  CFDE F084          	movff	postinc2,??_dir_alloc
  4745  004756  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4746  00475A  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4747  00475E  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4748  004762  0EE5               	movlw	229
  4749  004764  18DE               	xorwf	postinc2,w,c
  4750  004766  B4D8               	btfsc	status,2,c
  4751  004768  D011               	goto	u6490
  4752                           
  4753                           ; BSR set to: 0
  4754  00476A  EE20 F012          	lfsr	2,18
  4755  00476E  5180               	movf	dir_alloc@dp& (0+255),w,b
  4756  004770  26D9               	addwf	fsr2l,f,c
  4757  004772  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4758  004774  22DA               	addwfc	fsr2h,f,c
  4759  004776  CFDE F084          	movff	postinc2,??_dir_alloc
  4760  00477A  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4761  00477E  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4762  004782  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4763  004786  50DF               	movf	indf2,w,c
  4764  004788  A4D8               	btfss	status,2,c
  4765  00478A  D00A               	goto	l5077
  4766  00478C                     u6490:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;ff.c: 1215:     if (++n == nent) break;
  4770  00478C  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  4771  00478E  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  4772  004790  5182               	movf	dir_alloc@nent& (0+255),w,b
  4773  004792  1987               	xorwf	dir_alloc@n& (0+255),w,b
  4774  004794  E109               	bnz	l5079
  4775  004796  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  4776  004798  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  4777  00479A  B4D8               	btfsc	status,2,c
  4778  00479C  D014               	goto	u6510
  4779  00479E  D004               	goto	l5079
  4780  0047A0                     l5077:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;ff.c: 1217:     n = 0;
  4784  0047A0  0E00               	movlw	0
  4785  0047A2  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4786  0047A4  0E00               	movlw	0
  4787  0047A6  6F87               	movwf	dir_alloc@n& (0+255),b
  4788  0047A8                     l5079:
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;ff.c: 1219:    res = dir_next(dp, 1);
  4792  0047A8  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  4793  0047AC  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  4794  0047B0  0E00               	movlw	0
  4795  0047B2  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4796  0047B4  0E01               	movlw	1
  4797  0047B6  6F6F               	movwf	dir_next@stretch& (0+255),b
  4798  0047B8  EC0D  F014         	call	_dir_next	;wreg free
  4799  0047BC  0100               	movlb	0	; () banked
  4800  0047BE  6F89               	movwf	dir_alloc@res& (0+255),b
  4801                           
  4802                           ; BSR set to: 0
  4803                           ;ff.c: 1220:   } while (res == FR_OK);
  4804  0047C0  5189               	movf	dir_alloc@res& (0+255),w,b
  4805  0047C2  B4D8               	btfsc	status,2,c
  4806  0047C4  D7A3               	goto	l5063
  4807  0047C6                     u6510:
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  4811  0047C6  0E04               	movlw	4
  4812  0047C8  1989               	xorwf	dir_alloc@res& (0+255),w,b
  4813  0047CA  A4D8               	btfss	status,2,c
  4814  0047CC  D002               	goto	l451
  4815                           
  4816                           ; BSR set to: 0
  4817  0047CE  0E07               	movlw	7
  4818  0047D0  6F89               	movwf	dir_alloc@res& (0+255),b
  4819  0047D2                     l451:
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;ff.c: 1223:  return res;
  4823  0047D2  5189               	movf	dir_alloc@res& (0+255),w,b
  4824                           
  4825                           ; BSR set to: 0
  4826  0047D4  0012               	return		;funcret
  4827  0047D6                     __end_of_dir_alloc:
  4828                           	opt callstack 0
  4829                           
  4830 ;; *************** function _dir_sdi *****************
  4831 ;; Defined at:
  4832 ;;		line 1080 in file "ff.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  dp              2   85[COMRAM] PTR struct .
  4835 ;;		 -> f_open@dj(22), 
  4836 ;;  idx             2   87[COMRAM] unsigned short 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  clst            4   13[BANK0 ] unsigned long 
  4839 ;;  sect            4    9[BANK0 ] unsigned long 
  4840 ;;  ic              2    7[BANK0 ] unsigned short 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  1    wreg      enum E93
  4843 ;; Registers used:
  4844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 0/0
  4847 ;;		On exit  : 0/0
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4850 ;;      Params:         4       0       0       0       0       0       0       0       0
  4851 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4852 ;;      Temps:          0       7       0       0       0       0       0       0       0
  4853 ;;      Totals:         4      17       0       0       0       0       0       0       0
  4854 ;;Total ram usage:       21 bytes
  4855 ;; Hardware stack levels used:    1
  4856 ;; Hardware stack levels required when called:    9
  4857 ;; This function calls:
  4858 ;;		_clust2sect
  4859 ;;		_get_fat
  4860 ;; This function is called by:
  4861 ;;		_dir_alloc
  4862 ;;		_dir_find
  4863 ;;		_follow_path
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           	psect	text13
  4868  003652                     __ptext13:
  4869                           	opt callstack 0
  4870  003652                     _dir_sdi:
  4871                           	opt callstack 19
  4872                           
  4873                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;incstack = 0
  4877  003652  EE20 F004          	lfsr	2,4
  4878  003656  5056               	movf	dir_sdi@dp,w,c
  4879  003658  26D9               	addwf	fsr2l,f,c
  4880  00365A  5057               	movf	dir_sdi@dp+1,w,c
  4881  00365C  22DA               	addwfc	fsr2h,f,c
  4882  00365E  C058  FFDE         	movff	dir_sdi@idx,postinc2
  4883  003662  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  4884                           
  4885                           ;ff.c: 1090:  clst = dp->sclust;
  4886  003666  EE20 F006          	lfsr	2,6
  4887  00366A  5056               	movf	dir_sdi@dp,w,c
  4888  00366C  26D9               	addwf	fsr2l,f,c
  4889  00366E  5057               	movf	dir_sdi@dp+1,w,c
  4890  003670  22DA               	addwfc	fsr2h,f,c
  4891  003672  CFDE F06D          	movff	postinc2,dir_sdi@clst
  4892  003676  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  4893  00367A  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  4894  00367E  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  4895                           
  4896                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  4897  003682  0100               	movlb	0	; () banked
  4898  003684  056D               	decf	dir_sdi@clst& (0+255),w,b
  4899  003686  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4900  003688  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4901  00368A  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4902  00368C  B4D8               	btfsc	status,2,c
  4903  00368E  D014               	goto	u5880
  4904                           
  4905                           ; BSR set to: 0
  4906  003690  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4907  003694  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4908  003698  EE10 F012          	lfsr	1,18
  4909  00369C  50DE               	movf	postinc2,w,c
  4910  00369E  26E1               	addwf	fsr1l,f,c
  4911  0036A0  50DD               	movf	postdec2,w,c
  4912  0036A2  22E2               	addwfc	fsr1h,f,c
  4913  0036A4  50E6               	movf	postinc1,w,c
  4914  0036A6  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  4915  0036A8  50E6               	movf	postinc1,w,c
  4916  0036AA  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  4917  0036AC  50E6               	movf	postinc1,w,c
  4918  0036AE  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  4919  0036B0  50E6               	movf	postinc1,w,c
  4920  0036B2  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  4921  0036B4  A0D8               	btfss	status,0,c
  4922  0036B6  D002               	goto	l4741
  4923  0036B8                     u5880:
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;ff.c: 1092:   return FR_INT_ERR;
  4927  0036B8  0E02               	movlw	2
  4928  0036BA  0012               	return	
  4929  0036BC                     l4741:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  4933  0036BC  516D               	movf	dir_sdi@clst& (0+255),w,b
  4934  0036BE  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4935  0036C0  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4936  0036C2  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4937  0036C4  A4D8               	btfss	status,2,c
  4938  0036C6  D022               	goto	l4747
  4939                           
  4940                           ; BSR set to: 0
  4941  0036C8  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4942  0036CC  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4943  0036D0  CFDE F060          	movff	postinc2,??_dir_sdi
  4944  0036D4  CFDD F061          	movff	postdec2,??_dir_sdi+1
  4945  0036D8  C060  FFD9         	movff	??_dir_sdi,fsr2l
  4946  0036DC  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  4947  0036E0  0E03               	movlw	3
  4948  0036E2  18DE               	xorwf	postinc2,w,c
  4949  0036E4  A4D8               	btfss	status,2,c
  4950  0036E6  D012               	goto	l4747
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  4954  0036E8  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4955  0036EC  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4956  0036F0  EE10 F022          	lfsr	1,34
  4957  0036F4  50DE               	movf	postinc2,w,c
  4958  0036F6  26E1               	addwf	fsr1l,f,c
  4959  0036F8  50DD               	movf	postdec2,w,c
  4960  0036FA  22E2               	addwfc	fsr1h,f,c
  4961  0036FC  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  4962  003700  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  4963  003704  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  4964  003708  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  4965  00370C                     l4747:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;ff.c: 1096:  if (clst == 0) {
  4969  00370C  516D               	movf	dir_sdi@clst& (0+255),w,b
  4970  00370E  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4971  003710  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4972  003712  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4973  003714  A4D8               	btfss	status,2,c
  4974  003716  D023               	goto	l4757
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  4978  003718  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4979  00371C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4980  003720  EE10 F008          	lfsr	1,8
  4981  003724  50DE               	movf	postinc2,w,c
  4982  003726  26E1               	addwf	fsr1l,f,c
  4983  003728  50DD               	movf	postdec2,w,c
  4984  00372A  22E2               	addwfc	fsr1h,f,c
  4985  00372C  50E6               	movf	postinc1,w,c
  4986  00372E  5C58               	subwf	dir_sdi@idx,w,c
  4987  003730  50E6               	movf	postinc1,w,c
  4988  003732  5859               	subwfb	dir_sdi@idx+1,w,c
  4989  003734  B0D8               	btfsc	status,0,c
  4990  003736  D7C0               	goto	u5880
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  4994  003738  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4995  00373C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4996  003740  EE10 F022          	lfsr	1,34
  4997  003744  50DE               	movf	postinc2,w,c
  4998  003746  26E1               	addwf	fsr1l,f,c
  4999  003748  50DD               	movf	postdec2,w,c
  5000  00374A  22E2               	addwfc	fsr1h,f,c
  5001  00374C  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5002  003750  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5003  003754  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5004  003758  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5005                           
  5006                           ;ff.c: 1100:  }
  5007  00375C  D079               	goto	l4779
  5008  00375E                     l4757:
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5012  00375E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5013  003762  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5014  003766  EE10 F002          	lfsr	1,2
  5015  00376A  50DE               	movf	postinc2,w,c
  5016  00376C  26E1               	addwf	fsr1l,f,c
  5017  00376E  50DD               	movf	postdec2,w,c
  5018  003770  22E2               	addwfc	fsr1h,f,c
  5019  003772  50E7               	movf	indf1,w,c
  5020  003774  6F60               	movwf	??_dir_sdi& (0+255),b
  5021  003776  5160               	movf	??_dir_sdi& (0+255),w,b
  5022  003778  0D10               	mullw	16
  5023  00377A  CFF3 F067          	movff	prodl,dir_sdi@ic
  5024  00377E  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5025                           
  5026                           ;ff.c: 1103:   while (idx >= ic) {
  5027  003782  D046               	goto	l409
  5028  003784                     l4759:
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5032  003784  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5033  003788  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5034  00378C  CFDE F03B          	movff	postinc2,get_fat@fs
  5035  003790  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5036  003794  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5037  003798  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5038  00379C  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5039  0037A0  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5040  0037A4  EC10  F016         	call	_get_fat	;wreg free
  5041  0037A8  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5042  0037AC  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5043  0037B0  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5044  0037B4  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5045                           
  5046                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5047  0037B8  0100               	movlb	0	; () banked
  5048  0037BA  296D               	incf	dir_sdi@clst& (0+255),w,b
  5049  0037BC  E109               	bnz	l4767
  5050  0037BE  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5051  0037C0  E107               	bnz	l4767
  5052  0037C2  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5053  0037C4  E105               	bnz	l4767
  5054  0037C6  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5055  0037C8  A4D8               	btfss	status,2,c
  5056  0037CA  D002               	goto	l4767
  5057                           
  5058                           ; BSR set to: 0
  5059  0037CC  0E01               	movlw	1
  5060  0037CE  0012               	return	
  5061  0037D0                     l4767:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5065  0037D0  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5066  0037D2  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5067  0037D4  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5068  0037D6  E104               	bnz	u5940
  5069  0037D8  0E02               	movlw	2
  5070  0037DA  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5071  0037DC  A0D8               	btfss	status,0,c
  5072  0037DE  D76C               	goto	u5880
  5073  0037E0                     u5940:
  5074                           
  5075                           ; BSR set to: 0
  5076  0037E0  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5077  0037E4  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5078  0037E8  EE10 F012          	lfsr	1,18
  5079  0037EC  50DE               	movf	postinc2,w,c
  5080  0037EE  26E1               	addwf	fsr1l,f,c
  5081  0037F0  50DD               	movf	postdec2,w,c
  5082  0037F2  22E2               	addwfc	fsr1h,f,c
  5083  0037F4  50E6               	movf	postinc1,w,c
  5084  0037F6  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5085  0037F8  50E6               	movf	postinc1,w,c
  5086  0037FA  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5087  0037FC  50E6               	movf	postinc1,w,c
  5088  0037FE  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5089  003800  50E6               	movf	postinc1,w,c
  5090  003802  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5091  003804  B0D8               	btfsc	status,0,c
  5092  003806  D758               	goto	u5880
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;ff.c: 1108:    idx -= ic;
  5096  003808  5167               	movf	dir_sdi@ic& (0+255),w,b
  5097  00380A  5E58               	subwf	dir_sdi@idx,f,c
  5098  00380C  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5099  00380E  5A59               	subwfb	dir_sdi@idx+1,f,c
  5100  003810                     l409:
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;ff.c: 1103:   while (idx >= ic) {
  5104  003810  5167               	movf	dir_sdi@ic& (0+255),w,b
  5105  003812  5C58               	subwf	dir_sdi@idx,w,c
  5106  003814  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5107  003816  5859               	subwfb	dir_sdi@idx+1,w,c
  5108  003818  B0D8               	btfsc	status,0,c
  5109  00381A  D7B4               	goto	l4759
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5113  00381C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5114  003820  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5115  003824  CFDE F00D          	movff	postinc2,clust2sect@fs
  5116  003828  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5117  00382C  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5118  003830  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5119  003834  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5120  003838  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5121  00383C  ECDA  F026         	call	_clust2sect	;wreg free
  5122  003840  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5123  003844  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5124  003848  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5125  00384C  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5126  003850                     l4779:
  5127                           
  5128                           ;ff.c: 1112:  dp->clust = clst;
  5129  003850  EE20 F00A          	lfsr	2,10
  5130  003854  5056               	movf	dir_sdi@dp,w,c
  5131  003856  26D9               	addwf	fsr2l,f,c
  5132  003858  5057               	movf	dir_sdi@dp+1,w,c
  5133  00385A  22DA               	addwfc	fsr2h,f,c
  5134  00385C  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5135  003860  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5136  003864  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5137  003868  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5138                           
  5139                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5140  00386C  0100               	movlb	0	; () banked
  5141  00386E  5169               	movf	dir_sdi@sect& (0+255),w,b
  5142  003870  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5143  003872  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5144  003874  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5145  003876  B4D8               	btfsc	status,2,c
  5146  003878  D71F               	goto	u5880
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5150  00387A  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5151  00387E  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5152  003882  0E04               	movlw	4
  5153  003884  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5154  003886                     u5985:
  5155  003886  90D8               	bcf	status,0,c
  5156  003888  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5157  00388A  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5158  00388C  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5159  00388E  D7FB               	goto	u5985
  5160  003890  5160               	movf	??_dir_sdi& (0+255),w,b
  5161  003892  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5162  003894  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5163  003896  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5164  003898  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5165  00389A  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5166  00389C  0E00               	movlw	0
  5167  00389E  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5168  0038A0  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5169  0038A2  0E00               	movlw	0
  5170  0038A4  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5171  0038A6  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5172  0038A8  EE20 F00E          	lfsr	2,14
  5173  0038AC  5056               	movf	dir_sdi@dp,w,c
  5174  0038AE  26D9               	addwf	fsr2l,f,c
  5175  0038B0  5057               	movf	dir_sdi@dp+1,w,c
  5176  0038B2  22DA               	addwfc	fsr2h,f,c
  5177  0038B4  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5178  0038B8  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5179  0038BC  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5180  0038C0  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5181                           
  5182                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5183  0038C4  0E0F               	movlw	15
  5184  0038C6  1458               	andwf	dir_sdi@idx,w,c
  5185  0038C8  6F60               	movwf	??_dir_sdi& (0+255),b
  5186  0038CA  0E00               	movlw	0
  5187  0038CC  1459               	andwf	dir_sdi@idx+1,w,c
  5188  0038CE  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5189  0038D0  0E05               	movlw	5
  5190  0038D2                     u5995:
  5191  0038D2  90D8               	bcf	status,0,c
  5192  0038D4  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5193  0038D6  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5194  0038D8  2EE8               	decfsz	wreg,f,c
  5195  0038DA  D7FB               	goto	u5995
  5196  0038DC  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5197  0038E0  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5198  0038E4  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5199  0038E8  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5200  0038EC  5160               	movf	??_dir_sdi& (0+255),w,b
  5201  0038EE  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5202  0038F0  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5203  0038F2  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5204  0038F4  0E2E               	movlw	46
  5205  0038F6  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5206  0038F8  0E00               	movlw	0
  5207  0038FA  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5208  0038FC  EE20 F012          	lfsr	2,18
  5209  003900  5056               	movf	dir_sdi@dp,w,c
  5210  003902  26D9               	addwf	fsr2l,f,c
  5211  003904  5057               	movf	dir_sdi@dp+1,w,c
  5212  003906  22DA               	addwfc	fsr2h,f,c
  5213  003908  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5214  00390C  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;ff.c: 1117:  return FR_OK;
  5218  003910  0E00               	movlw	0
  5219                           
  5220                           ; BSR set to: 0
  5221  003912  0012               	return		;funcret
  5222  003914                     __end_of_dir_sdi:
  5223                           	opt callstack 0
  5224                           
  5225 ;; *************** function _dir_next *****************
  5226 ;; Defined at:
  5227 ;;		line 1128 in file "ff.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;  dp              2   13[BANK0 ] PTR struct .
  5230 ;;		 -> f_open@dj(22), 
  5231 ;;  stretch         2   15[BANK0 ] int 
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  clst            4   28[BANK0 ] unsigned long 
  5234 ;;  i               2   26[BANK0 ] unsigned short 
  5235 ;;  c               2   24[BANK0 ] unsigned short 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      enum E93
  5238 ;; Registers used:
  5239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5245 ;;      Params:         0       4       0       0       0       0       0       0       0
  5246 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5247 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5248 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5249 ;;Total ram usage:       19 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:   10
  5252 ;; This function calls:
  5253 ;;		_clust2sect
  5254 ;;		_create_chain
  5255 ;;		_get_fat
  5256 ;;		_mem_set
  5257 ;;		_sync_window
  5258 ;; This function is called by:
  5259 ;;		_dir_alloc
  5260 ;;		_dir_find
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text14
  5265  00281A                     __ptext14:
  5266                           	opt callstack 0
  5267  00281A                     _dir_next:
  5268                           	opt callstack 17
  5269                           
  5270                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;incstack = 0
  5274  00281A  0100               	movlb	0	; () banked
  5275  00281C  EE20 F004          	lfsr	2,4
  5276  002820  516D               	movf	dir_next@dp& (0+255),w,b
  5277  002822  26D9               	addwf	fsr2l,f,c
  5278  002824  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5279  002826  22DA               	addwfc	fsr2h,f,c
  5280  002828  CFDE F071          	movff	postinc2,??_dir_next
  5281  00282C  CFDD F072          	movff	postdec2,??_dir_next+1
  5282  002830  0E01               	movlw	1
  5283  002832  2571               	addwf	??_dir_next& (0+255),w,b
  5284  002834  6F7A               	movwf	dir_next@i& (0+255),b
  5285  002836  0E00               	movlw	0
  5286  002838  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5287  00283A  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5291  00283C  517A               	movf	dir_next@i& (0+255),w,b
  5292  00283E  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5293  002840  B4D8               	btfsc	status,2,c
  5294  002842  D00C               	goto	u6010
  5295                           
  5296                           ; BSR set to: 0
  5297  002844  EE20 F00E          	lfsr	2,14
  5298  002848  516D               	movf	dir_next@dp& (0+255),w,b
  5299  00284A  26D9               	addwf	fsr2l,f,c
  5300  00284C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5301  00284E  22DA               	addwfc	fsr2h,f,c
  5302  002850  50DE               	movf	postinc2,w,c
  5303  002852  10DE               	iorwf	postinc2,w,c
  5304  002854  10DE               	iorwf	postinc2,w,c
  5305  002856  10DE               	iorwf	postinc2,w,c
  5306  002858  A4D8               	btfss	status,2,c
  5307  00285A  D002               	goto	l4803
  5308  00285C                     u6010:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;ff.c: 1142:   return FR_NO_FILE;
  5312  00285C  0E04               	movlw	4
  5313  00285E  0012               	return	
  5314  002860                     l4803:
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5318  002860  0E0F               	movlw	15
  5319  002862  157A               	andwf	dir_next@i& (0+255),w,b
  5320  002864  6F71               	movwf	??_dir_next& (0+255),b
  5321  002866  0E00               	movlw	0
  5322  002868  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5323  00286A  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5324  00286C  5171               	movf	??_dir_next& (0+255),w,b
  5325  00286E  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5326  002870  A4D8               	btfss	status,2,c
  5327  002872  D1A4               	goto	l4889
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;ff.c: 1145:   dp->sect++;
  5331  002874  EE20 F00E          	lfsr	2,14
  5332  002878  516D               	movf	dir_next@dp& (0+255),w,b
  5333  00287A  26D9               	addwf	fsr2l,f,c
  5334  00287C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5335  00287E  22DA               	addwfc	fsr2h,f,c
  5336  002880  2ADE               	incf	postinc2,f,c
  5337  002882  0E00               	movlw	0
  5338  002884  22DE               	addwfc	postinc2,f,c
  5339  002886  22DE               	addwfc	postinc2,f,c
  5340  002888  22DE               	addwfc	postinc2,f,c
  5341                           
  5342                           ;ff.c: 1147:   if (!dp->clust) {
  5343  00288A  EE20 F00A          	lfsr	2,10
  5344  00288E  516D               	movf	dir_next@dp& (0+255),w,b
  5345  002890  26D9               	addwf	fsr2l,f,c
  5346  002892  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5347  002894  22DA               	addwfc	fsr2h,f,c
  5348  002896  50DE               	movf	postinc2,w,c
  5349  002898  10DE               	iorwf	postinc2,w,c
  5350  00289A  10DE               	iorwf	postinc2,w,c
  5351  00289C  10DE               	iorwf	postinc2,w,c
  5352  00289E  A4D8               	btfss	status,2,c
  5353  0028A0  D011               	goto	l4813
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5357  0028A2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5358  0028A6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5359  0028AA  EE10 F008          	lfsr	1,8
  5360  0028AE  50DE               	movf	postinc2,w,c
  5361  0028B0  26E1               	addwf	fsr1l,f,c
  5362  0028B2  50DD               	movf	postdec2,w,c
  5363  0028B4  22E2               	addwfc	fsr1h,f,c
  5364  0028B6  50E6               	movf	postinc1,w,c
  5365  0028B8  5D7A               	subwf	dir_next@i& (0+255),w,b
  5366  0028BA  50E6               	movf	postinc1,w,c
  5367  0028BC  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5368  0028BE  B0D8               	btfsc	status,0,c
  5369  0028C0  D7CD               	goto	u6010
  5370  0028C2  D17C               	goto	l4889
  5371  0028C4                     l4813:
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5375  0028C4  C07A  F071         	movff	dir_next@i,??_dir_next
  5376  0028C8  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5377  0028CC  0E04               	movlw	4
  5378  0028CE  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5379  0028D0                     u6055:
  5380  0028D0  90D8               	bcf	status,0,c
  5381  0028D2  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5382  0028D4  3371               	rrcf	??_dir_next& (0+255),f,b
  5383  0028D6  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5384  0028D8  D7FB               	goto	u6055
  5385  0028DA  0EFF               	movlw	255
  5386  0028DC  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5387  0028DE  0EFF               	movlw	255
  5388  0028E0  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5389  0028E2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5390  0028E6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5391  0028EA  EE10 F002          	lfsr	1,2
  5392  0028EE  50DE               	movf	postinc2,w,c
  5393  0028F0  26E1               	addwf	fsr1l,f,c
  5394  0028F2  50DD               	movf	postdec2,w,c
  5395  0028F4  22E2               	addwfc	fsr1h,f,c
  5396  0028F6  50E7               	movf	indf1,w,c
  5397  0028F8  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5398  0028FA  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5399  0028FC  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5400  0028FE  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5401  002900  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5402  002902  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5403  002904  5171               	movf	??_dir_next& (0+255),w,b
  5404  002906  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5405  002908  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5406  00290A  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5407  00290C  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5408  00290E  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5409  002910  A4D8               	btfss	status,2,c
  5410  002912  D154               	goto	l4889
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5414  002914  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5415  002918  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5416  00291C  CFDE F03B          	movff	postinc2,get_fat@fs
  5417  002920  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5418  002924  EE20 F00A          	lfsr	2,10
  5419  002928  516D               	movf	dir_next@dp& (0+255),w,b
  5420  00292A  26D9               	addwf	fsr2l,f,c
  5421  00292C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5422  00292E  22DA               	addwfc	fsr2h,f,c
  5423  002930  CFDE F03D          	movff	postinc2,get_fat@clst
  5424  002934  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5425  002938  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5426  00293C  CFDE F040          	movff	postinc2,get_fat@clst+3
  5427  002940  EC10  F016         	call	_get_fat	;wreg free
  5428  002944  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5429  002948  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5430  00294C  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5431  002950  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5432                           
  5433                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5434  002954  0100               	movlb	0	; () banked
  5435  002956  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5436  002958  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5437  00295A  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5438  00295C  E106               	bnz	l4823
  5439  00295E  0E02               	movlw	2
  5440  002960  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5441  002962  B0D8               	btfsc	status,0,c
  5442  002964  D002               	goto	l4823
  5443  002966                     u6070:
  5444                           
  5445                           ; BSR set to: 0
  5446  002966  0E02               	movlw	2
  5447  002968  0012               	return	
  5448  00296A                     l4823:
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5452  00296A  297C               	incf	dir_next@clst& (0+255),w,b
  5453  00296C  E109               	bnz	l4829
  5454  00296E  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5455  002970  E107               	bnz	l4829
  5456  002972  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5457  002974  E105               	bnz	l4829
  5458  002976  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5459  002978  A4D8               	btfss	status,2,c
  5460  00297A  D002               	goto	l4829
  5461  00297C                     u6080:
  5462  00297C  0E01               	movlw	1
  5463  00297E  0012               	return	
  5464  002980                     l4829:
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5468  002980  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5469  002984  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5470  002988  EE10 F012          	lfsr	1,18
  5471  00298C  50DE               	movf	postinc2,w,c
  5472  00298E  26E1               	addwf	fsr1l,f,c
  5473  002990  50DD               	movf	postdec2,w,c
  5474  002992  22E2               	addwfc	fsr1h,f,c
  5475  002994  50E6               	movf	postinc1,w,c
  5476  002996  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5477  002998  50E6               	movf	postinc1,w,c
  5478  00299A  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5479  00299C  50E6               	movf	postinc1,w,c
  5480  00299E  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5481  0029A0  50E6               	movf	postinc1,w,c
  5482  0029A2  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5483  0029A4  A0D8               	btfss	status,0,c
  5484  0029A6  D0DB               	goto	l4885
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5488  0029A8  516F               	movf	dir_next@stretch& (0+255),w,b
  5489  0029AA  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5490  0029AC  B4D8               	btfsc	status,2,c
  5491  0029AE  D756               	goto	u6010
  5492                           
  5493                           ; BSR set to: 0
  5494                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5495  0029B0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5496  0029B4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5497  0029B8  CFDE F056          	movff	postinc2,create_chain@fs
  5498  0029BC  CFDD F057          	movff	postdec2,create_chain@fs+1
  5499  0029C0  EE20 F00A          	lfsr	2,10
  5500  0029C4  516D               	movf	dir_next@dp& (0+255),w,b
  5501  0029C6  26D9               	addwf	fsr2l,f,c
  5502  0029C8  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5503  0029CA  22DA               	addwfc	fsr2h,f,c
  5504  0029CC  CFDE F058          	movff	postinc2,create_chain@clst
  5505  0029D0  CFDE F059          	movff	postinc2,create_chain@clst+1
  5506  0029D4  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5507  0029D8  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5508  0029DC  ECAC  F019         	call	_create_chain	;wreg free
  5509  0029E0  C056  F07C         	movff	?_create_chain,dir_next@clst
  5510  0029E4  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5511  0029E8  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5512  0029EC  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5513                           
  5514                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5515  0029F0  0100               	movlb	0	; () banked
  5516  0029F2  517C               	movf	dir_next@clst& (0+255),w,b
  5517  0029F4  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5518  0029F6  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5519  0029F8  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5520  0029FA  A4D8               	btfss	status,2,c
  5521  0029FC  D002               	goto	l4845
  5522                           
  5523                           ; BSR set to: 0
  5524  0029FE  0E07               	movlw	7
  5525  002A00  0012               	return	
  5526  002A02                     l4845:
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5530  002A02  057C               	decf	dir_next@clst& (0+255),w,b
  5531  002A04  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5532  002A06  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5533  002A08  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5534  002A0A  B4D8               	btfsc	status,2,c
  5535  002A0C  D7AC               	goto	u6070
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5539  002A0E  297C               	incf	dir_next@clst& (0+255),w,b
  5540  002A10  E107               	bnz	l4857
  5541  002A12  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5542  002A14  E105               	bnz	l4857
  5543  002A16  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5544  002A18  E103               	bnz	l4857
  5545  002A1A  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5546  002A1C  B4D8               	btfsc	status,2,c
  5547  002A1E  D7AE               	goto	u6080
  5548  002A20                     l4857:
  5549                           
  5550                           ; BSR set to: 0
  5551                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5552  002A20  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5553  002A24  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5554  002A28  CFDE F01B          	movff	postinc2,sync_window@fs
  5555  002A2C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5556  002A30  EC56  F020         	call	_sync_window	;wreg free
  5557  002A34  0900               	iorlw	0
  5558  002A36  A4D8               	btfss	status,2,c
  5559  002A38  D7A1               	goto	u6080
  5560                           
  5561                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5562  002A3A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5563  002A3E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5564  002A42  CFDE F071          	movff	postinc2,??_dir_next
  5565  002A46  CFDD F072          	movff	postdec2,??_dir_next+1
  5566  002A4A  0E2E               	movlw	46
  5567  002A4C  0100               	movlb	0	; () banked
  5568  002A4E  2571               	addwf	??_dir_next& (0+255),w,b
  5569  002A50  6E01               	movwf	mem_set@dst,c
  5570  002A52  0E00               	movlw	0
  5571  002A54  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5572  002A56  6E02               	movwf	mem_set@dst+1,c
  5573  002A58  0E00               	movlw	0
  5574  002A5A  6E04               	movwf	mem_set@val+1,c
  5575  002A5C  0E00               	movlw	0
  5576  002A5E  6E03               	movwf	mem_set@val,c
  5577  002A60  0E02               	movlw	2
  5578  002A62  6E06               	movwf	mem_set@cnt+1,c
  5579  002A64  0E00               	movlw	0
  5580  002A66  6E05               	movwf	mem_set@cnt,c
  5581  002A68  EC95  F02A         	call	_mem_set	;wreg free
  5582                           
  5583                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5584  002A6C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5585  002A70  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5586  002A74  CFDE F00D          	movff	postinc2,clust2sect@fs
  5587  002A78  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5588  002A7C  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5589  002A80  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5590  002A84  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5591  002A88  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5592  002A8C  ECDA  F026         	call	_clust2sect	;wreg free
  5593  002A90  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5594  002A94  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5595  002A98  EE10 F02A          	lfsr	1,42
  5596  002A9C  50DE               	movf	postinc2,w,c
  5597  002A9E  26E1               	addwf	fsr1l,f,c
  5598  002AA0  50DD               	movf	postdec2,w,c
  5599  002AA2  22E2               	addwfc	fsr1h,f,c
  5600  002AA4  C00D  FFE6         	movff	?_clust2sect,postinc1
  5601  002AA8  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5602  002AAC  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5603  002AB0  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5604                           
  5605                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5606  002AB4  0E00               	movlw	0
  5607  002AB6  0100               	movlb	0	; () banked
  5608  002AB8  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5609  002ABA  0E00               	movlw	0
  5610  002ABC  6F78               	movwf	dir_next@c& (0+255),b
  5611  002ABE  D02B               	goto	l4881
  5612  002AC0                     l4869:
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5616  002AC0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5617  002AC4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5618  002AC8  EE10 F004          	lfsr	1,4
  5619  002ACC  50DE               	movf	postinc2,w,c
  5620  002ACE  26E1               	addwf	fsr1l,f,c
  5621  002AD0  50DD               	movf	postdec2,w,c
  5622  002AD2  22E2               	addwfc	fsr1h,f,c
  5623  002AD4  0E01               	movlw	1
  5624  002AD6  6EE7               	movwf	indf1,c
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5628  002AD8  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5629  002ADC  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5630  002AE0  CFDE F01B          	movff	postinc2,sync_window@fs
  5631  002AE4  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5632  002AE8  EC56  F020         	call	_sync_window	;wreg free
  5633  002AEC  0900               	iorlw	0
  5634  002AEE  A4D8               	btfss	status,2,c
  5635  002AF0  D745               	goto	u6080
  5636                           
  5637                           ;ff.c: 1170:       dp->fs->winsect++;
  5638  002AF2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5639  002AF6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5640  002AFA  EE10 F02A          	lfsr	1,42
  5641  002AFE  50DE               	movf	postinc2,w,c
  5642  002B00  26E1               	addwf	fsr1l,f,c
  5643  002B02  50DD               	movf	postdec2,w,c
  5644  002B04  22E2               	addwfc	fsr1h,f,c
  5645  002B06  2AE6               	incf	postinc1,f,c
  5646  002B08  0E00               	movlw	0
  5647  002B0A  22E6               	addwfc	postinc1,f,c
  5648  002B0C  22E6               	addwfc	postinc1,f,c
  5649  002B0E  22E6               	addwfc	postinc1,f,c
  5650                           
  5651                           ;ff.c: 1171:      }
  5652  002B10  0100               	movlb	0	; () banked
  5653  002B12  4B78               	infsnz	dir_next@c& (0+255),f,b
  5654  002B14  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5655  002B16                     l4881:
  5656                           
  5657                           ; BSR set to: 0
  5658  002B16  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5659  002B1A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5660  002B1E  EE10 F002          	lfsr	1,2
  5661  002B22  50DE               	movf	postinc2,w,c
  5662  002B24  26E1               	addwf	fsr1l,f,c
  5663  002B26  50DD               	movf	postdec2,w,c
  5664  002B28  22E2               	addwfc	fsr1h,f,c
  5665  002B2A  50E7               	movf	indf1,w,c
  5666  002B2C  6F71               	movwf	??_dir_next& (0+255),b
  5667  002B2E  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5668  002B30  5171               	movf	??_dir_next& (0+255),w,b
  5669  002B32  5D78               	subwf	dir_next@c& (0+255),w,b
  5670  002B34  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5671  002B36  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5672  002B38  A0D8               	btfss	status,0,c
  5673  002B3A  D7C2               	goto	l4869
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5677  002B3C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5678  002B40  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5679  002B44  EE10 F02A          	lfsr	1,42
  5680  002B48  50DE               	movf	postinc2,w,c
  5681  002B4A  26E1               	addwf	fsr1l,f,c
  5682  002B4C  50DD               	movf	postdec2,w,c
  5683  002B4E  22E2               	addwfc	fsr1h,f,c
  5684  002B50  5178               	movf	dir_next@c& (0+255),w,b
  5685  002B52  5EE6               	subwf	postinc1,f,c
  5686  002B54  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5687  002B56  5AE6               	subwfb	postinc1,f,c
  5688  002B58  0E00               	movlw	0
  5689  002B5A  5AE6               	subwfb	postinc1,f,c
  5690  002B5C  5AE6               	subwfb	postinc1,f,c
  5691  002B5E                     l4885:
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;ff.c: 1178:     dp->clust = clst;
  5695  002B5E  EE20 F00A          	lfsr	2,10
  5696  002B62  516D               	movf	dir_next@dp& (0+255),w,b
  5697  002B64  26D9               	addwf	fsr2l,f,c
  5698  002B66  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5699  002B68  22DA               	addwfc	fsr2h,f,c
  5700  002B6A  C07C  FFDE         	movff	dir_next@clst,postinc2
  5701  002B6E  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5702  002B72  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5703  002B76  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5707  002B7A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5708  002B7E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5709  002B82  CFDE F00D          	movff	postinc2,clust2sect@fs
  5710  002B86  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5711  002B8A  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5712  002B8E  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5713  002B92  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5714  002B96  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5715  002B9A  ECDA  F026         	call	_clust2sect	;wreg free
  5716  002B9E  0100               	movlb	0	; () banked
  5717  002BA0  EE20 F00E          	lfsr	2,14
  5718  002BA4  516D               	movf	dir_next@dp& (0+255),w,b
  5719  002BA6  26D9               	addwf	fsr2l,f,c
  5720  002BA8  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5721  002BAA  22DA               	addwfc	fsr2h,f,c
  5722  002BAC  C00D  FFDE         	movff	?_clust2sect,postinc2
  5723  002BB0  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5724  002BB4  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5725  002BB8  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5726  002BBC                     l4889:
  5727                           
  5728                           ; BSR set to: 0
  5729                           ;ff.c: 1184:  dp->index = (WORD)i;
  5730  002BBC  EE20 F004          	lfsr	2,4
  5731  002BC0  516D               	movf	dir_next@dp& (0+255),w,b
  5732  002BC2  26D9               	addwf	fsr2l,f,c
  5733  002BC4  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5734  002BC6  22DA               	addwfc	fsr2h,f,c
  5735  002BC8  C07A  FFDE         	movff	dir_next@i,postinc2
  5736  002BCC  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5740  002BD0  0E0F               	movlw	15
  5741  002BD2  157A               	andwf	dir_next@i& (0+255),w,b
  5742  002BD4  6F71               	movwf	??_dir_next& (0+255),b
  5743  002BD6  0E00               	movlw	0
  5744  002BD8  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5745  002BDA  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5746  002BDC  0E05               	movlw	5
  5747  002BDE                     u6175:
  5748  002BDE  90D8               	bcf	status,0,c
  5749  002BE0  3771               	rlcf	??_dir_next& (0+255),f,b
  5750  002BE2  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5751  002BE4  2EE8               	decfsz	wreg,f,c
  5752  002BE6  D7FB               	goto	u6175
  5753  002BE8  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5754  002BEC  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5755  002BF0  CFDE F073          	movff	postinc2,??_dir_next+2
  5756  002BF4  CFDD F074          	movff	postdec2,??_dir_next+3
  5757  002BF8  5171               	movf	??_dir_next& (0+255),w,b
  5758  002BFA  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5759  002BFC  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5760  002BFE  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5761  002C00  0E2E               	movlw	46
  5762  002C02  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5763  002C04  0E00               	movlw	0
  5764  002C06  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5765  002C08  EE20 F012          	lfsr	2,18
  5766  002C0C  516D               	movf	dir_next@dp& (0+255),w,b
  5767  002C0E  26D9               	addwf	fsr2l,f,c
  5768  002C10  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5769  002C12  22DA               	addwfc	fsr2h,f,c
  5770  002C14  C073  FFDE         	movff	??_dir_next+2,postinc2
  5771  002C18  C074  FFDD         	movff	??_dir_next+3,postdec2
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;ff.c: 1187:  return FR_OK;
  5775  002C1C  0E00               	movlw	0
  5776  002C1E  0012               	return		;funcret
  5777  002C20                     __end_of_dir_next:
  5778                           	opt callstack 0
  5779                           
  5780 ;; *************** function _f_mount *****************
  5781 ;; Defined at:
  5782 ;;		line 2402 in file "ff.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  fs              2   81[COMRAM] PTR struct .
  5785 ;;		 -> NULL(0), FatFs(558), 
  5786 ;;  path            2   83[COMRAM] PTR const unsigned char 
  5787 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5788 ;;  opt             1   85[COMRAM] unsigned char 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  vol             2   91[COMRAM] int 
  5791 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  5792 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5793 ;;  cfs             2   87[COMRAM] PTR struct .
  5794 ;;		 -> NULL(0), FatFs(558), 
  5795 ;;  res             1   86[COMRAM] enum E93
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      enum E4918
  5798 ;; Registers used:
  5799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5805 ;;      Params:         5       0       0       0       0       0       0       0       0
  5806 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5808 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5809 ;;Total ram usage:       12 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:   10
  5812 ;; This function calls:
  5813 ;;		_find_volume
  5814 ;;		_get_ldnumber
  5815 ;; This function is called by:
  5816 ;;		_main
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text15
  5821  004E6E                     __ptext15:
  5822                           	opt callstack 0
  5823  004E6E                     _f_mount:
  5824                           	opt callstack 20
  5825                           
  5826                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  5827                           
  5828                           ;incstack = 0
  5829  004E6E  C054  F05A         	movff	f_mount@path,f_mount@rp
  5830  004E72  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  5831                           
  5832                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  5833  004E76  0E5A               	movlw	low f_mount@rp
  5834  004E78  6E01               	movwf	get_ldnumber@path,c
  5835  004E7A  0E00               	movlw	high f_mount@rp
  5836  004E7C  6E02               	movwf	get_ldnumber@path+1,c
  5837  004E7E  ECD7  F024         	call	_get_ldnumber	;wreg free
  5838  004E82  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  5839  004E86  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  5840                           
  5841                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  5842  004E8A  AE5D               	btfss	f_mount@vol+1,7,c
  5843  004E8C  D002               	goto	l5907
  5844  004E8E  0E0B               	movlw	11
  5845  004E90  0012               	return	
  5846  004E92                     l5907:
  5847                           
  5848                           ;ff.c: 2416:  cfs = FatFs[vol];
  5849  004E92  90D8               	bcf	status,0,c
  5850  004E94  345C               	rlcf	f_mount@vol,w,c
  5851  004E96  6ED9               	movwf	fsr2l,c
  5852  004E98  345D               	rlcf	f_mount@vol+1,w,c
  5853  004E9A  6EDA               	movwf	fsr2h,c
  5854  004E9C  0ED4               	movlw	low ff@FatFs
  5855  004E9E  26D9               	addwf	fsr2l,f,c
  5856  004EA0  0E00               	movlw	high ff@FatFs
  5857  004EA2  22DA               	addwfc	fsr2h,f,c
  5858  004EA4  CFDE F058          	movff	postinc2,f_mount@cfs
  5859  004EA8  CFDD F059          	movff	postdec2,f_mount@cfs+1
  5860                           
  5861                           ;ff.c: 2418:  if (cfs) {
  5862  004EAC  5058               	movf	f_mount@cfs,w,c
  5863  004EAE  1059               	iorwf	f_mount@cfs+1,w,c
  5864  004EB0  B4D8               	btfsc	status,2,c
  5865  004EB2  D006               	goto	l5913
  5866                           
  5867                           ;ff.c: 2425:   cfs->fs_type = 0;
  5868  004EB4  C058  FFD9         	movff	f_mount@cfs,fsr2l
  5869  004EB8  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  5870  004EBC  0E00               	movlw	0
  5871  004EBE  6EDF               	movwf	indf2,c
  5872  004EC0                     l5913:
  5873                           
  5874                           ;ff.c: 2428:  if (fs) {
  5875  004EC0  5052               	movf	f_mount@fs,w,c
  5876  004EC2  1053               	iorwf	f_mount@fs+1,w,c
  5877  004EC4  B4D8               	btfsc	status,2,c
  5878  004EC6  D006               	goto	l5917
  5879                           
  5880                           ;ff.c: 2429:   fs->fs_type = 0;
  5881  004EC8  C052  FFD9         	movff	f_mount@fs,fsr2l
  5882  004ECC  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  5883  004ED0  0E00               	movlw	0
  5884  004ED2  6EDF               	movwf	indf2,c
  5885  004ED4                     l5917:
  5886                           
  5887                           ;ff.c: 2434:  FatFs[vol] = fs;
  5888  004ED4  90D8               	bcf	status,0,c
  5889  004ED6  345C               	rlcf	f_mount@vol,w,c
  5890  004ED8  6ED9               	movwf	fsr2l,c
  5891  004EDA  345D               	rlcf	f_mount@vol+1,w,c
  5892  004EDC  6EDA               	movwf	fsr2h,c
  5893  004EDE  0ED4               	movlw	low ff@FatFs
  5894  004EE0  26D9               	addwf	fsr2l,f,c
  5895  004EE2  0E00               	movlw	high ff@FatFs
  5896  004EE4  22DA               	addwfc	fsr2h,f,c
  5897  004EE6  C052  FFDE         	movff	f_mount@fs,postinc2
  5898  004EEA  C053  FFDD         	movff	f_mount@fs+1,postdec2
  5899                           
  5900                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  5901  004EEE  5052               	movf	f_mount@fs,w,c
  5902  004EF0  1053               	iorwf	f_mount@fs+1,w,c
  5903  004EF2  B4D8               	btfsc	status,2,c
  5904  004EF4  D003               	goto	u7900
  5905  004EF6  0456               	decf	f_mount@opt,w,c
  5906  004EF8  B4D8               	btfsc	status,2,c
  5907  004EFA  D002               	goto	l5927
  5908  004EFC                     u7900:
  5909  004EFC  0E00               	movlw	0
  5910  004EFE  0012               	return	
  5911  004F00                     l5927:
  5912                           
  5913                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  5914  004F00  0E52               	movlw	low f_mount@fs
  5915  004F02  6E45               	movwf	find_volume@rfs,c
  5916  004F04  0E00               	movlw	high f_mount@fs
  5917  004F06  6E46               	movwf	find_volume@rfs+1,c
  5918  004F08  0E54               	movlw	low f_mount@path
  5919  004F0A  6E47               	movwf	find_volume@path,c
  5920  004F0C  0E00               	movlw	high f_mount@path
  5921  004F0E  6E48               	movwf	find_volume@path+1,c
  5922  004F10  0E00               	movlw	0
  5923  004F12  6E49               	movwf	find_volume@wmode,c
  5924  004F14  EC19  F004         	call	_find_volume	;wreg free
  5925  004F18  6E57               	movwf	f_mount@res,c
  5926                           
  5927                           ;ff.c: 2439:  return res;
  5928  004F1A  5057               	movf	f_mount@res,w,c
  5929  004F1C  0012               	return		;funcret
  5930  004F1E                     __end_of_f_mount:
  5931                           	opt callstack 0
  5932                           
  5933 ;; *************** function _find_volume *****************
  5934 ;; Defined at:
  5935 ;;		line 2203 in file "ff.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  5938 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  5939 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  5940 ;;		 -> f_open@path(2), f_mount@path(2), 
  5941 ;;  wmode           1   72[COMRAM] unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  br             16    0[BANK0 ] unsigned long [4]
  5944 ;;  bsect           4   49[BANK0 ] unsigned long 
  5945 ;;  fasize          4   45[BANK0 ] unsigned long 
  5946 ;;  nclst           4   40[BANK0 ] unsigned long 
  5947 ;;  tsect           4   36[BANK0 ] unsigned long 
  5948 ;;  sysect          4   28[BANK0 ] unsigned long 
  5949 ;;  szbfat          4   22[BANK0 ] unsigned long 
  5950 ;;  fs              2   56[BANK0 ] PTR struct .
  5951 ;;		 -> NULL(0), FatFs(558), 
  5952 ;;  i               2   53[BANK0 ] unsigned short 
  5953 ;;  nrsv            2   34[BANK0 ] unsigned short 
  5954 ;;  vol             2   32[BANK0 ] int 
  5955 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  5956 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  5957 ;;  fmt             1   55[BANK0 ] unsigned char 
  5958 ;;  stat            1   44[BANK0 ] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      enum E93
  5961 ;; Registers used:
  5962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5968 ;;      Params:         5       0       0       0       0       0       0       0       0
  5969 ;;      Locals:         0      58       0       0       0       0       0       0       0
  5970 ;;      Temps:          8       0       0       0       0       0       0       0       0
  5971 ;;      Totals:        13      58       0       0       0       0       0       0       0
  5972 ;;Total ram usage:       71 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    9
  5975 ;; This function calls:
  5976 ;;		___lldiv
  5977 ;;		___lmul
  5978 ;;		_check_fs
  5979 ;;		_disk_initialize
  5980 ;;		_disk_status
  5981 ;;		_get_ldnumber
  5982 ;;		_move_window
  5983 ;; This function is called by:
  5984 ;;		_f_mount
  5985 ;;		_f_open
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           	psect	text16
  5990  000832                     __ptext16:
  5991                           	opt callstack 0
  5992  000832                     _find_volume:
  5993                           	opt callstack 20
  5994                           
  5995                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  5996                           
  5997                           ;incstack = 0
  5998  000832  C045  FFD9         	movff	find_volume@rfs,fsr2l
  5999  000836  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6000  00083A  0E00               	movlw	0
  6001  00083C  6EDE               	movwf	postinc2,c
  6002  00083E  0E00               	movlw	0
  6003  000840  6EDD               	movwf	postdec2,c
  6004                           
  6005                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6006  000842  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6007  000846  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6008  00084A  ECD7  F024         	call	_get_ldnumber	;wreg free
  6009  00084E  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6010  000852  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6011                           
  6012                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6013  000856  0100               	movlb	0	; () banked
  6014  000858  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6015  00085A  D002               	goto	l5505
  6016                           
  6017                           ; BSR set to: 0
  6018  00085C  0E0B               	movlw	11
  6019  00085E  0012               	return	
  6020  000860                     l5505:
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;ff.c: 2224:  fs = FatFs[vol];
  6024  000860  90D8               	bcf	status,0,c
  6025  000862  3580               	rlcf	find_volume@vol& (0+255),w,b
  6026  000864  6ED9               	movwf	fsr2l,c
  6027  000866  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6028  000868  6EDA               	movwf	fsr2h,c
  6029  00086A  0ED4               	movlw	low ff@FatFs
  6030  00086C  26D9               	addwf	fsr2l,f,c
  6031  00086E  0E00               	movlw	high ff@FatFs
  6032  000870  22DA               	addwfc	fsr2h,f,c
  6033  000872  CFDE F098          	movff	postinc2,find_volume@fs
  6034  000876  CFDD F099          	movff	postdec2,find_volume@fs+1
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6038  00087A  5198               	movf	find_volume@fs& (0+255),w,b
  6039  00087C  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6040  00087E  A4D8               	btfss	status,2,c
  6041  000880  D002               	goto	l5513
  6042                           
  6043                           ; BSR set to: 0
  6044  000882  0E0C               	movlw	12
  6045  000884  0012               	return	
  6046  000886                     l5513:
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;ff.c: 2228:  *rfs = fs;
  6050  000886  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6051  00088A  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6052  00088E  C098  FFDE         	movff	find_volume@fs,postinc2
  6053  000892  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;ff.c: 2230:  if (fs->fs_type) {
  6057  000896  C098  FFD9         	movff	find_volume@fs,fsr2l
  6058  00089A  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6059  00089E  50DF               	movf	indf2,w,c
  6060  0008A0  B4D8               	btfsc	status,2,c
  6061  0008A2  D015               	goto	l5533
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6065  0008A4  EE20 F001          	lfsr	2,1
  6066  0008A8  5198               	movf	find_volume@fs& (0+255),w,b
  6067  0008AA  26D9               	addwf	fsr2l,f,c
  6068  0008AC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6069  0008AE  22DA               	addwfc	fsr2h,f,c
  6070  0008B0  50DF               	movf	indf2,w,c
  6071  0008B2  ECE2  F02A         	call	_disk_status
  6072  0008B6  0100               	movlb	0	; () banked
  6073  0008B8  6F8C               	movwf	find_volume@stat& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6077  0008BA  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6078  0008BC  D008               	goto	l5533
  6079                           
  6080                           ; BSR set to: 0
  6081  0008BE  5049               	movf	find_volume@wmode,w,c
  6082  0008C0  A4D8               	btfss	status,2,c
  6083                           
  6084                           ; BSR set to: 0
  6085  0008C2  A58C               	btfss	find_volume@stat& (0+255),2,b
  6086  0008C4  D002               	goto	l5529
  6087  0008C6                     u7330:
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6091  0008C6  0E0A               	movlw	10
  6092  0008C8  0012               	return	
  6093  0008CA                     l5529:
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;ff.c: 2235:    return FR_OK;
  6097  0008CA  0E00               	movlw	0
  6098  0008CC  0012               	return	
  6099  0008CE                     l5533:
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;ff.c: 2242:  fs->fs_type = 0;
  6103  0008CE  C098  FFD9         	movff	find_volume@fs,fsr2l
  6104  0008D2  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6105  0008D6  0E00               	movlw	0
  6106  0008D8  6EDF               	movwf	indf2,c
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6110  0008DA  EE20 F001          	lfsr	2,1
  6111  0008DE  5198               	movf	find_volume@fs& (0+255),w,b
  6112  0008E0  26D9               	addwf	fsr2l,f,c
  6113  0008E2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6114  0008E4  22DA               	addwfc	fsr2h,f,c
  6115  0008E6  C080  FFDF         	movff	find_volume@vol,indf2
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6119  0008EA  EE20 F001          	lfsr	2,1
  6120  0008EE  5198               	movf	find_volume@fs& (0+255),w,b
  6121  0008F0  26D9               	addwf	fsr2l,f,c
  6122  0008F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6123  0008F4  22DA               	addwfc	fsr2h,f,c
  6124  0008F6  50DF               	movf	indf2,w,c
  6125  0008F8  ECCC  F01D         	call	_disk_initialize
  6126  0008FC  0100               	movlb	0	; () banked
  6127  0008FE  6F8C               	movwf	find_volume@stat& (0+255),b
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;ff.c: 2245:  if (stat & 0x01)
  6131  000900  A18C               	btfss	find_volume@stat& (0+255),0,b
  6132  000902  D002               	goto	l5545
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;ff.c: 2246:   return FR_NOT_READY;
  6136  000904  0E03               	movlw	3
  6137  000906  0012               	return	
  6138  000908                     l5545:
  6139                           
  6140                           ; BSR set to: 0
  6141  000908  5049               	movf	find_volume@wmode,w,c
  6142  00090A  B4D8               	btfsc	status,2,c
  6143  00090C  D002               	goto	l5553
  6144                           
  6145                           ; BSR set to: 0
  6146  00090E  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6147  000910  D7DA               	goto	u7330
  6148  000912                     l5553:
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;ff.c: 2254:  bsect = 0;
  6152  000912  0E00               	movlw	0
  6153  000914  6F91               	movwf	find_volume@bsect& (0+255),b
  6154  000916  0E00               	movlw	0
  6155  000918  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6156  00091A  0E00               	movlw	0
  6157  00091C  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6158  00091E  0E00               	movlw	0
  6159  000920  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6163  000922  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6164  000926  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6165  00092A  0E00               	movlw	0
  6166  00092C  6E3D               	movwf	check_fs@sect,c
  6167  00092E  0E00               	movlw	0
  6168  000930  6E3E               	movwf	check_fs@sect+1,c
  6169  000932  0E00               	movlw	0
  6170  000934  6E3F               	movwf	check_fs@sect+2,c
  6171  000936  0E00               	movlw	0
  6172  000938  6E40               	movwf	check_fs@sect+3,c
  6173  00093A  EC61  F024         	call	_check_fs	;wreg free
  6174  00093E  0100               	movlb	0	; () banked
  6175  000940  6F97               	movwf	find_volume@fmt& (0+255),b
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6179  000942  0597               	decf	find_volume@fmt& (0+255),w,b
  6180  000944  A4D8               	btfss	status,2,c
  6181  000946  D0AE               	goto	u7430
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6185  000948  0E00               	movlw	0
  6186  00094A  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6187  00094C  0E00               	movlw	0
  6188  00094E  6F95               	movwf	find_volume@i& (0+255),b
  6189  000950                     l5565:
  6190                           
  6191                           ; BSR set to: 0
  6192  000950  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6193  000952  E15A               	bnz	l5581
  6194  000954  0E04               	movlw	4
  6195  000956  5D95               	subwf	find_volume@i& (0+255),w,b
  6196  000958  B0D8               	btfsc	status,0,c
  6197  00095A  D056               	goto	l5581
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6201  00095C  C095  F04A         	movff	find_volume@i,??_find_volume
  6202  000960  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6203  000964  3A4A               	swapf	??_find_volume,f,c
  6204  000966  3A4B               	swapf	??_find_volume+1,f,c
  6205  000968  0EF0               	movlw	240
  6206  00096A  164B               	andwf	??_find_volume+1,f,c
  6207  00096C  504A               	movf	??_find_volume,w,c
  6208  00096E  0B0F               	andlw	15
  6209  000970  124B               	iorwf	??_find_volume+1,f,c
  6210  000972  0EF0               	movlw	240
  6211  000974  164A               	andwf	??_find_volume,f,c
  6212  000976  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6213  00097A  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6214  00097E  504A               	movf	??_find_volume,w,c
  6215  000980  264C               	addwf	??_find_volume+2,f,c
  6216  000982  504B               	movf	??_find_volume+1,w,c
  6217  000984  224D               	addwfc	??_find_volume+3,f,c
  6218  000986  0EEC               	movlw	236
  6219  000988  244C               	addwf	??_find_volume+2,w,c
  6220  00098A  6F7A               	movwf	find_volume@pt& (0+255),b
  6221  00098C  0E01               	movlw	1
  6222  00098E  204D               	addwfc	??_find_volume+3,w,c
  6223  000990  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6227  000992  EE20 F004          	lfsr	2,4
  6228  000996  517A               	movf	find_volume@pt& (0+255),w,b
  6229  000998  26D9               	addwf	fsr2l,f,c
  6230  00099A  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6231  00099C  22DA               	addwfc	fsr2h,f,c
  6232  00099E  50DF               	movf	indf2,w,c
  6233  0009A0  A4D8               	btfss	status,2,c
  6234  0009A2  D009               	goto	l5575
  6235                           
  6236                           ; BSR set to: 0
  6237  0009A4  0E00               	movlw	0
  6238  0009A6  6F70               	movwf	_find_volume$918& (0+255),b
  6239  0009A8  0E00               	movlw	0
  6240  0009AA  6F71               	movwf	(_find_volume$918+1)& (0+255),b
  6241  0009AC  0E00               	movlw	0
  6242  0009AE  6F72               	movwf	(_find_volume$918+2)& (0+255),b
  6243  0009B0  0E00               	movlw	0
  6244  0009B2  6F73               	movwf	(_find_volume$918+3)& (0+255),b
  6245  0009B4  D00E               	goto	l580
  6246  0009B6                     l5575:
  6247                           
  6248                           ; BSR set to: 0
  6249  0009B6  EE20 F008          	lfsr	2,8
  6250  0009BA  517A               	movf	find_volume@pt& (0+255),w,b
  6251  0009BC  26D9               	addwf	fsr2l,f,c
  6252  0009BE  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6253  0009C0  22DA               	addwfc	fsr2h,f,c
  6254  0009C2  CFDE F070          	movff	postinc2,_find_volume$918
  6255  0009C6  CFDE F071          	movff	postinc2,_find_volume$918+1
  6256  0009CA  CFDE F072          	movff	postinc2,_find_volume$918+2
  6257  0009CE  CFDE F073          	movff	postinc2,_find_volume$918+3
  6258  0009D2                     l580:
  6259                           
  6260                           ; BSR set to: 0
  6261  0009D2  0E60               	movlw	low find_volume@br
  6262  0009D4  6E4A               	movwf	??_find_volume& (0+255),c
  6263  0009D6  0E00               	movlw	high find_volume@br
  6264  0009D8  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6265  0009DA  90D8               	bcf	status,0,c
  6266  0009DC  3595               	rlcf	find_volume@i& (0+255),w,b
  6267  0009DE  6ED9               	movwf	fsr2l,c
  6268  0009E0  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6269  0009E2  6EDA               	movwf	fsr2h,c
  6270  0009E4  90D8               	bcf	status,0,c
  6271  0009E6  36D9               	rlcf	fsr2l,f,c
  6272  0009E8  36DA               	rlcf	fsr2h,f,c
  6273  0009EA  504A               	movf	??_find_volume,w,c
  6274  0009EC  26D9               	addwf	fsr2l,f,c
  6275  0009EE  504B               	movf	??_find_volume+1,w,c
  6276  0009F0  22DA               	addwfc	fsr2h,f,c
  6277  0009F2  C070  FFDE         	movff	_find_volume$918,postinc2
  6278  0009F6  C071  FFDE         	movff	_find_volume$918+1,postinc2
  6279  0009FA  C072  FFDE         	movff	_find_volume$918+2,postinc2
  6280  0009FE  C073  FFDE         	movff	_find_volume$918+3,postinc2
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;ff.c: 2260:   }
  6284  000A02  4B95               	infsnz	find_volume@i& (0+255),f,b
  6285  000A04  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6286  000A06  D7A4               	goto	l5565
  6287  000A08                     l5581:
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;ff.c: 2261:   i = 0;
  6291  000A08  0E00               	movlw	0
  6292  000A0A  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6293  000A0C  0E00               	movlw	0
  6294  000A0E  6F95               	movwf	find_volume@i& (0+255),b
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;ff.c: 2262:   if (i) i--;
  6298  000A10  5195               	movf	find_volume@i& (0+255),w,b
  6299  000A12  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6300  000A14  B4D8               	btfsc	status,2,c
  6301  000A16  D003               	goto	l5587
  6302                           
  6303                           ; BSR set to: 0
  6304  000A18  0795               	decf	find_volume@i& (0+255),f,b
  6305  000A1A  A0D8               	btfss	status,0,c
  6306  000A1C  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6307  000A1E                     l5587:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;ff.c: 2264:    bsect = br[i];
  6311  000A1E  0E60               	movlw	low find_volume@br
  6312  000A20  6E4A               	movwf	??_find_volume& (0+255),c
  6313  000A22  0E00               	movlw	high find_volume@br
  6314  000A24  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6315  000A26  90D8               	bcf	status,0,c
  6316  000A28  3595               	rlcf	find_volume@i& (0+255),w,b
  6317  000A2A  6ED9               	movwf	fsr2l,c
  6318  000A2C  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6319  000A2E  6EDA               	movwf	fsr2h,c
  6320  000A30  90D8               	bcf	status,0,c
  6321  000A32  36D9               	rlcf	fsr2l,f,c
  6322  000A34  36DA               	rlcf	fsr2h,f,c
  6323  000A36  504A               	movf	??_find_volume,w,c
  6324  000A38  26D9               	addwf	fsr2l,f,c
  6325  000A3A  504B               	movf	??_find_volume+1,w,c
  6326  000A3C  22DA               	addwfc	fsr2h,f,c
  6327  000A3E  CFDE F091          	movff	postinc2,find_volume@bsect
  6328  000A42  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6329  000A46  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6330  000A4A  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6334  000A4E  5191               	movf	find_volume@bsect& (0+255),w,b
  6335  000A50  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6336  000A52  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6337  000A54  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6338  000A56  A4D8               	btfss	status,2,c
  6339  000A58  D005               	goto	l5593
  6340                           
  6341                           ; BSR set to: 0
  6342  000A5A  0E00               	movlw	0
  6343  000A5C  6F75               	movwf	(_find_volume$919+1)& (0+255),b
  6344  000A5E  0E02               	movlw	2
  6345  000A60  6F74               	movwf	_find_volume$919& (0+255),b
  6346  000A62  D013               	goto	l5595
  6347  000A64                     l5593:
  6348                           
  6349                           ; BSR set to: 0
  6350  000A64  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6351  000A68  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6352  000A6C  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6353  000A70  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6354  000A74  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6355  000A78  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6356  000A7C  EC61  F024         	call	_check_fs	;wreg free
  6357  000A80  6E4A               	movwf	??_find_volume& (0+255),c
  6358  000A82  504A               	movf	??_find_volume,w,c
  6359  000A84  0100               	movlb	0	; () banked
  6360  000A86  6F74               	movwf	_find_volume$919& (0+255),b
  6361  000A88  6B75               	clrf	(_find_volume$919+1)& (0+255),b
  6362  000A8A                     l5595:
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6366  000A8A  C074  F097         	movff	_find_volume$919,find_volume@fmt
  6367                           
  6368                           ; BSR set to: 0
  6369  000A8E  5197               	movf	find_volume@fmt& (0+255),w,b
  6370  000A90  B4D8               	btfsc	status,2,c
  6371  000A92  D008               	goto	u7430
  6372                           
  6373                           ; BSR set to: 0
  6374  000A94  4B95               	infsnz	find_volume@i& (0+255),f,b
  6375  000A96  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6376  000A98  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6377  000A9A  E104               	bnz	u7430
  6378  000A9C  0E04               	movlw	4
  6379  000A9E  5D95               	subwf	find_volume@i& (0+255),w,b
  6380  000AA0  A0D8               	btfss	status,0,c
  6381  000AA2  D7BD               	goto	l5587
  6382  000AA4                     u7430:
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6386  000AA4  0E03               	movlw	3
  6387  000AA6  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6388  000AA8  A4D8               	btfss	status,2,c
  6389  000AAA  D002               	goto	l5607
  6390                           
  6391                           ; BSR set to: 0
  6392  000AAC  0E01               	movlw	1
  6393  000AAE  0012               	return	
  6394  000AB0                     l5607:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6398  000AB0  5197               	movf	find_volume@fmt& (0+255),w,b
  6399  000AB2  B4D8               	btfsc	status,2,c
  6400  000AB4  D002               	goto	l5613
  6401  000AB6                     u7450:
  6402  000AB6                     l5609:
  6403                           
  6404                           ; BSR set to: 0
  6405  000AB6  0E0D               	movlw	13
  6406  000AB8  0012               	return	
  6407  000ABA                     l5613:
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6411  000ABA  EE20 F039          	lfsr	2,57
  6412  000ABE  5198               	movf	find_volume@fs& (0+255),w,b
  6413  000AC0  26D9               	addwf	fsr2l,f,c
  6414  000AC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6415  000AC4  22DA               	addwfc	fsr2h,f,c
  6416  000AC6  50DE               	movf	postinc2,w,c
  6417  000AC8  E1F6               	bnz	l5609
  6418  000ACA  0E02               	movlw	2
  6419  000ACC  18DE               	xorwf	postinc2,w,c
  6420  000ACE  A4D8               	btfss	status,2,c
  6421  000AD0  D7F2               	goto	u7450
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6425  000AD2  EE20 F044          	lfsr	2,68
  6426  000AD6  5198               	movf	find_volume@fs& (0+255),w,b
  6427  000AD8  26D9               	addwf	fsr2l,f,c
  6428  000ADA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6429  000ADC  22DA               	addwfc	fsr2h,f,c
  6430  000ADE  CFDE F04A          	movff	postinc2,??_find_volume
  6431  000AE2  CFDD F04B          	movff	postdec2,??_find_volume+1
  6432  000AE6  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6433  000AEA  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6434  000AEE  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6435  000AF0  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6439  000AF2  518D               	movf	find_volume@fasize& (0+255),w,b
  6440  000AF4  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6441  000AF6  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6442  000AF8  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6443  000AFA  A4D8               	btfss	status,2,c
  6444  000AFC  D00E               	goto	l593
  6445                           
  6446                           ; BSR set to: 0
  6447  000AFE  EE20 F052          	lfsr	2,82
  6448  000B02  5198               	movf	find_volume@fs& (0+255),w,b
  6449  000B04  26D9               	addwf	fsr2l,f,c
  6450  000B06  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6451  000B08  22DA               	addwfc	fsr2h,f,c
  6452  000B0A  CFDE F08D          	movff	postinc2,find_volume@fasize
  6453  000B0E  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6454  000B12  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6455  000B16  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6456  000B1A                     l593:
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;ff.c: 2278:  fs->fsize = fasize;
  6460  000B1A  EE20 F016          	lfsr	2,22
  6461  000B1E  5198               	movf	find_volume@fs& (0+255),w,b
  6462  000B20  26D9               	addwf	fsr2l,f,c
  6463  000B22  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6464  000B24  22DA               	addwfc	fsr2h,f,c
  6465  000B26  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6466  000B2A  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6467  000B2E  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6468  000B32  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6472  000B36  EE20 F03E          	lfsr	2,62
  6473  000B3A  5198               	movf	find_volume@fs& (0+255),w,b
  6474  000B3C  26D9               	addwf	fsr2l,f,c
  6475  000B3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6476  000B40  22DA               	addwfc	fsr2h,f,c
  6477  000B42  EE10 F003          	lfsr	1,3
  6478  000B46  5198               	movf	find_volume@fs& (0+255),w,b
  6479  000B48  26E1               	addwf	fsr1l,f,c
  6480  000B4A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6481  000B4C  22E2               	addwfc	fsr1h,f,c
  6482  000B4E  CFDF FFE7          	movff	indf2,indf1
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6486  000B52  EE20 F003          	lfsr	2,3
  6487  000B56  5198               	movf	find_volume@fs& (0+255),w,b
  6488  000B58  26D9               	addwf	fsr2l,f,c
  6489  000B5A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6490  000B5C  22DA               	addwfc	fsr2h,f,c
  6491  000B5E  04DE               	decf	postinc2,w,c
  6492  000B60  B4D8               	btfsc	status,2,c
  6493  000B62  D00A               	goto	l5635
  6494                           
  6495                           ; BSR set to: 0
  6496  000B64  EE20 F003          	lfsr	2,3
  6497  000B68  5198               	movf	find_volume@fs& (0+255),w,b
  6498  000B6A  26D9               	addwf	fsr2l,f,c
  6499  000B6C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6500  000B6E  22DA               	addwfc	fsr2h,f,c
  6501  000B70  0E02               	movlw	2
  6502  000B72  18DE               	xorwf	postinc2,w,c
  6503  000B74  A4D8               	btfss	status,2,c
  6504  000B76  D79F               	goto	u7450
  6505  000B78                     l5635:
  6506                           
  6507                           ; BSR set to: 0
  6508                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6509  000B78  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6510  000B7C  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6511  000B80  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6512  000B84  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6513  000B88  EE20 F003          	lfsr	2,3
  6514  000B8C  5198               	movf	find_volume@fs& (0+255),w,b
  6515  000B8E  26D9               	addwf	fsr2l,f,c
  6516  000B90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6517  000B92  22DA               	addwfc	fsr2h,f,c
  6518  000B94  50DF               	movf	indf2,w,c
  6519  000B96  6E4A               	movwf	??_find_volume& (0+255),c
  6520  000B98  504A               	movf	??_find_volume,w,c
  6521  000B9A  6E05               	movwf	___lmul@multiplicand,c
  6522  000B9C  6A06               	clrf	___lmul@multiplicand+1,c
  6523  000B9E  6A07               	clrf	___lmul@multiplicand+2,c
  6524  000BA0  6A08               	clrf	___lmul@multiplicand+3,c
  6525  000BA2  EC94  F029         	call	___lmul	;wreg free
  6526  000BA6  C001  F08D         	movff	?___lmul,find_volume@fasize
  6527  000BAA  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6528  000BAE  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6529  000BB2  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6530                           
  6531                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6532  000BB6  0100               	movlb	0	; () banked
  6533  000BB8  EE20 F03B          	lfsr	2,59
  6534  000BBC  5198               	movf	find_volume@fs& (0+255),w,b
  6535  000BBE  26D9               	addwf	fsr2l,f,c
  6536  000BC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6537  000BC2  22DA               	addwfc	fsr2h,f,c
  6538  000BC4  EE10 F002          	lfsr	1,2
  6539  000BC8  5198               	movf	find_volume@fs& (0+255),w,b
  6540  000BCA  26E1               	addwf	fsr1l,f,c
  6541  000BCC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6542  000BCE  22E2               	addwfc	fsr1h,f,c
  6543  000BD0  CFDF FFE7          	movff	indf2,indf1
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6547  000BD4  EE20 F002          	lfsr	2,2
  6548  000BD8  5198               	movf	find_volume@fs& (0+255),w,b
  6549  000BDA  26D9               	addwf	fsr2l,f,c
  6550  000BDC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6551  000BDE  22DA               	addwfc	fsr2h,f,c
  6552  000BE0  50DF               	movf	indf2,w,c
  6553  000BE2  B4D8               	btfsc	status,2,c
  6554  000BE4  D768               	goto	u7450
  6555                           
  6556                           ; BSR set to: 0
  6557  000BE6  0EFF               	movlw	255
  6558  000BE8  6E4A               	movwf	??_find_volume& (0+255),c
  6559  000BEA  0EFF               	movlw	255
  6560  000BEC  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6561  000BEE  EE20 F002          	lfsr	2,2
  6562  000BF2  5198               	movf	find_volume@fs& (0+255),w,b
  6563  000BF4  26D9               	addwf	fsr2l,f,c
  6564  000BF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6565  000BF8  22DA               	addwfc	fsr2h,f,c
  6566  000BFA  50DF               	movf	indf2,w,c
  6567  000BFC  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6568  000BFE  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6569  000C00  504A               	movf	??_find_volume,w,c
  6570  000C02  264C               	addwf	??_find_volume+2,f,c
  6571  000C04  504B               	movf	??_find_volume+1,w,c
  6572  000C06  224D               	addwfc	??_find_volume+3,f,c
  6573  000C08  EE20 F002          	lfsr	2,2
  6574  000C0C  5198               	movf	find_volume@fs& (0+255),w,b
  6575  000C0E  26D9               	addwf	fsr2l,f,c
  6576  000C10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6577  000C12  22DA               	addwfc	fsr2h,f,c
  6578  000C14  50DF               	movf	indf2,w,c
  6579  000C16  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6580  000C18  504E               	movf	??_find_volume+4,w,c
  6581  000C1A  164C               	andwf	??_find_volume+2,f,c
  6582  000C1C  0E00               	movlw	0
  6583  000C1E  164D               	andwf	??_find_volume+3,f,c
  6584  000C20  504C               	movf	??_find_volume+2,w,c
  6585  000C22  104D               	iorwf	??_find_volume+3,w,c
  6586  000C24  A4D8               	btfss	status,2,c
  6587  000C26  D747               	goto	u7450
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6591  000C28  EE20 F03F          	lfsr	2,63
  6592  000C2C  5198               	movf	find_volume@fs& (0+255),w,b
  6593  000C2E  26D9               	addwf	fsr2l,f,c
  6594  000C30  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6595  000C32  22DA               	addwfc	fsr2h,f,c
  6596  000C34  EE10 F008          	lfsr	1,8
  6597  000C38  5198               	movf	find_volume@fs& (0+255),w,b
  6598  000C3A  26E1               	addwf	fsr1l,f,c
  6599  000C3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6600  000C3E  22E2               	addwfc	fsr1h,f,c
  6601  000C40  CFDE FFE6          	movff	postinc2,postinc1
  6602  000C44  CFDD FFE5          	movff	postdec2,postdec1
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6606  000C48  EE20 F008          	lfsr	2,8
  6607  000C4C  5198               	movf	find_volume@fs& (0+255),w,b
  6608  000C4E  26D9               	addwf	fsr2l,f,c
  6609  000C50  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6610  000C52  22DA               	addwfc	fsr2h,f,c
  6611  000C54  CFDE F04A          	movff	postinc2,??_find_volume
  6612  000C58  CFDD F04B          	movff	postdec2,??_find_volume+1
  6613  000C5C  0E0F               	movlw	15
  6614  000C5E  164A               	andwf	??_find_volume,f,c
  6615  000C60  0E00               	movlw	0
  6616  000C62  164B               	andwf	??_find_volume+1,f,c
  6617  000C64  504A               	movf	??_find_volume,w,c
  6618  000C66  104B               	iorwf	??_find_volume+1,w,c
  6619  000C68  A4D8               	btfss	status,2,c
  6620  000C6A  D725               	goto	u7450
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6624  000C6C  EE20 F041          	lfsr	2,65
  6625  000C70  5198               	movf	find_volume@fs& (0+255),w,b
  6626  000C72  26D9               	addwf	fsr2l,f,c
  6627  000C74  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6628  000C76  22DA               	addwfc	fsr2h,f,c
  6629  000C78  CFDE F04A          	movff	postinc2,??_find_volume
  6630  000C7C  CFDD F04B          	movff	postdec2,??_find_volume+1
  6631  000C80  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6632  000C84  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6633  000C88  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6634  000C8A  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6638  000C8C  5184               	movf	find_volume@tsect& (0+255),w,b
  6639  000C8E  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6640  000C90  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6641  000C92  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6642  000C94  A4D8               	btfss	status,2,c
  6643  000C96  D00E               	goto	l599
  6644                           
  6645                           ; BSR set to: 0
  6646  000C98  EE20 F04E          	lfsr	2,78
  6647  000C9C  5198               	movf	find_volume@fs& (0+255),w,b
  6648  000C9E  26D9               	addwf	fsr2l,f,c
  6649  000CA0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6650  000CA2  22DA               	addwfc	fsr2h,f,c
  6651  000CA4  CFDE F084          	movff	postinc2,find_volume@tsect
  6652  000CA8  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6653  000CAC  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6654  000CB0  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6655  000CB4                     l599:
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6659  000CB4  EE20 F03C          	lfsr	2,60
  6660  000CB8  5198               	movf	find_volume@fs& (0+255),w,b
  6661  000CBA  26D9               	addwf	fsr2l,f,c
  6662  000CBC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6663  000CBE  22DA               	addwfc	fsr2h,f,c
  6664  000CC0  CFDE F082          	movff	postinc2,find_volume@nrsv
  6665  000CC4  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6669  000CC8  5182               	movf	find_volume@nrsv& (0+255),w,b
  6670  000CCA  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6671  000CCC  B4D8               	btfsc	status,2,c
  6672  000CCE  D6F3               	goto	u7450
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6676  000CD0  EE20 F008          	lfsr	2,8
  6677  000CD4  5198               	movf	find_volume@fs& (0+255),w,b
  6678  000CD6  26D9               	addwf	fsr2l,f,c
  6679  000CD8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6680  000CDA  22DA               	addwfc	fsr2h,f,c
  6681  000CDC  CFDE F04A          	movff	postinc2,??_find_volume
  6682  000CE0  CFDD F04B          	movff	postdec2,??_find_volume+1
  6683  000CE4  0E04               	movlw	4
  6684  000CE6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6685  000CE8                     u7555:
  6686  000CE8  90D8               	bcf	status,0,c
  6687  000CEA  324B               	rrcf	??_find_volume+1,f,c
  6688  000CEC  324A               	rrcf	??_find_volume,f,c
  6689  000CEE  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6690  000CF0  D7FB               	goto	u7555
  6691  000CF2  5182               	movf	find_volume@nrsv& (0+255),w,b
  6692  000CF4  244A               	addwf	??_find_volume,w,c
  6693  000CF6  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6694  000CF8  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6695  000CFA  204B               	addwfc	??_find_volume+1,w,c
  6696  000CFC  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6697  000CFE  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6698  000D00  B0D8               	btfsc	status,0,c
  6699  000D02  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6700  000D04  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6701  000D06  518D               	movf	find_volume@fasize& (0+255),w,b
  6702  000D08  244D               	addwf	??_find_volume+3,w,c
  6703  000D0A  6F7C               	movwf	find_volume@sysect& (0+255),b
  6704  000D0C  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6705  000D0E  204E               	addwfc	??_find_volume+4,w,c
  6706  000D10  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6707  000D12  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6708  000D14  204F               	addwfc	??_find_volume+5,w,c
  6709  000D16  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6710  000D18  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6711  000D1A  2050               	addwfc	??_find_volume+6,w,c
  6712  000D1C  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6716  000D1E  517C               	movf	find_volume@sysect& (0+255),w,b
  6717  000D20  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6718  000D22  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6719  000D24  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6720  000D26  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6721  000D28  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6722  000D2A  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6723  000D2C  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6724  000D2E  A0D8               	btfss	status,0,c
  6725  000D30  D6C2               	goto	u7450
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6729  000D32  517C               	movf	find_volume@sysect& (0+255),w,b
  6730  000D34  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6731  000D36  6E01               	movwf	___lldiv@dividend,c
  6732  000D38  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6733  000D3A  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6734  000D3C  6E02               	movwf	___lldiv@dividend+1,c
  6735  000D3E  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6736  000D40  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6737  000D42  6E03               	movwf	___lldiv@dividend+2,c
  6738  000D44  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6739  000D46  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6740  000D48  6E04               	movwf	___lldiv@dividend+3,c
  6741  000D4A  EE20 F002          	lfsr	2,2
  6742  000D4E  5198               	movf	find_volume@fs& (0+255),w,b
  6743  000D50  26D9               	addwf	fsr2l,f,c
  6744  000D52  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6745  000D54  22DA               	addwfc	fsr2h,f,c
  6746  000D56  50DF               	movf	indf2,w,c
  6747  000D58  6E4A               	movwf	??_find_volume& (0+255),c
  6748  000D5A  504A               	movf	??_find_volume,w,c
  6749  000D5C  6E05               	movwf	___lldiv@divisor,c
  6750  000D5E  6A06               	clrf	___lldiv@divisor+1,c
  6751  000D60  6A07               	clrf	___lldiv@divisor+2,c
  6752  000D62  6A08               	clrf	___lldiv@divisor+3,c
  6753  000D64  EC2C  F028         	call	___lldiv	;wreg free
  6754  000D68  C001  F088         	movff	?___lldiv,find_volume@nclst
  6755  000D6C  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6756  000D70  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6757  000D74  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6758                           
  6759                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6760  000D78  0100               	movlb	0	; () banked
  6761  000D7A  5188               	movf	find_volume@nclst& (0+255),w,b
  6762  000D7C  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  6763  000D7E  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6764  000D80  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  6765  000D82  B4D8               	btfsc	status,2,c
  6766  000D84  D698               	goto	u7450
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;ff.c: 2304:  fmt = 1;
  6770  000D86  0E01               	movlw	1
  6771  000D88  6F97               	movwf	find_volume@fmt& (0+255),b
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  6775  000D8A  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6776  000D8C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6777  000D8E  E106               	bnz	u7580
  6778  000D90  0EF6               	movlw	246
  6779  000D92  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6780  000D94  0E0F               	movlw	15
  6781  000D96  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6782  000D98  A0D8               	btfss	status,0,c
  6783  000D9A  D002               	goto	l5689
  6784  000D9C                     u7580:
  6785                           
  6786                           ; BSR set to: 0
  6787  000D9C  0E02               	movlw	2
  6788  000D9E  6F97               	movwf	find_volume@fmt& (0+255),b
  6789  000DA0                     l5689:
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  6793  000DA0  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6794  000DA2  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6795  000DA4  E106               	bnz	u7590
  6796  000DA6  0EF6               	movlw	246
  6797  000DA8  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6798  000DAA  0EFF               	movlw	255
  6799  000DAC  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6800  000DAE  A0D8               	btfss	status,0,c
  6801  000DB0  D002               	goto	l5693
  6802  000DB2                     u7590:
  6803                           
  6804                           ; BSR set to: 0
  6805  000DB2  0E03               	movlw	3
  6806  000DB4  6F97               	movwf	find_volume@fmt& (0+255),b
  6807  000DB6                     l5693:
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  6811  000DB6  0E02               	movlw	2
  6812  000DB8  2588               	addwf	find_volume@nclst& (0+255),w,b
  6813  000DBA  6E4A               	movwf	??_find_volume& (0+255),c
  6814  000DBC  0E00               	movlw	0
  6815  000DBE  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  6816  000DC0  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6817  000DC2  0E00               	movlw	0
  6818  000DC4  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  6819  000DC6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6820  000DC8  0E00               	movlw	0
  6821  000DCA  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  6822  000DCC  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6823  000DCE  EE20 F012          	lfsr	2,18
  6824  000DD2  5198               	movf	find_volume@fs& (0+255),w,b
  6825  000DD4  26D9               	addwf	fsr2l,f,c
  6826  000DD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6827  000DD8  22DA               	addwfc	fsr2h,f,c
  6828  000DDA  C04A  FFDE         	movff	??_find_volume,postinc2
  6829  000DDE  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6830  000DE2  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6831  000DE6  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;ff.c: 2310:  fs->volbase = bsect;
  6835  000DEA  EE20 F01A          	lfsr	2,26
  6836  000DEE  5198               	movf	find_volume@fs& (0+255),w,b
  6837  000DF0  26D9               	addwf	fsr2l,f,c
  6838  000DF2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6839  000DF4  22DA               	addwfc	fsr2h,f,c
  6840  000DF6  C091  FFDE         	movff	find_volume@bsect,postinc2
  6841  000DFA  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  6842  000DFE  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  6843  000E02  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  6847  000E06  5182               	movf	find_volume@nrsv& (0+255),w,b
  6848  000E08  2591               	addwf	find_volume@bsect& (0+255),w,b
  6849  000E0A  6E4A               	movwf	??_find_volume& (0+255),c
  6850  000E0C  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6851  000E0E  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6852  000E10  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6853  000E12  0E00               	movlw	0
  6854  000E14  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6855  000E16  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6856  000E18  0E00               	movlw	0
  6857  000E1A  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6858  000E1C  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6859  000E1E  EE20 F01E          	lfsr	2,30
  6860  000E22  5198               	movf	find_volume@fs& (0+255),w,b
  6861  000E24  26D9               	addwf	fsr2l,f,c
  6862  000E26  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6863  000E28  22DA               	addwfc	fsr2h,f,c
  6864  000E2A  C04A  FFDE         	movff	??_find_volume,postinc2
  6865  000E2E  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6866  000E32  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6867  000E36  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;ff.c: 2312:  fs->database = bsect + sysect;
  6871  000E3A  517C               	movf	find_volume@sysect& (0+255),w,b
  6872  000E3C  2591               	addwf	find_volume@bsect& (0+255),w,b
  6873  000E3E  6E4A               	movwf	??_find_volume& (0+255),c
  6874  000E40  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6875  000E42  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6876  000E44  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6877  000E46  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6878  000E48  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6879  000E4A  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6880  000E4C  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6881  000E4E  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6882  000E50  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6883  000E52  EE20 F026          	lfsr	2,38
  6884  000E56  5198               	movf	find_volume@fs& (0+255),w,b
  6885  000E58  26D9               	addwf	fsr2l,f,c
  6886  000E5A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6887  000E5C  22DA               	addwfc	fsr2h,f,c
  6888  000E5E  C04A  FFDE         	movff	??_find_volume,postinc2
  6889  000E62  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6890  000E66  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6891  000E6A  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;ff.c: 2313:  if (fmt == 3) {
  6895  000E6E  0E03               	movlw	3
  6896  000E70  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6897  000E72  A4D8               	btfss	status,2,c
  6898  000E74  D03D               	goto	l5713
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  6902  000E76  EE20 F008          	lfsr	2,8
  6903  000E7A  5198               	movf	find_volume@fs& (0+255),w,b
  6904  000E7C  26D9               	addwf	fsr2l,f,c
  6905  000E7E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6906  000E80  22DA               	addwfc	fsr2h,f,c
  6907  000E82  50DE               	movf	postinc2,w,c
  6908  000E84  10DE               	iorwf	postinc2,w,c
  6909  000E86  A4D8               	btfss	status,2,c
  6910  000E88  D616               	goto	u7450
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  6914  000E8A  EE20 F05A          	lfsr	2,90
  6915  000E8E  5198               	movf	find_volume@fs& (0+255),w,b
  6916  000E90  26D9               	addwf	fsr2l,f,c
  6917  000E92  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6918  000E94  22DA               	addwfc	fsr2h,f,c
  6919  000E96  EE10 F022          	lfsr	1,34
  6920  000E9A  5198               	movf	find_volume@fs& (0+255),w,b
  6921  000E9C  26E1               	addwf	fsr1l,f,c
  6922  000E9E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6923  000EA0  22E2               	addwfc	fsr1h,f,c
  6924  000EA2  CFDE FFE6          	movff	postinc2,postinc1
  6925  000EA6  CFDE FFE6          	movff	postinc2,postinc1
  6926  000EAA  CFDE FFE6          	movff	postinc2,postinc1
  6927  000EAE  CFDE FFE6          	movff	postinc2,postinc1
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  6931  000EB2  EE20 F012          	lfsr	2,18
  6932  000EB6  5198               	movf	find_volume@fs& (0+255),w,b
  6933  000EB8  26D9               	addwf	fsr2l,f,c
  6934  000EBA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6935  000EBC  22DA               	addwfc	fsr2h,f,c
  6936  000EBE  CFDE F04A          	movff	postinc2,??_find_volume
  6937  000EC2  CFDE F04B          	movff	postinc2,??_find_volume+1
  6938  000EC6  CFDE F04C          	movff	postinc2,??_find_volume+2
  6939  000ECA  CFDE F04D          	movff	postinc2,??_find_volume+3
  6940  000ECE  0E02               	movlw	2
  6941  000ED0                     u7625:
  6942  000ED0  90D8               	bcf	status,0,c
  6943  000ED2  364A               	rlcf	??_find_volume,f,c
  6944  000ED4  364B               	rlcf	??_find_volume+1,f,c
  6945  000ED6  364C               	rlcf	??_find_volume+2,f,c
  6946  000ED8  364D               	rlcf	??_find_volume+3,f,c
  6947  000EDA  2EE8               	decfsz	wreg,f,c
  6948  000EDC  D7F9               	goto	u7625
  6949  000EDE  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  6950  000EE2  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  6951  000EE6  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  6952  000EEA  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  6953                           
  6954                           ;ff.c: 2317:  } else {
  6955  000EEE  D091               	goto	l607
  6956  000EF0                     l5713:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  6960  000EF0  EE20 F008          	lfsr	2,8
  6961  000EF4  5198               	movf	find_volume@fs& (0+255),w,b
  6962  000EF6  26D9               	addwf	fsr2l,f,c
  6963  000EF8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6964  000EFA  22DA               	addwfc	fsr2h,f,c
  6965  000EFC  50DE               	movf	postinc2,w,c
  6966  000EFE  10DE               	iorwf	postinc2,w,c
  6967  000F00  B4D8               	btfsc	status,2,c
  6968  000F02  D5D9               	goto	u7450
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  6972  000F04  EE20 F01E          	lfsr	2,30
  6973  000F08  5198               	movf	find_volume@fs& (0+255),w,b
  6974  000F0A  26D9               	addwf	fsr2l,f,c
  6975  000F0C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6976  000F0E  22DA               	addwfc	fsr2h,f,c
  6977  000F10  CFDE F04A          	movff	postinc2,??_find_volume
  6978  000F14  CFDE F04B          	movff	postinc2,??_find_volume+1
  6979  000F18  CFDE F04C          	movff	postinc2,??_find_volume+2
  6980  000F1C  CFDE F04D          	movff	postinc2,??_find_volume+3
  6981  000F20  518D               	movf	find_volume@fasize& (0+255),w,b
  6982  000F22  244A               	addwf	??_find_volume,w,c
  6983  000F24  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6984  000F26  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6985  000F28  204B               	addwfc	??_find_volume+1,w,c
  6986  000F2A  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  6987  000F2C  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6988  000F2E  204C               	addwfc	??_find_volume+2,w,c
  6989  000F30  6E50               	movwf	(??_find_volume+6)& (0+255),c
  6990  000F32  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6991  000F34  204D               	addwfc	??_find_volume+3,w,c
  6992  000F36  6E51               	movwf	(??_find_volume+7)& (0+255),c
  6993  000F38  EE20 F022          	lfsr	2,34
  6994  000F3C  5198               	movf	find_volume@fs& (0+255),w,b
  6995  000F3E  26D9               	addwf	fsr2l,f,c
  6996  000F40  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6997  000F42  22DA               	addwfc	fsr2h,f,c
  6998  000F44  C04E  FFDE         	movff	??_find_volume+4,postinc2
  6999  000F48  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7000  000F4C  C050  FFDE         	movff	??_find_volume+6,postinc2
  7001  000F50  C051  FFDE         	movff	??_find_volume+7,postinc2
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7005  000F54  0E02               	movlw	2
  7006  000F56  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7007  000F58  B4D8               	btfsc	status,2,c
  7008  000F5A  D044               	goto	l5725
  7009                           
  7010                           ; BSR set to: 0
  7011  000F5C  EE20 F012          	lfsr	2,18
  7012  000F60  5198               	movf	find_volume@fs& (0+255),w,b
  7013  000F62  26D9               	addwf	fsr2l,f,c
  7014  000F64  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7015  000F66  22DA               	addwfc	fsr2h,f,c
  7016  000F68  CFDE F04A          	movff	postinc2,??_find_volume
  7017  000F6C  CFDE F04B          	movff	postinc2,??_find_volume+1
  7018  000F70  CFDE F04C          	movff	postinc2,??_find_volume+2
  7019  000F74  CFDE F04D          	movff	postinc2,??_find_volume+3
  7020  000F78  0E01               	movlw	1
  7021  000F7A  144A               	andwf	??_find_volume,w,c
  7022  000F7C  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7023  000F7E  0E00               	movlw	0
  7024  000F80  144B               	andwf	??_find_volume+1,w,c
  7025  000F82  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7026  000F84  0E00               	movlw	0
  7027  000F86  144C               	andwf	??_find_volume+2,w,c
  7028  000F88  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7029  000F8A  0E00               	movlw	0
  7030  000F8C  144D               	andwf	??_find_volume+3,w,c
  7031  000F8E  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7032  000F90  EE20 F012          	lfsr	2,18
  7033  000F94  5198               	movf	find_volume@fs& (0+255),w,b
  7034  000F96  26D9               	addwf	fsr2l,f,c
  7035  000F98  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7036  000F9A  22DA               	addwfc	fsr2h,f,c
  7037  000F9C  CFDE F001          	movff	postinc2,___lmul@multiplier
  7038  000FA0  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7039  000FA4  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7040  000FA8  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7041  000FAC  0E03               	movlw	3
  7042  000FAE  6E05               	movwf	___lmul@multiplicand,c
  7043  000FB0  0E00               	movlw	0
  7044  000FB2  6E06               	movwf	___lmul@multiplicand+1,c
  7045  000FB4  0E00               	movlw	0
  7046  000FB6  6E07               	movwf	___lmul@multiplicand+2,c
  7047  000FB8  0E00               	movlw	0
  7048  000FBA  6E08               	movwf	___lmul@multiplicand+3,c
  7049  000FBC  EC94  F029         	call	___lmul	;wreg free
  7050  000FC0  90D8               	bcf	status,0,c
  7051  000FC2  3204               	rrcf	?___lmul+3,f,c
  7052  000FC4  3203               	rrcf	?___lmul+2,f,c
  7053  000FC6  3202               	rrcf	?___lmul+1,f,c
  7054  000FC8  3201               	rrcf	?___lmul,f,c
  7055  000FCA  504E               	movf	??_find_volume+4,w,c
  7056  000FCC  2401               	addwf	?___lmul,w,c
  7057  000FCE  0100               	movlb	0	; () banked
  7058  000FD0  6F76               	movwf	find_volume@szbfat& (0+255),b
  7059  000FD2  504F               	movf	??_find_volume+5,w,c
  7060  000FD4  2002               	addwfc	?___lmul+1,w,c
  7061  000FD6  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7062  000FD8  5050               	movf	??_find_volume+6,w,c
  7063  000FDA  2003               	addwfc	?___lmul+2,w,c
  7064  000FDC  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7065  000FDE  5051               	movf	??_find_volume+7,w,c
  7066  000FE0  2004               	addwfc	?___lmul+3,w,c
  7067  000FE2  D016               	goto	L6
  7068  000FE4                     l5725:
  7069                           
  7070                           ; BSR set to: 0
  7071  000FE4  EE20 F012          	lfsr	2,18
  7072  000FE8  5198               	movf	find_volume@fs& (0+255),w,b
  7073  000FEA  26D9               	addwf	fsr2l,f,c
  7074  000FEC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7075  000FEE  22DA               	addwfc	fsr2h,f,c
  7076  000FF0  CFDE F04A          	movff	postinc2,??_find_volume
  7077  000FF4  CFDE F04B          	movff	postinc2,??_find_volume+1
  7078  000FF8  CFDE F04C          	movff	postinc2,??_find_volume+2
  7079  000FFC  CFDE F04D          	movff	postinc2,??_find_volume+3
  7080  001000  90D8               	bcf	status,0,c
  7081  001002  344A               	rlcf	??_find_volume,w,c
  7082  001004  6F76               	movwf	find_volume@szbfat& (0+255),b
  7083  001006  344B               	rlcf	??_find_volume+1,w,c
  7084  001008  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7085  00100A  344C               	rlcf	??_find_volume+2,w,c
  7086  00100C  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7087  00100E  344D               	rlcf	??_find_volume+3,w,c
  7088  001010                     L6:
  7089  001010  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7090  001012                     l607:
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7094  001012  0EFF               	movlw	255
  7095  001014  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7096  001016  6E4A               	movwf	??_find_volume& (0+255),c
  7097  001018  0E01               	movlw	1
  7098  00101A  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7099  00101C  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7100  00101E  0E00               	movlw	0
  7101  001020  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7102  001022  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7103  001024  0E00               	movlw	0
  7104  001026  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7105  001028  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7106  00102A  0E0A               	movlw	10
  7107  00102C  D005               	goto	u7650
  7108  00102E                     u7655:
  7109  00102E  90D8               	bcf	status,0,c
  7110  001030  324D               	rrcf	??_find_volume+3,f,c
  7111  001032  324C               	rrcf	??_find_volume+2,f,c
  7112  001034  324B               	rrcf	??_find_volume+1,f,c
  7113  001036  324A               	rrcf	??_find_volume,f,c
  7114  001038                     u7650:
  7115  001038  2EE8               	decfsz	wreg,f,c
  7116  00103A  D7F9               	goto	u7655
  7117  00103C  EE20 F016          	lfsr	2,22
  7118  001040  5198               	movf	find_volume@fs& (0+255),w,b
  7119  001042  26D9               	addwf	fsr2l,f,c
  7120  001044  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7121  001046  22DA               	addwfc	fsr2h,f,c
  7122  001048  504A               	movf	??_find_volume,w,c
  7123  00104A  5CDE               	subwf	postinc2,w,c
  7124  00104C  504B               	movf	??_find_volume+1,w,c
  7125  00104E  58DE               	subwfb	postinc2,w,c
  7126  001050  504C               	movf	??_find_volume+2,w,c
  7127  001052  58DE               	subwfb	postinc2,w,c
  7128  001054  504D               	movf	??_find_volume+3,w,c
  7129  001056  58DE               	subwfb	postinc2,w,c
  7130  001058  A0D8               	btfss	status,0,c
  7131  00105A  D52D               	goto	u7450
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7135  00105C  EE20 F00E          	lfsr	2,14
  7136  001060  5198               	movf	find_volume@fs& (0+255),w,b
  7137  001062  26D9               	addwf	fsr2l,f,c
  7138  001064  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7139  001066  22DA               	addwfc	fsr2h,f,c
  7140  001068  0EFF               	movlw	255
  7141  00106A  6EDE               	movwf	postinc2,c
  7142  00106C  0EFF               	movlw	255
  7143  00106E  6EDE               	movwf	postinc2,c
  7144  001070  0EFF               	movlw	255
  7145  001072  6EDE               	movwf	postinc2,c
  7146  001074  0EFF               	movlw	255
  7147  001076  6EDD               	movwf	postdec2,c
  7148  001078  52DD               	movf	postdec2,f,c
  7149  00107A  52DD               	movf	postdec2,f,c
  7150  00107C  EE10 F00A          	lfsr	1,10
  7151  001080  5198               	movf	find_volume@fs& (0+255),w,b
  7152  001082  26E1               	addwf	fsr1l,f,c
  7153  001084  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7154  001086  22E2               	addwfc	fsr1h,f,c
  7155  001088  CFDE FFE6          	movff	postinc2,postinc1
  7156  00108C  CFDE FFE6          	movff	postinc2,postinc1
  7157  001090  CFDE FFE6          	movff	postinc2,postinc1
  7158  001094  CFDE FFE6          	movff	postinc2,postinc1
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7162  001098  EE20 F005          	lfsr	2,5
  7163  00109C  5198               	movf	find_volume@fs& (0+255),w,b
  7164  00109E  26D9               	addwf	fsr2l,f,c
  7165  0010A0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7166  0010A2  22DA               	addwfc	fsr2h,f,c
  7167  0010A4  0E80               	movlw	128
  7168  0010A6  6EDF               	movwf	indf2,c
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;ff.c: 2333:  if (fmt == 3
  7172  0010A8  0E03               	movlw	3
  7173  0010AA  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7174  0010AC  A4D8               	btfss	status,2,c
  7175  0010AE  D083               	goto	l5749
  7176                           
  7177                           ; BSR set to: 0
  7178  0010B0  EE20 F05E          	lfsr	2,94
  7179  0010B4  5198               	movf	find_volume@fs& (0+255),w,b
  7180  0010B6  26D9               	addwf	fsr2l,f,c
  7181  0010B8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7182  0010BA  22DA               	addwfc	fsr2h,f,c
  7183  0010BC  04DE               	decf	postinc2,w,c
  7184  0010BE  10DE               	iorwf	postinc2,w,c
  7185  0010C0  A4D8               	btfss	status,2,c
  7186  0010C2  D079               	goto	l5749
  7187                           
  7188                           ; BSR set to: 0
  7189  0010C4  C098  F030         	movff	find_volume@fs,move_window@fs
  7190  0010C8  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7191  0010CC  0E01               	movlw	1
  7192  0010CE  2591               	addwf	find_volume@bsect& (0+255),w,b
  7193  0010D0  6E32               	movwf	move_window@sector,c
  7194  0010D2  0E00               	movlw	0
  7195  0010D4  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7196  0010D6  6E33               	movwf	move_window@sector+1,c
  7197  0010D8  0E00               	movlw	0
  7198  0010DA  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7199  0010DC  6E34               	movwf	move_window@sector+2,c
  7200  0010DE  0E00               	movlw	0
  7201  0010E0  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7202  0010E2  6E35               	movwf	move_window@sector+3,c
  7203  0010E4  EC8F  F027         	call	_move_window	;wreg free
  7204  0010E8  0900               	iorlw	0
  7205  0010EA  A4D8               	btfss	status,2,c
  7206  0010EC  D064               	goto	l5749
  7207                           
  7208                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7209  0010EE  0100               	movlb	0	; () banked
  7210  0010F0  EE20 F005          	lfsr	2,5
  7211  0010F4  5198               	movf	find_volume@fs& (0+255),w,b
  7212  0010F6  26D9               	addwf	fsr2l,f,c
  7213  0010F8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7214  0010FA  22DA               	addwfc	fsr2h,f,c
  7215  0010FC  0E00               	movlw	0
  7216  0010FE  6EDF               	movwf	indf2,c
  7217                           
  7218                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7219  001100  EE22 F02C          	lfsr	2,556
  7220  001104  5198               	movf	find_volume@fs& (0+255),w,b
  7221  001106  26D9               	addwf	fsr2l,f,c
  7222  001108  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7223  00110A  22DA               	addwfc	fsr2h,f,c
  7224  00110C  0E55               	movlw	85
  7225  00110E  18DE               	xorwf	postinc2,w,c
  7226  001110  E152               	bnz	l5749
  7227  001112  0EAA               	movlw	170
  7228  001114  18DE               	xorwf	postinc2,w,c
  7229  001116  A4D8               	btfss	status,2,c
  7230  001118  D04E               	goto	l5749
  7231                           
  7232                           ; BSR set to: 0
  7233  00111A  EE20 F02E          	lfsr	2,46
  7234  00111E  5198               	movf	find_volume@fs& (0+255),w,b
  7235  001120  26D9               	addwf	fsr2l,f,c
  7236  001122  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7237  001124  22DA               	addwfc	fsr2h,f,c
  7238  001126  0E52               	movlw	82
  7239  001128  18DE               	xorwf	postinc2,w,c
  7240  00112A  E145               	bnz	l5749
  7241  00112C  0E52               	movlw	82
  7242  00112E  18DE               	xorwf	postinc2,w,c
  7243  001130  E142               	bnz	l5749
  7244  001132  0E61               	movlw	97
  7245  001134  18DE               	xorwf	postinc2,w,c
  7246  001136  E13F               	bnz	l5749
  7247  001138  0E41               	movlw	65
  7248  00113A  18DE               	xorwf	postinc2,w,c
  7249  00113C  A4D8               	btfss	status,2,c
  7250  00113E  D03B               	goto	l5749
  7251                           
  7252                           ; BSR set to: 0
  7253  001140  EE22 F012          	lfsr	2,530
  7254  001144  5198               	movf	find_volume@fs& (0+255),w,b
  7255  001146  26D9               	addwf	fsr2l,f,c
  7256  001148  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7257  00114A  22DA               	addwfc	fsr2h,f,c
  7258  00114C  0E72               	movlw	114
  7259  00114E  18DE               	xorwf	postinc2,w,c
  7260  001150  E132               	bnz	l5749
  7261  001152  0E72               	movlw	114
  7262  001154  18DE               	xorwf	postinc2,w,c
  7263  001156  E12F               	bnz	l5749
  7264  001158  0E41               	movlw	65
  7265  00115A  18DE               	xorwf	postinc2,w,c
  7266  00115C  E12C               	bnz	l5749
  7267  00115E  0E61               	movlw	97
  7268  001160  18DE               	xorwf	postinc2,w,c
  7269  001162  A4D8               	btfss	status,2,c
  7270  001164  D028               	goto	l5749
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7274  001166  EE22 F016          	lfsr	2,534
  7275  00116A  5198               	movf	find_volume@fs& (0+255),w,b
  7276  00116C  26D9               	addwf	fsr2l,f,c
  7277  00116E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7278  001170  22DA               	addwfc	fsr2h,f,c
  7279  001172  EE10 F00E          	lfsr	1,14
  7280  001176  5198               	movf	find_volume@fs& (0+255),w,b
  7281  001178  26E1               	addwf	fsr1l,f,c
  7282  00117A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7283  00117C  22E2               	addwfc	fsr1h,f,c
  7284  00117E  CFDE FFE6          	movff	postinc2,postinc1
  7285  001182  CFDE FFE6          	movff	postinc2,postinc1
  7286  001186  CFDE FFE6          	movff	postinc2,postinc1
  7287  00118A  CFDE FFE6          	movff	postinc2,postinc1
  7288                           
  7289                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7290  00118E  EE22 F01A          	lfsr	2,538
  7291  001192  5198               	movf	find_volume@fs& (0+255),w,b
  7292  001194  26D9               	addwf	fsr2l,f,c
  7293  001196  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7294  001198  22DA               	addwfc	fsr2h,f,c
  7295  00119A  EE10 F00A          	lfsr	1,10
  7296  00119E  5198               	movf	find_volume@fs& (0+255),w,b
  7297  0011A0  26E1               	addwf	fsr1l,f,c
  7298  0011A2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7299  0011A4  22E2               	addwfc	fsr1h,f,c
  7300  0011A6  CFDE FFE6          	movff	postinc2,postinc1
  7301  0011AA  CFDE FFE6          	movff	postinc2,postinc1
  7302  0011AE  CFDE FFE6          	movff	postinc2,postinc1
  7303  0011B2  CFDE FFE6          	movff	postinc2,postinc1
  7304  0011B6                     l5749:
  7305                           
  7306                           ;ff.c: 2352:  fs->fs_type = fmt;
  7307  0011B6  C098  FFD9         	movff	find_volume@fs,fsr2l
  7308  0011BA  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7309  0011BE  C097  FFDF         	movff	find_volume@fmt,indf2
  7310                           
  7311                           ;ff.c: 2353:  fs->id = ++Fsid;
  7312  0011C2  0100               	movlb	0	; () banked
  7313  0011C4  4BD2               	infsnz	_Fsid& (0+255),f,b
  7314  0011C6  2BD3               	incf	(_Fsid+1)& (0+255),f,b
  7315  0011C8  EE20 F006          	lfsr	2,6
  7316  0011CC  5198               	movf	find_volume@fs& (0+255),w,b
  7317  0011CE  26D9               	addwf	fsr2l,f,c
  7318  0011D0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7319  0011D2  22DA               	addwfc	fsr2h,f,c
  7320  0011D4  C0D2  FFDE         	movff	_Fsid,postinc2
  7321  0011D8  C0D3  FFDD         	movff	_Fsid+1,postdec2
  7322  0011DC  EF65  F004         	goto	l5529
  7323  0011E0                     __end_of_find_volume:
  7324                           	opt callstack 0
  7325                           
  7326 ;; *************** function _get_ldnumber *****************
  7327 ;; Defined at:
  7328 ;;		line 2114 in file "ff.c"
  7329 ;; Parameters:    Size  Location     Type
  7330 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7331 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7334 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7335 ;;  i               2   10[COMRAM] unsigned short 
  7336 ;;  vol             2    8[COMRAM] int 
  7337 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7338 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  2    0[COMRAM] int 
  7341 ;; Registers used:
  7342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7348 ;;      Params:         2       0       0       0       0       0       0       0       0
  7349 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7350 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7351 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7352 ;;Total ram usage:       14 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; This function calls:
  7355 ;;		Nothing
  7356 ;; This function is called by:
  7357 ;;		_find_volume
  7358 ;;		_f_mount
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text17
  7363  0049AE                     __ptext17:
  7364                           	opt callstack 0
  7365  0049AE                     _get_ldnumber:
  7366                           	opt callstack 28
  7367                           
  7368                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;incstack = 0
  7372  0049AE  6809               	setf	get_ldnumber@vol,c
  7373  0049B0  680A               	setf	get_ldnumber@vol+1,c
  7374                           
  7375                           ;ff.c: 2129:  if (*path) {
  7376  0049B2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7377  0049B6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7378  0049BA  50DE               	movf	postinc2,w,c
  7379  0049BC  10DE               	iorwf	postinc2,w,c
  7380  0049BE  B4D8               	btfsc	status,2,c
  7381  0049C0  D05B               	goto	l5305
  7382                           
  7383                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7384  0049C2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7385  0049C6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7386  0049CA  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7387  0049CE  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7388  0049D2  D002               	goto	l5279
  7389  0049D4                     l5277:
  7390  0049D4  4A0D               	infsnz	get_ldnumber@tt,f,c
  7391  0049D6  2A0E               	incf	get_ldnumber@tt+1,f,c
  7392  0049D8                     l5279:
  7393  0049D8  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7394  0049DC  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7395  0049E0                     	if	0	;tblptru may be non-zero
  7396  0049E0                     	endif
  7397  0049E0                     	if	0	;tblptru may be non-zero
  7398  0049E0                     	endif
  7399  0049E0  0E20               	movlw	32
  7400  0049E2  0008               	tblrd		*
  7401  0049E4  64F5               	cpfsgt	tablat,c
  7402  0049E6  D009               	goto	u6920
  7403  0049E8  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7404  0049EC  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7405  0049F0                     	if	0	;tblptru may be non-zero
  7406  0049F0                     	endif
  7407  0049F0                     	if	0	;tblptru may be non-zero
  7408  0049F0                     	endif
  7409  0049F0  0008               	tblrd		*
  7410  0049F2  50F5               	movf	tablat,w,c
  7411  0049F4  0A3A               	xorlw	58
  7412  0049F6  A4D8               	btfss	status,2,c
  7413  0049F8  D7ED               	goto	l5277
  7414  0049FA                     u6920:
  7415                           
  7416                           ;ff.c: 2131:   if (*tt == ':') {
  7417  0049FA  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7418  0049FE  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7419  004A02                     	if	0	;tblptru may be non-zero
  7420  004A02                     	endif
  7421  004A02                     	if	0	;tblptru may be non-zero
  7422  004A02                     	endif
  7423  004A02  0008               	tblrd		*
  7424  004A04  50F5               	movf	tablat,w,c
  7425  004A06  0A3A               	xorlw	58
  7426  004A08  A4D8               	btfss	status,2,c
  7427  004A0A  D03B               	goto	l5309
  7428                           
  7429                           ;ff.c: 2132:    tp = *path;
  7430  004A0C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7431  004A10  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7432  004A14  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7433  004A18  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7434                           
  7435                           ;ff.c: 2133:    i = *tp++ - '0';
  7436  004A1C  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7437  004A20  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7438  004A24                     	if	0	;tblptru may be non-zero
  7439  004A24                     	endif
  7440  004A24                     	if	0	;tblptru may be non-zero
  7441  004A24                     	endif
  7442  004A24  0008               	tblrd		*
  7443  004A26  CFF5 F003          	movff	tablat,??_get_ldnumber
  7444  004A2A  0ED0               	movlw	208
  7445  004A2C  2403               	addwf	??_get_ldnumber,w,c
  7446  004A2E  6E0B               	movwf	get_ldnumber@i,c
  7447  004A30  6A0C               	clrf	get_ldnumber@i+1,c
  7448  004A32  0EFF               	movlw	255
  7449  004A34  220C               	addwfc	get_ldnumber@i+1,f,c
  7450  004A36  4A07               	infsnz	get_ldnumber@tp,f,c
  7451  004A38  2A08               	incf	get_ldnumber@tp+1,f,c
  7452                           
  7453                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7454  004A3A  500C               	movf	get_ldnumber@i+1,w,c
  7455  004A3C  E11D               	bnz	l5305
  7456  004A3E  0E0A               	movlw	10
  7457  004A40  5C0B               	subwf	get_ldnumber@i,w,c
  7458  004A42  B0D8               	btfsc	status,0,c
  7459  004A44  D019               	goto	l5305
  7460  004A46  500D               	movf	get_ldnumber@tt,w,c
  7461  004A48  1807               	xorwf	get_ldnumber@tp,w,c
  7462  004A4A  E116               	bnz	l5305
  7463  004A4C  500E               	movf	get_ldnumber@tt+1,w,c
  7464  004A4E  1808               	xorwf	get_ldnumber@tp+1,w,c
  7465  004A50  A4D8               	btfss	status,2,c
  7466  004A52  D012               	goto	l5305
  7467                           
  7468                           ;ff.c: 2135:     if (i < 1) {
  7469  004A54  500B               	movf	get_ldnumber@i,w,c
  7470  004A56  100C               	iorwf	get_ldnumber@i+1,w,c
  7471  004A58  A4D8               	btfss	status,2,c
  7472  004A5A  D00E               	goto	l5305
  7473                           
  7474                           ;ff.c: 2136:      vol = (int)i;
  7475  004A5C  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7476  004A60  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7477                           
  7478                           ;ff.c: 2137:      *path = ++tt;
  7479  004A64  4A0D               	infsnz	get_ldnumber@tt,f,c
  7480  004A66  2A0E               	incf	get_ldnumber@tt+1,f,c
  7481  004A68  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7482  004A6C  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7483  004A70  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7484  004A74  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7485  004A78                     l5305:
  7486                           
  7487                           ;ff.c: 2156:    return vol;
  7488  004A78  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7489  004A7C  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7490  004A80  0012               	return	
  7491  004A82                     l5309:
  7492                           
  7493                           ;ff.c: 2161:   vol = 0;
  7494  004A82  0E00               	movlw	0
  7495  004A84  6E0A               	movwf	get_ldnumber@vol+1,c
  7496  004A86  0E00               	movlw	0
  7497  004A88  6E09               	movwf	get_ldnumber@vol,c
  7498  004A8A  D7F6               	goto	l5305
  7499  004A8C                     __end_of_get_ldnumber:
  7500                           	opt callstack 0
  7501                           
  7502 ;; *************** function _disk_initialize *****************
  7503 ;; Defined at:
  7504 ;;		line 296 in file "diskio.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  pdrv            1    wreg     unsigned char 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;  pdrv            1   17[COMRAM] unsigned char 
  7509 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7510 ;;  tmr             2   26[COMRAM] unsigned short 
  7511 ;;  n               1   28[COMRAM] unsigned char 
  7512 ;;  ty              1   25[COMRAM] unsigned char 
  7513 ;;  cmd             1   24[COMRAM] unsigned char 
  7514 ;; Return value:  Size  Location     Type
  7515 ;;                  1    wreg      unsigned char 
  7516 ;; Registers used:
  7517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7523 ;;      Params:         0       0       0       0       0       0       0       0       0
  7524 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7525 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7526 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7527 ;;Total ram usage:       13 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    5
  7530 ;; This function calls:
  7531 ;;		_SPI1_Exchange8bit
  7532 ;;		_SPI1_Initialize
  7533 ;;		_SPI1_Open
  7534 ;;		_deselect
  7535 ;;		_send_cmd
  7536 ;; This function is called by:
  7537 ;;		_find_volume
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text18
  7542  003B98                     __ptext18:
  7543                           	opt callstack 0
  7544  003B98                     _disk_initialize:
  7545                           	opt callstack 23
  7546                           
  7547                           ;incstack = 0
  7548                           ;disk_initialize@pdrv stored from wreg
  7549  003B98  6E12               	movwf	disk_initialize@pdrv,c
  7550                           
  7551                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7552  003B9A  5012               	movf	disk_initialize@pdrv,w,c
  7553  003B9C  B4D8               	btfsc	status,2,c
  7554  003B9E  D002               	goto	l130
  7555  003BA0  0E01               	movlw	1
  7556  003BA2  0012               	return	
  7557  003BA4                     l130:
  7558                           
  7559                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7560  003BA4  0100               	movlb	0	; () banked
  7561  003BA6  A3F7               	btfss	_Stat& (0+255),1,b
  7562  003BA8  D003               	goto	l4907
  7563  003BAA                     u6190:
  7564  003BAA  0100               	movlb	0	; () banked
  7565  003BAC  51F7               	movf	_Stat& (0+255),w,b
  7566  003BAE  0012               	return	
  7567  003BB0                     l4907:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;diskio.c: 308:  SPI1_Initialize();
  7571  003BB0  EC0A  F02B         	call	_SPI1_Initialize	;wreg free
  7572                           
  7573                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7574  003BB4  0E0A               	movlw	10
  7575  003BB6  6E1D               	movwf	disk_initialize@n,c
  7576  003BB8  D004               	goto	l4915
  7577  003BBA                     l4911:
  7578  003BBA  0EFF               	movlw	255
  7579  003BBC  ECF4  F02A         	call	_SPI1_Exchange8bit
  7580  003BC0  061D               	decf	disk_initialize@n,f,c
  7581  003BC2                     l4915:
  7582  003BC2  501D               	movf	disk_initialize@n,w,c
  7583  003BC4  A4D8               	btfss	status,2,c
  7584  003BC6  D7F9               	goto	l4911
  7585                           
  7586                           ;diskio.c: 311:  ty = 0;
  7587  003BC8  0E00               	movlw	0
  7588  003BCA  6E1A               	movwf	disk_initialize@ty,c
  7589                           
  7590                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7591  003BCC  0E00               	movlw	0
  7592  003BCE  6E0B               	movwf	send_cmd@arg,c
  7593  003BD0  0E00               	movlw	0
  7594  003BD2  6E0C               	movwf	send_cmd@arg+1,c
  7595  003BD4  0E00               	movlw	0
  7596  003BD6  6E0D               	movwf	send_cmd@arg+2,c
  7597  003BD8  0E00               	movlw	0
  7598  003BDA  6E0E               	movwf	send_cmd@arg+3,c
  7599  003BDC  0E00               	movlw	0
  7600  003BDE  ECE3  F029         	call	_send_cmd
  7601  003BE2  06E8               	decf	wreg,f,c
  7602  003BE4  A4D8               	btfss	status,2,c
  7603  003BE6  D0C1               	goto	l152
  7604                           
  7605                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7606  003BE8  0EAA               	movlw	170
  7607  003BEA  6E0B               	movwf	send_cmd@arg,c
  7608  003BEC  0E01               	movlw	1
  7609  003BEE  6E0C               	movwf	send_cmd@arg+1,c
  7610  003BF0  0E00               	movlw	0
  7611  003BF2  6E0D               	movwf	send_cmd@arg+2,c
  7612  003BF4  0E00               	movlw	0
  7613  003BF6  6E0E               	movwf	send_cmd@arg+3,c
  7614  003BF8  0E08               	movlw	8
  7615  003BFA  ECE3  F029         	call	_send_cmd
  7616  003BFE  06E8               	decf	wreg,f,c
  7617  003C00  A4D8               	btfss	status,2,c
  7618  003C02  D067               	goto	l4971
  7619                           
  7620                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7621  003C04  0E00               	movlw	0
  7622  003C06  6E1D               	movwf	disk_initialize@n,c
  7623  003C08                     l4929:
  7624  003C08  0E13               	movlw	low disk_initialize@ocr
  7625  003C0A  241D               	addwf	disk_initialize@n,w,c
  7626  003C0C  6ED9               	movwf	fsr2l,c
  7627  003C0E  6ADA               	clrf	fsr2h,c
  7628  003C10  0E00               	movlw	high disk_initialize@ocr
  7629  003C12  22DA               	addwfc	fsr2h,f,c
  7630  003C14  0EFF               	movlw	255
  7631  003C16  ECF4  F02A         	call	_SPI1_Exchange8bit
  7632  003C1A  6EDF               	movwf	indf2,c
  7633  003C1C  2A1D               	incf	disk_initialize@n,f,c
  7634  003C1E  0E03               	movlw	3
  7635  003C20  641D               	cpfsgt	disk_initialize@n,c
  7636  003C22  D7F2               	goto	l4929
  7637                           
  7638                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7639  003C24  0415               	decf	disk_initialize@ocr+2,w,c
  7640  003C26  A4D8               	btfss	status,2,c
  7641  003C28  D0A0               	goto	l152
  7642  003C2A  0EAA               	movlw	170
  7643  003C2C  1816               	xorwf	disk_initialize@ocr+3,w,c
  7644  003C2E  A4D8               	btfss	status,2,c
  7645  003C30  D09C               	goto	l152
  7646                           
  7647                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7648  003C32  0E03               	movlw	3
  7649  003C34  6E1C               	movwf	disk_initialize@tmr+1,c
  7650  003C36  0EE8               	movlw	232
  7651  003C38  6E1B               	movwf	disk_initialize@tmr,c
  7652  003C3A  D018               	goto	l141
  7653  003C3C                     l4941:
  7654                           
  7655                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7656  003C3C  0E00               	movlw	0
  7657  003C3E  6E0B               	movwf	send_cmd@arg,c
  7658  003C40  0E00               	movlw	0
  7659  003C42  6E0C               	movwf	send_cmd@arg+1,c
  7660  003C44  0E00               	movlw	0
  7661  003C46  6E0D               	movwf	send_cmd@arg+2,c
  7662  003C48  0E40               	movlw	64
  7663  003C4A  6E0E               	movwf	send_cmd@arg+3,c
  7664  003C4C  0EA9               	movlw	169
  7665  003C4E  ECE3  F029         	call	_send_cmd
  7666  003C52  0900               	iorlw	0
  7667  003C54  B4D8               	btfsc	status,2,c
  7668  003C56  D00E               	goto	u6270
  7669                           
  7670                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7671  003C58  0E03               	movlw	3
  7672  003C5A  6E11               	movwf	??_disk_initialize& (0+255),c
  7673  003C5C  0E98               	movlw	152
  7674  003C5E                     u8997:
  7675  003C5E  2EE8               	decfsz	wreg,f,c
  7676  003C60  D7FE               	bra	u8997
  7677  003C62  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7678  003C64  D7FC               	bra	u8997
  7679                           
  7680                           ;diskio.c: 319:     }
  7681  003C66  061B               	decf	disk_initialize@tmr,f,c
  7682  003C68  A0D8               	btfss	status,0,c
  7683  003C6A  061C               	decf	disk_initialize@tmr+1,f,c
  7684  003C6C                     l141:
  7685  003C6C  501B               	movf	disk_initialize@tmr,w,c
  7686  003C6E  101C               	iorwf	disk_initialize@tmr+1,w,c
  7687  003C70  A4D8               	btfss	status,2,c
  7688  003C72  D7E4               	goto	l4941
  7689  003C74                     u6270:
  7690                           
  7691                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7692  003C74  501B               	movf	disk_initialize@tmr,w,c
  7693  003C76  101C               	iorwf	disk_initialize@tmr+1,w,c
  7694  003C78  B4D8               	btfsc	status,2,c
  7695  003C7A  D077               	goto	l152
  7696  003C7C  0E00               	movlw	0
  7697  003C7E  6E0B               	movwf	send_cmd@arg,c
  7698  003C80  0E00               	movlw	0
  7699  003C82  6E0C               	movwf	send_cmd@arg+1,c
  7700  003C84  0E00               	movlw	0
  7701  003C86  6E0D               	movwf	send_cmd@arg+2,c
  7702  003C88  0E00               	movlw	0
  7703  003C8A  6E0E               	movwf	send_cmd@arg+3,c
  7704  003C8C  0E3A               	movlw	58
  7705  003C8E  ECE3  F029         	call	_send_cmd
  7706  003C92  0900               	iorlw	0
  7707  003C94  A4D8               	btfss	status,2,c
  7708  003C96  D069               	goto	l152
  7709                           
  7710                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7711  003C98  0E00               	movlw	0
  7712  003C9A  6E1D               	movwf	disk_initialize@n,c
  7713  003C9C                     l4959:
  7714  003C9C  0E13               	movlw	low disk_initialize@ocr
  7715  003C9E  241D               	addwf	disk_initialize@n,w,c
  7716  003CA0  6ED9               	movwf	fsr2l,c
  7717  003CA2  6ADA               	clrf	fsr2h,c
  7718  003CA4  0E00               	movlw	high disk_initialize@ocr
  7719  003CA6  22DA               	addwfc	fsr2h,f,c
  7720  003CA8  0EFF               	movlw	255
  7721  003CAA  ECF4  F02A         	call	_SPI1_Exchange8bit
  7722  003CAE  6EDF               	movwf	indf2,c
  7723  003CB0  2A1D               	incf	disk_initialize@n,f,c
  7724  003CB2  0E03               	movlw	3
  7725  003CB4  641D               	cpfsgt	disk_initialize@n,c
  7726  003CB6  D7F2               	goto	l4959
  7727                           
  7728                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7729  003CB8  BC13               	btfsc	disk_initialize@ocr,6,c
  7730  003CBA  D004               	goto	l4967
  7731  003CBC  0E00               	movlw	0
  7732  003CBE  6E18               	movwf	_disk_initialize$324+1,c
  7733  003CC0  0E04               	movlw	4
  7734  003CC2  D003               	goto	L7
  7735  003CC4                     l4967:
  7736  003CC4  0E00               	movlw	0
  7737  003CC6  6E18               	movwf	_disk_initialize$324+1,c
  7738  003CC8  0E0C               	movlw	12
  7739  003CCA                     L7:
  7740  003CCA  6E17               	movwf	_disk_initialize$324,c
  7741  003CCC  C017  F01A         	movff	_disk_initialize$324,disk_initialize@ty
  7742  003CD0  D04C               	goto	l152
  7743  003CD2                     l4971:
  7744                           
  7745                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7746  003CD2  0E00               	movlw	0
  7747  003CD4  6E0B               	movwf	send_cmd@arg,c
  7748  003CD6  0E00               	movlw	0
  7749  003CD8  6E0C               	movwf	send_cmd@arg+1,c
  7750  003CDA  0E00               	movlw	0
  7751  003CDC  6E0D               	movwf	send_cmd@arg+2,c
  7752  003CDE  0E00               	movlw	0
  7753  003CE0  6E0E               	movwf	send_cmd@arg+3,c
  7754  003CE2  0EA9               	movlw	169
  7755  003CE4  ECE3  F029         	call	_send_cmd
  7756  003CE8  6E11               	movwf	??_disk_initialize& (0+255),c
  7757  003CEA  0E02               	movlw	2
  7758  003CEC  6011               	cpfslt	??_disk_initialize,c
  7759  003CEE  D004               	goto	l4975
  7760                           
  7761                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  7762  003CF0  0E02               	movlw	2
  7763  003CF2  6E1A               	movwf	disk_initialize@ty,c
  7764  003CF4  0EA9               	movlw	169
  7765  003CF6  D003               	goto	L8
  7766  003CF8                     l4975:
  7767                           
  7768                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  7769  003CF8  0E01               	movlw	1
  7770  003CFA  6E1A               	movwf	disk_initialize@ty,c
  7771  003CFC  0E01               	movlw	1
  7772  003CFE                     L8:
  7773  003CFE  6E19               	movwf	disk_initialize@cmd,c
  7774                           
  7775                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  7776                           
  7777                           ;diskio.c: 330:    }
  7778  003D00  0E03               	movlw	3
  7779  003D02  6E1C               	movwf	disk_initialize@tmr+1,c
  7780  003D04  0EE8               	movlw	232
  7781  003D06  6E1B               	movwf	disk_initialize@tmr,c
  7782  003D08  D018               	goto	l155
  7783  003D0A                     l4977:
  7784                           
  7785                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  7786  003D0A  0E00               	movlw	0
  7787  003D0C  6E0B               	movwf	send_cmd@arg,c
  7788  003D0E  0E00               	movlw	0
  7789  003D10  6E0C               	movwf	send_cmd@arg+1,c
  7790  003D12  0E00               	movlw	0
  7791  003D14  6E0D               	movwf	send_cmd@arg+2,c
  7792  003D16  0E00               	movlw	0
  7793  003D18  6E0E               	movwf	send_cmd@arg+3,c
  7794  003D1A  5019               	movf	disk_initialize@cmd,w,c
  7795  003D1C  ECE3  F029         	call	_send_cmd
  7796  003D20  0900               	iorlw	0
  7797  003D22  B4D8               	btfsc	status,2,c
  7798  003D24  D00E               	goto	u6340
  7799                           
  7800                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  7801  003D26  0E03               	movlw	3
  7802  003D28  6E11               	movwf	??_disk_initialize& (0+255),c
  7803  003D2A  0E98               	movlw	152
  7804  003D2C                     u9007:
  7805  003D2C  2EE8               	decfsz	wreg,f,c
  7806  003D2E  D7FE               	bra	u9007
  7807  003D30  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7808  003D32  D7FC               	bra	u9007
  7809                           
  7810                           ;diskio.c: 334:    }
  7811  003D34  061B               	decf	disk_initialize@tmr,f,c
  7812  003D36  A0D8               	btfss	status,0,c
  7813  003D38  061C               	decf	disk_initialize@tmr+1,f,c
  7814  003D3A                     l155:
  7815  003D3A  501B               	movf	disk_initialize@tmr,w,c
  7816  003D3C  101C               	iorwf	disk_initialize@tmr+1,w,c
  7817  003D3E  A4D8               	btfss	status,2,c
  7818  003D40  D7E4               	goto	l4977
  7819  003D42                     u6340:
  7820                           
  7821                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  7822  003D42  501B               	movf	disk_initialize@tmr,w,c
  7823  003D44  101C               	iorwf	disk_initialize@tmr+1,w,c
  7824  003D46  B4D8               	btfsc	status,2,c
  7825  003D48  D00E               	goto	u6360
  7826  003D4A  0E00               	movlw	0
  7827  003D4C  6E0B               	movwf	send_cmd@arg,c
  7828  003D4E  0E02               	movlw	2
  7829  003D50  6E0C               	movwf	send_cmd@arg+1,c
  7830  003D52  0E00               	movlw	0
  7831  003D54  6E0D               	movwf	send_cmd@arg+2,c
  7832  003D56  0E00               	movlw	0
  7833  003D58  6E0E               	movwf	send_cmd@arg+3,c
  7834  003D5A  0E10               	movlw	16
  7835  003D5C  ECE3  F029         	call	_send_cmd
  7836  003D60  0900               	iorlw	0
  7837  003D62  B4D8               	btfsc	status,2,c
  7838  003D64  D002               	goto	l152
  7839  003D66                     u6360:
  7840                           
  7841                           ;diskio.c: 336:     ty = 0;
  7842  003D66  0E00               	movlw	0
  7843  003D68  6E1A               	movwf	disk_initialize@ty,c
  7844  003D6A                     l152:
  7845                           
  7846                           ;diskio.c: 339:  CardType = ty;
  7847  003D6A  C01A  F0D6         	movff	disk_initialize@ty,_CardType
  7848                           
  7849                           ;diskio.c: 340:  deselect();
  7850  003D6E  EC11  F02B         	call	_deselect	;wreg free
  7851                           
  7852                           ;diskio.c: 342:  if (ty) {
  7853  003D72  501A               	movf	disk_initialize@ty,w,c
  7854  003D74  B4D8               	btfsc	status,2,c
  7855  003D76  D719               	goto	u6190
  7856                           
  7857                           ;diskio.c: 343:   Stat &= ~0x01;
  7858  003D78  0100               	movlb	0	; () banked
  7859  003D7A  91F7               	bcf	_Stat& (0+255),0,b
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;diskio.c: 344:   SPI1_Open();
  7863  003D7C  ECFC  F02A         	call	_SPI1_Open	;wreg free
  7864  003D80  D714               	goto	u6190
  7865  003D82                     __end_of_disk_initialize:
  7866                           	opt callstack 0
  7867                           
  7868 ;; *************** function _SPI1_Open *****************
  7869 ;; Defined at:
  7870 ;;		line 77 in file "mcc_generated_files/spi1.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;		None
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;		None
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7884 ;;      Params:         0       0       0       0       0       0       0       0       0
  7885 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7887 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7888 ;;Total ram usage:        0 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; This function calls:
  7891 ;;		Nothing
  7892 ;; This function is called by:
  7893 ;;		_disk_initialize
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           	psect	text19
  7898  0055F8                     __ptext19:
  7899                           	opt callstack 0
  7900  0055F8                     _SPI1_Open:
  7901                           	opt callstack 27
  7902                           
  7903                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  7904                           
  7905                           ;incstack = 0
  7906  0055F8  0E40               	movlw	64
  7907  0055FA  6EC7               	movwf	4039,c	;volatile
  7908                           
  7909                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  7910  0055FC  0E20               	movlw	32
  7911  0055FE  6EC6               	movwf	4038,c	;volatile
  7912                           
  7913                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  7914  005600  0E00               	movlw	0
  7915  005602  6EC8               	movwf	4040,c	;volatile
  7916  005604  0012               	return		;funcret
  7917  005606                     __end_of_SPI1_Open:
  7918                           	opt callstack 0
  7919                           
  7920 ;; *************** function _check_fs *****************
  7921 ;; Defined at:
  7922 ;;		line 2175 in file "ff.c"
  7923 ;; Parameters:    Size  Location     Type
  7924 ;;  fs              2   58[COMRAM] PTR struct .
  7925 ;;		 -> NULL(0), FatFs(558), 
  7926 ;;  sect            4   60[COMRAM] unsigned long 
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;		None
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  1    wreg      unsigned char 
  7931 ;; Registers used:
  7932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7938 ;;      Params:         6       0       0       0       0       0       0       0       0
  7939 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7940 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7941 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7942 ;;Total ram usage:       10 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    8
  7945 ;; This function calls:
  7946 ;;		_move_window
  7947 ;; This function is called by:
  7948 ;;		_find_volume
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text20
  7953  0048C2                     __ptext20:
  7954                           	opt callstack 0
  7955  0048C2                     _check_fs:
  7956                           	opt callstack 20
  7957                           
  7958                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  7959                           
  7960                           ;incstack = 0
  7961  0048C2  EE20 F004          	lfsr	2,4
  7962  0048C6  503B               	movf	check_fs@fs,w,c
  7963  0048C8  26D9               	addwf	fsr2l,f,c
  7964  0048CA  503C               	movf	check_fs@fs+1,w,c
  7965  0048CC  22DA               	addwfc	fsr2h,f,c
  7966  0048CE  0E00               	movlw	0
  7967  0048D0  6EDF               	movwf	indf2,c
  7968  0048D2  EE20 F02A          	lfsr	2,42
  7969  0048D6  503B               	movf	check_fs@fs,w,c
  7970  0048D8  26D9               	addwf	fsr2l,f,c
  7971  0048DA  503C               	movf	check_fs@fs+1,w,c
  7972  0048DC  22DA               	addwfc	fsr2h,f,c
  7973  0048DE  0EFF               	movlw	255
  7974  0048E0  6EDE               	movwf	postinc2,c
  7975  0048E2  0EFF               	movlw	255
  7976  0048E4  6EDE               	movwf	postinc2,c
  7977  0048E6  0EFF               	movlw	255
  7978  0048E8  6EDE               	movwf	postinc2,c
  7979  0048EA  0EFF               	movlw	255
  7980  0048EC  6EDD               	movwf	postdec2,c
  7981                           
  7982                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  7983  0048EE  C03B  F030         	movff	check_fs@fs,move_window@fs
  7984  0048F2  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  7985  0048F6  C03D  F032         	movff	check_fs@sect,move_window@sector
  7986  0048FA  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  7987  0048FE  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  7988  004902  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  7989  004906  EC8F  F027         	call	_move_window	;wreg free
  7990  00490A  0900               	iorlw	0
  7991  00490C  B4D8               	btfsc	status,2,c
  7992  00490E  D002               	goto	l5323
  7993                           
  7994                           ;ff.c: 2182:   return 3;
  7995  004910  0E03               	movlw	3
  7996  004912  0012               	return	
  7997  004914                     l5323:
  7998                           
  7999                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8000  004914  EE22 F02C          	lfsr	2,556
  8001  004918  503B               	movf	check_fs@fs,w,c
  8002  00491A  26D9               	addwf	fsr2l,f,c
  8003  00491C  503C               	movf	check_fs@fs+1,w,c
  8004  00491E  22DA               	addwfc	fsr2h,f,c
  8005  004920  0E55               	movlw	85
  8006  004922  18DE               	xorwf	postinc2,w,c
  8007  004924  E104               	bnz	u6980
  8008  004926  0EAA               	movlw	170
  8009  004928  18DE               	xorwf	postinc2,w,c
  8010  00492A  B4D8               	btfsc	status,2,c
  8011  00492C  D002               	goto	l5329
  8012  00492E                     u6980:
  8013                           
  8014                           ;ff.c: 2185:   return 2;
  8015  00492E  0E02               	movlw	2
  8016  004930  0012               	return	
  8017  004932                     l5329:
  8018                           
  8019                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8020  004932  EE20 F064          	lfsr	2,100
  8021  004936  503B               	movf	check_fs@fs,w,c
  8022  004938  26D9               	addwf	fsr2l,f,c
  8023  00493A  503C               	movf	check_fs@fs+1,w,c
  8024  00493C  22DA               	addwfc	fsr2h,f,c
  8025  00493E  0EFF               	movlw	255
  8026  004940  14DE               	andwf	postinc2,w,c
  8027  004942  6E41               	movwf	??_check_fs& (0+255),c
  8028  004944  0EFF               	movlw	255
  8029  004946  14DE               	andwf	postinc2,w,c
  8030  004948  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8031  00494A  0EFF               	movlw	255
  8032  00494C  14DE               	andwf	postinc2,w,c
  8033  00494E  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8034  004950  0E00               	movlw	0
  8035  004952  14DE               	andwf	postinc2,w,c
  8036  004954  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8037  004956  0E46               	movlw	70
  8038  004958  1841               	xorwf	??_check_fs,w,c
  8039  00495A  E10A               	bnz	l5335
  8040  00495C  0E41               	movlw	65
  8041  00495E  1842               	xorwf	??_check_fs+1,w,c
  8042  004960  E107               	bnz	l5335
  8043  004962  0E54               	movlw	84
  8044  004964  1843               	xorwf	??_check_fs+2,w,c
  8045  004966  1044               	iorwf	??_check_fs+3,w,c
  8046  004968  A4D8               	btfss	status,2,c
  8047  00496A  D002               	goto	l5335
  8048  00496C                     u6990:
  8049                           
  8050                           ;ff.c: 2188:   return 0;
  8051  00496C  0E00               	movlw	0
  8052  00496E  0012               	return	
  8053  004970                     l5335:
  8054                           
  8055                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8056  004970  EE20 F080          	lfsr	2,128
  8057  004974  503B               	movf	check_fs@fs,w,c
  8058  004976  26D9               	addwf	fsr2l,f,c
  8059  004978  503C               	movf	check_fs@fs+1,w,c
  8060  00497A  22DA               	addwfc	fsr2h,f,c
  8061  00497C  0EFF               	movlw	255
  8062  00497E  14DE               	andwf	postinc2,w,c
  8063  004980  6E41               	movwf	??_check_fs& (0+255),c
  8064  004982  0EFF               	movlw	255
  8065  004984  14DE               	andwf	postinc2,w,c
  8066  004986  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8067  004988  0EFF               	movlw	255
  8068  00498A  14DE               	andwf	postinc2,w,c
  8069  00498C  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8070  00498E  0E00               	movlw	0
  8071  004990  14DE               	andwf	postinc2,w,c
  8072  004992  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8073  004994  0E46               	movlw	70
  8074  004996  1841               	xorwf	??_check_fs,w,c
  8075  004998  E108               	bnz	l5341
  8076  00499A  0E41               	movlw	65
  8077  00499C  1842               	xorwf	??_check_fs+1,w,c
  8078  00499E  E105               	bnz	l5341
  8079  0049A0  0E54               	movlw	84
  8080  0049A2  1843               	xorwf	??_check_fs+2,w,c
  8081  0049A4  1044               	iorwf	??_check_fs+3,w,c
  8082  0049A6  B4D8               	btfsc	status,2,c
  8083  0049A8  D7E1               	goto	u6990
  8084  0049AA                     l5341:
  8085                           
  8086                           ;ff.c: 2192:  return 1;
  8087  0049AA  0E01               	movlw	1
  8088  0049AC  0012               	return		;funcret
  8089  0049AE                     __end_of_check_fs:
  8090                           	opt callstack 0
  8091                           
  8092 ;; *************** function _f_lseek *****************
  8093 ;; Defined at:
  8094 ;;		line 3033 in file "ff.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  fp              2   13[BANK0 ] PTR struct .
  8097 ;;		 -> Fil(32), 
  8098 ;;  ofs             4   15[BANK0 ] unsigned long 
  8099 ;; Auto vars:     Size  Location     Type
  8100 ;;  clst            4   48[BANK0 ] unsigned long 
  8101 ;;  bcs             4   44[BANK0 ] unsigned long 
  8102 ;;  nsect           4   40[BANK0 ] unsigned long 
  8103 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8104 ;;  res             1   39[BANK0 ] enum E93
  8105 ;; Return value:  Size  Location     Type
  8106 ;;                  1    wreg      enum E4918
  8107 ;; Registers used:
  8108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : 0/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8114 ;;      Params:         0       6       0       0       0       0       0       0       0
  8115 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8116 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8117 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8118 ;;Total ram usage:       39 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:   10
  8121 ;; This function calls:
  8122 ;;		___lldiv
  8123 ;;		_clust2sect
  8124 ;;		_create_chain
  8125 ;;		_get_fat
  8126 ;;		_validate
  8127 ;; This function is called by:
  8128 ;;		_main
  8129 ;; This function uses a non-reentrant model
  8130 ;;
  8131                           
  8132                           	psect	text21
  8133  001944                     __ptext21:
  8134                           	opt callstack 0
  8135  001944                     _f_lseek:
  8136                           	opt callstack 20
  8137                           
  8138                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8139                           
  8140                           ;incstack = 0
  8141  001944  C06D  F002         	movff	f_lseek@fp,validate@obj
  8142  001948  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8143  00194C  ECE2  F027         	call	_validate	;wreg free
  8144  001950  0100               	movlb	0	; () banked
  8145  001952  6F87               	movwf	f_lseek@res& (0+255),b
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8149  001954  5187               	movf	f_lseek@res& (0+255),w,b
  8150  001956  B4D8               	btfsc	status,2,c
  8151  001958  D002               	goto	l6055
  8152  00195A                     u8110:
  8153                           
  8154                           ; BSR set to: 0
  8155  00195A  5187               	movf	f_lseek@res& (0+255),w,b
  8156  00195C  0012               	return	
  8157  00195E                     l6055:
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;ff.c: 3047:  if (fp->err)
  8161  00195E  EE20 F005          	lfsr	2,5
  8162  001962  516D               	movf	f_lseek@fp& (0+255),w,b
  8163  001964  26D9               	addwf	fsr2l,f,c
  8164  001966  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8165  001968  22DA               	addwfc	fsr2h,f,c
  8166  00196A  50DF               	movf	indf2,w,c
  8167  00196C  B4D8               	btfsc	status,2,c
  8168  00196E  D008               	goto	l6061
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8172  001970  EE20 F005          	lfsr	2,5
  8173  001974  516D               	movf	f_lseek@fp& (0+255),w,b
  8174  001976  26D9               	addwf	fsr2l,f,c
  8175  001978  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8176  00197A  22DA               	addwfc	fsr2h,f,c
  8177  00197C  50DF               	movf	indf2,w,c
  8178  00197E  0012               	return	
  8179  001980                     l6061:
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8183  001980  EE20 F00A          	lfsr	2,10
  8184  001984  516D               	movf	f_lseek@fp& (0+255),w,b
  8185  001986  26D9               	addwf	fsr2l,f,c
  8186  001988  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8187  00198A  22DA               	addwfc	fsr2h,f,c
  8188  00198C  516F               	movf	f_lseek@ofs& (0+255),w,b
  8189  00198E  5CDE               	subwf	postinc2,w,c
  8190  001990  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8191  001992  58DE               	subwfb	postinc2,w,c
  8192  001994  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8193  001996  58DE               	subwfb	postinc2,w,c
  8194  001998  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8195  00199A  58DE               	subwfb	postinc2,w,c
  8196  00199C  B0D8               	btfsc	status,0,c
  8197  00199E  D016               	goto	l727
  8198                           
  8199                           ; BSR set to: 0
  8200  0019A0  EE20 F004          	lfsr	2,4
  8201  0019A4  516D               	movf	f_lseek@fp& (0+255),w,b
  8202  0019A6  26D9               	addwf	fsr2l,f,c
  8203  0019A8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8204  0019AA  22DA               	addwfc	fsr2h,f,c
  8205  0019AC  B2DF               	btfsc	indf2,1,c
  8206  0019AE  D00E               	goto	l727
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8210  0019B0  EE20 F00A          	lfsr	2,10
  8211  0019B4  516D               	movf	f_lseek@fp& (0+255),w,b
  8212  0019B6  26D9               	addwf	fsr2l,f,c
  8213  0019B8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8214  0019BA  22DA               	addwfc	fsr2h,f,c
  8215  0019BC  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8216  0019C0  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8217  0019C4  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8218  0019C8  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8219  0019CC                     l727:
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;ff.c: 3113:   ifptr = fp->fptr;
  8223  0019CC  EE20 F006          	lfsr	2,6
  8224  0019D0  516D               	movf	f_lseek@fp& (0+255),w,b
  8225  0019D2  26D9               	addwf	fsr2l,f,c
  8226  0019D4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8227  0019D6  22DA               	addwfc	fsr2h,f,c
  8228  0019D8  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8229  0019DC  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8230  0019E0  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8231  0019E4  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8232                           
  8233                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8234  0019E8  0E00               	movlw	0
  8235  0019EA  6F88               	movwf	f_lseek@nsect& (0+255),b
  8236  0019EC  0E00               	movlw	0
  8237  0019EE  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8238  0019F0  0E00               	movlw	0
  8239  0019F2  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8240  0019F4  0E00               	movlw	0
  8241  0019F6  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8242  0019F8  EE20 F006          	lfsr	2,6
  8243  0019FC  516D               	movf	f_lseek@fp& (0+255),w,b
  8244  0019FE  26D9               	addwf	fsr2l,f,c
  8245  001A00  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8246  001A02  22DA               	addwfc	fsr2h,f,c
  8247  001A04  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8248  001A08  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8249  001A0C  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8250  001A10  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;ff.c: 3115:   if (ofs) {
  8254  001A14  516F               	movf	f_lseek@ofs& (0+255),w,b
  8255  001A16  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8256  001A18  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8257  001A1A  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8258  001A1C  B4D8               	btfsc	status,2,c
  8259  001A1E  D22D               	goto	l6155
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8263  001A20  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8264  001A24  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8265  001A28  EE10 F002          	lfsr	1,2
  8266  001A2C  50DE               	movf	postinc2,w,c
  8267  001A2E  26E1               	addwf	fsr1l,f,c
  8268  001A30  50DD               	movf	postdec2,w,c
  8269  001A32  22E2               	addwfc	fsr1h,f,c
  8270  001A34  50E7               	movf	indf1,w,c
  8271  001A36  6F73               	movwf	??_f_lseek& (0+255),b
  8272  001A38  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8273  001A3C  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8274  001A3E  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8275  001A40  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8276  001A42  0E09               	movlw	9
  8277  001A44                     u8165:
  8278  001A44  90D8               	bcf	status,0,c
  8279  001A46  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8280  001A48  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8281  001A4A  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8282  001A4C  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8283  001A4E  2EE8               	decfsz	wreg,f,c
  8284  001A50  D7F9               	goto	u8165
  8285  001A52  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8286  001A56  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8287  001A5A  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8288  001A5E  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;ff.c: 3117:    if (ifptr > 0 &&
  8292  001A62  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8293  001A64  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8294  001A66  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8295  001A68  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8296  001A6A  B4D8               	btfsc	status,2,c
  8297  001A6C  D097               	goto	l6077
  8298                           
  8299                           ; BSR set to: 0
  8300  001A6E  0EFF               	movlw	255
  8301  001A70  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8302  001A72  6E01               	movwf	___lldiv@dividend,c
  8303  001A74  0EFF               	movlw	255
  8304  001A76  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8305  001A78  6E02               	movwf	___lldiv@dividend+1,c
  8306  001A7A  0EFF               	movlw	255
  8307  001A7C  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8308  001A7E  6E03               	movwf	___lldiv@dividend+2,c
  8309  001A80  0EFF               	movlw	255
  8310  001A82  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8311  001A84  6E04               	movwf	___lldiv@dividend+3,c
  8312  001A86  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8313  001A8A  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8314  001A8E  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8315  001A92  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8316  001A96  EC2C  F028         	call	___lldiv	;wreg free
  8317  001A9A  C001  F073         	movff	?___lldiv,??_f_lseek
  8318  001A9E  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8319  001AA2  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8320  001AA6  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8321  001AAA  0EFF               	movlw	255
  8322  001AAC  0100               	movlb	0	; () banked
  8323  001AAE  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8324  001AB0  6E01               	movwf	___lldiv@dividend,c
  8325  001AB2  0EFF               	movlw	255
  8326  001AB4  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8327  001AB6  6E02               	movwf	___lldiv@dividend+1,c
  8328  001AB8  0EFF               	movlw	255
  8329  001ABA  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8330  001ABC  6E03               	movwf	___lldiv@dividend+2,c
  8331  001ABE  0EFF               	movlw	255
  8332  001AC0  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8333  001AC2  6E04               	movwf	___lldiv@dividend+3,c
  8334  001AC4  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8335  001AC8  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8336  001ACC  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8337  001AD0  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8338  001AD4  EC2C  F028         	call	___lldiv	;wreg free
  8339  001AD8  5001               	movf	?___lldiv,w,c
  8340  001ADA  0100               	movlb	0	; () banked
  8341  001ADC  5D73               	subwf	??_f_lseek& (0+255),w,b
  8342  001ADE  5002               	movf	?___lldiv+1,w,c
  8343  001AE0  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8344  001AE2  5003               	movf	?___lldiv+2,w,c
  8345  001AE4  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8346  001AE6  5004               	movf	?___lldiv+3,w,c
  8347  001AE8  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8348  001AEA  A0D8               	btfss	status,0,c
  8349  001AEC  D057               	goto	l6077
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8353  001AEE  0EFF               	movlw	255
  8354  001AF0  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8355  001AF2  6F73               	movwf	??_f_lseek& (0+255),b
  8356  001AF4  0EFF               	movlw	255
  8357  001AF6  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8358  001AF8  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8359  001AFA  0EFF               	movlw	255
  8360  001AFC  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8361  001AFE  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8362  001B00  0EFF               	movlw	255
  8363  001B02  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8364  001B04  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8365  001B06  1D73               	comf	??_f_lseek& (0+255),w,b
  8366  001B08  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8367  001B0A  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8368  001B0C  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8369  001B0E  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8370  001B10  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8371  001B12  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8372  001B14  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8373  001B16  0EFF               	movlw	255
  8374  001B18  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8375  001B1A  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8376  001B1C  0EFF               	movlw	255
  8377  001B1E  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8378  001B20  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8379  001B22  0EFF               	movlw	255
  8380  001B24  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8381  001B26  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8382  001B28  0EFF               	movlw	255
  8383  001B2A  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8384  001B2C  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8385  001B2E  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8386  001B30  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8387  001B32  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8388  001B34  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8389  001B36  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8390  001B38  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8391  001B3A  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8392  001B3C  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8393  001B3E  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8394  001B40  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8395  001B42  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8396  001B44  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8397  001B46  EE20 F006          	lfsr	2,6
  8398  001B4A  516D               	movf	f_lseek@fp& (0+255),w,b
  8399  001B4C  26D9               	addwf	fsr2l,f,c
  8400  001B4E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8401  001B50  22DA               	addwfc	fsr2h,f,c
  8402  001B52  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8403  001B56  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8404  001B5A  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8405  001B5E  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8406                           
  8407                           ;ff.c: 3120:     ofs -= fp->fptr;
  8408  001B62  EE20 F006          	lfsr	2,6
  8409  001B66  516D               	movf	f_lseek@fp& (0+255),w,b
  8410  001B68  26D9               	addwf	fsr2l,f,c
  8411  001B6A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8412  001B6C  22DA               	addwfc	fsr2h,f,c
  8413  001B6E  50DE               	movf	postinc2,w,c
  8414  001B70  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8415  001B72  50DE               	movf	postinc2,w,c
  8416  001B74  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8417  001B76  50DE               	movf	postinc2,w,c
  8418  001B78  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8419  001B7A  50DD               	movf	postdec2,w,c
  8420  001B7C  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8421                           
  8422                           ;ff.c: 3121:     clst = fp->clust;
  8423  001B7E  EE20 F012          	lfsr	2,18
  8424  001B82  516D               	movf	f_lseek@fp& (0+255),w,b
  8425  001B84  26D9               	addwf	fsr2l,f,c
  8426  001B86  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8427  001B88  22DA               	addwfc	fsr2h,f,c
  8428  001B8A  CFDE F090          	movff	postinc2,f_lseek@clst
  8429  001B8E  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8430  001B92  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8431  001B96  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8432                           
  8433                           ;ff.c: 3122:    } else {
  8434  001B9A  D06E               	goto	l6101
  8435  001B9C                     l6077:
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;ff.c: 3123:     clst = fp->sclust;
  8439  001B9C  EE20 F00E          	lfsr	2,14
  8440  001BA0  516D               	movf	f_lseek@fp& (0+255),w,b
  8441  001BA2  26D9               	addwf	fsr2l,f,c
  8442  001BA4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8443  001BA6  22DA               	addwfc	fsr2h,f,c
  8444  001BA8  CFDE F090          	movff	postinc2,f_lseek@clst
  8445  001BAC  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8446  001BB0  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8447  001BB4  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;ff.c: 3125:     if (clst == 0) {
  8451  001BB8  5190               	movf	f_lseek@clst& (0+255),w,b
  8452  001BBA  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8453  001BBC  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8454  001BBE  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8455  001BC0  A4D8               	btfss	status,2,c
  8456  001BC2  D04C               	goto	l731
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8460  001BC4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8461  001BC8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8462  001BCC  CFDE F056          	movff	postinc2,create_chain@fs
  8463  001BD0  CFDD F057          	movff	postdec2,create_chain@fs+1
  8464  001BD4  0E00               	movlw	0
  8465  001BD6  6E58               	movwf	create_chain@clst,c
  8466  001BD8  0E00               	movlw	0
  8467  001BDA  6E59               	movwf	create_chain@clst+1,c
  8468  001BDC  0E00               	movlw	0
  8469  001BDE  6E5A               	movwf	create_chain@clst+2,c
  8470  001BE0  0E00               	movlw	0
  8471  001BE2  6E5B               	movwf	create_chain@clst+3,c
  8472  001BE4  ECAC  F019         	call	_create_chain	;wreg free
  8473  001BE8  C056  F090         	movff	?_create_chain,f_lseek@clst
  8474  001BEC  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8475  001BF0  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8476  001BF4  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8477                           
  8478                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8479  001BF8  0100               	movlb	0	; () banked
  8480  001BFA  0590               	decf	f_lseek@clst& (0+255),w,b
  8481  001BFC  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8482  001BFE  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8483  001C00  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8484  001C02  A4D8               	btfss	status,2,c
  8485  001C04  D00A               	goto	l6091
  8486  001C06                     u8200:
  8487                           
  8488                           ; BSR set to: 0
  8489  001C06  EE20 F005          	lfsr	2,5
  8490  001C0A  516D               	movf	f_lseek@fp& (0+255),w,b
  8491  001C0C  26D9               	addwf	fsr2l,f,c
  8492  001C0E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8493  001C10  22DA               	addwfc	fsr2h,f,c
  8494  001C12  0E02               	movlw	2
  8495  001C14  6EDF               	movwf	indf2,c
  8496                           
  8497                           ; BSR set to: 0
  8498  001C16  0E02               	movlw	2
  8499  001C18  0012               	return	
  8500  001C1A                     l6091:
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8504  001C1A  2990               	incf	f_lseek@clst& (0+255),w,b
  8505  001C1C  E111               	bnz	l6099
  8506  001C1E  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8507  001C20  E10F               	bnz	l6099
  8508  001C22  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8509  001C24  E10D               	bnz	l6099
  8510  001C26  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8511  001C28  A4D8               	btfss	status,2,c
  8512  001C2A  D00A               	goto	l6099
  8513  001C2C                     u8210:
  8514                           
  8515                           ; BSR set to: 0
  8516  001C2C  EE20 F005          	lfsr	2,5
  8517  001C30  516D               	movf	f_lseek@fp& (0+255),w,b
  8518  001C32  26D9               	addwf	fsr2l,f,c
  8519  001C34  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8520  001C36  22DA               	addwfc	fsr2h,f,c
  8521  001C38  0E01               	movlw	1
  8522  001C3A  6EDF               	movwf	indf2,c
  8523                           
  8524                           ; BSR set to: 0
  8525  001C3C  0E01               	movlw	1
  8526  001C3E  0012               	return	
  8527  001C40                     l6099:
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;ff.c: 3129:      fp->sclust = clst;
  8531  001C40  EE20 F00E          	lfsr	2,14
  8532  001C44  516D               	movf	f_lseek@fp& (0+255),w,b
  8533  001C46  26D9               	addwf	fsr2l,f,c
  8534  001C48  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8535  001C4A  22DA               	addwfc	fsr2h,f,c
  8536  001C4C  C090  FFDE         	movff	f_lseek@clst,postinc2
  8537  001C50  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8538  001C54  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8539  001C58  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8540  001C5C                     l731:
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;ff.c: 3132:     fp->clust = clst;
  8544  001C5C  EE20 F012          	lfsr	2,18
  8545  001C60  516D               	movf	f_lseek@fp& (0+255),w,b
  8546  001C62  26D9               	addwf	fsr2l,f,c
  8547  001C64  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8548  001C66  22DA               	addwfc	fsr2h,f,c
  8549  001C68  C090  FFDE         	movff	f_lseek@clst,postinc2
  8550  001C6C  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8551  001C70  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8552  001C74  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8553  001C78                     l6101:
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;ff.c: 3134:    if (clst != 0) {
  8557  001C78  5190               	movf	f_lseek@clst& (0+255),w,b
  8558  001C7A  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8559  001C7C  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8560  001C7E  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8561  001C80  A4D8               	btfss	status,2,c
  8562  001C82  D097               	goto	l6137
  8563  001C84  D0FA               	goto	l6155
  8564  001C86                     l6105:
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8568  001C86  EE20 F004          	lfsr	2,4
  8569  001C8A  516D               	movf	f_lseek@fp& (0+255),w,b
  8570  001C8C  26D9               	addwf	fsr2l,f,c
  8571  001C8E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8572  001C90  22DA               	addwfc	fsr2h,f,c
  8573  001C92  A2DF               	btfss	indf2,1,c
  8574  001C94  D02A               	goto	l6113
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8578  001C96  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8579  001C9A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8580  001C9E  CFDE F056          	movff	postinc2,create_chain@fs
  8581  001CA2  CFDD F057          	movff	postdec2,create_chain@fs+1
  8582  001CA6  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8583  001CAA  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8584  001CAE  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8585  001CB2  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8586  001CB6  ECAC  F019         	call	_create_chain	;wreg free
  8587  001CBA  C056  F090         	movff	?_create_chain,f_lseek@clst
  8588  001CBE  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8589  001CC2  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8590  001CC6  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8591                           
  8592                           ;ff.c: 3139:       if (clst == 0) {
  8593  001CCA  0100               	movlb	0	; () banked
  8594  001CCC  5190               	movf	f_lseek@clst& (0+255),w,b
  8595  001CCE  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8596  001CD0  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8597  001CD2  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8598  001CD4  A4D8               	btfss	status,2,c
  8599  001CD6  D023               	goto	l6115
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;ff.c: 3140:        ofs = bcs; break;
  8603  001CD8  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8604  001CDC  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8605  001CE0  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8606  001CE4  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8607  001CE8  D06E               	goto	u8280
  8608  001CEA                     l6113:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8612  001CEA  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8613  001CEE  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8614  001CF2  CFDE F03B          	movff	postinc2,get_fat@fs
  8615  001CF6  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8616  001CFA  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8617  001CFE  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8618  001D02  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8619  001D06  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8620  001D0A  EC10  F016         	call	_get_fat	;wreg free
  8621  001D0E  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8622  001D12  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8623  001D16  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8624  001D1A  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8625  001D1E                     l6115:
  8626                           
  8627                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8628  001D1E  0100               	movlb	0	; () banked
  8629  001D20  2990               	incf	f_lseek@clst& (0+255),w,b
  8630  001D22  E107               	bnz	l6123
  8631  001D24  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8632  001D26  E105               	bnz	l6123
  8633  001D28  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8634  001D2A  E103               	bnz	l6123
  8635  001D2C  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8636  001D2E  B4D8               	btfsc	status,2,c
  8637  001D30  D77D               	goto	u8210
  8638  001D32                     l6123:
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8642  001D32  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8643  001D34  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8644  001D36  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8645  001D38  E104               	bnz	u8260
  8646  001D3A  0E02               	movlw	2
  8647  001D3C  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8648  001D3E  A0D8               	btfss	status,0,c
  8649  001D40  D762               	goto	u8200
  8650  001D42                     u8260:
  8651                           
  8652                           ; BSR set to: 0
  8653  001D42  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8654  001D46  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8655  001D4A  EE10 F012          	lfsr	1,18
  8656  001D4E  50DE               	movf	postinc2,w,c
  8657  001D50  26E1               	addwf	fsr1l,f,c
  8658  001D52  50DD               	movf	postdec2,w,c
  8659  001D54  22E2               	addwfc	fsr1h,f,c
  8660  001D56  50E6               	movf	postinc1,w,c
  8661  001D58  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8662  001D5A  50E6               	movf	postinc1,w,c
  8663  001D5C  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8664  001D5E  50E6               	movf	postinc1,w,c
  8665  001D60  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8666  001D62  50E6               	movf	postinc1,w,c
  8667  001D64  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8668  001D66  B0D8               	btfsc	status,0,c
  8669  001D68  D74E               	goto	u8200
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;ff.c: 3147:      fp->clust = clst;
  8673                           
  8674                           ; BSR set to: 0
  8675  001D6A  EE20 F012          	lfsr	2,18
  8676  001D6E  516D               	movf	f_lseek@fp& (0+255),w,b
  8677  001D70  26D9               	addwf	fsr2l,f,c
  8678  001D72  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8679  001D74  22DA               	addwfc	fsr2h,f,c
  8680  001D76  C090  FFDE         	movff	f_lseek@clst,postinc2
  8681  001D7A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8682  001D7E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8683  001D82  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8684                           
  8685                           ;ff.c: 3148:      fp->fptr += bcs;
  8686  001D86  EE20 F006          	lfsr	2,6
  8687  001D8A  516D               	movf	f_lseek@fp& (0+255),w,b
  8688  001D8C  26D9               	addwf	fsr2l,f,c
  8689  001D8E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8690  001D90  22DA               	addwfc	fsr2h,f,c
  8691  001D92  518C               	movf	f_lseek@bcs& (0+255),w,b
  8692  001D94  26DE               	addwf	postinc2,f,c
  8693  001D96  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8694  001D98  22DE               	addwfc	postinc2,f,c
  8695  001D9A  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8696  001D9C  22DE               	addwfc	postinc2,f,c
  8697  001D9E  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8698  001DA0  22DE               	addwfc	postinc2,f,c
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;ff.c: 3149:      ofs -= bcs;
  8702  001DA2  518C               	movf	f_lseek@bcs& (0+255),w,b
  8703  001DA4  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8704  001DA6  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8705  001DA8  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8706  001DAA  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8707  001DAC  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8708  001DAE  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8709  001DB0  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8710  001DB2                     l6137:
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;ff.c: 3135:     while (ofs > bcs) {
  8714  001DB2  516F               	movf	f_lseek@ofs& (0+255),w,b
  8715  001DB4  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8716  001DB6  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8717  001DB8  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8718  001DBA  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8719  001DBC  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8720  001DBE  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8721  001DC0  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8722  001DC2  A0D8               	btfss	status,0,c
  8723  001DC4  D760               	goto	l6105
  8724  001DC6                     u8280:
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;ff.c: 3151:     fp->fptr += ofs;
  8728  001DC6  EE20 F006          	lfsr	2,6
  8729  001DCA  516D               	movf	f_lseek@fp& (0+255),w,b
  8730  001DCC  26D9               	addwf	fsr2l,f,c
  8731  001DCE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8732  001DD0  22DA               	addwfc	fsr2h,f,c
  8733  001DD2  516F               	movf	f_lseek@ofs& (0+255),w,b
  8734  001DD4  26DE               	addwf	postinc2,f,c
  8735  001DD6  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8736  001DD8  22DE               	addwfc	postinc2,f,c
  8737  001DDA  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8738  001DDC  22DE               	addwfc	postinc2,f,c
  8739  001DDE  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8740  001DE0  22DE               	addwfc	postinc2,f,c
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8744  001DE2  0EFF               	movlw	255
  8745  001DE4  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8746  001DE6  6F73               	movwf	??_f_lseek& (0+255),b
  8747  001DE8  0E01               	movlw	1
  8748  001DEA  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8749  001DEC  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8750  001DEE  0E00               	movlw	0
  8751  001DF0  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8752  001DF2  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8753  001DF4  0E00               	movlw	0
  8754  001DF6  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8755  001DF8  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8756  001DFA  5173               	movf	??_f_lseek& (0+255),w,b
  8757  001DFC  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8758  001DFE  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8759  001E00  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8760  001E02  B4D8               	btfsc	status,2,c
  8761  001E04  D03A               	goto	l6155
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  8765  001E06  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8766  001E0A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8767  001E0E  CFDE F00D          	movff	postinc2,clust2sect@fs
  8768  001E12  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8769  001E16  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  8770  001E1A  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  8771  001E1E  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  8772  001E22  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  8773  001E26  ECDA  F026         	call	_clust2sect	;wreg free
  8774  001E2A  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  8775  001E2E  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  8776  001E32  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  8777  001E36  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  8778                           
  8779                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8780  001E3A  0100               	movlb	0	; () banked
  8781  001E3C  5188               	movf	f_lseek@nsect& (0+255),w,b
  8782  001E3E  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8783  001E40  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8784  001E42  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8785  001E44  B4D8               	btfsc	status,2,c
  8786  001E46  D6DF               	goto	u8200
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  8790                           
  8791                           ; BSR set to: 0
  8792  001E48  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  8793  001E4C  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  8794  001E50  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  8795  001E54  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  8796  001E58  0E0A               	movlw	10
  8797  001E5A  D005               	goto	u8310
  8798  001E5C                     u8315:
  8799  001E5C  90D8               	bcf	status,0,c
  8800  001E5E  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8801  001E60  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8802  001E62  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8803  001E64  3373               	rrcf	??_f_lseek& (0+255),f,b
  8804  001E66                     u8310:
  8805  001E66  2EE8               	decfsz	wreg,f,c
  8806  001E68  D7F9               	goto	u8315
  8807  001E6A  5173               	movf	??_f_lseek& (0+255),w,b
  8808  001E6C  2788               	addwf	f_lseek@nsect& (0+255),f,b
  8809  001E6E  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  8810  001E70  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8811  001E72  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  8812  001E74  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8813  001E76  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  8814  001E78  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8815  001E7A                     l6155:
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8819  001E7A  EE20 F006          	lfsr	2,6
  8820  001E7E  516D               	movf	f_lseek@fp& (0+255),w,b
  8821  001E80  26D9               	addwf	fsr2l,f,c
  8822  001E82  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8823  001E84  22DA               	addwfc	fsr2h,f,c
  8824  001E86  0EFF               	movlw	255
  8825  001E88  14DE               	andwf	postinc2,w,c
  8826  001E8A  6F73               	movwf	??_f_lseek& (0+255),b
  8827  001E8C  0E01               	movlw	1
  8828  001E8E  14DE               	andwf	postinc2,w,c
  8829  001E90  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8830  001E92  0E00               	movlw	0
  8831  001E94  14DE               	andwf	postinc2,w,c
  8832  001E96  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8833  001E98  0E00               	movlw	0
  8834  001E9A  14DE               	andwf	postinc2,w,c
  8835  001E9C  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8836  001E9E  5173               	movf	??_f_lseek& (0+255),w,b
  8837  001EA0  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8838  001EA2  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8839  001EA4  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8840  001EA6  B4D8               	btfsc	status,2,c
  8841  001EA8  D021               	goto	l6161
  8842                           
  8843                           ; BSR set to: 0
  8844  001EAA  EE20 F016          	lfsr	2,22
  8845  001EAE  516D               	movf	f_lseek@fp& (0+255),w,b
  8846  001EB0  26D9               	addwf	fsr2l,f,c
  8847  001EB2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8848  001EB4  22DA               	addwfc	fsr2h,f,c
  8849  001EB6  5188               	movf	f_lseek@nsect& (0+255),w,b
  8850  001EB8  18DE               	xorwf	postinc2,w,c
  8851  001EBA  E10A               	bnz	u8330
  8852  001EBC  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8853  001EBE  18DE               	xorwf	postinc2,w,c
  8854  001EC0  E107               	bnz	u8330
  8855  001EC2  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8856  001EC4  18DE               	xorwf	postinc2,w,c
  8857  001EC6  E104               	bnz	u8330
  8858  001EC8  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8859  001ECA  18DE               	xorwf	postinc2,w,c
  8860  001ECC  B4D8               	btfsc	status,2,c
  8861  001ECE  D00E               	goto	l6161
  8862  001ED0                     u8330:
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;ff.c: 3171:    fp->dsect = nsect;
  8866  001ED0  EE20 F016          	lfsr	2,22
  8867  001ED4  516D               	movf	f_lseek@fp& (0+255),w,b
  8868  001ED6  26D9               	addwf	fsr2l,f,c
  8869  001ED8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8870  001EDA  22DA               	addwfc	fsr2h,f,c
  8871  001EDC  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8872  001EE0  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8873  001EE4  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8874  001EE8  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8875  001EEC                     l6161:
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  8879  001EEC  EE20 F006          	lfsr	2,6
  8880  001EF0  516D               	movf	f_lseek@fp& (0+255),w,b
  8881  001EF2  26D9               	addwf	fsr2l,f,c
  8882  001EF4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8883  001EF6  22DA               	addwfc	fsr2h,f,c
  8884  001EF8  EE10 F00A          	lfsr	1,10
  8885  001EFC  516D               	movf	f_lseek@fp& (0+255),w,b
  8886  001EFE  26E1               	addwf	fsr1l,f,c
  8887  001F00  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8888  001F02  22E2               	addwfc	fsr1h,f,c
  8889  001F04  50DE               	movf	postinc2,w,c
  8890  001F06  5CE6               	subwf	postinc1,w,c
  8891  001F08  50DE               	movf	postinc2,w,c
  8892  001F0A  58E6               	subwfb	postinc1,w,c
  8893  001F0C  50DE               	movf	postinc2,w,c
  8894  001F0E  58E6               	subwfb	postinc1,w,c
  8895  001F10  50DE               	movf	postinc2,w,c
  8896  001F12  58E6               	subwfb	postinc1,w,c
  8897  001F14  B0D8               	btfsc	status,0,c
  8898  001F16  D521               	goto	u8110
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  8902  001F18  EE20 F006          	lfsr	2,6
  8903  001F1C  516D               	movf	f_lseek@fp& (0+255),w,b
  8904  001F1E  26D9               	addwf	fsr2l,f,c
  8905  001F20  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8906  001F22  22DA               	addwfc	fsr2h,f,c
  8907  001F24  EE10 F00A          	lfsr	1,10
  8908  001F28  516D               	movf	f_lseek@fp& (0+255),w,b
  8909  001F2A  26E1               	addwf	fsr1l,f,c
  8910  001F2C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8911  001F2E  22E2               	addwfc	fsr1h,f,c
  8912  001F30  CFDE FFE6          	movff	postinc2,postinc1
  8913  001F34  CFDE FFE6          	movff	postinc2,postinc1
  8914  001F38  CFDE FFE6          	movff	postinc2,postinc1
  8915  001F3C  CFDE FFE6          	movff	postinc2,postinc1
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;ff.c: 3176:    fp->flag |= 0x20;
  8919  001F40  EE20 F004          	lfsr	2,4
  8920  001F44  516D               	movf	f_lseek@fp& (0+255),w,b
  8921  001F46  26D9               	addwf	fsr2l,f,c
  8922  001F48  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8923  001F4A  22DA               	addwfc	fsr2h,f,c
  8924  001F4C  0E00               	movlw	0
  8925  001F4E  8ADB               	bsf	plusw2,5,c
  8926  001F50  D504               	goto	u8110
  8927  001F52                     __end_of_f_lseek:
  8928                           	opt callstack 0
  8929                           
  8930 ;; *************** function _create_chain *****************
  8931 ;; Defined at:
  8932 ;;		line 990 in file "ff.c"
  8933 ;; Parameters:    Size  Location     Type
  8934 ;;  fs              2   85[COMRAM] PTR struct .
  8935 ;;		 -> NULL(0), FatFs(558), 
  8936 ;;  clst            4   87[COMRAM] unsigned long 
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;  cs              4    9[BANK0 ] unsigned long 
  8939 ;;  ncl             4    5[BANK0 ] unsigned long 
  8940 ;;  scl             4    1[BANK0 ] unsigned long 
  8941 ;;  res             1    0[BANK0 ] enum E93
  8942 ;; Return value:  Size  Location     Type
  8943 ;;                  4   85[COMRAM] unsigned long 
  8944 ;; Registers used:
  8945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8951 ;;      Params:         6       0       0       0       0       0       0       0       0
  8952 ;;      Locals:         0      13       0       0       0       0       0       0       0
  8953 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8954 ;;      Totals:        10      13       0       0       0       0       0       0       0
  8955 ;;Total ram usage:       23 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; Hardware stack levels required when called:    9
  8958 ;; This function calls:
  8959 ;;		_get_fat
  8960 ;;		_put_fat
  8961 ;; This function is called by:
  8962 ;;		_dir_next
  8963 ;;		_f_write
  8964 ;;		_f_lseek
  8965 ;; This function uses a non-reentrant model
  8966 ;;
  8967                           
  8968                           	psect	text22
  8969  003358                     __ptext22:
  8970                           	opt callstack 0
  8971  003358                     _create_chain:
  8972                           	opt callstack 20
  8973                           
  8974                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;incstack = 0
  8978  003358  5058               	movf	create_chain@clst,w,c
  8979  00335A  1059               	iorwf	create_chain@clst+1,w,c
  8980  00335C  105A               	iorwf	create_chain@clst+2,w,c
  8981  00335E  105B               	iorwf	create_chain@clst+3,w,c
  8982  003360  A4D8               	btfss	status,2,c
  8983  003362  D02E               	goto	l4507
  8984                           
  8985                           ;ff.c: 1000:   scl = fs->last_clust;
  8986  003364  EE20 F00A          	lfsr	2,10
  8987  003368  5056               	movf	create_chain@fs,w,c
  8988  00336A  26D9               	addwf	fsr2l,f,c
  8989  00336C  5057               	movf	create_chain@fs+1,w,c
  8990  00336E  22DA               	addwfc	fsr2h,f,c
  8991  003370  CFDE F061          	movff	postinc2,create_chain@scl
  8992  003374  CFDE F062          	movff	postinc2,create_chain@scl+1
  8993  003378  CFDE F063          	movff	postinc2,create_chain@scl+2
  8994  00337C  CFDE F064          	movff	postinc2,create_chain@scl+3
  8995                           
  8996                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  8997  003380  0100               	movlb	0	; () banked
  8998  003382  5161               	movf	create_chain@scl& (0+255),w,b
  8999  003384  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9000  003386  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9001  003388  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9002  00338A  B4D8               	btfsc	status,2,c
  9003  00338C  D010               	goto	u5370
  9004                           
  9005                           ; BSR set to: 0
  9006  00338E  EE20 F012          	lfsr	2,18
  9007  003392  5056               	movf	create_chain@fs,w,c
  9008  003394  26D9               	addwf	fsr2l,f,c
  9009  003396  5057               	movf	create_chain@fs+1,w,c
  9010  003398  22DA               	addwfc	fsr2h,f,c
  9011  00339A  50DE               	movf	postinc2,w,c
  9012  00339C  5D61               	subwf	create_chain@scl& (0+255),w,b
  9013  00339E  50DE               	movf	postinc2,w,c
  9014  0033A0  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9015  0033A2  50DE               	movf	postinc2,w,c
  9016  0033A4  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9017  0033A6  50DE               	movf	postinc2,w,c
  9018  0033A8  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9019  0033AA  A0D8               	btfss	status,0,c
  9020  0033AC  D05B               	goto	l377
  9021  0033AE                     u5370:
  9022                           
  9023                           ; BSR set to: 0
  9024  0033AE  0E01               	movlw	1
  9025  0033B0  6F61               	movwf	create_chain@scl& (0+255),b
  9026  0033B2  0E00               	movlw	0
  9027  0033B4  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9028  0033B6  0E00               	movlw	0
  9029  0033B8  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9030  0033BA  0E00               	movlw	0
  9031  0033BC  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9032  0033BE  D052               	goto	l377
  9033  0033C0                     l4507:
  9034                           
  9035                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9036  0033C0  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9037  0033C4  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9038  0033C8  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9039  0033CC  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9040  0033D0  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9041  0033D4  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9042  0033D8  EC10  F016         	call	_get_fat	;wreg free
  9043  0033DC  C03B  F069         	movff	?_get_fat,create_chain@cs
  9044  0033E0  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9045  0033E4  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9046  0033E8  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9047                           
  9048                           ;ff.c: 1005:   if (cs < 2) return 1;
  9049  0033EC  0100               	movlb	0	; () banked
  9050  0033EE  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9051  0033F0  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9052  0033F2  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9053  0033F4  E10D               	bnz	l4515
  9054  0033F6  0E02               	movlw	2
  9055  0033F8  5D69               	subwf	create_chain@cs& (0+255),w,b
  9056  0033FA  B0D8               	btfsc	status,0,c
  9057  0033FC  D009               	goto	l4515
  9058                           
  9059                           ; BSR set to: 0
  9060  0033FE  0E01               	movlw	1
  9061  003400  6E56               	movwf	?_create_chain,c
  9062  003402  0E00               	movlw	0
  9063  003404  6E57               	movwf	?_create_chain+1,c
  9064  003406  0E00               	movlw	0
  9065  003408  6E58               	movwf	?_create_chain+2,c
  9066  00340A  0E00               	movlw	0
  9067  00340C  6E59               	movwf	?_create_chain+3,c
  9068  00340E  0012               	return	
  9069  003410                     l4515:
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9073  003410  2969               	incf	create_chain@cs& (0+255),w,b
  9074  003412  E110               	bnz	l4519
  9075  003414  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9076  003416  E10E               	bnz	l4519
  9077  003418  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9078  00341A  E10C               	bnz	l4519
  9079  00341C  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9080  00341E  A4D8               	btfss	status,2,c
  9081  003420  D009               	goto	l4519
  9082  003422                     u5390:
  9083                           
  9084                           ; BSR set to: 0
  9085  003422  C069  F056         	movff	create_chain@cs,?_create_chain
  9086  003426  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9087  00342A  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9088  00342E  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9089  003432  0012               	return	
  9090  003434                     l4519:
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9094  003434  EE20 F012          	lfsr	2,18
  9095  003438  5056               	movf	create_chain@fs,w,c
  9096  00343A  26D9               	addwf	fsr2l,f,c
  9097  00343C  5057               	movf	create_chain@fs+1,w,c
  9098  00343E  22DA               	addwfc	fsr2h,f,c
  9099  003440  50DE               	movf	postinc2,w,c
  9100  003442  5D69               	subwf	create_chain@cs& (0+255),w,b
  9101  003444  50DE               	movf	postinc2,w,c
  9102  003446  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9103  003448  50DE               	movf	postinc2,w,c
  9104  00344A  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9105  00344C  50DE               	movf	postinc2,w,c
  9106  00344E  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9107  003450  A0D8               	btfss	status,0,c
  9108  003452  D7E7               	goto	u5390
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;ff.c: 1008:   scl = clst;
  9112  003454  C058  F061         	movff	create_chain@clst,create_chain@scl
  9113  003458  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9114  00345C  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9115  003460  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9116  003464                     l377:
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;ff.c: 1011:  ncl = scl;
  9120  003464  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9121  003468  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9122  00346C  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9123  003470  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9124  003474                     l4523:
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;ff.c: 1013:   ncl++;
  9128  003474  0E01               	movlw	1
  9129  003476  2765               	addwf	create_chain@ncl& (0+255),f,b
  9130  003478  0E00               	movlw	0
  9131  00347A  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9132  00347C  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9133  00347E  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9137  003480  EE20 F012          	lfsr	2,18
  9138  003484  5056               	movf	create_chain@fs,w,c
  9139  003486  26D9               	addwf	fsr2l,f,c
  9140  003488  5057               	movf	create_chain@fs+1,w,c
  9141  00348A  22DA               	addwfc	fsr2h,f,c
  9142  00348C  50DE               	movf	postinc2,w,c
  9143  00348E  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9144  003490  50DE               	movf	postinc2,w,c
  9145  003492  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9146  003494  50DE               	movf	postinc2,w,c
  9147  003496  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9148  003498  50DE               	movf	postinc2,w,c
  9149  00349A  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9150  00349C  A0D8               	btfss	status,0,c
  9151  00349E  D019               	goto	l4535
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;ff.c: 1015:    ncl = 2;
  9155  0034A0  0E02               	movlw	2
  9156  0034A2  6F65               	movwf	create_chain@ncl& (0+255),b
  9157  0034A4  0E00               	movlw	0
  9158  0034A6  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9159  0034A8  0E00               	movlw	0
  9160  0034AA  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9161  0034AC  0E00               	movlw	0
  9162  0034AE  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9166  0034B0  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9167  0034B2  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9168  0034B4  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9169  0034B6  E10D               	bnz	l4535
  9170  0034B8  0E02               	movlw	2
  9171  0034BA  5D61               	subwf	create_chain@scl& (0+255),w,b
  9172  0034BC  B0D8               	btfsc	status,0,c
  9173  0034BE  D009               	goto	l4535
  9174  0034C0                     u5420:
  9175                           
  9176                           ; BSR set to: 0
  9177  0034C0  0E00               	movlw	0
  9178  0034C2  6E56               	movwf	?_create_chain,c
  9179  0034C4  0E00               	movlw	0
  9180  0034C6  6E57               	movwf	?_create_chain+1,c
  9181  0034C8  0E00               	movlw	0
  9182  0034CA  6E58               	movwf	?_create_chain+2,c
  9183  0034CC  0E00               	movlw	0
  9184  0034CE  6E59               	movwf	?_create_chain+3,c
  9185  0034D0  0012               	return	
  9186  0034D2                     l4535:
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9190  0034D2  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9191  0034D6  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9192  0034DA  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9193  0034DE  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9194  0034E2  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9195  0034E6  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9196  0034EA  EC10  F016         	call	_get_fat	;wreg free
  9197  0034EE  C03B  F069         	movff	?_get_fat,create_chain@cs
  9198  0034F2  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9199  0034F6  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9200  0034FA  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9201                           
  9202                           ;ff.c: 1019:   if (cs == 0) break;
  9203  0034FE  0100               	movlb	0	; () banked
  9204  003500  5169               	movf	create_chain@cs& (0+255),w,b
  9205  003502  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9206  003504  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9207  003506  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9208  003508  B4D8               	btfsc	status,2,c
  9209  00350A  D01D               	goto	l4551
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9213  00350C  2969               	incf	create_chain@cs& (0+255),w,b
  9214  00350E  E107               	bnz	u5440
  9215  003510  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9216  003512  E105               	bnz	u5440
  9217  003514  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9218  003516  E103               	bnz	u5440
  9219  003518  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9220  00351A  B4D8               	btfsc	status,2,c
  9221  00351C  D782               	goto	u5390
  9222  00351E                     u5440:
  9223                           
  9224                           ; BSR set to: 0
  9225  00351E  0569               	decf	create_chain@cs& (0+255),w,b
  9226  003520  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9227  003522  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9228  003524  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9229  003526  B4D8               	btfsc	status,2,c
  9230  003528  D77C               	goto	u5390
  9231                           
  9232                           ; BSR set to: 0
  9233                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9234  00352A  5161               	movf	create_chain@scl& (0+255),w,b
  9235  00352C  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9236  00352E  E1A2               	bnz	l4523
  9237  003530  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9238  003532  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9239  003534  E19F               	bnz	l4523
  9240  003536  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9241  003538  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9242  00353A  E19C               	bnz	l4523
  9243  00353C  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9244  00353E  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9245  003540  B4D8               	btfsc	status,2,c
  9246  003542  D7BE               	goto	u5420
  9247  003544  D797               	goto	l4523
  9248  003546                     l4551:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9252  003546  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9253  00354A  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9254  00354E  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9255  003552  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9256  003556  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9257  00355A  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9258  00355E  0EFF               	movlw	255
  9259  003560  6E41               	movwf	put_fat@val,c
  9260  003562  0EFF               	movlw	255
  9261  003564  6E42               	movwf	put_fat@val+1,c
  9262  003566  0EFF               	movlw	255
  9263  003568  6E43               	movwf	put_fat@val+2,c
  9264  00356A  0E0F               	movlw	15
  9265  00356C  6E44               	movwf	put_fat@val+3,c
  9266  00356E  ECF8  F011         	call	_put_fat	;wreg free
  9267  003572  0100               	movlb	0	; () banked
  9268  003574  6F60               	movwf	create_chain@res& (0+255),b
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9272  003576  5160               	movf	create_chain@res& (0+255),w,b
  9273  003578  A4D8               	btfss	status,2,c
  9274  00357A  D01E               	goto	l4559
  9275                           
  9276                           ; BSR set to: 0
  9277  00357C  5058               	movf	create_chain@clst,w,c
  9278  00357E  1059               	iorwf	create_chain@clst+1,w,c
  9279  003580  105A               	iorwf	create_chain@clst+2,w,c
  9280  003582  105B               	iorwf	create_chain@clst+3,w,c
  9281  003584  B4D8               	btfsc	status,2,c
  9282  003586  D018               	goto	l4559
  9283                           
  9284                           ; BSR set to: 0
  9285                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9286  003588  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9287  00358C  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9288  003590  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9289  003594  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9290  003598  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9291  00359C  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9292  0035A0  C065  F041         	movff	create_chain@ncl,put_fat@val
  9293  0035A4  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9294  0035A8  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9295  0035AC  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9296  0035B0  ECF8  F011         	call	_put_fat	;wreg free
  9297  0035B4  0100               	movlb	0	; () banked
  9298  0035B6  6F60               	movwf	create_chain@res& (0+255),b
  9299  0035B8                     l4559:
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;ff.c: 1029:  if (res == FR_OK) {
  9303  0035B8  5160               	movf	create_chain@res& (0+255),w,b
  9304  0035BA  A4D8               	btfss	status,2,c
  9305  0035BC  D031               	goto	l4565
  9306                           
  9307                           ; BSR set to: 0
  9308                           ;ff.c: 1030:   fs->last_clust = ncl;
  9309  0035BE  EE20 F00A          	lfsr	2,10
  9310  0035C2  5056               	movf	create_chain@fs,w,c
  9311  0035C4  26D9               	addwf	fsr2l,f,c
  9312  0035C6  5057               	movf	create_chain@fs+1,w,c
  9313  0035C8  22DA               	addwfc	fsr2h,f,c
  9314  0035CA  C065  FFDE         	movff	create_chain@ncl,postinc2
  9315  0035CE  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9316  0035D2  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9317  0035D6  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9318                           
  9319                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9320  0035DA  EE20 F00E          	lfsr	2,14
  9321  0035DE  5056               	movf	create_chain@fs,w,c
  9322  0035E0  26D9               	addwf	fsr2l,f,c
  9323  0035E2  5057               	movf	create_chain@fs+1,w,c
  9324  0035E4  22DA               	addwfc	fsr2h,f,c
  9325  0035E6  28DE               	incf	postinc2,w,c
  9326  0035E8  E107               	bnz	u5500
  9327  0035EA  28DE               	incf	postinc2,w,c
  9328  0035EC  E105               	bnz	u5500
  9329  0035EE  28DE               	incf	postinc2,w,c
  9330  0035F0  E103               	bnz	u5500
  9331  0035F2  28DE               	incf	postinc2,w,c
  9332  0035F4  B4D8               	btfsc	status,2,c
  9333  0035F6  D024               	goto	l394
  9334  0035F8                     u5500:
  9335                           
  9336                           ; BSR set to: 0
  9337                           ;ff.c: 1032:    fs->free_clust--;
  9338  0035F8  EE20 F00E          	lfsr	2,14
  9339  0035FC  5056               	movf	create_chain@fs,w,c
  9340  0035FE  26D9               	addwf	fsr2l,f,c
  9341  003600  5057               	movf	create_chain@fs+1,w,c
  9342  003602  22DA               	addwfc	fsr2h,f,c
  9343  003604  06DE               	decf	postinc2,f,c
  9344  003606  0E00               	movlw	0
  9345  003608  5ADE               	subwfb	postinc2,f,c
  9346  00360A  5ADE               	subwfb	postinc2,f,c
  9347  00360C  5ADE               	subwfb	postinc2,f,c
  9348                           
  9349                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9350  00360E  EE20 F005          	lfsr	2,5
  9351  003612  5056               	movf	create_chain@fs,w,c
  9352  003614  26D9               	addwf	fsr2l,f,c
  9353  003616  5057               	movf	create_chain@fs+1,w,c
  9354  003618  22DA               	addwfc	fsr2h,f,c
  9355  00361A  0E00               	movlw	0
  9356  00361C  80DB               	bsf	plusw2,0,c
  9357  00361E  D010               	goto	l394
  9358  003620                     l4565:
  9359                           
  9360                           ; BSR set to: 0
  9361                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9362  003620  0560               	decf	create_chain@res& (0+255),w,b
  9363  003622  B4D8               	btfsc	status,2,c
  9364  003624  D009               	goto	l396
  9365                           
  9366                           ; BSR set to: 0
  9367  003626  0E01               	movlw	1
  9368  003628  6F65               	movwf	create_chain@ncl& (0+255),b
  9369  00362A  0E00               	movlw	0
  9370  00362C  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9371  00362E  0E00               	movlw	0
  9372  003630  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9373  003632  0E00               	movlw	0
  9374  003634  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9375  003636  D004               	goto	l394
  9376  003638                     l396:
  9377                           
  9378                           ; BSR set to: 0
  9379  003638  6965               	setf	create_chain@ncl& (0+255),b
  9380  00363A  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9381  00363C  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9382  00363E  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9383  003640                     l394:
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;ff.c: 1039:  return ncl;
  9387  003640  C065  F056         	movff	create_chain@ncl,?_create_chain
  9388  003644  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9389  003648  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9390  00364C  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9391                           
  9392                           ; BSR set to: 0
  9393  003650  0012               	return		;funcret
  9394  003652                     __end_of_create_chain:
  9395                           	opt callstack 0
  9396                           
  9397 ;; *************** function _put_fat *****************
  9398 ;; Defined at:
  9399 ;;		line 873 in file "ff.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;  fs              2   58[COMRAM] PTR struct .
  9402 ;;		 -> NULL(0), FatFs(558), 
  9403 ;;  clst            4   60[COMRAM] unsigned long 
  9404 ;;  val             4   64[COMRAM] unsigned long 
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  p               2   83[COMRAM] PTR unsigned char 
  9407 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9408 ;;  bc              2   80[COMRAM] unsigned short 
  9409 ;;  res             1   82[COMRAM] enum E93
  9410 ;; Return value:  Size  Location     Type
  9411 ;;                  1    wreg      enum E93
  9412 ;; Registers used:
  9413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9414 ;; Tracked objects:
  9415 ;;		On entry : 0/0
  9416 ;;		On exit  : 0/0
  9417 ;;		Unchanged: 0/0
  9418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9419 ;;      Params:        10       0       0       0       0       0       0       0       0
  9420 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9421 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9422 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9423 ;;Total ram usage:       27 bytes
  9424 ;; Hardware stack levels used:    1
  9425 ;; Hardware stack levels required when called:    8
  9426 ;; This function calls:
  9427 ;;		_move_window
  9428 ;; This function is called by:
  9429 ;;		_remove_chain
  9430 ;;		_create_chain
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           	psect	text23
  9435  0023F0                     __ptext23:
  9436                           	opt callstack 0
  9437  0023F0                     _put_fat:
  9438                           	opt callstack 20
  9439                           
  9440                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;incstack = 0
  9444  0023F0  5040               	movf	put_fat@clst+3,w,c
  9445  0023F2  103F               	iorwf	put_fat@clst+2,w,c
  9446  0023F4  103E               	iorwf	put_fat@clst+1,w,c
  9447  0023F6  E104               	bnz	u5190
  9448  0023F8  0E02               	movlw	2
  9449  0023FA  5C3D               	subwf	put_fat@clst,w,c
  9450  0023FC  A0D8               	btfss	status,0,c
  9451  0023FE  D010               	goto	u5200
  9452  002400                     u5190:
  9453  002400  EE20 F012          	lfsr	2,18
  9454  002404  503B               	movf	put_fat@fs,w,c
  9455  002406  26D9               	addwf	fsr2l,f,c
  9456  002408  503C               	movf	put_fat@fs+1,w,c
  9457  00240A  22DA               	addwfc	fsr2h,f,c
  9458  00240C  50DE               	movf	postinc2,w,c
  9459  00240E  5C3D               	subwf	put_fat@clst,w,c
  9460  002410  50DE               	movf	postinc2,w,c
  9461  002412  583E               	subwfb	put_fat@clst+1,w,c
  9462  002414  50DE               	movf	postinc2,w,c
  9463  002416  583F               	subwfb	put_fat@clst+2,w,c
  9464  002418  50DE               	movf	postinc2,w,c
  9465  00241A  5840               	subwfb	put_fat@clst+3,w,c
  9466  00241C  A0D8               	btfss	status,0,c
  9467  00241E  D1E5               	goto	l4457
  9468  002420                     u5200:
  9469                           
  9470                           ;ff.c: 885:   res = FR_INT_ERR;
  9471  002420  0E02               	movlw	2
  9472  002422  6E53               	movwf	put_fat@res,c
  9473                           
  9474                           ;ff.c: 887:  } else {
  9475  002424  D1F8               	goto	l4459
  9476  002426                     l338:
  9477                           
  9478                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9479  002426  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9480  00242A  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9481  00242E  90D8               	bcf	status,0,c
  9482  002430  3052               	rrcf	put_fat@bc+1,w,c
  9483  002432  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9484  002434  3051               	rrcf	put_fat@bc,w,c
  9485  002436  6E45               	movwf	??_put_fat& (0+255),c
  9486  002438  5045               	movf	??_put_fat,w,c
  9487  00243A  2651               	addwf	put_fat@bc,f,c
  9488  00243C  5046               	movf	??_put_fat+1,w,c
  9489  00243E  2252               	addwfc	put_fat@bc+1,f,c
  9490                           
  9491                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9492  002440  C03B  F030         	movff	put_fat@fs,move_window@fs
  9493  002444  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9494  002448  EE20 F01E          	lfsr	2,30
  9495  00244C  503B               	movf	put_fat@fs,w,c
  9496  00244E  26D9               	addwf	fsr2l,f,c
  9497  002450  503C               	movf	put_fat@fs+1,w,c
  9498  002452  22DA               	addwfc	fsr2h,f,c
  9499  002454  CFDE F045          	movff	postinc2,??_put_fat
  9500  002458  CFDE F046          	movff	postinc2,??_put_fat+1
  9501  00245C  CFDE F047          	movff	postinc2,??_put_fat+2
  9502  002460  CFDE F048          	movff	postinc2,??_put_fat+3
  9503  002464  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9504  002468  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9505  00246C  0E09               	movlw	9
  9506  00246E  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9507  002470                     u5215:
  9508  002470  90D8               	bcf	status,0,c
  9509  002472  324A               	rrcf	??_put_fat+5,f,c
  9510  002474  3249               	rrcf	??_put_fat+4,f,c
  9511  002476  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9512  002478  D7FB               	goto	u5215
  9513  00247A  5049               	movf	??_put_fat+4,w,c
  9514  00247C  2445               	addwf	??_put_fat,w,c
  9515  00247E  6E32               	movwf	move_window@sector,c
  9516  002480  504A               	movf	??_put_fat+5,w,c
  9517  002482  2046               	addwfc	??_put_fat+1,w,c
  9518  002484  6E33               	movwf	move_window@sector+1,c
  9519  002486  0E00               	movlw	0
  9520  002488  2047               	addwfc	??_put_fat+2,w,c
  9521  00248A  6E34               	movwf	move_window@sector+2,c
  9522  00248C  0E00               	movlw	0
  9523  00248E  2048               	addwfc	??_put_fat+3,w,c
  9524  002490  6E35               	movwf	move_window@sector+3,c
  9525  002492  EC8F  F027         	call	_move_window	;wreg free
  9526  002496  6E53               	movwf	put_fat@res,c
  9527                           
  9528                           ;ff.c: 892:    if (res != FR_OK) break;
  9529  002498  5053               	movf	put_fat@res,w,c
  9530  00249A  A4D8               	btfss	status,2,c
  9531  00249C  D1BC               	goto	l4459
  9532                           
  9533                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9534  00249E  0EFF               	movlw	255
  9535  0024A0  6E45               	movwf	??_put_fat& (0+255),c
  9536  0024A2  0E01               	movlw	1
  9537  0024A4  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9538  0024A6  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9539  0024AA  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9540  0024AE  5045               	movf	??_put_fat,w,c
  9541  0024B0  1647               	andwf	??_put_fat+2,f,c
  9542  0024B2  5046               	movf	??_put_fat+1,w,c
  9543  0024B4  1648               	andwf	??_put_fat+3,f,c
  9544  0024B6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9545  0024BA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9546  0024BE  5047               	movf	??_put_fat+2,w,c
  9547  0024C0  2649               	addwf	??_put_fat+4,f,c
  9548  0024C2  5048               	movf	??_put_fat+3,w,c
  9549  0024C4  224A               	addwfc	??_put_fat+5,f,c
  9550  0024C6  0E2E               	movlw	46
  9551  0024C8  2449               	addwf	??_put_fat+4,w,c
  9552  0024CA  6E54               	movwf	put_fat@p,c
  9553  0024CC  0E00               	movlw	0
  9554  0024CE  204A               	addwfc	??_put_fat+5,w,c
  9555  0024D0  6E55               	movwf	put_fat@p+1,c
  9556  0024D2  4A51               	infsnz	put_fat@bc,f,c
  9557  0024D4  2A52               	incf	put_fat@bc+1,f,c
  9558                           
  9559                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9560  0024D6  B03D               	btfsc	put_fat@clst,0,c
  9561  0024D8  D004               	goto	l4411
  9562  0024DA  C041  F04D         	movff	put_fat@val,_put_fat$590
  9563  0024DE  6A4E               	clrf	_put_fat$590+1,c
  9564  0024E0  D01A               	goto	l4413
  9565  0024E2                     l4411:
  9566  0024E2  5041               	movf	put_fat@val,w,c
  9567  0024E4  6E45               	movwf	??_put_fat& (0+255),c
  9568  0024E6  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9569  0024E8  3A45               	swapf	??_put_fat,f,c
  9570  0024EA  3A46               	swapf	??_put_fat+1,f,c
  9571  0024EC  0EF0               	movlw	240
  9572  0024EE  1646               	andwf	??_put_fat+1,f,c
  9573  0024F0  5045               	movf	??_put_fat,w,c
  9574  0024F2  0B0F               	andlw	15
  9575  0024F4  1246               	iorwf	??_put_fat+1,f,c
  9576  0024F6  0EF0               	movlw	240
  9577  0024F8  1645               	andwf	??_put_fat,f,c
  9578  0024FA  C054  FFD9         	movff	put_fat@p,fsr2l
  9579  0024FE  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9580  002502  50DF               	movf	indf2,w,c
  9581  002504  0B0F               	andlw	15
  9582  002506  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9583  002508  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9584  00250A  5045               	movf	??_put_fat,w,c
  9585  00250C  1047               	iorwf	??_put_fat+2,w,c
  9586  00250E  6E4D               	movwf	_put_fat$590,c
  9587  002510  5046               	movf	??_put_fat+1,w,c
  9588  002512  1048               	iorwf	??_put_fat+3,w,c
  9589  002514  6E4E               	movwf	_put_fat$590+1,c
  9590  002516                     l4413:
  9591  002516  C054  FFD9         	movff	put_fat@p,fsr2l
  9592  00251A  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9593  00251E  C04D  FFDF         	movff	_put_fat$590,indf2
  9594                           
  9595                           ;ff.c: 895:    fs->wflag = 1;
  9596  002522  EE20 F004          	lfsr	2,4
  9597  002526  503B               	movf	put_fat@fs,w,c
  9598  002528  26D9               	addwf	fsr2l,f,c
  9599  00252A  503C               	movf	put_fat@fs+1,w,c
  9600  00252C  22DA               	addwfc	fsr2h,f,c
  9601  00252E  0E01               	movlw	1
  9602  002530  6EDF               	movwf	indf2,c
  9603                           
  9604                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9605  002532  C03B  F030         	movff	put_fat@fs,move_window@fs
  9606  002536  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9607  00253A  EE20 F01E          	lfsr	2,30
  9608  00253E  503B               	movf	put_fat@fs,w,c
  9609  002540  26D9               	addwf	fsr2l,f,c
  9610  002542  503C               	movf	put_fat@fs+1,w,c
  9611  002544  22DA               	addwfc	fsr2h,f,c
  9612  002546  CFDE F045          	movff	postinc2,??_put_fat
  9613  00254A  CFDE F046          	movff	postinc2,??_put_fat+1
  9614  00254E  CFDE F047          	movff	postinc2,??_put_fat+2
  9615  002552  CFDE F048          	movff	postinc2,??_put_fat+3
  9616  002556  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9617  00255A  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9618  00255E  0E09               	movlw	9
  9619  002560  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9620  002562                     u5245:
  9621  002562  90D8               	bcf	status,0,c
  9622  002564  324A               	rrcf	??_put_fat+5,f,c
  9623  002566  3249               	rrcf	??_put_fat+4,f,c
  9624  002568  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9625  00256A  D7FB               	goto	u5245
  9626  00256C  5049               	movf	??_put_fat+4,w,c
  9627  00256E  2445               	addwf	??_put_fat,w,c
  9628  002570  6E32               	movwf	move_window@sector,c
  9629  002572  504A               	movf	??_put_fat+5,w,c
  9630  002574  2046               	addwfc	??_put_fat+1,w,c
  9631  002576  6E33               	movwf	move_window@sector+1,c
  9632  002578  0E00               	movlw	0
  9633  00257A  2047               	addwfc	??_put_fat+2,w,c
  9634  00257C  6E34               	movwf	move_window@sector+2,c
  9635  00257E  0E00               	movlw	0
  9636  002580  2048               	addwfc	??_put_fat+3,w,c
  9637  002582  6E35               	movwf	move_window@sector+3,c
  9638  002584  EC8F  F027         	call	_move_window	;wreg free
  9639  002588  6E53               	movwf	put_fat@res,c
  9640                           
  9641                           ;ff.c: 897:    if (res != FR_OK) break;
  9642  00258A  5053               	movf	put_fat@res,w,c
  9643  00258C  A4D8               	btfss	status,2,c
  9644  00258E  D143               	goto	l4459
  9645                           
  9646                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9647  002590  0EFF               	movlw	255
  9648  002592  6E45               	movwf	??_put_fat& (0+255),c
  9649  002594  0E01               	movlw	1
  9650  002596  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9651  002598  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9652  00259C  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9653  0025A0  5045               	movf	??_put_fat,w,c
  9654  0025A2  1647               	andwf	??_put_fat+2,f,c
  9655  0025A4  5046               	movf	??_put_fat+1,w,c
  9656  0025A6  1648               	andwf	??_put_fat+3,f,c
  9657  0025A8  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9658  0025AC  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9659  0025B0  5047               	movf	??_put_fat+2,w,c
  9660  0025B2  2649               	addwf	??_put_fat+4,f,c
  9661  0025B4  5048               	movf	??_put_fat+3,w,c
  9662  0025B6  224A               	addwfc	??_put_fat+5,f,c
  9663  0025B8  0E2E               	movlw	46
  9664  0025BA  2449               	addwf	??_put_fat+4,w,c
  9665  0025BC  6E54               	movwf	put_fat@p,c
  9666  0025BE  0E00               	movlw	0
  9667  0025C0  204A               	addwfc	??_put_fat+5,w,c
  9668  0025C2  6E55               	movwf	put_fat@p+1,c
  9669                           
  9670                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9671  0025C4  B03D               	btfsc	put_fat@clst,0,c
  9672  0025C6  D01B               	goto	l4429
  9673  0025C8  C041  F045         	movff	put_fat@val,??_put_fat
  9674  0025CC  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9675  0025D0  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9676  0025D4  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9677  0025D8  C046  F045         	movff	??_put_fat+1,??_put_fat
  9678  0025DC  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9679  0025E0  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9680  0025E4  6A48               	clrf	??_put_fat+3,c
  9681  0025E6  0E0F               	movlw	15
  9682  0025E8  1645               	andwf	??_put_fat,f,c
  9683  0025EA  C054  FFD9         	movff	put_fat@p,fsr2l
  9684  0025EE  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9685  0025F2  50DF               	movf	indf2,w,c
  9686  0025F4  0BF0               	andlw	240
  9687  0025F6  1045               	iorwf	??_put_fat,w,c
  9688  0025F8  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9689  0025FA  5049               	movf	??_put_fat+4,w,c
  9690  0025FC  D012               	goto	L9
  9691  0025FE                     l4429:
  9692  0025FE  C041  F045         	movff	put_fat@val,??_put_fat
  9693  002602  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9694  002606  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9695  00260A  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9696  00260E  0E05               	movlw	5
  9697  002610  D005               	goto	u5270
  9698  002612                     u5275:
  9699  002612  90D8               	bcf	status,0,c
  9700  002614  3248               	rrcf	??_put_fat+3,f,c
  9701  002616  3247               	rrcf	??_put_fat+2,f,c
  9702  002618  3246               	rrcf	??_put_fat+1,f,c
  9703  00261A  3245               	rrcf	??_put_fat,f,c
  9704  00261C                     u5270:
  9705  00261C  2EE8               	decfsz	wreg,f,c
  9706  00261E  D7F9               	goto	u5275
  9707  002620  5045               	movf	??_put_fat,w,c
  9708  002622                     L9:
  9709  002622  6E4F               	movwf	_put_fat$591,c
  9710  002624  6A50               	clrf	_put_fat$591+1,c
  9711  002626  C054  FFD9         	movff	put_fat@p,fsr2l
  9712  00262A  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9713  00262E  C04F  FFDF         	movff	_put_fat$591,indf2
  9714  002632  D0D2               	goto	l4453
  9715  002634                     l4433:
  9716                           
  9717                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9718  002634  C03B  F030         	movff	put_fat@fs,move_window@fs
  9719  002638  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9720  00263C  EE20 F01E          	lfsr	2,30
  9721  002640  503B               	movf	put_fat@fs,w,c
  9722  002642  26D9               	addwf	fsr2l,f,c
  9723  002644  503C               	movf	put_fat@fs+1,w,c
  9724  002646  22DA               	addwfc	fsr2h,f,c
  9725  002648  CFDE F045          	movff	postinc2,??_put_fat
  9726  00264C  CFDE F046          	movff	postinc2,??_put_fat+1
  9727  002650  CFDE F047          	movff	postinc2,??_put_fat+2
  9728  002654  CFDE F048          	movff	postinc2,??_put_fat+3
  9729  002658  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9730  00265C  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9731  002660  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9732  002664  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9733  002668  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9734  00266C  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9735  002670  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9736  002674  6A4C               	clrf	??_put_fat+7,c
  9737  002676  5045               	movf	??_put_fat,w,c
  9738  002678  2449               	addwf	??_put_fat+4,w,c
  9739  00267A  6E32               	movwf	move_window@sector,c
  9740  00267C  5046               	movf	??_put_fat+1,w,c
  9741  00267E  204A               	addwfc	??_put_fat+5,w,c
  9742  002680  6E33               	movwf	move_window@sector+1,c
  9743  002682  5047               	movf	??_put_fat+2,w,c
  9744  002684  204B               	addwfc	??_put_fat+6,w,c
  9745  002686  6E34               	movwf	move_window@sector+2,c
  9746  002688  5048               	movf	??_put_fat+3,w,c
  9747  00268A  204C               	addwfc	??_put_fat+7,w,c
  9748  00268C  6E35               	movwf	move_window@sector+3,c
  9749  00268E  EC8F  F027         	call	_move_window	;wreg free
  9750  002692  6E53               	movwf	put_fat@res,c
  9751                           
  9752                           ;ff.c: 905:    if (res != FR_OK) break;
  9753  002694  5053               	movf	put_fat@res,w,c
  9754  002696  A4D8               	btfss	status,2,c
  9755  002698  D0BE               	goto	l4459
  9756                           
  9757                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9758  00269A  0EFF               	movlw	255
  9759  00269C  6E45               	movwf	??_put_fat& (0+255),c
  9760  00269E  0E01               	movlw	1
  9761  0026A0  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9762  0026A2  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9763  0026A6  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9764  0026AA  90D8               	bcf	status,0,c
  9765  0026AC  3647               	rlcf	??_put_fat+2,f,c
  9766  0026AE  3648               	rlcf	??_put_fat+3,f,c
  9767  0026B0  5045               	movf	??_put_fat,w,c
  9768  0026B2  1647               	andwf	??_put_fat+2,f,c
  9769  0026B4  5046               	movf	??_put_fat+1,w,c
  9770  0026B6  1648               	andwf	??_put_fat+3,f,c
  9771  0026B8  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9772  0026BC  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9773  0026C0  5047               	movf	??_put_fat+2,w,c
  9774  0026C2  2649               	addwf	??_put_fat+4,f,c
  9775  0026C4  5048               	movf	??_put_fat+3,w,c
  9776  0026C6  224A               	addwfc	??_put_fat+5,f,c
  9777  0026C8  0E2E               	movlw	46
  9778  0026CA  2449               	addwf	??_put_fat+4,w,c
  9779  0026CC  6E54               	movwf	put_fat@p,c
  9780  0026CE  0E00               	movlw	0
  9781  0026D0  204A               	addwfc	??_put_fat+5,w,c
  9782  0026D2  6E55               	movwf	put_fat@p+1,c
  9783                           
  9784                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  9785  0026D4  C054  FFD9         	movff	put_fat@p,fsr2l
  9786  0026D8  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9787  0026DC  C041  FFDE         	movff	put_fat@val,postinc2
  9788  0026E0  C042  FFDD         	movff	put_fat@val+1,postdec2
  9789  0026E4  D079               	goto	l4453
  9790  0026E6                     l4443:
  9791                           
  9792                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  9793  0026E6  C03B  F030         	movff	put_fat@fs,move_window@fs
  9794  0026EA  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9795  0026EE  EE20 F01E          	lfsr	2,30
  9796  0026F2  503B               	movf	put_fat@fs,w,c
  9797  0026F4  26D9               	addwf	fsr2l,f,c
  9798  0026F6  503C               	movf	put_fat@fs+1,w,c
  9799  0026F8  22DA               	addwfc	fsr2h,f,c
  9800  0026FA  CFDE F045          	movff	postinc2,??_put_fat
  9801  0026FE  CFDE F046          	movff	postinc2,??_put_fat+1
  9802  002702  CFDE F047          	movff	postinc2,??_put_fat+2
  9803  002706  CFDE F048          	movff	postinc2,??_put_fat+3
  9804  00270A  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9805  00270E  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9806  002712  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9807  002716  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9808  00271A  0E08               	movlw	8
  9809  00271C  D005               	goto	u5290
  9810  00271E                     u5295:
  9811  00271E  90D8               	bcf	status,0,c
  9812  002720  324C               	rrcf	??_put_fat+7,f,c
  9813  002722  324B               	rrcf	??_put_fat+6,f,c
  9814  002724  324A               	rrcf	??_put_fat+5,f,c
  9815  002726  3249               	rrcf	??_put_fat+4,f,c
  9816  002728                     u5290:
  9817  002728  2EE8               	decfsz	wreg,f,c
  9818  00272A  D7F9               	goto	u5295
  9819  00272C  5045               	movf	??_put_fat,w,c
  9820  00272E  2449               	addwf	??_put_fat+4,w,c
  9821  002730  6E32               	movwf	move_window@sector,c
  9822  002732  5046               	movf	??_put_fat+1,w,c
  9823  002734  204A               	addwfc	??_put_fat+5,w,c
  9824  002736  6E33               	movwf	move_window@sector+1,c
  9825  002738  5047               	movf	??_put_fat+2,w,c
  9826  00273A  204B               	addwfc	??_put_fat+6,w,c
  9827  00273C  6E34               	movwf	move_window@sector+2,c
  9828  00273E  5048               	movf	??_put_fat+3,w,c
  9829  002740  204C               	addwfc	??_put_fat+7,w,c
  9830  002742  6E35               	movwf	move_window@sector+3,c
  9831  002744  EC8F  F027         	call	_move_window	;wreg free
  9832  002748  6E53               	movwf	put_fat@res,c
  9833                           
  9834                           ;ff.c: 913:    if (res != FR_OK) break;
  9835  00274A  5053               	movf	put_fat@res,w,c
  9836  00274C  A4D8               	btfss	status,2,c
  9837  00274E  D063               	goto	l4459
  9838                           
  9839                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  9840  002750  0EFF               	movlw	255
  9841  002752  6E45               	movwf	??_put_fat& (0+255),c
  9842  002754  0E01               	movlw	1
  9843  002756  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9844  002758  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9845  00275C  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9846  002760  90D8               	bcf	status,0,c
  9847  002762  3647               	rlcf	??_put_fat+2,f,c
  9848  002764  3648               	rlcf	??_put_fat+3,f,c
  9849  002766  90D8               	bcf	status,0,c
  9850  002768  3647               	rlcf	??_put_fat+2,f,c
  9851  00276A  3648               	rlcf	??_put_fat+3,f,c
  9852  00276C  5045               	movf	??_put_fat,w,c
  9853  00276E  1647               	andwf	??_put_fat+2,f,c
  9854  002770  5046               	movf	??_put_fat+1,w,c
  9855  002772  1648               	andwf	??_put_fat+3,f,c
  9856  002774  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9857  002778  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9858  00277C  5047               	movf	??_put_fat+2,w,c
  9859  00277E  2649               	addwf	??_put_fat+4,f,c
  9860  002780  5048               	movf	??_put_fat+3,w,c
  9861  002782  224A               	addwfc	??_put_fat+5,f,c
  9862  002784  0E2E               	movlw	46
  9863  002786  2449               	addwf	??_put_fat+4,w,c
  9864  002788  6E54               	movwf	put_fat@p,c
  9865  00278A  0E00               	movlw	0
  9866  00278C  204A               	addwfc	??_put_fat+5,w,c
  9867  00278E  6E55               	movwf	put_fat@p+1,c
  9868                           
  9869                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  9870  002790  C054  FFD9         	movff	put_fat@p,fsr2l
  9871  002794  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9872  002798  0E00               	movlw	0
  9873  00279A  14DE               	andwf	postinc2,w,c
  9874  00279C  6E45               	movwf	??_put_fat& (0+255),c
  9875  00279E  0E00               	movlw	0
  9876  0027A0  14DE               	andwf	postinc2,w,c
  9877  0027A2  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9878  0027A4  0E00               	movlw	0
  9879  0027A6  14DE               	andwf	postinc2,w,c
  9880  0027A8  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9881  0027AA  0EF0               	movlw	240
  9882  0027AC  14DE               	andwf	postinc2,w,c
  9883  0027AE  6E48               	movwf	(??_put_fat+3)& (0+255),c
  9884  0027B0  5045               	movf	??_put_fat,w,c
  9885  0027B2  1241               	iorwf	put_fat@val,f,c
  9886  0027B4  5046               	movf	??_put_fat+1,w,c
  9887  0027B6  1242               	iorwf	put_fat@val+1,f,c
  9888  0027B8  5047               	movf	??_put_fat+2,w,c
  9889  0027BA  1243               	iorwf	put_fat@val+2,f,c
  9890  0027BC  5048               	movf	??_put_fat+3,w,c
  9891  0027BE  1244               	iorwf	put_fat@val+3,f,c
  9892                           
  9893                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
  9894  0027C0  C054  FFD9         	movff	put_fat@p,fsr2l
  9895  0027C4  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9896  0027C8  C041  FFDE         	movff	put_fat@val,postinc2
  9897  0027CC  C042  FFDE         	movff	put_fat@val+1,postinc2
  9898  0027D0  C043  FFDE         	movff	put_fat@val+2,postinc2
  9899  0027D4  C044  FFDE         	movff	put_fat@val+3,postinc2
  9900  0027D8                     l4453:
  9901                           
  9902                           ;ff.c: 917:    fs->wflag = 1;
  9903  0027D8  EE20 F004          	lfsr	2,4
  9904  0027DC  503B               	movf	put_fat@fs,w,c
  9905  0027DE  26D9               	addwf	fsr2l,f,c
  9906  0027E0  503C               	movf	put_fat@fs+1,w,c
  9907  0027E2  22DA               	addwfc	fsr2h,f,c
  9908  0027E4  0E01               	movlw	1
  9909  0027E6  6EDF               	movwf	indf2,c
  9910                           
  9911                           ;ff.c: 918:    break;
  9912  0027E8  D016               	goto	l4459
  9913  0027EA                     l4457:
  9914  0027EA  C03B  FFD9         	movff	put_fat@fs,fsr2l
  9915  0027EE  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
  9916  0027F2  50DF               	movf	indf2,w,c
  9917  0027F4  6E45               	movwf	??_put_fat& (0+255),c
  9918  0027F6  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9919                           
  9920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9921                           ; Switch size 1, requested type "simple"
  9922                           ; Number of cases is 1, Range of values is 0 to 0
  9923                           ; switch strategies available:
  9924                           ; Name         Instructions Cycles
  9925                           ; simple_byte            4     3 (average)
  9926                           ;	Chosen strategy is simple_byte
  9927  0027F8  5046               	movf	??_put_fat+1,w,c
  9928  0027FA  0A00               	xorlw	0	; case 0
  9929  0027FC  A4D8               	btfss	status,2,c
  9930  0027FE  D610               	goto	u5200
  9931                           
  9932                           ; Switch size 1, requested type "simple"
  9933                           ; Number of cases is 3, Range of values is 1 to 3
  9934                           ; switch strategies available:
  9935                           ; Name         Instructions Cycles
  9936                           ; simple_byte           10     6 (average)
  9937                           ;	Chosen strategy is simple_byte
  9938  002800  5045               	movf	??_put_fat,w,c
  9939  002802  0A01               	xorlw	1	; case 1
  9940  002804  B4D8               	btfsc	status,2,c
  9941  002806  D60F               	goto	l338
  9942  002808  0A03               	xorlw	3	; case 2
  9943  00280A  B4D8               	btfsc	status,2,c
  9944  00280C  D713               	goto	l4433
  9945  00280E  0A01               	xorlw	1	; case 3
  9946  002810  B4D8               	btfsc	status,2,c
  9947  002812  D769               	goto	l4443
  9948  002814  D605               	goto	u5200
  9949  002816                     l4459:
  9950                           
  9951                           ;ff.c: 925:  return res;
  9952  002816  5053               	movf	put_fat@res,w,c
  9953  002818  0012               	return		;funcret
  9954  00281A                     __end_of_put_fat:
  9955                           	opt callstack 0
  9956                           
  9957 ;; *************** function _get_fat *****************
  9958 ;; Defined at:
  9959 ;;		line 818 in file "ff.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;  fs              2   58[COMRAM] PTR struct .
  9962 ;;		 -> NULL(0), FatFs(558), 
  9963 ;;  clst            4   60[COMRAM] unsigned long 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  val             4   75[COMRAM] unsigned long 
  9966 ;;  bc              2   83[COMRAM] unsigned short 
  9967 ;;  p               2   81[COMRAM] PTR unsigned char 
  9968 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9969 ;;  wc              2   79[COMRAM] unsigned short 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  4   58[COMRAM] unsigned long 
  9972 ;; Registers used:
  9973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9979 ;;      Params:         6       0       0       0       0       0       0       0       0
  9980 ;;      Locals:        12       0       0       0       0       0       0       0       0
  9981 ;;      Temps:          9       0       0       0       0       0       0       0       0
  9982 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9983 ;;Total ram usage:       27 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    8
  9986 ;; This function calls:
  9987 ;;		_move_window
  9988 ;; This function is called by:
  9989 ;;		_remove_chain
  9990 ;;		_create_chain
  9991 ;;		_dir_sdi
  9992 ;;		_dir_next
  9993 ;;		_f_lseek
  9994 ;;		_f_read
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           	psect	text24
  9999  002C20                     __ptext24:
 10000                           	opt callstack 0
 10001  002C20                     _get_fat:
 10002                           	opt callstack 20
 10003                           
 10004                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10005                           
 10006                           ;incstack = 0
 10007  002C20  5040               	movf	get_fat@clst+3,w,c
 10008  002C22  103F               	iorwf	get_fat@clst+2,w,c
 10009  002C24  103E               	iorwf	get_fat@clst+1,w,c
 10010  002C26  E104               	bnz	u5080
 10011  002C28  0E02               	movlw	2
 10012  002C2A  5C3D               	subwf	get_fat@clst,w,c
 10013  002C2C  A0D8               	btfss	status,0,c
 10014  002C2E  D010               	goto	u5090
 10015  002C30                     u5080:
 10016  002C30  EE20 F012          	lfsr	2,18
 10017  002C34  503B               	movf	get_fat@fs,w,c
 10018  002C36  26D9               	addwf	fsr2l,f,c
 10019  002C38  503C               	movf	get_fat@fs+1,w,c
 10020  002C3A  22DA               	addwfc	fsr2h,f,c
 10021  002C3C  50DE               	movf	postinc2,w,c
 10022  002C3E  5C3D               	subwf	get_fat@clst,w,c
 10023  002C40  50DE               	movf	postinc2,w,c
 10024  002C42  583E               	subwfb	get_fat@clst+1,w,c
 10025  002C44  50DE               	movf	postinc2,w,c
 10026  002C46  583F               	subwfb	get_fat@clst+2,w,c
 10027  002C48  50DE               	movf	postinc2,w,c
 10028  002C4A  5840               	subwfb	get_fat@clst+3,w,c
 10029  002C4C  A0D8               	btfss	status,0,c
 10030  002C4E  D008               	goto	l312
 10031  002C50                     u5090:
 10032                           
 10033                           ;ff.c: 829:   val = 1;
 10034  002C50  0E01               	movlw	1
 10035  002C52  6E4C               	movwf	get_fat@val,c
 10036  002C54  0E00               	movlw	0
 10037  002C56  6E4D               	movwf	get_fat@val+1,c
 10038  002C58  0E00               	movlw	0
 10039  002C5A  6E4E               	movwf	get_fat@val+2,c
 10040  002C5C  0E00               	movlw	0
 10041  002C5E  D190               	goto	L11
 10042  002C60                     l312:
 10043                           
 10044                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10045  002C60  684C               	setf	get_fat@val,c
 10046  002C62  684D               	setf	get_fat@val+1,c
 10047  002C64  684E               	setf	get_fat@val+2,c
 10048  002C66  684F               	setf	get_fat@val+3,c
 10049                           
 10050                           ;ff.c: 834:   switch (fs->fs_type) {
 10051  002C68  D18D               	goto	l4383
 10052  002C6A                     l317:
 10053                           
 10054                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10055  002C6A  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10056  002C6E  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10057  002C72  90D8               	bcf	status,0,c
 10058  002C74  3055               	rrcf	get_fat@bc+1,w,c
 10059  002C76  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10060  002C78  3054               	rrcf	get_fat@bc,w,c
 10061  002C7A  6E41               	movwf	??_get_fat& (0+255),c
 10062  002C7C  5041               	movf	??_get_fat,w,c
 10063  002C7E  2654               	addwf	get_fat@bc,f,c
 10064  002C80  5042               	movf	??_get_fat+1,w,c
 10065  002C82  2255               	addwfc	get_fat@bc+1,f,c
 10066                           
 10067                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10068  002C84  C03B  F030         	movff	get_fat@fs,move_window@fs
 10069  002C88  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10070  002C8C  EE20 F01E          	lfsr	2,30
 10071  002C90  503B               	movf	get_fat@fs,w,c
 10072  002C92  26D9               	addwf	fsr2l,f,c
 10073  002C94  503C               	movf	get_fat@fs+1,w,c
 10074  002C96  22DA               	addwfc	fsr2h,f,c
 10075  002C98  CFDE F041          	movff	postinc2,??_get_fat
 10076  002C9C  CFDE F042          	movff	postinc2,??_get_fat+1
 10077  002CA0  CFDE F043          	movff	postinc2,??_get_fat+2
 10078  002CA4  CFDE F044          	movff	postinc2,??_get_fat+3
 10079  002CA8  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10080  002CAC  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10081  002CB0  0E09               	movlw	9
 10082  002CB2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10083  002CB4                     u5105:
 10084  002CB4  90D8               	bcf	status,0,c
 10085  002CB6  3246               	rrcf	??_get_fat+5,f,c
 10086  002CB8  3245               	rrcf	??_get_fat+4,f,c
 10087  002CBA  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10088  002CBC  D7FB               	goto	u5105
 10089  002CBE  5045               	movf	??_get_fat+4,w,c
 10090  002CC0  2441               	addwf	??_get_fat,w,c
 10091  002CC2  6E32               	movwf	move_window@sector,c
 10092  002CC4  5046               	movf	??_get_fat+5,w,c
 10093  002CC6  2042               	addwfc	??_get_fat+1,w,c
 10094  002CC8  6E33               	movwf	move_window@sector+1,c
 10095  002CCA  0E00               	movlw	0
 10096  002CCC  2043               	addwfc	??_get_fat+2,w,c
 10097  002CCE  6E34               	movwf	move_window@sector+2,c
 10098  002CD0  0E00               	movlw	0
 10099  002CD2  2044               	addwfc	??_get_fat+3,w,c
 10100  002CD4  6E35               	movwf	move_window@sector+3,c
 10101  002CD6  EC8F  F027         	call	_move_window	;wreg free
 10102  002CDA  0900               	iorlw	0
 10103  002CDC  A4D8               	btfss	status,2,c
 10104  002CDE  D168               	goto	l315
 10105                           
 10106                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10107  002CE0  0EFF               	movlw	255
 10108  002CE2  6E41               	movwf	??_get_fat& (0+255),c
 10109  002CE4  0E01               	movlw	1
 10110  002CE6  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10111  002CE8  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10112  002CEC  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10113  002CF0  5041               	movf	??_get_fat,w,c
 10114  002CF2  1643               	andwf	??_get_fat+2,f,c
 10115  002CF4  5042               	movf	??_get_fat+1,w,c
 10116  002CF6  1644               	andwf	??_get_fat+3,f,c
 10117  002CF8  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10118  002CFC  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10119  002D00  5043               	movf	??_get_fat+2,w,c
 10120  002D02  2645               	addwf	??_get_fat+4,f,c
 10121  002D04  5044               	movf	??_get_fat+3,w,c
 10122  002D06  2246               	addwfc	??_get_fat+5,f,c
 10123  002D08  0E2E               	movlw	46
 10124  002D0A  2445               	addwf	??_get_fat+4,w,c
 10125  002D0C  6ED9               	movwf	fsr2l,c
 10126  002D0E  0E00               	movlw	0
 10127  002D10  2046               	addwfc	??_get_fat+5,w,c
 10128  002D12  6EDA               	movwf	fsr2h,c
 10129  002D14  50DF               	movf	indf2,w,c
 10130  002D16  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10131  002D18  5047               	movf	??_get_fat+6,w,c
 10132  002D1A  6E50               	movwf	get_fat@wc,c
 10133  002D1C  6A51               	clrf	get_fat@wc+1,c
 10134  002D1E  4A54               	infsnz	get_fat@bc,f,c
 10135  002D20  2A55               	incf	get_fat@bc+1,f,c
 10136                           
 10137                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10138  002D22  C03B  F030         	movff	get_fat@fs,move_window@fs
 10139  002D26  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10140  002D2A  EE20 F01E          	lfsr	2,30
 10141  002D2E  503B               	movf	get_fat@fs,w,c
 10142  002D30  26D9               	addwf	fsr2l,f,c
 10143  002D32  503C               	movf	get_fat@fs+1,w,c
 10144  002D34  22DA               	addwfc	fsr2h,f,c
 10145  002D36  CFDE F041          	movff	postinc2,??_get_fat
 10146  002D3A  CFDE F042          	movff	postinc2,??_get_fat+1
 10147  002D3E  CFDE F043          	movff	postinc2,??_get_fat+2
 10148  002D42  CFDE F044          	movff	postinc2,??_get_fat+3
 10149  002D46  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10150  002D4A  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10151  002D4E  0E09               	movlw	9
 10152  002D50  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10153  002D52                     u5125:
 10154  002D52  90D8               	bcf	status,0,c
 10155  002D54  3246               	rrcf	??_get_fat+5,f,c
 10156  002D56  3245               	rrcf	??_get_fat+4,f,c
 10157  002D58  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10158  002D5A  D7FB               	goto	u5125
 10159  002D5C  5045               	movf	??_get_fat+4,w,c
 10160  002D5E  2441               	addwf	??_get_fat,w,c
 10161  002D60  6E32               	movwf	move_window@sector,c
 10162  002D62  5046               	movf	??_get_fat+5,w,c
 10163  002D64  2042               	addwfc	??_get_fat+1,w,c
 10164  002D66  6E33               	movwf	move_window@sector+1,c
 10165  002D68  0E00               	movlw	0
 10166  002D6A  2043               	addwfc	??_get_fat+2,w,c
 10167  002D6C  6E34               	movwf	move_window@sector+2,c
 10168  002D6E  0E00               	movlw	0
 10169  002D70  2044               	addwfc	??_get_fat+3,w,c
 10170  002D72  6E35               	movwf	move_window@sector+3,c
 10171  002D74  EC8F  F027         	call	_move_window	;wreg free
 10172  002D78  0900               	iorlw	0
 10173  002D7A  A4D8               	btfss	status,2,c
 10174  002D7C  D119               	goto	l315
 10175                           
 10176                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10177  002D7E  0EFF               	movlw	255
 10178  002D80  6E41               	movwf	??_get_fat& (0+255),c
 10179  002D82  0E01               	movlw	1
 10180  002D84  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10181  002D86  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10182  002D8A  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10183  002D8E  5041               	movf	??_get_fat,w,c
 10184  002D90  1643               	andwf	??_get_fat+2,f,c
 10185  002D92  5042               	movf	??_get_fat+1,w,c
 10186  002D94  1644               	andwf	??_get_fat+3,f,c
 10187  002D96  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10188  002D9A  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10189  002D9E  5043               	movf	??_get_fat+2,w,c
 10190  002DA0  2645               	addwf	??_get_fat+4,f,c
 10191  002DA2  5044               	movf	??_get_fat+3,w,c
 10192  002DA4  2246               	addwfc	??_get_fat+5,f,c
 10193  002DA6  0E2E               	movlw	46
 10194  002DA8  2445               	addwf	??_get_fat+4,w,c
 10195  002DAA  6ED9               	movwf	fsr2l,c
 10196  002DAC  0E00               	movlw	0
 10197  002DAE  2046               	addwfc	??_get_fat+5,w,c
 10198  002DB0  6EDA               	movwf	fsr2h,c
 10199  002DB2  50DF               	movf	indf2,w,c
 10200  002DB4  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10201  002DB6  5047               	movf	??_get_fat+6,w,c
 10202  002DB8  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10203  002DBA  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10204  002DBC  5048               	movf	??_get_fat+7,w,c
 10205  002DBE  1250               	iorwf	get_fat@wc,f,c
 10206  002DC0  5049               	movf	??_get_fat+8,w,c
 10207  002DC2  1251               	iorwf	get_fat@wc+1,f,c
 10208                           
 10209                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10210  002DC4  B03D               	btfsc	get_fat@clst,0,c
 10211  002DC6  D007               	goto	l4361
 10212  002DC8  0EFF               	movlw	255
 10213  002DCA  1450               	andwf	get_fat@wc,w,c
 10214  002DCC  6E4A               	movwf	_get_fat$564,c
 10215  002DCE  0E0F               	movlw	15
 10216  002DD0  1451               	andwf	get_fat@wc+1,w,c
 10217  002DD2  6E4B               	movwf	_get_fat$564+1,c
 10218  002DD4  D00F               	goto	l4363
 10219  002DD6                     l4361:
 10220  002DD6  C050  F041         	movff	get_fat@wc,??_get_fat
 10221  002DDA  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10222  002DDE  0E04               	movlw	4
 10223  002DE0  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10224  002DE2                     u5155:
 10225  002DE2  90D8               	bcf	status,0,c
 10226  002DE4  3242               	rrcf	??_get_fat+1,f,c
 10227  002DE6  3241               	rrcf	??_get_fat,f,c
 10228  002DE8  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10229  002DEA  D7FB               	goto	u5155
 10230  002DEC  C041  F04A         	movff	??_get_fat,_get_fat$564
 10231  002DF0  C042  F04B         	movff	??_get_fat+1,_get_fat$564+1
 10232  002DF4                     l4363:
 10233  002DF4  C04A  F04C         	movff	_get_fat$564,get_fat@val
 10234  002DF8  C04B  F04D         	movff	_get_fat$564+1,get_fat@val+1
 10235  002DFC  D05B               	goto	L12
 10236  002DFE                     l4365:
 10237                           
 10238                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10239  002DFE  C03B  F030         	movff	get_fat@fs,move_window@fs
 10240  002E02  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10241  002E06  EE20 F01E          	lfsr	2,30
 10242  002E0A  503B               	movf	get_fat@fs,w,c
 10243  002E0C  26D9               	addwf	fsr2l,f,c
 10244  002E0E  503C               	movf	get_fat@fs+1,w,c
 10245  002E10  22DA               	addwfc	fsr2h,f,c
 10246  002E12  CFDE F041          	movff	postinc2,??_get_fat
 10247  002E16  CFDE F042          	movff	postinc2,??_get_fat+1
 10248  002E1A  CFDE F043          	movff	postinc2,??_get_fat+2
 10249  002E1E  CFDE F044          	movff	postinc2,??_get_fat+3
 10250  002E22  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10251  002E26  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10252  002E2A  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10253  002E2E  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10254  002E32  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10255  002E36  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10256  002E3A  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10257  002E3E  6A48               	clrf	??_get_fat+7,c
 10258  002E40  5041               	movf	??_get_fat,w,c
 10259  002E42  2445               	addwf	??_get_fat+4,w,c
 10260  002E44  6E32               	movwf	move_window@sector,c
 10261  002E46  5042               	movf	??_get_fat+1,w,c
 10262  002E48  2046               	addwfc	??_get_fat+5,w,c
 10263  002E4A  6E33               	movwf	move_window@sector+1,c
 10264  002E4C  5043               	movf	??_get_fat+2,w,c
 10265  002E4E  2047               	addwfc	??_get_fat+6,w,c
 10266  002E50  6E34               	movwf	move_window@sector+2,c
 10267  002E52  5044               	movf	??_get_fat+3,w,c
 10268  002E54  2048               	addwfc	??_get_fat+7,w,c
 10269  002E56  6E35               	movwf	move_window@sector+3,c
 10270  002E58  EC8F  F027         	call	_move_window	;wreg free
 10271  002E5C  0900               	iorlw	0
 10272  002E5E  A4D8               	btfss	status,2,c
 10273  002E60  D0A7               	goto	l315
 10274                           
 10275                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10276  002E62  0EFF               	movlw	255
 10277  002E64  6E41               	movwf	??_get_fat& (0+255),c
 10278  002E66  0E01               	movlw	1
 10279  002E68  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10280  002E6A  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10281  002E6E  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10282  002E72  90D8               	bcf	status,0,c
 10283  002E74  3643               	rlcf	??_get_fat+2,f,c
 10284  002E76  3644               	rlcf	??_get_fat+3,f,c
 10285  002E78  5041               	movf	??_get_fat,w,c
 10286  002E7A  1643               	andwf	??_get_fat+2,f,c
 10287  002E7C  5042               	movf	??_get_fat+1,w,c
 10288  002E7E  1644               	andwf	??_get_fat+3,f,c
 10289  002E80  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10290  002E84  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10291  002E88  5043               	movf	??_get_fat+2,w,c
 10292  002E8A  2645               	addwf	??_get_fat+4,f,c
 10293  002E8C  5044               	movf	??_get_fat+3,w,c
 10294  002E8E  2246               	addwfc	??_get_fat+5,f,c
 10295  002E90  0E2E               	movlw	46
 10296  002E92  2445               	addwf	??_get_fat+4,w,c
 10297  002E94  6E52               	movwf	get_fat@p,c
 10298  002E96  0E00               	movlw	0
 10299  002E98  2046               	addwfc	??_get_fat+5,w,c
 10300  002E9A  6E53               	movwf	get_fat@p+1,c
 10301                           
 10302                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10303  002E9C  C052  FFD9         	movff	get_fat@p,fsr2l
 10304  002EA0  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10305  002EA4  CFDE F041          	movff	postinc2,??_get_fat
 10306  002EA8  CFDD F042          	movff	postdec2,??_get_fat+1
 10307  002EAC  C041  F04C         	movff	??_get_fat,get_fat@val
 10308  002EB0  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10309  002EB4                     L12:
 10310  002EB4  6A4E               	clrf	get_fat@val+2,c
 10311  002EB6  6A4F               	clrf	get_fat@val+3,c
 10312                           
 10313                           ;ff.c: 848:    break;
 10314  002EB8  D07B               	goto	l315
 10315  002EBA                     l4373:
 10316                           
 10317                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10318  002EBA  C03B  F030         	movff	get_fat@fs,move_window@fs
 10319  002EBE  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10320  002EC2  EE20 F01E          	lfsr	2,30
 10321  002EC6  503B               	movf	get_fat@fs,w,c
 10322  002EC8  26D9               	addwf	fsr2l,f,c
 10323  002ECA  503C               	movf	get_fat@fs+1,w,c
 10324  002ECC  22DA               	addwfc	fsr2h,f,c
 10325  002ECE  CFDE F041          	movff	postinc2,??_get_fat
 10326  002ED2  CFDE F042          	movff	postinc2,??_get_fat+1
 10327  002ED6  CFDE F043          	movff	postinc2,??_get_fat+2
 10328  002EDA  CFDE F044          	movff	postinc2,??_get_fat+3
 10329  002EDE  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10330  002EE2  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10331  002EE6  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10332  002EEA  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10333  002EEE  0E08               	movlw	8
 10334  002EF0  D005               	goto	u5170
 10335  002EF2                     u5175:
 10336  002EF2  90D8               	bcf	status,0,c
 10337  002EF4  3248               	rrcf	??_get_fat+7,f,c
 10338  002EF6  3247               	rrcf	??_get_fat+6,f,c
 10339  002EF8  3246               	rrcf	??_get_fat+5,f,c
 10340  002EFA  3245               	rrcf	??_get_fat+4,f,c
 10341  002EFC                     u5170:
 10342  002EFC  2EE8               	decfsz	wreg,f,c
 10343  002EFE  D7F9               	goto	u5175
 10344  002F00  5041               	movf	??_get_fat,w,c
 10345  002F02  2445               	addwf	??_get_fat+4,w,c
 10346  002F04  6E32               	movwf	move_window@sector,c
 10347  002F06  5042               	movf	??_get_fat+1,w,c
 10348  002F08  2046               	addwfc	??_get_fat+5,w,c
 10349  002F0A  6E33               	movwf	move_window@sector+1,c
 10350  002F0C  5043               	movf	??_get_fat+2,w,c
 10351  002F0E  2047               	addwfc	??_get_fat+6,w,c
 10352  002F10  6E34               	movwf	move_window@sector+2,c
 10353  002F12  5044               	movf	??_get_fat+3,w,c
 10354  002F14  2048               	addwfc	??_get_fat+7,w,c
 10355  002F16  6E35               	movwf	move_window@sector+3,c
 10356  002F18  EC8F  F027         	call	_move_window	;wreg free
 10357  002F1C  0900               	iorlw	0
 10358  002F1E  A4D8               	btfss	status,2,c
 10359  002F20  D047               	goto	l315
 10360                           
 10361                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10362  002F22  0EFF               	movlw	255
 10363  002F24  6E41               	movwf	??_get_fat& (0+255),c
 10364  002F26  0E01               	movlw	1
 10365  002F28  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10366  002F2A  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10367  002F2E  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10368  002F32  90D8               	bcf	status,0,c
 10369  002F34  3643               	rlcf	??_get_fat+2,f,c
 10370  002F36  3644               	rlcf	??_get_fat+3,f,c
 10371  002F38  90D8               	bcf	status,0,c
 10372  002F3A  3643               	rlcf	??_get_fat+2,f,c
 10373  002F3C  3644               	rlcf	??_get_fat+3,f,c
 10374  002F3E  5041               	movf	??_get_fat,w,c
 10375  002F40  1643               	andwf	??_get_fat+2,f,c
 10376  002F42  5042               	movf	??_get_fat+1,w,c
 10377  002F44  1644               	andwf	??_get_fat+3,f,c
 10378  002F46  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10379  002F4A  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10380  002F4E  5043               	movf	??_get_fat+2,w,c
 10381  002F50  2645               	addwf	??_get_fat+4,f,c
 10382  002F52  5044               	movf	??_get_fat+3,w,c
 10383  002F54  2246               	addwfc	??_get_fat+5,f,c
 10384  002F56  0E2E               	movlw	46
 10385  002F58  2445               	addwf	??_get_fat+4,w,c
 10386  002F5A  6E52               	movwf	get_fat@p,c
 10387  002F5C  0E00               	movlw	0
 10388  002F5E  2046               	addwfc	??_get_fat+5,w,c
 10389  002F60  6E53               	movwf	get_fat@p+1,c
 10390                           
 10391                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10392  002F62  C052  FFD9         	movff	get_fat@p,fsr2l
 10393  002F66  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10394  002F6A  0EFF               	movlw	255
 10395  002F6C  14DE               	andwf	postinc2,w,c
 10396  002F6E  6E4C               	movwf	get_fat@val,c
 10397  002F70  0EFF               	movlw	255
 10398  002F72  14DE               	andwf	postinc2,w,c
 10399  002F74  6E4D               	movwf	get_fat@val+1,c
 10400  002F76  0EFF               	movlw	255
 10401  002F78  14DE               	andwf	postinc2,w,c
 10402  002F7A  6E4E               	movwf	get_fat@val+2,c
 10403  002F7C  0E0F               	movlw	15
 10404  002F7E  14DE               	andwf	postinc2,w,c
 10405  002F80                     L11:
 10406  002F80  6E4F               	movwf	get_fat@val+3,c
 10407                           
 10408                           ;ff.c: 854:    break;
 10409  002F82  D016               	goto	l315
 10410  002F84                     l4383:
 10411  002F84  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10412  002F88  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10413  002F8C  50DF               	movf	indf2,w,c
 10414  002F8E  6E41               	movwf	??_get_fat& (0+255),c
 10415  002F90  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10416                           
 10417                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10418                           ; Switch size 1, requested type "simple"
 10419                           ; Number of cases is 1, Range of values is 0 to 0
 10420                           ; switch strategies available:
 10421                           ; Name         Instructions Cycles
 10422                           ; simple_byte            4     3 (average)
 10423                           ;	Chosen strategy is simple_byte
 10424  002F92  5042               	movf	??_get_fat+1,w,c
 10425  002F94  0A00               	xorlw	0	; case 0
 10426  002F96  A4D8               	btfss	status,2,c
 10427  002F98  D65B               	goto	u5090
 10428                           
 10429                           ; Switch size 1, requested type "simple"
 10430                           ; Number of cases is 3, Range of values is 1 to 3
 10431                           ; switch strategies available:
 10432                           ; Name         Instructions Cycles
 10433                           ; simple_byte           10     6 (average)
 10434                           ;	Chosen strategy is simple_byte
 10435  002F9A  5041               	movf	??_get_fat,w,c
 10436  002F9C  0A01               	xorlw	1	; case 1
 10437  002F9E  B4D8               	btfsc	status,2,c
 10438  002FA0  D664               	goto	l317
 10439  002FA2  0A03               	xorlw	3	; case 2
 10440  002FA4  B4D8               	btfsc	status,2,c
 10441  002FA6  D72B               	goto	l4365
 10442  002FA8  0A01               	xorlw	1	; case 3
 10443  002FAA  B4D8               	btfsc	status,2,c
 10444  002FAC  D786               	goto	l4373
 10445  002FAE  D650               	goto	u5090
 10446  002FB0                     l315:
 10447                           
 10448                           ;ff.c: 861:  return val;
 10449  002FB0  C04C  F03B         	movff	get_fat@val,?_get_fat
 10450  002FB4  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10451  002FB8  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10452  002FBC  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10453  002FC0  0012               	return		;funcret
 10454  002FC2                     __end_of_get_fat:
 10455                           	opt callstack 0
 10456                           
 10457 ;; *************** function _clust2sect *****************
 10458 ;; Defined at:
 10459 ;;		line 800 in file "ff.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;  fs              2   12[COMRAM] PTR struct .
 10462 ;;		 -> NULL(0), FatFs(558), 
 10463 ;;  clst            4   14[COMRAM] unsigned long 
 10464 ;; Auto vars:     Size  Location     Type
 10465 ;;		None
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  4   12[COMRAM] unsigned long 
 10468 ;; Registers used:
 10469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10475 ;;      Params:         6       0       0       0       0       0       0       0       0
 10476 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10477 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10478 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10479 ;;Total ram usage:       11 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    1
 10482 ;; This function calls:
 10483 ;;		___lmul
 10484 ;; This function is called by:
 10485 ;;		_dir_sdi
 10486 ;;		_dir_next
 10487 ;;		_f_write
 10488 ;;		_f_lseek
 10489 ;;		_f_read
 10490 ;; This function uses a non-reentrant model
 10491 ;;
 10492                           
 10493                           	psect	text25
 10494  004DB4                     __ptext25:
 10495                           	opt callstack 0
 10496  004DB4                     _clust2sect:
 10497                           	opt callstack 28
 10498                           
 10499                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10500                           
 10501                           ;incstack = 0
 10502  004DB4  0E02               	movlw	2
 10503  004DB6  5E0F               	subwf	clust2sect@clst,f,c
 10504  004DB8  0E00               	movlw	0
 10505  004DBA  5A10               	subwfb	clust2sect@clst+1,f,c
 10506  004DBC  5A11               	subwfb	clust2sect@clst+2,f,c
 10507  004DBE  5A12               	subwfb	clust2sect@clst+3,f,c
 10508                           
 10509                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10510  004DC0  EE20 F012          	lfsr	2,18
 10511  004DC4  500D               	movf	clust2sect@fs,w,c
 10512  004DC6  26D9               	addwf	fsr2l,f,c
 10513  004DC8  500E               	movf	clust2sect@fs+1,w,c
 10514  004DCA  22DA               	addwfc	fsr2h,f,c
 10515  004DCC  0EFE               	movlw	254
 10516  004DCE  24DE               	addwf	postinc2,w,c
 10517  004DD0  6E13               	movwf	??_clust2sect& (0+255),c
 10518  004DD2  0EFF               	movlw	255
 10519  004DD4  20DE               	addwfc	postinc2,w,c
 10520  004DD6  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10521  004DD8  0EFF               	movlw	255
 10522  004DDA  20DE               	addwfc	postinc2,w,c
 10523  004DDC  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10524  004DDE  0EFF               	movlw	255
 10525  004DE0  20DE               	addwfc	postinc2,w,c
 10526  004DE2  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10527  004DE4  5013               	movf	??_clust2sect,w,c
 10528  004DE6  5C0F               	subwf	clust2sect@clst,w,c
 10529  004DE8  5014               	movf	??_clust2sect+1,w,c
 10530  004DEA  5810               	subwfb	clust2sect@clst+1,w,c
 10531  004DEC  5015               	movf	??_clust2sect+2,w,c
 10532  004DEE  5811               	subwfb	clust2sect@clst+2,w,c
 10533  004DF0  5016               	movf	??_clust2sect+3,w,c
 10534  004DF2  5812               	subwfb	clust2sect@clst+3,w,c
 10535  004DF4  A0D8               	btfss	status,0,c
 10536  004DF6  D009               	goto	l4493
 10537  004DF8  0E00               	movlw	0
 10538  004DFA  6E0D               	movwf	?_clust2sect,c
 10539  004DFC  0E00               	movlw	0
 10540  004DFE  6E0E               	movwf	?_clust2sect+1,c
 10541  004E00  0E00               	movlw	0
 10542  004E02  6E0F               	movwf	?_clust2sect+2,c
 10543  004E04  0E00               	movlw	0
 10544  004E06  6E10               	movwf	?_clust2sect+3,c
 10545  004E08  0012               	return	
 10546  004E0A                     l4493:
 10547                           
 10548                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10549  004E0A  EE20 F026          	lfsr	2,38
 10550  004E0E  500D               	movf	clust2sect@fs,w,c
 10551  004E10  26D9               	addwf	fsr2l,f,c
 10552  004E12  500E               	movf	clust2sect@fs+1,w,c
 10553  004E14  22DA               	addwfc	fsr2h,f,c
 10554  004E16  CFDE F013          	movff	postinc2,??_clust2sect
 10555  004E1A  CFDE F014          	movff	postinc2,??_clust2sect+1
 10556  004E1E  CFDE F015          	movff	postinc2,??_clust2sect+2
 10557  004E22  CFDE F016          	movff	postinc2,??_clust2sect+3
 10558  004E26  EE20 F002          	lfsr	2,2
 10559  004E2A  500D               	movf	clust2sect@fs,w,c
 10560  004E2C  26D9               	addwf	fsr2l,f,c
 10561  004E2E  500E               	movf	clust2sect@fs+1,w,c
 10562  004E30  22DA               	addwfc	fsr2h,f,c
 10563  004E32  50DF               	movf	indf2,w,c
 10564  004E34  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10565  004E36  5017               	movf	??_clust2sect+4,w,c
 10566  004E38  6E01               	movwf	___lmul@multiplier,c
 10567  004E3A  6A02               	clrf	___lmul@multiplier+1,c
 10568  004E3C  6A03               	clrf	___lmul@multiplier+2,c
 10569  004E3E  6A04               	clrf	___lmul@multiplier+3,c
 10570  004E40  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10571  004E44  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10572  004E48  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10573  004E4C  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10574  004E50  EC94  F029         	call	___lmul	;wreg free
 10575  004E54  5013               	movf	??_clust2sect,w,c
 10576  004E56  2401               	addwf	?___lmul,w,c
 10577  004E58  6E0D               	movwf	?_clust2sect,c
 10578  004E5A  5014               	movf	??_clust2sect+1,w,c
 10579  004E5C  2002               	addwfc	?___lmul+1,w,c
 10580  004E5E  6E0E               	movwf	?_clust2sect+1,c
 10581  004E60  5015               	movf	??_clust2sect+2,w,c
 10582  004E62  2003               	addwfc	?___lmul+2,w,c
 10583  004E64  6E0F               	movwf	?_clust2sect+2,c
 10584  004E66  5016               	movf	??_clust2sect+3,w,c
 10585  004E68  2004               	addwfc	?___lmul+3,w,c
 10586  004E6A  6E10               	movwf	?_clust2sect+3,c
 10587  004E6C  0012               	return		;funcret
 10588  004E6E                     __end_of_clust2sect:
 10589                           	opt callstack 0
 10590                           
 10591 ;; *************** function ___lmul *****************
 10592 ;; Defined at:
 10593 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10594 ;; Parameters:    Size  Location     Type
 10595 ;;  multiplier      4    0[COMRAM] unsigned long 
 10596 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  product         4    8[COMRAM] unsigned long 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  4    0[COMRAM] unsigned long 
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10608 ;;      Params:         8       0       0       0       0       0       0       0       0
 10609 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10611 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10612 ;;Total ram usage:       12 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; This function calls:
 10615 ;;		Nothing
 10616 ;; This function is called by:
 10617 ;;		_clust2sect
 10618 ;;		_find_volume
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           	psect	text26
 10623  005328                     __ptext26:
 10624                           	opt callstack 0
 10625  005328                     ___lmul:
 10626                           	opt callstack 28
 10627                           
 10628                           ;incstack = 0
 10629  005328  0E00               	movlw	0
 10630  00532A  6E09               	movwf	___lmul@product,c
 10631  00532C  0E00               	movlw	0
 10632  00532E  6E0A               	movwf	___lmul@product+1,c
 10633  005330  0E00               	movlw	0
 10634  005332  6E0B               	movwf	___lmul@product+2,c
 10635  005334  0E00               	movlw	0
 10636  005336  6E0C               	movwf	___lmul@product+3,c
 10637  005338                     l4469:
 10638  005338  A001               	btfss	___lmul@multiplier,0,c
 10639  00533A  D008               	goto	l4473
 10640  00533C  5005               	movf	___lmul@multiplicand,w,c
 10641  00533E  2609               	addwf	___lmul@product,f,c
 10642  005340  5006               	movf	___lmul@multiplicand+1,w,c
 10643  005342  220A               	addwfc	___lmul@product+1,f,c
 10644  005344  5007               	movf	___lmul@multiplicand+2,w,c
 10645  005346  220B               	addwfc	___lmul@product+2,f,c
 10646  005348  5008               	movf	___lmul@multiplicand+3,w,c
 10647  00534A  220C               	addwfc	___lmul@product+3,f,c
 10648  00534C                     l4473:
 10649  00534C  90D8               	bcf	status,0,c
 10650  00534E  3605               	rlcf	___lmul@multiplicand,f,c
 10651  005350  3606               	rlcf	___lmul@multiplicand+1,f,c
 10652  005352  3607               	rlcf	___lmul@multiplicand+2,f,c
 10653  005354  3608               	rlcf	___lmul@multiplicand+3,f,c
 10654  005356  90D8               	bcf	status,0,c
 10655  005358  3204               	rrcf	___lmul@multiplier+3,f,c
 10656  00535A  3203               	rrcf	___lmul@multiplier+2,f,c
 10657  00535C  3202               	rrcf	___lmul@multiplier+1,f,c
 10658  00535E  3201               	rrcf	___lmul@multiplier,f,c
 10659  005360  5001               	movf	___lmul@multiplier,w,c
 10660  005362  1002               	iorwf	___lmul@multiplier+1,w,c
 10661  005364  1003               	iorwf	___lmul@multiplier+2,w,c
 10662  005366  1004               	iorwf	___lmul@multiplier+3,w,c
 10663  005368  A4D8               	btfss	status,2,c
 10664  00536A  D7E6               	goto	l4469
 10665  00536C  C009  F001         	movff	___lmul@product,?___lmul
 10666  005370  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10667  005374  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10668  005378  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10669  00537C  0012               	return		;funcret
 10670  00537E                     __end_of___lmul:
 10671                           	opt callstack 0
 10672                           
 10673 ;; *************** function ___lldiv *****************
 10674 ;; Defined at:
 10675 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;  dividend        4    0[COMRAM] unsigned long 
 10678 ;;  divisor         4    4[COMRAM] unsigned long 
 10679 ;; Auto vars:     Size  Location     Type
 10680 ;;  quotient        4    8[COMRAM] unsigned long 
 10681 ;;  counter         1   12[COMRAM] unsigned char 
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  4    0[COMRAM] unsigned long 
 10684 ;; Registers used:
 10685 ;;		wreg, status,2, status,0
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10691 ;;      Params:         8       0       0       0       0       0       0       0       0
 10692 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10694 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10695 ;;Total ram usage:       13 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; This function calls:
 10698 ;;		Nothing
 10699 ;; This function is called by:
 10700 ;;		_find_volume
 10701 ;;		_f_lseek
 10702 ;; This function uses a non-reentrant model
 10703 ;;
 10704                           
 10705                           	psect	text27
 10706  005058                     __ptext27:
 10707                           	opt callstack 0
 10708  005058                     ___lldiv:
 10709                           	opt callstack 28
 10710                           
 10711                           ;incstack = 0
 10712  005058  0E00               	movlw	0
 10713  00505A  6E09               	movwf	___lldiv@quotient,c
 10714  00505C  0E00               	movlw	0
 10715  00505E  6E0A               	movwf	___lldiv@quotient+1,c
 10716  005060  0E00               	movlw	0
 10717  005062  6E0B               	movwf	___lldiv@quotient+2,c
 10718  005064  0E00               	movlw	0
 10719  005066  6E0C               	movwf	___lldiv@quotient+3,c
 10720  005068  5005               	movf	___lldiv@divisor,w,c
 10721  00506A  1006               	iorwf	___lldiv@divisor+1,w,c
 10722  00506C  1007               	iorwf	___lldiv@divisor+2,w,c
 10723  00506E  1008               	iorwf	___lldiv@divisor+3,w,c
 10724  005070  B4D8               	btfsc	status,2,c
 10725  005072  D02A               	goto	l877
 10726  005074  0E01               	movlw	1
 10727  005076  6E0D               	movwf	___lldiv@counter,c
 10728  005078  D006               	goto	l5371
 10729  00507A                     l5369:
 10730  00507A  90D8               	bcf	status,0,c
 10731  00507C  3605               	rlcf	___lldiv@divisor,f,c
 10732  00507E  3606               	rlcf	___lldiv@divisor+1,f,c
 10733  005080  3607               	rlcf	___lldiv@divisor+2,f,c
 10734  005082  3608               	rlcf	___lldiv@divisor+3,f,c
 10735  005084  2A0D               	incf	___lldiv@counter,f,c
 10736  005086                     l5371:
 10737  005086  AE08               	btfss	___lldiv@divisor+3,7,c
 10738  005088  D7F8               	goto	l5369
 10739  00508A                     u7070:
 10740  00508A  90D8               	bcf	status,0,c
 10741  00508C  3609               	rlcf	___lldiv@quotient,f,c
 10742  00508E  360A               	rlcf	___lldiv@quotient+1,f,c
 10743  005090  360B               	rlcf	___lldiv@quotient+2,f,c
 10744  005092  360C               	rlcf	___lldiv@quotient+3,f,c
 10745  005094  5005               	movf	___lldiv@divisor,w,c
 10746  005096  5C01               	subwf	___lldiv@dividend,w,c
 10747  005098  5006               	movf	___lldiv@divisor+1,w,c
 10748  00509A  5802               	subwfb	___lldiv@dividend+1,w,c
 10749  00509C  5007               	movf	___lldiv@divisor+2,w,c
 10750  00509E  5803               	subwfb	___lldiv@dividend+2,w,c
 10751  0050A0  5008               	movf	___lldiv@divisor+3,w,c
 10752  0050A2  5804               	subwfb	___lldiv@dividend+3,w,c
 10753  0050A4  A0D8               	btfss	status,0,c
 10754  0050A6  D009               	goto	l5381
 10755  0050A8  5005               	movf	___lldiv@divisor,w,c
 10756  0050AA  5E01               	subwf	___lldiv@dividend,f,c
 10757  0050AC  5006               	movf	___lldiv@divisor+1,w,c
 10758  0050AE  5A02               	subwfb	___lldiv@dividend+1,f,c
 10759  0050B0  5007               	movf	___lldiv@divisor+2,w,c
 10760  0050B2  5A03               	subwfb	___lldiv@dividend+2,f,c
 10761  0050B4  5008               	movf	___lldiv@divisor+3,w,c
 10762  0050B6  5A04               	subwfb	___lldiv@dividend+3,f,c
 10763  0050B8  8009               	bsf	___lldiv@quotient,0,c
 10764  0050BA                     l5381:
 10765  0050BA  90D8               	bcf	status,0,c
 10766  0050BC  3208               	rrcf	___lldiv@divisor+3,f,c
 10767  0050BE  3207               	rrcf	___lldiv@divisor+2,f,c
 10768  0050C0  3206               	rrcf	___lldiv@divisor+1,f,c
 10769  0050C2  3205               	rrcf	___lldiv@divisor,f,c
 10770  0050C4  2E0D               	decfsz	___lldiv@counter,f,c
 10771  0050C6  D7E1               	goto	u7070
 10772  0050C8                     l877:
 10773  0050C8  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10774  0050CC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10775  0050D0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10776  0050D4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10777  0050D8  0012               	return		;funcret
 10778  0050DA                     __end_of___lldiv:
 10779                           	opt callstack 0
 10780                           
 10781 ;; *************** function _f_close *****************
 10782 ;; Defined at:
 10783 ;;		line 2861 in file "ff.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;  fp              2   77[COMRAM] PTR struct .
 10786 ;;		 -> Fil(32), 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  res             1   79[COMRAM] enum E93
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      enum E4918
 10791 ;; Registers used:
 10792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10798 ;;      Params:         2       0       0       0       0       0       0       0       0
 10799 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10801 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10802 ;;Total ram usage:        3 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    9
 10805 ;; This function calls:
 10806 ;;		_f_sync
 10807 ;;		_validate
 10808 ;; This function is called by:
 10809 ;;		_main
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           	psect	text28
 10814  005480                     __ptext28:
 10815                           	opt callstack 0
 10816  005480                     _f_close:
 10817                           	opt callstack 21
 10818                           
 10819                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10820                           
 10821                           ;incstack = 0
 10822  005480  C04E  F045         	movff	f_close@fp,f_sync@fp
 10823  005484  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 10824  005488  EC4A  F022         	call	_f_sync	;wreg free
 10825  00548C  6E50               	movwf	f_close@res,c
 10826                           
 10827                           ;ff.c: 2870:  if (res == FR_OK)
 10828  00548E  5050               	movf	f_close@res,w,c
 10829  005490  A4D8               	btfss	status,2,c
 10830  005492  0012               	return	
 10831                           
 10832                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10833  005494  C04E  F002         	movff	f_close@fp,validate@obj
 10834  005498  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 10835  00549C  ECE2  F027         	call	_validate	;wreg free
 10836  0054A0  6E50               	movwf	f_close@res,c
 10837                           
 10838                           ;ff.c: 2874:   if (res == FR_OK) {
 10839  0054A2  5050               	movf	f_close@res,w,c
 10840  0054A4  A4D8               	btfss	status,2,c
 10841  0054A6  0012               	return	
 10842                           
 10843                           ;ff.c: 2882:     fp->fs = 0;
 10844  0054A8  C04E  FFD9         	movff	f_close@fp,fsr2l
 10845  0054AC  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 10846  0054B0  0E00               	movlw	0
 10847  0054B2  6EDE               	movwf	postinc2,c
 10848  0054B4  0E00               	movlw	0
 10849  0054B6  6EDD               	movwf	postdec2,c
 10850  0054B8  0012               	return		;funcret
 10851  0054BA                     __end_of_f_close:
 10852                           	opt callstack 0
 10853                           
 10854 ;; *************** function _f_sync *****************
 10855 ;; Defined at:
 10856 ;;		line 2813 in file "ff.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;  fp              2   68[COMRAM] PTR struct .
 10859 ;;		 -> Fil(32), 
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;  tm              4    0        unsigned long 
 10862 ;;  dir             2   75[COMRAM] PTR unsigned char 
 10863 ;;		 -> NULL(0), FatFs(558), 
 10864 ;;  res             1   74[COMRAM] enum E93
 10865 ;; Return value:  Size  Location     Type
 10866 ;;                  1    wreg      enum E93
 10867 ;; Registers used:
 10868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10869 ;; Tracked objects:
 10870 ;;		On entry : 0/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10874 ;;      Params:         2       0       0       0       0       0       0       0       0
 10875 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10876 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10877 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10878 ;;Total ram usage:        9 bytes
 10879 ;; Hardware stack levels used:    1
 10880 ;; Hardware stack levels required when called:    8
 10881 ;; This function calls:
 10882 ;;		_move_window
 10883 ;;		_st_clust
 10884 ;;		_sync_fs
 10885 ;;		_validate
 10886 ;; This function is called by:
 10887 ;;		_f_close
 10888 ;; This function uses a non-reentrant model
 10889 ;;
 10890                           
 10891                           	psect	text29
 10892  004494                     __ptext29:
 10893                           	opt callstack 0
 10894  004494                     _f_sync:
 10895                           	opt callstack 21
 10896                           
 10897                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 10898                           
 10899                           ;incstack = 0
 10900  004494  C045  F002         	movff	f_sync@fp,validate@obj
 10901  004498  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 10902  00449C  ECE2  F027         	call	_validate	;wreg free
 10903  0044A0  6E4B               	movwf	f_sync@res,c
 10904                           
 10905                           ;ff.c: 2823:  if (res == FR_OK) {
 10906  0044A2  504B               	movf	f_sync@res,w,c
 10907  0044A4  A4D8               	btfss	status,2,c
 10908  0044A6  D095               	goto	l5785
 10909                           
 10910                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 10911  0044A8  EE20 F004          	lfsr	2,4
 10912  0044AC  5045               	movf	f_sync@fp,w,c
 10913  0044AE  26D9               	addwf	fsr2l,f,c
 10914  0044B0  5046               	movf	f_sync@fp+1,w,c
 10915  0044B2  22DA               	addwfc	fsr2h,f,c
 10916  0044B4  AADF               	btfss	indf2,5,c
 10917  0044B6  D08D               	goto	l5785
 10918                           
 10919                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 10920  0044B8  C045  FFD9         	movff	f_sync@fp,fsr2l
 10921  0044BC  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 10922  0044C0  CFDE F030          	movff	postinc2,move_window@fs
 10923  0044C4  CFDD F031          	movff	postdec2,move_window@fs+1
 10924  0044C8  EE20 F01A          	lfsr	2,26
 10925  0044CC  5045               	movf	f_sync@fp,w,c
 10926  0044CE  26D9               	addwf	fsr2l,f,c
 10927  0044D0  5046               	movf	f_sync@fp+1,w,c
 10928  0044D2  22DA               	addwfc	fsr2h,f,c
 10929  0044D4  CFDE F032          	movff	postinc2,move_window@sector
 10930  0044D8  CFDE F033          	movff	postinc2,move_window@sector+1
 10931  0044DC  CFDE F034          	movff	postinc2,move_window@sector+2
 10932  0044E0  CFDE F035          	movff	postinc2,move_window@sector+3
 10933  0044E4  EC8F  F027         	call	_move_window	;wreg free
 10934  0044E8  6E4B               	movwf	f_sync@res,c
 10935                           
 10936                           ;ff.c: 2834:    if (res == FR_OK) {
 10937  0044EA  504B               	movf	f_sync@res,w,c
 10938  0044EC  A4D8               	btfss	status,2,c
 10939  0044EE  D071               	goto	l5785
 10940                           
 10941                           ;ff.c: 2835:     dir = fp->dir_ptr;
 10942  0044F0  EE20 F01E          	lfsr	2,30
 10943  0044F4  5045               	movf	f_sync@fp,w,c
 10944  0044F6  26D9               	addwf	fsr2l,f,c
 10945  0044F8  5046               	movf	f_sync@fp+1,w,c
 10946  0044FA  22DA               	addwfc	fsr2h,f,c
 10947  0044FC  CFDE F04C          	movff	postinc2,f_sync@dir
 10948  004500  CFDD F04D          	movff	postdec2,f_sync@dir+1
 10949                           
 10950                           ;ff.c: 2836:     dir[11] |= 0x20;
 10951  004504  EE20 F00B          	lfsr	2,11
 10952  004508  504C               	movf	f_sync@dir,w,c
 10953  00450A  26D9               	addwf	fsr2l,f,c
 10954  00450C  504D               	movf	f_sync@dir+1,w,c
 10955  00450E  22DA               	addwfc	fsr2h,f,c
 10956  004510  0E00               	movlw	0
 10957  004512  8ADB               	bsf	plusw2,5,c
 10958                           
 10959                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 10960  004514  EE20 F00A          	lfsr	2,10
 10961  004518  5045               	movf	f_sync@fp,w,c
 10962  00451A  26D9               	addwf	fsr2l,f,c
 10963  00451C  5046               	movf	f_sync@fp+1,w,c
 10964  00451E  22DA               	addwfc	fsr2h,f,c
 10965  004520  EE10 F01C          	lfsr	1,28
 10966  004524  504C               	movf	f_sync@dir,w,c
 10967  004526  26E1               	addwf	fsr1l,f,c
 10968  004528  504D               	movf	f_sync@dir+1,w,c
 10969  00452A  22E2               	addwfc	fsr1h,f,c
 10970  00452C  CFDE FFE6          	movff	postinc2,postinc1
 10971  004530  CFDE FFE6          	movff	postinc2,postinc1
 10972  004534  CFDE FFE6          	movff	postinc2,postinc1
 10973  004538  CFDE FFE6          	movff	postinc2,postinc1
 10974                           
 10975                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 10976  00453C  C04C  F001         	movff	f_sync@dir,st_clust@dir
 10977  004540  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 10978  004544  EE20 F00E          	lfsr	2,14
 10979  004548  5045               	movf	f_sync@fp,w,c
 10980  00454A  26D9               	addwf	fsr2l,f,c
 10981  00454C  5046               	movf	f_sync@fp+1,w,c
 10982  00454E  22DA               	addwfc	fsr2h,f,c
 10983  004550  CFDE F003          	movff	postinc2,st_clust@cl
 10984  004554  CFDE F004          	movff	postinc2,st_clust@cl+1
 10985  004558  CFDE F005          	movff	postinc2,st_clust@cl+2
 10986  00455C  CFDE F006          	movff	postinc2,st_clust@cl+3
 10987  004560  ECAB  F02A         	call	_st_clust	;wreg free
 10988                           
 10989                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 10990  004564  EE20 F016          	lfsr	2,22
 10991  004568  504C               	movf	f_sync@dir,w,c
 10992  00456A  26D9               	addwf	fsr2l,f,c
 10993  00456C  504D               	movf	f_sync@dir+1,w,c
 10994  00456E  22DA               	addwfc	fsr2h,f,c
 10995  004570  0E00               	movlw	0
 10996  004572  6EDE               	movwf	postinc2,c
 10997  004574  0E00               	movlw	0
 10998  004576  6EDE               	movwf	postinc2,c
 10999  004578  0E21               	movlw	33
 11000  00457A  6EDE               	movwf	postinc2,c
 11001  00457C  0E46               	movlw	70
 11002  00457E  6EDD               	movwf	postdec2,c
 11003                           
 11004                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11005  004580  EE20 F012          	lfsr	2,18
 11006  004584  504C               	movf	f_sync@dir,w,c
 11007  004586  26D9               	addwf	fsr2l,f,c
 11008  004588  504D               	movf	f_sync@dir+1,w,c
 11009  00458A  22DA               	addwfc	fsr2h,f,c
 11010  00458C  0E00               	movlw	0
 11011  00458E  6EDE               	movwf	postinc2,c
 11012  004590  0E00               	movlw	0
 11013  004592  6EDD               	movwf	postdec2,c
 11014                           
 11015                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11016  004594  EE20 F004          	lfsr	2,4
 11017  004598  5045               	movf	f_sync@fp,w,c
 11018  00459A  26D9               	addwf	fsr2l,f,c
 11019  00459C  5046               	movf	f_sync@fp+1,w,c
 11020  00459E  22DA               	addwfc	fsr2h,f,c
 11021  0045A0  0EDF               	movlw	223
 11022  0045A2  16DF               	andwf	indf2,f,c
 11023                           
 11024                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11025  0045A4  C045  FFD9         	movff	f_sync@fp,fsr2l
 11026  0045A8  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11027  0045AC  EE10 F004          	lfsr	1,4
 11028  0045B0  50DE               	movf	postinc2,w,c
 11029  0045B2  26E1               	addwf	fsr1l,f,c
 11030  0045B4  50DD               	movf	postdec2,w,c
 11031  0045B6  22E2               	addwfc	fsr1h,f,c
 11032  0045B8  0E01               	movlw	1
 11033  0045BA  6EE7               	movwf	indf1,c
 11034                           
 11035                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11036  0045BC  C045  FFD9         	movff	f_sync@fp,fsr2l
 11037  0045C0  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11038  0045C4  CFDE F03A          	movff	postinc2,sync_fs@fs
 11039  0045C8  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11040  0045CC  ECC1  F01E         	call	_sync_fs	;wreg free
 11041  0045D0  6E4B               	movwf	f_sync@res,c
 11042  0045D2                     l5785:
 11043                           
 11044                           ;ff.c: 2849:  return res;
 11045  0045D2  504B               	movf	f_sync@res,w,c
 11046  0045D4  0012               	return		;funcret
 11047  0045D6                     __end_of_f_sync:
 11048                           	opt callstack 0
 11049                           
 11050 ;; *************** function _validate *****************
 11051 ;; Defined at:
 11052 ;;		line 2372 in file "ff.c"
 11053 ;; Parameters:    Size  Location     Type
 11054 ;;  obj             2    1[COMRAM] PTR void 
 11055 ;;		 -> Fil(32), 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  fil             2    7[COMRAM] PTR struct .
 11058 ;;		 -> Fil(32), 
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  1    wreg      enum E93
 11061 ;; Registers used:
 11062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11068 ;;      Params:         2       0       0       0       0       0       0       0       0
 11069 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11070 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11071 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11072 ;;Total ram usage:        8 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    1
 11075 ;; This function calls:
 11076 ;;		_disk_status
 11077 ;; This function is called by:
 11078 ;;		_f_write
 11079 ;;		_f_sync
 11080 ;;		_f_close
 11081 ;;		_f_lseek
 11082 ;;		_f_read
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           	psect	text30
 11087  004FC4                     __ptext30:
 11088                           	opt callstack 0
 11089  004FC4                     _validate:
 11090                           	opt callstack 28
 11091                           
 11092                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11093                           
 11094                           ;incstack = 0
 11095  004FC4  C002  F008         	movff	validate@obj,validate@fil
 11096  004FC8  C003  F009         	movff	validate@obj+1,validate@fil+1
 11097                           
 11098                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11099  004FCC  5008               	movf	validate@fil,w,c
 11100  004FCE  1009               	iorwf	validate@fil+1,w,c
 11101  004FD0  B4D8               	btfsc	status,2,c
 11102  004FD2  D03E               	goto	u7050
 11103  004FD4  C008  FFD9         	movff	validate@fil,fsr2l
 11104  004FD8  C009  FFDA         	movff	validate@fil+1,fsr2h
 11105  004FDC  50DE               	movf	postinc2,w,c
 11106  004FDE  10DE               	iorwf	postinc2,w,c
 11107  004FE0  B4D8               	btfsc	status,2,c
 11108  004FE2  D036               	goto	u7050
 11109  004FE4  C008  FFD9         	movff	validate@fil,fsr2l
 11110  004FE8  C009  FFDA         	movff	validate@fil+1,fsr2h
 11111  004FEC  CFDE F004          	movff	postinc2,??_validate
 11112  004FF0  CFDD F005          	movff	postdec2,??_validate+1
 11113  004FF4  C004  FFD9         	movff	??_validate,fsr2l
 11114  004FF8  C005  FFDA         	movff	??_validate+1,fsr2h
 11115  004FFC  50DF               	movf	indf2,w,c
 11116  004FFE  B4D8               	btfsc	status,2,c
 11117  005000  D027               	goto	u7050
 11118  005002  EE20 F002          	lfsr	2,2
 11119  005006  5008               	movf	validate@fil,w,c
 11120  005008  26D9               	addwf	fsr2l,f,c
 11121  00500A  5009               	movf	validate@fil+1,w,c
 11122  00500C  22DA               	addwfc	fsr2h,f,c
 11123  00500E  C008  FFE1         	movff	validate@fil,fsr1l
 11124  005012  C009  FFE2         	movff	validate@fil+1,fsr1h
 11125  005016  EE00 F006          	lfsr	0,6
 11126  00501A  50E6               	movf	postinc1,w,c
 11127  00501C  26E9               	addwf	fsr0l,f,c
 11128  00501E  50E5               	movf	postdec1,w,c
 11129  005020  22EA               	addwfc	fsr0h,f,c
 11130  005022  50DE               	movf	postinc2,w,c
 11131  005024  18EE               	xorwf	postinc0,w,c
 11132  005026  E114               	bnz	l5355
 11133  005028  50DE               	movf	postinc2,w,c
 11134  00502A  18EE               	xorwf	postinc0,w,c
 11135  00502C  A4D8               	btfss	status,2,c
 11136  00502E  D010               	goto	u7050
 11137  005030  C008  FFD9         	movff	validate@fil,fsr2l
 11138  005034  C009  FFDA         	movff	validate@fil+1,fsr2h
 11139  005038  EE10 F001          	lfsr	1,1
 11140  00503C  50DE               	movf	postinc2,w,c
 11141  00503E  26E1               	addwf	fsr1l,f,c
 11142  005040  50DD               	movf	postdec2,w,c
 11143  005042  22E2               	addwfc	fsr1h,f,c
 11144  005044  50E7               	movf	indf1,w,c
 11145  005046  ECE2  F02A         	call	_disk_status
 11146  00504A  6E04               	movwf	??_validate& (0+255),c
 11147  00504C  A004               	btfss	??_validate,0,c
 11148  00504E  D002               	goto	l5359
 11149  005050                     u7050:
 11150  005050                     l5355:
 11151                           
 11152                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11153  005050  0E09               	movlw	9
 11154  005052  0012               	return	
 11155  005054                     l5359:
 11156                           
 11157                           ;ff.c: 2384:  return FR_OK;
 11158  005054  0E00               	movlw	0
 11159  005056  0012               	return		;funcret
 11160  005058                     __end_of_validate:
 11161                           	opt callstack 0
 11162                           
 11163 ;; *************** function _disk_status *****************
 11164 ;; Defined at:
 11165 ;;		line 356 in file "diskio.c"
 11166 ;; Parameters:    Size  Location     Type
 11167 ;;  pdrv            1    wreg     unsigned char 
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;  pdrv            1    0[COMRAM] unsigned char 
 11170 ;; Return value:  Size  Location     Type
 11171 ;;                  1    wreg      unsigned char 
 11172 ;; Registers used:
 11173 ;;		wreg, status,2
 11174 ;; Tracked objects:
 11175 ;;		On entry : 0/0
 11176 ;;		On exit  : 0/0
 11177 ;;		Unchanged: 0/0
 11178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11179 ;;      Params:         0       0       0       0       0       0       0       0       0
 11180 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11181 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11182 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11183 ;;Total ram usage:        1 bytes
 11184 ;; Hardware stack levels used:    1
 11185 ;; This function calls:
 11186 ;;		Nothing
 11187 ;; This function is called by:
 11188 ;;		_find_volume
 11189 ;;		_validate
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           	psect	text31
 11194  0055C4                     __ptext31:
 11195                           	opt callstack 0
 11196  0055C4                     _disk_status:
 11197                           	opt callstack 28
 11198                           
 11199                           ;incstack = 0
 11200                           ;disk_status@pdrv stored from wreg
 11201  0055C4  6E01               	movwf	disk_status@pdrv,c
 11202                           
 11203                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11204  0055C6  5001               	movf	disk_status@pdrv,w,c
 11205  0055C8  B4D8               	btfsc	status,2,c
 11206  0055CA  D002               	goto	l4585
 11207  0055CC  0E01               	movlw	1
 11208  0055CE  0012               	return	
 11209  0055D0                     l4585:
 11210                           
 11211                           ;diskio.c: 361:  return Stat;
 11212  0055D0  0100               	movlb	0	; () banked
 11213  0055D2  51F7               	movf	_Stat& (0+255),w,b
 11214  0055D4  0012               	return		;funcret
 11215  0055D6                     __end_of_disk_status:
 11216                           	opt callstack 0
 11217                           
 11218 ;; *************** function _sync_fs *****************
 11219 ;; Defined at:
 11220 ;;		line 760 in file "ff.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;  fs              2   57[COMRAM] PTR struct .
 11223 ;;		 -> NULL(0), FatFs(558), 
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;  res             1   67[COMRAM] enum E93
 11226 ;; Return value:  Size  Location     Type
 11227 ;;                  1    wreg      enum E93
 11228 ;; Registers used:
 11229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11230 ;; Tracked objects:
 11231 ;;		On entry : 0/0
 11232 ;;		On exit  : 0/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11235 ;;      Params:         2       0       0       0       0       0       0       0       0
 11236 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11237 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11238 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11239 ;;Total ram usage:       11 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:    7
 11242 ;; This function calls:
 11243 ;;		_disk_ioctl
 11244 ;;		_disk_write
 11245 ;;		_mem_set
 11246 ;;		_sync_window
 11247 ;; This function is called by:
 11248 ;;		_f_sync
 11249 ;; This function uses a non-reentrant model
 11250 ;;
 11251                           
 11252                           	psect	text32
 11253  003D82                     __ptext32:
 11254                           	opt callstack 0
 11255  003D82                     _sync_fs:
 11256                           	opt callstack 21
 11257                           
 11258                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11259                           
 11260                           ;incstack = 0
 11261  003D82  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11262  003D86  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11263  003D8A  EC56  F020         	call	_sync_window	;wreg free
 11264  003D8E  6E44               	movwf	sync_fs@res,c
 11265                           
 11266                           ;ff.c: 768:  if (res == FR_OK) {
 11267  003D90  5044               	movf	sync_fs@res,w,c
 11268  003D92  A4D8               	btfss	status,2,c
 11269  003D94  D0D4               	goto	l302
 11270                           
 11271                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11272  003D96  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11273  003D9A  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11274  003D9E  0E03               	movlw	3
 11275  003DA0  18DE               	xorwf	postinc2,w,c
 11276  003DA2  A4D8               	btfss	status,2,c
 11277  003DA4  D0B8               	goto	l5051
 11278  003DA6  EE20 F005          	lfsr	2,5
 11279  003DAA  503A               	movf	sync_fs@fs,w,c
 11280  003DAC  26D9               	addwf	fsr2l,f,c
 11281  003DAE  503B               	movf	sync_fs@fs+1,w,c
 11282  003DB0  22DA               	addwfc	fsr2h,f,c
 11283  003DB2  04DE               	decf	postinc2,w,c
 11284  003DB4  A4D8               	btfss	status,2,c
 11285  003DB6  D0AF               	goto	l5051
 11286                           
 11287                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11288  003DB8  0E2E               	movlw	46
 11289  003DBA  243A               	addwf	sync_fs@fs,w,c
 11290  003DBC  6E01               	movwf	mem_set@dst,c
 11291  003DBE  0E00               	movlw	0
 11292  003DC0  203B               	addwfc	sync_fs@fs+1,w,c
 11293  003DC2  6E02               	movwf	mem_set@dst+1,c
 11294  003DC4  0E00               	movlw	0
 11295  003DC6  6E04               	movwf	mem_set@val+1,c
 11296  003DC8  0E00               	movlw	0
 11297  003DCA  6E03               	movwf	mem_set@val,c
 11298  003DCC  0E02               	movlw	2
 11299  003DCE  6E06               	movwf	mem_set@cnt+1,c
 11300  003DD0  0E00               	movlw	0
 11301  003DD2  6E05               	movwf	mem_set@cnt,c
 11302  003DD4  EC95  F02A         	call	_mem_set	;wreg free
 11303                           
 11304                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11305  003DD8  EE22 F02C          	lfsr	2,556
 11306  003DDC  503A               	movf	sync_fs@fs,w,c
 11307  003DDE  26D9               	addwf	fsr2l,f,c
 11308  003DE0  503B               	movf	sync_fs@fs+1,w,c
 11309  003DE2  22DA               	addwfc	fsr2h,f,c
 11310  003DE4  0E55               	movlw	85
 11311  003DE6  6EDE               	movwf	postinc2,c
 11312  003DE8  0EAA               	movlw	170
 11313  003DEA  6EDD               	movwf	postdec2,c
 11314                           
 11315                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11316  003DEC  EE20 F02E          	lfsr	2,46
 11317  003DF0  503A               	movf	sync_fs@fs,w,c
 11318  003DF2  26D9               	addwf	fsr2l,f,c
 11319  003DF4  503B               	movf	sync_fs@fs+1,w,c
 11320  003DF6  22DA               	addwfc	fsr2h,f,c
 11321  003DF8  0E52               	movlw	82
 11322  003DFA  6EDE               	movwf	postinc2,c
 11323  003DFC  0E52               	movlw	82
 11324  003DFE  6EDE               	movwf	postinc2,c
 11325  003E00  0E61               	movlw	97
 11326  003E02  6EDE               	movwf	postinc2,c
 11327  003E04  0E41               	movlw	65
 11328  003E06  6EDD               	movwf	postdec2,c
 11329                           
 11330                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11331  003E08  EE22 F012          	lfsr	2,530
 11332  003E0C  503A               	movf	sync_fs@fs,w,c
 11333  003E0E  26D9               	addwf	fsr2l,f,c
 11334  003E10  503B               	movf	sync_fs@fs+1,w,c
 11335  003E12  22DA               	addwfc	fsr2h,f,c
 11336  003E14  0E72               	movlw	114
 11337  003E16  6EDE               	movwf	postinc2,c
 11338  003E18  0E72               	movlw	114
 11339  003E1A  6EDE               	movwf	postinc2,c
 11340  003E1C  0E41               	movlw	65
 11341  003E1E  6EDE               	movwf	postinc2,c
 11342  003E20  0E61               	movlw	97
 11343  003E22  6EDD               	movwf	postdec2,c
 11344                           
 11345                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11346  003E24  EE20 F00E          	lfsr	2,14
 11347  003E28  503A               	movf	sync_fs@fs,w,c
 11348  003E2A  26D9               	addwf	fsr2l,f,c
 11349  003E2C  503B               	movf	sync_fs@fs+1,w,c
 11350  003E2E  22DA               	addwfc	fsr2h,f,c
 11351  003E30  EE12 F016          	lfsr	1,534
 11352  003E34  503A               	movf	sync_fs@fs,w,c
 11353  003E36  26E1               	addwf	fsr1l,f,c
 11354  003E38  503B               	movf	sync_fs@fs+1,w,c
 11355  003E3A  22E2               	addwfc	fsr1h,f,c
 11356  003E3C  CFDE FFE6          	movff	postinc2,postinc1
 11357  003E40  CFDE FFE6          	movff	postinc2,postinc1
 11358  003E44  CFDE FFE6          	movff	postinc2,postinc1
 11359  003E48  CFDE FFE6          	movff	postinc2,postinc1
 11360                           
 11361                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11362  003E4C  EE20 F00A          	lfsr	2,10
 11363  003E50  503A               	movf	sync_fs@fs,w,c
 11364  003E52  26D9               	addwf	fsr2l,f,c
 11365  003E54  503B               	movf	sync_fs@fs+1,w,c
 11366  003E56  22DA               	addwfc	fsr2h,f,c
 11367  003E58  EE12 F01A          	lfsr	1,538
 11368  003E5C  503A               	movf	sync_fs@fs,w,c
 11369  003E5E  26E1               	addwf	fsr1l,f,c
 11370  003E60  503B               	movf	sync_fs@fs+1,w,c
 11371  003E62  22E2               	addwfc	fsr1h,f,c
 11372  003E64  CFDE FFE6          	movff	postinc2,postinc1
 11373  003E68  CFDE FFE6          	movff	postinc2,postinc1
 11374  003E6C  CFDE FFE6          	movff	postinc2,postinc1
 11375  003E70  CFDE FFE6          	movff	postinc2,postinc1
 11376                           
 11377                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11378  003E74  EE20 F01A          	lfsr	2,26
 11379  003E78  503A               	movf	sync_fs@fs,w,c
 11380  003E7A  26D9               	addwf	fsr2l,f,c
 11381  003E7C  503B               	movf	sync_fs@fs+1,w,c
 11382  003E7E  22DA               	addwfc	fsr2h,f,c
 11383  003E80  CFDE F03C          	movff	postinc2,??_sync_fs
 11384  003E84  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11385  003E88  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11386  003E8C  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11387  003E90  0E01               	movlw	1
 11388  003E92  243C               	addwf	??_sync_fs,w,c
 11389  003E94  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11390  003E96  0E00               	movlw	0
 11391  003E98  203D               	addwfc	??_sync_fs+1,w,c
 11392  003E9A  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11393  003E9C  0E00               	movlw	0
 11394  003E9E  203E               	addwfc	??_sync_fs+2,w,c
 11395  003EA0  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11396  003EA2  0E00               	movlw	0
 11397  003EA4  203F               	addwfc	??_sync_fs+3,w,c
 11398  003EA6  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11399  003EA8  EE20 F02A          	lfsr	2,42
 11400  003EAC  503A               	movf	sync_fs@fs,w,c
 11401  003EAE  26D9               	addwf	fsr2l,f,c
 11402  003EB0  503B               	movf	sync_fs@fs+1,w,c
 11403  003EB2  22DA               	addwfc	fsr2h,f,c
 11404  003EB4  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11405  003EB8  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11406  003EBC  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11407  003EC0  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11408                           
 11409                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11410  003EC4  0E2E               	movlw	46
 11411  003EC6  243A               	addwf	sync_fs@fs,w,c
 11412  003EC8  6E11               	movwf	disk_write@buff,c
 11413  003ECA  0E00               	movlw	0
 11414  003ECC  203B               	addwfc	sync_fs@fs+1,w,c
 11415  003ECE  6E12               	movwf	disk_write@buff+1,c
 11416  003ED0  EE20 F02A          	lfsr	2,42
 11417  003ED4  503A               	movf	sync_fs@fs,w,c
 11418  003ED6  26D9               	addwf	fsr2l,f,c
 11419  003ED8  503B               	movf	sync_fs@fs+1,w,c
 11420  003EDA  22DA               	addwfc	fsr2h,f,c
 11421  003EDC  CFDE F013          	movff	postinc2,disk_write@sector
 11422  003EE0  CFDE F014          	movff	postinc2,disk_write@sector+1
 11423  003EE4  CFDE F015          	movff	postinc2,disk_write@sector+2
 11424  003EE8  CFDE F016          	movff	postinc2,disk_write@sector+3
 11425  003EEC  0E00               	movlw	0
 11426  003EEE  6E18               	movwf	disk_write@count+1,c
 11427  003EF0  0E01               	movlw	1
 11428  003EF2  6E17               	movwf	disk_write@count,c
 11429  003EF4  EE20 F001          	lfsr	2,1
 11430  003EF8  503A               	movf	sync_fs@fs,w,c
 11431  003EFA  26D9               	addwf	fsr2l,f,c
 11432  003EFC  503B               	movf	sync_fs@fs+1,w,c
 11433  003EFE  22DA               	addwfc	fsr2h,f,c
 11434  003F00  50DF               	movf	indf2,w,c
 11435  003F02  ECEB  F022         	call	_disk_write
 11436                           
 11437                           ;ff.c: 781:    fs->fsi_flag = 0;
 11438  003F06  EE20 F005          	lfsr	2,5
 11439  003F0A  503A               	movf	sync_fs@fs,w,c
 11440  003F0C  26D9               	addwf	fsr2l,f,c
 11441  003F0E  503B               	movf	sync_fs@fs+1,w,c
 11442  003F10  22DA               	addwfc	fsr2h,f,c
 11443  003F12  0E00               	movlw	0
 11444  003F14  6EDF               	movwf	indf2,c
 11445  003F16                     l5051:
 11446                           
 11447                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11448  003F16  0E00               	movlw	0
 11449  003F18  6E11               	movwf	disk_ioctl@cmd,c
 11450  003F1A  0E00               	movlw	0
 11451  003F1C  6E12               	movwf	disk_ioctl@buff,c
 11452  003F1E  0E00               	movlw	0
 11453  003F20  6E13               	movwf	disk_ioctl@buff+1,c
 11454  003F22  EE20 F001          	lfsr	2,1
 11455  003F26  503A               	movf	sync_fs@fs,w,c
 11456  003F28  26D9               	addwf	fsr2l,f,c
 11457  003F2A  503B               	movf	sync_fs@fs+1,w,c
 11458  003F2C  22DA               	addwfc	fsr2h,f,c
 11459  003F2E  50DF               	movf	indf2,w,c
 11460  003F30  ECA9  F00F         	call	_disk_ioctl
 11461  003F34  0900               	iorlw	0
 11462  003F36  B4D8               	btfsc	status,2,c
 11463  003F38  D002               	goto	l302
 11464                           
 11465                           ;ff.c: 785:    res = FR_DISK_ERR;
 11466  003F3A  0E01               	movlw	1
 11467  003F3C  6E44               	movwf	sync_fs@res,c
 11468  003F3E                     l302:
 11469                           
 11470                           ;ff.c: 788:  return res;
 11471  003F3E  5044               	movf	sync_fs@res,w,c
 11472  003F40  0012               	return		;funcret
 11473  003F42                     __end_of_sync_fs:
 11474                           	opt callstack 0
 11475                           
 11476 ;; *************** function _mem_set *****************
 11477 ;; Defined at:
 11478 ;;		line 524 in file "ff.c"
 11479 ;; Parameters:    Size  Location     Type
 11480 ;;  dst             2    0[COMRAM] PTR void 
 11481 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11482 ;;  val             2    2[COMRAM] int 
 11483 ;;  cnt             2    4[COMRAM] unsigned short 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  d               2    6[COMRAM] PTR unsigned char 
 11486 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11487 ;; Return value:  Size  Location     Type
 11488 ;;                  1    wreg      void 
 11489 ;; Registers used:
 11490 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11496 ;;      Params:         6       0       0       0       0       0       0       0       0
 11497 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11498 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11499 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11500 ;;Total ram usage:        8 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; This function calls:
 11503 ;;		Nothing
 11504 ;; This function is called by:
 11505 ;;		_sync_fs
 11506 ;;		_dir_next
 11507 ;;		_dir_register
 11508 ;;		_create_name
 11509 ;; This function uses a non-reentrant model
 11510 ;;
 11511                           
 11512                           	psect	text33
 11513  00552A                     __ptext33:
 11514                           	opt callstack 0
 11515  00552A                     _mem_set:
 11516                           	opt callstack 26
 11517                           
 11518                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11519                           
 11520                           ;incstack = 0
 11521  00552A  C001  F007         	movff	mem_set@dst,mem_set@d
 11522  00552E  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11523                           
 11524                           ;ff.c: 527:  while (cnt--)
 11525  005532  D008               	goto	l4483
 11526  005534                     l4479:
 11527                           
 11528                           ;ff.c: 528:   *d++ = (BYTE)val;
 11529  005534  C007  FFD9         	movff	mem_set@d,fsr2l
 11530  005538  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11531  00553C  C003  FFDF         	movff	mem_set@val,indf2
 11532  005540  4A07               	infsnz	mem_set@d,f,c
 11533  005542  2A08               	incf	mem_set@d+1,f,c
 11534  005544                     l4483:
 11535                           
 11536                           ;ff.c: 527:  while (cnt--)
 11537  005544  0605               	decf	mem_set@cnt,f,c
 11538  005546  A0D8               	btfss	status,0,c
 11539  005548  0606               	decf	mem_set@cnt+1,f,c
 11540  00554A  2805               	incf	mem_set@cnt,w,c
 11541  00554C  E1F3               	bnz	l4479
 11542  00554E  2806               	incf	mem_set@cnt+1,w,c
 11543  005550  B4D8               	btfsc	status,2,c
 11544  005552  0012               	return	
 11545  005554  D7EF               	goto	l4479
 11546  005556                     __end_of_mem_set:
 11547                           	opt callstack 0
 11548                           
 11549 ;; *************** function _disk_ioctl *****************
 11550 ;; Defined at:
 11551 ;;		line 446 in file "diskio.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;  pdrv            1    wreg     unsigned char 
 11554 ;;  cmd             1   16[COMRAM] unsigned char 
 11555 ;;  buff            2   17[COMRAM] PTR void 
 11556 ;;		 -> NULL(0), 
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;  pdrv            1   48[COMRAM] unsigned char 
 11559 ;;  csd            16   32[COMRAM] unsigned char [16]
 11560 ;;  csize           4   49[COMRAM] unsigned long 
 11561 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11562 ;;		 -> NULL(0), 
 11563 ;;  n               1   54[COMRAM] unsigned char 
 11564 ;;  res             1   53[COMRAM] enum E43
 11565 ;; Return value:  Size  Location     Type
 11566 ;;                  1    wreg      enum E43
 11567 ;; Registers used:
 11568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11569 ;; Tracked objects:
 11570 ;;		On entry : 0/0
 11571 ;;		On exit  : 0/0
 11572 ;;		Unchanged: 0/0
 11573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11574 ;;      Params:         3       0       0       0       0       0       0       0       0
 11575 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11576 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11577 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11578 ;;Total ram usage:       41 bytes
 11579 ;; Hardware stack levels used:    1
 11580 ;; Hardware stack levels required when called:    5
 11581 ;; This function calls:
 11582 ;;		_SPI1_Exchange8bit
 11583 ;;		___wmul
 11584 ;;		_deselect
 11585 ;;		_rcvr_datablock
 11586 ;;		_select
 11587 ;;		_send_cmd
 11588 ;; This function is called by:
 11589 ;;		_sync_fs
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593                           	psect	text34
 11594  001F52                     __ptext34:
 11595                           	opt callstack 0
 11596  001F52                     _disk_ioctl:
 11597                           	opt callstack 22
 11598                           
 11599                           ;incstack = 0
 11600                           ;disk_ioctl@pdrv stored from wreg
 11601  001F52  6E31               	movwf	disk_ioctl@pdrv,c
 11602                           
 11603                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11604  001F54  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11605  001F58  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11606                           
 11607                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11608  001F5C  5031               	movf	disk_ioctl@pdrv,w,c
 11609  001F5E  B4D8               	btfsc	status,2,c
 11610  001F60  D002               	goto	l4597
 11611  001F62  0E04               	movlw	4
 11612  001F64  0012               	return	
 11613  001F66                     l4597:
 11614                           
 11615                           ;diskio.c: 459:  res = RES_ERROR;
 11616  001F66  0E01               	movlw	1
 11617  001F68  6E36               	movwf	disk_ioctl@res,c
 11618                           
 11619                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11620  001F6A  0100               	movlb	0	; () banked
 11621  001F6C  A1F7               	btfss	_Stat& (0+255),0,b
 11622  001F6E  D21B               	goto	l4697
 11623                           
 11624                           ; BSR set to: 0
 11625  001F70  0E03               	movlw	3
 11626  001F72  0012               	return	
 11627  001F74                     l4605:
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11631  001F74  ECD3  F02A         	call	_select	;wreg free
 11632  001F78  0900               	iorlw	0
 11633  001F7A  B4D8               	btfsc	status,2,c
 11634  001F7C  D235               	goto	l4699
 11635  001F7E                     u5550:
 11636  001F7E  0E00               	movlw	0
 11637  001F80  D210               	goto	L13
 11638  001F82                     l4609:
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11642  001F82  0E00               	movlw	0
 11643  001F84  6E0B               	movwf	send_cmd@arg,c
 11644  001F86  0E00               	movlw	0
 11645  001F88  6E0C               	movwf	send_cmd@arg+1,c
 11646  001F8A  0E00               	movlw	0
 11647  001F8C  6E0D               	movwf	send_cmd@arg+2,c
 11648  001F8E  0E00               	movlw	0
 11649  001F90  6E0E               	movwf	send_cmd@arg+3,c
 11650  001F92  0E09               	movlw	9
 11651  001F94  ECE3  F029         	call	_send_cmd
 11652  001F98  0900               	iorlw	0
 11653  001F9A  A4D8               	btfss	status,2,c
 11654  001F9C  D225               	goto	l4699
 11655  001F9E  0E21               	movlw	low disk_ioctl@csd
 11656  001FA0  6E02               	movwf	rcvr_datablock@buff,c
 11657  001FA2  0E00               	movlw	high disk_ioctl@csd
 11658  001FA4  6E03               	movwf	rcvr_datablock@buff+1,c
 11659  001FA6  0E00               	movlw	0
 11660  001FA8  6E05               	movwf	rcvr_datablock@btr+1,c
 11661  001FAA  0E10               	movlw	16
 11662  001FAC  6E04               	movwf	rcvr_datablock@btr,c
 11663  001FAE  EC2B  F029         	call	_rcvr_datablock	;wreg free
 11664  001FB2  0900               	iorlw	0
 11665  001FB4  B4D8               	btfsc	status,2,c
 11666  001FB6  D218               	goto	l4699
 11667                           
 11668                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11669  001FB8  4421               	rlncf	disk_ioctl@csd,w,c
 11670  001FBA  46E8               	rlncf	wreg,f,c
 11671  001FBC  0B03               	andlw	3
 11672  001FBE  06E8               	decf	wreg,f,c
 11673  001FC0  A4D8               	btfss	status,2,c
 11674  001FC2  D04E               	goto	l4619
 11675                           
 11676                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11677  001FC4  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11678  001FC8  0E3F               	movlw	63
 11679  001FCA  1614               	andwf	??_disk_ioctl,f,c
 11680  001FCC  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11681  001FD0  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11682  001FD2  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11683  001FD4  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11684  001FD6  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11685  001FDA  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11686  001FDE  6A16               	clrf	??_disk_ioctl+2,c
 11687  001FE0  6A15               	clrf	??_disk_ioctl+1,c
 11688  001FE2  5029               	movf	disk_ioctl@csd+8,w,c
 11689  001FE4  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11690  001FE6  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11691  001FE8  502A               	movf	disk_ioctl@csd+9,w,c
 11692  001FEA  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11693  001FEC  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11694  001FEE  5019               	movf	??_disk_ioctl+5,w,c
 11695  001FF0  261B               	addwf	??_disk_ioctl+7,f,c
 11696  001FF2  501A               	movf	??_disk_ioctl+6,w,c
 11697  001FF4  221C               	addwfc	??_disk_ioctl+8,f,c
 11698  001FF6  501B               	movf	??_disk_ioctl+7,w,c
 11699  001FF8  2415               	addwf	??_disk_ioctl+1,w,c
 11700  001FFA  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11701  001FFC  501C               	movf	??_disk_ioctl+8,w,c
 11702  001FFE  2016               	addwfc	??_disk_ioctl+2,w,c
 11703  002000  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11704  002002  0E00               	movlw	0
 11705  002004  2017               	addwfc	??_disk_ioctl+3,w,c
 11706  002006  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11707  002008  0E00               	movlw	0
 11708  00200A  2018               	addwfc	??_disk_ioctl+4,w,c
 11709  00200C  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11710  00200E  0E01               	movlw	1
 11711  002010  241D               	addwf	??_disk_ioctl+9,w,c
 11712  002012  6E32               	movwf	disk_ioctl@csize,c
 11713  002014  0E00               	movlw	0
 11714  002016  201E               	addwfc	??_disk_ioctl+10,w,c
 11715  002018  6E33               	movwf	disk_ioctl@csize+1,c
 11716  00201A  0E00               	movlw	0
 11717  00201C  201F               	addwfc	??_disk_ioctl+11,w,c
 11718  00201E  6E34               	movwf	disk_ioctl@csize+2,c
 11719  002020  0E00               	movlw	0
 11720  002022  2020               	addwfc	??_disk_ioctl+12,w,c
 11721  002024  6E35               	movwf	disk_ioctl@csize+3,c
 11722                           
 11723                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11724  002026  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11725  00202A  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11726  00202E  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11727  002032  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11728  002036  0E0A               	movlw	10
 11729  002038                     u5595:
 11730  002038  90D8               	bcf	status,0,c
 11731  00203A  3614               	rlcf	??_disk_ioctl,f,c
 11732  00203C  3615               	rlcf	??_disk_ioctl+1,f,c
 11733  00203E  3616               	rlcf	??_disk_ioctl+2,f,c
 11734  002040  3617               	rlcf	??_disk_ioctl+3,f,c
 11735  002042  2EE8               	decfsz	wreg,f,c
 11736  002044  D7F9               	goto	u5595
 11737  002046  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11738  00204A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11739  00204E  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11740  002052  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11741  002056  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11742  00205A  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11743                           
 11744                           ;diskio.c: 473:    } else {
 11745  00205E  D78F               	goto	u5550
 11746  002060                     l4619:
 11747                           
 11748                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11749  002060  6A14               	clrf	??_disk_ioctl& (0+255),c
 11750  002062  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11751  002064  D001               	bra	u5605
 11752  002066  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11753  002068                     u5605:
 11754  002068  0E01               	movlw	1
 11755  00206A  1614               	andwf	??_disk_ioctl,f,c
 11756  00206C  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11757  002070  0E0F               	movlw	15
 11758  002072  1615               	andwf	??_disk_ioctl+1,f,c
 11759  002074  502A               	movf	disk_ioctl@csd+9,w,c
 11760  002076  0B03               	andlw	3
 11761  002078  0D02               	mullw	2
 11762  00207A  50F3               	movf	prodl,w,c
 11763  00207C  2415               	addwf	??_disk_ioctl+1,w,c
 11764  00207E  2414               	addwf	??_disk_ioctl,w,c
 11765  002080  0F02               	addlw	2
 11766  002082  6E37               	movwf	disk_ioctl@n,c
 11767                           
 11768                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11769  002084  5027               	movf	disk_ioctl@csd+6,w,c
 11770  002086  0B03               	andlw	3
 11771  002088  6E14               	movwf	??_disk_ioctl& (0+255),c
 11772  00208A  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 11773  00208C  0E0A               	movlw	10
 11774  00208E                     u5615:
 11775  00208E  90D8               	bcf	status,0,c
 11776  002090  3614               	rlcf	??_disk_ioctl,f,c
 11777  002092  3615               	rlcf	??_disk_ioctl+1,f,c
 11778  002094  2EE8               	decfsz	wreg,f,c
 11779  002096  D7FB               	goto	u5615
 11780  002098  5028               	movf	disk_ioctl@csd+7,w,c
 11781  00209A  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11782  00209C  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11783  00209E  90D8               	bcf	status,0,c
 11784  0020A0  3616               	rlcf	??_disk_ioctl+2,f,c
 11785  0020A2  3617               	rlcf	??_disk_ioctl+3,f,c
 11786  0020A4  90D8               	bcf	status,0,c
 11787  0020A6  3616               	rlcf	??_disk_ioctl+2,f,c
 11788  0020A8  3617               	rlcf	??_disk_ioctl+3,f,c
 11789  0020AA  4429               	rlncf	disk_ioctl@csd+8,w,c
 11790  0020AC  46E8               	rlncf	wreg,f,c
 11791  0020AE  0B03               	andlw	3
 11792  0020B0  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11793  0020B2  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11794  0020B4  5016               	movf	??_disk_ioctl+2,w,c
 11795  0020B6  2618               	addwf	??_disk_ioctl+4,f,c
 11796  0020B8  5017               	movf	??_disk_ioctl+3,w,c
 11797  0020BA  2219               	addwfc	??_disk_ioctl+5,f,c
 11798  0020BC  5014               	movf	??_disk_ioctl,w,c
 11799  0020BE  2618               	addwf	??_disk_ioctl+4,f,c
 11800  0020C0  5015               	movf	??_disk_ioctl+1,w,c
 11801  0020C2  2219               	addwfc	??_disk_ioctl+5,f,c
 11802  0020C4  0E01               	movlw	1
 11803  0020C6  2618               	addwf	??_disk_ioctl+4,f,c
 11804  0020C8  0E00               	movlw	0
 11805  0020CA  2219               	addwfc	??_disk_ioctl+5,f,c
 11806  0020CC  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 11807  0020D0  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 11808  0020D4  6A34               	clrf	disk_ioctl@csize+2,c
 11809  0020D6  6A35               	clrf	disk_ioctl@csize+3,c
 11810                           
 11811                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 11812  0020D8  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11813  0020DC  0EF7               	movlw	-9
 11814  0020DE  2614               	addwf	??_disk_ioctl,f,c
 11815  0020E0  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11816  0020E4  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11817  0020E8  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11818  0020EC  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 11819  0020F0  2A14               	incf	??_disk_ioctl,f,c
 11820  0020F2  D005               	goto	u5620
 11821  0020F4                     u5625:
 11822  0020F4  90D8               	bcf	status,0,c
 11823  0020F6  3615               	rlcf	??_disk_ioctl+1,f,c
 11824  0020F8  3616               	rlcf	??_disk_ioctl+2,f,c
 11825  0020FA  3617               	rlcf	??_disk_ioctl+3,f,c
 11826  0020FC  3618               	rlcf	??_disk_ioctl+4,f,c
 11827  0020FE                     u5620:
 11828  0020FE  2E14               	decfsz	??_disk_ioctl,f,c
 11829  002100  D7F9               	goto	u5625
 11830  002102  D03D               	goto	L15
 11831  002104                     l215:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;diskio.c: 483:   if (CardType & 0x04) {
 11835  002104  A5D6               	btfss	_CardType& (0+255),2,b
 11836  002106  D048               	goto	l4645
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 11840  002108  0E00               	movlw	0
 11841  00210A  6E0B               	movwf	send_cmd@arg,c
 11842  00210C  0E00               	movlw	0
 11843  00210E  6E0C               	movwf	send_cmd@arg+1,c
 11844  002110  0E00               	movlw	0
 11845  002112  6E0D               	movwf	send_cmd@arg+2,c
 11846  002114  0E00               	movlw	0
 11847  002116  6E0E               	movwf	send_cmd@arg+3,c
 11848  002118  0E8D               	movlw	141
 11849  00211A  ECE3  F029         	call	_send_cmd
 11850  00211E  0900               	iorlw	0
 11851  002120  A4D8               	btfss	status,2,c
 11852  002122  D162               	goto	l4699
 11853                           
 11854                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 11855  002124  0EFF               	movlw	255
 11856  002126  ECF4  F02A         	call	_SPI1_Exchange8bit
 11857                           
 11858                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 11859  00212A  0E21               	movlw	low disk_ioctl@csd
 11860  00212C  6E02               	movwf	rcvr_datablock@buff,c
 11861  00212E  0E00               	movlw	high disk_ioctl@csd
 11862  002130  6E03               	movwf	rcvr_datablock@buff+1,c
 11863  002132  0E00               	movlw	0
 11864  002134  6E05               	movwf	rcvr_datablock@btr+1,c
 11865  002136  0E10               	movlw	16
 11866  002138  6E04               	movwf	rcvr_datablock@btr,c
 11867  00213A  EC2B  F029         	call	_rcvr_datablock	;wreg free
 11868  00213E  0900               	iorlw	0
 11869  002140  B4D8               	btfsc	status,2,c
 11870  002142  D152               	goto	l4699
 11871                           
 11872                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 11873  002144  0E30               	movlw	48
 11874  002146  6E37               	movwf	disk_ioctl@n,c
 11875  002148  D004               	goto	l4639
 11876  00214A                     l4635:
 11877  00214A  0EFF               	movlw	255
 11878  00214C  ECF4  F02A         	call	_SPI1_Exchange8bit
 11879  002150  0637               	decf	disk_ioctl@n,f,c
 11880  002152                     l4639:
 11881  002152  5037               	movf	disk_ioctl@n,w,c
 11882  002154  A4D8               	btfss	status,2,c
 11883  002156  D7F9               	goto	l4635
 11884                           
 11885                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 11886  002158  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 11887  00215C  3A14               	swapf	??_disk_ioctl,f,c
 11888  00215E  0E0F               	movlw	15
 11889  002160  1614               	andwf	??_disk_ioctl,f,c
 11890  002162  0E10               	movlw	16
 11891  002164  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11892  002166  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11893  002168  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11894  00216A  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11895  00216C  2A14               	incf	??_disk_ioctl,f,c
 11896  00216E  D005               	goto	u5670
 11897  002170                     u5675:
 11898  002170  90D8               	bcf	status,0,c
 11899  002172  3615               	rlcf	??_disk_ioctl+1,f,c
 11900  002174  3616               	rlcf	??_disk_ioctl+2,f,c
 11901  002176  3617               	rlcf	??_disk_ioctl+3,f,c
 11902  002178  3618               	rlcf	??_disk_ioctl+4,f,c
 11903  00217A                     u5670:
 11904  00217A  2E14               	decfsz	??_disk_ioctl,f,c
 11905  00217C  D7F9               	goto	u5675
 11906  00217E                     L15:
 11907  00217E  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11908  002182  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11909  002186  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11910  00218A  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11911  00218E  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11912  002192  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 11913  002196  D6F3               	goto	u5550
 11914  002198                     l4645:
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11918  002198  0E00               	movlw	0
 11919  00219A  6E0B               	movwf	send_cmd@arg,c
 11920  00219C  0E00               	movlw	0
 11921  00219E  6E0C               	movwf	send_cmd@arg+1,c
 11922  0021A0  0E00               	movlw	0
 11923  0021A2  6E0D               	movwf	send_cmd@arg+2,c
 11924  0021A4  0E00               	movlw	0
 11925  0021A6  6E0E               	movwf	send_cmd@arg+3,c
 11926  0021A8  0E09               	movlw	9
 11927  0021AA  ECE3  F029         	call	_send_cmd
 11928  0021AE  0900               	iorlw	0
 11929  0021B0  A4D8               	btfss	status,2,c
 11930  0021B2  D11A               	goto	l4699
 11931  0021B4  0E21               	movlw	low disk_ioctl@csd
 11932  0021B6  6E02               	movwf	rcvr_datablock@buff,c
 11933  0021B8  0E00               	movlw	high disk_ioctl@csd
 11934  0021BA  6E03               	movwf	rcvr_datablock@buff+1,c
 11935  0021BC  0E00               	movlw	0
 11936  0021BE  6E05               	movwf	rcvr_datablock@btr+1,c
 11937  0021C0  0E10               	movlw	16
 11938  0021C2  6E04               	movwf	rcvr_datablock@btr,c
 11939  0021C4  EC2B  F029         	call	_rcvr_datablock	;wreg free
 11940  0021C8  0900               	iorlw	0
 11941  0021CA  B4D8               	btfsc	status,2,c
 11942  0021CC  D10D               	goto	l4699
 11943                           
 11944                           ;diskio.c: 494:     if (CardType & 0x02) {
 11945  0021CE  0100               	movlb	0	; () banked
 11946  0021D0  A3D6               	btfss	_CardType& (0+255),1,b
 11947  0021D2  D02A               	goto	l4653
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 11951  0021D4  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 11952  0021D8  0E06               	movlw	6
 11953  0021DA  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11954  0021DC                     u5715:
 11955  0021DC  90D8               	bcf	status,0,c
 11956  0021DE  3214               	rrcf	??_disk_ioctl,f,c
 11957  0021E0  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 11958  0021E2  D7FC               	goto	u5715
 11959  0021E4  0EFF               	movlw	-1
 11960  0021E6  2614               	addwf	??_disk_ioctl,f,c
 11961  0021E8  502B               	movf	disk_ioctl@csd+10,w,c
 11962  0021EA  0B3F               	andlw	63
 11963  0021EC  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11964  0021EE  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11965  0021F0  90D8               	bcf	status,0,c
 11966  0021F2  3616               	rlcf	??_disk_ioctl+2,f,c
 11967  0021F4  3617               	rlcf	??_disk_ioctl+3,f,c
 11968  0021F6  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11969  0021F8  AE2C               	btfss	disk_ioctl@csd+11,7,c
 11970  0021FA  D001               	bra	u5725
 11971  0021FC  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 11972  0021FE                     u5725:
 11973  0021FE  0E01               	movlw	1
 11974  002200  1618               	andwf	??_disk_ioctl+4,f,c
 11975  002202  5018               	movf	??_disk_ioctl+4,w,c
 11976  002204  2616               	addwf	??_disk_ioctl+2,f,c
 11977  002206  0E00               	movlw	0
 11978  002208  2217               	addwfc	??_disk_ioctl+3,f,c
 11979  00220A  0E01               	movlw	1
 11980  00220C  2616               	addwf	??_disk_ioctl+2,f,c
 11981  00220E  0E00               	movlw	0
 11982  002210  2217               	addwfc	??_disk_ioctl+3,f,c
 11983  002212  2A14               	incf	??_disk_ioctl,f,c
 11984  002214  D003               	goto	u5734
 11985  002216                     u5735:
 11986  002216  90D8               	bcf	status,0,c
 11987  002218  3616               	rlcf	??_disk_ioctl+2,f,c
 11988  00221A  3617               	rlcf	??_disk_ioctl+3,f,c
 11989  00221C                     u5734:
 11990  00221C  2E14               	decfsz	??_disk_ioctl,f,c
 11991  00221E  D7FB               	goto	u5735
 11992  002220  5016               	movf	??_disk_ioctl+2,w,c
 11993  002222  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 11994  002224  5017               	movf	??_disk_ioctl+3,w,c
 11995  002226  D034               	goto	L16
 11996  002228                     l4653:
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12000  002228  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12001  00222C  90D8               	bcf	status,0,c
 12002  00222E  3214               	rrcf	??_disk_ioctl,f,c
 12003  002230  90D8               	bcf	status,0,c
 12004  002232  3214               	rrcf	??_disk_ioctl,f,c
 12005  002234  0E1F               	movlw	31
 12006  002236  1614               	andwf	??_disk_ioctl,f,c
 12007  002238  0E01               	movlw	1
 12008  00223A  2414               	addwf	??_disk_ioctl,w,c
 12009  00223C  6E01               	movwf	___wmul@multiplier,c
 12010  00223E  6A02               	clrf	___wmul@multiplier+1,c
 12011  002240  0E00               	movlw	0
 12012  002242  2202               	addwfc	___wmul@multiplier+1,f,c
 12013  002244  502C               	movf	disk_ioctl@csd+11,w,c
 12014  002246  0B03               	andlw	3
 12015  002248  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12016  00224A  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12017  00224C  90D8               	bcf	status,0,c
 12018  00224E  3615               	rlcf	??_disk_ioctl+1,f,c
 12019  002250  3616               	rlcf	??_disk_ioctl+2,f,c
 12020  002252  90D8               	bcf	status,0,c
 12021  002254  3615               	rlcf	??_disk_ioctl+1,f,c
 12022  002256  3616               	rlcf	??_disk_ioctl+2,f,c
 12023  002258  90D8               	bcf	status,0,c
 12024  00225A  3615               	rlcf	??_disk_ioctl+1,f,c
 12025  00225C  3616               	rlcf	??_disk_ioctl+2,f,c
 12026  00225E  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12027  002262  0E05               	movlw	5
 12028  002264  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12029  002266                     u5745:
 12030  002266  90D8               	bcf	status,0,c
 12031  002268  3217               	rrcf	??_disk_ioctl+3,f,c
 12032  00226A  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12033  00226C  D7FC               	goto	u5745
 12034  00226E  0E07               	movlw	7
 12035  002270  1617               	andwf	??_disk_ioctl+3,f,c
 12036  002272  5017               	movf	??_disk_ioctl+3,w,c
 12037  002274  2615               	addwf	??_disk_ioctl+1,f,c
 12038  002276  0E00               	movlw	0
 12039  002278  2216               	addwfc	??_disk_ioctl+2,f,c
 12040  00227A  0E01               	movlw	1
 12041  00227C  2415               	addwf	??_disk_ioctl+1,w,c
 12042  00227E  6E03               	movwf	___wmul@multiplicand,c
 12043  002280  0E00               	movlw	0
 12044  002282  2016               	addwfc	??_disk_ioctl+2,w,c
 12045  002284  6E04               	movwf	___wmul@multiplicand+1,c
 12046  002286  ECC0  F02A         	call	___wmul	;wreg free
 12047  00228A  5001               	movf	?___wmul,w,c
 12048  00228C  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12049  00228E  5002               	movf	?___wmul+1,w,c
 12050  002290                     L16:
 12051  002290  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12052  002292  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12053  002294  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12054  002296  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12055  00229A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12056  00229E  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12057  0022A2  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12058  0022A6  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12059  0022AA  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12060  0022AE  D667               	goto	u5550
 12061  0022B0                     l4657:
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;diskio.c: 507:   *ptr = CardType;
 12065  0022B0  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12066  0022B4  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12067  0022B8  C0D6  FFDF         	movff	_CardType,indf2
 12068  0022BC  D660               	goto	u5550
 12069  0022BE                     l4661:
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12073  0022BE  0E00               	movlw	0
 12074  0022C0  6E0B               	movwf	send_cmd@arg,c
 12075  0022C2  0E00               	movlw	0
 12076  0022C4  6E0C               	movwf	send_cmd@arg+1,c
 12077  0022C6  0E00               	movlw	0
 12078  0022C8  6E0D               	movwf	send_cmd@arg+2,c
 12079  0022CA  0E00               	movlw	0
 12080  0022CC  6E0E               	movwf	send_cmd@arg+3,c
 12081  0022CE  0E09               	movlw	9
 12082  0022D0  ECE3  F029         	call	_send_cmd
 12083  0022D4  0900               	iorlw	0
 12084  0022D6  A4D8               	btfss	status,2,c
 12085  0022D8  D087               	goto	l4699
 12086  0022DA  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12087  0022DE  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12088  0022E2  0E00               	movlw	0
 12089  0022E4  6E05               	movwf	rcvr_datablock@btr+1,c
 12090  0022E6  0E10               	movlw	16
 12091  0022E8  6E04               	movwf	rcvr_datablock@btr,c
 12092  0022EA  EC2B  F029         	call	_rcvr_datablock	;wreg free
 12093  0022EE                     L14:
 12094  0022EE  0900               	iorlw	0
 12095  0022F0  A4D8               	btfss	status,2,c
 12096  0022F2  D645               	goto	u5550
 12097  0022F4  D079               	goto	l4699
 12098  0022F6                     l4667:
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12102  0022F6  0E00               	movlw	0
 12103  0022F8  6E0B               	movwf	send_cmd@arg,c
 12104  0022FA  0E00               	movlw	0
 12105  0022FC  6E0C               	movwf	send_cmd@arg+1,c
 12106  0022FE  0E00               	movlw	0
 12107  002300  6E0D               	movwf	send_cmd@arg+2,c
 12108  002302  0E00               	movlw	0
 12109  002304  6E0E               	movwf	send_cmd@arg+3,c
 12110  002306  0E0A               	movlw	10
 12111  002308  ECE3  F029         	call	_send_cmd
 12112  00230C  0900               	iorlw	0
 12113  00230E  A4D8               	btfss	status,2,c
 12114  002310  D06B               	goto	l4699
 12115  002312  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12116  002316  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12117  00231A  0E00               	movlw	0
 12118  00231C  6E05               	movwf	rcvr_datablock@btr+1,c
 12119  00231E  0E10               	movlw	16
 12120  002320  6E04               	movwf	rcvr_datablock@btr,c
 12121  002322  EC2B  F029         	call	_rcvr_datablock	;wreg free
 12122  002326  D7E3               	goto	L14
 12123  002328                     l4673:
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12127  002328  0E00               	movlw	0
 12128  00232A  6E0B               	movwf	send_cmd@arg,c
 12129  00232C  0E00               	movlw	0
 12130  00232E  6E0C               	movwf	send_cmd@arg+1,c
 12131  002330  0E00               	movlw	0
 12132  002332  6E0D               	movwf	send_cmd@arg+2,c
 12133  002334  0E00               	movlw	0
 12134  002336  6E0E               	movwf	send_cmd@arg+3,c
 12135  002338  0E3A               	movlw	58
 12136  00233A  ECE3  F029         	call	_send_cmd
 12137  00233E  0900               	iorlw	0
 12138  002340  A4D8               	btfss	status,2,c
 12139  002342  D052               	goto	l4699
 12140                           
 12141                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12142  002344  0E04               	movlw	4
 12143  002346  6E37               	movwf	disk_ioctl@n,c
 12144  002348  D00B               	goto	l4683
 12145  00234A                     l4677:
 12146  00234A  0EFF               	movlw	255
 12147  00234C  ECF4  F02A         	call	_SPI1_Exchange8bit
 12148  002350  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12149  002354  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12150  002358  6EDF               	movwf	indf2,c
 12151  00235A  4A38               	infsnz	disk_ioctl@ptr,f,c
 12152  00235C  2A39               	incf	disk_ioctl@ptr+1,f,c
 12153  00235E  0637               	decf	disk_ioctl@n,f,c
 12154  002360                     l4683:
 12155  002360  5037               	movf	disk_ioctl@n,w,c
 12156  002362  B4D8               	btfsc	status,2,c
 12157  002364  D60C               	goto	u5550
 12158  002366  D7F1               	goto	l4677
 12159  002368                     l4687:
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12163  002368  0E00               	movlw	0
 12164  00236A  6E0B               	movwf	send_cmd@arg,c
 12165  00236C  0E00               	movlw	0
 12166  00236E  6E0C               	movwf	send_cmd@arg+1,c
 12167  002370  0E00               	movlw	0
 12168  002372  6E0D               	movwf	send_cmd@arg+2,c
 12169  002374  0E00               	movlw	0
 12170  002376  6E0E               	movwf	send_cmd@arg+3,c
 12171  002378  0E8D               	movlw	141
 12172  00237A  ECE3  F029         	call	_send_cmd
 12173  00237E  0900               	iorlw	0
 12174  002380  A4D8               	btfss	status,2,c
 12175  002382  D032               	goto	l4699
 12176                           
 12177                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12178  002384  0EFF               	movlw	255
 12179  002386  ECF4  F02A         	call	_SPI1_Exchange8bit
 12180                           
 12181                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12182  00238A  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12183  00238E  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12184  002392  0E00               	movlw	0
 12185  002394  6E05               	movwf	rcvr_datablock@btr+1,c
 12186  002396  0E40               	movlw	64
 12187  002398  6E04               	movwf	rcvr_datablock@btr,c
 12188  00239A  EC2B  F029         	call	_rcvr_datablock	;wreg free
 12189  00239E  D7A7               	goto	L14
 12190  0023A0                     l4695:
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;diskio.c: 539:   res = RES_PARERR;
 12194  0023A0  0E04               	movlw	4
 12195  0023A2                     L13:
 12196  0023A2  6E36               	movwf	disk_ioctl@res,c
 12197                           
 12198                           ;diskio.c: 540:  }
 12199  0023A4  D021               	goto	l4699
 12200  0023A6                     l4697:
 12201                           
 12202                           ; BSR set to: 0
 12203  0023A6  5011               	movf	disk_ioctl@cmd,w,c
 12204  0023A8  6E14               	movwf	??_disk_ioctl& (0+255),c
 12205  0023AA  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12206                           
 12207                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12208                           ; Switch size 1, requested type "simple"
 12209                           ; Number of cases is 1, Range of values is 0 to 0
 12210                           ; switch strategies available:
 12211                           ; Name         Instructions Cycles
 12212                           ; simple_byte            4     3 (average)
 12213                           ;	Chosen strategy is simple_byte
 12214  0023AC  5015               	movf	??_disk_ioctl+1,w,c
 12215  0023AE  0A00               	xorlw	0	; case 0
 12216  0023B0  A4D8               	btfss	status,2,c
 12217  0023B2  D7F6               	goto	l4695
 12218                           
 12219                           ; BSR set to: 0
 12220                           ; Switch size 1, requested type "simple"
 12221                           ; Number of cases is 8, Range of values is 0 to 14
 12222                           ; switch strategies available:
 12223                           ; Name         Instructions Cycles
 12224                           ; simple_byte           25    13 (average)
 12225                           ;	Chosen strategy is simple_byte
 12226  0023B4  5014               	movf	??_disk_ioctl,w,c
 12227  0023B6  0A00               	xorlw	0	; case 0
 12228  0023B8  B4D8               	btfsc	status,2,c
 12229  0023BA  D5DC               	goto	l4605
 12230  0023BC  0A01               	xorlw	1	; case 1
 12231  0023BE  B4D8               	btfsc	status,2,c
 12232  0023C0  D5E0               	goto	l4609
 12233  0023C2  0A02               	xorlw	2	; case 3
 12234  0023C4  B4D8               	btfsc	status,2,c
 12235  0023C6  D69E               	goto	l215
 12236  0023C8  0A09               	xorlw	9	; case 10
 12237  0023CA  B4D8               	btfsc	status,2,c
 12238  0023CC  D771               	goto	l4657
 12239  0023CE  0A01               	xorlw	1	; case 11
 12240  0023D0  B4D8               	btfsc	status,2,c
 12241  0023D2  D775               	goto	l4661
 12242  0023D4  0A07               	xorlw	7	; case 12
 12243  0023D6  B4D8               	btfsc	status,2,c
 12244  0023D8  D78E               	goto	l4667
 12245  0023DA  0A01               	xorlw	1	; case 13
 12246  0023DC  B4D8               	btfsc	status,2,c
 12247  0023DE  D7A4               	goto	l4673
 12248  0023E0  0A03               	xorlw	3	; case 14
 12249  0023E2  B4D8               	btfsc	status,2,c
 12250  0023E4  D7C1               	goto	l4687
 12251  0023E6  D7DC               	goto	l4695
 12252  0023E8                     l4699:
 12253                           
 12254                           ;diskio.c: 542:  deselect();
 12255  0023E8  EC11  F02B         	call	_deselect	;wreg free
 12256                           
 12257                           ;diskio.c: 544:  return res;
 12258  0023EC  5036               	movf	disk_ioctl@res,w,c
 12259  0023EE  0012               	return		;funcret
 12260  0023F0                     __end_of_disk_ioctl:
 12261                           	opt callstack 0
 12262                           
 12263 ;; *************** function ___wmul *****************
 12264 ;; Defined at:
 12265 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;  multiplier      2    0[COMRAM] unsigned int 
 12268 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12269 ;; Auto vars:     Size  Location     Type
 12270 ;;  product         2    4[COMRAM] unsigned int 
 12271 ;; Return value:  Size  Location     Type
 12272 ;;                  2    0[COMRAM] unsigned int 
 12273 ;; Registers used:
 12274 ;;		wreg, status,2, status,0, prodl, prodh
 12275 ;; Tracked objects:
 12276 ;;		On entry : 0/0
 12277 ;;		On exit  : 0/0
 12278 ;;		Unchanged: 0/0
 12279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12280 ;;      Params:         4       0       0       0       0       0       0       0       0
 12281 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12282 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12283 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12284 ;;Total ram usage:        6 bytes
 12285 ;; Hardware stack levels used:    1
 12286 ;; This function calls:
 12287 ;;		Nothing
 12288 ;; This function is called by:
 12289 ;;		_disk_ioctl
 12290 ;; This function uses a non-reentrant model
 12291 ;;
 12292                           
 12293                           	psect	text35
 12294  005580                     __ptext35:
 12295                           	opt callstack 0
 12296  005580                     ___wmul:
 12297                           	opt callstack 26
 12298                           
 12299                           ;incstack = 0
 12300  005580  5001               	movf	___wmul@multiplier,w,c
 12301  005582  0203               	mulwf	___wmul@multiplicand,c
 12302  005584  CFF3 F005          	movff	prodl,___wmul@product
 12303  005588  CFF4 F006          	movff	prodh,___wmul@product+1
 12304  00558C  5001               	movf	___wmul@multiplier,w,c
 12305  00558E  0204               	mulwf	___wmul@multiplicand+1,c
 12306  005590  50F3               	movf	prodl,w,c
 12307  005592  2606               	addwf	___wmul@product+1,f,c
 12308  005594  5002               	movf	___wmul@multiplier+1,w,c
 12309  005596  0203               	mulwf	___wmul@multiplicand,c
 12310  005598  50F3               	movf	prodl,w,c
 12311  00559A  2606               	addwf	___wmul@product+1,f,c
 12312  00559C  C005  F001         	movff	___wmul@product,?___wmul
 12313  0055A0  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12314  0055A4  0012               	return		;funcret
 12315  0055A6                     __end_of___wmul:
 12316                           	opt callstack 0
 12317                           
 12318 ;; *************** function _st_clust *****************
 12319 ;; Defined at:
 12320 ;;		line 1252 in file "ff.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12323 ;;		 -> NULL(0), FatFs(558), 
 12324 ;;  cl              4    2[COMRAM] unsigned long 
 12325 ;; Auto vars:     Size  Location     Type
 12326 ;;		None
 12327 ;; Return value:  Size  Location     Type
 12328 ;;                  1    wreg      void 
 12329 ;; Registers used:
 12330 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12331 ;; Tracked objects:
 12332 ;;		On entry : 0/0
 12333 ;;		On exit  : 0/0
 12334 ;;		Unchanged: 0/0
 12335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12336 ;;      Params:         6       0       0       0       0       0       0       0       0
 12337 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12338 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12339 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12340 ;;Total ram usage:        6 bytes
 12341 ;; Hardware stack levels used:    1
 12342 ;; This function calls:
 12343 ;;		Nothing
 12344 ;; This function is called by:
 12345 ;;		_f_open
 12346 ;;		_f_sync
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           	psect	text36
 12351  005556                     __ptext36:
 12352                           	opt callstack 0
 12353  005556                     _st_clust:
 12354                           	opt callstack 29
 12355                           
 12356                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12357                           
 12358                           ;incstack = 0
 12359  005556  EE20 F01A          	lfsr	2,26
 12360  00555A  5001               	movf	st_clust@dir,w,c
 12361  00555C  26D9               	addwf	fsr2l,f,c
 12362  00555E  5002               	movf	st_clust@dir+1,w,c
 12363  005560  22DA               	addwfc	fsr2h,f,c
 12364  005562  C003  FFDE         	movff	st_clust@cl,postinc2
 12365  005566  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12366                           
 12367                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12368  00556A  EE20 F014          	lfsr	2,20
 12369  00556E  5001               	movf	st_clust@dir,w,c
 12370  005570  26D9               	addwf	fsr2l,f,c
 12371  005572  5002               	movf	st_clust@dir+1,w,c
 12372  005574  22DA               	addwfc	fsr2h,f,c
 12373  005576  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12374  00557A  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12375  00557E  0012               	return		;funcret
 12376  005580                     __end_of_st_clust:
 12377                           	opt callstack 0
 12378                           
 12379 ;; *************** function _move_window *****************
 12380 ;; Defined at:
 12381 ;;		line 729 in file "ff.c"
 12382 ;; Parameters:    Size  Location     Type
 12383 ;;  fs              2   47[COMRAM] PTR struct .
 12384 ;;		 -> NULL(0), FatFs(558), 
 12385 ;;  sector          4   49[COMRAM] unsigned long 
 12386 ;; Auto vars:     Size  Location     Type
 12387 ;;  res             1   57[COMRAM] enum E93
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  1    wreg      enum E93
 12390 ;; Registers used:
 12391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12397 ;;      Params:         6       0       0       0       0       0       0       0       0
 12398 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12399 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12400 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12401 ;;Total ram usage:       11 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; Hardware stack levels required when called:    7
 12404 ;; This function calls:
 12405 ;;		_disk_read
 12406 ;;		_sync_window
 12407 ;; This function is called by:
 12408 ;;		_get_fat
 12409 ;;		_put_fat
 12410 ;;		_dir_alloc
 12411 ;;		_dir_find
 12412 ;;		_dir_register
 12413 ;;		_check_fs
 12414 ;;		_find_volume
 12415 ;;		_f_open
 12416 ;;		_f_write
 12417 ;;		_f_sync
 12418 ;;		_f_read
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           	psect	text37
 12423  004F1E                     __ptext37:
 12424                           	opt callstack 0
 12425  004F1E                     _move_window:
 12426                           	opt callstack 22
 12427                           
 12428                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12429                           
 12430                           ;incstack = 0
 12431  004F1E  0E00               	movlw	0
 12432  004F20  6E3A               	movwf	move_window@res,c
 12433                           
 12434                           ;ff.c: 737:  if (sector != fs->winsect) {
 12435  004F22  EE20 F02A          	lfsr	2,42
 12436  004F26  5030               	movf	move_window@fs,w,c
 12437  004F28  26D9               	addwf	fsr2l,f,c
 12438  004F2A  5031               	movf	move_window@fs+1,w,c
 12439  004F2C  22DA               	addwfc	fsr2h,f,c
 12440  004F2E  5032               	movf	move_window@sector,w,c
 12441  004F30  18DE               	xorwf	postinc2,w,c
 12442  004F32  E10A               	bnz	u5050
 12443  004F34  5033               	movf	move_window@sector+1,w,c
 12444  004F36  18DE               	xorwf	postinc2,w,c
 12445  004F38  E107               	bnz	u5050
 12446  004F3A  5034               	movf	move_window@sector+2,w,c
 12447  004F3C  18DE               	xorwf	postinc2,w,c
 12448  004F3E  E104               	bnz	u5050
 12449  004F40  5035               	movf	move_window@sector+3,w,c
 12450  004F42  18DE               	xorwf	postinc2,w,c
 12451  004F44  B4D8               	btfsc	status,2,c
 12452  004F46  D03C               	goto	l4331
 12453  004F48                     u5050:
 12454                           
 12455                           ;ff.c: 739:   res = sync_window(fs);
 12456  004F48  C030  F01B         	movff	move_window@fs,sync_window@fs
 12457  004F4C  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12458  004F50  EC56  F020         	call	_sync_window	;wreg free
 12459  004F54  6E3A               	movwf	move_window@res,c
 12460                           
 12461                           ;ff.c: 741:   if (res == FR_OK) {
 12462  004F56  503A               	movf	move_window@res,w,c
 12463  004F58  A4D8               	btfss	status,2,c
 12464  004F5A  D032               	goto	l4331
 12465                           
 12466                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12467  004F5C  0E2E               	movlw	46
 12468  004F5E  2430               	addwf	move_window@fs,w,c
 12469  004F60  6E11               	movwf	disk_read@buff,c
 12470  004F62  0E00               	movlw	0
 12471  004F64  2031               	addwfc	move_window@fs+1,w,c
 12472  004F66  6E12               	movwf	disk_read@buff+1,c
 12473  004F68  C032  F013         	movff	move_window@sector,disk_read@sector
 12474  004F6C  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12475  004F70  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12476  004F74  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12477  004F78  0E00               	movlw	0
 12478  004F7A  6E18               	movwf	disk_read@count+1,c
 12479  004F7C  0E01               	movlw	1
 12480  004F7E  6E17               	movwf	disk_read@count,c
 12481  004F80  EE20 F001          	lfsr	2,1
 12482  004F84  5030               	movf	move_window@fs,w,c
 12483  004F86  26D9               	addwf	fsr2l,f,c
 12484  004F88  5031               	movf	move_window@fs+1,w,c
 12485  004F8A  22DA               	addwfc	fsr2h,f,c
 12486  004F8C  50DF               	movf	indf2,w,c
 12487  004F8E  ECB1  F025         	call	_disk_read
 12488  004F92  0900               	iorlw	0
 12489  004F94  B4D8               	btfsc	status,2,c
 12490  004F96  D006               	goto	l4329
 12491                           
 12492                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12493  004F98  6832               	setf	move_window@sector,c
 12494  004F9A  6833               	setf	move_window@sector+1,c
 12495  004F9C  6834               	setf	move_window@sector+2,c
 12496  004F9E  6835               	setf	move_window@sector+3,c
 12497                           
 12498                           ;ff.c: 744:     res = FR_DISK_ERR;
 12499  004FA0  0E01               	movlw	1
 12500  004FA2  6E3A               	movwf	move_window@res,c
 12501  004FA4                     l4329:
 12502                           
 12503                           ;ff.c: 746:    fs->winsect = sector;
 12504  004FA4  EE20 F02A          	lfsr	2,42
 12505  004FA8  5030               	movf	move_window@fs,w,c
 12506  004FAA  26D9               	addwf	fsr2l,f,c
 12507  004FAC  5031               	movf	move_window@fs+1,w,c
 12508  004FAE  22DA               	addwfc	fsr2h,f,c
 12509  004FB0  C032  FFDE         	movff	move_window@sector,postinc2
 12510  004FB4  C033  FFDE         	movff	move_window@sector+1,postinc2
 12511  004FB8  C034  FFDE         	movff	move_window@sector+2,postinc2
 12512  004FBC  C035  FFDE         	movff	move_window@sector+3,postinc2
 12513  004FC0                     l4331:
 12514                           
 12515                           ;ff.c: 749:  return res;
 12516  004FC0  503A               	movf	move_window@res,w,c
 12517  004FC2  0012               	return		;funcret
 12518  004FC4                     __end_of_move_window:
 12519                           	opt callstack 0
 12520                           
 12521 ;; *************** function _sync_window *****************
 12522 ;; Defined at:
 12523 ;;		line 700 in file "ff.c"
 12524 ;; Parameters:    Size  Location     Type
 12525 ;;  fs              2   26[COMRAM] PTR struct .
 12526 ;;		 -> NULL(0), FatFs(558), 
 12527 ;; Auto vars:     Size  Location     Type
 12528 ;;  wsect           4   43[COMRAM] unsigned long 
 12529 ;;  nf              2   41[COMRAM] unsigned short 
 12530 ;;  res             1   40[COMRAM] enum E93
 12531 ;; Return value:  Size  Location     Type
 12532 ;;                  1    wreg      enum E93
 12533 ;; Registers used:
 12534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12535 ;; Tracked objects:
 12536 ;;		On entry : 0/0
 12537 ;;		On exit  : 0/0
 12538 ;;		Unchanged: 0/0
 12539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12540 ;;      Params:         2       0       0       0       0       0       0       0       0
 12541 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12542 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12543 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12544 ;;Total ram usage:       21 bytes
 12545 ;; Hardware stack levels used:    1
 12546 ;; Hardware stack levels required when called:    6
 12547 ;; This function calls:
 12548 ;;		_disk_write
 12549 ;; This function is called by:
 12550 ;;		_move_window
 12551 ;;		_sync_fs
 12552 ;;		_dir_next
 12553 ;;		_f_write
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           	psect	text38
 12558  0040AC                     __ptext38:
 12559                           	opt callstack 0
 12560  0040AC                     _sync_window:
 12561                           	opt callstack 23
 12562                           
 12563                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12564                           
 12565                           ;incstack = 0
 12566  0040AC  0E00               	movlw	0
 12567  0040AE  6E29               	movwf	sync_window@res,c
 12568                           
 12569                           ;ff.c: 709:  if (fs->wflag) {
 12570  0040B0  EE20 F004          	lfsr	2,4
 12571  0040B4  501B               	movf	sync_window@fs,w,c
 12572  0040B6  26D9               	addwf	fsr2l,f,c
 12573  0040B8  501C               	movf	sync_window@fs+1,w,c
 12574  0040BA  22DA               	addwfc	fsr2h,f,c
 12575  0040BC  50DF               	movf	indf2,w,c
 12576  0040BE  B4D8               	btfsc	status,2,c
 12577  0040C0  D09F               	goto	l4311
 12578                           
 12579                           ;ff.c: 710:   wsect = fs->winsect;
 12580  0040C2  EE20 F02A          	lfsr	2,42
 12581  0040C6  501B               	movf	sync_window@fs,w,c
 12582  0040C8  26D9               	addwf	fsr2l,f,c
 12583  0040CA  501C               	movf	sync_window@fs+1,w,c
 12584  0040CC  22DA               	addwfc	fsr2h,f,c
 12585  0040CE  CFDE F02C          	movff	postinc2,sync_window@wsect
 12586  0040D2  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12587  0040D6  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12588  0040DA  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12589                           
 12590                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12591  0040DE  0E2E               	movlw	46
 12592  0040E0  241B               	addwf	sync_window@fs,w,c
 12593  0040E2  6E11               	movwf	disk_write@buff,c
 12594  0040E4  0E00               	movlw	0
 12595  0040E6  201C               	addwfc	sync_window@fs+1,w,c
 12596  0040E8  6E12               	movwf	disk_write@buff+1,c
 12597  0040EA  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12598  0040EE  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12599  0040F2  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12600  0040F6  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12601  0040FA  0E00               	movlw	0
 12602  0040FC  6E18               	movwf	disk_write@count+1,c
 12603  0040FE  0E01               	movlw	1
 12604  004100  6E17               	movwf	disk_write@count,c
 12605  004102  EE20 F001          	lfsr	2,1
 12606  004106  501B               	movf	sync_window@fs,w,c
 12607  004108  26D9               	addwf	fsr2l,f,c
 12608  00410A  501C               	movf	sync_window@fs+1,w,c
 12609  00410C  22DA               	addwfc	fsr2h,f,c
 12610  00410E  50DF               	movf	indf2,w,c
 12611  004110  ECEB  F022         	call	_disk_write
 12612  004114  0900               	iorlw	0
 12613  004116  B4D8               	btfsc	status,2,c
 12614  004118  D003               	goto	l4293
 12615                           
 12616                           ;ff.c: 712:    res = FR_DISK_ERR;
 12617  00411A  0E01               	movlw	1
 12618  00411C  6E29               	movwf	sync_window@res,c
 12619                           
 12620                           ;ff.c: 713:   } else {
 12621  00411E  D070               	goto	l4311
 12622  004120                     l4293:
 12623                           
 12624                           ;ff.c: 714:    fs->wflag = 0;
 12625  004120  EE20 F004          	lfsr	2,4
 12626  004124  501B               	movf	sync_window@fs,w,c
 12627  004126  26D9               	addwf	fsr2l,f,c
 12628  004128  501C               	movf	sync_window@fs+1,w,c
 12629  00412A  22DA               	addwfc	fsr2h,f,c
 12630  00412C  0E00               	movlw	0
 12631  00412E  6EDF               	movwf	indf2,c
 12632                           
 12633                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12634  004130  EE20 F016          	lfsr	2,22
 12635  004134  501B               	movf	sync_window@fs,w,c
 12636  004136  26D9               	addwf	fsr2l,f,c
 12637  004138  501C               	movf	sync_window@fs+1,w,c
 12638  00413A  22DA               	addwfc	fsr2h,f,c
 12639  00413C  EE10 F01E          	lfsr	1,30
 12640  004140  501B               	movf	sync_window@fs,w,c
 12641  004142  26E1               	addwf	fsr1l,f,c
 12642  004144  501C               	movf	sync_window@fs+1,w,c
 12643  004146  22E2               	addwfc	fsr1h,f,c
 12644  004148  CFE6 F021          	movff	postinc1,??_sync_window+4
 12645  00414C  CFE6 F022          	movff	postinc1,??_sync_window+5
 12646  004150  CFE6 F023          	movff	postinc1,??_sync_window+6
 12647  004154  CFE6 F024          	movff	postinc1,??_sync_window+7
 12648  004158  5021               	movf	??_sync_window+4,w,c
 12649  00415A  5C2C               	subwf	sync_window@wsect,w,c
 12650  00415C  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12651  00415E  5022               	movf	??_sync_window+5,w,c
 12652  004160  582D               	subwfb	sync_window@wsect+1,w,c
 12653  004162  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12654  004164  5023               	movf	??_sync_window+6,w,c
 12655  004166  582E               	subwfb	sync_window@wsect+2,w,c
 12656  004168  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12657  00416A  5024               	movf	??_sync_window+7,w,c
 12658  00416C  582F               	subwfb	sync_window@wsect+3,w,c
 12659  00416E  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12660  004170  50DE               	movf	postinc2,w,c
 12661  004172  5C25               	subwf	??_sync_window+8,w,c
 12662  004174  50DE               	movf	postinc2,w,c
 12663  004176  5826               	subwfb	??_sync_window+9,w,c
 12664  004178  50DE               	movf	postinc2,w,c
 12665  00417A  5827               	subwfb	??_sync_window+10,w,c
 12666  00417C  50DE               	movf	postinc2,w,c
 12667  00417E  5828               	subwfb	??_sync_window+11,w,c
 12668  004180  B0D8               	btfsc	status,0,c
 12669  004182  D03E               	goto	l4311
 12670                           
 12671                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12672  004184  EE20 F003          	lfsr	2,3
 12673  004188  501B               	movf	sync_window@fs,w,c
 12674  00418A  26D9               	addwf	fsr2l,f,c
 12675  00418C  501C               	movf	sync_window@fs+1,w,c
 12676  00418E  22DA               	addwfc	fsr2h,f,c
 12677  004190  50DF               	movf	indf2,w,c
 12678  004192  6E1D               	movwf	??_sync_window& (0+255),c
 12679  004194  501D               	movf	??_sync_window,w,c
 12680  004196  6E2A               	movwf	sync_window@nf,c
 12681  004198  6A2B               	clrf	sync_window@nf+1,c
 12682  00419A                     l4299:
 12683  00419A  502B               	movf	sync_window@nf+1,w,c
 12684  00419C  E104               	bnz	l4303
 12685  00419E  0E02               	movlw	2
 12686  0041A0  5C2A               	subwf	sync_window@nf,w,c
 12687  0041A2  A0D8               	btfss	status,0,c
 12688  0041A4  D02D               	goto	l4311
 12689  0041A6                     l4303:
 12690                           
 12691                           ;ff.c: 717:      wsect += fs->fsize;
 12692  0041A6  EE20 F016          	lfsr	2,22
 12693  0041AA  501B               	movf	sync_window@fs,w,c
 12694  0041AC  26D9               	addwf	fsr2l,f,c
 12695  0041AE  501C               	movf	sync_window@fs+1,w,c
 12696  0041B0  22DA               	addwfc	fsr2h,f,c
 12697  0041B2  50DE               	movf	postinc2,w,c
 12698  0041B4  262C               	addwf	sync_window@wsect,f,c
 12699  0041B6  50DE               	movf	postinc2,w,c
 12700  0041B8  222D               	addwfc	sync_window@wsect+1,f,c
 12701  0041BA  50DE               	movf	postinc2,w,c
 12702  0041BC  222E               	addwfc	sync_window@wsect+2,f,c
 12703  0041BE  50DD               	movf	postdec2,w,c
 12704  0041C0  222F               	addwfc	sync_window@wsect+3,f,c
 12705                           
 12706                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12707  0041C2  0E2E               	movlw	46
 12708  0041C4  241B               	addwf	sync_window@fs,w,c
 12709  0041C6  6E11               	movwf	disk_write@buff,c
 12710  0041C8  0E00               	movlw	0
 12711  0041CA  201C               	addwfc	sync_window@fs+1,w,c
 12712  0041CC  6E12               	movwf	disk_write@buff+1,c
 12713  0041CE  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12714  0041D2  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12715  0041D6  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12716  0041DA  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12717  0041DE  0E00               	movlw	0
 12718  0041E0  6E18               	movwf	disk_write@count+1,c
 12719  0041E2  0E01               	movlw	1
 12720  0041E4  6E17               	movwf	disk_write@count,c
 12721  0041E6  EE20 F001          	lfsr	2,1
 12722  0041EA  501B               	movf	sync_window@fs,w,c
 12723  0041EC  26D9               	addwf	fsr2l,f,c
 12724  0041EE  501C               	movf	sync_window@fs+1,w,c
 12725  0041F0  22DA               	addwfc	fsr2h,f,c
 12726  0041F2  50DF               	movf	indf2,w,c
 12727  0041F4  ECEB  F022         	call	_disk_write
 12728                           
 12729                           ;ff.c: 719:     }
 12730  0041F8  062A               	decf	sync_window@nf,f,c
 12731  0041FA  A0D8               	btfss	status,0,c
 12732  0041FC  062B               	decf	sync_window@nf+1,f,c
 12733  0041FE  D7CD               	goto	l4299
 12734  004200                     l4311:
 12735                           
 12736                           ;ff.c: 723:  return res;
 12737  004200  5029               	movf	sync_window@res,w,c
 12738  004202  0012               	return		;funcret
 12739  004204                     __end_of_sync_window:
 12740                           	opt callstack 0
 12741                           
 12742 ;; *************** function _disk_write *****************
 12743 ;; Defined at:
 12744 ;;		line 405 in file "diskio.c"
 12745 ;; Parameters:    Size  Location     Type
 12746 ;;  pdrv            1    wreg     unsigned char 
 12747 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12748 ;;		 -> FatFs.win(512), NULL(0), STR_4(21), FatFs(558), 
 12749 ;;  sector          4   18[COMRAM] unsigned long 
 12750 ;;  count           2   22[COMRAM] unsigned short 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  pdrv            1   25[COMRAM] unsigned char 
 12753 ;; Return value:  Size  Location     Type
 12754 ;;                  1    wreg      enum E43
 12755 ;; Registers used:
 12756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12762 ;;      Params:         8       0       0       0       0       0       0       0       0
 12763 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12764 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12765 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12766 ;;Total ram usage:       10 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    5
 12769 ;; This function calls:
 12770 ;;		_deselect
 12771 ;;		_send_cmd
 12772 ;;		_xmit_datablock
 12773 ;; This function is called by:
 12774 ;;		_sync_window
 12775 ;;		_sync_fs
 12776 ;;		_f_write
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           	psect	text39
 12781  0045D6                     __ptext39:
 12782                           	opt callstack 0
 12783  0045D6                     _disk_write:
 12784                           	opt callstack 23
 12785                           
 12786                           ;incstack = 0
 12787                           ;disk_write@pdrv stored from wreg
 12788  0045D6  6E1A               	movwf	disk_write@pdrv,c
 12789                           
 12790                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 12791  0045D8  501A               	movf	disk_write@pdrv,w,c
 12792  0045DA  A4D8               	btfss	status,2,c
 12793  0045DC  D004               	goto	u4740
 12794  0045DE  5017               	movf	disk_write@count,w,c
 12795  0045E0  1018               	iorwf	disk_write@count+1,w,c
 12796  0045E2  A4D8               	btfss	status,2,c
 12797  0045E4  D002               	goto	l186
 12798  0045E6                     u4740:
 12799  0045E6  0E04               	movlw	4
 12800  0045E8  0012               	return	
 12801  0045EA                     l186:
 12802                           
 12803                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 12804  0045EA  0100               	movlb	0	; () banked
 12805  0045EC  A1F7               	btfss	_Stat& (0+255),0,b
 12806  0045EE  D002               	goto	l190
 12807                           
 12808                           ; BSR set to: 0
 12809  0045F0  0E03               	movlw	3
 12810  0045F2  0012               	return	
 12811  0045F4                     l190:
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 12815  0045F4  A5F7               	btfss	_Stat& (0+255),2,b
 12816  0045F6  D002               	goto	l191
 12817                           
 12818                           ; BSR set to: 0
 12819  0045F8  0E02               	movlw	2
 12820  0045FA  0012               	return	
 12821  0045FC                     l191:
 12822                           
 12823                           ; BSR set to: 0
 12824                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 12825  0045FC  B7D6               	btfsc	_CardType& (0+255),3,b
 12826  0045FE  D008               	goto	l192
 12827                           
 12828                           ; BSR set to: 0
 12829  004600  0E09               	movlw	9
 12830  004602                     u4785:
 12831  004602  90D8               	bcf	status,0,c
 12832  004604  3613               	rlcf	disk_write@sector,f,c
 12833  004606  3614               	rlcf	disk_write@sector+1,f,c
 12834  004608  3615               	rlcf	disk_write@sector+2,f,c
 12835  00460A  3616               	rlcf	disk_write@sector+3,f,c
 12836  00460C  2EE8               	decfsz	wreg,f,c
 12837  00460E  D7F9               	goto	u4785
 12838  004610                     l192:
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;diskio.c: 418:  if (count == 1) {
 12842  004610  0417               	decf	disk_write@count,w,c
 12843  004612  1018               	iorwf	disk_write@count+1,w,c
 12844  004614  A4D8               	btfss	status,2,c
 12845  004616  D01D               	goto	l4225
 12846                           
 12847                           ; BSR set to: 0
 12848                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 12849  004618  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12850  00461C  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12851  004620  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12852  004624  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12853  004628  0E18               	movlw	24
 12854  00462A  ECE3  F029         	call	_send_cmd
 12855  00462E  0900               	iorlw	0
 12856  004630  A4D8               	btfss	status,2,c
 12857  004632  D04F               	goto	l4239
 12858  004634  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12859  004638  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12860  00463C  0EFE               	movlw	254
 12861  00463E  6E06               	movwf	xmit_datablock@token,c
 12862  004640  ECED  F028         	call	_xmit_datablock	;wreg free
 12863  004644  0900               	iorlw	0
 12864  004646  B4D8               	btfsc	status,2,c
 12865  004648  D044               	goto	l4239
 12866                           
 12867                           ;diskio.c: 421:    count = 0;
 12868  00464A  0E00               	movlw	0
 12869  00464C  6E18               	movwf	disk_write@count+1,c
 12870  00464E  0E00               	movlw	0
 12871  004650  D03F               	goto	L17
 12872  004652                     l4225:
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 12876  004652  C0D6  F019         	movff	_CardType,??_disk_write
 12877  004656  0E06               	movlw	6
 12878  004658  1619               	andwf	??_disk_write,f,c
 12879  00465A  B4D8               	btfsc	status,2,c
 12880  00465C  D009               	goto	l196
 12881                           
 12882                           ; BSR set to: 0
 12883  00465E  C017  F00B         	movff	disk_write@count,send_cmd@arg
 12884  004662  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 12885  004666  6A0D               	clrf	send_cmd@arg+2,c
 12886  004668  6A0E               	clrf	send_cmd@arg+3,c
 12887  00466A  0E97               	movlw	151
 12888  00466C  ECE3  F029         	call	_send_cmd
 12889  004670                     l196:
 12890                           
 12891                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 12892  004670  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12893  004674  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12894  004678  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12895  00467C  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12896  004680  0E19               	movlw	25
 12897  004682  ECE3  F029         	call	_send_cmd
 12898  004686  0900               	iorlw	0
 12899  004688  A4D8               	btfss	status,2,c
 12900  00468A  D023               	goto	l4239
 12901  00468C                     u4830:
 12902                           
 12903                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 12904  00468C  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12905  004690  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12906  004694  0EFC               	movlw	252
 12907  004696  6E06               	movwf	xmit_datablock@token,c
 12908  004698  ECED  F028         	call	_xmit_datablock	;wreg free
 12909  00469C  0900               	iorlw	0
 12910  00469E  B4D8               	btfsc	status,2,c
 12911  0046A0  D009               	goto	u4850
 12912                           
 12913                           ;diskio.c: 428:     buff += 512;
 12914  0046A2  0E02               	movlw	2
 12915  0046A4  2612               	addwf	disk_write@buff+1,f,c
 12916                           
 12917                           ;diskio.c: 429:    } while (--count);
 12918  0046A6  0617               	decf	disk_write@count,f,c
 12919  0046A8  A0D8               	btfss	status,0,c
 12920  0046AA  0618               	decf	disk_write@count+1,f,c
 12921  0046AC  5017               	movf	disk_write@count,w,c
 12922  0046AE  1018               	iorwf	disk_write@count+1,w,c
 12923  0046B0  A4D8               	btfss	status,2,c
 12924  0046B2  D7EC               	goto	u4830
 12925  0046B4                     u4850:
 12926                           
 12927                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 12928  0046B4  0E00               	movlw	0
 12929  0046B6  6E04               	movwf	xmit_datablock@buff,c
 12930  0046B8  0E00               	movlw	0
 12931  0046BA  6E05               	movwf	xmit_datablock@buff+1,c
 12932  0046BC  0EFD               	movlw	253
 12933  0046BE  6E06               	movwf	xmit_datablock@token,c
 12934  0046C0  ECED  F028         	call	_xmit_datablock	;wreg free
 12935  0046C4  0900               	iorlw	0
 12936  0046C6  A4D8               	btfss	status,2,c
 12937  0046C8  D004               	goto	l4239
 12938                           
 12939                           ;diskio.c: 431:     count = 1;
 12940  0046CA  0E00               	movlw	0
 12941  0046CC  6E18               	movwf	disk_write@count+1,c
 12942  0046CE  0E01               	movlw	1
 12943  0046D0                     L17:
 12944  0046D0  6E17               	movwf	disk_write@count,c
 12945  0046D2                     l4239:
 12946                           
 12947                           ;diskio.c: 434:  deselect();
 12948  0046D2  EC11  F02B         	call	_deselect	;wreg free
 12949                           
 12950                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 12951  0046D6  5017               	movf	disk_write@count,w,c
 12952  0046D8  1018               	iorwf	disk_write@count+1,w,c
 12953  0046DA  B4D8               	btfsc	status,2,c
 12954  0046DC  D002               	goto	u4870
 12955  0046DE  0E01               	movlw	1
 12956  0046E0  0012               	return	
 12957  0046E2                     u4870:
 12958  0046E2  0E00               	movlw	0
 12959  0046E4  0012               	return		;funcret
 12960  0046E6                     __end_of_disk_write:
 12961                           	opt callstack 0
 12962                           
 12963 ;; *************** function _xmit_datablock *****************
 12964 ;; Defined at:
 12965 ;;		line 156 in file "diskio.c"
 12966 ;; Parameters:    Size  Location     Type
 12967 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 12968 ;;		 -> FatFs.win(512), NULL(0), STR_4(21), FatFs(558), 
 12969 ;;  token           1    5[COMRAM] unsigned char 
 12970 ;; Auto vars:     Size  Location     Type
 12971 ;;  i               2    6[COMRAM] unsigned short 
 12972 ;;  resp            1    8[COMRAM] unsigned char 
 12973 ;; Return value:  Size  Location     Type
 12974 ;;                  1    wreg      unsigned char 
 12975 ;; Registers used:
 12976 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12982 ;;      Params:         3       0       0       0       0       0       0       0       0
 12983 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12984 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12985 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12986 ;;Total ram usage:        6 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; Hardware stack levels required when called:    2
 12989 ;; This function calls:
 12990 ;;		_SPI1_Exchange8bit
 12991 ;;		_wait_ready
 12992 ;; This function is called by:
 12993 ;;		_disk_write
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           	psect	text40
 12998  0051DA                     __ptext40:
 12999                           	opt callstack 0
 13000  0051DA                     _xmit_datablock:
 13001                           	opt callstack 25
 13002                           
 13003                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13004                           
 13005                           ;incstack = 0
 13006  0051DA  EC22  F02A         	call	_wait_ready	;wreg free
 13007  0051DE  0900               	iorlw	0
 13008  0051E0  A4D8               	btfss	status,2,c
 13009  0051E2  D002               	goto	l4131
 13010  0051E4                     u4620:
 13011  0051E4  0E00               	movlw	0
 13012  0051E6  0012               	return	
 13013  0051E8                     l4131:
 13014                           
 13015                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13016  0051E8  5006               	movf	xmit_datablock@token,w,c
 13017  0051EA  ECF4  F02A         	call	_SPI1_Exchange8bit
 13018                           
 13019                           ;diskio.c: 168:  if (token != 0xFD) {
 13020  0051EE  0EFD               	movlw	253
 13021  0051F0  1806               	xorwf	xmit_datablock@token,w,c
 13022  0051F2  B4D8               	btfsc	status,2,c
 13023  0051F4  D02E               	goto	l4151
 13024                           
 13025                           ;diskio.c: 169:   i = 512;
 13026  0051F6  0E02               	movlw	2
 13027  0051F8  6E08               	movwf	xmit_datablock@i+1,c
 13028  0051FA  0E00               	movlw	0
 13029  0051FC  6E07               	movwf	xmit_datablock@i,c
 13030  0051FE                     l4137:
 13031                           
 13032                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13033  0051FE  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13034  005202  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13035  005206  6AF8               	clrf	tblptru,c
 13036  005208  0E07               	movlw	(high __ramtop+-1)
 13037  00520A  64F7               	cpfsgt	tblptrh,c
 13038  00520C  D003               	bra	u4647
 13039  00520E  0008               	tblrd		*
 13040  005210  50F5               	movf	tablat,w,c
 13041  005212  D005               	bra	u4640
 13042  005214                     u4647:
 13043  005214  CFF6 FFE9          	movff	tblptrl,fsr0l
 13044  005218  CFF7 FFEA          	movff	tblptrh,fsr0h
 13045  00521C  50EF               	movf	indf0,w,c
 13046  00521E                     u4640:
 13047  00521E  ECF4  F02A         	call	_SPI1_Exchange8bit
 13048  005222  4A04               	infsnz	xmit_datablock@buff,f,c
 13049  005224  2A05               	incf	xmit_datablock@buff+1,f,c
 13050  005226  0607               	decf	xmit_datablock@i,f,c
 13051  005228  A0D8               	btfss	status,0,c
 13052  00522A  0608               	decf	xmit_datablock@i+1,f,c
 13053  00522C  5007               	movf	xmit_datablock@i,w,c
 13054  00522E  1008               	iorwf	xmit_datablock@i+1,w,c
 13055  005230  A4D8               	btfss	status,2,c
 13056  005232  D7E5               	goto	l4137
 13057                           
 13058                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13059  005234  0EFF               	movlw	255
 13060  005236  ECF4  F02A         	call	_SPI1_Exchange8bit
 13061                           
 13062                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13063  00523A  0EFF               	movlw	255
 13064  00523C  ECF4  F02A         	call	_SPI1_Exchange8bit
 13065                           
 13066                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13067  005240  0EFF               	movlw	255
 13068  005242  ECF4  F02A         	call	_SPI1_Exchange8bit
 13069  005246  6E09               	movwf	xmit_datablock@resp,c
 13070                           
 13071                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13072  005248  5009               	movf	xmit_datablock@resp,w,c
 13073  00524A  0B1F               	andlw	31
 13074  00524C  0A05               	xorlw	5
 13075  00524E  A4D8               	btfss	status,2,c
 13076  005250  D7C9               	goto	u4620
 13077  005252                     l4151:
 13078                           
 13079                           ;diskio.c: 180:  return 1;
 13080  005252  0E01               	movlw	1
 13081  005254  0012               	return		;funcret
 13082  005256                     __end_of_xmit_datablock:
 13083                           	opt callstack 0
 13084                           
 13085 ;; *************** function _disk_read *****************
 13086 ;; Defined at:
 13087 ;;		line 370 in file "diskio.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;  pdrv            1    wreg     unsigned char 
 13090 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13091 ;;		 -> NULL(0), FatFs(558), 
 13092 ;;  sector          4   18[COMRAM] unsigned long 
 13093 ;;  count           2   22[COMRAM] unsigned short 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  pdrv            1   24[COMRAM] unsigned char 
 13096 ;;  cmd             1   27[COMRAM] unsigned char 
 13097 ;; Return value:  Size  Location     Type
 13098 ;;                  1    wreg      enum E43
 13099 ;; Registers used:
 13100 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13101 ;; Tracked objects:
 13102 ;;		On entry : 0/0
 13103 ;;		On exit  : 0/0
 13104 ;;		Unchanged: 0/0
 13105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13106 ;;      Params:         8       0       0       0       0       0       0       0       0
 13107 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13109 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13110 ;;Total ram usage:       12 bytes
 13111 ;; Hardware stack levels used:    1
 13112 ;; Hardware stack levels required when called:    5
 13113 ;; This function calls:
 13114 ;;		_deselect
 13115 ;;		_rcvr_datablock
 13116 ;;		_send_cmd
 13117 ;; This function is called by:
 13118 ;;		_move_window
 13119 ;;		_f_read
 13120 ;; This function uses a non-reentrant model
 13121 ;;
 13122                           
 13123                           	psect	text41
 13124  004B62                     __ptext41:
 13125                           	opt callstack 0
 13126  004B62                     _disk_read:
 13127                           	opt callstack 23
 13128                           
 13129                           ;incstack = 0
 13130                           ;disk_read@pdrv stored from wreg
 13131  004B62  6E19               	movwf	disk_read@pdrv,c
 13132                           
 13133                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13134  004B64  5019               	movf	disk_read@pdrv,w,c
 13135  004B66  A4D8               	btfss	status,2,c
 13136  004B68  D004               	goto	u4900
 13137  004B6A  5017               	movf	disk_read@count,w,c
 13138  004B6C  1018               	iorwf	disk_read@count+1,w,c
 13139  004B6E  A4D8               	btfss	status,2,c
 13140  004B70  D002               	goto	l169
 13141  004B72                     u4900:
 13142  004B72  0E04               	movlw	4
 13143  004B74  0012               	return	
 13144  004B76                     l169:
 13145                           
 13146                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13147  004B76  0100               	movlb	0	; () banked
 13148  004B78  A1F7               	btfss	_Stat& (0+255),0,b
 13149  004B7A  D002               	goto	l173
 13150                           
 13151                           ; BSR set to: 0
 13152  004B7C  0E03               	movlw	3
 13153  004B7E  0012               	return	
 13154  004B80                     l173:
 13155                           
 13156                           ; BSR set to: 0
 13157                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13158  004B80  B7D6               	btfsc	_CardType& (0+255),3,b
 13159  004B82  D008               	goto	l174
 13160                           
 13161                           ; BSR set to: 0
 13162  004B84  0E09               	movlw	9
 13163  004B86                     u4935:
 13164  004B86  90D8               	bcf	status,0,c
 13165  004B88  3613               	rlcf	disk_read@sector,f,c
 13166  004B8A  3614               	rlcf	disk_read@sector+1,f,c
 13167  004B8C  3615               	rlcf	disk_read@sector+2,f,c
 13168  004B8E  3616               	rlcf	disk_read@sector+3,f,c
 13169  004B90  2EE8               	decfsz	wreg,f,c
 13170  004B92  D7F9               	goto	u4935
 13171  004B94                     l174:
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13175  004B94  5018               	movf	disk_read@count+1,w,c
 13176  004B96  E108               	bnz	l4261
 13177  004B98  0E02               	movlw	2
 13178  004B9A  5C17               	subwf	disk_read@count,w,c
 13179  004B9C  B0D8               	btfsc	status,0,c
 13180  004B9E  D004               	goto	l4261
 13181                           
 13182                           ; BSR set to: 0
 13183  004BA0  0E00               	movlw	0
 13184  004BA2  6E1B               	movwf	_disk_read$333+1,c
 13185  004BA4  0E11               	movlw	17
 13186  004BA6  D003               	goto	L18
 13187  004BA8                     l4261:
 13188                           
 13189                           ; BSR set to: 0
 13190  004BA8  0E00               	movlw	0
 13191  004BAA  6E1B               	movwf	_disk_read$333+1,c
 13192  004BAC  0E12               	movlw	18
 13193  004BAE                     L18:
 13194  004BAE  6E1A               	movwf	_disk_read$333,c
 13195                           
 13196                           ; BSR set to: 0
 13197  004BB0  C01A  F01C         	movff	_disk_read$333,disk_read@cmd
 13198                           
 13199                           ; BSR set to: 0
 13200                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13201  004BB4  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13202  004BB8  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13203  004BBC  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13204  004BC0  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13205  004BC4  501C               	movf	disk_read@cmd,w,c
 13206  004BC6  ECE3  F029         	call	_send_cmd
 13207  004BCA  0900               	iorlw	0
 13208  004BCC  A4D8               	btfss	status,2,c
 13209  004BCE  D025               	goto	l4277
 13210  004BD0                     u4950:
 13211                           
 13212                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13213  004BD0  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13214  004BD4  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13215  004BD8  0E02               	movlw	2
 13216  004BDA  6E05               	movwf	rcvr_datablock@btr+1,c
 13217  004BDC  0E00               	movlw	0
 13218  004BDE  6E04               	movwf	rcvr_datablock@btr,c
 13219  004BE0  EC2B  F029         	call	_rcvr_datablock	;wreg free
 13220  004BE4  0900               	iorlw	0
 13221  004BE6  B4D8               	btfsc	status,2,c
 13222  004BE8  D009               	goto	u4970
 13223                           
 13224                           ;diskio.c: 389:    buff += 512;
 13225  004BEA  0E02               	movlw	2
 13226  004BEC  2612               	addwf	disk_read@buff+1,f,c
 13227                           
 13228                           ;diskio.c: 390:   } while (--count);
 13229  004BEE  0617               	decf	disk_read@count,f,c
 13230  004BF0  A0D8               	btfss	status,0,c
 13231  004BF2  0618               	decf	disk_read@count+1,f,c
 13232  004BF4  5017               	movf	disk_read@count,w,c
 13233  004BF6  1018               	iorwf	disk_read@count+1,w,c
 13234  004BF8  A4D8               	btfss	status,2,c
 13235  004BFA  D7EA               	goto	u4950
 13236  004BFC                     u4970:
 13237                           
 13238                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13239  004BFC  0E12               	movlw	18
 13240  004BFE  181C               	xorwf	disk_read@cmd,w,c
 13241  004C00  A4D8               	btfss	status,2,c
 13242  004C02  D00B               	goto	l4277
 13243  004C04  0E00               	movlw	0
 13244  004C06  6E0B               	movwf	send_cmd@arg,c
 13245  004C08  0E00               	movlw	0
 13246  004C0A  6E0C               	movwf	send_cmd@arg+1,c
 13247  004C0C  0E00               	movlw	0
 13248  004C0E  6E0D               	movwf	send_cmd@arg+2,c
 13249  004C10  0E00               	movlw	0
 13250  004C12  6E0E               	movwf	send_cmd@arg+3,c
 13251  004C14  0E0C               	movlw	12
 13252  004C16  ECE3  F029         	call	_send_cmd
 13253  004C1A                     l4277:
 13254                           
 13255                           ;diskio.c: 393:  deselect();
 13256  004C1A  EC11  F02B         	call	_deselect	;wreg free
 13257                           
 13258                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13259  004C1E  5017               	movf	disk_read@count,w,c
 13260  004C20  1018               	iorwf	disk_read@count+1,w,c
 13261  004C22  B4D8               	btfsc	status,2,c
 13262  004C24  D002               	goto	u4990
 13263  004C26  0E01               	movlw	1
 13264  004C28  0012               	return	
 13265  004C2A                     u4990:
 13266  004C2A  0E00               	movlw	0
 13267  004C2C  0012               	return		;funcret
 13268  004C2E                     __end_of_disk_read:
 13269                           	opt callstack 0
 13270                           
 13271 ;; *************** function _send_cmd *****************
 13272 ;; Defined at:
 13273 ;;		line 231 in file "diskio.c"
 13274 ;; Parameters:    Size  Location     Type
 13275 ;;  cmd             1    wreg     unsigned char 
 13276 ;;  arg             4   10[COMRAM] unsigned long 
 13277 ;; Auto vars:     Size  Location     Type
 13278 ;;  cmd             1   14[COMRAM] unsigned char 
 13279 ;;  res             1   15[COMRAM] unsigned char 
 13280 ;; Return value:  Size  Location     Type
 13281 ;;                  1    wreg      unsigned char 
 13282 ;; Registers used:
 13283 ;;		wreg, status,2, status,0, cstack
 13284 ;; Tracked objects:
 13285 ;;		On entry : 0/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13289 ;;      Params:         4       0       0       0       0       0       0       0       0
 13290 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13291 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13292 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13293 ;;Total ram usage:        6 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    4
 13296 ;; This function calls:
 13297 ;;		___send_cmd
 13298 ;; This function is called by:
 13299 ;;		_disk_initialize
 13300 ;;		_disk_read
 13301 ;;		_disk_write
 13302 ;;		_disk_ioctl
 13303 ;; This function uses a non-reentrant model
 13304 ;;
 13305                           
 13306                           	psect	text42
 13307  0053C6                     __ptext42:
 13308                           	opt callstack 0
 13309  0053C6                     _send_cmd:
 13310                           	opt callstack 23
 13311                           
 13312                           ;incstack = 0
 13313                           ;send_cmd@cmd stored from wreg
 13314  0053C6  6E0F               	movwf	send_cmd@cmd,c
 13315                           
 13316                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13317  0053C8  AE0F               	btfss	send_cmd@cmd,7,c
 13318  0053CA  D012               	goto	l4167
 13319                           
 13320                           ;diskio.c: 243:   cmd &= 0x7F;
 13321  0053CC  9E0F               	bcf	send_cmd@cmd,7,c
 13322                           
 13323                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13324  0053CE  0E00               	movlw	0
 13325  0053D0  6E04               	movwf	___send_cmd@arg,c
 13326  0053D2  0E00               	movlw	0
 13327  0053D4  6E05               	movwf	___send_cmd@arg+1,c
 13328  0053D6  0E00               	movlw	0
 13329  0053D8  6E06               	movwf	___send_cmd@arg+2,c
 13330  0053DA  0E00               	movlw	0
 13331  0053DC  6E07               	movwf	___send_cmd@arg+3,c
 13332  0053DE  0E37               	movlw	55
 13333  0053E0  EC6D  F028         	call	___send_cmd
 13334  0053E4  6E10               	movwf	send_cmd@res,c
 13335                           
 13336                           ;diskio.c: 249:   if (res > 1) return res;
 13337  0053E6  0E01               	movlw	1
 13338  0053E8  6410               	cpfsgt	send_cmd@res,c
 13339  0053EA  D002               	goto	l4167
 13340  0053EC  5010               	movf	send_cmd@res,w,c
 13341  0053EE  0012               	return	
 13342  0053F0                     l4167:
 13343                           
 13344                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13345  0053F0  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13346  0053F4  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13347  0053F8  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13348  0053FC  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13349  005400  500F               	movf	send_cmd@cmd,w,c
 13350  005402  EC6D  F028         	call	___send_cmd
 13351  005406  0012               	return		;funcret
 13352  005408                     __end_of_send_cmd:
 13353                           	opt callstack 0
 13354                           
 13355 ;; *************** function ___send_cmd *****************
 13356 ;; Defined at:
 13357 ;;		line 195 in file "diskio.c"
 13358 ;; Parameters:    Size  Location     Type
 13359 ;;  cmd             1    wreg     unsigned char 
 13360 ;;  arg             4    3[COMRAM] unsigned long 
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;  cmd             1    9[COMRAM] unsigned char 
 13363 ;;  n               1    8[COMRAM] unsigned char 
 13364 ;;  res             1    7[COMRAM] unsigned char 
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  1    wreg      unsigned char 
 13367 ;; Registers used:
 13368 ;;		wreg, status,2, status,0, cstack
 13369 ;; Tracked objects:
 13370 ;;		On entry : 0/0
 13371 ;;		On exit  : 0/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13374 ;;      Params:         4       0       0       0       0       0       0       0       0
 13375 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13376 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13377 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13378 ;;Total ram usage:        7 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; Hardware stack levels required when called:    3
 13381 ;; This function calls:
 13382 ;;		_SPI1_Exchange8bit
 13383 ;;		_deselect
 13384 ;;		_select
 13385 ;; This function is called by:
 13386 ;;		_send_cmd
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           	psect	text43
 13391  0050DA                     __ptext43:
 13392                           	opt callstack 0
 13393  0050DA                     ___send_cmd:
 13394                           	opt callstack 23
 13395                           
 13396                           ;incstack = 0
 13397                           ;___send_cmd@cmd stored from wreg
 13398  0050DA  6E0A               	movwf	___send_cmd@cmd,c
 13399                           
 13400                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13401  0050DC  0E0C               	movlw	12
 13402  0050DE  180A               	xorwf	___send_cmd@cmd,w,c
 13403  0050E0  B4D8               	btfsc	status,2,c
 13404  0050E2  D009               	goto	l4087
 13405                           
 13406                           ;diskio.c: 204:   deselect();
 13407  0050E4  EC11  F02B         	call	_deselect	;wreg free
 13408                           
 13409                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13410  0050E8  ECD3  F02A         	call	_select	;wreg free
 13411  0050EC  0900               	iorlw	0
 13412  0050EE  A4D8               	btfss	status,2,c
 13413  0050F0  D002               	goto	l4087
 13414  0050F2  0EFF               	movlw	255
 13415  0050F4  0012               	return	
 13416  0050F6                     l4087:
 13417                           
 13418                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13419  0050F6  500A               	movf	___send_cmd@cmd,w,c
 13420  0050F8  0940               	iorlw	64
 13421  0050FA  ECF4  F02A         	call	_SPI1_Exchange8bit
 13422                           
 13423                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13424  0050FE  5007               	movf	___send_cmd@arg+3,w,c
 13425  005100  ECF4  F02A         	call	_SPI1_Exchange8bit
 13426                           
 13427                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13428  005104  5006               	movf	___send_cmd@arg+2,w,c
 13429  005106  ECF4  F02A         	call	_SPI1_Exchange8bit
 13430                           
 13431                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13432  00510A  5005               	movf	___send_cmd@arg+1,w,c
 13433  00510C  ECF4  F02A         	call	_SPI1_Exchange8bit
 13434                           
 13435                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13436  005110  5004               	movf	___send_cmd@arg,w,c
 13437  005112  ECF4  F02A         	call	_SPI1_Exchange8bit
 13438                           
 13439                           ;diskio.c: 214:  n = 0x01;
 13440  005116  0E01               	movlw	1
 13441  005118  6E09               	movwf	___send_cmd@n,c
 13442                           
 13443                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13444  00511A  500A               	movf	___send_cmd@cmd,w,c
 13445  00511C  A4D8               	btfss	status,2,c
 13446  00511E  D002               	goto	l4103
 13447  005120  0E95               	movlw	149
 13448  005122  6E09               	movwf	___send_cmd@n,c
 13449  005124                     l4103:
 13450                           
 13451                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13452  005124  0E08               	movlw	8
 13453  005126  180A               	xorwf	___send_cmd@cmd,w,c
 13454  005128  A4D8               	btfss	status,2,c
 13455  00512A  D002               	goto	l4107
 13456  00512C  0E87               	movlw	135
 13457  00512E  6E09               	movwf	___send_cmd@n,c
 13458  005130                     l4107:
 13459                           
 13460                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13461  005130  5009               	movf	___send_cmd@n,w,c
 13462  005132  ECF4  F02A         	call	_SPI1_Exchange8bit
 13463                           
 13464                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13465  005136  0E0C               	movlw	12
 13466  005138  180A               	xorwf	___send_cmd@cmd,w,c
 13467  00513A  A4D8               	btfss	status,2,c
 13468  00513C  D003               	goto	l4113
 13469  00513E  0EFF               	movlw	255
 13470  005140  ECF4  F02A         	call	_SPI1_Exchange8bit
 13471  005144                     l4113:
 13472                           
 13473                           ;diskio.c: 221:  n = 10;
 13474  005144  0E0A               	movlw	10
 13475  005146  6E09               	movwf	___send_cmd@n,c
 13476  005148                     l4115:
 13477                           
 13478                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13479  005148  0EFF               	movlw	255
 13480  00514A  ECF4  F02A         	call	_SPI1_Exchange8bit
 13481  00514E  6E08               	movwf	___send_cmd@res,c
 13482  005150  AE08               	btfss	___send_cmd@res,7,c
 13483  005152  D002               	goto	l4121
 13484  005154  2E09               	decfsz	___send_cmd@n,f,c
 13485  005156  D7F8               	goto	l4115
 13486  005158                     l4121:
 13487                           
 13488                           ;diskio.c: 226:  return res;
 13489  005158  5008               	movf	___send_cmd@res,w,c
 13490  00515A  0012               	return		;funcret
 13491  00515C                     __end_of___send_cmd:
 13492                           	opt callstack 0
 13493                           
 13494 ;; *************** function _select *****************
 13495 ;; Defined at:
 13496 ;;		line 106 in file "diskio.c"
 13497 ;; Parameters:    Size  Location     Type
 13498 ;;		None
 13499 ;; Auto vars:     Size  Location     Type
 13500 ;;		None
 13501 ;; Return value:  Size  Location     Type
 13502 ;;                  1    wreg      unsigned char 
 13503 ;; Registers used:
 13504 ;;		wreg, status,2, status,0, cstack
 13505 ;; Tracked objects:
 13506 ;;		On entry : 0/0
 13507 ;;		On exit  : 0/0
 13508 ;;		Unchanged: 0/0
 13509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13510 ;;      Params:         0       0       0       0       0       0       0       0       0
 13511 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13512 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13513 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13514 ;;Total ram usage:        0 bytes
 13515 ;; Hardware stack levels used:    1
 13516 ;; Hardware stack levels required when called:    2
 13517 ;; This function calls:
 13518 ;;		_SPI1_Exchange8bit
 13519 ;;		_deselect
 13520 ;;		_wait_ready
 13521 ;; This function is called by:
 13522 ;;		___send_cmd
 13523 ;;		_disk_ioctl
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           	psect	text44
 13528  0055A6                     __ptext44:
 13529                           	opt callstack 0
 13530  0055A6                     _select:
 13531                           	opt callstack 23
 13532                           
 13533                           ;incstack = 0
 13534                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13535  0055A6  948A               	bcf	3978,2,c	;volatile
 13536                           
 13537                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13538  0055A8  0EFF               	movlw	255
 13539  0055AA  ECF4  F02A         	call	_SPI1_Exchange8bit
 13540                           
 13541                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13542  0055AE  EC22  F02A         	call	_wait_ready	;wreg free
 13543  0055B2  0900               	iorlw	0
 13544  0055B4  B4D8               	btfsc	status,2,c
 13545  0055B6  D002               	goto	l4071
 13546  0055B8  0E01               	movlw	1
 13547  0055BA  0012               	return	
 13548  0055BC                     l4071:
 13549                           
 13550                           ;diskio.c: 112:  deselect();
 13551  0055BC  EC11  F02B         	call	_deselect	;wreg free
 13552                           
 13553                           ;diskio.c: 113:  return 0;
 13554  0055C0  0E00               	movlw	0
 13555  0055C2  0012               	return		;funcret
 13556  0055C4                     __end_of_select:
 13557                           	opt callstack 0
 13558                           
 13559 ;; *************** function _wait_ready *****************
 13560 ;; Defined at:
 13561 ;;		line 74 in file "diskio.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;		None
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;  tmr             2    1[COMRAM] unsigned short 
 13566 ;; Return value:  Size  Location     Type
 13567 ;;                  1    wreg      unsigned char 
 13568 ;; Registers used:
 13569 ;;		wreg, status,2, status,0, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13575 ;;      Params:         0       0       0       0       0       0       0       0       0
 13576 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13577 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13578 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13579 ;;Total ram usage:        2 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    1
 13582 ;; This function calls:
 13583 ;;		_SPI1_Exchange8bit
 13584 ;; This function is called by:
 13585 ;;		_select
 13586 ;;		_xmit_datablock
 13587 ;; This function uses a non-reentrant model
 13588 ;;
 13589                           
 13590                           	psect	text45
 13591  005444                     __ptext45:
 13592                           	opt callstack 0
 13593  005444                     _wait_ready:
 13594                           	opt callstack 25
 13595                           
 13596                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13597                           
 13598                           ;incstack = 0
 13599  005444  0E13               	movlw	19
 13600  005446  6E03               	movwf	wait_ready@tmr+1,c
 13601  005448  0E88               	movlw	136
 13602  00544A  6E02               	movwf	wait_ready@tmr,c
 13603  00544C  D00D               	goto	l77
 13604  00544E                     l4049:
 13605                           
 13606                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13607  00544E  0EFF               	movlw	255
 13608  005450  ECF4  F02A         	call	_SPI1_Exchange8bit
 13609  005454  0AFF               	xorlw	255
 13610  005456  B4D8               	btfsc	status,2,c
 13611  005458  D00B               	goto	u4520
 13612                           
 13613                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13614  00545A  0E42               	movlw	66
 13615  00545C                     u9017:
 13616  00545C  2EE8               	decfsz	wreg,f,c
 13617  00545E  D7FE               	bra	u9017
 13618  005460  D000               	nop2	
 13619                           
 13620                           ;diskio.c: 81:  }
 13621  005462  0602               	decf	wait_ready@tmr,f,c
 13622  005464  A0D8               	btfss	status,0,c
 13623  005466  0603               	decf	wait_ready@tmr+1,f,c
 13624  005468                     l77:
 13625  005468  5002               	movf	wait_ready@tmr,w,c
 13626  00546A  1003               	iorwf	wait_ready@tmr+1,w,c
 13627  00546C  A4D8               	btfss	status,2,c
 13628  00546E  D7EF               	goto	l4049
 13629  005470                     u4520:
 13630                           
 13631                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13632  005470  5002               	movf	wait_ready@tmr,w,c
 13633  005472  1003               	iorwf	wait_ready@tmr+1,w,c
 13634  005474  B4D8               	btfsc	status,2,c
 13635  005476  D002               	goto	u4530
 13636  005478  0E01               	movlw	1
 13637  00547A  0012               	return	
 13638  00547C                     u4530:
 13639  00547C  0E00               	movlw	0
 13640  00547E  0012               	return		;funcret
 13641  005480                     __end_of_wait_ready:
 13642                           	opt callstack 0
 13643                           
 13644 ;; *************** function _deselect *****************
 13645 ;; Defined at:
 13646 ;;		line 93 in file "diskio.c"
 13647 ;; Parameters:    Size  Location     Type
 13648 ;;		None
 13649 ;; Auto vars:     Size  Location     Type
 13650 ;;		None
 13651 ;; Return value:  Size  Location     Type
 13652 ;;                  1    wreg      void 
 13653 ;; Registers used:
 13654 ;;		wreg, status,2, cstack
 13655 ;; Tracked objects:
 13656 ;;		On entry : 0/0
 13657 ;;		On exit  : 0/0
 13658 ;;		Unchanged: 0/0
 13659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13660 ;;      Params:         0       0       0       0       0       0       0       0       0
 13661 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13662 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13663 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13664 ;;Total ram usage:        0 bytes
 13665 ;; Hardware stack levels used:    1
 13666 ;; Hardware stack levels required when called:    1
 13667 ;; This function calls:
 13668 ;;		_SPI1_Exchange8bit
 13669 ;; This function is called by:
 13670 ;;		_select
 13671 ;;		___send_cmd
 13672 ;;		_disk_initialize
 13673 ;;		_disk_read
 13674 ;;		_disk_write
 13675 ;;		_disk_ioctl
 13676 ;; This function uses a non-reentrant model
 13677 ;;
 13678                           
 13679                           	psect	text46
 13680  005622                     __ptext46:
 13681                           	opt callstack 0
 13682  005622                     _deselect:
 13683                           	opt callstack 23
 13684                           
 13685                           ;incstack = 0
 13686                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13687  005622  848A               	bsf	3978,2,c	;volatile
 13688                           
 13689                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13690  005624  0EFF               	movlw	255
 13691  005626  ECF4  F02A         	call	_SPI1_Exchange8bit
 13692  00562A  0012               	return		;funcret
 13693  00562C                     __end_of_deselect:
 13694                           	opt callstack 0
 13695                           
 13696 ;; *************** function _rcvr_datablock *****************
 13697 ;; Defined at:
 13698 ;;		line 123 in file "diskio.c"
 13699 ;; Parameters:    Size  Location     Type
 13700 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13701 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 13702 ;;  btr             2    3[COMRAM] unsigned short 
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  tmr             2    5[COMRAM] unsigned short 
 13705 ;;  token           1    7[COMRAM] unsigned char 
 13706 ;; Return value:  Size  Location     Type
 13707 ;;                  1    wreg      unsigned char 
 13708 ;; Registers used:
 13709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13710 ;; Tracked objects:
 13711 ;;		On entry : 0/0
 13712 ;;		On exit  : 0/0
 13713 ;;		Unchanged: 0/0
 13714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13715 ;;      Params:         4       0       0       0       0       0       0       0       0
 13716 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13717 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13718 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13719 ;;Total ram usage:        7 bytes
 13720 ;; Hardware stack levels used:    1
 13721 ;; Hardware stack levels required when called:    1
 13722 ;; This function calls:
 13723 ;;		_SPI1_Exchange8bit
 13724 ;; This function is called by:
 13725 ;;		_disk_read
 13726 ;;		_disk_ioctl
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           	psect	text47
 13731  005256                     __ptext47:
 13732                           	opt callstack 0
 13733  005256                     _rcvr_datablock:
 13734                           	opt callstack 26
 13735                           
 13736                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13737                           
 13738                           ;incstack = 0
 13739  005256  0E07               	movlw	7
 13740  005258  6E07               	movwf	rcvr_datablock@tmr+1,c
 13741  00525A  0ED0               	movlw	208
 13742  00525C  6E06               	movwf	rcvr_datablock@tmr,c
 13743  00525E  D00E               	goto	l95
 13744  005260                     l4173:
 13745                           
 13746                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13747  005260  0EFF               	movlw	255
 13748  005262  ECF4  F02A         	call	_SPI1_Exchange8bit
 13749  005266  6E08               	movwf	rcvr_datablock@token,c
 13750                           
 13751                           ;diskio.c: 134:   if (token != 0xFF) break;
 13752  005268  2808               	incf	rcvr_datablock@token,w,c
 13753  00526A  A4D8               	btfss	status,2,c
 13754  00526C  D00B               	goto	u4700
 13755                           
 13756                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13757  00526E  0E42               	movlw	66
 13758  005270                     u9027:
 13759  005270  2EE8               	decfsz	wreg,f,c
 13760  005272  D7FE               	bra	u9027
 13761  005274  D000               	nop2	
 13762                           
 13763                           ;diskio.c: 136:  }
 13764  005276  0606               	decf	rcvr_datablock@tmr,f,c
 13765  005278  A0D8               	btfss	status,0,c
 13766  00527A  0607               	decf	rcvr_datablock@tmr+1,f,c
 13767  00527C                     l95:
 13768  00527C  5006               	movf	rcvr_datablock@tmr,w,c
 13769  00527E  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13770  005280  A4D8               	btfss	status,2,c
 13771  005282  D7EE               	goto	l4173
 13772  005284                     u4700:
 13773                           
 13774                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 13775  005284  0EFE               	movlw	254
 13776  005286  1808               	xorwf	rcvr_datablock@token,w,c
 13777  005288  B4D8               	btfsc	status,2,c
 13778  00528A  D002               	goto	l4189
 13779  00528C  0E00               	movlw	0
 13780  00528E  0012               	return	
 13781  005290                     l4189:
 13782                           
 13783                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 13784  005290  0EFF               	movlw	255
 13785  005292  ECF4  F02A         	call	_SPI1_Exchange8bit
 13786  005296  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 13787  00529A  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 13788  00529E  6EDF               	movwf	indf2,c
 13789  0052A0  4A02               	infsnz	rcvr_datablock@buff,f,c
 13790  0052A2  2A03               	incf	rcvr_datablock@buff+1,f,c
 13791  0052A4  0604               	decf	rcvr_datablock@btr,f,c
 13792  0052A6  A0D8               	btfss	status,0,c
 13793  0052A8  0605               	decf	rcvr_datablock@btr+1,f,c
 13794  0052AA  5004               	movf	rcvr_datablock@btr,w,c
 13795  0052AC  1005               	iorwf	rcvr_datablock@btr+1,w,c
 13796  0052AE  A4D8               	btfss	status,2,c
 13797  0052B0  D7EF               	goto	l4189
 13798                           
 13799                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 13800  0052B2  0EFF               	movlw	255
 13801  0052B4  ECF4  F02A         	call	_SPI1_Exchange8bit
 13802                           
 13803                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 13804  0052B8  0EFF               	movlw	255
 13805  0052BA  ECF4  F02A         	call	_SPI1_Exchange8bit
 13806                           
 13807                           ;diskio.c: 145:  return 1;
 13808  0052BE  0E01               	movlw	1
 13809  0052C0  0012               	return		;funcret
 13810  0052C2                     __end_of_rcvr_datablock:
 13811                           	opt callstack 0
 13812                           
 13813 ;; *************** function _SPI1_Exchange8bit *****************
 13814 ;; Defined at:
 13815 ;;		line 90 in file "mcc_generated_files/spi1.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;  data            1    wreg     unsigned char 
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;  data            1    0[COMRAM] unsigned char 
 13820 ;; Return value:  Size  Location     Type
 13821 ;;                  1    wreg      unsigned char 
 13822 ;; Registers used:
 13823 ;;		wreg, status,2
 13824 ;; Tracked objects:
 13825 ;;		On entry : 0/0
 13826 ;;		On exit  : 0/0
 13827 ;;		Unchanged: 0/0
 13828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13829 ;;      Params:         0       0       0       0       0       0       0       0       0
 13830 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13831 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13832 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13833 ;;Total ram usage:        1 bytes
 13834 ;; Hardware stack levels used:    1
 13835 ;; This function calls:
 13836 ;;		Nothing
 13837 ;; This function is called by:
 13838 ;;		_wait_ready
 13839 ;;		_deselect
 13840 ;;		_select
 13841 ;;		_rcvr_datablock
 13842 ;;		_xmit_datablock
 13843 ;;		___send_cmd
 13844 ;;		_disk_initialize
 13845 ;;		_disk_ioctl
 13846 ;;		_SPI1_Exchange8bitBuffer
 13847 ;; This function uses a non-reentrant model
 13848 ;;
 13849                           
 13850                           	psect	text48
 13851  0055E8                     __ptext48:
 13852                           	opt callstack 0
 13853  0055E8                     _SPI1_Exchange8bit:
 13854                           	opt callstack 25
 13855                           
 13856                           ;incstack = 0
 13857                           ;SPI1_Exchange8bit@data stored from wreg
 13858  0055E8  6E01               	movwf	SPI1_Exchange8bit@data,c
 13859                           
 13860                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 13861  0055EA  9EC6               	bcf	4038,7,c	;volatile
 13862                           
 13863                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 13864  0055EC  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 13865  0055F0                     l820:
 13866                           
 13867                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 13868  0055F0  A0C7               	btfss	4039,0,c	;volatile
 13869  0055F2  D7FE               	goto	l820
 13870                           
 13871                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 13872  0055F4  50C9               	movf	4041,w,c	;volatile
 13873  0055F6  0012               	return		;funcret
 13874  0055F8                     __end_of_SPI1_Exchange8bit:
 13875                           	opt callstack 0
 13876                           
 13877 ;; *************** function ___delay_sec *****************
 13878 ;; Defined at:
 13879 ;;		line 9 in file "Main.c"
 13880 ;; Parameters:    Size  Location     Type
 13881 ;;  sec             1    wreg     unsigned char 
 13882 ;; Auto vars:     Size  Location     Type
 13883 ;;  sec             1    3[COMRAM] unsigned char 
 13884 ;;  i               1    4[COMRAM] unsigned char 
 13885 ;; Return value:  Size  Location     Type
 13886 ;;                  1    wreg      void 
 13887 ;; Registers used:
 13888 ;;		wreg, status,2, status,0, prodl, prodh
 13889 ;; Tracked objects:
 13890 ;;		On entry : 0/0
 13891 ;;		On exit  : 0/0
 13892 ;;		Unchanged: 0/0
 13893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13894 ;;      Params:         0       0       0       0       0       0       0       0       0
 13895 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13896 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13897 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13898 ;;Total ram usage:        5 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; This function calls:
 13901 ;;		Nothing
 13902 ;; This function is called by:
 13903 ;;		_main
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           	psect	text49
 13908  0054BA                     __ptext49:
 13909                           	opt callstack 0
 13910  0054BA                     ___delay_sec:
 13911                           	opt callstack 30
 13912                           
 13913                           ;incstack = 0
 13914                           ;___delay_sec@sec stored from wreg
 13915  0054BA  6E04               	movwf	___delay_sec@sec,c
 13916                           
 13917                           ;Main.c: 10:     for(char i=0;i<=(50*sec);i++) {
 13918  0054BC  0E00               	movlw	0
 13919  0054BE  6E05               	movwf	___delay_sec@i,c
 13920  0054C0  D008               	goto	l5893
 13921  0054C2                     l5889:
 13922                           
 13923                           ;Main.c: 11:         _delay((unsigned long)((20)*(8000000/4000.0)));
 13924  0054C2  0E34               	movlw	52
 13925  0054C4  6E01               	movwf	??___delay_sec& (0+255),c
 13926  0054C6  0EF2               	movlw	242
 13927  0054C8                     u9037:
 13928  0054C8  2EE8               	decfsz	wreg,f,c
 13929  0054CA  D7FE               	bra	u9037
 13930  0054CC  2E01               	decfsz	??___delay_sec& (0+255),f,c
 13931  0054CE  D7FC               	bra	u9037
 13932                           
 13933                           ;Main.c: 12:     }
 13934  0054D0  2A05               	incf	___delay_sec@i,f,c
 13935  0054D2                     l5893:
 13936  0054D2  5005               	movf	___delay_sec@i,w,c
 13937  0054D4  6E01               	movwf	??___delay_sec& (0+255),c
 13938  0054D6  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 13939  0054D8  5004               	movf	___delay_sec@sec,w,c
 13940  0054DA  0D32               	mullw	50
 13941  0054DC  5001               	movf	??___delay_sec,w,c
 13942  0054DE  5CF3               	subwf	prodl,w,c
 13943  0054E0  50F4               	movf	prodh,w,c
 13944  0054E2  0A80               	xorlw	128
 13945  0054E4  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 13946  0054E6  5002               	movf	??___delay_sec+1,w,c
 13947  0054E8  0A80               	xorlw	128
 13948  0054EA  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 13949  0054EC  A0D8               	btfss	status,0,c
 13950  0054EE  0012               	return	
 13951  0054F0  D7E8               	goto	l5889
 13952  0054F2                     __end_of___delay_sec:
 13953                           	opt callstack 0
 13954                           
 13955 ;; *************** function _SYSTEM_Initialize *****************
 13956 ;; Defined at:
 13957 ;;		line 116 in file "mcc_generated_files/mcc.c"
 13958 ;; Parameters:    Size  Location     Type
 13959 ;;		None
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;		None
 13962 ;; Return value:  Size  Location     Type
 13963 ;;                  1    wreg      void 
 13964 ;; Registers used:
 13965 ;;		wreg, status,2, cstack
 13966 ;; Tracked objects:
 13967 ;;		On entry : 0/0
 13968 ;;		On exit  : 0/0
 13969 ;;		Unchanged: 0/0
 13970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13971 ;;      Params:         0       0       0       0       0       0       0       0       0
 13972 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13973 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13974 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13975 ;;Total ram usage:        0 bytes
 13976 ;; Hardware stack levels used:    1
 13977 ;; Hardware stack levels required when called:    1
 13978 ;; This function calls:
 13979 ;;		_OSCILLATOR_Initialize
 13980 ;;		_PIN_MANAGER_Initialize
 13981 ;;		_SPI1_Initialize
 13982 ;; This function is called by:
 13983 ;;		_main
 13984 ;; This function uses a non-reentrant model
 13985 ;;
 13986                           
 13987                           	psect	text50
 13988  005606                     __ptext50:
 13989                           	opt callstack 0
 13990  005606                     _SYSTEM_Initialize:
 13991                           	opt callstack 29
 13992                           
 13993                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 13994                           
 13995                           ;incstack = 0
 13996  005606  EC79  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 13997                           
 13998                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 13999  00560A  ECEB  F02A         	call	_OSCILLATOR_Initialize	;wreg free
 14000                           
 14001                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14002  00560E  EC0A  F02B         	call	_SPI1_Initialize	;wreg free
 14003  005612  0012               	return		;funcret
 14004  005614                     __end_of_SYSTEM_Initialize:
 14005                           	opt callstack 0
 14006                           
 14007 ;; *************** function _SPI1_Initialize *****************
 14008 ;; Defined at:
 14009 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14010 ;; Parameters:    Size  Location     Type
 14011 ;;		None
 14012 ;; Auto vars:     Size  Location     Type
 14013 ;;		None
 14014 ;; Return value:  Size  Location     Type
 14015 ;;                  1    wreg      void 
 14016 ;; Registers used:
 14017 ;;		wreg, status,2
 14018 ;; Tracked objects:
 14019 ;;		On entry : 0/0
 14020 ;;		On exit  : 0/0
 14021 ;;		Unchanged: 0/0
 14022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14023 ;;      Params:         0       0       0       0       0       0       0       0       0
 14024 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14025 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14026 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14027 ;;Total ram usage:        0 bytes
 14028 ;; Hardware stack levels used:    1
 14029 ;; This function calls:
 14030 ;;		Nothing
 14031 ;; This function is called by:
 14032 ;;		_disk_initialize
 14033 ;;		_SYSTEM_Initialize
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           	psect	text51
 14038  005614                     __ptext51:
 14039                           	opt callstack 0
 14040  005614                     _SPI1_Initialize:
 14041                           	opt callstack 27
 14042                           
 14043                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14044                           
 14045                           ;incstack = 0
 14046  005614  0E40               	movlw	64
 14047  005616  6EC7               	movwf	4039,c	;volatile
 14048                           
 14049                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14050  005618  0E22               	movlw	34
 14051  00561A  6EC6               	movwf	4038,c	;volatile
 14052                           
 14053                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14054  00561C  0E00               	movlw	0
 14055  00561E  6EC8               	movwf	4040,c	;volatile
 14056  005620  0012               	return		;funcret
 14057  005622                     __end_of_SPI1_Initialize:
 14058                           	opt callstack 0
 14059                           
 14060 ;; *************** function _PIN_MANAGER_Initialize *****************
 14061 ;; Defined at:
 14062 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14063 ;; Parameters:    Size  Location     Type
 14064 ;;		None
 14065 ;; Auto vars:     Size  Location     Type
 14066 ;;		None
 14067 ;; Return value:  Size  Location     Type
 14068 ;;                  1    wreg      void 
 14069 ;; Registers used:
 14070 ;;		wreg, status,2
 14071 ;; Tracked objects:
 14072 ;;		On entry : 0/0
 14073 ;;		On exit  : 0/0
 14074 ;;		Unchanged: 0/0
 14075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14076 ;;      Params:         0       0       0       0       0       0       0       0       0
 14077 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14078 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14079 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14080 ;;Total ram usage:        0 bytes
 14081 ;; Hardware stack levels used:    1
 14082 ;; This function calls:
 14083 ;;		Nothing
 14084 ;; This function is called by:
 14085 ;;		_SYSTEM_Initialize
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089                           	psect	text52
 14090  0054F2                     __ptext52:
 14091                           	opt callstack 0
 14092  0054F2                     _PIN_MANAGER_Initialize:
 14093                           	opt callstack 29
 14094                           
 14095                           ;mcc_generated_files/pin_manager.c: 56:     LATE = 0x00;
 14096                           
 14097                           ;incstack = 0
 14098  0054F2  0E00               	movlw	0
 14099  0054F4  6E8D               	movwf	3981,c	;volatile
 14100                           
 14101                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 14102  0054F6  0E00               	movlw	0
 14103  0054F8  6E8C               	movwf	3980,c	;volatile
 14104                           
 14105                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14106  0054FA  0E04               	movlw	4
 14107  0054FC  6E8A               	movwf	3978,c	;volatile
 14108                           
 14109                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14110  0054FE  0E00               	movlw	0
 14111  005500  6E8B               	movwf	3979,c	;volatile
 14112                           
 14113                           ;mcc_generated_files/pin_manager.c: 65:     TRISE = 0x07;
 14114  005502  0E07               	movlw	7
 14115  005504  6E96               	movwf	3990,c	;volatile
 14116                           
 14117                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14118  005506  0EF1               	movlw	241
 14119  005508  6E93               	movwf	3987,c	;volatile
 14120                           
 14121                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14122  00550A  0EC7               	movlw	199
 14123  00550C  6E94               	movwf	3988,c	;volatile
 14124                           
 14125                           ;mcc_generated_files/pin_manager.c: 69:     TRISD = 0x00;
 14126  00550E  0E00               	movlw	0
 14127  005510  6E95               	movwf	3989,c	;volatile
 14128                           
 14129                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14130  005512  0EC4               	movlw	196
 14131  005514  010F               	movlb	15	; () banked
 14132  005516  6F5D               	movwf	93,b	;volatile
 14133                           
 14134                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14135  005518  0E30               	movlw	48
 14136  00551A  6F5C               	movwf	92,b	;volatile
 14137                           
 14138                           ;mcc_generated_files/pin_manager.c: 76:     ANSELD = 0x00;
 14139  00551C  0E00               	movlw	0
 14140  00551E  6F5E               	movwf	94,b	;volatile
 14141                           
 14142                           ;mcc_generated_files/pin_manager.c: 77:     ANSELE = 0x07;
 14143  005520  0E07               	movlw	7
 14144  005522  6F5F               	movwf	95,b	;volatile
 14145                           
 14146                           ; BSR set to: 15
 14147                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14148  005524  6885               	setf	3973,c	;volatile
 14149                           
 14150                           ; BSR set to: 15
 14151                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14152  005526  9EF1               	bcf	4081,7,c	;volatile
 14153                           
 14154                           ; BSR set to: 15
 14155  005528  0012               	return		;funcret
 14156  00552A                     __end_of_PIN_MANAGER_Initialize:
 14157                           	opt callstack 0
 14158                           
 14159 ;; *************** function _OSCILLATOR_Initialize *****************
 14160 ;; Defined at:
 14161 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14162 ;; Parameters:    Size  Location     Type
 14163 ;;		None
 14164 ;; Auto vars:     Size  Location     Type
 14165 ;;		None
 14166 ;; Return value:  Size  Location     Type
 14167 ;;                  1    wreg      void 
 14168 ;; Registers used:
 14169 ;;		wreg, status,2
 14170 ;; Tracked objects:
 14171 ;;		On entry : 0/0
 14172 ;;		On exit  : 0/0
 14173 ;;		Unchanged: 0/0
 14174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14175 ;;      Params:         0       0       0       0       0       0       0       0       0
 14176 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14177 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14178 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14179 ;;Total ram usage:        0 bytes
 14180 ;; Hardware stack levels used:    1
 14181 ;; This function calls:
 14182 ;;		Nothing
 14183 ;; This function is called by:
 14184 ;;		_SYSTEM_Initialize
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188                           	psect	text53
 14189  0055D6                     __ptext53:
 14190                           	opt callstack 0
 14191  0055D6                     _OSCILLATOR_Initialize:
 14192                           	opt callstack 29
 14193                           
 14194                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14195                           
 14196                           ; BSR set to: 15
 14197                           ;incstack = 0
 14198  0055D6  0E60               	movlw	96
 14199  0055D8  6ED3               	movwf	4051,c	;volatile
 14200                           
 14201                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14202  0055DA  0E00               	movlw	0
 14203  0055DC  6ED2               	movwf	4050,c	;volatile
 14204                           
 14205                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14206  0055DE  0E00               	movlw	0
 14207  0055E0  6E9B               	movwf	3995,c	;volatile
 14208                           
 14209                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14210  0055E2  0E00               	movlw	0
 14211  0055E4  6EB5               	movwf	4021,c	;volatile
 14212  0055E6  0012               	return		;funcret
 14213  0055E8                     __end_of_OSCILLATOR_Initialize:
 14214                           	opt callstack 0
 14215                           
 14216 ;; *************** function _Error *****************
 14217 ;; Defined at:
 14218 ;;		line 11 in file "./Errores.h"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;  a               1    wreg     unsigned char 
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;  a               1    0[COMRAM] unsigned char 
 14223 ;; Return value:  Size  Location     Type
 14224 ;;                  1    wreg      void 
 14225 ;; Registers used:
 14226 ;;		wreg, status,2, status,0
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14232 ;;      Params:         0       0       0       0       0       0       0       0       0
 14233 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14234 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14235 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14236 ;;Total ram usage:        1 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; This function calls:
 14239 ;;		Nothing
 14240 ;; This function is called by:
 14241 ;;		_main
 14242 ;; This function uses a non-reentrant model
 14243 ;;
 14244                           
 14245                           	psect	text54
 14246  004C2E                     __ptext54:
 14247                           	opt callstack 0
 14248  004C2E                     _Error:
 14249                           	opt callstack 30
 14250                           
 14251                           ;incstack = 0
 14252                           ;Error@a stored from wreg
 14253  004C2E  6E01               	movwf	Error@a,c
 14254                           
 14255                           ;./Errores.h: 12:     if (a == 1){
 14256  004C30  0401               	decf	Error@a,w,c
 14257  004C32  A4D8               	btfss	status,2,c
 14258  004C34  D008               	goto	l5801
 14259                           
 14260                           ;./Errores.h: 13:         LATAbits.LATA0 ^= 1;
 14261  004C36  7089               	btg	3977,0,c	;volatile
 14262                           
 14263                           ;./Errores.h: 14:         LATAbits.LATA1 ^= 1;
 14264  004C38  7289               	btg	3977,1,c	;volatile
 14265                           
 14266                           ;./Errores.h: 15:         LATAbits.LATA2 ^= 1;
 14267  004C3A  7489               	btg	3977,2,c	;volatile
 14268                           
 14269                           ;./Errores.h: 16:         LATAbits.LATA3 ^= 1;
 14270  004C3C  7689               	btg	3977,3,c	;volatile
 14271                           
 14272                           ;./Errores.h: 17:         LATAbits.LATA4 ^= 1;
 14273  004C3E  7889               	btg	3977,4,c	;volatile
 14274                           
 14275                           ;./Errores.h: 18:         LATAbits.LATA5 ^= 1;
 14276  004C40  7A89               	btg	3977,5,c	;volatile
 14277                           
 14278                           ;./Errores.h: 19:         LATAbits.LATA6 ^= 1;
 14279  004C42  7C89               	btg	3977,6,c	;volatile
 14280                           
 14281                           ;./Errores.h: 20:         LATAbits.LATA7 ^= 1;
 14282  004C44  7E89               	btg	3977,7,c	;volatile
 14283  004C46                     l5801:
 14284                           
 14285                           ;./Errores.h: 22:     if (a == 2){
 14286  004C46  0E02               	movlw	2
 14287  004C48  1801               	xorwf	Error@a,w,c
 14288  004C4A  A4D8               	btfss	status,2,c
 14289  004C4C  D008               	goto	l5807
 14290                           
 14291                           ;./Errores.h: 23:         LATAbits.LATA0 ^= 0;
 14292  004C4E  5089               	movf	3977,w,c	;volatile
 14293                           
 14294                           ;./Errores.h: 24:         LATAbits.LATA1 ^= 0;
 14295  004C50  5089               	movf	3977,w,c	;volatile
 14296                           
 14297                           ;./Errores.h: 25:         LATAbits.LATA2 ^= 0;
 14298  004C52  5089               	movf	3977,w,c	;volatile
 14299                           
 14300                           ;./Errores.h: 26:         LATAbits.LATA3 ^= 0;
 14301  004C54  5089               	movf	3977,w,c	;volatile
 14302                           
 14303                           ;./Errores.h: 27:         LATAbits.LATA4 ^= 0;
 14304  004C56  5089               	movf	3977,w,c	;volatile
 14305                           
 14306                           ;./Errores.h: 28:         LATAbits.LATA5 ^= 0;
 14307  004C58  5089               	movf	3977,w,c	;volatile
 14308                           
 14309                           ;./Errores.h: 29:         LATAbits.LATA6 ^= 0;
 14310  004C5A  5089               	movf	3977,w,c	;volatile
 14311                           
 14312                           ;./Errores.h: 30:         LATAbits.LATA7 ^= 1;
 14313  004C5C  7E89               	btg	3977,7,c	;volatile
 14314  004C5E                     l5807:
 14315                           
 14316                           ;./Errores.h: 32:     if (a == 3){
 14317  004C5E  0E03               	movlw	3
 14318  004C60  1801               	xorwf	Error@a,w,c
 14319  004C62  A4D8               	btfss	status,2,c
 14320  004C64  D008               	goto	l5815
 14321                           
 14322                           ;./Errores.h: 33:         LATAbits.LATA0 ^= 0;
 14323  004C66  5089               	movf	3977,w,c	;volatile
 14324                           
 14325                           ;./Errores.h: 34:         LATAbits.LATA1 ^= 0;
 14326  004C68  5089               	movf	3977,w,c	;volatile
 14327                           
 14328                           ;./Errores.h: 35:         LATAbits.LATA2 ^= 0;
 14329  004C6A  5089               	movf	3977,w,c	;volatile
 14330                           
 14331                           ;./Errores.h: 36:         LATAbits.LATA3 ^= 0;
 14332  004C6C  5089               	movf	3977,w,c	;volatile
 14333                           
 14334                           ;./Errores.h: 37:         LATAbits.LATA4 ^= 0;
 14335  004C6E  5089               	movf	3977,w,c	;volatile
 14336                           
 14337                           ;./Errores.h: 38:         LATAbits.LATA5 ^= 0;
 14338  004C70  5089               	movf	3977,w,c	;volatile
 14339                           
 14340                           ;./Errores.h: 39:         LATAbits.LATA6 ^= 1;
 14341  004C72  7C89               	btg	3977,6,c	;volatile
 14342                           
 14343                           ;./Errores.h: 40:         LATAbits.LATA7 ^= 1;
 14344  004C74  7E89               	btg	3977,7,c	;volatile
 14345  004C76                     l5815:
 14346                           
 14347                           ;./Errores.h: 42:     if (a == 4){
 14348  004C76  0E04               	movlw	4
 14349  004C78  1801               	xorwf	Error@a,w,c
 14350  004C7A  A4D8               	btfss	status,2,c
 14351  004C7C  D008               	goto	l5825
 14352                           
 14353                           ;./Errores.h: 43:         LATAbits.LATA0 ^= 0;
 14354  004C7E  5089               	movf	3977,w,c	;volatile
 14355                           
 14356                           ;./Errores.h: 44:         LATAbits.LATA1 ^= 0;
 14357  004C80  5089               	movf	3977,w,c	;volatile
 14358                           
 14359                           ;./Errores.h: 45:         LATAbits.LATA2 ^= 0;
 14360  004C82  5089               	movf	3977,w,c	;volatile
 14361                           
 14362                           ;./Errores.h: 46:         LATAbits.LATA3 ^= 0;
 14363  004C84  5089               	movf	3977,w,c	;volatile
 14364                           
 14365                           ;./Errores.h: 47:         LATAbits.LATA4 ^= 0;
 14366  004C86  5089               	movf	3977,w,c	;volatile
 14367                           
 14368                           ;./Errores.h: 48:         LATAbits.LATA5 ^= 1;
 14369  004C88  7A89               	btg	3977,5,c	;volatile
 14370                           
 14371                           ;./Errores.h: 49:         LATAbits.LATA6 ^= 1;
 14372  004C8A  7C89               	btg	3977,6,c	;volatile
 14373                           
 14374                           ;./Errores.h: 50:         LATAbits.LATA7 ^= 1;
 14375  004C8C  7E89               	btg	3977,7,c	;volatile
 14376  004C8E                     l5825:
 14377                           
 14378                           ;./Errores.h: 52:     if (a == 5){
 14379  004C8E  0E05               	movlw	5
 14380  004C90  1801               	xorwf	Error@a,w,c
 14381  004C92  A4D8               	btfss	status,2,c
 14382  004C94  D008               	goto	l5837
 14383                           
 14384                           ;./Errores.h: 53:         LATAbits.LATA0 ^= 0;
 14385  004C96  5089               	movf	3977,w,c	;volatile
 14386                           
 14387                           ;./Errores.h: 54:         LATAbits.LATA1 ^= 0;
 14388  004C98  5089               	movf	3977,w,c	;volatile
 14389                           
 14390                           ;./Errores.h: 55:         LATAbits.LATA2 ^= 0;
 14391  004C9A  5089               	movf	3977,w,c	;volatile
 14392                           
 14393                           ;./Errores.h: 56:         LATAbits.LATA3 ^= 0;
 14394  004C9C  5089               	movf	3977,w,c	;volatile
 14395                           
 14396                           ;./Errores.h: 57:         LATAbits.LATA4 ^= 1;
 14397  004C9E  7889               	btg	3977,4,c	;volatile
 14398                           
 14399                           ;./Errores.h: 58:         LATAbits.LATA5 ^= 1;
 14400  004CA0  7A89               	btg	3977,5,c	;volatile
 14401                           
 14402                           ;./Errores.h: 59:         LATAbits.LATA6 ^= 1;
 14403  004CA2  7C89               	btg	3977,6,c	;volatile
 14404                           
 14405                           ;./Errores.h: 60:         LATAbits.LATA7 ^= 1;
 14406  004CA4  7E89               	btg	3977,7,c	;volatile
 14407  004CA6                     l5837:
 14408                           
 14409                           ;./Errores.h: 62:     if (a == 6){
 14410  004CA6  0E06               	movlw	6
 14411  004CA8  1801               	xorwf	Error@a,w,c
 14412  004CAA  A4D8               	btfss	status,2,c
 14413  004CAC  D008               	goto	l5851
 14414                           
 14415                           ;./Errores.h: 63:         LATAbits.LATA0 ^= 0;
 14416  004CAE  5089               	movf	3977,w,c	;volatile
 14417                           
 14418                           ;./Errores.h: 64:         LATAbits.LATA1 ^= 0;
 14419  004CB0  5089               	movf	3977,w,c	;volatile
 14420                           
 14421                           ;./Errores.h: 65:         LATAbits.LATA2 ^= 0;
 14422  004CB2  5089               	movf	3977,w,c	;volatile
 14423                           
 14424                           ;./Errores.h: 66:         LATAbits.LATA3 ^= 1;
 14425  004CB4  7689               	btg	3977,3,c	;volatile
 14426                           
 14427                           ;./Errores.h: 67:         LATAbits.LATA4 ^= 1;
 14428  004CB6  7889               	btg	3977,4,c	;volatile
 14429                           
 14430                           ;./Errores.h: 68:         LATAbits.LATA5 ^= 1;
 14431  004CB8  7A89               	btg	3977,5,c	;volatile
 14432                           
 14433                           ;./Errores.h: 69:         LATAbits.LATA6 ^= 1;
 14434  004CBA  7C89               	btg	3977,6,c	;volatile
 14435                           
 14436                           ;./Errores.h: 70:         LATAbits.LATA7 ^= 1;
 14437  004CBC  7E89               	btg	3977,7,c	;volatile
 14438  004CBE                     l5851:
 14439                           
 14440                           ;./Errores.h: 72:     if (a == 7){
 14441  004CBE  0E07               	movlw	7
 14442  004CC0  1801               	xorwf	Error@a,w,c
 14443  004CC2  A4D8               	btfss	status,2,c
 14444  004CC4  D008               	goto	l5867
 14445                           
 14446                           ;./Errores.h: 73:         LATAbits.LATA0 ^= 0;
 14447  004CC6  5089               	movf	3977,w,c	;volatile
 14448                           
 14449                           ;./Errores.h: 74:         LATAbits.LATA1 ^= 0;
 14450  004CC8  5089               	movf	3977,w,c	;volatile
 14451                           
 14452                           ;./Errores.h: 75:         LATAbits.LATA2 ^= 1;
 14453  004CCA  7489               	btg	3977,2,c	;volatile
 14454                           
 14455                           ;./Errores.h: 76:         LATAbits.LATA3 ^= 1;
 14456  004CCC  7689               	btg	3977,3,c	;volatile
 14457                           
 14458                           ;./Errores.h: 77:         LATAbits.LATA4 ^= 1;
 14459  004CCE  7889               	btg	3977,4,c	;volatile
 14460                           
 14461                           ;./Errores.h: 78:         LATAbits.LATA5 ^= 1;
 14462  004CD0  7A89               	btg	3977,5,c	;volatile
 14463                           
 14464                           ;./Errores.h: 79:         LATAbits.LATA6 ^= 1;
 14465  004CD2  7C89               	btg	3977,6,c	;volatile
 14466                           
 14467                           ;./Errores.h: 80:         LATAbits.LATA7 ^= 1;
 14468  004CD4  7E89               	btg	3977,7,c	;volatile
 14469  004CD6                     l5867:
 14470                           
 14471                           ;./Errores.h: 82:     if (a == 11){
 14472  004CD6  0E0B               	movlw	11
 14473  004CD8  1801               	xorwf	Error@a,w,c
 14474  004CDA  A4D8               	btfss	status,2,c
 14475  004CDC  D008               	goto	l5883
 14476                           
 14477                           ;./Errores.h: 83:         LATAbits.LATA0 ^= 0;
 14478  004CDE  5089               	movf	3977,w,c	;volatile
 14479                           
 14480                           ;./Errores.h: 84:         LATAbits.LATA1 ^= 1;
 14481  004CE0  7289               	btg	3977,1,c	;volatile
 14482                           
 14483                           ;./Errores.h: 85:         LATAbits.LATA2 ^= 0;
 14484  004CE2  5089               	movf	3977,w,c	;volatile
 14485                           
 14486                           ;./Errores.h: 86:         LATAbits.LATA3 ^= 0;
 14487  004CE4  5089               	movf	3977,w,c	;volatile
 14488                           
 14489                           ;./Errores.h: 87:         LATAbits.LATA4 ^= 0;
 14490  004CE6  5089               	movf	3977,w,c	;volatile
 14491                           
 14492                           ;./Errores.h: 88:         LATAbits.LATA5 ^= 1;
 14493  004CE8  7A89               	btg	3977,5,c	;volatile
 14494                           
 14495                           ;./Errores.h: 89:         LATAbits.LATA6 ^= 0;
 14496  004CEA  5089               	movf	3977,w,c	;volatile
 14497                           
 14498                           ;./Errores.h: 90:         LATAbits.LATA7 ^= 1;
 14499  004CEC  7E89               	btg	3977,7,c	;volatile
 14500  004CEE                     l5883:
 14501                           
 14502                           ;./Errores.h: 92:     if(a == 15) {
 14503  004CEE  0E0F               	movlw	15
 14504  004CF0  1801               	xorwf	Error@a,w,c
 14505  004CF2  A4D8               	btfss	status,2,c
 14506  004CF4  0012               	return	
 14507                           
 14508                           ;./Errores.h: 93:         LATAbits.LATA0 ^= 0;
 14509  004CF6  5089               	movf	3977,w,c	;volatile
 14510  004CF8  0012               	return		;funcret
 14511  004CFA                     __end_of_Error:
 14512                           	opt callstack 0
 14513                           
 14514                           	psect	rparam
 14515  0000                     tosu	equ	0xFFF
 14516                           tosh	equ	0xFFE
 14517                           tosl	equ	0xFFD
 14518                           stkptr	equ	0xFFC
 14519                           pclatu	equ	0xFFB
 14520                           pclath	equ	0xFFA
 14521                           pcl	equ	0xFF9
 14522                           tblptru	equ	0xFF8
 14523                           tblptrh	equ	0xFF7
 14524                           tblptrl	equ	0xFF6
 14525                           tablat	equ	0xFF5
 14526                           prodh	equ	0xFF4
 14527                           prodl	equ	0xFF3
 14528                           indf0	equ	0xFEF
 14529                           postinc0	equ	0xFEE
 14530                           postdec0	equ	0xFED
 14531                           preinc0	equ	0xFEC
 14532                           plusw0	equ	0xFEB
 14533                           fsr0h	equ	0xFEA
 14534                           fsr0l	equ	0xFE9
 14535                           wreg	equ	0xFE8
 14536                           indf1	equ	0xFE7
 14537                           postinc1	equ	0xFE6
 14538                           postdec1	equ	0xFE5
 14539                           preinc1	equ	0xFE4
 14540                           plusw1	equ	0xFE3
 14541                           fsr1h	equ	0xFE2
 14542                           fsr1l	equ	0xFE1
 14543                           bsr	equ	0xFE0
 14544                           indf2	equ	0xFDF
 14545                           postinc2	equ	0xFDE
 14546                           postdec2	equ	0xFDD
 14547                           preinc2	equ	0xFDC
 14548                           plusw2	equ	0xFDB
 14549                           fsr2h	equ	0xFDA
 14550                           fsr2l	equ	0xFD9
 14551                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    114     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> main@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 21
		 -> STR_4(CODE[21]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_4(CODE[21]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S400$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S400$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S400$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S83$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S83$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  430195
                                            112 BANK0      2     2      0
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (1) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (1) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (2) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (2) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (2) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (3) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (1) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (2) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (3) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (1) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (2) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (2) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (3) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (5) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (3) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (4) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (3) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (4) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (5) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (6) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (4) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Error                                                1     1      0     198
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   ___delay_sec
   _f_close
     _f_sync
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _st_clust
       _sync_fs
         _disk_ioctl
           _SPI1_Exchange8bit
           ___wmul
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_set
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _validate
         _disk_status
     _validate
       _disk_status
   _f_lseek
     ___lldiv
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _get_fat
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _validate
       _disk_status
   _f_mount
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _get_ldnumber
   _f_open
     _dir_register
       _dir_alloc
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _mem_cpy
       _mem_set
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _find_volume
       ___lldiv
       ___lmul
       _check_fs
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _disk_initialize
         _SPI1_Exchange8bit
         _SPI1_Initialize
         _SPI1_Open
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _disk_status
       _get_ldnumber
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
     _follow_path
       _create_name
         _chk_chr
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _create_chain
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _put_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _mem_cmp
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _dir_sdi
         _clust2sect
           ___lmul
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _ld_clust
     _ld_clust
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _remove_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _st_clust
   _f_write
     _clust2sect
       ___lmul
     _create_chain
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _put_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
     _disk_write
       _deselect
         _SPI1_Exchange8bit
       _send_cmd
         ___send_cmd
           _SPI1_Exchange8bit
           _deselect
             _SPI1_Exchange8bit
           _select
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _xmit_datablock
         _SPI1_Exchange8bit
         _wait_ready
           _SPI1_Exchange8bit
     _mem_cpy
     _move_window
       _disk_read
         _deselect
           _SPI1_Exchange8bit
         _rcvr_datablock
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
     _sync_window
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
     _validate
       _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7       6        0.0%
DATA                 0      0     325       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 15 21:07:44 2019

              _SPI1_Exchange8bit 55E8                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l57 4092  
                             l77 5468                               l95 527C  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                      __CFG_LVP$ON 000000  
                            l130 3BA4                              l141 3C6C  
                            l302 3F3E                              l215 2104  
                            l312 2C60                              l152 3D6A  
                            l315 2FB0                              l155 3D3A  
                            l173 4B80                              l317 2C6A  
                            l174 4B94                              l190 45F4  
                            l191 45FC                              l192 4610  
                            l169 4B76                              l409 3810  
                            l186 45EA                              l338 2426  
                            l362 432A                              l451 47D2  
                            l196 4670                              l516 3B70  
                            l607 1012                              l377 3464  
                            l529 442C                              l641 30A4  
                            l394 3640                              l650 3216  
                            l642 309C                              l731 1C5C  
                            l820 55F0                              l396 3638  
                            l580 09D2                              l492 3A1A  
                            l727 19CC                              l648 322E  
                            l593 0B1A                              l599 0CB4  
                            l877 50C8                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _Fil 00D7  
            ??_SPI1_Exchange8bit 0001                     disk_read@cmd 001C  
                 ??_create_chain 005C                              wreg 000FE8  
              disk_initialize@ty 001A                   create_name@sfn 001B  
                create_chain@ncl 0065                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l4103 5124                             l4121 5158  
                           l4113 5144                             l4115 5148  
                           l4107 5130                             l4131 51E8  
                           l4071 55BC                             l4151 5252  
                           l4303 41A6                             l4311 4200  
                           l5023 4DA2                             l5007 4D0C  
                           l5015 4D62                             l4049 544E  
                           l4137 51FE                             l4225 4652  
                           l5017 4D70                             l5121 4860  
                           l4331 4FC0                             l5051 3F16  
                           l4411 24E2                             l5211 3AB2  
                           l5107 47FA                             l4173 5260  
                           l4261 4BA8                             l4413 2516  
                           l6101 1C78                             l4087 50F6  
                           l4167 53F0                             l4239 46D2  
                           l5063 470C                             l5231 3AEE  
                           l5223 3ADC                             l5151 3998  
                           l5127 48A0                             l4329 4FA4  
                           l4361 2DD6                             l4433 2634  
                           l6113 1CEA                             l6105 1C86  
                           l5305 4A78                             l5241 3B2E  
                           l5233 3AFE                             l5137 3926  
                           l6009 31FC                             l4363 2DF4  
                           l4443 26E6                             l4523 3474  
                           l4515 3410                             l4507 33C0  
                           l6123 1D32                             l6115 1D1E  
                           l5323 4914                             l5235 3B04  
                           l5139 392A                             l6027 3274  
                           l6043 3354                             l4189 5290  
                           l4277 4C1A                             l4293 4120  
                           l4605 1F74                             l4373 2EBA  
                           l4365 2DFE                             l4453 27D8  
                           l4429 25FE                             l6061 1980  
                           l5341 49AA                             l5309 4A82  
                           l5077 47A0                             l5173 39F6  
                           l5093 51C8                             l6301 18D6  
                           l4383 2F84                             l4551 3546  
                           l4535 34D2                             l4519 3434  
                           l6055 195E                             l5335 4970  
                           l5079 47A8                             l5255 3B5E  
                           l5407 42A0                             l6207 1376  
                           l4609 1F82                             l4473 534C  
                           l4457 27EA                             l6161 1EEC  
                           l6137 1DB2                             l5329 4932  
                           l5513 0886                             l5505 0860  
                           l4721 5380                             l5177 3A10  
                           l5417 431A                             l6225 1406  
                           l6209 13B6                             l4299 419A  
                           l4635 214A                             l4619 2060  
                           l4483 5544                             l5355 5050  
                           l5371 5086                             l4459 2816  
                           l6091 1C1A                             l6155 1E7A  
                           l4803 2860                             l4723 5384  
                           l4715 52DA                             l6307 1932  
                           l6251 15A8                             l6219 13E2  
                           l4661 22BE                             l4653 2228  
                           l4645 2198                             l5381 50BA  
                           l4469 5338                             l4493 4E0A  
                           l4565 3620                             l6077 1B9C  
                           l5277 49D4                             l5613 0ABA  
                           l5533 08CE                             l4813 28C4  
                           l4741 36BC                             l5437 4B5C  
                           l6245 1520                             l6237 14BE  
                           l6229 1456                             l4639 2152  
                           l4479 5534                             l5359 5054  
                           l4559 35B8                             l4911 3BBA  
                           l5279 49D8                             l5607 0AB0  
                           l4823 296A                             l5455 43CC  
                           l5447 4378                             l5391 423A  
                           l6263 16D6                             l6335 3F84  
                           l5801 4C46                             l4673 2328  
                           l4657 22B0                             l4585 55D0  
                           l5369 507A                             l5713 0EF0  
                           l5609 0AB6                             l5553 0912  
                           l5545 0908                             l5529 08CA  
                           l5393 4242                             l6273 1750  
                           l6257 15FC                             l6265 16F6  
                           l6193 128E                             l4683 2360  
                           l4667 22F6                             l6099 1C40  
                           l4915 3BC2                             l4907 3BB0  
                           l5635 0B78                             l4747 370C  
                           l5491 4490                             l6283 17DA  
                           l6275 1774                             l6371 4060  
                           l4677 234A                             l4597 1F66  
                           l4941 3C3C                             l5725 0FE4  
                           l5581 0A08                             l5565 0950  
                           l4845 2A02                             l4829 2980  
                           l4757 375E                             l6293 189A  
                           l6277 1792                             l6357 4016  
                           l5815 4C76                             l5807 4C5E  
                           l4695 23A0                             l4687 2368  
                           l5575 09B6                             l4767 37D0  
                           l4759 3784                             l5825 4C8E  
                           l4697 23A6                             l4929 3C08  
                           l5593 0A64                             l5913 4EC0  
                           l4881 2B16                             l4857 2A20  
                           l6289 1824                             l5851 4CBE  
                           l4699 23E8                             l4971 3CD2  
                           l5595 0A8A                             l5587 0A1E  
                           l5907 4E92                             l4779 3850  
                           l6379 408C                             l5837 4CA6  
                           l5749 11B6                             l5693 0DB6  
                           l5917 4ED4                             l4869 2AC0  
                           l4885 2B5E                             l4975 3CF8  
                           l4967 3CC4                             l4959 3C9C  
                           l5927 4F00                             l5785 45D2  
                           l4977 3D0A                             l5689 0DA0  
                           l4889 2BBC                             l5961 304A  
                           l5883 4CEE                             l5867 4CD6  
                           l5939 2FD0                             l5893 54D2  
                           l5973 3080                             l5889 54C2  
                           l5969 3074                             STR_1 0815  
                           STR_2 0815                             STR_3 0825  
                           STR_4 0801                             STR_5 0816  
                           STR_6 0816                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5200 2420                             u5105 2CB4  
                           u5050 4F48                             u6010 285C  
                           u5125 2D52                             u5215 2470  
                           u4520 5470                             u5080 2C30  
                           u4530 547C                             u5170 2EFC  
                           u5090 2C50                             u5155 2DE2  
                           u4700 5284                             u4620 51E4  
                           u5500 35F8                             u5420 34C0  
                           u7100 4234                             u5245 2562  
                           u5270 261C                             u5190 2400  
                           u6070 2966                             u5175 2EF2  
                           u6055 28D0                             u4640 521E  
                           u5440 351E                             u6080 297C  
                           u6400 4D98                             u7200 4372  
                           u7050 5050                             u5290 2728  
                           u5370 33AE                             u5275 2612  
                           u4900 4B72                             u4740 45E6  
                           u5620 20FE                             u6340 3D42  
                           u5605 2068                             u4830 468C  
                           u5550 1F7E                             u7070 508A  
                           u5390 3422                             u8110 195A  
                           u6270 3C74                             u6190 3BAA  
                           u6510 47C6                             u7150 42F4  
                           u4647 5214                             u5615 208E  
                           u5295 271E                             u6175 2BDE  
                           u6407 4D8E                             u8200 1C06  
                           u6360 3D66                             u7160 434A  
                           u5625 20F4                             u4850 46B4  
                           u8210 1C2C                             u7330 08C6  
                           u7250 4426                             u7090 4214  
                           u5715 21DC                             u6380 4D3A  
                           u6540 47F4                             u5725 21FE  
                           u4950 4BD0                             u4870 46E2  
                           u5734 221C                             u5670 217A  
                           u8310 1E66                             u7430 0AA4  
                           u6710 3A26                             u5830 52EA  
                           u4935 4B86                             u5735 2216  
                           u9007 3D2C                             u5840 531E  
                           u8400 12E8                             u9017 545C  
                           u4785 4602                             u5745 2266  
                           u4970 4BFC                             u8330 1ED0  
                           u7450 0AB6                             u6490 478C  
                           u6730 3A32                             u9027 5270  
                           u5675 2170                             u5595 2038  
                           u8315 1E5C                             u6387 4D2A  
                           u8260 1D42                             u5940 37E0  
                           u5860 53B4                             u6660 39E0  
                           u9037 54C8                             u8165 1A44  
                           u8405 12DE                             u4990 4C2A  
                           u6750 3A5C                             u8280 1DC6  
                           u6920 49FA                             u5880 36B8  
                           u6680 39F2                             u7625 0ED0  
                           u7650 1038                             u6770 3A68  
                           u7555 0CE8                             u8515 1538  
                           u7580 0D9C                             u7900 4EFC  
                           u8620 18DE                             u7590 0DB2  
                           u7655 102E                             u5985 3886  
                           u5995 38D2                             u6980 492E  
                           u8565 169C                             u6990 496C  
                           u8670 3FA2                             u8575 16E0  
                           u8997 3C5E                             _WPUB 000F85  
                           _Fsid 00D2                             _Stat 00F7  
                           _main 3F42                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 55F8                    __CFG_IESO$OFF 000000  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0019  
                   ?_follow_path 0086               disk_initialize@ocr 0013  
                   ___param_bank 000000               disk_initialize@tmr 001B  
                create_name@path 000B                 create_chain@clst 0058  
                    _sync_window 40AC   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 55E8                            ?_main 0001  
                __end_of___lldiv 50DA                   __CFG_DEBUG$OFF 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  __end_of_f_close 54BA  
                          _FatFs 05D2                  __end_of_chk_chr 53C6  
             __size_of_SPI1_Open 000E                  __end_of_f_lseek 1F52  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000              ___lmul@multiplicand 0005  
                  __CFG_WRT3$OFF 000000                  __end_of_f_mount 4F1E  
                          _Error 4C2E                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                     ___send_cmd@n 0009  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                __end_of_dir_sdi 3914                   __CFG_EBTR3$OFF 000000  
                __end_of_f_write 1944                  __end_of_get_fat 2FC2  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                __end_of_mem_cmp 5328                  __end_of_mem_cpy 4DB4  
                __end_of_mem_set 5556                    find_volume@br 0060  
                  find_volume@fs 0098                    find_volume@pt 007A  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw2 000FDB                  __end_of_put_fat 281A  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                __end_of_sync_fs 3F42                   __CFG_ICPRT$OFF 000000  
                  get_ldnumber@i 000B         __size_of_SPI1_Initialize 000E  
                __initialization 5408              disk_initialize@pdrv 0012  
                   __end_of_main 40AC                     clust2sect@fs 000D  
                 __CFG_PCLKEN$ON 000000                           ??_main 0060  
                  __activetblptr 000002                   __CFG_SDOMX$RB3 000000  
                         ?_Error 0001                  __CFG_CCP2MX$RC1 000000  
                         _ACTCON 000FB5                           _ANSELA 000F5B  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
           __end_of_dir_register 4B62                 __end_of_check_fs 49AE  
          SPI1_Exchange8bit@data 0001                           Error@a 0001  
     __size_of_SPI1_Exchange8bit 0010             __size_of_create_name 0284  
       __size_of_disk_initialize 01EA                 __end_of_deselect 562C  
               __end_of_dir_find 48C2                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 5606                 __end_of_dir_next 2C20  
                   ?_move_window 0030             __end_of_create_chain 3652  
               __end_of_ld_clust 51DA                           ___lmul 5328  
           __size_of_find_volume 09AE             __size_of_disk_status 0012  
                         ___wmul 5580                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0009                           _f_open 2FC2  
                         _f_sync 4494                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 5422  
                         clear_1 5434                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 55A6                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
                         main@bw 00D0                 __end_of_send_cmd 5408  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                  disk_ioctl@csize 0032  
               __end_of_validate 5058             __end_of_get_ldnumber 4A8C  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5580  
                      ??_put_fat 0045                  xmit_datablock@i 0007  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 5606  
                     __accesstop 0060          __end_of__initialization 543A  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
                  __end_of_Error 4CFA                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                     __pidataBANK0 562C  
            ??_SYSTEM_Initialize 0001                       ___send_cmd 50DA  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
                  ??___delay_sec 0001               __size_of_dir_alloc 00F0  
                        ??_Error 0001               __size_of_disk_read 00CC  
      __end_of_SYSTEM_Initialize 5614                       __pbssBANK0 00D2  
              __CFG_PLLSEL$PLL4X 000000                          ?___lmul 0001  
                        ?___wmul 0001                          ?_f_open 009A  
        __size_of_xmit_datablock 007C                          ?_f_sync 0045  
              ??_disk_initialize 0011                     ?_sync_window 001B  
                 ___lmul@product 0009                          ?_select 0001  
                      ?_check_fs 003B                       _disk_ioctl 1F52  
                 follow_path@dir 008A                          _OSCCON2 000FD2  
                 follow_path@res 008D                       _disk_write 45D6  
                        _OSCTUNE 000F9B                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                        _SSP1ADD 000FC8                      send_cmd@res 0010  
                 remove_chain@fs 0056                          _SSP1BUF 000FC9  
                      ?_dir_find 0080              __end_of___delay_sec 54F2  
                      ?_dir_next 006D            __size_of_dir_register 00D6  
                      ?_ld_clust 0001                       _clust2sect 4DB4  
               sync_window@wsect 002C                    ?_remove_chain 0056  
          __size_of_create_chain 02FA                __end_of_dir_alloc 47D6  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 4C2E  
                        ff@FatFs 00D4                       f_close@res 0050  
                __size_of___lmul 0056                        ?_st_clust 0001  
                    ?___send_cmd 0004                          ___lldiv 5058  
                __size_of___wmul 0026             __size_of_move_window 00A6  
                     check_fs@fs 003B                  __size_of_f_open 0396  
                   __psmallconst 0800                  __size_of_f_sync 0142  
                        _f_close 5480            __size_of_get_ldnumber 00DE  
            _disk_initialize$324 0017                          __pcinit 5408  
                        _chk_chr 537E                          _f_lseek 1944  
                        __ramtop 0800                          _f_mount 4E6E  
                __size_of_select 001E                          __ptext0 3F42  
                        __ptext1 11E0                          __ptext2 2FC2  
                        __ptext3 4204                          __ptext4 434E  
                        __ptext5 515C                          __ptext6 47D6  
                        __ptext7 52C2                          __ptext8 3914  
                        __ptext9 537E                          _dir_sdi 3652  
                    validate@fil 0008                          _f_write 11E0  
                    validate@obj 0002                          _get_fat 2C20  
                     chk_chr@chr 0003                     _dir_register 4A8C  
                     chk_chr@str 0001                          _mem_cmp 52C2  
                        _mem_cpy 4CFA            _OSCILLATOR_Initialize 55D6  
                        _mem_set 552A                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3358                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23F0  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 3D82                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 543A  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 5256  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 49AE  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 55F8                       _wait_ready 5444  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$814 0011  
                     dir_sdi@idx 0058                      ___delay_sec 54BA  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 52C2  
                  ??_create_name 000D                 disk_initialize@n 001D  
                     ld_clust@cl 000B                       ld_clust@fs 0001  
                _SPI1_Initialize 5614                    ??_find_volume 004A  
                  ??_disk_status 0001                   _xmit_datablock 51DA  
                     ?_SPI1_Open 0001                   __end_of___lmul 537E  
                    st_clust@dir 0001                   __end_of___wmul 55A6  
                 __end_of_f_open 3358                   __end_of_f_sync 45D6  
                 clust2sect@clst 000F           ?_OSCILLATOR_Initialize 0001  
                 __end_of_select 55C4             __size_of_sync_window 0158  
            start_initialization 5408  __size_of_PIN_MANAGER_Initialize 0038  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 3B98  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 5256  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 3B98              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00F7  
            __end_of_find_volume 11E0              __end_of_disk_status 55D6  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 434E                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 05D2  
                  __pcstackBANK0 0060                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 5622                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
                _find_volume$918 0070                  _find_volume$919 0074  
         _PIN_MANAGER_Initialize 54F2                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 46E6                         ?___lldiv 0001  
              __size_of_validate 0094                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 4B62  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 4494  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                 __size_of_Error 00CC                        f_close@fp 004E  
                       ?_put_fat 003B          __end_of_disk_initialize 3D82  
                       ?_sync_fs 003A                      _get_fat$564 004A  
              find_volume@fasize 008D              __size_of_wait_ready 003C  
             __end_of___send_cmd 515C                      _create_name 3914  
                 ___wmul@product 0005                         _LATAbits 000F89  
                       _LATBbits 000F8A                        f_lseek@fp 006D  
              find_volume@szbfat 0076                        f_open@dir 00B8  
                      f_open@res 00B7                        f_open@sfn 00A3  
              find_volume@sysect 007C                      _find_volume 0832  
                    _disk_status 55C4                    ??_move_window 0036  
                      f_mount@fs 0052                        f_mount@rp 005A  
                follow_path@path 0088                    move_window@fs 0030  
               __CFG_WDTPS$32768 000000                         _SSP1CON1 000FC6  
                      dir_find@c 0082                       ?_dir_alloc 0080  
                remove_chain@res 0060                  remove_chain@nxt 0061  
                       _SSP1STAT 000FC7                        f_sync@dir 004C  
                      f_sync@res 004B                        dir_sdi@ic 0067  
                      dir_sdi@dp 0056                        dir_next@c 0078  
                      dir_next@i 007A                       ?_disk_read 0011  
                      f_write@cc 0085                        f_write@bw 0073  
                      f_write@fp 006D                        get_fat@bc 0054  
                      get_fat@fs 003B                        get_fat@wc 0050  
              ___wmul@multiplier 0001                     ?___delay_sec 0001  
                       _CardType 00D6                     ??_disk_ioctl 0014  
              __CFG_CFGPLLEN$OFF 000000                     ??_disk_write 0019  
                   f_lseek@ifptr 0083                     f_lseek@nsect 0088  
                     st_clust@cl 0003                 ?_SPI1_Initialize 0001  
                   ??_clust2sect 0013                ___lmul@multiplier 0001  
                    _INTCON2bits 000FF1                       put_fat@res 0053  
                     put_fat@val 0041                move_window@sector 0032  
                dir_next@stretch 006F                         __Hrparam 0000  
                       __Lrparam 0000                      _follow_path 434E  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23F0  
          __size_of_remove_chain 014A               __end_of_disk_write 46E6  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 0082  
            __end_of_move_window 4FC4               __end_of_clust2sect 4E6E  
               __size_of_f_close 003A                 __size_of_chk_chr 0048  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 0764  
               __size_of_get_fat 03A2                         _check_fs 48C2  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 00BA  
               __size_of_mem_set 002C              xmit_datablock@token 0006  
                ___delay_sec@sec 0004                 ??_rcvr_datablock 0006  
                dir_register@res 008C                         _deselect 5622  
                       __ptext10 4A8C                         __ptext11 4CFA  
                       __ptext20 48C2                         __ptext12 46E6  
                       __ptext21 1944                         __ptext13 3652  
                       __ptext30 4FC4                         __ptext22 3358  
                       __ptext14 281A                         __ptext31 55C4  
                       __ptext23 23F0                         __ptext15 4E6E  
                       __ptext40 51DA                         __ptext32 3D82  
                       __ptext24 2C20                         __ptext16 0832  
                       __ptext41 4B62                         __ptext33 552A  
                       __ptext25 4DB4                         __ptext17 49AE  
                       __ptext50 5606                         __ptext42 53C6  
                       __ptext34 1F52                         __ptext26 5328  
                       __ptext18 3B98                         __ptext51 5614  
                       __ptext43 50DA                         __ptext35 5580  
                       __ptext27 5058                         __ptext19 55F8  
                       __ptext52 54F2                         __ptext44 55A6  
                       __ptext36 5556                         __ptext28 5480  
                       __ptext53 55D6                         __ptext45 5444  
                       __ptext37 4F1E                         __ptext29 4494  
                       __ptext54 4C2E                         __ptext46 5622  
                       __ptext38 40AC                         __ptext47 5256  
                       __ptext39 45D6                         __ptext48 55E8  
                       __ptext49 54BA                         _dir_find 47D6  
                   _SSP1CON1bits 000FC6                         _dir_next 281A  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 515C                 __size_of_put_fat 042A  
                 sync_window@res 0029                 __size_of_sync_fs 01C0  
                  __size_of_main 016A                       sync_fs@res 0044  
                   _remove_chain 4204                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 53C6  
                       _validate 4FC4                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 5556  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$333 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0009  
                      put_fat@fs 003B                         mem_cpy@s 000B  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                 dir_register@dp 008A                 ??_xmit_datablock 0007  
             __end_of_wait_ready 5480                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 4F1E             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054                    ?_dir_register 008A  
                  ___delay_sec@i 0005                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 4204                      dir_find@res 0085  
           __size_of___delay_sec 0038                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 552A  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                   ?_disk_status 0001                      _put_fat$590 004D  
                    _put_fat$591 004F  
