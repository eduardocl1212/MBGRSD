

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 15 22:48:02 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71  0000                     
    72                           ; Version 2.05
    73                           ; Generated 20/12/2018 GMT
    74                           ; 
    75                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F45K50 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataBANK0
   108  00564E                     __pidataBANK0:
   109                           	opt callstack 0
   110                           
   111                           ;initializer for _Stat
   112  00564E  01                 	db	1
   113  0000                     _ANSELE	set	3935
   114  0000                     _ANSELD	set	3934
   115  0000                     _ANSELB	set	3932
   116  0000                     _ANSELC	set	3933
   117  0000                     _ANSELA	set	3931
   118  0000                     _SSP1STATbits	set	4039
   119  0000                     _SSP1BUF	set	4041
   120  0000                     _SSP1CON1bits	set	4038
   121  0000                     _SSP1ADD	set	4040
   122  0000                     _SSP1CON1	set	4038
   123  0000                     _SSP1STAT	set	4039
   124  0000                     _INTCON2bits	set	4081
   125  0000                     _WPUB	set	3973
   126  0000                     _TRISD	set	3989
   127  0000                     _TRISC	set	3988
   128  0000                     _TRISB	set	3987
   129  0000                     _TRISE	set	3990
   130  0000                     _LATC	set	3979
   131  0000                     _LATB	set	3978
   132  0000                     _LATD	set	3980
   133  0000                     _LATE	set	3981
   134  0000                     _ACTCON	set	4021
   135  0000                     _OSCTUNE	set	3995
   136  0000                     _OSCCON2	set	4050
   137  0000                     _OSCCON	set	4051
   138  0000                     _LATBbits	set	3978
   139  0000                     _TRISA	set	3986
   140  0000                     _LATA	set	3977
   141  0000                     _LATAbits	set	3977
   142                           
   143                           	psect	smallconst
   144  000800                     __psmallconst:
   145                           	opt callstack 0
   146  000800  00                 	db	0
   147  000801                     STR_4:
   148  000801  50                 	db	80	;'P'
   149  000802  72                 	db	114	;'r'
   150  000803  75                 	db	117	;'u'
   151  000804  65                 	db	101	;'e'
   152  000805  62                 	db	98	;'b'
   153  000806  61                 	db	97	;'a'
   154  000807  20                 	db	32
   155  000808  70                 	db	112	;'p'
   156  000809  6F                 	db	111	;'o'
   157  00080A  72                 	db	114	;'r'
   158  00080B  20                 	db	32
   159  00080C  41                 	db	65	;'A'
   160  00080D  52                 	db	82	;'R'
   161  00080E  52                 	db	82	;'R'
   162  00080F  41                 	db	65	;'A'
   163  000810  59                 	db	89	;'Y'
   164  000811  2E                 	db	46
   165  000812  0D                 	db	13
   166  000813  0A                 	db	10
   167  000814  00                 	db	0
   168  000815                     STR_5:
   169  000815  22                 	db	34
   170  000816  2A                 	db	42
   171  000817  2B                 	db	43
   172  000818  2C                 	db	44
   173  000819  3A                 	db	58	;':'
   174  00081A  3B                 	db	59	;';'
   175  00081B  3C                 	db	60	;'<'
   176  00081C  3D                 	db	61	;'='
   177  00081D  3E                 	db	62	;'>'
   178  00081E  3F                 	db	63	;'?'
   179  00081F  5B                 	db	91	;'['
   180  000820  5D                 	db	93	;']'
   181  000821  7C                 	db	124
   182  000822  7F                 	db	127
   183  000823  00                 	db	0
   184  000824                     STR_3:
   185  000824  42                 	db	66	;'B'
   186  000825  65                 	db	101	;'e'
   187  000826  65                 	db	101	;'e'
   188  000827  44                 	db	68	;'D'
   189  000828  65                 	db	101	;'e'
   190  000829  76                 	db	118	;'v'
   191  00082A  2E                 	db	46
   192  00082B  74                 	db	116	;'t'
   193  00082C  78                 	db	120	;'x'
   194  00082D  74                 	db	116	;'t'
   195  00082E  00                 	db	0
   196  0000                     
   197                           ; #config settings
   198  00082F  00                 	db	0	; dummy byte at the end
   199  0000                     
   200                           	psect	cinit
   201  0053EE                     __pcinit:
   202                           	opt callstack 0
   203  0053EE                     start_initialization:
   204                           	opt callstack 0
   205  0053EE                     __initialization:
   206                           	opt callstack 0
   207                           
   208                           ; Initialize objects allocated to BANK0 (1 bytes)
   209                           ; load TBLPTR registers with __pidataBANK0
   210  0053EE  0E4E               	movlw	low __pidataBANK0
   211  0053F0  6EF6               	movwf	tblptrl,c
   212  0053F2  0E56               	movlw	high __pidataBANK0
   213  0053F4  6EF7               	movwf	tblptrh,c
   214  0053F6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   215  0053F8  6EF8               	movwf	tblptru,c
   216  0053FA  0009               	tblrd		*+	;fetch initializer
   217  0053FC  CFF5 F0FA          	movff	tablat,__pdataBANK0
   218                           
   219                           ; Clear objects allocated to BIGRAM (558 bytes)
   220  005400  EE05  F0D2         	lfsr	0,__pbssBIGRAM
   221  005404  EE12 F02E          	lfsr	1,558
   222  005408                     clear_0:
   223  005408  6AEE               	clrf	postinc0,c
   224  00540A  50E5               	movf	postdec1,w,c
   225  00540C  50E1               	movf	fsr1l,w,c
   226  00540E  E1FC               	bnz	clear_0
   227  005410  50E2               	movf	fsr1h,w,c
   228  005412  E1FA               	bnz	clear_0
   229                           
   230                           ; Clear objects allocated to BANK0 (38 bytes)
   231  005414  EE00  F0D4         	lfsr	0,__pbssBANK0
   232  005418  0E26               	movlw	38
   233  00541A                     clear_1:
   234  00541A  6AEE               	clrf	postinc0,c
   235  00541C  06E8               	decf	wreg,f,c
   236  00541E  E1FD               	bnz	clear_1
   237  005420                     end_of_initialization:
   238                           	opt callstack 0
   239  005420                     __end_of__initialization:
   240                           	opt callstack 0
   241  005420  0E00               	movlw	low (__Lmediumconst shr (0+16))
   242  005422  6EF8               	movwf	tblptru,c
   243  005424  0100               	movlb	0
   244  005426  EF15  F02A         	goto	_main	;jump to C main() function
   245                           
   246                           	psect	bssBANK0
   247  0000D4                     __pbssBANK0:
   248                           	opt callstack 0
   249  0000D4                     _Fsid:
   250                           	opt callstack 0
   251  0000D4                     	ds	2
   252  0000D6                     ff@FatFs:
   253                           	opt callstack 0
   254  0000D6                     	ds	2
   255  0000D8                     _CardType:
   256                           	opt callstack 0
   257  0000D8                     	ds	1
   258  0000D9                     _data:
   259                           	opt callstack 0
   260  0000D9                     	ds	1
   261  0000DA                     _Fil:
   262                           	opt callstack 0
   263  0000DA                     	ds	32
   264                           
   265                           	psect	dataBANK0
   266  0000FA                     __pdataBANK0:
   267                           	opt callstack 0
   268  0000FA                     _Stat:
   269                           	opt callstack 0
   270  0000FA                     	ds	1
   271                           
   272                           	psect	bssBIGRAM
   273  0005D2                     __pbssBIGRAM:
   274                           	opt callstack 0
   275  0005D2                     _FatFs:
   276                           	opt callstack 0
   277  0005D2                     	ds	558
   278                           
   279                           	psect	cstackBANK0
   280  000060                     __pcstackBANK0:
   281                           	opt callstack 0
   282  000060                     ??_dir_sdi:
   283  000060                     remove_chain@res:
   284                           	opt callstack 0
   285  000060                     create_chain@res:
   286                           	opt callstack 0
   287  000060                     find_volume@br:
   288                           	opt callstack 0
   289                           
   290                           ; 16 bytes @ 0x0
   291  000060                     	ds	1
   292  000061                     remove_chain@nxt:
   293                           	opt callstack 0
   294  000061                     create_chain@scl:
   295                           	opt callstack 0
   296                           
   297                           ; 4 bytes @ 0x1
   298  000061                     	ds	4
   299  000065                     create_chain@ncl:
   300                           	opt callstack 0
   301                           
   302                           ; 4 bytes @ 0x5
   303  000065                     	ds	2
   304  000067                     dir_sdi@ic:
   305                           	opt callstack 0
   306                           
   307                           ; 2 bytes @ 0x7
   308  000067                     	ds	2
   309  000069                     create_chain@cs:
   310                           	opt callstack 0
   311  000069                     dir_sdi@sect:
   312                           	opt callstack 0
   313                           
   314                           ; 4 bytes @ 0x9
   315  000069                     	ds	4
   316  00006D                     dir_next@dp:
   317                           	opt callstack 0
   318  00006D                     f_write@fp:
   319                           	opt callstack 0
   320  00006D                     f_lseek@fp:
   321                           	opt callstack 0
   322  00006D                     dir_sdi@clst:
   323                           	opt callstack 0
   324                           
   325                           ; 4 bytes @ 0xD
   326  00006D                     	ds	2
   327  00006F                     dir_next@stretch:
   328                           	opt callstack 0
   329  00006F                     f_write@buff:
   330                           	opt callstack 0
   331  00006F                     f_lseek@ofs:
   332                           	opt callstack 0
   333                           
   334                           ; 4 bytes @ 0xF
   335  00006F                     	ds	1
   336  000070                     _find_volume$922:
   337                           	opt callstack 0
   338                           
   339                           ; 4 bytes @ 0x10
   340  000070                     	ds	1
   341  000071                     ??_dir_next:
   342  000071                     f_write@btw:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x11
   346  000071                     	ds	2
   347  000073                     ??_f_lseek:
   348  000073                     f_write@bw:
   349                           	opt callstack 0
   350                           
   351                           ; 2 bytes @ 0x13
   352  000073                     	ds	1
   353  000074                     _find_volume$923:
   354                           	opt callstack 0
   355                           
   356                           ; 2 bytes @ 0x14
   357  000074                     	ds	1
   358  000075                     ??_f_write:
   359                           
   360                           ; 1 bytes @ 0x15
   361  000075                     	ds	1
   362  000076                     find_volume@szbfat:
   363                           	opt callstack 0
   364                           
   365                           ; 4 bytes @ 0x16
   366  000076                     	ds	2
   367  000078                     dir_next@c:
   368                           	opt callstack 0
   369                           
   370                           ; 2 bytes @ 0x18
   371  000078                     	ds	2
   372  00007A                     dir_next@i:
   373                           	opt callstack 0
   374  00007A                     find_volume@pt:
   375                           	opt callstack 0
   376                           
   377                           ; 2 bytes @ 0x1A
   378  00007A                     	ds	2
   379  00007C                     dir_next@clst:
   380                           	opt callstack 0
   381  00007C                     find_volume@sysect:
   382                           	opt callstack 0
   383                           
   384                           ; 4 bytes @ 0x1C
   385  00007C                     	ds	4
   386  000080                     dir_alloc@dp:
   387                           	opt callstack 0
   388  000080                     dir_find@dp:
   389                           	opt callstack 0
   390  000080                     find_volume@vol:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0x20
   394  000080                     	ds	1
   395  000081                     f_write@res:
   396                           	opt callstack 0
   397                           
   398                           ; 1 bytes @ 0x21
   399  000081                     	ds	1
   400  000082                     dir_find@c:
   401                           	opt callstack 0
   402  000082                     dir_alloc@nent:
   403                           	opt callstack 0
   404  000082                     find_volume@nrsv:
   405                           	opt callstack 0
   406  000082                     f_write@wbuff:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x22
   410  000082                     	ds	1
   411  000083                     dir_find@dir:
   412                           	opt callstack 0
   413  000083                     f_lseek@ifptr:
   414                           	opt callstack 0
   415                           
   416                           ; 4 bytes @ 0x23
   417  000083                     	ds	1
   418  000084                     ??_dir_alloc:
   419  000084                     f_write@csect:
   420                           	opt callstack 0
   421  000084                     find_volume@tsect:
   422                           	opt callstack 0
   423                           
   424                           ; 4 bytes @ 0x24
   425  000084                     	ds	1
   426  000085                     dir_find@res:
   427                           	opt callstack 0
   428  000085                     f_write@cc:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x25
   432  000085                     	ds	1
   433  000086                     follow_path@dp:
   434                           	opt callstack 0
   435                           
   436                           ; 2 bytes @ 0x26
   437  000086                     	ds	1
   438  000087                     f_lseek@res:
   439                           	opt callstack 0
   440  000087                     dir_alloc@n:
   441                           	opt callstack 0
   442  000087                     f_write@sect:
   443                           	opt callstack 0
   444                           
   445                           ; 4 bytes @ 0x27
   446  000087                     	ds	1
   447  000088                     follow_path@path:
   448                           	opt callstack 0
   449  000088                     find_volume@nclst:
   450                           	opt callstack 0
   451  000088                     f_lseek@nsect:
   452                           	opt callstack 0
   453                           
   454                           ; 4 bytes @ 0x28
   455  000088                     	ds	1
   456  000089                     dir_alloc@res:
   457                           	opt callstack 0
   458                           
   459                           ; 1 bytes @ 0x29
   460  000089                     	ds	1
   461  00008A                     dir_register@dp:
   462                           	opt callstack 0
   463  00008A                     follow_path@dir:
   464                           	opt callstack 0
   465                           
   466                           ; 2 bytes @ 0x2A
   467  00008A                     	ds	1
   468  00008B                     f_write@clst:
   469                           	opt callstack 0
   470                           
   471                           ; 4 bytes @ 0x2B
   472  00008B                     	ds	1
   473  00008C                     dir_register@res:
   474                           	opt callstack 0
   475  00008C                     follow_path@ns:
   476                           	opt callstack 0
   477  00008C                     find_volume@stat:
   478                           	opt callstack 0
   479  00008C                     f_lseek@bcs:
   480                           	opt callstack 0
   481                           
   482                           ; 4 bytes @ 0x2C
   483  00008C                     	ds	1
   484  00008D                     follow_path@res:
   485                           	opt callstack 0
   486  00008D                     find_volume@fasize:
   487                           	opt callstack 0
   488                           
   489                           ; 4 bytes @ 0x2D
   490  00008D                     	ds	2
   491  00008F                     f_write@wcnt:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x2F
   495  00008F                     	ds	1
   496  000090                     f_lseek@clst:
   497                           	opt callstack 0
   498                           
   499                           ; 4 bytes @ 0x30
   500  000090                     	ds	1
   501  000091                     find_volume@bsect:
   502                           	opt callstack 0
   503                           
   504                           ; 4 bytes @ 0x31
   505  000091                     	ds	4
   506  000095                     find_volume@i:
   507                           	opt callstack 0
   508                           
   509                           ; 2 bytes @ 0x35
   510  000095                     	ds	2
   511  000097                     find_volume@fmt:
   512                           	opt callstack 0
   513                           
   514                           ; 1 bytes @ 0x37
   515  000097                     	ds	1
   516  000098                     find_volume@fs:
   517                           	opt callstack 0
   518                           
   519                           ; 2 bytes @ 0x38
   520  000098                     	ds	2
   521  00009A                     f_open@fp:
   522                           	opt callstack 0
   523                           
   524                           ; 2 bytes @ 0x3A
   525  00009A                     	ds	2
   526  00009C                     f_open@path:
   527                           	opt callstack 0
   528                           
   529                           ; 2 bytes @ 0x3C
   530  00009C                     	ds	2
   531  00009E                     f_open@mode:
   532                           	opt callstack 0
   533                           
   534                           ; 1 bytes @ 0x3E
   535  00009E                     	ds	1
   536  00009F                     ??_f_open:
   537                           
   538                           ; 1 bytes @ 0x3F
   539  00009F                     	ds	4
   540  0000A3                     f_open@sfn:
   541                           	opt callstack 0
   542                           
   543                           ; 12 bytes @ 0x43
   544  0000A3                     	ds	12
   545  0000AF                     f_open@cl:
   546                           	opt callstack 0
   547                           
   548                           ; 4 bytes @ 0x4F
   549  0000AF                     	ds	4
   550  0000B3                     f_open@dw:
   551                           	opt callstack 0
   552                           
   553                           ; 4 bytes @ 0x53
   554  0000B3                     	ds	4
   555  0000B7                     f_open@res:
   556                           	opt callstack 0
   557                           
   558                           ; 1 bytes @ 0x57
   559  0000B7                     	ds	1
   560  0000B8                     f_open@dir:
   561                           	opt callstack 0
   562                           
   563                           ; 2 bytes @ 0x58
   564  0000B8                     	ds	2
   565  0000BA                     f_open@dj:
   566                           	opt callstack 0
   567                           
   568                           ; 22 bytes @ 0x5A
   569  0000BA                     	ds	22
   570  0000D0                     guardar@data:
   571                           	opt callstack 0
   572                           
   573                           ; 2 bytes @ 0x70
   574  0000D0                     	ds	2
   575  0000D2                     guardar@bw:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x72
   579  0000D2                     	ds	2
   580                           
   581                           	psect	cstackCOMRAM
   582  000001                     __pcstackCOMRAM:
   583                           	opt callstack 0
   584  000001                     ??___delay_sec:
   585  000001                     ?_mem_cmp:
   586                           	opt callstack 0
   587  000001                     ?_chk_chr:
   588                           	opt callstack 0
   589  000001                     ?_get_ldnumber:
   590                           	opt callstack 0
   591  000001                     ?___wmul:
   592                           	opt callstack 0
   593  000001                     ?_ld_clust:
   594                           	opt callstack 0
   595  000001                     ?___lmul:
   596                           	opt callstack 0
   597  000001                     ?___lldiv:
   598                           	opt callstack 0
   599  000001                     Error@a:
   600                           	opt callstack 0
   601  000001                     disk_status@pdrv:
   602                           	opt callstack 0
   603  000001                     SPI1_Exchange8bit@data:
   604                           	opt callstack 0
   605  000001                     mem_cpy@dst:
   606                           	opt callstack 0
   607  000001                     mem_set@dst:
   608                           	opt callstack 0
   609  000001                     mem_cmp@dst:
   610                           	opt callstack 0
   611  000001                     chk_chr@str:
   612                           	opt callstack 0
   613  000001                     ld_clust@fs:
   614                           	opt callstack 0
   615  000001                     st_clust@dir:
   616                           	opt callstack 0
   617  000001                     get_ldnumber@path:
   618                           	opt callstack 0
   619  000001                     ___wmul@multiplier:
   620                           	opt callstack 0
   621  000001                     ___lmul@multiplier:
   622                           	opt callstack 0
   623  000001                     ___lldiv@dividend:
   624                           	opt callstack 0
   625                           
   626                           ; 4 bytes @ 0x0
   627  000001                     	ds	1
   628  000002                     wait_ready@tmr:
   629                           	opt callstack 0
   630  000002                     rcvr_datablock@buff:
   631                           	opt callstack 0
   632  000002                     validate@obj:
   633                           	opt callstack 0
   634                           
   635                           ; 2 bytes @ 0x1
   636  000002                     	ds	1
   637  000003                     ??_get_ldnumber:
   638  000003                     mem_cpy@src:
   639                           	opt callstack 0
   640  000003                     mem_set@val:
   641                           	opt callstack 0
   642  000003                     mem_cmp@src:
   643                           	opt callstack 0
   644  000003                     chk_chr@chr:
   645                           	opt callstack 0
   646  000003                     ld_clust@dir:
   647                           	opt callstack 0
   648  000003                     ___wmul@multiplicand:
   649                           	opt callstack 0
   650  000003                     st_clust@cl:
   651                           	opt callstack 0
   652                           
   653                           ; 4 bytes @ 0x2
   654  000003                     	ds	1
   655  000004                     ??_validate:
   656  000004                     ___delay_sec@sec:
   657                           	opt callstack 0
   658  000004                     rcvr_datablock@btr:
   659                           	opt callstack 0
   660  000004                     xmit_datablock@buff:
   661                           	opt callstack 0
   662  000004                     ___send_cmd@arg:
   663                           	opt callstack 0
   664                           
   665                           ; 4 bytes @ 0x3
   666  000004                     	ds	1
   667  000005                     ??_chk_chr:
   668  000005                     ??_ld_clust:
   669  000005                     ___delay_sec@i:
   670                           	opt callstack 0
   671  000005                     mem_cpy@cnt:
   672                           	opt callstack 0
   673  000005                     mem_set@cnt:
   674                           	opt callstack 0
   675  000005                     mem_cmp@cnt:
   676                           	opt callstack 0
   677  000005                     ___wmul@product:
   678                           	opt callstack 0
   679  000005                     ___lmul@multiplicand:
   680                           	opt callstack 0
   681  000005                     ___lldiv@divisor:
   682                           	opt callstack 0
   683                           
   684                           ; 4 bytes @ 0x4
   685  000005                     	ds	1
   686  000006                     xmit_datablock@token:
   687                           	opt callstack 0
   688  000006                     rcvr_datablock@tmr:
   689                           	opt callstack 0
   690                           
   691                           ; 2 bytes @ 0x5
   692  000006                     	ds	1
   693  000007                     ??_mem_cpy:
   694  000007                     ??_mem_cmp:
   695  000007                     xmit_datablock@i:
   696                           	opt callstack 0
   697  000007                     mem_set@d:
   698                           	opt callstack 0
   699  000007                     get_ldnumber@tp:
   700                           	opt callstack 0
   701                           
   702                           ; 2 bytes @ 0x6
   703  000007                     	ds	1
   704  000008                     rcvr_datablock@token:
   705                           	opt callstack 0
   706  000008                     ___send_cmd@res:
   707                           	opt callstack 0
   708  000008                     validate@fil:
   709                           	opt callstack 0
   710                           
   711                           ; 2 bytes @ 0x7
   712  000008                     	ds	1
   713  000009                     xmit_datablock@resp:
   714                           	opt callstack 0
   715  000009                     ___send_cmd@n:
   716                           	opt callstack 0
   717  000009                     mem_cpy@d:
   718                           	opt callstack 0
   719  000009                     mem_cmp@d:
   720                           	opt callstack 0
   721  000009                     create_name@dp:
   722                           	opt callstack 0
   723  000009                     get_ldnumber@vol:
   724                           	opt callstack 0
   725  000009                     ___lmul@product:
   726                           	opt callstack 0
   727  000009                     ___lldiv@quotient:
   728                           	opt callstack 0
   729                           
   730                           ; 4 bytes @ 0x8
   731  000009                     	ds	1
   732  00000A                     ___send_cmd@cmd:
   733                           	opt callstack 0
   734                           
   735                           ; 1 bytes @ 0x9
   736  00000A                     	ds	1
   737  00000B                     mem_cpy@s:
   738                           	opt callstack 0
   739  00000B                     mem_cmp@s:
   740                           	opt callstack 0
   741  00000B                     create_name@path:
   742                           	opt callstack 0
   743  00000B                     get_ldnumber@i:
   744                           	opt callstack 0
   745  00000B                     send_cmd@arg:
   746                           	opt callstack 0
   747  00000B                     ld_clust@cl:
   748                           	opt callstack 0
   749                           
   750                           ; 4 bytes @ 0xA
   751  00000B                     	ds	2
   752  00000D                     ??_create_name:
   753  00000D                     ?_clust2sect:
   754                           	opt callstack 0
   755  00000D                     ___lldiv@counter:
   756                           	opt callstack 0
   757  00000D                     mem_cmp@r:
   758                           	opt callstack 0
   759  00000D                     clust2sect@fs:
   760                           	opt callstack 0
   761  00000D                     get_ldnumber@tt:
   762                           	opt callstack 0
   763                           
   764                           ; 2 bytes @ 0xC
   765  00000D                     	ds	2
   766  00000F                     send_cmd@cmd:
   767                           	opt callstack 0
   768  00000F                     clust2sect@clst:
   769                           	opt callstack 0
   770                           
   771                           ; 4 bytes @ 0xE
   772  00000F                     	ds	1
   773  000010                     send_cmd@res:
   774                           	opt callstack 0
   775                           
   776                           ; 1 bytes @ 0xF
   777  000010                     	ds	1
   778  000011                     ??_disk_initialize:
   779  000011                     disk_ioctl@cmd:
   780                           	opt callstack 0
   781  000011                     disk_read@buff:
   782                           	opt callstack 0
   783  000011                     disk_write@buff:
   784                           	opt callstack 0
   785  000011                     _create_name$818:
   786                           	opt callstack 0
   787                           
   788                           ; 2 bytes @ 0x10
   789  000011                     	ds	1
   790  000012                     disk_initialize@pdrv:
   791                           	opt callstack 0
   792  000012                     disk_ioctl@buff:
   793                           	opt callstack 0
   794                           
   795                           ; 2 bytes @ 0x11
   796  000012                     	ds	1
   797  000013                     ??_clust2sect:
   798  000013                     create_name@si:
   799                           	opt callstack 0
   800  000013                     disk_initialize@ocr:
   801                           	opt callstack 0
   802  000013                     disk_read@sector:
   803                           	opt callstack 0
   804  000013                     disk_write@sector:
   805                           	opt callstack 0
   806                           
   807                           ; 4 bytes @ 0x12
   808  000013                     	ds	1
   809  000014                     ??_disk_ioctl:
   810                           
   811                           ; 1 bytes @ 0x13
   812  000014                     	ds	1
   813  000015                     create_name@b:
   814                           	opt callstack 0
   815                           
   816                           ; 1 bytes @ 0x14
   817  000015                     	ds	1
   818  000016                     create_name@ni:
   819                           	opt callstack 0
   820                           
   821                           ; 2 bytes @ 0x15
   822  000016                     	ds	1
   823  000017                     _disk_initialize$328:
   824                           	opt callstack 0
   825  000017                     disk_read@count:
   826                           	opt callstack 0
   827  000017                     disk_write@count:
   828                           	opt callstack 0
   829                           
   830                           ; 2 bytes @ 0x16
   831  000017                     	ds	1
   832  000018                     create_name@p:
   833                           	opt callstack 0
   834                           
   835                           ; 2 bytes @ 0x17
   836  000018                     	ds	1
   837  000019                     ??_disk_write:
   838  000019                     disk_initialize@cmd:
   839                           	opt callstack 0
   840  000019                     disk_read@pdrv:
   841                           	opt callstack 0
   842                           
   843                           ; 1 bytes @ 0x18
   844  000019                     	ds	1
   845  00001A                     disk_initialize@ty:
   846                           	opt callstack 0
   847  00001A                     disk_write@pdrv:
   848                           	opt callstack 0
   849  00001A                     create_name@d:
   850                           	opt callstack 0
   851  00001A                     _disk_read$337:
   852                           	opt callstack 0
   853                           
   854                           ; 2 bytes @ 0x19
   855  00001A                     	ds	1
   856  00001B                     disk_initialize@tmr:
   857                           	opt callstack 0
   858  00001B                     sync_window@fs:
   859                           	opt callstack 0
   860  00001B                     create_name@sfn:
   861                           	opt callstack 0
   862                           
   863                           ; 2 bytes @ 0x1A
   864  00001B                     	ds	1
   865  00001C                     disk_read@cmd:
   866                           	opt callstack 0
   867                           
   868                           ; 1 bytes @ 0x1B
   869  00001C                     	ds	1
   870  00001D                     ??_sync_window:
   871  00001D                     disk_initialize@n:
   872                           	opt callstack 0
   873  00001D                     create_name@i:
   874                           	opt callstack 0
   875                           
   876                           ; 2 bytes @ 0x1C
   877  00001D                     	ds	2
   878  00001F                     create_name@c:
   879                           	opt callstack 0
   880                           
   881                           ; 1 bytes @ 0x1E
   882  00001F                     	ds	2
   883  000021                     disk_ioctl@csd:
   884                           	opt callstack 0
   885                           
   886                           ; 16 bytes @ 0x20
   887  000021                     	ds	8
   888  000029                     sync_window@res:
   889                           	opt callstack 0
   890                           
   891                           ; 1 bytes @ 0x28
   892  000029                     	ds	1
   893  00002A                     sync_window@nf:
   894                           	opt callstack 0
   895                           
   896                           ; 2 bytes @ 0x29
   897  00002A                     	ds	2
   898  00002C                     sync_window@wsect:
   899                           	opt callstack 0
   900                           
   901                           ; 4 bytes @ 0x2B
   902  00002C                     	ds	4
   903  000030                     move_window@fs:
   904                           	opt callstack 0
   905                           
   906                           ; 2 bytes @ 0x2F
   907  000030                     	ds	1
   908  000031                     disk_ioctl@pdrv:
   909                           	opt callstack 0
   910                           
   911                           ; 1 bytes @ 0x30
   912  000031                     	ds	1
   913  000032                     disk_ioctl@csize:
   914                           	opt callstack 0
   915  000032                     move_window@sector:
   916                           	opt callstack 0
   917                           
   918                           ; 4 bytes @ 0x31
   919  000032                     	ds	4
   920  000036                     disk_ioctl@res:
   921                           	opt callstack 0
   922                           
   923                           ; 1 bytes @ 0x35
   924  000036                     	ds	1
   925  000037                     disk_ioctl@n:
   926                           	opt callstack 0
   927                           
   928                           ; 1 bytes @ 0x36
   929  000037                     	ds	1
   930  000038                     disk_ioctl@ptr:
   931                           	opt callstack 0
   932                           
   933                           ; 2 bytes @ 0x37
   934  000038                     	ds	2
   935  00003A                     move_window@res:
   936                           	opt callstack 0
   937  00003A                     sync_fs@fs:
   938                           	opt callstack 0
   939                           
   940                           ; 2 bytes @ 0x39
   941  00003A                     	ds	1
   942  00003B                     ?_get_fat:
   943                           	opt callstack 0
   944  00003B                     get_fat@fs:
   945                           	opt callstack 0
   946  00003B                     put_fat@fs:
   947                           	opt callstack 0
   948  00003B                     check_fs@fs:
   949                           	opt callstack 0
   950                           
   951                           ; 2 bytes @ 0x3A
   952  00003B                     	ds	1
   953  00003C                     ??_sync_fs:
   954                           
   955                           ; 1 bytes @ 0x3B
   956  00003C                     	ds	1
   957  00003D                     get_fat@clst:
   958                           	opt callstack 0
   959  00003D                     put_fat@clst:
   960                           	opt callstack 0
   961  00003D                     check_fs@sect:
   962                           	opt callstack 0
   963                           
   964                           ; 4 bytes @ 0x3C
   965  00003D                     	ds	4
   966  000041                     ??_get_fat:
   967  000041                     ??_check_fs:
   968  000041                     put_fat@val:
   969                           	opt callstack 0
   970                           
   971                           ; 4 bytes @ 0x40
   972  000041                     	ds	3
   973  000044                     sync_fs@res:
   974                           	opt callstack 0
   975                           
   976                           ; 1 bytes @ 0x43
   977  000044                     	ds	1
   978  000045                     ??_put_fat:
   979  000045                     find_volume@rfs:
   980                           	opt callstack 0
   981  000045                     f_sync@fp:
   982                           	opt callstack 0
   983                           
   984                           ; 2 bytes @ 0x44
   985  000045                     	ds	2
   986  000047                     find_volume@path:
   987                           	opt callstack 0
   988                           
   989                           ; 2 bytes @ 0x46
   990  000047                     	ds	2
   991  000049                     find_volume@wmode:
   992                           	opt callstack 0
   993                           
   994                           ; 1 bytes @ 0x48
   995  000049                     	ds	1
   996  00004A                     ??_find_volume:
   997  00004A                     _get_fat$568:
   998                           	opt callstack 0
   999                           
  1000                           ; 2 bytes @ 0x49
  1001  00004A                     	ds	1
  1002  00004B                     f_sync@res:
  1003                           	opt callstack 0
  1004                           
  1005                           ; 1 bytes @ 0x4A
  1006  00004B                     	ds	1
  1007  00004C                     f_sync@dir:
  1008                           	opt callstack 0
  1009  00004C                     get_fat@val:
  1010                           	opt callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x4B
  1013  00004C                     	ds	1
  1014  00004D                     _put_fat$594:
  1015                           	opt callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x4C
  1018  00004D                     	ds	1
  1019  00004E                     f_close@fp:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 2 bytes @ 0x4D
  1023  00004E                     	ds	1
  1024  00004F                     _put_fat$595:
  1025                           	opt callstack 0
  1026                           
  1027                           ; 2 bytes @ 0x4E
  1028  00004F                     	ds	1
  1029  000050                     f_close@res:
  1030                           	opt callstack 0
  1031  000050                     get_fat@wc:
  1032                           	opt callstack 0
  1033                           
  1034                           ; 2 bytes @ 0x4F
  1035  000050                     	ds	1
  1036  000051                     put_fat@bc:
  1037                           	opt callstack 0
  1038                           
  1039                           ; 2 bytes @ 0x50
  1040  000051                     	ds	1
  1041  000052                     get_fat@p:
  1042                           	opt callstack 0
  1043  000052                     f_mount@fs:
  1044                           	opt callstack 0
  1045                           
  1046                           ; 2 bytes @ 0x51
  1047  000052                     	ds	1
  1048  000053                     put_fat@res:
  1049                           	opt callstack 0
  1050                           
  1051                           ; 1 bytes @ 0x52
  1052  000053                     	ds	1
  1053  000054                     get_fat@bc:
  1054                           	opt callstack 0
  1055  000054                     put_fat@p:
  1056                           	opt callstack 0
  1057  000054                     f_mount@path:
  1058                           	opt callstack 0
  1059                           
  1060                           ; 2 bytes @ 0x53
  1061  000054                     	ds	2
  1062  000056                     ?_create_chain:
  1063                           	opt callstack 0
  1064  000056                     f_mount@opt:
  1065                           	opt callstack 0
  1066  000056                     remove_chain@fs:
  1067                           	opt callstack 0
  1068  000056                     create_chain@fs:
  1069                           	opt callstack 0
  1070  000056                     dir_sdi@dp:
  1071                           	opt callstack 0
  1072                           
  1073                           ; 2 bytes @ 0x55
  1074  000056                     	ds	1
  1075  000057                     f_mount@res:
  1076                           	opt callstack 0
  1077                           
  1078                           ; 1 bytes @ 0x56
  1079  000057                     	ds	1
  1080  000058                     dir_sdi@idx:
  1081                           	opt callstack 0
  1082  000058                     f_mount@cfs:
  1083                           	opt callstack 0
  1084  000058                     remove_chain@clst:
  1085                           	opt callstack 0
  1086  000058                     create_chain@clst:
  1087                           	opt callstack 0
  1088                           
  1089                           ; 4 bytes @ 0x57
  1090  000058                     	ds	2
  1091  00005A                     f_mount@rp:
  1092                           	opt callstack 0
  1093                           
  1094                           ; 2 bytes @ 0x59
  1095  00005A                     	ds	2
  1096  00005C                     f_mount@vol:
  1097                           	opt callstack 0
  1098                           
  1099                           ; 2 bytes @ 0x5B
  1100  00005C                     	ds	4
  1101  000060                     
  1102                           ; 1 bytes @ 0x5F
  1103 ;;
  1104 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1105 ;;
  1106 ;; *************** function _main *****************
  1107 ;; Defined at:
  1108 ;;		line 63 in file "Main.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;		None
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1122 ;;      Params:         0       0       0       0       0       0       0       0       0
  1123 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1125 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1126 ;;Total ram usage:        0 bytes
  1127 ;; Hardware stack levels required when called:   15
  1128 ;; This function calls:
  1129 ;;		_Error
  1130 ;;		___delay_sec
  1131 ;;		_guardar
  1132 ;; This function is called by:
  1133 ;;		Startup code after reset
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           	psect	text0
  1138  00542A                     __ptext0:
  1139                           	opt callstack 0
  1140  00542A                     _main:
  1141                           	opt callstack 16
  1142                           
  1143                           ;Main.c: 66:     LATA = 0x00;
  1144                           
  1145                           ;incstack = 0
  1146  00542A  0E00               	movlw	0
  1147  00542C  6E89               	movwf	3977,c	;volatile
  1148                           
  1149                           ;Main.c: 67:     TRISA = 0x00;
  1150  00542E  0E00               	movlw	0
  1151  005430  6E92               	movwf	3986,c	;volatile
  1152                           
  1153                           ;Main.c: 68:     ANSELA = 0x00;
  1154  005432  0E00               	movlw	0
  1155  005434  010F               	movlb	15	; () banked
  1156  005436  6F5B               	movwf	91,b	;volatile
  1157                           
  1158                           ; BSR set to: 15
  1159                           ;Main.c: 69:     guardar("Prueba por ARRAY.\r\n");
  1160  005438  0E01               	movlw	low STR_4
  1161  00543A  0100               	movlb	0	; () banked
  1162  00543C  6FD0               	movwf	guardar@data& (0+255),b
  1163  00543E  0E08               	movlw	high STR_4
  1164  005440  6FD1               	movwf	(guardar@data+1)& (0+255),b
  1165  005442  EC94  F021         	call	_guardar	;wreg free
  1166                           
  1167                           ;Main.c: 70:     __delay_sec(5);
  1168  005446  0E05               	movlw	5
  1169  005448  EC6E  F02A         	call	___delay_sec
  1170  00544C                     l6398:
  1171                           
  1172                           ;Main.c: 72:     {;Main.c: 73:         Error(1);
  1173  00544C  0E01               	movlw	1
  1174  00544E  EC32  F025         	call	_Error
  1175                           
  1176                           ;Main.c: 74:         __delay_sec(1);
  1177  005452  0E01               	movlw	1
  1178  005454  EC6E  F02A         	call	___delay_sec
  1179                           
  1180                           ;Main.c: 75:         Error(15);
  1181  005458  0E0F               	movlw	15
  1182  00545A  EC32  F025         	call	_Error
  1183                           
  1184                           ;Main.c: 76:         __delay_sec(1);
  1185  00545E  0E01               	movlw	1
  1186  005460  EC6E  F02A         	call	___delay_sec
  1187  005464  D7F3               	goto	l6398
  1188  005466                     __end_of_main:
  1189                           	opt callstack 0
  1190                           
  1191 ;; *************** function _guardar *****************
  1192 ;; Defined at:
  1193 ;;		line 16 in file "Main.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  data            2  112[BANK0 ] PTR unsigned char 
  1196 ;;		 -> STR_4(20), 
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;  bw              2  114[BANK0 ] unsigned short 
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      void 
  1201 ;; Registers used:
  1202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1208 ;;      Params:         0       2       0       0       0       0       0       0       0
  1209 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1211 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1212 ;;Total ram usage:        4 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:   14
  1215 ;; This function calls:
  1216 ;;		_Error
  1217 ;;		_SYSTEM_Initialize
  1218 ;;		___delay_sec
  1219 ;;		_f_close
  1220 ;;		_f_lseek
  1221 ;;		_f_mount
  1222 ;;		_f_open
  1223 ;;		_f_write
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text1
  1230  004328                     __ptext1:
  1231                           	opt callstack 0
  1232  004328                     _guardar:
  1233                           	opt callstack 16
  1234                           
  1235                           ;Main.c: 17:     UINT bw;;Main.c: 18:     SYSTEM_Initialize();
  1236                           
  1237                           ;incstack = 0
  1238  004328  EC14  F02B         	call	_SYSTEM_Initialize	;wreg free
  1239                           
  1240                           ;Main.c: 19:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1241  00432C  0ED2               	movlw	low _FatFs
  1242  00432E  6E52               	movwf	f_mount@fs,c
  1243  004330  0E05               	movlw	high _FatFs
  1244  004332  6E53               	movwf	f_mount@fs+1,c
  1245  004334  0E14               	movlw	low (STR_4+19)
  1246  004336  6E54               	movwf	f_mount@path,c
  1247  004338  0E08               	movlw	high (STR_4+19)
  1248  00433A  6E55               	movwf	f_mount@path+1,c
  1249  00433C  0E01               	movlw	1
  1250  00433E  6E56               	movwf	f_mount@opt,c
  1251  004340  EC2A  F027         	call	_f_mount	;wreg free
  1252  004344  0900               	iorlw	0
  1253  004346  B4D8               	btfsc	status,2,c
  1254  004348  D018               	goto	u8670
  1255                           
  1256                           ;Main.c: 20:         Error(1);
  1257  00434A  0E01               	movlw	1
  1258  00434C  EC32  F025         	call	_Error
  1259                           
  1260                           ;Main.c: 21:         __delay_sec(2);
  1261  004350  0E02               	movlw	2
  1262  004352  EC6E  F02A         	call	___delay_sec
  1263                           
  1264                           ;Main.c: 22:         Error(99);
  1265  004356  0E63               	movlw	99
  1266  004358  EC32  F025         	call	_Error
  1267  00435C                     l6346:
  1268                           
  1269                           ;Main.c: 23:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1270  00435C  0ED2               	movlw	low _FatFs
  1271  00435E  6E52               	movwf	f_mount@fs,c
  1272  004360  0E05               	movlw	high _FatFs
  1273  004362  6E53               	movwf	f_mount@fs+1,c
  1274  004364  0E14               	movlw	low (STR_4+19)
  1275  004366  6E54               	movwf	f_mount@path,c
  1276  004368  0E08               	movlw	high (STR_4+19)
  1277  00436A  6E55               	movwf	f_mount@path+1,c
  1278  00436C  0E01               	movlw	1
  1279  00436E  6E56               	movwf	f_mount@opt,c
  1280  004370  EC2A  F027         	call	_f_mount	;wreg free
  1281  004374  0900               	iorlw	0
  1282  004376  A4D8               	btfss	status,2,c
  1283  004378  D7F1               	goto	l6346
  1284  00437A                     u8670:
  1285                           
  1286                           ;Main.c: 28:     Error(2);
  1287  00437A  0E02               	movlw	2
  1288  00437C  EC32  F025         	call	_Error
  1289                           
  1290                           ;Main.c: 29:     __delay_sec(2);
  1291  004380  0E02               	movlw	2
  1292  004382  EC6E  F02A         	call	___delay_sec
  1293                           
  1294                           ;Main.c: 30:     Error(99);
  1295  004386  0E63               	movlw	99
  1296  004388  EC32  F025         	call	_Error
  1297                           
  1298                           ;Main.c: 32:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1299  00438C  0EDA               	movlw	low _Fil
  1300  00438E  0100               	movlb	0	; () banked
  1301  004390  6F9A               	movwf	f_open@fp& (0+255),b
  1302  004392  0E00               	movlw	high _Fil
  1303  004394  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1304  004396  0E24               	movlw	low STR_3
  1305  004398  6F9C               	movwf	f_open@path& (0+255),b
  1306  00439A  0E08               	movlw	high STR_3
  1307  00439C  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1308  00439E  0E13               	movlw	19
  1309  0043A0  6F9E               	movwf	f_open@mode& (0+255),b
  1310  0043A2  ECE0  F017         	call	_f_open	;wreg free
  1311  0043A6  0900               	iorlw	0
  1312  0043A8  A4D8               	btfss	status,2,c
  1313  0043AA  D05C               	goto	l6390
  1314                           
  1315                           ;Main.c: 33:         Error(3);
  1316  0043AC  0E03               	movlw	3
  1317  0043AE  EC32  F025         	call	_Error
  1318                           
  1319                           ;Main.c: 36:         __delay_sec(2);
  1320  0043B2  0E02               	movlw	2
  1321  0043B4  EC6E  F02A         	call	___delay_sec
  1322                           
  1323                           ;Main.c: 37:          Error(99);
  1324  0043B8  0E63               	movlw	99
  1325  0043BA  EC32  F025         	call	_Error
  1326                           
  1327                           ;Main.c: 39:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1328  0043BE  0100               	movlb	0	; () banked
  1329  0043C0  51E4               	movf	(_Fil+10)& (0+255),w,b
  1330  0043C2  11E5               	iorwf	(_Fil+11)& (0+255),w,b
  1331  0043C4  11E6               	iorwf	(_Fil+12)& (0+255),w,b
  1332  0043C6  11E7               	iorwf	(_Fil+13)& (0+255),w,b
  1333  0043C8  B4D8               	btfsc	status,2,c
  1334  0043CA  D011               	goto	l6368
  1335                           
  1336                           ; BSR set to: 0
  1337  0043CC  0EDA               	movlw	low _Fil
  1338  0043CE  6F6D               	movwf	f_lseek@fp& (0+255),b
  1339  0043D0  0E00               	movlw	high _Fil
  1340  0043D2  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1341  0043D4  C0E4  F06F         	movff	_Fil+10,f_lseek@ofs
  1342  0043D8  C0E5  F070         	movff	_Fil+11,f_lseek@ofs+1
  1343  0043DC  C0E6  F071         	movff	_Fil+12,f_lseek@ofs+2
  1344  0043E0  C0E7  F072         	movff	_Fil+13,f_lseek@ofs+3
  1345  0043E4  ECA1  F00C         	call	_f_lseek	;wreg free
  1346  0043E8  0900               	iorlw	0
  1347  0043EA  A4D8               	btfss	status,2,c
  1348  0043EC  D025               	goto	l6382
  1349  0043EE                     l6368:
  1350                           
  1351                           ;Main.c: 40:                 Error(4);
  1352  0043EE  0E04               	movlw	4
  1353  0043F0  EC32  F025         	call	_Error
  1354                           
  1355                           ;Main.c: 41:                 __delay_sec(2);
  1356  0043F4  0E02               	movlw	2
  1357  0043F6  EC6E  F02A         	call	___delay_sec
  1358                           
  1359                           ;Main.c: 43:                 Error(99);
  1360  0043FA  0E63               	movlw	99
  1361  0043FC  EC32  F025         	call	_Error
  1362                           
  1363                           ;Main.c: 44:                 f_write(&Fil, data , 28 , &bw);
  1364  004400  0EDA               	movlw	low _Fil
  1365  004402  0100               	movlb	0	; () banked
  1366  004404  6F6D               	movwf	f_write@fp& (0+255),b
  1367  004406  0E00               	movlw	high _Fil
  1368  004408  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1369  00440A  C0D0  F06F         	movff	guardar@data,f_write@buff
  1370  00440E  C0D1  F070         	movff	guardar@data+1,f_write@buff+1
  1371  004412  0E00               	movlw	0
  1372  004414  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1373  004416  0E1C               	movlw	28
  1374  004418  6F71               	movwf	f_write@btw& (0+255),b
  1375  00441A  0ED2               	movlw	low guardar@bw
  1376  00441C  6F73               	movwf	f_write@bw& (0+255),b
  1377  00441E  0E00               	movlw	high guardar@bw
  1378  004420  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1379  004422  ECEF  F008         	call	_f_write	;wreg free
  1380                           
  1381                           ;Main.c: 46:                 Error(5);
  1382  004426  0E05               	movlw	5
  1383  004428  EC32  F025         	call	_Error
  1384                           
  1385                           ;Main.c: 47:                 __delay_sec(2);
  1386  00442C  0E02               	movlw	2
  1387  00442E  EC6E  F02A         	call	___delay_sec
  1388                           
  1389                           ;Main.c: 48:                  Error(99);
  1390  004432  0E63               	movlw	99
  1391  004434  EC32  F025         	call	_Error
  1392  004438                     l6382:
  1393  004438  0EDA               	movlw	low _Fil
  1394  00443A  6E4E               	movwf	f_close@fp,c
  1395  00443C  0E00               	movlw	high _Fil
  1396  00443E  6E4F               	movwf	f_close@fp+1,c
  1397  004440  EC51  F02A         	call	_f_close	;wreg free
  1398                           
  1399                           ;Main.c: 50:                 Error(6);
  1400  004444  0E06               	movlw	6
  1401  004446  EC32  F025         	call	_Error
  1402                           
  1403                           ;Main.c: 51:                 __delay_sec(1);
  1404  00444A  0E01               	movlw	1
  1405  00444C  EC6E  F02A         	call	___delay_sec
  1406                           
  1407                           ;Main.c: 53:                 Error(7);
  1408  004450  0E07               	movlw	7
  1409  004452  EC32  F025         	call	_Error
  1410                           
  1411                           ;Main.c: 54:                 __delay_sec(2);
  1412  004456  0E02               	movlw	2
  1413  004458  EC6E  F02A         	call	___delay_sec
  1414                           
  1415                           ;Main.c: 55:                  Error(99);
  1416  00445C  0E63               	movlw	99
  1417  00445E  EC32  F025         	call	_Error
  1418                           
  1419                           ;Main.c: 57:  }
  1420  004462  0012               	return	
  1421  004464                     l6390:
  1422                           
  1423                           ;Main.c: 59:         Error(11);
  1424  004464  0E0B               	movlw	11
  1425  004466  EC32  F025         	call	_Error
  1426  00446A  0012               	return		;funcret
  1427  00446C                     __end_of_guardar:
  1428                           	opt callstack 0
  1429                           
  1430 ;; *************** function _f_write *****************
  1431 ;; Defined at:
  1432 ;;		line 2691 in file "ff.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  fp              2   13[BANK0 ] PTR struct .
  1435 ;;		 -> Fil(32), 
  1436 ;;  buff            2   15[BANK0 ] PTR const void 
  1437 ;;		 -> STR_4(20), 
  1438 ;;  btw             2   17[BANK0 ] unsigned short 
  1439 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1440 ;;		 -> guardar@bw(2), 
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  clst            4   43[BANK0 ] unsigned long 
  1443 ;;  sect            4   39[BANK0 ] unsigned long 
  1444 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1445 ;;  cc              2   37[BANK0 ] unsigned short 
  1446 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1447 ;;		 -> STR_4(20), 
  1448 ;;  csect           1   36[BANK0 ] unsigned char 
  1449 ;;  res             1   33[BANK0 ] enum E93
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  1    wreg      enum E4918
  1452 ;; Registers used:
  1453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1459 ;;      Params:         0       8       0       0       0       0       0       0       0
  1460 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1461 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1462 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1463 ;;Total ram usage:       36 bytes
  1464 ;; Hardware stack levels used:    1
  1465 ;; Hardware stack levels required when called:   10
  1466 ;; This function calls:
  1467 ;;		_clust2sect
  1468 ;;		_create_chain
  1469 ;;		_disk_write
  1470 ;;		_mem_cpy
  1471 ;;		_move_window
  1472 ;;		_sync_window
  1473 ;;		_validate
  1474 ;; This function is called by:
  1475 ;;		_guardar
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text2
  1480  0011DE                     __ptext2:
  1481                           	opt callstack 0
  1482  0011DE                     _f_write:
  1483                           	opt callstack 19
  1484                           
  1485                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1486                           
  1487                           ;incstack = 0
  1488  0011DE  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1489  0011E2  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1490                           
  1491                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1492  0011E6  C073  FFD9         	movff	f_write@bw,fsr2l
  1493  0011EA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1494  0011EE  0E00               	movlw	0
  1495  0011F0  6EDE               	movwf	postinc2,c
  1496  0011F2  0E00               	movlw	0
  1497  0011F4  6EDD               	movwf	postdec2,c
  1498                           
  1499                           ;ff.c: 2707:  res = validate(fp);
  1500  0011F6  C06D  F002         	movff	f_write@fp,validate@obj
  1501  0011FA  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1502  0011FE  ECD5  F027         	call	_validate	;wreg free
  1503  001202  0100               	movlb	0	; () banked
  1504  001204  6F81               	movwf	f_write@res& (0+255),b
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1508  001206  5181               	movf	f_write@res& (0+255),w,b
  1509  001208  A4D8               	btfss	status,2,c
  1510  00120A  0012               	return	
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;ff.c: 2709:  if (fp->err)
  1514  00120C  EE20 F005          	lfsr	2,5
  1515  001210  516D               	movf	f_write@fp& (0+255),w,b
  1516  001212  26D9               	addwf	fsr2l,f,c
  1517  001214  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1518  001216  22DA               	addwfc	fsr2h,f,c
  1519  001218  50DF               	movf	indf2,w,c
  1520  00121A  A4D8               	btfss	status,2,c
  1521  00121C  0012               	return	
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1525  00121E  EE20 F004          	lfsr	2,4
  1526  001222  516D               	movf	f_write@fp& (0+255),w,b
  1527  001224  26D9               	addwf	fsr2l,f,c
  1528  001226  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1529  001228  22DA               	addwfc	fsr2h,f,c
  1530  00122A  A2DF               	btfss	indf2,1,c
  1531  00122C  0012               	return	
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1535  00122E  EE20 F006          	lfsr	2,6
  1536  001232  516D               	movf	f_write@fp& (0+255),w,b
  1537  001234  26D9               	addwf	fsr2l,f,c
  1538  001236  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1539  001238  22DA               	addwfc	fsr2h,f,c
  1540  00123A  EE10 F006          	lfsr	1,6
  1541  00123E  516D               	movf	f_write@fp& (0+255),w,b
  1542  001240  26E1               	addwf	fsr1l,f,c
  1543  001242  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1544  001244  22E2               	addwfc	fsr1h,f,c
  1545  001246  CFE6 F079          	movff	postinc1,??_f_write+4
  1546  00124A  CFE6 F07A          	movff	postinc1,??_f_write+5
  1547  00124E  CFE6 F07B          	movff	postinc1,??_f_write+6
  1548  001252  CFE6 F07C          	movff	postinc1,??_f_write+7
  1549  001256  5171               	movf	f_write@btw& (0+255),w,b
  1550  001258  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1551  00125A  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1552  00125C  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1553  00125E  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1554  001260  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1555  001262  0E00               	movlw	0
  1556  001264  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1557  001266  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1558  001268  0E00               	movlw	0
  1559  00126A  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1560  00126C  6F80               	movwf	(??_f_write+11)& (0+255),b
  1561  00126E  50DE               	movf	postinc2,w,c
  1562  001270  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1563  001272  50DE               	movf	postinc2,w,c
  1564  001274  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1565  001276  50DE               	movf	postinc2,w,c
  1566  001278  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1567  00127A  50DE               	movf	postinc2,w,c
  1568  00127C  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1569  00127E  B0D8               	btfsc	status,0,c
  1570  001280  D329               	goto	l6314
  1571                           
  1572                           ; BSR set to: 0
  1573  001282  0E00               	movlw	0
  1574  001284  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1575  001286  0E00               	movlw	0
  1576  001288  6F71               	movwf	f_write@btw& (0+255),b
  1577  00128A  D324               	goto	l6314
  1578  00128C                     l6206:
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1582  00128C  EE20 F006          	lfsr	2,6
  1583  001290  516D               	movf	f_write@fp& (0+255),w,b
  1584  001292  26D9               	addwf	fsr2l,f,c
  1585  001294  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1586  001296  22DA               	addwfc	fsr2h,f,c
  1587  001298  0EFF               	movlw	255
  1588  00129A  14DE               	andwf	postinc2,w,c
  1589  00129C  6F75               	movwf	??_f_write& (0+255),b
  1590  00129E  0E01               	movlw	1
  1591  0012A0  14DE               	andwf	postinc2,w,c
  1592  0012A2  6F76               	movwf	(??_f_write+1)& (0+255),b
  1593  0012A4  0E00               	movlw	0
  1594  0012A6  14DE               	andwf	postinc2,w,c
  1595  0012A8  6F77               	movwf	(??_f_write+2)& (0+255),b
  1596  0012AA  0E00               	movlw	0
  1597  0012AC  14DE               	andwf	postinc2,w,c
  1598  0012AE  6F78               	movwf	(??_f_write+3)& (0+255),b
  1599  0012B0  5175               	movf	??_f_write& (0+255),w,b
  1600  0012B2  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1601  0012B4  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1602  0012B6  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1603  0012B8  A4D8               	btfss	status,2,c
  1604  0012BA  D26A               	goto	l6290
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1608  0012BC  EE20 F006          	lfsr	2,6
  1609  0012C0  516D               	movf	f_write@fp& (0+255),w,b
  1610  0012C2  26D9               	addwf	fsr2l,f,c
  1611  0012C4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1612  0012C6  22DA               	addwfc	fsr2h,f,c
  1613  0012C8  CFDE F075          	movff	postinc2,??_f_write
  1614  0012CC  CFDE F076          	movff	postinc2,??_f_write+1
  1615  0012D0  CFDE F077          	movff	postinc2,??_f_write+2
  1616  0012D4  CFDE F078          	movff	postinc2,??_f_write+3
  1617  0012D8  0E0A               	movlw	10
  1618  0012DA  D005               	goto	u8400
  1619  0012DC                     u8405:
  1620  0012DC  90D8               	bcf	status,0,c
  1621  0012DE  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1622  0012E0  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1623  0012E2  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1624  0012E4  3375               	rrcf	??_f_write& (0+255),f,b
  1625  0012E6                     u8400:
  1626  0012E6  2EE8               	decfsz	wreg,f,c
  1627  0012E8  D7F9               	goto	u8405
  1628  0012EA  C06D  FFD9         	movff	f_write@fp,fsr2l
  1629  0012EE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1630  0012F2  EE10 F002          	lfsr	1,2
  1631  0012F6  50DE               	movf	postinc2,w,c
  1632  0012F8  26E1               	addwf	fsr1l,f,c
  1633  0012FA  50DD               	movf	postdec2,w,c
  1634  0012FC  22E2               	addwfc	fsr1h,f,c
  1635  0012FE  50E7               	movf	indf1,w,c
  1636  001300  6F79               	movwf	(??_f_write+4)& (0+255),b
  1637  001302  0579               	decf	(??_f_write+4)& (0+255),w,b
  1638  001304  1575               	andwf	??_f_write& (0+255),w,b
  1639  001306  6F84               	movwf	f_write@csect& (0+255),b
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;ff.c: 2719:    if (!csect) {
  1643  001308  5184               	movf	f_write@csect& (0+255),w,b
  1644  00130A  A4D8               	btfss	status,2,c
  1645  00130C  D0A3               	goto	l6242
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1649  00130E  EE20 F006          	lfsr	2,6
  1650  001312  516D               	movf	f_write@fp& (0+255),w,b
  1651  001314  26D9               	addwf	fsr2l,f,c
  1652  001316  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1653  001318  22DA               	addwfc	fsr2h,f,c
  1654  00131A  50DE               	movf	postinc2,w,c
  1655  00131C  10DE               	iorwf	postinc2,w,c
  1656  00131E  10DE               	iorwf	postinc2,w,c
  1657  001320  10DE               	iorwf	postinc2,w,c
  1658  001322  A4D8               	btfss	status,2,c
  1659  001324  D027               	goto	l6220
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;ff.c: 2721:      clst = fp->sclust;
  1663  001326  EE20 F00E          	lfsr	2,14
  1664  00132A  516D               	movf	f_write@fp& (0+255),w,b
  1665  00132C  26D9               	addwf	fsr2l,f,c
  1666  00132E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1667  001330  22DA               	addwfc	fsr2h,f,c
  1668  001332  CFDE F08B          	movff	postinc2,f_write@clst
  1669  001336  CFDE F08C          	movff	postinc2,f_write@clst+1
  1670  00133A  CFDE F08D          	movff	postinc2,f_write@clst+2
  1671  00133E  CFDE F08E          	movff	postinc2,f_write@clst+3
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;ff.c: 2722:      if (clst == 0)
  1675  001342  518B               	movf	f_write@clst& (0+255),w,b
  1676  001344  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1677  001346  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1678  001348  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1679  00134A  A4D8               	btfss	status,2,c
  1680  00134C  D033               	goto	l6222
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1684  00134E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1685  001352  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1686  001356  CFDE F056          	movff	postinc2,create_chain@fs
  1687  00135A  CFDD F057          	movff	postdec2,create_chain@fs+1
  1688  00135E  0E00               	movlw	0
  1689  001360  6E58               	movwf	create_chain@clst,c
  1690  001362  0E00               	movlw	0
  1691  001364  6E59               	movwf	create_chain@clst+1,c
  1692  001366  0E00               	movlw	0
  1693  001368  6E5A               	movwf	create_chain@clst+2,c
  1694  00136A  0E00               	movlw	0
  1695  00136C  6E5B               	movwf	create_chain@clst+3,c
  1696  00136E  ECAB  F019         	call	_create_chain	;wreg free
  1697  001372  D018               	goto	L1
  1698  001374                     l6220:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1702  001374  C06D  FFD9         	movff	f_write@fp,fsr2l
  1703  001378  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1704  00137C  CFDE F056          	movff	postinc2,create_chain@fs
  1705  001380  CFDD F057          	movff	postdec2,create_chain@fs+1
  1706  001384  EE20 F012          	lfsr	2,18
  1707  001388  516D               	movf	f_write@fp& (0+255),w,b
  1708  00138A  26D9               	addwf	fsr2l,f,c
  1709  00138C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1710  00138E  22DA               	addwfc	fsr2h,f,c
  1711  001390  CFDE F058          	movff	postinc2,create_chain@clst
  1712  001394  CFDE F059          	movff	postinc2,create_chain@clst+1
  1713  001398  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1714  00139C  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1715  0013A0  ECAB  F019         	call	_create_chain	;wreg free
  1716  0013A4                     L1:
  1717  0013A4  C056  F08B         	movff	?_create_chain,f_write@clst
  1718  0013A8  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1719  0013AC  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1720  0013B0  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1721  0013B4                     l6222:
  1722                           
  1723                           ;ff.c: 2732:     if (clst == 0) break;
  1724  0013B4  0100               	movlb	0	; () banked
  1725  0013B6  518B               	movf	f_write@clst& (0+255),w,b
  1726  0013B8  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1727  0013BA  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1728  0013BC  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1729  0013BE  B4D8               	btfsc	status,2,c
  1730  0013C0  D28D               	goto	u8620
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1734  0013C2  058B               	decf	f_write@clst& (0+255),w,b
  1735  0013C4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1736  0013C6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1737  0013C8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1738  0013CA  A4D8               	btfss	status,2,c
  1739  0013CC  D009               	goto	l6232
  1740                           
  1741                           ; BSR set to: 0
  1742  0013CE  EE20 F005          	lfsr	2,5
  1743  0013D2  516D               	movf	f_write@fp& (0+255),w,b
  1744  0013D4  26D9               	addwf	fsr2l,f,c
  1745  0013D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1746  0013D8  22DA               	addwfc	fsr2h,f,c
  1747  0013DA  0E02               	movlw	2
  1748  0013DC  6EDF               	movwf	indf2,c
  1749  0013DE  0012               	return	
  1750  0013E0                     l6232:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1754  0013E0  298B               	incf	f_write@clst& (0+255),w,b
  1755  0013E2  E110               	bnz	l6238
  1756  0013E4  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1757  0013E6  E10E               	bnz	l6238
  1758  0013E8  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1759  0013EA  E10C               	bnz	l6238
  1760  0013EC  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1761  0013EE  A4D8               	btfss	status,2,c
  1762  0013F0  D009               	goto	l6238
  1763                           
  1764                           ; BSR set to: 0
  1765  0013F2  EE20 F005          	lfsr	2,5
  1766  0013F6  516D               	movf	f_write@fp& (0+255),w,b
  1767  0013F8  26D9               	addwf	fsr2l,f,c
  1768  0013FA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1769  0013FC  22DA               	addwfc	fsr2h,f,c
  1770  0013FE  0E01               	movlw	1
  1771  001400  6EDF               	movwf	indf2,c
  1772  001402  0012               	return	
  1773  001404                     l6238:
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;ff.c: 2735:     fp->clust = clst;
  1777  001404  EE20 F012          	lfsr	2,18
  1778  001408  516D               	movf	f_write@fp& (0+255),w,b
  1779  00140A  26D9               	addwf	fsr2l,f,c
  1780  00140C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1781  00140E  22DA               	addwfc	fsr2h,f,c
  1782  001410  C08B  FFDE         	movff	f_write@clst,postinc2
  1783  001414  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1784  001418  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1785  00141C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1786                           
  1787                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1788  001420  EE20 F00E          	lfsr	2,14
  1789  001424  516D               	movf	f_write@fp& (0+255),w,b
  1790  001426  26D9               	addwf	fsr2l,f,c
  1791  001428  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1792  00142A  22DA               	addwfc	fsr2h,f,c
  1793  00142C  50DE               	movf	postinc2,w,c
  1794  00142E  10DE               	iorwf	postinc2,w,c
  1795  001430  10DE               	iorwf	postinc2,w,c
  1796  001432  10DE               	iorwf	postinc2,w,c
  1797  001434  A4D8               	btfss	status,2,c
  1798  001436  D00E               	goto	l6242
  1799                           
  1800                           ; BSR set to: 0
  1801  001438  EE20 F00E          	lfsr	2,14
  1802  00143C  516D               	movf	f_write@fp& (0+255),w,b
  1803  00143E  26D9               	addwf	fsr2l,f,c
  1804  001440  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1805  001442  22DA               	addwfc	fsr2h,f,c
  1806  001444  C08B  FFDE         	movff	f_write@clst,postinc2
  1807  001448  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1808  00144C  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1809  001450  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1810  001454                     l6242:
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1814  001454  EE20 F016          	lfsr	2,22
  1815  001458  516D               	movf	f_write@fp& (0+255),w,b
  1816  00145A  26D9               	addwf	fsr2l,f,c
  1817  00145C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1818  00145E  22DA               	addwfc	fsr2h,f,c
  1819  001460  C06D  FFE1         	movff	f_write@fp,fsr1l
  1820  001464  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1821  001468  EE00 F02A          	lfsr	0,42
  1822  00146C  50E6               	movf	postinc1,w,c
  1823  00146E  26E9               	addwf	fsr0l,f,c
  1824  001470  50E5               	movf	postdec1,w,c
  1825  001472  22EA               	addwfc	fsr0h,f,c
  1826  001474  50DE               	movf	postinc2,w,c
  1827  001476  18EE               	xorwf	postinc0,w,c
  1828  001478  E121               	bnz	l6250
  1829  00147A  50DE               	movf	postinc2,w,c
  1830  00147C  18EE               	xorwf	postinc0,w,c
  1831  00147E  E11E               	bnz	l6250
  1832  001480  50DE               	movf	postinc2,w,c
  1833  001482  18EE               	xorwf	postinc0,w,c
  1834  001484  E11B               	bnz	l6250
  1835  001486  50DE               	movf	postinc2,w,c
  1836  001488  18EE               	xorwf	postinc0,w,c
  1837  00148A  A4D8               	btfss	status,2,c
  1838  00148C  D017               	goto	l6250
  1839                           
  1840                           ; BSR set to: 0
  1841  00148E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1842  001492  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1843  001496  CFDE F01B          	movff	postinc2,sync_window@fs
  1844  00149A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1845  00149E  ECA0  F01F         	call	_sync_window	;wreg free
  1846  0014A2  0900               	iorlw	0
  1847  0014A4  B4D8               	btfsc	status,2,c
  1848  0014A6  D00A               	goto	l6250
  1849                           
  1850                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1851  0014A8  0100               	movlb	0	; () banked
  1852  0014AA  EE20 F005          	lfsr	2,5
  1853  0014AE  516D               	movf	f_write@fp& (0+255),w,b
  1854  0014B0  26D9               	addwf	fsr2l,f,c
  1855  0014B2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1856  0014B4  22DA               	addwfc	fsr2h,f,c
  1857  0014B6  0E01               	movlw	1
  1858  0014B8  6EDF               	movwf	indf2,c
  1859  0014BA  0012               	return	
  1860  0014BC                     l6250:
  1861                           
  1862                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1863  0014BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1864  0014C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1865  0014C4  CFDE F00D          	movff	postinc2,clust2sect@fs
  1866  0014C8  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1867  0014CC  0100               	movlb	0	; () banked
  1868  0014CE  EE20 F012          	lfsr	2,18
  1869  0014D2  516D               	movf	f_write@fp& (0+255),w,b
  1870  0014D4  26D9               	addwf	fsr2l,f,c
  1871  0014D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1872  0014D8  22DA               	addwfc	fsr2h,f,c
  1873  0014DA  CFDE F00F          	movff	postinc2,clust2sect@clst
  1874  0014DE  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1875  0014E2  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1876  0014E6  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1877  0014EA  ECCD  F026         	call	_clust2sect	;wreg free
  1878  0014EE  C00D  F087         	movff	?_clust2sect,f_write@sect
  1879  0014F2  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1880  0014F6  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1881  0014FA  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1882                           
  1883                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1884  0014FE  0100               	movlb	0	; () banked
  1885  001500  5187               	movf	f_write@sect& (0+255),w,b
  1886  001502  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1887  001504  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1888  001506  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1889  001508  A4D8               	btfss	status,2,c
  1890  00150A  D009               	goto	l6258
  1891                           
  1892                           ; BSR set to: 0
  1893  00150C  EE20 F005          	lfsr	2,5
  1894  001510  516D               	movf	f_write@fp& (0+255),w,b
  1895  001512  26D9               	addwf	fsr2l,f,c
  1896  001514  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1897  001516  22DA               	addwfc	fsr2h,f,c
  1898  001518  0E02               	movlw	2
  1899  00151A  6EDF               	movwf	indf2,c
  1900  00151C  0012               	return	
  1901  00151E                     l6258:
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;ff.c: 2750:    sect += csect;
  1905  00151E  5184               	movf	f_write@csect& (0+255),w,b
  1906  001520  2787               	addwf	f_write@sect& (0+255),f,b
  1907  001522  0E00               	movlw	0
  1908  001524  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1909  001526  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1910  001528  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1911                           
  1912                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1913  00152A  C071  F075         	movff	f_write@btw,??_f_write
  1914  00152E  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1915  001532  0E09               	movlw	9
  1916  001534  6F77               	movwf	(??_f_write+2)& (0+255),b
  1917  001536                     u8515:
  1918  001536  90D8               	bcf	status,0,c
  1919  001538  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1920  00153A  3375               	rrcf	??_f_write& (0+255),f,b
  1921  00153C  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1922  00153E  D7FB               	goto	u8515
  1923  001540  C075  F085         	movff	??_f_write,f_write@cc
  1924  001544  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1925                           
  1926                           ;ff.c: 2752:    if (cc) {
  1927  001548  5185               	movf	f_write@cc& (0+255),w,b
  1928  00154A  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1929  00154C  B4D8               	btfsc	status,2,c
  1930  00154E  D0D2               	goto	l6278
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1934  001550  5184               	movf	f_write@csect& (0+255),w,b
  1935  001552  2585               	addwf	f_write@cc& (0+255),w,b
  1936  001554  6F75               	movwf	??_f_write& (0+255),b
  1937  001556  0E00               	movlw	0
  1938  001558  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1939  00155A  6F76               	movwf	(??_f_write+1)& (0+255),b
  1940  00155C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1941  001560  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1942  001564  EE10 F002          	lfsr	1,2
  1943  001568  50DE               	movf	postinc2,w,c
  1944  00156A  26E1               	addwf	fsr1l,f,c
  1945  00156C  50DD               	movf	postdec2,w,c
  1946  00156E  22E2               	addwfc	fsr1h,f,c
  1947  001570  50E7               	movf	indf1,w,c
  1948  001572  6F77               	movwf	(??_f_write+2)& (0+255),b
  1949  001574  6B78               	clrf	(??_f_write+3)& (0+255),b
  1950  001576  5175               	movf	??_f_write& (0+255),w,b
  1951  001578  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1952  00157A  5176               	movf	(??_f_write+1)& (0+255),w,b
  1953  00157C  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1954  00157E  B0D8               	btfsc	status,0,c
  1955  001580  D012               	goto	l6264
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  1959  001582  C06D  FFD9         	movff	f_write@fp,fsr2l
  1960  001586  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1961  00158A  EE10 F002          	lfsr	1,2
  1962  00158E  50DE               	movf	postinc2,w,c
  1963  001590  26E1               	addwf	fsr1l,f,c
  1964  001592  50DD               	movf	postdec2,w,c
  1965  001594  22E2               	addwfc	fsr1h,f,c
  1966  001596  50E7               	movf	indf1,w,c
  1967  001598  6F75               	movwf	??_f_write& (0+255),b
  1968  00159A  5184               	movf	f_write@csect& (0+255),w,b
  1969  00159C  5D75               	subwf	??_f_write& (0+255),w,b
  1970  00159E  6F85               	movwf	f_write@cc& (0+255),b
  1971  0015A0  6B86               	clrf	(f_write@cc+1)& (0+255),b
  1972  0015A2  A0D8               	btfss	status,0,c
  1973  0015A4  0786               	decf	(f_write@cc+1)& (0+255),f,b
  1974  0015A6                     l6264:
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  1978  0015A6  C082  F011         	movff	f_write@wbuff,disk_write@buff
  1979  0015AA  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  1980  0015AE  C087  F013         	movff	f_write@sect,disk_write@sector
  1981  0015B2  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  1982  0015B6  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  1983  0015BA  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  1984  0015BE  C085  F017         	movff	f_write@cc,disk_write@count
  1985  0015C2  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  1986  0015C6  C06D  FFD9         	movff	f_write@fp,fsr2l
  1987  0015CA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1988  0015CE  EE10 F001          	lfsr	1,1
  1989  0015D2  50DE               	movf	postinc2,w,c
  1990  0015D4  26E1               	addwf	fsr1l,f,c
  1991  0015D6  50DD               	movf	postdec2,w,c
  1992  0015D8  22E2               	addwfc	fsr1h,f,c
  1993  0015DA  50E7               	movf	indf1,w,c
  1994  0015DC  ECD7  F022         	call	_disk_write
  1995  0015E0  0900               	iorlw	0
  1996  0015E2  B4D8               	btfsc	status,2,c
  1997  0015E4  D00A               	goto	l6270
  1998                           
  1999                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2000  0015E6  0100               	movlb	0	; () banked
  2001  0015E8  EE20 F005          	lfsr	2,5
  2002  0015EC  516D               	movf	f_write@fp& (0+255),w,b
  2003  0015EE  26D9               	addwf	fsr2l,f,c
  2004  0015F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2005  0015F2  22DA               	addwfc	fsr2h,f,c
  2006  0015F4  0E01               	movlw	1
  2007  0015F6  6EDF               	movwf	indf2,c
  2008  0015F8  0012               	return	
  2009  0015FA                     l6270:
  2010                           
  2011                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2012  0015FA  0100               	movlb	0	; () banked
  2013  0015FC  5185               	movf	f_write@cc& (0+255),w,b
  2014  0015FE  6F75               	movwf	??_f_write& (0+255),b
  2015  001600  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2016  001602  6F76               	movwf	(??_f_write+1)& (0+255),b
  2017  001604  6B77               	clrf	(??_f_write+2)& (0+255),b
  2018  001606  6B78               	clrf	(??_f_write+3)& (0+255),b
  2019  001608  C06D  FFD9         	movff	f_write@fp,fsr2l
  2020  00160C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2021  001610  EE10 F02A          	lfsr	1,42
  2022  001614  50DE               	movf	postinc2,w,c
  2023  001616  26E1               	addwf	fsr1l,f,c
  2024  001618  50DD               	movf	postdec2,w,c
  2025  00161A  22E2               	addwfc	fsr1h,f,c
  2026  00161C  CFE6 F079          	movff	postinc1,??_f_write+4
  2027  001620  CFE6 F07A          	movff	postinc1,??_f_write+5
  2028  001624  CFE6 F07B          	movff	postinc1,??_f_write+6
  2029  001628  CFE6 F07C          	movff	postinc1,??_f_write+7
  2030  00162C  5187               	movf	f_write@sect& (0+255),w,b
  2031  00162E  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2032  001630  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2033  001632  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2034  001634  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2035  001636  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2036  001638  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2037  00163A  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2038  00163C  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2039  00163E  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2040  001640  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2041  001642  6F80               	movwf	(??_f_write+11)& (0+255),b
  2042  001644  5175               	movf	??_f_write& (0+255),w,b
  2043  001646  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2044  001648  5176               	movf	(??_f_write+1)& (0+255),w,b
  2045  00164A  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2046  00164C  5177               	movf	(??_f_write+2)& (0+255),w,b
  2047  00164E  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2048  001650  5178               	movf	(??_f_write+3)& (0+255),w,b
  2049  001652  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2050  001654  B0D8               	btfsc	status,0,c
  2051  001656  D03E               	goto	l6276
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2055  001658  C06D  FFD9         	movff	f_write@fp,fsr2l
  2056  00165C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2057  001660  CFDE F075          	movff	postinc2,??_f_write
  2058  001664  CFDD F076          	movff	postdec2,??_f_write+1
  2059  001668  0E2E               	movlw	46
  2060  00166A  2575               	addwf	??_f_write& (0+255),w,b
  2061  00166C  6E01               	movwf	mem_cpy@dst,c
  2062  00166E  0E00               	movlw	0
  2063  001670  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2064  001672  6E02               	movwf	mem_cpy@dst+1,c
  2065  001674  C06D  FFD9         	movff	f_write@fp,fsr2l
  2066  001678  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2067  00167C  EE10 F02A          	lfsr	1,42
  2068  001680  50DE               	movf	postinc2,w,c
  2069  001682  26E1               	addwf	fsr1l,f,c
  2070  001684  50DD               	movf	postdec2,w,c
  2071  001686  22E2               	addwfc	fsr1h,f,c
  2072  001688  CFE6 F077          	movff	postinc1,??_f_write+2
  2073  00168C  CFE5 F078          	movff	postdec1,??_f_write+3
  2074  001690  5187               	movf	f_write@sect& (0+255),w,b
  2075  001692  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2076  001694  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2077  001696  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2078  001698  0E09               	movlw	9
  2079  00169A                     u8565:
  2080  00169A  90D8               	bcf	status,0,c
  2081  00169C  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2082  00169E  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2083  0016A0  2EE8               	decfsz	wreg,f,c
  2084  0016A2  D7FB               	goto	u8565
  2085  0016A4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2086  0016A6  2582               	addwf	f_write@wbuff& (0+255),w,b
  2087  0016A8  6E03               	movwf	mem_cpy@src,c
  2088  0016AA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2089  0016AC  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2090  0016AE  6E04               	movwf	mem_cpy@src+1,c
  2091  0016B0  0E02               	movlw	2
  2092  0016B2  6E06               	movwf	mem_cpy@cnt+1,c
  2093  0016B4  0E00               	movlw	0
  2094  0016B6  6E05               	movwf	mem_cpy@cnt,c
  2095  0016B8  EC70  F026         	call	_mem_cpy	;wreg free
  2096                           
  2097                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2098  0016BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  2099  0016C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2100  0016C4  EE10 F004          	lfsr	1,4
  2101  0016C8  50DE               	movf	postinc2,w,c
  2102  0016CA  26E1               	addwf	fsr1l,f,c
  2103  0016CC  50DD               	movf	postdec2,w,c
  2104  0016CE  22E2               	addwfc	fsr1h,f,c
  2105  0016D0  0E00               	movlw	0
  2106  0016D2  6EE7               	movwf	indf1,c
  2107  0016D4                     l6276:
  2108                           
  2109                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2110  0016D4  C085  F075         	movff	f_write@cc,??_f_write
  2111  0016D8  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2112  0016DC  0E09               	movlw	9
  2113  0016DE                     u8575:
  2114  0016DE  90D8               	bcf	status,0,c
  2115  0016E0  0100               	movlb	0	; () banked
  2116  0016E2  3775               	rlcf	??_f_write& (0+255),f,b
  2117  0016E4  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2118  0016E6  2EE8               	decfsz	wreg,f,c
  2119  0016E8  D7FA               	goto	u8575
  2120  0016EA  C075  F08F         	movff	??_f_write,f_write@wcnt
  2121  0016EE  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2122                           
  2123                           ;ff.c: 2771:     continue;
  2124  0016F2  D0D2               	goto	l6306
  2125  0016F4                     l6278:
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2129  0016F4  EE20 F00A          	lfsr	2,10
  2130  0016F8  516D               	movf	f_write@fp& (0+255),w,b
  2131  0016FA  26D9               	addwf	fsr2l,f,c
  2132  0016FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2133  0016FE  22DA               	addwfc	fsr2h,f,c
  2134  001700  EE10 F006          	lfsr	1,6
  2135  001704  516D               	movf	f_write@fp& (0+255),w,b
  2136  001706  26E1               	addwf	fsr1l,f,c
  2137  001708  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2138  00170A  22E2               	addwfc	fsr1h,f,c
  2139  00170C  50DE               	movf	postinc2,w,c
  2140  00170E  5CE6               	subwf	postinc1,w,c
  2141  001710  50DE               	movf	postinc2,w,c
  2142  001712  58E6               	subwfb	postinc1,w,c
  2143  001714  50DE               	movf	postinc2,w,c
  2144  001716  58E6               	subwfb	postinc1,w,c
  2145  001718  50DE               	movf	postinc2,w,c
  2146  00171A  58E6               	subwfb	postinc1,w,c
  2147  00171C  A0D8               	btfss	status,0,c
  2148  00171E  D029               	goto	l6288
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2152  001720  C06D  FFD9         	movff	f_write@fp,fsr2l
  2153  001724  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2154  001728  CFDE F01B          	movff	postinc2,sync_window@fs
  2155  00172C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2156  001730  ECA0  F01F         	call	_sync_window	;wreg free
  2157  001734  0900               	iorlw	0
  2158  001736  B4D8               	btfsc	status,2,c
  2159  001738  D00A               	goto	l6286
  2160  00173A  0100               	movlb	0	; () banked
  2161  00173C  EE20 F005          	lfsr	2,5
  2162  001740  516D               	movf	f_write@fp& (0+255),w,b
  2163  001742  26D9               	addwf	fsr2l,f,c
  2164  001744  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2165  001746  22DA               	addwfc	fsr2h,f,c
  2166  001748  0E01               	movlw	1
  2167  00174A  6EDF               	movwf	indf2,c
  2168  00174C  0012               	return	
  2169  00174E                     l6286:
  2170                           
  2171                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2172  00174E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2173  001752  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2174  001756  EE10 F02A          	lfsr	1,42
  2175  00175A  50DE               	movf	postinc2,w,c
  2176  00175C  26E1               	addwf	fsr1l,f,c
  2177  00175E  50DD               	movf	postdec2,w,c
  2178  001760  22E2               	addwfc	fsr1h,f,c
  2179  001762  C087  FFE6         	movff	f_write@sect,postinc1
  2180  001766  C088  FFE6         	movff	f_write@sect+1,postinc1
  2181  00176A  C089  FFE6         	movff	f_write@sect+2,postinc1
  2182  00176E  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2183  001772                     l6288:
  2184                           
  2185                           ;ff.c: 2785:    fp->dsect = sect;
  2186  001772  0100               	movlb	0	; () banked
  2187  001774  EE20 F016          	lfsr	2,22
  2188  001778  516D               	movf	f_write@fp& (0+255),w,b
  2189  00177A  26D9               	addwf	fsr2l,f,c
  2190  00177C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2191  00177E  22DA               	addwfc	fsr2h,f,c
  2192  001780  C087  FFDE         	movff	f_write@sect,postinc2
  2193  001784  C088  FFDE         	movff	f_write@sect+1,postinc2
  2194  001788  C089  FFDE         	movff	f_write@sect+2,postinc2
  2195  00178C  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2196  001790                     l6290:
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2200  001790  0EFF               	movlw	255
  2201  001792  6F75               	movwf	??_f_write& (0+255),b
  2202  001794  0E01               	movlw	1
  2203  001796  6F76               	movwf	(??_f_write+1)& (0+255),b
  2204  001798  EE20 F006          	lfsr	2,6
  2205  00179C  516D               	movf	f_write@fp& (0+255),w,b
  2206  00179E  26D9               	addwf	fsr2l,f,c
  2207  0017A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2208  0017A2  22DA               	addwfc	fsr2h,f,c
  2209  0017A4  CFDE F077          	movff	postinc2,??_f_write+2
  2210  0017A8  CFDD F078          	movff	postdec2,??_f_write+3
  2211  0017AC  5175               	movf	??_f_write& (0+255),w,b
  2212  0017AE  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2213  0017B0  5176               	movf	(??_f_write+1)& (0+255),w,b
  2214  0017B2  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2215  0017B4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2216  0017B6  0800               	sublw	0
  2217  0017B8  6F8F               	movwf	f_write@wcnt& (0+255),b
  2218  0017BA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2219  0017BC  A0D8               	btfss	status,0,c
  2220  0017BE  2AE8               	incf	wreg,f,c
  2221  0017C0  0802               	sublw	2
  2222  0017C2  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2226  0017C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2227  0017C6  5D71               	subwf	f_write@btw& (0+255),w,b
  2228  0017C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2229  0017CA  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2230  0017CC  B0D8               	btfsc	status,0,c
  2231  0017CE  D004               	goto	l6296
  2232                           
  2233                           ; BSR set to: 0
  2234  0017D0  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2235  0017D4  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2236  0017D8                     l6296:
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2240  0017D8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2241  0017DC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2242  0017E0  CFDE F030          	movff	postinc2,move_window@fs
  2243  0017E4  CFDD F031          	movff	postdec2,move_window@fs+1
  2244  0017E8  EE20 F016          	lfsr	2,22
  2245  0017EC  516D               	movf	f_write@fp& (0+255),w,b
  2246  0017EE  26D9               	addwf	fsr2l,f,c
  2247  0017F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2248  0017F2  22DA               	addwfc	fsr2h,f,c
  2249  0017F4  CFDE F032          	movff	postinc2,move_window@sector
  2250  0017F8  CFDE F033          	movff	postinc2,move_window@sector+1
  2251  0017FC  CFDE F034          	movff	postinc2,move_window@sector+2
  2252  001800  CFDE F035          	movff	postinc2,move_window@sector+3
  2253  001804  EC82  F027         	call	_move_window	;wreg free
  2254  001808  0900               	iorlw	0
  2255  00180A  B4D8               	btfsc	status,2,c
  2256  00180C  D00A               	goto	l6302
  2257                           
  2258                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2259  00180E  0100               	movlb	0	; () banked
  2260  001810  EE20 F005          	lfsr	2,5
  2261  001814  516D               	movf	f_write@fp& (0+255),w,b
  2262  001816  26D9               	addwf	fsr2l,f,c
  2263  001818  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2264  00181A  22DA               	addwfc	fsr2h,f,c
  2265  00181C  0E01               	movlw	1
  2266  00181E  6EDF               	movwf	indf2,c
  2267  001820  0012               	return	
  2268  001822                     l6302:
  2269                           
  2270                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2271  001822  0EFF               	movlw	255
  2272  001824  0100               	movlb	0	; () banked
  2273  001826  6F75               	movwf	??_f_write& (0+255),b
  2274  001828  0E01               	movlw	1
  2275  00182A  6F76               	movwf	(??_f_write+1)& (0+255),b
  2276  00182C  EE20 F006          	lfsr	2,6
  2277  001830  516D               	movf	f_write@fp& (0+255),w,b
  2278  001832  26D9               	addwf	fsr2l,f,c
  2279  001834  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2280  001836  22DA               	addwfc	fsr2h,f,c
  2281  001838  CFDE F077          	movff	postinc2,??_f_write+2
  2282  00183C  CFDD F078          	movff	postdec2,??_f_write+3
  2283  001840  5175               	movf	??_f_write& (0+255),w,b
  2284  001842  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2285  001844  5176               	movf	(??_f_write+1)& (0+255),w,b
  2286  001846  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2287  001848  C06D  FFD9         	movff	f_write@fp,fsr2l
  2288  00184C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2289  001850  CFDE F079          	movff	postinc2,??_f_write+4
  2290  001854  CFDD F07A          	movff	postdec2,??_f_write+5
  2291  001858  5177               	movf	(??_f_write+2)& (0+255),w,b
  2292  00185A  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2293  00185C  5178               	movf	(??_f_write+3)& (0+255),w,b
  2294  00185E  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2295  001860  0E2E               	movlw	46
  2296  001862  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2297  001864  6E01               	movwf	mem_cpy@dst,c
  2298  001866  0E00               	movlw	0
  2299  001868  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2300  00186A  6E02               	movwf	mem_cpy@dst+1,c
  2301  00186C  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2302  001870  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2303  001874  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2304  001878  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2305  00187C  EC70  F026         	call	_mem_cpy	;wreg free
  2306                           
  2307                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2308  001880  C06D  FFD9         	movff	f_write@fp,fsr2l
  2309  001884  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2310  001888  EE10 F004          	lfsr	1,4
  2311  00188C  50DE               	movf	postinc2,w,c
  2312  00188E  26E1               	addwf	fsr1l,f,c
  2313  001890  50DD               	movf	postdec2,w,c
  2314  001892  22E2               	addwfc	fsr1h,f,c
  2315  001894  0E01               	movlw	1
  2316  001896  6EE7               	movwf	indf1,c
  2317  001898                     l6306:
  2318  001898  0100               	movlb	0	; () banked
  2319  00189A  518F               	movf	f_write@wcnt& (0+255),w,b
  2320  00189C  2782               	addwf	f_write@wbuff& (0+255),f,b
  2321  00189E  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2322  0018A0  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2323                           
  2324                           ; BSR set to: 0
  2325  0018A2  EE20 F006          	lfsr	2,6
  2326  0018A6  516D               	movf	f_write@fp& (0+255),w,b
  2327  0018A8  26D9               	addwf	fsr2l,f,c
  2328  0018AA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2329  0018AC  22DA               	addwfc	fsr2h,f,c
  2330  0018AE  518F               	movf	f_write@wcnt& (0+255),w,b
  2331  0018B0  26DE               	addwf	postinc2,f,c
  2332  0018B2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2333  0018B4  22DE               	addwfc	postinc2,f,c
  2334  0018B6  0E00               	movlw	0
  2335  0018B8  22DE               	addwfc	postinc2,f,c
  2336  0018BA  22DE               	addwfc	postinc2,f,c
  2337                           
  2338                           ; BSR set to: 0
  2339  0018BC  C073  FFD9         	movff	f_write@bw,fsr2l
  2340  0018C0  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2341  0018C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2342  0018C6  26DE               	addwf	postinc2,f,c
  2343  0018C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2344  0018CA  22DD               	addwfc	postdec2,f,c
  2345                           
  2346                           ; BSR set to: 0
  2347  0018CC  518F               	movf	f_write@wcnt& (0+255),w,b
  2348  0018CE  5F71               	subwf	f_write@btw& (0+255),f,b
  2349  0018D0  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2350  0018D2  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2351  0018D4                     l6314:
  2352                           
  2353                           ; BSR set to: 0
  2354  0018D4  5171               	movf	f_write@btw& (0+255),w,b
  2355  0018D6  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2356  0018D8  A4D8               	btfss	status,2,c
  2357  0018DA  D4D8               	goto	l6206
  2358  0018DC                     u8620:
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2362  0018DC  EE20 F006          	lfsr	2,6
  2363  0018E0  516D               	movf	f_write@fp& (0+255),w,b
  2364  0018E2  26D9               	addwf	fsr2l,f,c
  2365  0018E4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2366  0018E6  22DA               	addwfc	fsr2h,f,c
  2367  0018E8  EE10 F00A          	lfsr	1,10
  2368  0018EC  516D               	movf	f_write@fp& (0+255),w,b
  2369  0018EE  26E1               	addwf	fsr1l,f,c
  2370  0018F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2371  0018F2  22E2               	addwfc	fsr1h,f,c
  2372  0018F4  50DE               	movf	postinc2,w,c
  2373  0018F6  5CE6               	subwf	postinc1,w,c
  2374  0018F8  50DE               	movf	postinc2,w,c
  2375  0018FA  58E6               	subwfb	postinc1,w,c
  2376  0018FC  50DE               	movf	postinc2,w,c
  2377  0018FE  58E6               	subwfb	postinc1,w,c
  2378  001900  50DE               	movf	postinc2,w,c
  2379  001902  58E6               	subwfb	postinc1,w,c
  2380  001904  B0D8               	btfsc	status,0,c
  2381  001906  D014               	goto	l6320
  2382                           
  2383                           ; BSR set to: 0
  2384  001908  EE20 F006          	lfsr	2,6
  2385  00190C  516D               	movf	f_write@fp& (0+255),w,b
  2386  00190E  26D9               	addwf	fsr2l,f,c
  2387  001910  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2388  001912  22DA               	addwfc	fsr2h,f,c
  2389  001914  EE10 F00A          	lfsr	1,10
  2390  001918  516D               	movf	f_write@fp& (0+255),w,b
  2391  00191A  26E1               	addwf	fsr1l,f,c
  2392  00191C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2393  00191E  22E2               	addwfc	fsr1h,f,c
  2394  001920  CFDE FFE6          	movff	postinc2,postinc1
  2395  001924  CFDE FFE6          	movff	postinc2,postinc1
  2396  001928  CFDE FFE6          	movff	postinc2,postinc1
  2397  00192C  CFDE FFE6          	movff	postinc2,postinc1
  2398  001930                     l6320:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;ff.c: 2801:  fp->flag |= 0x20;
  2402  001930  EE20 F004          	lfsr	2,4
  2403  001934  516D               	movf	f_write@fp& (0+255),w,b
  2404  001936  26D9               	addwf	fsr2l,f,c
  2405  001938  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2406  00193A  22DA               	addwfc	fsr2h,f,c
  2407  00193C  0E00               	movlw	0
  2408  00193E  8ADB               	bsf	plusw2,5,c
  2409                           
  2410                           ; BSR set to: 0
  2411  001940  0012               	return		;funcret
  2412  001942                     __end_of_f_write:
  2413                           	opt callstack 0
  2414                           
  2415 ;; *************** function _f_open *****************
  2416 ;; Defined at:
  2417 ;;		line 2449 in file "ff.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  fp              2   58[BANK0 ] PTR struct .
  2420 ;;		 -> Fil(32), 
  2421 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2422 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  2423 ;;  mode            1   62[BANK0 ] unsigned char 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  dj             22   90[BANK0 ] struct .
  2426 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2427 ;;  dw              4   83[BANK0 ] unsigned long 
  2428 ;;  cl              4   79[BANK0 ] unsigned long 
  2429 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2430 ;;		 -> NULL(0), FatFs(558), 
  2431 ;;  res             1   87[BANK0 ] enum E93
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      enum E4918
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2441 ;;      Params:         0       5       0       0       0       0       0       0       0
  2442 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2443 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2444 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2445 ;;Total ram usage:       54 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:   13
  2448 ;; This function calls:
  2449 ;;		_dir_register
  2450 ;;		_find_volume
  2451 ;;		_follow_path
  2452 ;;		_ld_clust
  2453 ;;		_move_window
  2454 ;;		_remove_chain
  2455 ;;		_st_clust
  2456 ;; This function is called by:
  2457 ;;		_guardar
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461                           	psect	text3
  2462  002FC0                     __ptext3:
  2463                           	opt callstack 0
  2464  002FC0                     _f_open:
  2465                           	opt callstack 16
  2466                           
  2467                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;incstack = 0
  2471  002FC0  0100               	movlb	0	; () banked
  2472  002FC2  519A               	movf	f_open@fp& (0+255),w,b
  2473  002FC4  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2474  002FC6  A4D8               	btfss	status,2,c
  2475  002FC8  D002               	goto	l5952
  2476                           
  2477                           ; BSR set to: 0
  2478  002FCA  0E09               	movlw	9
  2479  002FCC  0012               	return	
  2480  002FCE                     l5952:
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;ff.c: 2465:  fp->fs = 0;
  2484  002FCE  C09A  FFD9         	movff	f_open@fp,fsr2l
  2485  002FD2  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2486  002FD6  0E00               	movlw	0
  2487  002FD8  6EDE               	movwf	postinc2,c
  2488  002FDA  0E00               	movlw	0
  2489  002FDC  6EDD               	movwf	postdec2,c
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2493  002FDE  C0D6  F0BA         	movff	ff@FatFs,f_open@dj
  2494  002FE2  C0D7  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2498  002FE6  0E1F               	movlw	31
  2499  002FE8  179E               	andwf	f_open@mode& (0+255),f,b
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2503  002FEA  0EBA               	movlw	low f_open@dj
  2504  002FEC  6E45               	movwf	find_volume@rfs,c
  2505  002FEE  0E00               	movlw	high f_open@dj
  2506  002FF0  6E46               	movwf	find_volume@rfs+1,c
  2507  002FF2  0E9C               	movlw	low f_open@path
  2508  002FF4  6E47               	movwf	find_volume@path,c
  2509  002FF6  0E00               	movlw	high f_open@path
  2510  002FF8  6E48               	movwf	find_volume@path+1,c
  2511  002FFA  519E               	movf	f_open@mode& (0+255),w,b
  2512  002FFC  0BFE               	andlw	254
  2513  002FFE  6E49               	movwf	find_volume@wmode,c
  2514  003000  EC18  F004         	call	_find_volume	;wreg free
  2515  003004  0100               	movlb	0	; () banked
  2516  003006  6FB7               	movwf	f_open@res& (0+255),b
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;ff.c: 2479:  if (res == FR_OK) {
  2520  003008  51B7               	movf	f_open@res& (0+255),w,b
  2521  00300A  A4D8               	btfss	status,2,c
  2522  00300C  D1A2               	goto	l6056
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;ff.c: 2480:   (dj).fn = sfn;
  2526  00300E  0EA3               	movlw	low f_open@sfn
  2527  003010  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2528  003012  0E00               	movlw	high f_open@sfn
  2529  003014  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2533  003016  0EBA               	movlw	low f_open@dj
  2534  003018  6F86               	movwf	follow_path@dp& (0+255),b
  2535  00301A  0E00               	movlw	high f_open@dj
  2536  00301C  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2537  00301E  C09C  F088         	movff	f_open@path,follow_path@path
  2538  003022  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2539  003026  ECF1  F020         	call	_follow_path	;wreg free
  2540  00302A  0100               	movlb	0	; () banked
  2541  00302C  6FB7               	movwf	f_open@res& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;ff.c: 2482:   dir = dj.dir;
  2545  00302E  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2546  003032  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;ff.c: 2484:   if (res == FR_OK) {
  2550  003036  51B7               	movf	f_open@res& (0+255),w,b
  2551  003038  A4D8               	btfss	status,2,c
  2552  00303A  D006               	goto	l5974
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;ff.c: 2485:    if (!dir)
  2556  00303C  51B8               	movf	f_open@dir& (0+255),w,b
  2557  00303E  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2558  003040  A4D8               	btfss	status,2,c
  2559  003042  D002               	goto	l5974
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2563  003044  0E06               	movlw	6
  2564  003046  6FB7               	movwf	f_open@res& (0+255),b
  2565  003048                     l5974:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2569  003048  C09E  F09F         	movff	f_open@mode,??_f_open
  2570  00304C  0E1C               	movlw	28
  2571  00304E  179F               	andwf	??_f_open& (0+255),f,b
  2572  003050  B4D8               	btfsc	status,2,c
  2573  003052  D0D3               	goto	l6022
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;ff.c: 2494:    if (res != FR_OK) {
  2577  003054  51B7               	movf	f_open@res& (0+255),w,b
  2578  003056  B4D8               	btfsc	status,2,c
  2579  003058  D012               	goto	l5986
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2583  00305A  0E04               	movlw	4
  2584  00305C  19B7               	xorwf	f_open@res& (0+255),w,b
  2585  00305E  A4D8               	btfss	status,2,c
  2586  003060  D008               	goto	l5982
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;ff.c: 2499:      res = dir_register(&dj);
  2590  003062  0EBA               	movlw	low f_open@dj
  2591  003064  6F8A               	movwf	dir_register@dp& (0+255),b
  2592  003066  0E00               	movlw	high f_open@dj
  2593  003068  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2594  00306A  EC9F  F025         	call	_dir_register	;wreg free
  2595  00306E  0100               	movlb	0	; () banked
  2596  003070  6FB7               	movwf	f_open@res& (0+255),b
  2597  003072                     l5982:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;ff.c: 2501:     mode |= 0x08;
  2601  003072  879E               	bsf	f_open@mode& (0+255),3,b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;ff.c: 2502:     dir = dj.dir;
  2605  003074  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2606  003078  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2607                           
  2608                           ;ff.c: 2503:    }
  2609  00307C  D012               	goto	l646
  2610  00307E                     l5986:
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2614  00307E  EE20 F00B          	lfsr	2,11
  2615  003082  51B8               	movf	f_open@dir& (0+255),w,b
  2616  003084  26D9               	addwf	fsr2l,f,c
  2617  003086  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2618  003088  22DA               	addwfc	fsr2h,f,c
  2619  00308A  50DF               	movf	indf2,w,c
  2620  00308C  6F9F               	movwf	??_f_open& (0+255),b
  2621  00308E  0E11               	movlw	17
  2622  003090  179F               	andwf	??_f_open& (0+255),f,b
  2623  003092  B4D8               	btfsc	status,2,c
  2624  003094  D002               	goto	l647
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;ff.c: 2506:      res = FR_DENIED;
  2628  003096  0E07               	movlw	7
  2629  003098  D003               	goto	L2
  2630  00309A                     l647:
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;ff.c: 2508:      if (mode & 0x04)
  2634  00309A  A59E               	btfss	f_open@mode& (0+255),2,b
  2635  00309C  D002               	goto	l646
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;ff.c: 2509:       res = FR_EXIST;
  2639  00309E  0E08               	movlw	8
  2640  0030A0                     L2:
  2641  0030A0  6FB7               	movwf	f_open@res& (0+255),b
  2642  0030A2                     l646:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2646  0030A2  51B7               	movf	f_open@res& (0+255),w,b
  2647  0030A4  B4D8               	btfsc	status,2,c
  2648                           
  2649                           ; BSR set to: 0
  2650  0030A6  A79E               	btfss	f_open@mode& (0+255),3,b
  2651  0030A8  D0C1               	goto	l653
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2655                           
  2656                           ; BSR set to: 0
  2657  0030AA  EE20 F00E          	lfsr	2,14
  2658  0030AE  51B8               	movf	f_open@dir& (0+255),w,b
  2659  0030B0  26D9               	addwf	fsr2l,f,c
  2660  0030B2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2661  0030B4  22DA               	addwfc	fsr2h,f,c
  2662  0030B6  0E00               	movlw	0
  2663  0030B8  6EDE               	movwf	postinc2,c
  2664  0030BA  0E00               	movlw	0
  2665  0030BC  6EDE               	movwf	postinc2,c
  2666  0030BE  0E21               	movlw	33
  2667  0030C0  6EDE               	movwf	postinc2,c
  2668  0030C2  0E46               	movlw	70
  2669  0030C4  6EDD               	movwf	postdec2,c
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2673  0030C6  EE20 F016          	lfsr	2,22
  2674  0030CA  51B8               	movf	f_open@dir& (0+255),w,b
  2675  0030CC  26D9               	addwf	fsr2l,f,c
  2676  0030CE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2677  0030D0  22DA               	addwfc	fsr2h,f,c
  2678  0030D2  0E00               	movlw	0
  2679  0030D4  6EDE               	movwf	postinc2,c
  2680  0030D6  0E00               	movlw	0
  2681  0030D8  6EDE               	movwf	postinc2,c
  2682  0030DA  0E21               	movlw	33
  2683  0030DC  6EDE               	movwf	postinc2,c
  2684  0030DE  0E46               	movlw	70
  2685  0030E0  6EDD               	movwf	postdec2,c
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;ff.c: 2516:     dir[11] = 0;
  2689  0030E2  EE20 F00B          	lfsr	2,11
  2690  0030E6  51B8               	movf	f_open@dir& (0+255),w,b
  2691  0030E8  26D9               	addwf	fsr2l,f,c
  2692  0030EA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2693  0030EC  22DA               	addwfc	fsr2h,f,c
  2694  0030EE  0E00               	movlw	0
  2695  0030F0  6EDF               	movwf	indf2,c
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2699  0030F2  EE20 F01C          	lfsr	2,28
  2700  0030F6  51B8               	movf	f_open@dir& (0+255),w,b
  2701  0030F8  26D9               	addwf	fsr2l,f,c
  2702  0030FA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2703  0030FC  22DA               	addwfc	fsr2h,f,c
  2704  0030FE  6ADE               	clrf	postinc2,c
  2705  003100  6ADE               	clrf	postinc2,c
  2706  003102  6ADE               	clrf	postinc2,c
  2707  003104  6ADD               	clrf	postdec2,c
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2711  003106  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2712  00310A  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2713  00310E  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2714  003112  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2715  003116  ECA1  F028         	call	_ld_clust	;wreg free
  2716  00311A  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2717  00311E  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2718  003122  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2719  003126  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2720                           
  2721                           ;ff.c: 2519:     st_clust(dir, 0);
  2722  00312A  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2723  00312E  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2724  003132  0E00               	movlw	0
  2725  003134  6E03               	movwf	st_clust@cl,c
  2726  003136  0E00               	movlw	0
  2727  003138  6E04               	movwf	st_clust@cl+1,c
  2728  00313A  0E00               	movlw	0
  2729  00313C  6E05               	movwf	st_clust@cl+2,c
  2730  00313E  0E00               	movlw	0
  2731  003140  6E06               	movwf	st_clust@cl+3,c
  2732  003142  ECBC  F02A         	call	_st_clust	;wreg free
  2733                           
  2734                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2735  003146  0100               	movlb	0	; () banked
  2736  003148  EE20 F004          	lfsr	2,4
  2737  00314C  51BA               	movf	f_open@dj& (0+255),w,b
  2738  00314E  26D9               	addwf	fsr2l,f,c
  2739  003150  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2740  003152  22DA               	addwfc	fsr2h,f,c
  2741  003154  0E01               	movlw	1
  2742  003156  6EDF               	movwf	indf2,c
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;ff.c: 2521:     if (cl) {
  2746  003158  51AF               	movf	f_open@cl& (0+255),w,b
  2747  00315A  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2748  00315C  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2749  00315E  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2750  003160  B4D8               	btfsc	status,2,c
  2751  003162  D064               	goto	l653
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2755  003164  EE20 F02A          	lfsr	2,42
  2756  003168  51BA               	movf	f_open@dj& (0+255),w,b
  2757  00316A  26D9               	addwf	fsr2l,f,c
  2758  00316C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2759  00316E  22DA               	addwfc	fsr2h,f,c
  2760  003170  CFDE F0B3          	movff	postinc2,f_open@dw
  2761  003174  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2762  003178  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2763  00317C  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2767  003180  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2768  003184  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2769  003188  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2770  00318C  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2771  003190  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2772  003194  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2773  003198  EC4C  F020         	call	_remove_chain	;wreg free
  2774  00319C  0100               	movlb	0	; () banked
  2775  00319E  6FB7               	movwf	f_open@res& (0+255),b
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;ff.c: 2524:      if (res == FR_OK) {
  2779  0031A0  51B7               	movf	f_open@res& (0+255),w,b
  2780  0031A2  A4D8               	btfss	status,2,c
  2781  0031A4  D043               	goto	l653
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2785  0031A6  0EFF               	movlw	255
  2786  0031A8  25AF               	addwf	f_open@cl& (0+255),w,b
  2787  0031AA  6F9F               	movwf	??_f_open& (0+255),b
  2788  0031AC  0EFF               	movlw	255
  2789  0031AE  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2790  0031B0  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2791  0031B2  0EFF               	movlw	255
  2792  0031B4  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2793  0031B6  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2794  0031B8  0EFF               	movlw	255
  2795  0031BA  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2796  0031BC  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2797  0031BE  EE20 F00A          	lfsr	2,10
  2798  0031C2  51BA               	movf	f_open@dj& (0+255),w,b
  2799  0031C4  26D9               	addwf	fsr2l,f,c
  2800  0031C6  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2801  0031C8  22DA               	addwfc	fsr2h,f,c
  2802  0031CA  C09F  FFDE         	movff	??_f_open,postinc2
  2803  0031CE  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2804  0031D2  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2805  0031D6  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2809  0031DA  C0BA  F030         	movff	f_open@dj,move_window@fs
  2810  0031DE  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2811  0031E2  C0B3  F032         	movff	f_open@dw,move_window@sector
  2812  0031E6  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2813  0031EA  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2814  0031EE  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2815  0031F2  EC82  F027         	call	_move_window	;wreg free
  2816  0031F6  0100               	movlb	0	; () banked
  2817  0031F8  D018               	goto	L3
  2818  0031FA                     l6022:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;ff.c: 2532:    if (res == FR_OK) {
  2822  0031FA  51B7               	movf	f_open@res& (0+255),w,b
  2823  0031FC  A4D8               	btfss	status,2,c
  2824  0031FE  D016               	goto	l653
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2828  003200  EE20 F00B          	lfsr	2,11
  2829  003204  51B8               	movf	f_open@dir& (0+255),w,b
  2830  003206  26D9               	addwf	fsr2l,f,c
  2831  003208  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2832  00320A  22DA               	addwfc	fsr2h,f,c
  2833  00320C  A8DF               	btfss	indf2,4,c
  2834  00320E  D002               	goto	l655
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;ff.c: 2534:      res = FR_NO_FILE;
  2838  003210  0E04               	movlw	4
  2839  003212  D00B               	goto	L3
  2840  003214                     l655:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2844  003214  A39E               	btfss	f_open@mode& (0+255),1,b
  2845  003216  D00A               	goto	l653
  2846                           
  2847                           ; BSR set to: 0
  2848  003218  EE20 F00B          	lfsr	2,11
  2849  00321C  51B8               	movf	f_open@dir& (0+255),w,b
  2850  00321E  26D9               	addwf	fsr2l,f,c
  2851  003220  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2852  003222  22DA               	addwfc	fsr2h,f,c
  2853  003224  A0DF               	btfss	indf2,0,c
  2854  003226  D002               	goto	l653
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;ff.c: 2537:       res = FR_DENIED;
  2858  003228  0E07               	movlw	7
  2859  00322A                     L3:
  2860  00322A  6FB7               	movwf	f_open@res& (0+255),b
  2861  00322C                     l653:
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;ff.c: 2541:   if (res == FR_OK) {
  2865  00322C  51B7               	movf	f_open@res& (0+255),w,b
  2866  00322E  A4D8               	btfss	status,2,c
  2867  003230  D020               	goto	l6040
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;ff.c: 2542:    if (mode & 0x08)
  2871  003232  B79E               	btfsc	f_open@mode& (0+255),3,b
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;ff.c: 2543:     mode |= 0x20;
  2875  003234  8B9E               	bsf	f_open@mode& (0+255),5,b
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2879  003236  EE20 F02A          	lfsr	2,42
  2880  00323A  51BA               	movf	f_open@dj& (0+255),w,b
  2881  00323C  26D9               	addwf	fsr2l,f,c
  2882  00323E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2883  003240  22DA               	addwfc	fsr2h,f,c
  2884  003242  EE10 F01A          	lfsr	1,26
  2885  003246  519A               	movf	f_open@fp& (0+255),w,b
  2886  003248  26E1               	addwf	fsr1l,f,c
  2887  00324A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2888  00324C  22E2               	addwfc	fsr1h,f,c
  2889  00324E  CFDE FFE6          	movff	postinc2,postinc1
  2890  003252  CFDE FFE6          	movff	postinc2,postinc1
  2891  003256  CFDE FFE6          	movff	postinc2,postinc1
  2892  00325A  CFDE FFE6          	movff	postinc2,postinc1
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2896  00325E  EE20 F01E          	lfsr	2,30
  2897  003262  519A               	movf	f_open@fp& (0+255),w,b
  2898  003264  26D9               	addwf	fsr2l,f,c
  2899  003266  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2900  003268  22DA               	addwfc	fsr2h,f,c
  2901  00326A  C0B8  FFDE         	movff	f_open@dir,postinc2
  2902  00326E  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2903  003272                     l6040:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;ff.c: 2565:   if (res == FR_OK) {
  2907  003272  51B7               	movf	f_open@res& (0+255),w,b
  2908  003274  A4D8               	btfss	status,2,c
  2909  003276  D06D               	goto	l6056
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;ff.c: 2566:    fp->flag = mode;
  2913  003278  EE20 F004          	lfsr	2,4
  2914  00327C  519A               	movf	f_open@fp& (0+255),w,b
  2915  00327E  26D9               	addwf	fsr2l,f,c
  2916  003280  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2917  003282  22DA               	addwfc	fsr2h,f,c
  2918  003284  C09E  FFDF         	movff	f_open@mode,indf2
  2919                           
  2920                           ;ff.c: 2567:    fp->err = 0;
  2921  003288  EE20 F005          	lfsr	2,5
  2922  00328C  519A               	movf	f_open@fp& (0+255),w,b
  2923  00328E  26D9               	addwf	fsr2l,f,c
  2924  003290  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2925  003292  22DA               	addwfc	fsr2h,f,c
  2926  003294  0E00               	movlw	0
  2927  003296  6EDF               	movwf	indf2,c
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2931  003298  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2932  00329C  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2933  0032A0  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2934  0032A4  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2935  0032A8  ECA1  F028         	call	_ld_clust	;wreg free
  2936  0032AC  0100               	movlb	0	; () banked
  2937  0032AE  EE20 F00E          	lfsr	2,14
  2938  0032B2  519A               	movf	f_open@fp& (0+255),w,b
  2939  0032B4  26D9               	addwf	fsr2l,f,c
  2940  0032B6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2941  0032B8  22DA               	addwfc	fsr2h,f,c
  2942  0032BA  C001  FFDE         	movff	?_ld_clust,postinc2
  2943  0032BE  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2944  0032C2  C003  FFDE         	movff	?_ld_clust+2,postinc2
  2945  0032C6  C004  FFDE         	movff	?_ld_clust+3,postinc2
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  2949  0032CA  EE20 F01C          	lfsr	2,28
  2950  0032CE  51B8               	movf	f_open@dir& (0+255),w,b
  2951  0032D0  26D9               	addwf	fsr2l,f,c
  2952  0032D2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2953  0032D4  22DA               	addwfc	fsr2h,f,c
  2954  0032D6  EE10 F00A          	lfsr	1,10
  2955  0032DA  519A               	movf	f_open@fp& (0+255),w,b
  2956  0032DC  26E1               	addwf	fsr1l,f,c
  2957  0032DE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2958  0032E0  22E2               	addwfc	fsr1h,f,c
  2959  0032E2  CFDE FFE6          	movff	postinc2,postinc1
  2960  0032E6  CFDE FFE6          	movff	postinc2,postinc1
  2961  0032EA  CFDE FFE6          	movff	postinc2,postinc1
  2962  0032EE  CFDE FFE6          	movff	postinc2,postinc1
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;ff.c: 2570:    fp->fptr = 0;
  2966  0032F2  EE20 F006          	lfsr	2,6
  2967  0032F6  519A               	movf	f_open@fp& (0+255),w,b
  2968  0032F8  26D9               	addwf	fsr2l,f,c
  2969  0032FA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2970  0032FC  22DA               	addwfc	fsr2h,f,c
  2971  0032FE  6ADE               	clrf	postinc2,c
  2972  003300  6ADE               	clrf	postinc2,c
  2973  003302  6ADE               	clrf	postinc2,c
  2974  003304  6ADD               	clrf	postdec2,c
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;ff.c: 2571:    fp->dsect = 0;
  2978  003306  EE20 F016          	lfsr	2,22
  2979  00330A  519A               	movf	f_open@fp& (0+255),w,b
  2980  00330C  26D9               	addwf	fsr2l,f,c
  2981  00330E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2982  003310  22DA               	addwfc	fsr2h,f,c
  2983  003312  6ADE               	clrf	postinc2,c
  2984  003314  6ADE               	clrf	postinc2,c
  2985  003316  6ADE               	clrf	postinc2,c
  2986  003318  6ADD               	clrf	postdec2,c
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;ff.c: 2575:    fp->fs = dj.fs;
  2990  00331A  C09A  FFD9         	movff	f_open@fp,fsr2l
  2991  00331E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2992  003322  C0BA  FFDE         	movff	f_open@dj,postinc2
  2993  003326  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;ff.c: 2576:    fp->id = fp->fs->id;
  2997  00332A  C09A  FFD9         	movff	f_open@fp,fsr2l
  2998  00332E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2999  003332  EE10 F006          	lfsr	1,6
  3000  003336  50DE               	movf	postinc2,w,c
  3001  003338  26E1               	addwf	fsr1l,f,c
  3002  00333A  50DD               	movf	postdec2,w,c
  3003  00333C  22E2               	addwfc	fsr1h,f,c
  3004  00333E  EE20 F002          	lfsr	2,2
  3005  003342  519A               	movf	f_open@fp& (0+255),w,b
  3006  003344  26D9               	addwf	fsr2l,f,c
  3007  003346  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3008  003348  22DA               	addwfc	fsr2h,f,c
  3009  00334A  CFE6 FFDE          	movff	postinc1,postinc2
  3010  00334E  CFE5 FFDD          	movff	postdec1,postdec2
  3011  003352                     l6056:
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;ff.c: 2580:  return res;
  3015  003352  51B7               	movf	f_open@res& (0+255),w,b
  3016                           
  3017                           ; BSR set to: 0
  3018  003354  0012               	return		;funcret
  3019  003356                     __end_of_f_open:
  3020                           	opt callstack 0
  3021                           
  3022 ;; *************** function _remove_chain *****************
  3023 ;; Defined at:
  3024 ;;		line 937 in file "ff.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  fs              2   85[COMRAM] PTR struct .
  3027 ;;		 -> NULL(0), FatFs(558), 
  3028 ;;  clst            4   87[COMRAM] unsigned long 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  nxt             4    1[BANK0 ] unsigned long 
  3031 ;;  res             1    0[BANK0 ] enum E93
  3032 ;; Return value:  Size  Location     Type
  3033 ;;                  1    wreg      enum E93
  3034 ;; Registers used:
  3035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : 0/0
  3038 ;;		On exit  : 0/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3041 ;;      Params:         6       0       0       0       0       0       0       0       0
  3042 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3043 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3044 ;;      Totals:        10       5       0       0       0       0       0       0       0
  3045 ;;Total ram usage:       15 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    9
  3048 ;; This function calls:
  3049 ;;		_get_fat
  3050 ;;		_put_fat
  3051 ;; This function is called by:
  3052 ;;		_f_open
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text4
  3057  004098                     __ptext4:
  3058                           	opt callstack 0
  3059  004098                     _remove_chain:
  3060                           	opt callstack 19
  3061                           
  3062                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;incstack = 0
  3066  004098  505B               	movf	remove_chain@clst+3,w,c
  3067  00409A  105A               	iorwf	remove_chain@clst+2,w,c
  3068  00409C  1059               	iorwf	remove_chain@clst+1,w,c
  3069  00409E  E104               	bnz	u7090
  3070  0040A0  0E02               	movlw	2
  3071  0040A2  5C58               	subwf	remove_chain@clst,w,c
  3072  0040A4  A0D8               	btfss	status,0,c
  3073  0040A6  D010               	goto	u7100
  3074  0040A8                     u7090:
  3075  0040A8  EE20 F012          	lfsr	2,18
  3076  0040AC  5056               	movf	remove_chain@fs,w,c
  3077  0040AE  26D9               	addwf	fsr2l,f,c
  3078  0040B0  5057               	movf	remove_chain@fs+1,w,c
  3079  0040B2  22DA               	addwfc	fsr2h,f,c
  3080  0040B4  50DE               	movf	postinc2,w,c
  3081  0040B6  5C58               	subwf	remove_chain@clst,w,c
  3082  0040B8  50DE               	movf	postinc2,w,c
  3083  0040BA  5859               	subwfb	remove_chain@clst+1,w,c
  3084  0040BC  50DE               	movf	postinc2,w,c
  3085  0040BE  585A               	subwfb	remove_chain@clst+2,w,c
  3086  0040C0  50DE               	movf	postinc2,w,c
  3087  0040C2  585B               	subwfb	remove_chain@clst+3,w,c
  3088  0040C4  A0D8               	btfss	status,0,c
  3089  0040C6  D003               	goto	l5404
  3090  0040C8                     u7100:
  3091                           
  3092                           ;ff.c: 949:   res = FR_INT_ERR;
  3093  0040C8  0E02               	movlw	2
  3094  0040CA  0100               	movlb	0	; () banked
  3095  0040CC  D031               	goto	L4
  3096  0040CE                     l5404:
  3097                           
  3098                           ;ff.c: 952:   res = FR_OK;
  3099  0040CE  0E00               	movlw	0
  3100  0040D0  0100               	movlb	0	; () banked
  3101  0040D2  6F60               	movwf	remove_chain@res& (0+255),b
  3102                           
  3103                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3104  0040D4  D074               	goto	l367
  3105  0040D6                     l5406:
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3109  0040D6  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3110  0040DA  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3111  0040DE  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3112  0040E2  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3113  0040E6  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3114  0040EA  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3115  0040EE  EC0F  F016         	call	_get_fat	;wreg free
  3116  0040F2  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3117  0040F6  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3118  0040FA  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3119  0040FE  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3120                           
  3121                           ;ff.c: 955:    if (nxt == 0) break;
  3122  004102  0100               	movlb	0	; () banked
  3123  004104  5161               	movf	remove_chain@nxt& (0+255),w,b
  3124  004106  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3125  004108  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3126  00410A  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3127  00410C  B4D8               	btfsc	status,2,c
  3128  00410E  D067               	goto	u7160
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3132  004110  0561               	decf	remove_chain@nxt& (0+255),w,b
  3133  004112  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3134  004114  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3135  004116  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3136  004118  B4D8               	btfsc	status,2,c
  3137  00411A  D7D6               	goto	u7100
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3141  00411C  2961               	incf	remove_chain@nxt& (0+255),w,b
  3142  00411E  E10A               	bnz	l5420
  3143  004120  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3144  004122  E108               	bnz	l5420
  3145  004124  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3146  004126  E106               	bnz	l5420
  3147  004128  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3148  00412A  A4D8               	btfss	status,2,c
  3149  00412C  D003               	goto	l5420
  3150                           
  3151                           ; BSR set to: 0
  3152  00412E  0E01               	movlw	1
  3153  004130                     L4:
  3154  004130  6F60               	movwf	remove_chain@res& (0+255),b
  3155  004132  D055               	goto	u7160
  3156  004134                     l5420:
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3160  004134  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3161  004138  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3162  00413C  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3163  004140  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3164  004144  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3165  004148  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3166  00414C  0E00               	movlw	0
  3167  00414E  6E41               	movwf	put_fat@val,c
  3168  004150  0E00               	movlw	0
  3169  004152  6E42               	movwf	put_fat@val+1,c
  3170  004154  0E00               	movlw	0
  3171  004156  6E43               	movwf	put_fat@val+2,c
  3172  004158  0E00               	movlw	0
  3173  00415A  6E44               	movwf	put_fat@val+3,c
  3174  00415C  ECF7  F011         	call	_put_fat	;wreg free
  3175  004160  0100               	movlb	0	; () banked
  3176  004162  6F60               	movwf	remove_chain@res& (0+255),b
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;ff.c: 959:    if (res != FR_OK) break;
  3180  004164  5160               	movf	remove_chain@res& (0+255),w,b
  3181  004166  A4D8               	btfss	status,2,c
  3182  004168  D03A               	goto	u7160
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3186  00416A  EE20 F00E          	lfsr	2,14
  3187  00416E  5056               	movf	remove_chain@fs,w,c
  3188  004170  26D9               	addwf	fsr2l,f,c
  3189  004172  5057               	movf	remove_chain@fs+1,w,c
  3190  004174  22DA               	addwfc	fsr2h,f,c
  3191  004176  28DE               	incf	postinc2,w,c
  3192  004178  E107               	bnz	u7150
  3193  00417A  28DE               	incf	postinc2,w,c
  3194  00417C  E105               	bnz	u7150
  3195  00417E  28DE               	incf	postinc2,w,c
  3196  004180  E103               	bnz	u7150
  3197  004182  28DE               	incf	postinc2,w,c
  3198  004184  B4D8               	btfsc	status,2,c
  3199  004186  D013               	goto	l5430
  3200  004188                     u7150:
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;ff.c: 961:     fs->free_clust++;
  3204  004188  EE20 F00E          	lfsr	2,14
  3205  00418C  5056               	movf	remove_chain@fs,w,c
  3206  00418E  26D9               	addwf	fsr2l,f,c
  3207  004190  5057               	movf	remove_chain@fs+1,w,c
  3208  004192  22DA               	addwfc	fsr2h,f,c
  3209  004194  2ADE               	incf	postinc2,f,c
  3210  004196  0E00               	movlw	0
  3211  004198  22DE               	addwfc	postinc2,f,c
  3212  00419A  22DE               	addwfc	postinc2,f,c
  3213  00419C  22DE               	addwfc	postinc2,f,c
  3214                           
  3215                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3216  00419E  EE20 F005          	lfsr	2,5
  3217  0041A2  5056               	movf	remove_chain@fs,w,c
  3218  0041A4  26D9               	addwf	fsr2l,f,c
  3219  0041A6  5057               	movf	remove_chain@fs+1,w,c
  3220  0041A8  22DA               	addwfc	fsr2h,f,c
  3221  0041AA  0E00               	movlw	0
  3222  0041AC  80DB               	bsf	plusw2,0,c
  3223  0041AE                     l5430:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;ff.c: 974:    clst = nxt;
  3227  0041AE  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3228  0041B2  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3229  0041B6  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3230  0041BA  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3231  0041BE                     l367:
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3235  0041BE  EE20 F012          	lfsr	2,18
  3236  0041C2  5056               	movf	remove_chain@fs,w,c
  3237  0041C4  26D9               	addwf	fsr2l,f,c
  3238  0041C6  5057               	movf	remove_chain@fs+1,w,c
  3239  0041C8  22DA               	addwfc	fsr2h,f,c
  3240  0041CA  50DE               	movf	postinc2,w,c
  3241  0041CC  5C58               	subwf	remove_chain@clst,w,c
  3242  0041CE  50DE               	movf	postinc2,w,c
  3243  0041D0  5859               	subwfb	remove_chain@clst+1,w,c
  3244  0041D2  50DE               	movf	postinc2,w,c
  3245  0041D4  585A               	subwfb	remove_chain@clst+2,w,c
  3246  0041D6  50DE               	movf	postinc2,w,c
  3247  0041D8  585B               	subwfb	remove_chain@clst+3,w,c
  3248  0041DA  A0D8               	btfss	status,0,c
  3249  0041DC  D77C               	goto	l5406
  3250  0041DE                     u7160:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;ff.c: 978:  return res;
  3254  0041DE  5160               	movf	remove_chain@res& (0+255),w,b
  3255                           
  3256                           ; BSR set to: 0
  3257  0041E0  0012               	return		;funcret
  3258  0041E2                     __end_of_remove_chain:
  3259                           	opt callstack 0
  3260                           
  3261 ;; *************** function _follow_path *****************
  3262 ;; Defined at:
  3263 ;;		line 2052 in file "ff.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  dp              2   38[BANK0 ] PTR struct .
  3266 ;;		 -> f_open@dj(22), 
  3267 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3268 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3271 ;;		 -> NULL(0), FatFs(558), 
  3272 ;;  res             1   45[BANK0 ] enum E93
  3273 ;;  ns              1   44[BANK0 ] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  1    wreg      enum E93
  3276 ;; Registers used:
  3277 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3283 ;;      Params:         0       4       0       0       0       0       0       0       0
  3284 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3286 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3287 ;;Total ram usage:        8 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:   12
  3290 ;; This function calls:
  3291 ;;		_create_name
  3292 ;;		_dir_find
  3293 ;;		_dir_sdi
  3294 ;;		_ld_clust
  3295 ;; This function is called by:
  3296 ;;		_f_open
  3297 ;; This function uses a non-reentrant model
  3298 ;;
  3299                           
  3300                           	psect	text5
  3301  0041E2                     __ptext5:
  3302                           	opt callstack 0
  3303  0041E2                     _follow_path:
  3304                           	opt callstack 16
  3305                           
  3306                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;incstack = 0
  3310  0041E2  C088  FFF6         	movff	follow_path@path,tblptrl
  3311  0041E6  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3312  0041EA                     	if	0	;tblptru may be non-zero
  3313  0041EA                     	endif
  3314  0041EA                     	if	0	;tblptru may be non-zero
  3315  0041EA                     	endif
  3316  0041EA  0008               	tblrd		*
  3317  0041EC  50F5               	movf	tablat,w,c
  3318  0041EE  0A2F               	xorlw	47
  3319  0041F0  B4D8               	btfsc	status,2,c
  3320  0041F2  D009               	goto	u7200
  3321  0041F4  C088  FFF6         	movff	follow_path@path,tblptrl
  3322  0041F8  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3323  0041FC                     	if	0	;tblptru may be non-zero
  3324  0041FC                     	endif
  3325  0041FC                     	if	0	;tblptru may be non-zero
  3326  0041FC                     	endif
  3327  0041FC  0008               	tblrd		*
  3328  0041FE  50F5               	movf	tablat,w,c
  3329  004200  0A5C               	xorlw	92
  3330  004202  A4D8               	btfss	status,2,c
  3331  004204  D003               	goto	l5460
  3332  004206                     u7200:
  3333                           
  3334                           ;ff.c: 2069:   path++;
  3335  004206  0100               	movlb	0	; () banked
  3336  004208  4B88               	infsnz	follow_path@path& (0+255),f,b
  3337  00420A  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3338  00420C                     l5460:
  3339                           
  3340                           ;ff.c: 2070:  dp->sclust = 0;
  3341  00420C  0100               	movlb	0	; () banked
  3342  00420E  EE20 F006          	lfsr	2,6
  3343  004212  5186               	movf	follow_path@dp& (0+255),w,b
  3344  004214  26D9               	addwf	fsr2l,f,c
  3345  004216  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3346  004218  22DA               	addwfc	fsr2h,f,c
  3347  00421A  6ADE               	clrf	postinc2,c
  3348  00421C  6ADE               	clrf	postinc2,c
  3349  00421E  6ADE               	clrf	postinc2,c
  3350  004220  6ADD               	clrf	postdec2,c
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3354  004222  C088  FFF6         	movff	follow_path@path,tblptrl
  3355  004226  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3356  00422A                     	if	0	;tblptru may be non-zero
  3357  00422A                     	endif
  3358  00422A                     	if	0	;tblptru may be non-zero
  3359  00422A                     	endif
  3360  00422A  0E20               	movlw	32
  3361  00422C  0008               	tblrd		*
  3362  00422E  60F5               	cpfslt	tablat,c
  3363  004230  D017               	goto	l5468
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3367  004232  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3368  004236  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3369  00423A  0E00               	movlw	0
  3370  00423C  6E59               	movwf	dir_sdi@idx+1,c
  3371  00423E  0E00               	movlw	0
  3372  004240  6E58               	movwf	dir_sdi@idx,c
  3373  004242  EC28  F01B         	call	_dir_sdi	;wreg free
  3374  004246  0100               	movlb	0	; () banked
  3375  004248  6F8D               	movwf	follow_path@res& (0+255),b
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;ff.c: 2075:   dp->dir = 0;
  3379  00424A  EE20 F012          	lfsr	2,18
  3380  00424E  5186               	movf	follow_path@dp& (0+255),w,b
  3381  004250  26D9               	addwf	fsr2l,f,c
  3382  004252  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3383  004254  22DA               	addwfc	fsr2h,f,c
  3384  004256  0E00               	movlw	0
  3385  004258  6EDE               	movwf	postinc2,c
  3386  00425A  0E00               	movlw	0
  3387  00425C  6EDD               	movwf	postdec2,c
  3388                           
  3389                           ;ff.c: 2076:  } else {
  3390  00425E  D062               	goto	l5504
  3391  004260                     l5468:
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;ff.c: 2078:    res = create_name(dp, &path);
  3395  004260  C086  F009         	movff	follow_path@dp,create_name@dp
  3396  004264  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3397  004268  0E88               	movlw	low follow_path@path
  3398  00426A  6E0B               	movwf	create_name@path,c
  3399  00426C  0E00               	movlw	high follow_path@path
  3400  00426E  6E0C               	movwf	create_name@path+1,c
  3401  004270  EC89  F01C         	call	_create_name	;wreg free
  3402  004274  0100               	movlb	0	; () banked
  3403  004276  6F8D               	movwf	follow_path@res& (0+255),b
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;ff.c: 2079:    if (res != FR_OK) break;
  3407  004278  518D               	movf	follow_path@res& (0+255),w,b
  3408  00427A  A4D8               	btfss	status,2,c
  3409  00427C  D053               	goto	l5504
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;ff.c: 2080:    res = dir_find(dp);
  3413  00427E  C086  F080         	movff	follow_path@dp,dir_find@dp
  3414  004282  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3415  004286  ECD7  F023         	call	_dir_find	;wreg free
  3416  00428A  0100               	movlb	0	; () banked
  3417  00428C  6F8D               	movwf	follow_path@res& (0+255),b
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;ff.c: 2081:    ns = dp->fn[11];
  3421  00428E  EE20 F014          	lfsr	2,20
  3422  004292  5186               	movf	follow_path@dp& (0+255),w,b
  3423  004294  26D9               	addwf	fsr2l,f,c
  3424  004296  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3425  004298  22DA               	addwfc	fsr2h,f,c
  3426  00429A  EE10 F00B          	lfsr	1,11
  3427  00429E  50DE               	movf	postinc2,w,c
  3428  0042A0  26E1               	addwf	fsr1l,f,c
  3429  0042A2  50DD               	movf	postdec2,w,c
  3430  0042A4  22E2               	addwfc	fsr1h,f,c
  3431  0042A6  50E7               	movf	indf1,w,c
  3432  0042A8  6F8C               	movwf	follow_path@ns& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;ff.c: 2082:    if (res != FR_OK) {
  3436  0042AA  518D               	movf	follow_path@res& (0+255),w,b
  3437  0042AC  B4D8               	btfsc	status,2,c
  3438  0042AE  D008               	goto	l534
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3442  0042B0  0E04               	movlw	4
  3443  0042B2  198D               	xorwf	follow_path@res& (0+255),w,b
  3444  0042B4  B4D8               	btfsc	status,2,c
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3448  0042B6  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3449  0042B8  D035               	goto	l5504
  3450  0042BA                     u7250:
  3451                           
  3452                           ; BSR set to: 0
  3453  0042BA  0E05               	movlw	5
  3454  0042BC  6F8D               	movwf	follow_path@res& (0+255),b
  3455  0042BE  D032               	goto	l5504
  3456  0042C0                     l534:
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;ff.c: 2094:    if (ns & 0x04) break;
  3460  0042C0  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3461  0042C2  D030               	goto	l5504
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;ff.c: 2095:    dir = dp->dir;
  3465  0042C4  EE20 F012          	lfsr	2,18
  3466  0042C8  5186               	movf	follow_path@dp& (0+255),w,b
  3467  0042CA  26D9               	addwf	fsr2l,f,c
  3468  0042CC  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3469  0042CE  22DA               	addwfc	fsr2h,f,c
  3470  0042D0  CFDE F08A          	movff	postinc2,follow_path@dir
  3471  0042D4  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3472                           
  3473                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3474  0042D8  EE20 F00B          	lfsr	2,11
  3475  0042DC  518A               	movf	follow_path@dir& (0+255),w,b
  3476  0042DE  26D9               	addwf	fsr2l,f,c
  3477  0042E0  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3478  0042E2  22DA               	addwfc	fsr2h,f,c
  3479  0042E4  A8DF               	btfss	indf2,4,c
  3480  0042E6  D7E9               	goto	u7250
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3484  0042E8  C086  FFD9         	movff	follow_path@dp,fsr2l
  3485  0042EC  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3486  0042F0  CFDE F001          	movff	postinc2,ld_clust@fs
  3487  0042F4  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3488  0042F8  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3489  0042FC  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3490  004300  ECA1  F028         	call	_ld_clust	;wreg free
  3491  004304  0100               	movlb	0	; () banked
  3492  004306  EE20 F006          	lfsr	2,6
  3493  00430A  5186               	movf	follow_path@dp& (0+255),w,b
  3494  00430C  26D9               	addwf	fsr2l,f,c
  3495  00430E  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3496  004310  22DA               	addwfc	fsr2h,f,c
  3497  004312  C001  FFDE         	movff	?_ld_clust,postinc2
  3498  004316  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3499  00431A  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3500  00431E  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3501  004322  D79E               	goto	l5468
  3502  004324                     l5504:
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;ff.c: 2103:  return res;
  3506  004324  518D               	movf	follow_path@res& (0+255),w,b
  3507                           
  3508                           ; BSR set to: 0
  3509  004326  0012               	return		;funcret
  3510  004328                     __end_of_follow_path:
  3511                           	opt callstack 0
  3512                           
  3513 ;; *************** function _ld_clust *****************
  3514 ;; Defined at:
  3515 ;;		line 1235 in file "ff.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  fs              2    0[COMRAM] PTR struct .
  3518 ;;		 -> NULL(0), FatFs(558), 
  3519 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3520 ;;		 -> NULL(0), FatFs(558), 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;  cl              4   10[COMRAM] unsigned long 
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  4    0[COMRAM] unsigned long 
  3525 ;; Registers used:
  3526 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3532 ;;      Params:         4       0       0       0       0       0       0       0       0
  3533 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3534 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3535 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3536 ;;Total ram usage:       14 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		_follow_path
  3542 ;;		_f_open
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text6
  3547  005142                     __ptext6:
  3548                           	opt callstack 0
  3549  005142                     _ld_clust:
  3550                           	opt callstack 28
  3551                           
  3552                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;incstack = 0
  3556  005142  0E1A               	movlw	26
  3557  005144  2403               	addwf	ld_clust@dir,w,c
  3558  005146  6ED9               	movwf	fsr2l,c
  3559  005148  0E00               	movlw	0
  3560  00514A  2004               	addwfc	ld_clust@dir+1,w,c
  3561  00514C  6EDA               	movwf	fsr2h,c
  3562  00514E  CFDE F005          	movff	postinc2,??_ld_clust
  3563  005152  CFDD F006          	movff	postdec2,??_ld_clust+1
  3564  005156  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3565  00515A  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3566  00515E  6A0D               	clrf	ld_clust@cl+2,c
  3567  005160  6A0E               	clrf	ld_clust@cl+3,c
  3568                           
  3569                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3570  005162  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3571  005166  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3572  00516A  0E03               	movlw	3
  3573  00516C  18DE               	xorwf	postinc2,w,c
  3574  00516E  A4D8               	btfss	status,2,c
  3575  005170  D01E               	goto	l5106
  3576                           
  3577                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3578  005172  0E14               	movlw	20
  3579  005174  2403               	addwf	ld_clust@dir,w,c
  3580  005176  6ED9               	movwf	fsr2l,c
  3581  005178  0E00               	movlw	0
  3582  00517A  2004               	addwfc	ld_clust@dir+1,w,c
  3583  00517C  6EDA               	movwf	fsr2h,c
  3584  00517E  CFDE F005          	movff	postinc2,??_ld_clust
  3585  005182  CFDD F006          	movff	postdec2,??_ld_clust+1
  3586  005186  5005               	movf	??_ld_clust,w,c
  3587  005188  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3588  00518A  5006               	movf	??_ld_clust+1,w,c
  3589  00518C  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3590  00518E  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3591  005190  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3592  005192  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3593  005196  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3594  00519A  6A08               	clrf	??_ld_clust+3,c
  3595  00519C  6A07               	clrf	??_ld_clust+2,c
  3596  00519E  5007               	movf	??_ld_clust+2,w,c
  3597  0051A0  120B               	iorwf	ld_clust@cl,f,c
  3598  0051A2  5008               	movf	??_ld_clust+3,w,c
  3599  0051A4  120C               	iorwf	ld_clust@cl+1,f,c
  3600  0051A6  5009               	movf	??_ld_clust+4,w,c
  3601  0051A8  120D               	iorwf	ld_clust@cl+2,f,c
  3602  0051AA  500A               	movf	??_ld_clust+5,w,c
  3603  0051AC  120E               	iorwf	ld_clust@cl+3,f,c
  3604  0051AE                     l5106:
  3605                           
  3606                           ;ff.c: 1246:  return cl;
  3607  0051AE  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3608  0051B2  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3609  0051B6  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3610  0051BA  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3611  0051BE  0012               	return		;funcret
  3612  0051C0                     __end_of_ld_clust:
  3613                           	opt callstack 0
  3614                           
  3615 ;; *************** function _dir_find *****************
  3616 ;; Defined at:
  3617 ;;		line 1458 in file "ff.c"
  3618 ;; Parameters:    Size  Location     Type
  3619 ;;  dp              2   32[BANK0 ] PTR struct .
  3620 ;;		 -> f_open@dj(22), 
  3621 ;; Auto vars:     Size  Location     Type
  3622 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3623 ;;		 -> NULL(0), FatFs(558), 
  3624 ;;  res             1   37[BANK0 ] enum E93
  3625 ;;  c               1   34[BANK0 ] unsigned char 
  3626 ;; Return value:  Size  Location     Type
  3627 ;;                  1    wreg      enum E93
  3628 ;; Registers used:
  3629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3630 ;; Tracked objects:
  3631 ;;		On entry : 0/0
  3632 ;;		On exit  : 0/0
  3633 ;;		Unchanged: 0/0
  3634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3635 ;;      Params:         0       2       0       0       0       0       0       0       0
  3636 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3638 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3639 ;;Total ram usage:        6 bytes
  3640 ;; Hardware stack levels used:    1
  3641 ;; Hardware stack levels required when called:   11
  3642 ;; This function calls:
  3643 ;;		_dir_next
  3644 ;;		_dir_sdi
  3645 ;;		_mem_cmp
  3646 ;;		_move_window
  3647 ;; This function is called by:
  3648 ;;		_follow_path
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652                           	psect	text7
  3653  0047AE                     __ptext7:
  3654                           	opt callstack 0
  3655  0047AE                     _dir_find:
  3656                           	opt callstack 16
  3657                           
  3658                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3659                           
  3660                           ;incstack = 0
  3661  0047AE  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3662  0047B2  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3663  0047B6  0E00               	movlw	0
  3664  0047B8  6E59               	movwf	dir_sdi@idx+1,c
  3665  0047BA  0E00               	movlw	0
  3666  0047BC  6E58               	movwf	dir_sdi@idx,c
  3667  0047BE  EC28  F01B         	call	_dir_sdi	;wreg free
  3668  0047C2  0100               	movlb	0	; () banked
  3669  0047C4  6F85               	movwf	dir_find@res& (0+255),b
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3673  0047C6  5185               	movf	dir_find@res& (0+255),w,b
  3674  0047C8  B4D8               	btfsc	status,2,c
  3675  0047CA  D003               	goto	l5120
  3676  0047CC                     u6540:
  3677  0047CC  0100               	movlb	0	; () banked
  3678  0047CE  5185               	movf	dir_find@res& (0+255),w,b
  3679  0047D0  0012               	return	
  3680  0047D2                     l5120:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3684  0047D2  C080  FFD9         	movff	dir_find@dp,fsr2l
  3685  0047D6  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3686  0047DA  CFDE F030          	movff	postinc2,move_window@fs
  3687  0047DE  CFDD F031          	movff	postdec2,move_window@fs+1
  3688  0047E2  EE20 F00E          	lfsr	2,14
  3689  0047E6  5180               	movf	dir_find@dp& (0+255),w,b
  3690  0047E8  26D9               	addwf	fsr2l,f,c
  3691  0047EA  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3692  0047EC  22DA               	addwfc	fsr2h,f,c
  3693  0047EE  CFDE F032          	movff	postinc2,move_window@sector
  3694  0047F2  CFDE F033          	movff	postinc2,move_window@sector+1
  3695  0047F6  CFDE F034          	movff	postinc2,move_window@sector+2
  3696  0047FA  CFDE F035          	movff	postinc2,move_window@sector+3
  3697  0047FE  EC82  F027         	call	_move_window	;wreg free
  3698  004802  0100               	movlb	0	; () banked
  3699  004804  6F85               	movwf	dir_find@res& (0+255),b
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;ff.c: 1476:   if (res != FR_OK) break;
  3703  004806  5185               	movf	dir_find@res& (0+255),w,b
  3704  004808  A4D8               	btfss	status,2,c
  3705  00480A  D7E0               	goto	u6540
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;ff.c: 1477:   dir = dp->dir;
  3709  00480C  EE20 F012          	lfsr	2,18
  3710  004810  5180               	movf	dir_find@dp& (0+255),w,b
  3711  004812  26D9               	addwf	fsr2l,f,c
  3712  004814  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3713  004816  22DA               	addwfc	fsr2h,f,c
  3714  004818  CFDE F083          	movff	postinc2,dir_find@dir
  3715  00481C  CFDD F084          	movff	postdec2,dir_find@dir+1
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;ff.c: 1478:   c = dir[0];
  3719  004820  C083  FFD9         	movff	dir_find@dir,fsr2l
  3720  004824  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3721  004828  50DF               	movf	indf2,w,c
  3722  00482A  6F82               	movwf	dir_find@c& (0+255),b
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3726  00482C  5182               	movf	dir_find@c& (0+255),w,b
  3727  00482E  A4D8               	btfss	status,2,c
  3728  004830  D003               	goto	l5134
  3729                           
  3730                           ; BSR set to: 0
  3731  004832  0E04               	movlw	4
  3732  004834  6F85               	movwf	dir_find@res& (0+255),b
  3733  004836  D7CA               	goto	u6540
  3734  004838                     l5134:
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3738  004838  EE20 F00B          	lfsr	2,11
  3739  00483C  5183               	movf	dir_find@dir& (0+255),w,b
  3740  00483E  26D9               	addwf	fsr2l,f,c
  3741  004840  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3742  004842  22DA               	addwfc	fsr2h,f,c
  3743  004844  B6DF               	btfsc	indf2,3,c
  3744  004846  D018               	goto	l5140
  3745                           
  3746                           ; BSR set to: 0
  3747  004848  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3748  00484C  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3749  004850  EE20 F014          	lfsr	2,20
  3750  004854  5180               	movf	dir_find@dp& (0+255),w,b
  3751  004856  26D9               	addwf	fsr2l,f,c
  3752  004858  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3753  00485A  22DA               	addwfc	fsr2h,f,c
  3754  00485C  CFDE F003          	movff	postinc2,mem_cmp@src
  3755  004860  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3756  004864  0E00               	movlw	0
  3757  004866  6E06               	movwf	mem_cmp@cnt+1,c
  3758  004868  0E0B               	movlw	11
  3759  00486A  6E05               	movwf	mem_cmp@cnt,c
  3760  00486C  EC54  F029         	call	_mem_cmp	;wreg free
  3761  004870  5001               	movf	?_mem_cmp,w,c
  3762  004872  1002               	iorwf	?_mem_cmp+1,w,c
  3763  004874  B4D8               	btfsc	status,2,c
  3764  004876  D7AA               	goto	u6540
  3765  004878                     l5140:
  3766                           
  3767                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3768  004878  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3769  00487C  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3770  004880  0E00               	movlw	0
  3771  004882  0100               	movlb	0	; () banked
  3772  004884  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3773  004886  0E00               	movlw	0
  3774  004888  6F6F               	movwf	dir_next@stretch& (0+255),b
  3775  00488A  EC0C  F014         	call	_dir_next	;wreg free
  3776  00488E  0100               	movlb	0	; () banked
  3777  004890  6F85               	movwf	dir_find@res& (0+255),b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;ff.c: 1506:  } while (res == FR_OK);
  3781  004892  5185               	movf	dir_find@res& (0+255),w,b
  3782  004894  A4D8               	btfss	status,2,c
  3783  004896  D79A               	goto	u6540
  3784  004898  D79C               	goto	l5120
  3785  00489A                     __end_of_dir_find:
  3786                           	opt callstack 0
  3787                           
  3788 ;; *************** function _mem_cmp *****************
  3789 ;; Defined at:
  3790 ;;		line 533 in file "ff.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  dst             2    0[COMRAM] PTR const void 
  3793 ;;		 -> NULL(0), FatFs(558), 
  3794 ;;  src             2    2[COMRAM] PTR const void 
  3795 ;;		 -> f_open@sfn(12), 
  3796 ;;  cnt             2    4[COMRAM] unsigned short 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  r               2   12[COMRAM] int 
  3799 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3800 ;;		 -> f_open@sfn(12), 
  3801 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3802 ;;		 -> NULL(0), FatFs(558), 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  2    0[COMRAM] int 
  3805 ;; Registers used:
  3806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3812 ;;      Params:         6       0       0       0       0       0       0       0       0
  3813 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3814 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3815 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3816 ;;Total ram usage:       14 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_dir_find
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text8
  3826  0052A8                     __ptext8:
  3827                           	opt callstack 0
  3828  0052A8                     _mem_cmp:
  3829                           	opt callstack 26
  3830                           
  3831                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;incstack = 0
  3835  0052A8  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3836  0052AC  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3837  0052B0  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3838  0052B4  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3839                           
  3840                           ;ff.c: 535:  int r = 0;
  3841  0052B8  0E00               	movlw	0
  3842  0052BA  6E0E               	movwf	mem_cmp@r+1,c
  3843  0052BC  0E00               	movlw	0
  3844  0052BE  6E0D               	movwf	mem_cmp@r,c
  3845  0052C0                     l4728:
  3846  0052C0  0605               	decf	mem_cmp@cnt,f,c
  3847  0052C2  A0D8               	btfss	status,0,c
  3848  0052C4  0606               	decf	mem_cmp@cnt+1,f,c
  3849  0052C6  2805               	incf	mem_cmp@cnt,w,c
  3850  0052C8  E103               	bnz	u5830
  3851  0052CA  2806               	incf	mem_cmp@cnt+1,w,c
  3852  0052CC  B4D8               	btfsc	status,2,c
  3853  0052CE  D01A               	goto	u5840
  3854  0052D0                     u5830:
  3855  0052D0  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3856  0052D4  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3857  0052D8  4A09               	infsnz	mem_cmp@d,f,c
  3858  0052DA  2A0A               	incf	mem_cmp@d+1,f,c
  3859  0052DC  50DF               	movf	indf2,w,c
  3860  0052DE  6E07               	movwf	??_mem_cmp& (0+255),c
  3861  0052E0  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3862  0052E4  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3863  0052E8  4A0B               	infsnz	mem_cmp@s,f,c
  3864  0052EA  2A0C               	incf	mem_cmp@s+1,f,c
  3865  0052EC  50DF               	movf	indf2,w,c
  3866  0052EE  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  3867  0052F0  5008               	movf	??_mem_cmp+1,w,c
  3868  0052F2  5C07               	subwf	??_mem_cmp,w,c
  3869  0052F4  6E0D               	movwf	mem_cmp@r,c
  3870  0052F6  6A0E               	clrf	mem_cmp@r+1,c
  3871  0052F8  A0D8               	btfss	status,0,c
  3872  0052FA  060E               	decf	mem_cmp@r+1,f,c
  3873  0052FC  500D               	movf	mem_cmp@r,w,c
  3874  0052FE  100E               	iorwf	mem_cmp@r+1,w,c
  3875  005300  B4D8               	btfsc	status,2,c
  3876  005302  D7DE               	goto	l4728
  3877  005304                     u5840:
  3878                           
  3879                           ;ff.c: 538:  return r;
  3880  005304  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3881  005308  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3882  00530C  0012               	return		;funcret
  3883  00530E                     __end_of_mem_cmp:
  3884                           	opt callstack 0
  3885                           
  3886 ;; *************** function _create_name *****************
  3887 ;; Defined at:
  3888 ;;		line 1843 in file "ff.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  dp              2    8[COMRAM] PTR struct .
  3891 ;;		 -> f_open@dj(22), 
  3892 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3893 ;;		 -> follow_path@path(2), 
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  i               2   28[COMRAM] unsigned short 
  3896 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  3897 ;;		 -> f_open@sfn(12), 
  3898 ;;  p               2   23[COMRAM] PTR const unsigned char 
  3899 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3900 ;;  ni              2   21[COMRAM] unsigned short 
  3901 ;;  si              2   18[COMRAM] unsigned short 
  3902 ;;  c               1   30[COMRAM] unsigned char 
  3903 ;;  d               1   25[COMRAM] unsigned char 
  3904 ;;  b               1   20[COMRAM] unsigned char 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      enum E93
  3907 ;; Registers used:
  3908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3914 ;;      Params:         4       0       0       0       0       0       0       0       0
  3915 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3916 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3917 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3918 ;;Total ram usage:       23 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    1
  3921 ;; This function calls:
  3922 ;;		_chk_chr
  3923 ;;		_mem_set
  3924 ;; This function is called by:
  3925 ;;		_follow_path
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text9
  3930  003912                     __ptext9:
  3931                           	opt callstack 0
  3932  003912                     _create_name:
  3933                           	opt callstack 26
  3934                           
  3935                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  3936                           
  3937                           ;incstack = 0
  3938  003912  C00B  FFD9         	movff	create_name@path,fsr2l
  3939  003916  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3940  00391A  CFDE F018          	movff	postinc2,create_name@p
  3941  00391E  CFDD F019          	movff	postdec2,create_name@p+1
  3942  003922  D002               	goto	l5152
  3943  003924                     l5150:
  3944  003924  4A18               	infsnz	create_name@p,f,c
  3945  003926  2A19               	incf	create_name@p+1,f,c
  3946  003928                     l5152:
  3947  003928  C018  FFF6         	movff	create_name@p,tblptrl
  3948  00392C  C019  FFF7         	movff	create_name@p+1,tblptrh
  3949  003930                     	if	0	;tblptru may be non-zero
  3950  003930                     	endif
  3951  003930                     	if	0	;tblptru may be non-zero
  3952  003930                     	endif
  3953  003930  0008               	tblrd		*
  3954  003932  50F5               	movf	tablat,w,c
  3955  003934  0A2F               	xorlw	47
  3956  003936  B4D8               	btfsc	status,2,c
  3957  003938  D7F5               	goto	l5150
  3958  00393A  C018  FFF6         	movff	create_name@p,tblptrl
  3959  00393E  C019  FFF7         	movff	create_name@p+1,tblptrh
  3960  003942                     	if	0	;tblptru may be non-zero
  3961  003942                     	endif
  3962  003942                     	if	0	;tblptru may be non-zero
  3963  003942                     	endif
  3964  003942  0008               	tblrd		*
  3965  003944  50F5               	movf	tablat,w,c
  3966  003946  0A5C               	xorlw	92
  3967  003948  B4D8               	btfsc	status,2,c
  3968  00394A  D7EC               	goto	l5150
  3969                           
  3970                           ;ff.c: 1975:  sfn = dp->fn;
  3971  00394C  EE20 F014          	lfsr	2,20
  3972  003950  5009               	movf	create_name@dp,w,c
  3973  003952  26D9               	addwf	fsr2l,f,c
  3974  003954  500A               	movf	create_name@dp+1,w,c
  3975  003956  22DA               	addwfc	fsr2h,f,c
  3976  003958  CFDE F01B          	movff	postinc2,create_name@sfn
  3977  00395C  CFDD F01C          	movff	postdec2,create_name@sfn+1
  3978                           
  3979                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  3980  003960  C01B  F001         	movff	create_name@sfn,mem_set@dst
  3981  003964  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  3982  003968  0E00               	movlw	0
  3983  00396A  6E04               	movwf	mem_set@val+1,c
  3984  00396C  0E20               	movlw	32
  3985  00396E  6E03               	movwf	mem_set@val,c
  3986  003970  0E00               	movlw	0
  3987  003972  6E06               	movwf	mem_set@cnt+1,c
  3988  003974  0E0B               	movlw	11
  3989  003976  6E05               	movwf	mem_set@cnt,c
  3990  003978  ECA6  F02A         	call	_mem_set	;wreg free
  3991                           
  3992                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  3993  00397C  0E00               	movlw	0
  3994  00397E  6E15               	movwf	create_name@b,c
  3995  003980  C015  F01D         	movff	create_name@b,create_name@i
  3996  003984  6A1E               	clrf	create_name@i+1,c
  3997  003986  C01D  F013         	movff	create_name@i,create_name@si
  3998  00398A  C01E  F014         	movff	create_name@i+1,create_name@si+1
  3999  00398E  0E00               	movlw	0
  4000  003990  6E17               	movwf	create_name@ni+1,c
  4001  003992  0E08               	movlw	8
  4002  003994  6E16               	movwf	create_name@ni,c
  4003  003996                     l5164:
  4004                           
  4005                           ;ff.c: 1992:   c = (BYTE)p[si++];
  4006  003996  5013               	movf	create_name@si,w,c
  4007  003998  2418               	addwf	create_name@p,w,c
  4008  00399A  6E0D               	movwf	??_create_name& (0+255),c
  4009  00399C  5014               	movf	create_name@si+1,w,c
  4010  00399E  2019               	addwfc	create_name@p+1,w,c
  4011  0039A0  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4012  0039A2  C00D  FFF6         	movff	??_create_name,tblptrl
  4013  0039A6  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4014  0039AA                     	if	0	;tblptru may be non-zero
  4015  0039AA                     	endif
  4016  0039AA                     	if	0	;tblptru may be non-zero
  4017  0039AA                     	endif
  4018  0039AA  0008               	tblrd		*
  4019  0039AC  CFF5 F01F          	movff	tablat,create_name@c
  4020  0039B0  4A13               	infsnz	create_name@si,f,c
  4021  0039B2  2A14               	incf	create_name@si+1,f,c
  4022                           
  4023                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4024  0039B4  0E20               	movlw	32
  4025  0039B6  641F               	cpfsgt	create_name@c,c
  4026  0039B8  D0A4               	goto	l5248
  4027  0039BA  0E2F               	movlw	47
  4028  0039BC  181F               	xorwf	create_name@c,w,c
  4029  0039BE  B4D8               	btfsc	status,2,c
  4030  0039C0  D0A0               	goto	l5248
  4031  0039C2  0E5C               	movlw	92
  4032  0039C4  181F               	xorwf	create_name@c,w,c
  4033  0039C6  B4D8               	btfsc	status,2,c
  4034  0039C8  D09C               	goto	l5248
  4035                           
  4036                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4037  0039CA  0E2E               	movlw	46
  4038  0039CC  181F               	xorwf	create_name@c,w,c
  4039  0039CE  B4D8               	btfsc	status,2,c
  4040  0039D0  D006               	goto	u6660
  4041  0039D2  5016               	movf	create_name@ni,w,c
  4042  0039D4  5C1D               	subwf	create_name@i,w,c
  4043  0039D6  5017               	movf	create_name@ni+1,w,c
  4044  0039D8  581E               	subwfb	create_name@i+1,w,c
  4045  0039DA  A0D8               	btfss	status,0,c
  4046  0039DC  D018               	goto	l5190
  4047  0039DE                     u6660:
  4048                           
  4049                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4050  0039DE  0E08               	movlw	8
  4051  0039E0  1816               	xorwf	create_name@ni,w,c
  4052  0039E2  1017               	iorwf	create_name@ni+1,w,c
  4053  0039E4  A4D8               	btfss	status,2,c
  4054  0039E6  D004               	goto	u6680
  4055  0039E8  0E2E               	movlw	46
  4056  0039EA  181F               	xorwf	create_name@c,w,c
  4057  0039EC  B4D8               	btfsc	status,2,c
  4058  0039EE  D002               	goto	l5186
  4059  0039F0                     u6680:
  4060  0039F0  0E06               	movlw	6
  4061  0039F2  0012               	return	
  4062  0039F4                     l5186:
  4063                           
  4064                           ;ff.c: 1996:    i = 8; ni = 11;
  4065  0039F4  0E00               	movlw	0
  4066  0039F6  6E1E               	movwf	create_name@i+1,c
  4067  0039F8  0E08               	movlw	8
  4068  0039FA  6E1D               	movwf	create_name@i,c
  4069  0039FC  0E00               	movlw	0
  4070  0039FE  6E17               	movwf	create_name@ni+1,c
  4071  003A00  0E0B               	movlw	11
  4072  003A02  6E16               	movwf	create_name@ni,c
  4073                           
  4074                           ;ff.c: 1997:    b <<= 2; continue;
  4075  003A04  90D8               	bcf	status,0,c
  4076  003A06  3615               	rlcf	create_name@b,f,c
  4077  003A08  90D8               	bcf	status,0,c
  4078  003A0A  3615               	rlcf	create_name@b,f,c
  4079  003A0C  D7C4               	goto	l5164
  4080  003A0E                     l5190:
  4081                           
  4082                           ;ff.c: 1999:   if (c >= 0x80) {
  4083  003A0E  0E7F               	movlw	127
  4084  003A10  641F               	cpfsgt	create_name@c,c
  4085  003A12  D002               	goto	l497
  4086                           
  4087                           ;ff.c: 2000:    b |= 3;
  4088  003A14  0E03               	movlw	3
  4089  003A16  1215               	iorwf	create_name@b,f,c
  4090  003A18                     l497:
  4091                           
  4092                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4093  003A18  0E80               	movlw	128
  4094  003A1A  641F               	cpfsgt	create_name@c,c
  4095  003A1C  D003               	goto	u6710
  4096  003A1E  0E9F               	movlw	159
  4097  003A20  641F               	cpfsgt	create_name@c,c
  4098  003A22  D006               	goto	u6730
  4099  003A24                     u6710:
  4100  003A24  0EDF               	movlw	223
  4101  003A26  641F               	cpfsgt	create_name@c,c
  4102  003A28  D043               	goto	l5224
  4103  003A2A  0EFD               	movlw	253
  4104  003A2C  601F               	cpfslt	create_name@c,c
  4105  003A2E  D040               	goto	l5224
  4106  003A30                     u6730:
  4107                           
  4108                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4109  003A30  5013               	movf	create_name@si,w,c
  4110  003A32  2418               	addwf	create_name@p,w,c
  4111  003A34  6E0D               	movwf	??_create_name& (0+255),c
  4112  003A36  5014               	movf	create_name@si+1,w,c
  4113  003A38  2019               	addwfc	create_name@p+1,w,c
  4114  003A3A  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4115  003A3C  C00D  FFF6         	movff	??_create_name,tblptrl
  4116  003A40  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4117  003A44                     	if	0	;tblptru may be non-zero
  4118  003A44                     	endif
  4119  003A44                     	if	0	;tblptru may be non-zero
  4120  003A44                     	endif
  4121  003A44  0008               	tblrd		*
  4122  003A46  CFF5 F01A          	movff	tablat,create_name@d
  4123  003A4A  4A13               	infsnz	create_name@si,f,c
  4124  003A4C  2A14               	incf	create_name@si+1,f,c
  4125                           
  4126                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4127  003A4E  0E3F               	movlw	63
  4128  003A50  641A               	cpfsgt	create_name@d,c
  4129  003A52  D003               	goto	u6750
  4130  003A54  0E7E               	movlw	126
  4131  003A56  641A               	cpfsgt	create_name@d,c
  4132  003A58  D006               	goto	u6770
  4133  003A5A                     u6750:
  4134  003A5A  0E7F               	movlw	127
  4135  003A5C  641A               	cpfsgt	create_name@d,c
  4136  003A5E  D7C8               	goto	u6680
  4137  003A60  0EFD               	movlw	253
  4138  003A62  601A               	cpfslt	create_name@d,c
  4139  003A64  D7C5               	goto	u6680
  4140  003A66                     u6770:
  4141  003A66  0EFF               	movlw	255
  4142  003A68  6E0D               	movwf	??_create_name& (0+255),c
  4143  003A6A  0EFF               	movlw	255
  4144  003A6C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4145  003A6E  C016  F00F         	movff	create_name@ni,??_create_name+2
  4146  003A72  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4147  003A76  500D               	movf	??_create_name,w,c
  4148  003A78  260F               	addwf	??_create_name+2,f,c
  4149  003A7A  500E               	movf	??_create_name+1,w,c
  4150  003A7C  2210               	addwfc	??_create_name+3,f,c
  4151  003A7E  500F               	movf	??_create_name+2,w,c
  4152  003A80  5C1D               	subwf	create_name@i,w,c
  4153  003A82  5010               	movf	??_create_name+3,w,c
  4154  003A84  581E               	subwfb	create_name@i+1,w,c
  4155  003A86  B0D8               	btfsc	status,0,c
  4156  003A88  D7B3               	goto	u6680
  4157                           
  4158                           ;ff.c: 2013:    sfn[i++] = c;
  4159  003A8A  501D               	movf	create_name@i,w,c
  4160  003A8C  241B               	addwf	create_name@sfn,w,c
  4161  003A8E  6ED9               	movwf	fsr2l,c
  4162  003A90  501E               	movf	create_name@i+1,w,c
  4163  003A92  201C               	addwfc	create_name@sfn+1,w,c
  4164  003A94  6EDA               	movwf	fsr2h,c
  4165  003A96  C01F  FFDF         	movff	create_name@c,indf2
  4166  003A9A  4A1D               	infsnz	create_name@i,f,c
  4167  003A9C  2A1E               	incf	create_name@i+1,f,c
  4168                           
  4169                           ;ff.c: 2014:    sfn[i++] = d;
  4170  003A9E  501D               	movf	create_name@i,w,c
  4171  003AA0  241B               	addwf	create_name@sfn,w,c
  4172  003AA2  6ED9               	movwf	fsr2l,c
  4173  003AA4  501E               	movf	create_name@i+1,w,c
  4174  003AA6  201C               	addwfc	create_name@sfn+1,w,c
  4175  003AA8  6EDA               	movwf	fsr2h,c
  4176  003AAA  C01A  FFDF         	movff	create_name@d,indf2
  4177  003AAE  D026               	goto	l5246
  4178  003AB0                     l5224:
  4179                           
  4180                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4181  003AB0  0E15               	movlw	low STR_5
  4182  003AB2  6E01               	movwf	chk_chr@str,c
  4183  003AB4  0E08               	movlw	high STR_5
  4184  003AB6  6E02               	movwf	chk_chr@str+1,c
  4185  003AB8  C01F  F003         	movff	create_name@c,chk_chr@chr
  4186  003ABC  6A04               	clrf	chk_chr@chr+1,c
  4187  003ABE  ECB2  F029         	call	_chk_chr	;wreg free
  4188  003AC2  5001               	movf	?_chk_chr,w,c
  4189  003AC4  1002               	iorwf	?_chk_chr+1,w,c
  4190  003AC6  A4D8               	btfss	status,2,c
  4191  003AC8  D793               	goto	u6680
  4192                           
  4193                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4194  003ACA  0E40               	movlw	64
  4195  003ACC  641F               	cpfsgt	create_name@c,c
  4196  003ACE  D005               	goto	l5236
  4197  003AD0  0E5B               	movlw	91
  4198  003AD2  601F               	cpfslt	create_name@c,c
  4199  003AD4  D002               	goto	l5236
  4200                           
  4201                           ;ff.c: 2019:     b |= 2;
  4202  003AD6  8215               	bsf	create_name@b,1,c
  4203                           
  4204                           ;ff.c: 2020:    } else {
  4205  003AD8  D009               	goto	l5244
  4206  003ADA                     l5236:
  4207                           
  4208                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4209  003ADA  0E60               	movlw	96
  4210  003ADC  641F               	cpfsgt	create_name@c,c
  4211  003ADE  D006               	goto	l5244
  4212  003AE0  0E7B               	movlw	123
  4213  003AE2  601F               	cpfslt	create_name@c,c
  4214  003AE4  D003               	goto	l5244
  4215                           
  4216                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4217  003AE6  8015               	bsf	create_name@b,0,c
  4218  003AE8  0E20               	movlw	32
  4219  003AEA  5E1F               	subwf	create_name@c,f,c
  4220  003AEC                     l5244:
  4221                           
  4222                           ;ff.c: 2025:    sfn[i++] = c;
  4223  003AEC  501D               	movf	create_name@i,w,c
  4224  003AEE  241B               	addwf	create_name@sfn,w,c
  4225  003AF0  6ED9               	movwf	fsr2l,c
  4226  003AF2  501E               	movf	create_name@i+1,w,c
  4227  003AF4  201C               	addwfc	create_name@sfn+1,w,c
  4228  003AF6  6EDA               	movwf	fsr2h,c
  4229  003AF8  C01F  FFDF         	movff	create_name@c,indf2
  4230  003AFC                     l5246:
  4231  003AFC  4A1D               	infsnz	create_name@i,f,c
  4232  003AFE  2A1E               	incf	create_name@i+1,f,c
  4233  003B00  D74A               	goto	l5164
  4234  003B02                     l5248:
  4235                           
  4236                           ;ff.c: 2028:  *path = &p[si];
  4237  003B02  5013               	movf	create_name@si,w,c
  4238  003B04  2418               	addwf	create_name@p,w,c
  4239  003B06  6E0D               	movwf	??_create_name& (0+255),c
  4240  003B08  5014               	movf	create_name@si+1,w,c
  4241  003B0A  2019               	addwfc	create_name@p+1,w,c
  4242  003B0C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4243  003B0E  C00B  FFD9         	movff	create_name@path,fsr2l
  4244  003B12  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4245  003B16  C00D  FFDE         	movff	??_create_name,postinc2
  4246  003B1A  C00E  FFDD         	movff	??_create_name+1,postdec2
  4247                           
  4248                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4249  003B1E  0E20               	movlw	32
  4250  003B20  641F               	cpfsgt	create_name@c,c
  4251  003B22  D004               	goto	l5254
  4252  003B24  0E00               	movlw	0
  4253  003B26  6E12               	movwf	_create_name$818+1,c
  4254  003B28  0E00               	movlw	0
  4255  003B2A  D003               	goto	L5
  4256  003B2C                     l5254:
  4257  003B2C  0E00               	movlw	0
  4258  003B2E  6E12               	movwf	_create_name$818+1,c
  4259  003B30  0E04               	movlw	4
  4260  003B32                     L5:
  4261  003B32  6E11               	movwf	_create_name$818,c
  4262  003B34  C011  F01F         	movff	_create_name$818,create_name@c
  4263                           
  4264                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4265  003B38  501D               	movf	create_name@i,w,c
  4266  003B3A  101E               	iorwf	create_name@i+1,w,c
  4267  003B3C  B4D8               	btfsc	status,2,c
  4268  003B3E  D758               	goto	u6680
  4269                           
  4270                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4271  003B40  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4272  003B44  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4273  003B48  0EE5               	movlw	229
  4274  003B4A  18DE               	xorwf	postinc2,w,c
  4275  003B4C  A4D8               	btfss	status,2,c
  4276  003B4E  D006               	goto	l5268
  4277  003B50  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4278  003B54  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4279  003B58  0E05               	movlw	5
  4280  003B5A  6EDF               	movwf	indf2,c
  4281  003B5C                     l5268:
  4282                           
  4283                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4284  003B5C  0E08               	movlw	8
  4285  003B5E  1816               	xorwf	create_name@ni,w,c
  4286  003B60  1017               	iorwf	create_name@ni+1,w,c
  4287  003B62  A4D8               	btfss	status,2,c
  4288  003B64  D004               	goto	l521
  4289  003B66  90D8               	bcf	status,0,c
  4290  003B68  3615               	rlcf	create_name@b,f,c
  4291  003B6A  90D8               	bcf	status,0,c
  4292  003B6C  3615               	rlcf	create_name@b,f,c
  4293  003B6E                     l521:
  4294                           
  4295                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4296  003B6E  5015               	movf	create_name@b,w,c
  4297  003B70  0B03               	andlw	3
  4298  003B72  06E8               	decf	wreg,f,c
  4299  003B74  B4D8               	btfsc	status,2,c
  4300  003B76  881F               	bsf	create_name@c,4,c
  4301                           
  4302                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4303  003B78  5015               	movf	create_name@b,w,c
  4304  003B7A  0B0C               	andlw	12
  4305  003B7C  0A04               	xorlw	4
  4306  003B7E  B4D8               	btfsc	status,2,c
  4307  003B80  861F               	bsf	create_name@c,3,c
  4308                           
  4309                           ;ff.c: 2038:  sfn[11] = c;
  4310  003B82  EE20 F00B          	lfsr	2,11
  4311  003B86  501B               	movf	create_name@sfn,w,c
  4312  003B88  26D9               	addwf	fsr2l,f,c
  4313  003B8A  501C               	movf	create_name@sfn+1,w,c
  4314  003B8C  22DA               	addwfc	fsr2h,f,c
  4315  003B8E  C01F  FFDF         	movff	create_name@c,indf2
  4316                           
  4317                           ;ff.c: 2040:  return FR_OK;
  4318  003B92  0E00               	movlw	0
  4319  003B94  0012               	return		;funcret
  4320  003B96                     __end_of_create_name:
  4321                           	opt callstack 0
  4322                           
  4323 ;; *************** function _chk_chr *****************
  4324 ;; Defined at:
  4325 ;;		line 543 in file "ff.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4328 ;;		 -> STR_6(15), 
  4329 ;;  chr             2    2[COMRAM] int 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  2    0[COMRAM] int 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4341 ;;      Params:         4       0       0       0       0       0       0       0       0
  4342 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4343 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4344 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4345 ;;Total ram usage:        6 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_create_name
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text10
  4355  005364                     __ptext10:
  4356                           	opt callstack 0
  4357  005364                     _chk_chr:
  4358                           	opt callstack 26
  4359                           
  4360                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4361                           
  4362                           ;incstack = 0
  4363  005364  D002               	goto	l4736
  4364  005366                     l4734:
  4365  005366  4A01               	infsnz	chk_chr@str,f,c
  4366  005368  2A02               	incf	chk_chr@str+1,f,c
  4367  00536A                     l4736:
  4368  00536A  C001  FFF6         	movff	chk_chr@str,tblptrl
  4369  00536E  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4370  005372                     	if	0	;tblptru may be non-zero
  4371  005372                     	endif
  4372  005372                     	if	0	;tblptru may be non-zero
  4373  005372                     	endif
  4374  005372  0008               	tblrd		*
  4375  005374  50F5               	movf	tablat,w,c
  4376  005376  0900               	iorlw	0
  4377  005378  B4D8               	btfsc	status,2,c
  4378  00537A  D00F               	goto	u5860
  4379  00537C  C001  FFF6         	movff	chk_chr@str,tblptrl
  4380  005380  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4381  005384                     	if	0	;tblptru may be non-zero
  4382  005384                     	endif
  4383  005384                     	if	0	;tblptru may be non-zero
  4384  005384                     	endif
  4385  005384  0008               	tblrd		*
  4386  005386  50F5               	movf	tablat,w,c
  4387  005388  6E05               	movwf	??_chk_chr& (0+255),c
  4388  00538A  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4389  00538C  5003               	movf	chk_chr@chr,w,c
  4390  00538E  1805               	xorwf	??_chk_chr,w,c
  4391  005390  E1EA               	bnz	l4734
  4392  005392  5004               	movf	chk_chr@chr+1,w,c
  4393  005394  1806               	xorwf	??_chk_chr+1,w,c
  4394  005396  A4D8               	btfss	status,2,c
  4395  005398  D7E6               	goto	l4734
  4396  00539A                     u5860:
  4397                           
  4398                           ;ff.c: 545:  return *str;
  4399  00539A  C001  FFF6         	movff	chk_chr@str,tblptrl
  4400  00539E  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4401  0053A2                     	if	0	;tblptru may be non-zero
  4402  0053A2                     	endif
  4403  0053A2                     	if	0	;tblptru may be non-zero
  4404  0053A2                     	endif
  4405  0053A2  0008               	tblrd		*
  4406  0053A4  50F5               	movf	tablat,w,c
  4407  0053A6  6E01               	movwf	?_chk_chr,c
  4408  0053A8  6A02               	clrf	?_chk_chr+1,c
  4409  0053AA  0012               	return		;funcret
  4410  0053AC                     __end_of_chk_chr:
  4411                           	opt callstack 0
  4412                           
  4413 ;; *************** function _dir_register *****************
  4414 ;; Defined at:
  4415 ;;		line 1578 in file "ff.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  dp              2   42[BANK0 ] PTR struct .
  4418 ;;		 -> f_open@dj(22), 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  res             1   44[BANK0 ] enum E93
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      enum E93
  4423 ;; Registers used:
  4424 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4430 ;;      Params:         0       2       0       0       0       0       0       0       0
  4431 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4433 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4434 ;;Total ram usage:        3 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:   12
  4437 ;; This function calls:
  4438 ;;		_dir_alloc
  4439 ;;		_mem_cpy
  4440 ;;		_mem_set
  4441 ;;		_move_window
  4442 ;; This function is called by:
  4443 ;;		_f_open
  4444 ;; This function uses a non-reentrant model
  4445 ;;
  4446                           
  4447                           	psect	text11
  4448  004B3E                     __ptext11:
  4449                           	opt callstack 0
  4450  004B3E                     _dir_register:
  4451                           	opt callstack 16
  4452                           
  4453                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4454                           
  4455                           ;incstack = 0
  4456  004B3E  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4457  004B42  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4458  004B46  0E00               	movlw	0
  4459  004B48  0100               	movlb	0	; () banked
  4460  004B4A  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4461  004B4C  0E01               	movlw	1
  4462  004B4E  6F82               	movwf	dir_alloc@nent& (0+255),b
  4463  004B50  EC5F  F023         	call	_dir_alloc	;wreg free
  4464  004B54  0100               	movlb	0	; () banked
  4465  004B56  6F8C               	movwf	dir_register@res& (0+255),b
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;ff.c: 1632:  if (res == FR_OK) {
  4469  004B58  518C               	movf	dir_register@res& (0+255),w,b
  4470  004B5A  A4D8               	btfss	status,2,c
  4471  004B5C  D058               	goto	l5450
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4475  004B5E  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4476  004B62  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4477  004B66  CFDE F030          	movff	postinc2,move_window@fs
  4478  004B6A  CFDD F031          	movff	postdec2,move_window@fs+1
  4479  004B6E  EE20 F00E          	lfsr	2,14
  4480  004B72  518A               	movf	dir_register@dp& (0+255),w,b
  4481  004B74  26D9               	addwf	fsr2l,f,c
  4482  004B76  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4483  004B78  22DA               	addwfc	fsr2h,f,c
  4484  004B7A  CFDE F032          	movff	postinc2,move_window@sector
  4485  004B7E  CFDE F033          	movff	postinc2,move_window@sector+1
  4486  004B82  CFDE F034          	movff	postinc2,move_window@sector+2
  4487  004B86  CFDE F035          	movff	postinc2,move_window@sector+3
  4488  004B8A  EC82  F027         	call	_move_window	;wreg free
  4489  004B8E  0100               	movlb	0	; () banked
  4490  004B90  6F8C               	movwf	dir_register@res& (0+255),b
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;ff.c: 1634:   if (res == FR_OK) {
  4494  004B92  518C               	movf	dir_register@res& (0+255),w,b
  4495  004B94  A4D8               	btfss	status,2,c
  4496  004B96  D03B               	goto	l5450
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4500  004B98  EE20 F012          	lfsr	2,18
  4501  004B9C  518A               	movf	dir_register@dp& (0+255),w,b
  4502  004B9E  26D9               	addwf	fsr2l,f,c
  4503  004BA0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4504  004BA2  22DA               	addwfc	fsr2h,f,c
  4505  004BA4  CFDE F001          	movff	postinc2,mem_set@dst
  4506  004BA8  CFDD F002          	movff	postdec2,mem_set@dst+1
  4507  004BAC  0E00               	movlw	0
  4508  004BAE  6E04               	movwf	mem_set@val+1,c
  4509  004BB0  0E00               	movlw	0
  4510  004BB2  6E03               	movwf	mem_set@val,c
  4511  004BB4  0E00               	movlw	0
  4512  004BB6  6E06               	movwf	mem_set@cnt+1,c
  4513  004BB8  0E20               	movlw	32
  4514  004BBA  6E05               	movwf	mem_set@cnt,c
  4515  004BBC  ECA6  F02A         	call	_mem_set	;wreg free
  4516                           
  4517                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4518  004BC0  0100               	movlb	0	; () banked
  4519  004BC2  EE20 F012          	lfsr	2,18
  4520  004BC6  518A               	movf	dir_register@dp& (0+255),w,b
  4521  004BC8  26D9               	addwf	fsr2l,f,c
  4522  004BCA  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4523  004BCC  22DA               	addwfc	fsr2h,f,c
  4524  004BCE  CFDE F001          	movff	postinc2,mem_cpy@dst
  4525  004BD2  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4526  004BD6  EE20 F014          	lfsr	2,20
  4527  004BDA  518A               	movf	dir_register@dp& (0+255),w,b
  4528  004BDC  26D9               	addwf	fsr2l,f,c
  4529  004BDE  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4530  004BE0  22DA               	addwfc	fsr2h,f,c
  4531  004BE2  CFDE F003          	movff	postinc2,mem_cpy@src
  4532  004BE6  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4533  004BEA  0E00               	movlw	0
  4534  004BEC  6E06               	movwf	mem_cpy@cnt+1,c
  4535  004BEE  0E0B               	movlw	11
  4536  004BF0  6E05               	movwf	mem_cpy@cnt,c
  4537  004BF2  EC70  F026         	call	_mem_cpy	;wreg free
  4538                           
  4539                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4540  004BF6  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4541  004BFA  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4542  004BFE  EE10 F004          	lfsr	1,4
  4543  004C02  50DE               	movf	postinc2,w,c
  4544  004C04  26E1               	addwf	fsr1l,f,c
  4545  004C06  50DD               	movf	postdec2,w,c
  4546  004C08  22E2               	addwfc	fsr1h,f,c
  4547  004C0A  0E01               	movlw	1
  4548  004C0C  6EE7               	movwf	indf1,c
  4549  004C0E                     l5450:
  4550                           
  4551                           ;ff.c: 1644:  return res;
  4552  004C0E  0100               	movlb	0	; () banked
  4553  004C10  518C               	movf	dir_register@res& (0+255),w,b
  4554                           
  4555                           ; BSR set to: 0
  4556  004C12  0012               	return		;funcret
  4557  004C14                     __end_of_dir_register:
  4558                           	opt callstack 0
  4559                           
  4560 ;; *************** function _mem_cpy *****************
  4561 ;; Defined at:
  4562 ;;		line 507 in file "ff.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  dst             2    0[COMRAM] PTR void 
  4565 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4566 ;;  src             2    2[COMRAM] PTR const void 
  4567 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4568 ;;  cnt             2    4[COMRAM] unsigned short 
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4571 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4572 ;;  d               2    8[COMRAM] PTR unsigned char 
  4573 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4583 ;;      Params:         6       0       0       0       0       0       0       0       0
  4584 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4585 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4586 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4587 ;;Total ram usage:       12 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_dir_register
  4593 ;;		_f_write
  4594 ;;		_f_read
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text12
  4599  004CE0                     __ptext12:
  4600                           	opt callstack 0
  4601  004CE0                     _mem_cpy:
  4602                           	opt callstack 28
  4603                           
  4604                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;incstack = 0
  4608  004CE0  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4609  004CE4  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4610                           
  4611                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4612  004CE8  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4613  004CEC  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4614                           
  4615                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4616  004CF0  D02B               	goto	l5028
  4617  004CF2                     l5020:
  4618                           
  4619                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4620  004CF2  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4621  004CF6  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4622  004CFA  6AF8               	clrf	tblptru,c
  4623  004CFC  0E07               	movlw	(high __ramtop+-1)
  4624  004CFE  64F7               	cpfsgt	tblptrh,c
  4625  004D00  D007               	bra	u6387
  4626  004D02  0009               	tblrd		*+
  4627  004D04  CFF5 F007          	movff	tablat,??_mem_cpy
  4628  004D08  0009               	tblrd		*+
  4629  004D0A  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4630  004D0E  D008               	bra	u6380
  4631  004D10                     u6387:
  4632  004D10  CFF6 FFE9          	movff	tblptrl,fsr0l
  4633  004D14  CFF7 FFEA          	movff	tblptrh,fsr0h
  4634  004D18  CFEE F007          	movff	postinc0,??_mem_cpy
  4635  004D1C  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4636  004D20                     u6380:
  4637  004D20  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4638  004D24  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4639  004D28  C007  FFDE         	movff	??_mem_cpy,postinc2
  4640  004D2C  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4641                           
  4642                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4643  004D30  0E02               	movlw	2
  4644  004D32  2609               	addwf	mem_cpy@d,f,c
  4645  004D34  0E00               	movlw	0
  4646  004D36  220A               	addwfc	mem_cpy@d+1,f,c
  4647  004D38  0E02               	movlw	2
  4648  004D3A  260B               	addwf	mem_cpy@s,f,c
  4649  004D3C  0E00               	movlw	0
  4650  004D3E  220C               	addwfc	mem_cpy@s+1,f,c
  4651                           
  4652                           ;ff.c: 515:   cnt -= sizeof (int);
  4653  004D40  0E02               	movlw	2
  4654  004D42  5E05               	subwf	mem_cpy@cnt,f,c
  4655  004D44  0E00               	movlw	0
  4656  004D46  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4657  004D48                     l5028:
  4658                           
  4659                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4660  004D48  5006               	movf	mem_cpy@cnt+1,w,c
  4661  004D4A  E1D3               	bnz	l5020
  4662  004D4C  0E02               	movlw	2
  4663  004D4E  5C05               	subwf	mem_cpy@cnt,w,c
  4664  004D50  A0D8               	btfss	status,0,c
  4665  004D52  D01A               	goto	l5036
  4666  004D54  D7CE               	goto	l5020
  4667  004D56                     l5030:
  4668                           
  4669                           ;ff.c: 519:   *d++ = *s++;
  4670  004D56  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4671  004D5A  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4672  004D5E  6AF8               	clrf	tblptru,c
  4673  004D60  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4674  004D64  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4675  004D68  0E07               	movlw	(high __ramtop+-1)
  4676  004D6A  64F7               	cpfsgt	tblptrh,c
  4677  004D6C  D003               	bra	u6407
  4678  004D6E  0008               	tblrd		*
  4679  004D70  50F5               	movf	tablat,w,c
  4680  004D72  D005               	bra	u6400
  4681  004D74                     u6407:
  4682  004D74  CFF6 FFE9          	movff	tblptrl,fsr0l
  4683  004D78  CFF7 FFEA          	movff	tblptrh,fsr0h
  4684  004D7C  50EF               	movf	indf0,w,c
  4685  004D7E                     u6400:
  4686  004D7E  6EDF               	movwf	indf2,c
  4687  004D80  4A0B               	infsnz	mem_cpy@s,f,c
  4688  004D82  2A0C               	incf	mem_cpy@s+1,f,c
  4689  004D84  4A09               	infsnz	mem_cpy@d,f,c
  4690  004D86  2A0A               	incf	mem_cpy@d+1,f,c
  4691  004D88                     l5036:
  4692                           
  4693                           ;ff.c: 518:  while (cnt--)
  4694  004D88  0605               	decf	mem_cpy@cnt,f,c
  4695  004D8A  A0D8               	btfss	status,0,c
  4696  004D8C  0606               	decf	mem_cpy@cnt+1,f,c
  4697  004D8E  2805               	incf	mem_cpy@cnt,w,c
  4698  004D90  E1E2               	bnz	l5030
  4699  004D92  2806               	incf	mem_cpy@cnt+1,w,c
  4700  004D94  B4D8               	btfsc	status,2,c
  4701  004D96  0012               	return	
  4702  004D98  D7DE               	goto	l5030
  4703  004D9A                     __end_of_mem_cpy:
  4704                           	opt callstack 0
  4705                           
  4706 ;; *************** function _dir_alloc *****************
  4707 ;; Defined at:
  4708 ;;		line 1199 in file "ff.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  dp              2   32[BANK0 ] PTR struct .
  4711 ;;		 -> f_open@dj(22), 
  4712 ;;  nent            2   34[BANK0 ] unsigned short 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  n               2   39[BANK0 ] unsigned short 
  4715 ;;  res             1   41[BANK0 ] enum E93
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      enum E93
  4718 ;; Registers used:
  4719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4725 ;;      Params:         0       4       0       0       0       0       0       0       0
  4726 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4727 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4728 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4729 ;;Total ram usage:       10 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:   11
  4732 ;; This function calls:
  4733 ;;		_dir_next
  4734 ;;		_dir_sdi
  4735 ;;		_move_window
  4736 ;; This function is called by:
  4737 ;;		_dir_register
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text13
  4742  0046BE                     __ptext13:
  4743                           	opt callstack 0
  4744  0046BE                     _dir_alloc:
  4745                           	opt callstack 16
  4746                           
  4747                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4748                           
  4749                           ;incstack = 0
  4750  0046BE  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4751  0046C2  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4752  0046C6  0E00               	movlw	0
  4753  0046C8  6E59               	movwf	dir_sdi@idx+1,c
  4754  0046CA  0E00               	movlw	0
  4755  0046CC  6E58               	movwf	dir_sdi@idx,c
  4756  0046CE  EC28  F01B         	call	_dir_sdi	;wreg free
  4757  0046D2  0100               	movlb	0	; () banked
  4758  0046D4  6F89               	movwf	dir_alloc@res& (0+255),b
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;ff.c: 1209:  if (res == FR_OK) {
  4762  0046D6  5189               	movf	dir_alloc@res& (0+255),w,b
  4763  0046D8  A4D8               	btfss	status,2,c
  4764  0046DA  D061               	goto	u6510
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;ff.c: 1210:   n = 0;
  4768  0046DC  0E00               	movlw	0
  4769  0046DE  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4770  0046E0  0E00               	movlw	0
  4771  0046E2  6F87               	movwf	dir_alloc@n& (0+255),b
  4772  0046E4                     l5076:
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4776  0046E4  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4777  0046E8  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4778  0046EC  CFDE F030          	movff	postinc2,move_window@fs
  4779  0046F0  CFDD F031          	movff	postdec2,move_window@fs+1
  4780  0046F4  EE20 F00E          	lfsr	2,14
  4781  0046F8  5180               	movf	dir_alloc@dp& (0+255),w,b
  4782  0046FA  26D9               	addwf	fsr2l,f,c
  4783  0046FC  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4784  0046FE  22DA               	addwfc	fsr2h,f,c
  4785  004700  CFDE F032          	movff	postinc2,move_window@sector
  4786  004704  CFDE F033          	movff	postinc2,move_window@sector+1
  4787  004708  CFDE F034          	movff	postinc2,move_window@sector+2
  4788  00470C  CFDE F035          	movff	postinc2,move_window@sector+3
  4789  004710  EC82  F027         	call	_move_window	;wreg free
  4790  004714  0100               	movlb	0	; () banked
  4791  004716  6F89               	movwf	dir_alloc@res& (0+255),b
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;ff.c: 1213:    if (res != FR_OK) break;
  4795  004718  5189               	movf	dir_alloc@res& (0+255),w,b
  4796  00471A  A4D8               	btfss	status,2,c
  4797  00471C  D040               	goto	u6510
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4801  00471E  EE20 F012          	lfsr	2,18
  4802  004722  5180               	movf	dir_alloc@dp& (0+255),w,b
  4803  004724  26D9               	addwf	fsr2l,f,c
  4804  004726  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4805  004728  22DA               	addwfc	fsr2h,f,c
  4806  00472A  CFDE F084          	movff	postinc2,??_dir_alloc
  4807  00472E  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4808  004732  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4809  004736  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4810  00473A  0EE5               	movlw	229
  4811  00473C  18DE               	xorwf	postinc2,w,c
  4812  00473E  B4D8               	btfsc	status,2,c
  4813  004740  D011               	goto	u6490
  4814                           
  4815                           ; BSR set to: 0
  4816  004742  EE20 F012          	lfsr	2,18
  4817  004746  5180               	movf	dir_alloc@dp& (0+255),w,b
  4818  004748  26D9               	addwf	fsr2l,f,c
  4819  00474A  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4820  00474C  22DA               	addwfc	fsr2h,f,c
  4821  00474E  CFDE F084          	movff	postinc2,??_dir_alloc
  4822  004752  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4823  004756  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4824  00475A  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4825  00475E  50DF               	movf	indf2,w,c
  4826  004760  A4D8               	btfss	status,2,c
  4827  004762  D00A               	goto	l5090
  4828  004764                     u6490:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;ff.c: 1215:     if (++n == nent) break;
  4832  004764  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  4833  004766  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  4834  004768  5182               	movf	dir_alloc@nent& (0+255),w,b
  4835  00476A  1987               	xorwf	dir_alloc@n& (0+255),w,b
  4836  00476C  E109               	bnz	l5092
  4837  00476E  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  4838  004770  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  4839  004772  B4D8               	btfsc	status,2,c
  4840  004774  D014               	goto	u6510
  4841  004776  D004               	goto	l5092
  4842  004778                     l5090:
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;ff.c: 1217:     n = 0;
  4846  004778  0E00               	movlw	0
  4847  00477A  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4848  00477C  0E00               	movlw	0
  4849  00477E  6F87               	movwf	dir_alloc@n& (0+255),b
  4850  004780                     l5092:
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;ff.c: 1219:    res = dir_next(dp, 1);
  4854  004780  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  4855  004784  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  4856  004788  0E00               	movlw	0
  4857  00478A  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4858  00478C  0E01               	movlw	1
  4859  00478E  6F6F               	movwf	dir_next@stretch& (0+255),b
  4860  004790  EC0C  F014         	call	_dir_next	;wreg free
  4861  004794  0100               	movlb	0	; () banked
  4862  004796  6F89               	movwf	dir_alloc@res& (0+255),b
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;ff.c: 1220:   } while (res == FR_OK);
  4866  004798  5189               	movf	dir_alloc@res& (0+255),w,b
  4867  00479A  B4D8               	btfsc	status,2,c
  4868  00479C  D7A3               	goto	l5076
  4869  00479E                     u6510:
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  4873  00479E  0E04               	movlw	4
  4874  0047A0  1989               	xorwf	dir_alloc@res& (0+255),w,b
  4875  0047A2  A4D8               	btfss	status,2,c
  4876  0047A4  D002               	goto	l456
  4877                           
  4878                           ; BSR set to: 0
  4879  0047A6  0E07               	movlw	7
  4880  0047A8  6F89               	movwf	dir_alloc@res& (0+255),b
  4881  0047AA                     l456:
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;ff.c: 1223:  return res;
  4885  0047AA  5189               	movf	dir_alloc@res& (0+255),w,b
  4886                           
  4887                           ; BSR set to: 0
  4888  0047AC  0012               	return		;funcret
  4889  0047AE                     __end_of_dir_alloc:
  4890                           	opt callstack 0
  4891                           
  4892 ;; *************** function _dir_sdi *****************
  4893 ;; Defined at:
  4894 ;;		line 1080 in file "ff.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  dp              2   85[COMRAM] PTR struct .
  4897 ;;		 -> f_open@dj(22), 
  4898 ;;  idx             2   87[COMRAM] unsigned short 
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;  clst            4   13[BANK0 ] unsigned long 
  4901 ;;  sect            4    9[BANK0 ] unsigned long 
  4902 ;;  ic              2    7[BANK0 ] unsigned short 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  1    wreg      enum E93
  4905 ;; Registers used:
  4906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4912 ;;      Params:         4       0       0       0       0       0       0       0       0
  4913 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4914 ;;      Temps:          0       7       0       0       0       0       0       0       0
  4915 ;;      Totals:         4      17       0       0       0       0       0       0       0
  4916 ;;Total ram usage:       21 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; Hardware stack levels required when called:    9
  4919 ;; This function calls:
  4920 ;;		_clust2sect
  4921 ;;		_get_fat
  4922 ;; This function is called by:
  4923 ;;		_dir_alloc
  4924 ;;		_dir_find
  4925 ;;		_follow_path
  4926 ;; This function uses a non-reentrant model
  4927 ;;
  4928                           
  4929                           	psect	text14
  4930  003650                     __ptext14:
  4931                           	opt callstack 0
  4932  003650                     _dir_sdi:
  4933                           	opt callstack 18
  4934                           
  4935                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;incstack = 0
  4939  003650  EE20 F004          	lfsr	2,4
  4940  003654  5056               	movf	dir_sdi@dp,w,c
  4941  003656  26D9               	addwf	fsr2l,f,c
  4942  003658  5057               	movf	dir_sdi@dp+1,w,c
  4943  00365A  22DA               	addwfc	fsr2h,f,c
  4944  00365C  C058  FFDE         	movff	dir_sdi@idx,postinc2
  4945  003660  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  4946                           
  4947                           ;ff.c: 1090:  clst = dp->sclust;
  4948  003664  EE20 F006          	lfsr	2,6
  4949  003668  5056               	movf	dir_sdi@dp,w,c
  4950  00366A  26D9               	addwf	fsr2l,f,c
  4951  00366C  5057               	movf	dir_sdi@dp+1,w,c
  4952  00366E  22DA               	addwfc	fsr2h,f,c
  4953  003670  CFDE F06D          	movff	postinc2,dir_sdi@clst
  4954  003674  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  4955  003678  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  4956  00367C  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  4957                           
  4958                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  4959  003680  0100               	movlb	0	; () banked
  4960  003682  056D               	decf	dir_sdi@clst& (0+255),w,b
  4961  003684  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4962  003686  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4963  003688  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4964  00368A  B4D8               	btfsc	status,2,c
  4965  00368C  D014               	goto	u5880
  4966                           
  4967                           ; BSR set to: 0
  4968  00368E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4969  003692  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4970  003696  EE10 F012          	lfsr	1,18
  4971  00369A  50DE               	movf	postinc2,w,c
  4972  00369C  26E1               	addwf	fsr1l,f,c
  4973  00369E  50DD               	movf	postdec2,w,c
  4974  0036A0  22E2               	addwfc	fsr1h,f,c
  4975  0036A2  50E6               	movf	postinc1,w,c
  4976  0036A4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  4977  0036A6  50E6               	movf	postinc1,w,c
  4978  0036A8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  4979  0036AA  50E6               	movf	postinc1,w,c
  4980  0036AC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  4981  0036AE  50E6               	movf	postinc1,w,c
  4982  0036B0  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  4983  0036B2  A0D8               	btfss	status,0,c
  4984  0036B4  D002               	goto	l4754
  4985  0036B6                     u5880:
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;ff.c: 1092:   return FR_INT_ERR;
  4989  0036B6  0E02               	movlw	2
  4990  0036B8  0012               	return	
  4991  0036BA                     l4754:
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  4995  0036BA  516D               	movf	dir_sdi@clst& (0+255),w,b
  4996  0036BC  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4997  0036BE  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4998  0036C0  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4999  0036C2  A4D8               	btfss	status,2,c
  5000  0036C4  D022               	goto	l4760
  5001                           
  5002                           ; BSR set to: 0
  5003  0036C6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5004  0036CA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5005  0036CE  CFDE F060          	movff	postinc2,??_dir_sdi
  5006  0036D2  CFDD F061          	movff	postdec2,??_dir_sdi+1
  5007  0036D6  C060  FFD9         	movff	??_dir_sdi,fsr2l
  5008  0036DA  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  5009  0036DE  0E03               	movlw	3
  5010  0036E0  18DE               	xorwf	postinc2,w,c
  5011  0036E2  A4D8               	btfss	status,2,c
  5012  0036E4  D012               	goto	l4760
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5016  0036E6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5017  0036EA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5018  0036EE  EE10 F022          	lfsr	1,34
  5019  0036F2  50DE               	movf	postinc2,w,c
  5020  0036F4  26E1               	addwf	fsr1l,f,c
  5021  0036F6  50DD               	movf	postdec2,w,c
  5022  0036F8  22E2               	addwfc	fsr1h,f,c
  5023  0036FA  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  5024  0036FE  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  5025  003702  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  5026  003706  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  5027  00370A                     l4760:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;ff.c: 1096:  if (clst == 0) {
  5031  00370A  516D               	movf	dir_sdi@clst& (0+255),w,b
  5032  00370C  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5033  00370E  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5034  003710  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5035  003712  A4D8               	btfss	status,2,c
  5036  003714  D023               	goto	l4770
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5040  003716  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5041  00371A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5042  00371E  EE10 F008          	lfsr	1,8
  5043  003722  50DE               	movf	postinc2,w,c
  5044  003724  26E1               	addwf	fsr1l,f,c
  5045  003726  50DD               	movf	postdec2,w,c
  5046  003728  22E2               	addwfc	fsr1h,f,c
  5047  00372A  50E6               	movf	postinc1,w,c
  5048  00372C  5C58               	subwf	dir_sdi@idx,w,c
  5049  00372E  50E6               	movf	postinc1,w,c
  5050  003730  5859               	subwfb	dir_sdi@idx+1,w,c
  5051  003732  B0D8               	btfsc	status,0,c
  5052  003734  D7C0               	goto	u5880
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5056  003736  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5057  00373A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5058  00373E  EE10 F022          	lfsr	1,34
  5059  003742  50DE               	movf	postinc2,w,c
  5060  003744  26E1               	addwf	fsr1l,f,c
  5061  003746  50DD               	movf	postdec2,w,c
  5062  003748  22E2               	addwfc	fsr1h,f,c
  5063  00374A  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5064  00374E  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5065  003752  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5066  003756  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5067                           
  5068                           ;ff.c: 1100:  }
  5069  00375A  D079               	goto	l4792
  5070  00375C                     l4770:
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5074  00375C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5075  003760  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5076  003764  EE10 F002          	lfsr	1,2
  5077  003768  50DE               	movf	postinc2,w,c
  5078  00376A  26E1               	addwf	fsr1l,f,c
  5079  00376C  50DD               	movf	postdec2,w,c
  5080  00376E  22E2               	addwfc	fsr1h,f,c
  5081  003770  50E7               	movf	indf1,w,c
  5082  003772  6F60               	movwf	??_dir_sdi& (0+255),b
  5083  003774  5160               	movf	??_dir_sdi& (0+255),w,b
  5084  003776  0D10               	mullw	16
  5085  003778  CFF3 F067          	movff	prodl,dir_sdi@ic
  5086  00377C  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5087                           
  5088                           ;ff.c: 1103:   while (idx >= ic) {
  5089  003780  D046               	goto	l414
  5090  003782                     l4772:
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5094  003782  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5095  003786  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5096  00378A  CFDE F03B          	movff	postinc2,get_fat@fs
  5097  00378E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5098  003792  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5099  003796  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5100  00379A  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5101  00379E  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5102  0037A2  EC0F  F016         	call	_get_fat	;wreg free
  5103  0037A6  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5104  0037AA  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5105  0037AE  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5106  0037B2  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5107                           
  5108                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5109  0037B6  0100               	movlb	0	; () banked
  5110  0037B8  296D               	incf	dir_sdi@clst& (0+255),w,b
  5111  0037BA  E109               	bnz	l4780
  5112  0037BC  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5113  0037BE  E107               	bnz	l4780
  5114  0037C0  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5115  0037C2  E105               	bnz	l4780
  5116  0037C4  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5117  0037C6  A4D8               	btfss	status,2,c
  5118  0037C8  D002               	goto	l4780
  5119                           
  5120                           ; BSR set to: 0
  5121  0037CA  0E01               	movlw	1
  5122  0037CC  0012               	return	
  5123  0037CE                     l4780:
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5127  0037CE  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5128  0037D0  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5129  0037D2  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5130  0037D4  E104               	bnz	u5940
  5131  0037D6  0E02               	movlw	2
  5132  0037D8  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5133  0037DA  A0D8               	btfss	status,0,c
  5134  0037DC  D76C               	goto	u5880
  5135  0037DE                     u5940:
  5136                           
  5137                           ; BSR set to: 0
  5138  0037DE  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5139  0037E2  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5140  0037E6  EE10 F012          	lfsr	1,18
  5141  0037EA  50DE               	movf	postinc2,w,c
  5142  0037EC  26E1               	addwf	fsr1l,f,c
  5143  0037EE  50DD               	movf	postdec2,w,c
  5144  0037F0  22E2               	addwfc	fsr1h,f,c
  5145  0037F2  50E6               	movf	postinc1,w,c
  5146  0037F4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5147  0037F6  50E6               	movf	postinc1,w,c
  5148  0037F8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5149  0037FA  50E6               	movf	postinc1,w,c
  5150  0037FC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5151  0037FE  50E6               	movf	postinc1,w,c
  5152  003800  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5153  003802  B0D8               	btfsc	status,0,c
  5154  003804  D758               	goto	u5880
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;ff.c: 1108:    idx -= ic;
  5158  003806  5167               	movf	dir_sdi@ic& (0+255),w,b
  5159  003808  5E58               	subwf	dir_sdi@idx,f,c
  5160  00380A  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5161  00380C  5A59               	subwfb	dir_sdi@idx+1,f,c
  5162  00380E                     l414:
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;ff.c: 1103:   while (idx >= ic) {
  5166  00380E  5167               	movf	dir_sdi@ic& (0+255),w,b
  5167  003810  5C58               	subwf	dir_sdi@idx,w,c
  5168  003812  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5169  003814  5859               	subwfb	dir_sdi@idx+1,w,c
  5170  003816  B0D8               	btfsc	status,0,c
  5171  003818  D7B4               	goto	l4772
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5175  00381A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5176  00381E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5177  003822  CFDE F00D          	movff	postinc2,clust2sect@fs
  5178  003826  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5179  00382A  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5180  00382E  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5181  003832  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5182  003836  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5183  00383A  ECCD  F026         	call	_clust2sect	;wreg free
  5184  00383E  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5185  003842  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5186  003846  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5187  00384A  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5188  00384E                     l4792:
  5189                           
  5190                           ;ff.c: 1112:  dp->clust = clst;
  5191  00384E  EE20 F00A          	lfsr	2,10
  5192  003852  5056               	movf	dir_sdi@dp,w,c
  5193  003854  26D9               	addwf	fsr2l,f,c
  5194  003856  5057               	movf	dir_sdi@dp+1,w,c
  5195  003858  22DA               	addwfc	fsr2h,f,c
  5196  00385A  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5197  00385E  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5198  003862  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5199  003866  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5200                           
  5201                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5202  00386A  0100               	movlb	0	; () banked
  5203  00386C  5169               	movf	dir_sdi@sect& (0+255),w,b
  5204  00386E  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5205  003870  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5206  003872  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5207  003874  B4D8               	btfsc	status,2,c
  5208  003876  D71F               	goto	u5880
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5212  003878  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5213  00387C  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5214  003880  0E04               	movlw	4
  5215  003882  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5216  003884                     u5985:
  5217  003884  90D8               	bcf	status,0,c
  5218  003886  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5219  003888  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5220  00388A  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5221  00388C  D7FB               	goto	u5985
  5222  00388E  5160               	movf	??_dir_sdi& (0+255),w,b
  5223  003890  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5224  003892  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5225  003894  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5226  003896  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5227  003898  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5228  00389A  0E00               	movlw	0
  5229  00389C  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5230  00389E  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5231  0038A0  0E00               	movlw	0
  5232  0038A2  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5233  0038A4  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5234  0038A6  EE20 F00E          	lfsr	2,14
  5235  0038AA  5056               	movf	dir_sdi@dp,w,c
  5236  0038AC  26D9               	addwf	fsr2l,f,c
  5237  0038AE  5057               	movf	dir_sdi@dp+1,w,c
  5238  0038B0  22DA               	addwfc	fsr2h,f,c
  5239  0038B2  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5240  0038B6  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5241  0038BA  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5242  0038BE  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5243                           
  5244                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5245  0038C2  0E0F               	movlw	15
  5246  0038C4  1458               	andwf	dir_sdi@idx,w,c
  5247  0038C6  6F60               	movwf	??_dir_sdi& (0+255),b
  5248  0038C8  0E00               	movlw	0
  5249  0038CA  1459               	andwf	dir_sdi@idx+1,w,c
  5250  0038CC  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5251  0038CE  0E05               	movlw	5
  5252  0038D0                     u5995:
  5253  0038D0  90D8               	bcf	status,0,c
  5254  0038D2  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5255  0038D4  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5256  0038D6  2EE8               	decfsz	wreg,f,c
  5257  0038D8  D7FB               	goto	u5995
  5258  0038DA  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5259  0038DE  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5260  0038E2  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5261  0038E6  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5262  0038EA  5160               	movf	??_dir_sdi& (0+255),w,b
  5263  0038EC  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5264  0038EE  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5265  0038F0  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5266  0038F2  0E2E               	movlw	46
  5267  0038F4  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5268  0038F6  0E00               	movlw	0
  5269  0038F8  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5270  0038FA  EE20 F012          	lfsr	2,18
  5271  0038FE  5056               	movf	dir_sdi@dp,w,c
  5272  003900  26D9               	addwf	fsr2l,f,c
  5273  003902  5057               	movf	dir_sdi@dp+1,w,c
  5274  003904  22DA               	addwfc	fsr2h,f,c
  5275  003906  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5276  00390A  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;ff.c: 1117:  return FR_OK;
  5280  00390E  0E00               	movlw	0
  5281                           
  5282                           ; BSR set to: 0
  5283  003910  0012               	return		;funcret
  5284  003912                     __end_of_dir_sdi:
  5285                           	opt callstack 0
  5286                           
  5287 ;; *************** function _dir_next *****************
  5288 ;; Defined at:
  5289 ;;		line 1128 in file "ff.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  dp              2   13[BANK0 ] PTR struct .
  5292 ;;		 -> f_open@dj(22), 
  5293 ;;  stretch         2   15[BANK0 ] int 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  clst            4   28[BANK0 ] unsigned long 
  5296 ;;  i               2   26[BANK0 ] unsigned short 
  5297 ;;  c               2   24[BANK0 ] unsigned short 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      enum E93
  5300 ;; Registers used:
  5301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5307 ;;      Params:         0       4       0       0       0       0       0       0       0
  5308 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5309 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5310 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5311 ;;Total ram usage:       19 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; Hardware stack levels required when called:   10
  5314 ;; This function calls:
  5315 ;;		_clust2sect
  5316 ;;		_create_chain
  5317 ;;		_get_fat
  5318 ;;		_mem_set
  5319 ;;		_sync_window
  5320 ;; This function is called by:
  5321 ;;		_dir_alloc
  5322 ;;		_dir_find
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text15
  5327  002818                     __ptext15:
  5328                           	opt callstack 0
  5329  002818                     _dir_next:
  5330                           	opt callstack 16
  5331                           
  5332                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;incstack = 0
  5336  002818  0100               	movlb	0	; () banked
  5337  00281A  EE20 F004          	lfsr	2,4
  5338  00281E  516D               	movf	dir_next@dp& (0+255),w,b
  5339  002820  26D9               	addwf	fsr2l,f,c
  5340  002822  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5341  002824  22DA               	addwfc	fsr2h,f,c
  5342  002826  CFDE F071          	movff	postinc2,??_dir_next
  5343  00282A  CFDD F072          	movff	postdec2,??_dir_next+1
  5344  00282E  0E01               	movlw	1
  5345  002830  2571               	addwf	??_dir_next& (0+255),w,b
  5346  002832  6F7A               	movwf	dir_next@i& (0+255),b
  5347  002834  0E00               	movlw	0
  5348  002836  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5349  002838  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5353  00283A  517A               	movf	dir_next@i& (0+255),w,b
  5354  00283C  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5355  00283E  B4D8               	btfsc	status,2,c
  5356  002840  D00C               	goto	u6010
  5357                           
  5358                           ; BSR set to: 0
  5359  002842  EE20 F00E          	lfsr	2,14
  5360  002846  516D               	movf	dir_next@dp& (0+255),w,b
  5361  002848  26D9               	addwf	fsr2l,f,c
  5362  00284A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5363  00284C  22DA               	addwfc	fsr2h,f,c
  5364  00284E  50DE               	movf	postinc2,w,c
  5365  002850  10DE               	iorwf	postinc2,w,c
  5366  002852  10DE               	iorwf	postinc2,w,c
  5367  002854  10DE               	iorwf	postinc2,w,c
  5368  002856  A4D8               	btfss	status,2,c
  5369  002858  D002               	goto	l4816
  5370  00285A                     u6010:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;ff.c: 1142:   return FR_NO_FILE;
  5374  00285A  0E04               	movlw	4
  5375  00285C  0012               	return	
  5376  00285E                     l4816:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5380  00285E  0E0F               	movlw	15
  5381  002860  157A               	andwf	dir_next@i& (0+255),w,b
  5382  002862  6F71               	movwf	??_dir_next& (0+255),b
  5383  002864  0E00               	movlw	0
  5384  002866  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5385  002868  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5386  00286A  5171               	movf	??_dir_next& (0+255),w,b
  5387  00286C  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5388  00286E  A4D8               	btfss	status,2,c
  5389  002870  D1A4               	goto	l4902
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;ff.c: 1145:   dp->sect++;
  5393  002872  EE20 F00E          	lfsr	2,14
  5394  002876  516D               	movf	dir_next@dp& (0+255),w,b
  5395  002878  26D9               	addwf	fsr2l,f,c
  5396  00287A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5397  00287C  22DA               	addwfc	fsr2h,f,c
  5398  00287E  2ADE               	incf	postinc2,f,c
  5399  002880  0E00               	movlw	0
  5400  002882  22DE               	addwfc	postinc2,f,c
  5401  002884  22DE               	addwfc	postinc2,f,c
  5402  002886  22DE               	addwfc	postinc2,f,c
  5403                           
  5404                           ;ff.c: 1147:   if (!dp->clust) {
  5405  002888  EE20 F00A          	lfsr	2,10
  5406  00288C  516D               	movf	dir_next@dp& (0+255),w,b
  5407  00288E  26D9               	addwf	fsr2l,f,c
  5408  002890  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5409  002892  22DA               	addwfc	fsr2h,f,c
  5410  002894  50DE               	movf	postinc2,w,c
  5411  002896  10DE               	iorwf	postinc2,w,c
  5412  002898  10DE               	iorwf	postinc2,w,c
  5413  00289A  10DE               	iorwf	postinc2,w,c
  5414  00289C  A4D8               	btfss	status,2,c
  5415  00289E  D011               	goto	l4826
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5419  0028A0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5420  0028A4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5421  0028A8  EE10 F008          	lfsr	1,8
  5422  0028AC  50DE               	movf	postinc2,w,c
  5423  0028AE  26E1               	addwf	fsr1l,f,c
  5424  0028B0  50DD               	movf	postdec2,w,c
  5425  0028B2  22E2               	addwfc	fsr1h,f,c
  5426  0028B4  50E6               	movf	postinc1,w,c
  5427  0028B6  5D7A               	subwf	dir_next@i& (0+255),w,b
  5428  0028B8  50E6               	movf	postinc1,w,c
  5429  0028BA  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5430  0028BC  B0D8               	btfsc	status,0,c
  5431  0028BE  D7CD               	goto	u6010
  5432  0028C0  D17C               	goto	l4902
  5433  0028C2                     l4826:
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5437  0028C2  C07A  F071         	movff	dir_next@i,??_dir_next
  5438  0028C6  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5439  0028CA  0E04               	movlw	4
  5440  0028CC  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5441  0028CE                     u6055:
  5442  0028CE  90D8               	bcf	status,0,c
  5443  0028D0  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5444  0028D2  3371               	rrcf	??_dir_next& (0+255),f,b
  5445  0028D4  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5446  0028D6  D7FB               	goto	u6055
  5447  0028D8  0EFF               	movlw	255
  5448  0028DA  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5449  0028DC  0EFF               	movlw	255
  5450  0028DE  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5451  0028E0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5452  0028E4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5453  0028E8  EE10 F002          	lfsr	1,2
  5454  0028EC  50DE               	movf	postinc2,w,c
  5455  0028EE  26E1               	addwf	fsr1l,f,c
  5456  0028F0  50DD               	movf	postdec2,w,c
  5457  0028F2  22E2               	addwfc	fsr1h,f,c
  5458  0028F4  50E7               	movf	indf1,w,c
  5459  0028F6  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5460  0028F8  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5461  0028FA  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5462  0028FC  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5463  0028FE  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5464  002900  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5465  002902  5171               	movf	??_dir_next& (0+255),w,b
  5466  002904  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5467  002906  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5468  002908  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5469  00290A  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5470  00290C  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5471  00290E  A4D8               	btfss	status,2,c
  5472  002910  D154               	goto	l4902
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5476  002912  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5477  002916  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5478  00291A  CFDE F03B          	movff	postinc2,get_fat@fs
  5479  00291E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5480  002922  EE20 F00A          	lfsr	2,10
  5481  002926  516D               	movf	dir_next@dp& (0+255),w,b
  5482  002928  26D9               	addwf	fsr2l,f,c
  5483  00292A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5484  00292C  22DA               	addwfc	fsr2h,f,c
  5485  00292E  CFDE F03D          	movff	postinc2,get_fat@clst
  5486  002932  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5487  002936  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5488  00293A  CFDE F040          	movff	postinc2,get_fat@clst+3
  5489  00293E  EC0F  F016         	call	_get_fat	;wreg free
  5490  002942  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5491  002946  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5492  00294A  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5493  00294E  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5494                           
  5495                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5496  002952  0100               	movlb	0	; () banked
  5497  002954  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5498  002956  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5499  002958  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5500  00295A  E106               	bnz	l4836
  5501  00295C  0E02               	movlw	2
  5502  00295E  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5503  002960  B0D8               	btfsc	status,0,c
  5504  002962  D002               	goto	l4836
  5505  002964                     u6070:
  5506                           
  5507                           ; BSR set to: 0
  5508  002964  0E02               	movlw	2
  5509  002966  0012               	return	
  5510  002968                     l4836:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5514  002968  297C               	incf	dir_next@clst& (0+255),w,b
  5515  00296A  E109               	bnz	l4842
  5516  00296C  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5517  00296E  E107               	bnz	l4842
  5518  002970  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5519  002972  E105               	bnz	l4842
  5520  002974  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5521  002976  A4D8               	btfss	status,2,c
  5522  002978  D002               	goto	l4842
  5523  00297A                     u6080:
  5524  00297A  0E01               	movlw	1
  5525  00297C  0012               	return	
  5526  00297E                     l4842:
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5530  00297E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5531  002982  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5532  002986  EE10 F012          	lfsr	1,18
  5533  00298A  50DE               	movf	postinc2,w,c
  5534  00298C  26E1               	addwf	fsr1l,f,c
  5535  00298E  50DD               	movf	postdec2,w,c
  5536  002990  22E2               	addwfc	fsr1h,f,c
  5537  002992  50E6               	movf	postinc1,w,c
  5538  002994  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5539  002996  50E6               	movf	postinc1,w,c
  5540  002998  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5541  00299A  50E6               	movf	postinc1,w,c
  5542  00299C  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5543  00299E  50E6               	movf	postinc1,w,c
  5544  0029A0  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5545  0029A2  A0D8               	btfss	status,0,c
  5546  0029A4  D0DB               	goto	l4898
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5550  0029A6  516F               	movf	dir_next@stretch& (0+255),w,b
  5551  0029A8  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5552  0029AA  B4D8               	btfsc	status,2,c
  5553  0029AC  D756               	goto	u6010
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5557  0029AE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5558  0029B2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5559  0029B6  CFDE F056          	movff	postinc2,create_chain@fs
  5560  0029BA  CFDD F057          	movff	postdec2,create_chain@fs+1
  5561  0029BE  EE20 F00A          	lfsr	2,10
  5562  0029C2  516D               	movf	dir_next@dp& (0+255),w,b
  5563  0029C4  26D9               	addwf	fsr2l,f,c
  5564  0029C6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5565  0029C8  22DA               	addwfc	fsr2h,f,c
  5566  0029CA  CFDE F058          	movff	postinc2,create_chain@clst
  5567  0029CE  CFDE F059          	movff	postinc2,create_chain@clst+1
  5568  0029D2  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5569  0029D6  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5570  0029DA  ECAB  F019         	call	_create_chain	;wreg free
  5571  0029DE  C056  F07C         	movff	?_create_chain,dir_next@clst
  5572  0029E2  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5573  0029E6  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5574  0029EA  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5575                           
  5576                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5577  0029EE  0100               	movlb	0	; () banked
  5578  0029F0  517C               	movf	dir_next@clst& (0+255),w,b
  5579  0029F2  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5580  0029F4  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5581  0029F6  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5582  0029F8  A4D8               	btfss	status,2,c
  5583  0029FA  D002               	goto	l4858
  5584                           
  5585                           ; BSR set to: 0
  5586  0029FC  0E07               	movlw	7
  5587  0029FE  0012               	return	
  5588  002A00                     l4858:
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5592  002A00  057C               	decf	dir_next@clst& (0+255),w,b
  5593  002A02  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5594  002A04  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5595  002A06  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5596  002A08  B4D8               	btfsc	status,2,c
  5597  002A0A  D7AC               	goto	u6070
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5601  002A0C  297C               	incf	dir_next@clst& (0+255),w,b
  5602  002A0E  E107               	bnz	l4870
  5603  002A10  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5604  002A12  E105               	bnz	l4870
  5605  002A14  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5606  002A16  E103               	bnz	l4870
  5607  002A18  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5608  002A1A  B4D8               	btfsc	status,2,c
  5609  002A1C  D7AE               	goto	u6080
  5610  002A1E                     l4870:
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5614  002A1E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5615  002A22  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5616  002A26  CFDE F01B          	movff	postinc2,sync_window@fs
  5617  002A2A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5618  002A2E  ECA0  F01F         	call	_sync_window	;wreg free
  5619  002A32  0900               	iorlw	0
  5620  002A34  A4D8               	btfss	status,2,c
  5621  002A36  D7A1               	goto	u6080
  5622                           
  5623                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5624  002A38  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5625  002A3C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5626  002A40  CFDE F071          	movff	postinc2,??_dir_next
  5627  002A44  CFDD F072          	movff	postdec2,??_dir_next+1
  5628  002A48  0E2E               	movlw	46
  5629  002A4A  0100               	movlb	0	; () banked
  5630  002A4C  2571               	addwf	??_dir_next& (0+255),w,b
  5631  002A4E  6E01               	movwf	mem_set@dst,c
  5632  002A50  0E00               	movlw	0
  5633  002A52  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5634  002A54  6E02               	movwf	mem_set@dst+1,c
  5635  002A56  0E00               	movlw	0
  5636  002A58  6E04               	movwf	mem_set@val+1,c
  5637  002A5A  0E00               	movlw	0
  5638  002A5C  6E03               	movwf	mem_set@val,c
  5639  002A5E  0E02               	movlw	2
  5640  002A60  6E06               	movwf	mem_set@cnt+1,c
  5641  002A62  0E00               	movlw	0
  5642  002A64  6E05               	movwf	mem_set@cnt,c
  5643  002A66  ECA6  F02A         	call	_mem_set	;wreg free
  5644                           
  5645                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5646  002A6A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5647  002A6E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5648  002A72  CFDE F00D          	movff	postinc2,clust2sect@fs
  5649  002A76  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5650  002A7A  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5651  002A7E  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5652  002A82  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5653  002A86  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5654  002A8A  ECCD  F026         	call	_clust2sect	;wreg free
  5655  002A8E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5656  002A92  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5657  002A96  EE10 F02A          	lfsr	1,42
  5658  002A9A  50DE               	movf	postinc2,w,c
  5659  002A9C  26E1               	addwf	fsr1l,f,c
  5660  002A9E  50DD               	movf	postdec2,w,c
  5661  002AA0  22E2               	addwfc	fsr1h,f,c
  5662  002AA2  C00D  FFE6         	movff	?_clust2sect,postinc1
  5663  002AA6  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5664  002AAA  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5665  002AAE  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5666                           
  5667                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5668  002AB2  0E00               	movlw	0
  5669  002AB4  0100               	movlb	0	; () banked
  5670  002AB6  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5671  002AB8  0E00               	movlw	0
  5672  002ABA  6F78               	movwf	dir_next@c& (0+255),b
  5673  002ABC  D02B               	goto	l4894
  5674  002ABE                     l4882:
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5678  002ABE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5679  002AC2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5680  002AC6  EE10 F004          	lfsr	1,4
  5681  002ACA  50DE               	movf	postinc2,w,c
  5682  002ACC  26E1               	addwf	fsr1l,f,c
  5683  002ACE  50DD               	movf	postdec2,w,c
  5684  002AD0  22E2               	addwfc	fsr1h,f,c
  5685  002AD2  0E01               	movlw	1
  5686  002AD4  6EE7               	movwf	indf1,c
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5690  002AD6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5691  002ADA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5692  002ADE  CFDE F01B          	movff	postinc2,sync_window@fs
  5693  002AE2  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5694  002AE6  ECA0  F01F         	call	_sync_window	;wreg free
  5695  002AEA  0900               	iorlw	0
  5696  002AEC  A4D8               	btfss	status,2,c
  5697  002AEE  D745               	goto	u6080
  5698                           
  5699                           ;ff.c: 1170:       dp->fs->winsect++;
  5700  002AF0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5701  002AF4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5702  002AF8  EE10 F02A          	lfsr	1,42
  5703  002AFC  50DE               	movf	postinc2,w,c
  5704  002AFE  26E1               	addwf	fsr1l,f,c
  5705  002B00  50DD               	movf	postdec2,w,c
  5706  002B02  22E2               	addwfc	fsr1h,f,c
  5707  002B04  2AE6               	incf	postinc1,f,c
  5708  002B06  0E00               	movlw	0
  5709  002B08  22E6               	addwfc	postinc1,f,c
  5710  002B0A  22E6               	addwfc	postinc1,f,c
  5711  002B0C  22E6               	addwfc	postinc1,f,c
  5712                           
  5713                           ;ff.c: 1171:      }
  5714  002B0E  0100               	movlb	0	; () banked
  5715  002B10  4B78               	infsnz	dir_next@c& (0+255),f,b
  5716  002B12  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5717  002B14                     l4894:
  5718                           
  5719                           ; BSR set to: 0
  5720  002B14  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5721  002B18  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5722  002B1C  EE10 F002          	lfsr	1,2
  5723  002B20  50DE               	movf	postinc2,w,c
  5724  002B22  26E1               	addwf	fsr1l,f,c
  5725  002B24  50DD               	movf	postdec2,w,c
  5726  002B26  22E2               	addwfc	fsr1h,f,c
  5727  002B28  50E7               	movf	indf1,w,c
  5728  002B2A  6F71               	movwf	??_dir_next& (0+255),b
  5729  002B2C  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5730  002B2E  5171               	movf	??_dir_next& (0+255),w,b
  5731  002B30  5D78               	subwf	dir_next@c& (0+255),w,b
  5732  002B32  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5733  002B34  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5734  002B36  A0D8               	btfss	status,0,c
  5735  002B38  D7C2               	goto	l4882
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5739  002B3A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5740  002B3E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5741  002B42  EE10 F02A          	lfsr	1,42
  5742  002B46  50DE               	movf	postinc2,w,c
  5743  002B48  26E1               	addwf	fsr1l,f,c
  5744  002B4A  50DD               	movf	postdec2,w,c
  5745  002B4C  22E2               	addwfc	fsr1h,f,c
  5746  002B4E  5178               	movf	dir_next@c& (0+255),w,b
  5747  002B50  5EE6               	subwf	postinc1,f,c
  5748  002B52  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5749  002B54  5AE6               	subwfb	postinc1,f,c
  5750  002B56  0E00               	movlw	0
  5751  002B58  5AE6               	subwfb	postinc1,f,c
  5752  002B5A  5AE6               	subwfb	postinc1,f,c
  5753  002B5C                     l4898:
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;ff.c: 1178:     dp->clust = clst;
  5757  002B5C  EE20 F00A          	lfsr	2,10
  5758  002B60  516D               	movf	dir_next@dp& (0+255),w,b
  5759  002B62  26D9               	addwf	fsr2l,f,c
  5760  002B64  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5761  002B66  22DA               	addwfc	fsr2h,f,c
  5762  002B68  C07C  FFDE         	movff	dir_next@clst,postinc2
  5763  002B6C  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5764  002B70  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5765  002B74  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5769  002B78  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5770  002B7C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5771  002B80  CFDE F00D          	movff	postinc2,clust2sect@fs
  5772  002B84  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5773  002B88  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5774  002B8C  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5775  002B90  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5776  002B94  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5777  002B98  ECCD  F026         	call	_clust2sect	;wreg free
  5778  002B9C  0100               	movlb	0	; () banked
  5779  002B9E  EE20 F00E          	lfsr	2,14
  5780  002BA2  516D               	movf	dir_next@dp& (0+255),w,b
  5781  002BA4  26D9               	addwf	fsr2l,f,c
  5782  002BA6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5783  002BA8  22DA               	addwfc	fsr2h,f,c
  5784  002BAA  C00D  FFDE         	movff	?_clust2sect,postinc2
  5785  002BAE  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5786  002BB2  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5787  002BB6  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5788  002BBA                     l4902:
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;ff.c: 1184:  dp->index = (WORD)i;
  5792  002BBA  EE20 F004          	lfsr	2,4
  5793  002BBE  516D               	movf	dir_next@dp& (0+255),w,b
  5794  002BC0  26D9               	addwf	fsr2l,f,c
  5795  002BC2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5796  002BC4  22DA               	addwfc	fsr2h,f,c
  5797  002BC6  C07A  FFDE         	movff	dir_next@i,postinc2
  5798  002BCA  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5802  002BCE  0E0F               	movlw	15
  5803  002BD0  157A               	andwf	dir_next@i& (0+255),w,b
  5804  002BD2  6F71               	movwf	??_dir_next& (0+255),b
  5805  002BD4  0E00               	movlw	0
  5806  002BD6  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5807  002BD8  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5808  002BDA  0E05               	movlw	5
  5809  002BDC                     u6175:
  5810  002BDC  90D8               	bcf	status,0,c
  5811  002BDE  3771               	rlcf	??_dir_next& (0+255),f,b
  5812  002BE0  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5813  002BE2  2EE8               	decfsz	wreg,f,c
  5814  002BE4  D7FB               	goto	u6175
  5815  002BE6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5816  002BEA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5817  002BEE  CFDE F073          	movff	postinc2,??_dir_next+2
  5818  002BF2  CFDD F074          	movff	postdec2,??_dir_next+3
  5819  002BF6  5171               	movf	??_dir_next& (0+255),w,b
  5820  002BF8  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5821  002BFA  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5822  002BFC  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5823  002BFE  0E2E               	movlw	46
  5824  002C00  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5825  002C02  0E00               	movlw	0
  5826  002C04  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5827  002C06  EE20 F012          	lfsr	2,18
  5828  002C0A  516D               	movf	dir_next@dp& (0+255),w,b
  5829  002C0C  26D9               	addwf	fsr2l,f,c
  5830  002C0E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5831  002C10  22DA               	addwfc	fsr2h,f,c
  5832  002C12  C073  FFDE         	movff	??_dir_next+2,postinc2
  5833  002C16  C074  FFDD         	movff	??_dir_next+3,postdec2
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;ff.c: 1187:  return FR_OK;
  5837  002C1A  0E00               	movlw	0
  5838  002C1C  0012               	return		;funcret
  5839  002C1E                     __end_of_dir_next:
  5840                           	opt callstack 0
  5841                           
  5842 ;; *************** function _f_mount *****************
  5843 ;; Defined at:
  5844 ;;		line 2402 in file "ff.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  fs              2   81[COMRAM] PTR struct .
  5847 ;;		 -> NULL(0), FatFs(558), 
  5848 ;;  path            2   83[COMRAM] PTR const unsigned char 
  5849 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5850 ;;  opt             1   85[COMRAM] unsigned char 
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;  vol             2   91[COMRAM] int 
  5853 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  5854 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5855 ;;  cfs             2   87[COMRAM] PTR struct .
  5856 ;;		 -> NULL(0), FatFs(558), 
  5857 ;;  res             1   86[COMRAM] enum E93
  5858 ;; Return value:  Size  Location     Type
  5859 ;;                  1    wreg      enum E4918
  5860 ;; Registers used:
  5861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5867 ;;      Params:         5       0       0       0       0       0       0       0       0
  5868 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5870 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5871 ;;Total ram usage:       12 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:   10
  5874 ;; This function calls:
  5875 ;;		_find_volume
  5876 ;;		_get_ldnumber
  5877 ;; This function is called by:
  5878 ;;		_guardar
  5879 ;; This function uses a non-reentrant model
  5880 ;;
  5881                           
  5882                           	psect	text16
  5883  004E54                     __ptext16:
  5884                           	opt callstack 0
  5885  004E54                     _f_mount:
  5886                           	opt callstack 19
  5887                           
  5888                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  5889                           
  5890                           ;incstack = 0
  5891  004E54  C054  F05A         	movff	f_mount@path,f_mount@rp
  5892  004E58  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  5893                           
  5894                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  5895  004E5C  0E5A               	movlw	low f_mount@rp
  5896  004E5E  6E01               	movwf	get_ldnumber@path,c
  5897  004E60  0E00               	movlw	high f_mount@rp
  5898  004E62  6E02               	movwf	get_ldnumber@path+1,c
  5899  004E64  ECC3  F024         	call	_get_ldnumber	;wreg free
  5900  004E68  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  5901  004E6C  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  5902                           
  5903                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  5904  004E70  AE5D               	btfss	f_mount@vol+1,7,c
  5905  004E72  D002               	goto	l5920
  5906  004E74  0E0B               	movlw	11
  5907  004E76  0012               	return	
  5908  004E78                     l5920:
  5909                           
  5910                           ;ff.c: 2416:  cfs = FatFs[vol];
  5911  004E78  90D8               	bcf	status,0,c
  5912  004E7A  345C               	rlcf	f_mount@vol,w,c
  5913  004E7C  6ED9               	movwf	fsr2l,c
  5914  004E7E  345D               	rlcf	f_mount@vol+1,w,c
  5915  004E80  6EDA               	movwf	fsr2h,c
  5916  004E82  0ED6               	movlw	low ff@FatFs
  5917  004E84  26D9               	addwf	fsr2l,f,c
  5918  004E86  0E00               	movlw	high ff@FatFs
  5919  004E88  22DA               	addwfc	fsr2h,f,c
  5920  004E8A  CFDE F058          	movff	postinc2,f_mount@cfs
  5921  004E8E  CFDD F059          	movff	postdec2,f_mount@cfs+1
  5922                           
  5923                           ;ff.c: 2418:  if (cfs) {
  5924  004E92  5058               	movf	f_mount@cfs,w,c
  5925  004E94  1059               	iorwf	f_mount@cfs+1,w,c
  5926  004E96  B4D8               	btfsc	status,2,c
  5927  004E98  D006               	goto	l5926
  5928                           
  5929                           ;ff.c: 2425:   cfs->fs_type = 0;
  5930  004E9A  C058  FFD9         	movff	f_mount@cfs,fsr2l
  5931  004E9E  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  5932  004EA2  0E00               	movlw	0
  5933  004EA4  6EDF               	movwf	indf2,c
  5934  004EA6                     l5926:
  5935                           
  5936                           ;ff.c: 2428:  if (fs) {
  5937  004EA6  5052               	movf	f_mount@fs,w,c
  5938  004EA8  1053               	iorwf	f_mount@fs+1,w,c
  5939  004EAA  B4D8               	btfsc	status,2,c
  5940  004EAC  D006               	goto	l5930
  5941                           
  5942                           ;ff.c: 2429:   fs->fs_type = 0;
  5943  004EAE  C052  FFD9         	movff	f_mount@fs,fsr2l
  5944  004EB2  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  5945  004EB6  0E00               	movlw	0
  5946  004EB8  6EDF               	movwf	indf2,c
  5947  004EBA                     l5930:
  5948                           
  5949                           ;ff.c: 2434:  FatFs[vol] = fs;
  5950  004EBA  90D8               	bcf	status,0,c
  5951  004EBC  345C               	rlcf	f_mount@vol,w,c
  5952  004EBE  6ED9               	movwf	fsr2l,c
  5953  004EC0  345D               	rlcf	f_mount@vol+1,w,c
  5954  004EC2  6EDA               	movwf	fsr2h,c
  5955  004EC4  0ED6               	movlw	low ff@FatFs
  5956  004EC6  26D9               	addwf	fsr2l,f,c
  5957  004EC8  0E00               	movlw	high ff@FatFs
  5958  004ECA  22DA               	addwfc	fsr2h,f,c
  5959  004ECC  C052  FFDE         	movff	f_mount@fs,postinc2
  5960  004ED0  C053  FFDD         	movff	f_mount@fs+1,postdec2
  5961                           
  5962                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  5963  004ED4  5052               	movf	f_mount@fs,w,c
  5964  004ED6  1053               	iorwf	f_mount@fs+1,w,c
  5965  004ED8  B4D8               	btfsc	status,2,c
  5966  004EDA  D003               	goto	u7900
  5967  004EDC  0456               	decf	f_mount@opt,w,c
  5968  004EDE  B4D8               	btfsc	status,2,c
  5969  004EE0  D002               	goto	l5940
  5970  004EE2                     u7900:
  5971  004EE2  0E00               	movlw	0
  5972  004EE4  0012               	return	
  5973  004EE6                     l5940:
  5974                           
  5975                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  5976  004EE6  0E52               	movlw	low f_mount@fs
  5977  004EE8  6E45               	movwf	find_volume@rfs,c
  5978  004EEA  0E00               	movlw	high f_mount@fs
  5979  004EEC  6E46               	movwf	find_volume@rfs+1,c
  5980  004EEE  0E54               	movlw	low f_mount@path
  5981  004EF0  6E47               	movwf	find_volume@path,c
  5982  004EF2  0E00               	movlw	high f_mount@path
  5983  004EF4  6E48               	movwf	find_volume@path+1,c
  5984  004EF6  0E00               	movlw	0
  5985  004EF8  6E49               	movwf	find_volume@wmode,c
  5986  004EFA  EC18  F004         	call	_find_volume	;wreg free
  5987  004EFE  6E57               	movwf	f_mount@res,c
  5988                           
  5989                           ;ff.c: 2439:  return res;
  5990  004F00  5057               	movf	f_mount@res,w,c
  5991  004F02  0012               	return		;funcret
  5992  004F04                     __end_of_f_mount:
  5993                           	opt callstack 0
  5994                           
  5995 ;; *************** function _find_volume *****************
  5996 ;; Defined at:
  5997 ;;		line 2203 in file "ff.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  6000 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  6001 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  6002 ;;		 -> f_open@path(2), f_mount@path(2), 
  6003 ;;  wmode           1   72[COMRAM] unsigned char 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;  br             16    0[BANK0 ] unsigned long [4]
  6006 ;;  bsect           4   49[BANK0 ] unsigned long 
  6007 ;;  fasize          4   45[BANK0 ] unsigned long 
  6008 ;;  nclst           4   40[BANK0 ] unsigned long 
  6009 ;;  tsect           4   36[BANK0 ] unsigned long 
  6010 ;;  sysect          4   28[BANK0 ] unsigned long 
  6011 ;;  szbfat          4   22[BANK0 ] unsigned long 
  6012 ;;  fs              2   56[BANK0 ] PTR struct .
  6013 ;;		 -> NULL(0), FatFs(558), 
  6014 ;;  i               2   53[BANK0 ] unsigned short 
  6015 ;;  nrsv            2   34[BANK0 ] unsigned short 
  6016 ;;  vol             2   32[BANK0 ] int 
  6017 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  6018 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  6019 ;;  fmt             1   55[BANK0 ] unsigned char 
  6020 ;;  stat            1   44[BANK0 ] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  1    wreg      enum E93
  6023 ;; Registers used:
  6024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6030 ;;      Params:         5       0       0       0       0       0       0       0       0
  6031 ;;      Locals:         0      58       0       0       0       0       0       0       0
  6032 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6033 ;;      Totals:        13      58       0       0       0       0       0       0       0
  6034 ;;Total ram usage:       71 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    9
  6037 ;; This function calls:
  6038 ;;		___lldiv
  6039 ;;		___lmul
  6040 ;;		_check_fs
  6041 ;;		_disk_initialize
  6042 ;;		_disk_status
  6043 ;;		_get_ldnumber
  6044 ;;		_move_window
  6045 ;; This function is called by:
  6046 ;;		_f_mount
  6047 ;;		_f_open
  6048 ;; This function uses a non-reentrant model
  6049 ;;
  6050                           
  6051                           	psect	text17
  6052  000830                     __ptext17:
  6053                           	opt callstack 0
  6054  000830                     _find_volume:
  6055                           	opt callstack 19
  6056                           
  6057                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  6058                           
  6059                           ;incstack = 0
  6060  000830  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6061  000834  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6062  000838  0E00               	movlw	0
  6063  00083A  6EDE               	movwf	postinc2,c
  6064  00083C  0E00               	movlw	0
  6065  00083E  6EDD               	movwf	postdec2,c
  6066                           
  6067                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6068  000840  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6069  000844  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6070  000848  ECC3  F024         	call	_get_ldnumber	;wreg free
  6071  00084C  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6072  000850  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6073                           
  6074                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6075  000854  0100               	movlb	0	; () banked
  6076  000856  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6077  000858  D002               	goto	l5518
  6078                           
  6079                           ; BSR set to: 0
  6080  00085A  0E0B               	movlw	11
  6081  00085C  0012               	return	
  6082  00085E                     l5518:
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;ff.c: 2224:  fs = FatFs[vol];
  6086  00085E  90D8               	bcf	status,0,c
  6087  000860  3580               	rlcf	find_volume@vol& (0+255),w,b
  6088  000862  6ED9               	movwf	fsr2l,c
  6089  000864  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6090  000866  6EDA               	movwf	fsr2h,c
  6091  000868  0ED6               	movlw	low ff@FatFs
  6092  00086A  26D9               	addwf	fsr2l,f,c
  6093  00086C  0E00               	movlw	high ff@FatFs
  6094  00086E  22DA               	addwfc	fsr2h,f,c
  6095  000870  CFDE F098          	movff	postinc2,find_volume@fs
  6096  000874  CFDD F099          	movff	postdec2,find_volume@fs+1
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6100  000878  5198               	movf	find_volume@fs& (0+255),w,b
  6101  00087A  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6102  00087C  A4D8               	btfss	status,2,c
  6103  00087E  D002               	goto	l5526
  6104                           
  6105                           ; BSR set to: 0
  6106  000880  0E0C               	movlw	12
  6107  000882  0012               	return	
  6108  000884                     l5526:
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;ff.c: 2228:  *rfs = fs;
  6112  000884  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6113  000888  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6114  00088C  C098  FFDE         	movff	find_volume@fs,postinc2
  6115  000890  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;ff.c: 2230:  if (fs->fs_type) {
  6119  000894  C098  FFD9         	movff	find_volume@fs,fsr2l
  6120  000898  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6121  00089C  50DF               	movf	indf2,w,c
  6122  00089E  B4D8               	btfsc	status,2,c
  6123  0008A0  D015               	goto	l5546
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6127  0008A2  EE20 F001          	lfsr	2,1
  6128  0008A6  5198               	movf	find_volume@fs& (0+255),w,b
  6129  0008A8  26D9               	addwf	fsr2l,f,c
  6130  0008AA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6131  0008AC  22DA               	addwfc	fsr2h,f,c
  6132  0008AE  50DF               	movf	indf2,w,c
  6133  0008B0  ECF3  F02A         	call	_disk_status
  6134  0008B4  0100               	movlb	0	; () banked
  6135  0008B6  6F8C               	movwf	find_volume@stat& (0+255),b
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6139  0008B8  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6140  0008BA  D008               	goto	l5546
  6141                           
  6142                           ; BSR set to: 0
  6143  0008BC  5049               	movf	find_volume@wmode,w,c
  6144  0008BE  A4D8               	btfss	status,2,c
  6145                           
  6146                           ; BSR set to: 0
  6147  0008C0  A58C               	btfss	find_volume@stat& (0+255),2,b
  6148  0008C2  D002               	goto	l5542
  6149  0008C4                     u7330:
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6153  0008C4  0E0A               	movlw	10
  6154  0008C6  0012               	return	
  6155  0008C8                     l5542:
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;ff.c: 2235:    return FR_OK;
  6159  0008C8  0E00               	movlw	0
  6160  0008CA  0012               	return	
  6161  0008CC                     l5546:
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;ff.c: 2242:  fs->fs_type = 0;
  6165  0008CC  C098  FFD9         	movff	find_volume@fs,fsr2l
  6166  0008D0  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6167  0008D4  0E00               	movlw	0
  6168  0008D6  6EDF               	movwf	indf2,c
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6172  0008D8  EE20 F001          	lfsr	2,1
  6173  0008DC  5198               	movf	find_volume@fs& (0+255),w,b
  6174  0008DE  26D9               	addwf	fsr2l,f,c
  6175  0008E0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6176  0008E2  22DA               	addwfc	fsr2h,f,c
  6177  0008E4  C080  FFDF         	movff	find_volume@vol,indf2
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6181  0008E8  EE20 F001          	lfsr	2,1
  6182  0008EC  5198               	movf	find_volume@fs& (0+255),w,b
  6183  0008EE  26D9               	addwf	fsr2l,f,c
  6184  0008F0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6185  0008F2  22DA               	addwfc	fsr2h,f,c
  6186  0008F4  50DF               	movf	indf2,w,c
  6187  0008F6  ECCB  F01D         	call	_disk_initialize
  6188  0008FA  0100               	movlb	0	; () banked
  6189  0008FC  6F8C               	movwf	find_volume@stat& (0+255),b
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;ff.c: 2245:  if (stat & 0x01)
  6193  0008FE  A18C               	btfss	find_volume@stat& (0+255),0,b
  6194  000900  D002               	goto	l5558
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;ff.c: 2246:   return FR_NOT_READY;
  6198  000902  0E03               	movlw	3
  6199  000904  0012               	return	
  6200  000906                     l5558:
  6201                           
  6202                           ; BSR set to: 0
  6203  000906  5049               	movf	find_volume@wmode,w,c
  6204  000908  B4D8               	btfsc	status,2,c
  6205  00090A  D002               	goto	l5566
  6206                           
  6207                           ; BSR set to: 0
  6208  00090C  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6209  00090E  D7DA               	goto	u7330
  6210  000910                     l5566:
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;ff.c: 2254:  bsect = 0;
  6214  000910  0E00               	movlw	0
  6215  000912  6F91               	movwf	find_volume@bsect& (0+255),b
  6216  000914  0E00               	movlw	0
  6217  000916  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6218  000918  0E00               	movlw	0
  6219  00091A  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6220  00091C  0E00               	movlw	0
  6221  00091E  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6225  000920  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6226  000924  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6227  000928  0E00               	movlw	0
  6228  00092A  6E3D               	movwf	check_fs@sect,c
  6229  00092C  0E00               	movlw	0
  6230  00092E  6E3E               	movwf	check_fs@sect+1,c
  6231  000930  0E00               	movlw	0
  6232  000932  6E3F               	movwf	check_fs@sect+2,c
  6233  000934  0E00               	movlw	0
  6234  000936  6E40               	movwf	check_fs@sect+3,c
  6235  000938  EC4D  F024         	call	_check_fs	;wreg free
  6236  00093C  0100               	movlb	0	; () banked
  6237  00093E  6F97               	movwf	find_volume@fmt& (0+255),b
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6241  000940  0597               	decf	find_volume@fmt& (0+255),w,b
  6242  000942  A4D8               	btfss	status,2,c
  6243  000944  D0AE               	goto	u7430
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6247  000946  0E00               	movlw	0
  6248  000948  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6249  00094A  0E00               	movlw	0
  6250  00094C  6F95               	movwf	find_volume@i& (0+255),b
  6251  00094E                     l5578:
  6252                           
  6253                           ; BSR set to: 0
  6254  00094E  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6255  000950  E15A               	bnz	l5594
  6256  000952  0E04               	movlw	4
  6257  000954  5D95               	subwf	find_volume@i& (0+255),w,b
  6258  000956  B0D8               	btfsc	status,0,c
  6259  000958  D056               	goto	l5594
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6263  00095A  C095  F04A         	movff	find_volume@i,??_find_volume
  6264  00095E  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6265  000962  3A4A               	swapf	??_find_volume,f,c
  6266  000964  3A4B               	swapf	??_find_volume+1,f,c
  6267  000966  0EF0               	movlw	240
  6268  000968  164B               	andwf	??_find_volume+1,f,c
  6269  00096A  504A               	movf	??_find_volume,w,c
  6270  00096C  0B0F               	andlw	15
  6271  00096E  124B               	iorwf	??_find_volume+1,f,c
  6272  000970  0EF0               	movlw	240
  6273  000972  164A               	andwf	??_find_volume,f,c
  6274  000974  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6275  000978  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6276  00097C  504A               	movf	??_find_volume,w,c
  6277  00097E  264C               	addwf	??_find_volume+2,f,c
  6278  000980  504B               	movf	??_find_volume+1,w,c
  6279  000982  224D               	addwfc	??_find_volume+3,f,c
  6280  000984  0EEC               	movlw	236
  6281  000986  244C               	addwf	??_find_volume+2,w,c
  6282  000988  6F7A               	movwf	find_volume@pt& (0+255),b
  6283  00098A  0E01               	movlw	1
  6284  00098C  204D               	addwfc	??_find_volume+3,w,c
  6285  00098E  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6289  000990  EE20 F004          	lfsr	2,4
  6290  000994  517A               	movf	find_volume@pt& (0+255),w,b
  6291  000996  26D9               	addwf	fsr2l,f,c
  6292  000998  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6293  00099A  22DA               	addwfc	fsr2h,f,c
  6294  00099C  50DF               	movf	indf2,w,c
  6295  00099E  A4D8               	btfss	status,2,c
  6296  0009A0  D009               	goto	l5588
  6297                           
  6298                           ; BSR set to: 0
  6299  0009A2  0E00               	movlw	0
  6300  0009A4  6F70               	movwf	_find_volume$922& (0+255),b
  6301  0009A6  0E00               	movlw	0
  6302  0009A8  6F71               	movwf	(_find_volume$922+1)& (0+255),b
  6303  0009AA  0E00               	movlw	0
  6304  0009AC  6F72               	movwf	(_find_volume$922+2)& (0+255),b
  6305  0009AE  0E00               	movlw	0
  6306  0009B0  6F73               	movwf	(_find_volume$922+3)& (0+255),b
  6307  0009B2  D00E               	goto	l585
  6308  0009B4                     l5588:
  6309                           
  6310                           ; BSR set to: 0
  6311  0009B4  EE20 F008          	lfsr	2,8
  6312  0009B8  517A               	movf	find_volume@pt& (0+255),w,b
  6313  0009BA  26D9               	addwf	fsr2l,f,c
  6314  0009BC  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6315  0009BE  22DA               	addwfc	fsr2h,f,c
  6316  0009C0  CFDE F070          	movff	postinc2,_find_volume$922
  6317  0009C4  CFDE F071          	movff	postinc2,_find_volume$922+1
  6318  0009C8  CFDE F072          	movff	postinc2,_find_volume$922+2
  6319  0009CC  CFDE F073          	movff	postinc2,_find_volume$922+3
  6320  0009D0                     l585:
  6321                           
  6322                           ; BSR set to: 0
  6323  0009D0  0E60               	movlw	low find_volume@br
  6324  0009D2  6E4A               	movwf	??_find_volume& (0+255),c
  6325  0009D4  0E00               	movlw	high find_volume@br
  6326  0009D6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6327  0009D8  90D8               	bcf	status,0,c
  6328  0009DA  3595               	rlcf	find_volume@i& (0+255),w,b
  6329  0009DC  6ED9               	movwf	fsr2l,c
  6330  0009DE  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6331  0009E0  6EDA               	movwf	fsr2h,c
  6332  0009E2  90D8               	bcf	status,0,c
  6333  0009E4  36D9               	rlcf	fsr2l,f,c
  6334  0009E6  36DA               	rlcf	fsr2h,f,c
  6335  0009E8  504A               	movf	??_find_volume,w,c
  6336  0009EA  26D9               	addwf	fsr2l,f,c
  6337  0009EC  504B               	movf	??_find_volume+1,w,c
  6338  0009EE  22DA               	addwfc	fsr2h,f,c
  6339  0009F0  C070  FFDE         	movff	_find_volume$922,postinc2
  6340  0009F4  C071  FFDE         	movff	_find_volume$922+1,postinc2
  6341  0009F8  C072  FFDE         	movff	_find_volume$922+2,postinc2
  6342  0009FC  C073  FFDE         	movff	_find_volume$922+3,postinc2
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;ff.c: 2260:   }
  6346  000A00  4B95               	infsnz	find_volume@i& (0+255),f,b
  6347  000A02  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6348  000A04  D7A4               	goto	l5578
  6349  000A06                     l5594:
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;ff.c: 2261:   i = 0;
  6353  000A06  0E00               	movlw	0
  6354  000A08  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6355  000A0A  0E00               	movlw	0
  6356  000A0C  6F95               	movwf	find_volume@i& (0+255),b
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;ff.c: 2262:   if (i) i--;
  6360  000A0E  5195               	movf	find_volume@i& (0+255),w,b
  6361  000A10  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6362  000A12  B4D8               	btfsc	status,2,c
  6363  000A14  D003               	goto	l5600
  6364                           
  6365                           ; BSR set to: 0
  6366  000A16  0795               	decf	find_volume@i& (0+255),f,b
  6367  000A18  A0D8               	btfss	status,0,c
  6368  000A1A  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6369  000A1C                     l5600:
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;ff.c: 2264:    bsect = br[i];
  6373  000A1C  0E60               	movlw	low find_volume@br
  6374  000A1E  6E4A               	movwf	??_find_volume& (0+255),c
  6375  000A20  0E00               	movlw	high find_volume@br
  6376  000A22  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6377  000A24  90D8               	bcf	status,0,c
  6378  000A26  3595               	rlcf	find_volume@i& (0+255),w,b
  6379  000A28  6ED9               	movwf	fsr2l,c
  6380  000A2A  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6381  000A2C  6EDA               	movwf	fsr2h,c
  6382  000A2E  90D8               	bcf	status,0,c
  6383  000A30  36D9               	rlcf	fsr2l,f,c
  6384  000A32  36DA               	rlcf	fsr2h,f,c
  6385  000A34  504A               	movf	??_find_volume,w,c
  6386  000A36  26D9               	addwf	fsr2l,f,c
  6387  000A38  504B               	movf	??_find_volume+1,w,c
  6388  000A3A  22DA               	addwfc	fsr2h,f,c
  6389  000A3C  CFDE F091          	movff	postinc2,find_volume@bsect
  6390  000A40  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6391  000A44  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6392  000A48  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6396  000A4C  5191               	movf	find_volume@bsect& (0+255),w,b
  6397  000A4E  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6398  000A50  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6399  000A52  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6400  000A54  A4D8               	btfss	status,2,c
  6401  000A56  D005               	goto	l5606
  6402                           
  6403                           ; BSR set to: 0
  6404  000A58  0E00               	movlw	0
  6405  000A5A  6F75               	movwf	(_find_volume$923+1)& (0+255),b
  6406  000A5C  0E02               	movlw	2
  6407  000A5E  6F74               	movwf	_find_volume$923& (0+255),b
  6408  000A60  D013               	goto	l5608
  6409  000A62                     l5606:
  6410                           
  6411                           ; BSR set to: 0
  6412  000A62  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6413  000A66  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6414  000A6A  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6415  000A6E  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6416  000A72  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6417  000A76  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6418  000A7A  EC4D  F024         	call	_check_fs	;wreg free
  6419  000A7E  6E4A               	movwf	??_find_volume& (0+255),c
  6420  000A80  504A               	movf	??_find_volume,w,c
  6421  000A82  0100               	movlb	0	; () banked
  6422  000A84  6F74               	movwf	_find_volume$923& (0+255),b
  6423  000A86  6B75               	clrf	(_find_volume$923+1)& (0+255),b
  6424  000A88                     l5608:
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6428  000A88  C074  F097         	movff	_find_volume$923,find_volume@fmt
  6429                           
  6430                           ; BSR set to: 0
  6431  000A8C  5197               	movf	find_volume@fmt& (0+255),w,b
  6432  000A8E  B4D8               	btfsc	status,2,c
  6433  000A90  D008               	goto	u7430
  6434                           
  6435                           ; BSR set to: 0
  6436  000A92  4B95               	infsnz	find_volume@i& (0+255),f,b
  6437  000A94  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6438  000A96  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6439  000A98  E104               	bnz	u7430
  6440  000A9A  0E04               	movlw	4
  6441  000A9C  5D95               	subwf	find_volume@i& (0+255),w,b
  6442  000A9E  A0D8               	btfss	status,0,c
  6443  000AA0  D7BD               	goto	l5600
  6444  000AA2                     u7430:
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6448  000AA2  0E03               	movlw	3
  6449  000AA4  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6450  000AA6  A4D8               	btfss	status,2,c
  6451  000AA8  D002               	goto	l5620
  6452                           
  6453                           ; BSR set to: 0
  6454  000AAA  0E01               	movlw	1
  6455  000AAC  0012               	return	
  6456  000AAE                     l5620:
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6460  000AAE  5197               	movf	find_volume@fmt& (0+255),w,b
  6461  000AB0  B4D8               	btfsc	status,2,c
  6462  000AB2  D002               	goto	l5626
  6463  000AB4                     u7450:
  6464  000AB4                     l5622:
  6465                           
  6466                           ; BSR set to: 0
  6467  000AB4  0E0D               	movlw	13
  6468  000AB6  0012               	return	
  6469  000AB8                     l5626:
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6473  000AB8  EE20 F039          	lfsr	2,57
  6474  000ABC  5198               	movf	find_volume@fs& (0+255),w,b
  6475  000ABE  26D9               	addwf	fsr2l,f,c
  6476  000AC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6477  000AC2  22DA               	addwfc	fsr2h,f,c
  6478  000AC4  50DE               	movf	postinc2,w,c
  6479  000AC6  E1F6               	bnz	l5622
  6480  000AC8  0E02               	movlw	2
  6481  000ACA  18DE               	xorwf	postinc2,w,c
  6482  000ACC  A4D8               	btfss	status,2,c
  6483  000ACE  D7F2               	goto	u7450
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6487  000AD0  EE20 F044          	lfsr	2,68
  6488  000AD4  5198               	movf	find_volume@fs& (0+255),w,b
  6489  000AD6  26D9               	addwf	fsr2l,f,c
  6490  000AD8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6491  000ADA  22DA               	addwfc	fsr2h,f,c
  6492  000ADC  CFDE F04A          	movff	postinc2,??_find_volume
  6493  000AE0  CFDD F04B          	movff	postdec2,??_find_volume+1
  6494  000AE4  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6495  000AE8  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6496  000AEC  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6497  000AEE  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6501  000AF0  518D               	movf	find_volume@fasize& (0+255),w,b
  6502  000AF2  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6503  000AF4  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6504  000AF6  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6505  000AF8  A4D8               	btfss	status,2,c
  6506  000AFA  D00E               	goto	l598
  6507                           
  6508                           ; BSR set to: 0
  6509  000AFC  EE20 F052          	lfsr	2,82
  6510  000B00  5198               	movf	find_volume@fs& (0+255),w,b
  6511  000B02  26D9               	addwf	fsr2l,f,c
  6512  000B04  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6513  000B06  22DA               	addwfc	fsr2h,f,c
  6514  000B08  CFDE F08D          	movff	postinc2,find_volume@fasize
  6515  000B0C  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6516  000B10  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6517  000B14  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6518  000B18                     l598:
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;ff.c: 2278:  fs->fsize = fasize;
  6522  000B18  EE20 F016          	lfsr	2,22
  6523  000B1C  5198               	movf	find_volume@fs& (0+255),w,b
  6524  000B1E  26D9               	addwf	fsr2l,f,c
  6525  000B20  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6526  000B22  22DA               	addwfc	fsr2h,f,c
  6527  000B24  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6528  000B28  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6529  000B2C  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6530  000B30  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6534  000B34  EE20 F03E          	lfsr	2,62
  6535  000B38  5198               	movf	find_volume@fs& (0+255),w,b
  6536  000B3A  26D9               	addwf	fsr2l,f,c
  6537  000B3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6538  000B3E  22DA               	addwfc	fsr2h,f,c
  6539  000B40  EE10 F003          	lfsr	1,3
  6540  000B44  5198               	movf	find_volume@fs& (0+255),w,b
  6541  000B46  26E1               	addwf	fsr1l,f,c
  6542  000B48  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6543  000B4A  22E2               	addwfc	fsr1h,f,c
  6544  000B4C  CFDF FFE7          	movff	indf2,indf1
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6548  000B50  EE20 F003          	lfsr	2,3
  6549  000B54  5198               	movf	find_volume@fs& (0+255),w,b
  6550  000B56  26D9               	addwf	fsr2l,f,c
  6551  000B58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6552  000B5A  22DA               	addwfc	fsr2h,f,c
  6553  000B5C  04DE               	decf	postinc2,w,c
  6554  000B5E  B4D8               	btfsc	status,2,c
  6555  000B60  D00A               	goto	l5648
  6556                           
  6557                           ; BSR set to: 0
  6558  000B62  EE20 F003          	lfsr	2,3
  6559  000B66  5198               	movf	find_volume@fs& (0+255),w,b
  6560  000B68  26D9               	addwf	fsr2l,f,c
  6561  000B6A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6562  000B6C  22DA               	addwfc	fsr2h,f,c
  6563  000B6E  0E02               	movlw	2
  6564  000B70  18DE               	xorwf	postinc2,w,c
  6565  000B72  A4D8               	btfss	status,2,c
  6566  000B74  D79F               	goto	u7450
  6567  000B76                     l5648:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6571  000B76  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6572  000B7A  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6573  000B7E  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6574  000B82  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6575  000B86  EE20 F003          	lfsr	2,3
  6576  000B8A  5198               	movf	find_volume@fs& (0+255),w,b
  6577  000B8C  26D9               	addwf	fsr2l,f,c
  6578  000B8E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6579  000B90  22DA               	addwfc	fsr2h,f,c
  6580  000B92  50DF               	movf	indf2,w,c
  6581  000B94  6E4A               	movwf	??_find_volume& (0+255),c
  6582  000B96  504A               	movf	??_find_volume,w,c
  6583  000B98  6E05               	movwf	___lmul@multiplicand,c
  6584  000B9A  6A06               	clrf	___lmul@multiplicand+1,c
  6585  000B9C  6A07               	clrf	___lmul@multiplicand+2,c
  6586  000B9E  6A08               	clrf	___lmul@multiplicand+3,c
  6587  000BA0  EC87  F029         	call	___lmul	;wreg free
  6588  000BA4  C001  F08D         	movff	?___lmul,find_volume@fasize
  6589  000BA8  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6590  000BAC  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6591  000BB0  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6592                           
  6593                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6594  000BB4  0100               	movlb	0	; () banked
  6595  000BB6  EE20 F03B          	lfsr	2,59
  6596  000BBA  5198               	movf	find_volume@fs& (0+255),w,b
  6597  000BBC  26D9               	addwf	fsr2l,f,c
  6598  000BBE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6599  000BC0  22DA               	addwfc	fsr2h,f,c
  6600  000BC2  EE10 F002          	lfsr	1,2
  6601  000BC6  5198               	movf	find_volume@fs& (0+255),w,b
  6602  000BC8  26E1               	addwf	fsr1l,f,c
  6603  000BCA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6604  000BCC  22E2               	addwfc	fsr1h,f,c
  6605  000BCE  CFDF FFE7          	movff	indf2,indf1
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6609  000BD2  EE20 F002          	lfsr	2,2
  6610  000BD6  5198               	movf	find_volume@fs& (0+255),w,b
  6611  000BD8  26D9               	addwf	fsr2l,f,c
  6612  000BDA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6613  000BDC  22DA               	addwfc	fsr2h,f,c
  6614  000BDE  50DF               	movf	indf2,w,c
  6615  000BE0  B4D8               	btfsc	status,2,c
  6616  000BE2  D768               	goto	u7450
  6617                           
  6618                           ; BSR set to: 0
  6619  000BE4  0EFF               	movlw	255
  6620  000BE6  6E4A               	movwf	??_find_volume& (0+255),c
  6621  000BE8  0EFF               	movlw	255
  6622  000BEA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6623  000BEC  EE20 F002          	lfsr	2,2
  6624  000BF0  5198               	movf	find_volume@fs& (0+255),w,b
  6625  000BF2  26D9               	addwf	fsr2l,f,c
  6626  000BF4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6627  000BF6  22DA               	addwfc	fsr2h,f,c
  6628  000BF8  50DF               	movf	indf2,w,c
  6629  000BFA  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6630  000BFC  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6631  000BFE  504A               	movf	??_find_volume,w,c
  6632  000C00  264C               	addwf	??_find_volume+2,f,c
  6633  000C02  504B               	movf	??_find_volume+1,w,c
  6634  000C04  224D               	addwfc	??_find_volume+3,f,c
  6635  000C06  EE20 F002          	lfsr	2,2
  6636  000C0A  5198               	movf	find_volume@fs& (0+255),w,b
  6637  000C0C  26D9               	addwf	fsr2l,f,c
  6638  000C0E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6639  000C10  22DA               	addwfc	fsr2h,f,c
  6640  000C12  50DF               	movf	indf2,w,c
  6641  000C14  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6642  000C16  504E               	movf	??_find_volume+4,w,c
  6643  000C18  164C               	andwf	??_find_volume+2,f,c
  6644  000C1A  0E00               	movlw	0
  6645  000C1C  164D               	andwf	??_find_volume+3,f,c
  6646  000C1E  504C               	movf	??_find_volume+2,w,c
  6647  000C20  104D               	iorwf	??_find_volume+3,w,c
  6648  000C22  A4D8               	btfss	status,2,c
  6649  000C24  D747               	goto	u7450
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6653  000C26  EE20 F03F          	lfsr	2,63
  6654  000C2A  5198               	movf	find_volume@fs& (0+255),w,b
  6655  000C2C  26D9               	addwf	fsr2l,f,c
  6656  000C2E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6657  000C30  22DA               	addwfc	fsr2h,f,c
  6658  000C32  EE10 F008          	lfsr	1,8
  6659  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  6660  000C38  26E1               	addwf	fsr1l,f,c
  6661  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6662  000C3C  22E2               	addwfc	fsr1h,f,c
  6663  000C3E  CFDE FFE6          	movff	postinc2,postinc1
  6664  000C42  CFDD FFE5          	movff	postdec2,postdec1
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6668  000C46  EE20 F008          	lfsr	2,8
  6669  000C4A  5198               	movf	find_volume@fs& (0+255),w,b
  6670  000C4C  26D9               	addwf	fsr2l,f,c
  6671  000C4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6672  000C50  22DA               	addwfc	fsr2h,f,c
  6673  000C52  CFDE F04A          	movff	postinc2,??_find_volume
  6674  000C56  CFDD F04B          	movff	postdec2,??_find_volume+1
  6675  000C5A  0E0F               	movlw	15
  6676  000C5C  164A               	andwf	??_find_volume,f,c
  6677  000C5E  0E00               	movlw	0
  6678  000C60  164B               	andwf	??_find_volume+1,f,c
  6679  000C62  504A               	movf	??_find_volume,w,c
  6680  000C64  104B               	iorwf	??_find_volume+1,w,c
  6681  000C66  A4D8               	btfss	status,2,c
  6682  000C68  D725               	goto	u7450
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6686  000C6A  EE20 F041          	lfsr	2,65
  6687  000C6E  5198               	movf	find_volume@fs& (0+255),w,b
  6688  000C70  26D9               	addwf	fsr2l,f,c
  6689  000C72  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6690  000C74  22DA               	addwfc	fsr2h,f,c
  6691  000C76  CFDE F04A          	movff	postinc2,??_find_volume
  6692  000C7A  CFDD F04B          	movff	postdec2,??_find_volume+1
  6693  000C7E  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6694  000C82  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6695  000C86  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6696  000C88  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6700  000C8A  5184               	movf	find_volume@tsect& (0+255),w,b
  6701  000C8C  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6702  000C8E  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6703  000C90  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6704  000C92  A4D8               	btfss	status,2,c
  6705  000C94  D00E               	goto	l604
  6706                           
  6707                           ; BSR set to: 0
  6708  000C96  EE20 F04E          	lfsr	2,78
  6709  000C9A  5198               	movf	find_volume@fs& (0+255),w,b
  6710  000C9C  26D9               	addwf	fsr2l,f,c
  6711  000C9E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6712  000CA0  22DA               	addwfc	fsr2h,f,c
  6713  000CA2  CFDE F084          	movff	postinc2,find_volume@tsect
  6714  000CA6  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6715  000CAA  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6716  000CAE  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6717  000CB2                     l604:
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6721  000CB2  EE20 F03C          	lfsr	2,60
  6722  000CB6  5198               	movf	find_volume@fs& (0+255),w,b
  6723  000CB8  26D9               	addwf	fsr2l,f,c
  6724  000CBA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6725  000CBC  22DA               	addwfc	fsr2h,f,c
  6726  000CBE  CFDE F082          	movff	postinc2,find_volume@nrsv
  6727  000CC2  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6731  000CC6  5182               	movf	find_volume@nrsv& (0+255),w,b
  6732  000CC8  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6733  000CCA  B4D8               	btfsc	status,2,c
  6734  000CCC  D6F3               	goto	u7450
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6738  000CCE  EE20 F008          	lfsr	2,8
  6739  000CD2  5198               	movf	find_volume@fs& (0+255),w,b
  6740  000CD4  26D9               	addwf	fsr2l,f,c
  6741  000CD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6742  000CD8  22DA               	addwfc	fsr2h,f,c
  6743  000CDA  CFDE F04A          	movff	postinc2,??_find_volume
  6744  000CDE  CFDD F04B          	movff	postdec2,??_find_volume+1
  6745  000CE2  0E04               	movlw	4
  6746  000CE4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6747  000CE6                     u7555:
  6748  000CE6  90D8               	bcf	status,0,c
  6749  000CE8  324B               	rrcf	??_find_volume+1,f,c
  6750  000CEA  324A               	rrcf	??_find_volume,f,c
  6751  000CEC  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6752  000CEE  D7FB               	goto	u7555
  6753  000CF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  6754  000CF2  244A               	addwf	??_find_volume,w,c
  6755  000CF4  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6756  000CF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6757  000CF8  204B               	addwfc	??_find_volume+1,w,c
  6758  000CFA  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6759  000CFC  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6760  000CFE  B0D8               	btfsc	status,0,c
  6761  000D00  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6762  000D02  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6763  000D04  518D               	movf	find_volume@fasize& (0+255),w,b
  6764  000D06  244D               	addwf	??_find_volume+3,w,c
  6765  000D08  6F7C               	movwf	find_volume@sysect& (0+255),b
  6766  000D0A  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6767  000D0C  204E               	addwfc	??_find_volume+4,w,c
  6768  000D0E  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6769  000D10  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6770  000D12  204F               	addwfc	??_find_volume+5,w,c
  6771  000D14  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6772  000D16  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6773  000D18  2050               	addwfc	??_find_volume+6,w,c
  6774  000D1A  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6778  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  6779  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6780  000D20  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6781  000D22  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6782  000D24  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6783  000D26  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6784  000D28  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6785  000D2A  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6786  000D2C  A0D8               	btfss	status,0,c
  6787  000D2E  D6C2               	goto	u7450
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6791  000D30  517C               	movf	find_volume@sysect& (0+255),w,b
  6792  000D32  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6793  000D34  6E01               	movwf	___lldiv@dividend,c
  6794  000D36  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6795  000D38  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6796  000D3A  6E02               	movwf	___lldiv@dividend+1,c
  6797  000D3C  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6798  000D3E  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6799  000D40  6E03               	movwf	___lldiv@dividend+2,c
  6800  000D42  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6801  000D44  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6802  000D46  6E04               	movwf	___lldiv@dividend+3,c
  6803  000D48  EE20 F002          	lfsr	2,2
  6804  000D4C  5198               	movf	find_volume@fs& (0+255),w,b
  6805  000D4E  26D9               	addwf	fsr2l,f,c
  6806  000D50  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6807  000D52  22DA               	addwfc	fsr2h,f,c
  6808  000D54  50DF               	movf	indf2,w,c
  6809  000D56  6E4A               	movwf	??_find_volume& (0+255),c
  6810  000D58  504A               	movf	??_find_volume,w,c
  6811  000D5A  6E05               	movwf	___lldiv@divisor,c
  6812  000D5C  6A06               	clrf	___lldiv@divisor+1,c
  6813  000D5E  6A07               	clrf	___lldiv@divisor+2,c
  6814  000D60  6A08               	clrf	___lldiv@divisor+3,c
  6815  000D62  EC1F  F028         	call	___lldiv	;wreg free
  6816  000D66  C001  F088         	movff	?___lldiv,find_volume@nclst
  6817  000D6A  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6818  000D6E  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6819  000D72  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6820                           
  6821                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6822  000D76  0100               	movlb	0	; () banked
  6823  000D78  5188               	movf	find_volume@nclst& (0+255),w,b
  6824  000D7A  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  6825  000D7C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6826  000D7E  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  6827  000D80  B4D8               	btfsc	status,2,c
  6828  000D82  D698               	goto	u7450
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;ff.c: 2304:  fmt = 1;
  6832  000D84  0E01               	movlw	1
  6833  000D86  6F97               	movwf	find_volume@fmt& (0+255),b
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  6837  000D88  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6838  000D8A  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6839  000D8C  E106               	bnz	u7580
  6840  000D8E  0EF6               	movlw	246
  6841  000D90  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6842  000D92  0E0F               	movlw	15
  6843  000D94  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6844  000D96  A0D8               	btfss	status,0,c
  6845  000D98  D002               	goto	l5702
  6846  000D9A                     u7580:
  6847                           
  6848                           ; BSR set to: 0
  6849  000D9A  0E02               	movlw	2
  6850  000D9C  6F97               	movwf	find_volume@fmt& (0+255),b
  6851  000D9E                     l5702:
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  6855  000D9E  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6856  000DA0  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6857  000DA2  E106               	bnz	u7590
  6858  000DA4  0EF6               	movlw	246
  6859  000DA6  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6860  000DA8  0EFF               	movlw	255
  6861  000DAA  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6862  000DAC  A0D8               	btfss	status,0,c
  6863  000DAE  D002               	goto	l5706
  6864  000DB0                     u7590:
  6865                           
  6866                           ; BSR set to: 0
  6867  000DB0  0E03               	movlw	3
  6868  000DB2  6F97               	movwf	find_volume@fmt& (0+255),b
  6869  000DB4                     l5706:
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  6873  000DB4  0E02               	movlw	2
  6874  000DB6  2588               	addwf	find_volume@nclst& (0+255),w,b
  6875  000DB8  6E4A               	movwf	??_find_volume& (0+255),c
  6876  000DBA  0E00               	movlw	0
  6877  000DBC  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  6878  000DBE  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6879  000DC0  0E00               	movlw	0
  6880  000DC2  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  6881  000DC4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6882  000DC6  0E00               	movlw	0
  6883  000DC8  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  6884  000DCA  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6885  000DCC  EE20 F012          	lfsr	2,18
  6886  000DD0  5198               	movf	find_volume@fs& (0+255),w,b
  6887  000DD2  26D9               	addwf	fsr2l,f,c
  6888  000DD4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6889  000DD6  22DA               	addwfc	fsr2h,f,c
  6890  000DD8  C04A  FFDE         	movff	??_find_volume,postinc2
  6891  000DDC  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6892  000DE0  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6893  000DE4  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6894                           
  6895                           ; BSR set to: 0
  6896                           ;ff.c: 2310:  fs->volbase = bsect;
  6897  000DE8  EE20 F01A          	lfsr	2,26
  6898  000DEC  5198               	movf	find_volume@fs& (0+255),w,b
  6899  000DEE  26D9               	addwf	fsr2l,f,c
  6900  000DF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6901  000DF2  22DA               	addwfc	fsr2h,f,c
  6902  000DF4  C091  FFDE         	movff	find_volume@bsect,postinc2
  6903  000DF8  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  6904  000DFC  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  6905  000E00  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  6909  000E04  5182               	movf	find_volume@nrsv& (0+255),w,b
  6910  000E06  2591               	addwf	find_volume@bsect& (0+255),w,b
  6911  000E08  6E4A               	movwf	??_find_volume& (0+255),c
  6912  000E0A  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6913  000E0C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6914  000E0E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6915  000E10  0E00               	movlw	0
  6916  000E12  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6917  000E14  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6918  000E16  0E00               	movlw	0
  6919  000E18  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6920  000E1A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6921  000E1C  EE20 F01E          	lfsr	2,30
  6922  000E20  5198               	movf	find_volume@fs& (0+255),w,b
  6923  000E22  26D9               	addwf	fsr2l,f,c
  6924  000E24  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6925  000E26  22DA               	addwfc	fsr2h,f,c
  6926  000E28  C04A  FFDE         	movff	??_find_volume,postinc2
  6927  000E2C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6928  000E30  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6929  000E34  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;ff.c: 2312:  fs->database = bsect + sysect;
  6933  000E38  517C               	movf	find_volume@sysect& (0+255),w,b
  6934  000E3A  2591               	addwf	find_volume@bsect& (0+255),w,b
  6935  000E3C  6E4A               	movwf	??_find_volume& (0+255),c
  6936  000E3E  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6937  000E40  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6938  000E42  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6939  000E44  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6940  000E46  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6941  000E48  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6942  000E4A  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6943  000E4C  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6944  000E4E  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6945  000E50  EE20 F026          	lfsr	2,38
  6946  000E54  5198               	movf	find_volume@fs& (0+255),w,b
  6947  000E56  26D9               	addwf	fsr2l,f,c
  6948  000E58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6949  000E5A  22DA               	addwfc	fsr2h,f,c
  6950  000E5C  C04A  FFDE         	movff	??_find_volume,postinc2
  6951  000E60  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6952  000E64  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6953  000E68  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;ff.c: 2313:  if (fmt == 3) {
  6957  000E6C  0E03               	movlw	3
  6958  000E6E  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6959  000E70  A4D8               	btfss	status,2,c
  6960  000E72  D03D               	goto	l5726
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  6964  000E74  EE20 F008          	lfsr	2,8
  6965  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  6966  000E7A  26D9               	addwf	fsr2l,f,c
  6967  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6968  000E7E  22DA               	addwfc	fsr2h,f,c
  6969  000E80  50DE               	movf	postinc2,w,c
  6970  000E82  10DE               	iorwf	postinc2,w,c
  6971  000E84  A4D8               	btfss	status,2,c
  6972  000E86  D616               	goto	u7450
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  6976  000E88  EE20 F05A          	lfsr	2,90
  6977  000E8C  5198               	movf	find_volume@fs& (0+255),w,b
  6978  000E8E  26D9               	addwf	fsr2l,f,c
  6979  000E90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6980  000E92  22DA               	addwfc	fsr2h,f,c
  6981  000E94  EE10 F022          	lfsr	1,34
  6982  000E98  5198               	movf	find_volume@fs& (0+255),w,b
  6983  000E9A  26E1               	addwf	fsr1l,f,c
  6984  000E9C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6985  000E9E  22E2               	addwfc	fsr1h,f,c
  6986  000EA0  CFDE FFE6          	movff	postinc2,postinc1
  6987  000EA4  CFDE FFE6          	movff	postinc2,postinc1
  6988  000EA8  CFDE FFE6          	movff	postinc2,postinc1
  6989  000EAC  CFDE FFE6          	movff	postinc2,postinc1
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  6993  000EB0  EE20 F012          	lfsr	2,18
  6994  000EB4  5198               	movf	find_volume@fs& (0+255),w,b
  6995  000EB6  26D9               	addwf	fsr2l,f,c
  6996  000EB8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6997  000EBA  22DA               	addwfc	fsr2h,f,c
  6998  000EBC  CFDE F04A          	movff	postinc2,??_find_volume
  6999  000EC0  CFDE F04B          	movff	postinc2,??_find_volume+1
  7000  000EC4  CFDE F04C          	movff	postinc2,??_find_volume+2
  7001  000EC8  CFDE F04D          	movff	postinc2,??_find_volume+3
  7002  000ECC  0E02               	movlw	2
  7003  000ECE                     u7625:
  7004  000ECE  90D8               	bcf	status,0,c
  7005  000ED0  364A               	rlcf	??_find_volume,f,c
  7006  000ED2  364B               	rlcf	??_find_volume+1,f,c
  7007  000ED4  364C               	rlcf	??_find_volume+2,f,c
  7008  000ED6  364D               	rlcf	??_find_volume+3,f,c
  7009  000ED8  2EE8               	decfsz	wreg,f,c
  7010  000EDA  D7F9               	goto	u7625
  7011  000EDC  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  7012  000EE0  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  7013  000EE4  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  7014  000EE8  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  7015                           
  7016                           ;ff.c: 2317:  } else {
  7017  000EEC  D091               	goto	l612
  7018  000EEE                     l5726:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  7022  000EEE  EE20 F008          	lfsr	2,8
  7023  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  7024  000EF4  26D9               	addwf	fsr2l,f,c
  7025  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7026  000EF8  22DA               	addwfc	fsr2h,f,c
  7027  000EFA  50DE               	movf	postinc2,w,c
  7028  000EFC  10DE               	iorwf	postinc2,w,c
  7029  000EFE  B4D8               	btfsc	status,2,c
  7030  000F00  D5D9               	goto	u7450
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  7034  000F02  EE20 F01E          	lfsr	2,30
  7035  000F06  5198               	movf	find_volume@fs& (0+255),w,b
  7036  000F08  26D9               	addwf	fsr2l,f,c
  7037  000F0A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7038  000F0C  22DA               	addwfc	fsr2h,f,c
  7039  000F0E  CFDE F04A          	movff	postinc2,??_find_volume
  7040  000F12  CFDE F04B          	movff	postinc2,??_find_volume+1
  7041  000F16  CFDE F04C          	movff	postinc2,??_find_volume+2
  7042  000F1A  CFDE F04D          	movff	postinc2,??_find_volume+3
  7043  000F1E  518D               	movf	find_volume@fasize& (0+255),w,b
  7044  000F20  244A               	addwf	??_find_volume,w,c
  7045  000F22  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7046  000F24  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7047  000F26  204B               	addwfc	??_find_volume+1,w,c
  7048  000F28  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7049  000F2A  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7050  000F2C  204C               	addwfc	??_find_volume+2,w,c
  7051  000F2E  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7052  000F30  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7053  000F32  204D               	addwfc	??_find_volume+3,w,c
  7054  000F34  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7055  000F36  EE20 F022          	lfsr	2,34
  7056  000F3A  5198               	movf	find_volume@fs& (0+255),w,b
  7057  000F3C  26D9               	addwf	fsr2l,f,c
  7058  000F3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7059  000F40  22DA               	addwfc	fsr2h,f,c
  7060  000F42  C04E  FFDE         	movff	??_find_volume+4,postinc2
  7061  000F46  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7062  000F4A  C050  FFDE         	movff	??_find_volume+6,postinc2
  7063  000F4E  C051  FFDE         	movff	??_find_volume+7,postinc2
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7067  000F52  0E02               	movlw	2
  7068  000F54  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7069  000F56  B4D8               	btfsc	status,2,c
  7070  000F58  D044               	goto	l5738
  7071                           
  7072                           ; BSR set to: 0
  7073  000F5A  EE20 F012          	lfsr	2,18
  7074  000F5E  5198               	movf	find_volume@fs& (0+255),w,b
  7075  000F60  26D9               	addwf	fsr2l,f,c
  7076  000F62  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7077  000F64  22DA               	addwfc	fsr2h,f,c
  7078  000F66  CFDE F04A          	movff	postinc2,??_find_volume
  7079  000F6A  CFDE F04B          	movff	postinc2,??_find_volume+1
  7080  000F6E  CFDE F04C          	movff	postinc2,??_find_volume+2
  7081  000F72  CFDE F04D          	movff	postinc2,??_find_volume+3
  7082  000F76  0E01               	movlw	1
  7083  000F78  144A               	andwf	??_find_volume,w,c
  7084  000F7A  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7085  000F7C  0E00               	movlw	0
  7086  000F7E  144B               	andwf	??_find_volume+1,w,c
  7087  000F80  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7088  000F82  0E00               	movlw	0
  7089  000F84  144C               	andwf	??_find_volume+2,w,c
  7090  000F86  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7091  000F88  0E00               	movlw	0
  7092  000F8A  144D               	andwf	??_find_volume+3,w,c
  7093  000F8C  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7094  000F8E  EE20 F012          	lfsr	2,18
  7095  000F92  5198               	movf	find_volume@fs& (0+255),w,b
  7096  000F94  26D9               	addwf	fsr2l,f,c
  7097  000F96  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7098  000F98  22DA               	addwfc	fsr2h,f,c
  7099  000F9A  CFDE F001          	movff	postinc2,___lmul@multiplier
  7100  000F9E  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7101  000FA2  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7102  000FA6  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7103  000FAA  0E03               	movlw	3
  7104  000FAC  6E05               	movwf	___lmul@multiplicand,c
  7105  000FAE  0E00               	movlw	0
  7106  000FB0  6E06               	movwf	___lmul@multiplicand+1,c
  7107  000FB2  0E00               	movlw	0
  7108  000FB4  6E07               	movwf	___lmul@multiplicand+2,c
  7109  000FB6  0E00               	movlw	0
  7110  000FB8  6E08               	movwf	___lmul@multiplicand+3,c
  7111  000FBA  EC87  F029         	call	___lmul	;wreg free
  7112  000FBE  90D8               	bcf	status,0,c
  7113  000FC0  3204               	rrcf	?___lmul+3,f,c
  7114  000FC2  3203               	rrcf	?___lmul+2,f,c
  7115  000FC4  3202               	rrcf	?___lmul+1,f,c
  7116  000FC6  3201               	rrcf	?___lmul,f,c
  7117  000FC8  504E               	movf	??_find_volume+4,w,c
  7118  000FCA  2401               	addwf	?___lmul,w,c
  7119  000FCC  0100               	movlb	0	; () banked
  7120  000FCE  6F76               	movwf	find_volume@szbfat& (0+255),b
  7121  000FD0  504F               	movf	??_find_volume+5,w,c
  7122  000FD2  2002               	addwfc	?___lmul+1,w,c
  7123  000FD4  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7124  000FD6  5050               	movf	??_find_volume+6,w,c
  7125  000FD8  2003               	addwfc	?___lmul+2,w,c
  7126  000FDA  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7127  000FDC  5051               	movf	??_find_volume+7,w,c
  7128  000FDE  2004               	addwfc	?___lmul+3,w,c
  7129  000FE0  D016               	goto	L6
  7130  000FE2                     l5738:
  7131                           
  7132                           ; BSR set to: 0
  7133  000FE2  EE20 F012          	lfsr	2,18
  7134  000FE6  5198               	movf	find_volume@fs& (0+255),w,b
  7135  000FE8  26D9               	addwf	fsr2l,f,c
  7136  000FEA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7137  000FEC  22DA               	addwfc	fsr2h,f,c
  7138  000FEE  CFDE F04A          	movff	postinc2,??_find_volume
  7139  000FF2  CFDE F04B          	movff	postinc2,??_find_volume+1
  7140  000FF6  CFDE F04C          	movff	postinc2,??_find_volume+2
  7141  000FFA  CFDE F04D          	movff	postinc2,??_find_volume+3
  7142  000FFE  90D8               	bcf	status,0,c
  7143  001000  344A               	rlcf	??_find_volume,w,c
  7144  001002  6F76               	movwf	find_volume@szbfat& (0+255),b
  7145  001004  344B               	rlcf	??_find_volume+1,w,c
  7146  001006  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7147  001008  344C               	rlcf	??_find_volume+2,w,c
  7148  00100A  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7149  00100C  344D               	rlcf	??_find_volume+3,w,c
  7150  00100E                     L6:
  7151  00100E  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7152  001010                     l612:
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7156  001010  0EFF               	movlw	255
  7157  001012  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7158  001014  6E4A               	movwf	??_find_volume& (0+255),c
  7159  001016  0E01               	movlw	1
  7160  001018  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7161  00101A  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7162  00101C  0E00               	movlw	0
  7163  00101E  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7164  001020  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7165  001022  0E00               	movlw	0
  7166  001024  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7167  001026  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7168  001028  0E0A               	movlw	10
  7169  00102A  D005               	goto	u7650
  7170  00102C                     u7655:
  7171  00102C  90D8               	bcf	status,0,c
  7172  00102E  324D               	rrcf	??_find_volume+3,f,c
  7173  001030  324C               	rrcf	??_find_volume+2,f,c
  7174  001032  324B               	rrcf	??_find_volume+1,f,c
  7175  001034  324A               	rrcf	??_find_volume,f,c
  7176  001036                     u7650:
  7177  001036  2EE8               	decfsz	wreg,f,c
  7178  001038  D7F9               	goto	u7655
  7179  00103A  EE20 F016          	lfsr	2,22
  7180  00103E  5198               	movf	find_volume@fs& (0+255),w,b
  7181  001040  26D9               	addwf	fsr2l,f,c
  7182  001042  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7183  001044  22DA               	addwfc	fsr2h,f,c
  7184  001046  504A               	movf	??_find_volume,w,c
  7185  001048  5CDE               	subwf	postinc2,w,c
  7186  00104A  504B               	movf	??_find_volume+1,w,c
  7187  00104C  58DE               	subwfb	postinc2,w,c
  7188  00104E  504C               	movf	??_find_volume+2,w,c
  7189  001050  58DE               	subwfb	postinc2,w,c
  7190  001052  504D               	movf	??_find_volume+3,w,c
  7191  001054  58DE               	subwfb	postinc2,w,c
  7192  001056  A0D8               	btfss	status,0,c
  7193  001058  D52D               	goto	u7450
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7197  00105A  EE20 F00E          	lfsr	2,14
  7198  00105E  5198               	movf	find_volume@fs& (0+255),w,b
  7199  001060  26D9               	addwf	fsr2l,f,c
  7200  001062  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7201  001064  22DA               	addwfc	fsr2h,f,c
  7202  001066  0EFF               	movlw	255
  7203  001068  6EDE               	movwf	postinc2,c
  7204  00106A  0EFF               	movlw	255
  7205  00106C  6EDE               	movwf	postinc2,c
  7206  00106E  0EFF               	movlw	255
  7207  001070  6EDE               	movwf	postinc2,c
  7208  001072  0EFF               	movlw	255
  7209  001074  6EDD               	movwf	postdec2,c
  7210  001076  52DD               	movf	postdec2,f,c
  7211  001078  52DD               	movf	postdec2,f,c
  7212  00107A  EE10 F00A          	lfsr	1,10
  7213  00107E  5198               	movf	find_volume@fs& (0+255),w,b
  7214  001080  26E1               	addwf	fsr1l,f,c
  7215  001082  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7216  001084  22E2               	addwfc	fsr1h,f,c
  7217  001086  CFDE FFE6          	movff	postinc2,postinc1
  7218  00108A  CFDE FFE6          	movff	postinc2,postinc1
  7219  00108E  CFDE FFE6          	movff	postinc2,postinc1
  7220  001092  CFDE FFE6          	movff	postinc2,postinc1
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7224  001096  EE20 F005          	lfsr	2,5
  7225  00109A  5198               	movf	find_volume@fs& (0+255),w,b
  7226  00109C  26D9               	addwf	fsr2l,f,c
  7227  00109E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7228  0010A0  22DA               	addwfc	fsr2h,f,c
  7229  0010A2  0E80               	movlw	128
  7230  0010A4  6EDF               	movwf	indf2,c
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;ff.c: 2333:  if (fmt == 3
  7234  0010A6  0E03               	movlw	3
  7235  0010A8  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7236  0010AA  A4D8               	btfss	status,2,c
  7237  0010AC  D083               	goto	l5762
  7238                           
  7239                           ; BSR set to: 0
  7240  0010AE  EE20 F05E          	lfsr	2,94
  7241  0010B2  5198               	movf	find_volume@fs& (0+255),w,b
  7242  0010B4  26D9               	addwf	fsr2l,f,c
  7243  0010B6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7244  0010B8  22DA               	addwfc	fsr2h,f,c
  7245  0010BA  04DE               	decf	postinc2,w,c
  7246  0010BC  10DE               	iorwf	postinc2,w,c
  7247  0010BE  A4D8               	btfss	status,2,c
  7248  0010C0  D079               	goto	l5762
  7249                           
  7250                           ; BSR set to: 0
  7251  0010C2  C098  F030         	movff	find_volume@fs,move_window@fs
  7252  0010C6  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7253  0010CA  0E01               	movlw	1
  7254  0010CC  2591               	addwf	find_volume@bsect& (0+255),w,b
  7255  0010CE  6E32               	movwf	move_window@sector,c
  7256  0010D0  0E00               	movlw	0
  7257  0010D2  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7258  0010D4  6E33               	movwf	move_window@sector+1,c
  7259  0010D6  0E00               	movlw	0
  7260  0010D8  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7261  0010DA  6E34               	movwf	move_window@sector+2,c
  7262  0010DC  0E00               	movlw	0
  7263  0010DE  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7264  0010E0  6E35               	movwf	move_window@sector+3,c
  7265  0010E2  EC82  F027         	call	_move_window	;wreg free
  7266  0010E6  0900               	iorlw	0
  7267  0010E8  A4D8               	btfss	status,2,c
  7268  0010EA  D064               	goto	l5762
  7269                           
  7270                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7271  0010EC  0100               	movlb	0	; () banked
  7272  0010EE  EE20 F005          	lfsr	2,5
  7273  0010F2  5198               	movf	find_volume@fs& (0+255),w,b
  7274  0010F4  26D9               	addwf	fsr2l,f,c
  7275  0010F6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7276  0010F8  22DA               	addwfc	fsr2h,f,c
  7277  0010FA  0E00               	movlw	0
  7278  0010FC  6EDF               	movwf	indf2,c
  7279                           
  7280                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7281  0010FE  EE22 F02C          	lfsr	2,556
  7282  001102  5198               	movf	find_volume@fs& (0+255),w,b
  7283  001104  26D9               	addwf	fsr2l,f,c
  7284  001106  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7285  001108  22DA               	addwfc	fsr2h,f,c
  7286  00110A  0E55               	movlw	85
  7287  00110C  18DE               	xorwf	postinc2,w,c
  7288  00110E  E152               	bnz	l5762
  7289  001110  0EAA               	movlw	170
  7290  001112  18DE               	xorwf	postinc2,w,c
  7291  001114  A4D8               	btfss	status,2,c
  7292  001116  D04E               	goto	l5762
  7293                           
  7294                           ; BSR set to: 0
  7295  001118  EE20 F02E          	lfsr	2,46
  7296  00111C  5198               	movf	find_volume@fs& (0+255),w,b
  7297  00111E  26D9               	addwf	fsr2l,f,c
  7298  001120  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7299  001122  22DA               	addwfc	fsr2h,f,c
  7300  001124  0E52               	movlw	82
  7301  001126  18DE               	xorwf	postinc2,w,c
  7302  001128  E145               	bnz	l5762
  7303  00112A  0E52               	movlw	82
  7304  00112C  18DE               	xorwf	postinc2,w,c
  7305  00112E  E142               	bnz	l5762
  7306  001130  0E61               	movlw	97
  7307  001132  18DE               	xorwf	postinc2,w,c
  7308  001134  E13F               	bnz	l5762
  7309  001136  0E41               	movlw	65
  7310  001138  18DE               	xorwf	postinc2,w,c
  7311  00113A  A4D8               	btfss	status,2,c
  7312  00113C  D03B               	goto	l5762
  7313                           
  7314                           ; BSR set to: 0
  7315  00113E  EE22 F012          	lfsr	2,530
  7316  001142  5198               	movf	find_volume@fs& (0+255),w,b
  7317  001144  26D9               	addwf	fsr2l,f,c
  7318  001146  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7319  001148  22DA               	addwfc	fsr2h,f,c
  7320  00114A  0E72               	movlw	114
  7321  00114C  18DE               	xorwf	postinc2,w,c
  7322  00114E  E132               	bnz	l5762
  7323  001150  0E72               	movlw	114
  7324  001152  18DE               	xorwf	postinc2,w,c
  7325  001154  E12F               	bnz	l5762
  7326  001156  0E41               	movlw	65
  7327  001158  18DE               	xorwf	postinc2,w,c
  7328  00115A  E12C               	bnz	l5762
  7329  00115C  0E61               	movlw	97
  7330  00115E  18DE               	xorwf	postinc2,w,c
  7331  001160  A4D8               	btfss	status,2,c
  7332  001162  D028               	goto	l5762
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7336  001164  EE22 F016          	lfsr	2,534
  7337  001168  5198               	movf	find_volume@fs& (0+255),w,b
  7338  00116A  26D9               	addwf	fsr2l,f,c
  7339  00116C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7340  00116E  22DA               	addwfc	fsr2h,f,c
  7341  001170  EE10 F00E          	lfsr	1,14
  7342  001174  5198               	movf	find_volume@fs& (0+255),w,b
  7343  001176  26E1               	addwf	fsr1l,f,c
  7344  001178  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7345  00117A  22E2               	addwfc	fsr1h,f,c
  7346  00117C  CFDE FFE6          	movff	postinc2,postinc1
  7347  001180  CFDE FFE6          	movff	postinc2,postinc1
  7348  001184  CFDE FFE6          	movff	postinc2,postinc1
  7349  001188  CFDE FFE6          	movff	postinc2,postinc1
  7350                           
  7351                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7352  00118C  EE22 F01A          	lfsr	2,538
  7353  001190  5198               	movf	find_volume@fs& (0+255),w,b
  7354  001192  26D9               	addwf	fsr2l,f,c
  7355  001194  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7356  001196  22DA               	addwfc	fsr2h,f,c
  7357  001198  EE10 F00A          	lfsr	1,10
  7358  00119C  5198               	movf	find_volume@fs& (0+255),w,b
  7359  00119E  26E1               	addwf	fsr1l,f,c
  7360  0011A0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7361  0011A2  22E2               	addwfc	fsr1h,f,c
  7362  0011A4  CFDE FFE6          	movff	postinc2,postinc1
  7363  0011A8  CFDE FFE6          	movff	postinc2,postinc1
  7364  0011AC  CFDE FFE6          	movff	postinc2,postinc1
  7365  0011B0  CFDE FFE6          	movff	postinc2,postinc1
  7366  0011B4                     l5762:
  7367                           
  7368                           ;ff.c: 2352:  fs->fs_type = fmt;
  7369  0011B4  C098  FFD9         	movff	find_volume@fs,fsr2l
  7370  0011B8  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7371  0011BC  C097  FFDF         	movff	find_volume@fmt,indf2
  7372                           
  7373                           ;ff.c: 2353:  fs->id = ++Fsid;
  7374  0011C0  0100               	movlb	0	; () banked
  7375  0011C2  4BD4               	infsnz	_Fsid& (0+255),f,b
  7376  0011C4  2BD5               	incf	(_Fsid+1)& (0+255),f,b
  7377  0011C6  EE20 F006          	lfsr	2,6
  7378  0011CA  5198               	movf	find_volume@fs& (0+255),w,b
  7379  0011CC  26D9               	addwf	fsr2l,f,c
  7380  0011CE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7381  0011D0  22DA               	addwfc	fsr2h,f,c
  7382  0011D2  C0D4  FFDE         	movff	_Fsid,postinc2
  7383  0011D6  C0D5  FFDD         	movff	_Fsid+1,postdec2
  7384  0011DA  EF64  F004         	goto	l5542
  7385  0011DE                     __end_of_find_volume:
  7386                           	opt callstack 0
  7387                           
  7388 ;; *************** function _get_ldnumber *****************
  7389 ;; Defined at:
  7390 ;;		line 2114 in file "ff.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7393 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7396 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7397 ;;  i               2   10[COMRAM] unsigned short 
  7398 ;;  vol             2    8[COMRAM] int 
  7399 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7400 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  2    0[COMRAM] int 
  7403 ;; Registers used:
  7404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7410 ;;      Params:         2       0       0       0       0       0       0       0       0
  7411 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7412 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7413 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7414 ;;Total ram usage:       14 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; This function calls:
  7417 ;;		Nothing
  7418 ;; This function is called by:
  7419 ;;		_find_volume
  7420 ;;		_f_mount
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           	psect	text18
  7425  004986                     __ptext18:
  7426                           	opt callstack 0
  7427  004986                     _get_ldnumber:
  7428                           	opt callstack 27
  7429                           
  7430                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;incstack = 0
  7434  004986  6809               	setf	get_ldnumber@vol,c
  7435  004988  680A               	setf	get_ldnumber@vol+1,c
  7436                           
  7437                           ;ff.c: 2129:  if (*path) {
  7438  00498A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7439  00498E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7440  004992  50DE               	movf	postinc2,w,c
  7441  004994  10DE               	iorwf	postinc2,w,c
  7442  004996  B4D8               	btfsc	status,2,c
  7443  004998  D05B               	goto	l5318
  7444                           
  7445                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7446  00499A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7447  00499E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7448  0049A2  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7449  0049A6  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7450  0049AA  D002               	goto	l5292
  7451  0049AC                     l5290:
  7452  0049AC  4A0D               	infsnz	get_ldnumber@tt,f,c
  7453  0049AE  2A0E               	incf	get_ldnumber@tt+1,f,c
  7454  0049B0                     l5292:
  7455  0049B0  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7456  0049B4  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7457  0049B8                     	if	0	;tblptru may be non-zero
  7458  0049B8                     	endif
  7459  0049B8                     	if	0	;tblptru may be non-zero
  7460  0049B8                     	endif
  7461  0049B8  0E20               	movlw	32
  7462  0049BA  0008               	tblrd		*
  7463  0049BC  64F5               	cpfsgt	tablat,c
  7464  0049BE  D009               	goto	u6920
  7465  0049C0  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7466  0049C4  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7467  0049C8                     	if	0	;tblptru may be non-zero
  7468  0049C8                     	endif
  7469  0049C8                     	if	0	;tblptru may be non-zero
  7470  0049C8                     	endif
  7471  0049C8  0008               	tblrd		*
  7472  0049CA  50F5               	movf	tablat,w,c
  7473  0049CC  0A3A               	xorlw	58
  7474  0049CE  A4D8               	btfss	status,2,c
  7475  0049D0  D7ED               	goto	l5290
  7476  0049D2                     u6920:
  7477                           
  7478                           ;ff.c: 2131:   if (*tt == ':') {
  7479  0049D2  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7480  0049D6  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7481  0049DA                     	if	0	;tblptru may be non-zero
  7482  0049DA                     	endif
  7483  0049DA                     	if	0	;tblptru may be non-zero
  7484  0049DA                     	endif
  7485  0049DA  0008               	tblrd		*
  7486  0049DC  50F5               	movf	tablat,w,c
  7487  0049DE  0A3A               	xorlw	58
  7488  0049E0  A4D8               	btfss	status,2,c
  7489  0049E2  D03B               	goto	l5322
  7490                           
  7491                           ;ff.c: 2132:    tp = *path;
  7492  0049E4  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7493  0049E8  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7494  0049EC  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7495  0049F0  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7496                           
  7497                           ;ff.c: 2133:    i = *tp++ - '0';
  7498  0049F4  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7499  0049F8  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7500  0049FC                     	if	0	;tblptru may be non-zero
  7501  0049FC                     	endif
  7502  0049FC                     	if	0	;tblptru may be non-zero
  7503  0049FC                     	endif
  7504  0049FC  0008               	tblrd		*
  7505  0049FE  CFF5 F003          	movff	tablat,??_get_ldnumber
  7506  004A02  0ED0               	movlw	208
  7507  004A04  2403               	addwf	??_get_ldnumber,w,c
  7508  004A06  6E0B               	movwf	get_ldnumber@i,c
  7509  004A08  6A0C               	clrf	get_ldnumber@i+1,c
  7510  004A0A  0EFF               	movlw	255
  7511  004A0C  220C               	addwfc	get_ldnumber@i+1,f,c
  7512  004A0E  4A07               	infsnz	get_ldnumber@tp,f,c
  7513  004A10  2A08               	incf	get_ldnumber@tp+1,f,c
  7514                           
  7515                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7516  004A12  500C               	movf	get_ldnumber@i+1,w,c
  7517  004A14  E11D               	bnz	l5318
  7518  004A16  0E0A               	movlw	10
  7519  004A18  5C0B               	subwf	get_ldnumber@i,w,c
  7520  004A1A  B0D8               	btfsc	status,0,c
  7521  004A1C  D019               	goto	l5318
  7522  004A1E  500D               	movf	get_ldnumber@tt,w,c
  7523  004A20  1807               	xorwf	get_ldnumber@tp,w,c
  7524  004A22  E116               	bnz	l5318
  7525  004A24  500E               	movf	get_ldnumber@tt+1,w,c
  7526  004A26  1808               	xorwf	get_ldnumber@tp+1,w,c
  7527  004A28  A4D8               	btfss	status,2,c
  7528  004A2A  D012               	goto	l5318
  7529                           
  7530                           ;ff.c: 2135:     if (i < 1) {
  7531  004A2C  500B               	movf	get_ldnumber@i,w,c
  7532  004A2E  100C               	iorwf	get_ldnumber@i+1,w,c
  7533  004A30  A4D8               	btfss	status,2,c
  7534  004A32  D00E               	goto	l5318
  7535                           
  7536                           ;ff.c: 2136:      vol = (int)i;
  7537  004A34  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7538  004A38  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7539                           
  7540                           ;ff.c: 2137:      *path = ++tt;
  7541  004A3C  4A0D               	infsnz	get_ldnumber@tt,f,c
  7542  004A3E  2A0E               	incf	get_ldnumber@tt+1,f,c
  7543  004A40  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7544  004A44  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7545  004A48  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7546  004A4C  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7547  004A50                     l5318:
  7548                           
  7549                           ;ff.c: 2156:    return vol;
  7550  004A50  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7551  004A54  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7552  004A58  0012               	return	
  7553  004A5A                     l5322:
  7554                           
  7555                           ;ff.c: 2161:   vol = 0;
  7556  004A5A  0E00               	movlw	0
  7557  004A5C  6E0A               	movwf	get_ldnumber@vol+1,c
  7558  004A5E  0E00               	movlw	0
  7559  004A60  6E09               	movwf	get_ldnumber@vol,c
  7560  004A62  D7F6               	goto	l5318
  7561  004A64                     __end_of_get_ldnumber:
  7562                           	opt callstack 0
  7563                           
  7564 ;; *************** function _disk_initialize *****************
  7565 ;; Defined at:
  7566 ;;		line 296 in file "diskio.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  pdrv            1    wreg     unsigned char 
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;  pdrv            1   17[COMRAM] unsigned char 
  7571 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7572 ;;  tmr             2   26[COMRAM] unsigned short 
  7573 ;;  n               1   28[COMRAM] unsigned char 
  7574 ;;  ty              1   25[COMRAM] unsigned char 
  7575 ;;  cmd             1   24[COMRAM] unsigned char 
  7576 ;; Return value:  Size  Location     Type
  7577 ;;                  1    wreg      unsigned char 
  7578 ;; Registers used:
  7579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7580 ;; Tracked objects:
  7581 ;;		On entry : 0/0
  7582 ;;		On exit  : 0/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7585 ;;      Params:         0       0       0       0       0       0       0       0       0
  7586 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7587 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7588 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7589 ;;Total ram usage:       13 bytes
  7590 ;; Hardware stack levels used:    1
  7591 ;; Hardware stack levels required when called:    5
  7592 ;; This function calls:
  7593 ;;		_SPI1_Exchange8bit
  7594 ;;		_SPI1_Initialize
  7595 ;;		_SPI1_Open
  7596 ;;		_deselect
  7597 ;;		_send_cmd
  7598 ;; This function is called by:
  7599 ;;		_find_volume
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	text19
  7604  003B96                     __ptext19:
  7605                           	opt callstack 0
  7606  003B96                     _disk_initialize:
  7607                           	opt callstack 22
  7608                           
  7609                           ;incstack = 0
  7610                           ;disk_initialize@pdrv stored from wreg
  7611  003B96  6E12               	movwf	disk_initialize@pdrv,c
  7612                           
  7613                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7614  003B98  5012               	movf	disk_initialize@pdrv,w,c
  7615  003B9A  B4D8               	btfsc	status,2,c
  7616  003B9C  D002               	goto	l135
  7617  003B9E  0E01               	movlw	1
  7618  003BA0  0012               	return	
  7619  003BA2                     l135:
  7620                           
  7621                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7622  003BA2  0100               	movlb	0	; () banked
  7623  003BA4  A3FA               	btfss	_Stat& (0+255),1,b
  7624  003BA6  D003               	goto	l4920
  7625  003BA8                     u6190:
  7626  003BA8  0100               	movlb	0	; () banked
  7627  003BAA  51FA               	movf	_Stat& (0+255),w,b
  7628  003BAC  0012               	return	
  7629  003BAE                     l4920:
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;diskio.c: 308:  SPI1_Initialize();
  7633  003BAE  EC1B  F02B         	call	_SPI1_Initialize	;wreg free
  7634                           
  7635                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7636  003BB2  0E0A               	movlw	10
  7637  003BB4  6E1D               	movwf	disk_initialize@n,c
  7638  003BB6  D004               	goto	l4928
  7639  003BB8                     l4924:
  7640  003BB8  0EFF               	movlw	255
  7641  003BBA  EC05  F02B         	call	_SPI1_Exchange8bit
  7642  003BBE  061D               	decf	disk_initialize@n,f,c
  7643  003BC0                     l4928:
  7644  003BC0  501D               	movf	disk_initialize@n,w,c
  7645  003BC2  A4D8               	btfss	status,2,c
  7646  003BC4  D7F9               	goto	l4924
  7647                           
  7648                           ;diskio.c: 311:  ty = 0;
  7649  003BC6  0E00               	movlw	0
  7650  003BC8  6E1A               	movwf	disk_initialize@ty,c
  7651                           
  7652                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7653  003BCA  0E00               	movlw	0
  7654  003BCC  6E0B               	movwf	send_cmd@arg,c
  7655  003BCE  0E00               	movlw	0
  7656  003BD0  6E0C               	movwf	send_cmd@arg+1,c
  7657  003BD2  0E00               	movlw	0
  7658  003BD4  6E0D               	movwf	send_cmd@arg+2,c
  7659  003BD6  0E00               	movlw	0
  7660  003BD8  6E0E               	movwf	send_cmd@arg+3,c
  7661  003BDA  0E00               	movlw	0
  7662  003BDC  ECD6  F029         	call	_send_cmd
  7663  003BE0  06E8               	decf	wreg,f,c
  7664  003BE2  A4D8               	btfss	status,2,c
  7665  003BE4  D0C1               	goto	l157
  7666                           
  7667                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7668  003BE6  0EAA               	movlw	170
  7669  003BE8  6E0B               	movwf	send_cmd@arg,c
  7670  003BEA  0E01               	movlw	1
  7671  003BEC  6E0C               	movwf	send_cmd@arg+1,c
  7672  003BEE  0E00               	movlw	0
  7673  003BF0  6E0D               	movwf	send_cmd@arg+2,c
  7674  003BF2  0E00               	movlw	0
  7675  003BF4  6E0E               	movwf	send_cmd@arg+3,c
  7676  003BF6  0E08               	movlw	8
  7677  003BF8  ECD6  F029         	call	_send_cmd
  7678  003BFC  06E8               	decf	wreg,f,c
  7679  003BFE  A4D8               	btfss	status,2,c
  7680  003C00  D067               	goto	l4984
  7681                           
  7682                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7683  003C02  0E00               	movlw	0
  7684  003C04  6E1D               	movwf	disk_initialize@n,c
  7685  003C06                     l4942:
  7686  003C06  0E13               	movlw	low disk_initialize@ocr
  7687  003C08  241D               	addwf	disk_initialize@n,w,c
  7688  003C0A  6ED9               	movwf	fsr2l,c
  7689  003C0C  6ADA               	clrf	fsr2h,c
  7690  003C0E  0E00               	movlw	high disk_initialize@ocr
  7691  003C10  22DA               	addwfc	fsr2h,f,c
  7692  003C12  0EFF               	movlw	255
  7693  003C14  EC05  F02B         	call	_SPI1_Exchange8bit
  7694  003C18  6EDF               	movwf	indf2,c
  7695  003C1A  2A1D               	incf	disk_initialize@n,f,c
  7696  003C1C  0E03               	movlw	3
  7697  003C1E  641D               	cpfsgt	disk_initialize@n,c
  7698  003C20  D7F2               	goto	l4942
  7699                           
  7700                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7701  003C22  0415               	decf	disk_initialize@ocr+2,w,c
  7702  003C24  A4D8               	btfss	status,2,c
  7703  003C26  D0A0               	goto	l157
  7704  003C28  0EAA               	movlw	170
  7705  003C2A  1816               	xorwf	disk_initialize@ocr+3,w,c
  7706  003C2C  A4D8               	btfss	status,2,c
  7707  003C2E  D09C               	goto	l157
  7708                           
  7709                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7710  003C30  0E03               	movlw	3
  7711  003C32  6E1C               	movwf	disk_initialize@tmr+1,c
  7712  003C34  0EE8               	movlw	232
  7713  003C36  6E1B               	movwf	disk_initialize@tmr,c
  7714  003C38  D018               	goto	l146
  7715  003C3A                     l4954:
  7716                           
  7717                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7718  003C3A  0E00               	movlw	0
  7719  003C3C  6E0B               	movwf	send_cmd@arg,c
  7720  003C3E  0E00               	movlw	0
  7721  003C40  6E0C               	movwf	send_cmd@arg+1,c
  7722  003C42  0E00               	movlw	0
  7723  003C44  6E0D               	movwf	send_cmd@arg+2,c
  7724  003C46  0E40               	movlw	64
  7725  003C48  6E0E               	movwf	send_cmd@arg+3,c
  7726  003C4A  0EA9               	movlw	169
  7727  003C4C  ECD6  F029         	call	_send_cmd
  7728  003C50  0900               	iorlw	0
  7729  003C52  B4D8               	btfsc	status,2,c
  7730  003C54  D00E               	goto	u6270
  7731                           
  7732                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7733  003C56  0E03               	movlw	3
  7734  003C58  6E11               	movwf	??_disk_initialize& (0+255),c
  7735  003C5A  0E98               	movlw	152
  7736  003C5C                     u8997:
  7737  003C5C  2EE8               	decfsz	wreg,f,c
  7738  003C5E  D7FE               	bra	u8997
  7739  003C60  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7740  003C62  D7FC               	bra	u8997
  7741                           
  7742                           ;diskio.c: 319:     }
  7743  003C64  061B               	decf	disk_initialize@tmr,f,c
  7744  003C66  A0D8               	btfss	status,0,c
  7745  003C68  061C               	decf	disk_initialize@tmr+1,f,c
  7746  003C6A                     l146:
  7747  003C6A  501B               	movf	disk_initialize@tmr,w,c
  7748  003C6C  101C               	iorwf	disk_initialize@tmr+1,w,c
  7749  003C6E  A4D8               	btfss	status,2,c
  7750  003C70  D7E4               	goto	l4954
  7751  003C72                     u6270:
  7752                           
  7753                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7754  003C72  501B               	movf	disk_initialize@tmr,w,c
  7755  003C74  101C               	iorwf	disk_initialize@tmr+1,w,c
  7756  003C76  B4D8               	btfsc	status,2,c
  7757  003C78  D077               	goto	l157
  7758  003C7A  0E00               	movlw	0
  7759  003C7C  6E0B               	movwf	send_cmd@arg,c
  7760  003C7E  0E00               	movlw	0
  7761  003C80  6E0C               	movwf	send_cmd@arg+1,c
  7762  003C82  0E00               	movlw	0
  7763  003C84  6E0D               	movwf	send_cmd@arg+2,c
  7764  003C86  0E00               	movlw	0
  7765  003C88  6E0E               	movwf	send_cmd@arg+3,c
  7766  003C8A  0E3A               	movlw	58
  7767  003C8C  ECD6  F029         	call	_send_cmd
  7768  003C90  0900               	iorlw	0
  7769  003C92  A4D8               	btfss	status,2,c
  7770  003C94  D069               	goto	l157
  7771                           
  7772                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7773  003C96  0E00               	movlw	0
  7774  003C98  6E1D               	movwf	disk_initialize@n,c
  7775  003C9A                     l4972:
  7776  003C9A  0E13               	movlw	low disk_initialize@ocr
  7777  003C9C  241D               	addwf	disk_initialize@n,w,c
  7778  003C9E  6ED9               	movwf	fsr2l,c
  7779  003CA0  6ADA               	clrf	fsr2h,c
  7780  003CA2  0E00               	movlw	high disk_initialize@ocr
  7781  003CA4  22DA               	addwfc	fsr2h,f,c
  7782  003CA6  0EFF               	movlw	255
  7783  003CA8  EC05  F02B         	call	_SPI1_Exchange8bit
  7784  003CAC  6EDF               	movwf	indf2,c
  7785  003CAE  2A1D               	incf	disk_initialize@n,f,c
  7786  003CB0  0E03               	movlw	3
  7787  003CB2  641D               	cpfsgt	disk_initialize@n,c
  7788  003CB4  D7F2               	goto	l4972
  7789                           
  7790                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7791  003CB6  BC13               	btfsc	disk_initialize@ocr,6,c
  7792  003CB8  D004               	goto	l4980
  7793  003CBA  0E00               	movlw	0
  7794  003CBC  6E18               	movwf	_disk_initialize$328+1,c
  7795  003CBE  0E04               	movlw	4
  7796  003CC0  D003               	goto	L7
  7797  003CC2                     l4980:
  7798  003CC2  0E00               	movlw	0
  7799  003CC4  6E18               	movwf	_disk_initialize$328+1,c
  7800  003CC6  0E0C               	movlw	12
  7801  003CC8                     L7:
  7802  003CC8  6E17               	movwf	_disk_initialize$328,c
  7803  003CCA  C017  F01A         	movff	_disk_initialize$328,disk_initialize@ty
  7804  003CCE  D04C               	goto	l157
  7805  003CD0                     l4984:
  7806                           
  7807                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7808  003CD0  0E00               	movlw	0
  7809  003CD2  6E0B               	movwf	send_cmd@arg,c
  7810  003CD4  0E00               	movlw	0
  7811  003CD6  6E0C               	movwf	send_cmd@arg+1,c
  7812  003CD8  0E00               	movlw	0
  7813  003CDA  6E0D               	movwf	send_cmd@arg+2,c
  7814  003CDC  0E00               	movlw	0
  7815  003CDE  6E0E               	movwf	send_cmd@arg+3,c
  7816  003CE0  0EA9               	movlw	169
  7817  003CE2  ECD6  F029         	call	_send_cmd
  7818  003CE6  6E11               	movwf	??_disk_initialize& (0+255),c
  7819  003CE8  0E02               	movlw	2
  7820  003CEA  6011               	cpfslt	??_disk_initialize,c
  7821  003CEC  D004               	goto	l4988
  7822                           
  7823                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  7824  003CEE  0E02               	movlw	2
  7825  003CF0  6E1A               	movwf	disk_initialize@ty,c
  7826  003CF2  0EA9               	movlw	169
  7827  003CF4  D003               	goto	L8
  7828  003CF6                     l4988:
  7829                           
  7830                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  7831  003CF6  0E01               	movlw	1
  7832  003CF8  6E1A               	movwf	disk_initialize@ty,c
  7833  003CFA  0E01               	movlw	1
  7834  003CFC                     L8:
  7835  003CFC  6E19               	movwf	disk_initialize@cmd,c
  7836                           
  7837                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  7838                           
  7839                           ;diskio.c: 330:    }
  7840  003CFE  0E03               	movlw	3
  7841  003D00  6E1C               	movwf	disk_initialize@tmr+1,c
  7842  003D02  0EE8               	movlw	232
  7843  003D04  6E1B               	movwf	disk_initialize@tmr,c
  7844  003D06  D018               	goto	l160
  7845  003D08                     l4990:
  7846                           
  7847                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  7848  003D08  0E00               	movlw	0
  7849  003D0A  6E0B               	movwf	send_cmd@arg,c
  7850  003D0C  0E00               	movlw	0
  7851  003D0E  6E0C               	movwf	send_cmd@arg+1,c
  7852  003D10  0E00               	movlw	0
  7853  003D12  6E0D               	movwf	send_cmd@arg+2,c
  7854  003D14  0E00               	movlw	0
  7855  003D16  6E0E               	movwf	send_cmd@arg+3,c
  7856  003D18  5019               	movf	disk_initialize@cmd,w,c
  7857  003D1A  ECD6  F029         	call	_send_cmd
  7858  003D1E  0900               	iorlw	0
  7859  003D20  B4D8               	btfsc	status,2,c
  7860  003D22  D00E               	goto	u6340
  7861                           
  7862                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  7863  003D24  0E03               	movlw	3
  7864  003D26  6E11               	movwf	??_disk_initialize& (0+255),c
  7865  003D28  0E98               	movlw	152
  7866  003D2A                     u9007:
  7867  003D2A  2EE8               	decfsz	wreg,f,c
  7868  003D2C  D7FE               	bra	u9007
  7869  003D2E  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7870  003D30  D7FC               	bra	u9007
  7871                           
  7872                           ;diskio.c: 334:    }
  7873  003D32  061B               	decf	disk_initialize@tmr,f,c
  7874  003D34  A0D8               	btfss	status,0,c
  7875  003D36  061C               	decf	disk_initialize@tmr+1,f,c
  7876  003D38                     l160:
  7877  003D38  501B               	movf	disk_initialize@tmr,w,c
  7878  003D3A  101C               	iorwf	disk_initialize@tmr+1,w,c
  7879  003D3C  A4D8               	btfss	status,2,c
  7880  003D3E  D7E4               	goto	l4990
  7881  003D40                     u6340:
  7882                           
  7883                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  7884  003D40  501B               	movf	disk_initialize@tmr,w,c
  7885  003D42  101C               	iorwf	disk_initialize@tmr+1,w,c
  7886  003D44  B4D8               	btfsc	status,2,c
  7887  003D46  D00E               	goto	u6360
  7888  003D48  0E00               	movlw	0
  7889  003D4A  6E0B               	movwf	send_cmd@arg,c
  7890  003D4C  0E02               	movlw	2
  7891  003D4E  6E0C               	movwf	send_cmd@arg+1,c
  7892  003D50  0E00               	movlw	0
  7893  003D52  6E0D               	movwf	send_cmd@arg+2,c
  7894  003D54  0E00               	movlw	0
  7895  003D56  6E0E               	movwf	send_cmd@arg+3,c
  7896  003D58  0E10               	movlw	16
  7897  003D5A  ECD6  F029         	call	_send_cmd
  7898  003D5E  0900               	iorlw	0
  7899  003D60  B4D8               	btfsc	status,2,c
  7900  003D62  D002               	goto	l157
  7901  003D64                     u6360:
  7902                           
  7903                           ;diskio.c: 336:     ty = 0;
  7904  003D64  0E00               	movlw	0
  7905  003D66  6E1A               	movwf	disk_initialize@ty,c
  7906  003D68                     l157:
  7907                           
  7908                           ;diskio.c: 339:  CardType = ty;
  7909  003D68  C01A  F0D8         	movff	disk_initialize@ty,_CardType
  7910                           
  7911                           ;diskio.c: 340:  deselect();
  7912  003D6C  EC22  F02B         	call	_deselect	;wreg free
  7913                           
  7914                           ;diskio.c: 342:  if (ty) {
  7915  003D70  501A               	movf	disk_initialize@ty,w,c
  7916  003D72  B4D8               	btfsc	status,2,c
  7917  003D74  D719               	goto	u6190
  7918                           
  7919                           ;diskio.c: 343:   Stat &= ~0x01;
  7920  003D76  0100               	movlb	0	; () banked
  7921  003D78  91FA               	bcf	_Stat& (0+255),0,b
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;diskio.c: 344:   SPI1_Open();
  7925  003D7A  EC0D  F02B         	call	_SPI1_Open	;wreg free
  7926  003D7E  D714               	goto	u6190
  7927  003D80                     __end_of_disk_initialize:
  7928                           	opt callstack 0
  7929                           
  7930 ;; *************** function _SPI1_Open *****************
  7931 ;; Defined at:
  7932 ;;		line 77 in file "mcc_generated_files/spi1.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;		None
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;		None
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  1    wreg      void 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7946 ;;      Params:         0       0       0       0       0       0       0       0       0
  7947 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7948 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7949 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7950 ;;Total ram usage:        0 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_disk_initialize
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text20
  7960  00561A                     __ptext20:
  7961                           	opt callstack 0
  7962  00561A                     _SPI1_Open:
  7963                           	opt callstack 26
  7964                           
  7965                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  7966                           
  7967                           ;incstack = 0
  7968  00561A  0E40               	movlw	64
  7969  00561C  6EC7               	movwf	4039,c	;volatile
  7970                           
  7971                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  7972  00561E  0E20               	movlw	32
  7973  005620  6EC6               	movwf	4038,c	;volatile
  7974                           
  7975                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  7976  005622  0E00               	movlw	0
  7977  005624  6EC8               	movwf	4040,c	;volatile
  7978  005626  0012               	return		;funcret
  7979  005628                     __end_of_SPI1_Open:
  7980                           	opt callstack 0
  7981                           
  7982 ;; *************** function _check_fs *****************
  7983 ;; Defined at:
  7984 ;;		line 2175 in file "ff.c"
  7985 ;; Parameters:    Size  Location     Type
  7986 ;;  fs              2   58[COMRAM] PTR struct .
  7987 ;;		 -> NULL(0), FatFs(558), 
  7988 ;;  sect            4   60[COMRAM] unsigned long 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;		None
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  1    wreg      unsigned char 
  7993 ;; Registers used:
  7994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8000 ;;      Params:         6       0       0       0       0       0       0       0       0
  8001 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8002 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8003 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8004 ;;Total ram usage:       10 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    8
  8007 ;; This function calls:
  8008 ;;		_move_window
  8009 ;; This function is called by:
  8010 ;;		_find_volume
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text21
  8015  00489A                     __ptext21:
  8016                           	opt callstack 0
  8017  00489A                     _check_fs:
  8018                           	opt callstack 19
  8019                           
  8020                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  8021                           
  8022                           ;incstack = 0
  8023  00489A  EE20 F004          	lfsr	2,4
  8024  00489E  503B               	movf	check_fs@fs,w,c
  8025  0048A0  26D9               	addwf	fsr2l,f,c
  8026  0048A2  503C               	movf	check_fs@fs+1,w,c
  8027  0048A4  22DA               	addwfc	fsr2h,f,c
  8028  0048A6  0E00               	movlw	0
  8029  0048A8  6EDF               	movwf	indf2,c
  8030  0048AA  EE20 F02A          	lfsr	2,42
  8031  0048AE  503B               	movf	check_fs@fs,w,c
  8032  0048B0  26D9               	addwf	fsr2l,f,c
  8033  0048B2  503C               	movf	check_fs@fs+1,w,c
  8034  0048B4  22DA               	addwfc	fsr2h,f,c
  8035  0048B6  0EFF               	movlw	255
  8036  0048B8  6EDE               	movwf	postinc2,c
  8037  0048BA  0EFF               	movlw	255
  8038  0048BC  6EDE               	movwf	postinc2,c
  8039  0048BE  0EFF               	movlw	255
  8040  0048C0  6EDE               	movwf	postinc2,c
  8041  0048C2  0EFF               	movlw	255
  8042  0048C4  6EDD               	movwf	postdec2,c
  8043                           
  8044                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  8045  0048C6  C03B  F030         	movff	check_fs@fs,move_window@fs
  8046  0048CA  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  8047  0048CE  C03D  F032         	movff	check_fs@sect,move_window@sector
  8048  0048D2  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  8049  0048D6  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  8050  0048DA  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  8051  0048DE  EC82  F027         	call	_move_window	;wreg free
  8052  0048E2  0900               	iorlw	0
  8053  0048E4  B4D8               	btfsc	status,2,c
  8054  0048E6  D002               	goto	l5336
  8055                           
  8056                           ;ff.c: 2182:   return 3;
  8057  0048E8  0E03               	movlw	3
  8058  0048EA  0012               	return	
  8059  0048EC                     l5336:
  8060                           
  8061                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8062  0048EC  EE22 F02C          	lfsr	2,556
  8063  0048F0  503B               	movf	check_fs@fs,w,c
  8064  0048F2  26D9               	addwf	fsr2l,f,c
  8065  0048F4  503C               	movf	check_fs@fs+1,w,c
  8066  0048F6  22DA               	addwfc	fsr2h,f,c
  8067  0048F8  0E55               	movlw	85
  8068  0048FA  18DE               	xorwf	postinc2,w,c
  8069  0048FC  E104               	bnz	u6980
  8070  0048FE  0EAA               	movlw	170
  8071  004900  18DE               	xorwf	postinc2,w,c
  8072  004902  B4D8               	btfsc	status,2,c
  8073  004904  D002               	goto	l5342
  8074  004906                     u6980:
  8075                           
  8076                           ;ff.c: 2185:   return 2;
  8077  004906  0E02               	movlw	2
  8078  004908  0012               	return	
  8079  00490A                     l5342:
  8080                           
  8081                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8082  00490A  EE20 F064          	lfsr	2,100
  8083  00490E  503B               	movf	check_fs@fs,w,c
  8084  004910  26D9               	addwf	fsr2l,f,c
  8085  004912  503C               	movf	check_fs@fs+1,w,c
  8086  004914  22DA               	addwfc	fsr2h,f,c
  8087  004916  0EFF               	movlw	255
  8088  004918  14DE               	andwf	postinc2,w,c
  8089  00491A  6E41               	movwf	??_check_fs& (0+255),c
  8090  00491C  0EFF               	movlw	255
  8091  00491E  14DE               	andwf	postinc2,w,c
  8092  004920  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8093  004922  0EFF               	movlw	255
  8094  004924  14DE               	andwf	postinc2,w,c
  8095  004926  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8096  004928  0E00               	movlw	0
  8097  00492A  14DE               	andwf	postinc2,w,c
  8098  00492C  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8099  00492E  0E46               	movlw	70
  8100  004930  1841               	xorwf	??_check_fs,w,c
  8101  004932  E10A               	bnz	l5348
  8102  004934  0E41               	movlw	65
  8103  004936  1842               	xorwf	??_check_fs+1,w,c
  8104  004938  E107               	bnz	l5348
  8105  00493A  0E54               	movlw	84
  8106  00493C  1843               	xorwf	??_check_fs+2,w,c
  8107  00493E  1044               	iorwf	??_check_fs+3,w,c
  8108  004940  A4D8               	btfss	status,2,c
  8109  004942  D002               	goto	l5348
  8110  004944                     u6990:
  8111                           
  8112                           ;ff.c: 2188:   return 0;
  8113  004944  0E00               	movlw	0
  8114  004946  0012               	return	
  8115  004948                     l5348:
  8116                           
  8117                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8118  004948  EE20 F080          	lfsr	2,128
  8119  00494C  503B               	movf	check_fs@fs,w,c
  8120  00494E  26D9               	addwf	fsr2l,f,c
  8121  004950  503C               	movf	check_fs@fs+1,w,c
  8122  004952  22DA               	addwfc	fsr2h,f,c
  8123  004954  0EFF               	movlw	255
  8124  004956  14DE               	andwf	postinc2,w,c
  8125  004958  6E41               	movwf	??_check_fs& (0+255),c
  8126  00495A  0EFF               	movlw	255
  8127  00495C  14DE               	andwf	postinc2,w,c
  8128  00495E  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8129  004960  0EFF               	movlw	255
  8130  004962  14DE               	andwf	postinc2,w,c
  8131  004964  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8132  004966  0E00               	movlw	0
  8133  004968  14DE               	andwf	postinc2,w,c
  8134  00496A  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8135  00496C  0E46               	movlw	70
  8136  00496E  1841               	xorwf	??_check_fs,w,c
  8137  004970  E108               	bnz	l5354
  8138  004972  0E41               	movlw	65
  8139  004974  1842               	xorwf	??_check_fs+1,w,c
  8140  004976  E105               	bnz	l5354
  8141  004978  0E54               	movlw	84
  8142  00497A  1843               	xorwf	??_check_fs+2,w,c
  8143  00497C  1044               	iorwf	??_check_fs+3,w,c
  8144  00497E  B4D8               	btfsc	status,2,c
  8145  004980  D7E1               	goto	u6990
  8146  004982                     l5354:
  8147                           
  8148                           ;ff.c: 2192:  return 1;
  8149  004982  0E01               	movlw	1
  8150  004984  0012               	return		;funcret
  8151  004986                     __end_of_check_fs:
  8152                           	opt callstack 0
  8153                           
  8154 ;; *************** function _f_lseek *****************
  8155 ;; Defined at:
  8156 ;;		line 3033 in file "ff.c"
  8157 ;; Parameters:    Size  Location     Type
  8158 ;;  fp              2   13[BANK0 ] PTR struct .
  8159 ;;		 -> Fil(32), 
  8160 ;;  ofs             4   15[BANK0 ] unsigned long 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;  clst            4   48[BANK0 ] unsigned long 
  8163 ;;  bcs             4   44[BANK0 ] unsigned long 
  8164 ;;  nsect           4   40[BANK0 ] unsigned long 
  8165 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8166 ;;  res             1   39[BANK0 ] enum E93
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      enum E4918
  8169 ;; Registers used:
  8170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8176 ;;      Params:         0       6       0       0       0       0       0       0       0
  8177 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8178 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8179 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8180 ;;Total ram usage:       39 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:   10
  8183 ;; This function calls:
  8184 ;;		___lldiv
  8185 ;;		_clust2sect
  8186 ;;		_create_chain
  8187 ;;		_get_fat
  8188 ;;		_validate
  8189 ;; This function is called by:
  8190 ;;		_guardar
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194                           	psect	text22
  8195  001942                     __ptext22:
  8196                           	opt callstack 0
  8197  001942                     _f_lseek:
  8198                           	opt callstack 19
  8199                           
  8200                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8201                           
  8202                           ;incstack = 0
  8203  001942  C06D  F002         	movff	f_lseek@fp,validate@obj
  8204  001946  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8205  00194A  ECD5  F027         	call	_validate	;wreg free
  8206  00194E  0100               	movlb	0	; () banked
  8207  001950  6F87               	movwf	f_lseek@res& (0+255),b
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8211  001952  5187               	movf	f_lseek@res& (0+255),w,b
  8212  001954  B4D8               	btfsc	status,2,c
  8213  001956  D002               	goto	l6068
  8214  001958                     u8110:
  8215                           
  8216                           ; BSR set to: 0
  8217  001958  5187               	movf	f_lseek@res& (0+255),w,b
  8218  00195A  0012               	return	
  8219  00195C                     l6068:
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;ff.c: 3047:  if (fp->err)
  8223  00195C  EE20 F005          	lfsr	2,5
  8224  001960  516D               	movf	f_lseek@fp& (0+255),w,b
  8225  001962  26D9               	addwf	fsr2l,f,c
  8226  001964  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8227  001966  22DA               	addwfc	fsr2h,f,c
  8228  001968  50DF               	movf	indf2,w,c
  8229  00196A  B4D8               	btfsc	status,2,c
  8230  00196C  D008               	goto	l6074
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8234  00196E  EE20 F005          	lfsr	2,5
  8235  001972  516D               	movf	f_lseek@fp& (0+255),w,b
  8236  001974  26D9               	addwf	fsr2l,f,c
  8237  001976  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8238  001978  22DA               	addwfc	fsr2h,f,c
  8239  00197A  50DF               	movf	indf2,w,c
  8240  00197C  0012               	return	
  8241  00197E                     l6074:
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8245  00197E  EE20 F00A          	lfsr	2,10
  8246  001982  516D               	movf	f_lseek@fp& (0+255),w,b
  8247  001984  26D9               	addwf	fsr2l,f,c
  8248  001986  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8249  001988  22DA               	addwfc	fsr2h,f,c
  8250  00198A  516F               	movf	f_lseek@ofs& (0+255),w,b
  8251  00198C  5CDE               	subwf	postinc2,w,c
  8252  00198E  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8253  001990  58DE               	subwfb	postinc2,w,c
  8254  001992  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8255  001994  58DE               	subwfb	postinc2,w,c
  8256  001996  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8257  001998  58DE               	subwfb	postinc2,w,c
  8258  00199A  B0D8               	btfsc	status,0,c
  8259  00199C  D016               	goto	l732
  8260                           
  8261                           ; BSR set to: 0
  8262  00199E  EE20 F004          	lfsr	2,4
  8263  0019A2  516D               	movf	f_lseek@fp& (0+255),w,b
  8264  0019A4  26D9               	addwf	fsr2l,f,c
  8265  0019A6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8266  0019A8  22DA               	addwfc	fsr2h,f,c
  8267  0019AA  B2DF               	btfsc	indf2,1,c
  8268  0019AC  D00E               	goto	l732
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8272  0019AE  EE20 F00A          	lfsr	2,10
  8273  0019B2  516D               	movf	f_lseek@fp& (0+255),w,b
  8274  0019B4  26D9               	addwf	fsr2l,f,c
  8275  0019B6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8276  0019B8  22DA               	addwfc	fsr2h,f,c
  8277  0019BA  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8278  0019BE  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8279  0019C2  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8280  0019C6  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8281  0019CA                     l732:
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;ff.c: 3113:   ifptr = fp->fptr;
  8285  0019CA  EE20 F006          	lfsr	2,6
  8286  0019CE  516D               	movf	f_lseek@fp& (0+255),w,b
  8287  0019D0  26D9               	addwf	fsr2l,f,c
  8288  0019D2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8289  0019D4  22DA               	addwfc	fsr2h,f,c
  8290  0019D6  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8291  0019DA  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8292  0019DE  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8293  0019E2  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8294                           
  8295                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8296  0019E6  0E00               	movlw	0
  8297  0019E8  6F88               	movwf	f_lseek@nsect& (0+255),b
  8298  0019EA  0E00               	movlw	0
  8299  0019EC  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8300  0019EE  0E00               	movlw	0
  8301  0019F0  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8302  0019F2  0E00               	movlw	0
  8303  0019F4  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8304  0019F6  EE20 F006          	lfsr	2,6
  8305  0019FA  516D               	movf	f_lseek@fp& (0+255),w,b
  8306  0019FC  26D9               	addwf	fsr2l,f,c
  8307  0019FE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8308  001A00  22DA               	addwfc	fsr2h,f,c
  8309  001A02  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8310  001A06  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8311  001A0A  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8312  001A0E  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;ff.c: 3115:   if (ofs) {
  8316  001A12  516F               	movf	f_lseek@ofs& (0+255),w,b
  8317  001A14  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8318  001A16  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8319  001A18  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8320  001A1A  B4D8               	btfsc	status,2,c
  8321  001A1C  D22D               	goto	l6168
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8325  001A1E  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8326  001A22  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8327  001A26  EE10 F002          	lfsr	1,2
  8328  001A2A  50DE               	movf	postinc2,w,c
  8329  001A2C  26E1               	addwf	fsr1l,f,c
  8330  001A2E  50DD               	movf	postdec2,w,c
  8331  001A30  22E2               	addwfc	fsr1h,f,c
  8332  001A32  50E7               	movf	indf1,w,c
  8333  001A34  6F73               	movwf	??_f_lseek& (0+255),b
  8334  001A36  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8335  001A3A  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8336  001A3C  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8337  001A3E  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8338  001A40  0E09               	movlw	9
  8339  001A42                     u8165:
  8340  001A42  90D8               	bcf	status,0,c
  8341  001A44  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8342  001A46  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8343  001A48  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8344  001A4A  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8345  001A4C  2EE8               	decfsz	wreg,f,c
  8346  001A4E  D7F9               	goto	u8165
  8347  001A50  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8348  001A54  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8349  001A58  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8350  001A5C  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;ff.c: 3117:    if (ifptr > 0 &&
  8354  001A60  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8355  001A62  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8356  001A64  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8357  001A66  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8358  001A68  B4D8               	btfsc	status,2,c
  8359  001A6A  D097               	goto	l6090
  8360                           
  8361                           ; BSR set to: 0
  8362  001A6C  0EFF               	movlw	255
  8363  001A6E  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8364  001A70  6E01               	movwf	___lldiv@dividend,c
  8365  001A72  0EFF               	movlw	255
  8366  001A74  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8367  001A76  6E02               	movwf	___lldiv@dividend+1,c
  8368  001A78  0EFF               	movlw	255
  8369  001A7A  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8370  001A7C  6E03               	movwf	___lldiv@dividend+2,c
  8371  001A7E  0EFF               	movlw	255
  8372  001A80  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8373  001A82  6E04               	movwf	___lldiv@dividend+3,c
  8374  001A84  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8375  001A88  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8376  001A8C  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8377  001A90  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8378  001A94  EC1F  F028         	call	___lldiv	;wreg free
  8379  001A98  C001  F073         	movff	?___lldiv,??_f_lseek
  8380  001A9C  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8381  001AA0  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8382  001AA4  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8383  001AA8  0EFF               	movlw	255
  8384  001AAA  0100               	movlb	0	; () banked
  8385  001AAC  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8386  001AAE  6E01               	movwf	___lldiv@dividend,c
  8387  001AB0  0EFF               	movlw	255
  8388  001AB2  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8389  001AB4  6E02               	movwf	___lldiv@dividend+1,c
  8390  001AB6  0EFF               	movlw	255
  8391  001AB8  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8392  001ABA  6E03               	movwf	___lldiv@dividend+2,c
  8393  001ABC  0EFF               	movlw	255
  8394  001ABE  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8395  001AC0  6E04               	movwf	___lldiv@dividend+3,c
  8396  001AC2  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8397  001AC6  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8398  001ACA  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8399  001ACE  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8400  001AD2  EC1F  F028         	call	___lldiv	;wreg free
  8401  001AD6  5001               	movf	?___lldiv,w,c
  8402  001AD8  0100               	movlb	0	; () banked
  8403  001ADA  5D73               	subwf	??_f_lseek& (0+255),w,b
  8404  001ADC  5002               	movf	?___lldiv+1,w,c
  8405  001ADE  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8406  001AE0  5003               	movf	?___lldiv+2,w,c
  8407  001AE2  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8408  001AE4  5004               	movf	?___lldiv+3,w,c
  8409  001AE6  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8410  001AE8  A0D8               	btfss	status,0,c
  8411  001AEA  D057               	goto	l6090
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8415  001AEC  0EFF               	movlw	255
  8416  001AEE  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8417  001AF0  6F73               	movwf	??_f_lseek& (0+255),b
  8418  001AF2  0EFF               	movlw	255
  8419  001AF4  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8420  001AF6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8421  001AF8  0EFF               	movlw	255
  8422  001AFA  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8423  001AFC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8424  001AFE  0EFF               	movlw	255
  8425  001B00  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8426  001B02  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8427  001B04  1D73               	comf	??_f_lseek& (0+255),w,b
  8428  001B06  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8429  001B08  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8430  001B0A  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8431  001B0C  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8432  001B0E  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8433  001B10  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8434  001B12  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8435  001B14  0EFF               	movlw	255
  8436  001B16  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8437  001B18  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8438  001B1A  0EFF               	movlw	255
  8439  001B1C  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8440  001B1E  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8441  001B20  0EFF               	movlw	255
  8442  001B22  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8443  001B24  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8444  001B26  0EFF               	movlw	255
  8445  001B28  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8446  001B2A  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8447  001B2C  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8448  001B2E  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8449  001B30  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8450  001B32  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8451  001B34  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8452  001B36  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8453  001B38  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8454  001B3A  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8455  001B3C  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8456  001B3E  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8457  001B40  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8458  001B42  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8459  001B44  EE20 F006          	lfsr	2,6
  8460  001B48  516D               	movf	f_lseek@fp& (0+255),w,b
  8461  001B4A  26D9               	addwf	fsr2l,f,c
  8462  001B4C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8463  001B4E  22DA               	addwfc	fsr2h,f,c
  8464  001B50  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8465  001B54  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8466  001B58  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8467  001B5C  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8468                           
  8469                           ;ff.c: 3120:     ofs -= fp->fptr;
  8470  001B60  EE20 F006          	lfsr	2,6
  8471  001B64  516D               	movf	f_lseek@fp& (0+255),w,b
  8472  001B66  26D9               	addwf	fsr2l,f,c
  8473  001B68  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8474  001B6A  22DA               	addwfc	fsr2h,f,c
  8475  001B6C  50DE               	movf	postinc2,w,c
  8476  001B6E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8477  001B70  50DE               	movf	postinc2,w,c
  8478  001B72  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8479  001B74  50DE               	movf	postinc2,w,c
  8480  001B76  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8481  001B78  50DD               	movf	postdec2,w,c
  8482  001B7A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8483                           
  8484                           ;ff.c: 3121:     clst = fp->clust;
  8485  001B7C  EE20 F012          	lfsr	2,18
  8486  001B80  516D               	movf	f_lseek@fp& (0+255),w,b
  8487  001B82  26D9               	addwf	fsr2l,f,c
  8488  001B84  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8489  001B86  22DA               	addwfc	fsr2h,f,c
  8490  001B88  CFDE F090          	movff	postinc2,f_lseek@clst
  8491  001B8C  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8492  001B90  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8493  001B94  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8494                           
  8495                           ;ff.c: 3122:    } else {
  8496  001B98  D06E               	goto	l6114
  8497  001B9A                     l6090:
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;ff.c: 3123:     clst = fp->sclust;
  8501  001B9A  EE20 F00E          	lfsr	2,14
  8502  001B9E  516D               	movf	f_lseek@fp& (0+255),w,b
  8503  001BA0  26D9               	addwf	fsr2l,f,c
  8504  001BA2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8505  001BA4  22DA               	addwfc	fsr2h,f,c
  8506  001BA6  CFDE F090          	movff	postinc2,f_lseek@clst
  8507  001BAA  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8508  001BAE  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8509  001BB2  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;ff.c: 3125:     if (clst == 0) {
  8513  001BB6  5190               	movf	f_lseek@clst& (0+255),w,b
  8514  001BB8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8515  001BBA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8516  001BBC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8517  001BBE  A4D8               	btfss	status,2,c
  8518  001BC0  D04C               	goto	l736
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8522  001BC2  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8523  001BC6  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8524  001BCA  CFDE F056          	movff	postinc2,create_chain@fs
  8525  001BCE  CFDD F057          	movff	postdec2,create_chain@fs+1
  8526  001BD2  0E00               	movlw	0
  8527  001BD4  6E58               	movwf	create_chain@clst,c
  8528  001BD6  0E00               	movlw	0
  8529  001BD8  6E59               	movwf	create_chain@clst+1,c
  8530  001BDA  0E00               	movlw	0
  8531  001BDC  6E5A               	movwf	create_chain@clst+2,c
  8532  001BDE  0E00               	movlw	0
  8533  001BE0  6E5B               	movwf	create_chain@clst+3,c
  8534  001BE2  ECAB  F019         	call	_create_chain	;wreg free
  8535  001BE6  C056  F090         	movff	?_create_chain,f_lseek@clst
  8536  001BEA  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8537  001BEE  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8538  001BF2  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8539                           
  8540                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8541  001BF6  0100               	movlb	0	; () banked
  8542  001BF8  0590               	decf	f_lseek@clst& (0+255),w,b
  8543  001BFA  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8544  001BFC  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8545  001BFE  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8546  001C00  A4D8               	btfss	status,2,c
  8547  001C02  D00A               	goto	l6104
  8548  001C04                     u8200:
  8549                           
  8550                           ; BSR set to: 0
  8551  001C04  EE20 F005          	lfsr	2,5
  8552  001C08  516D               	movf	f_lseek@fp& (0+255),w,b
  8553  001C0A  26D9               	addwf	fsr2l,f,c
  8554  001C0C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8555  001C0E  22DA               	addwfc	fsr2h,f,c
  8556  001C10  0E02               	movlw	2
  8557  001C12  6EDF               	movwf	indf2,c
  8558                           
  8559                           ; BSR set to: 0
  8560  001C14  0E02               	movlw	2
  8561  001C16  0012               	return	
  8562  001C18                     l6104:
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8566  001C18  2990               	incf	f_lseek@clst& (0+255),w,b
  8567  001C1A  E111               	bnz	l6112
  8568  001C1C  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8569  001C1E  E10F               	bnz	l6112
  8570  001C20  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8571  001C22  E10D               	bnz	l6112
  8572  001C24  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8573  001C26  A4D8               	btfss	status,2,c
  8574  001C28  D00A               	goto	l6112
  8575  001C2A                     u8210:
  8576                           
  8577                           ; BSR set to: 0
  8578  001C2A  EE20 F005          	lfsr	2,5
  8579  001C2E  516D               	movf	f_lseek@fp& (0+255),w,b
  8580  001C30  26D9               	addwf	fsr2l,f,c
  8581  001C32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8582  001C34  22DA               	addwfc	fsr2h,f,c
  8583  001C36  0E01               	movlw	1
  8584  001C38  6EDF               	movwf	indf2,c
  8585                           
  8586                           ; BSR set to: 0
  8587  001C3A  0E01               	movlw	1
  8588  001C3C  0012               	return	
  8589  001C3E                     l6112:
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;ff.c: 3129:      fp->sclust = clst;
  8593  001C3E  EE20 F00E          	lfsr	2,14
  8594  001C42  516D               	movf	f_lseek@fp& (0+255),w,b
  8595  001C44  26D9               	addwf	fsr2l,f,c
  8596  001C46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8597  001C48  22DA               	addwfc	fsr2h,f,c
  8598  001C4A  C090  FFDE         	movff	f_lseek@clst,postinc2
  8599  001C4E  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8600  001C52  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8601  001C56  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8602  001C5A                     l736:
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;ff.c: 3132:     fp->clust = clst;
  8606  001C5A  EE20 F012          	lfsr	2,18
  8607  001C5E  516D               	movf	f_lseek@fp& (0+255),w,b
  8608  001C60  26D9               	addwf	fsr2l,f,c
  8609  001C62  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8610  001C64  22DA               	addwfc	fsr2h,f,c
  8611  001C66  C090  FFDE         	movff	f_lseek@clst,postinc2
  8612  001C6A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8613  001C6E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8614  001C72  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8615  001C76                     l6114:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;ff.c: 3134:    if (clst != 0) {
  8619  001C76  5190               	movf	f_lseek@clst& (0+255),w,b
  8620  001C78  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8621  001C7A  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8622  001C7C  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8623  001C7E  A4D8               	btfss	status,2,c
  8624  001C80  D097               	goto	l6150
  8625  001C82  D0FA               	goto	l6168
  8626  001C84                     l6118:
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8630  001C84  EE20 F004          	lfsr	2,4
  8631  001C88  516D               	movf	f_lseek@fp& (0+255),w,b
  8632  001C8A  26D9               	addwf	fsr2l,f,c
  8633  001C8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8634  001C8E  22DA               	addwfc	fsr2h,f,c
  8635  001C90  A2DF               	btfss	indf2,1,c
  8636  001C92  D02A               	goto	l6126
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8640  001C94  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8641  001C98  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8642  001C9C  CFDE F056          	movff	postinc2,create_chain@fs
  8643  001CA0  CFDD F057          	movff	postdec2,create_chain@fs+1
  8644  001CA4  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8645  001CA8  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8646  001CAC  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8647  001CB0  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8648  001CB4  ECAB  F019         	call	_create_chain	;wreg free
  8649  001CB8  C056  F090         	movff	?_create_chain,f_lseek@clst
  8650  001CBC  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8651  001CC0  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8652  001CC4  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8653                           
  8654                           ;ff.c: 3139:       if (clst == 0) {
  8655  001CC8  0100               	movlb	0	; () banked
  8656  001CCA  5190               	movf	f_lseek@clst& (0+255),w,b
  8657  001CCC  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8658  001CCE  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8659  001CD0  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8660  001CD2  A4D8               	btfss	status,2,c
  8661  001CD4  D023               	goto	l6128
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;ff.c: 3140:        ofs = bcs; break;
  8665  001CD6  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8666  001CDA  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8667  001CDE  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8668  001CE2  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8669  001CE6  D06E               	goto	u8280
  8670  001CE8                     l6126:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8674  001CE8  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8675  001CEC  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8676  001CF0  CFDE F03B          	movff	postinc2,get_fat@fs
  8677  001CF4  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8678  001CF8  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8679  001CFC  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8680  001D00  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8681  001D04  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8682  001D08  EC0F  F016         	call	_get_fat	;wreg free
  8683  001D0C  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8684  001D10  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8685  001D14  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8686  001D18  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8687  001D1C                     l6128:
  8688                           
  8689                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8690  001D1C  0100               	movlb	0	; () banked
  8691  001D1E  2990               	incf	f_lseek@clst& (0+255),w,b
  8692  001D20  E107               	bnz	l6136
  8693  001D22  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8694  001D24  E105               	bnz	l6136
  8695  001D26  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8696  001D28  E103               	bnz	l6136
  8697  001D2A  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8698  001D2C  B4D8               	btfsc	status,2,c
  8699  001D2E  D77D               	goto	u8210
  8700  001D30                     l6136:
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8704  001D30  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8705  001D32  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8706  001D34  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8707  001D36  E104               	bnz	u8260
  8708  001D38  0E02               	movlw	2
  8709  001D3A  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8710  001D3C  A0D8               	btfss	status,0,c
  8711  001D3E  D762               	goto	u8200
  8712  001D40                     u8260:
  8713                           
  8714                           ; BSR set to: 0
  8715  001D40  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8716  001D44  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8717  001D48  EE10 F012          	lfsr	1,18
  8718  001D4C  50DE               	movf	postinc2,w,c
  8719  001D4E  26E1               	addwf	fsr1l,f,c
  8720  001D50  50DD               	movf	postdec2,w,c
  8721  001D52  22E2               	addwfc	fsr1h,f,c
  8722  001D54  50E6               	movf	postinc1,w,c
  8723  001D56  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8724  001D58  50E6               	movf	postinc1,w,c
  8725  001D5A  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8726  001D5C  50E6               	movf	postinc1,w,c
  8727  001D5E  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8728  001D60  50E6               	movf	postinc1,w,c
  8729  001D62  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8730  001D64  B0D8               	btfsc	status,0,c
  8731  001D66  D74E               	goto	u8200
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;ff.c: 3147:      fp->clust = clst;
  8735                           
  8736                           ; BSR set to: 0
  8737  001D68  EE20 F012          	lfsr	2,18
  8738  001D6C  516D               	movf	f_lseek@fp& (0+255),w,b
  8739  001D6E  26D9               	addwf	fsr2l,f,c
  8740  001D70  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8741  001D72  22DA               	addwfc	fsr2h,f,c
  8742  001D74  C090  FFDE         	movff	f_lseek@clst,postinc2
  8743  001D78  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8744  001D7C  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8745  001D80  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8746                           
  8747                           ;ff.c: 3148:      fp->fptr += bcs;
  8748  001D84  EE20 F006          	lfsr	2,6
  8749  001D88  516D               	movf	f_lseek@fp& (0+255),w,b
  8750  001D8A  26D9               	addwf	fsr2l,f,c
  8751  001D8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8752  001D8E  22DA               	addwfc	fsr2h,f,c
  8753  001D90  518C               	movf	f_lseek@bcs& (0+255),w,b
  8754  001D92  26DE               	addwf	postinc2,f,c
  8755  001D94  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8756  001D96  22DE               	addwfc	postinc2,f,c
  8757  001D98  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8758  001D9A  22DE               	addwfc	postinc2,f,c
  8759  001D9C  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8760  001D9E  22DE               	addwfc	postinc2,f,c
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;ff.c: 3149:      ofs -= bcs;
  8764  001DA0  518C               	movf	f_lseek@bcs& (0+255),w,b
  8765  001DA2  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8766  001DA4  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8767  001DA6  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8768  001DA8  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8769  001DAA  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8770  001DAC  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8771  001DAE  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8772  001DB0                     l6150:
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;ff.c: 3135:     while (ofs > bcs) {
  8776  001DB0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8777  001DB2  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8778  001DB4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8779  001DB6  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8780  001DB8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8781  001DBA  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8782  001DBC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8783  001DBE  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8784  001DC0  A0D8               	btfss	status,0,c
  8785  001DC2  D760               	goto	l6118
  8786  001DC4                     u8280:
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;ff.c: 3151:     fp->fptr += ofs;
  8790  001DC4  EE20 F006          	lfsr	2,6
  8791  001DC8  516D               	movf	f_lseek@fp& (0+255),w,b
  8792  001DCA  26D9               	addwf	fsr2l,f,c
  8793  001DCC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8794  001DCE  22DA               	addwfc	fsr2h,f,c
  8795  001DD0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8796  001DD2  26DE               	addwf	postinc2,f,c
  8797  001DD4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8798  001DD6  22DE               	addwfc	postinc2,f,c
  8799  001DD8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8800  001DDA  22DE               	addwfc	postinc2,f,c
  8801  001DDC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8802  001DDE  22DE               	addwfc	postinc2,f,c
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8806  001DE0  0EFF               	movlw	255
  8807  001DE2  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8808  001DE4  6F73               	movwf	??_f_lseek& (0+255),b
  8809  001DE6  0E01               	movlw	1
  8810  001DE8  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8811  001DEA  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8812  001DEC  0E00               	movlw	0
  8813  001DEE  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8814  001DF0  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8815  001DF2  0E00               	movlw	0
  8816  001DF4  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8817  001DF6  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8818  001DF8  5173               	movf	??_f_lseek& (0+255),w,b
  8819  001DFA  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8820  001DFC  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8821  001DFE  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8822  001E00  B4D8               	btfsc	status,2,c
  8823  001E02  D03A               	goto	l6168
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  8827  001E04  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8828  001E08  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8829  001E0C  CFDE F00D          	movff	postinc2,clust2sect@fs
  8830  001E10  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8831  001E14  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  8832  001E18  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  8833  001E1C  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  8834  001E20  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  8835  001E24  ECCD  F026         	call	_clust2sect	;wreg free
  8836  001E28  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  8837  001E2C  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  8838  001E30  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  8839  001E34  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  8840                           
  8841                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8842  001E38  0100               	movlb	0	; () banked
  8843  001E3A  5188               	movf	f_lseek@nsect& (0+255),w,b
  8844  001E3C  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8845  001E3E  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8846  001E40  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8847  001E42  B4D8               	btfsc	status,2,c
  8848  001E44  D6DF               	goto	u8200
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  8852                           
  8853                           ; BSR set to: 0
  8854  001E46  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  8855  001E4A  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  8856  001E4E  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  8857  001E52  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  8858  001E56  0E0A               	movlw	10
  8859  001E58  D005               	goto	u8310
  8860  001E5A                     u8315:
  8861  001E5A  90D8               	bcf	status,0,c
  8862  001E5C  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8863  001E5E  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8864  001E60  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8865  001E62  3373               	rrcf	??_f_lseek& (0+255),f,b
  8866  001E64                     u8310:
  8867  001E64  2EE8               	decfsz	wreg,f,c
  8868  001E66  D7F9               	goto	u8315
  8869  001E68  5173               	movf	??_f_lseek& (0+255),w,b
  8870  001E6A  2788               	addwf	f_lseek@nsect& (0+255),f,b
  8871  001E6C  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  8872  001E6E  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8873  001E70  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  8874  001E72  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8875  001E74  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  8876  001E76  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8877  001E78                     l6168:
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8881  001E78  EE20 F006          	lfsr	2,6
  8882  001E7C  516D               	movf	f_lseek@fp& (0+255),w,b
  8883  001E7E  26D9               	addwf	fsr2l,f,c
  8884  001E80  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8885  001E82  22DA               	addwfc	fsr2h,f,c
  8886  001E84  0EFF               	movlw	255
  8887  001E86  14DE               	andwf	postinc2,w,c
  8888  001E88  6F73               	movwf	??_f_lseek& (0+255),b
  8889  001E8A  0E01               	movlw	1
  8890  001E8C  14DE               	andwf	postinc2,w,c
  8891  001E8E  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8892  001E90  0E00               	movlw	0
  8893  001E92  14DE               	andwf	postinc2,w,c
  8894  001E94  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8895  001E96  0E00               	movlw	0
  8896  001E98  14DE               	andwf	postinc2,w,c
  8897  001E9A  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8898  001E9C  5173               	movf	??_f_lseek& (0+255),w,b
  8899  001E9E  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8900  001EA0  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8901  001EA2  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8902  001EA4  B4D8               	btfsc	status,2,c
  8903  001EA6  D021               	goto	l6174
  8904                           
  8905                           ; BSR set to: 0
  8906  001EA8  EE20 F016          	lfsr	2,22
  8907  001EAC  516D               	movf	f_lseek@fp& (0+255),w,b
  8908  001EAE  26D9               	addwf	fsr2l,f,c
  8909  001EB0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8910  001EB2  22DA               	addwfc	fsr2h,f,c
  8911  001EB4  5188               	movf	f_lseek@nsect& (0+255),w,b
  8912  001EB6  18DE               	xorwf	postinc2,w,c
  8913  001EB8  E10A               	bnz	u8330
  8914  001EBA  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8915  001EBC  18DE               	xorwf	postinc2,w,c
  8916  001EBE  E107               	bnz	u8330
  8917  001EC0  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8918  001EC2  18DE               	xorwf	postinc2,w,c
  8919  001EC4  E104               	bnz	u8330
  8920  001EC6  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8921  001EC8  18DE               	xorwf	postinc2,w,c
  8922  001ECA  B4D8               	btfsc	status,2,c
  8923  001ECC  D00E               	goto	l6174
  8924  001ECE                     u8330:
  8925                           
  8926                           ; BSR set to: 0
  8927                           ;ff.c: 3171:    fp->dsect = nsect;
  8928  001ECE  EE20 F016          	lfsr	2,22
  8929  001ED2  516D               	movf	f_lseek@fp& (0+255),w,b
  8930  001ED4  26D9               	addwf	fsr2l,f,c
  8931  001ED6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8932  001ED8  22DA               	addwfc	fsr2h,f,c
  8933  001EDA  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8934  001EDE  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8935  001EE2  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8936  001EE6  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8937  001EEA                     l6174:
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  8941  001EEA  EE20 F006          	lfsr	2,6
  8942  001EEE  516D               	movf	f_lseek@fp& (0+255),w,b
  8943  001EF0  26D9               	addwf	fsr2l,f,c
  8944  001EF2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8945  001EF4  22DA               	addwfc	fsr2h,f,c
  8946  001EF6  EE10 F00A          	lfsr	1,10
  8947  001EFA  516D               	movf	f_lseek@fp& (0+255),w,b
  8948  001EFC  26E1               	addwf	fsr1l,f,c
  8949  001EFE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8950  001F00  22E2               	addwfc	fsr1h,f,c
  8951  001F02  50DE               	movf	postinc2,w,c
  8952  001F04  5CE6               	subwf	postinc1,w,c
  8953  001F06  50DE               	movf	postinc2,w,c
  8954  001F08  58E6               	subwfb	postinc1,w,c
  8955  001F0A  50DE               	movf	postinc2,w,c
  8956  001F0C  58E6               	subwfb	postinc1,w,c
  8957  001F0E  50DE               	movf	postinc2,w,c
  8958  001F10  58E6               	subwfb	postinc1,w,c
  8959  001F12  B0D8               	btfsc	status,0,c
  8960  001F14  D521               	goto	u8110
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  8964  001F16  EE20 F006          	lfsr	2,6
  8965  001F1A  516D               	movf	f_lseek@fp& (0+255),w,b
  8966  001F1C  26D9               	addwf	fsr2l,f,c
  8967  001F1E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8968  001F20  22DA               	addwfc	fsr2h,f,c
  8969  001F22  EE10 F00A          	lfsr	1,10
  8970  001F26  516D               	movf	f_lseek@fp& (0+255),w,b
  8971  001F28  26E1               	addwf	fsr1l,f,c
  8972  001F2A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8973  001F2C  22E2               	addwfc	fsr1h,f,c
  8974  001F2E  CFDE FFE6          	movff	postinc2,postinc1
  8975  001F32  CFDE FFE6          	movff	postinc2,postinc1
  8976  001F36  CFDE FFE6          	movff	postinc2,postinc1
  8977  001F3A  CFDE FFE6          	movff	postinc2,postinc1
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;ff.c: 3176:    fp->flag |= 0x20;
  8981  001F3E  EE20 F004          	lfsr	2,4
  8982  001F42  516D               	movf	f_lseek@fp& (0+255),w,b
  8983  001F44  26D9               	addwf	fsr2l,f,c
  8984  001F46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8985  001F48  22DA               	addwfc	fsr2h,f,c
  8986  001F4A  0E00               	movlw	0
  8987  001F4C  8ADB               	bsf	plusw2,5,c
  8988  001F4E  D504               	goto	u8110
  8989  001F50                     __end_of_f_lseek:
  8990                           	opt callstack 0
  8991                           
  8992 ;; *************** function _create_chain *****************
  8993 ;; Defined at:
  8994 ;;		line 990 in file "ff.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  fs              2   85[COMRAM] PTR struct .
  8997 ;;		 -> NULL(0), FatFs(558), 
  8998 ;;  clst            4   87[COMRAM] unsigned long 
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;  cs              4    9[BANK0 ] unsigned long 
  9001 ;;  ncl             4    5[BANK0 ] unsigned long 
  9002 ;;  scl             4    1[BANK0 ] unsigned long 
  9003 ;;  res             1    0[BANK0 ] enum E93
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  4   85[COMRAM] unsigned long 
  9006 ;; Registers used:
  9007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9013 ;;      Params:         6       0       0       0       0       0       0       0       0
  9014 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9015 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9016 ;;      Totals:        10      13       0       0       0       0       0       0       0
  9017 ;;Total ram usage:       23 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    9
  9020 ;; This function calls:
  9021 ;;		_get_fat
  9022 ;;		_put_fat
  9023 ;; This function is called by:
  9024 ;;		_dir_next
  9025 ;;		_f_write
  9026 ;;		_f_lseek
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text23
  9031  003356                     __ptext23:
  9032                           	opt callstack 0
  9033  003356                     _create_chain:
  9034                           	opt callstack 19
  9035                           
  9036                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;incstack = 0
  9040  003356  5058               	movf	create_chain@clst,w,c
  9041  003358  1059               	iorwf	create_chain@clst+1,w,c
  9042  00335A  105A               	iorwf	create_chain@clst+2,w,c
  9043  00335C  105B               	iorwf	create_chain@clst+3,w,c
  9044  00335E  A4D8               	btfss	status,2,c
  9045  003360  D02E               	goto	l4520
  9046                           
  9047                           ;ff.c: 1000:   scl = fs->last_clust;
  9048  003362  EE20 F00A          	lfsr	2,10
  9049  003366  5056               	movf	create_chain@fs,w,c
  9050  003368  26D9               	addwf	fsr2l,f,c
  9051  00336A  5057               	movf	create_chain@fs+1,w,c
  9052  00336C  22DA               	addwfc	fsr2h,f,c
  9053  00336E  CFDE F061          	movff	postinc2,create_chain@scl
  9054  003372  CFDE F062          	movff	postinc2,create_chain@scl+1
  9055  003376  CFDE F063          	movff	postinc2,create_chain@scl+2
  9056  00337A  CFDE F064          	movff	postinc2,create_chain@scl+3
  9057                           
  9058                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  9059  00337E  0100               	movlb	0	; () banked
  9060  003380  5161               	movf	create_chain@scl& (0+255),w,b
  9061  003382  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9062  003384  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9063  003386  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9064  003388  B4D8               	btfsc	status,2,c
  9065  00338A  D010               	goto	u5370
  9066                           
  9067                           ; BSR set to: 0
  9068  00338C  EE20 F012          	lfsr	2,18
  9069  003390  5056               	movf	create_chain@fs,w,c
  9070  003392  26D9               	addwf	fsr2l,f,c
  9071  003394  5057               	movf	create_chain@fs+1,w,c
  9072  003396  22DA               	addwfc	fsr2h,f,c
  9073  003398  50DE               	movf	postinc2,w,c
  9074  00339A  5D61               	subwf	create_chain@scl& (0+255),w,b
  9075  00339C  50DE               	movf	postinc2,w,c
  9076  00339E  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9077  0033A0  50DE               	movf	postinc2,w,c
  9078  0033A2  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9079  0033A4  50DE               	movf	postinc2,w,c
  9080  0033A6  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9081  0033A8  A0D8               	btfss	status,0,c
  9082  0033AA  D05B               	goto	l382
  9083  0033AC                     u5370:
  9084                           
  9085                           ; BSR set to: 0
  9086  0033AC  0E01               	movlw	1
  9087  0033AE  6F61               	movwf	create_chain@scl& (0+255),b
  9088  0033B0  0E00               	movlw	0
  9089  0033B2  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9090  0033B4  0E00               	movlw	0
  9091  0033B6  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9092  0033B8  0E00               	movlw	0
  9093  0033BA  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9094  0033BC  D052               	goto	l382
  9095  0033BE                     l4520:
  9096                           
  9097                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9098  0033BE  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9099  0033C2  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9100  0033C6  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9101  0033CA  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9102  0033CE  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9103  0033D2  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9104  0033D6  EC0F  F016         	call	_get_fat	;wreg free
  9105  0033DA  C03B  F069         	movff	?_get_fat,create_chain@cs
  9106  0033DE  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9107  0033E2  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9108  0033E6  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9109                           
  9110                           ;ff.c: 1005:   if (cs < 2) return 1;
  9111  0033EA  0100               	movlb	0	; () banked
  9112  0033EC  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9113  0033EE  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9114  0033F0  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9115  0033F2  E10D               	bnz	l4528
  9116  0033F4  0E02               	movlw	2
  9117  0033F6  5D69               	subwf	create_chain@cs& (0+255),w,b
  9118  0033F8  B0D8               	btfsc	status,0,c
  9119  0033FA  D009               	goto	l4528
  9120                           
  9121                           ; BSR set to: 0
  9122  0033FC  0E01               	movlw	1
  9123  0033FE  6E56               	movwf	?_create_chain,c
  9124  003400  0E00               	movlw	0
  9125  003402  6E57               	movwf	?_create_chain+1,c
  9126  003404  0E00               	movlw	0
  9127  003406  6E58               	movwf	?_create_chain+2,c
  9128  003408  0E00               	movlw	0
  9129  00340A  6E59               	movwf	?_create_chain+3,c
  9130  00340C  0012               	return	
  9131  00340E                     l4528:
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9135  00340E  2969               	incf	create_chain@cs& (0+255),w,b
  9136  003410  E110               	bnz	l4532
  9137  003412  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9138  003414  E10E               	bnz	l4532
  9139  003416  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9140  003418  E10C               	bnz	l4532
  9141  00341A  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9142  00341C  A4D8               	btfss	status,2,c
  9143  00341E  D009               	goto	l4532
  9144  003420                     u5390:
  9145                           
  9146                           ; BSR set to: 0
  9147  003420  C069  F056         	movff	create_chain@cs,?_create_chain
  9148  003424  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9149  003428  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9150  00342C  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9151  003430  0012               	return	
  9152  003432                     l4532:
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9156  003432  EE20 F012          	lfsr	2,18
  9157  003436  5056               	movf	create_chain@fs,w,c
  9158  003438  26D9               	addwf	fsr2l,f,c
  9159  00343A  5057               	movf	create_chain@fs+1,w,c
  9160  00343C  22DA               	addwfc	fsr2h,f,c
  9161  00343E  50DE               	movf	postinc2,w,c
  9162  003440  5D69               	subwf	create_chain@cs& (0+255),w,b
  9163  003442  50DE               	movf	postinc2,w,c
  9164  003444  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9165  003446  50DE               	movf	postinc2,w,c
  9166  003448  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9167  00344A  50DE               	movf	postinc2,w,c
  9168  00344C  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9169  00344E  A0D8               	btfss	status,0,c
  9170  003450  D7E7               	goto	u5390
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;ff.c: 1008:   scl = clst;
  9174  003452  C058  F061         	movff	create_chain@clst,create_chain@scl
  9175  003456  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9176  00345A  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9177  00345E  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9178  003462                     l382:
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;ff.c: 1011:  ncl = scl;
  9182  003462  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9183  003466  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9184  00346A  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9185  00346E  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9186  003472                     l4536:
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;ff.c: 1013:   ncl++;
  9190  003472  0E01               	movlw	1
  9191  003474  2765               	addwf	create_chain@ncl& (0+255),f,b
  9192  003476  0E00               	movlw	0
  9193  003478  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9194  00347A  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9195  00347C  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9199  00347E  EE20 F012          	lfsr	2,18
  9200  003482  5056               	movf	create_chain@fs,w,c
  9201  003484  26D9               	addwf	fsr2l,f,c
  9202  003486  5057               	movf	create_chain@fs+1,w,c
  9203  003488  22DA               	addwfc	fsr2h,f,c
  9204  00348A  50DE               	movf	postinc2,w,c
  9205  00348C  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9206  00348E  50DE               	movf	postinc2,w,c
  9207  003490  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9208  003492  50DE               	movf	postinc2,w,c
  9209  003494  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9210  003496  50DE               	movf	postinc2,w,c
  9211  003498  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9212  00349A  A0D8               	btfss	status,0,c
  9213  00349C  D019               	goto	l4548
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;ff.c: 1015:    ncl = 2;
  9217  00349E  0E02               	movlw	2
  9218  0034A0  6F65               	movwf	create_chain@ncl& (0+255),b
  9219  0034A2  0E00               	movlw	0
  9220  0034A4  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9221  0034A6  0E00               	movlw	0
  9222  0034A8  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9223  0034AA  0E00               	movlw	0
  9224  0034AC  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9228  0034AE  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9229  0034B0  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9230  0034B2  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9231  0034B4  E10D               	bnz	l4548
  9232  0034B6  0E02               	movlw	2
  9233  0034B8  5D61               	subwf	create_chain@scl& (0+255),w,b
  9234  0034BA  B0D8               	btfsc	status,0,c
  9235  0034BC  D009               	goto	l4548
  9236  0034BE                     u5420:
  9237                           
  9238                           ; BSR set to: 0
  9239  0034BE  0E00               	movlw	0
  9240  0034C0  6E56               	movwf	?_create_chain,c
  9241  0034C2  0E00               	movlw	0
  9242  0034C4  6E57               	movwf	?_create_chain+1,c
  9243  0034C6  0E00               	movlw	0
  9244  0034C8  6E58               	movwf	?_create_chain+2,c
  9245  0034CA  0E00               	movlw	0
  9246  0034CC  6E59               	movwf	?_create_chain+3,c
  9247  0034CE  0012               	return	
  9248  0034D0                     l4548:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9252  0034D0  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9253  0034D4  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9254  0034D8  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9255  0034DC  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9256  0034E0  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9257  0034E4  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9258  0034E8  EC0F  F016         	call	_get_fat	;wreg free
  9259  0034EC  C03B  F069         	movff	?_get_fat,create_chain@cs
  9260  0034F0  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9261  0034F4  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9262  0034F8  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9263                           
  9264                           ;ff.c: 1019:   if (cs == 0) break;
  9265  0034FC  0100               	movlb	0	; () banked
  9266  0034FE  5169               	movf	create_chain@cs& (0+255),w,b
  9267  003500  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9268  003502  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9269  003504  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9270  003506  B4D8               	btfsc	status,2,c
  9271  003508  D01D               	goto	l4564
  9272                           
  9273                           ; BSR set to: 0
  9274                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9275  00350A  2969               	incf	create_chain@cs& (0+255),w,b
  9276  00350C  E107               	bnz	u5440
  9277  00350E  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9278  003510  E105               	bnz	u5440
  9279  003512  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9280  003514  E103               	bnz	u5440
  9281  003516  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9282  003518  B4D8               	btfsc	status,2,c
  9283  00351A  D782               	goto	u5390
  9284  00351C                     u5440:
  9285                           
  9286                           ; BSR set to: 0
  9287  00351C  0569               	decf	create_chain@cs& (0+255),w,b
  9288  00351E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9289  003520  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9290  003522  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9291  003524  B4D8               	btfsc	status,2,c
  9292  003526  D77C               	goto	u5390
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9296  003528  5161               	movf	create_chain@scl& (0+255),w,b
  9297  00352A  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9298  00352C  E1A2               	bnz	l4536
  9299  00352E  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9300  003530  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9301  003532  E19F               	bnz	l4536
  9302  003534  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9303  003536  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9304  003538  E19C               	bnz	l4536
  9305  00353A  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9306  00353C  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9307  00353E  B4D8               	btfsc	status,2,c
  9308  003540  D7BE               	goto	u5420
  9309  003542  D797               	goto	l4536
  9310  003544                     l4564:
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9314  003544  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9315  003548  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9316  00354C  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9317  003550  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9318  003554  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9319  003558  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9320  00355C  0EFF               	movlw	255
  9321  00355E  6E41               	movwf	put_fat@val,c
  9322  003560  0EFF               	movlw	255
  9323  003562  6E42               	movwf	put_fat@val+1,c
  9324  003564  0EFF               	movlw	255
  9325  003566  6E43               	movwf	put_fat@val+2,c
  9326  003568  0E0F               	movlw	15
  9327  00356A  6E44               	movwf	put_fat@val+3,c
  9328  00356C  ECF7  F011         	call	_put_fat	;wreg free
  9329  003570  0100               	movlb	0	; () banked
  9330  003572  6F60               	movwf	create_chain@res& (0+255),b
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9334  003574  5160               	movf	create_chain@res& (0+255),w,b
  9335  003576  A4D8               	btfss	status,2,c
  9336  003578  D01E               	goto	l4572
  9337                           
  9338                           ; BSR set to: 0
  9339  00357A  5058               	movf	create_chain@clst,w,c
  9340  00357C  1059               	iorwf	create_chain@clst+1,w,c
  9341  00357E  105A               	iorwf	create_chain@clst+2,w,c
  9342  003580  105B               	iorwf	create_chain@clst+3,w,c
  9343  003582  B4D8               	btfsc	status,2,c
  9344  003584  D018               	goto	l4572
  9345                           
  9346                           ; BSR set to: 0
  9347                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9348  003586  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9349  00358A  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9350  00358E  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9351  003592  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9352  003596  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9353  00359A  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9354  00359E  C065  F041         	movff	create_chain@ncl,put_fat@val
  9355  0035A2  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9356  0035A6  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9357  0035AA  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9358  0035AE  ECF7  F011         	call	_put_fat	;wreg free
  9359  0035B2  0100               	movlb	0	; () banked
  9360  0035B4  6F60               	movwf	create_chain@res& (0+255),b
  9361  0035B6                     l4572:
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;ff.c: 1029:  if (res == FR_OK) {
  9365  0035B6  5160               	movf	create_chain@res& (0+255),w,b
  9366  0035B8  A4D8               	btfss	status,2,c
  9367  0035BA  D031               	goto	l4578
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;ff.c: 1030:   fs->last_clust = ncl;
  9371  0035BC  EE20 F00A          	lfsr	2,10
  9372  0035C0  5056               	movf	create_chain@fs,w,c
  9373  0035C2  26D9               	addwf	fsr2l,f,c
  9374  0035C4  5057               	movf	create_chain@fs+1,w,c
  9375  0035C6  22DA               	addwfc	fsr2h,f,c
  9376  0035C8  C065  FFDE         	movff	create_chain@ncl,postinc2
  9377  0035CC  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9378  0035D0  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9379  0035D4  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9380                           
  9381                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9382  0035D8  EE20 F00E          	lfsr	2,14
  9383  0035DC  5056               	movf	create_chain@fs,w,c
  9384  0035DE  26D9               	addwf	fsr2l,f,c
  9385  0035E0  5057               	movf	create_chain@fs+1,w,c
  9386  0035E2  22DA               	addwfc	fsr2h,f,c
  9387  0035E4  28DE               	incf	postinc2,w,c
  9388  0035E6  E107               	bnz	u5500
  9389  0035E8  28DE               	incf	postinc2,w,c
  9390  0035EA  E105               	bnz	u5500
  9391  0035EC  28DE               	incf	postinc2,w,c
  9392  0035EE  E103               	bnz	u5500
  9393  0035F0  28DE               	incf	postinc2,w,c
  9394  0035F2  B4D8               	btfsc	status,2,c
  9395  0035F4  D024               	goto	l399
  9396  0035F6                     u5500:
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;ff.c: 1032:    fs->free_clust--;
  9400  0035F6  EE20 F00E          	lfsr	2,14
  9401  0035FA  5056               	movf	create_chain@fs,w,c
  9402  0035FC  26D9               	addwf	fsr2l,f,c
  9403  0035FE  5057               	movf	create_chain@fs+1,w,c
  9404  003600  22DA               	addwfc	fsr2h,f,c
  9405  003602  06DE               	decf	postinc2,f,c
  9406  003604  0E00               	movlw	0
  9407  003606  5ADE               	subwfb	postinc2,f,c
  9408  003608  5ADE               	subwfb	postinc2,f,c
  9409  00360A  5ADE               	subwfb	postinc2,f,c
  9410                           
  9411                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9412  00360C  EE20 F005          	lfsr	2,5
  9413  003610  5056               	movf	create_chain@fs,w,c
  9414  003612  26D9               	addwf	fsr2l,f,c
  9415  003614  5057               	movf	create_chain@fs+1,w,c
  9416  003616  22DA               	addwfc	fsr2h,f,c
  9417  003618  0E00               	movlw	0
  9418  00361A  80DB               	bsf	plusw2,0,c
  9419  00361C  D010               	goto	l399
  9420  00361E                     l4578:
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9424  00361E  0560               	decf	create_chain@res& (0+255),w,b
  9425  003620  B4D8               	btfsc	status,2,c
  9426  003622  D009               	goto	l401
  9427                           
  9428                           ; BSR set to: 0
  9429  003624  0E01               	movlw	1
  9430  003626  6F65               	movwf	create_chain@ncl& (0+255),b
  9431  003628  0E00               	movlw	0
  9432  00362A  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9433  00362C  0E00               	movlw	0
  9434  00362E  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9435  003630  0E00               	movlw	0
  9436  003632  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9437  003634  D004               	goto	l399
  9438  003636                     l401:
  9439                           
  9440                           ; BSR set to: 0
  9441  003636  6965               	setf	create_chain@ncl& (0+255),b
  9442  003638  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9443  00363A  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9444  00363C  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9445  00363E                     l399:
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;ff.c: 1039:  return ncl;
  9449  00363E  C065  F056         	movff	create_chain@ncl,?_create_chain
  9450  003642  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9451  003646  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9452  00364A  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9453                           
  9454                           ; BSR set to: 0
  9455  00364E  0012               	return		;funcret
  9456  003650                     __end_of_create_chain:
  9457                           	opt callstack 0
  9458                           
  9459 ;; *************** function _put_fat *****************
  9460 ;; Defined at:
  9461 ;;		line 873 in file "ff.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;  fs              2   58[COMRAM] PTR struct .
  9464 ;;		 -> NULL(0), FatFs(558), 
  9465 ;;  clst            4   60[COMRAM] unsigned long 
  9466 ;;  val             4   64[COMRAM] unsigned long 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  p               2   83[COMRAM] PTR unsigned char 
  9469 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9470 ;;  bc              2   80[COMRAM] unsigned short 
  9471 ;;  res             1   82[COMRAM] enum E93
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  1    wreg      enum E93
  9474 ;; Registers used:
  9475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9481 ;;      Params:        10       0       0       0       0       0       0       0       0
  9482 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9483 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9484 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9485 ;;Total ram usage:       27 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    8
  9488 ;; This function calls:
  9489 ;;		_move_window
  9490 ;; This function is called by:
  9491 ;;		_remove_chain
  9492 ;;		_create_chain
  9493 ;; This function uses a non-reentrant model
  9494 ;;
  9495                           
  9496                           	psect	text24
  9497  0023EE                     __ptext24:
  9498                           	opt callstack 0
  9499  0023EE                     _put_fat:
  9500                           	opt callstack 19
  9501                           
  9502                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9503                           
  9504                           ; BSR set to: 0
  9505                           ;incstack = 0
  9506  0023EE  5040               	movf	put_fat@clst+3,w,c
  9507  0023F0  103F               	iorwf	put_fat@clst+2,w,c
  9508  0023F2  103E               	iorwf	put_fat@clst+1,w,c
  9509  0023F4  E104               	bnz	u5190
  9510  0023F6  0E02               	movlw	2
  9511  0023F8  5C3D               	subwf	put_fat@clst,w,c
  9512  0023FA  A0D8               	btfss	status,0,c
  9513  0023FC  D010               	goto	u5200
  9514  0023FE                     u5190:
  9515  0023FE  EE20 F012          	lfsr	2,18
  9516  002402  503B               	movf	put_fat@fs,w,c
  9517  002404  26D9               	addwf	fsr2l,f,c
  9518  002406  503C               	movf	put_fat@fs+1,w,c
  9519  002408  22DA               	addwfc	fsr2h,f,c
  9520  00240A  50DE               	movf	postinc2,w,c
  9521  00240C  5C3D               	subwf	put_fat@clst,w,c
  9522  00240E  50DE               	movf	postinc2,w,c
  9523  002410  583E               	subwfb	put_fat@clst+1,w,c
  9524  002412  50DE               	movf	postinc2,w,c
  9525  002414  583F               	subwfb	put_fat@clst+2,w,c
  9526  002416  50DE               	movf	postinc2,w,c
  9527  002418  5840               	subwfb	put_fat@clst+3,w,c
  9528  00241A  A0D8               	btfss	status,0,c
  9529  00241C  D1E5               	goto	l4470
  9530  00241E                     u5200:
  9531                           
  9532                           ;ff.c: 885:   res = FR_INT_ERR;
  9533  00241E  0E02               	movlw	2
  9534  002420  6E53               	movwf	put_fat@res,c
  9535                           
  9536                           ;ff.c: 887:  } else {
  9537  002422  D1F8               	goto	l4472
  9538  002424                     l343:
  9539                           
  9540                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9541  002424  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9542  002428  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9543  00242C  90D8               	bcf	status,0,c
  9544  00242E  3052               	rrcf	put_fat@bc+1,w,c
  9545  002430  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9546  002432  3051               	rrcf	put_fat@bc,w,c
  9547  002434  6E45               	movwf	??_put_fat& (0+255),c
  9548  002436  5045               	movf	??_put_fat,w,c
  9549  002438  2651               	addwf	put_fat@bc,f,c
  9550  00243A  5046               	movf	??_put_fat+1,w,c
  9551  00243C  2252               	addwfc	put_fat@bc+1,f,c
  9552                           
  9553                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9554  00243E  C03B  F030         	movff	put_fat@fs,move_window@fs
  9555  002442  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9556  002446  EE20 F01E          	lfsr	2,30
  9557  00244A  503B               	movf	put_fat@fs,w,c
  9558  00244C  26D9               	addwf	fsr2l,f,c
  9559  00244E  503C               	movf	put_fat@fs+1,w,c
  9560  002450  22DA               	addwfc	fsr2h,f,c
  9561  002452  CFDE F045          	movff	postinc2,??_put_fat
  9562  002456  CFDE F046          	movff	postinc2,??_put_fat+1
  9563  00245A  CFDE F047          	movff	postinc2,??_put_fat+2
  9564  00245E  CFDE F048          	movff	postinc2,??_put_fat+3
  9565  002462  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9566  002466  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9567  00246A  0E09               	movlw	9
  9568  00246C  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9569  00246E                     u5215:
  9570  00246E  90D8               	bcf	status,0,c
  9571  002470  324A               	rrcf	??_put_fat+5,f,c
  9572  002472  3249               	rrcf	??_put_fat+4,f,c
  9573  002474  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9574  002476  D7FB               	goto	u5215
  9575  002478  5049               	movf	??_put_fat+4,w,c
  9576  00247A  2445               	addwf	??_put_fat,w,c
  9577  00247C  6E32               	movwf	move_window@sector,c
  9578  00247E  504A               	movf	??_put_fat+5,w,c
  9579  002480  2046               	addwfc	??_put_fat+1,w,c
  9580  002482  6E33               	movwf	move_window@sector+1,c
  9581  002484  0E00               	movlw	0
  9582  002486  2047               	addwfc	??_put_fat+2,w,c
  9583  002488  6E34               	movwf	move_window@sector+2,c
  9584  00248A  0E00               	movlw	0
  9585  00248C  2048               	addwfc	??_put_fat+3,w,c
  9586  00248E  6E35               	movwf	move_window@sector+3,c
  9587  002490  EC82  F027         	call	_move_window	;wreg free
  9588  002494  6E53               	movwf	put_fat@res,c
  9589                           
  9590                           ;ff.c: 892:    if (res != FR_OK) break;
  9591  002496  5053               	movf	put_fat@res,w,c
  9592  002498  A4D8               	btfss	status,2,c
  9593  00249A  D1BC               	goto	l4472
  9594                           
  9595                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9596  00249C  0EFF               	movlw	255
  9597  00249E  6E45               	movwf	??_put_fat& (0+255),c
  9598  0024A0  0E01               	movlw	1
  9599  0024A2  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9600  0024A4  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9601  0024A8  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9602  0024AC  5045               	movf	??_put_fat,w,c
  9603  0024AE  1647               	andwf	??_put_fat+2,f,c
  9604  0024B0  5046               	movf	??_put_fat+1,w,c
  9605  0024B2  1648               	andwf	??_put_fat+3,f,c
  9606  0024B4  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9607  0024B8  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9608  0024BC  5047               	movf	??_put_fat+2,w,c
  9609  0024BE  2649               	addwf	??_put_fat+4,f,c
  9610  0024C0  5048               	movf	??_put_fat+3,w,c
  9611  0024C2  224A               	addwfc	??_put_fat+5,f,c
  9612  0024C4  0E2E               	movlw	46
  9613  0024C6  2449               	addwf	??_put_fat+4,w,c
  9614  0024C8  6E54               	movwf	put_fat@p,c
  9615  0024CA  0E00               	movlw	0
  9616  0024CC  204A               	addwfc	??_put_fat+5,w,c
  9617  0024CE  6E55               	movwf	put_fat@p+1,c
  9618  0024D0  4A51               	infsnz	put_fat@bc,f,c
  9619  0024D2  2A52               	incf	put_fat@bc+1,f,c
  9620                           
  9621                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9622  0024D4  B03D               	btfsc	put_fat@clst,0,c
  9623  0024D6  D004               	goto	l4424
  9624  0024D8  C041  F04D         	movff	put_fat@val,_put_fat$594
  9625  0024DC  6A4E               	clrf	_put_fat$594+1,c
  9626  0024DE  D01A               	goto	l4426
  9627  0024E0                     l4424:
  9628  0024E0  5041               	movf	put_fat@val,w,c
  9629  0024E2  6E45               	movwf	??_put_fat& (0+255),c
  9630  0024E4  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9631  0024E6  3A45               	swapf	??_put_fat,f,c
  9632  0024E8  3A46               	swapf	??_put_fat+1,f,c
  9633  0024EA  0EF0               	movlw	240
  9634  0024EC  1646               	andwf	??_put_fat+1,f,c
  9635  0024EE  5045               	movf	??_put_fat,w,c
  9636  0024F0  0B0F               	andlw	15
  9637  0024F2  1246               	iorwf	??_put_fat+1,f,c
  9638  0024F4  0EF0               	movlw	240
  9639  0024F6  1645               	andwf	??_put_fat,f,c
  9640  0024F8  C054  FFD9         	movff	put_fat@p,fsr2l
  9641  0024FC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9642  002500  50DF               	movf	indf2,w,c
  9643  002502  0B0F               	andlw	15
  9644  002504  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9645  002506  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9646  002508  5045               	movf	??_put_fat,w,c
  9647  00250A  1047               	iorwf	??_put_fat+2,w,c
  9648  00250C  6E4D               	movwf	_put_fat$594,c
  9649  00250E  5046               	movf	??_put_fat+1,w,c
  9650  002510  1048               	iorwf	??_put_fat+3,w,c
  9651  002512  6E4E               	movwf	_put_fat$594+1,c
  9652  002514                     l4426:
  9653  002514  C054  FFD9         	movff	put_fat@p,fsr2l
  9654  002518  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9655  00251C  C04D  FFDF         	movff	_put_fat$594,indf2
  9656                           
  9657                           ;ff.c: 895:    fs->wflag = 1;
  9658  002520  EE20 F004          	lfsr	2,4
  9659  002524  503B               	movf	put_fat@fs,w,c
  9660  002526  26D9               	addwf	fsr2l,f,c
  9661  002528  503C               	movf	put_fat@fs+1,w,c
  9662  00252A  22DA               	addwfc	fsr2h,f,c
  9663  00252C  0E01               	movlw	1
  9664  00252E  6EDF               	movwf	indf2,c
  9665                           
  9666                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9667  002530  C03B  F030         	movff	put_fat@fs,move_window@fs
  9668  002534  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9669  002538  EE20 F01E          	lfsr	2,30
  9670  00253C  503B               	movf	put_fat@fs,w,c
  9671  00253E  26D9               	addwf	fsr2l,f,c
  9672  002540  503C               	movf	put_fat@fs+1,w,c
  9673  002542  22DA               	addwfc	fsr2h,f,c
  9674  002544  CFDE F045          	movff	postinc2,??_put_fat
  9675  002548  CFDE F046          	movff	postinc2,??_put_fat+1
  9676  00254C  CFDE F047          	movff	postinc2,??_put_fat+2
  9677  002550  CFDE F048          	movff	postinc2,??_put_fat+3
  9678  002554  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9679  002558  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9680  00255C  0E09               	movlw	9
  9681  00255E  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9682  002560                     u5245:
  9683  002560  90D8               	bcf	status,0,c
  9684  002562  324A               	rrcf	??_put_fat+5,f,c
  9685  002564  3249               	rrcf	??_put_fat+4,f,c
  9686  002566  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9687  002568  D7FB               	goto	u5245
  9688  00256A  5049               	movf	??_put_fat+4,w,c
  9689  00256C  2445               	addwf	??_put_fat,w,c
  9690  00256E  6E32               	movwf	move_window@sector,c
  9691  002570  504A               	movf	??_put_fat+5,w,c
  9692  002572  2046               	addwfc	??_put_fat+1,w,c
  9693  002574  6E33               	movwf	move_window@sector+1,c
  9694  002576  0E00               	movlw	0
  9695  002578  2047               	addwfc	??_put_fat+2,w,c
  9696  00257A  6E34               	movwf	move_window@sector+2,c
  9697  00257C  0E00               	movlw	0
  9698  00257E  2048               	addwfc	??_put_fat+3,w,c
  9699  002580  6E35               	movwf	move_window@sector+3,c
  9700  002582  EC82  F027         	call	_move_window	;wreg free
  9701  002586  6E53               	movwf	put_fat@res,c
  9702                           
  9703                           ;ff.c: 897:    if (res != FR_OK) break;
  9704  002588  5053               	movf	put_fat@res,w,c
  9705  00258A  A4D8               	btfss	status,2,c
  9706  00258C  D143               	goto	l4472
  9707                           
  9708                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9709  00258E  0EFF               	movlw	255
  9710  002590  6E45               	movwf	??_put_fat& (0+255),c
  9711  002592  0E01               	movlw	1
  9712  002594  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9713  002596  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9714  00259A  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9715  00259E  5045               	movf	??_put_fat,w,c
  9716  0025A0  1647               	andwf	??_put_fat+2,f,c
  9717  0025A2  5046               	movf	??_put_fat+1,w,c
  9718  0025A4  1648               	andwf	??_put_fat+3,f,c
  9719  0025A6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9720  0025AA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9721  0025AE  5047               	movf	??_put_fat+2,w,c
  9722  0025B0  2649               	addwf	??_put_fat+4,f,c
  9723  0025B2  5048               	movf	??_put_fat+3,w,c
  9724  0025B4  224A               	addwfc	??_put_fat+5,f,c
  9725  0025B6  0E2E               	movlw	46
  9726  0025B8  2449               	addwf	??_put_fat+4,w,c
  9727  0025BA  6E54               	movwf	put_fat@p,c
  9728  0025BC  0E00               	movlw	0
  9729  0025BE  204A               	addwfc	??_put_fat+5,w,c
  9730  0025C0  6E55               	movwf	put_fat@p+1,c
  9731                           
  9732                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9733  0025C2  B03D               	btfsc	put_fat@clst,0,c
  9734  0025C4  D01B               	goto	l4442
  9735  0025C6  C041  F045         	movff	put_fat@val,??_put_fat
  9736  0025CA  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9737  0025CE  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9738  0025D2  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9739  0025D6  C046  F045         	movff	??_put_fat+1,??_put_fat
  9740  0025DA  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9741  0025DE  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9742  0025E2  6A48               	clrf	??_put_fat+3,c
  9743  0025E4  0E0F               	movlw	15
  9744  0025E6  1645               	andwf	??_put_fat,f,c
  9745  0025E8  C054  FFD9         	movff	put_fat@p,fsr2l
  9746  0025EC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9747  0025F0  50DF               	movf	indf2,w,c
  9748  0025F2  0BF0               	andlw	240
  9749  0025F4  1045               	iorwf	??_put_fat,w,c
  9750  0025F6  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9751  0025F8  5049               	movf	??_put_fat+4,w,c
  9752  0025FA  D012               	goto	L9
  9753  0025FC                     l4442:
  9754  0025FC  C041  F045         	movff	put_fat@val,??_put_fat
  9755  002600  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9756  002604  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9757  002608  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9758  00260C  0E05               	movlw	5
  9759  00260E  D005               	goto	u5270
  9760  002610                     u5275:
  9761  002610  90D8               	bcf	status,0,c
  9762  002612  3248               	rrcf	??_put_fat+3,f,c
  9763  002614  3247               	rrcf	??_put_fat+2,f,c
  9764  002616  3246               	rrcf	??_put_fat+1,f,c
  9765  002618  3245               	rrcf	??_put_fat,f,c
  9766  00261A                     u5270:
  9767  00261A  2EE8               	decfsz	wreg,f,c
  9768  00261C  D7F9               	goto	u5275
  9769  00261E  5045               	movf	??_put_fat,w,c
  9770  002620                     L9:
  9771  002620  6E4F               	movwf	_put_fat$595,c
  9772  002622  6A50               	clrf	_put_fat$595+1,c
  9773  002624  C054  FFD9         	movff	put_fat@p,fsr2l
  9774  002628  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9775  00262C  C04F  FFDF         	movff	_put_fat$595,indf2
  9776  002630  D0D2               	goto	l4466
  9777  002632                     l4446:
  9778                           
  9779                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9780  002632  C03B  F030         	movff	put_fat@fs,move_window@fs
  9781  002636  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9782  00263A  EE20 F01E          	lfsr	2,30
  9783  00263E  503B               	movf	put_fat@fs,w,c
  9784  002640  26D9               	addwf	fsr2l,f,c
  9785  002642  503C               	movf	put_fat@fs+1,w,c
  9786  002644  22DA               	addwfc	fsr2h,f,c
  9787  002646  CFDE F045          	movff	postinc2,??_put_fat
  9788  00264A  CFDE F046          	movff	postinc2,??_put_fat+1
  9789  00264E  CFDE F047          	movff	postinc2,??_put_fat+2
  9790  002652  CFDE F048          	movff	postinc2,??_put_fat+3
  9791  002656  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9792  00265A  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9793  00265E  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9794  002662  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9795  002666  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9796  00266A  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9797  00266E  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9798  002672  6A4C               	clrf	??_put_fat+7,c
  9799  002674  5045               	movf	??_put_fat,w,c
  9800  002676  2449               	addwf	??_put_fat+4,w,c
  9801  002678  6E32               	movwf	move_window@sector,c
  9802  00267A  5046               	movf	??_put_fat+1,w,c
  9803  00267C  204A               	addwfc	??_put_fat+5,w,c
  9804  00267E  6E33               	movwf	move_window@sector+1,c
  9805  002680  5047               	movf	??_put_fat+2,w,c
  9806  002682  204B               	addwfc	??_put_fat+6,w,c
  9807  002684  6E34               	movwf	move_window@sector+2,c
  9808  002686  5048               	movf	??_put_fat+3,w,c
  9809  002688  204C               	addwfc	??_put_fat+7,w,c
  9810  00268A  6E35               	movwf	move_window@sector+3,c
  9811  00268C  EC82  F027         	call	_move_window	;wreg free
  9812  002690  6E53               	movwf	put_fat@res,c
  9813                           
  9814                           ;ff.c: 905:    if (res != FR_OK) break;
  9815  002692  5053               	movf	put_fat@res,w,c
  9816  002694  A4D8               	btfss	status,2,c
  9817  002696  D0BE               	goto	l4472
  9818                           
  9819                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9820  002698  0EFF               	movlw	255
  9821  00269A  6E45               	movwf	??_put_fat& (0+255),c
  9822  00269C  0E01               	movlw	1
  9823  00269E  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9824  0026A0  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9825  0026A4  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9826  0026A8  90D8               	bcf	status,0,c
  9827  0026AA  3647               	rlcf	??_put_fat+2,f,c
  9828  0026AC  3648               	rlcf	??_put_fat+3,f,c
  9829  0026AE  5045               	movf	??_put_fat,w,c
  9830  0026B0  1647               	andwf	??_put_fat+2,f,c
  9831  0026B2  5046               	movf	??_put_fat+1,w,c
  9832  0026B4  1648               	andwf	??_put_fat+3,f,c
  9833  0026B6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9834  0026BA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9835  0026BE  5047               	movf	??_put_fat+2,w,c
  9836  0026C0  2649               	addwf	??_put_fat+4,f,c
  9837  0026C2  5048               	movf	??_put_fat+3,w,c
  9838  0026C4  224A               	addwfc	??_put_fat+5,f,c
  9839  0026C6  0E2E               	movlw	46
  9840  0026C8  2449               	addwf	??_put_fat+4,w,c
  9841  0026CA  6E54               	movwf	put_fat@p,c
  9842  0026CC  0E00               	movlw	0
  9843  0026CE  204A               	addwfc	??_put_fat+5,w,c
  9844  0026D0  6E55               	movwf	put_fat@p+1,c
  9845                           
  9846                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  9847  0026D2  C054  FFD9         	movff	put_fat@p,fsr2l
  9848  0026D6  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9849  0026DA  C041  FFDE         	movff	put_fat@val,postinc2
  9850  0026DE  C042  FFDD         	movff	put_fat@val+1,postdec2
  9851  0026E2  D079               	goto	l4466
  9852  0026E4                     l4456:
  9853                           
  9854                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  9855  0026E4  C03B  F030         	movff	put_fat@fs,move_window@fs
  9856  0026E8  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9857  0026EC  EE20 F01E          	lfsr	2,30
  9858  0026F0  503B               	movf	put_fat@fs,w,c
  9859  0026F2  26D9               	addwf	fsr2l,f,c
  9860  0026F4  503C               	movf	put_fat@fs+1,w,c
  9861  0026F6  22DA               	addwfc	fsr2h,f,c
  9862  0026F8  CFDE F045          	movff	postinc2,??_put_fat
  9863  0026FC  CFDE F046          	movff	postinc2,??_put_fat+1
  9864  002700  CFDE F047          	movff	postinc2,??_put_fat+2
  9865  002704  CFDE F048          	movff	postinc2,??_put_fat+3
  9866  002708  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9867  00270C  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9868  002710  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9869  002714  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9870  002718  0E08               	movlw	8
  9871  00271A  D005               	goto	u5290
  9872  00271C                     u5295:
  9873  00271C  90D8               	bcf	status,0,c
  9874  00271E  324C               	rrcf	??_put_fat+7,f,c
  9875  002720  324B               	rrcf	??_put_fat+6,f,c
  9876  002722  324A               	rrcf	??_put_fat+5,f,c
  9877  002724  3249               	rrcf	??_put_fat+4,f,c
  9878  002726                     u5290:
  9879  002726  2EE8               	decfsz	wreg,f,c
  9880  002728  D7F9               	goto	u5295
  9881  00272A  5045               	movf	??_put_fat,w,c
  9882  00272C  2449               	addwf	??_put_fat+4,w,c
  9883  00272E  6E32               	movwf	move_window@sector,c
  9884  002730  5046               	movf	??_put_fat+1,w,c
  9885  002732  204A               	addwfc	??_put_fat+5,w,c
  9886  002734  6E33               	movwf	move_window@sector+1,c
  9887  002736  5047               	movf	??_put_fat+2,w,c
  9888  002738  204B               	addwfc	??_put_fat+6,w,c
  9889  00273A  6E34               	movwf	move_window@sector+2,c
  9890  00273C  5048               	movf	??_put_fat+3,w,c
  9891  00273E  204C               	addwfc	??_put_fat+7,w,c
  9892  002740  6E35               	movwf	move_window@sector+3,c
  9893  002742  EC82  F027         	call	_move_window	;wreg free
  9894  002746  6E53               	movwf	put_fat@res,c
  9895                           
  9896                           ;ff.c: 913:    if (res != FR_OK) break;
  9897  002748  5053               	movf	put_fat@res,w,c
  9898  00274A  A4D8               	btfss	status,2,c
  9899  00274C  D063               	goto	l4472
  9900                           
  9901                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  9902  00274E  0EFF               	movlw	255
  9903  002750  6E45               	movwf	??_put_fat& (0+255),c
  9904  002752  0E01               	movlw	1
  9905  002754  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9906  002756  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9907  00275A  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9908  00275E  90D8               	bcf	status,0,c
  9909  002760  3647               	rlcf	??_put_fat+2,f,c
  9910  002762  3648               	rlcf	??_put_fat+3,f,c
  9911  002764  90D8               	bcf	status,0,c
  9912  002766  3647               	rlcf	??_put_fat+2,f,c
  9913  002768  3648               	rlcf	??_put_fat+3,f,c
  9914  00276A  5045               	movf	??_put_fat,w,c
  9915  00276C  1647               	andwf	??_put_fat+2,f,c
  9916  00276E  5046               	movf	??_put_fat+1,w,c
  9917  002770  1648               	andwf	??_put_fat+3,f,c
  9918  002772  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9919  002776  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9920  00277A  5047               	movf	??_put_fat+2,w,c
  9921  00277C  2649               	addwf	??_put_fat+4,f,c
  9922  00277E  5048               	movf	??_put_fat+3,w,c
  9923  002780  224A               	addwfc	??_put_fat+5,f,c
  9924  002782  0E2E               	movlw	46
  9925  002784  2449               	addwf	??_put_fat+4,w,c
  9926  002786  6E54               	movwf	put_fat@p,c
  9927  002788  0E00               	movlw	0
  9928  00278A  204A               	addwfc	??_put_fat+5,w,c
  9929  00278C  6E55               	movwf	put_fat@p+1,c
  9930                           
  9931                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  9932  00278E  C054  FFD9         	movff	put_fat@p,fsr2l
  9933  002792  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9934  002796  0E00               	movlw	0
  9935  002798  14DE               	andwf	postinc2,w,c
  9936  00279A  6E45               	movwf	??_put_fat& (0+255),c
  9937  00279C  0E00               	movlw	0
  9938  00279E  14DE               	andwf	postinc2,w,c
  9939  0027A0  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9940  0027A2  0E00               	movlw	0
  9941  0027A4  14DE               	andwf	postinc2,w,c
  9942  0027A6  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9943  0027A8  0EF0               	movlw	240
  9944  0027AA  14DE               	andwf	postinc2,w,c
  9945  0027AC  6E48               	movwf	(??_put_fat+3)& (0+255),c
  9946  0027AE  5045               	movf	??_put_fat,w,c
  9947  0027B0  1241               	iorwf	put_fat@val,f,c
  9948  0027B2  5046               	movf	??_put_fat+1,w,c
  9949  0027B4  1242               	iorwf	put_fat@val+1,f,c
  9950  0027B6  5047               	movf	??_put_fat+2,w,c
  9951  0027B8  1243               	iorwf	put_fat@val+2,f,c
  9952  0027BA  5048               	movf	??_put_fat+3,w,c
  9953  0027BC  1244               	iorwf	put_fat@val+3,f,c
  9954                           
  9955                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
  9956  0027BE  C054  FFD9         	movff	put_fat@p,fsr2l
  9957  0027C2  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9958  0027C6  C041  FFDE         	movff	put_fat@val,postinc2
  9959  0027CA  C042  FFDE         	movff	put_fat@val+1,postinc2
  9960  0027CE  C043  FFDE         	movff	put_fat@val+2,postinc2
  9961  0027D2  C044  FFDE         	movff	put_fat@val+3,postinc2
  9962  0027D6                     l4466:
  9963                           
  9964                           ;ff.c: 917:    fs->wflag = 1;
  9965  0027D6  EE20 F004          	lfsr	2,4
  9966  0027DA  503B               	movf	put_fat@fs,w,c
  9967  0027DC  26D9               	addwf	fsr2l,f,c
  9968  0027DE  503C               	movf	put_fat@fs+1,w,c
  9969  0027E0  22DA               	addwfc	fsr2h,f,c
  9970  0027E2  0E01               	movlw	1
  9971  0027E4  6EDF               	movwf	indf2,c
  9972                           
  9973                           ;ff.c: 918:    break;
  9974  0027E6  D016               	goto	l4472
  9975  0027E8                     l4470:
  9976  0027E8  C03B  FFD9         	movff	put_fat@fs,fsr2l
  9977  0027EC  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
  9978  0027F0  50DF               	movf	indf2,w,c
  9979  0027F2  6E45               	movwf	??_put_fat& (0+255),c
  9980  0027F4  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9981                           
  9982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9983                           ; Switch size 1, requested type "simple"
  9984                           ; Number of cases is 1, Range of values is 0 to 0
  9985                           ; switch strategies available:
  9986                           ; Name         Instructions Cycles
  9987                           ; simple_byte            4     3 (average)
  9988                           ;	Chosen strategy is simple_byte
  9989  0027F6  5046               	movf	??_put_fat+1,w,c
  9990  0027F8  0A00               	xorlw	0	; case 0
  9991  0027FA  A4D8               	btfss	status,2,c
  9992  0027FC  D610               	goto	u5200
  9993                           
  9994                           ; Switch size 1, requested type "simple"
  9995                           ; Number of cases is 3, Range of values is 1 to 3
  9996                           ; switch strategies available:
  9997                           ; Name         Instructions Cycles
  9998                           ; simple_byte           10     6 (average)
  9999                           ;	Chosen strategy is simple_byte
 10000  0027FE  5045               	movf	??_put_fat,w,c
 10001  002800  0A01               	xorlw	1	; case 1
 10002  002802  B4D8               	btfsc	status,2,c
 10003  002804  D60F               	goto	l343
 10004  002806  0A03               	xorlw	3	; case 2
 10005  002808  B4D8               	btfsc	status,2,c
 10006  00280A  D713               	goto	l4446
 10007  00280C  0A01               	xorlw	1	; case 3
 10008  00280E  B4D8               	btfsc	status,2,c
 10009  002810  D769               	goto	l4456
 10010  002812  D605               	goto	u5200
 10011  002814                     l4472:
 10012                           
 10013                           ;ff.c: 925:  return res;
 10014  002814  5053               	movf	put_fat@res,w,c
 10015  002816  0012               	return		;funcret
 10016  002818                     __end_of_put_fat:
 10017                           	opt callstack 0
 10018                           
 10019 ;; *************** function _get_fat *****************
 10020 ;; Defined at:
 10021 ;;		line 818 in file "ff.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;  fs              2   58[COMRAM] PTR struct .
 10024 ;;		 -> NULL(0), FatFs(558), 
 10025 ;;  clst            4   60[COMRAM] unsigned long 
 10026 ;; Auto vars:     Size  Location     Type
 10027 ;;  val             4   75[COMRAM] unsigned long 
 10028 ;;  bc              2   83[COMRAM] unsigned short 
 10029 ;;  p               2   81[COMRAM] PTR unsigned char 
 10030 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 10031 ;;  wc              2   79[COMRAM] unsigned short 
 10032 ;; Return value:  Size  Location     Type
 10033 ;;                  4   58[COMRAM] unsigned long 
 10034 ;; Registers used:
 10035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10036 ;; Tracked objects:
 10037 ;;		On entry : 0/0
 10038 ;;		On exit  : 0/0
 10039 ;;		Unchanged: 0/0
 10040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10041 ;;      Params:         6       0       0       0       0       0       0       0       0
 10042 ;;      Locals:        12       0       0       0       0       0       0       0       0
 10043 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10044 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10045 ;;Total ram usage:       27 bytes
 10046 ;; Hardware stack levels used:    1
 10047 ;; Hardware stack levels required when called:    8
 10048 ;; This function calls:
 10049 ;;		_move_window
 10050 ;; This function is called by:
 10051 ;;		_remove_chain
 10052 ;;		_create_chain
 10053 ;;		_dir_sdi
 10054 ;;		_dir_next
 10055 ;;		_f_lseek
 10056 ;;		_f_read
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           	psect	text25
 10061  002C1E                     __ptext25:
 10062                           	opt callstack 0
 10063  002C1E                     _get_fat:
 10064                           	opt callstack 19
 10065                           
 10066                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10067                           
 10068                           ;incstack = 0
 10069  002C1E  5040               	movf	get_fat@clst+3,w,c
 10070  002C20  103F               	iorwf	get_fat@clst+2,w,c
 10071  002C22  103E               	iorwf	get_fat@clst+1,w,c
 10072  002C24  E104               	bnz	u5080
 10073  002C26  0E02               	movlw	2
 10074  002C28  5C3D               	subwf	get_fat@clst,w,c
 10075  002C2A  A0D8               	btfss	status,0,c
 10076  002C2C  D010               	goto	u5090
 10077  002C2E                     u5080:
 10078  002C2E  EE20 F012          	lfsr	2,18
 10079  002C32  503B               	movf	get_fat@fs,w,c
 10080  002C34  26D9               	addwf	fsr2l,f,c
 10081  002C36  503C               	movf	get_fat@fs+1,w,c
 10082  002C38  22DA               	addwfc	fsr2h,f,c
 10083  002C3A  50DE               	movf	postinc2,w,c
 10084  002C3C  5C3D               	subwf	get_fat@clst,w,c
 10085  002C3E  50DE               	movf	postinc2,w,c
 10086  002C40  583E               	subwfb	get_fat@clst+1,w,c
 10087  002C42  50DE               	movf	postinc2,w,c
 10088  002C44  583F               	subwfb	get_fat@clst+2,w,c
 10089  002C46  50DE               	movf	postinc2,w,c
 10090  002C48  5840               	subwfb	get_fat@clst+3,w,c
 10091  002C4A  A0D8               	btfss	status,0,c
 10092  002C4C  D008               	goto	l317
 10093  002C4E                     u5090:
 10094                           
 10095                           ;ff.c: 829:   val = 1;
 10096  002C4E  0E01               	movlw	1
 10097  002C50  6E4C               	movwf	get_fat@val,c
 10098  002C52  0E00               	movlw	0
 10099  002C54  6E4D               	movwf	get_fat@val+1,c
 10100  002C56  0E00               	movlw	0
 10101  002C58  6E4E               	movwf	get_fat@val+2,c
 10102  002C5A  0E00               	movlw	0
 10103  002C5C  D190               	goto	L11
 10104  002C5E                     l317:
 10105                           
 10106                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10107  002C5E  684C               	setf	get_fat@val,c
 10108  002C60  684D               	setf	get_fat@val+1,c
 10109  002C62  684E               	setf	get_fat@val+2,c
 10110  002C64  684F               	setf	get_fat@val+3,c
 10111                           
 10112                           ;ff.c: 834:   switch (fs->fs_type) {
 10113  002C66  D18D               	goto	l4396
 10114  002C68                     l322:
 10115                           
 10116                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10117  002C68  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10118  002C6C  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10119  002C70  90D8               	bcf	status,0,c
 10120  002C72  3055               	rrcf	get_fat@bc+1,w,c
 10121  002C74  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10122  002C76  3054               	rrcf	get_fat@bc,w,c
 10123  002C78  6E41               	movwf	??_get_fat& (0+255),c
 10124  002C7A  5041               	movf	??_get_fat,w,c
 10125  002C7C  2654               	addwf	get_fat@bc,f,c
 10126  002C7E  5042               	movf	??_get_fat+1,w,c
 10127  002C80  2255               	addwfc	get_fat@bc+1,f,c
 10128                           
 10129                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10130  002C82  C03B  F030         	movff	get_fat@fs,move_window@fs
 10131  002C86  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10132  002C8A  EE20 F01E          	lfsr	2,30
 10133  002C8E  503B               	movf	get_fat@fs,w,c
 10134  002C90  26D9               	addwf	fsr2l,f,c
 10135  002C92  503C               	movf	get_fat@fs+1,w,c
 10136  002C94  22DA               	addwfc	fsr2h,f,c
 10137  002C96  CFDE F041          	movff	postinc2,??_get_fat
 10138  002C9A  CFDE F042          	movff	postinc2,??_get_fat+1
 10139  002C9E  CFDE F043          	movff	postinc2,??_get_fat+2
 10140  002CA2  CFDE F044          	movff	postinc2,??_get_fat+3
 10141  002CA6  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10142  002CAA  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10143  002CAE  0E09               	movlw	9
 10144  002CB0  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10145  002CB2                     u5105:
 10146  002CB2  90D8               	bcf	status,0,c
 10147  002CB4  3246               	rrcf	??_get_fat+5,f,c
 10148  002CB6  3245               	rrcf	??_get_fat+4,f,c
 10149  002CB8  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10150  002CBA  D7FB               	goto	u5105
 10151  002CBC  5045               	movf	??_get_fat+4,w,c
 10152  002CBE  2441               	addwf	??_get_fat,w,c
 10153  002CC0  6E32               	movwf	move_window@sector,c
 10154  002CC2  5046               	movf	??_get_fat+5,w,c
 10155  002CC4  2042               	addwfc	??_get_fat+1,w,c
 10156  002CC6  6E33               	movwf	move_window@sector+1,c
 10157  002CC8  0E00               	movlw	0
 10158  002CCA  2043               	addwfc	??_get_fat+2,w,c
 10159  002CCC  6E34               	movwf	move_window@sector+2,c
 10160  002CCE  0E00               	movlw	0
 10161  002CD0  2044               	addwfc	??_get_fat+3,w,c
 10162  002CD2  6E35               	movwf	move_window@sector+3,c
 10163  002CD4  EC82  F027         	call	_move_window	;wreg free
 10164  002CD8  0900               	iorlw	0
 10165  002CDA  A4D8               	btfss	status,2,c
 10166  002CDC  D168               	goto	l320
 10167                           
 10168                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10169  002CDE  0EFF               	movlw	255
 10170  002CE0  6E41               	movwf	??_get_fat& (0+255),c
 10171  002CE2  0E01               	movlw	1
 10172  002CE4  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10173  002CE6  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10174  002CEA  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10175  002CEE  5041               	movf	??_get_fat,w,c
 10176  002CF0  1643               	andwf	??_get_fat+2,f,c
 10177  002CF2  5042               	movf	??_get_fat+1,w,c
 10178  002CF4  1644               	andwf	??_get_fat+3,f,c
 10179  002CF6  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10180  002CFA  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10181  002CFE  5043               	movf	??_get_fat+2,w,c
 10182  002D00  2645               	addwf	??_get_fat+4,f,c
 10183  002D02  5044               	movf	??_get_fat+3,w,c
 10184  002D04  2246               	addwfc	??_get_fat+5,f,c
 10185  002D06  0E2E               	movlw	46
 10186  002D08  2445               	addwf	??_get_fat+4,w,c
 10187  002D0A  6ED9               	movwf	fsr2l,c
 10188  002D0C  0E00               	movlw	0
 10189  002D0E  2046               	addwfc	??_get_fat+5,w,c
 10190  002D10  6EDA               	movwf	fsr2h,c
 10191  002D12  50DF               	movf	indf2,w,c
 10192  002D14  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10193  002D16  5047               	movf	??_get_fat+6,w,c
 10194  002D18  6E50               	movwf	get_fat@wc,c
 10195  002D1A  6A51               	clrf	get_fat@wc+1,c
 10196  002D1C  4A54               	infsnz	get_fat@bc,f,c
 10197  002D1E  2A55               	incf	get_fat@bc+1,f,c
 10198                           
 10199                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10200  002D20  C03B  F030         	movff	get_fat@fs,move_window@fs
 10201  002D24  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10202  002D28  EE20 F01E          	lfsr	2,30
 10203  002D2C  503B               	movf	get_fat@fs,w,c
 10204  002D2E  26D9               	addwf	fsr2l,f,c
 10205  002D30  503C               	movf	get_fat@fs+1,w,c
 10206  002D32  22DA               	addwfc	fsr2h,f,c
 10207  002D34  CFDE F041          	movff	postinc2,??_get_fat
 10208  002D38  CFDE F042          	movff	postinc2,??_get_fat+1
 10209  002D3C  CFDE F043          	movff	postinc2,??_get_fat+2
 10210  002D40  CFDE F044          	movff	postinc2,??_get_fat+3
 10211  002D44  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10212  002D48  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10213  002D4C  0E09               	movlw	9
 10214  002D4E  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10215  002D50                     u5125:
 10216  002D50  90D8               	bcf	status,0,c
 10217  002D52  3246               	rrcf	??_get_fat+5,f,c
 10218  002D54  3245               	rrcf	??_get_fat+4,f,c
 10219  002D56  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10220  002D58  D7FB               	goto	u5125
 10221  002D5A  5045               	movf	??_get_fat+4,w,c
 10222  002D5C  2441               	addwf	??_get_fat,w,c
 10223  002D5E  6E32               	movwf	move_window@sector,c
 10224  002D60  5046               	movf	??_get_fat+5,w,c
 10225  002D62  2042               	addwfc	??_get_fat+1,w,c
 10226  002D64  6E33               	movwf	move_window@sector+1,c
 10227  002D66  0E00               	movlw	0
 10228  002D68  2043               	addwfc	??_get_fat+2,w,c
 10229  002D6A  6E34               	movwf	move_window@sector+2,c
 10230  002D6C  0E00               	movlw	0
 10231  002D6E  2044               	addwfc	??_get_fat+3,w,c
 10232  002D70  6E35               	movwf	move_window@sector+3,c
 10233  002D72  EC82  F027         	call	_move_window	;wreg free
 10234  002D76  0900               	iorlw	0
 10235  002D78  A4D8               	btfss	status,2,c
 10236  002D7A  D119               	goto	l320
 10237                           
 10238                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10239  002D7C  0EFF               	movlw	255
 10240  002D7E  6E41               	movwf	??_get_fat& (0+255),c
 10241  002D80  0E01               	movlw	1
 10242  002D82  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10243  002D84  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10244  002D88  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10245  002D8C  5041               	movf	??_get_fat,w,c
 10246  002D8E  1643               	andwf	??_get_fat+2,f,c
 10247  002D90  5042               	movf	??_get_fat+1,w,c
 10248  002D92  1644               	andwf	??_get_fat+3,f,c
 10249  002D94  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10250  002D98  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10251  002D9C  5043               	movf	??_get_fat+2,w,c
 10252  002D9E  2645               	addwf	??_get_fat+4,f,c
 10253  002DA0  5044               	movf	??_get_fat+3,w,c
 10254  002DA2  2246               	addwfc	??_get_fat+5,f,c
 10255  002DA4  0E2E               	movlw	46
 10256  002DA6  2445               	addwf	??_get_fat+4,w,c
 10257  002DA8  6ED9               	movwf	fsr2l,c
 10258  002DAA  0E00               	movlw	0
 10259  002DAC  2046               	addwfc	??_get_fat+5,w,c
 10260  002DAE  6EDA               	movwf	fsr2h,c
 10261  002DB0  50DF               	movf	indf2,w,c
 10262  002DB2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10263  002DB4  5047               	movf	??_get_fat+6,w,c
 10264  002DB6  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10265  002DB8  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10266  002DBA  5048               	movf	??_get_fat+7,w,c
 10267  002DBC  1250               	iorwf	get_fat@wc,f,c
 10268  002DBE  5049               	movf	??_get_fat+8,w,c
 10269  002DC0  1251               	iorwf	get_fat@wc+1,f,c
 10270                           
 10271                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10272  002DC2  B03D               	btfsc	get_fat@clst,0,c
 10273  002DC4  D007               	goto	l4374
 10274  002DC6  0EFF               	movlw	255
 10275  002DC8  1450               	andwf	get_fat@wc,w,c
 10276  002DCA  6E4A               	movwf	_get_fat$568,c
 10277  002DCC  0E0F               	movlw	15
 10278  002DCE  1451               	andwf	get_fat@wc+1,w,c
 10279  002DD0  6E4B               	movwf	_get_fat$568+1,c
 10280  002DD2  D00F               	goto	l4376
 10281  002DD4                     l4374:
 10282  002DD4  C050  F041         	movff	get_fat@wc,??_get_fat
 10283  002DD8  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10284  002DDC  0E04               	movlw	4
 10285  002DDE  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10286  002DE0                     u5155:
 10287  002DE0  90D8               	bcf	status,0,c
 10288  002DE2  3242               	rrcf	??_get_fat+1,f,c
 10289  002DE4  3241               	rrcf	??_get_fat,f,c
 10290  002DE6  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10291  002DE8  D7FB               	goto	u5155
 10292  002DEA  C041  F04A         	movff	??_get_fat,_get_fat$568
 10293  002DEE  C042  F04B         	movff	??_get_fat+1,_get_fat$568+1
 10294  002DF2                     l4376:
 10295  002DF2  C04A  F04C         	movff	_get_fat$568,get_fat@val
 10296  002DF6  C04B  F04D         	movff	_get_fat$568+1,get_fat@val+1
 10297  002DFA  D05B               	goto	L12
 10298  002DFC                     l4378:
 10299                           
 10300                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10301  002DFC  C03B  F030         	movff	get_fat@fs,move_window@fs
 10302  002E00  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10303  002E04  EE20 F01E          	lfsr	2,30
 10304  002E08  503B               	movf	get_fat@fs,w,c
 10305  002E0A  26D9               	addwf	fsr2l,f,c
 10306  002E0C  503C               	movf	get_fat@fs+1,w,c
 10307  002E0E  22DA               	addwfc	fsr2h,f,c
 10308  002E10  CFDE F041          	movff	postinc2,??_get_fat
 10309  002E14  CFDE F042          	movff	postinc2,??_get_fat+1
 10310  002E18  CFDE F043          	movff	postinc2,??_get_fat+2
 10311  002E1C  CFDE F044          	movff	postinc2,??_get_fat+3
 10312  002E20  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10313  002E24  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10314  002E28  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10315  002E2C  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10316  002E30  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10317  002E34  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10318  002E38  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10319  002E3C  6A48               	clrf	??_get_fat+7,c
 10320  002E3E  5041               	movf	??_get_fat,w,c
 10321  002E40  2445               	addwf	??_get_fat+4,w,c
 10322  002E42  6E32               	movwf	move_window@sector,c
 10323  002E44  5042               	movf	??_get_fat+1,w,c
 10324  002E46  2046               	addwfc	??_get_fat+5,w,c
 10325  002E48  6E33               	movwf	move_window@sector+1,c
 10326  002E4A  5043               	movf	??_get_fat+2,w,c
 10327  002E4C  2047               	addwfc	??_get_fat+6,w,c
 10328  002E4E  6E34               	movwf	move_window@sector+2,c
 10329  002E50  5044               	movf	??_get_fat+3,w,c
 10330  002E52  2048               	addwfc	??_get_fat+7,w,c
 10331  002E54  6E35               	movwf	move_window@sector+3,c
 10332  002E56  EC82  F027         	call	_move_window	;wreg free
 10333  002E5A  0900               	iorlw	0
 10334  002E5C  A4D8               	btfss	status,2,c
 10335  002E5E  D0A7               	goto	l320
 10336                           
 10337                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10338  002E60  0EFF               	movlw	255
 10339  002E62  6E41               	movwf	??_get_fat& (0+255),c
 10340  002E64  0E01               	movlw	1
 10341  002E66  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10342  002E68  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10343  002E6C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10344  002E70  90D8               	bcf	status,0,c
 10345  002E72  3643               	rlcf	??_get_fat+2,f,c
 10346  002E74  3644               	rlcf	??_get_fat+3,f,c
 10347  002E76  5041               	movf	??_get_fat,w,c
 10348  002E78  1643               	andwf	??_get_fat+2,f,c
 10349  002E7A  5042               	movf	??_get_fat+1,w,c
 10350  002E7C  1644               	andwf	??_get_fat+3,f,c
 10351  002E7E  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10352  002E82  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10353  002E86  5043               	movf	??_get_fat+2,w,c
 10354  002E88  2645               	addwf	??_get_fat+4,f,c
 10355  002E8A  5044               	movf	??_get_fat+3,w,c
 10356  002E8C  2246               	addwfc	??_get_fat+5,f,c
 10357  002E8E  0E2E               	movlw	46
 10358  002E90  2445               	addwf	??_get_fat+4,w,c
 10359  002E92  6E52               	movwf	get_fat@p,c
 10360  002E94  0E00               	movlw	0
 10361  002E96  2046               	addwfc	??_get_fat+5,w,c
 10362  002E98  6E53               	movwf	get_fat@p+1,c
 10363                           
 10364                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10365  002E9A  C052  FFD9         	movff	get_fat@p,fsr2l
 10366  002E9E  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10367  002EA2  CFDE F041          	movff	postinc2,??_get_fat
 10368  002EA6  CFDD F042          	movff	postdec2,??_get_fat+1
 10369  002EAA  C041  F04C         	movff	??_get_fat,get_fat@val
 10370  002EAE  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10371  002EB2                     L12:
 10372  002EB2  6A4E               	clrf	get_fat@val+2,c
 10373  002EB4  6A4F               	clrf	get_fat@val+3,c
 10374                           
 10375                           ;ff.c: 848:    break;
 10376  002EB6  D07B               	goto	l320
 10377  002EB8                     l4386:
 10378                           
 10379                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10380  002EB8  C03B  F030         	movff	get_fat@fs,move_window@fs
 10381  002EBC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10382  002EC0  EE20 F01E          	lfsr	2,30
 10383  002EC4  503B               	movf	get_fat@fs,w,c
 10384  002EC6  26D9               	addwf	fsr2l,f,c
 10385  002EC8  503C               	movf	get_fat@fs+1,w,c
 10386  002ECA  22DA               	addwfc	fsr2h,f,c
 10387  002ECC  CFDE F041          	movff	postinc2,??_get_fat
 10388  002ED0  CFDE F042          	movff	postinc2,??_get_fat+1
 10389  002ED4  CFDE F043          	movff	postinc2,??_get_fat+2
 10390  002ED8  CFDE F044          	movff	postinc2,??_get_fat+3
 10391  002EDC  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10392  002EE0  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10393  002EE4  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10394  002EE8  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10395  002EEC  0E08               	movlw	8
 10396  002EEE  D005               	goto	u5170
 10397  002EF0                     u5175:
 10398  002EF0  90D8               	bcf	status,0,c
 10399  002EF2  3248               	rrcf	??_get_fat+7,f,c
 10400  002EF4  3247               	rrcf	??_get_fat+6,f,c
 10401  002EF6  3246               	rrcf	??_get_fat+5,f,c
 10402  002EF8  3245               	rrcf	??_get_fat+4,f,c
 10403  002EFA                     u5170:
 10404  002EFA  2EE8               	decfsz	wreg,f,c
 10405  002EFC  D7F9               	goto	u5175
 10406  002EFE  5041               	movf	??_get_fat,w,c
 10407  002F00  2445               	addwf	??_get_fat+4,w,c
 10408  002F02  6E32               	movwf	move_window@sector,c
 10409  002F04  5042               	movf	??_get_fat+1,w,c
 10410  002F06  2046               	addwfc	??_get_fat+5,w,c
 10411  002F08  6E33               	movwf	move_window@sector+1,c
 10412  002F0A  5043               	movf	??_get_fat+2,w,c
 10413  002F0C  2047               	addwfc	??_get_fat+6,w,c
 10414  002F0E  6E34               	movwf	move_window@sector+2,c
 10415  002F10  5044               	movf	??_get_fat+3,w,c
 10416  002F12  2048               	addwfc	??_get_fat+7,w,c
 10417  002F14  6E35               	movwf	move_window@sector+3,c
 10418  002F16  EC82  F027         	call	_move_window	;wreg free
 10419  002F1A  0900               	iorlw	0
 10420  002F1C  A4D8               	btfss	status,2,c
 10421  002F1E  D047               	goto	l320
 10422                           
 10423                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10424  002F20  0EFF               	movlw	255
 10425  002F22  6E41               	movwf	??_get_fat& (0+255),c
 10426  002F24  0E01               	movlw	1
 10427  002F26  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10428  002F28  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10429  002F2C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10430  002F30  90D8               	bcf	status,0,c
 10431  002F32  3643               	rlcf	??_get_fat+2,f,c
 10432  002F34  3644               	rlcf	??_get_fat+3,f,c
 10433  002F36  90D8               	bcf	status,0,c
 10434  002F38  3643               	rlcf	??_get_fat+2,f,c
 10435  002F3A  3644               	rlcf	??_get_fat+3,f,c
 10436  002F3C  5041               	movf	??_get_fat,w,c
 10437  002F3E  1643               	andwf	??_get_fat+2,f,c
 10438  002F40  5042               	movf	??_get_fat+1,w,c
 10439  002F42  1644               	andwf	??_get_fat+3,f,c
 10440  002F44  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10441  002F48  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10442  002F4C  5043               	movf	??_get_fat+2,w,c
 10443  002F4E  2645               	addwf	??_get_fat+4,f,c
 10444  002F50  5044               	movf	??_get_fat+3,w,c
 10445  002F52  2246               	addwfc	??_get_fat+5,f,c
 10446  002F54  0E2E               	movlw	46
 10447  002F56  2445               	addwf	??_get_fat+4,w,c
 10448  002F58  6E52               	movwf	get_fat@p,c
 10449  002F5A  0E00               	movlw	0
 10450  002F5C  2046               	addwfc	??_get_fat+5,w,c
 10451  002F5E  6E53               	movwf	get_fat@p+1,c
 10452                           
 10453                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10454  002F60  C052  FFD9         	movff	get_fat@p,fsr2l
 10455  002F64  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10456  002F68  0EFF               	movlw	255
 10457  002F6A  14DE               	andwf	postinc2,w,c
 10458  002F6C  6E4C               	movwf	get_fat@val,c
 10459  002F6E  0EFF               	movlw	255
 10460  002F70  14DE               	andwf	postinc2,w,c
 10461  002F72  6E4D               	movwf	get_fat@val+1,c
 10462  002F74  0EFF               	movlw	255
 10463  002F76  14DE               	andwf	postinc2,w,c
 10464  002F78  6E4E               	movwf	get_fat@val+2,c
 10465  002F7A  0E0F               	movlw	15
 10466  002F7C  14DE               	andwf	postinc2,w,c
 10467  002F7E                     L11:
 10468  002F7E  6E4F               	movwf	get_fat@val+3,c
 10469                           
 10470                           ;ff.c: 854:    break;
 10471  002F80  D016               	goto	l320
 10472  002F82                     l4396:
 10473  002F82  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10474  002F86  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10475  002F8A  50DF               	movf	indf2,w,c
 10476  002F8C  6E41               	movwf	??_get_fat& (0+255),c
 10477  002F8E  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10478                           
 10479                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10480                           ; Switch size 1, requested type "simple"
 10481                           ; Number of cases is 1, Range of values is 0 to 0
 10482                           ; switch strategies available:
 10483                           ; Name         Instructions Cycles
 10484                           ; simple_byte            4     3 (average)
 10485                           ;	Chosen strategy is simple_byte
 10486  002F90  5042               	movf	??_get_fat+1,w,c
 10487  002F92  0A00               	xorlw	0	; case 0
 10488  002F94  A4D8               	btfss	status,2,c
 10489  002F96  D65B               	goto	u5090
 10490                           
 10491                           ; Switch size 1, requested type "simple"
 10492                           ; Number of cases is 3, Range of values is 1 to 3
 10493                           ; switch strategies available:
 10494                           ; Name         Instructions Cycles
 10495                           ; simple_byte           10     6 (average)
 10496                           ;	Chosen strategy is simple_byte
 10497  002F98  5041               	movf	??_get_fat,w,c
 10498  002F9A  0A01               	xorlw	1	; case 1
 10499  002F9C  B4D8               	btfsc	status,2,c
 10500  002F9E  D664               	goto	l322
 10501  002FA0  0A03               	xorlw	3	; case 2
 10502  002FA2  B4D8               	btfsc	status,2,c
 10503  002FA4  D72B               	goto	l4378
 10504  002FA6  0A01               	xorlw	1	; case 3
 10505  002FA8  B4D8               	btfsc	status,2,c
 10506  002FAA  D786               	goto	l4386
 10507  002FAC  D650               	goto	u5090
 10508  002FAE                     l320:
 10509                           
 10510                           ;ff.c: 861:  return val;
 10511  002FAE  C04C  F03B         	movff	get_fat@val,?_get_fat
 10512  002FB2  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10513  002FB6  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10514  002FBA  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10515  002FBE  0012               	return		;funcret
 10516  002FC0                     __end_of_get_fat:
 10517                           	opt callstack 0
 10518                           
 10519 ;; *************** function _clust2sect *****************
 10520 ;; Defined at:
 10521 ;;		line 800 in file "ff.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;  fs              2   12[COMRAM] PTR struct .
 10524 ;;		 -> NULL(0), FatFs(558), 
 10525 ;;  clst            4   14[COMRAM] unsigned long 
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;		None
 10528 ;; Return value:  Size  Location     Type
 10529 ;;                  4   12[COMRAM] unsigned long 
 10530 ;; Registers used:
 10531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10532 ;; Tracked objects:
 10533 ;;		On entry : 0/0
 10534 ;;		On exit  : 0/0
 10535 ;;		Unchanged: 0/0
 10536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10537 ;;      Params:         6       0       0       0       0       0       0       0       0
 10538 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10539 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10540 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10541 ;;Total ram usage:       11 bytes
 10542 ;; Hardware stack levels used:    1
 10543 ;; Hardware stack levels required when called:    1
 10544 ;; This function calls:
 10545 ;;		___lmul
 10546 ;; This function is called by:
 10547 ;;		_dir_sdi
 10548 ;;		_dir_next
 10549 ;;		_f_write
 10550 ;;		_f_lseek
 10551 ;;		_f_read
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text26
 10556  004D9A                     __ptext26:
 10557                           	opt callstack 0
 10558  004D9A                     _clust2sect:
 10559                           	opt callstack 27
 10560                           
 10561                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10562                           
 10563                           ;incstack = 0
 10564  004D9A  0E02               	movlw	2
 10565  004D9C  5E0F               	subwf	clust2sect@clst,f,c
 10566  004D9E  0E00               	movlw	0
 10567  004DA0  5A10               	subwfb	clust2sect@clst+1,f,c
 10568  004DA2  5A11               	subwfb	clust2sect@clst+2,f,c
 10569  004DA4  5A12               	subwfb	clust2sect@clst+3,f,c
 10570                           
 10571                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10572  004DA6  EE20 F012          	lfsr	2,18
 10573  004DAA  500D               	movf	clust2sect@fs,w,c
 10574  004DAC  26D9               	addwf	fsr2l,f,c
 10575  004DAE  500E               	movf	clust2sect@fs+1,w,c
 10576  004DB0  22DA               	addwfc	fsr2h,f,c
 10577  004DB2  0EFE               	movlw	254
 10578  004DB4  24DE               	addwf	postinc2,w,c
 10579  004DB6  6E13               	movwf	??_clust2sect& (0+255),c
 10580  004DB8  0EFF               	movlw	255
 10581  004DBA  20DE               	addwfc	postinc2,w,c
 10582  004DBC  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10583  004DBE  0EFF               	movlw	255
 10584  004DC0  20DE               	addwfc	postinc2,w,c
 10585  004DC2  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10586  004DC4  0EFF               	movlw	255
 10587  004DC6  20DE               	addwfc	postinc2,w,c
 10588  004DC8  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10589  004DCA  5013               	movf	??_clust2sect,w,c
 10590  004DCC  5C0F               	subwf	clust2sect@clst,w,c
 10591  004DCE  5014               	movf	??_clust2sect+1,w,c
 10592  004DD0  5810               	subwfb	clust2sect@clst+1,w,c
 10593  004DD2  5015               	movf	??_clust2sect+2,w,c
 10594  004DD4  5811               	subwfb	clust2sect@clst+2,w,c
 10595  004DD6  5016               	movf	??_clust2sect+3,w,c
 10596  004DD8  5812               	subwfb	clust2sect@clst+3,w,c
 10597  004DDA  A0D8               	btfss	status,0,c
 10598  004DDC  D009               	goto	l4506
 10599  004DDE  0E00               	movlw	0
 10600  004DE0  6E0D               	movwf	?_clust2sect,c
 10601  004DE2  0E00               	movlw	0
 10602  004DE4  6E0E               	movwf	?_clust2sect+1,c
 10603  004DE6  0E00               	movlw	0
 10604  004DE8  6E0F               	movwf	?_clust2sect+2,c
 10605  004DEA  0E00               	movlw	0
 10606  004DEC  6E10               	movwf	?_clust2sect+3,c
 10607  004DEE  0012               	return	
 10608  004DF0                     l4506:
 10609                           
 10610                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10611  004DF0  EE20 F026          	lfsr	2,38
 10612  004DF4  500D               	movf	clust2sect@fs,w,c
 10613  004DF6  26D9               	addwf	fsr2l,f,c
 10614  004DF8  500E               	movf	clust2sect@fs+1,w,c
 10615  004DFA  22DA               	addwfc	fsr2h,f,c
 10616  004DFC  CFDE F013          	movff	postinc2,??_clust2sect
 10617  004E00  CFDE F014          	movff	postinc2,??_clust2sect+1
 10618  004E04  CFDE F015          	movff	postinc2,??_clust2sect+2
 10619  004E08  CFDE F016          	movff	postinc2,??_clust2sect+3
 10620  004E0C  EE20 F002          	lfsr	2,2
 10621  004E10  500D               	movf	clust2sect@fs,w,c
 10622  004E12  26D9               	addwf	fsr2l,f,c
 10623  004E14  500E               	movf	clust2sect@fs+1,w,c
 10624  004E16  22DA               	addwfc	fsr2h,f,c
 10625  004E18  50DF               	movf	indf2,w,c
 10626  004E1A  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10627  004E1C  5017               	movf	??_clust2sect+4,w,c
 10628  004E1E  6E01               	movwf	___lmul@multiplier,c
 10629  004E20  6A02               	clrf	___lmul@multiplier+1,c
 10630  004E22  6A03               	clrf	___lmul@multiplier+2,c
 10631  004E24  6A04               	clrf	___lmul@multiplier+3,c
 10632  004E26  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10633  004E2A  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10634  004E2E  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10635  004E32  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10636  004E36  EC87  F029         	call	___lmul	;wreg free
 10637  004E3A  5013               	movf	??_clust2sect,w,c
 10638  004E3C  2401               	addwf	?___lmul,w,c
 10639  004E3E  6E0D               	movwf	?_clust2sect,c
 10640  004E40  5014               	movf	??_clust2sect+1,w,c
 10641  004E42  2002               	addwfc	?___lmul+1,w,c
 10642  004E44  6E0E               	movwf	?_clust2sect+1,c
 10643  004E46  5015               	movf	??_clust2sect+2,w,c
 10644  004E48  2003               	addwfc	?___lmul+2,w,c
 10645  004E4A  6E0F               	movwf	?_clust2sect+2,c
 10646  004E4C  5016               	movf	??_clust2sect+3,w,c
 10647  004E4E  2004               	addwfc	?___lmul+3,w,c
 10648  004E50  6E10               	movwf	?_clust2sect+3,c
 10649  004E52  0012               	return		;funcret
 10650  004E54                     __end_of_clust2sect:
 10651                           	opt callstack 0
 10652                           
 10653 ;; *************** function ___lmul *****************
 10654 ;; Defined at:
 10655 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;  multiplier      4    0[COMRAM] unsigned long 
 10658 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;  product         4    8[COMRAM] unsigned long 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  4    0[COMRAM] unsigned long 
 10663 ;; Registers used:
 10664 ;;		wreg, status,2, status,0
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10670 ;;      Params:         8       0       0       0       0       0       0       0       0
 10671 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10673 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10674 ;;Total ram usage:       12 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_clust2sect
 10680 ;;		_find_volume
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           	psect	text27
 10685  00530E                     __ptext27:
 10686                           	opt callstack 0
 10687  00530E                     ___lmul:
 10688                           	opt callstack 27
 10689                           
 10690                           ;incstack = 0
 10691  00530E  0E00               	movlw	0
 10692  005310  6E09               	movwf	___lmul@product,c
 10693  005312  0E00               	movlw	0
 10694  005314  6E0A               	movwf	___lmul@product+1,c
 10695  005316  0E00               	movlw	0
 10696  005318  6E0B               	movwf	___lmul@product+2,c
 10697  00531A  0E00               	movlw	0
 10698  00531C  6E0C               	movwf	___lmul@product+3,c
 10699  00531E                     l4482:
 10700  00531E  A001               	btfss	___lmul@multiplier,0,c
 10701  005320  D008               	goto	l4486
 10702  005322  5005               	movf	___lmul@multiplicand,w,c
 10703  005324  2609               	addwf	___lmul@product,f,c
 10704  005326  5006               	movf	___lmul@multiplicand+1,w,c
 10705  005328  220A               	addwfc	___lmul@product+1,f,c
 10706  00532A  5007               	movf	___lmul@multiplicand+2,w,c
 10707  00532C  220B               	addwfc	___lmul@product+2,f,c
 10708  00532E  5008               	movf	___lmul@multiplicand+3,w,c
 10709  005330  220C               	addwfc	___lmul@product+3,f,c
 10710  005332                     l4486:
 10711  005332  90D8               	bcf	status,0,c
 10712  005334  3605               	rlcf	___lmul@multiplicand,f,c
 10713  005336  3606               	rlcf	___lmul@multiplicand+1,f,c
 10714  005338  3607               	rlcf	___lmul@multiplicand+2,f,c
 10715  00533A  3608               	rlcf	___lmul@multiplicand+3,f,c
 10716  00533C  90D8               	bcf	status,0,c
 10717  00533E  3204               	rrcf	___lmul@multiplier+3,f,c
 10718  005340  3203               	rrcf	___lmul@multiplier+2,f,c
 10719  005342  3202               	rrcf	___lmul@multiplier+1,f,c
 10720  005344  3201               	rrcf	___lmul@multiplier,f,c
 10721  005346  5001               	movf	___lmul@multiplier,w,c
 10722  005348  1002               	iorwf	___lmul@multiplier+1,w,c
 10723  00534A  1003               	iorwf	___lmul@multiplier+2,w,c
 10724  00534C  1004               	iorwf	___lmul@multiplier+3,w,c
 10725  00534E  A4D8               	btfss	status,2,c
 10726  005350  D7E6               	goto	l4482
 10727  005352  C009  F001         	movff	___lmul@product,?___lmul
 10728  005356  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10729  00535A  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10730  00535E  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10731  005362  0012               	return		;funcret
 10732  005364                     __end_of___lmul:
 10733                           	opt callstack 0
 10734                           
 10735 ;; *************** function ___lldiv *****************
 10736 ;; Defined at:
 10737 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;  dividend        4    0[COMRAM] unsigned long 
 10740 ;;  divisor         4    4[COMRAM] unsigned long 
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;  quotient        4    8[COMRAM] unsigned long 
 10743 ;;  counter         1   12[COMRAM] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  4    0[COMRAM] unsigned long 
 10746 ;; Registers used:
 10747 ;;		wreg, status,2, status,0
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10753 ;;      Params:         8       0       0       0       0       0       0       0       0
 10754 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10756 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10757 ;;Total ram usage:       13 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; This function calls:
 10760 ;;		Nothing
 10761 ;; This function is called by:
 10762 ;;		_find_volume
 10763 ;;		_f_lseek
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767                           	psect	text28
 10768  00503E                     __ptext28:
 10769                           	opt callstack 0
 10770  00503E                     ___lldiv:
 10771                           	opt callstack 27
 10772                           
 10773                           ;incstack = 0
 10774  00503E  0E00               	movlw	0
 10775  005040  6E09               	movwf	___lldiv@quotient,c
 10776  005042  0E00               	movlw	0
 10777  005044  6E0A               	movwf	___lldiv@quotient+1,c
 10778  005046  0E00               	movlw	0
 10779  005048  6E0B               	movwf	___lldiv@quotient+2,c
 10780  00504A  0E00               	movlw	0
 10781  00504C  6E0C               	movwf	___lldiv@quotient+3,c
 10782  00504E  5005               	movf	___lldiv@divisor,w,c
 10783  005050  1006               	iorwf	___lldiv@divisor+1,w,c
 10784  005052  1007               	iorwf	___lldiv@divisor+2,w,c
 10785  005054  1008               	iorwf	___lldiv@divisor+3,w,c
 10786  005056  B4D8               	btfsc	status,2,c
 10787  005058  D02A               	goto	l882
 10788  00505A  0E01               	movlw	1
 10789  00505C  6E0D               	movwf	___lldiv@counter,c
 10790  00505E  D006               	goto	l5384
 10791  005060                     l5382:
 10792  005060  90D8               	bcf	status,0,c
 10793  005062  3605               	rlcf	___lldiv@divisor,f,c
 10794  005064  3606               	rlcf	___lldiv@divisor+1,f,c
 10795  005066  3607               	rlcf	___lldiv@divisor+2,f,c
 10796  005068  3608               	rlcf	___lldiv@divisor+3,f,c
 10797  00506A  2A0D               	incf	___lldiv@counter,f,c
 10798  00506C                     l5384:
 10799  00506C  AE08               	btfss	___lldiv@divisor+3,7,c
 10800  00506E  D7F8               	goto	l5382
 10801  005070                     u7070:
 10802  005070  90D8               	bcf	status,0,c
 10803  005072  3609               	rlcf	___lldiv@quotient,f,c
 10804  005074  360A               	rlcf	___lldiv@quotient+1,f,c
 10805  005076  360B               	rlcf	___lldiv@quotient+2,f,c
 10806  005078  360C               	rlcf	___lldiv@quotient+3,f,c
 10807  00507A  5005               	movf	___lldiv@divisor,w,c
 10808  00507C  5C01               	subwf	___lldiv@dividend,w,c
 10809  00507E  5006               	movf	___lldiv@divisor+1,w,c
 10810  005080  5802               	subwfb	___lldiv@dividend+1,w,c
 10811  005082  5007               	movf	___lldiv@divisor+2,w,c
 10812  005084  5803               	subwfb	___lldiv@dividend+2,w,c
 10813  005086  5008               	movf	___lldiv@divisor+3,w,c
 10814  005088  5804               	subwfb	___lldiv@dividend+3,w,c
 10815  00508A  A0D8               	btfss	status,0,c
 10816  00508C  D009               	goto	l5394
 10817  00508E  5005               	movf	___lldiv@divisor,w,c
 10818  005090  5E01               	subwf	___lldiv@dividend,f,c
 10819  005092  5006               	movf	___lldiv@divisor+1,w,c
 10820  005094  5A02               	subwfb	___lldiv@dividend+1,f,c
 10821  005096  5007               	movf	___lldiv@divisor+2,w,c
 10822  005098  5A03               	subwfb	___lldiv@dividend+2,f,c
 10823  00509A  5008               	movf	___lldiv@divisor+3,w,c
 10824  00509C  5A04               	subwfb	___lldiv@dividend+3,f,c
 10825  00509E  8009               	bsf	___lldiv@quotient,0,c
 10826  0050A0                     l5394:
 10827  0050A0  90D8               	bcf	status,0,c
 10828  0050A2  3208               	rrcf	___lldiv@divisor+3,f,c
 10829  0050A4  3207               	rrcf	___lldiv@divisor+2,f,c
 10830  0050A6  3206               	rrcf	___lldiv@divisor+1,f,c
 10831  0050A8  3205               	rrcf	___lldiv@divisor,f,c
 10832  0050AA  2E0D               	decfsz	___lldiv@counter,f,c
 10833  0050AC  D7E1               	goto	u7070
 10834  0050AE                     l882:
 10835  0050AE  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10836  0050B2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10837  0050B6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10838  0050BA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10839  0050BE  0012               	return		;funcret
 10840  0050C0                     __end_of___lldiv:
 10841                           	opt callstack 0
 10842                           
 10843 ;; *************** function _f_close *****************
 10844 ;; Defined at:
 10845 ;;		line 2861 in file "ff.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;  fp              2   77[COMRAM] PTR struct .
 10848 ;;		 -> Fil(32), 
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;  res             1   79[COMRAM] enum E93
 10851 ;; Return value:  Size  Location     Type
 10852 ;;                  1    wreg      enum E4918
 10853 ;; Registers used:
 10854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10855 ;; Tracked objects:
 10856 ;;		On entry : 0/0
 10857 ;;		On exit  : 0/0
 10858 ;;		Unchanged: 0/0
 10859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10860 ;;      Params:         2       0       0       0       0       0       0       0       0
 10861 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10862 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10863 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10864 ;;Total ram usage:        3 bytes
 10865 ;; Hardware stack levels used:    1
 10866 ;; Hardware stack levels required when called:    9
 10867 ;; This function calls:
 10868 ;;		_f_sync
 10869 ;;		_validate
 10870 ;; This function is called by:
 10871 ;;		_guardar
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text29
 10876  0054A2                     __ptext29:
 10877                           	opt callstack 0
 10878  0054A2                     _f_close:
 10879                           	opt callstack 20
 10880                           
 10881                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10882                           
 10883                           ;incstack = 0
 10884  0054A2  C04E  F045         	movff	f_close@fp,f_sync@fp
 10885  0054A6  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 10886  0054AA  EC36  F022         	call	_f_sync	;wreg free
 10887  0054AE  6E50               	movwf	f_close@res,c
 10888                           
 10889                           ;ff.c: 2870:  if (res == FR_OK)
 10890  0054B0  5050               	movf	f_close@res,w,c
 10891  0054B2  A4D8               	btfss	status,2,c
 10892  0054B4  0012               	return	
 10893                           
 10894                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10895  0054B6  C04E  F002         	movff	f_close@fp,validate@obj
 10896  0054BA  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 10897  0054BE  ECD5  F027         	call	_validate	;wreg free
 10898  0054C2  6E50               	movwf	f_close@res,c
 10899                           
 10900                           ;ff.c: 2874:   if (res == FR_OK) {
 10901  0054C4  5050               	movf	f_close@res,w,c
 10902  0054C6  A4D8               	btfss	status,2,c
 10903  0054C8  0012               	return	
 10904                           
 10905                           ;ff.c: 2882:     fp->fs = 0;
 10906  0054CA  C04E  FFD9         	movff	f_close@fp,fsr2l
 10907  0054CE  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 10908  0054D2  0E00               	movlw	0
 10909  0054D4  6EDE               	movwf	postinc2,c
 10910  0054D6  0E00               	movlw	0
 10911  0054D8  6EDD               	movwf	postdec2,c
 10912  0054DA  0012               	return		;funcret
 10913  0054DC                     __end_of_f_close:
 10914                           	opt callstack 0
 10915                           
 10916 ;; *************** function _f_sync *****************
 10917 ;; Defined at:
 10918 ;;		line 2813 in file "ff.c"
 10919 ;; Parameters:    Size  Location     Type
 10920 ;;  fp              2   68[COMRAM] PTR struct .
 10921 ;;		 -> Fil(32), 
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;  tm              4    0        unsigned long 
 10924 ;;  dir             2   75[COMRAM] PTR unsigned char 
 10925 ;;		 -> NULL(0), FatFs(558), 
 10926 ;;  res             1   74[COMRAM] enum E93
 10927 ;; Return value:  Size  Location     Type
 10928 ;;                  1    wreg      enum E93
 10929 ;; Registers used:
 10930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10931 ;; Tracked objects:
 10932 ;;		On entry : 0/0
 10933 ;;		On exit  : 0/0
 10934 ;;		Unchanged: 0/0
 10935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10936 ;;      Params:         2       0       0       0       0       0       0       0       0
 10937 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10938 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10939 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10940 ;;Total ram usage:        9 bytes
 10941 ;; Hardware stack levels used:    1
 10942 ;; Hardware stack levels required when called:    8
 10943 ;; This function calls:
 10944 ;;		_move_window
 10945 ;;		_st_clust
 10946 ;;		_sync_fs
 10947 ;;		_validate
 10948 ;; This function is called by:
 10949 ;;		_f_close
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           	psect	text30
 10954  00446C                     __ptext30:
 10955                           	opt callstack 0
 10956  00446C                     _f_sync:
 10957                           	opt callstack 20
 10958                           
 10959                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 10960                           
 10961                           ;incstack = 0
 10962  00446C  C045  F002         	movff	f_sync@fp,validate@obj
 10963  004470  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 10964  004474  ECD5  F027         	call	_validate	;wreg free
 10965  004478  6E4B               	movwf	f_sync@res,c
 10966                           
 10967                           ;ff.c: 2823:  if (res == FR_OK) {
 10968  00447A  504B               	movf	f_sync@res,w,c
 10969  00447C  A4D8               	btfss	status,2,c
 10970  00447E  D095               	goto	l5798
 10971                           
 10972                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 10973  004480  EE20 F004          	lfsr	2,4
 10974  004484  5045               	movf	f_sync@fp,w,c
 10975  004486  26D9               	addwf	fsr2l,f,c
 10976  004488  5046               	movf	f_sync@fp+1,w,c
 10977  00448A  22DA               	addwfc	fsr2h,f,c
 10978  00448C  AADF               	btfss	indf2,5,c
 10979  00448E  D08D               	goto	l5798
 10980                           
 10981                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 10982  004490  C045  FFD9         	movff	f_sync@fp,fsr2l
 10983  004494  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 10984  004498  CFDE F030          	movff	postinc2,move_window@fs
 10985  00449C  CFDD F031          	movff	postdec2,move_window@fs+1
 10986  0044A0  EE20 F01A          	lfsr	2,26
 10987  0044A4  5045               	movf	f_sync@fp,w,c
 10988  0044A6  26D9               	addwf	fsr2l,f,c
 10989  0044A8  5046               	movf	f_sync@fp+1,w,c
 10990  0044AA  22DA               	addwfc	fsr2h,f,c
 10991  0044AC  CFDE F032          	movff	postinc2,move_window@sector
 10992  0044B0  CFDE F033          	movff	postinc2,move_window@sector+1
 10993  0044B4  CFDE F034          	movff	postinc2,move_window@sector+2
 10994  0044B8  CFDE F035          	movff	postinc2,move_window@sector+3
 10995  0044BC  EC82  F027         	call	_move_window	;wreg free
 10996  0044C0  6E4B               	movwf	f_sync@res,c
 10997                           
 10998                           ;ff.c: 2834:    if (res == FR_OK) {
 10999  0044C2  504B               	movf	f_sync@res,w,c
 11000  0044C4  A4D8               	btfss	status,2,c
 11001  0044C6  D071               	goto	l5798
 11002                           
 11003                           ;ff.c: 2835:     dir = fp->dir_ptr;
 11004  0044C8  EE20 F01E          	lfsr	2,30
 11005  0044CC  5045               	movf	f_sync@fp,w,c
 11006  0044CE  26D9               	addwf	fsr2l,f,c
 11007  0044D0  5046               	movf	f_sync@fp+1,w,c
 11008  0044D2  22DA               	addwfc	fsr2h,f,c
 11009  0044D4  CFDE F04C          	movff	postinc2,f_sync@dir
 11010  0044D8  CFDD F04D          	movff	postdec2,f_sync@dir+1
 11011                           
 11012                           ;ff.c: 2836:     dir[11] |= 0x20;
 11013  0044DC  EE20 F00B          	lfsr	2,11
 11014  0044E0  504C               	movf	f_sync@dir,w,c
 11015  0044E2  26D9               	addwf	fsr2l,f,c
 11016  0044E4  504D               	movf	f_sync@dir+1,w,c
 11017  0044E6  22DA               	addwfc	fsr2h,f,c
 11018  0044E8  0E00               	movlw	0
 11019  0044EA  8ADB               	bsf	plusw2,5,c
 11020                           
 11021                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11022  0044EC  EE20 F00A          	lfsr	2,10
 11023  0044F0  5045               	movf	f_sync@fp,w,c
 11024  0044F2  26D9               	addwf	fsr2l,f,c
 11025  0044F4  5046               	movf	f_sync@fp+1,w,c
 11026  0044F6  22DA               	addwfc	fsr2h,f,c
 11027  0044F8  EE10 F01C          	lfsr	1,28
 11028  0044FC  504C               	movf	f_sync@dir,w,c
 11029  0044FE  26E1               	addwf	fsr1l,f,c
 11030  004500  504D               	movf	f_sync@dir+1,w,c
 11031  004502  22E2               	addwfc	fsr1h,f,c
 11032  004504  CFDE FFE6          	movff	postinc2,postinc1
 11033  004508  CFDE FFE6          	movff	postinc2,postinc1
 11034  00450C  CFDE FFE6          	movff	postinc2,postinc1
 11035  004510  CFDE FFE6          	movff	postinc2,postinc1
 11036                           
 11037                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11038  004514  C04C  F001         	movff	f_sync@dir,st_clust@dir
 11039  004518  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11040  00451C  EE20 F00E          	lfsr	2,14
 11041  004520  5045               	movf	f_sync@fp,w,c
 11042  004522  26D9               	addwf	fsr2l,f,c
 11043  004524  5046               	movf	f_sync@fp+1,w,c
 11044  004526  22DA               	addwfc	fsr2h,f,c
 11045  004528  CFDE F003          	movff	postinc2,st_clust@cl
 11046  00452C  CFDE F004          	movff	postinc2,st_clust@cl+1
 11047  004530  CFDE F005          	movff	postinc2,st_clust@cl+2
 11048  004534  CFDE F006          	movff	postinc2,st_clust@cl+3
 11049  004538  ECBC  F02A         	call	_st_clust	;wreg free
 11050                           
 11051                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11052  00453C  EE20 F016          	lfsr	2,22
 11053  004540  504C               	movf	f_sync@dir,w,c
 11054  004542  26D9               	addwf	fsr2l,f,c
 11055  004544  504D               	movf	f_sync@dir+1,w,c
 11056  004546  22DA               	addwfc	fsr2h,f,c
 11057  004548  0E00               	movlw	0
 11058  00454A  6EDE               	movwf	postinc2,c
 11059  00454C  0E00               	movlw	0
 11060  00454E  6EDE               	movwf	postinc2,c
 11061  004550  0E21               	movlw	33
 11062  004552  6EDE               	movwf	postinc2,c
 11063  004554  0E46               	movlw	70
 11064  004556  6EDD               	movwf	postdec2,c
 11065                           
 11066                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11067  004558  EE20 F012          	lfsr	2,18
 11068  00455C  504C               	movf	f_sync@dir,w,c
 11069  00455E  26D9               	addwf	fsr2l,f,c
 11070  004560  504D               	movf	f_sync@dir+1,w,c
 11071  004562  22DA               	addwfc	fsr2h,f,c
 11072  004564  0E00               	movlw	0
 11073  004566  6EDE               	movwf	postinc2,c
 11074  004568  0E00               	movlw	0
 11075  00456A  6EDD               	movwf	postdec2,c
 11076                           
 11077                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11078  00456C  EE20 F004          	lfsr	2,4
 11079  004570  5045               	movf	f_sync@fp,w,c
 11080  004572  26D9               	addwf	fsr2l,f,c
 11081  004574  5046               	movf	f_sync@fp+1,w,c
 11082  004576  22DA               	addwfc	fsr2h,f,c
 11083  004578  0EDF               	movlw	223
 11084  00457A  16DF               	andwf	indf2,f,c
 11085                           
 11086                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11087  00457C  C045  FFD9         	movff	f_sync@fp,fsr2l
 11088  004580  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11089  004584  EE10 F004          	lfsr	1,4
 11090  004588  50DE               	movf	postinc2,w,c
 11091  00458A  26E1               	addwf	fsr1l,f,c
 11092  00458C  50DD               	movf	postdec2,w,c
 11093  00458E  22E2               	addwfc	fsr1h,f,c
 11094  004590  0E01               	movlw	1
 11095  004592  6EE7               	movwf	indf1,c
 11096                           
 11097                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11098  004594  C045  FFD9         	movff	f_sync@fp,fsr2l
 11099  004598  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11100  00459C  CFDE F03A          	movff	postinc2,sync_fs@fs
 11101  0045A0  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11102  0045A4  ECC0  F01E         	call	_sync_fs	;wreg free
 11103  0045A8  6E4B               	movwf	f_sync@res,c
 11104  0045AA                     l5798:
 11105                           
 11106                           ;ff.c: 2849:  return res;
 11107  0045AA  504B               	movf	f_sync@res,w,c
 11108  0045AC  0012               	return		;funcret
 11109  0045AE                     __end_of_f_sync:
 11110                           	opt callstack 0
 11111                           
 11112 ;; *************** function _validate *****************
 11113 ;; Defined at:
 11114 ;;		line 2372 in file "ff.c"
 11115 ;; Parameters:    Size  Location     Type
 11116 ;;  obj             2    1[COMRAM] PTR void 
 11117 ;;		 -> Fil(32), 
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;  fil             2    7[COMRAM] PTR struct .
 11120 ;;		 -> Fil(32), 
 11121 ;; Return value:  Size  Location     Type
 11122 ;;                  1    wreg      enum E93
 11123 ;; Registers used:
 11124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11125 ;; Tracked objects:
 11126 ;;		On entry : 0/0
 11127 ;;		On exit  : 0/0
 11128 ;;		Unchanged: 0/0
 11129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11130 ;;      Params:         2       0       0       0       0       0       0       0       0
 11131 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11132 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11133 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11134 ;;Total ram usage:        8 bytes
 11135 ;; Hardware stack levels used:    1
 11136 ;; Hardware stack levels required when called:    1
 11137 ;; This function calls:
 11138 ;;		_disk_status
 11139 ;; This function is called by:
 11140 ;;		_f_write
 11141 ;;		_f_sync
 11142 ;;		_f_close
 11143 ;;		_f_lseek
 11144 ;;		_f_read
 11145 ;; This function uses a non-reentrant model
 11146 ;;
 11147                           
 11148                           	psect	text31
 11149  004FAA                     __ptext31:
 11150                           	opt callstack 0
 11151  004FAA                     _validate:
 11152                           	opt callstack 27
 11153                           
 11154                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11155                           
 11156                           ;incstack = 0
 11157  004FAA  C002  F008         	movff	validate@obj,validate@fil
 11158  004FAE  C003  F009         	movff	validate@obj+1,validate@fil+1
 11159                           
 11160                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11161  004FB2  5008               	movf	validate@fil,w,c
 11162  004FB4  1009               	iorwf	validate@fil+1,w,c
 11163  004FB6  B4D8               	btfsc	status,2,c
 11164  004FB8  D03E               	goto	u7050
 11165  004FBA  C008  FFD9         	movff	validate@fil,fsr2l
 11166  004FBE  C009  FFDA         	movff	validate@fil+1,fsr2h
 11167  004FC2  50DE               	movf	postinc2,w,c
 11168  004FC4  10DE               	iorwf	postinc2,w,c
 11169  004FC6  B4D8               	btfsc	status,2,c
 11170  004FC8  D036               	goto	u7050
 11171  004FCA  C008  FFD9         	movff	validate@fil,fsr2l
 11172  004FCE  C009  FFDA         	movff	validate@fil+1,fsr2h
 11173  004FD2  CFDE F004          	movff	postinc2,??_validate
 11174  004FD6  CFDD F005          	movff	postdec2,??_validate+1
 11175  004FDA  C004  FFD9         	movff	??_validate,fsr2l
 11176  004FDE  C005  FFDA         	movff	??_validate+1,fsr2h
 11177  004FE2  50DF               	movf	indf2,w,c
 11178  004FE4  B4D8               	btfsc	status,2,c
 11179  004FE6  D027               	goto	u7050
 11180  004FE8  EE20 F002          	lfsr	2,2
 11181  004FEC  5008               	movf	validate@fil,w,c
 11182  004FEE  26D9               	addwf	fsr2l,f,c
 11183  004FF0  5009               	movf	validate@fil+1,w,c
 11184  004FF2  22DA               	addwfc	fsr2h,f,c
 11185  004FF4  C008  FFE1         	movff	validate@fil,fsr1l
 11186  004FF8  C009  FFE2         	movff	validate@fil+1,fsr1h
 11187  004FFC  EE00 F006          	lfsr	0,6
 11188  005000  50E6               	movf	postinc1,w,c
 11189  005002  26E9               	addwf	fsr0l,f,c
 11190  005004  50E5               	movf	postdec1,w,c
 11191  005006  22EA               	addwfc	fsr0h,f,c
 11192  005008  50DE               	movf	postinc2,w,c
 11193  00500A  18EE               	xorwf	postinc0,w,c
 11194  00500C  E114               	bnz	l5368
 11195  00500E  50DE               	movf	postinc2,w,c
 11196  005010  18EE               	xorwf	postinc0,w,c
 11197  005012  A4D8               	btfss	status,2,c
 11198  005014  D010               	goto	u7050
 11199  005016  C008  FFD9         	movff	validate@fil,fsr2l
 11200  00501A  C009  FFDA         	movff	validate@fil+1,fsr2h
 11201  00501E  EE10 F001          	lfsr	1,1
 11202  005022  50DE               	movf	postinc2,w,c
 11203  005024  26E1               	addwf	fsr1l,f,c
 11204  005026  50DD               	movf	postdec2,w,c
 11205  005028  22E2               	addwfc	fsr1h,f,c
 11206  00502A  50E7               	movf	indf1,w,c
 11207  00502C  ECF3  F02A         	call	_disk_status
 11208  005030  6E04               	movwf	??_validate& (0+255),c
 11209  005032  A004               	btfss	??_validate,0,c
 11210  005034  D002               	goto	l5372
 11211  005036                     u7050:
 11212  005036                     l5368:
 11213                           
 11214                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11215  005036  0E09               	movlw	9
 11216  005038  0012               	return	
 11217  00503A                     l5372:
 11218                           
 11219                           ;ff.c: 2384:  return FR_OK;
 11220  00503A  0E00               	movlw	0
 11221  00503C  0012               	return		;funcret
 11222  00503E                     __end_of_validate:
 11223                           	opt callstack 0
 11224                           
 11225 ;; *************** function _disk_status *****************
 11226 ;; Defined at:
 11227 ;;		line 356 in file "diskio.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;  pdrv            1    wreg     unsigned char 
 11230 ;; Auto vars:     Size  Location     Type
 11231 ;;  pdrv            1    0[COMRAM] unsigned char 
 11232 ;; Return value:  Size  Location     Type
 11233 ;;                  1    wreg      unsigned char 
 11234 ;; Registers used:
 11235 ;;		wreg, status,2
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11241 ;;      Params:         0       0       0       0       0       0       0       0       0
 11242 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11243 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11244 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11245 ;;Total ram usage:        1 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; This function calls:
 11248 ;;		Nothing
 11249 ;; This function is called by:
 11250 ;;		_find_volume
 11251 ;;		_validate
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           	psect	text32
 11256  0055E6                     __ptext32:
 11257                           	opt callstack 0
 11258  0055E6                     _disk_status:
 11259                           	opt callstack 27
 11260                           
 11261                           ;incstack = 0
 11262                           ;disk_status@pdrv stored from wreg
 11263  0055E6  6E01               	movwf	disk_status@pdrv,c
 11264                           
 11265                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11266  0055E8  5001               	movf	disk_status@pdrv,w,c
 11267  0055EA  B4D8               	btfsc	status,2,c
 11268  0055EC  D002               	goto	l4598
 11269  0055EE  0E01               	movlw	1
 11270  0055F0  0012               	return	
 11271  0055F2                     l4598:
 11272                           
 11273                           ;diskio.c: 361:  return Stat;
 11274  0055F2  0100               	movlb	0	; () banked
 11275  0055F4  51FA               	movf	_Stat& (0+255),w,b
 11276  0055F6  0012               	return		;funcret
 11277  0055F8                     __end_of_disk_status:
 11278                           	opt callstack 0
 11279                           
 11280 ;; *************** function _sync_fs *****************
 11281 ;; Defined at:
 11282 ;;		line 760 in file "ff.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  fs              2   57[COMRAM] PTR struct .
 11285 ;;		 -> NULL(0), FatFs(558), 
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;  res             1   67[COMRAM] enum E93
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  1    wreg      enum E93
 11290 ;; Registers used:
 11291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11292 ;; Tracked objects:
 11293 ;;		On entry : 0/0
 11294 ;;		On exit  : 0/0
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11297 ;;      Params:         2       0       0       0       0       0       0       0       0
 11298 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11299 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11300 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11301 ;;Total ram usage:       11 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    7
 11304 ;; This function calls:
 11305 ;;		_disk_ioctl
 11306 ;;		_disk_write
 11307 ;;		_mem_set
 11308 ;;		_sync_window
 11309 ;; This function is called by:
 11310 ;;		_f_sync
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           	psect	text33
 11315  003D80                     __ptext33:
 11316                           	opt callstack 0
 11317  003D80                     _sync_fs:
 11318                           	opt callstack 20
 11319                           
 11320                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11321                           
 11322                           ;incstack = 0
 11323  003D80  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11324  003D84  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11325  003D88  ECA0  F01F         	call	_sync_window	;wreg free
 11326  003D8C  6E44               	movwf	sync_fs@res,c
 11327                           
 11328                           ;ff.c: 768:  if (res == FR_OK) {
 11329  003D8E  5044               	movf	sync_fs@res,w,c
 11330  003D90  A4D8               	btfss	status,2,c
 11331  003D92  D0D4               	goto	l307
 11332                           
 11333                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11334  003D94  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11335  003D98  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11336  003D9C  0E03               	movlw	3
 11337  003D9E  18DE               	xorwf	postinc2,w,c
 11338  003DA0  A4D8               	btfss	status,2,c
 11339  003DA2  D0B8               	goto	l5064
 11340  003DA4  EE20 F005          	lfsr	2,5
 11341  003DA8  503A               	movf	sync_fs@fs,w,c
 11342  003DAA  26D9               	addwf	fsr2l,f,c
 11343  003DAC  503B               	movf	sync_fs@fs+1,w,c
 11344  003DAE  22DA               	addwfc	fsr2h,f,c
 11345  003DB0  04DE               	decf	postinc2,w,c
 11346  003DB2  A4D8               	btfss	status,2,c
 11347  003DB4  D0AF               	goto	l5064
 11348                           
 11349                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11350  003DB6  0E2E               	movlw	46
 11351  003DB8  243A               	addwf	sync_fs@fs,w,c
 11352  003DBA  6E01               	movwf	mem_set@dst,c
 11353  003DBC  0E00               	movlw	0
 11354  003DBE  203B               	addwfc	sync_fs@fs+1,w,c
 11355  003DC0  6E02               	movwf	mem_set@dst+1,c
 11356  003DC2  0E00               	movlw	0
 11357  003DC4  6E04               	movwf	mem_set@val+1,c
 11358  003DC6  0E00               	movlw	0
 11359  003DC8  6E03               	movwf	mem_set@val,c
 11360  003DCA  0E02               	movlw	2
 11361  003DCC  6E06               	movwf	mem_set@cnt+1,c
 11362  003DCE  0E00               	movlw	0
 11363  003DD0  6E05               	movwf	mem_set@cnt,c
 11364  003DD2  ECA6  F02A         	call	_mem_set	;wreg free
 11365                           
 11366                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11367  003DD6  EE22 F02C          	lfsr	2,556
 11368  003DDA  503A               	movf	sync_fs@fs,w,c
 11369  003DDC  26D9               	addwf	fsr2l,f,c
 11370  003DDE  503B               	movf	sync_fs@fs+1,w,c
 11371  003DE0  22DA               	addwfc	fsr2h,f,c
 11372  003DE2  0E55               	movlw	85
 11373  003DE4  6EDE               	movwf	postinc2,c
 11374  003DE6  0EAA               	movlw	170
 11375  003DE8  6EDD               	movwf	postdec2,c
 11376                           
 11377                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11378  003DEA  EE20 F02E          	lfsr	2,46
 11379  003DEE  503A               	movf	sync_fs@fs,w,c
 11380  003DF0  26D9               	addwf	fsr2l,f,c
 11381  003DF2  503B               	movf	sync_fs@fs+1,w,c
 11382  003DF4  22DA               	addwfc	fsr2h,f,c
 11383  003DF6  0E52               	movlw	82
 11384  003DF8  6EDE               	movwf	postinc2,c
 11385  003DFA  0E52               	movlw	82
 11386  003DFC  6EDE               	movwf	postinc2,c
 11387  003DFE  0E61               	movlw	97
 11388  003E00  6EDE               	movwf	postinc2,c
 11389  003E02  0E41               	movlw	65
 11390  003E04  6EDD               	movwf	postdec2,c
 11391                           
 11392                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11393  003E06  EE22 F012          	lfsr	2,530
 11394  003E0A  503A               	movf	sync_fs@fs,w,c
 11395  003E0C  26D9               	addwf	fsr2l,f,c
 11396  003E0E  503B               	movf	sync_fs@fs+1,w,c
 11397  003E10  22DA               	addwfc	fsr2h,f,c
 11398  003E12  0E72               	movlw	114
 11399  003E14  6EDE               	movwf	postinc2,c
 11400  003E16  0E72               	movlw	114
 11401  003E18  6EDE               	movwf	postinc2,c
 11402  003E1A  0E41               	movlw	65
 11403  003E1C  6EDE               	movwf	postinc2,c
 11404  003E1E  0E61               	movlw	97
 11405  003E20  6EDD               	movwf	postdec2,c
 11406                           
 11407                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11408  003E22  EE20 F00E          	lfsr	2,14
 11409  003E26  503A               	movf	sync_fs@fs,w,c
 11410  003E28  26D9               	addwf	fsr2l,f,c
 11411  003E2A  503B               	movf	sync_fs@fs+1,w,c
 11412  003E2C  22DA               	addwfc	fsr2h,f,c
 11413  003E2E  EE12 F016          	lfsr	1,534
 11414  003E32  503A               	movf	sync_fs@fs,w,c
 11415  003E34  26E1               	addwf	fsr1l,f,c
 11416  003E36  503B               	movf	sync_fs@fs+1,w,c
 11417  003E38  22E2               	addwfc	fsr1h,f,c
 11418  003E3A  CFDE FFE6          	movff	postinc2,postinc1
 11419  003E3E  CFDE FFE6          	movff	postinc2,postinc1
 11420  003E42  CFDE FFE6          	movff	postinc2,postinc1
 11421  003E46  CFDE FFE6          	movff	postinc2,postinc1
 11422                           
 11423                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11424  003E4A  EE20 F00A          	lfsr	2,10
 11425  003E4E  503A               	movf	sync_fs@fs,w,c
 11426  003E50  26D9               	addwf	fsr2l,f,c
 11427  003E52  503B               	movf	sync_fs@fs+1,w,c
 11428  003E54  22DA               	addwfc	fsr2h,f,c
 11429  003E56  EE12 F01A          	lfsr	1,538
 11430  003E5A  503A               	movf	sync_fs@fs,w,c
 11431  003E5C  26E1               	addwf	fsr1l,f,c
 11432  003E5E  503B               	movf	sync_fs@fs+1,w,c
 11433  003E60  22E2               	addwfc	fsr1h,f,c
 11434  003E62  CFDE FFE6          	movff	postinc2,postinc1
 11435  003E66  CFDE FFE6          	movff	postinc2,postinc1
 11436  003E6A  CFDE FFE6          	movff	postinc2,postinc1
 11437  003E6E  CFDE FFE6          	movff	postinc2,postinc1
 11438                           
 11439                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11440  003E72  EE20 F01A          	lfsr	2,26
 11441  003E76  503A               	movf	sync_fs@fs,w,c
 11442  003E78  26D9               	addwf	fsr2l,f,c
 11443  003E7A  503B               	movf	sync_fs@fs+1,w,c
 11444  003E7C  22DA               	addwfc	fsr2h,f,c
 11445  003E7E  CFDE F03C          	movff	postinc2,??_sync_fs
 11446  003E82  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11447  003E86  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11448  003E8A  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11449  003E8E  0E01               	movlw	1
 11450  003E90  243C               	addwf	??_sync_fs,w,c
 11451  003E92  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11452  003E94  0E00               	movlw	0
 11453  003E96  203D               	addwfc	??_sync_fs+1,w,c
 11454  003E98  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11455  003E9A  0E00               	movlw	0
 11456  003E9C  203E               	addwfc	??_sync_fs+2,w,c
 11457  003E9E  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11458  003EA0  0E00               	movlw	0
 11459  003EA2  203F               	addwfc	??_sync_fs+3,w,c
 11460  003EA4  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11461  003EA6  EE20 F02A          	lfsr	2,42
 11462  003EAA  503A               	movf	sync_fs@fs,w,c
 11463  003EAC  26D9               	addwf	fsr2l,f,c
 11464  003EAE  503B               	movf	sync_fs@fs+1,w,c
 11465  003EB0  22DA               	addwfc	fsr2h,f,c
 11466  003EB2  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11467  003EB6  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11468  003EBA  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11469  003EBE  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11470                           
 11471                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11472  003EC2  0E2E               	movlw	46
 11473  003EC4  243A               	addwf	sync_fs@fs,w,c
 11474  003EC6  6E11               	movwf	disk_write@buff,c
 11475  003EC8  0E00               	movlw	0
 11476  003ECA  203B               	addwfc	sync_fs@fs+1,w,c
 11477  003ECC  6E12               	movwf	disk_write@buff+1,c
 11478  003ECE  EE20 F02A          	lfsr	2,42
 11479  003ED2  503A               	movf	sync_fs@fs,w,c
 11480  003ED4  26D9               	addwf	fsr2l,f,c
 11481  003ED6  503B               	movf	sync_fs@fs+1,w,c
 11482  003ED8  22DA               	addwfc	fsr2h,f,c
 11483  003EDA  CFDE F013          	movff	postinc2,disk_write@sector
 11484  003EDE  CFDE F014          	movff	postinc2,disk_write@sector+1
 11485  003EE2  CFDE F015          	movff	postinc2,disk_write@sector+2
 11486  003EE6  CFDE F016          	movff	postinc2,disk_write@sector+3
 11487  003EEA  0E00               	movlw	0
 11488  003EEC  6E18               	movwf	disk_write@count+1,c
 11489  003EEE  0E01               	movlw	1
 11490  003EF0  6E17               	movwf	disk_write@count,c
 11491  003EF2  EE20 F001          	lfsr	2,1
 11492  003EF6  503A               	movf	sync_fs@fs,w,c
 11493  003EF8  26D9               	addwf	fsr2l,f,c
 11494  003EFA  503B               	movf	sync_fs@fs+1,w,c
 11495  003EFC  22DA               	addwfc	fsr2h,f,c
 11496  003EFE  50DF               	movf	indf2,w,c
 11497  003F00  ECD7  F022         	call	_disk_write
 11498                           
 11499                           ;ff.c: 781:    fs->fsi_flag = 0;
 11500  003F04  EE20 F005          	lfsr	2,5
 11501  003F08  503A               	movf	sync_fs@fs,w,c
 11502  003F0A  26D9               	addwf	fsr2l,f,c
 11503  003F0C  503B               	movf	sync_fs@fs+1,w,c
 11504  003F0E  22DA               	addwfc	fsr2h,f,c
 11505  003F10  0E00               	movlw	0
 11506  003F12  6EDF               	movwf	indf2,c
 11507  003F14                     l5064:
 11508                           
 11509                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11510  003F14  0E00               	movlw	0
 11511  003F16  6E11               	movwf	disk_ioctl@cmd,c
 11512  003F18  0E00               	movlw	0
 11513  003F1A  6E12               	movwf	disk_ioctl@buff,c
 11514  003F1C  0E00               	movlw	0
 11515  003F1E  6E13               	movwf	disk_ioctl@buff+1,c
 11516  003F20  EE20 F001          	lfsr	2,1
 11517  003F24  503A               	movf	sync_fs@fs,w,c
 11518  003F26  26D9               	addwf	fsr2l,f,c
 11519  003F28  503B               	movf	sync_fs@fs+1,w,c
 11520  003F2A  22DA               	addwfc	fsr2h,f,c
 11521  003F2C  50DF               	movf	indf2,w,c
 11522  003F2E  ECA8  F00F         	call	_disk_ioctl
 11523  003F32  0900               	iorlw	0
 11524  003F34  B4D8               	btfsc	status,2,c
 11525  003F36  D002               	goto	l307
 11526                           
 11527                           ;ff.c: 785:    res = FR_DISK_ERR;
 11528  003F38  0E01               	movlw	1
 11529  003F3A  6E44               	movwf	sync_fs@res,c
 11530  003F3C                     l307:
 11531                           
 11532                           ;ff.c: 788:  return res;
 11533  003F3C  5044               	movf	sync_fs@res,w,c
 11534  003F3E  0012               	return		;funcret
 11535  003F40                     __end_of_sync_fs:
 11536                           	opt callstack 0
 11537                           
 11538 ;; *************** function _mem_set *****************
 11539 ;; Defined at:
 11540 ;;		line 524 in file "ff.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;  dst             2    0[COMRAM] PTR void 
 11543 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11544 ;;  val             2    2[COMRAM] int 
 11545 ;;  cnt             2    4[COMRAM] unsigned short 
 11546 ;; Auto vars:     Size  Location     Type
 11547 ;;  d               2    6[COMRAM] PTR unsigned char 
 11548 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11549 ;; Return value:  Size  Location     Type
 11550 ;;                  1    wreg      void 
 11551 ;; Registers used:
 11552 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11558 ;;      Params:         6       0       0       0       0       0       0       0       0
 11559 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11560 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11561 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11562 ;;Total ram usage:        8 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; This function calls:
 11565 ;;		Nothing
 11566 ;; This function is called by:
 11567 ;;		_sync_fs
 11568 ;;		_dir_next
 11569 ;;		_dir_register
 11570 ;;		_create_name
 11571 ;; This function uses a non-reentrant model
 11572 ;;
 11573                           
 11574                           	psect	text34
 11575  00554C                     __ptext34:
 11576                           	opt callstack 0
 11577  00554C                     _mem_set:
 11578                           	opt callstack 25
 11579                           
 11580                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11581                           
 11582                           ;incstack = 0
 11583  00554C  C001  F007         	movff	mem_set@dst,mem_set@d
 11584  005550  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11585                           
 11586                           ;ff.c: 527:  while (cnt--)
 11587  005554  D008               	goto	l4496
 11588  005556                     l4492:
 11589                           
 11590                           ;ff.c: 528:   *d++ = (BYTE)val;
 11591  005556  C007  FFD9         	movff	mem_set@d,fsr2l
 11592  00555A  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11593  00555E  C003  FFDF         	movff	mem_set@val,indf2
 11594  005562  4A07               	infsnz	mem_set@d,f,c
 11595  005564  2A08               	incf	mem_set@d+1,f,c
 11596  005566                     l4496:
 11597                           
 11598                           ;ff.c: 527:  while (cnt--)
 11599  005566  0605               	decf	mem_set@cnt,f,c
 11600  005568  A0D8               	btfss	status,0,c
 11601  00556A  0606               	decf	mem_set@cnt+1,f,c
 11602  00556C  2805               	incf	mem_set@cnt,w,c
 11603  00556E  E1F3               	bnz	l4492
 11604  005570  2806               	incf	mem_set@cnt+1,w,c
 11605  005572  B4D8               	btfsc	status,2,c
 11606  005574  0012               	return	
 11607  005576  D7EF               	goto	l4492
 11608  005578                     __end_of_mem_set:
 11609                           	opt callstack 0
 11610                           
 11611 ;; *************** function _disk_ioctl *****************
 11612 ;; Defined at:
 11613 ;;		line 446 in file "diskio.c"
 11614 ;; Parameters:    Size  Location     Type
 11615 ;;  pdrv            1    wreg     unsigned char 
 11616 ;;  cmd             1   16[COMRAM] unsigned char 
 11617 ;;  buff            2   17[COMRAM] PTR void 
 11618 ;;		 -> NULL(0), 
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  pdrv            1   48[COMRAM] unsigned char 
 11621 ;;  csd            16   32[COMRAM] unsigned char [16]
 11622 ;;  csize           4   49[COMRAM] unsigned long 
 11623 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11624 ;;		 -> NULL(0), 
 11625 ;;  n               1   54[COMRAM] unsigned char 
 11626 ;;  res             1   53[COMRAM] enum E43
 11627 ;; Return value:  Size  Location     Type
 11628 ;;                  1    wreg      enum E43
 11629 ;; Registers used:
 11630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11631 ;; Tracked objects:
 11632 ;;		On entry : 0/0
 11633 ;;		On exit  : 0/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11636 ;;      Params:         3       0       0       0       0       0       0       0       0
 11637 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11638 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11639 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11640 ;;Total ram usage:       41 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; Hardware stack levels required when called:    5
 11643 ;; This function calls:
 11644 ;;		_SPI1_Exchange8bit
 11645 ;;		___wmul
 11646 ;;		_deselect
 11647 ;;		_rcvr_datablock
 11648 ;;		_select
 11649 ;;		_send_cmd
 11650 ;; This function is called by:
 11651 ;;		_sync_fs
 11652 ;; This function uses a non-reentrant model
 11653 ;;
 11654                           
 11655                           	psect	text35
 11656  001F50                     __ptext35:
 11657                           	opt callstack 0
 11658  001F50                     _disk_ioctl:
 11659                           	opt callstack 21
 11660                           
 11661                           ;incstack = 0
 11662                           ;disk_ioctl@pdrv stored from wreg
 11663  001F50  6E31               	movwf	disk_ioctl@pdrv,c
 11664                           
 11665                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11666  001F52  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11667  001F56  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11668                           
 11669                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11670  001F5A  5031               	movf	disk_ioctl@pdrv,w,c
 11671  001F5C  B4D8               	btfsc	status,2,c
 11672  001F5E  D002               	goto	l4610
 11673  001F60  0E04               	movlw	4
 11674  001F62  0012               	return	
 11675  001F64                     l4610:
 11676                           
 11677                           ;diskio.c: 459:  res = RES_ERROR;
 11678  001F64  0E01               	movlw	1
 11679  001F66  6E36               	movwf	disk_ioctl@res,c
 11680                           
 11681                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11682  001F68  0100               	movlb	0	; () banked
 11683  001F6A  A1FA               	btfss	_Stat& (0+255),0,b
 11684  001F6C  D21B               	goto	l4710
 11685                           
 11686                           ; BSR set to: 0
 11687  001F6E  0E03               	movlw	3
 11688  001F70  0012               	return	
 11689  001F72                     l4618:
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11693  001F72  ECE4  F02A         	call	_select	;wreg free
 11694  001F76  0900               	iorlw	0
 11695  001F78  B4D8               	btfsc	status,2,c
 11696  001F7A  D235               	goto	l4712
 11697  001F7C                     u5550:
 11698  001F7C  0E00               	movlw	0
 11699  001F7E  D210               	goto	L13
 11700  001F80                     l4622:
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11704  001F80  0E00               	movlw	0
 11705  001F82  6E0B               	movwf	send_cmd@arg,c
 11706  001F84  0E00               	movlw	0
 11707  001F86  6E0C               	movwf	send_cmd@arg+1,c
 11708  001F88  0E00               	movlw	0
 11709  001F8A  6E0D               	movwf	send_cmd@arg+2,c
 11710  001F8C  0E00               	movlw	0
 11711  001F8E  6E0E               	movwf	send_cmd@arg+3,c
 11712  001F90  0E09               	movlw	9
 11713  001F92  ECD6  F029         	call	_send_cmd
 11714  001F96  0900               	iorlw	0
 11715  001F98  A4D8               	btfss	status,2,c
 11716  001F9A  D225               	goto	l4712
 11717  001F9C  0E21               	movlw	low disk_ioctl@csd
 11718  001F9E  6E02               	movwf	rcvr_datablock@buff,c
 11719  001FA0  0E00               	movlw	high disk_ioctl@csd
 11720  001FA2  6E03               	movwf	rcvr_datablock@buff+1,c
 11721  001FA4  0E00               	movlw	0
 11722  001FA6  6E05               	movwf	rcvr_datablock@btr+1,c
 11723  001FA8  0E10               	movlw	16
 11724  001FAA  6E04               	movwf	rcvr_datablock@btr,c
 11725  001FAC  EC1E  F029         	call	_rcvr_datablock	;wreg free
 11726  001FB0  0900               	iorlw	0
 11727  001FB2  B4D8               	btfsc	status,2,c
 11728  001FB4  D218               	goto	l4712
 11729                           
 11730                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11731  001FB6  4421               	rlncf	disk_ioctl@csd,w,c
 11732  001FB8  46E8               	rlncf	wreg,f,c
 11733  001FBA  0B03               	andlw	3
 11734  001FBC  06E8               	decf	wreg,f,c
 11735  001FBE  A4D8               	btfss	status,2,c
 11736  001FC0  D04E               	goto	l4632
 11737                           
 11738                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11739  001FC2  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11740  001FC6  0E3F               	movlw	63
 11741  001FC8  1614               	andwf	??_disk_ioctl,f,c
 11742  001FCA  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11743  001FCE  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11744  001FD0  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11745  001FD2  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11746  001FD4  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11747  001FD8  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11748  001FDC  6A16               	clrf	??_disk_ioctl+2,c
 11749  001FDE  6A15               	clrf	??_disk_ioctl+1,c
 11750  001FE0  5029               	movf	disk_ioctl@csd+8,w,c
 11751  001FE2  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11752  001FE4  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11753  001FE6  502A               	movf	disk_ioctl@csd+9,w,c
 11754  001FE8  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11755  001FEA  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11756  001FEC  5019               	movf	??_disk_ioctl+5,w,c
 11757  001FEE  261B               	addwf	??_disk_ioctl+7,f,c
 11758  001FF0  501A               	movf	??_disk_ioctl+6,w,c
 11759  001FF2  221C               	addwfc	??_disk_ioctl+8,f,c
 11760  001FF4  501B               	movf	??_disk_ioctl+7,w,c
 11761  001FF6  2415               	addwf	??_disk_ioctl+1,w,c
 11762  001FF8  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11763  001FFA  501C               	movf	??_disk_ioctl+8,w,c
 11764  001FFC  2016               	addwfc	??_disk_ioctl+2,w,c
 11765  001FFE  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11766  002000  0E00               	movlw	0
 11767  002002  2017               	addwfc	??_disk_ioctl+3,w,c
 11768  002004  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11769  002006  0E00               	movlw	0
 11770  002008  2018               	addwfc	??_disk_ioctl+4,w,c
 11771  00200A  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11772  00200C  0E01               	movlw	1
 11773  00200E  241D               	addwf	??_disk_ioctl+9,w,c
 11774  002010  6E32               	movwf	disk_ioctl@csize,c
 11775  002012  0E00               	movlw	0
 11776  002014  201E               	addwfc	??_disk_ioctl+10,w,c
 11777  002016  6E33               	movwf	disk_ioctl@csize+1,c
 11778  002018  0E00               	movlw	0
 11779  00201A  201F               	addwfc	??_disk_ioctl+11,w,c
 11780  00201C  6E34               	movwf	disk_ioctl@csize+2,c
 11781  00201E  0E00               	movlw	0
 11782  002020  2020               	addwfc	??_disk_ioctl+12,w,c
 11783  002022  6E35               	movwf	disk_ioctl@csize+3,c
 11784                           
 11785                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11786  002024  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11787  002028  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11788  00202C  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11789  002030  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11790  002034  0E0A               	movlw	10
 11791  002036                     u5595:
 11792  002036  90D8               	bcf	status,0,c
 11793  002038  3614               	rlcf	??_disk_ioctl,f,c
 11794  00203A  3615               	rlcf	??_disk_ioctl+1,f,c
 11795  00203C  3616               	rlcf	??_disk_ioctl+2,f,c
 11796  00203E  3617               	rlcf	??_disk_ioctl+3,f,c
 11797  002040  2EE8               	decfsz	wreg,f,c
 11798  002042  D7F9               	goto	u5595
 11799  002044  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11800  002048  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11801  00204C  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11802  002050  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11803  002054  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11804  002058  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11805                           
 11806                           ;diskio.c: 473:    } else {
 11807  00205C  D78F               	goto	u5550
 11808  00205E                     l4632:
 11809                           
 11810                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11811  00205E  6A14               	clrf	??_disk_ioctl& (0+255),c
 11812  002060  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11813  002062  D001               	bra	u5605
 11814  002064  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11815  002066                     u5605:
 11816  002066  0E01               	movlw	1
 11817  002068  1614               	andwf	??_disk_ioctl,f,c
 11818  00206A  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11819  00206E  0E0F               	movlw	15
 11820  002070  1615               	andwf	??_disk_ioctl+1,f,c
 11821  002072  502A               	movf	disk_ioctl@csd+9,w,c
 11822  002074  0B03               	andlw	3
 11823  002076  0D02               	mullw	2
 11824  002078  50F3               	movf	prodl,w,c
 11825  00207A  2415               	addwf	??_disk_ioctl+1,w,c
 11826  00207C  2414               	addwf	??_disk_ioctl,w,c
 11827  00207E  0F02               	addlw	2
 11828  002080  6E37               	movwf	disk_ioctl@n,c
 11829                           
 11830                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11831  002082  5027               	movf	disk_ioctl@csd+6,w,c
 11832  002084  0B03               	andlw	3
 11833  002086  6E14               	movwf	??_disk_ioctl& (0+255),c
 11834  002088  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 11835  00208A  0E0A               	movlw	10
 11836  00208C                     u5615:
 11837  00208C  90D8               	bcf	status,0,c
 11838  00208E  3614               	rlcf	??_disk_ioctl,f,c
 11839  002090  3615               	rlcf	??_disk_ioctl+1,f,c
 11840  002092  2EE8               	decfsz	wreg,f,c
 11841  002094  D7FB               	goto	u5615
 11842  002096  5028               	movf	disk_ioctl@csd+7,w,c
 11843  002098  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11844  00209A  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11845  00209C  90D8               	bcf	status,0,c
 11846  00209E  3616               	rlcf	??_disk_ioctl+2,f,c
 11847  0020A0  3617               	rlcf	??_disk_ioctl+3,f,c
 11848  0020A2  90D8               	bcf	status,0,c
 11849  0020A4  3616               	rlcf	??_disk_ioctl+2,f,c
 11850  0020A6  3617               	rlcf	??_disk_ioctl+3,f,c
 11851  0020A8  4429               	rlncf	disk_ioctl@csd+8,w,c
 11852  0020AA  46E8               	rlncf	wreg,f,c
 11853  0020AC  0B03               	andlw	3
 11854  0020AE  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11855  0020B0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11856  0020B2  5016               	movf	??_disk_ioctl+2,w,c
 11857  0020B4  2618               	addwf	??_disk_ioctl+4,f,c
 11858  0020B6  5017               	movf	??_disk_ioctl+3,w,c
 11859  0020B8  2219               	addwfc	??_disk_ioctl+5,f,c
 11860  0020BA  5014               	movf	??_disk_ioctl,w,c
 11861  0020BC  2618               	addwf	??_disk_ioctl+4,f,c
 11862  0020BE  5015               	movf	??_disk_ioctl+1,w,c
 11863  0020C0  2219               	addwfc	??_disk_ioctl+5,f,c
 11864  0020C2  0E01               	movlw	1
 11865  0020C4  2618               	addwf	??_disk_ioctl+4,f,c
 11866  0020C6  0E00               	movlw	0
 11867  0020C8  2219               	addwfc	??_disk_ioctl+5,f,c
 11868  0020CA  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 11869  0020CE  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 11870  0020D2  6A34               	clrf	disk_ioctl@csize+2,c
 11871  0020D4  6A35               	clrf	disk_ioctl@csize+3,c
 11872                           
 11873                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 11874  0020D6  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11875  0020DA  0EF7               	movlw	-9
 11876  0020DC  2614               	addwf	??_disk_ioctl,f,c
 11877  0020DE  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11878  0020E2  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11879  0020E6  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11880  0020EA  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 11881  0020EE  2A14               	incf	??_disk_ioctl,f,c
 11882  0020F0  D005               	goto	u5620
 11883  0020F2                     u5625:
 11884  0020F2  90D8               	bcf	status,0,c
 11885  0020F4  3615               	rlcf	??_disk_ioctl+1,f,c
 11886  0020F6  3616               	rlcf	??_disk_ioctl+2,f,c
 11887  0020F8  3617               	rlcf	??_disk_ioctl+3,f,c
 11888  0020FA  3618               	rlcf	??_disk_ioctl+4,f,c
 11889  0020FC                     u5620:
 11890  0020FC  2E14               	decfsz	??_disk_ioctl,f,c
 11891  0020FE  D7F9               	goto	u5625
 11892  002100  D03D               	goto	L15
 11893  002102                     l220:
 11894                           
 11895                           ; BSR set to: 0
 11896                           ;diskio.c: 483:   if (CardType & 0x04) {
 11897  002102  A5D8               	btfss	_CardType& (0+255),2,b
 11898  002104  D048               	goto	l4658
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 11902  002106  0E00               	movlw	0
 11903  002108  6E0B               	movwf	send_cmd@arg,c
 11904  00210A  0E00               	movlw	0
 11905  00210C  6E0C               	movwf	send_cmd@arg+1,c
 11906  00210E  0E00               	movlw	0
 11907  002110  6E0D               	movwf	send_cmd@arg+2,c
 11908  002112  0E00               	movlw	0
 11909  002114  6E0E               	movwf	send_cmd@arg+3,c
 11910  002116  0E8D               	movlw	141
 11911  002118  ECD6  F029         	call	_send_cmd
 11912  00211C  0900               	iorlw	0
 11913  00211E  A4D8               	btfss	status,2,c
 11914  002120  D162               	goto	l4712
 11915                           
 11916                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 11917  002122  0EFF               	movlw	255
 11918  002124  EC05  F02B         	call	_SPI1_Exchange8bit
 11919                           
 11920                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 11921  002128  0E21               	movlw	low disk_ioctl@csd
 11922  00212A  6E02               	movwf	rcvr_datablock@buff,c
 11923  00212C  0E00               	movlw	high disk_ioctl@csd
 11924  00212E  6E03               	movwf	rcvr_datablock@buff+1,c
 11925  002130  0E00               	movlw	0
 11926  002132  6E05               	movwf	rcvr_datablock@btr+1,c
 11927  002134  0E10               	movlw	16
 11928  002136  6E04               	movwf	rcvr_datablock@btr,c
 11929  002138  EC1E  F029         	call	_rcvr_datablock	;wreg free
 11930  00213C  0900               	iorlw	0
 11931  00213E  B4D8               	btfsc	status,2,c
 11932  002140  D152               	goto	l4712
 11933                           
 11934                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 11935  002142  0E30               	movlw	48
 11936  002144  6E37               	movwf	disk_ioctl@n,c
 11937  002146  D004               	goto	l4652
 11938  002148                     l4648:
 11939  002148  0EFF               	movlw	255
 11940  00214A  EC05  F02B         	call	_SPI1_Exchange8bit
 11941  00214E  0637               	decf	disk_ioctl@n,f,c
 11942  002150                     l4652:
 11943  002150  5037               	movf	disk_ioctl@n,w,c
 11944  002152  A4D8               	btfss	status,2,c
 11945  002154  D7F9               	goto	l4648
 11946                           
 11947                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 11948  002156  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 11949  00215A  3A14               	swapf	??_disk_ioctl,f,c
 11950  00215C  0E0F               	movlw	15
 11951  00215E  1614               	andwf	??_disk_ioctl,f,c
 11952  002160  0E10               	movlw	16
 11953  002162  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11954  002164  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11955  002166  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11956  002168  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11957  00216A  2A14               	incf	??_disk_ioctl,f,c
 11958  00216C  D005               	goto	u5670
 11959  00216E                     u5675:
 11960  00216E  90D8               	bcf	status,0,c
 11961  002170  3615               	rlcf	??_disk_ioctl+1,f,c
 11962  002172  3616               	rlcf	??_disk_ioctl+2,f,c
 11963  002174  3617               	rlcf	??_disk_ioctl+3,f,c
 11964  002176  3618               	rlcf	??_disk_ioctl+4,f,c
 11965  002178                     u5670:
 11966  002178  2E14               	decfsz	??_disk_ioctl,f,c
 11967  00217A  D7F9               	goto	u5675
 11968  00217C                     L15:
 11969  00217C  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11970  002180  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11971  002184  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11972  002188  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11973  00218C  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11974  002190  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 11975  002194  D6F3               	goto	u5550
 11976  002196                     l4658:
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11980  002196  0E00               	movlw	0
 11981  002198  6E0B               	movwf	send_cmd@arg,c
 11982  00219A  0E00               	movlw	0
 11983  00219C  6E0C               	movwf	send_cmd@arg+1,c
 11984  00219E  0E00               	movlw	0
 11985  0021A0  6E0D               	movwf	send_cmd@arg+2,c
 11986  0021A2  0E00               	movlw	0
 11987  0021A4  6E0E               	movwf	send_cmd@arg+3,c
 11988  0021A6  0E09               	movlw	9
 11989  0021A8  ECD6  F029         	call	_send_cmd
 11990  0021AC  0900               	iorlw	0
 11991  0021AE  A4D8               	btfss	status,2,c
 11992  0021B0  D11A               	goto	l4712
 11993  0021B2  0E21               	movlw	low disk_ioctl@csd
 11994  0021B4  6E02               	movwf	rcvr_datablock@buff,c
 11995  0021B6  0E00               	movlw	high disk_ioctl@csd
 11996  0021B8  6E03               	movwf	rcvr_datablock@buff+1,c
 11997  0021BA  0E00               	movlw	0
 11998  0021BC  6E05               	movwf	rcvr_datablock@btr+1,c
 11999  0021BE  0E10               	movlw	16
 12000  0021C0  6E04               	movwf	rcvr_datablock@btr,c
 12001  0021C2  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12002  0021C6  0900               	iorlw	0
 12003  0021C8  B4D8               	btfsc	status,2,c
 12004  0021CA  D10D               	goto	l4712
 12005                           
 12006                           ;diskio.c: 494:     if (CardType & 0x02) {
 12007  0021CC  0100               	movlb	0	; () banked
 12008  0021CE  A3D8               	btfss	_CardType& (0+255),1,b
 12009  0021D0  D02A               	goto	l4666
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 12013  0021D2  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 12014  0021D6  0E06               	movlw	6
 12015  0021D8  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12016  0021DA                     u5715:
 12017  0021DA  90D8               	bcf	status,0,c
 12018  0021DC  3214               	rrcf	??_disk_ioctl,f,c
 12019  0021DE  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 12020  0021E0  D7FC               	goto	u5715
 12021  0021E2  0EFF               	movlw	-1
 12022  0021E4  2614               	addwf	??_disk_ioctl,f,c
 12023  0021E6  502B               	movf	disk_ioctl@csd+10,w,c
 12024  0021E8  0B3F               	andlw	63
 12025  0021EA  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12026  0021EC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12027  0021EE  90D8               	bcf	status,0,c
 12028  0021F0  3616               	rlcf	??_disk_ioctl+2,f,c
 12029  0021F2  3617               	rlcf	??_disk_ioctl+3,f,c
 12030  0021F4  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12031  0021F6  AE2C               	btfss	disk_ioctl@csd+11,7,c
 12032  0021F8  D001               	bra	u5725
 12033  0021FA  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 12034  0021FC                     u5725:
 12035  0021FC  0E01               	movlw	1
 12036  0021FE  1618               	andwf	??_disk_ioctl+4,f,c
 12037  002200  5018               	movf	??_disk_ioctl+4,w,c
 12038  002202  2616               	addwf	??_disk_ioctl+2,f,c
 12039  002204  0E00               	movlw	0
 12040  002206  2217               	addwfc	??_disk_ioctl+3,f,c
 12041  002208  0E01               	movlw	1
 12042  00220A  2616               	addwf	??_disk_ioctl+2,f,c
 12043  00220C  0E00               	movlw	0
 12044  00220E  2217               	addwfc	??_disk_ioctl+3,f,c
 12045  002210  2A14               	incf	??_disk_ioctl,f,c
 12046  002212  D003               	goto	u5734
 12047  002214                     u5735:
 12048  002214  90D8               	bcf	status,0,c
 12049  002216  3616               	rlcf	??_disk_ioctl+2,f,c
 12050  002218  3617               	rlcf	??_disk_ioctl+3,f,c
 12051  00221A                     u5734:
 12052  00221A  2E14               	decfsz	??_disk_ioctl,f,c
 12053  00221C  D7FB               	goto	u5735
 12054  00221E  5016               	movf	??_disk_ioctl+2,w,c
 12055  002220  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12056  002222  5017               	movf	??_disk_ioctl+3,w,c
 12057  002224  D034               	goto	L16
 12058  002226                     l4666:
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12062  002226  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12063  00222A  90D8               	bcf	status,0,c
 12064  00222C  3214               	rrcf	??_disk_ioctl,f,c
 12065  00222E  90D8               	bcf	status,0,c
 12066  002230  3214               	rrcf	??_disk_ioctl,f,c
 12067  002232  0E1F               	movlw	31
 12068  002234  1614               	andwf	??_disk_ioctl,f,c
 12069  002236  0E01               	movlw	1
 12070  002238  2414               	addwf	??_disk_ioctl,w,c
 12071  00223A  6E01               	movwf	___wmul@multiplier,c
 12072  00223C  6A02               	clrf	___wmul@multiplier+1,c
 12073  00223E  0E00               	movlw	0
 12074  002240  2202               	addwfc	___wmul@multiplier+1,f,c
 12075  002242  502C               	movf	disk_ioctl@csd+11,w,c
 12076  002244  0B03               	andlw	3
 12077  002246  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12078  002248  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12079  00224A  90D8               	bcf	status,0,c
 12080  00224C  3615               	rlcf	??_disk_ioctl+1,f,c
 12081  00224E  3616               	rlcf	??_disk_ioctl+2,f,c
 12082  002250  90D8               	bcf	status,0,c
 12083  002252  3615               	rlcf	??_disk_ioctl+1,f,c
 12084  002254  3616               	rlcf	??_disk_ioctl+2,f,c
 12085  002256  90D8               	bcf	status,0,c
 12086  002258  3615               	rlcf	??_disk_ioctl+1,f,c
 12087  00225A  3616               	rlcf	??_disk_ioctl+2,f,c
 12088  00225C  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12089  002260  0E05               	movlw	5
 12090  002262  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12091  002264                     u5745:
 12092  002264  90D8               	bcf	status,0,c
 12093  002266  3217               	rrcf	??_disk_ioctl+3,f,c
 12094  002268  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12095  00226A  D7FC               	goto	u5745
 12096  00226C  0E07               	movlw	7
 12097  00226E  1617               	andwf	??_disk_ioctl+3,f,c
 12098  002270  5017               	movf	??_disk_ioctl+3,w,c
 12099  002272  2615               	addwf	??_disk_ioctl+1,f,c
 12100  002274  0E00               	movlw	0
 12101  002276  2216               	addwfc	??_disk_ioctl+2,f,c
 12102  002278  0E01               	movlw	1
 12103  00227A  2415               	addwf	??_disk_ioctl+1,w,c
 12104  00227C  6E03               	movwf	___wmul@multiplicand,c
 12105  00227E  0E00               	movlw	0
 12106  002280  2016               	addwfc	??_disk_ioctl+2,w,c
 12107  002282  6E04               	movwf	___wmul@multiplicand+1,c
 12108  002284  ECD1  F02A         	call	___wmul	;wreg free
 12109  002288  5001               	movf	?___wmul,w,c
 12110  00228A  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12111  00228C  5002               	movf	?___wmul+1,w,c
 12112  00228E                     L16:
 12113  00228E  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12114  002290  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12115  002292  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12116  002294  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12117  002298  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12118  00229C  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12119  0022A0  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12120  0022A4  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12121  0022A8  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12122  0022AC  D667               	goto	u5550
 12123  0022AE                     l4670:
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;diskio.c: 507:   *ptr = CardType;
 12127  0022AE  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12128  0022B2  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12129  0022B6  C0D8  FFDF         	movff	_CardType,indf2
 12130  0022BA  D660               	goto	u5550
 12131  0022BC                     l4674:
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12135  0022BC  0E00               	movlw	0
 12136  0022BE  6E0B               	movwf	send_cmd@arg,c
 12137  0022C0  0E00               	movlw	0
 12138  0022C2  6E0C               	movwf	send_cmd@arg+1,c
 12139  0022C4  0E00               	movlw	0
 12140  0022C6  6E0D               	movwf	send_cmd@arg+2,c
 12141  0022C8  0E00               	movlw	0
 12142  0022CA  6E0E               	movwf	send_cmd@arg+3,c
 12143  0022CC  0E09               	movlw	9
 12144  0022CE  ECD6  F029         	call	_send_cmd
 12145  0022D2  0900               	iorlw	0
 12146  0022D4  A4D8               	btfss	status,2,c
 12147  0022D6  D087               	goto	l4712
 12148  0022D8  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12149  0022DC  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12150  0022E0  0E00               	movlw	0
 12151  0022E2  6E05               	movwf	rcvr_datablock@btr+1,c
 12152  0022E4  0E10               	movlw	16
 12153  0022E6  6E04               	movwf	rcvr_datablock@btr,c
 12154  0022E8  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12155  0022EC                     L14:
 12156  0022EC  0900               	iorlw	0
 12157  0022EE  A4D8               	btfss	status,2,c
 12158  0022F0  D645               	goto	u5550
 12159  0022F2  D079               	goto	l4712
 12160  0022F4                     l4680:
 12161                           
 12162                           ; BSR set to: 0
 12163                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12164  0022F4  0E00               	movlw	0
 12165  0022F6  6E0B               	movwf	send_cmd@arg,c
 12166  0022F8  0E00               	movlw	0
 12167  0022FA  6E0C               	movwf	send_cmd@arg+1,c
 12168  0022FC  0E00               	movlw	0
 12169  0022FE  6E0D               	movwf	send_cmd@arg+2,c
 12170  002300  0E00               	movlw	0
 12171  002302  6E0E               	movwf	send_cmd@arg+3,c
 12172  002304  0E0A               	movlw	10
 12173  002306  ECD6  F029         	call	_send_cmd
 12174  00230A  0900               	iorlw	0
 12175  00230C  A4D8               	btfss	status,2,c
 12176  00230E  D06B               	goto	l4712
 12177  002310  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12178  002314  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12179  002318  0E00               	movlw	0
 12180  00231A  6E05               	movwf	rcvr_datablock@btr+1,c
 12181  00231C  0E10               	movlw	16
 12182  00231E  6E04               	movwf	rcvr_datablock@btr,c
 12183  002320  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12184  002324  D7E3               	goto	L14
 12185  002326                     l4686:
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12189  002326  0E00               	movlw	0
 12190  002328  6E0B               	movwf	send_cmd@arg,c
 12191  00232A  0E00               	movlw	0
 12192  00232C  6E0C               	movwf	send_cmd@arg+1,c
 12193  00232E  0E00               	movlw	0
 12194  002330  6E0D               	movwf	send_cmd@arg+2,c
 12195  002332  0E00               	movlw	0
 12196  002334  6E0E               	movwf	send_cmd@arg+3,c
 12197  002336  0E3A               	movlw	58
 12198  002338  ECD6  F029         	call	_send_cmd
 12199  00233C  0900               	iorlw	0
 12200  00233E  A4D8               	btfss	status,2,c
 12201  002340  D052               	goto	l4712
 12202                           
 12203                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12204  002342  0E04               	movlw	4
 12205  002344  6E37               	movwf	disk_ioctl@n,c
 12206  002346  D00B               	goto	l4696
 12207  002348                     l4690:
 12208  002348  0EFF               	movlw	255
 12209  00234A  EC05  F02B         	call	_SPI1_Exchange8bit
 12210  00234E  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12211  002352  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12212  002356  6EDF               	movwf	indf2,c
 12213  002358  4A38               	infsnz	disk_ioctl@ptr,f,c
 12214  00235A  2A39               	incf	disk_ioctl@ptr+1,f,c
 12215  00235C  0637               	decf	disk_ioctl@n,f,c
 12216  00235E                     l4696:
 12217  00235E  5037               	movf	disk_ioctl@n,w,c
 12218  002360  B4D8               	btfsc	status,2,c
 12219  002362  D60C               	goto	u5550
 12220  002364  D7F1               	goto	l4690
 12221  002366                     l4700:
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12225  002366  0E00               	movlw	0
 12226  002368  6E0B               	movwf	send_cmd@arg,c
 12227  00236A  0E00               	movlw	0
 12228  00236C  6E0C               	movwf	send_cmd@arg+1,c
 12229  00236E  0E00               	movlw	0
 12230  002370  6E0D               	movwf	send_cmd@arg+2,c
 12231  002372  0E00               	movlw	0
 12232  002374  6E0E               	movwf	send_cmd@arg+3,c
 12233  002376  0E8D               	movlw	141
 12234  002378  ECD6  F029         	call	_send_cmd
 12235  00237C  0900               	iorlw	0
 12236  00237E  A4D8               	btfss	status,2,c
 12237  002380  D032               	goto	l4712
 12238                           
 12239                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12240  002382  0EFF               	movlw	255
 12241  002384  EC05  F02B         	call	_SPI1_Exchange8bit
 12242                           
 12243                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12244  002388  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12245  00238C  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12246  002390  0E00               	movlw	0
 12247  002392  6E05               	movwf	rcvr_datablock@btr+1,c
 12248  002394  0E40               	movlw	64
 12249  002396  6E04               	movwf	rcvr_datablock@btr,c
 12250  002398  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12251  00239C  D7A7               	goto	L14
 12252  00239E                     l4708:
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;diskio.c: 539:   res = RES_PARERR;
 12256  00239E  0E04               	movlw	4
 12257  0023A0                     L13:
 12258  0023A0  6E36               	movwf	disk_ioctl@res,c
 12259                           
 12260                           ;diskio.c: 540:  }
 12261  0023A2  D021               	goto	l4712
 12262  0023A4                     l4710:
 12263                           
 12264                           ; BSR set to: 0
 12265  0023A4  5011               	movf	disk_ioctl@cmd,w,c
 12266  0023A6  6E14               	movwf	??_disk_ioctl& (0+255),c
 12267  0023A8  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12268                           
 12269                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12270                           ; Switch size 1, requested type "simple"
 12271                           ; Number of cases is 1, Range of values is 0 to 0
 12272                           ; switch strategies available:
 12273                           ; Name         Instructions Cycles
 12274                           ; simple_byte            4     3 (average)
 12275                           ;	Chosen strategy is simple_byte
 12276  0023AA  5015               	movf	??_disk_ioctl+1,w,c
 12277  0023AC  0A00               	xorlw	0	; case 0
 12278  0023AE  A4D8               	btfss	status,2,c
 12279  0023B0  D7F6               	goto	l4708
 12280                           
 12281                           ; BSR set to: 0
 12282                           ; Switch size 1, requested type "simple"
 12283                           ; Number of cases is 8, Range of values is 0 to 14
 12284                           ; switch strategies available:
 12285                           ; Name         Instructions Cycles
 12286                           ; simple_byte           25    13 (average)
 12287                           ;	Chosen strategy is simple_byte
 12288  0023B2  5014               	movf	??_disk_ioctl,w,c
 12289  0023B4  0A00               	xorlw	0	; case 0
 12290  0023B6  B4D8               	btfsc	status,2,c
 12291  0023B8  D5DC               	goto	l4618
 12292  0023BA  0A01               	xorlw	1	; case 1
 12293  0023BC  B4D8               	btfsc	status,2,c
 12294  0023BE  D5E0               	goto	l4622
 12295  0023C0  0A02               	xorlw	2	; case 3
 12296  0023C2  B4D8               	btfsc	status,2,c
 12297  0023C4  D69E               	goto	l220
 12298  0023C6  0A09               	xorlw	9	; case 10
 12299  0023C8  B4D8               	btfsc	status,2,c
 12300  0023CA  D771               	goto	l4670
 12301  0023CC  0A01               	xorlw	1	; case 11
 12302  0023CE  B4D8               	btfsc	status,2,c
 12303  0023D0  D775               	goto	l4674
 12304  0023D2  0A07               	xorlw	7	; case 12
 12305  0023D4  B4D8               	btfsc	status,2,c
 12306  0023D6  D78E               	goto	l4680
 12307  0023D8  0A01               	xorlw	1	; case 13
 12308  0023DA  B4D8               	btfsc	status,2,c
 12309  0023DC  D7A4               	goto	l4686
 12310  0023DE  0A03               	xorlw	3	; case 14
 12311  0023E0  B4D8               	btfsc	status,2,c
 12312  0023E2  D7C1               	goto	l4700
 12313  0023E4  D7DC               	goto	l4708
 12314  0023E6                     l4712:
 12315                           
 12316                           ;diskio.c: 542:  deselect();
 12317  0023E6  EC22  F02B         	call	_deselect	;wreg free
 12318                           
 12319                           ;diskio.c: 544:  return res;
 12320  0023EA  5036               	movf	disk_ioctl@res,w,c
 12321  0023EC  0012               	return		;funcret
 12322  0023EE                     __end_of_disk_ioctl:
 12323                           	opt callstack 0
 12324                           
 12325 ;; *************** function ___wmul *****************
 12326 ;; Defined at:
 12327 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;  multiplier      2    0[COMRAM] unsigned int 
 12330 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  product         2    4[COMRAM] unsigned int 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  2    0[COMRAM] unsigned int 
 12335 ;; Registers used:
 12336 ;;		wreg, status,2, status,0, prodl, prodh
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12342 ;;      Params:         4       0       0       0       0       0       0       0       0
 12343 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12345 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12346 ;;Total ram usage:        6 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; This function calls:
 12349 ;;		Nothing
 12350 ;; This function is called by:
 12351 ;;		_disk_ioctl
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           	psect	text36
 12356  0055A2                     __ptext36:
 12357                           	opt callstack 0
 12358  0055A2                     ___wmul:
 12359                           	opt callstack 25
 12360                           
 12361                           ;incstack = 0
 12362  0055A2  5001               	movf	___wmul@multiplier,w,c
 12363  0055A4  0203               	mulwf	___wmul@multiplicand,c
 12364  0055A6  CFF3 F005          	movff	prodl,___wmul@product
 12365  0055AA  CFF4 F006          	movff	prodh,___wmul@product+1
 12366  0055AE  5001               	movf	___wmul@multiplier,w,c
 12367  0055B0  0204               	mulwf	___wmul@multiplicand+1,c
 12368  0055B2  50F3               	movf	prodl,w,c
 12369  0055B4  2606               	addwf	___wmul@product+1,f,c
 12370  0055B6  5002               	movf	___wmul@multiplier+1,w,c
 12371  0055B8  0203               	mulwf	___wmul@multiplicand,c
 12372  0055BA  50F3               	movf	prodl,w,c
 12373  0055BC  2606               	addwf	___wmul@product+1,f,c
 12374  0055BE  C005  F001         	movff	___wmul@product,?___wmul
 12375  0055C2  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12376  0055C6  0012               	return		;funcret
 12377  0055C8                     __end_of___wmul:
 12378                           	opt callstack 0
 12379                           
 12380 ;; *************** function _st_clust *****************
 12381 ;; Defined at:
 12382 ;;		line 1252 in file "ff.c"
 12383 ;; Parameters:    Size  Location     Type
 12384 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12385 ;;		 -> NULL(0), FatFs(558), 
 12386 ;;  cl              4    2[COMRAM] unsigned long 
 12387 ;; Auto vars:     Size  Location     Type
 12388 ;;		None
 12389 ;; Return value:  Size  Location     Type
 12390 ;;                  1    wreg      void 
 12391 ;; Registers used:
 12392 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12393 ;; Tracked objects:
 12394 ;;		On entry : 0/0
 12395 ;;		On exit  : 0/0
 12396 ;;		Unchanged: 0/0
 12397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12398 ;;      Params:         6       0       0       0       0       0       0       0       0
 12399 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12400 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12401 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12402 ;;Total ram usage:        6 bytes
 12403 ;; Hardware stack levels used:    1
 12404 ;; This function calls:
 12405 ;;		Nothing
 12406 ;; This function is called by:
 12407 ;;		_f_open
 12408 ;;		_f_sync
 12409 ;; This function uses a non-reentrant model
 12410 ;;
 12411                           
 12412                           	psect	text37
 12413  005578                     __ptext37:
 12414                           	opt callstack 0
 12415  005578                     _st_clust:
 12416                           	opt callstack 28
 12417                           
 12418                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12419                           
 12420                           ;incstack = 0
 12421  005578  EE20 F01A          	lfsr	2,26
 12422  00557C  5001               	movf	st_clust@dir,w,c
 12423  00557E  26D9               	addwf	fsr2l,f,c
 12424  005580  5002               	movf	st_clust@dir+1,w,c
 12425  005582  22DA               	addwfc	fsr2h,f,c
 12426  005584  C003  FFDE         	movff	st_clust@cl,postinc2
 12427  005588  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12428                           
 12429                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12430  00558C  EE20 F014          	lfsr	2,20
 12431  005590  5001               	movf	st_clust@dir,w,c
 12432  005592  26D9               	addwf	fsr2l,f,c
 12433  005594  5002               	movf	st_clust@dir+1,w,c
 12434  005596  22DA               	addwfc	fsr2h,f,c
 12435  005598  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12436  00559C  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12437  0055A0  0012               	return		;funcret
 12438  0055A2                     __end_of_st_clust:
 12439                           	opt callstack 0
 12440                           
 12441 ;; *************** function _move_window *****************
 12442 ;; Defined at:
 12443 ;;		line 729 in file "ff.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;  fs              2   47[COMRAM] PTR struct .
 12446 ;;		 -> NULL(0), FatFs(558), 
 12447 ;;  sector          4   49[COMRAM] unsigned long 
 12448 ;; Auto vars:     Size  Location     Type
 12449 ;;  res             1   57[COMRAM] enum E93
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      enum E93
 12452 ;; Registers used:
 12453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12459 ;;      Params:         6       0       0       0       0       0       0       0       0
 12460 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12461 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12462 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12463 ;;Total ram usage:       11 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    7
 12466 ;; This function calls:
 12467 ;;		_disk_read
 12468 ;;		_sync_window
 12469 ;; This function is called by:
 12470 ;;		_get_fat
 12471 ;;		_put_fat
 12472 ;;		_dir_alloc
 12473 ;;		_dir_find
 12474 ;;		_dir_register
 12475 ;;		_check_fs
 12476 ;;		_find_volume
 12477 ;;		_f_open
 12478 ;;		_f_write
 12479 ;;		_f_sync
 12480 ;;		_f_read
 12481 ;; This function uses a non-reentrant model
 12482 ;;
 12483                           
 12484                           	psect	text38
 12485  004F04                     __ptext38:
 12486                           	opt callstack 0
 12487  004F04                     _move_window:
 12488                           	opt callstack 21
 12489                           
 12490                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12491                           
 12492                           ;incstack = 0
 12493  004F04  0E00               	movlw	0
 12494  004F06  6E3A               	movwf	move_window@res,c
 12495                           
 12496                           ;ff.c: 737:  if (sector != fs->winsect) {
 12497  004F08  EE20 F02A          	lfsr	2,42
 12498  004F0C  5030               	movf	move_window@fs,w,c
 12499  004F0E  26D9               	addwf	fsr2l,f,c
 12500  004F10  5031               	movf	move_window@fs+1,w,c
 12501  004F12  22DA               	addwfc	fsr2h,f,c
 12502  004F14  5032               	movf	move_window@sector,w,c
 12503  004F16  18DE               	xorwf	postinc2,w,c
 12504  004F18  E10A               	bnz	u5050
 12505  004F1A  5033               	movf	move_window@sector+1,w,c
 12506  004F1C  18DE               	xorwf	postinc2,w,c
 12507  004F1E  E107               	bnz	u5050
 12508  004F20  5034               	movf	move_window@sector+2,w,c
 12509  004F22  18DE               	xorwf	postinc2,w,c
 12510  004F24  E104               	bnz	u5050
 12511  004F26  5035               	movf	move_window@sector+3,w,c
 12512  004F28  18DE               	xorwf	postinc2,w,c
 12513  004F2A  B4D8               	btfsc	status,2,c
 12514  004F2C  D03C               	goto	l4344
 12515  004F2E                     u5050:
 12516                           
 12517                           ;ff.c: 739:   res = sync_window(fs);
 12518  004F2E  C030  F01B         	movff	move_window@fs,sync_window@fs
 12519  004F32  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12520  004F36  ECA0  F01F         	call	_sync_window	;wreg free
 12521  004F3A  6E3A               	movwf	move_window@res,c
 12522                           
 12523                           ;ff.c: 741:   if (res == FR_OK) {
 12524  004F3C  503A               	movf	move_window@res,w,c
 12525  004F3E  A4D8               	btfss	status,2,c
 12526  004F40  D032               	goto	l4344
 12527                           
 12528                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12529  004F42  0E2E               	movlw	46
 12530  004F44  2430               	addwf	move_window@fs,w,c
 12531  004F46  6E11               	movwf	disk_read@buff,c
 12532  004F48  0E00               	movlw	0
 12533  004F4A  2031               	addwfc	move_window@fs+1,w,c
 12534  004F4C  6E12               	movwf	disk_read@buff+1,c
 12535  004F4E  C032  F013         	movff	move_window@sector,disk_read@sector
 12536  004F52  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12537  004F56  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12538  004F5A  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12539  004F5E  0E00               	movlw	0
 12540  004F60  6E18               	movwf	disk_read@count+1,c
 12541  004F62  0E01               	movlw	1
 12542  004F64  6E17               	movwf	disk_read@count,c
 12543  004F66  EE20 F001          	lfsr	2,1
 12544  004F6A  5030               	movf	move_window@fs,w,c
 12545  004F6C  26D9               	addwf	fsr2l,f,c
 12546  004F6E  5031               	movf	move_window@fs+1,w,c
 12547  004F70  22DA               	addwfc	fsr2h,f,c
 12548  004F72  50DF               	movf	indf2,w,c
 12549  004F74  EC0A  F026         	call	_disk_read
 12550  004F78  0900               	iorlw	0
 12551  004F7A  B4D8               	btfsc	status,2,c
 12552  004F7C  D006               	goto	l4342
 12553                           
 12554                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12555  004F7E  6832               	setf	move_window@sector,c
 12556  004F80  6833               	setf	move_window@sector+1,c
 12557  004F82  6834               	setf	move_window@sector+2,c
 12558  004F84  6835               	setf	move_window@sector+3,c
 12559                           
 12560                           ;ff.c: 744:     res = FR_DISK_ERR;
 12561  004F86  0E01               	movlw	1
 12562  004F88  6E3A               	movwf	move_window@res,c
 12563  004F8A                     l4342:
 12564                           
 12565                           ;ff.c: 746:    fs->winsect = sector;
 12566  004F8A  EE20 F02A          	lfsr	2,42
 12567  004F8E  5030               	movf	move_window@fs,w,c
 12568  004F90  26D9               	addwf	fsr2l,f,c
 12569  004F92  5031               	movf	move_window@fs+1,w,c
 12570  004F94  22DA               	addwfc	fsr2h,f,c
 12571  004F96  C032  FFDE         	movff	move_window@sector,postinc2
 12572  004F9A  C033  FFDE         	movff	move_window@sector+1,postinc2
 12573  004F9E  C034  FFDE         	movff	move_window@sector+2,postinc2
 12574  004FA2  C035  FFDE         	movff	move_window@sector+3,postinc2
 12575  004FA6                     l4344:
 12576                           
 12577                           ;ff.c: 749:  return res;
 12578  004FA6  503A               	movf	move_window@res,w,c
 12579  004FA8  0012               	return		;funcret
 12580  004FAA                     __end_of_move_window:
 12581                           	opt callstack 0
 12582                           
 12583 ;; *************** function _sync_window *****************
 12584 ;; Defined at:
 12585 ;;		line 700 in file "ff.c"
 12586 ;; Parameters:    Size  Location     Type
 12587 ;;  fs              2   26[COMRAM] PTR struct .
 12588 ;;		 -> NULL(0), FatFs(558), 
 12589 ;; Auto vars:     Size  Location     Type
 12590 ;;  wsect           4   43[COMRAM] unsigned long 
 12591 ;;  nf              2   41[COMRAM] unsigned short 
 12592 ;;  res             1   40[COMRAM] enum E93
 12593 ;; Return value:  Size  Location     Type
 12594 ;;                  1    wreg      enum E93
 12595 ;; Registers used:
 12596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12597 ;; Tracked objects:
 12598 ;;		On entry : 0/0
 12599 ;;		On exit  : 0/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12602 ;;      Params:         2       0       0       0       0       0       0       0       0
 12603 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12604 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12605 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12606 ;;Total ram usage:       21 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:    6
 12609 ;; This function calls:
 12610 ;;		_disk_write
 12611 ;; This function is called by:
 12612 ;;		_move_window
 12613 ;;		_sync_fs
 12614 ;;		_dir_next
 12615 ;;		_f_write
 12616 ;; This function uses a non-reentrant model
 12617 ;;
 12618                           
 12619                           	psect	text39
 12620  003F40                     __ptext39:
 12621                           	opt callstack 0
 12622  003F40                     _sync_window:
 12623                           	opt callstack 22
 12624                           
 12625                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12626                           
 12627                           ;incstack = 0
 12628  003F40  0E00               	movlw	0
 12629  003F42  6E29               	movwf	sync_window@res,c
 12630                           
 12631                           ;ff.c: 709:  if (fs->wflag) {
 12632  003F44  EE20 F004          	lfsr	2,4
 12633  003F48  501B               	movf	sync_window@fs,w,c
 12634  003F4A  26D9               	addwf	fsr2l,f,c
 12635  003F4C  501C               	movf	sync_window@fs+1,w,c
 12636  003F4E  22DA               	addwfc	fsr2h,f,c
 12637  003F50  50DF               	movf	indf2,w,c
 12638  003F52  B4D8               	btfsc	status,2,c
 12639  003F54  D09F               	goto	l4324
 12640                           
 12641                           ;ff.c: 710:   wsect = fs->winsect;
 12642  003F56  EE20 F02A          	lfsr	2,42
 12643  003F5A  501B               	movf	sync_window@fs,w,c
 12644  003F5C  26D9               	addwf	fsr2l,f,c
 12645  003F5E  501C               	movf	sync_window@fs+1,w,c
 12646  003F60  22DA               	addwfc	fsr2h,f,c
 12647  003F62  CFDE F02C          	movff	postinc2,sync_window@wsect
 12648  003F66  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12649  003F6A  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12650  003F6E  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12651                           
 12652                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12653  003F72  0E2E               	movlw	46
 12654  003F74  241B               	addwf	sync_window@fs,w,c
 12655  003F76  6E11               	movwf	disk_write@buff,c
 12656  003F78  0E00               	movlw	0
 12657  003F7A  201C               	addwfc	sync_window@fs+1,w,c
 12658  003F7C  6E12               	movwf	disk_write@buff+1,c
 12659  003F7E  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12660  003F82  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12661  003F86  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12662  003F8A  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12663  003F8E  0E00               	movlw	0
 12664  003F90  6E18               	movwf	disk_write@count+1,c
 12665  003F92  0E01               	movlw	1
 12666  003F94  6E17               	movwf	disk_write@count,c
 12667  003F96  EE20 F001          	lfsr	2,1
 12668  003F9A  501B               	movf	sync_window@fs,w,c
 12669  003F9C  26D9               	addwf	fsr2l,f,c
 12670  003F9E  501C               	movf	sync_window@fs+1,w,c
 12671  003FA0  22DA               	addwfc	fsr2h,f,c
 12672  003FA2  50DF               	movf	indf2,w,c
 12673  003FA4  ECD7  F022         	call	_disk_write
 12674  003FA8  0900               	iorlw	0
 12675  003FAA  B4D8               	btfsc	status,2,c
 12676  003FAC  D003               	goto	l4306
 12677                           
 12678                           ;ff.c: 712:    res = FR_DISK_ERR;
 12679  003FAE  0E01               	movlw	1
 12680  003FB0  6E29               	movwf	sync_window@res,c
 12681                           
 12682                           ;ff.c: 713:   } else {
 12683  003FB2  D070               	goto	l4324
 12684  003FB4                     l4306:
 12685                           
 12686                           ;ff.c: 714:    fs->wflag = 0;
 12687  003FB4  EE20 F004          	lfsr	2,4
 12688  003FB8  501B               	movf	sync_window@fs,w,c
 12689  003FBA  26D9               	addwf	fsr2l,f,c
 12690  003FBC  501C               	movf	sync_window@fs+1,w,c
 12691  003FBE  22DA               	addwfc	fsr2h,f,c
 12692  003FC0  0E00               	movlw	0
 12693  003FC2  6EDF               	movwf	indf2,c
 12694                           
 12695                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12696  003FC4  EE20 F016          	lfsr	2,22
 12697  003FC8  501B               	movf	sync_window@fs,w,c
 12698  003FCA  26D9               	addwf	fsr2l,f,c
 12699  003FCC  501C               	movf	sync_window@fs+1,w,c
 12700  003FCE  22DA               	addwfc	fsr2h,f,c
 12701  003FD0  EE10 F01E          	lfsr	1,30
 12702  003FD4  501B               	movf	sync_window@fs,w,c
 12703  003FD6  26E1               	addwf	fsr1l,f,c
 12704  003FD8  501C               	movf	sync_window@fs+1,w,c
 12705  003FDA  22E2               	addwfc	fsr1h,f,c
 12706  003FDC  CFE6 F021          	movff	postinc1,??_sync_window+4
 12707  003FE0  CFE6 F022          	movff	postinc1,??_sync_window+5
 12708  003FE4  CFE6 F023          	movff	postinc1,??_sync_window+6
 12709  003FE8  CFE6 F024          	movff	postinc1,??_sync_window+7
 12710  003FEC  5021               	movf	??_sync_window+4,w,c
 12711  003FEE  5C2C               	subwf	sync_window@wsect,w,c
 12712  003FF0  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12713  003FF2  5022               	movf	??_sync_window+5,w,c
 12714  003FF4  582D               	subwfb	sync_window@wsect+1,w,c
 12715  003FF6  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12716  003FF8  5023               	movf	??_sync_window+6,w,c
 12717  003FFA  582E               	subwfb	sync_window@wsect+2,w,c
 12718  003FFC  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12719  003FFE  5024               	movf	??_sync_window+7,w,c
 12720  004000  582F               	subwfb	sync_window@wsect+3,w,c
 12721  004002  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12722  004004  50DE               	movf	postinc2,w,c
 12723  004006  5C25               	subwf	??_sync_window+8,w,c
 12724  004008  50DE               	movf	postinc2,w,c
 12725  00400A  5826               	subwfb	??_sync_window+9,w,c
 12726  00400C  50DE               	movf	postinc2,w,c
 12727  00400E  5827               	subwfb	??_sync_window+10,w,c
 12728  004010  50DE               	movf	postinc2,w,c
 12729  004012  5828               	subwfb	??_sync_window+11,w,c
 12730  004014  B0D8               	btfsc	status,0,c
 12731  004016  D03E               	goto	l4324
 12732                           
 12733                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12734  004018  EE20 F003          	lfsr	2,3
 12735  00401C  501B               	movf	sync_window@fs,w,c
 12736  00401E  26D9               	addwf	fsr2l,f,c
 12737  004020  501C               	movf	sync_window@fs+1,w,c
 12738  004022  22DA               	addwfc	fsr2h,f,c
 12739  004024  50DF               	movf	indf2,w,c
 12740  004026  6E1D               	movwf	??_sync_window& (0+255),c
 12741  004028  501D               	movf	??_sync_window,w,c
 12742  00402A  6E2A               	movwf	sync_window@nf,c
 12743  00402C  6A2B               	clrf	sync_window@nf+1,c
 12744  00402E                     l4312:
 12745  00402E  502B               	movf	sync_window@nf+1,w,c
 12746  004030  E104               	bnz	l4316
 12747  004032  0E02               	movlw	2
 12748  004034  5C2A               	subwf	sync_window@nf,w,c
 12749  004036  A0D8               	btfss	status,0,c
 12750  004038  D02D               	goto	l4324
 12751  00403A                     l4316:
 12752                           
 12753                           ;ff.c: 717:      wsect += fs->fsize;
 12754  00403A  EE20 F016          	lfsr	2,22
 12755  00403E  501B               	movf	sync_window@fs,w,c
 12756  004040  26D9               	addwf	fsr2l,f,c
 12757  004042  501C               	movf	sync_window@fs+1,w,c
 12758  004044  22DA               	addwfc	fsr2h,f,c
 12759  004046  50DE               	movf	postinc2,w,c
 12760  004048  262C               	addwf	sync_window@wsect,f,c
 12761  00404A  50DE               	movf	postinc2,w,c
 12762  00404C  222D               	addwfc	sync_window@wsect+1,f,c
 12763  00404E  50DE               	movf	postinc2,w,c
 12764  004050  222E               	addwfc	sync_window@wsect+2,f,c
 12765  004052  50DD               	movf	postdec2,w,c
 12766  004054  222F               	addwfc	sync_window@wsect+3,f,c
 12767                           
 12768                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12769  004056  0E2E               	movlw	46
 12770  004058  241B               	addwf	sync_window@fs,w,c
 12771  00405A  6E11               	movwf	disk_write@buff,c
 12772  00405C  0E00               	movlw	0
 12773  00405E  201C               	addwfc	sync_window@fs+1,w,c
 12774  004060  6E12               	movwf	disk_write@buff+1,c
 12775  004062  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12776  004066  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12777  00406A  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12778  00406E  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12779  004072  0E00               	movlw	0
 12780  004074  6E18               	movwf	disk_write@count+1,c
 12781  004076  0E01               	movlw	1
 12782  004078  6E17               	movwf	disk_write@count,c
 12783  00407A  EE20 F001          	lfsr	2,1
 12784  00407E  501B               	movf	sync_window@fs,w,c
 12785  004080  26D9               	addwf	fsr2l,f,c
 12786  004082  501C               	movf	sync_window@fs+1,w,c
 12787  004084  22DA               	addwfc	fsr2h,f,c
 12788  004086  50DF               	movf	indf2,w,c
 12789  004088  ECD7  F022         	call	_disk_write
 12790                           
 12791                           ;ff.c: 719:     }
 12792  00408C  062A               	decf	sync_window@nf,f,c
 12793  00408E  A0D8               	btfss	status,0,c
 12794  004090  062B               	decf	sync_window@nf+1,f,c
 12795  004092  D7CD               	goto	l4312
 12796  004094                     l4324:
 12797                           
 12798                           ;ff.c: 723:  return res;
 12799  004094  5029               	movf	sync_window@res,w,c
 12800  004096  0012               	return		;funcret
 12801  004098                     __end_of_sync_window:
 12802                           	opt callstack 0
 12803                           
 12804 ;; *************** function _disk_write *****************
 12805 ;; Defined at:
 12806 ;;		line 405 in file "diskio.c"
 12807 ;; Parameters:    Size  Location     Type
 12808 ;;  pdrv            1    wreg     unsigned char 
 12809 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12810 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 12811 ;;  sector          4   18[COMRAM] unsigned long 
 12812 ;;  count           2   22[COMRAM] unsigned short 
 12813 ;; Auto vars:     Size  Location     Type
 12814 ;;  pdrv            1   25[COMRAM] unsigned char 
 12815 ;; Return value:  Size  Location     Type
 12816 ;;                  1    wreg      enum E43
 12817 ;; Registers used:
 12818 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12819 ;; Tracked objects:
 12820 ;;		On entry : 0/0
 12821 ;;		On exit  : 0/0
 12822 ;;		Unchanged: 0/0
 12823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12824 ;;      Params:         8       0       0       0       0       0       0       0       0
 12825 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12826 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12827 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12828 ;;Total ram usage:       10 bytes
 12829 ;; Hardware stack levels used:    1
 12830 ;; Hardware stack levels required when called:    5
 12831 ;; This function calls:
 12832 ;;		_deselect
 12833 ;;		_send_cmd
 12834 ;;		_xmit_datablock
 12835 ;; This function is called by:
 12836 ;;		_sync_window
 12837 ;;		_sync_fs
 12838 ;;		_f_write
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           	psect	text40
 12843  0045AE                     __ptext40:
 12844                           	opt callstack 0
 12845  0045AE                     _disk_write:
 12846                           	opt callstack 22
 12847                           
 12848                           ;incstack = 0
 12849                           ;disk_write@pdrv stored from wreg
 12850  0045AE  6E1A               	movwf	disk_write@pdrv,c
 12851                           
 12852                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 12853  0045B0  501A               	movf	disk_write@pdrv,w,c
 12854  0045B2  A4D8               	btfss	status,2,c
 12855  0045B4  D004               	goto	u4740
 12856  0045B6  5017               	movf	disk_write@count,w,c
 12857  0045B8  1018               	iorwf	disk_write@count+1,w,c
 12858  0045BA  A4D8               	btfss	status,2,c
 12859  0045BC  D002               	goto	l191
 12860  0045BE                     u4740:
 12861  0045BE  0E04               	movlw	4
 12862  0045C0  0012               	return	
 12863  0045C2                     l191:
 12864                           
 12865                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 12866  0045C2  0100               	movlb	0	; () banked
 12867  0045C4  A1FA               	btfss	_Stat& (0+255),0,b
 12868  0045C6  D002               	goto	l195
 12869                           
 12870                           ; BSR set to: 0
 12871  0045C8  0E03               	movlw	3
 12872  0045CA  0012               	return	
 12873  0045CC                     l195:
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 12877  0045CC  A5FA               	btfss	_Stat& (0+255),2,b
 12878  0045CE  D002               	goto	l196
 12879                           
 12880                           ; BSR set to: 0
 12881  0045D0  0E02               	movlw	2
 12882  0045D2  0012               	return	
 12883  0045D4                     l196:
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 12887  0045D4  B7D8               	btfsc	_CardType& (0+255),3,b
 12888  0045D6  D008               	goto	l197
 12889                           
 12890                           ; BSR set to: 0
 12891  0045D8  0E09               	movlw	9
 12892  0045DA                     u4785:
 12893  0045DA  90D8               	bcf	status,0,c
 12894  0045DC  3613               	rlcf	disk_write@sector,f,c
 12895  0045DE  3614               	rlcf	disk_write@sector+1,f,c
 12896  0045E0  3615               	rlcf	disk_write@sector+2,f,c
 12897  0045E2  3616               	rlcf	disk_write@sector+3,f,c
 12898  0045E4  2EE8               	decfsz	wreg,f,c
 12899  0045E6  D7F9               	goto	u4785
 12900  0045E8                     l197:
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;diskio.c: 418:  if (count == 1) {
 12904  0045E8  0417               	decf	disk_write@count,w,c
 12905  0045EA  1018               	iorwf	disk_write@count+1,w,c
 12906  0045EC  A4D8               	btfss	status,2,c
 12907  0045EE  D01D               	goto	l4238
 12908                           
 12909                           ; BSR set to: 0
 12910                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 12911  0045F0  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12912  0045F4  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12913  0045F8  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12914  0045FC  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12915  004600  0E18               	movlw	24
 12916  004602  ECD6  F029         	call	_send_cmd
 12917  004606  0900               	iorlw	0
 12918  004608  A4D8               	btfss	status,2,c
 12919  00460A  D04F               	goto	l4252
 12920  00460C  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12921  004610  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12922  004614  0EFE               	movlw	254
 12923  004616  6E06               	movwf	xmit_datablock@token,c
 12924  004618  ECE0  F028         	call	_xmit_datablock	;wreg free
 12925  00461C  0900               	iorlw	0
 12926  00461E  B4D8               	btfsc	status,2,c
 12927  004620  D044               	goto	l4252
 12928                           
 12929                           ;diskio.c: 421:    count = 0;
 12930  004622  0E00               	movlw	0
 12931  004624  6E18               	movwf	disk_write@count+1,c
 12932  004626  0E00               	movlw	0
 12933  004628  D03F               	goto	L17
 12934  00462A                     l4238:
 12935                           
 12936                           ; BSR set to: 0
 12937                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 12938  00462A  C0D8  F019         	movff	_CardType,??_disk_write
 12939  00462E  0E06               	movlw	6
 12940  004630  1619               	andwf	??_disk_write,f,c
 12941  004632  B4D8               	btfsc	status,2,c
 12942  004634  D009               	goto	l201
 12943                           
 12944                           ; BSR set to: 0
 12945  004636  C017  F00B         	movff	disk_write@count,send_cmd@arg
 12946  00463A  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 12947  00463E  6A0D               	clrf	send_cmd@arg+2,c
 12948  004640  6A0E               	clrf	send_cmd@arg+3,c
 12949  004642  0E97               	movlw	151
 12950  004644  ECD6  F029         	call	_send_cmd
 12951  004648                     l201:
 12952                           
 12953                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 12954  004648  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12955  00464C  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12956  004650  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12957  004654  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12958  004658  0E19               	movlw	25
 12959  00465A  ECD6  F029         	call	_send_cmd
 12960  00465E  0900               	iorlw	0
 12961  004660  A4D8               	btfss	status,2,c
 12962  004662  D023               	goto	l4252
 12963  004664                     u4830:
 12964                           
 12965                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 12966  004664  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12967  004668  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12968  00466C  0EFC               	movlw	252
 12969  00466E  6E06               	movwf	xmit_datablock@token,c
 12970  004670  ECE0  F028         	call	_xmit_datablock	;wreg free
 12971  004674  0900               	iorlw	0
 12972  004676  B4D8               	btfsc	status,2,c
 12973  004678  D009               	goto	u4850
 12974                           
 12975                           ;diskio.c: 428:     buff += 512;
 12976  00467A  0E02               	movlw	2
 12977  00467C  2612               	addwf	disk_write@buff+1,f,c
 12978                           
 12979                           ;diskio.c: 429:    } while (--count);
 12980  00467E  0617               	decf	disk_write@count,f,c
 12981  004680  A0D8               	btfss	status,0,c
 12982  004682  0618               	decf	disk_write@count+1,f,c
 12983  004684  5017               	movf	disk_write@count,w,c
 12984  004686  1018               	iorwf	disk_write@count+1,w,c
 12985  004688  A4D8               	btfss	status,2,c
 12986  00468A  D7EC               	goto	u4830
 12987  00468C                     u4850:
 12988                           
 12989                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 12990  00468C  0E00               	movlw	0
 12991  00468E  6E04               	movwf	xmit_datablock@buff,c
 12992  004690  0E00               	movlw	0
 12993  004692  6E05               	movwf	xmit_datablock@buff+1,c
 12994  004694  0EFD               	movlw	253
 12995  004696  6E06               	movwf	xmit_datablock@token,c
 12996  004698  ECE0  F028         	call	_xmit_datablock	;wreg free
 12997  00469C  0900               	iorlw	0
 12998  00469E  A4D8               	btfss	status,2,c
 12999  0046A0  D004               	goto	l4252
 13000                           
 13001                           ;diskio.c: 431:     count = 1;
 13002  0046A2  0E00               	movlw	0
 13003  0046A4  6E18               	movwf	disk_write@count+1,c
 13004  0046A6  0E01               	movlw	1
 13005  0046A8                     L17:
 13006  0046A8  6E17               	movwf	disk_write@count,c
 13007  0046AA                     l4252:
 13008                           
 13009                           ;diskio.c: 434:  deselect();
 13010  0046AA  EC22  F02B         	call	_deselect	;wreg free
 13011                           
 13012                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 13013  0046AE  5017               	movf	disk_write@count,w,c
 13014  0046B0  1018               	iorwf	disk_write@count+1,w,c
 13015  0046B2  B4D8               	btfsc	status,2,c
 13016  0046B4  D002               	goto	u4870
 13017  0046B6  0E01               	movlw	1
 13018  0046B8  0012               	return	
 13019  0046BA                     u4870:
 13020  0046BA  0E00               	movlw	0
 13021  0046BC  0012               	return		;funcret
 13022  0046BE                     __end_of_disk_write:
 13023                           	opt callstack 0
 13024                           
 13025 ;; *************** function _xmit_datablock *****************
 13026 ;; Defined at:
 13027 ;;		line 156 in file "diskio.c"
 13028 ;; Parameters:    Size  Location     Type
 13029 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13030 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 13031 ;;  token           1    5[COMRAM] unsigned char 
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;  i               2    6[COMRAM] unsigned short 
 13034 ;;  resp            1    8[COMRAM] unsigned char 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  1    wreg      unsigned char 
 13037 ;; Registers used:
 13038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13044 ;;      Params:         3       0       0       0       0       0       0       0       0
 13045 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13046 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13047 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13048 ;;Total ram usage:        6 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    2
 13051 ;; This function calls:
 13052 ;;		_SPI1_Exchange8bit
 13053 ;;		_wait_ready
 13054 ;; This function is called by:
 13055 ;;		_disk_write
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           	psect	text41
 13060  0051C0                     __ptext41:
 13061                           	opt callstack 0
 13062  0051C0                     _xmit_datablock:
 13063                           	opt callstack 24
 13064                           
 13065                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13066                           
 13067                           ;incstack = 0
 13068  0051C0  EC33  F02A         	call	_wait_ready	;wreg free
 13069  0051C4  0900               	iorlw	0
 13070  0051C6  A4D8               	btfss	status,2,c
 13071  0051C8  D002               	goto	l4144
 13072  0051CA                     u4620:
 13073  0051CA  0E00               	movlw	0
 13074  0051CC  0012               	return	
 13075  0051CE                     l4144:
 13076                           
 13077                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13078  0051CE  5006               	movf	xmit_datablock@token,w,c
 13079  0051D0  EC05  F02B         	call	_SPI1_Exchange8bit
 13080                           
 13081                           ;diskio.c: 168:  if (token != 0xFD) {
 13082  0051D4  0EFD               	movlw	253
 13083  0051D6  1806               	xorwf	xmit_datablock@token,w,c
 13084  0051D8  B4D8               	btfsc	status,2,c
 13085  0051DA  D02E               	goto	l4164
 13086                           
 13087                           ;diskio.c: 169:   i = 512;
 13088  0051DC  0E02               	movlw	2
 13089  0051DE  6E08               	movwf	xmit_datablock@i+1,c
 13090  0051E0  0E00               	movlw	0
 13091  0051E2  6E07               	movwf	xmit_datablock@i,c
 13092  0051E4                     l4150:
 13093                           
 13094                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13095  0051E4  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13096  0051E8  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13097  0051EC  6AF8               	clrf	tblptru,c
 13098  0051EE  0E07               	movlw	(high __ramtop+-1)
 13099  0051F0  64F7               	cpfsgt	tblptrh,c
 13100  0051F2  D003               	bra	u4647
 13101  0051F4  0008               	tblrd		*
 13102  0051F6  50F5               	movf	tablat,w,c
 13103  0051F8  D005               	bra	u4640
 13104  0051FA                     u4647:
 13105  0051FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 13106  0051FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 13107  005202  50EF               	movf	indf0,w,c
 13108  005204                     u4640:
 13109  005204  EC05  F02B         	call	_SPI1_Exchange8bit
 13110  005208  4A04               	infsnz	xmit_datablock@buff,f,c
 13111  00520A  2A05               	incf	xmit_datablock@buff+1,f,c
 13112  00520C  0607               	decf	xmit_datablock@i,f,c
 13113  00520E  A0D8               	btfss	status,0,c
 13114  005210  0608               	decf	xmit_datablock@i+1,f,c
 13115  005212  5007               	movf	xmit_datablock@i,w,c
 13116  005214  1008               	iorwf	xmit_datablock@i+1,w,c
 13117  005216  A4D8               	btfss	status,2,c
 13118  005218  D7E5               	goto	l4150
 13119                           
 13120                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13121  00521A  0EFF               	movlw	255
 13122  00521C  EC05  F02B         	call	_SPI1_Exchange8bit
 13123                           
 13124                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13125  005220  0EFF               	movlw	255
 13126  005222  EC05  F02B         	call	_SPI1_Exchange8bit
 13127                           
 13128                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13129  005226  0EFF               	movlw	255
 13130  005228  EC05  F02B         	call	_SPI1_Exchange8bit
 13131  00522C  6E09               	movwf	xmit_datablock@resp,c
 13132                           
 13133                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13134  00522E  5009               	movf	xmit_datablock@resp,w,c
 13135  005230  0B1F               	andlw	31
 13136  005232  0A05               	xorlw	5
 13137  005234  A4D8               	btfss	status,2,c
 13138  005236  D7C9               	goto	u4620
 13139  005238                     l4164:
 13140                           
 13141                           ;diskio.c: 180:  return 1;
 13142  005238  0E01               	movlw	1
 13143  00523A  0012               	return		;funcret
 13144  00523C                     __end_of_xmit_datablock:
 13145                           	opt callstack 0
 13146                           
 13147 ;; *************** function _disk_read *****************
 13148 ;; Defined at:
 13149 ;;		line 370 in file "diskio.c"
 13150 ;; Parameters:    Size  Location     Type
 13151 ;;  pdrv            1    wreg     unsigned char 
 13152 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13153 ;;		 -> NULL(0), FatFs(558), 
 13154 ;;  sector          4   18[COMRAM] unsigned long 
 13155 ;;  count           2   22[COMRAM] unsigned short 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;  pdrv            1   24[COMRAM] unsigned char 
 13158 ;;  cmd             1   27[COMRAM] unsigned char 
 13159 ;; Return value:  Size  Location     Type
 13160 ;;                  1    wreg      enum E43
 13161 ;; Registers used:
 13162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13168 ;;      Params:         8       0       0       0       0       0       0       0       0
 13169 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13170 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13171 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13172 ;;Total ram usage:       12 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:    5
 13175 ;; This function calls:
 13176 ;;		_deselect
 13177 ;;		_rcvr_datablock
 13178 ;;		_send_cmd
 13179 ;; This function is called by:
 13180 ;;		_move_window
 13181 ;;		_f_read
 13182 ;; This function uses a non-reentrant model
 13183 ;;
 13184                           
 13185                           	psect	text42
 13186  004C14                     __ptext42:
 13187                           	opt callstack 0
 13188  004C14                     _disk_read:
 13189                           	opt callstack 22
 13190                           
 13191                           ;incstack = 0
 13192                           ;disk_read@pdrv stored from wreg
 13193  004C14  6E19               	movwf	disk_read@pdrv,c
 13194                           
 13195                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13196  004C16  5019               	movf	disk_read@pdrv,w,c
 13197  004C18  A4D8               	btfss	status,2,c
 13198  004C1A  D004               	goto	u4900
 13199  004C1C  5017               	movf	disk_read@count,w,c
 13200  004C1E  1018               	iorwf	disk_read@count+1,w,c
 13201  004C20  A4D8               	btfss	status,2,c
 13202  004C22  D002               	goto	l174
 13203  004C24                     u4900:
 13204  004C24  0E04               	movlw	4
 13205  004C26  0012               	return	
 13206  004C28                     l174:
 13207                           
 13208                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13209  004C28  0100               	movlb	0	; () banked
 13210  004C2A  A1FA               	btfss	_Stat& (0+255),0,b
 13211  004C2C  D002               	goto	l178
 13212                           
 13213                           ; BSR set to: 0
 13214  004C2E  0E03               	movlw	3
 13215  004C30  0012               	return	
 13216  004C32                     l178:
 13217                           
 13218                           ; BSR set to: 0
 13219                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13220  004C32  B7D8               	btfsc	_CardType& (0+255),3,b
 13221  004C34  D008               	goto	l179
 13222                           
 13223                           ; BSR set to: 0
 13224  004C36  0E09               	movlw	9
 13225  004C38                     u4935:
 13226  004C38  90D8               	bcf	status,0,c
 13227  004C3A  3613               	rlcf	disk_read@sector,f,c
 13228  004C3C  3614               	rlcf	disk_read@sector+1,f,c
 13229  004C3E  3615               	rlcf	disk_read@sector+2,f,c
 13230  004C40  3616               	rlcf	disk_read@sector+3,f,c
 13231  004C42  2EE8               	decfsz	wreg,f,c
 13232  004C44  D7F9               	goto	u4935
 13233  004C46                     l179:
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13237  004C46  5018               	movf	disk_read@count+1,w,c
 13238  004C48  E108               	bnz	l4274
 13239  004C4A  0E02               	movlw	2
 13240  004C4C  5C17               	subwf	disk_read@count,w,c
 13241  004C4E  B0D8               	btfsc	status,0,c
 13242  004C50  D004               	goto	l4274
 13243                           
 13244                           ; BSR set to: 0
 13245  004C52  0E00               	movlw	0
 13246  004C54  6E1B               	movwf	_disk_read$337+1,c
 13247  004C56  0E11               	movlw	17
 13248  004C58  D003               	goto	L18
 13249  004C5A                     l4274:
 13250                           
 13251                           ; BSR set to: 0
 13252  004C5A  0E00               	movlw	0
 13253  004C5C  6E1B               	movwf	_disk_read$337+1,c
 13254  004C5E  0E12               	movlw	18
 13255  004C60                     L18:
 13256  004C60  6E1A               	movwf	_disk_read$337,c
 13257                           
 13258                           ; BSR set to: 0
 13259  004C62  C01A  F01C         	movff	_disk_read$337,disk_read@cmd
 13260                           
 13261                           ; BSR set to: 0
 13262                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13263  004C66  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13264  004C6A  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13265  004C6E  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13266  004C72  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13267  004C76  501C               	movf	disk_read@cmd,w,c
 13268  004C78  ECD6  F029         	call	_send_cmd
 13269  004C7C  0900               	iorlw	0
 13270  004C7E  A4D8               	btfss	status,2,c
 13271  004C80  D025               	goto	l4290
 13272  004C82                     u4950:
 13273                           
 13274                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13275  004C82  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13276  004C86  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13277  004C8A  0E02               	movlw	2
 13278  004C8C  6E05               	movwf	rcvr_datablock@btr+1,c
 13279  004C8E  0E00               	movlw	0
 13280  004C90  6E04               	movwf	rcvr_datablock@btr,c
 13281  004C92  EC1E  F029         	call	_rcvr_datablock	;wreg free
 13282  004C96  0900               	iorlw	0
 13283  004C98  B4D8               	btfsc	status,2,c
 13284  004C9A  D009               	goto	u4970
 13285                           
 13286                           ;diskio.c: 389:    buff += 512;
 13287  004C9C  0E02               	movlw	2
 13288  004C9E  2612               	addwf	disk_read@buff+1,f,c
 13289                           
 13290                           ;diskio.c: 390:   } while (--count);
 13291  004CA0  0617               	decf	disk_read@count,f,c
 13292  004CA2  A0D8               	btfss	status,0,c
 13293  004CA4  0618               	decf	disk_read@count+1,f,c
 13294  004CA6  5017               	movf	disk_read@count,w,c
 13295  004CA8  1018               	iorwf	disk_read@count+1,w,c
 13296  004CAA  A4D8               	btfss	status,2,c
 13297  004CAC  D7EA               	goto	u4950
 13298  004CAE                     u4970:
 13299                           
 13300                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13301  004CAE  0E12               	movlw	18
 13302  004CB0  181C               	xorwf	disk_read@cmd,w,c
 13303  004CB2  A4D8               	btfss	status,2,c
 13304  004CB4  D00B               	goto	l4290
 13305  004CB6  0E00               	movlw	0
 13306  004CB8  6E0B               	movwf	send_cmd@arg,c
 13307  004CBA  0E00               	movlw	0
 13308  004CBC  6E0C               	movwf	send_cmd@arg+1,c
 13309  004CBE  0E00               	movlw	0
 13310  004CC0  6E0D               	movwf	send_cmd@arg+2,c
 13311  004CC2  0E00               	movlw	0
 13312  004CC4  6E0E               	movwf	send_cmd@arg+3,c
 13313  004CC6  0E0C               	movlw	12
 13314  004CC8  ECD6  F029         	call	_send_cmd
 13315  004CCC                     l4290:
 13316                           
 13317                           ;diskio.c: 393:  deselect();
 13318  004CCC  EC22  F02B         	call	_deselect	;wreg free
 13319                           
 13320                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13321  004CD0  5017               	movf	disk_read@count,w,c
 13322  004CD2  1018               	iorwf	disk_read@count+1,w,c
 13323  004CD4  B4D8               	btfsc	status,2,c
 13324  004CD6  D002               	goto	u4990
 13325  004CD8  0E01               	movlw	1
 13326  004CDA  0012               	return	
 13327  004CDC                     u4990:
 13328  004CDC  0E00               	movlw	0
 13329  004CDE  0012               	return		;funcret
 13330  004CE0                     __end_of_disk_read:
 13331                           	opt callstack 0
 13332                           
 13333 ;; *************** function _send_cmd *****************
 13334 ;; Defined at:
 13335 ;;		line 231 in file "diskio.c"
 13336 ;; Parameters:    Size  Location     Type
 13337 ;;  cmd             1    wreg     unsigned char 
 13338 ;;  arg             4   10[COMRAM] unsigned long 
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;  cmd             1   14[COMRAM] unsigned char 
 13341 ;;  res             1   15[COMRAM] unsigned char 
 13342 ;; Return value:  Size  Location     Type
 13343 ;;                  1    wreg      unsigned char 
 13344 ;; Registers used:
 13345 ;;		wreg, status,2, status,0, cstack
 13346 ;; Tracked objects:
 13347 ;;		On entry : 0/0
 13348 ;;		On exit  : 0/0
 13349 ;;		Unchanged: 0/0
 13350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13351 ;;      Params:         4       0       0       0       0       0       0       0       0
 13352 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13353 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13354 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13355 ;;Total ram usage:        6 bytes
 13356 ;; Hardware stack levels used:    1
 13357 ;; Hardware stack levels required when called:    4
 13358 ;; This function calls:
 13359 ;;		___send_cmd
 13360 ;; This function is called by:
 13361 ;;		_disk_initialize
 13362 ;;		_disk_read
 13363 ;;		_disk_write
 13364 ;;		_disk_ioctl
 13365 ;; This function uses a non-reentrant model
 13366 ;;
 13367                           
 13368                           	psect	text43
 13369  0053AC                     __ptext43:
 13370                           	opt callstack 0
 13371  0053AC                     _send_cmd:
 13372                           	opt callstack 22
 13373                           
 13374                           ;incstack = 0
 13375                           ;send_cmd@cmd stored from wreg
 13376  0053AC  6E0F               	movwf	send_cmd@cmd,c
 13377                           
 13378                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13379  0053AE  AE0F               	btfss	send_cmd@cmd,7,c
 13380  0053B0  D012               	goto	l4180
 13381                           
 13382                           ;diskio.c: 243:   cmd &= 0x7F;
 13383  0053B2  9E0F               	bcf	send_cmd@cmd,7,c
 13384                           
 13385                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13386  0053B4  0E00               	movlw	0
 13387  0053B6  6E04               	movwf	___send_cmd@arg,c
 13388  0053B8  0E00               	movlw	0
 13389  0053BA  6E05               	movwf	___send_cmd@arg+1,c
 13390  0053BC  0E00               	movlw	0
 13391  0053BE  6E06               	movwf	___send_cmd@arg+2,c
 13392  0053C0  0E00               	movlw	0
 13393  0053C2  6E07               	movwf	___send_cmd@arg+3,c
 13394  0053C4  0E37               	movlw	55
 13395  0053C6  EC60  F028         	call	___send_cmd
 13396  0053CA  6E10               	movwf	send_cmd@res,c
 13397                           
 13398                           ;diskio.c: 249:   if (res > 1) return res;
 13399  0053CC  0E01               	movlw	1
 13400  0053CE  6410               	cpfsgt	send_cmd@res,c
 13401  0053D0  D002               	goto	l4180
 13402  0053D2  5010               	movf	send_cmd@res,w,c
 13403  0053D4  0012               	return	
 13404  0053D6                     l4180:
 13405                           
 13406                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13407  0053D6  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13408  0053DA  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13409  0053DE  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13410  0053E2  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13411  0053E6  500F               	movf	send_cmd@cmd,w,c
 13412  0053E8  EC60  F028         	call	___send_cmd
 13413  0053EC  0012               	return		;funcret
 13414  0053EE                     __end_of_send_cmd:
 13415                           	opt callstack 0
 13416                           
 13417 ;; *************** function ___send_cmd *****************
 13418 ;; Defined at:
 13419 ;;		line 195 in file "diskio.c"
 13420 ;; Parameters:    Size  Location     Type
 13421 ;;  cmd             1    wreg     unsigned char 
 13422 ;;  arg             4    3[COMRAM] unsigned long 
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;  cmd             1    9[COMRAM] unsigned char 
 13425 ;;  n               1    8[COMRAM] unsigned char 
 13426 ;;  res             1    7[COMRAM] unsigned char 
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  1    wreg      unsigned char 
 13429 ;; Registers used:
 13430 ;;		wreg, status,2, status,0, cstack
 13431 ;; Tracked objects:
 13432 ;;		On entry : 0/0
 13433 ;;		On exit  : 0/0
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13436 ;;      Params:         4       0       0       0       0       0       0       0       0
 13437 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13439 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13440 ;;Total ram usage:        7 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    3
 13443 ;; This function calls:
 13444 ;;		_SPI1_Exchange8bit
 13445 ;;		_deselect
 13446 ;;		_select
 13447 ;; This function is called by:
 13448 ;;		_send_cmd
 13449 ;; This function uses a non-reentrant model
 13450 ;;
 13451                           
 13452                           	psect	text44
 13453  0050C0                     __ptext44:
 13454                           	opt callstack 0
 13455  0050C0                     ___send_cmd:
 13456                           	opt callstack 22
 13457                           
 13458                           ;incstack = 0
 13459                           ;___send_cmd@cmd stored from wreg
 13460  0050C0  6E0A               	movwf	___send_cmd@cmd,c
 13461                           
 13462                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13463  0050C2  0E0C               	movlw	12
 13464  0050C4  180A               	xorwf	___send_cmd@cmd,w,c
 13465  0050C6  B4D8               	btfsc	status,2,c
 13466  0050C8  D009               	goto	l4100
 13467                           
 13468                           ;diskio.c: 204:   deselect();
 13469  0050CA  EC22  F02B         	call	_deselect	;wreg free
 13470                           
 13471                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13472  0050CE  ECE4  F02A         	call	_select	;wreg free
 13473  0050D2  0900               	iorlw	0
 13474  0050D4  A4D8               	btfss	status,2,c
 13475  0050D6  D002               	goto	l4100
 13476  0050D8  0EFF               	movlw	255
 13477  0050DA  0012               	return	
 13478  0050DC                     l4100:
 13479                           
 13480                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13481  0050DC  500A               	movf	___send_cmd@cmd,w,c
 13482  0050DE  0940               	iorlw	64
 13483  0050E0  EC05  F02B         	call	_SPI1_Exchange8bit
 13484                           
 13485                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13486  0050E4  5007               	movf	___send_cmd@arg+3,w,c
 13487  0050E6  EC05  F02B         	call	_SPI1_Exchange8bit
 13488                           
 13489                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13490  0050EA  5006               	movf	___send_cmd@arg+2,w,c
 13491  0050EC  EC05  F02B         	call	_SPI1_Exchange8bit
 13492                           
 13493                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13494  0050F0  5005               	movf	___send_cmd@arg+1,w,c
 13495  0050F2  EC05  F02B         	call	_SPI1_Exchange8bit
 13496                           
 13497                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13498  0050F6  5004               	movf	___send_cmd@arg,w,c
 13499  0050F8  EC05  F02B         	call	_SPI1_Exchange8bit
 13500                           
 13501                           ;diskio.c: 214:  n = 0x01;
 13502  0050FC  0E01               	movlw	1
 13503  0050FE  6E09               	movwf	___send_cmd@n,c
 13504                           
 13505                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13506  005100  500A               	movf	___send_cmd@cmd,w,c
 13507  005102  A4D8               	btfss	status,2,c
 13508  005104  D002               	goto	l4116
 13509  005106  0E95               	movlw	149
 13510  005108  6E09               	movwf	___send_cmd@n,c
 13511  00510A                     l4116:
 13512                           
 13513                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13514  00510A  0E08               	movlw	8
 13515  00510C  180A               	xorwf	___send_cmd@cmd,w,c
 13516  00510E  A4D8               	btfss	status,2,c
 13517  005110  D002               	goto	l4120
 13518  005112  0E87               	movlw	135
 13519  005114  6E09               	movwf	___send_cmd@n,c
 13520  005116                     l4120:
 13521                           
 13522                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13523  005116  5009               	movf	___send_cmd@n,w,c
 13524  005118  EC05  F02B         	call	_SPI1_Exchange8bit
 13525                           
 13526                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13527  00511C  0E0C               	movlw	12
 13528  00511E  180A               	xorwf	___send_cmd@cmd,w,c
 13529  005120  A4D8               	btfss	status,2,c
 13530  005122  D003               	goto	l4126
 13531  005124  0EFF               	movlw	255
 13532  005126  EC05  F02B         	call	_SPI1_Exchange8bit
 13533  00512A                     l4126:
 13534                           
 13535                           ;diskio.c: 221:  n = 10;
 13536  00512A  0E0A               	movlw	10
 13537  00512C  6E09               	movwf	___send_cmd@n,c
 13538  00512E                     l4128:
 13539                           
 13540                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13541  00512E  0EFF               	movlw	255
 13542  005130  EC05  F02B         	call	_SPI1_Exchange8bit
 13543  005134  6E08               	movwf	___send_cmd@res,c
 13544  005136  AE08               	btfss	___send_cmd@res,7,c
 13545  005138  D002               	goto	l4134
 13546  00513A  2E09               	decfsz	___send_cmd@n,f,c
 13547  00513C  D7F8               	goto	l4128
 13548  00513E                     l4134:
 13549                           
 13550                           ;diskio.c: 226:  return res;
 13551  00513E  5008               	movf	___send_cmd@res,w,c
 13552  005140  0012               	return		;funcret
 13553  005142                     __end_of___send_cmd:
 13554                           	opt callstack 0
 13555                           
 13556 ;; *************** function _select *****************
 13557 ;; Defined at:
 13558 ;;		line 106 in file "diskio.c"
 13559 ;; Parameters:    Size  Location     Type
 13560 ;;		None
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;		None
 13563 ;; Return value:  Size  Location     Type
 13564 ;;                  1    wreg      unsigned char 
 13565 ;; Registers used:
 13566 ;;		wreg, status,2, status,0, cstack
 13567 ;; Tracked objects:
 13568 ;;		On entry : 0/0
 13569 ;;		On exit  : 0/0
 13570 ;;		Unchanged: 0/0
 13571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13572 ;;      Params:         0       0       0       0       0       0       0       0       0
 13573 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13574 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13575 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13576 ;;Total ram usage:        0 bytes
 13577 ;; Hardware stack levels used:    1
 13578 ;; Hardware stack levels required when called:    2
 13579 ;; This function calls:
 13580 ;;		_SPI1_Exchange8bit
 13581 ;;		_deselect
 13582 ;;		_wait_ready
 13583 ;; This function is called by:
 13584 ;;		___send_cmd
 13585 ;;		_disk_ioctl
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           	psect	text45
 13590  0055C8                     __ptext45:
 13591                           	opt callstack 0
 13592  0055C8                     _select:
 13593                           	opt callstack 22
 13594                           
 13595                           ;incstack = 0
 13596                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13597  0055C8  948A               	bcf	3978,2,c	;volatile
 13598                           
 13599                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13600  0055CA  0EFF               	movlw	255
 13601  0055CC  EC05  F02B         	call	_SPI1_Exchange8bit
 13602                           
 13603                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13604  0055D0  EC33  F02A         	call	_wait_ready	;wreg free
 13605  0055D4  0900               	iorlw	0
 13606  0055D6  B4D8               	btfsc	status,2,c
 13607  0055D8  D002               	goto	l4084
 13608  0055DA  0E01               	movlw	1
 13609  0055DC  0012               	return	
 13610  0055DE                     l4084:
 13611                           
 13612                           ;diskio.c: 112:  deselect();
 13613  0055DE  EC22  F02B         	call	_deselect	;wreg free
 13614                           
 13615                           ;diskio.c: 113:  return 0;
 13616  0055E2  0E00               	movlw	0
 13617  0055E4  0012               	return		;funcret
 13618  0055E6                     __end_of_select:
 13619                           	opt callstack 0
 13620                           
 13621 ;; *************** function _wait_ready *****************
 13622 ;; Defined at:
 13623 ;;		line 74 in file "diskio.c"
 13624 ;; Parameters:    Size  Location     Type
 13625 ;;		None
 13626 ;; Auto vars:     Size  Location     Type
 13627 ;;  tmr             2    1[COMRAM] unsigned short 
 13628 ;; Return value:  Size  Location     Type
 13629 ;;                  1    wreg      unsigned char 
 13630 ;; Registers used:
 13631 ;;		wreg, status,2, status,0, cstack
 13632 ;; Tracked objects:
 13633 ;;		On entry : 0/0
 13634 ;;		On exit  : 0/0
 13635 ;;		Unchanged: 0/0
 13636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13637 ;;      Params:         0       0       0       0       0       0       0       0       0
 13638 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13639 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13640 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13641 ;;Total ram usage:        2 bytes
 13642 ;; Hardware stack levels used:    1
 13643 ;; Hardware stack levels required when called:    1
 13644 ;; This function calls:
 13645 ;;		_SPI1_Exchange8bit
 13646 ;; This function is called by:
 13647 ;;		_select
 13648 ;;		_xmit_datablock
 13649 ;; This function uses a non-reentrant model
 13650 ;;
 13651                           
 13652                           	psect	text46
 13653  005466                     __ptext46:
 13654                           	opt callstack 0
 13655  005466                     _wait_ready:
 13656                           	opt callstack 24
 13657                           
 13658                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13659                           
 13660                           ;incstack = 0
 13661  005466  0E13               	movlw	19
 13662  005468  6E03               	movwf	wait_ready@tmr+1,c
 13663  00546A  0E88               	movlw	136
 13664  00546C  6E02               	movwf	wait_ready@tmr,c
 13665  00546E  D00D               	goto	l82
 13666  005470                     l4062:
 13667                           
 13668                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13669  005470  0EFF               	movlw	255
 13670  005472  EC05  F02B         	call	_SPI1_Exchange8bit
 13671  005476  0AFF               	xorlw	255
 13672  005478  B4D8               	btfsc	status,2,c
 13673  00547A  D00B               	goto	u4520
 13674                           
 13675                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13676  00547C  0E42               	movlw	66
 13677  00547E                     u9017:
 13678  00547E  2EE8               	decfsz	wreg,f,c
 13679  005480  D7FE               	bra	u9017
 13680  005482  D000               	nop2	
 13681                           
 13682                           ;diskio.c: 81:  }
 13683  005484  0602               	decf	wait_ready@tmr,f,c
 13684  005486  A0D8               	btfss	status,0,c
 13685  005488  0603               	decf	wait_ready@tmr+1,f,c
 13686  00548A                     l82:
 13687  00548A  5002               	movf	wait_ready@tmr,w,c
 13688  00548C  1003               	iorwf	wait_ready@tmr+1,w,c
 13689  00548E  A4D8               	btfss	status,2,c
 13690  005490  D7EF               	goto	l4062
 13691  005492                     u4520:
 13692                           
 13693                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13694  005492  5002               	movf	wait_ready@tmr,w,c
 13695  005494  1003               	iorwf	wait_ready@tmr+1,w,c
 13696  005496  B4D8               	btfsc	status,2,c
 13697  005498  D002               	goto	u4530
 13698  00549A  0E01               	movlw	1
 13699  00549C  0012               	return	
 13700  00549E                     u4530:
 13701  00549E  0E00               	movlw	0
 13702  0054A0  0012               	return		;funcret
 13703  0054A2                     __end_of_wait_ready:
 13704                           	opt callstack 0
 13705                           
 13706 ;; *************** function _deselect *****************
 13707 ;; Defined at:
 13708 ;;		line 93 in file "diskio.c"
 13709 ;; Parameters:    Size  Location     Type
 13710 ;;		None
 13711 ;; Auto vars:     Size  Location     Type
 13712 ;;		None
 13713 ;; Return value:  Size  Location     Type
 13714 ;;                  1    wreg      void 
 13715 ;; Registers used:
 13716 ;;		wreg, status,2, cstack
 13717 ;; Tracked objects:
 13718 ;;		On entry : 0/0
 13719 ;;		On exit  : 0/0
 13720 ;;		Unchanged: 0/0
 13721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13722 ;;      Params:         0       0       0       0       0       0       0       0       0
 13723 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13724 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13725 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13726 ;;Total ram usage:        0 bytes
 13727 ;; Hardware stack levels used:    1
 13728 ;; Hardware stack levels required when called:    1
 13729 ;; This function calls:
 13730 ;;		_SPI1_Exchange8bit
 13731 ;; This function is called by:
 13732 ;;		_select
 13733 ;;		___send_cmd
 13734 ;;		_disk_initialize
 13735 ;;		_disk_read
 13736 ;;		_disk_write
 13737 ;;		_disk_ioctl
 13738 ;; This function uses a non-reentrant model
 13739 ;;
 13740                           
 13741                           	psect	text47
 13742  005644                     __ptext47:
 13743                           	opt callstack 0
 13744  005644                     _deselect:
 13745                           	opt callstack 22
 13746                           
 13747                           ;incstack = 0
 13748                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13749  005644  848A               	bsf	3978,2,c	;volatile
 13750                           
 13751                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13752  005646  0EFF               	movlw	255
 13753  005648  EC05  F02B         	call	_SPI1_Exchange8bit
 13754  00564C  0012               	return		;funcret
 13755  00564E                     __end_of_deselect:
 13756                           	opt callstack 0
 13757                           
 13758 ;; *************** function _rcvr_datablock *****************
 13759 ;; Defined at:
 13760 ;;		line 123 in file "diskio.c"
 13761 ;; Parameters:    Size  Location     Type
 13762 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13763 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 13764 ;;  btr             2    3[COMRAM] unsigned short 
 13765 ;; Auto vars:     Size  Location     Type
 13766 ;;  tmr             2    5[COMRAM] unsigned short 
 13767 ;;  token           1    7[COMRAM] unsigned char 
 13768 ;; Return value:  Size  Location     Type
 13769 ;;                  1    wreg      unsigned char 
 13770 ;; Registers used:
 13771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13777 ;;      Params:         4       0       0       0       0       0       0       0       0
 13778 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13779 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13780 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13781 ;;Total ram usage:        7 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    1
 13784 ;; This function calls:
 13785 ;;		_SPI1_Exchange8bit
 13786 ;; This function is called by:
 13787 ;;		_disk_read
 13788 ;;		_disk_ioctl
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           	psect	text48
 13793  00523C                     __ptext48:
 13794                           	opt callstack 0
 13795  00523C                     _rcvr_datablock:
 13796                           	opt callstack 25
 13797                           
 13798                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13799                           
 13800                           ;incstack = 0
 13801  00523C  0E07               	movlw	7
 13802  00523E  6E07               	movwf	rcvr_datablock@tmr+1,c
 13803  005240  0ED0               	movlw	208
 13804  005242  6E06               	movwf	rcvr_datablock@tmr,c
 13805  005244  D00E               	goto	l100
 13806  005246                     l4186:
 13807                           
 13808                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13809  005246  0EFF               	movlw	255
 13810  005248  EC05  F02B         	call	_SPI1_Exchange8bit
 13811  00524C  6E08               	movwf	rcvr_datablock@token,c
 13812                           
 13813                           ;diskio.c: 134:   if (token != 0xFF) break;
 13814  00524E  2808               	incf	rcvr_datablock@token,w,c
 13815  005250  A4D8               	btfss	status,2,c
 13816  005252  D00B               	goto	u4700
 13817                           
 13818                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13819  005254  0E42               	movlw	66
 13820  005256                     u9027:
 13821  005256  2EE8               	decfsz	wreg,f,c
 13822  005258  D7FE               	bra	u9027
 13823  00525A  D000               	nop2	
 13824                           
 13825                           ;diskio.c: 136:  }
 13826  00525C  0606               	decf	rcvr_datablock@tmr,f,c
 13827  00525E  A0D8               	btfss	status,0,c
 13828  005260  0607               	decf	rcvr_datablock@tmr+1,f,c
 13829  005262                     l100:
 13830  005262  5006               	movf	rcvr_datablock@tmr,w,c
 13831  005264  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13832  005266  A4D8               	btfss	status,2,c
 13833  005268  D7EE               	goto	l4186
 13834  00526A                     u4700:
 13835                           
 13836                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 13837  00526A  0EFE               	movlw	254
 13838  00526C  1808               	xorwf	rcvr_datablock@token,w,c
 13839  00526E  B4D8               	btfsc	status,2,c
 13840  005270  D002               	goto	l4202
 13841  005272  0E00               	movlw	0
 13842  005274  0012               	return	
 13843  005276                     l4202:
 13844                           
 13845                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 13846  005276  0EFF               	movlw	255
 13847  005278  EC05  F02B         	call	_SPI1_Exchange8bit
 13848  00527C  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 13849  005280  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 13850  005284  6EDF               	movwf	indf2,c
 13851  005286  4A02               	infsnz	rcvr_datablock@buff,f,c
 13852  005288  2A03               	incf	rcvr_datablock@buff+1,f,c
 13853  00528A  0604               	decf	rcvr_datablock@btr,f,c
 13854  00528C  A0D8               	btfss	status,0,c
 13855  00528E  0605               	decf	rcvr_datablock@btr+1,f,c
 13856  005290  5004               	movf	rcvr_datablock@btr,w,c
 13857  005292  1005               	iorwf	rcvr_datablock@btr+1,w,c
 13858  005294  A4D8               	btfss	status,2,c
 13859  005296  D7EF               	goto	l4202
 13860                           
 13861                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 13862  005298  0EFF               	movlw	255
 13863  00529A  EC05  F02B         	call	_SPI1_Exchange8bit
 13864                           
 13865                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 13866  00529E  0EFF               	movlw	255
 13867  0052A0  EC05  F02B         	call	_SPI1_Exchange8bit
 13868                           
 13869                           ;diskio.c: 145:  return 1;
 13870  0052A4  0E01               	movlw	1
 13871  0052A6  0012               	return		;funcret
 13872  0052A8                     __end_of_rcvr_datablock:
 13873                           	opt callstack 0
 13874                           
 13875 ;; *************** function _SPI1_Exchange8bit *****************
 13876 ;; Defined at:
 13877 ;;		line 90 in file "mcc_generated_files/spi1.c"
 13878 ;; Parameters:    Size  Location     Type
 13879 ;;  data            1    wreg     unsigned char 
 13880 ;; Auto vars:     Size  Location     Type
 13881 ;;  data            1    0[COMRAM] unsigned char 
 13882 ;; Return value:  Size  Location     Type
 13883 ;;                  1    wreg      unsigned char 
 13884 ;; Registers used:
 13885 ;;		wreg, status,2
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13891 ;;      Params:         0       0       0       0       0       0       0       0       0
 13892 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13893 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13894 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13895 ;;Total ram usage:        1 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; This function calls:
 13898 ;;		Nothing
 13899 ;; This function is called by:
 13900 ;;		_wait_ready
 13901 ;;		_deselect
 13902 ;;		_select
 13903 ;;		_rcvr_datablock
 13904 ;;		_xmit_datablock
 13905 ;;		___send_cmd
 13906 ;;		_disk_initialize
 13907 ;;		_disk_ioctl
 13908 ;;		_SPI1_Exchange8bitBuffer
 13909 ;; This function uses a non-reentrant model
 13910 ;;
 13911                           
 13912                           	psect	text49
 13913  00560A                     __ptext49:
 13914                           	opt callstack 0
 13915  00560A                     _SPI1_Exchange8bit:
 13916                           	opt callstack 24
 13917                           
 13918                           ;incstack = 0
 13919                           ;SPI1_Exchange8bit@data stored from wreg
 13920  00560A  6E01               	movwf	SPI1_Exchange8bit@data,c
 13921                           
 13922                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 13923  00560C  9EC6               	bcf	4038,7,c	;volatile
 13924                           
 13925                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 13926  00560E  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 13927  005612                     l825:
 13928                           
 13929                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 13930  005612  A0C7               	btfss	4039,0,c	;volatile
 13931  005614  D7FE               	goto	l825
 13932                           
 13933                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 13934  005616  50C9               	movf	4041,w,c	;volatile
 13935  005618  0012               	return		;funcret
 13936  00561A                     __end_of_SPI1_Exchange8bit:
 13937                           	opt callstack 0
 13938                           
 13939 ;; *************** function ___delay_sec *****************
 13940 ;; Defined at:
 13941 ;;		line 10 in file "Main.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;  sec             1    wreg     unsigned char 
 13944 ;; Auto vars:     Size  Location     Type
 13945 ;;  sec             1    3[COMRAM] unsigned char 
 13946 ;;  i               1    4[COMRAM] unsigned char 
 13947 ;; Return value:  Size  Location     Type
 13948 ;;                  1    wreg      void 
 13949 ;; Registers used:
 13950 ;;		wreg, status,2, status,0, prodl, prodh
 13951 ;; Tracked objects:
 13952 ;;		On entry : 0/0
 13953 ;;		On exit  : 0/0
 13954 ;;		Unchanged: 0/0
 13955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13956 ;;      Params:         0       0       0       0       0       0       0       0       0
 13957 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13958 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13959 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13960 ;;Total ram usage:        5 bytes
 13961 ;; Hardware stack levels used:    1
 13962 ;; This function calls:
 13963 ;;		Nothing
 13964 ;; This function is called by:
 13965 ;;		_guardar
 13966 ;;		_main
 13967 ;; This function uses a non-reentrant model
 13968 ;;
 13969                           
 13970                           	psect	text50
 13971  0054DC                     __ptext50:
 13972                           	opt callstack 0
 13973  0054DC                     ___delay_sec:
 13974                           	opt callstack 29
 13975                           
 13976                           ;incstack = 0
 13977                           ;___delay_sec@sec stored from wreg
 13978  0054DC  6E04               	movwf	___delay_sec@sec,c
 13979                           
 13980                           ;Main.c: 11:     for(char i=0;i<=(50*sec);i++) {
 13981  0054DE  0E00               	movlw	0
 13982  0054E0  6E05               	movwf	___delay_sec@i,c
 13983  0054E2  D008               	goto	l5906
 13984  0054E4                     l5902:
 13985                           
 13986                           ;Main.c: 12:         _delay((unsigned long)((20)*(8000000/4000.0)));
 13987  0054E4  0E34               	movlw	52
 13988  0054E6  6E01               	movwf	??___delay_sec& (0+255),c
 13989  0054E8  0EF2               	movlw	242
 13990  0054EA                     u9037:
 13991  0054EA  2EE8               	decfsz	wreg,f,c
 13992  0054EC  D7FE               	bra	u9037
 13993  0054EE  2E01               	decfsz	??___delay_sec& (0+255),f,c
 13994  0054F0  D7FC               	bra	u9037
 13995                           
 13996                           ;Main.c: 13:     }
 13997  0054F2  2A05               	incf	___delay_sec@i,f,c
 13998  0054F4                     l5906:
 13999  0054F4  5005               	movf	___delay_sec@i,w,c
 14000  0054F6  6E01               	movwf	??___delay_sec& (0+255),c
 14001  0054F8  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 14002  0054FA  5004               	movf	___delay_sec@sec,w,c
 14003  0054FC  0D32               	mullw	50
 14004  0054FE  5001               	movf	??___delay_sec,w,c
 14005  005500  5CF3               	subwf	prodl,w,c
 14006  005502  50F4               	movf	prodh,w,c
 14007  005504  0A80               	xorlw	128
 14008  005506  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 14009  005508  5002               	movf	??___delay_sec+1,w,c
 14010  00550A  0A80               	xorlw	128
 14011  00550C  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 14012  00550E  A0D8               	btfss	status,0,c
 14013  005510  0012               	return	
 14014  005512  D7E8               	goto	l5902
 14015  005514                     __end_of___delay_sec:
 14016                           	opt callstack 0
 14017                           
 14018 ;; *************** function _SYSTEM_Initialize *****************
 14019 ;; Defined at:
 14020 ;;		line 116 in file "mcc_generated_files/mcc.c"
 14021 ;; Parameters:    Size  Location     Type
 14022 ;;		None
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;		None
 14025 ;; Return value:  Size  Location     Type
 14026 ;;                  1    wreg      void 
 14027 ;; Registers used:
 14028 ;;		wreg, status,2, cstack
 14029 ;; Tracked objects:
 14030 ;;		On entry : 0/0
 14031 ;;		On exit  : 0/0
 14032 ;;		Unchanged: 0/0
 14033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14034 ;;      Params:         0       0       0       0       0       0       0       0       0
 14035 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14036 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14037 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14038 ;;Total ram usage:        0 bytes
 14039 ;; Hardware stack levels used:    1
 14040 ;; Hardware stack levels required when called:    1
 14041 ;; This function calls:
 14042 ;;		_OSCILLATOR_Initialize
 14043 ;;		_PIN_MANAGER_Initialize
 14044 ;;		_SPI1_Initialize
 14045 ;; This function is called by:
 14046 ;;		_guardar
 14047 ;; This function uses a non-reentrant model
 14048 ;;
 14049                           
 14050                           	psect	text51
 14051  005628                     __ptext51:
 14052                           	opt callstack 0
 14053  005628                     _SYSTEM_Initialize:
 14054                           	opt callstack 28
 14055                           
 14056                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 14057                           
 14058                           ;incstack = 0
 14059  005628  EC8A  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 14060                           
 14061                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 14062  00562C  ECFC  F02A         	call	_OSCILLATOR_Initialize	;wreg free
 14063                           
 14064                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14065  005630  EC1B  F02B         	call	_SPI1_Initialize	;wreg free
 14066  005634  0012               	return		;funcret
 14067  005636                     __end_of_SYSTEM_Initialize:
 14068                           	opt callstack 0
 14069                           
 14070 ;; *************** function _SPI1_Initialize *****************
 14071 ;; Defined at:
 14072 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14073 ;; Parameters:    Size  Location     Type
 14074 ;;		None
 14075 ;; Auto vars:     Size  Location     Type
 14076 ;;		None
 14077 ;; Return value:  Size  Location     Type
 14078 ;;                  1    wreg      void 
 14079 ;; Registers used:
 14080 ;;		wreg, status,2
 14081 ;; Tracked objects:
 14082 ;;		On entry : 0/0
 14083 ;;		On exit  : 0/0
 14084 ;;		Unchanged: 0/0
 14085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14086 ;;      Params:         0       0       0       0       0       0       0       0       0
 14087 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14088 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14089 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14090 ;;Total ram usage:        0 bytes
 14091 ;; Hardware stack levels used:    1
 14092 ;; This function calls:
 14093 ;;		Nothing
 14094 ;; This function is called by:
 14095 ;;		_disk_initialize
 14096 ;;		_SYSTEM_Initialize
 14097 ;; This function uses a non-reentrant model
 14098 ;;
 14099                           
 14100                           	psect	text52
 14101  005636                     __ptext52:
 14102                           	opt callstack 0
 14103  005636                     _SPI1_Initialize:
 14104                           	opt callstack 26
 14105                           
 14106                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14107                           
 14108                           ;incstack = 0
 14109  005636  0E40               	movlw	64
 14110  005638  6EC7               	movwf	4039,c	;volatile
 14111                           
 14112                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14113  00563A  0E22               	movlw	34
 14114  00563C  6EC6               	movwf	4038,c	;volatile
 14115                           
 14116                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14117  00563E  0E00               	movlw	0
 14118  005640  6EC8               	movwf	4040,c	;volatile
 14119  005642  0012               	return		;funcret
 14120  005644                     __end_of_SPI1_Initialize:
 14121                           	opt callstack 0
 14122                           
 14123 ;; *************** function _PIN_MANAGER_Initialize *****************
 14124 ;; Defined at:
 14125 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14126 ;; Parameters:    Size  Location     Type
 14127 ;;		None
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;		None
 14130 ;; Return value:  Size  Location     Type
 14131 ;;                  1    wreg      void 
 14132 ;; Registers used:
 14133 ;;		wreg, status,2
 14134 ;; Tracked objects:
 14135 ;;		On entry : 0/0
 14136 ;;		On exit  : 0/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14139 ;;      Params:         0       0       0       0       0       0       0       0       0
 14140 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14141 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14142 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14143 ;;Total ram usage:        0 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; This function calls:
 14146 ;;		Nothing
 14147 ;; This function is called by:
 14148 ;;		_SYSTEM_Initialize
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           	psect	text53
 14153  005514                     __ptext53:
 14154                           	opt callstack 0
 14155  005514                     _PIN_MANAGER_Initialize:
 14156                           	opt callstack 28
 14157                           
 14158                           ;mcc_generated_files/pin_manager.c: 56:     LATE = 0x00;
 14159                           
 14160                           ;incstack = 0
 14161  005514  0E00               	movlw	0
 14162  005516  6E8D               	movwf	3981,c	;volatile
 14163                           
 14164                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 14165  005518  0E00               	movlw	0
 14166  00551A  6E8C               	movwf	3980,c	;volatile
 14167                           
 14168                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14169  00551C  0E04               	movlw	4
 14170  00551E  6E8A               	movwf	3978,c	;volatile
 14171                           
 14172                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14173  005520  0E00               	movlw	0
 14174  005522  6E8B               	movwf	3979,c	;volatile
 14175                           
 14176                           ;mcc_generated_files/pin_manager.c: 65:     TRISE = 0x07;
 14177  005524  0E07               	movlw	7
 14178  005526  6E96               	movwf	3990,c	;volatile
 14179                           
 14180                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14181  005528  0EF1               	movlw	241
 14182  00552A  6E93               	movwf	3987,c	;volatile
 14183                           
 14184                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14185  00552C  0EC7               	movlw	199
 14186  00552E  6E94               	movwf	3988,c	;volatile
 14187                           
 14188                           ;mcc_generated_files/pin_manager.c: 69:     TRISD = 0x00;
 14189  005530  0E00               	movlw	0
 14190  005532  6E95               	movwf	3989,c	;volatile
 14191                           
 14192                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14193  005534  0EC4               	movlw	196
 14194  005536  010F               	movlb	15	; () banked
 14195  005538  6F5D               	movwf	93,b	;volatile
 14196                           
 14197                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14198  00553A  0E30               	movlw	48
 14199  00553C  6F5C               	movwf	92,b	;volatile
 14200                           
 14201                           ;mcc_generated_files/pin_manager.c: 76:     ANSELD = 0x00;
 14202  00553E  0E00               	movlw	0
 14203  005540  6F5E               	movwf	94,b	;volatile
 14204                           
 14205                           ;mcc_generated_files/pin_manager.c: 77:     ANSELE = 0x07;
 14206  005542  0E07               	movlw	7
 14207  005544  6F5F               	movwf	95,b	;volatile
 14208                           
 14209                           ; BSR set to: 15
 14210                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14211  005546  6885               	setf	3973,c	;volatile
 14212                           
 14213                           ; BSR set to: 15
 14214                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14215  005548  9EF1               	bcf	4081,7,c	;volatile
 14216                           
 14217                           ; BSR set to: 15
 14218  00554A  0012               	return		;funcret
 14219  00554C                     __end_of_PIN_MANAGER_Initialize:
 14220                           	opt callstack 0
 14221                           
 14222 ;; *************** function _OSCILLATOR_Initialize *****************
 14223 ;; Defined at:
 14224 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14225 ;; Parameters:    Size  Location     Type
 14226 ;;		None
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;		None
 14229 ;; Return value:  Size  Location     Type
 14230 ;;                  1    wreg      void 
 14231 ;; Registers used:
 14232 ;;		wreg, status,2
 14233 ;; Tracked objects:
 14234 ;;		On entry : 0/0
 14235 ;;		On exit  : 0/0
 14236 ;;		Unchanged: 0/0
 14237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14238 ;;      Params:         0       0       0       0       0       0       0       0       0
 14239 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14240 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14241 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14242 ;;Total ram usage:        0 bytes
 14243 ;; Hardware stack levels used:    1
 14244 ;; This function calls:
 14245 ;;		Nothing
 14246 ;; This function is called by:
 14247 ;;		_SYSTEM_Initialize
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           	psect	text54
 14252  0055F8                     __ptext54:
 14253                           	opt callstack 0
 14254  0055F8                     _OSCILLATOR_Initialize:
 14255                           	opt callstack 28
 14256                           
 14257                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14258                           
 14259                           ; BSR set to: 15
 14260                           ;incstack = 0
 14261  0055F8  0E60               	movlw	96
 14262  0055FA  6ED3               	movwf	4051,c	;volatile
 14263                           
 14264                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14265  0055FC  0E00               	movlw	0
 14266  0055FE  6ED2               	movwf	4050,c	;volatile
 14267                           
 14268                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14269  005600  0E00               	movlw	0
 14270  005602  6E9B               	movwf	3995,c	;volatile
 14271                           
 14272                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14273  005604  0E00               	movlw	0
 14274  005606  6EB5               	movwf	4021,c	;volatile
 14275  005608  0012               	return		;funcret
 14276  00560A                     __end_of_OSCILLATOR_Initialize:
 14277                           	opt callstack 0
 14278                           
 14279 ;; *************** function _Error *****************
 14280 ;; Defined at:
 14281 ;;		line 11 in file "./Errores.h"
 14282 ;; Parameters:    Size  Location     Type
 14283 ;;  a               1    wreg     unsigned char 
 14284 ;; Auto vars:     Size  Location     Type
 14285 ;;  a               1    0[COMRAM] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;                  1    wreg      void 
 14288 ;; Registers used:
 14289 ;;		wreg, status,2, status,0
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14295 ;;      Params:         0       0       0       0       0       0       0       0       0
 14296 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14297 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14298 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14299 ;;Total ram usage:        1 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; This function calls:
 14302 ;;		Nothing
 14303 ;; This function is called by:
 14304 ;;		_guardar
 14305 ;;		_main
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           	psect	text55
 14310  004A64                     __ptext55:
 14311                           	opt callstack 0
 14312  004A64                     _Error:
 14313                           	opt callstack 29
 14314                           
 14315                           ;incstack = 0
 14316                           ;Error@a stored from wreg
 14317  004A64  6E01               	movwf	Error@a,c
 14318                           
 14319                           ;./Errores.h: 12:     if (a == 1){
 14320  004A66  0401               	decf	Error@a,w,c
 14321  004A68  A4D8               	btfss	status,2,c
 14322  004A6A  D008               	goto	l5814
 14323                           
 14324                           ;./Errores.h: 13:         LATAbits.LATA0 ^= 1;
 14325  004A6C  7089               	btg	3977,0,c	;volatile
 14326                           
 14327                           ;./Errores.h: 14:         LATAbits.LATA1 ^= 1;
 14328  004A6E  7289               	btg	3977,1,c	;volatile
 14329                           
 14330                           ;./Errores.h: 15:         LATAbits.LATA2 ^= 1;
 14331  004A70  7489               	btg	3977,2,c	;volatile
 14332                           
 14333                           ;./Errores.h: 16:         LATAbits.LATA3 ^= 1;
 14334  004A72  7689               	btg	3977,3,c	;volatile
 14335                           
 14336                           ;./Errores.h: 17:         LATAbits.LATA4 ^= 1;
 14337  004A74  7889               	btg	3977,4,c	;volatile
 14338                           
 14339                           ;./Errores.h: 18:         LATAbits.LATA5 ^= 1;
 14340  004A76  7A89               	btg	3977,5,c	;volatile
 14341                           
 14342                           ;./Errores.h: 19:         LATAbits.LATA6 ^= 1;
 14343  004A78  7C89               	btg	3977,6,c	;volatile
 14344                           
 14345                           ;./Errores.h: 20:         LATAbits.LATA7 ^= 1;
 14346  004A7A  7E89               	btg	3977,7,c	;volatile
 14347  004A7C                     l5814:
 14348                           
 14349                           ;./Errores.h: 22:     if (a == 2){
 14350  004A7C  0E02               	movlw	2
 14351  004A7E  1801               	xorwf	Error@a,w,c
 14352  004A80  A4D8               	btfss	status,2,c
 14353  004A82  D008               	goto	l5820
 14354                           
 14355                           ;./Errores.h: 23:         LATAbits.LATA0 ^= 0;
 14356  004A84  5089               	movf	3977,w,c	;volatile
 14357                           
 14358                           ;./Errores.h: 24:         LATAbits.LATA1 ^= 0;
 14359  004A86  5089               	movf	3977,w,c	;volatile
 14360                           
 14361                           ;./Errores.h: 25:         LATAbits.LATA2 ^= 0;
 14362  004A88  5089               	movf	3977,w,c	;volatile
 14363                           
 14364                           ;./Errores.h: 26:         LATAbits.LATA3 ^= 0;
 14365  004A8A  5089               	movf	3977,w,c	;volatile
 14366                           
 14367                           ;./Errores.h: 27:         LATAbits.LATA4 ^= 0;
 14368  004A8C  5089               	movf	3977,w,c	;volatile
 14369                           
 14370                           ;./Errores.h: 28:         LATAbits.LATA5 ^= 0;
 14371  004A8E  5089               	movf	3977,w,c	;volatile
 14372                           
 14373                           ;./Errores.h: 29:         LATAbits.LATA6 ^= 0;
 14374  004A90  5089               	movf	3977,w,c	;volatile
 14375                           
 14376                           ;./Errores.h: 30:         LATAbits.LATA7 ^= 1;
 14377  004A92  7E89               	btg	3977,7,c	;volatile
 14378  004A94                     l5820:
 14379                           
 14380                           ;./Errores.h: 32:     if (a == 3){
 14381  004A94  0E03               	movlw	3
 14382  004A96  1801               	xorwf	Error@a,w,c
 14383  004A98  A4D8               	btfss	status,2,c
 14384  004A9A  D008               	goto	l5828
 14385                           
 14386                           ;./Errores.h: 33:         LATAbits.LATA0 ^= 0;
 14387  004A9C  5089               	movf	3977,w,c	;volatile
 14388                           
 14389                           ;./Errores.h: 34:         LATAbits.LATA1 ^= 0;
 14390  004A9E  5089               	movf	3977,w,c	;volatile
 14391                           
 14392                           ;./Errores.h: 35:         LATAbits.LATA2 ^= 0;
 14393  004AA0  5089               	movf	3977,w,c	;volatile
 14394                           
 14395                           ;./Errores.h: 36:         LATAbits.LATA3 ^= 0;
 14396  004AA2  5089               	movf	3977,w,c	;volatile
 14397                           
 14398                           ;./Errores.h: 37:         LATAbits.LATA4 ^= 0;
 14399  004AA4  5089               	movf	3977,w,c	;volatile
 14400                           
 14401                           ;./Errores.h: 38:         LATAbits.LATA5 ^= 0;
 14402  004AA6  5089               	movf	3977,w,c	;volatile
 14403                           
 14404                           ;./Errores.h: 39:         LATAbits.LATA6 ^= 1;
 14405  004AA8  7C89               	btg	3977,6,c	;volatile
 14406                           
 14407                           ;./Errores.h: 40:         LATAbits.LATA7 ^= 1;
 14408  004AAA  7E89               	btg	3977,7,c	;volatile
 14409  004AAC                     l5828:
 14410                           
 14411                           ;./Errores.h: 42:     if (a == 4){
 14412  004AAC  0E04               	movlw	4
 14413  004AAE  1801               	xorwf	Error@a,w,c
 14414  004AB0  A4D8               	btfss	status,2,c
 14415  004AB2  D008               	goto	l5838
 14416                           
 14417                           ;./Errores.h: 43:         LATAbits.LATA0 ^= 0;
 14418  004AB4  5089               	movf	3977,w,c	;volatile
 14419                           
 14420                           ;./Errores.h: 44:         LATAbits.LATA1 ^= 0;
 14421  004AB6  5089               	movf	3977,w,c	;volatile
 14422                           
 14423                           ;./Errores.h: 45:         LATAbits.LATA2 ^= 0;
 14424  004AB8  5089               	movf	3977,w,c	;volatile
 14425                           
 14426                           ;./Errores.h: 46:         LATAbits.LATA3 ^= 0;
 14427  004ABA  5089               	movf	3977,w,c	;volatile
 14428                           
 14429                           ;./Errores.h: 47:         LATAbits.LATA4 ^= 0;
 14430  004ABC  5089               	movf	3977,w,c	;volatile
 14431                           
 14432                           ;./Errores.h: 48:         LATAbits.LATA5 ^= 1;
 14433  004ABE  7A89               	btg	3977,5,c	;volatile
 14434                           
 14435                           ;./Errores.h: 49:         LATAbits.LATA6 ^= 1;
 14436  004AC0  7C89               	btg	3977,6,c	;volatile
 14437                           
 14438                           ;./Errores.h: 50:         LATAbits.LATA7 ^= 1;
 14439  004AC2  7E89               	btg	3977,7,c	;volatile
 14440  004AC4                     l5838:
 14441                           
 14442                           ;./Errores.h: 52:     if (a == 5){
 14443  004AC4  0E05               	movlw	5
 14444  004AC6  1801               	xorwf	Error@a,w,c
 14445  004AC8  A4D8               	btfss	status,2,c
 14446  004ACA  D008               	goto	l5850
 14447                           
 14448                           ;./Errores.h: 53:         LATAbits.LATA0 ^= 0;
 14449  004ACC  5089               	movf	3977,w,c	;volatile
 14450                           
 14451                           ;./Errores.h: 54:         LATAbits.LATA1 ^= 0;
 14452  004ACE  5089               	movf	3977,w,c	;volatile
 14453                           
 14454                           ;./Errores.h: 55:         LATAbits.LATA2 ^= 0;
 14455  004AD0  5089               	movf	3977,w,c	;volatile
 14456                           
 14457                           ;./Errores.h: 56:         LATAbits.LATA3 ^= 0;
 14458  004AD2  5089               	movf	3977,w,c	;volatile
 14459                           
 14460                           ;./Errores.h: 57:         LATAbits.LATA4 ^= 1;
 14461  004AD4  7889               	btg	3977,4,c	;volatile
 14462                           
 14463                           ;./Errores.h: 58:         LATAbits.LATA5 ^= 1;
 14464  004AD6  7A89               	btg	3977,5,c	;volatile
 14465                           
 14466                           ;./Errores.h: 59:         LATAbits.LATA6 ^= 1;
 14467  004AD8  7C89               	btg	3977,6,c	;volatile
 14468                           
 14469                           ;./Errores.h: 60:         LATAbits.LATA7 ^= 1;
 14470  004ADA  7E89               	btg	3977,7,c	;volatile
 14471  004ADC                     l5850:
 14472                           
 14473                           ;./Errores.h: 62:     if (a == 6){
 14474  004ADC  0E06               	movlw	6
 14475  004ADE  1801               	xorwf	Error@a,w,c
 14476  004AE0  A4D8               	btfss	status,2,c
 14477  004AE2  D008               	goto	l5864
 14478                           
 14479                           ;./Errores.h: 63:         LATAbits.LATA0 ^= 0;
 14480  004AE4  5089               	movf	3977,w,c	;volatile
 14481                           
 14482                           ;./Errores.h: 64:         LATAbits.LATA1 ^= 0;
 14483  004AE6  5089               	movf	3977,w,c	;volatile
 14484                           
 14485                           ;./Errores.h: 65:         LATAbits.LATA2 ^= 0;
 14486  004AE8  5089               	movf	3977,w,c	;volatile
 14487                           
 14488                           ;./Errores.h: 66:         LATAbits.LATA3 ^= 1;
 14489  004AEA  7689               	btg	3977,3,c	;volatile
 14490                           
 14491                           ;./Errores.h: 67:         LATAbits.LATA4 ^= 1;
 14492  004AEC  7889               	btg	3977,4,c	;volatile
 14493                           
 14494                           ;./Errores.h: 68:         LATAbits.LATA5 ^= 1;
 14495  004AEE  7A89               	btg	3977,5,c	;volatile
 14496                           
 14497                           ;./Errores.h: 69:         LATAbits.LATA6 ^= 1;
 14498  004AF0  7C89               	btg	3977,6,c	;volatile
 14499                           
 14500                           ;./Errores.h: 70:         LATAbits.LATA7 ^= 1;
 14501  004AF2  7E89               	btg	3977,7,c	;volatile
 14502  004AF4                     l5864:
 14503                           
 14504                           ;./Errores.h: 72:     if (a == 7){
 14505  004AF4  0E07               	movlw	7
 14506  004AF6  1801               	xorwf	Error@a,w,c
 14507  004AF8  A4D8               	btfss	status,2,c
 14508  004AFA  D008               	goto	l5880
 14509                           
 14510                           ;./Errores.h: 73:         LATAbits.LATA0 ^= 0;
 14511  004AFC  5089               	movf	3977,w,c	;volatile
 14512                           
 14513                           ;./Errores.h: 74:         LATAbits.LATA1 ^= 0;
 14514  004AFE  5089               	movf	3977,w,c	;volatile
 14515                           
 14516                           ;./Errores.h: 75:         LATAbits.LATA2 ^= 1;
 14517  004B00  7489               	btg	3977,2,c	;volatile
 14518                           
 14519                           ;./Errores.h: 76:         LATAbits.LATA3 ^= 1;
 14520  004B02  7689               	btg	3977,3,c	;volatile
 14521                           
 14522                           ;./Errores.h: 77:         LATAbits.LATA4 ^= 1;
 14523  004B04  7889               	btg	3977,4,c	;volatile
 14524                           
 14525                           ;./Errores.h: 78:         LATAbits.LATA5 ^= 1;
 14526  004B06  7A89               	btg	3977,5,c	;volatile
 14527                           
 14528                           ;./Errores.h: 79:         LATAbits.LATA6 ^= 1;
 14529  004B08  7C89               	btg	3977,6,c	;volatile
 14530                           
 14531                           ;./Errores.h: 80:         LATAbits.LATA7 ^= 1;
 14532  004B0A  7E89               	btg	3977,7,c	;volatile
 14533  004B0C                     l5880:
 14534                           
 14535                           ;./Errores.h: 82:     if (a == 11){
 14536  004B0C  0E0B               	movlw	11
 14537  004B0E  1801               	xorwf	Error@a,w,c
 14538  004B10  A4D8               	btfss	status,2,c
 14539  004B12  D008               	goto	l5896
 14540                           
 14541                           ;./Errores.h: 83:         LATAbits.LATA0 ^= 0;
 14542  004B14  5089               	movf	3977,w,c	;volatile
 14543                           
 14544                           ;./Errores.h: 84:         LATAbits.LATA1 ^= 1;
 14545  004B16  7289               	btg	3977,1,c	;volatile
 14546                           
 14547                           ;./Errores.h: 85:         LATAbits.LATA2 ^= 0;
 14548  004B18  5089               	movf	3977,w,c	;volatile
 14549                           
 14550                           ;./Errores.h: 86:         LATAbits.LATA3 ^= 0;
 14551  004B1A  5089               	movf	3977,w,c	;volatile
 14552                           
 14553                           ;./Errores.h: 87:         LATAbits.LATA4 ^= 0;
 14554  004B1C  5089               	movf	3977,w,c	;volatile
 14555                           
 14556                           ;./Errores.h: 88:         LATAbits.LATA5 ^= 1;
 14557  004B1E  7A89               	btg	3977,5,c	;volatile
 14558                           
 14559                           ;./Errores.h: 89:         LATAbits.LATA6 ^= 0;
 14560  004B20  5089               	movf	3977,w,c	;volatile
 14561                           
 14562                           ;./Errores.h: 90:         LATAbits.LATA7 ^= 1;
 14563  004B22  7E89               	btg	3977,7,c	;volatile
 14564  004B24                     l5896:
 14565                           
 14566                           ;./Errores.h: 92:     if(a == 15) {
 14567  004B24  0E0F               	movlw	15
 14568  004B26  1801               	xorwf	Error@a,w,c
 14569  004B28  A4D8               	btfss	status,2,c
 14570  004B2A  0012               	return	
 14571                           
 14572                           ;./Errores.h: 93:         LATAbits.LATA0 ^= 0;
 14573  004B2C  5089               	movf	3977,w,c	;volatile
 14574                           
 14575                           ;./Errores.h: 94:         LATAbits.LATA1 ^= 0;
 14576  004B2E  5089               	movf	3977,w,c	;volatile
 14577                           
 14578                           ;./Errores.h: 95:         LATAbits.LATA2 ^= 0;
 14579  004B30  5089               	movf	3977,w,c	;volatile
 14580                           
 14581                           ;./Errores.h: 96:         LATAbits.LATA3 ^= 0;
 14582  004B32  5089               	movf	3977,w,c	;volatile
 14583                           
 14584                           ;./Errores.h: 97:         LATAbits.LATA4 ^= 0;
 14585  004B34  5089               	movf	3977,w,c	;volatile
 14586                           
 14587                           ;./Errores.h: 98:         LATAbits.LATA5 ^= 0;
 14588  004B36  5089               	movf	3977,w,c	;volatile
 14589                           
 14590                           ;./Errores.h: 99:         LATAbits.LATA6 ^= 0;
 14591  004B38  5089               	movf	3977,w,c	;volatile
 14592                           
 14593                           ;./Errores.h: 100:         LATAbits.LATA7 ^= 0;
 14594  004B3A  5089               	movf	3977,w,c	;volatile
 14595  004B3C  0012               	return		;funcret
 14596  004B3E                     __end_of_Error:
 14597                           	opt callstack 0
 14598                           
 14599                           	psect	rparam
 14600  0000                     tosu	equ	0xFFF
 14601                           tosh	equ	0xFFE
 14602                           tosl	equ	0xFFD
 14603                           stkptr	equ	0xFFC
 14604                           pclatu	equ	0xFFB
 14605                           pclath	equ	0xFFA
 14606                           pcl	equ	0xFF9
 14607                           tblptru	equ	0xFF8
 14608                           tblptrh	equ	0xFF7
 14609                           tblptrl	equ	0xFF6
 14610                           tablat	equ	0xFF5
 14611                           prodh	equ	0xFF4
 14612                           prodl	equ	0xFF3
 14613                           indf0	equ	0xFEF
 14614                           postinc0	equ	0xFEE
 14615                           postdec0	equ	0xFED
 14616                           preinc0	equ	0xFEC
 14617                           plusw0	equ	0xFEB
 14618                           fsr0h	equ	0xFEA
 14619                           fsr0l	equ	0xFE9
 14620                           wreg	equ	0xFE8
 14621                           indf1	equ	0xFE7
 14622                           postinc1	equ	0xFE6
 14623                           postdec1	equ	0xFE5
 14624                           preinc1	equ	0xFE4
 14625                           plusw1	equ	0xFE3
 14626                           fsr1h	equ	0xFE2
 14627                           fsr1l	equ	0xFE1
 14628                           bsr	equ	0xFE0
 14629                           indf2	equ	0xFDF
 14630                           postinc2	equ	0xFDE
 14631                           postdec2	equ	0xFDD
 14632                           preinc2	equ	0xFDC
 14633                           plusw2	equ	0xFDB
 14634                           fsr2h	equ	0xFDA
 14635                           fsr2l	equ	0xFD9
 14636                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    0
    Data        1
    BSS         596
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    116     155
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> guardar@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S404$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S404$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S404$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    guardar@data	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    S83$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S83$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_guardar
    _guardar->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  430537
                              _Error
                        ___delay_sec
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              4     2      2  430293
                                            112 BANK0      4     2      2
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (2) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (5) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (6) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (7) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (6) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error                                                1     1      0     198
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   ___delay_sec
   _guardar
     _Error
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
       _mem_cpy
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _validate
         _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     74      9B       5       96.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      FA       6        0.0%
DATA                 0      0     328       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 15 22:48:02 2019

              _SPI1_Exchange8bit 560A                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l82 548A  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                      __CFG_LVP$ON 000000  
                            l100 5262                              l201 4648  
                            l220 2102                              l135 3BA2  
                            l320 2FAE                              l160 3D38  
                            l401 3636                              l322 2C68  
                            l146 3C6A                              l307 3F3C  
                            l317 2C5E                              l157 3D68  
                            l174 4C28                              l414 380E  
                            l191 45C2                              l343 2424  
                            l521 3B6E                              l178 4C32  
                            l179 4C46                              l195 45CC  
                            l196 45D4                              l612 1010  
                            l604 0CB2                              l197 45E8  
                            l382 3462                              l534 42C0  
                            l367 41BE                              l456 47AA  
                            l732 19CA                              l653 322C  
                            l646 30A2                              l399 363E  
                            l655 3214                              l647 309A  
                            l736 1C5A                              l825 5612  
                            l585 09D0                              l497 3A18  
                            l598 0B18                              l882 50AE  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 00DA              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                   ??_create_chain 005C  
                            wreg 000FE8                disk_initialize@ty 001A  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                create_chain@scl 0061                  create_chain@res 0060  
                    ld_clust@dir 0003                             l4100 50DC  
                           l4120 5116                             l4202 5276  
                           l4116 510A                             l5020 4CF2  
                           l4062 5470                             l4134 513E  
                           l4126 512A                             l4150 51E4  
                           l5030 4D56                             l4128 512E  
                           l4144 51CE                             l4312 402E  
                           l5120 47D2                             l4306 3FB4  
                           l5106 51AE                             l4084 55DE  
                           l4180 53D6                             l4164 5238  
                           l4252 46AA                             l4316 403A  
                           l4324 4094                             l5036 4D88  
                           l5028 4D48                             l5140 4878  
                           l4238 462A                             l4342 4F8A  
                           l5150 3924                             l5134 4838  
                           l6022 31FA                             l4344 4FA6  
                           l5064 3F14                             l4424 24E0  
                           l4520 33BE                             l6112 1C3E  
                           l6104 1C18                             l5224 3AB0  
                           l5152 3928                             l6040 3272  
                           l4186 5246                             l4290 4CCC  
                           l4274 4C5A                             l4610 1F64  
                           l4506 4DF0                             l4442 25FC  
                           l4426 2514                             l6114 1C76  
                           l5322 4A5A                             l5090 4778  
                           l4700 2366                             l4532 3432  
                           l5092 4780                             l5076 46E4  
                           l5244 3AEC                             l5236 3ADA  
                           l5164 3996                             l5420 4134  
                           l5404 40CE                             l6220 1374  
                           l4622 1F80                             l4710 23A4  
                           l4374 2DD4                             l4446 2632  
                           l4470 27E8                             l6126 1CE8  
                           l6118 1C84                             l6150 1DB0  
                           l5342 490A                             l5318 4A50  
                           l5254 3B2C                             l5246 3AFC  
                           l5190 3A0E                             l5430 41AE  
                           l5406 40D6                             l6302 1822  
                           l6222 13B4                             l6206 128C  
                           l4632 205E                             l4712 23E6  
                           l4376 2DF2                             l4456 26E4  
                           l4472 2814                             l4536 3472  
                           l4528 340E                             l6136 1D30  
                           l6128 1D1C                             l5336 48EC  
                           l5600 0A1C                             l5248 3B02  
                           l5504 4324                             l6056 3352  
                           l6320 1930                             l6232 13E0  
                           l4618 1F72                             l4482 531E  
                           l4386 2EB8                             l4378 2DFC  
                           l4466 27D6                             l6090 1B9A  
                           l6074 197E                             l5354 4982  
                           l5290 49AC                             l5450 4C0E  
                           l5186 39F4                             l6306 1898  
                           l6250 14BC                             l6242 1454  
                           l6314 18D4                             l4708 239E  
                           l4652 2150                             l4492 5556  
                           l5372 503A                             l4396 2F82  
                           l4572 35B6                             l4564 3544  
                           l4548 34D0                             l6068 195C  
                           l5348 4948                             l5292 49B0  
                           l5620 0AAE                             l5268 3B5C  
                           l5460 420C                             l4670 22AE  
                           l5382 5060                             l4486 5332  
                           l6174 1EEA                             l5702 0D9E  
                           l5622 0AB4                             l5606 0A62  
                           l5542 08C8                             l5526 0884  
                           l5518 085E                             l4902 2BBA  
                           l4734 5366                             l6270 15FA  
                           l6238 1404                             l4680 22F4  
                           l4648 2148                             l4496 5566  
                           l5368 5036                             l5384 506C  
                           l6168 1E78                             l4920 3BAE  
                           l5608 0A88                             l4816 285E  
                           l4760 370A                             l4736 536A  
                           l4728 52C0                             l6264 15A6  
                           l4690 2348                             l4674 22BC  
                           l4666 2226                             l4658 2196  
                           l5394 50A0                             l4578 361E  
                           l5706 0DB4                             l5626 0AB8  
                           l5546 08CC                             l4842 297E  
                           l4826 28C2                             l4770 375C  
                           l4754 36BA                             l6258 151E  
                           l6290 1790                             l6346 435C  
                           l5820 4A94                             l4924 3BB8  
                           l4836 2968                             l4780 37CE  
                           l4772 3782                             l5468 4260  
                           l6276 16D4                             l5814 4A7C  
                           l5902 54E4                             l4686 2326  
                           l4598 55F2                             l4942 3C06  
                           l5726 0EEE                             l5566 0910  
                           l5558 0906                             l4870 2A1E  
                           l6286 174E                             l6278 16F4  
                           l6382 4438                             l6390 4464  
                           l4696 235E                             l4928 3BC0  
                           l5648 0B76                             l5920 4E78  
                           l4792 384E                             l6296 17D8  
                           l6288 1772                             l6368 43EE  
                           l5850 4ADC                             l5906 54F4  
                           l4954 3C3A                             l5762 11B4  
                           l5738 0FE2                             l5594 0A06  
                           l5578 094E                             l5930 4EBA  
                           l4882 2ABE                             l4858 2A00  
                           l5828 4AAC                             l4980 3CC2  
                           l4972 3C9A                             l5588 09B4  
                           l5940 4EE6                             l5838 4AC4  
                           l4990 3D08                             l5926 4EA6  
                           l4894 2B14                             l6398 544C  
                           l5880 4B0C                             l5864 4AF4  
                           l4984 3CD0                             l5952 2FCE  
                           l4898 2B5C                             l4988 3CF6  
                           l5798 45AA                             l5982 3072  
                           l5974 3048                             l5896 4B24  
                           l5986 307E                             STR_1 0814  
                           STR_2 0814                             STR_3 0824  
                           STR_4 0801                             STR_5 0815  
                           STR_6 0815                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5200 241E                             u5105 2CB2  
                           u5050 4F2E                             u6010 285A  
                           u5125 2D50                             u5215 246E  
                           u4520 5492                             u5080 2C2E  
                           u4530 549E                             u5170 2EFA  
                           u5090 2C4E                             u5155 2DE0  
                           u4700 526A                             u4620 51CA  
                           u5500 35F6                             u5420 34BE  
                           u7100 40C8                             u5245 2560  
                           u5270 261A                             u5190 23FE  
                           u6070 2964                             u5175 2EF0  
                           u6055 28CE                             u4640 5204  
                           u5440 351C                             u6080 297A  
                           u6400 4D7E                             u7200 4206  
                           u7050 5036                             u5290 2726  
                           u5370 33AC                             u5275 2610  
                           u4900 4C24                             u4740 45BE  
                           u5620 20FC                             u6340 3D40  
                           u5605 2066                             u4830 4664  
                           u5550 1F7C                             u7070 5070  
                           u5390 3420                             u8110 1958  
                           u6270 3C72                             u6190 3BA8  
                           u6510 479E                             u7150 4188  
                           u4647 51FA                             u5615 208C  
                           u5295 271C                             u6175 2BDC  
                           u6407 4D74                             u8200 1C04  
                           u6360 3D64                             u7160 41DE  
                           u5625 20F2                             u4850 468C  
                           u8210 1C2A                             u7330 08C4  
                           u7250 42BA                             u7090 40A8  
                           u5715 21DA                             u6380 4D20  
                           u6540 47CC                             u5725 21FC  
                           u4950 4C82                             u4870 46BA  
                           u5734 221A                             u5670 2178  
                           u8310 1E64                             u7430 0AA2  
                           u6710 3A24                             u5830 52D0  
                           u4935 4C38                             u5735 2214  
                           u9007 3D2A                             u5840 5304  
                           u8400 12E6                             u9017 547E  
                           u4785 45DA                             u5745 2264  
                           u4970 4CAE                             u8330 1ECE  
                           u7450 0AB4                             u6490 4764  
                           u6730 3A30                             u9027 5256  
                           u5675 216E                             u5595 2036  
                           u8315 1E5A                             u6387 4D10  
                           u8260 1D40                             u5940 37DE  
                           u5860 539A                             u6660 39DE  
                           u9037 54EA                             u8165 1A42  
                           u8405 12DC                             u4990 4CDC  
                           u6750 3A5A                             u8280 1DC4  
                           u6920 49D2                             u5880 36B6  
                           u6680 39F0                             u7625 0ECE  
                           u7650 1036                             u6770 3A66  
                           u7555 0CE6                             u8515 1536  
                           u7580 0D9A                             u7900 4EE2  
                           u8620 18DC                             u7590 0DB0  
                           u7655 102C                             u5985 3884  
                           u5995 38D0                             u6980 4906  
                           u8565 169A                             u6990 4944  
                           u8670 437A                             u8575 16DE  
                           u8997 3C5C                             _WPUB 000F85  
                           _Fsid 00D4                             _Stat 00FA  
                           _data 00D9                             _main 542A  
                   find_volume@i 0095                             fsr0h 000FEA  
                           fsr1h 000FE2                             indf0 000FEF  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                  __CFG_BORV$190 000000                    disk_ioctl@cmd 0011  
                  disk_ioctl@csd 0021                    disk_read@buff 0011  
                  disk_ioctl@res 0036                    disk_ioctl@ptr 0038  
                  disk_read@pdrv 0019                             prodh 000FF4  
                           prodl 000FF3                   ??_get_ldnumber 0003  
                           start 0000        __end_of_SPI1_Exchange8bit 561A  
                  __CFG_IESO$OFF 000000                    __CFG_MCLRE$ON 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0086  
             disk_initialize@ocr 0013                     ___param_bank 000000  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0058                      _sync_window 3F40  
 __size_of_OSCILLATOR_Initialize 0012    __end_of_OSCILLATOR_Initialize 560A  
                          ?_main 0001                  __end_of___lldiv 50C0  
                 __CFG_DEBUG$OFF 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 54DC                            _FatFs 05D2  
                __end_of_chk_chr 53AC               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F50                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 4F04                            _Error 4A64  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 3912  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 1942  
                __end_of_get_fat 2FC0                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 530E  
                __end_of_mem_cpy 4D9A                  __end_of_mem_set 5578  
                __end_of_guardar 446C                    find_volume@br 0060  
                  find_volume@fs 0098                    find_volume@pt 007A  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw2 000FDB                  __end_of_put_fat 2818  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                __end_of_sync_fs 3F40                   __CFG_ICPRT$OFF 000000  
                  get_ldnumber@i 000B         __size_of_SPI1_Initialize 000E  
                __initialization 53EE              disk_initialize@pdrv 0012  
                   __end_of_main 5466                     clust2sect@fs 000D  
                 __CFG_PCLKEN$ON 000000                           ??_main 0060  
                  __activetblptr 000002                   __CFG_SDOMX$RB3 000000  
                         ?_Error 0001                  __CFG_CCP2MX$RC1 000000  
                         _ACTCON 000FB5                           _ANSELA 000F5B  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
           __end_of_dir_register 4C14                 __end_of_check_fs 4986  
                    guardar@data 00D0            SPI1_Exchange8bit@data 0001  
                         Error@a 0001       __size_of_SPI1_Exchange8bit 0010  
           __size_of_create_name 0284         __size_of_disk_initialize 01EA  
               __end_of_deselect 564E                 __end_of_dir_find 489A  
                 __CFG_XINST$OFF 000000                __end_of_SPI1_Open 5628  
               __end_of_dir_next 2C1E                     ?_move_window 0030  
           __end_of_create_chain 3650                 __end_of_ld_clust 51C0  
                         ___lmul 530E             __size_of_find_volume 09AE  
           __size_of_disk_status 0012                           ___wmul 55A2  
                 __CFG_STVREN$ON 000000                        ??___lldiv 0009  
                         _f_open 2FC0                           _f_sync 446C  
                      ??_f_close 0050                   find_volume@fmt 0097  
                         clear_0 5408                           clear_1 541A  
                 find_volume@rfs 0045                        ??_chk_chr 0005  
                 find_volume@vol 0080                           _select 55C8  
                      ??_f_lseek 0073                        ??_f_mount 0057  
                      ??_dir_sdi 0060                        ??_f_write 0075  
                      ??_get_fat 0041                 __end_of_send_cmd 53EE  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                        ??_guardar 0060  
                disk_ioctl@csize 0032                 __end_of_validate 503E  
           __end_of_get_ldnumber 4A64                     __mediumconst 0000  
                disk_read@sector 0013                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               __end_of_st_clust 55A2                        ??_put_fat 0045  
                xmit_datablock@i 0007                        ??_sync_fs 003C  
             rcvr_datablock@buff 0002             __CFG_LS48MHZ$SYS24X4 000000  
              _SYSTEM_Initialize 5628                       __accesstop 0060  
        __end_of__initialization 5420                  __CFG_PBADEN$OFF 000000  
                 disk_write@buff 0011                   get_ldnumber@tp 0007  
                 get_ldnumber@tt 000D                   disk_write@pdrv 001A  
             ?_SYSTEM_Initialize 0001                    ___rparam_used 000001  
        __size_of_rcvr_datablock 006C                    __end_of_Error 4B3E  
                 __pcstackCOMRAM 0001                 __CFG_nPWRTEN$OFF 000000  
                   __pidataBANK0 564E              ??_SYSTEM_Initialize 0001  
                     ___send_cmd 50C0             __size_of_follow_path 0146  
              ??_SPI1_Initialize 0001                    ??___delay_sec 0001  
             __size_of_dir_alloc 00F0                          ??_Error 0001  
             __size_of_disk_read 00CC        __end_of_SYSTEM_Initialize 5636  
                     __pbssBANK0 00D4                __CFG_PLLSEL$PLL4X 000000  
                        ?___lmul 0001                          ?___wmul 0001  
                        ?_f_open 009A          __size_of_xmit_datablock 007C  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?_check_fs 003B  
                     _disk_ioctl 1F50                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 45AE                          _OSCTUNE 000F9B  
                    send_cmd@cmd 000F                        ?_deselect 0001  
                    send_cmd@arg 000B                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0056  
                        _SSP1BUF 000FC9                        ?_dir_find 0080  
            __end_of___delay_sec 5514                        ?_dir_next 006D  
          __size_of_dir_register 00D6                        ?_ld_clust 0001  
                     _clust2sect 4D9A                 sync_window@wsect 002C  
                  ?_remove_chain 0056            __size_of_create_chain 02FA  
              __end_of_dir_alloc 47AE                        ?_send_cmd 000B  
                        __Hparam 0000                   ___send_cmd@cmd 000A  
                 ___send_cmd@arg 0004                   ___send_cmd@res 0008  
                        __Lparam 0000                        ?_validate 0002  
              __end_of_disk_read 4CE0                          ff@FatFs 00D6  
                     f_close@res 0050                  __size_of___lmul 0056  
                      ?_st_clust 0001                      ?___send_cmd 0004  
                        ___lldiv 503E                  __size_of___wmul 0026  
           __size_of_move_window 00A6                       check_fs@fs 003B  
                __size_of_f_open 0396                     __psmallconst 0800  
                __size_of_f_sync 0142                          _f_close 54A2  
          __size_of_get_ldnumber 00DE              _disk_initialize$328 0017  
                        __pcinit 53EE                          _chk_chr 5364  
                        _f_lseek 1942                          __ramtop 0800  
                        _f_mount 4E54                  __size_of_select 001E  
                        __ptext0 542A                          __ptext1 4328  
                        __ptext2 11DE                          __ptext3 2FC0  
                        __ptext4 4098                          __ptext5 41E2  
                        __ptext6 5142                          __ptext7 47AE  
                        __ptext8 52A8                          __ptext9 3912  
                        _dir_sdi 3650                      validate@fil 0008  
                        _f_write 11DE                      validate@obj 0002  
                        _get_fat 2C1E                       chk_chr@chr 0003  
                   _dir_register 4B3E                       chk_chr@str 0001  
                        _mem_cmp 52A8                          _mem_cpy 4CE0  
          _OSCILLATOR_Initialize 55F8                          _mem_set 554C  
                        _guardar 4328                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3356                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23EE  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 3D80                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 5420  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 523C  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 4986  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 561A                       _wait_ready 5466  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$818 0011  
                     dir_sdi@idx 0058                      ___delay_sec 54DC  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 52A8  
                  ??_create_name 000D                 disk_initialize@n 001D  
                     ld_clust@cl 000B                       ld_clust@fs 0001  
                _SPI1_Initialize 5636                    ??_find_volume 004A  
                  ??_disk_status 0001                   _xmit_datablock 51C0  
                     ?_SPI1_Open 0001                   __end_of___lmul 5364  
                    st_clust@dir 0001                   __end_of___wmul 55C8  
                 __end_of_f_open 3356                   __end_of_f_sync 45AE  
                 clust2sect@clst 000F           ?_OSCILLATOR_Initialize 0001  
                 __end_of_select 55E6             __size_of_sync_window 0158  
            start_initialization 53EE  __size_of_PIN_MANAGER_Initialize 0038  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 3B96  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 523C  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 3B96              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00FA  
            __end_of_find_volume 11DE              __end_of_disk_status 55F8  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 41E2                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 05D2  
                  __pcstackBANK0 0060                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 5644                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
                _find_volume$922 0070                  _find_volume$923 0074  
         _PIN_MANAGER_Initialize 5514                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 46BE                         ?___lldiv 0001  
              __size_of_validate 0094                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 4C14  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 4328  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                       ?_guardar 00D0                   __size_of_Error 00DA  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 3D80                         ?_sync_fs 003A  
                    _get_fat$568 004A                find_volume@fasize 008D  
            __size_of_wait_ready 003C               __end_of___send_cmd 5142  
                    _create_name 3912                   ___wmul@product 0005  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 0830                      _disk_status 55E6  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00D8  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                     put_fat@res 0053                       put_fat@val 0041  
              move_window@sector 0032                  dir_next@stretch 006F  
                       __Hrparam 0000                        guardar@bw 00D2  
                       __Lrparam 0000                      _follow_path 41E2  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23EE  
          __size_of_remove_chain 014A               __end_of_disk_write 46BE  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 0082  
            __end_of_move_window 4FAA               __end_of_clust2sect 4E54  
               __size_of_f_close 003A                 __size_of_chk_chr 0048  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 0764  
               __size_of_get_fat 03A2                         _check_fs 489A  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 00BA  
               __size_of_mem_set 002C                 __size_of_guardar 0144  
            xmit_datablock@token 0006                  ___delay_sec@sec 0004  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 5644                         __ptext10 5364  
                       __ptext11 4B3E                         __ptext20 561A  
                       __ptext12 4CE0                         __ptext21 489A  
                       __ptext13 46BE                         __ptext30 446C  
                       __ptext22 1942                         __ptext14 3650  
                       __ptext31 4FAA                         __ptext23 3356  
                       __ptext15 2818                         __ptext40 45AE  
                       __ptext32 55E6                         __ptext24 23EE  
                       __ptext16 4E54                         __ptext41 51C0  
                       __ptext33 3D80                         __ptext25 2C1E  
                       __ptext17 0830                         __ptext50 54DC  
                       __ptext42 4C14                         __ptext34 554C  
                       __ptext26 4D9A                         __ptext18 4986  
                       __ptext51 5628                         __ptext43 53AC  
                       __ptext35 1F50                         __ptext27 530E  
                       __ptext19 3B96                         __ptext52 5636  
                       __ptext44 50C0                         __ptext36 55A2  
                       __ptext28 503E                         __ptext53 5514  
                       __ptext45 55C8                         __ptext37 5578  
                       __ptext29 54A2                         __ptext54 55F8  
                       __ptext46 5466                         __ptext38 4F04  
                       __ptext55 4A64                         __ptext47 5644  
                       __ptext39 3F40                         __ptext48 523C  
                       __ptext49 560A                         _dir_find 47AE  
                   _SSP1CON1bits 000FC6                         _dir_next 2818  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 5142                 __size_of_put_fat 042A  
                 sync_window@res 0029                 __size_of_sync_fs 01C0  
                  __size_of_main 003C                       sync_fs@res 0044  
                   _remove_chain 4098                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 53AC  
                       _validate 4FAA                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 5578  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$337 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0009  
                      put_fat@fs 003B                         mem_cpy@s 000B  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                 dir_register@dp 008A                 ??_xmit_datablock 0007  
             __end_of_wait_ready 54A2                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 4F04             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054                    ?_dir_register 008A  
                  ___delay_sec@i 0005                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 4098                      dir_find@res 0085  
           __size_of___delay_sec 0038                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 554C  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                   ?_disk_status 0001                      _put_fat$594 004D  
                    _put_fat$595 004F  
