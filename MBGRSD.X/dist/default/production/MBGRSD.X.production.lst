

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 15 21:37:36 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71  0000                     
    72                           ; Version 2.05
    73                           ; Generated 20/12/2018 GMT
    74                           ; 
    75                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F45K50 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataBANK0
   108  005640                     __pidataBANK0:
   109                           	opt callstack 0
   110                           
   111                           ;initializer for _Stat
   112  005640  01                 	db	1
   113  0000                     _ANSELE	set	3935
   114  0000                     _ANSELD	set	3934
   115  0000                     _ANSELB	set	3932
   116  0000                     _ANSELC	set	3933
   117  0000                     _ANSELA	set	3931
   118  0000                     _SSP1STATbits	set	4039
   119  0000                     _SSP1BUF	set	4041
   120  0000                     _SSP1CON1bits	set	4038
   121  0000                     _SSP1ADD	set	4040
   122  0000                     _SSP1CON1	set	4038
   123  0000                     _SSP1STAT	set	4039
   124  0000                     _INTCON2bits	set	4081
   125  0000                     _WPUB	set	3973
   126  0000                     _TRISD	set	3989
   127  0000                     _TRISC	set	3988
   128  0000                     _TRISB	set	3987
   129  0000                     _TRISE	set	3990
   130  0000                     _LATC	set	3979
   131  0000                     _LATB	set	3978
   132  0000                     _LATD	set	3980
   133  0000                     _LATE	set	3981
   134  0000                     _ACTCON	set	4021
   135  0000                     _OSCTUNE	set	3995
   136  0000                     _OSCCON2	set	4050
   137  0000                     _OSCCON	set	4051
   138  0000                     _LATBbits	set	3978
   139  0000                     _TRISA	set	3986
   140  0000                     _LATA	set	3977
   141  0000                     _LATAbits	set	3977
   142                           
   143                           	psect	smallconst
   144  000800                     __psmallconst:
   145                           	opt callstack 0
   146  000800  00                 	db	0
   147  000801                     STR_4:
   148  000801  43                 	db	67	;'C'
   149  000802  52                 	db	82	;'R'
   150  000803  45                 	db	69	;'E'
   151  000804  41                 	db	65	;'A'
   152  000805  44                 	db	68	;'D'
   153  000806  4F                 	db	79	;'O'
   154  000807  20                 	db	32
   155  000808  50                 	db	80	;'P'
   156  000809  4F                 	db	79	;'O'
   157  00080A  52                 	db	82	;'R'
   158  00080B  20                 	db	32
   159  00080C  4D                 	db	77	;'M'
   160  00080D  49                 	db	73	;'I'
   161  00080E  20                 	db	32
   162  00080F  3A                 	db	58	;':'
   163  000810  56                 	db	86	;'V'
   164  000811  20                 	db	32
   165  000812  2E                 	db	46
   166  000813  0D                 	db	13
   167  000814  0A                 	db	10
   168  000815  00                 	db	0
   169  000816                     STR_5:
   170  000816  22                 	db	34
   171  000817  2A                 	db	42
   172  000818  2B                 	db	43
   173  000819  2C                 	db	44
   174  00081A  3A                 	db	58	;':'
   175  00081B  3B                 	db	59	;';'
   176  00081C  3C                 	db	60	;'<'
   177  00081D  3D                 	db	61	;'='
   178  00081E  3E                 	db	62	;'>'
   179  00081F  3F                 	db	63	;'?'
   180  000820  5B                 	db	91	;'['
   181  000821  5D                 	db	93	;']'
   182  000822  7C                 	db	124
   183  000823  7F                 	db	127
   184  000824  00                 	db	0
   185  000825                     STR_3:
   186  000825  42                 	db	66	;'B'
   187  000826  65                 	db	101	;'e'
   188  000827  65                 	db	101	;'e'
   189  000828  44                 	db	68	;'D'
   190  000829  65                 	db	101	;'e'
   191  00082A  76                 	db	118	;'v'
   192  00082B  2E                 	db	46
   193  00082C  74                 	db	116	;'t'
   194  00082D  78                 	db	120	;'x'
   195  00082E  74                 	db	116	;'t'
   196  00082F  00                 	db	0
   197  0000                     
   198                           ; #config settings
   199  000830  00                 	db	0	; dummy byte at the end
   200  0000                     
   201                           	psect	cinit
   202  0053F0                     __pcinit:
   203                           	opt callstack 0
   204  0053F0                     start_initialization:
   205                           	opt callstack 0
   206  0053F0                     __initialization:
   207                           	opt callstack 0
   208                           
   209                           ; Initialize objects allocated to BANK0 (1 bytes)
   210                           ; load TBLPTR registers with __pidataBANK0
   211  0053F0  0E40               	movlw	low __pidataBANK0
   212  0053F2  6EF6               	movwf	tblptrl,c
   213  0053F4  0E56               	movlw	high __pidataBANK0
   214  0053F6  6EF7               	movwf	tblptrh,c
   215  0053F8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   216  0053FA  6EF8               	movwf	tblptru,c
   217  0053FC  0009               	tblrd		*+	;fetch initializer
   218  0053FE  CFF5 F0F7          	movff	tablat,__pdataBANK0
   219                           
   220                           ; Clear objects allocated to BIGRAM (558 bytes)
   221  005402  EE05  F0D2         	lfsr	0,__pbssBIGRAM
   222  005406  EE12 F02E          	lfsr	1,558
   223  00540A                     clear_0:
   224  00540A  6AEE               	clrf	postinc0,c
   225  00540C  50E5               	movf	postdec1,w,c
   226  00540E  50E1               	movf	fsr1l,w,c
   227  005410  E1FC               	bnz	clear_0
   228  005412  50E2               	movf	fsr1h,w,c
   229  005414  E1FA               	bnz	clear_0
   230                           
   231                           ; Clear objects allocated to BANK0 (37 bytes)
   232  005416  EE00  F0D2         	lfsr	0,__pbssBANK0
   233  00541A  0E25               	movlw	37
   234  00541C                     clear_1:
   235  00541C  6AEE               	clrf	postinc0,c
   236  00541E  06E8               	decf	wreg,f,c
   237  005420  E1FD               	bnz	clear_1
   238  005422                     end_of_initialization:
   239                           	opt callstack 0
   240  005422                     __end_of__initialization:
   241                           	opt callstack 0
   242  005422  0E00               	movlw	low (__Lmediumconst shr (0+16))
   243  005424  6EF8               	movwf	tblptru,c
   244  005426  0100               	movlb	0
   245  005428  EF89  F02A         	goto	_main	;jump to C main() function
   246                           
   247                           	psect	bssBANK0
   248  0000D2                     __pbssBANK0:
   249                           	opt callstack 0
   250  0000D2                     _Fsid:
   251                           	opt callstack 0
   252  0000D2                     	ds	2
   253  0000D4                     ff@FatFs:
   254                           	opt callstack 0
   255  0000D4                     	ds	2
   256  0000D6                     _CardType:
   257                           	opt callstack 0
   258  0000D6                     	ds	1
   259  0000D7                     _Fil:
   260                           	opt callstack 0
   261  0000D7                     	ds	32
   262                           
   263                           	psect	dataBANK0
   264  0000F7                     __pdataBANK0:
   265                           	opt callstack 0
   266  0000F7                     _Stat:
   267                           	opt callstack 0
   268  0000F7                     	ds	1
   269                           
   270                           	psect	bssBIGRAM
   271  0005D2                     __pbssBIGRAM:
   272                           	opt callstack 0
   273  0005D2                     _FatFs:
   274                           	opt callstack 0
   275  0005D2                     	ds	558
   276                           
   277                           	psect	cstackBANK0
   278  000060                     __pcstackBANK0:
   279                           	opt callstack 0
   280  000060                     ??_dir_sdi:
   281  000060                     remove_chain@res:
   282                           	opt callstack 0
   283  000060                     create_chain@res:
   284                           	opt callstack 0
   285  000060                     find_volume@br:
   286                           	opt callstack 0
   287                           
   288                           ; 16 bytes @ 0x0
   289  000060                     	ds	1
   290  000061                     remove_chain@nxt:
   291                           	opt callstack 0
   292  000061                     create_chain@scl:
   293                           	opt callstack 0
   294                           
   295                           ; 4 bytes @ 0x1
   296  000061                     	ds	4
   297  000065                     create_chain@ncl:
   298                           	opt callstack 0
   299                           
   300                           ; 4 bytes @ 0x5
   301  000065                     	ds	2
   302  000067                     dir_sdi@ic:
   303                           	opt callstack 0
   304                           
   305                           ; 2 bytes @ 0x7
   306  000067                     	ds	2
   307  000069                     create_chain@cs:
   308                           	opt callstack 0
   309  000069                     dir_sdi@sect:
   310                           	opt callstack 0
   311                           
   312                           ; 4 bytes @ 0x9
   313  000069                     	ds	4
   314  00006D                     dir_next@dp:
   315                           	opt callstack 0
   316  00006D                     f_write@fp:
   317                           	opt callstack 0
   318  00006D                     f_lseek@fp:
   319                           	opt callstack 0
   320  00006D                     dir_sdi@clst:
   321                           	opt callstack 0
   322                           
   323                           ; 4 bytes @ 0xD
   324  00006D                     	ds	2
   325  00006F                     dir_next@stretch:
   326                           	opt callstack 0
   327  00006F                     f_write@buff:
   328                           	opt callstack 0
   329  00006F                     f_lseek@ofs:
   330                           	opt callstack 0
   331                           
   332                           ; 4 bytes @ 0xF
   333  00006F                     	ds	1
   334  000070                     _find_volume$920:
   335                           	opt callstack 0
   336                           
   337                           ; 4 bytes @ 0x10
   338  000070                     	ds	1
   339  000071                     ??_dir_next:
   340  000071                     f_write@btw:
   341                           	opt callstack 0
   342                           
   343                           ; 2 bytes @ 0x11
   344  000071                     	ds	2
   345  000073                     ??_f_lseek:
   346  000073                     f_write@bw:
   347                           	opt callstack 0
   348                           
   349                           ; 2 bytes @ 0x13
   350  000073                     	ds	1
   351  000074                     _find_volume$921:
   352                           	opt callstack 0
   353                           
   354                           ; 2 bytes @ 0x14
   355  000074                     	ds	1
   356  000075                     ??_f_write:
   357                           
   358                           ; 1 bytes @ 0x15
   359  000075                     	ds	1
   360  000076                     find_volume@szbfat:
   361                           	opt callstack 0
   362                           
   363                           ; 4 bytes @ 0x16
   364  000076                     	ds	2
   365  000078                     dir_next@c:
   366                           	opt callstack 0
   367                           
   368                           ; 2 bytes @ 0x18
   369  000078                     	ds	2
   370  00007A                     dir_next@i:
   371                           	opt callstack 0
   372  00007A                     find_volume@pt:
   373                           	opt callstack 0
   374                           
   375                           ; 2 bytes @ 0x1A
   376  00007A                     	ds	2
   377  00007C                     dir_next@clst:
   378                           	opt callstack 0
   379  00007C                     find_volume@sysect:
   380                           	opt callstack 0
   381                           
   382                           ; 4 bytes @ 0x1C
   383  00007C                     	ds	4
   384  000080                     dir_alloc@dp:
   385                           	opt callstack 0
   386  000080                     dir_find@dp:
   387                           	opt callstack 0
   388  000080                     find_volume@vol:
   389                           	opt callstack 0
   390                           
   391                           ; 2 bytes @ 0x20
   392  000080                     	ds	1
   393  000081                     f_write@res:
   394                           	opt callstack 0
   395                           
   396                           ; 1 bytes @ 0x21
   397  000081                     	ds	1
   398  000082                     dir_find@c:
   399                           	opt callstack 0
   400  000082                     dir_alloc@nent:
   401                           	opt callstack 0
   402  000082                     find_volume@nrsv:
   403                           	opt callstack 0
   404  000082                     f_write@wbuff:
   405                           	opt callstack 0
   406                           
   407                           ; 2 bytes @ 0x22
   408  000082                     	ds	1
   409  000083                     dir_find@dir:
   410                           	opt callstack 0
   411  000083                     f_lseek@ifptr:
   412                           	opt callstack 0
   413                           
   414                           ; 4 bytes @ 0x23
   415  000083                     	ds	1
   416  000084                     ??_dir_alloc:
   417  000084                     f_write@csect:
   418                           	opt callstack 0
   419  000084                     find_volume@tsect:
   420                           	opt callstack 0
   421                           
   422                           ; 4 bytes @ 0x24
   423  000084                     	ds	1
   424  000085                     dir_find@res:
   425                           	opt callstack 0
   426  000085                     f_write@cc:
   427                           	opt callstack 0
   428                           
   429                           ; 2 bytes @ 0x25
   430  000085                     	ds	1
   431  000086                     follow_path@dp:
   432                           	opt callstack 0
   433                           
   434                           ; 2 bytes @ 0x26
   435  000086                     	ds	1
   436  000087                     f_lseek@res:
   437                           	opt callstack 0
   438  000087                     dir_alloc@n:
   439                           	opt callstack 0
   440  000087                     f_write@sect:
   441                           	opt callstack 0
   442                           
   443                           ; 4 bytes @ 0x27
   444  000087                     	ds	1
   445  000088                     follow_path@path:
   446                           	opt callstack 0
   447  000088                     find_volume@nclst:
   448                           	opt callstack 0
   449  000088                     f_lseek@nsect:
   450                           	opt callstack 0
   451                           
   452                           ; 4 bytes @ 0x28
   453  000088                     	ds	1
   454  000089                     dir_alloc@res:
   455                           	opt callstack 0
   456                           
   457                           ; 1 bytes @ 0x29
   458  000089                     	ds	1
   459  00008A                     dir_register@dp:
   460                           	opt callstack 0
   461  00008A                     follow_path@dir:
   462                           	opt callstack 0
   463                           
   464                           ; 2 bytes @ 0x2A
   465  00008A                     	ds	1
   466  00008B                     f_write@clst:
   467                           	opt callstack 0
   468                           
   469                           ; 4 bytes @ 0x2B
   470  00008B                     	ds	1
   471  00008C                     dir_register@res:
   472                           	opt callstack 0
   473  00008C                     follow_path@ns:
   474                           	opt callstack 0
   475  00008C                     find_volume@stat:
   476                           	opt callstack 0
   477  00008C                     f_lseek@bcs:
   478                           	opt callstack 0
   479                           
   480                           ; 4 bytes @ 0x2C
   481  00008C                     	ds	1
   482  00008D                     follow_path@res:
   483                           	opt callstack 0
   484  00008D                     find_volume@fasize:
   485                           	opt callstack 0
   486                           
   487                           ; 4 bytes @ 0x2D
   488  00008D                     	ds	2
   489  00008F                     f_write@wcnt:
   490                           	opt callstack 0
   491                           
   492                           ; 2 bytes @ 0x2F
   493  00008F                     	ds	1
   494  000090                     f_lseek@clst:
   495                           	opt callstack 0
   496                           
   497                           ; 4 bytes @ 0x30
   498  000090                     	ds	1
   499  000091                     find_volume@bsect:
   500                           	opt callstack 0
   501                           
   502                           ; 4 bytes @ 0x31
   503  000091                     	ds	4
   504  000095                     find_volume@i:
   505                           	opt callstack 0
   506                           
   507                           ; 2 bytes @ 0x35
   508  000095                     	ds	2
   509  000097                     find_volume@fmt:
   510                           	opt callstack 0
   511                           
   512                           ; 1 bytes @ 0x37
   513  000097                     	ds	1
   514  000098                     find_volume@fs:
   515                           	opt callstack 0
   516                           
   517                           ; 2 bytes @ 0x38
   518  000098                     	ds	2
   519  00009A                     f_open@fp:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x3A
   523  00009A                     	ds	2
   524  00009C                     f_open@path:
   525                           	opt callstack 0
   526                           
   527                           ; 2 bytes @ 0x3C
   528  00009C                     	ds	2
   529  00009E                     f_open@mode:
   530                           	opt callstack 0
   531                           
   532                           ; 1 bytes @ 0x3E
   533  00009E                     	ds	1
   534  00009F                     ??_f_open:
   535                           
   536                           ; 1 bytes @ 0x3F
   537  00009F                     	ds	4
   538  0000A3                     f_open@sfn:
   539                           	opt callstack 0
   540                           
   541                           ; 12 bytes @ 0x43
   542  0000A3                     	ds	12
   543  0000AF                     f_open@cl:
   544                           	opt callstack 0
   545                           
   546                           ; 4 bytes @ 0x4F
   547  0000AF                     	ds	4
   548  0000B3                     f_open@dw:
   549                           	opt callstack 0
   550                           
   551                           ; 4 bytes @ 0x53
   552  0000B3                     	ds	4
   553  0000B7                     f_open@res:
   554                           	opt callstack 0
   555                           
   556                           ; 1 bytes @ 0x57
   557  0000B7                     	ds	1
   558  0000B8                     f_open@dir:
   559                           	opt callstack 0
   560                           
   561                           ; 2 bytes @ 0x58
   562  0000B8                     	ds	2
   563  0000BA                     f_open@dj:
   564                           	opt callstack 0
   565                           
   566                           ; 22 bytes @ 0x5A
   567  0000BA                     	ds	22
   568  0000D0                     guardar@bw:
   569                           	opt callstack 0
   570                           
   571                           ; 2 bytes @ 0x70
   572  0000D0                     	ds	2
   573                           
   574                           	psect	cstackCOMRAM
   575  000001                     __pcstackCOMRAM:
   576                           	opt callstack 0
   577  000001                     ??___delay_sec:
   578  000001                     ?_mem_cmp:
   579                           	opt callstack 0
   580  000001                     ?_chk_chr:
   581                           	opt callstack 0
   582  000001                     ?_get_ldnumber:
   583                           	opt callstack 0
   584  000001                     ?___wmul:
   585                           	opt callstack 0
   586  000001                     ?_ld_clust:
   587                           	opt callstack 0
   588  000001                     ?___lmul:
   589                           	opt callstack 0
   590  000001                     ?___lldiv:
   591                           	opt callstack 0
   592  000001                     Error@a:
   593                           	opt callstack 0
   594  000001                     disk_status@pdrv:
   595                           	opt callstack 0
   596  000001                     SPI1_Exchange8bit@data:
   597                           	opt callstack 0
   598  000001                     mem_cpy@dst:
   599                           	opt callstack 0
   600  000001                     mem_set@dst:
   601                           	opt callstack 0
   602  000001                     mem_cmp@dst:
   603                           	opt callstack 0
   604  000001                     chk_chr@str:
   605                           	opt callstack 0
   606  000001                     ld_clust@fs:
   607                           	opt callstack 0
   608  000001                     st_clust@dir:
   609                           	opt callstack 0
   610  000001                     get_ldnumber@path:
   611                           	opt callstack 0
   612  000001                     ___wmul@multiplier:
   613                           	opt callstack 0
   614  000001                     ___lmul@multiplier:
   615                           	opt callstack 0
   616  000001                     ___lldiv@dividend:
   617                           	opt callstack 0
   618                           
   619                           ; 4 bytes @ 0x0
   620  000001                     	ds	1
   621  000002                     wait_ready@tmr:
   622                           	opt callstack 0
   623  000002                     rcvr_datablock@buff:
   624                           	opt callstack 0
   625  000002                     validate@obj:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0x1
   629  000002                     	ds	1
   630  000003                     ??_get_ldnumber:
   631  000003                     mem_cpy@src:
   632                           	opt callstack 0
   633  000003                     mem_set@val:
   634                           	opt callstack 0
   635  000003                     mem_cmp@src:
   636                           	opt callstack 0
   637  000003                     chk_chr@chr:
   638                           	opt callstack 0
   639  000003                     ld_clust@dir:
   640                           	opt callstack 0
   641  000003                     ___wmul@multiplicand:
   642                           	opt callstack 0
   643  000003                     st_clust@cl:
   644                           	opt callstack 0
   645                           
   646                           ; 4 bytes @ 0x2
   647  000003                     	ds	1
   648  000004                     ??_validate:
   649  000004                     ___delay_sec@sec:
   650                           	opt callstack 0
   651  000004                     rcvr_datablock@btr:
   652                           	opt callstack 0
   653  000004                     xmit_datablock@buff:
   654                           	opt callstack 0
   655  000004                     ___send_cmd@arg:
   656                           	opt callstack 0
   657                           
   658                           ; 4 bytes @ 0x3
   659  000004                     	ds	1
   660  000005                     ??_chk_chr:
   661  000005                     ??_ld_clust:
   662  000005                     ___delay_sec@i:
   663                           	opt callstack 0
   664  000005                     mem_cpy@cnt:
   665                           	opt callstack 0
   666  000005                     mem_set@cnt:
   667                           	opt callstack 0
   668  000005                     mem_cmp@cnt:
   669                           	opt callstack 0
   670  000005                     ___wmul@product:
   671                           	opt callstack 0
   672  000005                     ___lmul@multiplicand:
   673                           	opt callstack 0
   674  000005                     ___lldiv@divisor:
   675                           	opt callstack 0
   676                           
   677                           ; 4 bytes @ 0x4
   678  000005                     	ds	1
   679  000006                     xmit_datablock@token:
   680                           	opt callstack 0
   681  000006                     rcvr_datablock@tmr:
   682                           	opt callstack 0
   683                           
   684                           ; 2 bytes @ 0x5
   685  000006                     	ds	1
   686  000007                     ??_mem_cpy:
   687  000007                     ??_mem_cmp:
   688  000007                     xmit_datablock@i:
   689                           	opt callstack 0
   690  000007                     mem_set@d:
   691                           	opt callstack 0
   692  000007                     get_ldnumber@tp:
   693                           	opt callstack 0
   694                           
   695                           ; 2 bytes @ 0x6
   696  000007                     	ds	1
   697  000008                     rcvr_datablock@token:
   698                           	opt callstack 0
   699  000008                     ___send_cmd@res:
   700                           	opt callstack 0
   701  000008                     validate@fil:
   702                           	opt callstack 0
   703                           
   704                           ; 2 bytes @ 0x7
   705  000008                     	ds	1
   706  000009                     xmit_datablock@resp:
   707                           	opt callstack 0
   708  000009                     ___send_cmd@n:
   709                           	opt callstack 0
   710  000009                     mem_cpy@d:
   711                           	opt callstack 0
   712  000009                     mem_cmp@d:
   713                           	opt callstack 0
   714  000009                     create_name@dp:
   715                           	opt callstack 0
   716  000009                     get_ldnumber@vol:
   717                           	opt callstack 0
   718  000009                     ___lmul@product:
   719                           	opt callstack 0
   720  000009                     ___lldiv@quotient:
   721                           	opt callstack 0
   722                           
   723                           ; 4 bytes @ 0x8
   724  000009                     	ds	1
   725  00000A                     ___send_cmd@cmd:
   726                           	opt callstack 0
   727                           
   728                           ; 1 bytes @ 0x9
   729  00000A                     	ds	1
   730  00000B                     mem_cpy@s:
   731                           	opt callstack 0
   732  00000B                     mem_cmp@s:
   733                           	opt callstack 0
   734  00000B                     create_name@path:
   735                           	opt callstack 0
   736  00000B                     get_ldnumber@i:
   737                           	opt callstack 0
   738  00000B                     send_cmd@arg:
   739                           	opt callstack 0
   740  00000B                     ld_clust@cl:
   741                           	opt callstack 0
   742                           
   743                           ; 4 bytes @ 0xA
   744  00000B                     	ds	2
   745  00000D                     ??_create_name:
   746  00000D                     ?_clust2sect:
   747                           	opt callstack 0
   748  00000D                     ___lldiv@counter:
   749                           	opt callstack 0
   750  00000D                     mem_cmp@r:
   751                           	opt callstack 0
   752  00000D                     clust2sect@fs:
   753                           	opt callstack 0
   754  00000D                     get_ldnumber@tt:
   755                           	opt callstack 0
   756                           
   757                           ; 2 bytes @ 0xC
   758  00000D                     	ds	2
   759  00000F                     send_cmd@cmd:
   760                           	opt callstack 0
   761  00000F                     clust2sect@clst:
   762                           	opt callstack 0
   763                           
   764                           ; 4 bytes @ 0xE
   765  00000F                     	ds	1
   766  000010                     send_cmd@res:
   767                           	opt callstack 0
   768                           
   769                           ; 1 bytes @ 0xF
   770  000010                     	ds	1
   771  000011                     ??_disk_initialize:
   772  000011                     disk_ioctl@cmd:
   773                           	opt callstack 0
   774  000011                     disk_read@buff:
   775                           	opt callstack 0
   776  000011                     disk_write@buff:
   777                           	opt callstack 0
   778  000011                     _create_name$816:
   779                           	opt callstack 0
   780                           
   781                           ; 2 bytes @ 0x10
   782  000011                     	ds	1
   783  000012                     disk_initialize@pdrv:
   784                           	opt callstack 0
   785  000012                     disk_ioctl@buff:
   786                           	opt callstack 0
   787                           
   788                           ; 2 bytes @ 0x11
   789  000012                     	ds	1
   790  000013                     ??_clust2sect:
   791  000013                     create_name@si:
   792                           	opt callstack 0
   793  000013                     disk_initialize@ocr:
   794                           	opt callstack 0
   795  000013                     disk_read@sector:
   796                           	opt callstack 0
   797  000013                     disk_write@sector:
   798                           	opt callstack 0
   799                           
   800                           ; 4 bytes @ 0x12
   801  000013                     	ds	1
   802  000014                     ??_disk_ioctl:
   803                           
   804                           ; 1 bytes @ 0x13
   805  000014                     	ds	1
   806  000015                     create_name@b:
   807                           	opt callstack 0
   808                           
   809                           ; 1 bytes @ 0x14
   810  000015                     	ds	1
   811  000016                     create_name@ni:
   812                           	opt callstack 0
   813                           
   814                           ; 2 bytes @ 0x15
   815  000016                     	ds	1
   816  000017                     _disk_initialize$326:
   817                           	opt callstack 0
   818  000017                     disk_read@count:
   819                           	opt callstack 0
   820  000017                     disk_write@count:
   821                           	opt callstack 0
   822                           
   823                           ; 2 bytes @ 0x16
   824  000017                     	ds	1
   825  000018                     create_name@p:
   826                           	opt callstack 0
   827                           
   828                           ; 2 bytes @ 0x17
   829  000018                     	ds	1
   830  000019                     ??_disk_write:
   831  000019                     disk_initialize@cmd:
   832                           	opt callstack 0
   833  000019                     disk_read@pdrv:
   834                           	opt callstack 0
   835                           
   836                           ; 1 bytes @ 0x18
   837  000019                     	ds	1
   838  00001A                     disk_initialize@ty:
   839                           	opt callstack 0
   840  00001A                     disk_write@pdrv:
   841                           	opt callstack 0
   842  00001A                     create_name@d:
   843                           	opt callstack 0
   844  00001A                     _disk_read$335:
   845                           	opt callstack 0
   846                           
   847                           ; 2 bytes @ 0x19
   848  00001A                     	ds	1
   849  00001B                     disk_initialize@tmr:
   850                           	opt callstack 0
   851  00001B                     sync_window@fs:
   852                           	opt callstack 0
   853  00001B                     create_name@sfn:
   854                           	opt callstack 0
   855                           
   856                           ; 2 bytes @ 0x1A
   857  00001B                     	ds	1
   858  00001C                     disk_read@cmd:
   859                           	opt callstack 0
   860                           
   861                           ; 1 bytes @ 0x1B
   862  00001C                     	ds	1
   863  00001D                     ??_sync_window:
   864  00001D                     disk_initialize@n:
   865                           	opt callstack 0
   866  00001D                     create_name@i:
   867                           	opt callstack 0
   868                           
   869                           ; 2 bytes @ 0x1C
   870  00001D                     	ds	2
   871  00001F                     create_name@c:
   872                           	opt callstack 0
   873                           
   874                           ; 1 bytes @ 0x1E
   875  00001F                     	ds	2
   876  000021                     disk_ioctl@csd:
   877                           	opt callstack 0
   878                           
   879                           ; 16 bytes @ 0x20
   880  000021                     	ds	8
   881  000029                     sync_window@res:
   882                           	opt callstack 0
   883                           
   884                           ; 1 bytes @ 0x28
   885  000029                     	ds	1
   886  00002A                     sync_window@nf:
   887                           	opt callstack 0
   888                           
   889                           ; 2 bytes @ 0x29
   890  00002A                     	ds	2
   891  00002C                     sync_window@wsect:
   892                           	opt callstack 0
   893                           
   894                           ; 4 bytes @ 0x2B
   895  00002C                     	ds	4
   896  000030                     move_window@fs:
   897                           	opt callstack 0
   898                           
   899                           ; 2 bytes @ 0x2F
   900  000030                     	ds	1
   901  000031                     disk_ioctl@pdrv:
   902                           	opt callstack 0
   903                           
   904                           ; 1 bytes @ 0x30
   905  000031                     	ds	1
   906  000032                     disk_ioctl@csize:
   907                           	opt callstack 0
   908  000032                     move_window@sector:
   909                           	opt callstack 0
   910                           
   911                           ; 4 bytes @ 0x31
   912  000032                     	ds	4
   913  000036                     disk_ioctl@res:
   914                           	opt callstack 0
   915                           
   916                           ; 1 bytes @ 0x35
   917  000036                     	ds	1
   918  000037                     disk_ioctl@n:
   919                           	opt callstack 0
   920                           
   921                           ; 1 bytes @ 0x36
   922  000037                     	ds	1
   923  000038                     disk_ioctl@ptr:
   924                           	opt callstack 0
   925                           
   926                           ; 2 bytes @ 0x37
   927  000038                     	ds	2
   928  00003A                     move_window@res:
   929                           	opt callstack 0
   930  00003A                     sync_fs@fs:
   931                           	opt callstack 0
   932                           
   933                           ; 2 bytes @ 0x39
   934  00003A                     	ds	1
   935  00003B                     ?_get_fat:
   936                           	opt callstack 0
   937  00003B                     get_fat@fs:
   938                           	opt callstack 0
   939  00003B                     put_fat@fs:
   940                           	opt callstack 0
   941  00003B                     check_fs@fs:
   942                           	opt callstack 0
   943                           
   944                           ; 2 bytes @ 0x3A
   945  00003B                     	ds	1
   946  00003C                     ??_sync_fs:
   947                           
   948                           ; 1 bytes @ 0x3B
   949  00003C                     	ds	1
   950  00003D                     get_fat@clst:
   951                           	opt callstack 0
   952  00003D                     put_fat@clst:
   953                           	opt callstack 0
   954  00003D                     check_fs@sect:
   955                           	opt callstack 0
   956                           
   957                           ; 4 bytes @ 0x3C
   958  00003D                     	ds	4
   959  000041                     ??_get_fat:
   960  000041                     ??_check_fs:
   961  000041                     put_fat@val:
   962                           	opt callstack 0
   963                           
   964                           ; 4 bytes @ 0x40
   965  000041                     	ds	3
   966  000044                     sync_fs@res:
   967                           	opt callstack 0
   968                           
   969                           ; 1 bytes @ 0x43
   970  000044                     	ds	1
   971  000045                     ??_put_fat:
   972  000045                     find_volume@rfs:
   973                           	opt callstack 0
   974  000045                     f_sync@fp:
   975                           	opt callstack 0
   976                           
   977                           ; 2 bytes @ 0x44
   978  000045                     	ds	2
   979  000047                     find_volume@path:
   980                           	opt callstack 0
   981                           
   982                           ; 2 bytes @ 0x46
   983  000047                     	ds	2
   984  000049                     find_volume@wmode:
   985                           	opt callstack 0
   986                           
   987                           ; 1 bytes @ 0x48
   988  000049                     	ds	1
   989  00004A                     ??_find_volume:
   990  00004A                     _get_fat$566:
   991                           	opt callstack 0
   992                           
   993                           ; 2 bytes @ 0x49
   994  00004A                     	ds	1
   995  00004B                     f_sync@res:
   996                           	opt callstack 0
   997                           
   998                           ; 1 bytes @ 0x4A
   999  00004B                     	ds	1
  1000  00004C                     f_sync@dir:
  1001                           	opt callstack 0
  1002  00004C                     get_fat@val:
  1003                           	opt callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x4B
  1006  00004C                     	ds	1
  1007  00004D                     _put_fat$592:
  1008                           	opt callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x4C
  1011  00004D                     	ds	1
  1012  00004E                     f_close@fp:
  1013                           	opt callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x4D
  1016  00004E                     	ds	1
  1017  00004F                     _put_fat$593:
  1018                           	opt callstack 0
  1019                           
  1020                           ; 2 bytes @ 0x4E
  1021  00004F                     	ds	1
  1022  000050                     f_close@res:
  1023                           	opt callstack 0
  1024  000050                     get_fat@wc:
  1025                           	opt callstack 0
  1026                           
  1027                           ; 2 bytes @ 0x4F
  1028  000050                     	ds	1
  1029  000051                     put_fat@bc:
  1030                           	opt callstack 0
  1031                           
  1032                           ; 2 bytes @ 0x50
  1033  000051                     	ds	1
  1034  000052                     get_fat@p:
  1035                           	opt callstack 0
  1036  000052                     f_mount@fs:
  1037                           	opt callstack 0
  1038                           
  1039                           ; 2 bytes @ 0x51
  1040  000052                     	ds	1
  1041  000053                     put_fat@res:
  1042                           	opt callstack 0
  1043                           
  1044                           ; 1 bytes @ 0x52
  1045  000053                     	ds	1
  1046  000054                     get_fat@bc:
  1047                           	opt callstack 0
  1048  000054                     put_fat@p:
  1049                           	opt callstack 0
  1050  000054                     f_mount@path:
  1051                           	opt callstack 0
  1052                           
  1053                           ; 2 bytes @ 0x53
  1054  000054                     	ds	2
  1055  000056                     ?_create_chain:
  1056                           	opt callstack 0
  1057  000056                     f_mount@opt:
  1058                           	opt callstack 0
  1059  000056                     remove_chain@fs:
  1060                           	opt callstack 0
  1061  000056                     create_chain@fs:
  1062                           	opt callstack 0
  1063  000056                     dir_sdi@dp:
  1064                           	opt callstack 0
  1065                           
  1066                           ; 2 bytes @ 0x55
  1067  000056                     	ds	1
  1068  000057                     f_mount@res:
  1069                           	opt callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x56
  1072  000057                     	ds	1
  1073  000058                     dir_sdi@idx:
  1074                           	opt callstack 0
  1075  000058                     f_mount@cfs:
  1076                           	opt callstack 0
  1077  000058                     remove_chain@clst:
  1078                           	opt callstack 0
  1079  000058                     create_chain@clst:
  1080                           	opt callstack 0
  1081                           
  1082                           ; 4 bytes @ 0x57
  1083  000058                     	ds	2
  1084  00005A                     f_mount@rp:
  1085                           	opt callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x59
  1088  00005A                     	ds	2
  1089  00005C                     f_mount@vol:
  1090                           	opt callstack 0
  1091                           
  1092                           ; 2 bytes @ 0x5B
  1093  00005C                     	ds	4
  1094  000060                     
  1095                           ; 1 bytes @ 0x5F
  1096 ;;
  1097 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1098 ;;
  1099 ;; *************** function _main *****************
  1100 ;; Defined at:
  1101 ;;		line 61 in file "Main.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;		None
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1115 ;;      Params:         0       0       0       0       0       0       0       0       0
  1116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1118 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1119 ;;Total ram usage:        0 bytes
  1120 ;; Hardware stack levels required when called:   15
  1121 ;; This function calls:
  1122 ;;		_Error
  1123 ;;		___delay_sec
  1124 ;;		_guardar
  1125 ;; This function is called by:
  1126 ;;		Startup code after reset
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text0
  1131  005512                     __ptext0:
  1132                           	opt callstack 0
  1133  005512                     _main:
  1134                           	opt callstack 16
  1135                           
  1136                           ;Main.c: 64:     LATA = 0x00;
  1137                           
  1138                           ;incstack = 0
  1139  005512  0E00               	movlw	0
  1140  005514  6E89               	movwf	3977,c	;volatile
  1141                           
  1142                           ;Main.c: 65:     TRISA = 0x00;
  1143  005516  0E00               	movlw	0
  1144  005518  6E92               	movwf	3986,c	;volatile
  1145                           
  1146                           ;Main.c: 66:     ANSELA = 0x00;
  1147  00551A  0E00               	movlw	0
  1148  00551C  010F               	movlb	15	; () banked
  1149  00551E  6F5B               	movwf	91,b	;volatile
  1150                           
  1151                           ; BSR set to: 15
  1152                           ;Main.c: 68:     guardar();
  1153  005520  EC95  F021         	call	_guardar	;wreg free
  1154  005524                     l6392:
  1155                           
  1156                           ;Main.c: 71:     {;Main.c: 72:         Error(1);
  1157  005524  0E01               	movlw	1
  1158  005526  EC33  F025         	call	_Error
  1159                           
  1160                           ;Main.c: 73:         __delay_sec(5);
  1161  00552A  0E05               	movlw	5
  1162  00552C  EC51  F02A         	call	___delay_sec
  1163                           
  1164                           ;Main.c: 74:         Error(15);
  1165  005530  0E0F               	movlw	15
  1166  005532  EC33  F025         	call	_Error
  1167                           
  1168                           ;Main.c: 75:         __delay_sec(2);
  1169  005536  0E02               	movlw	2
  1170  005538  EC51  F02A         	call	___delay_sec
  1171  00553C  D7F3               	goto	l6392
  1172  00553E                     __end_of_main:
  1173                           	opt callstack 0
  1174                           
  1175 ;; *************** function _guardar *****************
  1176 ;; Defined at:
  1177 ;;		line 15 in file "Main.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  bw              2  112[BANK0 ] unsigned short 
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1191 ;;      Params:         0       0       0       0       0       0       0       0       0
  1192 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1193 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1194 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1195 ;;Total ram usage:        2 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:   14
  1198 ;; This function calls:
  1199 ;;		_Error
  1200 ;;		_SYSTEM_Initialize
  1201 ;;		___delay_sec
  1202 ;;		_f_close
  1203 ;;		_f_lseek
  1204 ;;		_f_mount
  1205 ;;		_f_open
  1206 ;;		_f_write
  1207 ;; This function is called by:
  1208 ;;		_main
  1209 ;; This function uses a non-reentrant model
  1210 ;;
  1211                           
  1212                           	psect	text1
  1213  00432A                     __ptext1:
  1214                           	opt callstack 0
  1215  00432A                     _guardar:
  1216                           	opt callstack 16
  1217                           
  1218                           ;Main.c: 16:     UINT bw;;Main.c: 17:     SYSTEM_Initialize();
  1219                           
  1220                           ;incstack = 0
  1221  00432A  EC0D  F02B         	call	_SYSTEM_Initialize	;wreg free
  1222                           
  1223                           ;Main.c: 18:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1224  00432E  0ED2               	movlw	low _FatFs
  1225  004330  6E52               	movwf	f_mount@fs,c
  1226  004332  0E05               	movlw	high _FatFs
  1227  004334  6E53               	movwf	f_mount@fs+1,c
  1228  004336  0E15               	movlw	low (STR_4+20)
  1229  004338  6E54               	movwf	f_mount@path,c
  1230  00433A  0E08               	movlw	high (STR_4+20)
  1231  00433C  6E55               	movwf	f_mount@path+1,c
  1232  00433E  0E01               	movlw	1
  1233  004340  6E56               	movwf	f_mount@opt,c
  1234  004342  EC2B  F027         	call	_f_mount	;wreg free
  1235  004346  0900               	iorlw	0
  1236  004348  B4D8               	btfsc	status,2,c
  1237  00434A  D018               	goto	u8670
  1238                           
  1239                           ;Main.c: 19:         Error(1);
  1240  00434C  0E01               	movlw	1
  1241  00434E  EC33  F025         	call	_Error
  1242                           
  1243                           ;Main.c: 20:         __delay_sec(2);
  1244  004352  0E02               	movlw	2
  1245  004354  EC51  F02A         	call	___delay_sec
  1246                           
  1247                           ;Main.c: 21:         Error(99);
  1248  004358  0E63               	movlw	99
  1249  00435A  EC33  F025         	call	_Error
  1250  00435E                     l6342:
  1251                           
  1252                           ;Main.c: 22:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1253  00435E  0ED2               	movlw	low _FatFs
  1254  004360  6E52               	movwf	f_mount@fs,c
  1255  004362  0E05               	movlw	high _FatFs
  1256  004364  6E53               	movwf	f_mount@fs+1,c
  1257  004366  0E15               	movlw	low (STR_4+20)
  1258  004368  6E54               	movwf	f_mount@path,c
  1259  00436A  0E08               	movlw	high (STR_4+20)
  1260  00436C  6E55               	movwf	f_mount@path+1,c
  1261  00436E  0E01               	movlw	1
  1262  004370  6E56               	movwf	f_mount@opt,c
  1263  004372  EC2B  F027         	call	_f_mount	;wreg free
  1264  004376  0900               	iorlw	0
  1265  004378  A4D8               	btfss	status,2,c
  1266  00437A  D7F1               	goto	l6342
  1267  00437C                     u8670:
  1268                           
  1269                           ;Main.c: 27:     Error(2);
  1270  00437C  0E02               	movlw	2
  1271  00437E  EC33  F025         	call	_Error
  1272                           
  1273                           ;Main.c: 28:     __delay_sec(2);
  1274  004382  0E02               	movlw	2
  1275  004384  EC51  F02A         	call	___delay_sec
  1276                           
  1277                           ;Main.c: 29:     Error(99);
  1278  004388  0E63               	movlw	99
  1279  00438A  EC33  F025         	call	_Error
  1280                           
  1281                           ;Main.c: 31:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1282  00438E  0ED7               	movlw	low _Fil
  1283  004390  0100               	movlb	0	; () banked
  1284  004392  6F9A               	movwf	f_open@fp& (0+255),b
  1285  004394  0E00               	movlw	high _Fil
  1286  004396  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1287  004398  0E25               	movlw	low STR_3
  1288  00439A  6F9C               	movwf	f_open@path& (0+255),b
  1289  00439C  0E08               	movlw	high STR_3
  1290  00439E  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1291  0043A0  0E13               	movlw	19
  1292  0043A2  6F9E               	movwf	f_open@mode& (0+255),b
  1293  0043A4  ECE1  F017         	call	_f_open	;wreg free
  1294  0043A8  0900               	iorlw	0
  1295  0043AA  A4D8               	btfss	status,2,c
  1296  0043AC  D05C               	goto	l6386
  1297                           
  1298                           ;Main.c: 32:         Error(3);
  1299  0043AE  0E03               	movlw	3
  1300  0043B0  EC33  F025         	call	_Error
  1301                           
  1302                           ;Main.c: 35:         __delay_sec(2);
  1303  0043B4  0E02               	movlw	2
  1304  0043B6  EC51  F02A         	call	___delay_sec
  1305                           
  1306                           ;Main.c: 36:          Error(99);
  1307  0043BA  0E63               	movlw	99
  1308  0043BC  EC33  F025         	call	_Error
  1309                           
  1310                           ;Main.c: 38:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1311  0043C0  0100               	movlb	0	; () banked
  1312  0043C2  51E1               	movf	(_Fil+10)& (0+255),w,b
  1313  0043C4  11E2               	iorwf	(_Fil+11)& (0+255),w,b
  1314  0043C6  11E3               	iorwf	(_Fil+12)& (0+255),w,b
  1315  0043C8  11E4               	iorwf	(_Fil+13)& (0+255),w,b
  1316  0043CA  B4D8               	btfsc	status,2,c
  1317  0043CC  D011               	goto	l6364
  1318                           
  1319                           ; BSR set to: 0
  1320  0043CE  0ED7               	movlw	low _Fil
  1321  0043D0  6F6D               	movwf	f_lseek@fp& (0+255),b
  1322  0043D2  0E00               	movlw	high _Fil
  1323  0043D4  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1324  0043D6  C0E1  F06F         	movff	_Fil+10,f_lseek@ofs
  1325  0043DA  C0E2  F070         	movff	_Fil+11,f_lseek@ofs+1
  1326  0043DE  C0E3  F071         	movff	_Fil+12,f_lseek@ofs+2
  1327  0043E2  C0E4  F072         	movff	_Fil+13,f_lseek@ofs+3
  1328  0043E6  ECA2  F00C         	call	_f_lseek	;wreg free
  1329  0043EA  0900               	iorlw	0
  1330  0043EC  A4D8               	btfss	status,2,c
  1331  0043EE  D025               	goto	l6378
  1332  0043F0                     l6364:
  1333                           
  1334                           ;Main.c: 39:                 Error(4);
  1335  0043F0  0E04               	movlw	4
  1336  0043F2  EC33  F025         	call	_Error
  1337                           
  1338                           ;Main.c: 40:                 __delay_sec(2);
  1339  0043F6  0E02               	movlw	2
  1340  0043F8  EC51  F02A         	call	___delay_sec
  1341                           
  1342                           ;Main.c: 42:                 Error(99);
  1343  0043FC  0E63               	movlw	99
  1344  0043FE  EC33  F025         	call	_Error
  1345                           
  1346                           ;Main.c: 43:                 f_write(&Fil, "CREADO POR MI :V .\r\n", 46, &bw);
  1347  004402  0ED7               	movlw	low _Fil
  1348  004404  0100               	movlb	0	; () banked
  1349  004406  6F6D               	movwf	f_write@fp& (0+255),b
  1350  004408  0E00               	movlw	high _Fil
  1351  00440A  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1352  00440C  0E01               	movlw	low STR_4
  1353  00440E  6F6F               	movwf	f_write@buff& (0+255),b
  1354  004410  0E08               	movlw	high STR_4
  1355  004412  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1356  004414  0E00               	movlw	0
  1357  004416  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1358  004418  0E2E               	movlw	46
  1359  00441A  6F71               	movwf	f_write@btw& (0+255),b
  1360  00441C  0ED0               	movlw	low guardar@bw
  1361  00441E  6F73               	movwf	f_write@bw& (0+255),b
  1362  004420  0E00               	movlw	high guardar@bw
  1363  004422  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1364  004424  ECF0  F008         	call	_f_write	;wreg free
  1365                           
  1366                           ;Main.c: 44:                 Error(5);
  1367  004428  0E05               	movlw	5
  1368  00442A  EC33  F025         	call	_Error
  1369                           
  1370                           ;Main.c: 45:                 __delay_sec(2);
  1371  00442E  0E02               	movlw	2
  1372  004430  EC51  F02A         	call	___delay_sec
  1373                           
  1374                           ;Main.c: 46:                  Error(99);
  1375  004434  0E63               	movlw	99
  1376  004436  EC33  F025         	call	_Error
  1377  00443A                     l6378:
  1378  00443A  0ED7               	movlw	low _Fil
  1379  00443C  6E4E               	movwf	f_close@fp,c
  1380  00443E  0E00               	movlw	high _Fil
  1381  004440  6E4F               	movwf	f_close@fp+1,c
  1382  004442  EC34  F02A         	call	_f_close	;wreg free
  1383                           
  1384                           ;Main.c: 48:                 Error(6);
  1385  004446  0E06               	movlw	6
  1386  004448  EC33  F025         	call	_Error
  1387                           
  1388                           ;Main.c: 49:                 __delay_sec(1);
  1389  00444C  0E01               	movlw	1
  1390  00444E  EC51  F02A         	call	___delay_sec
  1391                           
  1392                           ;Main.c: 51:                 Error(7);
  1393  004452  0E07               	movlw	7
  1394  004454  EC33  F025         	call	_Error
  1395                           
  1396                           ;Main.c: 52:                 __delay_sec(2);
  1397  004458  0E02               	movlw	2
  1398  00445A  EC51  F02A         	call	___delay_sec
  1399                           
  1400                           ;Main.c: 53:                  Error(99);
  1401  00445E  0E63               	movlw	99
  1402  004460  EC33  F025         	call	_Error
  1403                           
  1404                           ;Main.c: 55:  }
  1405  004464  0012               	return	
  1406  004466                     l6386:
  1407                           
  1408                           ;Main.c: 57:         Error(11);
  1409  004466  0E0B               	movlw	11
  1410  004468  EC33  F025         	call	_Error
  1411  00446C  0012               	return		;funcret
  1412  00446E                     __end_of_guardar:
  1413                           	opt callstack 0
  1414                           
  1415 ;; *************** function _f_write *****************
  1416 ;; Defined at:
  1417 ;;		line 2691 in file "ff.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  fp              2   13[BANK0 ] PTR struct .
  1420 ;;		 -> Fil(32), 
  1421 ;;  buff            2   15[BANK0 ] PTR const void 
  1422 ;;		 -> STR_4(21), 
  1423 ;;  btw             2   17[BANK0 ] unsigned short 
  1424 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1425 ;;		 -> guardar@bw(2), 
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;  clst            4   43[BANK0 ] unsigned long 
  1428 ;;  sect            4   39[BANK0 ] unsigned long 
  1429 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1430 ;;  cc              2   37[BANK0 ] unsigned short 
  1431 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1432 ;;		 -> STR_4(21), 
  1433 ;;  csect           1   36[BANK0 ] unsigned char 
  1434 ;;  res             1   33[BANK0 ] enum E93
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      enum E4918
  1437 ;; Registers used:
  1438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1444 ;;      Params:         0       8       0       0       0       0       0       0       0
  1445 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1446 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1447 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1448 ;;Total ram usage:       36 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:   10
  1451 ;; This function calls:
  1452 ;;		_clust2sect
  1453 ;;		_create_chain
  1454 ;;		_disk_write
  1455 ;;		_mem_cpy
  1456 ;;		_move_window
  1457 ;;		_sync_window
  1458 ;;		_validate
  1459 ;; This function is called by:
  1460 ;;		_guardar
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text2
  1465  0011E0                     __ptext2:
  1466                           	opt callstack 0
  1467  0011E0                     _f_write:
  1468                           	opt callstack 19
  1469                           
  1470                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1471                           
  1472                           ;incstack = 0
  1473  0011E0  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1474  0011E4  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1475                           
  1476                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1477  0011E8  C073  FFD9         	movff	f_write@bw,fsr2l
  1478  0011EC  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1479  0011F0  0E00               	movlw	0
  1480  0011F2  6EDE               	movwf	postinc2,c
  1481  0011F4  0E00               	movlw	0
  1482  0011F6  6EDD               	movwf	postdec2,c
  1483                           
  1484                           ;ff.c: 2707:  res = validate(fp);
  1485  0011F8  C06D  F002         	movff	f_write@fp,validate@obj
  1486  0011FC  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1487  001200  ECD6  F027         	call	_validate	;wreg free
  1488  001204  0100               	movlb	0	; () banked
  1489  001206  6F81               	movwf	f_write@res& (0+255),b
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1493  001208  5181               	movf	f_write@res& (0+255),w,b
  1494  00120A  A4D8               	btfss	status,2,c
  1495  00120C  0012               	return	
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;ff.c: 2709:  if (fp->err)
  1499  00120E  EE20 F005          	lfsr	2,5
  1500  001212  516D               	movf	f_write@fp& (0+255),w,b
  1501  001214  26D9               	addwf	fsr2l,f,c
  1502  001216  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1503  001218  22DA               	addwfc	fsr2h,f,c
  1504  00121A  50DF               	movf	indf2,w,c
  1505  00121C  A4D8               	btfss	status,2,c
  1506  00121E  0012               	return	
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1510  001220  EE20 F004          	lfsr	2,4
  1511  001224  516D               	movf	f_write@fp& (0+255),w,b
  1512  001226  26D9               	addwf	fsr2l,f,c
  1513  001228  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1514  00122A  22DA               	addwfc	fsr2h,f,c
  1515  00122C  A2DF               	btfss	indf2,1,c
  1516  00122E  0012               	return	
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1520  001230  EE20 F006          	lfsr	2,6
  1521  001234  516D               	movf	f_write@fp& (0+255),w,b
  1522  001236  26D9               	addwf	fsr2l,f,c
  1523  001238  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1524  00123A  22DA               	addwfc	fsr2h,f,c
  1525  00123C  EE10 F006          	lfsr	1,6
  1526  001240  516D               	movf	f_write@fp& (0+255),w,b
  1527  001242  26E1               	addwf	fsr1l,f,c
  1528  001244  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1529  001246  22E2               	addwfc	fsr1h,f,c
  1530  001248  CFE6 F079          	movff	postinc1,??_f_write+4
  1531  00124C  CFE6 F07A          	movff	postinc1,??_f_write+5
  1532  001250  CFE6 F07B          	movff	postinc1,??_f_write+6
  1533  001254  CFE6 F07C          	movff	postinc1,??_f_write+7
  1534  001258  5171               	movf	f_write@btw& (0+255),w,b
  1535  00125A  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1536  00125C  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1537  00125E  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1538  001260  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1539  001262  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1540  001264  0E00               	movlw	0
  1541  001266  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1542  001268  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1543  00126A  0E00               	movlw	0
  1544  00126C  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1545  00126E  6F80               	movwf	(??_f_write+11)& (0+255),b
  1546  001270  50DE               	movf	postinc2,w,c
  1547  001272  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1548  001274  50DE               	movf	postinc2,w,c
  1549  001276  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1550  001278  50DE               	movf	postinc2,w,c
  1551  00127A  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1552  00127C  50DE               	movf	postinc2,w,c
  1553  00127E  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1554  001280  B0D8               	btfsc	status,0,c
  1555  001282  D329               	goto	l6310
  1556                           
  1557                           ; BSR set to: 0
  1558  001284  0E00               	movlw	0
  1559  001286  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1560  001288  0E00               	movlw	0
  1561  00128A  6F71               	movwf	f_write@btw& (0+255),b
  1562  00128C  D324               	goto	l6310
  1563  00128E                     l6202:
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1567  00128E  EE20 F006          	lfsr	2,6
  1568  001292  516D               	movf	f_write@fp& (0+255),w,b
  1569  001294  26D9               	addwf	fsr2l,f,c
  1570  001296  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1571  001298  22DA               	addwfc	fsr2h,f,c
  1572  00129A  0EFF               	movlw	255
  1573  00129C  14DE               	andwf	postinc2,w,c
  1574  00129E  6F75               	movwf	??_f_write& (0+255),b
  1575  0012A0  0E01               	movlw	1
  1576  0012A2  14DE               	andwf	postinc2,w,c
  1577  0012A4  6F76               	movwf	(??_f_write+1)& (0+255),b
  1578  0012A6  0E00               	movlw	0
  1579  0012A8  14DE               	andwf	postinc2,w,c
  1580  0012AA  6F77               	movwf	(??_f_write+2)& (0+255),b
  1581  0012AC  0E00               	movlw	0
  1582  0012AE  14DE               	andwf	postinc2,w,c
  1583  0012B0  6F78               	movwf	(??_f_write+3)& (0+255),b
  1584  0012B2  5175               	movf	??_f_write& (0+255),w,b
  1585  0012B4  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1586  0012B6  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1587  0012B8  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1588  0012BA  A4D8               	btfss	status,2,c
  1589  0012BC  D26A               	goto	l6286
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1593  0012BE  EE20 F006          	lfsr	2,6
  1594  0012C2  516D               	movf	f_write@fp& (0+255),w,b
  1595  0012C4  26D9               	addwf	fsr2l,f,c
  1596  0012C6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1597  0012C8  22DA               	addwfc	fsr2h,f,c
  1598  0012CA  CFDE F075          	movff	postinc2,??_f_write
  1599  0012CE  CFDE F076          	movff	postinc2,??_f_write+1
  1600  0012D2  CFDE F077          	movff	postinc2,??_f_write+2
  1601  0012D6  CFDE F078          	movff	postinc2,??_f_write+3
  1602  0012DA  0E0A               	movlw	10
  1603  0012DC  D005               	goto	u8400
  1604  0012DE                     u8405:
  1605  0012DE  90D8               	bcf	status,0,c
  1606  0012E0  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1607  0012E2  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1608  0012E4  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1609  0012E6  3375               	rrcf	??_f_write& (0+255),f,b
  1610  0012E8                     u8400:
  1611  0012E8  2EE8               	decfsz	wreg,f,c
  1612  0012EA  D7F9               	goto	u8405
  1613  0012EC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1614  0012F0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1615  0012F4  EE10 F002          	lfsr	1,2
  1616  0012F8  50DE               	movf	postinc2,w,c
  1617  0012FA  26E1               	addwf	fsr1l,f,c
  1618  0012FC  50DD               	movf	postdec2,w,c
  1619  0012FE  22E2               	addwfc	fsr1h,f,c
  1620  001300  50E7               	movf	indf1,w,c
  1621  001302  6F79               	movwf	(??_f_write+4)& (0+255),b
  1622  001304  0579               	decf	(??_f_write+4)& (0+255),w,b
  1623  001306  1575               	andwf	??_f_write& (0+255),w,b
  1624  001308  6F84               	movwf	f_write@csect& (0+255),b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;ff.c: 2719:    if (!csect) {
  1628  00130A  5184               	movf	f_write@csect& (0+255),w,b
  1629  00130C  A4D8               	btfss	status,2,c
  1630  00130E  D0A3               	goto	l6238
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1634  001310  EE20 F006          	lfsr	2,6
  1635  001314  516D               	movf	f_write@fp& (0+255),w,b
  1636  001316  26D9               	addwf	fsr2l,f,c
  1637  001318  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1638  00131A  22DA               	addwfc	fsr2h,f,c
  1639  00131C  50DE               	movf	postinc2,w,c
  1640  00131E  10DE               	iorwf	postinc2,w,c
  1641  001320  10DE               	iorwf	postinc2,w,c
  1642  001322  10DE               	iorwf	postinc2,w,c
  1643  001324  A4D8               	btfss	status,2,c
  1644  001326  D027               	goto	l6216
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;ff.c: 2721:      clst = fp->sclust;
  1648  001328  EE20 F00E          	lfsr	2,14
  1649  00132C  516D               	movf	f_write@fp& (0+255),w,b
  1650  00132E  26D9               	addwf	fsr2l,f,c
  1651  001330  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1652  001332  22DA               	addwfc	fsr2h,f,c
  1653  001334  CFDE F08B          	movff	postinc2,f_write@clst
  1654  001338  CFDE F08C          	movff	postinc2,f_write@clst+1
  1655  00133C  CFDE F08D          	movff	postinc2,f_write@clst+2
  1656  001340  CFDE F08E          	movff	postinc2,f_write@clst+3
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;ff.c: 2722:      if (clst == 0)
  1660  001344  518B               	movf	f_write@clst& (0+255),w,b
  1661  001346  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1662  001348  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1663  00134A  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1664  00134C  A4D8               	btfss	status,2,c
  1665  00134E  D033               	goto	l6218
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1669  001350  C06D  FFD9         	movff	f_write@fp,fsr2l
  1670  001354  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1671  001358  CFDE F056          	movff	postinc2,create_chain@fs
  1672  00135C  CFDD F057          	movff	postdec2,create_chain@fs+1
  1673  001360  0E00               	movlw	0
  1674  001362  6E58               	movwf	create_chain@clst,c
  1675  001364  0E00               	movlw	0
  1676  001366  6E59               	movwf	create_chain@clst+1,c
  1677  001368  0E00               	movlw	0
  1678  00136A  6E5A               	movwf	create_chain@clst+2,c
  1679  00136C  0E00               	movlw	0
  1680  00136E  6E5B               	movwf	create_chain@clst+3,c
  1681  001370  ECAC  F019         	call	_create_chain	;wreg free
  1682  001374  D018               	goto	L1
  1683  001376                     l6216:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1687  001376  C06D  FFD9         	movff	f_write@fp,fsr2l
  1688  00137A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1689  00137E  CFDE F056          	movff	postinc2,create_chain@fs
  1690  001382  CFDD F057          	movff	postdec2,create_chain@fs+1
  1691  001386  EE20 F012          	lfsr	2,18
  1692  00138A  516D               	movf	f_write@fp& (0+255),w,b
  1693  00138C  26D9               	addwf	fsr2l,f,c
  1694  00138E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1695  001390  22DA               	addwfc	fsr2h,f,c
  1696  001392  CFDE F058          	movff	postinc2,create_chain@clst
  1697  001396  CFDE F059          	movff	postinc2,create_chain@clst+1
  1698  00139A  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1699  00139E  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1700  0013A2  ECAC  F019         	call	_create_chain	;wreg free
  1701  0013A6                     L1:
  1702  0013A6  C056  F08B         	movff	?_create_chain,f_write@clst
  1703  0013AA  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1704  0013AE  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1705  0013B2  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1706  0013B6                     l6218:
  1707                           
  1708                           ;ff.c: 2732:     if (clst == 0) break;
  1709  0013B6  0100               	movlb	0	; () banked
  1710  0013B8  518B               	movf	f_write@clst& (0+255),w,b
  1711  0013BA  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1712  0013BC  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1713  0013BE  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1714  0013C0  B4D8               	btfsc	status,2,c
  1715  0013C2  D28D               	goto	u8620
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1719  0013C4  058B               	decf	f_write@clst& (0+255),w,b
  1720  0013C6  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1721  0013C8  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1722  0013CA  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1723  0013CC  A4D8               	btfss	status,2,c
  1724  0013CE  D009               	goto	l6228
  1725                           
  1726                           ; BSR set to: 0
  1727  0013D0  EE20 F005          	lfsr	2,5
  1728  0013D4  516D               	movf	f_write@fp& (0+255),w,b
  1729  0013D6  26D9               	addwf	fsr2l,f,c
  1730  0013D8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1731  0013DA  22DA               	addwfc	fsr2h,f,c
  1732  0013DC  0E02               	movlw	2
  1733  0013DE  6EDF               	movwf	indf2,c
  1734  0013E0  0012               	return	
  1735  0013E2                     l6228:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1739  0013E2  298B               	incf	f_write@clst& (0+255),w,b
  1740  0013E4  E110               	bnz	l6234
  1741  0013E6  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1742  0013E8  E10E               	bnz	l6234
  1743  0013EA  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1744  0013EC  E10C               	bnz	l6234
  1745  0013EE  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1746  0013F0  A4D8               	btfss	status,2,c
  1747  0013F2  D009               	goto	l6234
  1748                           
  1749                           ; BSR set to: 0
  1750  0013F4  EE20 F005          	lfsr	2,5
  1751  0013F8  516D               	movf	f_write@fp& (0+255),w,b
  1752  0013FA  26D9               	addwf	fsr2l,f,c
  1753  0013FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1754  0013FE  22DA               	addwfc	fsr2h,f,c
  1755  001400  0E01               	movlw	1
  1756  001402  6EDF               	movwf	indf2,c
  1757  001404  0012               	return	
  1758  001406                     l6234:
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;ff.c: 2735:     fp->clust = clst;
  1762  001406  EE20 F012          	lfsr	2,18
  1763  00140A  516D               	movf	f_write@fp& (0+255),w,b
  1764  00140C  26D9               	addwf	fsr2l,f,c
  1765  00140E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1766  001410  22DA               	addwfc	fsr2h,f,c
  1767  001412  C08B  FFDE         	movff	f_write@clst,postinc2
  1768  001416  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1769  00141A  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1770  00141E  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1771                           
  1772                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1773  001422  EE20 F00E          	lfsr	2,14
  1774  001426  516D               	movf	f_write@fp& (0+255),w,b
  1775  001428  26D9               	addwf	fsr2l,f,c
  1776  00142A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1777  00142C  22DA               	addwfc	fsr2h,f,c
  1778  00142E  50DE               	movf	postinc2,w,c
  1779  001430  10DE               	iorwf	postinc2,w,c
  1780  001432  10DE               	iorwf	postinc2,w,c
  1781  001434  10DE               	iorwf	postinc2,w,c
  1782  001436  A4D8               	btfss	status,2,c
  1783  001438  D00E               	goto	l6238
  1784                           
  1785                           ; BSR set to: 0
  1786  00143A  EE20 F00E          	lfsr	2,14
  1787  00143E  516D               	movf	f_write@fp& (0+255),w,b
  1788  001440  26D9               	addwf	fsr2l,f,c
  1789  001442  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1790  001444  22DA               	addwfc	fsr2h,f,c
  1791  001446  C08B  FFDE         	movff	f_write@clst,postinc2
  1792  00144A  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1793  00144E  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1794  001452  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1795  001456                     l6238:
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1799  001456  EE20 F016          	lfsr	2,22
  1800  00145A  516D               	movf	f_write@fp& (0+255),w,b
  1801  00145C  26D9               	addwf	fsr2l,f,c
  1802  00145E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1803  001460  22DA               	addwfc	fsr2h,f,c
  1804  001462  C06D  FFE1         	movff	f_write@fp,fsr1l
  1805  001466  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1806  00146A  EE00 F02A          	lfsr	0,42
  1807  00146E  50E6               	movf	postinc1,w,c
  1808  001470  26E9               	addwf	fsr0l,f,c
  1809  001472  50E5               	movf	postdec1,w,c
  1810  001474  22EA               	addwfc	fsr0h,f,c
  1811  001476  50DE               	movf	postinc2,w,c
  1812  001478  18EE               	xorwf	postinc0,w,c
  1813  00147A  E121               	bnz	l6246
  1814  00147C  50DE               	movf	postinc2,w,c
  1815  00147E  18EE               	xorwf	postinc0,w,c
  1816  001480  E11E               	bnz	l6246
  1817  001482  50DE               	movf	postinc2,w,c
  1818  001484  18EE               	xorwf	postinc0,w,c
  1819  001486  E11B               	bnz	l6246
  1820  001488  50DE               	movf	postinc2,w,c
  1821  00148A  18EE               	xorwf	postinc0,w,c
  1822  00148C  A4D8               	btfss	status,2,c
  1823  00148E  D017               	goto	l6246
  1824                           
  1825                           ; BSR set to: 0
  1826  001490  C06D  FFD9         	movff	f_write@fp,fsr2l
  1827  001494  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1828  001498  CFDE F01B          	movff	postinc2,sync_window@fs
  1829  00149C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1830  0014A0  ECA1  F01F         	call	_sync_window	;wreg free
  1831  0014A4  0900               	iorlw	0
  1832  0014A6  B4D8               	btfsc	status,2,c
  1833  0014A8  D00A               	goto	l6246
  1834                           
  1835                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1836  0014AA  0100               	movlb	0	; () banked
  1837  0014AC  EE20 F005          	lfsr	2,5
  1838  0014B0  516D               	movf	f_write@fp& (0+255),w,b
  1839  0014B2  26D9               	addwf	fsr2l,f,c
  1840  0014B4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1841  0014B6  22DA               	addwfc	fsr2h,f,c
  1842  0014B8  0E01               	movlw	1
  1843  0014BA  6EDF               	movwf	indf2,c
  1844  0014BC  0012               	return	
  1845  0014BE                     l6246:
  1846                           
  1847                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1848  0014BE  C06D  FFD9         	movff	f_write@fp,fsr2l
  1849  0014C2  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1850  0014C6  CFDE F00D          	movff	postinc2,clust2sect@fs
  1851  0014CA  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1852  0014CE  0100               	movlb	0	; () banked
  1853  0014D0  EE20 F012          	lfsr	2,18
  1854  0014D4  516D               	movf	f_write@fp& (0+255),w,b
  1855  0014D6  26D9               	addwf	fsr2l,f,c
  1856  0014D8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1857  0014DA  22DA               	addwfc	fsr2h,f,c
  1858  0014DC  CFDE F00F          	movff	postinc2,clust2sect@clst
  1859  0014E0  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1860  0014E4  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1861  0014E8  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1862  0014EC  ECCE  F026         	call	_clust2sect	;wreg free
  1863  0014F0  C00D  F087         	movff	?_clust2sect,f_write@sect
  1864  0014F4  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1865  0014F8  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1866  0014FC  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1867                           
  1868                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1869  001500  0100               	movlb	0	; () banked
  1870  001502  5187               	movf	f_write@sect& (0+255),w,b
  1871  001504  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1872  001506  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1873  001508  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1874  00150A  A4D8               	btfss	status,2,c
  1875  00150C  D009               	goto	l6254
  1876                           
  1877                           ; BSR set to: 0
  1878  00150E  EE20 F005          	lfsr	2,5
  1879  001512  516D               	movf	f_write@fp& (0+255),w,b
  1880  001514  26D9               	addwf	fsr2l,f,c
  1881  001516  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1882  001518  22DA               	addwfc	fsr2h,f,c
  1883  00151A  0E02               	movlw	2
  1884  00151C  6EDF               	movwf	indf2,c
  1885  00151E  0012               	return	
  1886  001520                     l6254:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;ff.c: 2750:    sect += csect;
  1890  001520  5184               	movf	f_write@csect& (0+255),w,b
  1891  001522  2787               	addwf	f_write@sect& (0+255),f,b
  1892  001524  0E00               	movlw	0
  1893  001526  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1894  001528  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1895  00152A  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1896                           
  1897                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1898  00152C  C071  F075         	movff	f_write@btw,??_f_write
  1899  001530  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1900  001534  0E09               	movlw	9
  1901  001536  6F77               	movwf	(??_f_write+2)& (0+255),b
  1902  001538                     u8515:
  1903  001538  90D8               	bcf	status,0,c
  1904  00153A  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1905  00153C  3375               	rrcf	??_f_write& (0+255),f,b
  1906  00153E  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1907  001540  D7FB               	goto	u8515
  1908  001542  C075  F085         	movff	??_f_write,f_write@cc
  1909  001546  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1910                           
  1911                           ;ff.c: 2752:    if (cc) {
  1912  00154A  5185               	movf	f_write@cc& (0+255),w,b
  1913  00154C  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1914  00154E  B4D8               	btfsc	status,2,c
  1915  001550  D0D2               	goto	l6274
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1919  001552  5184               	movf	f_write@csect& (0+255),w,b
  1920  001554  2585               	addwf	f_write@cc& (0+255),w,b
  1921  001556  6F75               	movwf	??_f_write& (0+255),b
  1922  001558  0E00               	movlw	0
  1923  00155A  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1924  00155C  6F76               	movwf	(??_f_write+1)& (0+255),b
  1925  00155E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1926  001562  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1927  001566  EE10 F002          	lfsr	1,2
  1928  00156A  50DE               	movf	postinc2,w,c
  1929  00156C  26E1               	addwf	fsr1l,f,c
  1930  00156E  50DD               	movf	postdec2,w,c
  1931  001570  22E2               	addwfc	fsr1h,f,c
  1932  001572  50E7               	movf	indf1,w,c
  1933  001574  6F77               	movwf	(??_f_write+2)& (0+255),b
  1934  001576  6B78               	clrf	(??_f_write+3)& (0+255),b
  1935  001578  5175               	movf	??_f_write& (0+255),w,b
  1936  00157A  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1937  00157C  5176               	movf	(??_f_write+1)& (0+255),w,b
  1938  00157E  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1939  001580  B0D8               	btfsc	status,0,c
  1940  001582  D012               	goto	l6260
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  1944  001584  C06D  FFD9         	movff	f_write@fp,fsr2l
  1945  001588  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1946  00158C  EE10 F002          	lfsr	1,2
  1947  001590  50DE               	movf	postinc2,w,c
  1948  001592  26E1               	addwf	fsr1l,f,c
  1949  001594  50DD               	movf	postdec2,w,c
  1950  001596  22E2               	addwfc	fsr1h,f,c
  1951  001598  50E7               	movf	indf1,w,c
  1952  00159A  6F75               	movwf	??_f_write& (0+255),b
  1953  00159C  5184               	movf	f_write@csect& (0+255),w,b
  1954  00159E  5D75               	subwf	??_f_write& (0+255),w,b
  1955  0015A0  6F85               	movwf	f_write@cc& (0+255),b
  1956  0015A2  6B86               	clrf	(f_write@cc+1)& (0+255),b
  1957  0015A4  A0D8               	btfss	status,0,c
  1958  0015A6  0786               	decf	(f_write@cc+1)& (0+255),f,b
  1959  0015A8                     l6260:
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  1963  0015A8  C082  F011         	movff	f_write@wbuff,disk_write@buff
  1964  0015AC  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  1965  0015B0  C087  F013         	movff	f_write@sect,disk_write@sector
  1966  0015B4  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  1967  0015B8  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  1968  0015BC  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  1969  0015C0  C085  F017         	movff	f_write@cc,disk_write@count
  1970  0015C4  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  1971  0015C8  C06D  FFD9         	movff	f_write@fp,fsr2l
  1972  0015CC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1973  0015D0  EE10 F001          	lfsr	1,1
  1974  0015D4  50DE               	movf	postinc2,w,c
  1975  0015D6  26E1               	addwf	fsr1l,f,c
  1976  0015D8  50DD               	movf	postdec2,w,c
  1977  0015DA  22E2               	addwfc	fsr1h,f,c
  1978  0015DC  50E7               	movf	indf1,w,c
  1979  0015DE  ECD8  F022         	call	_disk_write
  1980  0015E2  0900               	iorlw	0
  1981  0015E4  B4D8               	btfsc	status,2,c
  1982  0015E6  D00A               	goto	l6266
  1983                           
  1984                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1985  0015E8  0100               	movlb	0	; () banked
  1986  0015EA  EE20 F005          	lfsr	2,5
  1987  0015EE  516D               	movf	f_write@fp& (0+255),w,b
  1988  0015F0  26D9               	addwf	fsr2l,f,c
  1989  0015F2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1990  0015F4  22DA               	addwfc	fsr2h,f,c
  1991  0015F6  0E01               	movlw	1
  1992  0015F8  6EDF               	movwf	indf2,c
  1993  0015FA  0012               	return	
  1994  0015FC                     l6266:
  1995                           
  1996                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  1997  0015FC  0100               	movlb	0	; () banked
  1998  0015FE  5185               	movf	f_write@cc& (0+255),w,b
  1999  001600  6F75               	movwf	??_f_write& (0+255),b
  2000  001602  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2001  001604  6F76               	movwf	(??_f_write+1)& (0+255),b
  2002  001606  6B77               	clrf	(??_f_write+2)& (0+255),b
  2003  001608  6B78               	clrf	(??_f_write+3)& (0+255),b
  2004  00160A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2005  00160E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2006  001612  EE10 F02A          	lfsr	1,42
  2007  001616  50DE               	movf	postinc2,w,c
  2008  001618  26E1               	addwf	fsr1l,f,c
  2009  00161A  50DD               	movf	postdec2,w,c
  2010  00161C  22E2               	addwfc	fsr1h,f,c
  2011  00161E  CFE6 F079          	movff	postinc1,??_f_write+4
  2012  001622  CFE6 F07A          	movff	postinc1,??_f_write+5
  2013  001626  CFE6 F07B          	movff	postinc1,??_f_write+6
  2014  00162A  CFE6 F07C          	movff	postinc1,??_f_write+7
  2015  00162E  5187               	movf	f_write@sect& (0+255),w,b
  2016  001630  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2017  001632  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2018  001634  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2019  001636  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2020  001638  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2021  00163A  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2022  00163C  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2023  00163E  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2024  001640  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2025  001642  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2026  001644  6F80               	movwf	(??_f_write+11)& (0+255),b
  2027  001646  5175               	movf	??_f_write& (0+255),w,b
  2028  001648  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2029  00164A  5176               	movf	(??_f_write+1)& (0+255),w,b
  2030  00164C  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2031  00164E  5177               	movf	(??_f_write+2)& (0+255),w,b
  2032  001650  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2033  001652  5178               	movf	(??_f_write+3)& (0+255),w,b
  2034  001654  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2035  001656  B0D8               	btfsc	status,0,c
  2036  001658  D03E               	goto	l6272
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2040  00165A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2041  00165E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2042  001662  CFDE F075          	movff	postinc2,??_f_write
  2043  001666  CFDD F076          	movff	postdec2,??_f_write+1
  2044  00166A  0E2E               	movlw	46
  2045  00166C  2575               	addwf	??_f_write& (0+255),w,b
  2046  00166E  6E01               	movwf	mem_cpy@dst,c
  2047  001670  0E00               	movlw	0
  2048  001672  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2049  001674  6E02               	movwf	mem_cpy@dst+1,c
  2050  001676  C06D  FFD9         	movff	f_write@fp,fsr2l
  2051  00167A  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2052  00167E  EE10 F02A          	lfsr	1,42
  2053  001682  50DE               	movf	postinc2,w,c
  2054  001684  26E1               	addwf	fsr1l,f,c
  2055  001686  50DD               	movf	postdec2,w,c
  2056  001688  22E2               	addwfc	fsr1h,f,c
  2057  00168A  CFE6 F077          	movff	postinc1,??_f_write+2
  2058  00168E  CFE5 F078          	movff	postdec1,??_f_write+3
  2059  001692  5187               	movf	f_write@sect& (0+255),w,b
  2060  001694  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2061  001696  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2062  001698  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2063  00169A  0E09               	movlw	9
  2064  00169C                     u8565:
  2065  00169C  90D8               	bcf	status,0,c
  2066  00169E  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2067  0016A0  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2068  0016A2  2EE8               	decfsz	wreg,f,c
  2069  0016A4  D7FB               	goto	u8565
  2070  0016A6  5177               	movf	(??_f_write+2)& (0+255),w,b
  2071  0016A8  2582               	addwf	f_write@wbuff& (0+255),w,b
  2072  0016AA  6E03               	movwf	mem_cpy@src,c
  2073  0016AC  5178               	movf	(??_f_write+3)& (0+255),w,b
  2074  0016AE  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2075  0016B0  6E04               	movwf	mem_cpy@src+1,c
  2076  0016B2  0E02               	movlw	2
  2077  0016B4  6E06               	movwf	mem_cpy@cnt+1,c
  2078  0016B6  0E00               	movlw	0
  2079  0016B8  6E05               	movwf	mem_cpy@cnt,c
  2080  0016BA  EC71  F026         	call	_mem_cpy	;wreg free
  2081                           
  2082                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2083  0016BE  C06D  FFD9         	movff	f_write@fp,fsr2l
  2084  0016C2  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2085  0016C6  EE10 F004          	lfsr	1,4
  2086  0016CA  50DE               	movf	postinc2,w,c
  2087  0016CC  26E1               	addwf	fsr1l,f,c
  2088  0016CE  50DD               	movf	postdec2,w,c
  2089  0016D0  22E2               	addwfc	fsr1h,f,c
  2090  0016D2  0E00               	movlw	0
  2091  0016D4  6EE7               	movwf	indf1,c
  2092  0016D6                     l6272:
  2093                           
  2094                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2095  0016D6  C085  F075         	movff	f_write@cc,??_f_write
  2096  0016DA  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2097  0016DE  0E09               	movlw	9
  2098  0016E0                     u8575:
  2099  0016E0  90D8               	bcf	status,0,c
  2100  0016E2  0100               	movlb	0	; () banked
  2101  0016E4  3775               	rlcf	??_f_write& (0+255),f,b
  2102  0016E6  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2103  0016E8  2EE8               	decfsz	wreg,f,c
  2104  0016EA  D7FA               	goto	u8575
  2105  0016EC  C075  F08F         	movff	??_f_write,f_write@wcnt
  2106  0016F0  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2107                           
  2108                           ;ff.c: 2771:     continue;
  2109  0016F4  D0D2               	goto	l6302
  2110  0016F6                     l6274:
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2114  0016F6  EE20 F00A          	lfsr	2,10
  2115  0016FA  516D               	movf	f_write@fp& (0+255),w,b
  2116  0016FC  26D9               	addwf	fsr2l,f,c
  2117  0016FE  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2118  001700  22DA               	addwfc	fsr2h,f,c
  2119  001702  EE10 F006          	lfsr	1,6
  2120  001706  516D               	movf	f_write@fp& (0+255),w,b
  2121  001708  26E1               	addwf	fsr1l,f,c
  2122  00170A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2123  00170C  22E2               	addwfc	fsr1h,f,c
  2124  00170E  50DE               	movf	postinc2,w,c
  2125  001710  5CE6               	subwf	postinc1,w,c
  2126  001712  50DE               	movf	postinc2,w,c
  2127  001714  58E6               	subwfb	postinc1,w,c
  2128  001716  50DE               	movf	postinc2,w,c
  2129  001718  58E6               	subwfb	postinc1,w,c
  2130  00171A  50DE               	movf	postinc2,w,c
  2131  00171C  58E6               	subwfb	postinc1,w,c
  2132  00171E  A0D8               	btfss	status,0,c
  2133  001720  D029               	goto	l6284
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2137  001722  C06D  FFD9         	movff	f_write@fp,fsr2l
  2138  001726  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2139  00172A  CFDE F01B          	movff	postinc2,sync_window@fs
  2140  00172E  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2141  001732  ECA1  F01F         	call	_sync_window	;wreg free
  2142  001736  0900               	iorlw	0
  2143  001738  B4D8               	btfsc	status,2,c
  2144  00173A  D00A               	goto	l6282
  2145  00173C  0100               	movlb	0	; () banked
  2146  00173E  EE20 F005          	lfsr	2,5
  2147  001742  516D               	movf	f_write@fp& (0+255),w,b
  2148  001744  26D9               	addwf	fsr2l,f,c
  2149  001746  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2150  001748  22DA               	addwfc	fsr2h,f,c
  2151  00174A  0E01               	movlw	1
  2152  00174C  6EDF               	movwf	indf2,c
  2153  00174E  0012               	return	
  2154  001750                     l6282:
  2155                           
  2156                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2157  001750  C06D  FFD9         	movff	f_write@fp,fsr2l
  2158  001754  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2159  001758  EE10 F02A          	lfsr	1,42
  2160  00175C  50DE               	movf	postinc2,w,c
  2161  00175E  26E1               	addwf	fsr1l,f,c
  2162  001760  50DD               	movf	postdec2,w,c
  2163  001762  22E2               	addwfc	fsr1h,f,c
  2164  001764  C087  FFE6         	movff	f_write@sect,postinc1
  2165  001768  C088  FFE6         	movff	f_write@sect+1,postinc1
  2166  00176C  C089  FFE6         	movff	f_write@sect+2,postinc1
  2167  001770  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2168  001774                     l6284:
  2169                           
  2170                           ;ff.c: 2785:    fp->dsect = sect;
  2171  001774  0100               	movlb	0	; () banked
  2172  001776  EE20 F016          	lfsr	2,22
  2173  00177A  516D               	movf	f_write@fp& (0+255),w,b
  2174  00177C  26D9               	addwf	fsr2l,f,c
  2175  00177E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2176  001780  22DA               	addwfc	fsr2h,f,c
  2177  001782  C087  FFDE         	movff	f_write@sect,postinc2
  2178  001786  C088  FFDE         	movff	f_write@sect+1,postinc2
  2179  00178A  C089  FFDE         	movff	f_write@sect+2,postinc2
  2180  00178E  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2181  001792                     l6286:
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2185  001792  0EFF               	movlw	255
  2186  001794  6F75               	movwf	??_f_write& (0+255),b
  2187  001796  0E01               	movlw	1
  2188  001798  6F76               	movwf	(??_f_write+1)& (0+255),b
  2189  00179A  EE20 F006          	lfsr	2,6
  2190  00179E  516D               	movf	f_write@fp& (0+255),w,b
  2191  0017A0  26D9               	addwf	fsr2l,f,c
  2192  0017A2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2193  0017A4  22DA               	addwfc	fsr2h,f,c
  2194  0017A6  CFDE F077          	movff	postinc2,??_f_write+2
  2195  0017AA  CFDD F078          	movff	postdec2,??_f_write+3
  2196  0017AE  5175               	movf	??_f_write& (0+255),w,b
  2197  0017B0  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2198  0017B2  5176               	movf	(??_f_write+1)& (0+255),w,b
  2199  0017B4  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2200  0017B6  5177               	movf	(??_f_write+2)& (0+255),w,b
  2201  0017B8  0800               	sublw	0
  2202  0017BA  6F8F               	movwf	f_write@wcnt& (0+255),b
  2203  0017BC  5178               	movf	(??_f_write+3)& (0+255),w,b
  2204  0017BE  A0D8               	btfss	status,0,c
  2205  0017C0  2AE8               	incf	wreg,f,c
  2206  0017C2  0802               	sublw	2
  2207  0017C4  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2211  0017C6  518F               	movf	f_write@wcnt& (0+255),w,b
  2212  0017C8  5D71               	subwf	f_write@btw& (0+255),w,b
  2213  0017CA  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2214  0017CC  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2215  0017CE  B0D8               	btfsc	status,0,c
  2216  0017D0  D004               	goto	l6292
  2217                           
  2218                           ; BSR set to: 0
  2219  0017D2  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2220  0017D6  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2221  0017DA                     l6292:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2225  0017DA  C06D  FFD9         	movff	f_write@fp,fsr2l
  2226  0017DE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2227  0017E2  CFDE F030          	movff	postinc2,move_window@fs
  2228  0017E6  CFDD F031          	movff	postdec2,move_window@fs+1
  2229  0017EA  EE20 F016          	lfsr	2,22
  2230  0017EE  516D               	movf	f_write@fp& (0+255),w,b
  2231  0017F0  26D9               	addwf	fsr2l,f,c
  2232  0017F2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2233  0017F4  22DA               	addwfc	fsr2h,f,c
  2234  0017F6  CFDE F032          	movff	postinc2,move_window@sector
  2235  0017FA  CFDE F033          	movff	postinc2,move_window@sector+1
  2236  0017FE  CFDE F034          	movff	postinc2,move_window@sector+2
  2237  001802  CFDE F035          	movff	postinc2,move_window@sector+3
  2238  001806  EC83  F027         	call	_move_window	;wreg free
  2239  00180A  0900               	iorlw	0
  2240  00180C  B4D8               	btfsc	status,2,c
  2241  00180E  D00A               	goto	l6298
  2242                           
  2243                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2244  001810  0100               	movlb	0	; () banked
  2245  001812  EE20 F005          	lfsr	2,5
  2246  001816  516D               	movf	f_write@fp& (0+255),w,b
  2247  001818  26D9               	addwf	fsr2l,f,c
  2248  00181A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2249  00181C  22DA               	addwfc	fsr2h,f,c
  2250  00181E  0E01               	movlw	1
  2251  001820  6EDF               	movwf	indf2,c
  2252  001822  0012               	return	
  2253  001824                     l6298:
  2254                           
  2255                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2256  001824  0EFF               	movlw	255
  2257  001826  0100               	movlb	0	; () banked
  2258  001828  6F75               	movwf	??_f_write& (0+255),b
  2259  00182A  0E01               	movlw	1
  2260  00182C  6F76               	movwf	(??_f_write+1)& (0+255),b
  2261  00182E  EE20 F006          	lfsr	2,6
  2262  001832  516D               	movf	f_write@fp& (0+255),w,b
  2263  001834  26D9               	addwf	fsr2l,f,c
  2264  001836  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2265  001838  22DA               	addwfc	fsr2h,f,c
  2266  00183A  CFDE F077          	movff	postinc2,??_f_write+2
  2267  00183E  CFDD F078          	movff	postdec2,??_f_write+3
  2268  001842  5175               	movf	??_f_write& (0+255),w,b
  2269  001844  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2270  001846  5176               	movf	(??_f_write+1)& (0+255),w,b
  2271  001848  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2272  00184A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2273  00184E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2274  001852  CFDE F079          	movff	postinc2,??_f_write+4
  2275  001856  CFDD F07A          	movff	postdec2,??_f_write+5
  2276  00185A  5177               	movf	(??_f_write+2)& (0+255),w,b
  2277  00185C  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2278  00185E  5178               	movf	(??_f_write+3)& (0+255),w,b
  2279  001860  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2280  001862  0E2E               	movlw	46
  2281  001864  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2282  001866  6E01               	movwf	mem_cpy@dst,c
  2283  001868  0E00               	movlw	0
  2284  00186A  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2285  00186C  6E02               	movwf	mem_cpy@dst+1,c
  2286  00186E  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2287  001872  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2288  001876  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2289  00187A  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2290  00187E  EC71  F026         	call	_mem_cpy	;wreg free
  2291                           
  2292                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2293  001882  C06D  FFD9         	movff	f_write@fp,fsr2l
  2294  001886  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2295  00188A  EE10 F004          	lfsr	1,4
  2296  00188E  50DE               	movf	postinc2,w,c
  2297  001890  26E1               	addwf	fsr1l,f,c
  2298  001892  50DD               	movf	postdec2,w,c
  2299  001894  22E2               	addwfc	fsr1h,f,c
  2300  001896  0E01               	movlw	1
  2301  001898  6EE7               	movwf	indf1,c
  2302  00189A                     l6302:
  2303  00189A  0100               	movlb	0	; () banked
  2304  00189C  518F               	movf	f_write@wcnt& (0+255),w,b
  2305  00189E  2782               	addwf	f_write@wbuff& (0+255),f,b
  2306  0018A0  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2307  0018A2  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2308                           
  2309                           ; BSR set to: 0
  2310  0018A4  EE20 F006          	lfsr	2,6
  2311  0018A8  516D               	movf	f_write@fp& (0+255),w,b
  2312  0018AA  26D9               	addwf	fsr2l,f,c
  2313  0018AC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2314  0018AE  22DA               	addwfc	fsr2h,f,c
  2315  0018B0  518F               	movf	f_write@wcnt& (0+255),w,b
  2316  0018B2  26DE               	addwf	postinc2,f,c
  2317  0018B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2318  0018B6  22DE               	addwfc	postinc2,f,c
  2319  0018B8  0E00               	movlw	0
  2320  0018BA  22DE               	addwfc	postinc2,f,c
  2321  0018BC  22DE               	addwfc	postinc2,f,c
  2322                           
  2323                           ; BSR set to: 0
  2324  0018BE  C073  FFD9         	movff	f_write@bw,fsr2l
  2325  0018C2  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2326  0018C6  518F               	movf	f_write@wcnt& (0+255),w,b
  2327  0018C8  26DE               	addwf	postinc2,f,c
  2328  0018CA  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2329  0018CC  22DD               	addwfc	postdec2,f,c
  2330                           
  2331                           ; BSR set to: 0
  2332  0018CE  518F               	movf	f_write@wcnt& (0+255),w,b
  2333  0018D0  5F71               	subwf	f_write@btw& (0+255),f,b
  2334  0018D2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2335  0018D4  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2336  0018D6                     l6310:
  2337                           
  2338                           ; BSR set to: 0
  2339  0018D6  5171               	movf	f_write@btw& (0+255),w,b
  2340  0018D8  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2341  0018DA  A4D8               	btfss	status,2,c
  2342  0018DC  D4D8               	goto	l6202
  2343  0018DE                     u8620:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2347  0018DE  EE20 F006          	lfsr	2,6
  2348  0018E2  516D               	movf	f_write@fp& (0+255),w,b
  2349  0018E4  26D9               	addwf	fsr2l,f,c
  2350  0018E6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2351  0018E8  22DA               	addwfc	fsr2h,f,c
  2352  0018EA  EE10 F00A          	lfsr	1,10
  2353  0018EE  516D               	movf	f_write@fp& (0+255),w,b
  2354  0018F0  26E1               	addwf	fsr1l,f,c
  2355  0018F2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2356  0018F4  22E2               	addwfc	fsr1h,f,c
  2357  0018F6  50DE               	movf	postinc2,w,c
  2358  0018F8  5CE6               	subwf	postinc1,w,c
  2359  0018FA  50DE               	movf	postinc2,w,c
  2360  0018FC  58E6               	subwfb	postinc1,w,c
  2361  0018FE  50DE               	movf	postinc2,w,c
  2362  001900  58E6               	subwfb	postinc1,w,c
  2363  001902  50DE               	movf	postinc2,w,c
  2364  001904  58E6               	subwfb	postinc1,w,c
  2365  001906  B0D8               	btfsc	status,0,c
  2366  001908  D014               	goto	l6316
  2367                           
  2368                           ; BSR set to: 0
  2369  00190A  EE20 F006          	lfsr	2,6
  2370  00190E  516D               	movf	f_write@fp& (0+255),w,b
  2371  001910  26D9               	addwf	fsr2l,f,c
  2372  001912  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2373  001914  22DA               	addwfc	fsr2h,f,c
  2374  001916  EE10 F00A          	lfsr	1,10
  2375  00191A  516D               	movf	f_write@fp& (0+255),w,b
  2376  00191C  26E1               	addwf	fsr1l,f,c
  2377  00191E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2378  001920  22E2               	addwfc	fsr1h,f,c
  2379  001922  CFDE FFE6          	movff	postinc2,postinc1
  2380  001926  CFDE FFE6          	movff	postinc2,postinc1
  2381  00192A  CFDE FFE6          	movff	postinc2,postinc1
  2382  00192E  CFDE FFE6          	movff	postinc2,postinc1
  2383  001932                     l6316:
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;ff.c: 2801:  fp->flag |= 0x20;
  2387  001932  EE20 F004          	lfsr	2,4
  2388  001936  516D               	movf	f_write@fp& (0+255),w,b
  2389  001938  26D9               	addwf	fsr2l,f,c
  2390  00193A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2391  00193C  22DA               	addwfc	fsr2h,f,c
  2392  00193E  0E00               	movlw	0
  2393  001940  8ADB               	bsf	plusw2,5,c
  2394                           
  2395                           ; BSR set to: 0
  2396  001942  0012               	return		;funcret
  2397  001944                     __end_of_f_write:
  2398                           	opt callstack 0
  2399                           
  2400 ;; *************** function _f_open *****************
  2401 ;; Defined at:
  2402 ;;		line 2449 in file "ff.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  fp              2   58[BANK0 ] PTR struct .
  2405 ;;		 -> Fil(32), 
  2406 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2407 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  2408 ;;  mode            1   62[BANK0 ] unsigned char 
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  dj             22   90[BANK0 ] struct .
  2411 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2412 ;;  dw              4   83[BANK0 ] unsigned long 
  2413 ;;  cl              4   79[BANK0 ] unsigned long 
  2414 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2415 ;;		 -> NULL(0), FatFs(558), 
  2416 ;;  res             1   87[BANK0 ] enum E93
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      enum E4918
  2419 ;; Registers used:
  2420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2426 ;;      Params:         0       5       0       0       0       0       0       0       0
  2427 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2428 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2429 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2430 ;;Total ram usage:       54 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:   13
  2433 ;; This function calls:
  2434 ;;		_dir_register
  2435 ;;		_find_volume
  2436 ;;		_follow_path
  2437 ;;		_ld_clust
  2438 ;;		_move_window
  2439 ;;		_remove_chain
  2440 ;;		_st_clust
  2441 ;; This function is called by:
  2442 ;;		_guardar
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text3
  2447  002FC2                     __ptext3:
  2448                           	opt callstack 0
  2449  002FC2                     _f_open:
  2450                           	opt callstack 16
  2451                           
  2452                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;incstack = 0
  2456  002FC2  0100               	movlb	0	; () banked
  2457  002FC4  519A               	movf	f_open@fp& (0+255),w,b
  2458  002FC6  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2459  002FC8  A4D8               	btfss	status,2,c
  2460  002FCA  D002               	goto	l5948
  2461                           
  2462                           ; BSR set to: 0
  2463  002FCC  0E09               	movlw	9
  2464  002FCE  0012               	return	
  2465  002FD0                     l5948:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;ff.c: 2465:  fp->fs = 0;
  2469  002FD0  C09A  FFD9         	movff	f_open@fp,fsr2l
  2470  002FD4  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2471  002FD8  0E00               	movlw	0
  2472  002FDA  6EDE               	movwf	postinc2,c
  2473  002FDC  0E00               	movlw	0
  2474  002FDE  6EDD               	movwf	postdec2,c
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2478  002FE0  C0D4  F0BA         	movff	ff@FatFs,f_open@dj
  2479  002FE4  C0D5  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2483  002FE8  0E1F               	movlw	31
  2484  002FEA  179E               	andwf	f_open@mode& (0+255),f,b
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2488  002FEC  0EBA               	movlw	low f_open@dj
  2489  002FEE  6E45               	movwf	find_volume@rfs,c
  2490  002FF0  0E00               	movlw	high f_open@dj
  2491  002FF2  6E46               	movwf	find_volume@rfs+1,c
  2492  002FF4  0E9C               	movlw	low f_open@path
  2493  002FF6  6E47               	movwf	find_volume@path,c
  2494  002FF8  0E00               	movlw	high f_open@path
  2495  002FFA  6E48               	movwf	find_volume@path+1,c
  2496  002FFC  519E               	movf	f_open@mode& (0+255),w,b
  2497  002FFE  0BFE               	andlw	254
  2498  003000  6E49               	movwf	find_volume@wmode,c
  2499  003002  EC19  F004         	call	_find_volume	;wreg free
  2500  003006  0100               	movlb	0	; () banked
  2501  003008  6FB7               	movwf	f_open@res& (0+255),b
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;ff.c: 2479:  if (res == FR_OK) {
  2505  00300A  51B7               	movf	f_open@res& (0+255),w,b
  2506  00300C  A4D8               	btfss	status,2,c
  2507  00300E  D1A2               	goto	l6052
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;ff.c: 2480:   (dj).fn = sfn;
  2511  003010  0EA3               	movlw	low f_open@sfn
  2512  003012  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2513  003014  0E00               	movlw	high f_open@sfn
  2514  003016  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2518  003018  0EBA               	movlw	low f_open@dj
  2519  00301A  6F86               	movwf	follow_path@dp& (0+255),b
  2520  00301C  0E00               	movlw	high f_open@dj
  2521  00301E  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2522  003020  C09C  F088         	movff	f_open@path,follow_path@path
  2523  003024  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2524  003028  ECF2  F020         	call	_follow_path	;wreg free
  2525  00302C  0100               	movlb	0	; () banked
  2526  00302E  6FB7               	movwf	f_open@res& (0+255),b
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;ff.c: 2482:   dir = dj.dir;
  2530  003030  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2531  003034  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;ff.c: 2484:   if (res == FR_OK) {
  2535  003038  51B7               	movf	f_open@res& (0+255),w,b
  2536  00303A  A4D8               	btfss	status,2,c
  2537  00303C  D006               	goto	l5970
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;ff.c: 2485:    if (!dir)
  2541  00303E  51B8               	movf	f_open@dir& (0+255),w,b
  2542  003040  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2543  003042  A4D8               	btfss	status,2,c
  2544  003044  D002               	goto	l5970
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2548  003046  0E06               	movlw	6
  2549  003048  6FB7               	movwf	f_open@res& (0+255),b
  2550  00304A                     l5970:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2554  00304A  C09E  F09F         	movff	f_open@mode,??_f_open
  2555  00304E  0E1C               	movlw	28
  2556  003050  179F               	andwf	??_f_open& (0+255),f,b
  2557  003052  B4D8               	btfsc	status,2,c
  2558  003054  D0D3               	goto	l6018
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;ff.c: 2494:    if (res != FR_OK) {
  2562  003056  51B7               	movf	f_open@res& (0+255),w,b
  2563  003058  B4D8               	btfsc	status,2,c
  2564  00305A  D012               	goto	l5982
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2568  00305C  0E04               	movlw	4
  2569  00305E  19B7               	xorwf	f_open@res& (0+255),w,b
  2570  003060  A4D8               	btfss	status,2,c
  2571  003062  D008               	goto	l5978
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;ff.c: 2499:      res = dir_register(&dj);
  2575  003064  0EBA               	movlw	low f_open@dj
  2576  003066  6F8A               	movwf	dir_register@dp& (0+255),b
  2577  003068  0E00               	movlw	high f_open@dj
  2578  00306A  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2579  00306C  ECA0  F025         	call	_dir_register	;wreg free
  2580  003070  0100               	movlb	0	; () banked
  2581  003072  6FB7               	movwf	f_open@res& (0+255),b
  2582  003074                     l5978:
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;ff.c: 2501:     mode |= 0x08;
  2586  003074  879E               	bsf	f_open@mode& (0+255),3,b
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;ff.c: 2502:     dir = dj.dir;
  2590  003076  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2591  00307A  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2592                           
  2593                           ;ff.c: 2503:    }
  2594  00307E  D012               	goto	l644
  2595  003080                     l5982:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2599  003080  EE20 F00B          	lfsr	2,11
  2600  003084  51B8               	movf	f_open@dir& (0+255),w,b
  2601  003086  26D9               	addwf	fsr2l,f,c
  2602  003088  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2603  00308A  22DA               	addwfc	fsr2h,f,c
  2604  00308C  50DF               	movf	indf2,w,c
  2605  00308E  6F9F               	movwf	??_f_open& (0+255),b
  2606  003090  0E11               	movlw	17
  2607  003092  179F               	andwf	??_f_open& (0+255),f,b
  2608  003094  B4D8               	btfsc	status,2,c
  2609  003096  D002               	goto	l645
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;ff.c: 2506:      res = FR_DENIED;
  2613  003098  0E07               	movlw	7
  2614  00309A  D003               	goto	L2
  2615  00309C                     l645:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;ff.c: 2508:      if (mode & 0x04)
  2619  00309C  A59E               	btfss	f_open@mode& (0+255),2,b
  2620  00309E  D002               	goto	l644
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;ff.c: 2509:       res = FR_EXIST;
  2624  0030A0  0E08               	movlw	8
  2625  0030A2                     L2:
  2626  0030A2  6FB7               	movwf	f_open@res& (0+255),b
  2627  0030A4                     l644:
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2631  0030A4  51B7               	movf	f_open@res& (0+255),w,b
  2632  0030A6  B4D8               	btfsc	status,2,c
  2633                           
  2634                           ; BSR set to: 0
  2635  0030A8  A79E               	btfss	f_open@mode& (0+255),3,b
  2636  0030AA  D0C1               	goto	l651
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2640                           
  2641                           ; BSR set to: 0
  2642  0030AC  EE20 F00E          	lfsr	2,14
  2643  0030B0  51B8               	movf	f_open@dir& (0+255),w,b
  2644  0030B2  26D9               	addwf	fsr2l,f,c
  2645  0030B4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2646  0030B6  22DA               	addwfc	fsr2h,f,c
  2647  0030B8  0E00               	movlw	0
  2648  0030BA  6EDE               	movwf	postinc2,c
  2649  0030BC  0E00               	movlw	0
  2650  0030BE  6EDE               	movwf	postinc2,c
  2651  0030C0  0E21               	movlw	33
  2652  0030C2  6EDE               	movwf	postinc2,c
  2653  0030C4  0E46               	movlw	70
  2654  0030C6  6EDD               	movwf	postdec2,c
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2658  0030C8  EE20 F016          	lfsr	2,22
  2659  0030CC  51B8               	movf	f_open@dir& (0+255),w,b
  2660  0030CE  26D9               	addwf	fsr2l,f,c
  2661  0030D0  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2662  0030D2  22DA               	addwfc	fsr2h,f,c
  2663  0030D4  0E00               	movlw	0
  2664  0030D6  6EDE               	movwf	postinc2,c
  2665  0030D8  0E00               	movlw	0
  2666  0030DA  6EDE               	movwf	postinc2,c
  2667  0030DC  0E21               	movlw	33
  2668  0030DE  6EDE               	movwf	postinc2,c
  2669  0030E0  0E46               	movlw	70
  2670  0030E2  6EDD               	movwf	postdec2,c
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;ff.c: 2516:     dir[11] = 0;
  2674  0030E4  EE20 F00B          	lfsr	2,11
  2675  0030E8  51B8               	movf	f_open@dir& (0+255),w,b
  2676  0030EA  26D9               	addwf	fsr2l,f,c
  2677  0030EC  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2678  0030EE  22DA               	addwfc	fsr2h,f,c
  2679  0030F0  0E00               	movlw	0
  2680  0030F2  6EDF               	movwf	indf2,c
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2684  0030F4  EE20 F01C          	lfsr	2,28
  2685  0030F8  51B8               	movf	f_open@dir& (0+255),w,b
  2686  0030FA  26D9               	addwf	fsr2l,f,c
  2687  0030FC  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2688  0030FE  22DA               	addwfc	fsr2h,f,c
  2689  003100  6ADE               	clrf	postinc2,c
  2690  003102  6ADE               	clrf	postinc2,c
  2691  003104  6ADE               	clrf	postinc2,c
  2692  003106  6ADD               	clrf	postdec2,c
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2696  003108  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2697  00310C  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2698  003110  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2699  003114  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2700  003118  ECA2  F028         	call	_ld_clust	;wreg free
  2701  00311C  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2702  003120  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2703  003124  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2704  003128  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2705                           
  2706                           ;ff.c: 2519:     st_clust(dir, 0);
  2707  00312C  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2708  003130  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2709  003134  0E00               	movlw	0
  2710  003136  6E03               	movwf	st_clust@cl,c
  2711  003138  0E00               	movlw	0
  2712  00313A  6E04               	movwf	st_clust@cl+1,c
  2713  00313C  0E00               	movlw	0
  2714  00313E  6E05               	movwf	st_clust@cl+2,c
  2715  003140  0E00               	movlw	0
  2716  003142  6E06               	movwf	st_clust@cl+3,c
  2717  003144  ECB5  F02A         	call	_st_clust	;wreg free
  2718                           
  2719                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2720  003148  0100               	movlb	0	; () banked
  2721  00314A  EE20 F004          	lfsr	2,4
  2722  00314E  51BA               	movf	f_open@dj& (0+255),w,b
  2723  003150  26D9               	addwf	fsr2l,f,c
  2724  003152  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2725  003154  22DA               	addwfc	fsr2h,f,c
  2726  003156  0E01               	movlw	1
  2727  003158  6EDF               	movwf	indf2,c
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;ff.c: 2521:     if (cl) {
  2731  00315A  51AF               	movf	f_open@cl& (0+255),w,b
  2732  00315C  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2733  00315E  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2734  003160  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2735  003162  B4D8               	btfsc	status,2,c
  2736  003164  D064               	goto	l651
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2740  003166  EE20 F02A          	lfsr	2,42
  2741  00316A  51BA               	movf	f_open@dj& (0+255),w,b
  2742  00316C  26D9               	addwf	fsr2l,f,c
  2743  00316E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2744  003170  22DA               	addwfc	fsr2h,f,c
  2745  003172  CFDE F0B3          	movff	postinc2,f_open@dw
  2746  003176  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2747  00317A  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2748  00317E  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2752  003182  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2753  003186  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2754  00318A  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2755  00318E  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2756  003192  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2757  003196  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2758  00319A  EC4D  F020         	call	_remove_chain	;wreg free
  2759  00319E  0100               	movlb	0	; () banked
  2760  0031A0  6FB7               	movwf	f_open@res& (0+255),b
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;ff.c: 2524:      if (res == FR_OK) {
  2764  0031A2  51B7               	movf	f_open@res& (0+255),w,b
  2765  0031A4  A4D8               	btfss	status,2,c
  2766  0031A6  D043               	goto	l651
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2770  0031A8  0EFF               	movlw	255
  2771  0031AA  25AF               	addwf	f_open@cl& (0+255),w,b
  2772  0031AC  6F9F               	movwf	??_f_open& (0+255),b
  2773  0031AE  0EFF               	movlw	255
  2774  0031B0  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2775  0031B2  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2776  0031B4  0EFF               	movlw	255
  2777  0031B6  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2778  0031B8  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2779  0031BA  0EFF               	movlw	255
  2780  0031BC  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2781  0031BE  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2782  0031C0  EE20 F00A          	lfsr	2,10
  2783  0031C4  51BA               	movf	f_open@dj& (0+255),w,b
  2784  0031C6  26D9               	addwf	fsr2l,f,c
  2785  0031C8  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2786  0031CA  22DA               	addwfc	fsr2h,f,c
  2787  0031CC  C09F  FFDE         	movff	??_f_open,postinc2
  2788  0031D0  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2789  0031D4  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2790  0031D8  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2794  0031DC  C0BA  F030         	movff	f_open@dj,move_window@fs
  2795  0031E0  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2796  0031E4  C0B3  F032         	movff	f_open@dw,move_window@sector
  2797  0031E8  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2798  0031EC  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2799  0031F0  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2800  0031F4  EC83  F027         	call	_move_window	;wreg free
  2801  0031F8  0100               	movlb	0	; () banked
  2802  0031FA  D018               	goto	L3
  2803  0031FC                     l6018:
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;ff.c: 2532:    if (res == FR_OK) {
  2807  0031FC  51B7               	movf	f_open@res& (0+255),w,b
  2808  0031FE  A4D8               	btfss	status,2,c
  2809  003200  D016               	goto	l651
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2813  003202  EE20 F00B          	lfsr	2,11
  2814  003206  51B8               	movf	f_open@dir& (0+255),w,b
  2815  003208  26D9               	addwf	fsr2l,f,c
  2816  00320A  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2817  00320C  22DA               	addwfc	fsr2h,f,c
  2818  00320E  A8DF               	btfss	indf2,4,c
  2819  003210  D002               	goto	l653
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;ff.c: 2534:      res = FR_NO_FILE;
  2823  003212  0E04               	movlw	4
  2824  003214  D00B               	goto	L3
  2825  003216                     l653:
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2829  003216  A39E               	btfss	f_open@mode& (0+255),1,b
  2830  003218  D00A               	goto	l651
  2831                           
  2832                           ; BSR set to: 0
  2833  00321A  EE20 F00B          	lfsr	2,11
  2834  00321E  51B8               	movf	f_open@dir& (0+255),w,b
  2835  003220  26D9               	addwf	fsr2l,f,c
  2836  003222  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2837  003224  22DA               	addwfc	fsr2h,f,c
  2838  003226  A0DF               	btfss	indf2,0,c
  2839  003228  D002               	goto	l651
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;ff.c: 2537:       res = FR_DENIED;
  2843  00322A  0E07               	movlw	7
  2844  00322C                     L3:
  2845  00322C  6FB7               	movwf	f_open@res& (0+255),b
  2846  00322E                     l651:
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;ff.c: 2541:   if (res == FR_OK) {
  2850  00322E  51B7               	movf	f_open@res& (0+255),w,b
  2851  003230  A4D8               	btfss	status,2,c
  2852  003232  D020               	goto	l6036
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;ff.c: 2542:    if (mode & 0x08)
  2856  003234  B79E               	btfsc	f_open@mode& (0+255),3,b
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;ff.c: 2543:     mode |= 0x20;
  2860  003236  8B9E               	bsf	f_open@mode& (0+255),5,b
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2864  003238  EE20 F02A          	lfsr	2,42
  2865  00323C  51BA               	movf	f_open@dj& (0+255),w,b
  2866  00323E  26D9               	addwf	fsr2l,f,c
  2867  003240  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2868  003242  22DA               	addwfc	fsr2h,f,c
  2869  003244  EE10 F01A          	lfsr	1,26
  2870  003248  519A               	movf	f_open@fp& (0+255),w,b
  2871  00324A  26E1               	addwf	fsr1l,f,c
  2872  00324C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2873  00324E  22E2               	addwfc	fsr1h,f,c
  2874  003250  CFDE FFE6          	movff	postinc2,postinc1
  2875  003254  CFDE FFE6          	movff	postinc2,postinc1
  2876  003258  CFDE FFE6          	movff	postinc2,postinc1
  2877  00325C  CFDE FFE6          	movff	postinc2,postinc1
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2881  003260  EE20 F01E          	lfsr	2,30
  2882  003264  519A               	movf	f_open@fp& (0+255),w,b
  2883  003266  26D9               	addwf	fsr2l,f,c
  2884  003268  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2885  00326A  22DA               	addwfc	fsr2h,f,c
  2886  00326C  C0B8  FFDE         	movff	f_open@dir,postinc2
  2887  003270  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2888  003274                     l6036:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;ff.c: 2565:   if (res == FR_OK) {
  2892  003274  51B7               	movf	f_open@res& (0+255),w,b
  2893  003276  A4D8               	btfss	status,2,c
  2894  003278  D06D               	goto	l6052
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;ff.c: 2566:    fp->flag = mode;
  2898  00327A  EE20 F004          	lfsr	2,4
  2899  00327E  519A               	movf	f_open@fp& (0+255),w,b
  2900  003280  26D9               	addwf	fsr2l,f,c
  2901  003282  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2902  003284  22DA               	addwfc	fsr2h,f,c
  2903  003286  C09E  FFDF         	movff	f_open@mode,indf2
  2904                           
  2905                           ;ff.c: 2567:    fp->err = 0;
  2906  00328A  EE20 F005          	lfsr	2,5
  2907  00328E  519A               	movf	f_open@fp& (0+255),w,b
  2908  003290  26D9               	addwf	fsr2l,f,c
  2909  003292  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2910  003294  22DA               	addwfc	fsr2h,f,c
  2911  003296  0E00               	movlw	0
  2912  003298  6EDF               	movwf	indf2,c
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2916  00329A  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2917  00329E  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2918  0032A2  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2919  0032A6  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2920  0032AA  ECA2  F028         	call	_ld_clust	;wreg free
  2921  0032AE  0100               	movlb	0	; () banked
  2922  0032B0  EE20 F00E          	lfsr	2,14
  2923  0032B4  519A               	movf	f_open@fp& (0+255),w,b
  2924  0032B6  26D9               	addwf	fsr2l,f,c
  2925  0032B8  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2926  0032BA  22DA               	addwfc	fsr2h,f,c
  2927  0032BC  C001  FFDE         	movff	?_ld_clust,postinc2
  2928  0032C0  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2929  0032C4  C003  FFDE         	movff	?_ld_clust+2,postinc2
  2930  0032C8  C004  FFDE         	movff	?_ld_clust+3,postinc2
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  2934  0032CC  EE20 F01C          	lfsr	2,28
  2935  0032D0  51B8               	movf	f_open@dir& (0+255),w,b
  2936  0032D2  26D9               	addwf	fsr2l,f,c
  2937  0032D4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2938  0032D6  22DA               	addwfc	fsr2h,f,c
  2939  0032D8  EE10 F00A          	lfsr	1,10
  2940  0032DC  519A               	movf	f_open@fp& (0+255),w,b
  2941  0032DE  26E1               	addwf	fsr1l,f,c
  2942  0032E0  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2943  0032E2  22E2               	addwfc	fsr1h,f,c
  2944  0032E4  CFDE FFE6          	movff	postinc2,postinc1
  2945  0032E8  CFDE FFE6          	movff	postinc2,postinc1
  2946  0032EC  CFDE FFE6          	movff	postinc2,postinc1
  2947  0032F0  CFDE FFE6          	movff	postinc2,postinc1
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;ff.c: 2570:    fp->fptr = 0;
  2951  0032F4  EE20 F006          	lfsr	2,6
  2952  0032F8  519A               	movf	f_open@fp& (0+255),w,b
  2953  0032FA  26D9               	addwf	fsr2l,f,c
  2954  0032FC  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2955  0032FE  22DA               	addwfc	fsr2h,f,c
  2956  003300  6ADE               	clrf	postinc2,c
  2957  003302  6ADE               	clrf	postinc2,c
  2958  003304  6ADE               	clrf	postinc2,c
  2959  003306  6ADD               	clrf	postdec2,c
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;ff.c: 2571:    fp->dsect = 0;
  2963  003308  EE20 F016          	lfsr	2,22
  2964  00330C  519A               	movf	f_open@fp& (0+255),w,b
  2965  00330E  26D9               	addwf	fsr2l,f,c
  2966  003310  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2967  003312  22DA               	addwfc	fsr2h,f,c
  2968  003314  6ADE               	clrf	postinc2,c
  2969  003316  6ADE               	clrf	postinc2,c
  2970  003318  6ADE               	clrf	postinc2,c
  2971  00331A  6ADD               	clrf	postdec2,c
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;ff.c: 2575:    fp->fs = dj.fs;
  2975  00331C  C09A  FFD9         	movff	f_open@fp,fsr2l
  2976  003320  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2977  003324  C0BA  FFDE         	movff	f_open@dj,postinc2
  2978  003328  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;ff.c: 2576:    fp->id = fp->fs->id;
  2982  00332C  C09A  FFD9         	movff	f_open@fp,fsr2l
  2983  003330  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2984  003334  EE10 F006          	lfsr	1,6
  2985  003338  50DE               	movf	postinc2,w,c
  2986  00333A  26E1               	addwf	fsr1l,f,c
  2987  00333C  50DD               	movf	postdec2,w,c
  2988  00333E  22E2               	addwfc	fsr1h,f,c
  2989  003340  EE20 F002          	lfsr	2,2
  2990  003344  519A               	movf	f_open@fp& (0+255),w,b
  2991  003346  26D9               	addwf	fsr2l,f,c
  2992  003348  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2993  00334A  22DA               	addwfc	fsr2h,f,c
  2994  00334C  CFE6 FFDE          	movff	postinc1,postinc2
  2995  003350  CFE5 FFDD          	movff	postdec1,postdec2
  2996  003354                     l6052:
  2997                           
  2998                           ; BSR set to: 0
  2999                           ;ff.c: 2580:  return res;
  3000  003354  51B7               	movf	f_open@res& (0+255),w,b
  3001                           
  3002                           ; BSR set to: 0
  3003  003356  0012               	return		;funcret
  3004  003358                     __end_of_f_open:
  3005                           	opt callstack 0
  3006                           
  3007 ;; *************** function _remove_chain *****************
  3008 ;; Defined at:
  3009 ;;		line 937 in file "ff.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;  fs              2   85[COMRAM] PTR struct .
  3012 ;;		 -> NULL(0), FatFs(558), 
  3013 ;;  clst            4   87[COMRAM] unsigned long 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  nxt             4    1[BANK0 ] unsigned long 
  3016 ;;  res             1    0[BANK0 ] enum E93
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      enum E93
  3019 ;; Registers used:
  3020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3026 ;;      Params:         6       0       0       0       0       0       0       0       0
  3027 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3028 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3029 ;;      Totals:        10       5       0       0       0       0       0       0       0
  3030 ;;Total ram usage:       15 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:    9
  3033 ;; This function calls:
  3034 ;;		_get_fat
  3035 ;;		_put_fat
  3036 ;; This function is called by:
  3037 ;;		_f_open
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text4
  3042  00409A                     __ptext4:
  3043                           	opt callstack 0
  3044  00409A                     _remove_chain:
  3045                           	opt callstack 19
  3046                           
  3047                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;incstack = 0
  3051  00409A  505B               	movf	remove_chain@clst+3,w,c
  3052  00409C  105A               	iorwf	remove_chain@clst+2,w,c
  3053  00409E  1059               	iorwf	remove_chain@clst+1,w,c
  3054  0040A0  E104               	bnz	u7090
  3055  0040A2  0E02               	movlw	2
  3056  0040A4  5C58               	subwf	remove_chain@clst,w,c
  3057  0040A6  A0D8               	btfss	status,0,c
  3058  0040A8  D010               	goto	u7100
  3059  0040AA                     u7090:
  3060  0040AA  EE20 F012          	lfsr	2,18
  3061  0040AE  5056               	movf	remove_chain@fs,w,c
  3062  0040B0  26D9               	addwf	fsr2l,f,c
  3063  0040B2  5057               	movf	remove_chain@fs+1,w,c
  3064  0040B4  22DA               	addwfc	fsr2h,f,c
  3065  0040B6  50DE               	movf	postinc2,w,c
  3066  0040B8  5C58               	subwf	remove_chain@clst,w,c
  3067  0040BA  50DE               	movf	postinc2,w,c
  3068  0040BC  5859               	subwfb	remove_chain@clst+1,w,c
  3069  0040BE  50DE               	movf	postinc2,w,c
  3070  0040C0  585A               	subwfb	remove_chain@clst+2,w,c
  3071  0040C2  50DE               	movf	postinc2,w,c
  3072  0040C4  585B               	subwfb	remove_chain@clst+3,w,c
  3073  0040C6  A0D8               	btfss	status,0,c
  3074  0040C8  D003               	goto	l5400
  3075  0040CA                     u7100:
  3076                           
  3077                           ;ff.c: 949:   res = FR_INT_ERR;
  3078  0040CA  0E02               	movlw	2
  3079  0040CC  0100               	movlb	0	; () banked
  3080  0040CE  D031               	goto	L4
  3081  0040D0                     l5400:
  3082                           
  3083                           ;ff.c: 952:   res = FR_OK;
  3084  0040D0  0E00               	movlw	0
  3085  0040D2  0100               	movlb	0	; () banked
  3086  0040D4  6F60               	movwf	remove_chain@res& (0+255),b
  3087                           
  3088                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3089  0040D6  D074               	goto	l365
  3090  0040D8                     l5402:
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3094  0040D8  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3095  0040DC  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3096  0040E0  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3097  0040E4  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3098  0040E8  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3099  0040EC  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3100  0040F0  EC10  F016         	call	_get_fat	;wreg free
  3101  0040F4  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3102  0040F8  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3103  0040FC  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3104  004100  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3105                           
  3106                           ;ff.c: 955:    if (nxt == 0) break;
  3107  004104  0100               	movlb	0	; () banked
  3108  004106  5161               	movf	remove_chain@nxt& (0+255),w,b
  3109  004108  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3110  00410A  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3111  00410C  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3112  00410E  B4D8               	btfsc	status,2,c
  3113  004110  D067               	goto	u7160
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3117  004112  0561               	decf	remove_chain@nxt& (0+255),w,b
  3118  004114  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3119  004116  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3120  004118  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3121  00411A  B4D8               	btfsc	status,2,c
  3122  00411C  D7D6               	goto	u7100
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3126  00411E  2961               	incf	remove_chain@nxt& (0+255),w,b
  3127  004120  E10A               	bnz	l5416
  3128  004122  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3129  004124  E108               	bnz	l5416
  3130  004126  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3131  004128  E106               	bnz	l5416
  3132  00412A  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3133  00412C  A4D8               	btfss	status,2,c
  3134  00412E  D003               	goto	l5416
  3135                           
  3136                           ; BSR set to: 0
  3137  004130  0E01               	movlw	1
  3138  004132                     L4:
  3139  004132  6F60               	movwf	remove_chain@res& (0+255),b
  3140  004134  D055               	goto	u7160
  3141  004136                     l5416:
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3145  004136  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3146  00413A  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3147  00413E  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3148  004142  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3149  004146  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3150  00414A  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3151  00414E  0E00               	movlw	0
  3152  004150  6E41               	movwf	put_fat@val,c
  3153  004152  0E00               	movlw	0
  3154  004154  6E42               	movwf	put_fat@val+1,c
  3155  004156  0E00               	movlw	0
  3156  004158  6E43               	movwf	put_fat@val+2,c
  3157  00415A  0E00               	movlw	0
  3158  00415C  6E44               	movwf	put_fat@val+3,c
  3159  00415E  ECF8  F011         	call	_put_fat	;wreg free
  3160  004162  0100               	movlb	0	; () banked
  3161  004164  6F60               	movwf	remove_chain@res& (0+255),b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;ff.c: 959:    if (res != FR_OK) break;
  3165  004166  5160               	movf	remove_chain@res& (0+255),w,b
  3166  004168  A4D8               	btfss	status,2,c
  3167  00416A  D03A               	goto	u7160
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3171  00416C  EE20 F00E          	lfsr	2,14
  3172  004170  5056               	movf	remove_chain@fs,w,c
  3173  004172  26D9               	addwf	fsr2l,f,c
  3174  004174  5057               	movf	remove_chain@fs+1,w,c
  3175  004176  22DA               	addwfc	fsr2h,f,c
  3176  004178  28DE               	incf	postinc2,w,c
  3177  00417A  E107               	bnz	u7150
  3178  00417C  28DE               	incf	postinc2,w,c
  3179  00417E  E105               	bnz	u7150
  3180  004180  28DE               	incf	postinc2,w,c
  3181  004182  E103               	bnz	u7150
  3182  004184  28DE               	incf	postinc2,w,c
  3183  004186  B4D8               	btfsc	status,2,c
  3184  004188  D013               	goto	l5426
  3185  00418A                     u7150:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;ff.c: 961:     fs->free_clust++;
  3189  00418A  EE20 F00E          	lfsr	2,14
  3190  00418E  5056               	movf	remove_chain@fs,w,c
  3191  004190  26D9               	addwf	fsr2l,f,c
  3192  004192  5057               	movf	remove_chain@fs+1,w,c
  3193  004194  22DA               	addwfc	fsr2h,f,c
  3194  004196  2ADE               	incf	postinc2,f,c
  3195  004198  0E00               	movlw	0
  3196  00419A  22DE               	addwfc	postinc2,f,c
  3197  00419C  22DE               	addwfc	postinc2,f,c
  3198  00419E  22DE               	addwfc	postinc2,f,c
  3199                           
  3200                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3201  0041A0  EE20 F005          	lfsr	2,5
  3202  0041A4  5056               	movf	remove_chain@fs,w,c
  3203  0041A6  26D9               	addwf	fsr2l,f,c
  3204  0041A8  5057               	movf	remove_chain@fs+1,w,c
  3205  0041AA  22DA               	addwfc	fsr2h,f,c
  3206  0041AC  0E00               	movlw	0
  3207  0041AE  80DB               	bsf	plusw2,0,c
  3208  0041B0                     l5426:
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;ff.c: 974:    clst = nxt;
  3212  0041B0  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3213  0041B4  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3214  0041B8  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3215  0041BC  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3216  0041C0                     l365:
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3220  0041C0  EE20 F012          	lfsr	2,18
  3221  0041C4  5056               	movf	remove_chain@fs,w,c
  3222  0041C6  26D9               	addwf	fsr2l,f,c
  3223  0041C8  5057               	movf	remove_chain@fs+1,w,c
  3224  0041CA  22DA               	addwfc	fsr2h,f,c
  3225  0041CC  50DE               	movf	postinc2,w,c
  3226  0041CE  5C58               	subwf	remove_chain@clst,w,c
  3227  0041D0  50DE               	movf	postinc2,w,c
  3228  0041D2  5859               	subwfb	remove_chain@clst+1,w,c
  3229  0041D4  50DE               	movf	postinc2,w,c
  3230  0041D6  585A               	subwfb	remove_chain@clst+2,w,c
  3231  0041D8  50DE               	movf	postinc2,w,c
  3232  0041DA  585B               	subwfb	remove_chain@clst+3,w,c
  3233  0041DC  A0D8               	btfss	status,0,c
  3234  0041DE  D77C               	goto	l5402
  3235  0041E0                     u7160:
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;ff.c: 978:  return res;
  3239  0041E0  5160               	movf	remove_chain@res& (0+255),w,b
  3240                           
  3241                           ; BSR set to: 0
  3242  0041E2  0012               	return		;funcret
  3243  0041E4                     __end_of_remove_chain:
  3244                           	opt callstack 0
  3245                           
  3246 ;; *************** function _follow_path *****************
  3247 ;; Defined at:
  3248 ;;		line 2052 in file "ff.c"
  3249 ;; Parameters:    Size  Location     Type
  3250 ;;  dp              2   38[BANK0 ] PTR struct .
  3251 ;;		 -> f_open@dj(22), 
  3252 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3253 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3256 ;;		 -> NULL(0), FatFs(558), 
  3257 ;;  res             1   45[BANK0 ] enum E93
  3258 ;;  ns              1   44[BANK0 ] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      enum E93
  3261 ;; Registers used:
  3262 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3268 ;;      Params:         0       4       0       0       0       0       0       0       0
  3269 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3271 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3272 ;;Total ram usage:        8 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:   12
  3275 ;; This function calls:
  3276 ;;		_create_name
  3277 ;;		_dir_find
  3278 ;;		_dir_sdi
  3279 ;;		_ld_clust
  3280 ;; This function is called by:
  3281 ;;		_f_open
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text5
  3286  0041E4                     __ptext5:
  3287                           	opt callstack 0
  3288  0041E4                     _follow_path:
  3289                           	opt callstack 16
  3290                           
  3291                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;incstack = 0
  3295  0041E4  C088  FFF6         	movff	follow_path@path,tblptrl
  3296  0041E8  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3297  0041EC                     	if	0	;tblptru may be non-zero
  3298  0041EC                     	endif
  3299  0041EC                     	if	0	;tblptru may be non-zero
  3300  0041EC                     	endif
  3301  0041EC  0008               	tblrd		*
  3302  0041EE  50F5               	movf	tablat,w,c
  3303  0041F0  0A2F               	xorlw	47
  3304  0041F2  B4D8               	btfsc	status,2,c
  3305  0041F4  D009               	goto	u7200
  3306  0041F6  C088  FFF6         	movff	follow_path@path,tblptrl
  3307  0041FA  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3308  0041FE                     	if	0	;tblptru may be non-zero
  3309  0041FE                     	endif
  3310  0041FE                     	if	0	;tblptru may be non-zero
  3311  0041FE                     	endif
  3312  0041FE  0008               	tblrd		*
  3313  004200  50F5               	movf	tablat,w,c
  3314  004202  0A5C               	xorlw	92
  3315  004204  A4D8               	btfss	status,2,c
  3316  004206  D003               	goto	l5456
  3317  004208                     u7200:
  3318                           
  3319                           ;ff.c: 2069:   path++;
  3320  004208  0100               	movlb	0	; () banked
  3321  00420A  4B88               	infsnz	follow_path@path& (0+255),f,b
  3322  00420C  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3323  00420E                     l5456:
  3324                           
  3325                           ;ff.c: 2070:  dp->sclust = 0;
  3326  00420E  0100               	movlb	0	; () banked
  3327  004210  EE20 F006          	lfsr	2,6
  3328  004214  5186               	movf	follow_path@dp& (0+255),w,b
  3329  004216  26D9               	addwf	fsr2l,f,c
  3330  004218  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3331  00421A  22DA               	addwfc	fsr2h,f,c
  3332  00421C  6ADE               	clrf	postinc2,c
  3333  00421E  6ADE               	clrf	postinc2,c
  3334  004220  6ADE               	clrf	postinc2,c
  3335  004222  6ADD               	clrf	postdec2,c
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3339  004224  C088  FFF6         	movff	follow_path@path,tblptrl
  3340  004228  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3341  00422C                     	if	0	;tblptru may be non-zero
  3342  00422C                     	endif
  3343  00422C                     	if	0	;tblptru may be non-zero
  3344  00422C                     	endif
  3345  00422C  0E20               	movlw	32
  3346  00422E  0008               	tblrd		*
  3347  004230  60F5               	cpfslt	tablat,c
  3348  004232  D017               	goto	l5464
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3352  004234  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3353  004238  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3354  00423C  0E00               	movlw	0
  3355  00423E  6E59               	movwf	dir_sdi@idx+1,c
  3356  004240  0E00               	movlw	0
  3357  004242  6E58               	movwf	dir_sdi@idx,c
  3358  004244  EC29  F01B         	call	_dir_sdi	;wreg free
  3359  004248  0100               	movlb	0	; () banked
  3360  00424A  6F8D               	movwf	follow_path@res& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;ff.c: 2075:   dp->dir = 0;
  3364  00424C  EE20 F012          	lfsr	2,18
  3365  004250  5186               	movf	follow_path@dp& (0+255),w,b
  3366  004252  26D9               	addwf	fsr2l,f,c
  3367  004254  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3368  004256  22DA               	addwfc	fsr2h,f,c
  3369  004258  0E00               	movlw	0
  3370  00425A  6EDE               	movwf	postinc2,c
  3371  00425C  0E00               	movlw	0
  3372  00425E  6EDD               	movwf	postdec2,c
  3373                           
  3374                           ;ff.c: 2076:  } else {
  3375  004260  D062               	goto	l5500
  3376  004262                     l5464:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;ff.c: 2078:    res = create_name(dp, &path);
  3380  004262  C086  F009         	movff	follow_path@dp,create_name@dp
  3381  004266  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3382  00426A  0E88               	movlw	low follow_path@path
  3383  00426C  6E0B               	movwf	create_name@path,c
  3384  00426E  0E00               	movlw	high follow_path@path
  3385  004270  6E0C               	movwf	create_name@path+1,c
  3386  004272  EC8A  F01C         	call	_create_name	;wreg free
  3387  004276  0100               	movlb	0	; () banked
  3388  004278  6F8D               	movwf	follow_path@res& (0+255),b
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;ff.c: 2079:    if (res != FR_OK) break;
  3392  00427A  518D               	movf	follow_path@res& (0+255),w,b
  3393  00427C  A4D8               	btfss	status,2,c
  3394  00427E  D053               	goto	l5500
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;ff.c: 2080:    res = dir_find(dp);
  3398  004280  C086  F080         	movff	follow_path@dp,dir_find@dp
  3399  004284  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3400  004288  ECD8  F023         	call	_dir_find	;wreg free
  3401  00428C  0100               	movlb	0	; () banked
  3402  00428E  6F8D               	movwf	follow_path@res& (0+255),b
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;ff.c: 2081:    ns = dp->fn[11];
  3406  004290  EE20 F014          	lfsr	2,20
  3407  004294  5186               	movf	follow_path@dp& (0+255),w,b
  3408  004296  26D9               	addwf	fsr2l,f,c
  3409  004298  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3410  00429A  22DA               	addwfc	fsr2h,f,c
  3411  00429C  EE10 F00B          	lfsr	1,11
  3412  0042A0  50DE               	movf	postinc2,w,c
  3413  0042A2  26E1               	addwf	fsr1l,f,c
  3414  0042A4  50DD               	movf	postdec2,w,c
  3415  0042A6  22E2               	addwfc	fsr1h,f,c
  3416  0042A8  50E7               	movf	indf1,w,c
  3417  0042AA  6F8C               	movwf	follow_path@ns& (0+255),b
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;ff.c: 2082:    if (res != FR_OK) {
  3421  0042AC  518D               	movf	follow_path@res& (0+255),w,b
  3422  0042AE  B4D8               	btfsc	status,2,c
  3423  0042B0  D008               	goto	l532
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3427  0042B2  0E04               	movlw	4
  3428  0042B4  198D               	xorwf	follow_path@res& (0+255),w,b
  3429  0042B6  B4D8               	btfsc	status,2,c
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3433  0042B8  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3434  0042BA  D035               	goto	l5500
  3435  0042BC                     u7250:
  3436                           
  3437                           ; BSR set to: 0
  3438  0042BC  0E05               	movlw	5
  3439  0042BE  6F8D               	movwf	follow_path@res& (0+255),b
  3440  0042C0  D032               	goto	l5500
  3441  0042C2                     l532:
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;ff.c: 2094:    if (ns & 0x04) break;
  3445  0042C2  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3446  0042C4  D030               	goto	l5500
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;ff.c: 2095:    dir = dp->dir;
  3450  0042C6  EE20 F012          	lfsr	2,18
  3451  0042CA  5186               	movf	follow_path@dp& (0+255),w,b
  3452  0042CC  26D9               	addwf	fsr2l,f,c
  3453  0042CE  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3454  0042D0  22DA               	addwfc	fsr2h,f,c
  3455  0042D2  CFDE F08A          	movff	postinc2,follow_path@dir
  3456  0042D6  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3457                           
  3458                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3459  0042DA  EE20 F00B          	lfsr	2,11
  3460  0042DE  518A               	movf	follow_path@dir& (0+255),w,b
  3461  0042E0  26D9               	addwf	fsr2l,f,c
  3462  0042E2  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3463  0042E4  22DA               	addwfc	fsr2h,f,c
  3464  0042E6  A8DF               	btfss	indf2,4,c
  3465  0042E8  D7E9               	goto	u7250
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3469  0042EA  C086  FFD9         	movff	follow_path@dp,fsr2l
  3470  0042EE  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3471  0042F2  CFDE F001          	movff	postinc2,ld_clust@fs
  3472  0042F6  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3473  0042FA  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3474  0042FE  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3475  004302  ECA2  F028         	call	_ld_clust	;wreg free
  3476  004306  0100               	movlb	0	; () banked
  3477  004308  EE20 F006          	lfsr	2,6
  3478  00430C  5186               	movf	follow_path@dp& (0+255),w,b
  3479  00430E  26D9               	addwf	fsr2l,f,c
  3480  004310  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3481  004312  22DA               	addwfc	fsr2h,f,c
  3482  004314  C001  FFDE         	movff	?_ld_clust,postinc2
  3483  004318  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3484  00431C  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3485  004320  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3486  004324  D79E               	goto	l5464
  3487  004326                     l5500:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;ff.c: 2103:  return res;
  3491  004326  518D               	movf	follow_path@res& (0+255),w,b
  3492                           
  3493                           ; BSR set to: 0
  3494  004328  0012               	return		;funcret
  3495  00432A                     __end_of_follow_path:
  3496                           	opt callstack 0
  3497                           
  3498 ;; *************** function _ld_clust *****************
  3499 ;; Defined at:
  3500 ;;		line 1235 in file "ff.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;  fs              2    0[COMRAM] PTR struct .
  3503 ;;		 -> NULL(0), FatFs(558), 
  3504 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3505 ;;		 -> NULL(0), FatFs(558), 
  3506 ;; Auto vars:     Size  Location     Type
  3507 ;;  cl              4   10[COMRAM] unsigned long 
  3508 ;; Return value:  Size  Location     Type
  3509 ;;                  4    0[COMRAM] unsigned long 
  3510 ;; Registers used:
  3511 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3512 ;; Tracked objects:
  3513 ;;		On entry : 0/0
  3514 ;;		On exit  : 0/0
  3515 ;;		Unchanged: 0/0
  3516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3517 ;;      Params:         4       0       0       0       0       0       0       0       0
  3518 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3519 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3520 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3521 ;;Total ram usage:       14 bytes
  3522 ;; Hardware stack levels used:    1
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_follow_path
  3527 ;;		_f_open
  3528 ;; This function uses a non-reentrant model
  3529 ;;
  3530                           
  3531                           	psect	text6
  3532  005144                     __ptext6:
  3533                           	opt callstack 0
  3534  005144                     _ld_clust:
  3535                           	opt callstack 28
  3536                           
  3537                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;incstack = 0
  3541  005144  0E1A               	movlw	26
  3542  005146  2403               	addwf	ld_clust@dir,w,c
  3543  005148  6ED9               	movwf	fsr2l,c
  3544  00514A  0E00               	movlw	0
  3545  00514C  2004               	addwfc	ld_clust@dir+1,w,c
  3546  00514E  6EDA               	movwf	fsr2h,c
  3547  005150  CFDE F005          	movff	postinc2,??_ld_clust
  3548  005154  CFDD F006          	movff	postdec2,??_ld_clust+1
  3549  005158  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3550  00515C  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3551  005160  6A0D               	clrf	ld_clust@cl+2,c
  3552  005162  6A0E               	clrf	ld_clust@cl+3,c
  3553                           
  3554                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3555  005164  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3556  005168  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3557  00516C  0E03               	movlw	3
  3558  00516E  18DE               	xorwf	postinc2,w,c
  3559  005170  A4D8               	btfss	status,2,c
  3560  005172  D01E               	goto	l5102
  3561                           
  3562                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3563  005174  0E14               	movlw	20
  3564  005176  2403               	addwf	ld_clust@dir,w,c
  3565  005178  6ED9               	movwf	fsr2l,c
  3566  00517A  0E00               	movlw	0
  3567  00517C  2004               	addwfc	ld_clust@dir+1,w,c
  3568  00517E  6EDA               	movwf	fsr2h,c
  3569  005180  CFDE F005          	movff	postinc2,??_ld_clust
  3570  005184  CFDD F006          	movff	postdec2,??_ld_clust+1
  3571  005188  5005               	movf	??_ld_clust,w,c
  3572  00518A  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3573  00518C  5006               	movf	??_ld_clust+1,w,c
  3574  00518E  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3575  005190  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3576  005192  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3577  005194  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3578  005198  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3579  00519C  6A08               	clrf	??_ld_clust+3,c
  3580  00519E  6A07               	clrf	??_ld_clust+2,c
  3581  0051A0  5007               	movf	??_ld_clust+2,w,c
  3582  0051A2  120B               	iorwf	ld_clust@cl,f,c
  3583  0051A4  5008               	movf	??_ld_clust+3,w,c
  3584  0051A6  120C               	iorwf	ld_clust@cl+1,f,c
  3585  0051A8  5009               	movf	??_ld_clust+4,w,c
  3586  0051AA  120D               	iorwf	ld_clust@cl+2,f,c
  3587  0051AC  500A               	movf	??_ld_clust+5,w,c
  3588  0051AE  120E               	iorwf	ld_clust@cl+3,f,c
  3589  0051B0                     l5102:
  3590                           
  3591                           ;ff.c: 1246:  return cl;
  3592  0051B0  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3593  0051B4  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3594  0051B8  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3595  0051BC  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3596  0051C0  0012               	return		;funcret
  3597  0051C2                     __end_of_ld_clust:
  3598                           	opt callstack 0
  3599                           
  3600 ;; *************** function _dir_find *****************
  3601 ;; Defined at:
  3602 ;;		line 1458 in file "ff.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  dp              2   32[BANK0 ] PTR struct .
  3605 ;;		 -> f_open@dj(22), 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3608 ;;		 -> NULL(0), FatFs(558), 
  3609 ;;  res             1   37[BANK0 ] enum E93
  3610 ;;  c               1   34[BANK0 ] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      enum E93
  3613 ;; Registers used:
  3614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3620 ;;      Params:         0       2       0       0       0       0       0       0       0
  3621 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3623 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        6 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:   11
  3627 ;; This function calls:
  3628 ;;		_dir_next
  3629 ;;		_dir_sdi
  3630 ;;		_mem_cmp
  3631 ;;		_move_window
  3632 ;; This function is called by:
  3633 ;;		_follow_path
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text7
  3638  0047B0                     __ptext7:
  3639                           	opt callstack 0
  3640  0047B0                     _dir_find:
  3641                           	opt callstack 16
  3642                           
  3643                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3644                           
  3645                           ;incstack = 0
  3646  0047B0  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3647  0047B4  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3648  0047B8  0E00               	movlw	0
  3649  0047BA  6E59               	movwf	dir_sdi@idx+1,c
  3650  0047BC  0E00               	movlw	0
  3651  0047BE  6E58               	movwf	dir_sdi@idx,c
  3652  0047C0  EC29  F01B         	call	_dir_sdi	;wreg free
  3653  0047C4  0100               	movlb	0	; () banked
  3654  0047C6  6F85               	movwf	dir_find@res& (0+255),b
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3658  0047C8  5185               	movf	dir_find@res& (0+255),w,b
  3659  0047CA  B4D8               	btfsc	status,2,c
  3660  0047CC  D003               	goto	l5116
  3661  0047CE                     u6540:
  3662  0047CE  0100               	movlb	0	; () banked
  3663  0047D0  5185               	movf	dir_find@res& (0+255),w,b
  3664  0047D2  0012               	return	
  3665  0047D4                     l5116:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3669  0047D4  C080  FFD9         	movff	dir_find@dp,fsr2l
  3670  0047D8  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3671  0047DC  CFDE F030          	movff	postinc2,move_window@fs
  3672  0047E0  CFDD F031          	movff	postdec2,move_window@fs+1
  3673  0047E4  EE20 F00E          	lfsr	2,14
  3674  0047E8  5180               	movf	dir_find@dp& (0+255),w,b
  3675  0047EA  26D9               	addwf	fsr2l,f,c
  3676  0047EC  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3677  0047EE  22DA               	addwfc	fsr2h,f,c
  3678  0047F0  CFDE F032          	movff	postinc2,move_window@sector
  3679  0047F4  CFDE F033          	movff	postinc2,move_window@sector+1
  3680  0047F8  CFDE F034          	movff	postinc2,move_window@sector+2
  3681  0047FC  CFDE F035          	movff	postinc2,move_window@sector+3
  3682  004800  EC83  F027         	call	_move_window	;wreg free
  3683  004804  0100               	movlb	0	; () banked
  3684  004806  6F85               	movwf	dir_find@res& (0+255),b
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;ff.c: 1476:   if (res != FR_OK) break;
  3688  004808  5185               	movf	dir_find@res& (0+255),w,b
  3689  00480A  A4D8               	btfss	status,2,c
  3690  00480C  D7E0               	goto	u6540
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;ff.c: 1477:   dir = dp->dir;
  3694  00480E  EE20 F012          	lfsr	2,18
  3695  004812  5180               	movf	dir_find@dp& (0+255),w,b
  3696  004814  26D9               	addwf	fsr2l,f,c
  3697  004816  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3698  004818  22DA               	addwfc	fsr2h,f,c
  3699  00481A  CFDE F083          	movff	postinc2,dir_find@dir
  3700  00481E  CFDD F084          	movff	postdec2,dir_find@dir+1
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;ff.c: 1478:   c = dir[0];
  3704  004822  C083  FFD9         	movff	dir_find@dir,fsr2l
  3705  004826  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3706  00482A  50DF               	movf	indf2,w,c
  3707  00482C  6F82               	movwf	dir_find@c& (0+255),b
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3711  00482E  5182               	movf	dir_find@c& (0+255),w,b
  3712  004830  A4D8               	btfss	status,2,c
  3713  004832  D003               	goto	l5130
  3714                           
  3715                           ; BSR set to: 0
  3716  004834  0E04               	movlw	4
  3717  004836  6F85               	movwf	dir_find@res& (0+255),b
  3718  004838  D7CA               	goto	u6540
  3719  00483A                     l5130:
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3723  00483A  EE20 F00B          	lfsr	2,11
  3724  00483E  5183               	movf	dir_find@dir& (0+255),w,b
  3725  004840  26D9               	addwf	fsr2l,f,c
  3726  004842  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3727  004844  22DA               	addwfc	fsr2h,f,c
  3728  004846  B6DF               	btfsc	indf2,3,c
  3729  004848  D018               	goto	l5136
  3730                           
  3731                           ; BSR set to: 0
  3732  00484A  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3733  00484E  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3734  004852  EE20 F014          	lfsr	2,20
  3735  004856  5180               	movf	dir_find@dp& (0+255),w,b
  3736  004858  26D9               	addwf	fsr2l,f,c
  3737  00485A  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3738  00485C  22DA               	addwfc	fsr2h,f,c
  3739  00485E  CFDE F003          	movff	postinc2,mem_cmp@src
  3740  004862  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3741  004866  0E00               	movlw	0
  3742  004868  6E06               	movwf	mem_cmp@cnt+1,c
  3743  00486A  0E0B               	movlw	11
  3744  00486C  6E05               	movwf	mem_cmp@cnt,c
  3745  00486E  EC55  F029         	call	_mem_cmp	;wreg free
  3746  004872  5001               	movf	?_mem_cmp,w,c
  3747  004874  1002               	iorwf	?_mem_cmp+1,w,c
  3748  004876  B4D8               	btfsc	status,2,c
  3749  004878  D7AA               	goto	u6540
  3750  00487A                     l5136:
  3751                           
  3752                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3753  00487A  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3754  00487E  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3755  004882  0E00               	movlw	0
  3756  004884  0100               	movlb	0	; () banked
  3757  004886  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3758  004888  0E00               	movlw	0
  3759  00488A  6F6F               	movwf	dir_next@stretch& (0+255),b
  3760  00488C  EC0D  F014         	call	_dir_next	;wreg free
  3761  004890  0100               	movlb	0	; () banked
  3762  004892  6F85               	movwf	dir_find@res& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;ff.c: 1506:  } while (res == FR_OK);
  3766  004894  5185               	movf	dir_find@res& (0+255),w,b
  3767  004896  A4D8               	btfss	status,2,c
  3768  004898  D79A               	goto	u6540
  3769  00489A  D79C               	goto	l5116
  3770  00489C                     __end_of_dir_find:
  3771                           	opt callstack 0
  3772                           
  3773 ;; *************** function _mem_cmp *****************
  3774 ;; Defined at:
  3775 ;;		line 533 in file "ff.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  dst             2    0[COMRAM] PTR const void 
  3778 ;;		 -> NULL(0), FatFs(558), 
  3779 ;;  src             2    2[COMRAM] PTR const void 
  3780 ;;		 -> f_open@sfn(12), 
  3781 ;;  cnt             2    4[COMRAM] unsigned short 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  r               2   12[COMRAM] int 
  3784 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3785 ;;		 -> f_open@sfn(12), 
  3786 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3787 ;;		 -> NULL(0), FatFs(558), 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  2    0[COMRAM] int 
  3790 ;; Registers used:
  3791 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3797 ;;      Params:         6       0       0       0       0       0       0       0       0
  3798 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3799 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3800 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3801 ;;Total ram usage:       14 bytes
  3802 ;; Hardware stack levels used:    1
  3803 ;; This function calls:
  3804 ;;		Nothing
  3805 ;; This function is called by:
  3806 ;;		_dir_find
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810                           	psect	text8
  3811  0052AA                     __ptext8:
  3812                           	opt callstack 0
  3813  0052AA                     _mem_cmp:
  3814                           	opt callstack 26
  3815                           
  3816                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;incstack = 0
  3820  0052AA  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3821  0052AE  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3822  0052B2  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3823  0052B6  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3824                           
  3825                           ;ff.c: 535:  int r = 0;
  3826  0052BA  0E00               	movlw	0
  3827  0052BC  6E0E               	movwf	mem_cmp@r+1,c
  3828  0052BE  0E00               	movlw	0
  3829  0052C0  6E0D               	movwf	mem_cmp@r,c
  3830  0052C2                     l4724:
  3831  0052C2  0605               	decf	mem_cmp@cnt,f,c
  3832  0052C4  A0D8               	btfss	status,0,c
  3833  0052C6  0606               	decf	mem_cmp@cnt+1,f,c
  3834  0052C8  2805               	incf	mem_cmp@cnt,w,c
  3835  0052CA  E103               	bnz	u5830
  3836  0052CC  2806               	incf	mem_cmp@cnt+1,w,c
  3837  0052CE  B4D8               	btfsc	status,2,c
  3838  0052D0  D01A               	goto	u5840
  3839  0052D2                     u5830:
  3840  0052D2  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3841  0052D6  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3842  0052DA  4A09               	infsnz	mem_cmp@d,f,c
  3843  0052DC  2A0A               	incf	mem_cmp@d+1,f,c
  3844  0052DE  50DF               	movf	indf2,w,c
  3845  0052E0  6E07               	movwf	??_mem_cmp& (0+255),c
  3846  0052E2  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3847  0052E6  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3848  0052EA  4A0B               	infsnz	mem_cmp@s,f,c
  3849  0052EC  2A0C               	incf	mem_cmp@s+1,f,c
  3850  0052EE  50DF               	movf	indf2,w,c
  3851  0052F0  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  3852  0052F2  5008               	movf	??_mem_cmp+1,w,c
  3853  0052F4  5C07               	subwf	??_mem_cmp,w,c
  3854  0052F6  6E0D               	movwf	mem_cmp@r,c
  3855  0052F8  6A0E               	clrf	mem_cmp@r+1,c
  3856  0052FA  A0D8               	btfss	status,0,c
  3857  0052FC  060E               	decf	mem_cmp@r+1,f,c
  3858  0052FE  500D               	movf	mem_cmp@r,w,c
  3859  005300  100E               	iorwf	mem_cmp@r+1,w,c
  3860  005302  B4D8               	btfsc	status,2,c
  3861  005304  D7DE               	goto	l4724
  3862  005306                     u5840:
  3863                           
  3864                           ;ff.c: 538:  return r;
  3865  005306  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3866  00530A  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3867  00530E  0012               	return		;funcret
  3868  005310                     __end_of_mem_cmp:
  3869                           	opt callstack 0
  3870                           
  3871 ;; *************** function _create_name *****************
  3872 ;; Defined at:
  3873 ;;		line 1843 in file "ff.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;  dp              2    8[COMRAM] PTR struct .
  3876 ;;		 -> f_open@dj(22), 
  3877 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3878 ;;		 -> follow_path@path(2), 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  i               2   28[COMRAM] unsigned short 
  3881 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  3882 ;;		 -> f_open@sfn(12), 
  3883 ;;  p               2   23[COMRAM] PTR const unsigned char 
  3884 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3885 ;;  ni              2   21[COMRAM] unsigned short 
  3886 ;;  si              2   18[COMRAM] unsigned short 
  3887 ;;  c               1   30[COMRAM] unsigned char 
  3888 ;;  d               1   25[COMRAM] unsigned char 
  3889 ;;  b               1   20[COMRAM] unsigned char 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      enum E93
  3892 ;; Registers used:
  3893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3899 ;;      Params:         4       0       0       0       0       0       0       0       0
  3900 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3901 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3902 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3903 ;;Total ram usage:       23 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    1
  3906 ;; This function calls:
  3907 ;;		_chk_chr
  3908 ;;		_mem_set
  3909 ;; This function is called by:
  3910 ;;		_follow_path
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text9
  3915  003914                     __ptext9:
  3916                           	opt callstack 0
  3917  003914                     _create_name:
  3918                           	opt callstack 26
  3919                           
  3920                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  3921                           
  3922                           ;incstack = 0
  3923  003914  C00B  FFD9         	movff	create_name@path,fsr2l
  3924  003918  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3925  00391C  CFDE F018          	movff	postinc2,create_name@p
  3926  003920  CFDD F019          	movff	postdec2,create_name@p+1
  3927  003924  D002               	goto	l5148
  3928  003926                     l5146:
  3929  003926  4A18               	infsnz	create_name@p,f,c
  3930  003928  2A19               	incf	create_name@p+1,f,c
  3931  00392A                     l5148:
  3932  00392A  C018  FFF6         	movff	create_name@p,tblptrl
  3933  00392E  C019  FFF7         	movff	create_name@p+1,tblptrh
  3934  003932                     	if	0	;tblptru may be non-zero
  3935  003932                     	endif
  3936  003932                     	if	0	;tblptru may be non-zero
  3937  003932                     	endif
  3938  003932  0008               	tblrd		*
  3939  003934  50F5               	movf	tablat,w,c
  3940  003936  0A2F               	xorlw	47
  3941  003938  B4D8               	btfsc	status,2,c
  3942  00393A  D7F5               	goto	l5146
  3943  00393C  C018  FFF6         	movff	create_name@p,tblptrl
  3944  003940  C019  FFF7         	movff	create_name@p+1,tblptrh
  3945  003944                     	if	0	;tblptru may be non-zero
  3946  003944                     	endif
  3947  003944                     	if	0	;tblptru may be non-zero
  3948  003944                     	endif
  3949  003944  0008               	tblrd		*
  3950  003946  50F5               	movf	tablat,w,c
  3951  003948  0A5C               	xorlw	92
  3952  00394A  B4D8               	btfsc	status,2,c
  3953  00394C  D7EC               	goto	l5146
  3954                           
  3955                           ;ff.c: 1975:  sfn = dp->fn;
  3956  00394E  EE20 F014          	lfsr	2,20
  3957  003952  5009               	movf	create_name@dp,w,c
  3958  003954  26D9               	addwf	fsr2l,f,c
  3959  003956  500A               	movf	create_name@dp+1,w,c
  3960  003958  22DA               	addwfc	fsr2h,f,c
  3961  00395A  CFDE F01B          	movff	postinc2,create_name@sfn
  3962  00395E  CFDD F01C          	movff	postdec2,create_name@sfn+1
  3963                           
  3964                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  3965  003962  C01B  F001         	movff	create_name@sfn,mem_set@dst
  3966  003966  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  3967  00396A  0E00               	movlw	0
  3968  00396C  6E04               	movwf	mem_set@val+1,c
  3969  00396E  0E20               	movlw	32
  3970  003970  6E03               	movwf	mem_set@val,c
  3971  003972  0E00               	movlw	0
  3972  003974  6E06               	movwf	mem_set@cnt+1,c
  3973  003976  0E0B               	movlw	11
  3974  003978  6E05               	movwf	mem_set@cnt,c
  3975  00397A  EC9F  F02A         	call	_mem_set	;wreg free
  3976                           
  3977                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  3978  00397E  0E00               	movlw	0
  3979  003980  6E15               	movwf	create_name@b,c
  3980  003982  C015  F01D         	movff	create_name@b,create_name@i
  3981  003986  6A1E               	clrf	create_name@i+1,c
  3982  003988  C01D  F013         	movff	create_name@i,create_name@si
  3983  00398C  C01E  F014         	movff	create_name@i+1,create_name@si+1
  3984  003990  0E00               	movlw	0
  3985  003992  6E17               	movwf	create_name@ni+1,c
  3986  003994  0E08               	movlw	8
  3987  003996  6E16               	movwf	create_name@ni,c
  3988  003998                     l5160:
  3989                           
  3990                           ;ff.c: 1992:   c = (BYTE)p[si++];
  3991  003998  5013               	movf	create_name@si,w,c
  3992  00399A  2418               	addwf	create_name@p,w,c
  3993  00399C  6E0D               	movwf	??_create_name& (0+255),c
  3994  00399E  5014               	movf	create_name@si+1,w,c
  3995  0039A0  2019               	addwfc	create_name@p+1,w,c
  3996  0039A2  6E0E               	movwf	(??_create_name+1)& (0+255),c
  3997  0039A4  C00D  FFF6         	movff	??_create_name,tblptrl
  3998  0039A8  C00E  FFF7         	movff	??_create_name+1,tblptrh
  3999  0039AC                     	if	0	;tblptru may be non-zero
  4000  0039AC                     	endif
  4001  0039AC                     	if	0	;tblptru may be non-zero
  4002  0039AC                     	endif
  4003  0039AC  0008               	tblrd		*
  4004  0039AE  CFF5 F01F          	movff	tablat,create_name@c
  4005  0039B2  4A13               	infsnz	create_name@si,f,c
  4006  0039B4  2A14               	incf	create_name@si+1,f,c
  4007                           
  4008                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4009  0039B6  0E20               	movlw	32
  4010  0039B8  641F               	cpfsgt	create_name@c,c
  4011  0039BA  D0A4               	goto	l5244
  4012  0039BC  0E2F               	movlw	47
  4013  0039BE  181F               	xorwf	create_name@c,w,c
  4014  0039C0  B4D8               	btfsc	status,2,c
  4015  0039C2  D0A0               	goto	l5244
  4016  0039C4  0E5C               	movlw	92
  4017  0039C6  181F               	xorwf	create_name@c,w,c
  4018  0039C8  B4D8               	btfsc	status,2,c
  4019  0039CA  D09C               	goto	l5244
  4020                           
  4021                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4022  0039CC  0E2E               	movlw	46
  4023  0039CE  181F               	xorwf	create_name@c,w,c
  4024  0039D0  B4D8               	btfsc	status,2,c
  4025  0039D2  D006               	goto	u6660
  4026  0039D4  5016               	movf	create_name@ni,w,c
  4027  0039D6  5C1D               	subwf	create_name@i,w,c
  4028  0039D8  5017               	movf	create_name@ni+1,w,c
  4029  0039DA  581E               	subwfb	create_name@i+1,w,c
  4030  0039DC  A0D8               	btfss	status,0,c
  4031  0039DE  D018               	goto	l5186
  4032  0039E0                     u6660:
  4033                           
  4034                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4035  0039E0  0E08               	movlw	8
  4036  0039E2  1816               	xorwf	create_name@ni,w,c
  4037  0039E4  1017               	iorwf	create_name@ni+1,w,c
  4038  0039E6  A4D8               	btfss	status,2,c
  4039  0039E8  D004               	goto	u6680
  4040  0039EA  0E2E               	movlw	46
  4041  0039EC  181F               	xorwf	create_name@c,w,c
  4042  0039EE  B4D8               	btfsc	status,2,c
  4043  0039F0  D002               	goto	l5182
  4044  0039F2                     u6680:
  4045  0039F2  0E06               	movlw	6
  4046  0039F4  0012               	return	
  4047  0039F6                     l5182:
  4048                           
  4049                           ;ff.c: 1996:    i = 8; ni = 11;
  4050  0039F6  0E00               	movlw	0
  4051  0039F8  6E1E               	movwf	create_name@i+1,c
  4052  0039FA  0E08               	movlw	8
  4053  0039FC  6E1D               	movwf	create_name@i,c
  4054  0039FE  0E00               	movlw	0
  4055  003A00  6E17               	movwf	create_name@ni+1,c
  4056  003A02  0E0B               	movlw	11
  4057  003A04  6E16               	movwf	create_name@ni,c
  4058                           
  4059                           ;ff.c: 1997:    b <<= 2; continue;
  4060  003A06  90D8               	bcf	status,0,c
  4061  003A08  3615               	rlcf	create_name@b,f,c
  4062  003A0A  90D8               	bcf	status,0,c
  4063  003A0C  3615               	rlcf	create_name@b,f,c
  4064  003A0E  D7C4               	goto	l5160
  4065  003A10                     l5186:
  4066                           
  4067                           ;ff.c: 1999:   if (c >= 0x80) {
  4068  003A10  0E7F               	movlw	127
  4069  003A12  641F               	cpfsgt	create_name@c,c
  4070  003A14  D002               	goto	l495
  4071                           
  4072                           ;ff.c: 2000:    b |= 3;
  4073  003A16  0E03               	movlw	3
  4074  003A18  1215               	iorwf	create_name@b,f,c
  4075  003A1A                     l495:
  4076                           
  4077                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4078  003A1A  0E80               	movlw	128
  4079  003A1C  641F               	cpfsgt	create_name@c,c
  4080  003A1E  D003               	goto	u6710
  4081  003A20  0E9F               	movlw	159
  4082  003A22  641F               	cpfsgt	create_name@c,c
  4083  003A24  D006               	goto	u6730
  4084  003A26                     u6710:
  4085  003A26  0EDF               	movlw	223
  4086  003A28  641F               	cpfsgt	create_name@c,c
  4087  003A2A  D043               	goto	l5220
  4088  003A2C  0EFD               	movlw	253
  4089  003A2E  601F               	cpfslt	create_name@c,c
  4090  003A30  D040               	goto	l5220
  4091  003A32                     u6730:
  4092                           
  4093                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4094  003A32  5013               	movf	create_name@si,w,c
  4095  003A34  2418               	addwf	create_name@p,w,c
  4096  003A36  6E0D               	movwf	??_create_name& (0+255),c
  4097  003A38  5014               	movf	create_name@si+1,w,c
  4098  003A3A  2019               	addwfc	create_name@p+1,w,c
  4099  003A3C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4100  003A3E  C00D  FFF6         	movff	??_create_name,tblptrl
  4101  003A42  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4102  003A46                     	if	0	;tblptru may be non-zero
  4103  003A46                     	endif
  4104  003A46                     	if	0	;tblptru may be non-zero
  4105  003A46                     	endif
  4106  003A46  0008               	tblrd		*
  4107  003A48  CFF5 F01A          	movff	tablat,create_name@d
  4108  003A4C  4A13               	infsnz	create_name@si,f,c
  4109  003A4E  2A14               	incf	create_name@si+1,f,c
  4110                           
  4111                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4112  003A50  0E3F               	movlw	63
  4113  003A52  641A               	cpfsgt	create_name@d,c
  4114  003A54  D003               	goto	u6750
  4115  003A56  0E7E               	movlw	126
  4116  003A58  641A               	cpfsgt	create_name@d,c
  4117  003A5A  D006               	goto	u6770
  4118  003A5C                     u6750:
  4119  003A5C  0E7F               	movlw	127
  4120  003A5E  641A               	cpfsgt	create_name@d,c
  4121  003A60  D7C8               	goto	u6680
  4122  003A62  0EFD               	movlw	253
  4123  003A64  601A               	cpfslt	create_name@d,c
  4124  003A66  D7C5               	goto	u6680
  4125  003A68                     u6770:
  4126  003A68  0EFF               	movlw	255
  4127  003A6A  6E0D               	movwf	??_create_name& (0+255),c
  4128  003A6C  0EFF               	movlw	255
  4129  003A6E  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4130  003A70  C016  F00F         	movff	create_name@ni,??_create_name+2
  4131  003A74  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4132  003A78  500D               	movf	??_create_name,w,c
  4133  003A7A  260F               	addwf	??_create_name+2,f,c
  4134  003A7C  500E               	movf	??_create_name+1,w,c
  4135  003A7E  2210               	addwfc	??_create_name+3,f,c
  4136  003A80  500F               	movf	??_create_name+2,w,c
  4137  003A82  5C1D               	subwf	create_name@i,w,c
  4138  003A84  5010               	movf	??_create_name+3,w,c
  4139  003A86  581E               	subwfb	create_name@i+1,w,c
  4140  003A88  B0D8               	btfsc	status,0,c
  4141  003A8A  D7B3               	goto	u6680
  4142                           
  4143                           ;ff.c: 2013:    sfn[i++] = c;
  4144  003A8C  501D               	movf	create_name@i,w,c
  4145  003A8E  241B               	addwf	create_name@sfn,w,c
  4146  003A90  6ED9               	movwf	fsr2l,c
  4147  003A92  501E               	movf	create_name@i+1,w,c
  4148  003A94  201C               	addwfc	create_name@sfn+1,w,c
  4149  003A96  6EDA               	movwf	fsr2h,c
  4150  003A98  C01F  FFDF         	movff	create_name@c,indf2
  4151  003A9C  4A1D               	infsnz	create_name@i,f,c
  4152  003A9E  2A1E               	incf	create_name@i+1,f,c
  4153                           
  4154                           ;ff.c: 2014:    sfn[i++] = d;
  4155  003AA0  501D               	movf	create_name@i,w,c
  4156  003AA2  241B               	addwf	create_name@sfn,w,c
  4157  003AA4  6ED9               	movwf	fsr2l,c
  4158  003AA6  501E               	movf	create_name@i+1,w,c
  4159  003AA8  201C               	addwfc	create_name@sfn+1,w,c
  4160  003AAA  6EDA               	movwf	fsr2h,c
  4161  003AAC  C01A  FFDF         	movff	create_name@d,indf2
  4162  003AB0  D026               	goto	l5242
  4163  003AB2                     l5220:
  4164                           
  4165                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4166  003AB2  0E16               	movlw	low STR_5
  4167  003AB4  6E01               	movwf	chk_chr@str,c
  4168  003AB6  0E08               	movlw	high STR_5
  4169  003AB8  6E02               	movwf	chk_chr@str+1,c
  4170  003ABA  C01F  F003         	movff	create_name@c,chk_chr@chr
  4171  003ABE  6A04               	clrf	chk_chr@chr+1,c
  4172  003AC0  ECB3  F029         	call	_chk_chr	;wreg free
  4173  003AC4  5001               	movf	?_chk_chr,w,c
  4174  003AC6  1002               	iorwf	?_chk_chr+1,w,c
  4175  003AC8  A4D8               	btfss	status,2,c
  4176  003ACA  D793               	goto	u6680
  4177                           
  4178                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4179  003ACC  0E40               	movlw	64
  4180  003ACE  641F               	cpfsgt	create_name@c,c
  4181  003AD0  D005               	goto	l5232
  4182  003AD2  0E5B               	movlw	91
  4183  003AD4  601F               	cpfslt	create_name@c,c
  4184  003AD6  D002               	goto	l5232
  4185                           
  4186                           ;ff.c: 2019:     b |= 2;
  4187  003AD8  8215               	bsf	create_name@b,1,c
  4188                           
  4189                           ;ff.c: 2020:    } else {
  4190  003ADA  D009               	goto	l5240
  4191  003ADC                     l5232:
  4192                           
  4193                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4194  003ADC  0E60               	movlw	96
  4195  003ADE  641F               	cpfsgt	create_name@c,c
  4196  003AE0  D006               	goto	l5240
  4197  003AE2  0E7B               	movlw	123
  4198  003AE4  601F               	cpfslt	create_name@c,c
  4199  003AE6  D003               	goto	l5240
  4200                           
  4201                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4202  003AE8  8015               	bsf	create_name@b,0,c
  4203  003AEA  0E20               	movlw	32
  4204  003AEC  5E1F               	subwf	create_name@c,f,c
  4205  003AEE                     l5240:
  4206                           
  4207                           ;ff.c: 2025:    sfn[i++] = c;
  4208  003AEE  501D               	movf	create_name@i,w,c
  4209  003AF0  241B               	addwf	create_name@sfn,w,c
  4210  003AF2  6ED9               	movwf	fsr2l,c
  4211  003AF4  501E               	movf	create_name@i+1,w,c
  4212  003AF6  201C               	addwfc	create_name@sfn+1,w,c
  4213  003AF8  6EDA               	movwf	fsr2h,c
  4214  003AFA  C01F  FFDF         	movff	create_name@c,indf2
  4215  003AFE                     l5242:
  4216  003AFE  4A1D               	infsnz	create_name@i,f,c
  4217  003B00  2A1E               	incf	create_name@i+1,f,c
  4218  003B02  D74A               	goto	l5160
  4219  003B04                     l5244:
  4220                           
  4221                           ;ff.c: 2028:  *path = &p[si];
  4222  003B04  5013               	movf	create_name@si,w,c
  4223  003B06  2418               	addwf	create_name@p,w,c
  4224  003B08  6E0D               	movwf	??_create_name& (0+255),c
  4225  003B0A  5014               	movf	create_name@si+1,w,c
  4226  003B0C  2019               	addwfc	create_name@p+1,w,c
  4227  003B0E  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4228  003B10  C00B  FFD9         	movff	create_name@path,fsr2l
  4229  003B14  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4230  003B18  C00D  FFDE         	movff	??_create_name,postinc2
  4231  003B1C  C00E  FFDD         	movff	??_create_name+1,postdec2
  4232                           
  4233                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4234  003B20  0E20               	movlw	32
  4235  003B22  641F               	cpfsgt	create_name@c,c
  4236  003B24  D004               	goto	l5250
  4237  003B26  0E00               	movlw	0
  4238  003B28  6E12               	movwf	_create_name$816+1,c
  4239  003B2A  0E00               	movlw	0
  4240  003B2C  D003               	goto	L5
  4241  003B2E                     l5250:
  4242  003B2E  0E00               	movlw	0
  4243  003B30  6E12               	movwf	_create_name$816+1,c
  4244  003B32  0E04               	movlw	4
  4245  003B34                     L5:
  4246  003B34  6E11               	movwf	_create_name$816,c
  4247  003B36  C011  F01F         	movff	_create_name$816,create_name@c
  4248                           
  4249                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4250  003B3A  501D               	movf	create_name@i,w,c
  4251  003B3C  101E               	iorwf	create_name@i+1,w,c
  4252  003B3E  B4D8               	btfsc	status,2,c
  4253  003B40  D758               	goto	u6680
  4254                           
  4255                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4256  003B42  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4257  003B46  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4258  003B4A  0EE5               	movlw	229
  4259  003B4C  18DE               	xorwf	postinc2,w,c
  4260  003B4E  A4D8               	btfss	status,2,c
  4261  003B50  D006               	goto	l5264
  4262  003B52  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4263  003B56  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4264  003B5A  0E05               	movlw	5
  4265  003B5C  6EDF               	movwf	indf2,c
  4266  003B5E                     l5264:
  4267                           
  4268                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4269  003B5E  0E08               	movlw	8
  4270  003B60  1816               	xorwf	create_name@ni,w,c
  4271  003B62  1017               	iorwf	create_name@ni+1,w,c
  4272  003B64  A4D8               	btfss	status,2,c
  4273  003B66  D004               	goto	l519
  4274  003B68  90D8               	bcf	status,0,c
  4275  003B6A  3615               	rlcf	create_name@b,f,c
  4276  003B6C  90D8               	bcf	status,0,c
  4277  003B6E  3615               	rlcf	create_name@b,f,c
  4278  003B70                     l519:
  4279                           
  4280                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4281  003B70  5015               	movf	create_name@b,w,c
  4282  003B72  0B03               	andlw	3
  4283  003B74  06E8               	decf	wreg,f,c
  4284  003B76  B4D8               	btfsc	status,2,c
  4285  003B78  881F               	bsf	create_name@c,4,c
  4286                           
  4287                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4288  003B7A  5015               	movf	create_name@b,w,c
  4289  003B7C  0B0C               	andlw	12
  4290  003B7E  0A04               	xorlw	4
  4291  003B80  B4D8               	btfsc	status,2,c
  4292  003B82  861F               	bsf	create_name@c,3,c
  4293                           
  4294                           ;ff.c: 2038:  sfn[11] = c;
  4295  003B84  EE20 F00B          	lfsr	2,11
  4296  003B88  501B               	movf	create_name@sfn,w,c
  4297  003B8A  26D9               	addwf	fsr2l,f,c
  4298  003B8C  501C               	movf	create_name@sfn+1,w,c
  4299  003B8E  22DA               	addwfc	fsr2h,f,c
  4300  003B90  C01F  FFDF         	movff	create_name@c,indf2
  4301                           
  4302                           ;ff.c: 2040:  return FR_OK;
  4303  003B94  0E00               	movlw	0
  4304  003B96  0012               	return		;funcret
  4305  003B98                     __end_of_create_name:
  4306                           	opt callstack 0
  4307                           
  4308 ;; *************** function _chk_chr *****************
  4309 ;; Defined at:
  4310 ;;		line 543 in file "ff.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4313 ;;		 -> STR_6(15), 
  4314 ;;  chr             2    2[COMRAM] int 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    0[COMRAM] int 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4326 ;;      Params:         4       0       0       0       0       0       0       0       0
  4327 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4328 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4329 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4330 ;;Total ram usage:        6 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_create_name
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text10
  4340  005366                     __ptext10:
  4341                           	opt callstack 0
  4342  005366                     _chk_chr:
  4343                           	opt callstack 26
  4344                           
  4345                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4346                           
  4347                           ;incstack = 0
  4348  005366  D002               	goto	l4732
  4349  005368                     l4730:
  4350  005368  4A01               	infsnz	chk_chr@str,f,c
  4351  00536A  2A02               	incf	chk_chr@str+1,f,c
  4352  00536C                     l4732:
  4353  00536C  C001  FFF6         	movff	chk_chr@str,tblptrl
  4354  005370  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4355  005374                     	if	0	;tblptru may be non-zero
  4356  005374                     	endif
  4357  005374                     	if	0	;tblptru may be non-zero
  4358  005374                     	endif
  4359  005374  0008               	tblrd		*
  4360  005376  50F5               	movf	tablat,w,c
  4361  005378  0900               	iorlw	0
  4362  00537A  B4D8               	btfsc	status,2,c
  4363  00537C  D00F               	goto	u5860
  4364  00537E  C001  FFF6         	movff	chk_chr@str,tblptrl
  4365  005382  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4366  005386                     	if	0	;tblptru may be non-zero
  4367  005386                     	endif
  4368  005386                     	if	0	;tblptru may be non-zero
  4369  005386                     	endif
  4370  005386  0008               	tblrd		*
  4371  005388  50F5               	movf	tablat,w,c
  4372  00538A  6E05               	movwf	??_chk_chr& (0+255),c
  4373  00538C  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4374  00538E  5003               	movf	chk_chr@chr,w,c
  4375  005390  1805               	xorwf	??_chk_chr,w,c
  4376  005392  E1EA               	bnz	l4730
  4377  005394  5004               	movf	chk_chr@chr+1,w,c
  4378  005396  1806               	xorwf	??_chk_chr+1,w,c
  4379  005398  A4D8               	btfss	status,2,c
  4380  00539A  D7E6               	goto	l4730
  4381  00539C                     u5860:
  4382                           
  4383                           ;ff.c: 545:  return *str;
  4384  00539C  C001  FFF6         	movff	chk_chr@str,tblptrl
  4385  0053A0  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4386  0053A4                     	if	0	;tblptru may be non-zero
  4387  0053A4                     	endif
  4388  0053A4                     	if	0	;tblptru may be non-zero
  4389  0053A4                     	endif
  4390  0053A4  0008               	tblrd		*
  4391  0053A6  50F5               	movf	tablat,w,c
  4392  0053A8  6E01               	movwf	?_chk_chr,c
  4393  0053AA  6A02               	clrf	?_chk_chr+1,c
  4394  0053AC  0012               	return		;funcret
  4395  0053AE                     __end_of_chk_chr:
  4396                           	opt callstack 0
  4397                           
  4398 ;; *************** function _dir_register *****************
  4399 ;; Defined at:
  4400 ;;		line 1578 in file "ff.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  dp              2   42[BANK0 ] PTR struct .
  4403 ;;		 -> f_open@dj(22), 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  res             1   44[BANK0 ] enum E93
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      enum E93
  4408 ;; Registers used:
  4409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4415 ;;      Params:         0       2       0       0       0       0       0       0       0
  4416 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4418 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4419 ;;Total ram usage:        3 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:   12
  4422 ;; This function calls:
  4423 ;;		_dir_alloc
  4424 ;;		_mem_cpy
  4425 ;;		_mem_set
  4426 ;;		_move_window
  4427 ;; This function is called by:
  4428 ;;		_f_open
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text11
  4433  004B40                     __ptext11:
  4434                           	opt callstack 0
  4435  004B40                     _dir_register:
  4436                           	opt callstack 16
  4437                           
  4438                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4439                           
  4440                           ;incstack = 0
  4441  004B40  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4442  004B44  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4443  004B48  0E00               	movlw	0
  4444  004B4A  0100               	movlb	0	; () banked
  4445  004B4C  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4446  004B4E  0E01               	movlw	1
  4447  004B50  6F82               	movwf	dir_alloc@nent& (0+255),b
  4448  004B52  EC60  F023         	call	_dir_alloc	;wreg free
  4449  004B56  0100               	movlb	0	; () banked
  4450  004B58  6F8C               	movwf	dir_register@res& (0+255),b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;ff.c: 1632:  if (res == FR_OK) {
  4454  004B5A  518C               	movf	dir_register@res& (0+255),w,b
  4455  004B5C  A4D8               	btfss	status,2,c
  4456  004B5E  D058               	goto	l5446
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4460  004B60  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4461  004B64  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4462  004B68  CFDE F030          	movff	postinc2,move_window@fs
  4463  004B6C  CFDD F031          	movff	postdec2,move_window@fs+1
  4464  004B70  EE20 F00E          	lfsr	2,14
  4465  004B74  518A               	movf	dir_register@dp& (0+255),w,b
  4466  004B76  26D9               	addwf	fsr2l,f,c
  4467  004B78  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4468  004B7A  22DA               	addwfc	fsr2h,f,c
  4469  004B7C  CFDE F032          	movff	postinc2,move_window@sector
  4470  004B80  CFDE F033          	movff	postinc2,move_window@sector+1
  4471  004B84  CFDE F034          	movff	postinc2,move_window@sector+2
  4472  004B88  CFDE F035          	movff	postinc2,move_window@sector+3
  4473  004B8C  EC83  F027         	call	_move_window	;wreg free
  4474  004B90  0100               	movlb	0	; () banked
  4475  004B92  6F8C               	movwf	dir_register@res& (0+255),b
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;ff.c: 1634:   if (res == FR_OK) {
  4479  004B94  518C               	movf	dir_register@res& (0+255),w,b
  4480  004B96  A4D8               	btfss	status,2,c
  4481  004B98  D03B               	goto	l5446
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4485  004B9A  EE20 F012          	lfsr	2,18
  4486  004B9E  518A               	movf	dir_register@dp& (0+255),w,b
  4487  004BA0  26D9               	addwf	fsr2l,f,c
  4488  004BA2  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4489  004BA4  22DA               	addwfc	fsr2h,f,c
  4490  004BA6  CFDE F001          	movff	postinc2,mem_set@dst
  4491  004BAA  CFDD F002          	movff	postdec2,mem_set@dst+1
  4492  004BAE  0E00               	movlw	0
  4493  004BB0  6E04               	movwf	mem_set@val+1,c
  4494  004BB2  0E00               	movlw	0
  4495  004BB4  6E03               	movwf	mem_set@val,c
  4496  004BB6  0E00               	movlw	0
  4497  004BB8  6E06               	movwf	mem_set@cnt+1,c
  4498  004BBA  0E20               	movlw	32
  4499  004BBC  6E05               	movwf	mem_set@cnt,c
  4500  004BBE  EC9F  F02A         	call	_mem_set	;wreg free
  4501                           
  4502                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4503  004BC2  0100               	movlb	0	; () banked
  4504  004BC4  EE20 F012          	lfsr	2,18
  4505  004BC8  518A               	movf	dir_register@dp& (0+255),w,b
  4506  004BCA  26D9               	addwf	fsr2l,f,c
  4507  004BCC  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4508  004BCE  22DA               	addwfc	fsr2h,f,c
  4509  004BD0  CFDE F001          	movff	postinc2,mem_cpy@dst
  4510  004BD4  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4511  004BD8  EE20 F014          	lfsr	2,20
  4512  004BDC  518A               	movf	dir_register@dp& (0+255),w,b
  4513  004BDE  26D9               	addwf	fsr2l,f,c
  4514  004BE0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4515  004BE2  22DA               	addwfc	fsr2h,f,c
  4516  004BE4  CFDE F003          	movff	postinc2,mem_cpy@src
  4517  004BE8  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4518  004BEC  0E00               	movlw	0
  4519  004BEE  6E06               	movwf	mem_cpy@cnt+1,c
  4520  004BF0  0E0B               	movlw	11
  4521  004BF2  6E05               	movwf	mem_cpy@cnt,c
  4522  004BF4  EC71  F026         	call	_mem_cpy	;wreg free
  4523                           
  4524                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4525  004BF8  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4526  004BFC  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4527  004C00  EE10 F004          	lfsr	1,4
  4528  004C04  50DE               	movf	postinc2,w,c
  4529  004C06  26E1               	addwf	fsr1l,f,c
  4530  004C08  50DD               	movf	postdec2,w,c
  4531  004C0A  22E2               	addwfc	fsr1h,f,c
  4532  004C0C  0E01               	movlw	1
  4533  004C0E  6EE7               	movwf	indf1,c
  4534  004C10                     l5446:
  4535                           
  4536                           ;ff.c: 1644:  return res;
  4537  004C10  0100               	movlb	0	; () banked
  4538  004C12  518C               	movf	dir_register@res& (0+255),w,b
  4539                           
  4540                           ; BSR set to: 0
  4541  004C14  0012               	return		;funcret
  4542  004C16                     __end_of_dir_register:
  4543                           	opt callstack 0
  4544                           
  4545 ;; *************** function _mem_cpy *****************
  4546 ;; Defined at:
  4547 ;;		line 507 in file "ff.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  dst             2    0[COMRAM] PTR void 
  4550 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4551 ;;  src             2    2[COMRAM] PTR const void 
  4552 ;;		 -> f_open@sfn(12), NULL(0), STR_4(21), FatFs(558), 
  4553 ;;  cnt             2    4[COMRAM] unsigned short 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4556 ;;		 -> f_open@sfn(12), NULL(0), STR_4(21), FatFs(558), 
  4557 ;;  d               2    8[COMRAM] PTR unsigned char 
  4558 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      void 
  4561 ;; Registers used:
  4562 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4568 ;;      Params:         6       0       0       0       0       0       0       0       0
  4569 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4570 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4571 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4572 ;;Total ram usage:       12 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_dir_register
  4578 ;;		_f_write
  4579 ;;		_f_read
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text12
  4584  004CE2                     __ptext12:
  4585                           	opt callstack 0
  4586  004CE2                     _mem_cpy:
  4587                           	opt callstack 28
  4588                           
  4589                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;incstack = 0
  4593  004CE2  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4594  004CE6  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4595                           
  4596                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4597  004CEA  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4598  004CEE  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4599                           
  4600                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4601  004CF2  D02B               	goto	l5024
  4602  004CF4                     l5016:
  4603                           
  4604                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4605  004CF4  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4606  004CF8  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4607  004CFC  6AF8               	clrf	tblptru,c
  4608  004CFE  0E07               	movlw	(high __ramtop+-1)
  4609  004D00  64F7               	cpfsgt	tblptrh,c
  4610  004D02  D007               	bra	u6387
  4611  004D04  0009               	tblrd		*+
  4612  004D06  CFF5 F007          	movff	tablat,??_mem_cpy
  4613  004D0A  0009               	tblrd		*+
  4614  004D0C  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4615  004D10  D008               	bra	u6380
  4616  004D12                     u6387:
  4617  004D12  CFF6 FFE9          	movff	tblptrl,fsr0l
  4618  004D16  CFF7 FFEA          	movff	tblptrh,fsr0h
  4619  004D1A  CFEE F007          	movff	postinc0,??_mem_cpy
  4620  004D1E  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4621  004D22                     u6380:
  4622  004D22  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4623  004D26  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4624  004D2A  C007  FFDE         	movff	??_mem_cpy,postinc2
  4625  004D2E  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4626                           
  4627                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4628  004D32  0E02               	movlw	2
  4629  004D34  2609               	addwf	mem_cpy@d,f,c
  4630  004D36  0E00               	movlw	0
  4631  004D38  220A               	addwfc	mem_cpy@d+1,f,c
  4632  004D3A  0E02               	movlw	2
  4633  004D3C  260B               	addwf	mem_cpy@s,f,c
  4634  004D3E  0E00               	movlw	0
  4635  004D40  220C               	addwfc	mem_cpy@s+1,f,c
  4636                           
  4637                           ;ff.c: 515:   cnt -= sizeof (int);
  4638  004D42  0E02               	movlw	2
  4639  004D44  5E05               	subwf	mem_cpy@cnt,f,c
  4640  004D46  0E00               	movlw	0
  4641  004D48  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4642  004D4A                     l5024:
  4643                           
  4644                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4645  004D4A  5006               	movf	mem_cpy@cnt+1,w,c
  4646  004D4C  E1D3               	bnz	l5016
  4647  004D4E  0E02               	movlw	2
  4648  004D50  5C05               	subwf	mem_cpy@cnt,w,c
  4649  004D52  A0D8               	btfss	status,0,c
  4650  004D54  D01A               	goto	l5032
  4651  004D56  D7CE               	goto	l5016
  4652  004D58                     l5026:
  4653                           
  4654                           ;ff.c: 519:   *d++ = *s++;
  4655  004D58  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4656  004D5C  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4657  004D60  6AF8               	clrf	tblptru,c
  4658  004D62  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4659  004D66  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4660  004D6A  0E07               	movlw	(high __ramtop+-1)
  4661  004D6C  64F7               	cpfsgt	tblptrh,c
  4662  004D6E  D003               	bra	u6407
  4663  004D70  0008               	tblrd		*
  4664  004D72  50F5               	movf	tablat,w,c
  4665  004D74  D005               	bra	u6400
  4666  004D76                     u6407:
  4667  004D76  CFF6 FFE9          	movff	tblptrl,fsr0l
  4668  004D7A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4669  004D7E  50EF               	movf	indf0,w,c
  4670  004D80                     u6400:
  4671  004D80  6EDF               	movwf	indf2,c
  4672  004D82  4A0B               	infsnz	mem_cpy@s,f,c
  4673  004D84  2A0C               	incf	mem_cpy@s+1,f,c
  4674  004D86  4A09               	infsnz	mem_cpy@d,f,c
  4675  004D88  2A0A               	incf	mem_cpy@d+1,f,c
  4676  004D8A                     l5032:
  4677                           
  4678                           ;ff.c: 518:  while (cnt--)
  4679  004D8A  0605               	decf	mem_cpy@cnt,f,c
  4680  004D8C  A0D8               	btfss	status,0,c
  4681  004D8E  0606               	decf	mem_cpy@cnt+1,f,c
  4682  004D90  2805               	incf	mem_cpy@cnt,w,c
  4683  004D92  E1E2               	bnz	l5026
  4684  004D94  2806               	incf	mem_cpy@cnt+1,w,c
  4685  004D96  B4D8               	btfsc	status,2,c
  4686  004D98  0012               	return	
  4687  004D9A  D7DE               	goto	l5026
  4688  004D9C                     __end_of_mem_cpy:
  4689                           	opt callstack 0
  4690                           
  4691 ;; *************** function _dir_alloc *****************
  4692 ;; Defined at:
  4693 ;;		line 1199 in file "ff.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  dp              2   32[BANK0 ] PTR struct .
  4696 ;;		 -> f_open@dj(22), 
  4697 ;;  nent            2   34[BANK0 ] unsigned short 
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;  n               2   39[BANK0 ] unsigned short 
  4700 ;;  res             1   41[BANK0 ] enum E93
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      enum E93
  4703 ;; Registers used:
  4704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4710 ;;      Params:         0       4       0       0       0       0       0       0       0
  4711 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4712 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4713 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4714 ;;Total ram usage:       10 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:   11
  4717 ;; This function calls:
  4718 ;;		_dir_next
  4719 ;;		_dir_sdi
  4720 ;;		_move_window
  4721 ;; This function is called by:
  4722 ;;		_dir_register
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text13
  4727  0046C0                     __ptext13:
  4728                           	opt callstack 0
  4729  0046C0                     _dir_alloc:
  4730                           	opt callstack 16
  4731                           
  4732                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4733                           
  4734                           ;incstack = 0
  4735  0046C0  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4736  0046C4  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4737  0046C8  0E00               	movlw	0
  4738  0046CA  6E59               	movwf	dir_sdi@idx+1,c
  4739  0046CC  0E00               	movlw	0
  4740  0046CE  6E58               	movwf	dir_sdi@idx,c
  4741  0046D0  EC29  F01B         	call	_dir_sdi	;wreg free
  4742  0046D4  0100               	movlb	0	; () banked
  4743  0046D6  6F89               	movwf	dir_alloc@res& (0+255),b
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;ff.c: 1209:  if (res == FR_OK) {
  4747  0046D8  5189               	movf	dir_alloc@res& (0+255),w,b
  4748  0046DA  A4D8               	btfss	status,2,c
  4749  0046DC  D061               	goto	u6510
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;ff.c: 1210:   n = 0;
  4753  0046DE  0E00               	movlw	0
  4754  0046E0  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4755  0046E2  0E00               	movlw	0
  4756  0046E4  6F87               	movwf	dir_alloc@n& (0+255),b
  4757  0046E6                     l5072:
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4761  0046E6  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4762  0046EA  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4763  0046EE  CFDE F030          	movff	postinc2,move_window@fs
  4764  0046F2  CFDD F031          	movff	postdec2,move_window@fs+1
  4765  0046F6  EE20 F00E          	lfsr	2,14
  4766  0046FA  5180               	movf	dir_alloc@dp& (0+255),w,b
  4767  0046FC  26D9               	addwf	fsr2l,f,c
  4768  0046FE  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4769  004700  22DA               	addwfc	fsr2h,f,c
  4770  004702  CFDE F032          	movff	postinc2,move_window@sector
  4771  004706  CFDE F033          	movff	postinc2,move_window@sector+1
  4772  00470A  CFDE F034          	movff	postinc2,move_window@sector+2
  4773  00470E  CFDE F035          	movff	postinc2,move_window@sector+3
  4774  004712  EC83  F027         	call	_move_window	;wreg free
  4775  004716  0100               	movlb	0	; () banked
  4776  004718  6F89               	movwf	dir_alloc@res& (0+255),b
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;ff.c: 1213:    if (res != FR_OK) break;
  4780  00471A  5189               	movf	dir_alloc@res& (0+255),w,b
  4781  00471C  A4D8               	btfss	status,2,c
  4782  00471E  D040               	goto	u6510
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4786  004720  EE20 F012          	lfsr	2,18
  4787  004724  5180               	movf	dir_alloc@dp& (0+255),w,b
  4788  004726  26D9               	addwf	fsr2l,f,c
  4789  004728  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4790  00472A  22DA               	addwfc	fsr2h,f,c
  4791  00472C  CFDE F084          	movff	postinc2,??_dir_alloc
  4792  004730  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4793  004734  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4794  004738  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4795  00473C  0EE5               	movlw	229
  4796  00473E  18DE               	xorwf	postinc2,w,c
  4797  004740  B4D8               	btfsc	status,2,c
  4798  004742  D011               	goto	u6490
  4799                           
  4800                           ; BSR set to: 0
  4801  004744  EE20 F012          	lfsr	2,18
  4802  004748  5180               	movf	dir_alloc@dp& (0+255),w,b
  4803  00474A  26D9               	addwf	fsr2l,f,c
  4804  00474C  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4805  00474E  22DA               	addwfc	fsr2h,f,c
  4806  004750  CFDE F084          	movff	postinc2,??_dir_alloc
  4807  004754  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4808  004758  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4809  00475C  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4810  004760  50DF               	movf	indf2,w,c
  4811  004762  A4D8               	btfss	status,2,c
  4812  004764  D00A               	goto	l5086
  4813  004766                     u6490:
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;ff.c: 1215:     if (++n == nent) break;
  4817  004766  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  4818  004768  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  4819  00476A  5182               	movf	dir_alloc@nent& (0+255),w,b
  4820  00476C  1987               	xorwf	dir_alloc@n& (0+255),w,b
  4821  00476E  E109               	bnz	l5088
  4822  004770  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  4823  004772  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  4824  004774  B4D8               	btfsc	status,2,c
  4825  004776  D014               	goto	u6510
  4826  004778  D004               	goto	l5088
  4827  00477A                     l5086:
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;ff.c: 1217:     n = 0;
  4831  00477A  0E00               	movlw	0
  4832  00477C  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4833  00477E  0E00               	movlw	0
  4834  004780  6F87               	movwf	dir_alloc@n& (0+255),b
  4835  004782                     l5088:
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;ff.c: 1219:    res = dir_next(dp, 1);
  4839  004782  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  4840  004786  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  4841  00478A  0E00               	movlw	0
  4842  00478C  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4843  00478E  0E01               	movlw	1
  4844  004790  6F6F               	movwf	dir_next@stretch& (0+255),b
  4845  004792  EC0D  F014         	call	_dir_next	;wreg free
  4846  004796  0100               	movlb	0	; () banked
  4847  004798  6F89               	movwf	dir_alloc@res& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;ff.c: 1220:   } while (res == FR_OK);
  4851  00479A  5189               	movf	dir_alloc@res& (0+255),w,b
  4852  00479C  B4D8               	btfsc	status,2,c
  4853  00479E  D7A3               	goto	l5072
  4854  0047A0                     u6510:
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  4858  0047A0  0E04               	movlw	4
  4859  0047A2  1989               	xorwf	dir_alloc@res& (0+255),w,b
  4860  0047A4  A4D8               	btfss	status,2,c
  4861  0047A6  D002               	goto	l454
  4862                           
  4863                           ; BSR set to: 0
  4864  0047A8  0E07               	movlw	7
  4865  0047AA  6F89               	movwf	dir_alloc@res& (0+255),b
  4866  0047AC                     l454:
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;ff.c: 1223:  return res;
  4870  0047AC  5189               	movf	dir_alloc@res& (0+255),w,b
  4871                           
  4872                           ; BSR set to: 0
  4873  0047AE  0012               	return		;funcret
  4874  0047B0                     __end_of_dir_alloc:
  4875                           	opt callstack 0
  4876                           
  4877 ;; *************** function _dir_sdi *****************
  4878 ;; Defined at:
  4879 ;;		line 1080 in file "ff.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  dp              2   85[COMRAM] PTR struct .
  4882 ;;		 -> f_open@dj(22), 
  4883 ;;  idx             2   87[COMRAM] unsigned short 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  clst            4   13[BANK0 ] unsigned long 
  4886 ;;  sect            4    9[BANK0 ] unsigned long 
  4887 ;;  ic              2    7[BANK0 ] unsigned short 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      enum E93
  4890 ;; Registers used:
  4891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4897 ;;      Params:         4       0       0       0       0       0       0       0       0
  4898 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4899 ;;      Temps:          0       7       0       0       0       0       0       0       0
  4900 ;;      Totals:         4      17       0       0       0       0       0       0       0
  4901 ;;Total ram usage:       21 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    9
  4904 ;; This function calls:
  4905 ;;		_clust2sect
  4906 ;;		_get_fat
  4907 ;; This function is called by:
  4908 ;;		_dir_alloc
  4909 ;;		_dir_find
  4910 ;;		_follow_path
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text14
  4915  003652                     __ptext14:
  4916                           	opt callstack 0
  4917  003652                     _dir_sdi:
  4918                           	opt callstack 18
  4919                           
  4920                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;incstack = 0
  4924  003652  EE20 F004          	lfsr	2,4
  4925  003656  5056               	movf	dir_sdi@dp,w,c
  4926  003658  26D9               	addwf	fsr2l,f,c
  4927  00365A  5057               	movf	dir_sdi@dp+1,w,c
  4928  00365C  22DA               	addwfc	fsr2h,f,c
  4929  00365E  C058  FFDE         	movff	dir_sdi@idx,postinc2
  4930  003662  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  4931                           
  4932                           ;ff.c: 1090:  clst = dp->sclust;
  4933  003666  EE20 F006          	lfsr	2,6
  4934  00366A  5056               	movf	dir_sdi@dp,w,c
  4935  00366C  26D9               	addwf	fsr2l,f,c
  4936  00366E  5057               	movf	dir_sdi@dp+1,w,c
  4937  003670  22DA               	addwfc	fsr2h,f,c
  4938  003672  CFDE F06D          	movff	postinc2,dir_sdi@clst
  4939  003676  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  4940  00367A  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  4941  00367E  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  4942                           
  4943                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  4944  003682  0100               	movlb	0	; () banked
  4945  003684  056D               	decf	dir_sdi@clst& (0+255),w,b
  4946  003686  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4947  003688  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4948  00368A  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4949  00368C  B4D8               	btfsc	status,2,c
  4950  00368E  D014               	goto	u5880
  4951                           
  4952                           ; BSR set to: 0
  4953  003690  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4954  003694  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4955  003698  EE10 F012          	lfsr	1,18
  4956  00369C  50DE               	movf	postinc2,w,c
  4957  00369E  26E1               	addwf	fsr1l,f,c
  4958  0036A0  50DD               	movf	postdec2,w,c
  4959  0036A2  22E2               	addwfc	fsr1h,f,c
  4960  0036A4  50E6               	movf	postinc1,w,c
  4961  0036A6  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  4962  0036A8  50E6               	movf	postinc1,w,c
  4963  0036AA  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  4964  0036AC  50E6               	movf	postinc1,w,c
  4965  0036AE  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  4966  0036B0  50E6               	movf	postinc1,w,c
  4967  0036B2  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  4968  0036B4  A0D8               	btfss	status,0,c
  4969  0036B6  D002               	goto	l4750
  4970  0036B8                     u5880:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;ff.c: 1092:   return FR_INT_ERR;
  4974  0036B8  0E02               	movlw	2
  4975  0036BA  0012               	return	
  4976  0036BC                     l4750:
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  4980  0036BC  516D               	movf	dir_sdi@clst& (0+255),w,b
  4981  0036BE  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4982  0036C0  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4983  0036C2  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4984  0036C4  A4D8               	btfss	status,2,c
  4985  0036C6  D022               	goto	l4756
  4986                           
  4987                           ; BSR set to: 0
  4988  0036C8  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4989  0036CC  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4990  0036D0  CFDE F060          	movff	postinc2,??_dir_sdi
  4991  0036D4  CFDD F061          	movff	postdec2,??_dir_sdi+1
  4992  0036D8  C060  FFD9         	movff	??_dir_sdi,fsr2l
  4993  0036DC  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  4994  0036E0  0E03               	movlw	3
  4995  0036E2  18DE               	xorwf	postinc2,w,c
  4996  0036E4  A4D8               	btfss	status,2,c
  4997  0036E6  D012               	goto	l4756
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5001  0036E8  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5002  0036EC  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5003  0036F0  EE10 F022          	lfsr	1,34
  5004  0036F4  50DE               	movf	postinc2,w,c
  5005  0036F6  26E1               	addwf	fsr1l,f,c
  5006  0036F8  50DD               	movf	postdec2,w,c
  5007  0036FA  22E2               	addwfc	fsr1h,f,c
  5008  0036FC  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  5009  003700  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  5010  003704  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  5011  003708  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  5012  00370C                     l4756:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;ff.c: 1096:  if (clst == 0) {
  5016  00370C  516D               	movf	dir_sdi@clst& (0+255),w,b
  5017  00370E  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5018  003710  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5019  003712  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5020  003714  A4D8               	btfss	status,2,c
  5021  003716  D023               	goto	l4766
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5025  003718  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5026  00371C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5027  003720  EE10 F008          	lfsr	1,8
  5028  003724  50DE               	movf	postinc2,w,c
  5029  003726  26E1               	addwf	fsr1l,f,c
  5030  003728  50DD               	movf	postdec2,w,c
  5031  00372A  22E2               	addwfc	fsr1h,f,c
  5032  00372C  50E6               	movf	postinc1,w,c
  5033  00372E  5C58               	subwf	dir_sdi@idx,w,c
  5034  003730  50E6               	movf	postinc1,w,c
  5035  003732  5859               	subwfb	dir_sdi@idx+1,w,c
  5036  003734  B0D8               	btfsc	status,0,c
  5037  003736  D7C0               	goto	u5880
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5041  003738  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5042  00373C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5043  003740  EE10 F022          	lfsr	1,34
  5044  003744  50DE               	movf	postinc2,w,c
  5045  003746  26E1               	addwf	fsr1l,f,c
  5046  003748  50DD               	movf	postdec2,w,c
  5047  00374A  22E2               	addwfc	fsr1h,f,c
  5048  00374C  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5049  003750  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5050  003754  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5051  003758  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5052                           
  5053                           ;ff.c: 1100:  }
  5054  00375C  D079               	goto	l4788
  5055  00375E                     l4766:
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5059  00375E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5060  003762  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5061  003766  EE10 F002          	lfsr	1,2
  5062  00376A  50DE               	movf	postinc2,w,c
  5063  00376C  26E1               	addwf	fsr1l,f,c
  5064  00376E  50DD               	movf	postdec2,w,c
  5065  003770  22E2               	addwfc	fsr1h,f,c
  5066  003772  50E7               	movf	indf1,w,c
  5067  003774  6F60               	movwf	??_dir_sdi& (0+255),b
  5068  003776  5160               	movf	??_dir_sdi& (0+255),w,b
  5069  003778  0D10               	mullw	16
  5070  00377A  CFF3 F067          	movff	prodl,dir_sdi@ic
  5071  00377E  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5072                           
  5073                           ;ff.c: 1103:   while (idx >= ic) {
  5074  003782  D046               	goto	l412
  5075  003784                     l4768:
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5079  003784  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5080  003788  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5081  00378C  CFDE F03B          	movff	postinc2,get_fat@fs
  5082  003790  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5083  003794  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5084  003798  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5085  00379C  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5086  0037A0  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5087  0037A4  EC10  F016         	call	_get_fat	;wreg free
  5088  0037A8  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5089  0037AC  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5090  0037B0  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5091  0037B4  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5092                           
  5093                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5094  0037B8  0100               	movlb	0	; () banked
  5095  0037BA  296D               	incf	dir_sdi@clst& (0+255),w,b
  5096  0037BC  E109               	bnz	l4776
  5097  0037BE  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5098  0037C0  E107               	bnz	l4776
  5099  0037C2  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5100  0037C4  E105               	bnz	l4776
  5101  0037C6  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5102  0037C8  A4D8               	btfss	status,2,c
  5103  0037CA  D002               	goto	l4776
  5104                           
  5105                           ; BSR set to: 0
  5106  0037CC  0E01               	movlw	1
  5107  0037CE  0012               	return	
  5108  0037D0                     l4776:
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5112  0037D0  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5113  0037D2  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5114  0037D4  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5115  0037D6  E104               	bnz	u5940
  5116  0037D8  0E02               	movlw	2
  5117  0037DA  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5118  0037DC  A0D8               	btfss	status,0,c
  5119  0037DE  D76C               	goto	u5880
  5120  0037E0                     u5940:
  5121                           
  5122                           ; BSR set to: 0
  5123  0037E0  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5124  0037E4  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5125  0037E8  EE10 F012          	lfsr	1,18
  5126  0037EC  50DE               	movf	postinc2,w,c
  5127  0037EE  26E1               	addwf	fsr1l,f,c
  5128  0037F0  50DD               	movf	postdec2,w,c
  5129  0037F2  22E2               	addwfc	fsr1h,f,c
  5130  0037F4  50E6               	movf	postinc1,w,c
  5131  0037F6  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5132  0037F8  50E6               	movf	postinc1,w,c
  5133  0037FA  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5134  0037FC  50E6               	movf	postinc1,w,c
  5135  0037FE  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5136  003800  50E6               	movf	postinc1,w,c
  5137  003802  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5138  003804  B0D8               	btfsc	status,0,c
  5139  003806  D758               	goto	u5880
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;ff.c: 1108:    idx -= ic;
  5143  003808  5167               	movf	dir_sdi@ic& (0+255),w,b
  5144  00380A  5E58               	subwf	dir_sdi@idx,f,c
  5145  00380C  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5146  00380E  5A59               	subwfb	dir_sdi@idx+1,f,c
  5147  003810                     l412:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;ff.c: 1103:   while (idx >= ic) {
  5151  003810  5167               	movf	dir_sdi@ic& (0+255),w,b
  5152  003812  5C58               	subwf	dir_sdi@idx,w,c
  5153  003814  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5154  003816  5859               	subwfb	dir_sdi@idx+1,w,c
  5155  003818  B0D8               	btfsc	status,0,c
  5156  00381A  D7B4               	goto	l4768
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5160  00381C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5161  003820  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5162  003824  CFDE F00D          	movff	postinc2,clust2sect@fs
  5163  003828  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5164  00382C  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5165  003830  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5166  003834  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5167  003838  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5168  00383C  ECCE  F026         	call	_clust2sect	;wreg free
  5169  003840  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5170  003844  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5171  003848  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5172  00384C  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5173  003850                     l4788:
  5174                           
  5175                           ;ff.c: 1112:  dp->clust = clst;
  5176  003850  EE20 F00A          	lfsr	2,10
  5177  003854  5056               	movf	dir_sdi@dp,w,c
  5178  003856  26D9               	addwf	fsr2l,f,c
  5179  003858  5057               	movf	dir_sdi@dp+1,w,c
  5180  00385A  22DA               	addwfc	fsr2h,f,c
  5181  00385C  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5182  003860  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5183  003864  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5184  003868  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5185                           
  5186                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5187  00386C  0100               	movlb	0	; () banked
  5188  00386E  5169               	movf	dir_sdi@sect& (0+255),w,b
  5189  003870  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5190  003872  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5191  003874  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5192  003876  B4D8               	btfsc	status,2,c
  5193  003878  D71F               	goto	u5880
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5197  00387A  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5198  00387E  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5199  003882  0E04               	movlw	4
  5200  003884  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5201  003886                     u5985:
  5202  003886  90D8               	bcf	status,0,c
  5203  003888  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5204  00388A  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5205  00388C  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5206  00388E  D7FB               	goto	u5985
  5207  003890  5160               	movf	??_dir_sdi& (0+255),w,b
  5208  003892  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5209  003894  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5210  003896  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5211  003898  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5212  00389A  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5213  00389C  0E00               	movlw	0
  5214  00389E  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5215  0038A0  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5216  0038A2  0E00               	movlw	0
  5217  0038A4  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5218  0038A6  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5219  0038A8  EE20 F00E          	lfsr	2,14
  5220  0038AC  5056               	movf	dir_sdi@dp,w,c
  5221  0038AE  26D9               	addwf	fsr2l,f,c
  5222  0038B0  5057               	movf	dir_sdi@dp+1,w,c
  5223  0038B2  22DA               	addwfc	fsr2h,f,c
  5224  0038B4  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5225  0038B8  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5226  0038BC  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5227  0038C0  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5228                           
  5229                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5230  0038C4  0E0F               	movlw	15
  5231  0038C6  1458               	andwf	dir_sdi@idx,w,c
  5232  0038C8  6F60               	movwf	??_dir_sdi& (0+255),b
  5233  0038CA  0E00               	movlw	0
  5234  0038CC  1459               	andwf	dir_sdi@idx+1,w,c
  5235  0038CE  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5236  0038D0  0E05               	movlw	5
  5237  0038D2                     u5995:
  5238  0038D2  90D8               	bcf	status,0,c
  5239  0038D4  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5240  0038D6  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5241  0038D8  2EE8               	decfsz	wreg,f,c
  5242  0038DA  D7FB               	goto	u5995
  5243  0038DC  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5244  0038E0  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5245  0038E4  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5246  0038E8  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5247  0038EC  5160               	movf	??_dir_sdi& (0+255),w,b
  5248  0038EE  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5249  0038F0  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5250  0038F2  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5251  0038F4  0E2E               	movlw	46
  5252  0038F6  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5253  0038F8  0E00               	movlw	0
  5254  0038FA  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5255  0038FC  EE20 F012          	lfsr	2,18
  5256  003900  5056               	movf	dir_sdi@dp,w,c
  5257  003902  26D9               	addwf	fsr2l,f,c
  5258  003904  5057               	movf	dir_sdi@dp+1,w,c
  5259  003906  22DA               	addwfc	fsr2h,f,c
  5260  003908  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5261  00390C  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;ff.c: 1117:  return FR_OK;
  5265  003910  0E00               	movlw	0
  5266                           
  5267                           ; BSR set to: 0
  5268  003912  0012               	return		;funcret
  5269  003914                     __end_of_dir_sdi:
  5270                           	opt callstack 0
  5271                           
  5272 ;; *************** function _dir_next *****************
  5273 ;; Defined at:
  5274 ;;		line 1128 in file "ff.c"
  5275 ;; Parameters:    Size  Location     Type
  5276 ;;  dp              2   13[BANK0 ] PTR struct .
  5277 ;;		 -> f_open@dj(22), 
  5278 ;;  stretch         2   15[BANK0 ] int 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  clst            4   28[BANK0 ] unsigned long 
  5281 ;;  i               2   26[BANK0 ] unsigned short 
  5282 ;;  c               2   24[BANK0 ] unsigned short 
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  1    wreg      enum E93
  5285 ;; Registers used:
  5286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5292 ;;      Params:         0       4       0       0       0       0       0       0       0
  5293 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5294 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5295 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5296 ;;Total ram usage:       19 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; Hardware stack levels required when called:   10
  5299 ;; This function calls:
  5300 ;;		_clust2sect
  5301 ;;		_create_chain
  5302 ;;		_get_fat
  5303 ;;		_mem_set
  5304 ;;		_sync_window
  5305 ;; This function is called by:
  5306 ;;		_dir_alloc
  5307 ;;		_dir_find
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text15
  5312  00281A                     __ptext15:
  5313                           	opt callstack 0
  5314  00281A                     _dir_next:
  5315                           	opt callstack 16
  5316                           
  5317                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5318                           
  5319                           ; BSR set to: 0
  5320                           ;incstack = 0
  5321  00281A  0100               	movlb	0	; () banked
  5322  00281C  EE20 F004          	lfsr	2,4
  5323  002820  516D               	movf	dir_next@dp& (0+255),w,b
  5324  002822  26D9               	addwf	fsr2l,f,c
  5325  002824  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5326  002826  22DA               	addwfc	fsr2h,f,c
  5327  002828  CFDE F071          	movff	postinc2,??_dir_next
  5328  00282C  CFDD F072          	movff	postdec2,??_dir_next+1
  5329  002830  0E01               	movlw	1
  5330  002832  2571               	addwf	??_dir_next& (0+255),w,b
  5331  002834  6F7A               	movwf	dir_next@i& (0+255),b
  5332  002836  0E00               	movlw	0
  5333  002838  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5334  00283A  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5338  00283C  517A               	movf	dir_next@i& (0+255),w,b
  5339  00283E  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5340  002840  B4D8               	btfsc	status,2,c
  5341  002842  D00C               	goto	u6010
  5342                           
  5343                           ; BSR set to: 0
  5344  002844  EE20 F00E          	lfsr	2,14
  5345  002848  516D               	movf	dir_next@dp& (0+255),w,b
  5346  00284A  26D9               	addwf	fsr2l,f,c
  5347  00284C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5348  00284E  22DA               	addwfc	fsr2h,f,c
  5349  002850  50DE               	movf	postinc2,w,c
  5350  002852  10DE               	iorwf	postinc2,w,c
  5351  002854  10DE               	iorwf	postinc2,w,c
  5352  002856  10DE               	iorwf	postinc2,w,c
  5353  002858  A4D8               	btfss	status,2,c
  5354  00285A  D002               	goto	l4812
  5355  00285C                     u6010:
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;ff.c: 1142:   return FR_NO_FILE;
  5359  00285C  0E04               	movlw	4
  5360  00285E  0012               	return	
  5361  002860                     l4812:
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5365  002860  0E0F               	movlw	15
  5366  002862  157A               	andwf	dir_next@i& (0+255),w,b
  5367  002864  6F71               	movwf	??_dir_next& (0+255),b
  5368  002866  0E00               	movlw	0
  5369  002868  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5370  00286A  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5371  00286C  5171               	movf	??_dir_next& (0+255),w,b
  5372  00286E  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5373  002870  A4D8               	btfss	status,2,c
  5374  002872  D1A4               	goto	l4898
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;ff.c: 1145:   dp->sect++;
  5378  002874  EE20 F00E          	lfsr	2,14
  5379  002878  516D               	movf	dir_next@dp& (0+255),w,b
  5380  00287A  26D9               	addwf	fsr2l,f,c
  5381  00287C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5382  00287E  22DA               	addwfc	fsr2h,f,c
  5383  002880  2ADE               	incf	postinc2,f,c
  5384  002882  0E00               	movlw	0
  5385  002884  22DE               	addwfc	postinc2,f,c
  5386  002886  22DE               	addwfc	postinc2,f,c
  5387  002888  22DE               	addwfc	postinc2,f,c
  5388                           
  5389                           ;ff.c: 1147:   if (!dp->clust) {
  5390  00288A  EE20 F00A          	lfsr	2,10
  5391  00288E  516D               	movf	dir_next@dp& (0+255),w,b
  5392  002890  26D9               	addwf	fsr2l,f,c
  5393  002892  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5394  002894  22DA               	addwfc	fsr2h,f,c
  5395  002896  50DE               	movf	postinc2,w,c
  5396  002898  10DE               	iorwf	postinc2,w,c
  5397  00289A  10DE               	iorwf	postinc2,w,c
  5398  00289C  10DE               	iorwf	postinc2,w,c
  5399  00289E  A4D8               	btfss	status,2,c
  5400  0028A0  D011               	goto	l4822
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5404  0028A2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5405  0028A6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5406  0028AA  EE10 F008          	lfsr	1,8
  5407  0028AE  50DE               	movf	postinc2,w,c
  5408  0028B0  26E1               	addwf	fsr1l,f,c
  5409  0028B2  50DD               	movf	postdec2,w,c
  5410  0028B4  22E2               	addwfc	fsr1h,f,c
  5411  0028B6  50E6               	movf	postinc1,w,c
  5412  0028B8  5D7A               	subwf	dir_next@i& (0+255),w,b
  5413  0028BA  50E6               	movf	postinc1,w,c
  5414  0028BC  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5415  0028BE  B0D8               	btfsc	status,0,c
  5416  0028C0  D7CD               	goto	u6010
  5417  0028C2  D17C               	goto	l4898
  5418  0028C4                     l4822:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5422  0028C4  C07A  F071         	movff	dir_next@i,??_dir_next
  5423  0028C8  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5424  0028CC  0E04               	movlw	4
  5425  0028CE  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5426  0028D0                     u6055:
  5427  0028D0  90D8               	bcf	status,0,c
  5428  0028D2  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5429  0028D4  3371               	rrcf	??_dir_next& (0+255),f,b
  5430  0028D6  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5431  0028D8  D7FB               	goto	u6055
  5432  0028DA  0EFF               	movlw	255
  5433  0028DC  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5434  0028DE  0EFF               	movlw	255
  5435  0028E0  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5436  0028E2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5437  0028E6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5438  0028EA  EE10 F002          	lfsr	1,2
  5439  0028EE  50DE               	movf	postinc2,w,c
  5440  0028F0  26E1               	addwf	fsr1l,f,c
  5441  0028F2  50DD               	movf	postdec2,w,c
  5442  0028F4  22E2               	addwfc	fsr1h,f,c
  5443  0028F6  50E7               	movf	indf1,w,c
  5444  0028F8  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5445  0028FA  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5446  0028FC  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5447  0028FE  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5448  002900  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5449  002902  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5450  002904  5171               	movf	??_dir_next& (0+255),w,b
  5451  002906  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5452  002908  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5453  00290A  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5454  00290C  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5455  00290E  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5456  002910  A4D8               	btfss	status,2,c
  5457  002912  D154               	goto	l4898
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5461  002914  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5462  002918  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5463  00291C  CFDE F03B          	movff	postinc2,get_fat@fs
  5464  002920  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5465  002924  EE20 F00A          	lfsr	2,10
  5466  002928  516D               	movf	dir_next@dp& (0+255),w,b
  5467  00292A  26D9               	addwf	fsr2l,f,c
  5468  00292C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5469  00292E  22DA               	addwfc	fsr2h,f,c
  5470  002930  CFDE F03D          	movff	postinc2,get_fat@clst
  5471  002934  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5472  002938  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5473  00293C  CFDE F040          	movff	postinc2,get_fat@clst+3
  5474  002940  EC10  F016         	call	_get_fat	;wreg free
  5475  002944  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5476  002948  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5477  00294C  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5478  002950  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5479                           
  5480                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5481  002954  0100               	movlb	0	; () banked
  5482  002956  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5483  002958  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5484  00295A  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5485  00295C  E106               	bnz	l4832
  5486  00295E  0E02               	movlw	2
  5487  002960  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5488  002962  B0D8               	btfsc	status,0,c
  5489  002964  D002               	goto	l4832
  5490  002966                     u6070:
  5491                           
  5492                           ; BSR set to: 0
  5493  002966  0E02               	movlw	2
  5494  002968  0012               	return	
  5495  00296A                     l4832:
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5499  00296A  297C               	incf	dir_next@clst& (0+255),w,b
  5500  00296C  E109               	bnz	l4838
  5501  00296E  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5502  002970  E107               	bnz	l4838
  5503  002972  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5504  002974  E105               	bnz	l4838
  5505  002976  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5506  002978  A4D8               	btfss	status,2,c
  5507  00297A  D002               	goto	l4838
  5508  00297C                     u6080:
  5509  00297C  0E01               	movlw	1
  5510  00297E  0012               	return	
  5511  002980                     l4838:
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5515  002980  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5516  002984  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5517  002988  EE10 F012          	lfsr	1,18
  5518  00298C  50DE               	movf	postinc2,w,c
  5519  00298E  26E1               	addwf	fsr1l,f,c
  5520  002990  50DD               	movf	postdec2,w,c
  5521  002992  22E2               	addwfc	fsr1h,f,c
  5522  002994  50E6               	movf	postinc1,w,c
  5523  002996  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5524  002998  50E6               	movf	postinc1,w,c
  5525  00299A  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5526  00299C  50E6               	movf	postinc1,w,c
  5527  00299E  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5528  0029A0  50E6               	movf	postinc1,w,c
  5529  0029A2  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5530  0029A4  A0D8               	btfss	status,0,c
  5531  0029A6  D0DB               	goto	l4894
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5535  0029A8  516F               	movf	dir_next@stretch& (0+255),w,b
  5536  0029AA  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5537  0029AC  B4D8               	btfsc	status,2,c
  5538  0029AE  D756               	goto	u6010
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5542  0029B0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5543  0029B4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5544  0029B8  CFDE F056          	movff	postinc2,create_chain@fs
  5545  0029BC  CFDD F057          	movff	postdec2,create_chain@fs+1
  5546  0029C0  EE20 F00A          	lfsr	2,10
  5547  0029C4  516D               	movf	dir_next@dp& (0+255),w,b
  5548  0029C6  26D9               	addwf	fsr2l,f,c
  5549  0029C8  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5550  0029CA  22DA               	addwfc	fsr2h,f,c
  5551  0029CC  CFDE F058          	movff	postinc2,create_chain@clst
  5552  0029D0  CFDE F059          	movff	postinc2,create_chain@clst+1
  5553  0029D4  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5554  0029D8  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5555  0029DC  ECAC  F019         	call	_create_chain	;wreg free
  5556  0029E0  C056  F07C         	movff	?_create_chain,dir_next@clst
  5557  0029E4  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5558  0029E8  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5559  0029EC  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5560                           
  5561                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5562  0029F0  0100               	movlb	0	; () banked
  5563  0029F2  517C               	movf	dir_next@clst& (0+255),w,b
  5564  0029F4  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5565  0029F6  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5566  0029F8  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5567  0029FA  A4D8               	btfss	status,2,c
  5568  0029FC  D002               	goto	l4854
  5569                           
  5570                           ; BSR set to: 0
  5571  0029FE  0E07               	movlw	7
  5572  002A00  0012               	return	
  5573  002A02                     l4854:
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5577  002A02  057C               	decf	dir_next@clst& (0+255),w,b
  5578  002A04  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5579  002A06  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5580  002A08  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5581  002A0A  B4D8               	btfsc	status,2,c
  5582  002A0C  D7AC               	goto	u6070
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5586  002A0E  297C               	incf	dir_next@clst& (0+255),w,b
  5587  002A10  E107               	bnz	l4866
  5588  002A12  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5589  002A14  E105               	bnz	l4866
  5590  002A16  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5591  002A18  E103               	bnz	l4866
  5592  002A1A  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5593  002A1C  B4D8               	btfsc	status,2,c
  5594  002A1E  D7AE               	goto	u6080
  5595  002A20                     l4866:
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5599  002A20  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5600  002A24  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5601  002A28  CFDE F01B          	movff	postinc2,sync_window@fs
  5602  002A2C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5603  002A30  ECA1  F01F         	call	_sync_window	;wreg free
  5604  002A34  0900               	iorlw	0
  5605  002A36  A4D8               	btfss	status,2,c
  5606  002A38  D7A1               	goto	u6080
  5607                           
  5608                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5609  002A3A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5610  002A3E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5611  002A42  CFDE F071          	movff	postinc2,??_dir_next
  5612  002A46  CFDD F072          	movff	postdec2,??_dir_next+1
  5613  002A4A  0E2E               	movlw	46
  5614  002A4C  0100               	movlb	0	; () banked
  5615  002A4E  2571               	addwf	??_dir_next& (0+255),w,b
  5616  002A50  6E01               	movwf	mem_set@dst,c
  5617  002A52  0E00               	movlw	0
  5618  002A54  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5619  002A56  6E02               	movwf	mem_set@dst+1,c
  5620  002A58  0E00               	movlw	0
  5621  002A5A  6E04               	movwf	mem_set@val+1,c
  5622  002A5C  0E00               	movlw	0
  5623  002A5E  6E03               	movwf	mem_set@val,c
  5624  002A60  0E02               	movlw	2
  5625  002A62  6E06               	movwf	mem_set@cnt+1,c
  5626  002A64  0E00               	movlw	0
  5627  002A66  6E05               	movwf	mem_set@cnt,c
  5628  002A68  EC9F  F02A         	call	_mem_set	;wreg free
  5629                           
  5630                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5631  002A6C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5632  002A70  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5633  002A74  CFDE F00D          	movff	postinc2,clust2sect@fs
  5634  002A78  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5635  002A7C  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5636  002A80  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5637  002A84  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5638  002A88  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5639  002A8C  ECCE  F026         	call	_clust2sect	;wreg free
  5640  002A90  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5641  002A94  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5642  002A98  EE10 F02A          	lfsr	1,42
  5643  002A9C  50DE               	movf	postinc2,w,c
  5644  002A9E  26E1               	addwf	fsr1l,f,c
  5645  002AA0  50DD               	movf	postdec2,w,c
  5646  002AA2  22E2               	addwfc	fsr1h,f,c
  5647  002AA4  C00D  FFE6         	movff	?_clust2sect,postinc1
  5648  002AA8  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5649  002AAC  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5650  002AB0  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5651                           
  5652                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5653  002AB4  0E00               	movlw	0
  5654  002AB6  0100               	movlb	0	; () banked
  5655  002AB8  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5656  002ABA  0E00               	movlw	0
  5657  002ABC  6F78               	movwf	dir_next@c& (0+255),b
  5658  002ABE  D02B               	goto	l4890
  5659  002AC0                     l4878:
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5663  002AC0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5664  002AC4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5665  002AC8  EE10 F004          	lfsr	1,4
  5666  002ACC  50DE               	movf	postinc2,w,c
  5667  002ACE  26E1               	addwf	fsr1l,f,c
  5668  002AD0  50DD               	movf	postdec2,w,c
  5669  002AD2  22E2               	addwfc	fsr1h,f,c
  5670  002AD4  0E01               	movlw	1
  5671  002AD6  6EE7               	movwf	indf1,c
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5675  002AD8  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5676  002ADC  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5677  002AE0  CFDE F01B          	movff	postinc2,sync_window@fs
  5678  002AE4  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5679  002AE8  ECA1  F01F         	call	_sync_window	;wreg free
  5680  002AEC  0900               	iorlw	0
  5681  002AEE  A4D8               	btfss	status,2,c
  5682  002AF0  D745               	goto	u6080
  5683                           
  5684                           ;ff.c: 1170:       dp->fs->winsect++;
  5685  002AF2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5686  002AF6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5687  002AFA  EE10 F02A          	lfsr	1,42
  5688  002AFE  50DE               	movf	postinc2,w,c
  5689  002B00  26E1               	addwf	fsr1l,f,c
  5690  002B02  50DD               	movf	postdec2,w,c
  5691  002B04  22E2               	addwfc	fsr1h,f,c
  5692  002B06  2AE6               	incf	postinc1,f,c
  5693  002B08  0E00               	movlw	0
  5694  002B0A  22E6               	addwfc	postinc1,f,c
  5695  002B0C  22E6               	addwfc	postinc1,f,c
  5696  002B0E  22E6               	addwfc	postinc1,f,c
  5697                           
  5698                           ;ff.c: 1171:      }
  5699  002B10  0100               	movlb	0	; () banked
  5700  002B12  4B78               	infsnz	dir_next@c& (0+255),f,b
  5701  002B14  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5702  002B16                     l4890:
  5703                           
  5704                           ; BSR set to: 0
  5705  002B16  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5706  002B1A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5707  002B1E  EE10 F002          	lfsr	1,2
  5708  002B22  50DE               	movf	postinc2,w,c
  5709  002B24  26E1               	addwf	fsr1l,f,c
  5710  002B26  50DD               	movf	postdec2,w,c
  5711  002B28  22E2               	addwfc	fsr1h,f,c
  5712  002B2A  50E7               	movf	indf1,w,c
  5713  002B2C  6F71               	movwf	??_dir_next& (0+255),b
  5714  002B2E  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5715  002B30  5171               	movf	??_dir_next& (0+255),w,b
  5716  002B32  5D78               	subwf	dir_next@c& (0+255),w,b
  5717  002B34  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5718  002B36  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5719  002B38  A0D8               	btfss	status,0,c
  5720  002B3A  D7C2               	goto	l4878
  5721                           
  5722                           ; BSR set to: 0
  5723                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5724  002B3C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5725  002B40  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5726  002B44  EE10 F02A          	lfsr	1,42
  5727  002B48  50DE               	movf	postinc2,w,c
  5728  002B4A  26E1               	addwf	fsr1l,f,c
  5729  002B4C  50DD               	movf	postdec2,w,c
  5730  002B4E  22E2               	addwfc	fsr1h,f,c
  5731  002B50  5178               	movf	dir_next@c& (0+255),w,b
  5732  002B52  5EE6               	subwf	postinc1,f,c
  5733  002B54  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5734  002B56  5AE6               	subwfb	postinc1,f,c
  5735  002B58  0E00               	movlw	0
  5736  002B5A  5AE6               	subwfb	postinc1,f,c
  5737  002B5C  5AE6               	subwfb	postinc1,f,c
  5738  002B5E                     l4894:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;ff.c: 1178:     dp->clust = clst;
  5742  002B5E  EE20 F00A          	lfsr	2,10
  5743  002B62  516D               	movf	dir_next@dp& (0+255),w,b
  5744  002B64  26D9               	addwf	fsr2l,f,c
  5745  002B66  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5746  002B68  22DA               	addwfc	fsr2h,f,c
  5747  002B6A  C07C  FFDE         	movff	dir_next@clst,postinc2
  5748  002B6E  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5749  002B72  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5750  002B76  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5754  002B7A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5755  002B7E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5756  002B82  CFDE F00D          	movff	postinc2,clust2sect@fs
  5757  002B86  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5758  002B8A  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5759  002B8E  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5760  002B92  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5761  002B96  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5762  002B9A  ECCE  F026         	call	_clust2sect	;wreg free
  5763  002B9E  0100               	movlb	0	; () banked
  5764  002BA0  EE20 F00E          	lfsr	2,14
  5765  002BA4  516D               	movf	dir_next@dp& (0+255),w,b
  5766  002BA6  26D9               	addwf	fsr2l,f,c
  5767  002BA8  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5768  002BAA  22DA               	addwfc	fsr2h,f,c
  5769  002BAC  C00D  FFDE         	movff	?_clust2sect,postinc2
  5770  002BB0  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5771  002BB4  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5772  002BB8  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5773  002BBC                     l4898:
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;ff.c: 1184:  dp->index = (WORD)i;
  5777  002BBC  EE20 F004          	lfsr	2,4
  5778  002BC0  516D               	movf	dir_next@dp& (0+255),w,b
  5779  002BC2  26D9               	addwf	fsr2l,f,c
  5780  002BC4  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5781  002BC6  22DA               	addwfc	fsr2h,f,c
  5782  002BC8  C07A  FFDE         	movff	dir_next@i,postinc2
  5783  002BCC  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5787  002BD0  0E0F               	movlw	15
  5788  002BD2  157A               	andwf	dir_next@i& (0+255),w,b
  5789  002BD4  6F71               	movwf	??_dir_next& (0+255),b
  5790  002BD6  0E00               	movlw	0
  5791  002BD8  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5792  002BDA  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5793  002BDC  0E05               	movlw	5
  5794  002BDE                     u6175:
  5795  002BDE  90D8               	bcf	status,0,c
  5796  002BE0  3771               	rlcf	??_dir_next& (0+255),f,b
  5797  002BE2  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5798  002BE4  2EE8               	decfsz	wreg,f,c
  5799  002BE6  D7FB               	goto	u6175
  5800  002BE8  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5801  002BEC  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5802  002BF0  CFDE F073          	movff	postinc2,??_dir_next+2
  5803  002BF4  CFDD F074          	movff	postdec2,??_dir_next+3
  5804  002BF8  5171               	movf	??_dir_next& (0+255),w,b
  5805  002BFA  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5806  002BFC  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5807  002BFE  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5808  002C00  0E2E               	movlw	46
  5809  002C02  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5810  002C04  0E00               	movlw	0
  5811  002C06  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5812  002C08  EE20 F012          	lfsr	2,18
  5813  002C0C  516D               	movf	dir_next@dp& (0+255),w,b
  5814  002C0E  26D9               	addwf	fsr2l,f,c
  5815  002C10  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5816  002C12  22DA               	addwfc	fsr2h,f,c
  5817  002C14  C073  FFDE         	movff	??_dir_next+2,postinc2
  5818  002C18  C074  FFDD         	movff	??_dir_next+3,postdec2
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;ff.c: 1187:  return FR_OK;
  5822  002C1C  0E00               	movlw	0
  5823  002C1E  0012               	return		;funcret
  5824  002C20                     __end_of_dir_next:
  5825                           	opt callstack 0
  5826                           
  5827 ;; *************** function _f_mount *****************
  5828 ;; Defined at:
  5829 ;;		line 2402 in file "ff.c"
  5830 ;; Parameters:    Size  Location     Type
  5831 ;;  fs              2   81[COMRAM] PTR struct .
  5832 ;;		 -> NULL(0), FatFs(558), 
  5833 ;;  path            2   83[COMRAM] PTR const unsigned char 
  5834 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5835 ;;  opt             1   85[COMRAM] unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  vol             2   91[COMRAM] int 
  5838 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  5839 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5840 ;;  cfs             2   87[COMRAM] PTR struct .
  5841 ;;		 -> NULL(0), FatFs(558), 
  5842 ;;  res             1   86[COMRAM] enum E93
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      enum E4918
  5845 ;; Registers used:
  5846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5852 ;;      Params:         5       0       0       0       0       0       0       0       0
  5853 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5855 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5856 ;;Total ram usage:       12 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:   10
  5859 ;; This function calls:
  5860 ;;		_find_volume
  5861 ;;		_get_ldnumber
  5862 ;; This function is called by:
  5863 ;;		_guardar
  5864 ;; This function uses a non-reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text16
  5868  004E56                     __ptext16:
  5869                           	opt callstack 0
  5870  004E56                     _f_mount:
  5871                           	opt callstack 19
  5872                           
  5873                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  5874                           
  5875                           ;incstack = 0
  5876  004E56  C054  F05A         	movff	f_mount@path,f_mount@rp
  5877  004E5A  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  5878                           
  5879                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  5880  004E5E  0E5A               	movlw	low f_mount@rp
  5881  004E60  6E01               	movwf	get_ldnumber@path,c
  5882  004E62  0E00               	movlw	high f_mount@rp
  5883  004E64  6E02               	movwf	get_ldnumber@path+1,c
  5884  004E66  ECC4  F024         	call	_get_ldnumber	;wreg free
  5885  004E6A  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  5886  004E6E  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  5887                           
  5888                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  5889  004E72  AE5D               	btfss	f_mount@vol+1,7,c
  5890  004E74  D002               	goto	l5916
  5891  004E76  0E0B               	movlw	11
  5892  004E78  0012               	return	
  5893  004E7A                     l5916:
  5894                           
  5895                           ;ff.c: 2416:  cfs = FatFs[vol];
  5896  004E7A  90D8               	bcf	status,0,c
  5897  004E7C  345C               	rlcf	f_mount@vol,w,c
  5898  004E7E  6ED9               	movwf	fsr2l,c
  5899  004E80  345D               	rlcf	f_mount@vol+1,w,c
  5900  004E82  6EDA               	movwf	fsr2h,c
  5901  004E84  0ED4               	movlw	low ff@FatFs
  5902  004E86  26D9               	addwf	fsr2l,f,c
  5903  004E88  0E00               	movlw	high ff@FatFs
  5904  004E8A  22DA               	addwfc	fsr2h,f,c
  5905  004E8C  CFDE F058          	movff	postinc2,f_mount@cfs
  5906  004E90  CFDD F059          	movff	postdec2,f_mount@cfs+1
  5907                           
  5908                           ;ff.c: 2418:  if (cfs) {
  5909  004E94  5058               	movf	f_mount@cfs,w,c
  5910  004E96  1059               	iorwf	f_mount@cfs+1,w,c
  5911  004E98  B4D8               	btfsc	status,2,c
  5912  004E9A  D006               	goto	l5922
  5913                           
  5914                           ;ff.c: 2425:   cfs->fs_type = 0;
  5915  004E9C  C058  FFD9         	movff	f_mount@cfs,fsr2l
  5916  004EA0  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  5917  004EA4  0E00               	movlw	0
  5918  004EA6  6EDF               	movwf	indf2,c
  5919  004EA8                     l5922:
  5920                           
  5921                           ;ff.c: 2428:  if (fs) {
  5922  004EA8  5052               	movf	f_mount@fs,w,c
  5923  004EAA  1053               	iorwf	f_mount@fs+1,w,c
  5924  004EAC  B4D8               	btfsc	status,2,c
  5925  004EAE  D006               	goto	l5926
  5926                           
  5927                           ;ff.c: 2429:   fs->fs_type = 0;
  5928  004EB0  C052  FFD9         	movff	f_mount@fs,fsr2l
  5929  004EB4  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  5930  004EB8  0E00               	movlw	0
  5931  004EBA  6EDF               	movwf	indf2,c
  5932  004EBC                     l5926:
  5933                           
  5934                           ;ff.c: 2434:  FatFs[vol] = fs;
  5935  004EBC  90D8               	bcf	status,0,c
  5936  004EBE  345C               	rlcf	f_mount@vol,w,c
  5937  004EC0  6ED9               	movwf	fsr2l,c
  5938  004EC2  345D               	rlcf	f_mount@vol+1,w,c
  5939  004EC4  6EDA               	movwf	fsr2h,c
  5940  004EC6  0ED4               	movlw	low ff@FatFs
  5941  004EC8  26D9               	addwf	fsr2l,f,c
  5942  004ECA  0E00               	movlw	high ff@FatFs
  5943  004ECC  22DA               	addwfc	fsr2h,f,c
  5944  004ECE  C052  FFDE         	movff	f_mount@fs,postinc2
  5945  004ED2  C053  FFDD         	movff	f_mount@fs+1,postdec2
  5946                           
  5947                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  5948  004ED6  5052               	movf	f_mount@fs,w,c
  5949  004ED8  1053               	iorwf	f_mount@fs+1,w,c
  5950  004EDA  B4D8               	btfsc	status,2,c
  5951  004EDC  D003               	goto	u7900
  5952  004EDE  0456               	decf	f_mount@opt,w,c
  5953  004EE0  B4D8               	btfsc	status,2,c
  5954  004EE2  D002               	goto	l5936
  5955  004EE4                     u7900:
  5956  004EE4  0E00               	movlw	0
  5957  004EE6  0012               	return	
  5958  004EE8                     l5936:
  5959                           
  5960                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  5961  004EE8  0E52               	movlw	low f_mount@fs
  5962  004EEA  6E45               	movwf	find_volume@rfs,c
  5963  004EEC  0E00               	movlw	high f_mount@fs
  5964  004EEE  6E46               	movwf	find_volume@rfs+1,c
  5965  004EF0  0E54               	movlw	low f_mount@path
  5966  004EF2  6E47               	movwf	find_volume@path,c
  5967  004EF4  0E00               	movlw	high f_mount@path
  5968  004EF6  6E48               	movwf	find_volume@path+1,c
  5969  004EF8  0E00               	movlw	0
  5970  004EFA  6E49               	movwf	find_volume@wmode,c
  5971  004EFC  EC19  F004         	call	_find_volume	;wreg free
  5972  004F00  6E57               	movwf	f_mount@res,c
  5973                           
  5974                           ;ff.c: 2439:  return res;
  5975  004F02  5057               	movf	f_mount@res,w,c
  5976  004F04  0012               	return		;funcret
  5977  004F06                     __end_of_f_mount:
  5978                           	opt callstack 0
  5979                           
  5980 ;; *************** function _find_volume *****************
  5981 ;; Defined at:
  5982 ;;		line 2203 in file "ff.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  5985 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  5986 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  5987 ;;		 -> f_open@path(2), f_mount@path(2), 
  5988 ;;  wmode           1   72[COMRAM] unsigned char 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  br             16    0[BANK0 ] unsigned long [4]
  5991 ;;  bsect           4   49[BANK0 ] unsigned long 
  5992 ;;  fasize          4   45[BANK0 ] unsigned long 
  5993 ;;  nclst           4   40[BANK0 ] unsigned long 
  5994 ;;  tsect           4   36[BANK0 ] unsigned long 
  5995 ;;  sysect          4   28[BANK0 ] unsigned long 
  5996 ;;  szbfat          4   22[BANK0 ] unsigned long 
  5997 ;;  fs              2   56[BANK0 ] PTR struct .
  5998 ;;		 -> NULL(0), FatFs(558), 
  5999 ;;  i               2   53[BANK0 ] unsigned short 
  6000 ;;  nrsv            2   34[BANK0 ] unsigned short 
  6001 ;;  vol             2   32[BANK0 ] int 
  6002 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  6003 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  6004 ;;  fmt             1   55[BANK0 ] unsigned char 
  6005 ;;  stat            1   44[BANK0 ] unsigned char 
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      enum E93
  6008 ;; Registers used:
  6009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6015 ;;      Params:         5       0       0       0       0       0       0       0       0
  6016 ;;      Locals:         0      58       0       0       0       0       0       0       0
  6017 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6018 ;;      Totals:        13      58       0       0       0       0       0       0       0
  6019 ;;Total ram usage:       71 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    9
  6022 ;; This function calls:
  6023 ;;		___lldiv
  6024 ;;		___lmul
  6025 ;;		_check_fs
  6026 ;;		_disk_initialize
  6027 ;;		_disk_status
  6028 ;;		_get_ldnumber
  6029 ;;		_move_window
  6030 ;; This function is called by:
  6031 ;;		_f_mount
  6032 ;;		_f_open
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text17
  6037  000832                     __ptext17:
  6038                           	opt callstack 0
  6039  000832                     _find_volume:
  6040                           	opt callstack 19
  6041                           
  6042                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  6043                           
  6044                           ;incstack = 0
  6045  000832  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6046  000836  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6047  00083A  0E00               	movlw	0
  6048  00083C  6EDE               	movwf	postinc2,c
  6049  00083E  0E00               	movlw	0
  6050  000840  6EDD               	movwf	postdec2,c
  6051                           
  6052                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6053  000842  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6054  000846  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6055  00084A  ECC4  F024         	call	_get_ldnumber	;wreg free
  6056  00084E  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6057  000852  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6058                           
  6059                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6060  000856  0100               	movlb	0	; () banked
  6061  000858  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6062  00085A  D002               	goto	l5514
  6063                           
  6064                           ; BSR set to: 0
  6065  00085C  0E0B               	movlw	11
  6066  00085E  0012               	return	
  6067  000860                     l5514:
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;ff.c: 2224:  fs = FatFs[vol];
  6071  000860  90D8               	bcf	status,0,c
  6072  000862  3580               	rlcf	find_volume@vol& (0+255),w,b
  6073  000864  6ED9               	movwf	fsr2l,c
  6074  000866  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6075  000868  6EDA               	movwf	fsr2h,c
  6076  00086A  0ED4               	movlw	low ff@FatFs
  6077  00086C  26D9               	addwf	fsr2l,f,c
  6078  00086E  0E00               	movlw	high ff@FatFs
  6079  000870  22DA               	addwfc	fsr2h,f,c
  6080  000872  CFDE F098          	movff	postinc2,find_volume@fs
  6081  000876  CFDD F099          	movff	postdec2,find_volume@fs+1
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6085  00087A  5198               	movf	find_volume@fs& (0+255),w,b
  6086  00087C  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6087  00087E  A4D8               	btfss	status,2,c
  6088  000880  D002               	goto	l5522
  6089                           
  6090                           ; BSR set to: 0
  6091  000882  0E0C               	movlw	12
  6092  000884  0012               	return	
  6093  000886                     l5522:
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;ff.c: 2228:  *rfs = fs;
  6097  000886  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6098  00088A  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6099  00088E  C098  FFDE         	movff	find_volume@fs,postinc2
  6100  000892  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;ff.c: 2230:  if (fs->fs_type) {
  6104  000896  C098  FFD9         	movff	find_volume@fs,fsr2l
  6105  00089A  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6106  00089E  50DF               	movf	indf2,w,c
  6107  0008A0  B4D8               	btfsc	status,2,c
  6108  0008A2  D015               	goto	l5542
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6112  0008A4  EE20 F001          	lfsr	2,1
  6113  0008A8  5198               	movf	find_volume@fs& (0+255),w,b
  6114  0008AA  26D9               	addwf	fsr2l,f,c
  6115  0008AC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6116  0008AE  22DA               	addwfc	fsr2h,f,c
  6117  0008B0  50DF               	movf	indf2,w,c
  6118  0008B2  ECEC  F02A         	call	_disk_status
  6119  0008B6  0100               	movlb	0	; () banked
  6120  0008B8  6F8C               	movwf	find_volume@stat& (0+255),b
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6124  0008BA  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6125  0008BC  D008               	goto	l5542
  6126                           
  6127                           ; BSR set to: 0
  6128  0008BE  5049               	movf	find_volume@wmode,w,c
  6129  0008C0  A4D8               	btfss	status,2,c
  6130                           
  6131                           ; BSR set to: 0
  6132  0008C2  A58C               	btfss	find_volume@stat& (0+255),2,b
  6133  0008C4  D002               	goto	l5538
  6134  0008C6                     u7330:
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6138  0008C6  0E0A               	movlw	10
  6139  0008C8  0012               	return	
  6140  0008CA                     l5538:
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;ff.c: 2235:    return FR_OK;
  6144  0008CA  0E00               	movlw	0
  6145  0008CC  0012               	return	
  6146  0008CE                     l5542:
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;ff.c: 2242:  fs->fs_type = 0;
  6150  0008CE  C098  FFD9         	movff	find_volume@fs,fsr2l
  6151  0008D2  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6152  0008D6  0E00               	movlw	0
  6153  0008D8  6EDF               	movwf	indf2,c
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6157  0008DA  EE20 F001          	lfsr	2,1
  6158  0008DE  5198               	movf	find_volume@fs& (0+255),w,b
  6159  0008E0  26D9               	addwf	fsr2l,f,c
  6160  0008E2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6161  0008E4  22DA               	addwfc	fsr2h,f,c
  6162  0008E6  C080  FFDF         	movff	find_volume@vol,indf2
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6166  0008EA  EE20 F001          	lfsr	2,1
  6167  0008EE  5198               	movf	find_volume@fs& (0+255),w,b
  6168  0008F0  26D9               	addwf	fsr2l,f,c
  6169  0008F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6170  0008F4  22DA               	addwfc	fsr2h,f,c
  6171  0008F6  50DF               	movf	indf2,w,c
  6172  0008F8  ECCC  F01D         	call	_disk_initialize
  6173  0008FC  0100               	movlb	0	; () banked
  6174  0008FE  6F8C               	movwf	find_volume@stat& (0+255),b
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;ff.c: 2245:  if (stat & 0x01)
  6178  000900  A18C               	btfss	find_volume@stat& (0+255),0,b
  6179  000902  D002               	goto	l5554
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;ff.c: 2246:   return FR_NOT_READY;
  6183  000904  0E03               	movlw	3
  6184  000906  0012               	return	
  6185  000908                     l5554:
  6186                           
  6187                           ; BSR set to: 0
  6188  000908  5049               	movf	find_volume@wmode,w,c
  6189  00090A  B4D8               	btfsc	status,2,c
  6190  00090C  D002               	goto	l5562
  6191                           
  6192                           ; BSR set to: 0
  6193  00090E  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6194  000910  D7DA               	goto	u7330
  6195  000912                     l5562:
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;ff.c: 2254:  bsect = 0;
  6199  000912  0E00               	movlw	0
  6200  000914  6F91               	movwf	find_volume@bsect& (0+255),b
  6201  000916  0E00               	movlw	0
  6202  000918  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6203  00091A  0E00               	movlw	0
  6204  00091C  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6205  00091E  0E00               	movlw	0
  6206  000920  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6210  000922  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6211  000926  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6212  00092A  0E00               	movlw	0
  6213  00092C  6E3D               	movwf	check_fs@sect,c
  6214  00092E  0E00               	movlw	0
  6215  000930  6E3E               	movwf	check_fs@sect+1,c
  6216  000932  0E00               	movlw	0
  6217  000934  6E3F               	movwf	check_fs@sect+2,c
  6218  000936  0E00               	movlw	0
  6219  000938  6E40               	movwf	check_fs@sect+3,c
  6220  00093A  EC4E  F024         	call	_check_fs	;wreg free
  6221  00093E  0100               	movlb	0	; () banked
  6222  000940  6F97               	movwf	find_volume@fmt& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6226  000942  0597               	decf	find_volume@fmt& (0+255),w,b
  6227  000944  A4D8               	btfss	status,2,c
  6228  000946  D0AE               	goto	u7430
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6232  000948  0E00               	movlw	0
  6233  00094A  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6234  00094C  0E00               	movlw	0
  6235  00094E  6F95               	movwf	find_volume@i& (0+255),b
  6236  000950                     l5574:
  6237                           
  6238                           ; BSR set to: 0
  6239  000950  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6240  000952  E15A               	bnz	l5590
  6241  000954  0E04               	movlw	4
  6242  000956  5D95               	subwf	find_volume@i& (0+255),w,b
  6243  000958  B0D8               	btfsc	status,0,c
  6244  00095A  D056               	goto	l5590
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6248  00095C  C095  F04A         	movff	find_volume@i,??_find_volume
  6249  000960  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6250  000964  3A4A               	swapf	??_find_volume,f,c
  6251  000966  3A4B               	swapf	??_find_volume+1,f,c
  6252  000968  0EF0               	movlw	240
  6253  00096A  164B               	andwf	??_find_volume+1,f,c
  6254  00096C  504A               	movf	??_find_volume,w,c
  6255  00096E  0B0F               	andlw	15
  6256  000970  124B               	iorwf	??_find_volume+1,f,c
  6257  000972  0EF0               	movlw	240
  6258  000974  164A               	andwf	??_find_volume,f,c
  6259  000976  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6260  00097A  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6261  00097E  504A               	movf	??_find_volume,w,c
  6262  000980  264C               	addwf	??_find_volume+2,f,c
  6263  000982  504B               	movf	??_find_volume+1,w,c
  6264  000984  224D               	addwfc	??_find_volume+3,f,c
  6265  000986  0EEC               	movlw	236
  6266  000988  244C               	addwf	??_find_volume+2,w,c
  6267  00098A  6F7A               	movwf	find_volume@pt& (0+255),b
  6268  00098C  0E01               	movlw	1
  6269  00098E  204D               	addwfc	??_find_volume+3,w,c
  6270  000990  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6274  000992  EE20 F004          	lfsr	2,4
  6275  000996  517A               	movf	find_volume@pt& (0+255),w,b
  6276  000998  26D9               	addwf	fsr2l,f,c
  6277  00099A  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6278  00099C  22DA               	addwfc	fsr2h,f,c
  6279  00099E  50DF               	movf	indf2,w,c
  6280  0009A0  A4D8               	btfss	status,2,c
  6281  0009A2  D009               	goto	l5584
  6282                           
  6283                           ; BSR set to: 0
  6284  0009A4  0E00               	movlw	0
  6285  0009A6  6F70               	movwf	_find_volume$920& (0+255),b
  6286  0009A8  0E00               	movlw	0
  6287  0009AA  6F71               	movwf	(_find_volume$920+1)& (0+255),b
  6288  0009AC  0E00               	movlw	0
  6289  0009AE  6F72               	movwf	(_find_volume$920+2)& (0+255),b
  6290  0009B0  0E00               	movlw	0
  6291  0009B2  6F73               	movwf	(_find_volume$920+3)& (0+255),b
  6292  0009B4  D00E               	goto	l583
  6293  0009B6                     l5584:
  6294                           
  6295                           ; BSR set to: 0
  6296  0009B6  EE20 F008          	lfsr	2,8
  6297  0009BA  517A               	movf	find_volume@pt& (0+255),w,b
  6298  0009BC  26D9               	addwf	fsr2l,f,c
  6299  0009BE  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6300  0009C0  22DA               	addwfc	fsr2h,f,c
  6301  0009C2  CFDE F070          	movff	postinc2,_find_volume$920
  6302  0009C6  CFDE F071          	movff	postinc2,_find_volume$920+1
  6303  0009CA  CFDE F072          	movff	postinc2,_find_volume$920+2
  6304  0009CE  CFDE F073          	movff	postinc2,_find_volume$920+3
  6305  0009D2                     l583:
  6306                           
  6307                           ; BSR set to: 0
  6308  0009D2  0E60               	movlw	low find_volume@br
  6309  0009D4  6E4A               	movwf	??_find_volume& (0+255),c
  6310  0009D6  0E00               	movlw	high find_volume@br
  6311  0009D8  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6312  0009DA  90D8               	bcf	status,0,c
  6313  0009DC  3595               	rlcf	find_volume@i& (0+255),w,b
  6314  0009DE  6ED9               	movwf	fsr2l,c
  6315  0009E0  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6316  0009E2  6EDA               	movwf	fsr2h,c
  6317  0009E4  90D8               	bcf	status,0,c
  6318  0009E6  36D9               	rlcf	fsr2l,f,c
  6319  0009E8  36DA               	rlcf	fsr2h,f,c
  6320  0009EA  504A               	movf	??_find_volume,w,c
  6321  0009EC  26D9               	addwf	fsr2l,f,c
  6322  0009EE  504B               	movf	??_find_volume+1,w,c
  6323  0009F0  22DA               	addwfc	fsr2h,f,c
  6324  0009F2  C070  FFDE         	movff	_find_volume$920,postinc2
  6325  0009F6  C071  FFDE         	movff	_find_volume$920+1,postinc2
  6326  0009FA  C072  FFDE         	movff	_find_volume$920+2,postinc2
  6327  0009FE  C073  FFDE         	movff	_find_volume$920+3,postinc2
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;ff.c: 2260:   }
  6331  000A02  4B95               	infsnz	find_volume@i& (0+255),f,b
  6332  000A04  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6333  000A06  D7A4               	goto	l5574
  6334  000A08                     l5590:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;ff.c: 2261:   i = 0;
  6338  000A08  0E00               	movlw	0
  6339  000A0A  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6340  000A0C  0E00               	movlw	0
  6341  000A0E  6F95               	movwf	find_volume@i& (0+255),b
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;ff.c: 2262:   if (i) i--;
  6345  000A10  5195               	movf	find_volume@i& (0+255),w,b
  6346  000A12  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6347  000A14  B4D8               	btfsc	status,2,c
  6348  000A16  D003               	goto	l5596
  6349                           
  6350                           ; BSR set to: 0
  6351  000A18  0795               	decf	find_volume@i& (0+255),f,b
  6352  000A1A  A0D8               	btfss	status,0,c
  6353  000A1C  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6354  000A1E                     l5596:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;ff.c: 2264:    bsect = br[i];
  6358  000A1E  0E60               	movlw	low find_volume@br
  6359  000A20  6E4A               	movwf	??_find_volume& (0+255),c
  6360  000A22  0E00               	movlw	high find_volume@br
  6361  000A24  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6362  000A26  90D8               	bcf	status,0,c
  6363  000A28  3595               	rlcf	find_volume@i& (0+255),w,b
  6364  000A2A  6ED9               	movwf	fsr2l,c
  6365  000A2C  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6366  000A2E  6EDA               	movwf	fsr2h,c
  6367  000A30  90D8               	bcf	status,0,c
  6368  000A32  36D9               	rlcf	fsr2l,f,c
  6369  000A34  36DA               	rlcf	fsr2h,f,c
  6370  000A36  504A               	movf	??_find_volume,w,c
  6371  000A38  26D9               	addwf	fsr2l,f,c
  6372  000A3A  504B               	movf	??_find_volume+1,w,c
  6373  000A3C  22DA               	addwfc	fsr2h,f,c
  6374  000A3E  CFDE F091          	movff	postinc2,find_volume@bsect
  6375  000A42  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6376  000A46  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6377  000A4A  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6381  000A4E  5191               	movf	find_volume@bsect& (0+255),w,b
  6382  000A50  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6383  000A52  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6384  000A54  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6385  000A56  A4D8               	btfss	status,2,c
  6386  000A58  D005               	goto	l5602
  6387                           
  6388                           ; BSR set to: 0
  6389  000A5A  0E00               	movlw	0
  6390  000A5C  6F75               	movwf	(_find_volume$921+1)& (0+255),b
  6391  000A5E  0E02               	movlw	2
  6392  000A60  6F74               	movwf	_find_volume$921& (0+255),b
  6393  000A62  D013               	goto	l5604
  6394  000A64                     l5602:
  6395                           
  6396                           ; BSR set to: 0
  6397  000A64  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6398  000A68  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6399  000A6C  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6400  000A70  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6401  000A74  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6402  000A78  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6403  000A7C  EC4E  F024         	call	_check_fs	;wreg free
  6404  000A80  6E4A               	movwf	??_find_volume& (0+255),c
  6405  000A82  504A               	movf	??_find_volume,w,c
  6406  000A84  0100               	movlb	0	; () banked
  6407  000A86  6F74               	movwf	_find_volume$921& (0+255),b
  6408  000A88  6B75               	clrf	(_find_volume$921+1)& (0+255),b
  6409  000A8A                     l5604:
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6413  000A8A  C074  F097         	movff	_find_volume$921,find_volume@fmt
  6414                           
  6415                           ; BSR set to: 0
  6416  000A8E  5197               	movf	find_volume@fmt& (0+255),w,b
  6417  000A90  B4D8               	btfsc	status,2,c
  6418  000A92  D008               	goto	u7430
  6419                           
  6420                           ; BSR set to: 0
  6421  000A94  4B95               	infsnz	find_volume@i& (0+255),f,b
  6422  000A96  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6423  000A98  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6424  000A9A  E104               	bnz	u7430
  6425  000A9C  0E04               	movlw	4
  6426  000A9E  5D95               	subwf	find_volume@i& (0+255),w,b
  6427  000AA0  A0D8               	btfss	status,0,c
  6428  000AA2  D7BD               	goto	l5596
  6429  000AA4                     u7430:
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6433  000AA4  0E03               	movlw	3
  6434  000AA6  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6435  000AA8  A4D8               	btfss	status,2,c
  6436  000AAA  D002               	goto	l5616
  6437                           
  6438                           ; BSR set to: 0
  6439  000AAC  0E01               	movlw	1
  6440  000AAE  0012               	return	
  6441  000AB0                     l5616:
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6445  000AB0  5197               	movf	find_volume@fmt& (0+255),w,b
  6446  000AB2  B4D8               	btfsc	status,2,c
  6447  000AB4  D002               	goto	l5622
  6448  000AB6                     u7450:
  6449  000AB6                     l5618:
  6450                           
  6451                           ; BSR set to: 0
  6452  000AB6  0E0D               	movlw	13
  6453  000AB8  0012               	return	
  6454  000ABA                     l5622:
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6458  000ABA  EE20 F039          	lfsr	2,57
  6459  000ABE  5198               	movf	find_volume@fs& (0+255),w,b
  6460  000AC0  26D9               	addwf	fsr2l,f,c
  6461  000AC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6462  000AC4  22DA               	addwfc	fsr2h,f,c
  6463  000AC6  50DE               	movf	postinc2,w,c
  6464  000AC8  E1F6               	bnz	l5618
  6465  000ACA  0E02               	movlw	2
  6466  000ACC  18DE               	xorwf	postinc2,w,c
  6467  000ACE  A4D8               	btfss	status,2,c
  6468  000AD0  D7F2               	goto	u7450
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6472  000AD2  EE20 F044          	lfsr	2,68
  6473  000AD6  5198               	movf	find_volume@fs& (0+255),w,b
  6474  000AD8  26D9               	addwf	fsr2l,f,c
  6475  000ADA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6476  000ADC  22DA               	addwfc	fsr2h,f,c
  6477  000ADE  CFDE F04A          	movff	postinc2,??_find_volume
  6478  000AE2  CFDD F04B          	movff	postdec2,??_find_volume+1
  6479  000AE6  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6480  000AEA  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6481  000AEE  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6482  000AF0  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6486  000AF2  518D               	movf	find_volume@fasize& (0+255),w,b
  6487  000AF4  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6488  000AF6  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6489  000AF8  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6490  000AFA  A4D8               	btfss	status,2,c
  6491  000AFC  D00E               	goto	l596
  6492                           
  6493                           ; BSR set to: 0
  6494  000AFE  EE20 F052          	lfsr	2,82
  6495  000B02  5198               	movf	find_volume@fs& (0+255),w,b
  6496  000B04  26D9               	addwf	fsr2l,f,c
  6497  000B06  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6498  000B08  22DA               	addwfc	fsr2h,f,c
  6499  000B0A  CFDE F08D          	movff	postinc2,find_volume@fasize
  6500  000B0E  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6501  000B12  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6502  000B16  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6503  000B1A                     l596:
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;ff.c: 2278:  fs->fsize = fasize;
  6507  000B1A  EE20 F016          	lfsr	2,22
  6508  000B1E  5198               	movf	find_volume@fs& (0+255),w,b
  6509  000B20  26D9               	addwf	fsr2l,f,c
  6510  000B22  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6511  000B24  22DA               	addwfc	fsr2h,f,c
  6512  000B26  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6513  000B2A  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6514  000B2E  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6515  000B32  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6519  000B36  EE20 F03E          	lfsr	2,62
  6520  000B3A  5198               	movf	find_volume@fs& (0+255),w,b
  6521  000B3C  26D9               	addwf	fsr2l,f,c
  6522  000B3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6523  000B40  22DA               	addwfc	fsr2h,f,c
  6524  000B42  EE10 F003          	lfsr	1,3
  6525  000B46  5198               	movf	find_volume@fs& (0+255),w,b
  6526  000B48  26E1               	addwf	fsr1l,f,c
  6527  000B4A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6528  000B4C  22E2               	addwfc	fsr1h,f,c
  6529  000B4E  CFDF FFE7          	movff	indf2,indf1
  6530                           
  6531                           ; BSR set to: 0
  6532                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6533  000B52  EE20 F003          	lfsr	2,3
  6534  000B56  5198               	movf	find_volume@fs& (0+255),w,b
  6535  000B58  26D9               	addwf	fsr2l,f,c
  6536  000B5A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6537  000B5C  22DA               	addwfc	fsr2h,f,c
  6538  000B5E  04DE               	decf	postinc2,w,c
  6539  000B60  B4D8               	btfsc	status,2,c
  6540  000B62  D00A               	goto	l5644
  6541                           
  6542                           ; BSR set to: 0
  6543  000B64  EE20 F003          	lfsr	2,3
  6544  000B68  5198               	movf	find_volume@fs& (0+255),w,b
  6545  000B6A  26D9               	addwf	fsr2l,f,c
  6546  000B6C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6547  000B6E  22DA               	addwfc	fsr2h,f,c
  6548  000B70  0E02               	movlw	2
  6549  000B72  18DE               	xorwf	postinc2,w,c
  6550  000B74  A4D8               	btfss	status,2,c
  6551  000B76  D79F               	goto	u7450
  6552  000B78                     l5644:
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6556  000B78  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6557  000B7C  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6558  000B80  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6559  000B84  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6560  000B88  EE20 F003          	lfsr	2,3
  6561  000B8C  5198               	movf	find_volume@fs& (0+255),w,b
  6562  000B8E  26D9               	addwf	fsr2l,f,c
  6563  000B90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6564  000B92  22DA               	addwfc	fsr2h,f,c
  6565  000B94  50DF               	movf	indf2,w,c
  6566  000B96  6E4A               	movwf	??_find_volume& (0+255),c
  6567  000B98  504A               	movf	??_find_volume,w,c
  6568  000B9A  6E05               	movwf	___lmul@multiplicand,c
  6569  000B9C  6A06               	clrf	___lmul@multiplicand+1,c
  6570  000B9E  6A07               	clrf	___lmul@multiplicand+2,c
  6571  000BA0  6A08               	clrf	___lmul@multiplicand+3,c
  6572  000BA2  EC88  F029         	call	___lmul	;wreg free
  6573  000BA6  C001  F08D         	movff	?___lmul,find_volume@fasize
  6574  000BAA  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6575  000BAE  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6576  000BB2  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6577                           
  6578                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6579  000BB6  0100               	movlb	0	; () banked
  6580  000BB8  EE20 F03B          	lfsr	2,59
  6581  000BBC  5198               	movf	find_volume@fs& (0+255),w,b
  6582  000BBE  26D9               	addwf	fsr2l,f,c
  6583  000BC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6584  000BC2  22DA               	addwfc	fsr2h,f,c
  6585  000BC4  EE10 F002          	lfsr	1,2
  6586  000BC8  5198               	movf	find_volume@fs& (0+255),w,b
  6587  000BCA  26E1               	addwf	fsr1l,f,c
  6588  000BCC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6589  000BCE  22E2               	addwfc	fsr1h,f,c
  6590  000BD0  CFDF FFE7          	movff	indf2,indf1
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6594  000BD4  EE20 F002          	lfsr	2,2
  6595  000BD8  5198               	movf	find_volume@fs& (0+255),w,b
  6596  000BDA  26D9               	addwf	fsr2l,f,c
  6597  000BDC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6598  000BDE  22DA               	addwfc	fsr2h,f,c
  6599  000BE0  50DF               	movf	indf2,w,c
  6600  000BE2  B4D8               	btfsc	status,2,c
  6601  000BE4  D768               	goto	u7450
  6602                           
  6603                           ; BSR set to: 0
  6604  000BE6  0EFF               	movlw	255
  6605  000BE8  6E4A               	movwf	??_find_volume& (0+255),c
  6606  000BEA  0EFF               	movlw	255
  6607  000BEC  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6608  000BEE  EE20 F002          	lfsr	2,2
  6609  000BF2  5198               	movf	find_volume@fs& (0+255),w,b
  6610  000BF4  26D9               	addwf	fsr2l,f,c
  6611  000BF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6612  000BF8  22DA               	addwfc	fsr2h,f,c
  6613  000BFA  50DF               	movf	indf2,w,c
  6614  000BFC  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6615  000BFE  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6616  000C00  504A               	movf	??_find_volume,w,c
  6617  000C02  264C               	addwf	??_find_volume+2,f,c
  6618  000C04  504B               	movf	??_find_volume+1,w,c
  6619  000C06  224D               	addwfc	??_find_volume+3,f,c
  6620  000C08  EE20 F002          	lfsr	2,2
  6621  000C0C  5198               	movf	find_volume@fs& (0+255),w,b
  6622  000C0E  26D9               	addwf	fsr2l,f,c
  6623  000C10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6624  000C12  22DA               	addwfc	fsr2h,f,c
  6625  000C14  50DF               	movf	indf2,w,c
  6626  000C16  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6627  000C18  504E               	movf	??_find_volume+4,w,c
  6628  000C1A  164C               	andwf	??_find_volume+2,f,c
  6629  000C1C  0E00               	movlw	0
  6630  000C1E  164D               	andwf	??_find_volume+3,f,c
  6631  000C20  504C               	movf	??_find_volume+2,w,c
  6632  000C22  104D               	iorwf	??_find_volume+3,w,c
  6633  000C24  A4D8               	btfss	status,2,c
  6634  000C26  D747               	goto	u7450
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6638  000C28  EE20 F03F          	lfsr	2,63
  6639  000C2C  5198               	movf	find_volume@fs& (0+255),w,b
  6640  000C2E  26D9               	addwf	fsr2l,f,c
  6641  000C30  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6642  000C32  22DA               	addwfc	fsr2h,f,c
  6643  000C34  EE10 F008          	lfsr	1,8
  6644  000C38  5198               	movf	find_volume@fs& (0+255),w,b
  6645  000C3A  26E1               	addwf	fsr1l,f,c
  6646  000C3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6647  000C3E  22E2               	addwfc	fsr1h,f,c
  6648  000C40  CFDE FFE6          	movff	postinc2,postinc1
  6649  000C44  CFDD FFE5          	movff	postdec2,postdec1
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6653  000C48  EE20 F008          	lfsr	2,8
  6654  000C4C  5198               	movf	find_volume@fs& (0+255),w,b
  6655  000C4E  26D9               	addwf	fsr2l,f,c
  6656  000C50  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6657  000C52  22DA               	addwfc	fsr2h,f,c
  6658  000C54  CFDE F04A          	movff	postinc2,??_find_volume
  6659  000C58  CFDD F04B          	movff	postdec2,??_find_volume+1
  6660  000C5C  0E0F               	movlw	15
  6661  000C5E  164A               	andwf	??_find_volume,f,c
  6662  000C60  0E00               	movlw	0
  6663  000C62  164B               	andwf	??_find_volume+1,f,c
  6664  000C64  504A               	movf	??_find_volume,w,c
  6665  000C66  104B               	iorwf	??_find_volume+1,w,c
  6666  000C68  A4D8               	btfss	status,2,c
  6667  000C6A  D725               	goto	u7450
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6671  000C6C  EE20 F041          	lfsr	2,65
  6672  000C70  5198               	movf	find_volume@fs& (0+255),w,b
  6673  000C72  26D9               	addwf	fsr2l,f,c
  6674  000C74  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6675  000C76  22DA               	addwfc	fsr2h,f,c
  6676  000C78  CFDE F04A          	movff	postinc2,??_find_volume
  6677  000C7C  CFDD F04B          	movff	postdec2,??_find_volume+1
  6678  000C80  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6679  000C84  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6680  000C88  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6681  000C8A  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6685  000C8C  5184               	movf	find_volume@tsect& (0+255),w,b
  6686  000C8E  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6687  000C90  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6688  000C92  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6689  000C94  A4D8               	btfss	status,2,c
  6690  000C96  D00E               	goto	l602
  6691                           
  6692                           ; BSR set to: 0
  6693  000C98  EE20 F04E          	lfsr	2,78
  6694  000C9C  5198               	movf	find_volume@fs& (0+255),w,b
  6695  000C9E  26D9               	addwf	fsr2l,f,c
  6696  000CA0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6697  000CA2  22DA               	addwfc	fsr2h,f,c
  6698  000CA4  CFDE F084          	movff	postinc2,find_volume@tsect
  6699  000CA8  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6700  000CAC  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6701  000CB0  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6702  000CB4                     l602:
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6706  000CB4  EE20 F03C          	lfsr	2,60
  6707  000CB8  5198               	movf	find_volume@fs& (0+255),w,b
  6708  000CBA  26D9               	addwf	fsr2l,f,c
  6709  000CBC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6710  000CBE  22DA               	addwfc	fsr2h,f,c
  6711  000CC0  CFDE F082          	movff	postinc2,find_volume@nrsv
  6712  000CC4  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6716  000CC8  5182               	movf	find_volume@nrsv& (0+255),w,b
  6717  000CCA  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6718  000CCC  B4D8               	btfsc	status,2,c
  6719  000CCE  D6F3               	goto	u7450
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6723  000CD0  EE20 F008          	lfsr	2,8
  6724  000CD4  5198               	movf	find_volume@fs& (0+255),w,b
  6725  000CD6  26D9               	addwf	fsr2l,f,c
  6726  000CD8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6727  000CDA  22DA               	addwfc	fsr2h,f,c
  6728  000CDC  CFDE F04A          	movff	postinc2,??_find_volume
  6729  000CE0  CFDD F04B          	movff	postdec2,??_find_volume+1
  6730  000CE4  0E04               	movlw	4
  6731  000CE6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6732  000CE8                     u7555:
  6733  000CE8  90D8               	bcf	status,0,c
  6734  000CEA  324B               	rrcf	??_find_volume+1,f,c
  6735  000CEC  324A               	rrcf	??_find_volume,f,c
  6736  000CEE  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6737  000CF0  D7FB               	goto	u7555
  6738  000CF2  5182               	movf	find_volume@nrsv& (0+255),w,b
  6739  000CF4  244A               	addwf	??_find_volume,w,c
  6740  000CF6  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6741  000CF8  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6742  000CFA  204B               	addwfc	??_find_volume+1,w,c
  6743  000CFC  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6744  000CFE  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6745  000D00  B0D8               	btfsc	status,0,c
  6746  000D02  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6747  000D04  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6748  000D06  518D               	movf	find_volume@fasize& (0+255),w,b
  6749  000D08  244D               	addwf	??_find_volume+3,w,c
  6750  000D0A  6F7C               	movwf	find_volume@sysect& (0+255),b
  6751  000D0C  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6752  000D0E  204E               	addwfc	??_find_volume+4,w,c
  6753  000D10  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6754  000D12  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6755  000D14  204F               	addwfc	??_find_volume+5,w,c
  6756  000D16  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6757  000D18  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6758  000D1A  2050               	addwfc	??_find_volume+6,w,c
  6759  000D1C  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6763  000D1E  517C               	movf	find_volume@sysect& (0+255),w,b
  6764  000D20  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6765  000D22  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6766  000D24  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6767  000D26  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6768  000D28  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6769  000D2A  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6770  000D2C  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6771  000D2E  A0D8               	btfss	status,0,c
  6772  000D30  D6C2               	goto	u7450
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6776  000D32  517C               	movf	find_volume@sysect& (0+255),w,b
  6777  000D34  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6778  000D36  6E01               	movwf	___lldiv@dividend,c
  6779  000D38  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6780  000D3A  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6781  000D3C  6E02               	movwf	___lldiv@dividend+1,c
  6782  000D3E  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6783  000D40  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6784  000D42  6E03               	movwf	___lldiv@dividend+2,c
  6785  000D44  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6786  000D46  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6787  000D48  6E04               	movwf	___lldiv@dividend+3,c
  6788  000D4A  EE20 F002          	lfsr	2,2
  6789  000D4E  5198               	movf	find_volume@fs& (0+255),w,b
  6790  000D50  26D9               	addwf	fsr2l,f,c
  6791  000D52  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6792  000D54  22DA               	addwfc	fsr2h,f,c
  6793  000D56  50DF               	movf	indf2,w,c
  6794  000D58  6E4A               	movwf	??_find_volume& (0+255),c
  6795  000D5A  504A               	movf	??_find_volume,w,c
  6796  000D5C  6E05               	movwf	___lldiv@divisor,c
  6797  000D5E  6A06               	clrf	___lldiv@divisor+1,c
  6798  000D60  6A07               	clrf	___lldiv@divisor+2,c
  6799  000D62  6A08               	clrf	___lldiv@divisor+3,c
  6800  000D64  EC20  F028         	call	___lldiv	;wreg free
  6801  000D68  C001  F088         	movff	?___lldiv,find_volume@nclst
  6802  000D6C  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6803  000D70  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6804  000D74  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6805                           
  6806                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6807  000D78  0100               	movlb	0	; () banked
  6808  000D7A  5188               	movf	find_volume@nclst& (0+255),w,b
  6809  000D7C  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  6810  000D7E  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6811  000D80  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  6812  000D82  B4D8               	btfsc	status,2,c
  6813  000D84  D698               	goto	u7450
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;ff.c: 2304:  fmt = 1;
  6817  000D86  0E01               	movlw	1
  6818  000D88  6F97               	movwf	find_volume@fmt& (0+255),b
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  6822  000D8A  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6823  000D8C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6824  000D8E  E106               	bnz	u7580
  6825  000D90  0EF6               	movlw	246
  6826  000D92  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6827  000D94  0E0F               	movlw	15
  6828  000D96  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6829  000D98  A0D8               	btfss	status,0,c
  6830  000D9A  D002               	goto	l5698
  6831  000D9C                     u7580:
  6832                           
  6833                           ; BSR set to: 0
  6834  000D9C  0E02               	movlw	2
  6835  000D9E  6F97               	movwf	find_volume@fmt& (0+255),b
  6836  000DA0                     l5698:
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  6840  000DA0  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6841  000DA2  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6842  000DA4  E106               	bnz	u7590
  6843  000DA6  0EF6               	movlw	246
  6844  000DA8  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6845  000DAA  0EFF               	movlw	255
  6846  000DAC  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6847  000DAE  A0D8               	btfss	status,0,c
  6848  000DB0  D002               	goto	l5702
  6849  000DB2                     u7590:
  6850                           
  6851                           ; BSR set to: 0
  6852  000DB2  0E03               	movlw	3
  6853  000DB4  6F97               	movwf	find_volume@fmt& (0+255),b
  6854  000DB6                     l5702:
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  6858  000DB6  0E02               	movlw	2
  6859  000DB8  2588               	addwf	find_volume@nclst& (0+255),w,b
  6860  000DBA  6E4A               	movwf	??_find_volume& (0+255),c
  6861  000DBC  0E00               	movlw	0
  6862  000DBE  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  6863  000DC0  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6864  000DC2  0E00               	movlw	0
  6865  000DC4  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  6866  000DC6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6867  000DC8  0E00               	movlw	0
  6868  000DCA  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  6869  000DCC  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6870  000DCE  EE20 F012          	lfsr	2,18
  6871  000DD2  5198               	movf	find_volume@fs& (0+255),w,b
  6872  000DD4  26D9               	addwf	fsr2l,f,c
  6873  000DD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6874  000DD8  22DA               	addwfc	fsr2h,f,c
  6875  000DDA  C04A  FFDE         	movff	??_find_volume,postinc2
  6876  000DDE  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6877  000DE2  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6878  000DE6  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;ff.c: 2310:  fs->volbase = bsect;
  6882  000DEA  EE20 F01A          	lfsr	2,26
  6883  000DEE  5198               	movf	find_volume@fs& (0+255),w,b
  6884  000DF0  26D9               	addwf	fsr2l,f,c
  6885  000DF2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6886  000DF4  22DA               	addwfc	fsr2h,f,c
  6887  000DF6  C091  FFDE         	movff	find_volume@bsect,postinc2
  6888  000DFA  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  6889  000DFE  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  6890  000E02  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  6894  000E06  5182               	movf	find_volume@nrsv& (0+255),w,b
  6895  000E08  2591               	addwf	find_volume@bsect& (0+255),w,b
  6896  000E0A  6E4A               	movwf	??_find_volume& (0+255),c
  6897  000E0C  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6898  000E0E  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6899  000E10  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6900  000E12  0E00               	movlw	0
  6901  000E14  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6902  000E16  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6903  000E18  0E00               	movlw	0
  6904  000E1A  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6905  000E1C  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6906  000E1E  EE20 F01E          	lfsr	2,30
  6907  000E22  5198               	movf	find_volume@fs& (0+255),w,b
  6908  000E24  26D9               	addwf	fsr2l,f,c
  6909  000E26  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6910  000E28  22DA               	addwfc	fsr2h,f,c
  6911  000E2A  C04A  FFDE         	movff	??_find_volume,postinc2
  6912  000E2E  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6913  000E32  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6914  000E36  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;ff.c: 2312:  fs->database = bsect + sysect;
  6918  000E3A  517C               	movf	find_volume@sysect& (0+255),w,b
  6919  000E3C  2591               	addwf	find_volume@bsect& (0+255),w,b
  6920  000E3E  6E4A               	movwf	??_find_volume& (0+255),c
  6921  000E40  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6922  000E42  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6923  000E44  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6924  000E46  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6925  000E48  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6926  000E4A  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6927  000E4C  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6928  000E4E  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6929  000E50  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6930  000E52  EE20 F026          	lfsr	2,38
  6931  000E56  5198               	movf	find_volume@fs& (0+255),w,b
  6932  000E58  26D9               	addwf	fsr2l,f,c
  6933  000E5A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6934  000E5C  22DA               	addwfc	fsr2h,f,c
  6935  000E5E  C04A  FFDE         	movff	??_find_volume,postinc2
  6936  000E62  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6937  000E66  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6938  000E6A  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;ff.c: 2313:  if (fmt == 3) {
  6942  000E6E  0E03               	movlw	3
  6943  000E70  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6944  000E72  A4D8               	btfss	status,2,c
  6945  000E74  D03D               	goto	l5722
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  6949  000E76  EE20 F008          	lfsr	2,8
  6950  000E7A  5198               	movf	find_volume@fs& (0+255),w,b
  6951  000E7C  26D9               	addwf	fsr2l,f,c
  6952  000E7E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6953  000E80  22DA               	addwfc	fsr2h,f,c
  6954  000E82  50DE               	movf	postinc2,w,c
  6955  000E84  10DE               	iorwf	postinc2,w,c
  6956  000E86  A4D8               	btfss	status,2,c
  6957  000E88  D616               	goto	u7450
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  6961  000E8A  EE20 F05A          	lfsr	2,90
  6962  000E8E  5198               	movf	find_volume@fs& (0+255),w,b
  6963  000E90  26D9               	addwf	fsr2l,f,c
  6964  000E92  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6965  000E94  22DA               	addwfc	fsr2h,f,c
  6966  000E96  EE10 F022          	lfsr	1,34
  6967  000E9A  5198               	movf	find_volume@fs& (0+255),w,b
  6968  000E9C  26E1               	addwf	fsr1l,f,c
  6969  000E9E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6970  000EA0  22E2               	addwfc	fsr1h,f,c
  6971  000EA2  CFDE FFE6          	movff	postinc2,postinc1
  6972  000EA6  CFDE FFE6          	movff	postinc2,postinc1
  6973  000EAA  CFDE FFE6          	movff	postinc2,postinc1
  6974  000EAE  CFDE FFE6          	movff	postinc2,postinc1
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  6978  000EB2  EE20 F012          	lfsr	2,18
  6979  000EB6  5198               	movf	find_volume@fs& (0+255),w,b
  6980  000EB8  26D9               	addwf	fsr2l,f,c
  6981  000EBA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6982  000EBC  22DA               	addwfc	fsr2h,f,c
  6983  000EBE  CFDE F04A          	movff	postinc2,??_find_volume
  6984  000EC2  CFDE F04B          	movff	postinc2,??_find_volume+1
  6985  000EC6  CFDE F04C          	movff	postinc2,??_find_volume+2
  6986  000ECA  CFDE F04D          	movff	postinc2,??_find_volume+3
  6987  000ECE  0E02               	movlw	2
  6988  000ED0                     u7625:
  6989  000ED0  90D8               	bcf	status,0,c
  6990  000ED2  364A               	rlcf	??_find_volume,f,c
  6991  000ED4  364B               	rlcf	??_find_volume+1,f,c
  6992  000ED6  364C               	rlcf	??_find_volume+2,f,c
  6993  000ED8  364D               	rlcf	??_find_volume+3,f,c
  6994  000EDA  2EE8               	decfsz	wreg,f,c
  6995  000EDC  D7F9               	goto	u7625
  6996  000EDE  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  6997  000EE2  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  6998  000EE6  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  6999  000EEA  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  7000                           
  7001                           ;ff.c: 2317:  } else {
  7002  000EEE  D091               	goto	l610
  7003  000EF0                     l5722:
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  7007  000EF0  EE20 F008          	lfsr	2,8
  7008  000EF4  5198               	movf	find_volume@fs& (0+255),w,b
  7009  000EF6  26D9               	addwf	fsr2l,f,c
  7010  000EF8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7011  000EFA  22DA               	addwfc	fsr2h,f,c
  7012  000EFC  50DE               	movf	postinc2,w,c
  7013  000EFE  10DE               	iorwf	postinc2,w,c
  7014  000F00  B4D8               	btfsc	status,2,c
  7015  000F02  D5D9               	goto	u7450
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  7019  000F04  EE20 F01E          	lfsr	2,30
  7020  000F08  5198               	movf	find_volume@fs& (0+255),w,b
  7021  000F0A  26D9               	addwf	fsr2l,f,c
  7022  000F0C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7023  000F0E  22DA               	addwfc	fsr2h,f,c
  7024  000F10  CFDE F04A          	movff	postinc2,??_find_volume
  7025  000F14  CFDE F04B          	movff	postinc2,??_find_volume+1
  7026  000F18  CFDE F04C          	movff	postinc2,??_find_volume+2
  7027  000F1C  CFDE F04D          	movff	postinc2,??_find_volume+3
  7028  000F20  518D               	movf	find_volume@fasize& (0+255),w,b
  7029  000F22  244A               	addwf	??_find_volume,w,c
  7030  000F24  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7031  000F26  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7032  000F28  204B               	addwfc	??_find_volume+1,w,c
  7033  000F2A  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7034  000F2C  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7035  000F2E  204C               	addwfc	??_find_volume+2,w,c
  7036  000F30  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7037  000F32  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7038  000F34  204D               	addwfc	??_find_volume+3,w,c
  7039  000F36  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7040  000F38  EE20 F022          	lfsr	2,34
  7041  000F3C  5198               	movf	find_volume@fs& (0+255),w,b
  7042  000F3E  26D9               	addwf	fsr2l,f,c
  7043  000F40  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7044  000F42  22DA               	addwfc	fsr2h,f,c
  7045  000F44  C04E  FFDE         	movff	??_find_volume+4,postinc2
  7046  000F48  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7047  000F4C  C050  FFDE         	movff	??_find_volume+6,postinc2
  7048  000F50  C051  FFDE         	movff	??_find_volume+7,postinc2
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7052  000F54  0E02               	movlw	2
  7053  000F56  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7054  000F58  B4D8               	btfsc	status,2,c
  7055  000F5A  D044               	goto	l5734
  7056                           
  7057                           ; BSR set to: 0
  7058  000F5C  EE20 F012          	lfsr	2,18
  7059  000F60  5198               	movf	find_volume@fs& (0+255),w,b
  7060  000F62  26D9               	addwf	fsr2l,f,c
  7061  000F64  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7062  000F66  22DA               	addwfc	fsr2h,f,c
  7063  000F68  CFDE F04A          	movff	postinc2,??_find_volume
  7064  000F6C  CFDE F04B          	movff	postinc2,??_find_volume+1
  7065  000F70  CFDE F04C          	movff	postinc2,??_find_volume+2
  7066  000F74  CFDE F04D          	movff	postinc2,??_find_volume+3
  7067  000F78  0E01               	movlw	1
  7068  000F7A  144A               	andwf	??_find_volume,w,c
  7069  000F7C  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7070  000F7E  0E00               	movlw	0
  7071  000F80  144B               	andwf	??_find_volume+1,w,c
  7072  000F82  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7073  000F84  0E00               	movlw	0
  7074  000F86  144C               	andwf	??_find_volume+2,w,c
  7075  000F88  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7076  000F8A  0E00               	movlw	0
  7077  000F8C  144D               	andwf	??_find_volume+3,w,c
  7078  000F8E  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7079  000F90  EE20 F012          	lfsr	2,18
  7080  000F94  5198               	movf	find_volume@fs& (0+255),w,b
  7081  000F96  26D9               	addwf	fsr2l,f,c
  7082  000F98  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7083  000F9A  22DA               	addwfc	fsr2h,f,c
  7084  000F9C  CFDE F001          	movff	postinc2,___lmul@multiplier
  7085  000FA0  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7086  000FA4  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7087  000FA8  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7088  000FAC  0E03               	movlw	3
  7089  000FAE  6E05               	movwf	___lmul@multiplicand,c
  7090  000FB0  0E00               	movlw	0
  7091  000FB2  6E06               	movwf	___lmul@multiplicand+1,c
  7092  000FB4  0E00               	movlw	0
  7093  000FB6  6E07               	movwf	___lmul@multiplicand+2,c
  7094  000FB8  0E00               	movlw	0
  7095  000FBA  6E08               	movwf	___lmul@multiplicand+3,c
  7096  000FBC  EC88  F029         	call	___lmul	;wreg free
  7097  000FC0  90D8               	bcf	status,0,c
  7098  000FC2  3204               	rrcf	?___lmul+3,f,c
  7099  000FC4  3203               	rrcf	?___lmul+2,f,c
  7100  000FC6  3202               	rrcf	?___lmul+1,f,c
  7101  000FC8  3201               	rrcf	?___lmul,f,c
  7102  000FCA  504E               	movf	??_find_volume+4,w,c
  7103  000FCC  2401               	addwf	?___lmul,w,c
  7104  000FCE  0100               	movlb	0	; () banked
  7105  000FD0  6F76               	movwf	find_volume@szbfat& (0+255),b
  7106  000FD2  504F               	movf	??_find_volume+5,w,c
  7107  000FD4  2002               	addwfc	?___lmul+1,w,c
  7108  000FD6  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7109  000FD8  5050               	movf	??_find_volume+6,w,c
  7110  000FDA  2003               	addwfc	?___lmul+2,w,c
  7111  000FDC  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7112  000FDE  5051               	movf	??_find_volume+7,w,c
  7113  000FE0  2004               	addwfc	?___lmul+3,w,c
  7114  000FE2  D016               	goto	L6
  7115  000FE4                     l5734:
  7116                           
  7117                           ; BSR set to: 0
  7118  000FE4  EE20 F012          	lfsr	2,18
  7119  000FE8  5198               	movf	find_volume@fs& (0+255),w,b
  7120  000FEA  26D9               	addwf	fsr2l,f,c
  7121  000FEC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7122  000FEE  22DA               	addwfc	fsr2h,f,c
  7123  000FF0  CFDE F04A          	movff	postinc2,??_find_volume
  7124  000FF4  CFDE F04B          	movff	postinc2,??_find_volume+1
  7125  000FF8  CFDE F04C          	movff	postinc2,??_find_volume+2
  7126  000FFC  CFDE F04D          	movff	postinc2,??_find_volume+3
  7127  001000  90D8               	bcf	status,0,c
  7128  001002  344A               	rlcf	??_find_volume,w,c
  7129  001004  6F76               	movwf	find_volume@szbfat& (0+255),b
  7130  001006  344B               	rlcf	??_find_volume+1,w,c
  7131  001008  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7132  00100A  344C               	rlcf	??_find_volume+2,w,c
  7133  00100C  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7134  00100E  344D               	rlcf	??_find_volume+3,w,c
  7135  001010                     L6:
  7136  001010  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7137  001012                     l610:
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7141  001012  0EFF               	movlw	255
  7142  001014  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7143  001016  6E4A               	movwf	??_find_volume& (0+255),c
  7144  001018  0E01               	movlw	1
  7145  00101A  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7146  00101C  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7147  00101E  0E00               	movlw	0
  7148  001020  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7149  001022  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7150  001024  0E00               	movlw	0
  7151  001026  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7152  001028  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7153  00102A  0E0A               	movlw	10
  7154  00102C  D005               	goto	u7650
  7155  00102E                     u7655:
  7156  00102E  90D8               	bcf	status,0,c
  7157  001030  324D               	rrcf	??_find_volume+3,f,c
  7158  001032  324C               	rrcf	??_find_volume+2,f,c
  7159  001034  324B               	rrcf	??_find_volume+1,f,c
  7160  001036  324A               	rrcf	??_find_volume,f,c
  7161  001038                     u7650:
  7162  001038  2EE8               	decfsz	wreg,f,c
  7163  00103A  D7F9               	goto	u7655
  7164  00103C  EE20 F016          	lfsr	2,22
  7165  001040  5198               	movf	find_volume@fs& (0+255),w,b
  7166  001042  26D9               	addwf	fsr2l,f,c
  7167  001044  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7168  001046  22DA               	addwfc	fsr2h,f,c
  7169  001048  504A               	movf	??_find_volume,w,c
  7170  00104A  5CDE               	subwf	postinc2,w,c
  7171  00104C  504B               	movf	??_find_volume+1,w,c
  7172  00104E  58DE               	subwfb	postinc2,w,c
  7173  001050  504C               	movf	??_find_volume+2,w,c
  7174  001052  58DE               	subwfb	postinc2,w,c
  7175  001054  504D               	movf	??_find_volume+3,w,c
  7176  001056  58DE               	subwfb	postinc2,w,c
  7177  001058  A0D8               	btfss	status,0,c
  7178  00105A  D52D               	goto	u7450
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7182  00105C  EE20 F00E          	lfsr	2,14
  7183  001060  5198               	movf	find_volume@fs& (0+255),w,b
  7184  001062  26D9               	addwf	fsr2l,f,c
  7185  001064  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7186  001066  22DA               	addwfc	fsr2h,f,c
  7187  001068  0EFF               	movlw	255
  7188  00106A  6EDE               	movwf	postinc2,c
  7189  00106C  0EFF               	movlw	255
  7190  00106E  6EDE               	movwf	postinc2,c
  7191  001070  0EFF               	movlw	255
  7192  001072  6EDE               	movwf	postinc2,c
  7193  001074  0EFF               	movlw	255
  7194  001076  6EDD               	movwf	postdec2,c
  7195  001078  52DD               	movf	postdec2,f,c
  7196  00107A  52DD               	movf	postdec2,f,c
  7197  00107C  EE10 F00A          	lfsr	1,10
  7198  001080  5198               	movf	find_volume@fs& (0+255),w,b
  7199  001082  26E1               	addwf	fsr1l,f,c
  7200  001084  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7201  001086  22E2               	addwfc	fsr1h,f,c
  7202  001088  CFDE FFE6          	movff	postinc2,postinc1
  7203  00108C  CFDE FFE6          	movff	postinc2,postinc1
  7204  001090  CFDE FFE6          	movff	postinc2,postinc1
  7205  001094  CFDE FFE6          	movff	postinc2,postinc1
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7209  001098  EE20 F005          	lfsr	2,5
  7210  00109C  5198               	movf	find_volume@fs& (0+255),w,b
  7211  00109E  26D9               	addwf	fsr2l,f,c
  7212  0010A0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7213  0010A2  22DA               	addwfc	fsr2h,f,c
  7214  0010A4  0E80               	movlw	128
  7215  0010A6  6EDF               	movwf	indf2,c
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;ff.c: 2333:  if (fmt == 3
  7219  0010A8  0E03               	movlw	3
  7220  0010AA  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7221  0010AC  A4D8               	btfss	status,2,c
  7222  0010AE  D083               	goto	l5758
  7223                           
  7224                           ; BSR set to: 0
  7225  0010B0  EE20 F05E          	lfsr	2,94
  7226  0010B4  5198               	movf	find_volume@fs& (0+255),w,b
  7227  0010B6  26D9               	addwf	fsr2l,f,c
  7228  0010B8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7229  0010BA  22DA               	addwfc	fsr2h,f,c
  7230  0010BC  04DE               	decf	postinc2,w,c
  7231  0010BE  10DE               	iorwf	postinc2,w,c
  7232  0010C0  A4D8               	btfss	status,2,c
  7233  0010C2  D079               	goto	l5758
  7234                           
  7235                           ; BSR set to: 0
  7236  0010C4  C098  F030         	movff	find_volume@fs,move_window@fs
  7237  0010C8  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7238  0010CC  0E01               	movlw	1
  7239  0010CE  2591               	addwf	find_volume@bsect& (0+255),w,b
  7240  0010D0  6E32               	movwf	move_window@sector,c
  7241  0010D2  0E00               	movlw	0
  7242  0010D4  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7243  0010D6  6E33               	movwf	move_window@sector+1,c
  7244  0010D8  0E00               	movlw	0
  7245  0010DA  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7246  0010DC  6E34               	movwf	move_window@sector+2,c
  7247  0010DE  0E00               	movlw	0
  7248  0010E0  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7249  0010E2  6E35               	movwf	move_window@sector+3,c
  7250  0010E4  EC83  F027         	call	_move_window	;wreg free
  7251  0010E8  0900               	iorlw	0
  7252  0010EA  A4D8               	btfss	status,2,c
  7253  0010EC  D064               	goto	l5758
  7254                           
  7255                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7256  0010EE  0100               	movlb	0	; () banked
  7257  0010F0  EE20 F005          	lfsr	2,5
  7258  0010F4  5198               	movf	find_volume@fs& (0+255),w,b
  7259  0010F6  26D9               	addwf	fsr2l,f,c
  7260  0010F8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7261  0010FA  22DA               	addwfc	fsr2h,f,c
  7262  0010FC  0E00               	movlw	0
  7263  0010FE  6EDF               	movwf	indf2,c
  7264                           
  7265                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7266  001100  EE22 F02C          	lfsr	2,556
  7267  001104  5198               	movf	find_volume@fs& (0+255),w,b
  7268  001106  26D9               	addwf	fsr2l,f,c
  7269  001108  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7270  00110A  22DA               	addwfc	fsr2h,f,c
  7271  00110C  0E55               	movlw	85
  7272  00110E  18DE               	xorwf	postinc2,w,c
  7273  001110  E152               	bnz	l5758
  7274  001112  0EAA               	movlw	170
  7275  001114  18DE               	xorwf	postinc2,w,c
  7276  001116  A4D8               	btfss	status,2,c
  7277  001118  D04E               	goto	l5758
  7278                           
  7279                           ; BSR set to: 0
  7280  00111A  EE20 F02E          	lfsr	2,46
  7281  00111E  5198               	movf	find_volume@fs& (0+255),w,b
  7282  001120  26D9               	addwf	fsr2l,f,c
  7283  001122  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7284  001124  22DA               	addwfc	fsr2h,f,c
  7285  001126  0E52               	movlw	82
  7286  001128  18DE               	xorwf	postinc2,w,c
  7287  00112A  E145               	bnz	l5758
  7288  00112C  0E52               	movlw	82
  7289  00112E  18DE               	xorwf	postinc2,w,c
  7290  001130  E142               	bnz	l5758
  7291  001132  0E61               	movlw	97
  7292  001134  18DE               	xorwf	postinc2,w,c
  7293  001136  E13F               	bnz	l5758
  7294  001138  0E41               	movlw	65
  7295  00113A  18DE               	xorwf	postinc2,w,c
  7296  00113C  A4D8               	btfss	status,2,c
  7297  00113E  D03B               	goto	l5758
  7298                           
  7299                           ; BSR set to: 0
  7300  001140  EE22 F012          	lfsr	2,530
  7301  001144  5198               	movf	find_volume@fs& (0+255),w,b
  7302  001146  26D9               	addwf	fsr2l,f,c
  7303  001148  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7304  00114A  22DA               	addwfc	fsr2h,f,c
  7305  00114C  0E72               	movlw	114
  7306  00114E  18DE               	xorwf	postinc2,w,c
  7307  001150  E132               	bnz	l5758
  7308  001152  0E72               	movlw	114
  7309  001154  18DE               	xorwf	postinc2,w,c
  7310  001156  E12F               	bnz	l5758
  7311  001158  0E41               	movlw	65
  7312  00115A  18DE               	xorwf	postinc2,w,c
  7313  00115C  E12C               	bnz	l5758
  7314  00115E  0E61               	movlw	97
  7315  001160  18DE               	xorwf	postinc2,w,c
  7316  001162  A4D8               	btfss	status,2,c
  7317  001164  D028               	goto	l5758
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7321  001166  EE22 F016          	lfsr	2,534
  7322  00116A  5198               	movf	find_volume@fs& (0+255),w,b
  7323  00116C  26D9               	addwf	fsr2l,f,c
  7324  00116E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7325  001170  22DA               	addwfc	fsr2h,f,c
  7326  001172  EE10 F00E          	lfsr	1,14
  7327  001176  5198               	movf	find_volume@fs& (0+255),w,b
  7328  001178  26E1               	addwf	fsr1l,f,c
  7329  00117A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7330  00117C  22E2               	addwfc	fsr1h,f,c
  7331  00117E  CFDE FFE6          	movff	postinc2,postinc1
  7332  001182  CFDE FFE6          	movff	postinc2,postinc1
  7333  001186  CFDE FFE6          	movff	postinc2,postinc1
  7334  00118A  CFDE FFE6          	movff	postinc2,postinc1
  7335                           
  7336                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7337  00118E  EE22 F01A          	lfsr	2,538
  7338  001192  5198               	movf	find_volume@fs& (0+255),w,b
  7339  001194  26D9               	addwf	fsr2l,f,c
  7340  001196  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7341  001198  22DA               	addwfc	fsr2h,f,c
  7342  00119A  EE10 F00A          	lfsr	1,10
  7343  00119E  5198               	movf	find_volume@fs& (0+255),w,b
  7344  0011A0  26E1               	addwf	fsr1l,f,c
  7345  0011A2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7346  0011A4  22E2               	addwfc	fsr1h,f,c
  7347  0011A6  CFDE FFE6          	movff	postinc2,postinc1
  7348  0011AA  CFDE FFE6          	movff	postinc2,postinc1
  7349  0011AE  CFDE FFE6          	movff	postinc2,postinc1
  7350  0011B2  CFDE FFE6          	movff	postinc2,postinc1
  7351  0011B6                     l5758:
  7352                           
  7353                           ;ff.c: 2352:  fs->fs_type = fmt;
  7354  0011B6  C098  FFD9         	movff	find_volume@fs,fsr2l
  7355  0011BA  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7356  0011BE  C097  FFDF         	movff	find_volume@fmt,indf2
  7357                           
  7358                           ;ff.c: 2353:  fs->id = ++Fsid;
  7359  0011C2  0100               	movlb	0	; () banked
  7360  0011C4  4BD2               	infsnz	_Fsid& (0+255),f,b
  7361  0011C6  2BD3               	incf	(_Fsid+1)& (0+255),f,b
  7362  0011C8  EE20 F006          	lfsr	2,6
  7363  0011CC  5198               	movf	find_volume@fs& (0+255),w,b
  7364  0011CE  26D9               	addwf	fsr2l,f,c
  7365  0011D0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7366  0011D2  22DA               	addwfc	fsr2h,f,c
  7367  0011D4  C0D2  FFDE         	movff	_Fsid,postinc2
  7368  0011D8  C0D3  FFDD         	movff	_Fsid+1,postdec2
  7369  0011DC  EF65  F004         	goto	l5538
  7370  0011E0                     __end_of_find_volume:
  7371                           	opt callstack 0
  7372                           
  7373 ;; *************** function _get_ldnumber *****************
  7374 ;; Defined at:
  7375 ;;		line 2114 in file "ff.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7378 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7381 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7382 ;;  i               2   10[COMRAM] unsigned short 
  7383 ;;  vol             2    8[COMRAM] int 
  7384 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7385 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  2    0[COMRAM] int 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7395 ;;      Params:         2       0       0       0       0       0       0       0       0
  7396 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7397 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7398 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7399 ;;Total ram usage:       14 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; This function calls:
  7402 ;;		Nothing
  7403 ;; This function is called by:
  7404 ;;		_find_volume
  7405 ;;		_f_mount
  7406 ;; This function uses a non-reentrant model
  7407 ;;
  7408                           
  7409                           	psect	text18
  7410  004988                     __ptext18:
  7411                           	opt callstack 0
  7412  004988                     _get_ldnumber:
  7413                           	opt callstack 27
  7414                           
  7415                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;incstack = 0
  7419  004988  6809               	setf	get_ldnumber@vol,c
  7420  00498A  680A               	setf	get_ldnumber@vol+1,c
  7421                           
  7422                           ;ff.c: 2129:  if (*path) {
  7423  00498C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7424  004990  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7425  004994  50DE               	movf	postinc2,w,c
  7426  004996  10DE               	iorwf	postinc2,w,c
  7427  004998  B4D8               	btfsc	status,2,c
  7428  00499A  D05B               	goto	l5314
  7429                           
  7430                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7431  00499C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7432  0049A0  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7433  0049A4  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7434  0049A8  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7435  0049AC  D002               	goto	l5288
  7436  0049AE                     l5286:
  7437  0049AE  4A0D               	infsnz	get_ldnumber@tt,f,c
  7438  0049B0  2A0E               	incf	get_ldnumber@tt+1,f,c
  7439  0049B2                     l5288:
  7440  0049B2  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7441  0049B6  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7442  0049BA                     	if	0	;tblptru may be non-zero
  7443  0049BA                     	endif
  7444  0049BA                     	if	0	;tblptru may be non-zero
  7445  0049BA                     	endif
  7446  0049BA  0E20               	movlw	32
  7447  0049BC  0008               	tblrd		*
  7448  0049BE  64F5               	cpfsgt	tablat,c
  7449  0049C0  D009               	goto	u6920
  7450  0049C2  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7451  0049C6  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7452  0049CA                     	if	0	;tblptru may be non-zero
  7453  0049CA                     	endif
  7454  0049CA                     	if	0	;tblptru may be non-zero
  7455  0049CA                     	endif
  7456  0049CA  0008               	tblrd		*
  7457  0049CC  50F5               	movf	tablat,w,c
  7458  0049CE  0A3A               	xorlw	58
  7459  0049D0  A4D8               	btfss	status,2,c
  7460  0049D2  D7ED               	goto	l5286
  7461  0049D4                     u6920:
  7462                           
  7463                           ;ff.c: 2131:   if (*tt == ':') {
  7464  0049D4  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7465  0049D8  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7466  0049DC                     	if	0	;tblptru may be non-zero
  7467  0049DC                     	endif
  7468  0049DC                     	if	0	;tblptru may be non-zero
  7469  0049DC                     	endif
  7470  0049DC  0008               	tblrd		*
  7471  0049DE  50F5               	movf	tablat,w,c
  7472  0049E0  0A3A               	xorlw	58
  7473  0049E2  A4D8               	btfss	status,2,c
  7474  0049E4  D03B               	goto	l5318
  7475                           
  7476                           ;ff.c: 2132:    tp = *path;
  7477  0049E6  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7478  0049EA  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7479  0049EE  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7480  0049F2  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7481                           
  7482                           ;ff.c: 2133:    i = *tp++ - '0';
  7483  0049F6  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7484  0049FA  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7485  0049FE                     	if	0	;tblptru may be non-zero
  7486  0049FE                     	endif
  7487  0049FE                     	if	0	;tblptru may be non-zero
  7488  0049FE                     	endif
  7489  0049FE  0008               	tblrd		*
  7490  004A00  CFF5 F003          	movff	tablat,??_get_ldnumber
  7491  004A04  0ED0               	movlw	208
  7492  004A06  2403               	addwf	??_get_ldnumber,w,c
  7493  004A08  6E0B               	movwf	get_ldnumber@i,c
  7494  004A0A  6A0C               	clrf	get_ldnumber@i+1,c
  7495  004A0C  0EFF               	movlw	255
  7496  004A0E  220C               	addwfc	get_ldnumber@i+1,f,c
  7497  004A10  4A07               	infsnz	get_ldnumber@tp,f,c
  7498  004A12  2A08               	incf	get_ldnumber@tp+1,f,c
  7499                           
  7500                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7501  004A14  500C               	movf	get_ldnumber@i+1,w,c
  7502  004A16  E11D               	bnz	l5314
  7503  004A18  0E0A               	movlw	10
  7504  004A1A  5C0B               	subwf	get_ldnumber@i,w,c
  7505  004A1C  B0D8               	btfsc	status,0,c
  7506  004A1E  D019               	goto	l5314
  7507  004A20  500D               	movf	get_ldnumber@tt,w,c
  7508  004A22  1807               	xorwf	get_ldnumber@tp,w,c
  7509  004A24  E116               	bnz	l5314
  7510  004A26  500E               	movf	get_ldnumber@tt+1,w,c
  7511  004A28  1808               	xorwf	get_ldnumber@tp+1,w,c
  7512  004A2A  A4D8               	btfss	status,2,c
  7513  004A2C  D012               	goto	l5314
  7514                           
  7515                           ;ff.c: 2135:     if (i < 1) {
  7516  004A2E  500B               	movf	get_ldnumber@i,w,c
  7517  004A30  100C               	iorwf	get_ldnumber@i+1,w,c
  7518  004A32  A4D8               	btfss	status,2,c
  7519  004A34  D00E               	goto	l5314
  7520                           
  7521                           ;ff.c: 2136:      vol = (int)i;
  7522  004A36  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7523  004A3A  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7524                           
  7525                           ;ff.c: 2137:      *path = ++tt;
  7526  004A3E  4A0D               	infsnz	get_ldnumber@tt,f,c
  7527  004A40  2A0E               	incf	get_ldnumber@tt+1,f,c
  7528  004A42  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7529  004A46  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7530  004A4A  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7531  004A4E  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7532  004A52                     l5314:
  7533                           
  7534                           ;ff.c: 2156:    return vol;
  7535  004A52  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7536  004A56  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7537  004A5A  0012               	return	
  7538  004A5C                     l5318:
  7539                           
  7540                           ;ff.c: 2161:   vol = 0;
  7541  004A5C  0E00               	movlw	0
  7542  004A5E  6E0A               	movwf	get_ldnumber@vol+1,c
  7543  004A60  0E00               	movlw	0
  7544  004A62  6E09               	movwf	get_ldnumber@vol,c
  7545  004A64  D7F6               	goto	l5314
  7546  004A66                     __end_of_get_ldnumber:
  7547                           	opt callstack 0
  7548                           
  7549 ;; *************** function _disk_initialize *****************
  7550 ;; Defined at:
  7551 ;;		line 296 in file "diskio.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  pdrv            1    wreg     unsigned char 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;  pdrv            1   17[COMRAM] unsigned char 
  7556 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7557 ;;  tmr             2   26[COMRAM] unsigned short 
  7558 ;;  n               1   28[COMRAM] unsigned char 
  7559 ;;  ty              1   25[COMRAM] unsigned char 
  7560 ;;  cmd             1   24[COMRAM] unsigned char 
  7561 ;; Return value:  Size  Location     Type
  7562 ;;                  1    wreg      unsigned char 
  7563 ;; Registers used:
  7564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7565 ;; Tracked objects:
  7566 ;;		On entry : 0/0
  7567 ;;		On exit  : 0/0
  7568 ;;		Unchanged: 0/0
  7569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7570 ;;      Params:         0       0       0       0       0       0       0       0       0
  7571 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7572 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7573 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7574 ;;Total ram usage:       13 bytes
  7575 ;; Hardware stack levels used:    1
  7576 ;; Hardware stack levels required when called:    5
  7577 ;; This function calls:
  7578 ;;		_SPI1_Exchange8bit
  7579 ;;		_SPI1_Initialize
  7580 ;;		_SPI1_Open
  7581 ;;		_deselect
  7582 ;;		_send_cmd
  7583 ;; This function is called by:
  7584 ;;		_find_volume
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           	psect	text19
  7589  003B98                     __ptext19:
  7590                           	opt callstack 0
  7591  003B98                     _disk_initialize:
  7592                           	opt callstack 22
  7593                           
  7594                           ;incstack = 0
  7595                           ;disk_initialize@pdrv stored from wreg
  7596  003B98  6E12               	movwf	disk_initialize@pdrv,c
  7597                           
  7598                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7599  003B9A  5012               	movf	disk_initialize@pdrv,w,c
  7600  003B9C  B4D8               	btfsc	status,2,c
  7601  003B9E  D002               	goto	l133
  7602  003BA0  0E01               	movlw	1
  7603  003BA2  0012               	return	
  7604  003BA4                     l133:
  7605                           
  7606                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7607  003BA4  0100               	movlb	0	; () banked
  7608  003BA6  A3F7               	btfss	_Stat& (0+255),1,b
  7609  003BA8  D003               	goto	l4916
  7610  003BAA                     u6190:
  7611  003BAA  0100               	movlb	0	; () banked
  7612  003BAC  51F7               	movf	_Stat& (0+255),w,b
  7613  003BAE  0012               	return	
  7614  003BB0                     l4916:
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;diskio.c: 308:  SPI1_Initialize();
  7618  003BB0  EC14  F02B         	call	_SPI1_Initialize	;wreg free
  7619                           
  7620                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7621  003BB4  0E0A               	movlw	10
  7622  003BB6  6E1D               	movwf	disk_initialize@n,c
  7623  003BB8  D004               	goto	l4924
  7624  003BBA                     l4920:
  7625  003BBA  0EFF               	movlw	255
  7626  003BBC  ECFE  F02A         	call	_SPI1_Exchange8bit
  7627  003BC0  061D               	decf	disk_initialize@n,f,c
  7628  003BC2                     l4924:
  7629  003BC2  501D               	movf	disk_initialize@n,w,c
  7630  003BC4  A4D8               	btfss	status,2,c
  7631  003BC6  D7F9               	goto	l4920
  7632                           
  7633                           ;diskio.c: 311:  ty = 0;
  7634  003BC8  0E00               	movlw	0
  7635  003BCA  6E1A               	movwf	disk_initialize@ty,c
  7636                           
  7637                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7638  003BCC  0E00               	movlw	0
  7639  003BCE  6E0B               	movwf	send_cmd@arg,c
  7640  003BD0  0E00               	movlw	0
  7641  003BD2  6E0C               	movwf	send_cmd@arg+1,c
  7642  003BD4  0E00               	movlw	0
  7643  003BD6  6E0D               	movwf	send_cmd@arg+2,c
  7644  003BD8  0E00               	movlw	0
  7645  003BDA  6E0E               	movwf	send_cmd@arg+3,c
  7646  003BDC  0E00               	movlw	0
  7647  003BDE  ECD7  F029         	call	_send_cmd
  7648  003BE2  06E8               	decf	wreg,f,c
  7649  003BE4  A4D8               	btfss	status,2,c
  7650  003BE6  D0C1               	goto	l155
  7651                           
  7652                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7653  003BE8  0EAA               	movlw	170
  7654  003BEA  6E0B               	movwf	send_cmd@arg,c
  7655  003BEC  0E01               	movlw	1
  7656  003BEE  6E0C               	movwf	send_cmd@arg+1,c
  7657  003BF0  0E00               	movlw	0
  7658  003BF2  6E0D               	movwf	send_cmd@arg+2,c
  7659  003BF4  0E00               	movlw	0
  7660  003BF6  6E0E               	movwf	send_cmd@arg+3,c
  7661  003BF8  0E08               	movlw	8
  7662  003BFA  ECD7  F029         	call	_send_cmd
  7663  003BFE  06E8               	decf	wreg,f,c
  7664  003C00  A4D8               	btfss	status,2,c
  7665  003C02  D067               	goto	l4980
  7666                           
  7667                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7668  003C04  0E00               	movlw	0
  7669  003C06  6E1D               	movwf	disk_initialize@n,c
  7670  003C08                     l4938:
  7671  003C08  0E13               	movlw	low disk_initialize@ocr
  7672  003C0A  241D               	addwf	disk_initialize@n,w,c
  7673  003C0C  6ED9               	movwf	fsr2l,c
  7674  003C0E  6ADA               	clrf	fsr2h,c
  7675  003C10  0E00               	movlw	high disk_initialize@ocr
  7676  003C12  22DA               	addwfc	fsr2h,f,c
  7677  003C14  0EFF               	movlw	255
  7678  003C16  ECFE  F02A         	call	_SPI1_Exchange8bit
  7679  003C1A  6EDF               	movwf	indf2,c
  7680  003C1C  2A1D               	incf	disk_initialize@n,f,c
  7681  003C1E  0E03               	movlw	3
  7682  003C20  641D               	cpfsgt	disk_initialize@n,c
  7683  003C22  D7F2               	goto	l4938
  7684                           
  7685                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7686  003C24  0415               	decf	disk_initialize@ocr+2,w,c
  7687  003C26  A4D8               	btfss	status,2,c
  7688  003C28  D0A0               	goto	l155
  7689  003C2A  0EAA               	movlw	170
  7690  003C2C  1816               	xorwf	disk_initialize@ocr+3,w,c
  7691  003C2E  A4D8               	btfss	status,2,c
  7692  003C30  D09C               	goto	l155
  7693                           
  7694                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7695  003C32  0E03               	movlw	3
  7696  003C34  6E1C               	movwf	disk_initialize@tmr+1,c
  7697  003C36  0EE8               	movlw	232
  7698  003C38  6E1B               	movwf	disk_initialize@tmr,c
  7699  003C3A  D018               	goto	l144
  7700  003C3C                     l4950:
  7701                           
  7702                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7703  003C3C  0E00               	movlw	0
  7704  003C3E  6E0B               	movwf	send_cmd@arg,c
  7705  003C40  0E00               	movlw	0
  7706  003C42  6E0C               	movwf	send_cmd@arg+1,c
  7707  003C44  0E00               	movlw	0
  7708  003C46  6E0D               	movwf	send_cmd@arg+2,c
  7709  003C48  0E40               	movlw	64
  7710  003C4A  6E0E               	movwf	send_cmd@arg+3,c
  7711  003C4C  0EA9               	movlw	169
  7712  003C4E  ECD7  F029         	call	_send_cmd
  7713  003C52  0900               	iorlw	0
  7714  003C54  B4D8               	btfsc	status,2,c
  7715  003C56  D00E               	goto	u6270
  7716                           
  7717                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7718  003C58  0E03               	movlw	3
  7719  003C5A  6E11               	movwf	??_disk_initialize& (0+255),c
  7720  003C5C  0E98               	movlw	152
  7721  003C5E                     u8997:
  7722  003C5E  2EE8               	decfsz	wreg,f,c
  7723  003C60  D7FE               	bra	u8997
  7724  003C62  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7725  003C64  D7FC               	bra	u8997
  7726                           
  7727                           ;diskio.c: 319:     }
  7728  003C66  061B               	decf	disk_initialize@tmr,f,c
  7729  003C68  A0D8               	btfss	status,0,c
  7730  003C6A  061C               	decf	disk_initialize@tmr+1,f,c
  7731  003C6C                     l144:
  7732  003C6C  501B               	movf	disk_initialize@tmr,w,c
  7733  003C6E  101C               	iorwf	disk_initialize@tmr+1,w,c
  7734  003C70  A4D8               	btfss	status,2,c
  7735  003C72  D7E4               	goto	l4950
  7736  003C74                     u6270:
  7737                           
  7738                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7739  003C74  501B               	movf	disk_initialize@tmr,w,c
  7740  003C76  101C               	iorwf	disk_initialize@tmr+1,w,c
  7741  003C78  B4D8               	btfsc	status,2,c
  7742  003C7A  D077               	goto	l155
  7743  003C7C  0E00               	movlw	0
  7744  003C7E  6E0B               	movwf	send_cmd@arg,c
  7745  003C80  0E00               	movlw	0
  7746  003C82  6E0C               	movwf	send_cmd@arg+1,c
  7747  003C84  0E00               	movlw	0
  7748  003C86  6E0D               	movwf	send_cmd@arg+2,c
  7749  003C88  0E00               	movlw	0
  7750  003C8A  6E0E               	movwf	send_cmd@arg+3,c
  7751  003C8C  0E3A               	movlw	58
  7752  003C8E  ECD7  F029         	call	_send_cmd
  7753  003C92  0900               	iorlw	0
  7754  003C94  A4D8               	btfss	status,2,c
  7755  003C96  D069               	goto	l155
  7756                           
  7757                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7758  003C98  0E00               	movlw	0
  7759  003C9A  6E1D               	movwf	disk_initialize@n,c
  7760  003C9C                     l4968:
  7761  003C9C  0E13               	movlw	low disk_initialize@ocr
  7762  003C9E  241D               	addwf	disk_initialize@n,w,c
  7763  003CA0  6ED9               	movwf	fsr2l,c
  7764  003CA2  6ADA               	clrf	fsr2h,c
  7765  003CA4  0E00               	movlw	high disk_initialize@ocr
  7766  003CA6  22DA               	addwfc	fsr2h,f,c
  7767  003CA8  0EFF               	movlw	255
  7768  003CAA  ECFE  F02A         	call	_SPI1_Exchange8bit
  7769  003CAE  6EDF               	movwf	indf2,c
  7770  003CB0  2A1D               	incf	disk_initialize@n,f,c
  7771  003CB2  0E03               	movlw	3
  7772  003CB4  641D               	cpfsgt	disk_initialize@n,c
  7773  003CB6  D7F2               	goto	l4968
  7774                           
  7775                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7776  003CB8  BC13               	btfsc	disk_initialize@ocr,6,c
  7777  003CBA  D004               	goto	l4976
  7778  003CBC  0E00               	movlw	0
  7779  003CBE  6E18               	movwf	_disk_initialize$326+1,c
  7780  003CC0  0E04               	movlw	4
  7781  003CC2  D003               	goto	L7
  7782  003CC4                     l4976:
  7783  003CC4  0E00               	movlw	0
  7784  003CC6  6E18               	movwf	_disk_initialize$326+1,c
  7785  003CC8  0E0C               	movlw	12
  7786  003CCA                     L7:
  7787  003CCA  6E17               	movwf	_disk_initialize$326,c
  7788  003CCC  C017  F01A         	movff	_disk_initialize$326,disk_initialize@ty
  7789  003CD0  D04C               	goto	l155
  7790  003CD2                     l4980:
  7791                           
  7792                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7793  003CD2  0E00               	movlw	0
  7794  003CD4  6E0B               	movwf	send_cmd@arg,c
  7795  003CD6  0E00               	movlw	0
  7796  003CD8  6E0C               	movwf	send_cmd@arg+1,c
  7797  003CDA  0E00               	movlw	0
  7798  003CDC  6E0D               	movwf	send_cmd@arg+2,c
  7799  003CDE  0E00               	movlw	0
  7800  003CE0  6E0E               	movwf	send_cmd@arg+3,c
  7801  003CE2  0EA9               	movlw	169
  7802  003CE4  ECD7  F029         	call	_send_cmd
  7803  003CE8  6E11               	movwf	??_disk_initialize& (0+255),c
  7804  003CEA  0E02               	movlw	2
  7805  003CEC  6011               	cpfslt	??_disk_initialize,c
  7806  003CEE  D004               	goto	l4984
  7807                           
  7808                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  7809  003CF0  0E02               	movlw	2
  7810  003CF2  6E1A               	movwf	disk_initialize@ty,c
  7811  003CF4  0EA9               	movlw	169
  7812  003CF6  D003               	goto	L8
  7813  003CF8                     l4984:
  7814                           
  7815                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  7816  003CF8  0E01               	movlw	1
  7817  003CFA  6E1A               	movwf	disk_initialize@ty,c
  7818  003CFC  0E01               	movlw	1
  7819  003CFE                     L8:
  7820  003CFE  6E19               	movwf	disk_initialize@cmd,c
  7821                           
  7822                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  7823                           
  7824                           ;diskio.c: 330:    }
  7825  003D00  0E03               	movlw	3
  7826  003D02  6E1C               	movwf	disk_initialize@tmr+1,c
  7827  003D04  0EE8               	movlw	232
  7828  003D06  6E1B               	movwf	disk_initialize@tmr,c
  7829  003D08  D018               	goto	l158
  7830  003D0A                     l4986:
  7831                           
  7832                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  7833  003D0A  0E00               	movlw	0
  7834  003D0C  6E0B               	movwf	send_cmd@arg,c
  7835  003D0E  0E00               	movlw	0
  7836  003D10  6E0C               	movwf	send_cmd@arg+1,c
  7837  003D12  0E00               	movlw	0
  7838  003D14  6E0D               	movwf	send_cmd@arg+2,c
  7839  003D16  0E00               	movlw	0
  7840  003D18  6E0E               	movwf	send_cmd@arg+3,c
  7841  003D1A  5019               	movf	disk_initialize@cmd,w,c
  7842  003D1C  ECD7  F029         	call	_send_cmd
  7843  003D20  0900               	iorlw	0
  7844  003D22  B4D8               	btfsc	status,2,c
  7845  003D24  D00E               	goto	u6340
  7846                           
  7847                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  7848  003D26  0E03               	movlw	3
  7849  003D28  6E11               	movwf	??_disk_initialize& (0+255),c
  7850  003D2A  0E98               	movlw	152
  7851  003D2C                     u9007:
  7852  003D2C  2EE8               	decfsz	wreg,f,c
  7853  003D2E  D7FE               	bra	u9007
  7854  003D30  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7855  003D32  D7FC               	bra	u9007
  7856                           
  7857                           ;diskio.c: 334:    }
  7858  003D34  061B               	decf	disk_initialize@tmr,f,c
  7859  003D36  A0D8               	btfss	status,0,c
  7860  003D38  061C               	decf	disk_initialize@tmr+1,f,c
  7861  003D3A                     l158:
  7862  003D3A  501B               	movf	disk_initialize@tmr,w,c
  7863  003D3C  101C               	iorwf	disk_initialize@tmr+1,w,c
  7864  003D3E  A4D8               	btfss	status,2,c
  7865  003D40  D7E4               	goto	l4986
  7866  003D42                     u6340:
  7867                           
  7868                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  7869  003D42  501B               	movf	disk_initialize@tmr,w,c
  7870  003D44  101C               	iorwf	disk_initialize@tmr+1,w,c
  7871  003D46  B4D8               	btfsc	status,2,c
  7872  003D48  D00E               	goto	u6360
  7873  003D4A  0E00               	movlw	0
  7874  003D4C  6E0B               	movwf	send_cmd@arg,c
  7875  003D4E  0E02               	movlw	2
  7876  003D50  6E0C               	movwf	send_cmd@arg+1,c
  7877  003D52  0E00               	movlw	0
  7878  003D54  6E0D               	movwf	send_cmd@arg+2,c
  7879  003D56  0E00               	movlw	0
  7880  003D58  6E0E               	movwf	send_cmd@arg+3,c
  7881  003D5A  0E10               	movlw	16
  7882  003D5C  ECD7  F029         	call	_send_cmd
  7883  003D60  0900               	iorlw	0
  7884  003D62  B4D8               	btfsc	status,2,c
  7885  003D64  D002               	goto	l155
  7886  003D66                     u6360:
  7887                           
  7888                           ;diskio.c: 336:     ty = 0;
  7889  003D66  0E00               	movlw	0
  7890  003D68  6E1A               	movwf	disk_initialize@ty,c
  7891  003D6A                     l155:
  7892                           
  7893                           ;diskio.c: 339:  CardType = ty;
  7894  003D6A  C01A  F0D6         	movff	disk_initialize@ty,_CardType
  7895                           
  7896                           ;diskio.c: 340:  deselect();
  7897  003D6E  EC1B  F02B         	call	_deselect	;wreg free
  7898                           
  7899                           ;diskio.c: 342:  if (ty) {
  7900  003D72  501A               	movf	disk_initialize@ty,w,c
  7901  003D74  B4D8               	btfsc	status,2,c
  7902  003D76  D719               	goto	u6190
  7903                           
  7904                           ;diskio.c: 343:   Stat &= ~0x01;
  7905  003D78  0100               	movlb	0	; () banked
  7906  003D7A  91F7               	bcf	_Stat& (0+255),0,b
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;diskio.c: 344:   SPI1_Open();
  7910  003D7C  EC06  F02B         	call	_SPI1_Open	;wreg free
  7911  003D80  D714               	goto	u6190
  7912  003D82                     __end_of_disk_initialize:
  7913                           	opt callstack 0
  7914                           
  7915 ;; *************** function _SPI1_Open *****************
  7916 ;; Defined at:
  7917 ;;		line 77 in file "mcc_generated_files/spi1.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;		None
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;		None
  7922 ;; Return value:  Size  Location     Type
  7923 ;;                  1    wreg      void 
  7924 ;; Registers used:
  7925 ;;		wreg, status,2
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7931 ;;      Params:         0       0       0       0       0       0       0       0       0
  7932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7934 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7935 ;;Total ram usage:        0 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; This function calls:
  7938 ;;		Nothing
  7939 ;; This function is called by:
  7940 ;;		_disk_initialize
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text20
  7945  00560C                     __ptext20:
  7946                           	opt callstack 0
  7947  00560C                     _SPI1_Open:
  7948                           	opt callstack 26
  7949                           
  7950                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  7951                           
  7952                           ;incstack = 0
  7953  00560C  0E40               	movlw	64
  7954  00560E  6EC7               	movwf	4039,c	;volatile
  7955                           
  7956                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  7957  005610  0E20               	movlw	32
  7958  005612  6EC6               	movwf	4038,c	;volatile
  7959                           
  7960                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  7961  005614  0E00               	movlw	0
  7962  005616  6EC8               	movwf	4040,c	;volatile
  7963  005618  0012               	return		;funcret
  7964  00561A                     __end_of_SPI1_Open:
  7965                           	opt callstack 0
  7966                           
  7967 ;; *************** function _check_fs *****************
  7968 ;; Defined at:
  7969 ;;		line 2175 in file "ff.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  fs              2   58[COMRAM] PTR struct .
  7972 ;;		 -> NULL(0), FatFs(558), 
  7973 ;;  sect            4   60[COMRAM] unsigned long 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      unsigned char 
  7978 ;; Registers used:
  7979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7985 ;;      Params:         6       0       0       0       0       0       0       0       0
  7986 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7987 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7988 ;;      Totals:        10       0       0       0       0       0       0       0       0
  7989 ;;Total ram usage:       10 bytes
  7990 ;; Hardware stack levels used:    1
  7991 ;; Hardware stack levels required when called:    8
  7992 ;; This function calls:
  7993 ;;		_move_window
  7994 ;; This function is called by:
  7995 ;;		_find_volume
  7996 ;; This function uses a non-reentrant model
  7997 ;;
  7998                           
  7999                           	psect	text21
  8000  00489C                     __ptext21:
  8001                           	opt callstack 0
  8002  00489C                     _check_fs:
  8003                           	opt callstack 19
  8004                           
  8005                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  8006                           
  8007                           ;incstack = 0
  8008  00489C  EE20 F004          	lfsr	2,4
  8009  0048A0  503B               	movf	check_fs@fs,w,c
  8010  0048A2  26D9               	addwf	fsr2l,f,c
  8011  0048A4  503C               	movf	check_fs@fs+1,w,c
  8012  0048A6  22DA               	addwfc	fsr2h,f,c
  8013  0048A8  0E00               	movlw	0
  8014  0048AA  6EDF               	movwf	indf2,c
  8015  0048AC  EE20 F02A          	lfsr	2,42
  8016  0048B0  503B               	movf	check_fs@fs,w,c
  8017  0048B2  26D9               	addwf	fsr2l,f,c
  8018  0048B4  503C               	movf	check_fs@fs+1,w,c
  8019  0048B6  22DA               	addwfc	fsr2h,f,c
  8020  0048B8  0EFF               	movlw	255
  8021  0048BA  6EDE               	movwf	postinc2,c
  8022  0048BC  0EFF               	movlw	255
  8023  0048BE  6EDE               	movwf	postinc2,c
  8024  0048C0  0EFF               	movlw	255
  8025  0048C2  6EDE               	movwf	postinc2,c
  8026  0048C4  0EFF               	movlw	255
  8027  0048C6  6EDD               	movwf	postdec2,c
  8028                           
  8029                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  8030  0048C8  C03B  F030         	movff	check_fs@fs,move_window@fs
  8031  0048CC  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  8032  0048D0  C03D  F032         	movff	check_fs@sect,move_window@sector
  8033  0048D4  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  8034  0048D8  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  8035  0048DC  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  8036  0048E0  EC83  F027         	call	_move_window	;wreg free
  8037  0048E4  0900               	iorlw	0
  8038  0048E6  B4D8               	btfsc	status,2,c
  8039  0048E8  D002               	goto	l5332
  8040                           
  8041                           ;ff.c: 2182:   return 3;
  8042  0048EA  0E03               	movlw	3
  8043  0048EC  0012               	return	
  8044  0048EE                     l5332:
  8045                           
  8046                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8047  0048EE  EE22 F02C          	lfsr	2,556
  8048  0048F2  503B               	movf	check_fs@fs,w,c
  8049  0048F4  26D9               	addwf	fsr2l,f,c
  8050  0048F6  503C               	movf	check_fs@fs+1,w,c
  8051  0048F8  22DA               	addwfc	fsr2h,f,c
  8052  0048FA  0E55               	movlw	85
  8053  0048FC  18DE               	xorwf	postinc2,w,c
  8054  0048FE  E104               	bnz	u6980
  8055  004900  0EAA               	movlw	170
  8056  004902  18DE               	xorwf	postinc2,w,c
  8057  004904  B4D8               	btfsc	status,2,c
  8058  004906  D002               	goto	l5338
  8059  004908                     u6980:
  8060                           
  8061                           ;ff.c: 2185:   return 2;
  8062  004908  0E02               	movlw	2
  8063  00490A  0012               	return	
  8064  00490C                     l5338:
  8065                           
  8066                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8067  00490C  EE20 F064          	lfsr	2,100
  8068  004910  503B               	movf	check_fs@fs,w,c
  8069  004912  26D9               	addwf	fsr2l,f,c
  8070  004914  503C               	movf	check_fs@fs+1,w,c
  8071  004916  22DA               	addwfc	fsr2h,f,c
  8072  004918  0EFF               	movlw	255
  8073  00491A  14DE               	andwf	postinc2,w,c
  8074  00491C  6E41               	movwf	??_check_fs& (0+255),c
  8075  00491E  0EFF               	movlw	255
  8076  004920  14DE               	andwf	postinc2,w,c
  8077  004922  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8078  004924  0EFF               	movlw	255
  8079  004926  14DE               	andwf	postinc2,w,c
  8080  004928  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8081  00492A  0E00               	movlw	0
  8082  00492C  14DE               	andwf	postinc2,w,c
  8083  00492E  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8084  004930  0E46               	movlw	70
  8085  004932  1841               	xorwf	??_check_fs,w,c
  8086  004934  E10A               	bnz	l5344
  8087  004936  0E41               	movlw	65
  8088  004938  1842               	xorwf	??_check_fs+1,w,c
  8089  00493A  E107               	bnz	l5344
  8090  00493C  0E54               	movlw	84
  8091  00493E  1843               	xorwf	??_check_fs+2,w,c
  8092  004940  1044               	iorwf	??_check_fs+3,w,c
  8093  004942  A4D8               	btfss	status,2,c
  8094  004944  D002               	goto	l5344
  8095  004946                     u6990:
  8096                           
  8097                           ;ff.c: 2188:   return 0;
  8098  004946  0E00               	movlw	0
  8099  004948  0012               	return	
  8100  00494A                     l5344:
  8101                           
  8102                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8103  00494A  EE20 F080          	lfsr	2,128
  8104  00494E  503B               	movf	check_fs@fs,w,c
  8105  004950  26D9               	addwf	fsr2l,f,c
  8106  004952  503C               	movf	check_fs@fs+1,w,c
  8107  004954  22DA               	addwfc	fsr2h,f,c
  8108  004956  0EFF               	movlw	255
  8109  004958  14DE               	andwf	postinc2,w,c
  8110  00495A  6E41               	movwf	??_check_fs& (0+255),c
  8111  00495C  0EFF               	movlw	255
  8112  00495E  14DE               	andwf	postinc2,w,c
  8113  004960  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8114  004962  0EFF               	movlw	255
  8115  004964  14DE               	andwf	postinc2,w,c
  8116  004966  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8117  004968  0E00               	movlw	0
  8118  00496A  14DE               	andwf	postinc2,w,c
  8119  00496C  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8120  00496E  0E46               	movlw	70
  8121  004970  1841               	xorwf	??_check_fs,w,c
  8122  004972  E108               	bnz	l5350
  8123  004974  0E41               	movlw	65
  8124  004976  1842               	xorwf	??_check_fs+1,w,c
  8125  004978  E105               	bnz	l5350
  8126  00497A  0E54               	movlw	84
  8127  00497C  1843               	xorwf	??_check_fs+2,w,c
  8128  00497E  1044               	iorwf	??_check_fs+3,w,c
  8129  004980  B4D8               	btfsc	status,2,c
  8130  004982  D7E1               	goto	u6990
  8131  004984                     l5350:
  8132                           
  8133                           ;ff.c: 2192:  return 1;
  8134  004984  0E01               	movlw	1
  8135  004986  0012               	return		;funcret
  8136  004988                     __end_of_check_fs:
  8137                           	opt callstack 0
  8138                           
  8139 ;; *************** function _f_lseek *****************
  8140 ;; Defined at:
  8141 ;;		line 3033 in file "ff.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;  fp              2   13[BANK0 ] PTR struct .
  8144 ;;		 -> Fil(32), 
  8145 ;;  ofs             4   15[BANK0 ] unsigned long 
  8146 ;; Auto vars:     Size  Location     Type
  8147 ;;  clst            4   48[BANK0 ] unsigned long 
  8148 ;;  bcs             4   44[BANK0 ] unsigned long 
  8149 ;;  nsect           4   40[BANK0 ] unsigned long 
  8150 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8151 ;;  res             1   39[BANK0 ] enum E93
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      enum E4918
  8154 ;; Registers used:
  8155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8161 ;;      Params:         0       6       0       0       0       0       0       0       0
  8162 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8163 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8164 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8165 ;;Total ram usage:       39 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:   10
  8168 ;; This function calls:
  8169 ;;		___lldiv
  8170 ;;		_clust2sect
  8171 ;;		_create_chain
  8172 ;;		_get_fat
  8173 ;;		_validate
  8174 ;; This function is called by:
  8175 ;;		_guardar
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           	psect	text22
  8180  001944                     __ptext22:
  8181                           	opt callstack 0
  8182  001944                     _f_lseek:
  8183                           	opt callstack 19
  8184                           
  8185                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8186                           
  8187                           ;incstack = 0
  8188  001944  C06D  F002         	movff	f_lseek@fp,validate@obj
  8189  001948  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8190  00194C  ECD6  F027         	call	_validate	;wreg free
  8191  001950  0100               	movlb	0	; () banked
  8192  001952  6F87               	movwf	f_lseek@res& (0+255),b
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8196  001954  5187               	movf	f_lseek@res& (0+255),w,b
  8197  001956  B4D8               	btfsc	status,2,c
  8198  001958  D002               	goto	l6064
  8199  00195A                     u8110:
  8200                           
  8201                           ; BSR set to: 0
  8202  00195A  5187               	movf	f_lseek@res& (0+255),w,b
  8203  00195C  0012               	return	
  8204  00195E                     l6064:
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;ff.c: 3047:  if (fp->err)
  8208  00195E  EE20 F005          	lfsr	2,5
  8209  001962  516D               	movf	f_lseek@fp& (0+255),w,b
  8210  001964  26D9               	addwf	fsr2l,f,c
  8211  001966  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8212  001968  22DA               	addwfc	fsr2h,f,c
  8213  00196A  50DF               	movf	indf2,w,c
  8214  00196C  B4D8               	btfsc	status,2,c
  8215  00196E  D008               	goto	l6070
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8219  001970  EE20 F005          	lfsr	2,5
  8220  001974  516D               	movf	f_lseek@fp& (0+255),w,b
  8221  001976  26D9               	addwf	fsr2l,f,c
  8222  001978  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8223  00197A  22DA               	addwfc	fsr2h,f,c
  8224  00197C  50DF               	movf	indf2,w,c
  8225  00197E  0012               	return	
  8226  001980                     l6070:
  8227                           
  8228                           ; BSR set to: 0
  8229                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8230  001980  EE20 F00A          	lfsr	2,10
  8231  001984  516D               	movf	f_lseek@fp& (0+255),w,b
  8232  001986  26D9               	addwf	fsr2l,f,c
  8233  001988  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8234  00198A  22DA               	addwfc	fsr2h,f,c
  8235  00198C  516F               	movf	f_lseek@ofs& (0+255),w,b
  8236  00198E  5CDE               	subwf	postinc2,w,c
  8237  001990  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8238  001992  58DE               	subwfb	postinc2,w,c
  8239  001994  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8240  001996  58DE               	subwfb	postinc2,w,c
  8241  001998  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8242  00199A  58DE               	subwfb	postinc2,w,c
  8243  00199C  B0D8               	btfsc	status,0,c
  8244  00199E  D016               	goto	l730
  8245                           
  8246                           ; BSR set to: 0
  8247  0019A0  EE20 F004          	lfsr	2,4
  8248  0019A4  516D               	movf	f_lseek@fp& (0+255),w,b
  8249  0019A6  26D9               	addwf	fsr2l,f,c
  8250  0019A8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8251  0019AA  22DA               	addwfc	fsr2h,f,c
  8252  0019AC  B2DF               	btfsc	indf2,1,c
  8253  0019AE  D00E               	goto	l730
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8257  0019B0  EE20 F00A          	lfsr	2,10
  8258  0019B4  516D               	movf	f_lseek@fp& (0+255),w,b
  8259  0019B6  26D9               	addwf	fsr2l,f,c
  8260  0019B8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8261  0019BA  22DA               	addwfc	fsr2h,f,c
  8262  0019BC  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8263  0019C0  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8264  0019C4  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8265  0019C8  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8266  0019CC                     l730:
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;ff.c: 3113:   ifptr = fp->fptr;
  8270  0019CC  EE20 F006          	lfsr	2,6
  8271  0019D0  516D               	movf	f_lseek@fp& (0+255),w,b
  8272  0019D2  26D9               	addwf	fsr2l,f,c
  8273  0019D4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8274  0019D6  22DA               	addwfc	fsr2h,f,c
  8275  0019D8  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8276  0019DC  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8277  0019E0  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8278  0019E4  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8279                           
  8280                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8281  0019E8  0E00               	movlw	0
  8282  0019EA  6F88               	movwf	f_lseek@nsect& (0+255),b
  8283  0019EC  0E00               	movlw	0
  8284  0019EE  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8285  0019F0  0E00               	movlw	0
  8286  0019F2  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8287  0019F4  0E00               	movlw	0
  8288  0019F6  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8289  0019F8  EE20 F006          	lfsr	2,6
  8290  0019FC  516D               	movf	f_lseek@fp& (0+255),w,b
  8291  0019FE  26D9               	addwf	fsr2l,f,c
  8292  001A00  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8293  001A02  22DA               	addwfc	fsr2h,f,c
  8294  001A04  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8295  001A08  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8296  001A0C  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8297  001A10  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;ff.c: 3115:   if (ofs) {
  8301  001A14  516F               	movf	f_lseek@ofs& (0+255),w,b
  8302  001A16  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8303  001A18  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8304  001A1A  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8305  001A1C  B4D8               	btfsc	status,2,c
  8306  001A1E  D22D               	goto	l6164
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8310  001A20  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8311  001A24  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8312  001A28  EE10 F002          	lfsr	1,2
  8313  001A2C  50DE               	movf	postinc2,w,c
  8314  001A2E  26E1               	addwf	fsr1l,f,c
  8315  001A30  50DD               	movf	postdec2,w,c
  8316  001A32  22E2               	addwfc	fsr1h,f,c
  8317  001A34  50E7               	movf	indf1,w,c
  8318  001A36  6F73               	movwf	??_f_lseek& (0+255),b
  8319  001A38  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8320  001A3C  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8321  001A3E  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8322  001A40  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8323  001A42  0E09               	movlw	9
  8324  001A44                     u8165:
  8325  001A44  90D8               	bcf	status,0,c
  8326  001A46  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8327  001A48  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8328  001A4A  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8329  001A4C  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8330  001A4E  2EE8               	decfsz	wreg,f,c
  8331  001A50  D7F9               	goto	u8165
  8332  001A52  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8333  001A56  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8334  001A5A  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8335  001A5E  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;ff.c: 3117:    if (ifptr > 0 &&
  8339  001A62  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8340  001A64  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8341  001A66  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8342  001A68  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8343  001A6A  B4D8               	btfsc	status,2,c
  8344  001A6C  D097               	goto	l6086
  8345                           
  8346                           ; BSR set to: 0
  8347  001A6E  0EFF               	movlw	255
  8348  001A70  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8349  001A72  6E01               	movwf	___lldiv@dividend,c
  8350  001A74  0EFF               	movlw	255
  8351  001A76  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8352  001A78  6E02               	movwf	___lldiv@dividend+1,c
  8353  001A7A  0EFF               	movlw	255
  8354  001A7C  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8355  001A7E  6E03               	movwf	___lldiv@dividend+2,c
  8356  001A80  0EFF               	movlw	255
  8357  001A82  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8358  001A84  6E04               	movwf	___lldiv@dividend+3,c
  8359  001A86  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8360  001A8A  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8361  001A8E  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8362  001A92  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8363  001A96  EC20  F028         	call	___lldiv	;wreg free
  8364  001A9A  C001  F073         	movff	?___lldiv,??_f_lseek
  8365  001A9E  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8366  001AA2  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8367  001AA6  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8368  001AAA  0EFF               	movlw	255
  8369  001AAC  0100               	movlb	0	; () banked
  8370  001AAE  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8371  001AB0  6E01               	movwf	___lldiv@dividend,c
  8372  001AB2  0EFF               	movlw	255
  8373  001AB4  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8374  001AB6  6E02               	movwf	___lldiv@dividend+1,c
  8375  001AB8  0EFF               	movlw	255
  8376  001ABA  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8377  001ABC  6E03               	movwf	___lldiv@dividend+2,c
  8378  001ABE  0EFF               	movlw	255
  8379  001AC0  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8380  001AC2  6E04               	movwf	___lldiv@dividend+3,c
  8381  001AC4  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8382  001AC8  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8383  001ACC  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8384  001AD0  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8385  001AD4  EC20  F028         	call	___lldiv	;wreg free
  8386  001AD8  5001               	movf	?___lldiv,w,c
  8387  001ADA  0100               	movlb	0	; () banked
  8388  001ADC  5D73               	subwf	??_f_lseek& (0+255),w,b
  8389  001ADE  5002               	movf	?___lldiv+1,w,c
  8390  001AE0  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8391  001AE2  5003               	movf	?___lldiv+2,w,c
  8392  001AE4  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8393  001AE6  5004               	movf	?___lldiv+3,w,c
  8394  001AE8  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8395  001AEA  A0D8               	btfss	status,0,c
  8396  001AEC  D057               	goto	l6086
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8400  001AEE  0EFF               	movlw	255
  8401  001AF0  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8402  001AF2  6F73               	movwf	??_f_lseek& (0+255),b
  8403  001AF4  0EFF               	movlw	255
  8404  001AF6  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8405  001AF8  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8406  001AFA  0EFF               	movlw	255
  8407  001AFC  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8408  001AFE  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8409  001B00  0EFF               	movlw	255
  8410  001B02  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8411  001B04  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8412  001B06  1D73               	comf	??_f_lseek& (0+255),w,b
  8413  001B08  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8414  001B0A  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8415  001B0C  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8416  001B0E  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8417  001B10  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8418  001B12  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8419  001B14  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8420  001B16  0EFF               	movlw	255
  8421  001B18  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8422  001B1A  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8423  001B1C  0EFF               	movlw	255
  8424  001B1E  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8425  001B20  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8426  001B22  0EFF               	movlw	255
  8427  001B24  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8428  001B26  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8429  001B28  0EFF               	movlw	255
  8430  001B2A  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8431  001B2C  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8432  001B2E  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8433  001B30  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8434  001B32  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8435  001B34  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8436  001B36  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8437  001B38  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8438  001B3A  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8439  001B3C  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8440  001B3E  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8441  001B40  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8442  001B42  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8443  001B44  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8444  001B46  EE20 F006          	lfsr	2,6
  8445  001B4A  516D               	movf	f_lseek@fp& (0+255),w,b
  8446  001B4C  26D9               	addwf	fsr2l,f,c
  8447  001B4E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8448  001B50  22DA               	addwfc	fsr2h,f,c
  8449  001B52  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8450  001B56  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8451  001B5A  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8452  001B5E  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8453                           
  8454                           ;ff.c: 3120:     ofs -= fp->fptr;
  8455  001B62  EE20 F006          	lfsr	2,6
  8456  001B66  516D               	movf	f_lseek@fp& (0+255),w,b
  8457  001B68  26D9               	addwf	fsr2l,f,c
  8458  001B6A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8459  001B6C  22DA               	addwfc	fsr2h,f,c
  8460  001B6E  50DE               	movf	postinc2,w,c
  8461  001B70  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8462  001B72  50DE               	movf	postinc2,w,c
  8463  001B74  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8464  001B76  50DE               	movf	postinc2,w,c
  8465  001B78  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8466  001B7A  50DD               	movf	postdec2,w,c
  8467  001B7C  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8468                           
  8469                           ;ff.c: 3121:     clst = fp->clust;
  8470  001B7E  EE20 F012          	lfsr	2,18
  8471  001B82  516D               	movf	f_lseek@fp& (0+255),w,b
  8472  001B84  26D9               	addwf	fsr2l,f,c
  8473  001B86  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8474  001B88  22DA               	addwfc	fsr2h,f,c
  8475  001B8A  CFDE F090          	movff	postinc2,f_lseek@clst
  8476  001B8E  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8477  001B92  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8478  001B96  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8479                           
  8480                           ;ff.c: 3122:    } else {
  8481  001B9A  D06E               	goto	l6110
  8482  001B9C                     l6086:
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;ff.c: 3123:     clst = fp->sclust;
  8486  001B9C  EE20 F00E          	lfsr	2,14
  8487  001BA0  516D               	movf	f_lseek@fp& (0+255),w,b
  8488  001BA2  26D9               	addwf	fsr2l,f,c
  8489  001BA4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8490  001BA6  22DA               	addwfc	fsr2h,f,c
  8491  001BA8  CFDE F090          	movff	postinc2,f_lseek@clst
  8492  001BAC  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8493  001BB0  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8494  001BB4  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8495                           
  8496                           ; BSR set to: 0
  8497                           ;ff.c: 3125:     if (clst == 0) {
  8498  001BB8  5190               	movf	f_lseek@clst& (0+255),w,b
  8499  001BBA  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8500  001BBC  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8501  001BBE  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8502  001BC0  A4D8               	btfss	status,2,c
  8503  001BC2  D04C               	goto	l734
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8507  001BC4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8508  001BC8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8509  001BCC  CFDE F056          	movff	postinc2,create_chain@fs
  8510  001BD0  CFDD F057          	movff	postdec2,create_chain@fs+1
  8511  001BD4  0E00               	movlw	0
  8512  001BD6  6E58               	movwf	create_chain@clst,c
  8513  001BD8  0E00               	movlw	0
  8514  001BDA  6E59               	movwf	create_chain@clst+1,c
  8515  001BDC  0E00               	movlw	0
  8516  001BDE  6E5A               	movwf	create_chain@clst+2,c
  8517  001BE0  0E00               	movlw	0
  8518  001BE2  6E5B               	movwf	create_chain@clst+3,c
  8519  001BE4  ECAC  F019         	call	_create_chain	;wreg free
  8520  001BE8  C056  F090         	movff	?_create_chain,f_lseek@clst
  8521  001BEC  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8522  001BF0  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8523  001BF4  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8524                           
  8525                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8526  001BF8  0100               	movlb	0	; () banked
  8527  001BFA  0590               	decf	f_lseek@clst& (0+255),w,b
  8528  001BFC  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8529  001BFE  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8530  001C00  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8531  001C02  A4D8               	btfss	status,2,c
  8532  001C04  D00A               	goto	l6100
  8533  001C06                     u8200:
  8534                           
  8535                           ; BSR set to: 0
  8536  001C06  EE20 F005          	lfsr	2,5
  8537  001C0A  516D               	movf	f_lseek@fp& (0+255),w,b
  8538  001C0C  26D9               	addwf	fsr2l,f,c
  8539  001C0E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8540  001C10  22DA               	addwfc	fsr2h,f,c
  8541  001C12  0E02               	movlw	2
  8542  001C14  6EDF               	movwf	indf2,c
  8543                           
  8544                           ; BSR set to: 0
  8545  001C16  0E02               	movlw	2
  8546  001C18  0012               	return	
  8547  001C1A                     l6100:
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8551  001C1A  2990               	incf	f_lseek@clst& (0+255),w,b
  8552  001C1C  E111               	bnz	l6108
  8553  001C1E  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8554  001C20  E10F               	bnz	l6108
  8555  001C22  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8556  001C24  E10D               	bnz	l6108
  8557  001C26  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8558  001C28  A4D8               	btfss	status,2,c
  8559  001C2A  D00A               	goto	l6108
  8560  001C2C                     u8210:
  8561                           
  8562                           ; BSR set to: 0
  8563  001C2C  EE20 F005          	lfsr	2,5
  8564  001C30  516D               	movf	f_lseek@fp& (0+255),w,b
  8565  001C32  26D9               	addwf	fsr2l,f,c
  8566  001C34  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8567  001C36  22DA               	addwfc	fsr2h,f,c
  8568  001C38  0E01               	movlw	1
  8569  001C3A  6EDF               	movwf	indf2,c
  8570                           
  8571                           ; BSR set to: 0
  8572  001C3C  0E01               	movlw	1
  8573  001C3E  0012               	return	
  8574  001C40                     l6108:
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;ff.c: 3129:      fp->sclust = clst;
  8578  001C40  EE20 F00E          	lfsr	2,14
  8579  001C44  516D               	movf	f_lseek@fp& (0+255),w,b
  8580  001C46  26D9               	addwf	fsr2l,f,c
  8581  001C48  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8582  001C4A  22DA               	addwfc	fsr2h,f,c
  8583  001C4C  C090  FFDE         	movff	f_lseek@clst,postinc2
  8584  001C50  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8585  001C54  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8586  001C58  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8587  001C5C                     l734:
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;ff.c: 3132:     fp->clust = clst;
  8591  001C5C  EE20 F012          	lfsr	2,18
  8592  001C60  516D               	movf	f_lseek@fp& (0+255),w,b
  8593  001C62  26D9               	addwf	fsr2l,f,c
  8594  001C64  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8595  001C66  22DA               	addwfc	fsr2h,f,c
  8596  001C68  C090  FFDE         	movff	f_lseek@clst,postinc2
  8597  001C6C  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8598  001C70  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8599  001C74  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8600  001C78                     l6110:
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;ff.c: 3134:    if (clst != 0) {
  8604  001C78  5190               	movf	f_lseek@clst& (0+255),w,b
  8605  001C7A  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8606  001C7C  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8607  001C7E  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8608  001C80  A4D8               	btfss	status,2,c
  8609  001C82  D097               	goto	l6146
  8610  001C84  D0FA               	goto	l6164
  8611  001C86                     l6114:
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8615  001C86  EE20 F004          	lfsr	2,4
  8616  001C8A  516D               	movf	f_lseek@fp& (0+255),w,b
  8617  001C8C  26D9               	addwf	fsr2l,f,c
  8618  001C8E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8619  001C90  22DA               	addwfc	fsr2h,f,c
  8620  001C92  A2DF               	btfss	indf2,1,c
  8621  001C94  D02A               	goto	l6122
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8625  001C96  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8626  001C9A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8627  001C9E  CFDE F056          	movff	postinc2,create_chain@fs
  8628  001CA2  CFDD F057          	movff	postdec2,create_chain@fs+1
  8629  001CA6  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8630  001CAA  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8631  001CAE  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8632  001CB2  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8633  001CB6  ECAC  F019         	call	_create_chain	;wreg free
  8634  001CBA  C056  F090         	movff	?_create_chain,f_lseek@clst
  8635  001CBE  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8636  001CC2  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8637  001CC6  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8638                           
  8639                           ;ff.c: 3139:       if (clst == 0) {
  8640  001CCA  0100               	movlb	0	; () banked
  8641  001CCC  5190               	movf	f_lseek@clst& (0+255),w,b
  8642  001CCE  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8643  001CD0  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8644  001CD2  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8645  001CD4  A4D8               	btfss	status,2,c
  8646  001CD6  D023               	goto	l6124
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;ff.c: 3140:        ofs = bcs; break;
  8650  001CD8  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8651  001CDC  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8652  001CE0  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8653  001CE4  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8654  001CE8  D06E               	goto	u8280
  8655  001CEA                     l6122:
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8659  001CEA  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8660  001CEE  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8661  001CF2  CFDE F03B          	movff	postinc2,get_fat@fs
  8662  001CF6  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8663  001CFA  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8664  001CFE  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8665  001D02  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8666  001D06  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8667  001D0A  EC10  F016         	call	_get_fat	;wreg free
  8668  001D0E  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8669  001D12  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8670  001D16  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8671  001D1A  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8672  001D1E                     l6124:
  8673                           
  8674                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8675  001D1E  0100               	movlb	0	; () banked
  8676  001D20  2990               	incf	f_lseek@clst& (0+255),w,b
  8677  001D22  E107               	bnz	l6132
  8678  001D24  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8679  001D26  E105               	bnz	l6132
  8680  001D28  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8681  001D2A  E103               	bnz	l6132
  8682  001D2C  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8683  001D2E  B4D8               	btfsc	status,2,c
  8684  001D30  D77D               	goto	u8210
  8685  001D32                     l6132:
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8689  001D32  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8690  001D34  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8691  001D36  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8692  001D38  E104               	bnz	u8260
  8693  001D3A  0E02               	movlw	2
  8694  001D3C  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8695  001D3E  A0D8               	btfss	status,0,c
  8696  001D40  D762               	goto	u8200
  8697  001D42                     u8260:
  8698                           
  8699                           ; BSR set to: 0
  8700  001D42  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8701  001D46  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8702  001D4A  EE10 F012          	lfsr	1,18
  8703  001D4E  50DE               	movf	postinc2,w,c
  8704  001D50  26E1               	addwf	fsr1l,f,c
  8705  001D52  50DD               	movf	postdec2,w,c
  8706  001D54  22E2               	addwfc	fsr1h,f,c
  8707  001D56  50E6               	movf	postinc1,w,c
  8708  001D58  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8709  001D5A  50E6               	movf	postinc1,w,c
  8710  001D5C  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8711  001D5E  50E6               	movf	postinc1,w,c
  8712  001D60  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8713  001D62  50E6               	movf	postinc1,w,c
  8714  001D64  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8715  001D66  B0D8               	btfsc	status,0,c
  8716  001D68  D74E               	goto	u8200
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;ff.c: 3147:      fp->clust = clst;
  8720                           
  8721                           ; BSR set to: 0
  8722  001D6A  EE20 F012          	lfsr	2,18
  8723  001D6E  516D               	movf	f_lseek@fp& (0+255),w,b
  8724  001D70  26D9               	addwf	fsr2l,f,c
  8725  001D72  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8726  001D74  22DA               	addwfc	fsr2h,f,c
  8727  001D76  C090  FFDE         	movff	f_lseek@clst,postinc2
  8728  001D7A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8729  001D7E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8730  001D82  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8731                           
  8732                           ;ff.c: 3148:      fp->fptr += bcs;
  8733  001D86  EE20 F006          	lfsr	2,6
  8734  001D8A  516D               	movf	f_lseek@fp& (0+255),w,b
  8735  001D8C  26D9               	addwf	fsr2l,f,c
  8736  001D8E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8737  001D90  22DA               	addwfc	fsr2h,f,c
  8738  001D92  518C               	movf	f_lseek@bcs& (0+255),w,b
  8739  001D94  26DE               	addwf	postinc2,f,c
  8740  001D96  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8741  001D98  22DE               	addwfc	postinc2,f,c
  8742  001D9A  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8743  001D9C  22DE               	addwfc	postinc2,f,c
  8744  001D9E  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8745  001DA0  22DE               	addwfc	postinc2,f,c
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;ff.c: 3149:      ofs -= bcs;
  8749  001DA2  518C               	movf	f_lseek@bcs& (0+255),w,b
  8750  001DA4  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8751  001DA6  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8752  001DA8  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8753  001DAA  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8754  001DAC  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8755  001DAE  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8756  001DB0  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8757  001DB2                     l6146:
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;ff.c: 3135:     while (ofs > bcs) {
  8761  001DB2  516F               	movf	f_lseek@ofs& (0+255),w,b
  8762  001DB4  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8763  001DB6  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8764  001DB8  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8765  001DBA  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8766  001DBC  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8767  001DBE  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8768  001DC0  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8769  001DC2  A0D8               	btfss	status,0,c
  8770  001DC4  D760               	goto	l6114
  8771  001DC6                     u8280:
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;ff.c: 3151:     fp->fptr += ofs;
  8775  001DC6  EE20 F006          	lfsr	2,6
  8776  001DCA  516D               	movf	f_lseek@fp& (0+255),w,b
  8777  001DCC  26D9               	addwf	fsr2l,f,c
  8778  001DCE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8779  001DD0  22DA               	addwfc	fsr2h,f,c
  8780  001DD2  516F               	movf	f_lseek@ofs& (0+255),w,b
  8781  001DD4  26DE               	addwf	postinc2,f,c
  8782  001DD6  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8783  001DD8  22DE               	addwfc	postinc2,f,c
  8784  001DDA  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8785  001DDC  22DE               	addwfc	postinc2,f,c
  8786  001DDE  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8787  001DE0  22DE               	addwfc	postinc2,f,c
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8791  001DE2  0EFF               	movlw	255
  8792  001DE4  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8793  001DE6  6F73               	movwf	??_f_lseek& (0+255),b
  8794  001DE8  0E01               	movlw	1
  8795  001DEA  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8796  001DEC  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8797  001DEE  0E00               	movlw	0
  8798  001DF0  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8799  001DF2  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8800  001DF4  0E00               	movlw	0
  8801  001DF6  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8802  001DF8  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8803  001DFA  5173               	movf	??_f_lseek& (0+255),w,b
  8804  001DFC  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8805  001DFE  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8806  001E00  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8807  001E02  B4D8               	btfsc	status,2,c
  8808  001E04  D03A               	goto	l6164
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  8812  001E06  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8813  001E0A  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8814  001E0E  CFDE F00D          	movff	postinc2,clust2sect@fs
  8815  001E12  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8816  001E16  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  8817  001E1A  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  8818  001E1E  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  8819  001E22  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  8820  001E26  ECCE  F026         	call	_clust2sect	;wreg free
  8821  001E2A  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  8822  001E2E  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  8823  001E32  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  8824  001E36  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  8825                           
  8826                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8827  001E3A  0100               	movlb	0	; () banked
  8828  001E3C  5188               	movf	f_lseek@nsect& (0+255),w,b
  8829  001E3E  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8830  001E40  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8831  001E42  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8832  001E44  B4D8               	btfsc	status,2,c
  8833  001E46  D6DF               	goto	u8200
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  8837                           
  8838                           ; BSR set to: 0
  8839  001E48  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  8840  001E4C  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  8841  001E50  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  8842  001E54  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  8843  001E58  0E0A               	movlw	10
  8844  001E5A  D005               	goto	u8310
  8845  001E5C                     u8315:
  8846  001E5C  90D8               	bcf	status,0,c
  8847  001E5E  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8848  001E60  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8849  001E62  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8850  001E64  3373               	rrcf	??_f_lseek& (0+255),f,b
  8851  001E66                     u8310:
  8852  001E66  2EE8               	decfsz	wreg,f,c
  8853  001E68  D7F9               	goto	u8315
  8854  001E6A  5173               	movf	??_f_lseek& (0+255),w,b
  8855  001E6C  2788               	addwf	f_lseek@nsect& (0+255),f,b
  8856  001E6E  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  8857  001E70  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8858  001E72  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  8859  001E74  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8860  001E76  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  8861  001E78  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8862  001E7A                     l6164:
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8866  001E7A  EE20 F006          	lfsr	2,6
  8867  001E7E  516D               	movf	f_lseek@fp& (0+255),w,b
  8868  001E80  26D9               	addwf	fsr2l,f,c
  8869  001E82  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8870  001E84  22DA               	addwfc	fsr2h,f,c
  8871  001E86  0EFF               	movlw	255
  8872  001E88  14DE               	andwf	postinc2,w,c
  8873  001E8A  6F73               	movwf	??_f_lseek& (0+255),b
  8874  001E8C  0E01               	movlw	1
  8875  001E8E  14DE               	andwf	postinc2,w,c
  8876  001E90  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8877  001E92  0E00               	movlw	0
  8878  001E94  14DE               	andwf	postinc2,w,c
  8879  001E96  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8880  001E98  0E00               	movlw	0
  8881  001E9A  14DE               	andwf	postinc2,w,c
  8882  001E9C  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8883  001E9E  5173               	movf	??_f_lseek& (0+255),w,b
  8884  001EA0  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8885  001EA2  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8886  001EA4  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8887  001EA6  B4D8               	btfsc	status,2,c
  8888  001EA8  D021               	goto	l6170
  8889                           
  8890                           ; BSR set to: 0
  8891  001EAA  EE20 F016          	lfsr	2,22
  8892  001EAE  516D               	movf	f_lseek@fp& (0+255),w,b
  8893  001EB0  26D9               	addwf	fsr2l,f,c
  8894  001EB2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8895  001EB4  22DA               	addwfc	fsr2h,f,c
  8896  001EB6  5188               	movf	f_lseek@nsect& (0+255),w,b
  8897  001EB8  18DE               	xorwf	postinc2,w,c
  8898  001EBA  E10A               	bnz	u8330
  8899  001EBC  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8900  001EBE  18DE               	xorwf	postinc2,w,c
  8901  001EC0  E107               	bnz	u8330
  8902  001EC2  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8903  001EC4  18DE               	xorwf	postinc2,w,c
  8904  001EC6  E104               	bnz	u8330
  8905  001EC8  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8906  001ECA  18DE               	xorwf	postinc2,w,c
  8907  001ECC  B4D8               	btfsc	status,2,c
  8908  001ECE  D00E               	goto	l6170
  8909  001ED0                     u8330:
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;ff.c: 3171:    fp->dsect = nsect;
  8913  001ED0  EE20 F016          	lfsr	2,22
  8914  001ED4  516D               	movf	f_lseek@fp& (0+255),w,b
  8915  001ED6  26D9               	addwf	fsr2l,f,c
  8916  001ED8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8917  001EDA  22DA               	addwfc	fsr2h,f,c
  8918  001EDC  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8919  001EE0  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8920  001EE4  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8921  001EE8  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8922  001EEC                     l6170:
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  8926  001EEC  EE20 F006          	lfsr	2,6
  8927  001EF0  516D               	movf	f_lseek@fp& (0+255),w,b
  8928  001EF2  26D9               	addwf	fsr2l,f,c
  8929  001EF4  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8930  001EF6  22DA               	addwfc	fsr2h,f,c
  8931  001EF8  EE10 F00A          	lfsr	1,10
  8932  001EFC  516D               	movf	f_lseek@fp& (0+255),w,b
  8933  001EFE  26E1               	addwf	fsr1l,f,c
  8934  001F00  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8935  001F02  22E2               	addwfc	fsr1h,f,c
  8936  001F04  50DE               	movf	postinc2,w,c
  8937  001F06  5CE6               	subwf	postinc1,w,c
  8938  001F08  50DE               	movf	postinc2,w,c
  8939  001F0A  58E6               	subwfb	postinc1,w,c
  8940  001F0C  50DE               	movf	postinc2,w,c
  8941  001F0E  58E6               	subwfb	postinc1,w,c
  8942  001F10  50DE               	movf	postinc2,w,c
  8943  001F12  58E6               	subwfb	postinc1,w,c
  8944  001F14  B0D8               	btfsc	status,0,c
  8945  001F16  D521               	goto	u8110
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  8949  001F18  EE20 F006          	lfsr	2,6
  8950  001F1C  516D               	movf	f_lseek@fp& (0+255),w,b
  8951  001F1E  26D9               	addwf	fsr2l,f,c
  8952  001F20  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8953  001F22  22DA               	addwfc	fsr2h,f,c
  8954  001F24  EE10 F00A          	lfsr	1,10
  8955  001F28  516D               	movf	f_lseek@fp& (0+255),w,b
  8956  001F2A  26E1               	addwf	fsr1l,f,c
  8957  001F2C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8958  001F2E  22E2               	addwfc	fsr1h,f,c
  8959  001F30  CFDE FFE6          	movff	postinc2,postinc1
  8960  001F34  CFDE FFE6          	movff	postinc2,postinc1
  8961  001F38  CFDE FFE6          	movff	postinc2,postinc1
  8962  001F3C  CFDE FFE6          	movff	postinc2,postinc1
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;ff.c: 3176:    fp->flag |= 0x20;
  8966  001F40  EE20 F004          	lfsr	2,4
  8967  001F44  516D               	movf	f_lseek@fp& (0+255),w,b
  8968  001F46  26D9               	addwf	fsr2l,f,c
  8969  001F48  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8970  001F4A  22DA               	addwfc	fsr2h,f,c
  8971  001F4C  0E00               	movlw	0
  8972  001F4E  8ADB               	bsf	plusw2,5,c
  8973  001F50  D504               	goto	u8110
  8974  001F52                     __end_of_f_lseek:
  8975                           	opt callstack 0
  8976                           
  8977 ;; *************** function _create_chain *****************
  8978 ;; Defined at:
  8979 ;;		line 990 in file "ff.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;  fs              2   85[COMRAM] PTR struct .
  8982 ;;		 -> NULL(0), FatFs(558), 
  8983 ;;  clst            4   87[COMRAM] unsigned long 
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;  cs              4    9[BANK0 ] unsigned long 
  8986 ;;  ncl             4    5[BANK0 ] unsigned long 
  8987 ;;  scl             4    1[BANK0 ] unsigned long 
  8988 ;;  res             1    0[BANK0 ] enum E93
  8989 ;; Return value:  Size  Location     Type
  8990 ;;                  4   85[COMRAM] unsigned long 
  8991 ;; Registers used:
  8992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8993 ;; Tracked objects:
  8994 ;;		On entry : 0/0
  8995 ;;		On exit  : 0/0
  8996 ;;		Unchanged: 0/0
  8997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8998 ;;      Params:         6       0       0       0       0       0       0       0       0
  8999 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9000 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9001 ;;      Totals:        10      13       0       0       0       0       0       0       0
  9002 ;;Total ram usage:       23 bytes
  9003 ;; Hardware stack levels used:    1
  9004 ;; Hardware stack levels required when called:    9
  9005 ;; This function calls:
  9006 ;;		_get_fat
  9007 ;;		_put_fat
  9008 ;; This function is called by:
  9009 ;;		_dir_next
  9010 ;;		_f_write
  9011 ;;		_f_lseek
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           	psect	text23
  9016  003358                     __ptext23:
  9017                           	opt callstack 0
  9018  003358                     _create_chain:
  9019                           	opt callstack 19
  9020                           
  9021                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  9022                           
  9023                           ; BSR set to: 0
  9024                           ;incstack = 0
  9025  003358  5058               	movf	create_chain@clst,w,c
  9026  00335A  1059               	iorwf	create_chain@clst+1,w,c
  9027  00335C  105A               	iorwf	create_chain@clst+2,w,c
  9028  00335E  105B               	iorwf	create_chain@clst+3,w,c
  9029  003360  A4D8               	btfss	status,2,c
  9030  003362  D02E               	goto	l4516
  9031                           
  9032                           ;ff.c: 1000:   scl = fs->last_clust;
  9033  003364  EE20 F00A          	lfsr	2,10
  9034  003368  5056               	movf	create_chain@fs,w,c
  9035  00336A  26D9               	addwf	fsr2l,f,c
  9036  00336C  5057               	movf	create_chain@fs+1,w,c
  9037  00336E  22DA               	addwfc	fsr2h,f,c
  9038  003370  CFDE F061          	movff	postinc2,create_chain@scl
  9039  003374  CFDE F062          	movff	postinc2,create_chain@scl+1
  9040  003378  CFDE F063          	movff	postinc2,create_chain@scl+2
  9041  00337C  CFDE F064          	movff	postinc2,create_chain@scl+3
  9042                           
  9043                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  9044  003380  0100               	movlb	0	; () banked
  9045  003382  5161               	movf	create_chain@scl& (0+255),w,b
  9046  003384  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9047  003386  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9048  003388  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9049  00338A  B4D8               	btfsc	status,2,c
  9050  00338C  D010               	goto	u5370
  9051                           
  9052                           ; BSR set to: 0
  9053  00338E  EE20 F012          	lfsr	2,18
  9054  003392  5056               	movf	create_chain@fs,w,c
  9055  003394  26D9               	addwf	fsr2l,f,c
  9056  003396  5057               	movf	create_chain@fs+1,w,c
  9057  003398  22DA               	addwfc	fsr2h,f,c
  9058  00339A  50DE               	movf	postinc2,w,c
  9059  00339C  5D61               	subwf	create_chain@scl& (0+255),w,b
  9060  00339E  50DE               	movf	postinc2,w,c
  9061  0033A0  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9062  0033A2  50DE               	movf	postinc2,w,c
  9063  0033A4  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9064  0033A6  50DE               	movf	postinc2,w,c
  9065  0033A8  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9066  0033AA  A0D8               	btfss	status,0,c
  9067  0033AC  D05B               	goto	l380
  9068  0033AE                     u5370:
  9069                           
  9070                           ; BSR set to: 0
  9071  0033AE  0E01               	movlw	1
  9072  0033B0  6F61               	movwf	create_chain@scl& (0+255),b
  9073  0033B2  0E00               	movlw	0
  9074  0033B4  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9075  0033B6  0E00               	movlw	0
  9076  0033B8  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9077  0033BA  0E00               	movlw	0
  9078  0033BC  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9079  0033BE  D052               	goto	l380
  9080  0033C0                     l4516:
  9081                           
  9082                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9083  0033C0  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9084  0033C4  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9085  0033C8  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9086  0033CC  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9087  0033D0  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9088  0033D4  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9089  0033D8  EC10  F016         	call	_get_fat	;wreg free
  9090  0033DC  C03B  F069         	movff	?_get_fat,create_chain@cs
  9091  0033E0  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9092  0033E4  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9093  0033E8  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9094                           
  9095                           ;ff.c: 1005:   if (cs < 2) return 1;
  9096  0033EC  0100               	movlb	0	; () banked
  9097  0033EE  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9098  0033F0  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9099  0033F2  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9100  0033F4  E10D               	bnz	l4524
  9101  0033F6  0E02               	movlw	2
  9102  0033F8  5D69               	subwf	create_chain@cs& (0+255),w,b
  9103  0033FA  B0D8               	btfsc	status,0,c
  9104  0033FC  D009               	goto	l4524
  9105                           
  9106                           ; BSR set to: 0
  9107  0033FE  0E01               	movlw	1
  9108  003400  6E56               	movwf	?_create_chain,c
  9109  003402  0E00               	movlw	0
  9110  003404  6E57               	movwf	?_create_chain+1,c
  9111  003406  0E00               	movlw	0
  9112  003408  6E58               	movwf	?_create_chain+2,c
  9113  00340A  0E00               	movlw	0
  9114  00340C  6E59               	movwf	?_create_chain+3,c
  9115  00340E  0012               	return	
  9116  003410                     l4524:
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9120  003410  2969               	incf	create_chain@cs& (0+255),w,b
  9121  003412  E110               	bnz	l4528
  9122  003414  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9123  003416  E10E               	bnz	l4528
  9124  003418  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9125  00341A  E10C               	bnz	l4528
  9126  00341C  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9127  00341E  A4D8               	btfss	status,2,c
  9128  003420  D009               	goto	l4528
  9129  003422                     u5390:
  9130                           
  9131                           ; BSR set to: 0
  9132  003422  C069  F056         	movff	create_chain@cs,?_create_chain
  9133  003426  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9134  00342A  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9135  00342E  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9136  003432  0012               	return	
  9137  003434                     l4528:
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9141  003434  EE20 F012          	lfsr	2,18
  9142  003438  5056               	movf	create_chain@fs,w,c
  9143  00343A  26D9               	addwf	fsr2l,f,c
  9144  00343C  5057               	movf	create_chain@fs+1,w,c
  9145  00343E  22DA               	addwfc	fsr2h,f,c
  9146  003440  50DE               	movf	postinc2,w,c
  9147  003442  5D69               	subwf	create_chain@cs& (0+255),w,b
  9148  003444  50DE               	movf	postinc2,w,c
  9149  003446  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9150  003448  50DE               	movf	postinc2,w,c
  9151  00344A  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9152  00344C  50DE               	movf	postinc2,w,c
  9153  00344E  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9154  003450  A0D8               	btfss	status,0,c
  9155  003452  D7E7               	goto	u5390
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;ff.c: 1008:   scl = clst;
  9159  003454  C058  F061         	movff	create_chain@clst,create_chain@scl
  9160  003458  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9161  00345C  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9162  003460  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9163  003464                     l380:
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;ff.c: 1011:  ncl = scl;
  9167  003464  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9168  003468  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9169  00346C  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9170  003470  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9171  003474                     l4532:
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;ff.c: 1013:   ncl++;
  9175  003474  0E01               	movlw	1
  9176  003476  2765               	addwf	create_chain@ncl& (0+255),f,b
  9177  003478  0E00               	movlw	0
  9178  00347A  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9179  00347C  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9180  00347E  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9184  003480  EE20 F012          	lfsr	2,18
  9185  003484  5056               	movf	create_chain@fs,w,c
  9186  003486  26D9               	addwf	fsr2l,f,c
  9187  003488  5057               	movf	create_chain@fs+1,w,c
  9188  00348A  22DA               	addwfc	fsr2h,f,c
  9189  00348C  50DE               	movf	postinc2,w,c
  9190  00348E  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9191  003490  50DE               	movf	postinc2,w,c
  9192  003492  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9193  003494  50DE               	movf	postinc2,w,c
  9194  003496  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9195  003498  50DE               	movf	postinc2,w,c
  9196  00349A  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9197  00349C  A0D8               	btfss	status,0,c
  9198  00349E  D019               	goto	l4544
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;ff.c: 1015:    ncl = 2;
  9202  0034A0  0E02               	movlw	2
  9203  0034A2  6F65               	movwf	create_chain@ncl& (0+255),b
  9204  0034A4  0E00               	movlw	0
  9205  0034A6  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9206  0034A8  0E00               	movlw	0
  9207  0034AA  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9208  0034AC  0E00               	movlw	0
  9209  0034AE  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9213  0034B0  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9214  0034B2  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9215  0034B4  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9216  0034B6  E10D               	bnz	l4544
  9217  0034B8  0E02               	movlw	2
  9218  0034BA  5D61               	subwf	create_chain@scl& (0+255),w,b
  9219  0034BC  B0D8               	btfsc	status,0,c
  9220  0034BE  D009               	goto	l4544
  9221  0034C0                     u5420:
  9222                           
  9223                           ; BSR set to: 0
  9224  0034C0  0E00               	movlw	0
  9225  0034C2  6E56               	movwf	?_create_chain,c
  9226  0034C4  0E00               	movlw	0
  9227  0034C6  6E57               	movwf	?_create_chain+1,c
  9228  0034C8  0E00               	movlw	0
  9229  0034CA  6E58               	movwf	?_create_chain+2,c
  9230  0034CC  0E00               	movlw	0
  9231  0034CE  6E59               	movwf	?_create_chain+3,c
  9232  0034D0  0012               	return	
  9233  0034D2                     l4544:
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9237  0034D2  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9238  0034D6  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9239  0034DA  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9240  0034DE  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9241  0034E2  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9242  0034E6  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9243  0034EA  EC10  F016         	call	_get_fat	;wreg free
  9244  0034EE  C03B  F069         	movff	?_get_fat,create_chain@cs
  9245  0034F2  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9246  0034F6  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9247  0034FA  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9248                           
  9249                           ;ff.c: 1019:   if (cs == 0) break;
  9250  0034FE  0100               	movlb	0	; () banked
  9251  003500  5169               	movf	create_chain@cs& (0+255),w,b
  9252  003502  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9253  003504  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9254  003506  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9255  003508  B4D8               	btfsc	status,2,c
  9256  00350A  D01D               	goto	l4560
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9260  00350C  2969               	incf	create_chain@cs& (0+255),w,b
  9261  00350E  E107               	bnz	u5440
  9262  003510  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9263  003512  E105               	bnz	u5440
  9264  003514  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9265  003516  E103               	bnz	u5440
  9266  003518  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9267  00351A  B4D8               	btfsc	status,2,c
  9268  00351C  D782               	goto	u5390
  9269  00351E                     u5440:
  9270                           
  9271                           ; BSR set to: 0
  9272  00351E  0569               	decf	create_chain@cs& (0+255),w,b
  9273  003520  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9274  003522  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9275  003524  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9276  003526  B4D8               	btfsc	status,2,c
  9277  003528  D77C               	goto	u5390
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9281  00352A  5161               	movf	create_chain@scl& (0+255),w,b
  9282  00352C  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9283  00352E  E1A2               	bnz	l4532
  9284  003530  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9285  003532  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9286  003534  E19F               	bnz	l4532
  9287  003536  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9288  003538  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9289  00353A  E19C               	bnz	l4532
  9290  00353C  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9291  00353E  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9292  003540  B4D8               	btfsc	status,2,c
  9293  003542  D7BE               	goto	u5420
  9294  003544  D797               	goto	l4532
  9295  003546                     l4560:
  9296                           
  9297                           ; BSR set to: 0
  9298                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9299  003546  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9300  00354A  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9301  00354E  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9302  003552  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9303  003556  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9304  00355A  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9305  00355E  0EFF               	movlw	255
  9306  003560  6E41               	movwf	put_fat@val,c
  9307  003562  0EFF               	movlw	255
  9308  003564  6E42               	movwf	put_fat@val+1,c
  9309  003566  0EFF               	movlw	255
  9310  003568  6E43               	movwf	put_fat@val+2,c
  9311  00356A  0E0F               	movlw	15
  9312  00356C  6E44               	movwf	put_fat@val+3,c
  9313  00356E  ECF8  F011         	call	_put_fat	;wreg free
  9314  003572  0100               	movlb	0	; () banked
  9315  003574  6F60               	movwf	create_chain@res& (0+255),b
  9316                           
  9317                           ; BSR set to: 0
  9318                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9319  003576  5160               	movf	create_chain@res& (0+255),w,b
  9320  003578  A4D8               	btfss	status,2,c
  9321  00357A  D01E               	goto	l4568
  9322                           
  9323                           ; BSR set to: 0
  9324  00357C  5058               	movf	create_chain@clst,w,c
  9325  00357E  1059               	iorwf	create_chain@clst+1,w,c
  9326  003580  105A               	iorwf	create_chain@clst+2,w,c
  9327  003582  105B               	iorwf	create_chain@clst+3,w,c
  9328  003584  B4D8               	btfsc	status,2,c
  9329  003586  D018               	goto	l4568
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9333  003588  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9334  00358C  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9335  003590  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9336  003594  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9337  003598  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9338  00359C  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9339  0035A0  C065  F041         	movff	create_chain@ncl,put_fat@val
  9340  0035A4  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9341  0035A8  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9342  0035AC  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9343  0035B0  ECF8  F011         	call	_put_fat	;wreg free
  9344  0035B4  0100               	movlb	0	; () banked
  9345  0035B6  6F60               	movwf	create_chain@res& (0+255),b
  9346  0035B8                     l4568:
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;ff.c: 1029:  if (res == FR_OK) {
  9350  0035B8  5160               	movf	create_chain@res& (0+255),w,b
  9351  0035BA  A4D8               	btfss	status,2,c
  9352  0035BC  D031               	goto	l4574
  9353                           
  9354                           ; BSR set to: 0
  9355                           ;ff.c: 1030:   fs->last_clust = ncl;
  9356  0035BE  EE20 F00A          	lfsr	2,10
  9357  0035C2  5056               	movf	create_chain@fs,w,c
  9358  0035C4  26D9               	addwf	fsr2l,f,c
  9359  0035C6  5057               	movf	create_chain@fs+1,w,c
  9360  0035C8  22DA               	addwfc	fsr2h,f,c
  9361  0035CA  C065  FFDE         	movff	create_chain@ncl,postinc2
  9362  0035CE  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9363  0035D2  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9364  0035D6  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9365                           
  9366                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9367  0035DA  EE20 F00E          	lfsr	2,14
  9368  0035DE  5056               	movf	create_chain@fs,w,c
  9369  0035E0  26D9               	addwf	fsr2l,f,c
  9370  0035E2  5057               	movf	create_chain@fs+1,w,c
  9371  0035E4  22DA               	addwfc	fsr2h,f,c
  9372  0035E6  28DE               	incf	postinc2,w,c
  9373  0035E8  E107               	bnz	u5500
  9374  0035EA  28DE               	incf	postinc2,w,c
  9375  0035EC  E105               	bnz	u5500
  9376  0035EE  28DE               	incf	postinc2,w,c
  9377  0035F0  E103               	bnz	u5500
  9378  0035F2  28DE               	incf	postinc2,w,c
  9379  0035F4  B4D8               	btfsc	status,2,c
  9380  0035F6  D024               	goto	l397
  9381  0035F8                     u5500:
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;ff.c: 1032:    fs->free_clust--;
  9385  0035F8  EE20 F00E          	lfsr	2,14
  9386  0035FC  5056               	movf	create_chain@fs,w,c
  9387  0035FE  26D9               	addwf	fsr2l,f,c
  9388  003600  5057               	movf	create_chain@fs+1,w,c
  9389  003602  22DA               	addwfc	fsr2h,f,c
  9390  003604  06DE               	decf	postinc2,f,c
  9391  003606  0E00               	movlw	0
  9392  003608  5ADE               	subwfb	postinc2,f,c
  9393  00360A  5ADE               	subwfb	postinc2,f,c
  9394  00360C  5ADE               	subwfb	postinc2,f,c
  9395                           
  9396                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9397  00360E  EE20 F005          	lfsr	2,5
  9398  003612  5056               	movf	create_chain@fs,w,c
  9399  003614  26D9               	addwf	fsr2l,f,c
  9400  003616  5057               	movf	create_chain@fs+1,w,c
  9401  003618  22DA               	addwfc	fsr2h,f,c
  9402  00361A  0E00               	movlw	0
  9403  00361C  80DB               	bsf	plusw2,0,c
  9404  00361E  D010               	goto	l397
  9405  003620                     l4574:
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9409  003620  0560               	decf	create_chain@res& (0+255),w,b
  9410  003622  B4D8               	btfsc	status,2,c
  9411  003624  D009               	goto	l399
  9412                           
  9413                           ; BSR set to: 0
  9414  003626  0E01               	movlw	1
  9415  003628  6F65               	movwf	create_chain@ncl& (0+255),b
  9416  00362A  0E00               	movlw	0
  9417  00362C  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9418  00362E  0E00               	movlw	0
  9419  003630  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9420  003632  0E00               	movlw	0
  9421  003634  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9422  003636  D004               	goto	l397
  9423  003638                     l399:
  9424                           
  9425                           ; BSR set to: 0
  9426  003638  6965               	setf	create_chain@ncl& (0+255),b
  9427  00363A  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9428  00363C  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9429  00363E  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9430  003640                     l397:
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;ff.c: 1039:  return ncl;
  9434  003640  C065  F056         	movff	create_chain@ncl,?_create_chain
  9435  003644  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9436  003648  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9437  00364C  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9438                           
  9439                           ; BSR set to: 0
  9440  003650  0012               	return		;funcret
  9441  003652                     __end_of_create_chain:
  9442                           	opt callstack 0
  9443                           
  9444 ;; *************** function _put_fat *****************
  9445 ;; Defined at:
  9446 ;;		line 873 in file "ff.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;  fs              2   58[COMRAM] PTR struct .
  9449 ;;		 -> NULL(0), FatFs(558), 
  9450 ;;  clst            4   60[COMRAM] unsigned long 
  9451 ;;  val             4   64[COMRAM] unsigned long 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  p               2   83[COMRAM] PTR unsigned char 
  9454 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9455 ;;  bc              2   80[COMRAM] unsigned short 
  9456 ;;  res             1   82[COMRAM] enum E93
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  1    wreg      enum E93
  9459 ;; Registers used:
  9460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9466 ;;      Params:        10       0       0       0       0       0       0       0       0
  9467 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9468 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9469 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9470 ;;Total ram usage:       27 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:    8
  9473 ;; This function calls:
  9474 ;;		_move_window
  9475 ;; This function is called by:
  9476 ;;		_remove_chain
  9477 ;;		_create_chain
  9478 ;; This function uses a non-reentrant model
  9479 ;;
  9480                           
  9481                           	psect	text24
  9482  0023F0                     __ptext24:
  9483                           	opt callstack 0
  9484  0023F0                     _put_fat:
  9485                           	opt callstack 19
  9486                           
  9487                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9488                           
  9489                           ; BSR set to: 0
  9490                           ;incstack = 0
  9491  0023F0  5040               	movf	put_fat@clst+3,w,c
  9492  0023F2  103F               	iorwf	put_fat@clst+2,w,c
  9493  0023F4  103E               	iorwf	put_fat@clst+1,w,c
  9494  0023F6  E104               	bnz	u5190
  9495  0023F8  0E02               	movlw	2
  9496  0023FA  5C3D               	subwf	put_fat@clst,w,c
  9497  0023FC  A0D8               	btfss	status,0,c
  9498  0023FE  D010               	goto	u5200
  9499  002400                     u5190:
  9500  002400  EE20 F012          	lfsr	2,18
  9501  002404  503B               	movf	put_fat@fs,w,c
  9502  002406  26D9               	addwf	fsr2l,f,c
  9503  002408  503C               	movf	put_fat@fs+1,w,c
  9504  00240A  22DA               	addwfc	fsr2h,f,c
  9505  00240C  50DE               	movf	postinc2,w,c
  9506  00240E  5C3D               	subwf	put_fat@clst,w,c
  9507  002410  50DE               	movf	postinc2,w,c
  9508  002412  583E               	subwfb	put_fat@clst+1,w,c
  9509  002414  50DE               	movf	postinc2,w,c
  9510  002416  583F               	subwfb	put_fat@clst+2,w,c
  9511  002418  50DE               	movf	postinc2,w,c
  9512  00241A  5840               	subwfb	put_fat@clst+3,w,c
  9513  00241C  A0D8               	btfss	status,0,c
  9514  00241E  D1E5               	goto	l4466
  9515  002420                     u5200:
  9516                           
  9517                           ;ff.c: 885:   res = FR_INT_ERR;
  9518  002420  0E02               	movlw	2
  9519  002422  6E53               	movwf	put_fat@res,c
  9520                           
  9521                           ;ff.c: 887:  } else {
  9522  002424  D1F8               	goto	l4468
  9523  002426                     l341:
  9524                           
  9525                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9526  002426  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9527  00242A  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9528  00242E  90D8               	bcf	status,0,c
  9529  002430  3052               	rrcf	put_fat@bc+1,w,c
  9530  002432  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9531  002434  3051               	rrcf	put_fat@bc,w,c
  9532  002436  6E45               	movwf	??_put_fat& (0+255),c
  9533  002438  5045               	movf	??_put_fat,w,c
  9534  00243A  2651               	addwf	put_fat@bc,f,c
  9535  00243C  5046               	movf	??_put_fat+1,w,c
  9536  00243E  2252               	addwfc	put_fat@bc+1,f,c
  9537                           
  9538                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9539  002440  C03B  F030         	movff	put_fat@fs,move_window@fs
  9540  002444  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9541  002448  EE20 F01E          	lfsr	2,30
  9542  00244C  503B               	movf	put_fat@fs,w,c
  9543  00244E  26D9               	addwf	fsr2l,f,c
  9544  002450  503C               	movf	put_fat@fs+1,w,c
  9545  002452  22DA               	addwfc	fsr2h,f,c
  9546  002454  CFDE F045          	movff	postinc2,??_put_fat
  9547  002458  CFDE F046          	movff	postinc2,??_put_fat+1
  9548  00245C  CFDE F047          	movff	postinc2,??_put_fat+2
  9549  002460  CFDE F048          	movff	postinc2,??_put_fat+3
  9550  002464  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9551  002468  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9552  00246C  0E09               	movlw	9
  9553  00246E  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9554  002470                     u5215:
  9555  002470  90D8               	bcf	status,0,c
  9556  002472  324A               	rrcf	??_put_fat+5,f,c
  9557  002474  3249               	rrcf	??_put_fat+4,f,c
  9558  002476  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9559  002478  D7FB               	goto	u5215
  9560  00247A  5049               	movf	??_put_fat+4,w,c
  9561  00247C  2445               	addwf	??_put_fat,w,c
  9562  00247E  6E32               	movwf	move_window@sector,c
  9563  002480  504A               	movf	??_put_fat+5,w,c
  9564  002482  2046               	addwfc	??_put_fat+1,w,c
  9565  002484  6E33               	movwf	move_window@sector+1,c
  9566  002486  0E00               	movlw	0
  9567  002488  2047               	addwfc	??_put_fat+2,w,c
  9568  00248A  6E34               	movwf	move_window@sector+2,c
  9569  00248C  0E00               	movlw	0
  9570  00248E  2048               	addwfc	??_put_fat+3,w,c
  9571  002490  6E35               	movwf	move_window@sector+3,c
  9572  002492  EC83  F027         	call	_move_window	;wreg free
  9573  002496  6E53               	movwf	put_fat@res,c
  9574                           
  9575                           ;ff.c: 892:    if (res != FR_OK) break;
  9576  002498  5053               	movf	put_fat@res,w,c
  9577  00249A  A4D8               	btfss	status,2,c
  9578  00249C  D1BC               	goto	l4468
  9579                           
  9580                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9581  00249E  0EFF               	movlw	255
  9582  0024A0  6E45               	movwf	??_put_fat& (0+255),c
  9583  0024A2  0E01               	movlw	1
  9584  0024A4  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9585  0024A6  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9586  0024AA  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9587  0024AE  5045               	movf	??_put_fat,w,c
  9588  0024B0  1647               	andwf	??_put_fat+2,f,c
  9589  0024B2  5046               	movf	??_put_fat+1,w,c
  9590  0024B4  1648               	andwf	??_put_fat+3,f,c
  9591  0024B6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9592  0024BA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9593  0024BE  5047               	movf	??_put_fat+2,w,c
  9594  0024C0  2649               	addwf	??_put_fat+4,f,c
  9595  0024C2  5048               	movf	??_put_fat+3,w,c
  9596  0024C4  224A               	addwfc	??_put_fat+5,f,c
  9597  0024C6  0E2E               	movlw	46
  9598  0024C8  2449               	addwf	??_put_fat+4,w,c
  9599  0024CA  6E54               	movwf	put_fat@p,c
  9600  0024CC  0E00               	movlw	0
  9601  0024CE  204A               	addwfc	??_put_fat+5,w,c
  9602  0024D0  6E55               	movwf	put_fat@p+1,c
  9603  0024D2  4A51               	infsnz	put_fat@bc,f,c
  9604  0024D4  2A52               	incf	put_fat@bc+1,f,c
  9605                           
  9606                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9607  0024D6  B03D               	btfsc	put_fat@clst,0,c
  9608  0024D8  D004               	goto	l4420
  9609  0024DA  C041  F04D         	movff	put_fat@val,_put_fat$592
  9610  0024DE  6A4E               	clrf	_put_fat$592+1,c
  9611  0024E0  D01A               	goto	l4422
  9612  0024E2                     l4420:
  9613  0024E2  5041               	movf	put_fat@val,w,c
  9614  0024E4  6E45               	movwf	??_put_fat& (0+255),c
  9615  0024E6  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9616  0024E8  3A45               	swapf	??_put_fat,f,c
  9617  0024EA  3A46               	swapf	??_put_fat+1,f,c
  9618  0024EC  0EF0               	movlw	240
  9619  0024EE  1646               	andwf	??_put_fat+1,f,c
  9620  0024F0  5045               	movf	??_put_fat,w,c
  9621  0024F2  0B0F               	andlw	15
  9622  0024F4  1246               	iorwf	??_put_fat+1,f,c
  9623  0024F6  0EF0               	movlw	240
  9624  0024F8  1645               	andwf	??_put_fat,f,c
  9625  0024FA  C054  FFD9         	movff	put_fat@p,fsr2l
  9626  0024FE  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9627  002502  50DF               	movf	indf2,w,c
  9628  002504  0B0F               	andlw	15
  9629  002506  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9630  002508  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9631  00250A  5045               	movf	??_put_fat,w,c
  9632  00250C  1047               	iorwf	??_put_fat+2,w,c
  9633  00250E  6E4D               	movwf	_put_fat$592,c
  9634  002510  5046               	movf	??_put_fat+1,w,c
  9635  002512  1048               	iorwf	??_put_fat+3,w,c
  9636  002514  6E4E               	movwf	_put_fat$592+1,c
  9637  002516                     l4422:
  9638  002516  C054  FFD9         	movff	put_fat@p,fsr2l
  9639  00251A  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9640  00251E  C04D  FFDF         	movff	_put_fat$592,indf2
  9641                           
  9642                           ;ff.c: 895:    fs->wflag = 1;
  9643  002522  EE20 F004          	lfsr	2,4
  9644  002526  503B               	movf	put_fat@fs,w,c
  9645  002528  26D9               	addwf	fsr2l,f,c
  9646  00252A  503C               	movf	put_fat@fs+1,w,c
  9647  00252C  22DA               	addwfc	fsr2h,f,c
  9648  00252E  0E01               	movlw	1
  9649  002530  6EDF               	movwf	indf2,c
  9650                           
  9651                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9652  002532  C03B  F030         	movff	put_fat@fs,move_window@fs
  9653  002536  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9654  00253A  EE20 F01E          	lfsr	2,30
  9655  00253E  503B               	movf	put_fat@fs,w,c
  9656  002540  26D9               	addwf	fsr2l,f,c
  9657  002542  503C               	movf	put_fat@fs+1,w,c
  9658  002544  22DA               	addwfc	fsr2h,f,c
  9659  002546  CFDE F045          	movff	postinc2,??_put_fat
  9660  00254A  CFDE F046          	movff	postinc2,??_put_fat+1
  9661  00254E  CFDE F047          	movff	postinc2,??_put_fat+2
  9662  002552  CFDE F048          	movff	postinc2,??_put_fat+3
  9663  002556  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9664  00255A  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9665  00255E  0E09               	movlw	9
  9666  002560  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9667  002562                     u5245:
  9668  002562  90D8               	bcf	status,0,c
  9669  002564  324A               	rrcf	??_put_fat+5,f,c
  9670  002566  3249               	rrcf	??_put_fat+4,f,c
  9671  002568  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9672  00256A  D7FB               	goto	u5245
  9673  00256C  5049               	movf	??_put_fat+4,w,c
  9674  00256E  2445               	addwf	??_put_fat,w,c
  9675  002570  6E32               	movwf	move_window@sector,c
  9676  002572  504A               	movf	??_put_fat+5,w,c
  9677  002574  2046               	addwfc	??_put_fat+1,w,c
  9678  002576  6E33               	movwf	move_window@sector+1,c
  9679  002578  0E00               	movlw	0
  9680  00257A  2047               	addwfc	??_put_fat+2,w,c
  9681  00257C  6E34               	movwf	move_window@sector+2,c
  9682  00257E  0E00               	movlw	0
  9683  002580  2048               	addwfc	??_put_fat+3,w,c
  9684  002582  6E35               	movwf	move_window@sector+3,c
  9685  002584  EC83  F027         	call	_move_window	;wreg free
  9686  002588  6E53               	movwf	put_fat@res,c
  9687                           
  9688                           ;ff.c: 897:    if (res != FR_OK) break;
  9689  00258A  5053               	movf	put_fat@res,w,c
  9690  00258C  A4D8               	btfss	status,2,c
  9691  00258E  D143               	goto	l4468
  9692                           
  9693                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9694  002590  0EFF               	movlw	255
  9695  002592  6E45               	movwf	??_put_fat& (0+255),c
  9696  002594  0E01               	movlw	1
  9697  002596  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9698  002598  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9699  00259C  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9700  0025A0  5045               	movf	??_put_fat,w,c
  9701  0025A2  1647               	andwf	??_put_fat+2,f,c
  9702  0025A4  5046               	movf	??_put_fat+1,w,c
  9703  0025A6  1648               	andwf	??_put_fat+3,f,c
  9704  0025A8  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9705  0025AC  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9706  0025B0  5047               	movf	??_put_fat+2,w,c
  9707  0025B2  2649               	addwf	??_put_fat+4,f,c
  9708  0025B4  5048               	movf	??_put_fat+3,w,c
  9709  0025B6  224A               	addwfc	??_put_fat+5,f,c
  9710  0025B8  0E2E               	movlw	46
  9711  0025BA  2449               	addwf	??_put_fat+4,w,c
  9712  0025BC  6E54               	movwf	put_fat@p,c
  9713  0025BE  0E00               	movlw	0
  9714  0025C0  204A               	addwfc	??_put_fat+5,w,c
  9715  0025C2  6E55               	movwf	put_fat@p+1,c
  9716                           
  9717                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9718  0025C4  B03D               	btfsc	put_fat@clst,0,c
  9719  0025C6  D01B               	goto	l4438
  9720  0025C8  C041  F045         	movff	put_fat@val,??_put_fat
  9721  0025CC  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9722  0025D0  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9723  0025D4  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9724  0025D8  C046  F045         	movff	??_put_fat+1,??_put_fat
  9725  0025DC  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9726  0025E0  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9727  0025E4  6A48               	clrf	??_put_fat+3,c
  9728  0025E6  0E0F               	movlw	15
  9729  0025E8  1645               	andwf	??_put_fat,f,c
  9730  0025EA  C054  FFD9         	movff	put_fat@p,fsr2l
  9731  0025EE  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9732  0025F2  50DF               	movf	indf2,w,c
  9733  0025F4  0BF0               	andlw	240
  9734  0025F6  1045               	iorwf	??_put_fat,w,c
  9735  0025F8  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9736  0025FA  5049               	movf	??_put_fat+4,w,c
  9737  0025FC  D012               	goto	L9
  9738  0025FE                     l4438:
  9739  0025FE  C041  F045         	movff	put_fat@val,??_put_fat
  9740  002602  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9741  002606  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9742  00260A  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9743  00260E  0E05               	movlw	5
  9744  002610  D005               	goto	u5270
  9745  002612                     u5275:
  9746  002612  90D8               	bcf	status,0,c
  9747  002614  3248               	rrcf	??_put_fat+3,f,c
  9748  002616  3247               	rrcf	??_put_fat+2,f,c
  9749  002618  3246               	rrcf	??_put_fat+1,f,c
  9750  00261A  3245               	rrcf	??_put_fat,f,c
  9751  00261C                     u5270:
  9752  00261C  2EE8               	decfsz	wreg,f,c
  9753  00261E  D7F9               	goto	u5275
  9754  002620  5045               	movf	??_put_fat,w,c
  9755  002622                     L9:
  9756  002622  6E4F               	movwf	_put_fat$593,c
  9757  002624  6A50               	clrf	_put_fat$593+1,c
  9758  002626  C054  FFD9         	movff	put_fat@p,fsr2l
  9759  00262A  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9760  00262E  C04F  FFDF         	movff	_put_fat$593,indf2
  9761  002632  D0D2               	goto	l4462
  9762  002634                     l4442:
  9763                           
  9764                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9765  002634  C03B  F030         	movff	put_fat@fs,move_window@fs
  9766  002638  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9767  00263C  EE20 F01E          	lfsr	2,30
  9768  002640  503B               	movf	put_fat@fs,w,c
  9769  002642  26D9               	addwf	fsr2l,f,c
  9770  002644  503C               	movf	put_fat@fs+1,w,c
  9771  002646  22DA               	addwfc	fsr2h,f,c
  9772  002648  CFDE F045          	movff	postinc2,??_put_fat
  9773  00264C  CFDE F046          	movff	postinc2,??_put_fat+1
  9774  002650  CFDE F047          	movff	postinc2,??_put_fat+2
  9775  002654  CFDE F048          	movff	postinc2,??_put_fat+3
  9776  002658  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9777  00265C  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9778  002660  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9779  002664  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9780  002668  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9781  00266C  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9782  002670  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9783  002674  6A4C               	clrf	??_put_fat+7,c
  9784  002676  5045               	movf	??_put_fat,w,c
  9785  002678  2449               	addwf	??_put_fat+4,w,c
  9786  00267A  6E32               	movwf	move_window@sector,c
  9787  00267C  5046               	movf	??_put_fat+1,w,c
  9788  00267E  204A               	addwfc	??_put_fat+5,w,c
  9789  002680  6E33               	movwf	move_window@sector+1,c
  9790  002682  5047               	movf	??_put_fat+2,w,c
  9791  002684  204B               	addwfc	??_put_fat+6,w,c
  9792  002686  6E34               	movwf	move_window@sector+2,c
  9793  002688  5048               	movf	??_put_fat+3,w,c
  9794  00268A  204C               	addwfc	??_put_fat+7,w,c
  9795  00268C  6E35               	movwf	move_window@sector+3,c
  9796  00268E  EC83  F027         	call	_move_window	;wreg free
  9797  002692  6E53               	movwf	put_fat@res,c
  9798                           
  9799                           ;ff.c: 905:    if (res != FR_OK) break;
  9800  002694  5053               	movf	put_fat@res,w,c
  9801  002696  A4D8               	btfss	status,2,c
  9802  002698  D0BE               	goto	l4468
  9803                           
  9804                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9805  00269A  0EFF               	movlw	255
  9806  00269C  6E45               	movwf	??_put_fat& (0+255),c
  9807  00269E  0E01               	movlw	1
  9808  0026A0  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9809  0026A2  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9810  0026A6  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9811  0026AA  90D8               	bcf	status,0,c
  9812  0026AC  3647               	rlcf	??_put_fat+2,f,c
  9813  0026AE  3648               	rlcf	??_put_fat+3,f,c
  9814  0026B0  5045               	movf	??_put_fat,w,c
  9815  0026B2  1647               	andwf	??_put_fat+2,f,c
  9816  0026B4  5046               	movf	??_put_fat+1,w,c
  9817  0026B6  1648               	andwf	??_put_fat+3,f,c
  9818  0026B8  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9819  0026BC  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9820  0026C0  5047               	movf	??_put_fat+2,w,c
  9821  0026C2  2649               	addwf	??_put_fat+4,f,c
  9822  0026C4  5048               	movf	??_put_fat+3,w,c
  9823  0026C6  224A               	addwfc	??_put_fat+5,f,c
  9824  0026C8  0E2E               	movlw	46
  9825  0026CA  2449               	addwf	??_put_fat+4,w,c
  9826  0026CC  6E54               	movwf	put_fat@p,c
  9827  0026CE  0E00               	movlw	0
  9828  0026D0  204A               	addwfc	??_put_fat+5,w,c
  9829  0026D2  6E55               	movwf	put_fat@p+1,c
  9830                           
  9831                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  9832  0026D4  C054  FFD9         	movff	put_fat@p,fsr2l
  9833  0026D8  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9834  0026DC  C041  FFDE         	movff	put_fat@val,postinc2
  9835  0026E0  C042  FFDD         	movff	put_fat@val+1,postdec2
  9836  0026E4  D079               	goto	l4462
  9837  0026E6                     l4452:
  9838                           
  9839                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  9840  0026E6  C03B  F030         	movff	put_fat@fs,move_window@fs
  9841  0026EA  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9842  0026EE  EE20 F01E          	lfsr	2,30
  9843  0026F2  503B               	movf	put_fat@fs,w,c
  9844  0026F4  26D9               	addwf	fsr2l,f,c
  9845  0026F6  503C               	movf	put_fat@fs+1,w,c
  9846  0026F8  22DA               	addwfc	fsr2h,f,c
  9847  0026FA  CFDE F045          	movff	postinc2,??_put_fat
  9848  0026FE  CFDE F046          	movff	postinc2,??_put_fat+1
  9849  002702  CFDE F047          	movff	postinc2,??_put_fat+2
  9850  002706  CFDE F048          	movff	postinc2,??_put_fat+3
  9851  00270A  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9852  00270E  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9853  002712  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9854  002716  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9855  00271A  0E08               	movlw	8
  9856  00271C  D005               	goto	u5290
  9857  00271E                     u5295:
  9858  00271E  90D8               	bcf	status,0,c
  9859  002720  324C               	rrcf	??_put_fat+7,f,c
  9860  002722  324B               	rrcf	??_put_fat+6,f,c
  9861  002724  324A               	rrcf	??_put_fat+5,f,c
  9862  002726  3249               	rrcf	??_put_fat+4,f,c
  9863  002728                     u5290:
  9864  002728  2EE8               	decfsz	wreg,f,c
  9865  00272A  D7F9               	goto	u5295
  9866  00272C  5045               	movf	??_put_fat,w,c
  9867  00272E  2449               	addwf	??_put_fat+4,w,c
  9868  002730  6E32               	movwf	move_window@sector,c
  9869  002732  5046               	movf	??_put_fat+1,w,c
  9870  002734  204A               	addwfc	??_put_fat+5,w,c
  9871  002736  6E33               	movwf	move_window@sector+1,c
  9872  002738  5047               	movf	??_put_fat+2,w,c
  9873  00273A  204B               	addwfc	??_put_fat+6,w,c
  9874  00273C  6E34               	movwf	move_window@sector+2,c
  9875  00273E  5048               	movf	??_put_fat+3,w,c
  9876  002740  204C               	addwfc	??_put_fat+7,w,c
  9877  002742  6E35               	movwf	move_window@sector+3,c
  9878  002744  EC83  F027         	call	_move_window	;wreg free
  9879  002748  6E53               	movwf	put_fat@res,c
  9880                           
  9881                           ;ff.c: 913:    if (res != FR_OK) break;
  9882  00274A  5053               	movf	put_fat@res,w,c
  9883  00274C  A4D8               	btfss	status,2,c
  9884  00274E  D063               	goto	l4468
  9885                           
  9886                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  9887  002750  0EFF               	movlw	255
  9888  002752  6E45               	movwf	??_put_fat& (0+255),c
  9889  002754  0E01               	movlw	1
  9890  002756  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9891  002758  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9892  00275C  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9893  002760  90D8               	bcf	status,0,c
  9894  002762  3647               	rlcf	??_put_fat+2,f,c
  9895  002764  3648               	rlcf	??_put_fat+3,f,c
  9896  002766  90D8               	bcf	status,0,c
  9897  002768  3647               	rlcf	??_put_fat+2,f,c
  9898  00276A  3648               	rlcf	??_put_fat+3,f,c
  9899  00276C  5045               	movf	??_put_fat,w,c
  9900  00276E  1647               	andwf	??_put_fat+2,f,c
  9901  002770  5046               	movf	??_put_fat+1,w,c
  9902  002772  1648               	andwf	??_put_fat+3,f,c
  9903  002774  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9904  002778  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9905  00277C  5047               	movf	??_put_fat+2,w,c
  9906  00277E  2649               	addwf	??_put_fat+4,f,c
  9907  002780  5048               	movf	??_put_fat+3,w,c
  9908  002782  224A               	addwfc	??_put_fat+5,f,c
  9909  002784  0E2E               	movlw	46
  9910  002786  2449               	addwf	??_put_fat+4,w,c
  9911  002788  6E54               	movwf	put_fat@p,c
  9912  00278A  0E00               	movlw	0
  9913  00278C  204A               	addwfc	??_put_fat+5,w,c
  9914  00278E  6E55               	movwf	put_fat@p+1,c
  9915                           
  9916                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  9917  002790  C054  FFD9         	movff	put_fat@p,fsr2l
  9918  002794  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9919  002798  0E00               	movlw	0
  9920  00279A  14DE               	andwf	postinc2,w,c
  9921  00279C  6E45               	movwf	??_put_fat& (0+255),c
  9922  00279E  0E00               	movlw	0
  9923  0027A0  14DE               	andwf	postinc2,w,c
  9924  0027A2  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9925  0027A4  0E00               	movlw	0
  9926  0027A6  14DE               	andwf	postinc2,w,c
  9927  0027A8  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9928  0027AA  0EF0               	movlw	240
  9929  0027AC  14DE               	andwf	postinc2,w,c
  9930  0027AE  6E48               	movwf	(??_put_fat+3)& (0+255),c
  9931  0027B0  5045               	movf	??_put_fat,w,c
  9932  0027B2  1241               	iorwf	put_fat@val,f,c
  9933  0027B4  5046               	movf	??_put_fat+1,w,c
  9934  0027B6  1242               	iorwf	put_fat@val+1,f,c
  9935  0027B8  5047               	movf	??_put_fat+2,w,c
  9936  0027BA  1243               	iorwf	put_fat@val+2,f,c
  9937  0027BC  5048               	movf	??_put_fat+3,w,c
  9938  0027BE  1244               	iorwf	put_fat@val+3,f,c
  9939                           
  9940                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
  9941  0027C0  C054  FFD9         	movff	put_fat@p,fsr2l
  9942  0027C4  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9943  0027C8  C041  FFDE         	movff	put_fat@val,postinc2
  9944  0027CC  C042  FFDE         	movff	put_fat@val+1,postinc2
  9945  0027D0  C043  FFDE         	movff	put_fat@val+2,postinc2
  9946  0027D4  C044  FFDE         	movff	put_fat@val+3,postinc2
  9947  0027D8                     l4462:
  9948                           
  9949                           ;ff.c: 917:    fs->wflag = 1;
  9950  0027D8  EE20 F004          	lfsr	2,4
  9951  0027DC  503B               	movf	put_fat@fs,w,c
  9952  0027DE  26D9               	addwf	fsr2l,f,c
  9953  0027E0  503C               	movf	put_fat@fs+1,w,c
  9954  0027E2  22DA               	addwfc	fsr2h,f,c
  9955  0027E4  0E01               	movlw	1
  9956  0027E6  6EDF               	movwf	indf2,c
  9957                           
  9958                           ;ff.c: 918:    break;
  9959  0027E8  D016               	goto	l4468
  9960  0027EA                     l4466:
  9961  0027EA  C03B  FFD9         	movff	put_fat@fs,fsr2l
  9962  0027EE  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
  9963  0027F2  50DF               	movf	indf2,w,c
  9964  0027F4  6E45               	movwf	??_put_fat& (0+255),c
  9965  0027F6  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9966                           
  9967                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9968                           ; Switch size 1, requested type "simple"
  9969                           ; Number of cases is 1, Range of values is 0 to 0
  9970                           ; switch strategies available:
  9971                           ; Name         Instructions Cycles
  9972                           ; simple_byte            4     3 (average)
  9973                           ;	Chosen strategy is simple_byte
  9974  0027F8  5046               	movf	??_put_fat+1,w,c
  9975  0027FA  0A00               	xorlw	0	; case 0
  9976  0027FC  A4D8               	btfss	status,2,c
  9977  0027FE  D610               	goto	u5200
  9978                           
  9979                           ; Switch size 1, requested type "simple"
  9980                           ; Number of cases is 3, Range of values is 1 to 3
  9981                           ; switch strategies available:
  9982                           ; Name         Instructions Cycles
  9983                           ; simple_byte           10     6 (average)
  9984                           ;	Chosen strategy is simple_byte
  9985  002800  5045               	movf	??_put_fat,w,c
  9986  002802  0A01               	xorlw	1	; case 1
  9987  002804  B4D8               	btfsc	status,2,c
  9988  002806  D60F               	goto	l341
  9989  002808  0A03               	xorlw	3	; case 2
  9990  00280A  B4D8               	btfsc	status,2,c
  9991  00280C  D713               	goto	l4442
  9992  00280E  0A01               	xorlw	1	; case 3
  9993  002810  B4D8               	btfsc	status,2,c
  9994  002812  D769               	goto	l4452
  9995  002814  D605               	goto	u5200
  9996  002816                     l4468:
  9997                           
  9998                           ;ff.c: 925:  return res;
  9999  002816  5053               	movf	put_fat@res,w,c
 10000  002818  0012               	return		;funcret
 10001  00281A                     __end_of_put_fat:
 10002                           	opt callstack 0
 10003                           
 10004 ;; *************** function _get_fat *****************
 10005 ;; Defined at:
 10006 ;;		line 818 in file "ff.c"
 10007 ;; Parameters:    Size  Location     Type
 10008 ;;  fs              2   58[COMRAM] PTR struct .
 10009 ;;		 -> NULL(0), FatFs(558), 
 10010 ;;  clst            4   60[COMRAM] unsigned long 
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;  val             4   75[COMRAM] unsigned long 
 10013 ;;  bc              2   83[COMRAM] unsigned short 
 10014 ;;  p               2   81[COMRAM] PTR unsigned char 
 10015 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 10016 ;;  wc              2   79[COMRAM] unsigned short 
 10017 ;; Return value:  Size  Location     Type
 10018 ;;                  4   58[COMRAM] unsigned long 
 10019 ;; Registers used:
 10020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10026 ;;      Params:         6       0       0       0       0       0       0       0       0
 10027 ;;      Locals:        12       0       0       0       0       0       0       0       0
 10028 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10029 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10030 ;;Total ram usage:       27 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    8
 10033 ;; This function calls:
 10034 ;;		_move_window
 10035 ;; This function is called by:
 10036 ;;		_remove_chain
 10037 ;;		_create_chain
 10038 ;;		_dir_sdi
 10039 ;;		_dir_next
 10040 ;;		_f_lseek
 10041 ;;		_f_read
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           
 10045                           	psect	text25
 10046  002C20                     __ptext25:
 10047                           	opt callstack 0
 10048  002C20                     _get_fat:
 10049                           	opt callstack 19
 10050                           
 10051                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10052                           
 10053                           ;incstack = 0
 10054  002C20  5040               	movf	get_fat@clst+3,w,c
 10055  002C22  103F               	iorwf	get_fat@clst+2,w,c
 10056  002C24  103E               	iorwf	get_fat@clst+1,w,c
 10057  002C26  E104               	bnz	u5080
 10058  002C28  0E02               	movlw	2
 10059  002C2A  5C3D               	subwf	get_fat@clst,w,c
 10060  002C2C  A0D8               	btfss	status,0,c
 10061  002C2E  D010               	goto	u5090
 10062  002C30                     u5080:
 10063  002C30  EE20 F012          	lfsr	2,18
 10064  002C34  503B               	movf	get_fat@fs,w,c
 10065  002C36  26D9               	addwf	fsr2l,f,c
 10066  002C38  503C               	movf	get_fat@fs+1,w,c
 10067  002C3A  22DA               	addwfc	fsr2h,f,c
 10068  002C3C  50DE               	movf	postinc2,w,c
 10069  002C3E  5C3D               	subwf	get_fat@clst,w,c
 10070  002C40  50DE               	movf	postinc2,w,c
 10071  002C42  583E               	subwfb	get_fat@clst+1,w,c
 10072  002C44  50DE               	movf	postinc2,w,c
 10073  002C46  583F               	subwfb	get_fat@clst+2,w,c
 10074  002C48  50DE               	movf	postinc2,w,c
 10075  002C4A  5840               	subwfb	get_fat@clst+3,w,c
 10076  002C4C  A0D8               	btfss	status,0,c
 10077  002C4E  D008               	goto	l315
 10078  002C50                     u5090:
 10079                           
 10080                           ;ff.c: 829:   val = 1;
 10081  002C50  0E01               	movlw	1
 10082  002C52  6E4C               	movwf	get_fat@val,c
 10083  002C54  0E00               	movlw	0
 10084  002C56  6E4D               	movwf	get_fat@val+1,c
 10085  002C58  0E00               	movlw	0
 10086  002C5A  6E4E               	movwf	get_fat@val+2,c
 10087  002C5C  0E00               	movlw	0
 10088  002C5E  D190               	goto	L11
 10089  002C60                     l315:
 10090                           
 10091                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10092  002C60  684C               	setf	get_fat@val,c
 10093  002C62  684D               	setf	get_fat@val+1,c
 10094  002C64  684E               	setf	get_fat@val+2,c
 10095  002C66  684F               	setf	get_fat@val+3,c
 10096                           
 10097                           ;ff.c: 834:   switch (fs->fs_type) {
 10098  002C68  D18D               	goto	l4392
 10099  002C6A                     l320:
 10100                           
 10101                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10102  002C6A  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10103  002C6E  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10104  002C72  90D8               	bcf	status,0,c
 10105  002C74  3055               	rrcf	get_fat@bc+1,w,c
 10106  002C76  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10107  002C78  3054               	rrcf	get_fat@bc,w,c
 10108  002C7A  6E41               	movwf	??_get_fat& (0+255),c
 10109  002C7C  5041               	movf	??_get_fat,w,c
 10110  002C7E  2654               	addwf	get_fat@bc,f,c
 10111  002C80  5042               	movf	??_get_fat+1,w,c
 10112  002C82  2255               	addwfc	get_fat@bc+1,f,c
 10113                           
 10114                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10115  002C84  C03B  F030         	movff	get_fat@fs,move_window@fs
 10116  002C88  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10117  002C8C  EE20 F01E          	lfsr	2,30
 10118  002C90  503B               	movf	get_fat@fs,w,c
 10119  002C92  26D9               	addwf	fsr2l,f,c
 10120  002C94  503C               	movf	get_fat@fs+1,w,c
 10121  002C96  22DA               	addwfc	fsr2h,f,c
 10122  002C98  CFDE F041          	movff	postinc2,??_get_fat
 10123  002C9C  CFDE F042          	movff	postinc2,??_get_fat+1
 10124  002CA0  CFDE F043          	movff	postinc2,??_get_fat+2
 10125  002CA4  CFDE F044          	movff	postinc2,??_get_fat+3
 10126  002CA8  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10127  002CAC  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10128  002CB0  0E09               	movlw	9
 10129  002CB2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10130  002CB4                     u5105:
 10131  002CB4  90D8               	bcf	status,0,c
 10132  002CB6  3246               	rrcf	??_get_fat+5,f,c
 10133  002CB8  3245               	rrcf	??_get_fat+4,f,c
 10134  002CBA  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10135  002CBC  D7FB               	goto	u5105
 10136  002CBE  5045               	movf	??_get_fat+4,w,c
 10137  002CC0  2441               	addwf	??_get_fat,w,c
 10138  002CC2  6E32               	movwf	move_window@sector,c
 10139  002CC4  5046               	movf	??_get_fat+5,w,c
 10140  002CC6  2042               	addwfc	??_get_fat+1,w,c
 10141  002CC8  6E33               	movwf	move_window@sector+1,c
 10142  002CCA  0E00               	movlw	0
 10143  002CCC  2043               	addwfc	??_get_fat+2,w,c
 10144  002CCE  6E34               	movwf	move_window@sector+2,c
 10145  002CD0  0E00               	movlw	0
 10146  002CD2  2044               	addwfc	??_get_fat+3,w,c
 10147  002CD4  6E35               	movwf	move_window@sector+3,c
 10148  002CD6  EC83  F027         	call	_move_window	;wreg free
 10149  002CDA  0900               	iorlw	0
 10150  002CDC  A4D8               	btfss	status,2,c
 10151  002CDE  D168               	goto	l318
 10152                           
 10153                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10154  002CE0  0EFF               	movlw	255
 10155  002CE2  6E41               	movwf	??_get_fat& (0+255),c
 10156  002CE4  0E01               	movlw	1
 10157  002CE6  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10158  002CE8  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10159  002CEC  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10160  002CF0  5041               	movf	??_get_fat,w,c
 10161  002CF2  1643               	andwf	??_get_fat+2,f,c
 10162  002CF4  5042               	movf	??_get_fat+1,w,c
 10163  002CF6  1644               	andwf	??_get_fat+3,f,c
 10164  002CF8  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10165  002CFC  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10166  002D00  5043               	movf	??_get_fat+2,w,c
 10167  002D02  2645               	addwf	??_get_fat+4,f,c
 10168  002D04  5044               	movf	??_get_fat+3,w,c
 10169  002D06  2246               	addwfc	??_get_fat+5,f,c
 10170  002D08  0E2E               	movlw	46
 10171  002D0A  2445               	addwf	??_get_fat+4,w,c
 10172  002D0C  6ED9               	movwf	fsr2l,c
 10173  002D0E  0E00               	movlw	0
 10174  002D10  2046               	addwfc	??_get_fat+5,w,c
 10175  002D12  6EDA               	movwf	fsr2h,c
 10176  002D14  50DF               	movf	indf2,w,c
 10177  002D16  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10178  002D18  5047               	movf	??_get_fat+6,w,c
 10179  002D1A  6E50               	movwf	get_fat@wc,c
 10180  002D1C  6A51               	clrf	get_fat@wc+1,c
 10181  002D1E  4A54               	infsnz	get_fat@bc,f,c
 10182  002D20  2A55               	incf	get_fat@bc+1,f,c
 10183                           
 10184                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10185  002D22  C03B  F030         	movff	get_fat@fs,move_window@fs
 10186  002D26  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10187  002D2A  EE20 F01E          	lfsr	2,30
 10188  002D2E  503B               	movf	get_fat@fs,w,c
 10189  002D30  26D9               	addwf	fsr2l,f,c
 10190  002D32  503C               	movf	get_fat@fs+1,w,c
 10191  002D34  22DA               	addwfc	fsr2h,f,c
 10192  002D36  CFDE F041          	movff	postinc2,??_get_fat
 10193  002D3A  CFDE F042          	movff	postinc2,??_get_fat+1
 10194  002D3E  CFDE F043          	movff	postinc2,??_get_fat+2
 10195  002D42  CFDE F044          	movff	postinc2,??_get_fat+3
 10196  002D46  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10197  002D4A  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10198  002D4E  0E09               	movlw	9
 10199  002D50  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10200  002D52                     u5125:
 10201  002D52  90D8               	bcf	status,0,c
 10202  002D54  3246               	rrcf	??_get_fat+5,f,c
 10203  002D56  3245               	rrcf	??_get_fat+4,f,c
 10204  002D58  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10205  002D5A  D7FB               	goto	u5125
 10206  002D5C  5045               	movf	??_get_fat+4,w,c
 10207  002D5E  2441               	addwf	??_get_fat,w,c
 10208  002D60  6E32               	movwf	move_window@sector,c
 10209  002D62  5046               	movf	??_get_fat+5,w,c
 10210  002D64  2042               	addwfc	??_get_fat+1,w,c
 10211  002D66  6E33               	movwf	move_window@sector+1,c
 10212  002D68  0E00               	movlw	0
 10213  002D6A  2043               	addwfc	??_get_fat+2,w,c
 10214  002D6C  6E34               	movwf	move_window@sector+2,c
 10215  002D6E  0E00               	movlw	0
 10216  002D70  2044               	addwfc	??_get_fat+3,w,c
 10217  002D72  6E35               	movwf	move_window@sector+3,c
 10218  002D74  EC83  F027         	call	_move_window	;wreg free
 10219  002D78  0900               	iorlw	0
 10220  002D7A  A4D8               	btfss	status,2,c
 10221  002D7C  D119               	goto	l318
 10222                           
 10223                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10224  002D7E  0EFF               	movlw	255
 10225  002D80  6E41               	movwf	??_get_fat& (0+255),c
 10226  002D82  0E01               	movlw	1
 10227  002D84  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10228  002D86  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10229  002D8A  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10230  002D8E  5041               	movf	??_get_fat,w,c
 10231  002D90  1643               	andwf	??_get_fat+2,f,c
 10232  002D92  5042               	movf	??_get_fat+1,w,c
 10233  002D94  1644               	andwf	??_get_fat+3,f,c
 10234  002D96  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10235  002D9A  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10236  002D9E  5043               	movf	??_get_fat+2,w,c
 10237  002DA0  2645               	addwf	??_get_fat+4,f,c
 10238  002DA2  5044               	movf	??_get_fat+3,w,c
 10239  002DA4  2246               	addwfc	??_get_fat+5,f,c
 10240  002DA6  0E2E               	movlw	46
 10241  002DA8  2445               	addwf	??_get_fat+4,w,c
 10242  002DAA  6ED9               	movwf	fsr2l,c
 10243  002DAC  0E00               	movlw	0
 10244  002DAE  2046               	addwfc	??_get_fat+5,w,c
 10245  002DB0  6EDA               	movwf	fsr2h,c
 10246  002DB2  50DF               	movf	indf2,w,c
 10247  002DB4  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10248  002DB6  5047               	movf	??_get_fat+6,w,c
 10249  002DB8  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10250  002DBA  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10251  002DBC  5048               	movf	??_get_fat+7,w,c
 10252  002DBE  1250               	iorwf	get_fat@wc,f,c
 10253  002DC0  5049               	movf	??_get_fat+8,w,c
 10254  002DC2  1251               	iorwf	get_fat@wc+1,f,c
 10255                           
 10256                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10257  002DC4  B03D               	btfsc	get_fat@clst,0,c
 10258  002DC6  D007               	goto	l4370
 10259  002DC8  0EFF               	movlw	255
 10260  002DCA  1450               	andwf	get_fat@wc,w,c
 10261  002DCC  6E4A               	movwf	_get_fat$566,c
 10262  002DCE  0E0F               	movlw	15
 10263  002DD0  1451               	andwf	get_fat@wc+1,w,c
 10264  002DD2  6E4B               	movwf	_get_fat$566+1,c
 10265  002DD4  D00F               	goto	l4372
 10266  002DD6                     l4370:
 10267  002DD6  C050  F041         	movff	get_fat@wc,??_get_fat
 10268  002DDA  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10269  002DDE  0E04               	movlw	4
 10270  002DE0  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10271  002DE2                     u5155:
 10272  002DE2  90D8               	bcf	status,0,c
 10273  002DE4  3242               	rrcf	??_get_fat+1,f,c
 10274  002DE6  3241               	rrcf	??_get_fat,f,c
 10275  002DE8  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10276  002DEA  D7FB               	goto	u5155
 10277  002DEC  C041  F04A         	movff	??_get_fat,_get_fat$566
 10278  002DF0  C042  F04B         	movff	??_get_fat+1,_get_fat$566+1
 10279  002DF4                     l4372:
 10280  002DF4  C04A  F04C         	movff	_get_fat$566,get_fat@val
 10281  002DF8  C04B  F04D         	movff	_get_fat$566+1,get_fat@val+1
 10282  002DFC  D05B               	goto	L12
 10283  002DFE                     l4374:
 10284                           
 10285                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10286  002DFE  C03B  F030         	movff	get_fat@fs,move_window@fs
 10287  002E02  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10288  002E06  EE20 F01E          	lfsr	2,30
 10289  002E0A  503B               	movf	get_fat@fs,w,c
 10290  002E0C  26D9               	addwf	fsr2l,f,c
 10291  002E0E  503C               	movf	get_fat@fs+1,w,c
 10292  002E10  22DA               	addwfc	fsr2h,f,c
 10293  002E12  CFDE F041          	movff	postinc2,??_get_fat
 10294  002E16  CFDE F042          	movff	postinc2,??_get_fat+1
 10295  002E1A  CFDE F043          	movff	postinc2,??_get_fat+2
 10296  002E1E  CFDE F044          	movff	postinc2,??_get_fat+3
 10297  002E22  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10298  002E26  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10299  002E2A  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10300  002E2E  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10301  002E32  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10302  002E36  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10303  002E3A  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10304  002E3E  6A48               	clrf	??_get_fat+7,c
 10305  002E40  5041               	movf	??_get_fat,w,c
 10306  002E42  2445               	addwf	??_get_fat+4,w,c
 10307  002E44  6E32               	movwf	move_window@sector,c
 10308  002E46  5042               	movf	??_get_fat+1,w,c
 10309  002E48  2046               	addwfc	??_get_fat+5,w,c
 10310  002E4A  6E33               	movwf	move_window@sector+1,c
 10311  002E4C  5043               	movf	??_get_fat+2,w,c
 10312  002E4E  2047               	addwfc	??_get_fat+6,w,c
 10313  002E50  6E34               	movwf	move_window@sector+2,c
 10314  002E52  5044               	movf	??_get_fat+3,w,c
 10315  002E54  2048               	addwfc	??_get_fat+7,w,c
 10316  002E56  6E35               	movwf	move_window@sector+3,c
 10317  002E58  EC83  F027         	call	_move_window	;wreg free
 10318  002E5C  0900               	iorlw	0
 10319  002E5E  A4D8               	btfss	status,2,c
 10320  002E60  D0A7               	goto	l318
 10321                           
 10322                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10323  002E62  0EFF               	movlw	255
 10324  002E64  6E41               	movwf	??_get_fat& (0+255),c
 10325  002E66  0E01               	movlw	1
 10326  002E68  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10327  002E6A  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10328  002E6E  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10329  002E72  90D8               	bcf	status,0,c
 10330  002E74  3643               	rlcf	??_get_fat+2,f,c
 10331  002E76  3644               	rlcf	??_get_fat+3,f,c
 10332  002E78  5041               	movf	??_get_fat,w,c
 10333  002E7A  1643               	andwf	??_get_fat+2,f,c
 10334  002E7C  5042               	movf	??_get_fat+1,w,c
 10335  002E7E  1644               	andwf	??_get_fat+3,f,c
 10336  002E80  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10337  002E84  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10338  002E88  5043               	movf	??_get_fat+2,w,c
 10339  002E8A  2645               	addwf	??_get_fat+4,f,c
 10340  002E8C  5044               	movf	??_get_fat+3,w,c
 10341  002E8E  2246               	addwfc	??_get_fat+5,f,c
 10342  002E90  0E2E               	movlw	46
 10343  002E92  2445               	addwf	??_get_fat+4,w,c
 10344  002E94  6E52               	movwf	get_fat@p,c
 10345  002E96  0E00               	movlw	0
 10346  002E98  2046               	addwfc	??_get_fat+5,w,c
 10347  002E9A  6E53               	movwf	get_fat@p+1,c
 10348                           
 10349                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10350  002E9C  C052  FFD9         	movff	get_fat@p,fsr2l
 10351  002EA0  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10352  002EA4  CFDE F041          	movff	postinc2,??_get_fat
 10353  002EA8  CFDD F042          	movff	postdec2,??_get_fat+1
 10354  002EAC  C041  F04C         	movff	??_get_fat,get_fat@val
 10355  002EB0  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10356  002EB4                     L12:
 10357  002EB4  6A4E               	clrf	get_fat@val+2,c
 10358  002EB6  6A4F               	clrf	get_fat@val+3,c
 10359                           
 10360                           ;ff.c: 848:    break;
 10361  002EB8  D07B               	goto	l318
 10362  002EBA                     l4382:
 10363                           
 10364                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10365  002EBA  C03B  F030         	movff	get_fat@fs,move_window@fs
 10366  002EBE  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10367  002EC2  EE20 F01E          	lfsr	2,30
 10368  002EC6  503B               	movf	get_fat@fs,w,c
 10369  002EC8  26D9               	addwf	fsr2l,f,c
 10370  002ECA  503C               	movf	get_fat@fs+1,w,c
 10371  002ECC  22DA               	addwfc	fsr2h,f,c
 10372  002ECE  CFDE F041          	movff	postinc2,??_get_fat
 10373  002ED2  CFDE F042          	movff	postinc2,??_get_fat+1
 10374  002ED6  CFDE F043          	movff	postinc2,??_get_fat+2
 10375  002EDA  CFDE F044          	movff	postinc2,??_get_fat+3
 10376  002EDE  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10377  002EE2  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10378  002EE6  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10379  002EEA  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10380  002EEE  0E08               	movlw	8
 10381  002EF0  D005               	goto	u5170
 10382  002EF2                     u5175:
 10383  002EF2  90D8               	bcf	status,0,c
 10384  002EF4  3248               	rrcf	??_get_fat+7,f,c
 10385  002EF6  3247               	rrcf	??_get_fat+6,f,c
 10386  002EF8  3246               	rrcf	??_get_fat+5,f,c
 10387  002EFA  3245               	rrcf	??_get_fat+4,f,c
 10388  002EFC                     u5170:
 10389  002EFC  2EE8               	decfsz	wreg,f,c
 10390  002EFE  D7F9               	goto	u5175
 10391  002F00  5041               	movf	??_get_fat,w,c
 10392  002F02  2445               	addwf	??_get_fat+4,w,c
 10393  002F04  6E32               	movwf	move_window@sector,c
 10394  002F06  5042               	movf	??_get_fat+1,w,c
 10395  002F08  2046               	addwfc	??_get_fat+5,w,c
 10396  002F0A  6E33               	movwf	move_window@sector+1,c
 10397  002F0C  5043               	movf	??_get_fat+2,w,c
 10398  002F0E  2047               	addwfc	??_get_fat+6,w,c
 10399  002F10  6E34               	movwf	move_window@sector+2,c
 10400  002F12  5044               	movf	??_get_fat+3,w,c
 10401  002F14  2048               	addwfc	??_get_fat+7,w,c
 10402  002F16  6E35               	movwf	move_window@sector+3,c
 10403  002F18  EC83  F027         	call	_move_window	;wreg free
 10404  002F1C  0900               	iorlw	0
 10405  002F1E  A4D8               	btfss	status,2,c
 10406  002F20  D047               	goto	l318
 10407                           
 10408                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10409  002F22  0EFF               	movlw	255
 10410  002F24  6E41               	movwf	??_get_fat& (0+255),c
 10411  002F26  0E01               	movlw	1
 10412  002F28  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10413  002F2A  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10414  002F2E  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10415  002F32  90D8               	bcf	status,0,c
 10416  002F34  3643               	rlcf	??_get_fat+2,f,c
 10417  002F36  3644               	rlcf	??_get_fat+3,f,c
 10418  002F38  90D8               	bcf	status,0,c
 10419  002F3A  3643               	rlcf	??_get_fat+2,f,c
 10420  002F3C  3644               	rlcf	??_get_fat+3,f,c
 10421  002F3E  5041               	movf	??_get_fat,w,c
 10422  002F40  1643               	andwf	??_get_fat+2,f,c
 10423  002F42  5042               	movf	??_get_fat+1,w,c
 10424  002F44  1644               	andwf	??_get_fat+3,f,c
 10425  002F46  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10426  002F4A  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10427  002F4E  5043               	movf	??_get_fat+2,w,c
 10428  002F50  2645               	addwf	??_get_fat+4,f,c
 10429  002F52  5044               	movf	??_get_fat+3,w,c
 10430  002F54  2246               	addwfc	??_get_fat+5,f,c
 10431  002F56  0E2E               	movlw	46
 10432  002F58  2445               	addwf	??_get_fat+4,w,c
 10433  002F5A  6E52               	movwf	get_fat@p,c
 10434  002F5C  0E00               	movlw	0
 10435  002F5E  2046               	addwfc	??_get_fat+5,w,c
 10436  002F60  6E53               	movwf	get_fat@p+1,c
 10437                           
 10438                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10439  002F62  C052  FFD9         	movff	get_fat@p,fsr2l
 10440  002F66  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10441  002F6A  0EFF               	movlw	255
 10442  002F6C  14DE               	andwf	postinc2,w,c
 10443  002F6E  6E4C               	movwf	get_fat@val,c
 10444  002F70  0EFF               	movlw	255
 10445  002F72  14DE               	andwf	postinc2,w,c
 10446  002F74  6E4D               	movwf	get_fat@val+1,c
 10447  002F76  0EFF               	movlw	255
 10448  002F78  14DE               	andwf	postinc2,w,c
 10449  002F7A  6E4E               	movwf	get_fat@val+2,c
 10450  002F7C  0E0F               	movlw	15
 10451  002F7E  14DE               	andwf	postinc2,w,c
 10452  002F80                     L11:
 10453  002F80  6E4F               	movwf	get_fat@val+3,c
 10454                           
 10455                           ;ff.c: 854:    break;
 10456  002F82  D016               	goto	l318
 10457  002F84                     l4392:
 10458  002F84  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10459  002F88  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10460  002F8C  50DF               	movf	indf2,w,c
 10461  002F8E  6E41               	movwf	??_get_fat& (0+255),c
 10462  002F90  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10463                           
 10464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10465                           ; Switch size 1, requested type "simple"
 10466                           ; Number of cases is 1, Range of values is 0 to 0
 10467                           ; switch strategies available:
 10468                           ; Name         Instructions Cycles
 10469                           ; simple_byte            4     3 (average)
 10470                           ;	Chosen strategy is simple_byte
 10471  002F92  5042               	movf	??_get_fat+1,w,c
 10472  002F94  0A00               	xorlw	0	; case 0
 10473  002F96  A4D8               	btfss	status,2,c
 10474  002F98  D65B               	goto	u5090
 10475                           
 10476                           ; Switch size 1, requested type "simple"
 10477                           ; Number of cases is 3, Range of values is 1 to 3
 10478                           ; switch strategies available:
 10479                           ; Name         Instructions Cycles
 10480                           ; simple_byte           10     6 (average)
 10481                           ;	Chosen strategy is simple_byte
 10482  002F9A  5041               	movf	??_get_fat,w,c
 10483  002F9C  0A01               	xorlw	1	; case 1
 10484  002F9E  B4D8               	btfsc	status,2,c
 10485  002FA0  D664               	goto	l320
 10486  002FA2  0A03               	xorlw	3	; case 2
 10487  002FA4  B4D8               	btfsc	status,2,c
 10488  002FA6  D72B               	goto	l4374
 10489  002FA8  0A01               	xorlw	1	; case 3
 10490  002FAA  B4D8               	btfsc	status,2,c
 10491  002FAC  D786               	goto	l4382
 10492  002FAE  D650               	goto	u5090
 10493  002FB0                     l318:
 10494                           
 10495                           ;ff.c: 861:  return val;
 10496  002FB0  C04C  F03B         	movff	get_fat@val,?_get_fat
 10497  002FB4  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10498  002FB8  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10499  002FBC  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10500  002FC0  0012               	return		;funcret
 10501  002FC2                     __end_of_get_fat:
 10502                           	opt callstack 0
 10503                           
 10504 ;; *************** function _clust2sect *****************
 10505 ;; Defined at:
 10506 ;;		line 800 in file "ff.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;  fs              2   12[COMRAM] PTR struct .
 10509 ;;		 -> NULL(0), FatFs(558), 
 10510 ;;  clst            4   14[COMRAM] unsigned long 
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;		None
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  4   12[COMRAM] unsigned long 
 10515 ;; Registers used:
 10516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10517 ;; Tracked objects:
 10518 ;;		On entry : 0/0
 10519 ;;		On exit  : 0/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10522 ;;      Params:         6       0       0       0       0       0       0       0       0
 10523 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10524 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10525 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10526 ;;Total ram usage:       11 bytes
 10527 ;; Hardware stack levels used:    1
 10528 ;; Hardware stack levels required when called:    1
 10529 ;; This function calls:
 10530 ;;		___lmul
 10531 ;; This function is called by:
 10532 ;;		_dir_sdi
 10533 ;;		_dir_next
 10534 ;;		_f_write
 10535 ;;		_f_lseek
 10536 ;;		_f_read
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           	psect	text26
 10541  004D9C                     __ptext26:
 10542                           	opt callstack 0
 10543  004D9C                     _clust2sect:
 10544                           	opt callstack 27
 10545                           
 10546                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10547                           
 10548                           ;incstack = 0
 10549  004D9C  0E02               	movlw	2
 10550  004D9E  5E0F               	subwf	clust2sect@clst,f,c
 10551  004DA0  0E00               	movlw	0
 10552  004DA2  5A10               	subwfb	clust2sect@clst+1,f,c
 10553  004DA4  5A11               	subwfb	clust2sect@clst+2,f,c
 10554  004DA6  5A12               	subwfb	clust2sect@clst+3,f,c
 10555                           
 10556                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10557  004DA8  EE20 F012          	lfsr	2,18
 10558  004DAC  500D               	movf	clust2sect@fs,w,c
 10559  004DAE  26D9               	addwf	fsr2l,f,c
 10560  004DB0  500E               	movf	clust2sect@fs+1,w,c
 10561  004DB2  22DA               	addwfc	fsr2h,f,c
 10562  004DB4  0EFE               	movlw	254
 10563  004DB6  24DE               	addwf	postinc2,w,c
 10564  004DB8  6E13               	movwf	??_clust2sect& (0+255),c
 10565  004DBA  0EFF               	movlw	255
 10566  004DBC  20DE               	addwfc	postinc2,w,c
 10567  004DBE  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10568  004DC0  0EFF               	movlw	255
 10569  004DC2  20DE               	addwfc	postinc2,w,c
 10570  004DC4  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10571  004DC6  0EFF               	movlw	255
 10572  004DC8  20DE               	addwfc	postinc2,w,c
 10573  004DCA  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10574  004DCC  5013               	movf	??_clust2sect,w,c
 10575  004DCE  5C0F               	subwf	clust2sect@clst,w,c
 10576  004DD0  5014               	movf	??_clust2sect+1,w,c
 10577  004DD2  5810               	subwfb	clust2sect@clst+1,w,c
 10578  004DD4  5015               	movf	??_clust2sect+2,w,c
 10579  004DD6  5811               	subwfb	clust2sect@clst+2,w,c
 10580  004DD8  5016               	movf	??_clust2sect+3,w,c
 10581  004DDA  5812               	subwfb	clust2sect@clst+3,w,c
 10582  004DDC  A0D8               	btfss	status,0,c
 10583  004DDE  D009               	goto	l4502
 10584  004DE0  0E00               	movlw	0
 10585  004DE2  6E0D               	movwf	?_clust2sect,c
 10586  004DE4  0E00               	movlw	0
 10587  004DE6  6E0E               	movwf	?_clust2sect+1,c
 10588  004DE8  0E00               	movlw	0
 10589  004DEA  6E0F               	movwf	?_clust2sect+2,c
 10590  004DEC  0E00               	movlw	0
 10591  004DEE  6E10               	movwf	?_clust2sect+3,c
 10592  004DF0  0012               	return	
 10593  004DF2                     l4502:
 10594                           
 10595                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10596  004DF2  EE20 F026          	lfsr	2,38
 10597  004DF6  500D               	movf	clust2sect@fs,w,c
 10598  004DF8  26D9               	addwf	fsr2l,f,c
 10599  004DFA  500E               	movf	clust2sect@fs+1,w,c
 10600  004DFC  22DA               	addwfc	fsr2h,f,c
 10601  004DFE  CFDE F013          	movff	postinc2,??_clust2sect
 10602  004E02  CFDE F014          	movff	postinc2,??_clust2sect+1
 10603  004E06  CFDE F015          	movff	postinc2,??_clust2sect+2
 10604  004E0A  CFDE F016          	movff	postinc2,??_clust2sect+3
 10605  004E0E  EE20 F002          	lfsr	2,2
 10606  004E12  500D               	movf	clust2sect@fs,w,c
 10607  004E14  26D9               	addwf	fsr2l,f,c
 10608  004E16  500E               	movf	clust2sect@fs+1,w,c
 10609  004E18  22DA               	addwfc	fsr2h,f,c
 10610  004E1A  50DF               	movf	indf2,w,c
 10611  004E1C  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10612  004E1E  5017               	movf	??_clust2sect+4,w,c
 10613  004E20  6E01               	movwf	___lmul@multiplier,c
 10614  004E22  6A02               	clrf	___lmul@multiplier+1,c
 10615  004E24  6A03               	clrf	___lmul@multiplier+2,c
 10616  004E26  6A04               	clrf	___lmul@multiplier+3,c
 10617  004E28  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10618  004E2C  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10619  004E30  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10620  004E34  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10621  004E38  EC88  F029         	call	___lmul	;wreg free
 10622  004E3C  5013               	movf	??_clust2sect,w,c
 10623  004E3E  2401               	addwf	?___lmul,w,c
 10624  004E40  6E0D               	movwf	?_clust2sect,c
 10625  004E42  5014               	movf	??_clust2sect+1,w,c
 10626  004E44  2002               	addwfc	?___lmul+1,w,c
 10627  004E46  6E0E               	movwf	?_clust2sect+1,c
 10628  004E48  5015               	movf	??_clust2sect+2,w,c
 10629  004E4A  2003               	addwfc	?___lmul+2,w,c
 10630  004E4C  6E0F               	movwf	?_clust2sect+2,c
 10631  004E4E  5016               	movf	??_clust2sect+3,w,c
 10632  004E50  2004               	addwfc	?___lmul+3,w,c
 10633  004E52  6E10               	movwf	?_clust2sect+3,c
 10634  004E54  0012               	return		;funcret
 10635  004E56                     __end_of_clust2sect:
 10636                           	opt callstack 0
 10637                           
 10638 ;; *************** function ___lmul *****************
 10639 ;; Defined at:
 10640 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;  multiplier      4    0[COMRAM] unsigned long 
 10643 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  product         4    8[COMRAM] unsigned long 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  4    0[COMRAM] unsigned long 
 10648 ;; Registers used:
 10649 ;;		wreg, status,2, status,0
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10655 ;;      Params:         8       0       0       0       0       0       0       0       0
 10656 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10657 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10658 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10659 ;;Total ram usage:       12 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; This function calls:
 10662 ;;		Nothing
 10663 ;; This function is called by:
 10664 ;;		_clust2sect
 10665 ;;		_find_volume
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text27
 10670  005310                     __ptext27:
 10671                           	opt callstack 0
 10672  005310                     ___lmul:
 10673                           	opt callstack 27
 10674                           
 10675                           ;incstack = 0
 10676  005310  0E00               	movlw	0
 10677  005312  6E09               	movwf	___lmul@product,c
 10678  005314  0E00               	movlw	0
 10679  005316  6E0A               	movwf	___lmul@product+1,c
 10680  005318  0E00               	movlw	0
 10681  00531A  6E0B               	movwf	___lmul@product+2,c
 10682  00531C  0E00               	movlw	0
 10683  00531E  6E0C               	movwf	___lmul@product+3,c
 10684  005320                     l4478:
 10685  005320  A001               	btfss	___lmul@multiplier,0,c
 10686  005322  D008               	goto	l4482
 10687  005324  5005               	movf	___lmul@multiplicand,w,c
 10688  005326  2609               	addwf	___lmul@product,f,c
 10689  005328  5006               	movf	___lmul@multiplicand+1,w,c
 10690  00532A  220A               	addwfc	___lmul@product+1,f,c
 10691  00532C  5007               	movf	___lmul@multiplicand+2,w,c
 10692  00532E  220B               	addwfc	___lmul@product+2,f,c
 10693  005330  5008               	movf	___lmul@multiplicand+3,w,c
 10694  005332  220C               	addwfc	___lmul@product+3,f,c
 10695  005334                     l4482:
 10696  005334  90D8               	bcf	status,0,c
 10697  005336  3605               	rlcf	___lmul@multiplicand,f,c
 10698  005338  3606               	rlcf	___lmul@multiplicand+1,f,c
 10699  00533A  3607               	rlcf	___lmul@multiplicand+2,f,c
 10700  00533C  3608               	rlcf	___lmul@multiplicand+3,f,c
 10701  00533E  90D8               	bcf	status,0,c
 10702  005340  3204               	rrcf	___lmul@multiplier+3,f,c
 10703  005342  3203               	rrcf	___lmul@multiplier+2,f,c
 10704  005344  3202               	rrcf	___lmul@multiplier+1,f,c
 10705  005346  3201               	rrcf	___lmul@multiplier,f,c
 10706  005348  5001               	movf	___lmul@multiplier,w,c
 10707  00534A  1002               	iorwf	___lmul@multiplier+1,w,c
 10708  00534C  1003               	iorwf	___lmul@multiplier+2,w,c
 10709  00534E  1004               	iorwf	___lmul@multiplier+3,w,c
 10710  005350  A4D8               	btfss	status,2,c
 10711  005352  D7E6               	goto	l4478
 10712  005354  C009  F001         	movff	___lmul@product,?___lmul
 10713  005358  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10714  00535C  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10715  005360  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10716  005364  0012               	return		;funcret
 10717  005366                     __end_of___lmul:
 10718                           	opt callstack 0
 10719                           
 10720 ;; *************** function ___lldiv *****************
 10721 ;; Defined at:
 10722 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;  dividend        4    0[COMRAM] unsigned long 
 10725 ;;  divisor         4    4[COMRAM] unsigned long 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;  quotient        4    8[COMRAM] unsigned long 
 10728 ;;  counter         1   12[COMRAM] unsigned char 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  4    0[COMRAM] unsigned long 
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10738 ;;      Params:         8       0       0       0       0       0       0       0       0
 10739 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10741 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10742 ;;Total ram usage:       13 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_find_volume
 10748 ;;		_f_lseek
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           	psect	text28
 10753  005040                     __ptext28:
 10754                           	opt callstack 0
 10755  005040                     ___lldiv:
 10756                           	opt callstack 27
 10757                           
 10758                           ;incstack = 0
 10759  005040  0E00               	movlw	0
 10760  005042  6E09               	movwf	___lldiv@quotient,c
 10761  005044  0E00               	movlw	0
 10762  005046  6E0A               	movwf	___lldiv@quotient+1,c
 10763  005048  0E00               	movlw	0
 10764  00504A  6E0B               	movwf	___lldiv@quotient+2,c
 10765  00504C  0E00               	movlw	0
 10766  00504E  6E0C               	movwf	___lldiv@quotient+3,c
 10767  005050  5005               	movf	___lldiv@divisor,w,c
 10768  005052  1006               	iorwf	___lldiv@divisor+1,w,c
 10769  005054  1007               	iorwf	___lldiv@divisor+2,w,c
 10770  005056  1008               	iorwf	___lldiv@divisor+3,w,c
 10771  005058  B4D8               	btfsc	status,2,c
 10772  00505A  D02A               	goto	l880
 10773  00505C  0E01               	movlw	1
 10774  00505E  6E0D               	movwf	___lldiv@counter,c
 10775  005060  D006               	goto	l5380
 10776  005062                     l5378:
 10777  005062  90D8               	bcf	status,0,c
 10778  005064  3605               	rlcf	___lldiv@divisor,f,c
 10779  005066  3606               	rlcf	___lldiv@divisor+1,f,c
 10780  005068  3607               	rlcf	___lldiv@divisor+2,f,c
 10781  00506A  3608               	rlcf	___lldiv@divisor+3,f,c
 10782  00506C  2A0D               	incf	___lldiv@counter,f,c
 10783  00506E                     l5380:
 10784  00506E  AE08               	btfss	___lldiv@divisor+3,7,c
 10785  005070  D7F8               	goto	l5378
 10786  005072                     u7070:
 10787  005072  90D8               	bcf	status,0,c
 10788  005074  3609               	rlcf	___lldiv@quotient,f,c
 10789  005076  360A               	rlcf	___lldiv@quotient+1,f,c
 10790  005078  360B               	rlcf	___lldiv@quotient+2,f,c
 10791  00507A  360C               	rlcf	___lldiv@quotient+3,f,c
 10792  00507C  5005               	movf	___lldiv@divisor,w,c
 10793  00507E  5C01               	subwf	___lldiv@dividend,w,c
 10794  005080  5006               	movf	___lldiv@divisor+1,w,c
 10795  005082  5802               	subwfb	___lldiv@dividend+1,w,c
 10796  005084  5007               	movf	___lldiv@divisor+2,w,c
 10797  005086  5803               	subwfb	___lldiv@dividend+2,w,c
 10798  005088  5008               	movf	___lldiv@divisor+3,w,c
 10799  00508A  5804               	subwfb	___lldiv@dividend+3,w,c
 10800  00508C  A0D8               	btfss	status,0,c
 10801  00508E  D009               	goto	l5390
 10802  005090  5005               	movf	___lldiv@divisor,w,c
 10803  005092  5E01               	subwf	___lldiv@dividend,f,c
 10804  005094  5006               	movf	___lldiv@divisor+1,w,c
 10805  005096  5A02               	subwfb	___lldiv@dividend+1,f,c
 10806  005098  5007               	movf	___lldiv@divisor+2,w,c
 10807  00509A  5A03               	subwfb	___lldiv@dividend+2,f,c
 10808  00509C  5008               	movf	___lldiv@divisor+3,w,c
 10809  00509E  5A04               	subwfb	___lldiv@dividend+3,f,c
 10810  0050A0  8009               	bsf	___lldiv@quotient,0,c
 10811  0050A2                     l5390:
 10812  0050A2  90D8               	bcf	status,0,c
 10813  0050A4  3208               	rrcf	___lldiv@divisor+3,f,c
 10814  0050A6  3207               	rrcf	___lldiv@divisor+2,f,c
 10815  0050A8  3206               	rrcf	___lldiv@divisor+1,f,c
 10816  0050AA  3205               	rrcf	___lldiv@divisor,f,c
 10817  0050AC  2E0D               	decfsz	___lldiv@counter,f,c
 10818  0050AE  D7E1               	goto	u7070
 10819  0050B0                     l880:
 10820  0050B0  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10821  0050B4  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10822  0050B8  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10823  0050BC  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10824  0050C0  0012               	return		;funcret
 10825  0050C2                     __end_of___lldiv:
 10826                           	opt callstack 0
 10827                           
 10828 ;; *************** function _f_close *****************
 10829 ;; Defined at:
 10830 ;;		line 2861 in file "ff.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;  fp              2   77[COMRAM] PTR struct .
 10833 ;;		 -> Fil(32), 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  res             1   79[COMRAM] enum E93
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      enum E4918
 10838 ;; Registers used:
 10839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10845 ;;      Params:         2       0       0       0       0       0       0       0       0
 10846 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10848 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10849 ;;Total ram usage:        3 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    9
 10852 ;; This function calls:
 10853 ;;		_f_sync
 10854 ;;		_validate
 10855 ;; This function is called by:
 10856 ;;		_guardar
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           	psect	text29
 10861  005468                     __ptext29:
 10862                           	opt callstack 0
 10863  005468                     _f_close:
 10864                           	opt callstack 20
 10865                           
 10866                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10867                           
 10868                           ;incstack = 0
 10869  005468  C04E  F045         	movff	f_close@fp,f_sync@fp
 10870  00546C  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 10871  005470  EC37  F022         	call	_f_sync	;wreg free
 10872  005474  6E50               	movwf	f_close@res,c
 10873                           
 10874                           ;ff.c: 2870:  if (res == FR_OK)
 10875  005476  5050               	movf	f_close@res,w,c
 10876  005478  A4D8               	btfss	status,2,c
 10877  00547A  0012               	return	
 10878                           
 10879                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10880  00547C  C04E  F002         	movff	f_close@fp,validate@obj
 10881  005480  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 10882  005484  ECD6  F027         	call	_validate	;wreg free
 10883  005488  6E50               	movwf	f_close@res,c
 10884                           
 10885                           ;ff.c: 2874:   if (res == FR_OK) {
 10886  00548A  5050               	movf	f_close@res,w,c
 10887  00548C  A4D8               	btfss	status,2,c
 10888  00548E  0012               	return	
 10889                           
 10890                           ;ff.c: 2882:     fp->fs = 0;
 10891  005490  C04E  FFD9         	movff	f_close@fp,fsr2l
 10892  005494  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 10893  005498  0E00               	movlw	0
 10894  00549A  6EDE               	movwf	postinc2,c
 10895  00549C  0E00               	movlw	0
 10896  00549E  6EDD               	movwf	postdec2,c
 10897  0054A0  0012               	return		;funcret
 10898  0054A2                     __end_of_f_close:
 10899                           	opt callstack 0
 10900                           
 10901 ;; *************** function _f_sync *****************
 10902 ;; Defined at:
 10903 ;;		line 2813 in file "ff.c"
 10904 ;; Parameters:    Size  Location     Type
 10905 ;;  fp              2   68[COMRAM] PTR struct .
 10906 ;;		 -> Fil(32), 
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;  tm              4    0        unsigned long 
 10909 ;;  dir             2   75[COMRAM] PTR unsigned char 
 10910 ;;		 -> NULL(0), FatFs(558), 
 10911 ;;  res             1   74[COMRAM] enum E93
 10912 ;; Return value:  Size  Location     Type
 10913 ;;                  1    wreg      enum E93
 10914 ;; Registers used:
 10915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10916 ;; Tracked objects:
 10917 ;;		On entry : 0/0
 10918 ;;		On exit  : 0/0
 10919 ;;		Unchanged: 0/0
 10920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10921 ;;      Params:         2       0       0       0       0       0       0       0       0
 10922 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10923 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10924 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10925 ;;Total ram usage:        9 bytes
 10926 ;; Hardware stack levels used:    1
 10927 ;; Hardware stack levels required when called:    8
 10928 ;; This function calls:
 10929 ;;		_move_window
 10930 ;;		_st_clust
 10931 ;;		_sync_fs
 10932 ;;		_validate
 10933 ;; This function is called by:
 10934 ;;		_f_close
 10935 ;; This function uses a non-reentrant model
 10936 ;;
 10937                           
 10938                           	psect	text30
 10939  00446E                     __ptext30:
 10940                           	opt callstack 0
 10941  00446E                     _f_sync:
 10942                           	opt callstack 20
 10943                           
 10944                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 10945                           
 10946                           ;incstack = 0
 10947  00446E  C045  F002         	movff	f_sync@fp,validate@obj
 10948  004472  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 10949  004476  ECD6  F027         	call	_validate	;wreg free
 10950  00447A  6E4B               	movwf	f_sync@res,c
 10951                           
 10952                           ;ff.c: 2823:  if (res == FR_OK) {
 10953  00447C  504B               	movf	f_sync@res,w,c
 10954  00447E  A4D8               	btfss	status,2,c
 10955  004480  D095               	goto	l5794
 10956                           
 10957                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 10958  004482  EE20 F004          	lfsr	2,4
 10959  004486  5045               	movf	f_sync@fp,w,c
 10960  004488  26D9               	addwf	fsr2l,f,c
 10961  00448A  5046               	movf	f_sync@fp+1,w,c
 10962  00448C  22DA               	addwfc	fsr2h,f,c
 10963  00448E  AADF               	btfss	indf2,5,c
 10964  004490  D08D               	goto	l5794
 10965                           
 10966                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 10967  004492  C045  FFD9         	movff	f_sync@fp,fsr2l
 10968  004496  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 10969  00449A  CFDE F030          	movff	postinc2,move_window@fs
 10970  00449E  CFDD F031          	movff	postdec2,move_window@fs+1
 10971  0044A2  EE20 F01A          	lfsr	2,26
 10972  0044A6  5045               	movf	f_sync@fp,w,c
 10973  0044A8  26D9               	addwf	fsr2l,f,c
 10974  0044AA  5046               	movf	f_sync@fp+1,w,c
 10975  0044AC  22DA               	addwfc	fsr2h,f,c
 10976  0044AE  CFDE F032          	movff	postinc2,move_window@sector
 10977  0044B2  CFDE F033          	movff	postinc2,move_window@sector+1
 10978  0044B6  CFDE F034          	movff	postinc2,move_window@sector+2
 10979  0044BA  CFDE F035          	movff	postinc2,move_window@sector+3
 10980  0044BE  EC83  F027         	call	_move_window	;wreg free
 10981  0044C2  6E4B               	movwf	f_sync@res,c
 10982                           
 10983                           ;ff.c: 2834:    if (res == FR_OK) {
 10984  0044C4  504B               	movf	f_sync@res,w,c
 10985  0044C6  A4D8               	btfss	status,2,c
 10986  0044C8  D071               	goto	l5794
 10987                           
 10988                           ;ff.c: 2835:     dir = fp->dir_ptr;
 10989  0044CA  EE20 F01E          	lfsr	2,30
 10990  0044CE  5045               	movf	f_sync@fp,w,c
 10991  0044D0  26D9               	addwf	fsr2l,f,c
 10992  0044D2  5046               	movf	f_sync@fp+1,w,c
 10993  0044D4  22DA               	addwfc	fsr2h,f,c
 10994  0044D6  CFDE F04C          	movff	postinc2,f_sync@dir
 10995  0044DA  CFDD F04D          	movff	postdec2,f_sync@dir+1
 10996                           
 10997                           ;ff.c: 2836:     dir[11] |= 0x20;
 10998  0044DE  EE20 F00B          	lfsr	2,11
 10999  0044E2  504C               	movf	f_sync@dir,w,c
 11000  0044E4  26D9               	addwf	fsr2l,f,c
 11001  0044E6  504D               	movf	f_sync@dir+1,w,c
 11002  0044E8  22DA               	addwfc	fsr2h,f,c
 11003  0044EA  0E00               	movlw	0
 11004  0044EC  8ADB               	bsf	plusw2,5,c
 11005                           
 11006                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11007  0044EE  EE20 F00A          	lfsr	2,10
 11008  0044F2  5045               	movf	f_sync@fp,w,c
 11009  0044F4  26D9               	addwf	fsr2l,f,c
 11010  0044F6  5046               	movf	f_sync@fp+1,w,c
 11011  0044F8  22DA               	addwfc	fsr2h,f,c
 11012  0044FA  EE10 F01C          	lfsr	1,28
 11013  0044FE  504C               	movf	f_sync@dir,w,c
 11014  004500  26E1               	addwf	fsr1l,f,c
 11015  004502  504D               	movf	f_sync@dir+1,w,c
 11016  004504  22E2               	addwfc	fsr1h,f,c
 11017  004506  CFDE FFE6          	movff	postinc2,postinc1
 11018  00450A  CFDE FFE6          	movff	postinc2,postinc1
 11019  00450E  CFDE FFE6          	movff	postinc2,postinc1
 11020  004512  CFDE FFE6          	movff	postinc2,postinc1
 11021                           
 11022                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11023  004516  C04C  F001         	movff	f_sync@dir,st_clust@dir
 11024  00451A  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11025  00451E  EE20 F00E          	lfsr	2,14
 11026  004522  5045               	movf	f_sync@fp,w,c
 11027  004524  26D9               	addwf	fsr2l,f,c
 11028  004526  5046               	movf	f_sync@fp+1,w,c
 11029  004528  22DA               	addwfc	fsr2h,f,c
 11030  00452A  CFDE F003          	movff	postinc2,st_clust@cl
 11031  00452E  CFDE F004          	movff	postinc2,st_clust@cl+1
 11032  004532  CFDE F005          	movff	postinc2,st_clust@cl+2
 11033  004536  CFDE F006          	movff	postinc2,st_clust@cl+3
 11034  00453A  ECB5  F02A         	call	_st_clust	;wreg free
 11035                           
 11036                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11037  00453E  EE20 F016          	lfsr	2,22
 11038  004542  504C               	movf	f_sync@dir,w,c
 11039  004544  26D9               	addwf	fsr2l,f,c
 11040  004546  504D               	movf	f_sync@dir+1,w,c
 11041  004548  22DA               	addwfc	fsr2h,f,c
 11042  00454A  0E00               	movlw	0
 11043  00454C  6EDE               	movwf	postinc2,c
 11044  00454E  0E00               	movlw	0
 11045  004550  6EDE               	movwf	postinc2,c
 11046  004552  0E21               	movlw	33
 11047  004554  6EDE               	movwf	postinc2,c
 11048  004556  0E46               	movlw	70
 11049  004558  6EDD               	movwf	postdec2,c
 11050                           
 11051                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11052  00455A  EE20 F012          	lfsr	2,18
 11053  00455E  504C               	movf	f_sync@dir,w,c
 11054  004560  26D9               	addwf	fsr2l,f,c
 11055  004562  504D               	movf	f_sync@dir+1,w,c
 11056  004564  22DA               	addwfc	fsr2h,f,c
 11057  004566  0E00               	movlw	0
 11058  004568  6EDE               	movwf	postinc2,c
 11059  00456A  0E00               	movlw	0
 11060  00456C  6EDD               	movwf	postdec2,c
 11061                           
 11062                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11063  00456E  EE20 F004          	lfsr	2,4
 11064  004572  5045               	movf	f_sync@fp,w,c
 11065  004574  26D9               	addwf	fsr2l,f,c
 11066  004576  5046               	movf	f_sync@fp+1,w,c
 11067  004578  22DA               	addwfc	fsr2h,f,c
 11068  00457A  0EDF               	movlw	223
 11069  00457C  16DF               	andwf	indf2,f,c
 11070                           
 11071                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11072  00457E  C045  FFD9         	movff	f_sync@fp,fsr2l
 11073  004582  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11074  004586  EE10 F004          	lfsr	1,4
 11075  00458A  50DE               	movf	postinc2,w,c
 11076  00458C  26E1               	addwf	fsr1l,f,c
 11077  00458E  50DD               	movf	postdec2,w,c
 11078  004590  22E2               	addwfc	fsr1h,f,c
 11079  004592  0E01               	movlw	1
 11080  004594  6EE7               	movwf	indf1,c
 11081                           
 11082                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11083  004596  C045  FFD9         	movff	f_sync@fp,fsr2l
 11084  00459A  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11085  00459E  CFDE F03A          	movff	postinc2,sync_fs@fs
 11086  0045A2  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11087  0045A6  ECC1  F01E         	call	_sync_fs	;wreg free
 11088  0045AA  6E4B               	movwf	f_sync@res,c
 11089  0045AC                     l5794:
 11090                           
 11091                           ;ff.c: 2849:  return res;
 11092  0045AC  504B               	movf	f_sync@res,w,c
 11093  0045AE  0012               	return		;funcret
 11094  0045B0                     __end_of_f_sync:
 11095                           	opt callstack 0
 11096                           
 11097 ;; *************** function _validate *****************
 11098 ;; Defined at:
 11099 ;;		line 2372 in file "ff.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;  obj             2    1[COMRAM] PTR void 
 11102 ;;		 -> Fil(32), 
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;  fil             2    7[COMRAM] PTR struct .
 11105 ;;		 -> Fil(32), 
 11106 ;; Return value:  Size  Location     Type
 11107 ;;                  1    wreg      enum E93
 11108 ;; Registers used:
 11109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11110 ;; Tracked objects:
 11111 ;;		On entry : 0/0
 11112 ;;		On exit  : 0/0
 11113 ;;		Unchanged: 0/0
 11114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11115 ;;      Params:         2       0       0       0       0       0       0       0       0
 11116 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11117 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11118 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11119 ;;Total ram usage:        8 bytes
 11120 ;; Hardware stack levels used:    1
 11121 ;; Hardware stack levels required when called:    1
 11122 ;; This function calls:
 11123 ;;		_disk_status
 11124 ;; This function is called by:
 11125 ;;		_f_write
 11126 ;;		_f_sync
 11127 ;;		_f_close
 11128 ;;		_f_lseek
 11129 ;;		_f_read
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           	psect	text31
 11134  004FAC                     __ptext31:
 11135                           	opt callstack 0
 11136  004FAC                     _validate:
 11137                           	opt callstack 27
 11138                           
 11139                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11140                           
 11141                           ;incstack = 0
 11142  004FAC  C002  F008         	movff	validate@obj,validate@fil
 11143  004FB0  C003  F009         	movff	validate@obj+1,validate@fil+1
 11144                           
 11145                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11146  004FB4  5008               	movf	validate@fil,w,c
 11147  004FB6  1009               	iorwf	validate@fil+1,w,c
 11148  004FB8  B4D8               	btfsc	status,2,c
 11149  004FBA  D03E               	goto	u7050
 11150  004FBC  C008  FFD9         	movff	validate@fil,fsr2l
 11151  004FC0  C009  FFDA         	movff	validate@fil+1,fsr2h
 11152  004FC4  50DE               	movf	postinc2,w,c
 11153  004FC6  10DE               	iorwf	postinc2,w,c
 11154  004FC8  B4D8               	btfsc	status,2,c
 11155  004FCA  D036               	goto	u7050
 11156  004FCC  C008  FFD9         	movff	validate@fil,fsr2l
 11157  004FD0  C009  FFDA         	movff	validate@fil+1,fsr2h
 11158  004FD4  CFDE F004          	movff	postinc2,??_validate
 11159  004FD8  CFDD F005          	movff	postdec2,??_validate+1
 11160  004FDC  C004  FFD9         	movff	??_validate,fsr2l
 11161  004FE0  C005  FFDA         	movff	??_validate+1,fsr2h
 11162  004FE4  50DF               	movf	indf2,w,c
 11163  004FE6  B4D8               	btfsc	status,2,c
 11164  004FE8  D027               	goto	u7050
 11165  004FEA  EE20 F002          	lfsr	2,2
 11166  004FEE  5008               	movf	validate@fil,w,c
 11167  004FF0  26D9               	addwf	fsr2l,f,c
 11168  004FF2  5009               	movf	validate@fil+1,w,c
 11169  004FF4  22DA               	addwfc	fsr2h,f,c
 11170  004FF6  C008  FFE1         	movff	validate@fil,fsr1l
 11171  004FFA  C009  FFE2         	movff	validate@fil+1,fsr1h
 11172  004FFE  EE00 F006          	lfsr	0,6
 11173  005002  50E6               	movf	postinc1,w,c
 11174  005004  26E9               	addwf	fsr0l,f,c
 11175  005006  50E5               	movf	postdec1,w,c
 11176  005008  22EA               	addwfc	fsr0h,f,c
 11177  00500A  50DE               	movf	postinc2,w,c
 11178  00500C  18EE               	xorwf	postinc0,w,c
 11179  00500E  E114               	bnz	l5364
 11180  005010  50DE               	movf	postinc2,w,c
 11181  005012  18EE               	xorwf	postinc0,w,c
 11182  005014  A4D8               	btfss	status,2,c
 11183  005016  D010               	goto	u7050
 11184  005018  C008  FFD9         	movff	validate@fil,fsr2l
 11185  00501C  C009  FFDA         	movff	validate@fil+1,fsr2h
 11186  005020  EE10 F001          	lfsr	1,1
 11187  005024  50DE               	movf	postinc2,w,c
 11188  005026  26E1               	addwf	fsr1l,f,c
 11189  005028  50DD               	movf	postdec2,w,c
 11190  00502A  22E2               	addwfc	fsr1h,f,c
 11191  00502C  50E7               	movf	indf1,w,c
 11192  00502E  ECEC  F02A         	call	_disk_status
 11193  005032  6E04               	movwf	??_validate& (0+255),c
 11194  005034  A004               	btfss	??_validate,0,c
 11195  005036  D002               	goto	l5368
 11196  005038                     u7050:
 11197  005038                     l5364:
 11198                           
 11199                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11200  005038  0E09               	movlw	9
 11201  00503A  0012               	return	
 11202  00503C                     l5368:
 11203                           
 11204                           ;ff.c: 2384:  return FR_OK;
 11205  00503C  0E00               	movlw	0
 11206  00503E  0012               	return		;funcret
 11207  005040                     __end_of_validate:
 11208                           	opt callstack 0
 11209                           
 11210 ;; *************** function _disk_status *****************
 11211 ;; Defined at:
 11212 ;;		line 356 in file "diskio.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;  pdrv            1    wreg     unsigned char 
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  pdrv            1    0[COMRAM] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  1    wreg      unsigned char 
 11219 ;; Registers used:
 11220 ;;		wreg, status,2
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11226 ;;      Params:         0       0       0       0       0       0       0       0       0
 11227 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11229 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11230 ;;Total ram usage:        1 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; This function calls:
 11233 ;;		Nothing
 11234 ;; This function is called by:
 11235 ;;		_find_volume
 11236 ;;		_validate
 11237 ;; This function uses a non-reentrant model
 11238 ;;
 11239                           
 11240                           	psect	text32
 11241  0055D8                     __ptext32:
 11242                           	opt callstack 0
 11243  0055D8                     _disk_status:
 11244                           	opt callstack 27
 11245                           
 11246                           ;incstack = 0
 11247                           ;disk_status@pdrv stored from wreg
 11248  0055D8  6E01               	movwf	disk_status@pdrv,c
 11249                           
 11250                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11251  0055DA  5001               	movf	disk_status@pdrv,w,c
 11252  0055DC  B4D8               	btfsc	status,2,c
 11253  0055DE  D002               	goto	l4594
 11254  0055E0  0E01               	movlw	1
 11255  0055E2  0012               	return	
 11256  0055E4                     l4594:
 11257                           
 11258                           ;diskio.c: 361:  return Stat;
 11259  0055E4  0100               	movlb	0	; () banked
 11260  0055E6  51F7               	movf	_Stat& (0+255),w,b
 11261  0055E8  0012               	return		;funcret
 11262  0055EA                     __end_of_disk_status:
 11263                           	opt callstack 0
 11264                           
 11265 ;; *************** function _sync_fs *****************
 11266 ;; Defined at:
 11267 ;;		line 760 in file "ff.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;  fs              2   57[COMRAM] PTR struct .
 11270 ;;		 -> NULL(0), FatFs(558), 
 11271 ;; Auto vars:     Size  Location     Type
 11272 ;;  res             1   67[COMRAM] enum E93
 11273 ;; Return value:  Size  Location     Type
 11274 ;;                  1    wreg      enum E93
 11275 ;; Registers used:
 11276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11277 ;; Tracked objects:
 11278 ;;		On entry : 0/0
 11279 ;;		On exit  : 0/0
 11280 ;;		Unchanged: 0/0
 11281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11282 ;;      Params:         2       0       0       0       0       0       0       0       0
 11283 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11284 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11285 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11286 ;;Total ram usage:       11 bytes
 11287 ;; Hardware stack levels used:    1
 11288 ;; Hardware stack levels required when called:    7
 11289 ;; This function calls:
 11290 ;;		_disk_ioctl
 11291 ;;		_disk_write
 11292 ;;		_mem_set
 11293 ;;		_sync_window
 11294 ;; This function is called by:
 11295 ;;		_f_sync
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           	psect	text33
 11300  003D82                     __ptext33:
 11301                           	opt callstack 0
 11302  003D82                     _sync_fs:
 11303                           	opt callstack 20
 11304                           
 11305                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11306                           
 11307                           ;incstack = 0
 11308  003D82  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11309  003D86  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11310  003D8A  ECA1  F01F         	call	_sync_window	;wreg free
 11311  003D8E  6E44               	movwf	sync_fs@res,c
 11312                           
 11313                           ;ff.c: 768:  if (res == FR_OK) {
 11314  003D90  5044               	movf	sync_fs@res,w,c
 11315  003D92  A4D8               	btfss	status,2,c
 11316  003D94  D0D4               	goto	l305
 11317                           
 11318                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11319  003D96  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11320  003D9A  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11321  003D9E  0E03               	movlw	3
 11322  003DA0  18DE               	xorwf	postinc2,w,c
 11323  003DA2  A4D8               	btfss	status,2,c
 11324  003DA4  D0B8               	goto	l5060
 11325  003DA6  EE20 F005          	lfsr	2,5
 11326  003DAA  503A               	movf	sync_fs@fs,w,c
 11327  003DAC  26D9               	addwf	fsr2l,f,c
 11328  003DAE  503B               	movf	sync_fs@fs+1,w,c
 11329  003DB0  22DA               	addwfc	fsr2h,f,c
 11330  003DB2  04DE               	decf	postinc2,w,c
 11331  003DB4  A4D8               	btfss	status,2,c
 11332  003DB6  D0AF               	goto	l5060
 11333                           
 11334                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11335  003DB8  0E2E               	movlw	46
 11336  003DBA  243A               	addwf	sync_fs@fs,w,c
 11337  003DBC  6E01               	movwf	mem_set@dst,c
 11338  003DBE  0E00               	movlw	0
 11339  003DC0  203B               	addwfc	sync_fs@fs+1,w,c
 11340  003DC2  6E02               	movwf	mem_set@dst+1,c
 11341  003DC4  0E00               	movlw	0
 11342  003DC6  6E04               	movwf	mem_set@val+1,c
 11343  003DC8  0E00               	movlw	0
 11344  003DCA  6E03               	movwf	mem_set@val,c
 11345  003DCC  0E02               	movlw	2
 11346  003DCE  6E06               	movwf	mem_set@cnt+1,c
 11347  003DD0  0E00               	movlw	0
 11348  003DD2  6E05               	movwf	mem_set@cnt,c
 11349  003DD4  EC9F  F02A         	call	_mem_set	;wreg free
 11350                           
 11351                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11352  003DD8  EE22 F02C          	lfsr	2,556
 11353  003DDC  503A               	movf	sync_fs@fs,w,c
 11354  003DDE  26D9               	addwf	fsr2l,f,c
 11355  003DE0  503B               	movf	sync_fs@fs+1,w,c
 11356  003DE2  22DA               	addwfc	fsr2h,f,c
 11357  003DE4  0E55               	movlw	85
 11358  003DE6  6EDE               	movwf	postinc2,c
 11359  003DE8  0EAA               	movlw	170
 11360  003DEA  6EDD               	movwf	postdec2,c
 11361                           
 11362                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11363  003DEC  EE20 F02E          	lfsr	2,46
 11364  003DF0  503A               	movf	sync_fs@fs,w,c
 11365  003DF2  26D9               	addwf	fsr2l,f,c
 11366  003DF4  503B               	movf	sync_fs@fs+1,w,c
 11367  003DF6  22DA               	addwfc	fsr2h,f,c
 11368  003DF8  0E52               	movlw	82
 11369  003DFA  6EDE               	movwf	postinc2,c
 11370  003DFC  0E52               	movlw	82
 11371  003DFE  6EDE               	movwf	postinc2,c
 11372  003E00  0E61               	movlw	97
 11373  003E02  6EDE               	movwf	postinc2,c
 11374  003E04  0E41               	movlw	65
 11375  003E06  6EDD               	movwf	postdec2,c
 11376                           
 11377                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11378  003E08  EE22 F012          	lfsr	2,530
 11379  003E0C  503A               	movf	sync_fs@fs,w,c
 11380  003E0E  26D9               	addwf	fsr2l,f,c
 11381  003E10  503B               	movf	sync_fs@fs+1,w,c
 11382  003E12  22DA               	addwfc	fsr2h,f,c
 11383  003E14  0E72               	movlw	114
 11384  003E16  6EDE               	movwf	postinc2,c
 11385  003E18  0E72               	movlw	114
 11386  003E1A  6EDE               	movwf	postinc2,c
 11387  003E1C  0E41               	movlw	65
 11388  003E1E  6EDE               	movwf	postinc2,c
 11389  003E20  0E61               	movlw	97
 11390  003E22  6EDD               	movwf	postdec2,c
 11391                           
 11392                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11393  003E24  EE20 F00E          	lfsr	2,14
 11394  003E28  503A               	movf	sync_fs@fs,w,c
 11395  003E2A  26D9               	addwf	fsr2l,f,c
 11396  003E2C  503B               	movf	sync_fs@fs+1,w,c
 11397  003E2E  22DA               	addwfc	fsr2h,f,c
 11398  003E30  EE12 F016          	lfsr	1,534
 11399  003E34  503A               	movf	sync_fs@fs,w,c
 11400  003E36  26E1               	addwf	fsr1l,f,c
 11401  003E38  503B               	movf	sync_fs@fs+1,w,c
 11402  003E3A  22E2               	addwfc	fsr1h,f,c
 11403  003E3C  CFDE FFE6          	movff	postinc2,postinc1
 11404  003E40  CFDE FFE6          	movff	postinc2,postinc1
 11405  003E44  CFDE FFE6          	movff	postinc2,postinc1
 11406  003E48  CFDE FFE6          	movff	postinc2,postinc1
 11407                           
 11408                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11409  003E4C  EE20 F00A          	lfsr	2,10
 11410  003E50  503A               	movf	sync_fs@fs,w,c
 11411  003E52  26D9               	addwf	fsr2l,f,c
 11412  003E54  503B               	movf	sync_fs@fs+1,w,c
 11413  003E56  22DA               	addwfc	fsr2h,f,c
 11414  003E58  EE12 F01A          	lfsr	1,538
 11415  003E5C  503A               	movf	sync_fs@fs,w,c
 11416  003E5E  26E1               	addwf	fsr1l,f,c
 11417  003E60  503B               	movf	sync_fs@fs+1,w,c
 11418  003E62  22E2               	addwfc	fsr1h,f,c
 11419  003E64  CFDE FFE6          	movff	postinc2,postinc1
 11420  003E68  CFDE FFE6          	movff	postinc2,postinc1
 11421  003E6C  CFDE FFE6          	movff	postinc2,postinc1
 11422  003E70  CFDE FFE6          	movff	postinc2,postinc1
 11423                           
 11424                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11425  003E74  EE20 F01A          	lfsr	2,26
 11426  003E78  503A               	movf	sync_fs@fs,w,c
 11427  003E7A  26D9               	addwf	fsr2l,f,c
 11428  003E7C  503B               	movf	sync_fs@fs+1,w,c
 11429  003E7E  22DA               	addwfc	fsr2h,f,c
 11430  003E80  CFDE F03C          	movff	postinc2,??_sync_fs
 11431  003E84  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11432  003E88  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11433  003E8C  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11434  003E90  0E01               	movlw	1
 11435  003E92  243C               	addwf	??_sync_fs,w,c
 11436  003E94  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11437  003E96  0E00               	movlw	0
 11438  003E98  203D               	addwfc	??_sync_fs+1,w,c
 11439  003E9A  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11440  003E9C  0E00               	movlw	0
 11441  003E9E  203E               	addwfc	??_sync_fs+2,w,c
 11442  003EA0  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11443  003EA2  0E00               	movlw	0
 11444  003EA4  203F               	addwfc	??_sync_fs+3,w,c
 11445  003EA6  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11446  003EA8  EE20 F02A          	lfsr	2,42
 11447  003EAC  503A               	movf	sync_fs@fs,w,c
 11448  003EAE  26D9               	addwf	fsr2l,f,c
 11449  003EB0  503B               	movf	sync_fs@fs+1,w,c
 11450  003EB2  22DA               	addwfc	fsr2h,f,c
 11451  003EB4  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11452  003EB8  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11453  003EBC  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11454  003EC0  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11455                           
 11456                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11457  003EC4  0E2E               	movlw	46
 11458  003EC6  243A               	addwf	sync_fs@fs,w,c
 11459  003EC8  6E11               	movwf	disk_write@buff,c
 11460  003ECA  0E00               	movlw	0
 11461  003ECC  203B               	addwfc	sync_fs@fs+1,w,c
 11462  003ECE  6E12               	movwf	disk_write@buff+1,c
 11463  003ED0  EE20 F02A          	lfsr	2,42
 11464  003ED4  503A               	movf	sync_fs@fs,w,c
 11465  003ED6  26D9               	addwf	fsr2l,f,c
 11466  003ED8  503B               	movf	sync_fs@fs+1,w,c
 11467  003EDA  22DA               	addwfc	fsr2h,f,c
 11468  003EDC  CFDE F013          	movff	postinc2,disk_write@sector
 11469  003EE0  CFDE F014          	movff	postinc2,disk_write@sector+1
 11470  003EE4  CFDE F015          	movff	postinc2,disk_write@sector+2
 11471  003EE8  CFDE F016          	movff	postinc2,disk_write@sector+3
 11472  003EEC  0E00               	movlw	0
 11473  003EEE  6E18               	movwf	disk_write@count+1,c
 11474  003EF0  0E01               	movlw	1
 11475  003EF2  6E17               	movwf	disk_write@count,c
 11476  003EF4  EE20 F001          	lfsr	2,1
 11477  003EF8  503A               	movf	sync_fs@fs,w,c
 11478  003EFA  26D9               	addwf	fsr2l,f,c
 11479  003EFC  503B               	movf	sync_fs@fs+1,w,c
 11480  003EFE  22DA               	addwfc	fsr2h,f,c
 11481  003F00  50DF               	movf	indf2,w,c
 11482  003F02  ECD8  F022         	call	_disk_write
 11483                           
 11484                           ;ff.c: 781:    fs->fsi_flag = 0;
 11485  003F06  EE20 F005          	lfsr	2,5
 11486  003F0A  503A               	movf	sync_fs@fs,w,c
 11487  003F0C  26D9               	addwf	fsr2l,f,c
 11488  003F0E  503B               	movf	sync_fs@fs+1,w,c
 11489  003F10  22DA               	addwfc	fsr2h,f,c
 11490  003F12  0E00               	movlw	0
 11491  003F14  6EDF               	movwf	indf2,c
 11492  003F16                     l5060:
 11493                           
 11494                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11495  003F16  0E00               	movlw	0
 11496  003F18  6E11               	movwf	disk_ioctl@cmd,c
 11497  003F1A  0E00               	movlw	0
 11498  003F1C  6E12               	movwf	disk_ioctl@buff,c
 11499  003F1E  0E00               	movlw	0
 11500  003F20  6E13               	movwf	disk_ioctl@buff+1,c
 11501  003F22  EE20 F001          	lfsr	2,1
 11502  003F26  503A               	movf	sync_fs@fs,w,c
 11503  003F28  26D9               	addwf	fsr2l,f,c
 11504  003F2A  503B               	movf	sync_fs@fs+1,w,c
 11505  003F2C  22DA               	addwfc	fsr2h,f,c
 11506  003F2E  50DF               	movf	indf2,w,c
 11507  003F30  ECA9  F00F         	call	_disk_ioctl
 11508  003F34  0900               	iorlw	0
 11509  003F36  B4D8               	btfsc	status,2,c
 11510  003F38  D002               	goto	l305
 11511                           
 11512                           ;ff.c: 785:    res = FR_DISK_ERR;
 11513  003F3A  0E01               	movlw	1
 11514  003F3C  6E44               	movwf	sync_fs@res,c
 11515  003F3E                     l305:
 11516                           
 11517                           ;ff.c: 788:  return res;
 11518  003F3E  5044               	movf	sync_fs@res,w,c
 11519  003F40  0012               	return		;funcret
 11520  003F42                     __end_of_sync_fs:
 11521                           	opt callstack 0
 11522                           
 11523 ;; *************** function _mem_set *****************
 11524 ;; Defined at:
 11525 ;;		line 524 in file "ff.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;  dst             2    0[COMRAM] PTR void 
 11528 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11529 ;;  val             2    2[COMRAM] int 
 11530 ;;  cnt             2    4[COMRAM] unsigned short 
 11531 ;; Auto vars:     Size  Location     Type
 11532 ;;  d               2    6[COMRAM] PTR unsigned char 
 11533 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11534 ;; Return value:  Size  Location     Type
 11535 ;;                  1    wreg      void 
 11536 ;; Registers used:
 11537 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11538 ;; Tracked objects:
 11539 ;;		On entry : 0/0
 11540 ;;		On exit  : 0/0
 11541 ;;		Unchanged: 0/0
 11542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11543 ;;      Params:         6       0       0       0       0       0       0       0       0
 11544 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11545 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11546 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11547 ;;Total ram usage:        8 bytes
 11548 ;; Hardware stack levels used:    1
 11549 ;; This function calls:
 11550 ;;		Nothing
 11551 ;; This function is called by:
 11552 ;;		_sync_fs
 11553 ;;		_dir_next
 11554 ;;		_dir_register
 11555 ;;		_create_name
 11556 ;; This function uses a non-reentrant model
 11557 ;;
 11558                           
 11559                           	psect	text34
 11560  00553E                     __ptext34:
 11561                           	opt callstack 0
 11562  00553E                     _mem_set:
 11563                           	opt callstack 25
 11564                           
 11565                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11566                           
 11567                           ;incstack = 0
 11568  00553E  C001  F007         	movff	mem_set@dst,mem_set@d
 11569  005542  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11570                           
 11571                           ;ff.c: 527:  while (cnt--)
 11572  005546  D008               	goto	l4492
 11573  005548                     l4488:
 11574                           
 11575                           ;ff.c: 528:   *d++ = (BYTE)val;
 11576  005548  C007  FFD9         	movff	mem_set@d,fsr2l
 11577  00554C  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11578  005550  C003  FFDF         	movff	mem_set@val,indf2
 11579  005554  4A07               	infsnz	mem_set@d,f,c
 11580  005556  2A08               	incf	mem_set@d+1,f,c
 11581  005558                     l4492:
 11582                           
 11583                           ;ff.c: 527:  while (cnt--)
 11584  005558  0605               	decf	mem_set@cnt,f,c
 11585  00555A  A0D8               	btfss	status,0,c
 11586  00555C  0606               	decf	mem_set@cnt+1,f,c
 11587  00555E  2805               	incf	mem_set@cnt,w,c
 11588  005560  E1F3               	bnz	l4488
 11589  005562  2806               	incf	mem_set@cnt+1,w,c
 11590  005564  B4D8               	btfsc	status,2,c
 11591  005566  0012               	return	
 11592  005568  D7EF               	goto	l4488
 11593  00556A                     __end_of_mem_set:
 11594                           	opt callstack 0
 11595                           
 11596 ;; *************** function _disk_ioctl *****************
 11597 ;; Defined at:
 11598 ;;		line 446 in file "diskio.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;  pdrv            1    wreg     unsigned char 
 11601 ;;  cmd             1   16[COMRAM] unsigned char 
 11602 ;;  buff            2   17[COMRAM] PTR void 
 11603 ;;		 -> NULL(0), 
 11604 ;; Auto vars:     Size  Location     Type
 11605 ;;  pdrv            1   48[COMRAM] unsigned char 
 11606 ;;  csd            16   32[COMRAM] unsigned char [16]
 11607 ;;  csize           4   49[COMRAM] unsigned long 
 11608 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11609 ;;		 -> NULL(0), 
 11610 ;;  n               1   54[COMRAM] unsigned char 
 11611 ;;  res             1   53[COMRAM] enum E43
 11612 ;; Return value:  Size  Location     Type
 11613 ;;                  1    wreg      enum E43
 11614 ;; Registers used:
 11615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11616 ;; Tracked objects:
 11617 ;;		On entry : 0/0
 11618 ;;		On exit  : 0/0
 11619 ;;		Unchanged: 0/0
 11620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11621 ;;      Params:         3       0       0       0       0       0       0       0       0
 11622 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11623 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11624 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11625 ;;Total ram usage:       41 bytes
 11626 ;; Hardware stack levels used:    1
 11627 ;; Hardware stack levels required when called:    5
 11628 ;; This function calls:
 11629 ;;		_SPI1_Exchange8bit
 11630 ;;		___wmul
 11631 ;;		_deselect
 11632 ;;		_rcvr_datablock
 11633 ;;		_select
 11634 ;;		_send_cmd
 11635 ;; This function is called by:
 11636 ;;		_sync_fs
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           	psect	text35
 11641  001F52                     __ptext35:
 11642                           	opt callstack 0
 11643  001F52                     _disk_ioctl:
 11644                           	opt callstack 21
 11645                           
 11646                           ;incstack = 0
 11647                           ;disk_ioctl@pdrv stored from wreg
 11648  001F52  6E31               	movwf	disk_ioctl@pdrv,c
 11649                           
 11650                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11651  001F54  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11652  001F58  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11653                           
 11654                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11655  001F5C  5031               	movf	disk_ioctl@pdrv,w,c
 11656  001F5E  B4D8               	btfsc	status,2,c
 11657  001F60  D002               	goto	l4606
 11658  001F62  0E04               	movlw	4
 11659  001F64  0012               	return	
 11660  001F66                     l4606:
 11661                           
 11662                           ;diskio.c: 459:  res = RES_ERROR;
 11663  001F66  0E01               	movlw	1
 11664  001F68  6E36               	movwf	disk_ioctl@res,c
 11665                           
 11666                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11667  001F6A  0100               	movlb	0	; () banked
 11668  001F6C  A1F7               	btfss	_Stat& (0+255),0,b
 11669  001F6E  D21B               	goto	l4706
 11670                           
 11671                           ; BSR set to: 0
 11672  001F70  0E03               	movlw	3
 11673  001F72  0012               	return	
 11674  001F74                     l4614:
 11675                           
 11676                           ; BSR set to: 0
 11677                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11678  001F74  ECDD  F02A         	call	_select	;wreg free
 11679  001F78  0900               	iorlw	0
 11680  001F7A  B4D8               	btfsc	status,2,c
 11681  001F7C  D235               	goto	l4708
 11682  001F7E                     u5550:
 11683  001F7E  0E00               	movlw	0
 11684  001F80  D210               	goto	L13
 11685  001F82                     l4618:
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11689  001F82  0E00               	movlw	0
 11690  001F84  6E0B               	movwf	send_cmd@arg,c
 11691  001F86  0E00               	movlw	0
 11692  001F88  6E0C               	movwf	send_cmd@arg+1,c
 11693  001F8A  0E00               	movlw	0
 11694  001F8C  6E0D               	movwf	send_cmd@arg+2,c
 11695  001F8E  0E00               	movlw	0
 11696  001F90  6E0E               	movwf	send_cmd@arg+3,c
 11697  001F92  0E09               	movlw	9
 11698  001F94  ECD7  F029         	call	_send_cmd
 11699  001F98  0900               	iorlw	0
 11700  001F9A  A4D8               	btfss	status,2,c
 11701  001F9C  D225               	goto	l4708
 11702  001F9E  0E21               	movlw	low disk_ioctl@csd
 11703  001FA0  6E02               	movwf	rcvr_datablock@buff,c
 11704  001FA2  0E00               	movlw	high disk_ioctl@csd
 11705  001FA4  6E03               	movwf	rcvr_datablock@buff+1,c
 11706  001FA6  0E00               	movlw	0
 11707  001FA8  6E05               	movwf	rcvr_datablock@btr+1,c
 11708  001FAA  0E10               	movlw	16
 11709  001FAC  6E04               	movwf	rcvr_datablock@btr,c
 11710  001FAE  EC1F  F029         	call	_rcvr_datablock	;wreg free
 11711  001FB2  0900               	iorlw	0
 11712  001FB4  B4D8               	btfsc	status,2,c
 11713  001FB6  D218               	goto	l4708
 11714                           
 11715                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11716  001FB8  4421               	rlncf	disk_ioctl@csd,w,c
 11717  001FBA  46E8               	rlncf	wreg,f,c
 11718  001FBC  0B03               	andlw	3
 11719  001FBE  06E8               	decf	wreg,f,c
 11720  001FC0  A4D8               	btfss	status,2,c
 11721  001FC2  D04E               	goto	l4628
 11722                           
 11723                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11724  001FC4  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11725  001FC8  0E3F               	movlw	63
 11726  001FCA  1614               	andwf	??_disk_ioctl,f,c
 11727  001FCC  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11728  001FD0  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11729  001FD2  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11730  001FD4  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11731  001FD6  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11732  001FDA  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11733  001FDE  6A16               	clrf	??_disk_ioctl+2,c
 11734  001FE0  6A15               	clrf	??_disk_ioctl+1,c
 11735  001FE2  5029               	movf	disk_ioctl@csd+8,w,c
 11736  001FE4  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11737  001FE6  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11738  001FE8  502A               	movf	disk_ioctl@csd+9,w,c
 11739  001FEA  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11740  001FEC  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11741  001FEE  5019               	movf	??_disk_ioctl+5,w,c
 11742  001FF0  261B               	addwf	??_disk_ioctl+7,f,c
 11743  001FF2  501A               	movf	??_disk_ioctl+6,w,c
 11744  001FF4  221C               	addwfc	??_disk_ioctl+8,f,c
 11745  001FF6  501B               	movf	??_disk_ioctl+7,w,c
 11746  001FF8  2415               	addwf	??_disk_ioctl+1,w,c
 11747  001FFA  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11748  001FFC  501C               	movf	??_disk_ioctl+8,w,c
 11749  001FFE  2016               	addwfc	??_disk_ioctl+2,w,c
 11750  002000  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11751  002002  0E00               	movlw	0
 11752  002004  2017               	addwfc	??_disk_ioctl+3,w,c
 11753  002006  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11754  002008  0E00               	movlw	0
 11755  00200A  2018               	addwfc	??_disk_ioctl+4,w,c
 11756  00200C  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11757  00200E  0E01               	movlw	1
 11758  002010  241D               	addwf	??_disk_ioctl+9,w,c
 11759  002012  6E32               	movwf	disk_ioctl@csize,c
 11760  002014  0E00               	movlw	0
 11761  002016  201E               	addwfc	??_disk_ioctl+10,w,c
 11762  002018  6E33               	movwf	disk_ioctl@csize+1,c
 11763  00201A  0E00               	movlw	0
 11764  00201C  201F               	addwfc	??_disk_ioctl+11,w,c
 11765  00201E  6E34               	movwf	disk_ioctl@csize+2,c
 11766  002020  0E00               	movlw	0
 11767  002022  2020               	addwfc	??_disk_ioctl+12,w,c
 11768  002024  6E35               	movwf	disk_ioctl@csize+3,c
 11769                           
 11770                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11771  002026  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11772  00202A  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11773  00202E  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11774  002032  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11775  002036  0E0A               	movlw	10
 11776  002038                     u5595:
 11777  002038  90D8               	bcf	status,0,c
 11778  00203A  3614               	rlcf	??_disk_ioctl,f,c
 11779  00203C  3615               	rlcf	??_disk_ioctl+1,f,c
 11780  00203E  3616               	rlcf	??_disk_ioctl+2,f,c
 11781  002040  3617               	rlcf	??_disk_ioctl+3,f,c
 11782  002042  2EE8               	decfsz	wreg,f,c
 11783  002044  D7F9               	goto	u5595
 11784  002046  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11785  00204A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11786  00204E  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11787  002052  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11788  002056  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11789  00205A  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11790                           
 11791                           ;diskio.c: 473:    } else {
 11792  00205E  D78F               	goto	u5550
 11793  002060                     l4628:
 11794                           
 11795                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11796  002060  6A14               	clrf	??_disk_ioctl& (0+255),c
 11797  002062  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11798  002064  D001               	bra	u5605
 11799  002066  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11800  002068                     u5605:
 11801  002068  0E01               	movlw	1
 11802  00206A  1614               	andwf	??_disk_ioctl,f,c
 11803  00206C  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11804  002070  0E0F               	movlw	15
 11805  002072  1615               	andwf	??_disk_ioctl+1,f,c
 11806  002074  502A               	movf	disk_ioctl@csd+9,w,c
 11807  002076  0B03               	andlw	3
 11808  002078  0D02               	mullw	2
 11809  00207A  50F3               	movf	prodl,w,c
 11810  00207C  2415               	addwf	??_disk_ioctl+1,w,c
 11811  00207E  2414               	addwf	??_disk_ioctl,w,c
 11812  002080  0F02               	addlw	2
 11813  002082  6E37               	movwf	disk_ioctl@n,c
 11814                           
 11815                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11816  002084  5027               	movf	disk_ioctl@csd+6,w,c
 11817  002086  0B03               	andlw	3
 11818  002088  6E14               	movwf	??_disk_ioctl& (0+255),c
 11819  00208A  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 11820  00208C  0E0A               	movlw	10
 11821  00208E                     u5615:
 11822  00208E  90D8               	bcf	status,0,c
 11823  002090  3614               	rlcf	??_disk_ioctl,f,c
 11824  002092  3615               	rlcf	??_disk_ioctl+1,f,c
 11825  002094  2EE8               	decfsz	wreg,f,c
 11826  002096  D7FB               	goto	u5615
 11827  002098  5028               	movf	disk_ioctl@csd+7,w,c
 11828  00209A  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11829  00209C  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11830  00209E  90D8               	bcf	status,0,c
 11831  0020A0  3616               	rlcf	??_disk_ioctl+2,f,c
 11832  0020A2  3617               	rlcf	??_disk_ioctl+3,f,c
 11833  0020A4  90D8               	bcf	status,0,c
 11834  0020A6  3616               	rlcf	??_disk_ioctl+2,f,c
 11835  0020A8  3617               	rlcf	??_disk_ioctl+3,f,c
 11836  0020AA  4429               	rlncf	disk_ioctl@csd+8,w,c
 11837  0020AC  46E8               	rlncf	wreg,f,c
 11838  0020AE  0B03               	andlw	3
 11839  0020B0  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11840  0020B2  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11841  0020B4  5016               	movf	??_disk_ioctl+2,w,c
 11842  0020B6  2618               	addwf	??_disk_ioctl+4,f,c
 11843  0020B8  5017               	movf	??_disk_ioctl+3,w,c
 11844  0020BA  2219               	addwfc	??_disk_ioctl+5,f,c
 11845  0020BC  5014               	movf	??_disk_ioctl,w,c
 11846  0020BE  2618               	addwf	??_disk_ioctl+4,f,c
 11847  0020C0  5015               	movf	??_disk_ioctl+1,w,c
 11848  0020C2  2219               	addwfc	??_disk_ioctl+5,f,c
 11849  0020C4  0E01               	movlw	1
 11850  0020C6  2618               	addwf	??_disk_ioctl+4,f,c
 11851  0020C8  0E00               	movlw	0
 11852  0020CA  2219               	addwfc	??_disk_ioctl+5,f,c
 11853  0020CC  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 11854  0020D0  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 11855  0020D4  6A34               	clrf	disk_ioctl@csize+2,c
 11856  0020D6  6A35               	clrf	disk_ioctl@csize+3,c
 11857                           
 11858                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 11859  0020D8  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11860  0020DC  0EF7               	movlw	-9
 11861  0020DE  2614               	addwf	??_disk_ioctl,f,c
 11862  0020E0  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11863  0020E4  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11864  0020E8  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11865  0020EC  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 11866  0020F0  2A14               	incf	??_disk_ioctl,f,c
 11867  0020F2  D005               	goto	u5620
 11868  0020F4                     u5625:
 11869  0020F4  90D8               	bcf	status,0,c
 11870  0020F6  3615               	rlcf	??_disk_ioctl+1,f,c
 11871  0020F8  3616               	rlcf	??_disk_ioctl+2,f,c
 11872  0020FA  3617               	rlcf	??_disk_ioctl+3,f,c
 11873  0020FC  3618               	rlcf	??_disk_ioctl+4,f,c
 11874  0020FE                     u5620:
 11875  0020FE  2E14               	decfsz	??_disk_ioctl,f,c
 11876  002100  D7F9               	goto	u5625
 11877  002102  D03D               	goto	L15
 11878  002104                     l218:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;diskio.c: 483:   if (CardType & 0x04) {
 11882  002104  A5D6               	btfss	_CardType& (0+255),2,b
 11883  002106  D048               	goto	l4654
 11884                           
 11885                           ; BSR set to: 0
 11886                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 11887  002108  0E00               	movlw	0
 11888  00210A  6E0B               	movwf	send_cmd@arg,c
 11889  00210C  0E00               	movlw	0
 11890  00210E  6E0C               	movwf	send_cmd@arg+1,c
 11891  002110  0E00               	movlw	0
 11892  002112  6E0D               	movwf	send_cmd@arg+2,c
 11893  002114  0E00               	movlw	0
 11894  002116  6E0E               	movwf	send_cmd@arg+3,c
 11895  002118  0E8D               	movlw	141
 11896  00211A  ECD7  F029         	call	_send_cmd
 11897  00211E  0900               	iorlw	0
 11898  002120  A4D8               	btfss	status,2,c
 11899  002122  D162               	goto	l4708
 11900                           
 11901                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 11902  002124  0EFF               	movlw	255
 11903  002126  ECFE  F02A         	call	_SPI1_Exchange8bit
 11904                           
 11905                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 11906  00212A  0E21               	movlw	low disk_ioctl@csd
 11907  00212C  6E02               	movwf	rcvr_datablock@buff,c
 11908  00212E  0E00               	movlw	high disk_ioctl@csd
 11909  002130  6E03               	movwf	rcvr_datablock@buff+1,c
 11910  002132  0E00               	movlw	0
 11911  002134  6E05               	movwf	rcvr_datablock@btr+1,c
 11912  002136  0E10               	movlw	16
 11913  002138  6E04               	movwf	rcvr_datablock@btr,c
 11914  00213A  EC1F  F029         	call	_rcvr_datablock	;wreg free
 11915  00213E  0900               	iorlw	0
 11916  002140  B4D8               	btfsc	status,2,c
 11917  002142  D152               	goto	l4708
 11918                           
 11919                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 11920  002144  0E30               	movlw	48
 11921  002146  6E37               	movwf	disk_ioctl@n,c
 11922  002148  D004               	goto	l4648
 11923  00214A                     l4644:
 11924  00214A  0EFF               	movlw	255
 11925  00214C  ECFE  F02A         	call	_SPI1_Exchange8bit
 11926  002150  0637               	decf	disk_ioctl@n,f,c
 11927  002152                     l4648:
 11928  002152  5037               	movf	disk_ioctl@n,w,c
 11929  002154  A4D8               	btfss	status,2,c
 11930  002156  D7F9               	goto	l4644
 11931                           
 11932                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 11933  002158  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 11934  00215C  3A14               	swapf	??_disk_ioctl,f,c
 11935  00215E  0E0F               	movlw	15
 11936  002160  1614               	andwf	??_disk_ioctl,f,c
 11937  002162  0E10               	movlw	16
 11938  002164  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11939  002166  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11940  002168  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11941  00216A  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11942  00216C  2A14               	incf	??_disk_ioctl,f,c
 11943  00216E  D005               	goto	u5670
 11944  002170                     u5675:
 11945  002170  90D8               	bcf	status,0,c
 11946  002172  3615               	rlcf	??_disk_ioctl+1,f,c
 11947  002174  3616               	rlcf	??_disk_ioctl+2,f,c
 11948  002176  3617               	rlcf	??_disk_ioctl+3,f,c
 11949  002178  3618               	rlcf	??_disk_ioctl+4,f,c
 11950  00217A                     u5670:
 11951  00217A  2E14               	decfsz	??_disk_ioctl,f,c
 11952  00217C  D7F9               	goto	u5675
 11953  00217E                     L15:
 11954  00217E  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11955  002182  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11956  002186  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11957  00218A  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11958  00218E  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11959  002192  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 11960  002196  D6F3               	goto	u5550
 11961  002198                     l4654:
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11965  002198  0E00               	movlw	0
 11966  00219A  6E0B               	movwf	send_cmd@arg,c
 11967  00219C  0E00               	movlw	0
 11968  00219E  6E0C               	movwf	send_cmd@arg+1,c
 11969  0021A0  0E00               	movlw	0
 11970  0021A2  6E0D               	movwf	send_cmd@arg+2,c
 11971  0021A4  0E00               	movlw	0
 11972  0021A6  6E0E               	movwf	send_cmd@arg+3,c
 11973  0021A8  0E09               	movlw	9
 11974  0021AA  ECD7  F029         	call	_send_cmd
 11975  0021AE  0900               	iorlw	0
 11976  0021B0  A4D8               	btfss	status,2,c
 11977  0021B2  D11A               	goto	l4708
 11978  0021B4  0E21               	movlw	low disk_ioctl@csd
 11979  0021B6  6E02               	movwf	rcvr_datablock@buff,c
 11980  0021B8  0E00               	movlw	high disk_ioctl@csd
 11981  0021BA  6E03               	movwf	rcvr_datablock@buff+1,c
 11982  0021BC  0E00               	movlw	0
 11983  0021BE  6E05               	movwf	rcvr_datablock@btr+1,c
 11984  0021C0  0E10               	movlw	16
 11985  0021C2  6E04               	movwf	rcvr_datablock@btr,c
 11986  0021C4  EC1F  F029         	call	_rcvr_datablock	;wreg free
 11987  0021C8  0900               	iorlw	0
 11988  0021CA  B4D8               	btfsc	status,2,c
 11989  0021CC  D10D               	goto	l4708
 11990                           
 11991                           ;diskio.c: 494:     if (CardType & 0x02) {
 11992  0021CE  0100               	movlb	0	; () banked
 11993  0021D0  A3D6               	btfss	_CardType& (0+255),1,b
 11994  0021D2  D02A               	goto	l4662
 11995                           
 11996                           ; BSR set to: 0
 11997                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 11998  0021D4  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 11999  0021D8  0E06               	movlw	6
 12000  0021DA  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12001  0021DC                     u5715:
 12002  0021DC  90D8               	bcf	status,0,c
 12003  0021DE  3214               	rrcf	??_disk_ioctl,f,c
 12004  0021E0  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 12005  0021E2  D7FC               	goto	u5715
 12006  0021E4  0EFF               	movlw	-1
 12007  0021E6  2614               	addwf	??_disk_ioctl,f,c
 12008  0021E8  502B               	movf	disk_ioctl@csd+10,w,c
 12009  0021EA  0B3F               	andlw	63
 12010  0021EC  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12011  0021EE  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12012  0021F0  90D8               	bcf	status,0,c
 12013  0021F2  3616               	rlcf	??_disk_ioctl+2,f,c
 12014  0021F4  3617               	rlcf	??_disk_ioctl+3,f,c
 12015  0021F6  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12016  0021F8  AE2C               	btfss	disk_ioctl@csd+11,7,c
 12017  0021FA  D001               	bra	u5725
 12018  0021FC  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 12019  0021FE                     u5725:
 12020  0021FE  0E01               	movlw	1
 12021  002200  1618               	andwf	??_disk_ioctl+4,f,c
 12022  002202  5018               	movf	??_disk_ioctl+4,w,c
 12023  002204  2616               	addwf	??_disk_ioctl+2,f,c
 12024  002206  0E00               	movlw	0
 12025  002208  2217               	addwfc	??_disk_ioctl+3,f,c
 12026  00220A  0E01               	movlw	1
 12027  00220C  2616               	addwf	??_disk_ioctl+2,f,c
 12028  00220E  0E00               	movlw	0
 12029  002210  2217               	addwfc	??_disk_ioctl+3,f,c
 12030  002212  2A14               	incf	??_disk_ioctl,f,c
 12031  002214  D003               	goto	u5734
 12032  002216                     u5735:
 12033  002216  90D8               	bcf	status,0,c
 12034  002218  3616               	rlcf	??_disk_ioctl+2,f,c
 12035  00221A  3617               	rlcf	??_disk_ioctl+3,f,c
 12036  00221C                     u5734:
 12037  00221C  2E14               	decfsz	??_disk_ioctl,f,c
 12038  00221E  D7FB               	goto	u5735
 12039  002220  5016               	movf	??_disk_ioctl+2,w,c
 12040  002222  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12041  002224  5017               	movf	??_disk_ioctl+3,w,c
 12042  002226  D034               	goto	L16
 12043  002228                     l4662:
 12044                           
 12045                           ; BSR set to: 0
 12046                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12047  002228  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12048  00222C  90D8               	bcf	status,0,c
 12049  00222E  3214               	rrcf	??_disk_ioctl,f,c
 12050  002230  90D8               	bcf	status,0,c
 12051  002232  3214               	rrcf	??_disk_ioctl,f,c
 12052  002234  0E1F               	movlw	31
 12053  002236  1614               	andwf	??_disk_ioctl,f,c
 12054  002238  0E01               	movlw	1
 12055  00223A  2414               	addwf	??_disk_ioctl,w,c
 12056  00223C  6E01               	movwf	___wmul@multiplier,c
 12057  00223E  6A02               	clrf	___wmul@multiplier+1,c
 12058  002240  0E00               	movlw	0
 12059  002242  2202               	addwfc	___wmul@multiplier+1,f,c
 12060  002244  502C               	movf	disk_ioctl@csd+11,w,c
 12061  002246  0B03               	andlw	3
 12062  002248  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12063  00224A  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12064  00224C  90D8               	bcf	status,0,c
 12065  00224E  3615               	rlcf	??_disk_ioctl+1,f,c
 12066  002250  3616               	rlcf	??_disk_ioctl+2,f,c
 12067  002252  90D8               	bcf	status,0,c
 12068  002254  3615               	rlcf	??_disk_ioctl+1,f,c
 12069  002256  3616               	rlcf	??_disk_ioctl+2,f,c
 12070  002258  90D8               	bcf	status,0,c
 12071  00225A  3615               	rlcf	??_disk_ioctl+1,f,c
 12072  00225C  3616               	rlcf	??_disk_ioctl+2,f,c
 12073  00225E  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12074  002262  0E05               	movlw	5
 12075  002264  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12076  002266                     u5745:
 12077  002266  90D8               	bcf	status,0,c
 12078  002268  3217               	rrcf	??_disk_ioctl+3,f,c
 12079  00226A  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12080  00226C  D7FC               	goto	u5745
 12081  00226E  0E07               	movlw	7
 12082  002270  1617               	andwf	??_disk_ioctl+3,f,c
 12083  002272  5017               	movf	??_disk_ioctl+3,w,c
 12084  002274  2615               	addwf	??_disk_ioctl+1,f,c
 12085  002276  0E00               	movlw	0
 12086  002278  2216               	addwfc	??_disk_ioctl+2,f,c
 12087  00227A  0E01               	movlw	1
 12088  00227C  2415               	addwf	??_disk_ioctl+1,w,c
 12089  00227E  6E03               	movwf	___wmul@multiplicand,c
 12090  002280  0E00               	movlw	0
 12091  002282  2016               	addwfc	??_disk_ioctl+2,w,c
 12092  002284  6E04               	movwf	___wmul@multiplicand+1,c
 12093  002286  ECCA  F02A         	call	___wmul	;wreg free
 12094  00228A  5001               	movf	?___wmul,w,c
 12095  00228C  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12096  00228E  5002               	movf	?___wmul+1,w,c
 12097  002290                     L16:
 12098  002290  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12099  002292  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12100  002294  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12101  002296  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12102  00229A  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12103  00229E  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12104  0022A2  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12105  0022A6  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12106  0022AA  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12107  0022AE  D667               	goto	u5550
 12108  0022B0                     l4666:
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;diskio.c: 507:   *ptr = CardType;
 12112  0022B0  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12113  0022B4  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12114  0022B8  C0D6  FFDF         	movff	_CardType,indf2
 12115  0022BC  D660               	goto	u5550
 12116  0022BE                     l4670:
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12120  0022BE  0E00               	movlw	0
 12121  0022C0  6E0B               	movwf	send_cmd@arg,c
 12122  0022C2  0E00               	movlw	0
 12123  0022C4  6E0C               	movwf	send_cmd@arg+1,c
 12124  0022C6  0E00               	movlw	0
 12125  0022C8  6E0D               	movwf	send_cmd@arg+2,c
 12126  0022CA  0E00               	movlw	0
 12127  0022CC  6E0E               	movwf	send_cmd@arg+3,c
 12128  0022CE  0E09               	movlw	9
 12129  0022D0  ECD7  F029         	call	_send_cmd
 12130  0022D4  0900               	iorlw	0
 12131  0022D6  A4D8               	btfss	status,2,c
 12132  0022D8  D087               	goto	l4708
 12133  0022DA  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12134  0022DE  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12135  0022E2  0E00               	movlw	0
 12136  0022E4  6E05               	movwf	rcvr_datablock@btr+1,c
 12137  0022E6  0E10               	movlw	16
 12138  0022E8  6E04               	movwf	rcvr_datablock@btr,c
 12139  0022EA  EC1F  F029         	call	_rcvr_datablock	;wreg free
 12140  0022EE                     L14:
 12141  0022EE  0900               	iorlw	0
 12142  0022F0  A4D8               	btfss	status,2,c
 12143  0022F2  D645               	goto	u5550
 12144  0022F4  D079               	goto	l4708
 12145  0022F6                     l4676:
 12146                           
 12147                           ; BSR set to: 0
 12148                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12149  0022F6  0E00               	movlw	0
 12150  0022F8  6E0B               	movwf	send_cmd@arg,c
 12151  0022FA  0E00               	movlw	0
 12152  0022FC  6E0C               	movwf	send_cmd@arg+1,c
 12153  0022FE  0E00               	movlw	0
 12154  002300  6E0D               	movwf	send_cmd@arg+2,c
 12155  002302  0E00               	movlw	0
 12156  002304  6E0E               	movwf	send_cmd@arg+3,c
 12157  002306  0E0A               	movlw	10
 12158  002308  ECD7  F029         	call	_send_cmd
 12159  00230C  0900               	iorlw	0
 12160  00230E  A4D8               	btfss	status,2,c
 12161  002310  D06B               	goto	l4708
 12162  002312  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12163  002316  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12164  00231A  0E00               	movlw	0
 12165  00231C  6E05               	movwf	rcvr_datablock@btr+1,c
 12166  00231E  0E10               	movlw	16
 12167  002320  6E04               	movwf	rcvr_datablock@btr,c
 12168  002322  EC1F  F029         	call	_rcvr_datablock	;wreg free
 12169  002326  D7E3               	goto	L14
 12170  002328                     l4682:
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12174  002328  0E00               	movlw	0
 12175  00232A  6E0B               	movwf	send_cmd@arg,c
 12176  00232C  0E00               	movlw	0
 12177  00232E  6E0C               	movwf	send_cmd@arg+1,c
 12178  002330  0E00               	movlw	0
 12179  002332  6E0D               	movwf	send_cmd@arg+2,c
 12180  002334  0E00               	movlw	0
 12181  002336  6E0E               	movwf	send_cmd@arg+3,c
 12182  002338  0E3A               	movlw	58
 12183  00233A  ECD7  F029         	call	_send_cmd
 12184  00233E  0900               	iorlw	0
 12185  002340  A4D8               	btfss	status,2,c
 12186  002342  D052               	goto	l4708
 12187                           
 12188                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12189  002344  0E04               	movlw	4
 12190  002346  6E37               	movwf	disk_ioctl@n,c
 12191  002348  D00B               	goto	l4692
 12192  00234A                     l4686:
 12193  00234A  0EFF               	movlw	255
 12194  00234C  ECFE  F02A         	call	_SPI1_Exchange8bit
 12195  002350  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12196  002354  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12197  002358  6EDF               	movwf	indf2,c
 12198  00235A  4A38               	infsnz	disk_ioctl@ptr,f,c
 12199  00235C  2A39               	incf	disk_ioctl@ptr+1,f,c
 12200  00235E  0637               	decf	disk_ioctl@n,f,c
 12201  002360                     l4692:
 12202  002360  5037               	movf	disk_ioctl@n,w,c
 12203  002362  B4D8               	btfsc	status,2,c
 12204  002364  D60C               	goto	u5550
 12205  002366  D7F1               	goto	l4686
 12206  002368                     l4696:
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12210  002368  0E00               	movlw	0
 12211  00236A  6E0B               	movwf	send_cmd@arg,c
 12212  00236C  0E00               	movlw	0
 12213  00236E  6E0C               	movwf	send_cmd@arg+1,c
 12214  002370  0E00               	movlw	0
 12215  002372  6E0D               	movwf	send_cmd@arg+2,c
 12216  002374  0E00               	movlw	0
 12217  002376  6E0E               	movwf	send_cmd@arg+3,c
 12218  002378  0E8D               	movlw	141
 12219  00237A  ECD7  F029         	call	_send_cmd
 12220  00237E  0900               	iorlw	0
 12221  002380  A4D8               	btfss	status,2,c
 12222  002382  D032               	goto	l4708
 12223                           
 12224                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12225  002384  0EFF               	movlw	255
 12226  002386  ECFE  F02A         	call	_SPI1_Exchange8bit
 12227                           
 12228                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12229  00238A  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12230  00238E  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12231  002392  0E00               	movlw	0
 12232  002394  6E05               	movwf	rcvr_datablock@btr+1,c
 12233  002396  0E40               	movlw	64
 12234  002398  6E04               	movwf	rcvr_datablock@btr,c
 12235  00239A  EC1F  F029         	call	_rcvr_datablock	;wreg free
 12236  00239E  D7A7               	goto	L14
 12237  0023A0                     l4704:
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;diskio.c: 539:   res = RES_PARERR;
 12241  0023A0  0E04               	movlw	4
 12242  0023A2                     L13:
 12243  0023A2  6E36               	movwf	disk_ioctl@res,c
 12244                           
 12245                           ;diskio.c: 540:  }
 12246  0023A4  D021               	goto	l4708
 12247  0023A6                     l4706:
 12248                           
 12249                           ; BSR set to: 0
 12250  0023A6  5011               	movf	disk_ioctl@cmd,w,c
 12251  0023A8  6E14               	movwf	??_disk_ioctl& (0+255),c
 12252  0023AA  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12253                           
 12254                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12255                           ; Switch size 1, requested type "simple"
 12256                           ; Number of cases is 1, Range of values is 0 to 0
 12257                           ; switch strategies available:
 12258                           ; Name         Instructions Cycles
 12259                           ; simple_byte            4     3 (average)
 12260                           ;	Chosen strategy is simple_byte
 12261  0023AC  5015               	movf	??_disk_ioctl+1,w,c
 12262  0023AE  0A00               	xorlw	0	; case 0
 12263  0023B0  A4D8               	btfss	status,2,c
 12264  0023B2  D7F6               	goto	l4704
 12265                           
 12266                           ; BSR set to: 0
 12267                           ; Switch size 1, requested type "simple"
 12268                           ; Number of cases is 8, Range of values is 0 to 14
 12269                           ; switch strategies available:
 12270                           ; Name         Instructions Cycles
 12271                           ; simple_byte           25    13 (average)
 12272                           ;	Chosen strategy is simple_byte
 12273  0023B4  5014               	movf	??_disk_ioctl,w,c
 12274  0023B6  0A00               	xorlw	0	; case 0
 12275  0023B8  B4D8               	btfsc	status,2,c
 12276  0023BA  D5DC               	goto	l4614
 12277  0023BC  0A01               	xorlw	1	; case 1
 12278  0023BE  B4D8               	btfsc	status,2,c
 12279  0023C0  D5E0               	goto	l4618
 12280  0023C2  0A02               	xorlw	2	; case 3
 12281  0023C4  B4D8               	btfsc	status,2,c
 12282  0023C6  D69E               	goto	l218
 12283  0023C8  0A09               	xorlw	9	; case 10
 12284  0023CA  B4D8               	btfsc	status,2,c
 12285  0023CC  D771               	goto	l4666
 12286  0023CE  0A01               	xorlw	1	; case 11
 12287  0023D0  B4D8               	btfsc	status,2,c
 12288  0023D2  D775               	goto	l4670
 12289  0023D4  0A07               	xorlw	7	; case 12
 12290  0023D6  B4D8               	btfsc	status,2,c
 12291  0023D8  D78E               	goto	l4676
 12292  0023DA  0A01               	xorlw	1	; case 13
 12293  0023DC  B4D8               	btfsc	status,2,c
 12294  0023DE  D7A4               	goto	l4682
 12295  0023E0  0A03               	xorlw	3	; case 14
 12296  0023E2  B4D8               	btfsc	status,2,c
 12297  0023E4  D7C1               	goto	l4696
 12298  0023E6  D7DC               	goto	l4704
 12299  0023E8                     l4708:
 12300                           
 12301                           ;diskio.c: 542:  deselect();
 12302  0023E8  EC1B  F02B         	call	_deselect	;wreg free
 12303                           
 12304                           ;diskio.c: 544:  return res;
 12305  0023EC  5036               	movf	disk_ioctl@res,w,c
 12306  0023EE  0012               	return		;funcret
 12307  0023F0                     __end_of_disk_ioctl:
 12308                           	opt callstack 0
 12309                           
 12310 ;; *************** function ___wmul *****************
 12311 ;; Defined at:
 12312 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;  multiplier      2    0[COMRAM] unsigned int 
 12315 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;  product         2    4[COMRAM] unsigned int 
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  2    0[COMRAM] unsigned int 
 12320 ;; Registers used:
 12321 ;;		wreg, status,2, status,0, prodl, prodh
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12327 ;;      Params:         4       0       0       0       0       0       0       0       0
 12328 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12329 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12330 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12331 ;;Total ram usage:        6 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; This function calls:
 12334 ;;		Nothing
 12335 ;; This function is called by:
 12336 ;;		_disk_ioctl
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340                           	psect	text36
 12341  005594                     __ptext36:
 12342                           	opt callstack 0
 12343  005594                     ___wmul:
 12344                           	opt callstack 25
 12345                           
 12346                           ;incstack = 0
 12347  005594  5001               	movf	___wmul@multiplier,w,c
 12348  005596  0203               	mulwf	___wmul@multiplicand,c
 12349  005598  CFF3 F005          	movff	prodl,___wmul@product
 12350  00559C  CFF4 F006          	movff	prodh,___wmul@product+1
 12351  0055A0  5001               	movf	___wmul@multiplier,w,c
 12352  0055A2  0204               	mulwf	___wmul@multiplicand+1,c
 12353  0055A4  50F3               	movf	prodl,w,c
 12354  0055A6  2606               	addwf	___wmul@product+1,f,c
 12355  0055A8  5002               	movf	___wmul@multiplier+1,w,c
 12356  0055AA  0203               	mulwf	___wmul@multiplicand,c
 12357  0055AC  50F3               	movf	prodl,w,c
 12358  0055AE  2606               	addwf	___wmul@product+1,f,c
 12359  0055B0  C005  F001         	movff	___wmul@product,?___wmul
 12360  0055B4  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12361  0055B8  0012               	return		;funcret
 12362  0055BA                     __end_of___wmul:
 12363                           	opt callstack 0
 12364                           
 12365 ;; *************** function _st_clust *****************
 12366 ;; Defined at:
 12367 ;;		line 1252 in file "ff.c"
 12368 ;; Parameters:    Size  Location     Type
 12369 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12370 ;;		 -> NULL(0), FatFs(558), 
 12371 ;;  cl              4    2[COMRAM] unsigned long 
 12372 ;; Auto vars:     Size  Location     Type
 12373 ;;		None
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  1    wreg      void 
 12376 ;; Registers used:
 12377 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12378 ;; Tracked objects:
 12379 ;;		On entry : 0/0
 12380 ;;		On exit  : 0/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12383 ;;      Params:         6       0       0       0       0       0       0       0       0
 12384 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12385 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12386 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12387 ;;Total ram usage:        6 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; This function calls:
 12390 ;;		Nothing
 12391 ;; This function is called by:
 12392 ;;		_f_open
 12393 ;;		_f_sync
 12394 ;; This function uses a non-reentrant model
 12395 ;;
 12396                           
 12397                           	psect	text37
 12398  00556A                     __ptext37:
 12399                           	opt callstack 0
 12400  00556A                     _st_clust:
 12401                           	opt callstack 28
 12402                           
 12403                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12404                           
 12405                           ;incstack = 0
 12406  00556A  EE20 F01A          	lfsr	2,26
 12407  00556E  5001               	movf	st_clust@dir,w,c
 12408  005570  26D9               	addwf	fsr2l,f,c
 12409  005572  5002               	movf	st_clust@dir+1,w,c
 12410  005574  22DA               	addwfc	fsr2h,f,c
 12411  005576  C003  FFDE         	movff	st_clust@cl,postinc2
 12412  00557A  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12413                           
 12414                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12415  00557E  EE20 F014          	lfsr	2,20
 12416  005582  5001               	movf	st_clust@dir,w,c
 12417  005584  26D9               	addwf	fsr2l,f,c
 12418  005586  5002               	movf	st_clust@dir+1,w,c
 12419  005588  22DA               	addwfc	fsr2h,f,c
 12420  00558A  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12421  00558E  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12422  005592  0012               	return		;funcret
 12423  005594                     __end_of_st_clust:
 12424                           	opt callstack 0
 12425                           
 12426 ;; *************** function _move_window *****************
 12427 ;; Defined at:
 12428 ;;		line 729 in file "ff.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;  fs              2   47[COMRAM] PTR struct .
 12431 ;;		 -> NULL(0), FatFs(558), 
 12432 ;;  sector          4   49[COMRAM] unsigned long 
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;  res             1   57[COMRAM] enum E93
 12435 ;; Return value:  Size  Location     Type
 12436 ;;                  1    wreg      enum E93
 12437 ;; Registers used:
 12438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12444 ;;      Params:         6       0       0       0       0       0       0       0       0
 12445 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12446 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12447 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12448 ;;Total ram usage:       11 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:    7
 12451 ;; This function calls:
 12452 ;;		_disk_read
 12453 ;;		_sync_window
 12454 ;; This function is called by:
 12455 ;;		_get_fat
 12456 ;;		_put_fat
 12457 ;;		_dir_alloc
 12458 ;;		_dir_find
 12459 ;;		_dir_register
 12460 ;;		_check_fs
 12461 ;;		_find_volume
 12462 ;;		_f_open
 12463 ;;		_f_write
 12464 ;;		_f_sync
 12465 ;;		_f_read
 12466 ;; This function uses a non-reentrant model
 12467 ;;
 12468                           
 12469                           	psect	text38
 12470  004F06                     __ptext38:
 12471                           	opt callstack 0
 12472  004F06                     _move_window:
 12473                           	opt callstack 21
 12474                           
 12475                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12476                           
 12477                           ;incstack = 0
 12478  004F06  0E00               	movlw	0
 12479  004F08  6E3A               	movwf	move_window@res,c
 12480                           
 12481                           ;ff.c: 737:  if (sector != fs->winsect) {
 12482  004F0A  EE20 F02A          	lfsr	2,42
 12483  004F0E  5030               	movf	move_window@fs,w,c
 12484  004F10  26D9               	addwf	fsr2l,f,c
 12485  004F12  5031               	movf	move_window@fs+1,w,c
 12486  004F14  22DA               	addwfc	fsr2h,f,c
 12487  004F16  5032               	movf	move_window@sector,w,c
 12488  004F18  18DE               	xorwf	postinc2,w,c
 12489  004F1A  E10A               	bnz	u5050
 12490  004F1C  5033               	movf	move_window@sector+1,w,c
 12491  004F1E  18DE               	xorwf	postinc2,w,c
 12492  004F20  E107               	bnz	u5050
 12493  004F22  5034               	movf	move_window@sector+2,w,c
 12494  004F24  18DE               	xorwf	postinc2,w,c
 12495  004F26  E104               	bnz	u5050
 12496  004F28  5035               	movf	move_window@sector+3,w,c
 12497  004F2A  18DE               	xorwf	postinc2,w,c
 12498  004F2C  B4D8               	btfsc	status,2,c
 12499  004F2E  D03C               	goto	l4340
 12500  004F30                     u5050:
 12501                           
 12502                           ;ff.c: 739:   res = sync_window(fs);
 12503  004F30  C030  F01B         	movff	move_window@fs,sync_window@fs
 12504  004F34  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12505  004F38  ECA1  F01F         	call	_sync_window	;wreg free
 12506  004F3C  6E3A               	movwf	move_window@res,c
 12507                           
 12508                           ;ff.c: 741:   if (res == FR_OK) {
 12509  004F3E  503A               	movf	move_window@res,w,c
 12510  004F40  A4D8               	btfss	status,2,c
 12511  004F42  D032               	goto	l4340
 12512                           
 12513                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12514  004F44  0E2E               	movlw	46
 12515  004F46  2430               	addwf	move_window@fs,w,c
 12516  004F48  6E11               	movwf	disk_read@buff,c
 12517  004F4A  0E00               	movlw	0
 12518  004F4C  2031               	addwfc	move_window@fs+1,w,c
 12519  004F4E  6E12               	movwf	disk_read@buff+1,c
 12520  004F50  C032  F013         	movff	move_window@sector,disk_read@sector
 12521  004F54  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12522  004F58  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12523  004F5C  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12524  004F60  0E00               	movlw	0
 12525  004F62  6E18               	movwf	disk_read@count+1,c
 12526  004F64  0E01               	movlw	1
 12527  004F66  6E17               	movwf	disk_read@count,c
 12528  004F68  EE20 F001          	lfsr	2,1
 12529  004F6C  5030               	movf	move_window@fs,w,c
 12530  004F6E  26D9               	addwf	fsr2l,f,c
 12531  004F70  5031               	movf	move_window@fs+1,w,c
 12532  004F72  22DA               	addwfc	fsr2h,f,c
 12533  004F74  50DF               	movf	indf2,w,c
 12534  004F76  EC0B  F026         	call	_disk_read
 12535  004F7A  0900               	iorlw	0
 12536  004F7C  B4D8               	btfsc	status,2,c
 12537  004F7E  D006               	goto	l4338
 12538                           
 12539                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12540  004F80  6832               	setf	move_window@sector,c
 12541  004F82  6833               	setf	move_window@sector+1,c
 12542  004F84  6834               	setf	move_window@sector+2,c
 12543  004F86  6835               	setf	move_window@sector+3,c
 12544                           
 12545                           ;ff.c: 744:     res = FR_DISK_ERR;
 12546  004F88  0E01               	movlw	1
 12547  004F8A  6E3A               	movwf	move_window@res,c
 12548  004F8C                     l4338:
 12549                           
 12550                           ;ff.c: 746:    fs->winsect = sector;
 12551  004F8C  EE20 F02A          	lfsr	2,42
 12552  004F90  5030               	movf	move_window@fs,w,c
 12553  004F92  26D9               	addwf	fsr2l,f,c
 12554  004F94  5031               	movf	move_window@fs+1,w,c
 12555  004F96  22DA               	addwfc	fsr2h,f,c
 12556  004F98  C032  FFDE         	movff	move_window@sector,postinc2
 12557  004F9C  C033  FFDE         	movff	move_window@sector+1,postinc2
 12558  004FA0  C034  FFDE         	movff	move_window@sector+2,postinc2
 12559  004FA4  C035  FFDE         	movff	move_window@sector+3,postinc2
 12560  004FA8                     l4340:
 12561                           
 12562                           ;ff.c: 749:  return res;
 12563  004FA8  503A               	movf	move_window@res,w,c
 12564  004FAA  0012               	return		;funcret
 12565  004FAC                     __end_of_move_window:
 12566                           	opt callstack 0
 12567                           
 12568 ;; *************** function _sync_window *****************
 12569 ;; Defined at:
 12570 ;;		line 700 in file "ff.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  fs              2   26[COMRAM] PTR struct .
 12573 ;;		 -> NULL(0), FatFs(558), 
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  wsect           4   43[COMRAM] unsigned long 
 12576 ;;  nf              2   41[COMRAM] unsigned short 
 12577 ;;  res             1   40[COMRAM] enum E93
 12578 ;; Return value:  Size  Location     Type
 12579 ;;                  1    wreg      enum E93
 12580 ;; Registers used:
 12581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12587 ;;      Params:         2       0       0       0       0       0       0       0       0
 12588 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12589 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12590 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12591 ;;Total ram usage:       21 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; Hardware stack levels required when called:    6
 12594 ;; This function calls:
 12595 ;;		_disk_write
 12596 ;; This function is called by:
 12597 ;;		_move_window
 12598 ;;		_sync_fs
 12599 ;;		_dir_next
 12600 ;;		_f_write
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           	psect	text39
 12605  003F42                     __ptext39:
 12606                           	opt callstack 0
 12607  003F42                     _sync_window:
 12608                           	opt callstack 22
 12609                           
 12610                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12611                           
 12612                           ;incstack = 0
 12613  003F42  0E00               	movlw	0
 12614  003F44  6E29               	movwf	sync_window@res,c
 12615                           
 12616                           ;ff.c: 709:  if (fs->wflag) {
 12617  003F46  EE20 F004          	lfsr	2,4
 12618  003F4A  501B               	movf	sync_window@fs,w,c
 12619  003F4C  26D9               	addwf	fsr2l,f,c
 12620  003F4E  501C               	movf	sync_window@fs+1,w,c
 12621  003F50  22DA               	addwfc	fsr2h,f,c
 12622  003F52  50DF               	movf	indf2,w,c
 12623  003F54  B4D8               	btfsc	status,2,c
 12624  003F56  D09F               	goto	l4320
 12625                           
 12626                           ;ff.c: 710:   wsect = fs->winsect;
 12627  003F58  EE20 F02A          	lfsr	2,42
 12628  003F5C  501B               	movf	sync_window@fs,w,c
 12629  003F5E  26D9               	addwf	fsr2l,f,c
 12630  003F60  501C               	movf	sync_window@fs+1,w,c
 12631  003F62  22DA               	addwfc	fsr2h,f,c
 12632  003F64  CFDE F02C          	movff	postinc2,sync_window@wsect
 12633  003F68  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12634  003F6C  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12635  003F70  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12636                           
 12637                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12638  003F74  0E2E               	movlw	46
 12639  003F76  241B               	addwf	sync_window@fs,w,c
 12640  003F78  6E11               	movwf	disk_write@buff,c
 12641  003F7A  0E00               	movlw	0
 12642  003F7C  201C               	addwfc	sync_window@fs+1,w,c
 12643  003F7E  6E12               	movwf	disk_write@buff+1,c
 12644  003F80  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12645  003F84  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12646  003F88  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12647  003F8C  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12648  003F90  0E00               	movlw	0
 12649  003F92  6E18               	movwf	disk_write@count+1,c
 12650  003F94  0E01               	movlw	1
 12651  003F96  6E17               	movwf	disk_write@count,c
 12652  003F98  EE20 F001          	lfsr	2,1
 12653  003F9C  501B               	movf	sync_window@fs,w,c
 12654  003F9E  26D9               	addwf	fsr2l,f,c
 12655  003FA0  501C               	movf	sync_window@fs+1,w,c
 12656  003FA2  22DA               	addwfc	fsr2h,f,c
 12657  003FA4  50DF               	movf	indf2,w,c
 12658  003FA6  ECD8  F022         	call	_disk_write
 12659  003FAA  0900               	iorlw	0
 12660  003FAC  B4D8               	btfsc	status,2,c
 12661  003FAE  D003               	goto	l4302
 12662                           
 12663                           ;ff.c: 712:    res = FR_DISK_ERR;
 12664  003FB0  0E01               	movlw	1
 12665  003FB2  6E29               	movwf	sync_window@res,c
 12666                           
 12667                           ;ff.c: 713:   } else {
 12668  003FB4  D070               	goto	l4320
 12669  003FB6                     l4302:
 12670                           
 12671                           ;ff.c: 714:    fs->wflag = 0;
 12672  003FB6  EE20 F004          	lfsr	2,4
 12673  003FBA  501B               	movf	sync_window@fs,w,c
 12674  003FBC  26D9               	addwf	fsr2l,f,c
 12675  003FBE  501C               	movf	sync_window@fs+1,w,c
 12676  003FC0  22DA               	addwfc	fsr2h,f,c
 12677  003FC2  0E00               	movlw	0
 12678  003FC4  6EDF               	movwf	indf2,c
 12679                           
 12680                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12681  003FC6  EE20 F016          	lfsr	2,22
 12682  003FCA  501B               	movf	sync_window@fs,w,c
 12683  003FCC  26D9               	addwf	fsr2l,f,c
 12684  003FCE  501C               	movf	sync_window@fs+1,w,c
 12685  003FD0  22DA               	addwfc	fsr2h,f,c
 12686  003FD2  EE10 F01E          	lfsr	1,30
 12687  003FD6  501B               	movf	sync_window@fs,w,c
 12688  003FD8  26E1               	addwf	fsr1l,f,c
 12689  003FDA  501C               	movf	sync_window@fs+1,w,c
 12690  003FDC  22E2               	addwfc	fsr1h,f,c
 12691  003FDE  CFE6 F021          	movff	postinc1,??_sync_window+4
 12692  003FE2  CFE6 F022          	movff	postinc1,??_sync_window+5
 12693  003FE6  CFE6 F023          	movff	postinc1,??_sync_window+6
 12694  003FEA  CFE6 F024          	movff	postinc1,??_sync_window+7
 12695  003FEE  5021               	movf	??_sync_window+4,w,c
 12696  003FF0  5C2C               	subwf	sync_window@wsect,w,c
 12697  003FF2  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12698  003FF4  5022               	movf	??_sync_window+5,w,c
 12699  003FF6  582D               	subwfb	sync_window@wsect+1,w,c
 12700  003FF8  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12701  003FFA  5023               	movf	??_sync_window+6,w,c
 12702  003FFC  582E               	subwfb	sync_window@wsect+2,w,c
 12703  003FFE  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12704  004000  5024               	movf	??_sync_window+7,w,c
 12705  004002  582F               	subwfb	sync_window@wsect+3,w,c
 12706  004004  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12707  004006  50DE               	movf	postinc2,w,c
 12708  004008  5C25               	subwf	??_sync_window+8,w,c
 12709  00400A  50DE               	movf	postinc2,w,c
 12710  00400C  5826               	subwfb	??_sync_window+9,w,c
 12711  00400E  50DE               	movf	postinc2,w,c
 12712  004010  5827               	subwfb	??_sync_window+10,w,c
 12713  004012  50DE               	movf	postinc2,w,c
 12714  004014  5828               	subwfb	??_sync_window+11,w,c
 12715  004016  B0D8               	btfsc	status,0,c
 12716  004018  D03E               	goto	l4320
 12717                           
 12718                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12719  00401A  EE20 F003          	lfsr	2,3
 12720  00401E  501B               	movf	sync_window@fs,w,c
 12721  004020  26D9               	addwf	fsr2l,f,c
 12722  004022  501C               	movf	sync_window@fs+1,w,c
 12723  004024  22DA               	addwfc	fsr2h,f,c
 12724  004026  50DF               	movf	indf2,w,c
 12725  004028  6E1D               	movwf	??_sync_window& (0+255),c
 12726  00402A  501D               	movf	??_sync_window,w,c
 12727  00402C  6E2A               	movwf	sync_window@nf,c
 12728  00402E  6A2B               	clrf	sync_window@nf+1,c
 12729  004030                     l4308:
 12730  004030  502B               	movf	sync_window@nf+1,w,c
 12731  004032  E104               	bnz	l4312
 12732  004034  0E02               	movlw	2
 12733  004036  5C2A               	subwf	sync_window@nf,w,c
 12734  004038  A0D8               	btfss	status,0,c
 12735  00403A  D02D               	goto	l4320
 12736  00403C                     l4312:
 12737                           
 12738                           ;ff.c: 717:      wsect += fs->fsize;
 12739  00403C  EE20 F016          	lfsr	2,22
 12740  004040  501B               	movf	sync_window@fs,w,c
 12741  004042  26D9               	addwf	fsr2l,f,c
 12742  004044  501C               	movf	sync_window@fs+1,w,c
 12743  004046  22DA               	addwfc	fsr2h,f,c
 12744  004048  50DE               	movf	postinc2,w,c
 12745  00404A  262C               	addwf	sync_window@wsect,f,c
 12746  00404C  50DE               	movf	postinc2,w,c
 12747  00404E  222D               	addwfc	sync_window@wsect+1,f,c
 12748  004050  50DE               	movf	postinc2,w,c
 12749  004052  222E               	addwfc	sync_window@wsect+2,f,c
 12750  004054  50DD               	movf	postdec2,w,c
 12751  004056  222F               	addwfc	sync_window@wsect+3,f,c
 12752                           
 12753                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12754  004058  0E2E               	movlw	46
 12755  00405A  241B               	addwf	sync_window@fs,w,c
 12756  00405C  6E11               	movwf	disk_write@buff,c
 12757  00405E  0E00               	movlw	0
 12758  004060  201C               	addwfc	sync_window@fs+1,w,c
 12759  004062  6E12               	movwf	disk_write@buff+1,c
 12760  004064  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12761  004068  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12762  00406C  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12763  004070  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12764  004074  0E00               	movlw	0
 12765  004076  6E18               	movwf	disk_write@count+1,c
 12766  004078  0E01               	movlw	1
 12767  00407A  6E17               	movwf	disk_write@count,c
 12768  00407C  EE20 F001          	lfsr	2,1
 12769  004080  501B               	movf	sync_window@fs,w,c
 12770  004082  26D9               	addwf	fsr2l,f,c
 12771  004084  501C               	movf	sync_window@fs+1,w,c
 12772  004086  22DA               	addwfc	fsr2h,f,c
 12773  004088  50DF               	movf	indf2,w,c
 12774  00408A  ECD8  F022         	call	_disk_write
 12775                           
 12776                           ;ff.c: 719:     }
 12777  00408E  062A               	decf	sync_window@nf,f,c
 12778  004090  A0D8               	btfss	status,0,c
 12779  004092  062B               	decf	sync_window@nf+1,f,c
 12780  004094  D7CD               	goto	l4308
 12781  004096                     l4320:
 12782                           
 12783                           ;ff.c: 723:  return res;
 12784  004096  5029               	movf	sync_window@res,w,c
 12785  004098  0012               	return		;funcret
 12786  00409A                     __end_of_sync_window:
 12787                           	opt callstack 0
 12788                           
 12789 ;; *************** function _disk_write *****************
 12790 ;; Defined at:
 12791 ;;		line 405 in file "diskio.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  pdrv            1    wreg     unsigned char 
 12794 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12795 ;;		 -> FatFs.win(512), NULL(0), STR_4(21), FatFs(558), 
 12796 ;;  sector          4   18[COMRAM] unsigned long 
 12797 ;;  count           2   22[COMRAM] unsigned short 
 12798 ;; Auto vars:     Size  Location     Type
 12799 ;;  pdrv            1   25[COMRAM] unsigned char 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;                  1    wreg      enum E43
 12802 ;; Registers used:
 12803 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12809 ;;      Params:         8       0       0       0       0       0       0       0       0
 12810 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12811 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12812 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12813 ;;Total ram usage:       10 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    5
 12816 ;; This function calls:
 12817 ;;		_deselect
 12818 ;;		_send_cmd
 12819 ;;		_xmit_datablock
 12820 ;; This function is called by:
 12821 ;;		_sync_window
 12822 ;;		_sync_fs
 12823 ;;		_f_write
 12824 ;; This function uses a non-reentrant model
 12825 ;;
 12826                           
 12827                           	psect	text40
 12828  0045B0                     __ptext40:
 12829                           	opt callstack 0
 12830  0045B0                     _disk_write:
 12831                           	opt callstack 22
 12832                           
 12833                           ;incstack = 0
 12834                           ;disk_write@pdrv stored from wreg
 12835  0045B0  6E1A               	movwf	disk_write@pdrv,c
 12836                           
 12837                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 12838  0045B2  501A               	movf	disk_write@pdrv,w,c
 12839  0045B4  A4D8               	btfss	status,2,c
 12840  0045B6  D004               	goto	u4740
 12841  0045B8  5017               	movf	disk_write@count,w,c
 12842  0045BA  1018               	iorwf	disk_write@count+1,w,c
 12843  0045BC  A4D8               	btfss	status,2,c
 12844  0045BE  D002               	goto	l189
 12845  0045C0                     u4740:
 12846  0045C0  0E04               	movlw	4
 12847  0045C2  0012               	return	
 12848  0045C4                     l189:
 12849                           
 12850                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 12851  0045C4  0100               	movlb	0	; () banked
 12852  0045C6  A1F7               	btfss	_Stat& (0+255),0,b
 12853  0045C8  D002               	goto	l193
 12854                           
 12855                           ; BSR set to: 0
 12856  0045CA  0E03               	movlw	3
 12857  0045CC  0012               	return	
 12858  0045CE                     l193:
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 12862  0045CE  A5F7               	btfss	_Stat& (0+255),2,b
 12863  0045D0  D002               	goto	l194
 12864                           
 12865                           ; BSR set to: 0
 12866  0045D2  0E02               	movlw	2
 12867  0045D4  0012               	return	
 12868  0045D6                     l194:
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 12872  0045D6  B7D6               	btfsc	_CardType& (0+255),3,b
 12873  0045D8  D008               	goto	l195
 12874                           
 12875                           ; BSR set to: 0
 12876  0045DA  0E09               	movlw	9
 12877  0045DC                     u4785:
 12878  0045DC  90D8               	bcf	status,0,c
 12879  0045DE  3613               	rlcf	disk_write@sector,f,c
 12880  0045E0  3614               	rlcf	disk_write@sector+1,f,c
 12881  0045E2  3615               	rlcf	disk_write@sector+2,f,c
 12882  0045E4  3616               	rlcf	disk_write@sector+3,f,c
 12883  0045E6  2EE8               	decfsz	wreg,f,c
 12884  0045E8  D7F9               	goto	u4785
 12885  0045EA                     l195:
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;diskio.c: 418:  if (count == 1) {
 12889  0045EA  0417               	decf	disk_write@count,w,c
 12890  0045EC  1018               	iorwf	disk_write@count+1,w,c
 12891  0045EE  A4D8               	btfss	status,2,c
 12892  0045F0  D01D               	goto	l4234
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 12896  0045F2  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12897  0045F6  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12898  0045FA  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12899  0045FE  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12900  004602  0E18               	movlw	24
 12901  004604  ECD7  F029         	call	_send_cmd
 12902  004608  0900               	iorlw	0
 12903  00460A  A4D8               	btfss	status,2,c
 12904  00460C  D04F               	goto	l4248
 12905  00460E  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12906  004612  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12907  004616  0EFE               	movlw	254
 12908  004618  6E06               	movwf	xmit_datablock@token,c
 12909  00461A  ECE1  F028         	call	_xmit_datablock	;wreg free
 12910  00461E  0900               	iorlw	0
 12911  004620  B4D8               	btfsc	status,2,c
 12912  004622  D044               	goto	l4248
 12913                           
 12914                           ;diskio.c: 421:    count = 0;
 12915  004624  0E00               	movlw	0
 12916  004626  6E18               	movwf	disk_write@count+1,c
 12917  004628  0E00               	movlw	0
 12918  00462A  D03F               	goto	L17
 12919  00462C                     l4234:
 12920                           
 12921                           ; BSR set to: 0
 12922                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 12923  00462C  C0D6  F019         	movff	_CardType,??_disk_write
 12924  004630  0E06               	movlw	6
 12925  004632  1619               	andwf	??_disk_write,f,c
 12926  004634  B4D8               	btfsc	status,2,c
 12927  004636  D009               	goto	l199
 12928                           
 12929                           ; BSR set to: 0
 12930  004638  C017  F00B         	movff	disk_write@count,send_cmd@arg
 12931  00463C  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 12932  004640  6A0D               	clrf	send_cmd@arg+2,c
 12933  004642  6A0E               	clrf	send_cmd@arg+3,c
 12934  004644  0E97               	movlw	151
 12935  004646  ECD7  F029         	call	_send_cmd
 12936  00464A                     l199:
 12937                           
 12938                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 12939  00464A  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12940  00464E  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12941  004652  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12942  004656  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12943  00465A  0E19               	movlw	25
 12944  00465C  ECD7  F029         	call	_send_cmd
 12945  004660  0900               	iorlw	0
 12946  004662  A4D8               	btfss	status,2,c
 12947  004664  D023               	goto	l4248
 12948  004666                     u4830:
 12949                           
 12950                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 12951  004666  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12952  00466A  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12953  00466E  0EFC               	movlw	252
 12954  004670  6E06               	movwf	xmit_datablock@token,c
 12955  004672  ECE1  F028         	call	_xmit_datablock	;wreg free
 12956  004676  0900               	iorlw	0
 12957  004678  B4D8               	btfsc	status,2,c
 12958  00467A  D009               	goto	u4850
 12959                           
 12960                           ;diskio.c: 428:     buff += 512;
 12961  00467C  0E02               	movlw	2
 12962  00467E  2612               	addwf	disk_write@buff+1,f,c
 12963                           
 12964                           ;diskio.c: 429:    } while (--count);
 12965  004680  0617               	decf	disk_write@count,f,c
 12966  004682  A0D8               	btfss	status,0,c
 12967  004684  0618               	decf	disk_write@count+1,f,c
 12968  004686  5017               	movf	disk_write@count,w,c
 12969  004688  1018               	iorwf	disk_write@count+1,w,c
 12970  00468A  A4D8               	btfss	status,2,c
 12971  00468C  D7EC               	goto	u4830
 12972  00468E                     u4850:
 12973                           
 12974                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 12975  00468E  0E00               	movlw	0
 12976  004690  6E04               	movwf	xmit_datablock@buff,c
 12977  004692  0E00               	movlw	0
 12978  004694  6E05               	movwf	xmit_datablock@buff+1,c
 12979  004696  0EFD               	movlw	253
 12980  004698  6E06               	movwf	xmit_datablock@token,c
 12981  00469A  ECE1  F028         	call	_xmit_datablock	;wreg free
 12982  00469E  0900               	iorlw	0
 12983  0046A0  A4D8               	btfss	status,2,c
 12984  0046A2  D004               	goto	l4248
 12985                           
 12986                           ;diskio.c: 431:     count = 1;
 12987  0046A4  0E00               	movlw	0
 12988  0046A6  6E18               	movwf	disk_write@count+1,c
 12989  0046A8  0E01               	movlw	1
 12990  0046AA                     L17:
 12991  0046AA  6E17               	movwf	disk_write@count,c
 12992  0046AC                     l4248:
 12993                           
 12994                           ;diskio.c: 434:  deselect();
 12995  0046AC  EC1B  F02B         	call	_deselect	;wreg free
 12996                           
 12997                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 12998  0046B0  5017               	movf	disk_write@count,w,c
 12999  0046B2  1018               	iorwf	disk_write@count+1,w,c
 13000  0046B4  B4D8               	btfsc	status,2,c
 13001  0046B6  D002               	goto	u4870
 13002  0046B8  0E01               	movlw	1
 13003  0046BA  0012               	return	
 13004  0046BC                     u4870:
 13005  0046BC  0E00               	movlw	0
 13006  0046BE  0012               	return		;funcret
 13007  0046C0                     __end_of_disk_write:
 13008                           	opt callstack 0
 13009                           
 13010 ;; *************** function _xmit_datablock *****************
 13011 ;; Defined at:
 13012 ;;		line 156 in file "diskio.c"
 13013 ;; Parameters:    Size  Location     Type
 13014 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13015 ;;		 -> FatFs.win(512), NULL(0), STR_4(21), FatFs(558), 
 13016 ;;  token           1    5[COMRAM] unsigned char 
 13017 ;; Auto vars:     Size  Location     Type
 13018 ;;  i               2    6[COMRAM] unsigned short 
 13019 ;;  resp            1    8[COMRAM] unsigned char 
 13020 ;; Return value:  Size  Location     Type
 13021 ;;                  1    wreg      unsigned char 
 13022 ;; Registers used:
 13023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13024 ;; Tracked objects:
 13025 ;;		On entry : 0/0
 13026 ;;		On exit  : 0/0
 13027 ;;		Unchanged: 0/0
 13028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13029 ;;      Params:         3       0       0       0       0       0       0       0       0
 13030 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13031 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13032 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13033 ;;Total ram usage:        6 bytes
 13034 ;; Hardware stack levels used:    1
 13035 ;; Hardware stack levels required when called:    2
 13036 ;; This function calls:
 13037 ;;		_SPI1_Exchange8bit
 13038 ;;		_wait_ready
 13039 ;; This function is called by:
 13040 ;;		_disk_write
 13041 ;; This function uses a non-reentrant model
 13042 ;;
 13043                           
 13044                           	psect	text41
 13045  0051C2                     __ptext41:
 13046                           	opt callstack 0
 13047  0051C2                     _xmit_datablock:
 13048                           	opt callstack 24
 13049                           
 13050                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13051                           
 13052                           ;incstack = 0
 13053  0051C2  EC16  F02A         	call	_wait_ready	;wreg free
 13054  0051C6  0900               	iorlw	0
 13055  0051C8  A4D8               	btfss	status,2,c
 13056  0051CA  D002               	goto	l4140
 13057  0051CC                     u4620:
 13058  0051CC  0E00               	movlw	0
 13059  0051CE  0012               	return	
 13060  0051D0                     l4140:
 13061                           
 13062                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13063  0051D0  5006               	movf	xmit_datablock@token,w,c
 13064  0051D2  ECFE  F02A         	call	_SPI1_Exchange8bit
 13065                           
 13066                           ;diskio.c: 168:  if (token != 0xFD) {
 13067  0051D6  0EFD               	movlw	253
 13068  0051D8  1806               	xorwf	xmit_datablock@token,w,c
 13069  0051DA  B4D8               	btfsc	status,2,c
 13070  0051DC  D02E               	goto	l4160
 13071                           
 13072                           ;diskio.c: 169:   i = 512;
 13073  0051DE  0E02               	movlw	2
 13074  0051E0  6E08               	movwf	xmit_datablock@i+1,c
 13075  0051E2  0E00               	movlw	0
 13076  0051E4  6E07               	movwf	xmit_datablock@i,c
 13077  0051E6                     l4146:
 13078                           
 13079                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13080  0051E6  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13081  0051EA  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13082  0051EE  6AF8               	clrf	tblptru,c
 13083  0051F0  0E07               	movlw	(high __ramtop+-1)
 13084  0051F2  64F7               	cpfsgt	tblptrh,c
 13085  0051F4  D003               	bra	u4647
 13086  0051F6  0008               	tblrd		*
 13087  0051F8  50F5               	movf	tablat,w,c
 13088  0051FA  D005               	bra	u4640
 13089  0051FC                     u4647:
 13090  0051FC  CFF6 FFE9          	movff	tblptrl,fsr0l
 13091  005200  CFF7 FFEA          	movff	tblptrh,fsr0h
 13092  005204  50EF               	movf	indf0,w,c
 13093  005206                     u4640:
 13094  005206  ECFE  F02A         	call	_SPI1_Exchange8bit
 13095  00520A  4A04               	infsnz	xmit_datablock@buff,f,c
 13096  00520C  2A05               	incf	xmit_datablock@buff+1,f,c
 13097  00520E  0607               	decf	xmit_datablock@i,f,c
 13098  005210  A0D8               	btfss	status,0,c
 13099  005212  0608               	decf	xmit_datablock@i+1,f,c
 13100  005214  5007               	movf	xmit_datablock@i,w,c
 13101  005216  1008               	iorwf	xmit_datablock@i+1,w,c
 13102  005218  A4D8               	btfss	status,2,c
 13103  00521A  D7E5               	goto	l4146
 13104                           
 13105                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13106  00521C  0EFF               	movlw	255
 13107  00521E  ECFE  F02A         	call	_SPI1_Exchange8bit
 13108                           
 13109                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13110  005222  0EFF               	movlw	255
 13111  005224  ECFE  F02A         	call	_SPI1_Exchange8bit
 13112                           
 13113                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13114  005228  0EFF               	movlw	255
 13115  00522A  ECFE  F02A         	call	_SPI1_Exchange8bit
 13116  00522E  6E09               	movwf	xmit_datablock@resp,c
 13117                           
 13118                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13119  005230  5009               	movf	xmit_datablock@resp,w,c
 13120  005232  0B1F               	andlw	31
 13121  005234  0A05               	xorlw	5
 13122  005236  A4D8               	btfss	status,2,c
 13123  005238  D7C9               	goto	u4620
 13124  00523A                     l4160:
 13125                           
 13126                           ;diskio.c: 180:  return 1;
 13127  00523A  0E01               	movlw	1
 13128  00523C  0012               	return		;funcret
 13129  00523E                     __end_of_xmit_datablock:
 13130                           	opt callstack 0
 13131                           
 13132 ;; *************** function _disk_read *****************
 13133 ;; Defined at:
 13134 ;;		line 370 in file "diskio.c"
 13135 ;; Parameters:    Size  Location     Type
 13136 ;;  pdrv            1    wreg     unsigned char 
 13137 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13138 ;;		 -> NULL(0), FatFs(558), 
 13139 ;;  sector          4   18[COMRAM] unsigned long 
 13140 ;;  count           2   22[COMRAM] unsigned short 
 13141 ;; Auto vars:     Size  Location     Type
 13142 ;;  pdrv            1   24[COMRAM] unsigned char 
 13143 ;;  cmd             1   27[COMRAM] unsigned char 
 13144 ;; Return value:  Size  Location     Type
 13145 ;;                  1    wreg      enum E43
 13146 ;; Registers used:
 13147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13148 ;; Tracked objects:
 13149 ;;		On entry : 0/0
 13150 ;;		On exit  : 0/0
 13151 ;;		Unchanged: 0/0
 13152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13153 ;;      Params:         8       0       0       0       0       0       0       0       0
 13154 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13155 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13156 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13157 ;;Total ram usage:       12 bytes
 13158 ;; Hardware stack levels used:    1
 13159 ;; Hardware stack levels required when called:    5
 13160 ;; This function calls:
 13161 ;;		_deselect
 13162 ;;		_rcvr_datablock
 13163 ;;		_send_cmd
 13164 ;; This function is called by:
 13165 ;;		_move_window
 13166 ;;		_f_read
 13167 ;; This function uses a non-reentrant model
 13168 ;;
 13169                           
 13170                           	psect	text42
 13171  004C16                     __ptext42:
 13172                           	opt callstack 0
 13173  004C16                     _disk_read:
 13174                           	opt callstack 22
 13175                           
 13176                           ;incstack = 0
 13177                           ;disk_read@pdrv stored from wreg
 13178  004C16  6E19               	movwf	disk_read@pdrv,c
 13179                           
 13180                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13181  004C18  5019               	movf	disk_read@pdrv,w,c
 13182  004C1A  A4D8               	btfss	status,2,c
 13183  004C1C  D004               	goto	u4900
 13184  004C1E  5017               	movf	disk_read@count,w,c
 13185  004C20  1018               	iorwf	disk_read@count+1,w,c
 13186  004C22  A4D8               	btfss	status,2,c
 13187  004C24  D002               	goto	l172
 13188  004C26                     u4900:
 13189  004C26  0E04               	movlw	4
 13190  004C28  0012               	return	
 13191  004C2A                     l172:
 13192                           
 13193                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13194  004C2A  0100               	movlb	0	; () banked
 13195  004C2C  A1F7               	btfss	_Stat& (0+255),0,b
 13196  004C2E  D002               	goto	l176
 13197                           
 13198                           ; BSR set to: 0
 13199  004C30  0E03               	movlw	3
 13200  004C32  0012               	return	
 13201  004C34                     l176:
 13202                           
 13203                           ; BSR set to: 0
 13204                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13205  004C34  B7D6               	btfsc	_CardType& (0+255),3,b
 13206  004C36  D008               	goto	l177
 13207                           
 13208                           ; BSR set to: 0
 13209  004C38  0E09               	movlw	9
 13210  004C3A                     u4935:
 13211  004C3A  90D8               	bcf	status,0,c
 13212  004C3C  3613               	rlcf	disk_read@sector,f,c
 13213  004C3E  3614               	rlcf	disk_read@sector+1,f,c
 13214  004C40  3615               	rlcf	disk_read@sector+2,f,c
 13215  004C42  3616               	rlcf	disk_read@sector+3,f,c
 13216  004C44  2EE8               	decfsz	wreg,f,c
 13217  004C46  D7F9               	goto	u4935
 13218  004C48                     l177:
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13222  004C48  5018               	movf	disk_read@count+1,w,c
 13223  004C4A  E108               	bnz	l4270
 13224  004C4C  0E02               	movlw	2
 13225  004C4E  5C17               	subwf	disk_read@count,w,c
 13226  004C50  B0D8               	btfsc	status,0,c
 13227  004C52  D004               	goto	l4270
 13228                           
 13229                           ; BSR set to: 0
 13230  004C54  0E00               	movlw	0
 13231  004C56  6E1B               	movwf	_disk_read$335+1,c
 13232  004C58  0E11               	movlw	17
 13233  004C5A  D003               	goto	L18
 13234  004C5C                     l4270:
 13235                           
 13236                           ; BSR set to: 0
 13237  004C5C  0E00               	movlw	0
 13238  004C5E  6E1B               	movwf	_disk_read$335+1,c
 13239  004C60  0E12               	movlw	18
 13240  004C62                     L18:
 13241  004C62  6E1A               	movwf	_disk_read$335,c
 13242                           
 13243                           ; BSR set to: 0
 13244  004C64  C01A  F01C         	movff	_disk_read$335,disk_read@cmd
 13245                           
 13246                           ; BSR set to: 0
 13247                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13248  004C68  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13249  004C6C  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13250  004C70  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13251  004C74  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13252  004C78  501C               	movf	disk_read@cmd,w,c
 13253  004C7A  ECD7  F029         	call	_send_cmd
 13254  004C7E  0900               	iorlw	0
 13255  004C80  A4D8               	btfss	status,2,c
 13256  004C82  D025               	goto	l4286
 13257  004C84                     u4950:
 13258                           
 13259                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13260  004C84  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13261  004C88  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13262  004C8C  0E02               	movlw	2
 13263  004C8E  6E05               	movwf	rcvr_datablock@btr+1,c
 13264  004C90  0E00               	movlw	0
 13265  004C92  6E04               	movwf	rcvr_datablock@btr,c
 13266  004C94  EC1F  F029         	call	_rcvr_datablock	;wreg free
 13267  004C98  0900               	iorlw	0
 13268  004C9A  B4D8               	btfsc	status,2,c
 13269  004C9C  D009               	goto	u4970
 13270                           
 13271                           ;diskio.c: 389:    buff += 512;
 13272  004C9E  0E02               	movlw	2
 13273  004CA0  2612               	addwf	disk_read@buff+1,f,c
 13274                           
 13275                           ;diskio.c: 390:   } while (--count);
 13276  004CA2  0617               	decf	disk_read@count,f,c
 13277  004CA4  A0D8               	btfss	status,0,c
 13278  004CA6  0618               	decf	disk_read@count+1,f,c
 13279  004CA8  5017               	movf	disk_read@count,w,c
 13280  004CAA  1018               	iorwf	disk_read@count+1,w,c
 13281  004CAC  A4D8               	btfss	status,2,c
 13282  004CAE  D7EA               	goto	u4950
 13283  004CB0                     u4970:
 13284                           
 13285                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13286  004CB0  0E12               	movlw	18
 13287  004CB2  181C               	xorwf	disk_read@cmd,w,c
 13288  004CB4  A4D8               	btfss	status,2,c
 13289  004CB6  D00B               	goto	l4286
 13290  004CB8  0E00               	movlw	0
 13291  004CBA  6E0B               	movwf	send_cmd@arg,c
 13292  004CBC  0E00               	movlw	0
 13293  004CBE  6E0C               	movwf	send_cmd@arg+1,c
 13294  004CC0  0E00               	movlw	0
 13295  004CC2  6E0D               	movwf	send_cmd@arg+2,c
 13296  004CC4  0E00               	movlw	0
 13297  004CC6  6E0E               	movwf	send_cmd@arg+3,c
 13298  004CC8  0E0C               	movlw	12
 13299  004CCA  ECD7  F029         	call	_send_cmd
 13300  004CCE                     l4286:
 13301                           
 13302                           ;diskio.c: 393:  deselect();
 13303  004CCE  EC1B  F02B         	call	_deselect	;wreg free
 13304                           
 13305                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13306  004CD2  5017               	movf	disk_read@count,w,c
 13307  004CD4  1018               	iorwf	disk_read@count+1,w,c
 13308  004CD6  B4D8               	btfsc	status,2,c
 13309  004CD8  D002               	goto	u4990
 13310  004CDA  0E01               	movlw	1
 13311  004CDC  0012               	return	
 13312  004CDE                     u4990:
 13313  004CDE  0E00               	movlw	0
 13314  004CE0  0012               	return		;funcret
 13315  004CE2                     __end_of_disk_read:
 13316                           	opt callstack 0
 13317                           
 13318 ;; *************** function _send_cmd *****************
 13319 ;; Defined at:
 13320 ;;		line 231 in file "diskio.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;  cmd             1    wreg     unsigned char 
 13323 ;;  arg             4   10[COMRAM] unsigned long 
 13324 ;; Auto vars:     Size  Location     Type
 13325 ;;  cmd             1   14[COMRAM] unsigned char 
 13326 ;;  res             1   15[COMRAM] unsigned char 
 13327 ;; Return value:  Size  Location     Type
 13328 ;;                  1    wreg      unsigned char 
 13329 ;; Registers used:
 13330 ;;		wreg, status,2, status,0, cstack
 13331 ;; Tracked objects:
 13332 ;;		On entry : 0/0
 13333 ;;		On exit  : 0/0
 13334 ;;		Unchanged: 0/0
 13335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13336 ;;      Params:         4       0       0       0       0       0       0       0       0
 13337 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13338 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13339 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13340 ;;Total ram usage:        6 bytes
 13341 ;; Hardware stack levels used:    1
 13342 ;; Hardware stack levels required when called:    4
 13343 ;; This function calls:
 13344 ;;		___send_cmd
 13345 ;; This function is called by:
 13346 ;;		_disk_initialize
 13347 ;;		_disk_read
 13348 ;;		_disk_write
 13349 ;;		_disk_ioctl
 13350 ;; This function uses a non-reentrant model
 13351 ;;
 13352                           
 13353                           	psect	text43
 13354  0053AE                     __ptext43:
 13355                           	opt callstack 0
 13356  0053AE                     _send_cmd:
 13357                           	opt callstack 22
 13358                           
 13359                           ;incstack = 0
 13360                           ;send_cmd@cmd stored from wreg
 13361  0053AE  6E0F               	movwf	send_cmd@cmd,c
 13362                           
 13363                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13364  0053B0  AE0F               	btfss	send_cmd@cmd,7,c
 13365  0053B2  D012               	goto	l4176
 13366                           
 13367                           ;diskio.c: 243:   cmd &= 0x7F;
 13368  0053B4  9E0F               	bcf	send_cmd@cmd,7,c
 13369                           
 13370                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13371  0053B6  0E00               	movlw	0
 13372  0053B8  6E04               	movwf	___send_cmd@arg,c
 13373  0053BA  0E00               	movlw	0
 13374  0053BC  6E05               	movwf	___send_cmd@arg+1,c
 13375  0053BE  0E00               	movlw	0
 13376  0053C0  6E06               	movwf	___send_cmd@arg+2,c
 13377  0053C2  0E00               	movlw	0
 13378  0053C4  6E07               	movwf	___send_cmd@arg+3,c
 13379  0053C6  0E37               	movlw	55
 13380  0053C8  EC61  F028         	call	___send_cmd
 13381  0053CC  6E10               	movwf	send_cmd@res,c
 13382                           
 13383                           ;diskio.c: 249:   if (res > 1) return res;
 13384  0053CE  0E01               	movlw	1
 13385  0053D0  6410               	cpfsgt	send_cmd@res,c
 13386  0053D2  D002               	goto	l4176
 13387  0053D4  5010               	movf	send_cmd@res,w,c
 13388  0053D6  0012               	return	
 13389  0053D8                     l4176:
 13390                           
 13391                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13392  0053D8  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13393  0053DC  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13394  0053E0  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13395  0053E4  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13396  0053E8  500F               	movf	send_cmd@cmd,w,c
 13397  0053EA  EC61  F028         	call	___send_cmd
 13398  0053EE  0012               	return		;funcret
 13399  0053F0                     __end_of_send_cmd:
 13400                           	opt callstack 0
 13401                           
 13402 ;; *************** function ___send_cmd *****************
 13403 ;; Defined at:
 13404 ;;		line 195 in file "diskio.c"
 13405 ;; Parameters:    Size  Location     Type
 13406 ;;  cmd             1    wreg     unsigned char 
 13407 ;;  arg             4    3[COMRAM] unsigned long 
 13408 ;; Auto vars:     Size  Location     Type
 13409 ;;  cmd             1    9[COMRAM] unsigned char 
 13410 ;;  n               1    8[COMRAM] unsigned char 
 13411 ;;  res             1    7[COMRAM] unsigned char 
 13412 ;; Return value:  Size  Location     Type
 13413 ;;                  1    wreg      unsigned char 
 13414 ;; Registers used:
 13415 ;;		wreg, status,2, status,0, cstack
 13416 ;; Tracked objects:
 13417 ;;		On entry : 0/0
 13418 ;;		On exit  : 0/0
 13419 ;;		Unchanged: 0/0
 13420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13421 ;;      Params:         4       0       0       0       0       0       0       0       0
 13422 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13423 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13424 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13425 ;;Total ram usage:        7 bytes
 13426 ;; Hardware stack levels used:    1
 13427 ;; Hardware stack levels required when called:    3
 13428 ;; This function calls:
 13429 ;;		_SPI1_Exchange8bit
 13430 ;;		_deselect
 13431 ;;		_select
 13432 ;; This function is called by:
 13433 ;;		_send_cmd
 13434 ;; This function uses a non-reentrant model
 13435 ;;
 13436                           
 13437                           	psect	text44
 13438  0050C2                     __ptext44:
 13439                           	opt callstack 0
 13440  0050C2                     ___send_cmd:
 13441                           	opt callstack 22
 13442                           
 13443                           ;incstack = 0
 13444                           ;___send_cmd@cmd stored from wreg
 13445  0050C2  6E0A               	movwf	___send_cmd@cmd,c
 13446                           
 13447                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13448  0050C4  0E0C               	movlw	12
 13449  0050C6  180A               	xorwf	___send_cmd@cmd,w,c
 13450  0050C8  B4D8               	btfsc	status,2,c
 13451  0050CA  D009               	goto	l4096
 13452                           
 13453                           ;diskio.c: 204:   deselect();
 13454  0050CC  EC1B  F02B         	call	_deselect	;wreg free
 13455                           
 13456                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13457  0050D0  ECDD  F02A         	call	_select	;wreg free
 13458  0050D4  0900               	iorlw	0
 13459  0050D6  A4D8               	btfss	status,2,c
 13460  0050D8  D002               	goto	l4096
 13461  0050DA  0EFF               	movlw	255
 13462  0050DC  0012               	return	
 13463  0050DE                     l4096:
 13464                           
 13465                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13466  0050DE  500A               	movf	___send_cmd@cmd,w,c
 13467  0050E0  0940               	iorlw	64
 13468  0050E2  ECFE  F02A         	call	_SPI1_Exchange8bit
 13469                           
 13470                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13471  0050E6  5007               	movf	___send_cmd@arg+3,w,c
 13472  0050E8  ECFE  F02A         	call	_SPI1_Exchange8bit
 13473                           
 13474                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13475  0050EC  5006               	movf	___send_cmd@arg+2,w,c
 13476  0050EE  ECFE  F02A         	call	_SPI1_Exchange8bit
 13477                           
 13478                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13479  0050F2  5005               	movf	___send_cmd@arg+1,w,c
 13480  0050F4  ECFE  F02A         	call	_SPI1_Exchange8bit
 13481                           
 13482                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13483  0050F8  5004               	movf	___send_cmd@arg,w,c
 13484  0050FA  ECFE  F02A         	call	_SPI1_Exchange8bit
 13485                           
 13486                           ;diskio.c: 214:  n = 0x01;
 13487  0050FE  0E01               	movlw	1
 13488  005100  6E09               	movwf	___send_cmd@n,c
 13489                           
 13490                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13491  005102  500A               	movf	___send_cmd@cmd,w,c
 13492  005104  A4D8               	btfss	status,2,c
 13493  005106  D002               	goto	l4112
 13494  005108  0E95               	movlw	149
 13495  00510A  6E09               	movwf	___send_cmd@n,c
 13496  00510C                     l4112:
 13497                           
 13498                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13499  00510C  0E08               	movlw	8
 13500  00510E  180A               	xorwf	___send_cmd@cmd,w,c
 13501  005110  A4D8               	btfss	status,2,c
 13502  005112  D002               	goto	l4116
 13503  005114  0E87               	movlw	135
 13504  005116  6E09               	movwf	___send_cmd@n,c
 13505  005118                     l4116:
 13506                           
 13507                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13508  005118  5009               	movf	___send_cmd@n,w,c
 13509  00511A  ECFE  F02A         	call	_SPI1_Exchange8bit
 13510                           
 13511                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13512  00511E  0E0C               	movlw	12
 13513  005120  180A               	xorwf	___send_cmd@cmd,w,c
 13514  005122  A4D8               	btfss	status,2,c
 13515  005124  D003               	goto	l4122
 13516  005126  0EFF               	movlw	255
 13517  005128  ECFE  F02A         	call	_SPI1_Exchange8bit
 13518  00512C                     l4122:
 13519                           
 13520                           ;diskio.c: 221:  n = 10;
 13521  00512C  0E0A               	movlw	10
 13522  00512E  6E09               	movwf	___send_cmd@n,c
 13523  005130                     l4124:
 13524                           
 13525                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13526  005130  0EFF               	movlw	255
 13527  005132  ECFE  F02A         	call	_SPI1_Exchange8bit
 13528  005136  6E08               	movwf	___send_cmd@res,c
 13529  005138  AE08               	btfss	___send_cmd@res,7,c
 13530  00513A  D002               	goto	l4130
 13531  00513C  2E09               	decfsz	___send_cmd@n,f,c
 13532  00513E  D7F8               	goto	l4124
 13533  005140                     l4130:
 13534                           
 13535                           ;diskio.c: 226:  return res;
 13536  005140  5008               	movf	___send_cmd@res,w,c
 13537  005142  0012               	return		;funcret
 13538  005144                     __end_of___send_cmd:
 13539                           	opt callstack 0
 13540                           
 13541 ;; *************** function _select *****************
 13542 ;; Defined at:
 13543 ;;		line 106 in file "diskio.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;		None
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;		None
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  1    wreg      unsigned char 
 13550 ;; Registers used:
 13551 ;;		wreg, status,2, status,0, cstack
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13557 ;;      Params:         0       0       0       0       0       0       0       0       0
 13558 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13560 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13561 ;;Total ram usage:        0 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    2
 13564 ;; This function calls:
 13565 ;;		_SPI1_Exchange8bit
 13566 ;;		_deselect
 13567 ;;		_wait_ready
 13568 ;; This function is called by:
 13569 ;;		___send_cmd
 13570 ;;		_disk_ioctl
 13571 ;; This function uses a non-reentrant model
 13572 ;;
 13573                           
 13574                           	psect	text45
 13575  0055BA                     __ptext45:
 13576                           	opt callstack 0
 13577  0055BA                     _select:
 13578                           	opt callstack 22
 13579                           
 13580                           ;incstack = 0
 13581                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13582  0055BA  948A               	bcf	3978,2,c	;volatile
 13583                           
 13584                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13585  0055BC  0EFF               	movlw	255
 13586  0055BE  ECFE  F02A         	call	_SPI1_Exchange8bit
 13587                           
 13588                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13589  0055C2  EC16  F02A         	call	_wait_ready	;wreg free
 13590  0055C6  0900               	iorlw	0
 13591  0055C8  B4D8               	btfsc	status,2,c
 13592  0055CA  D002               	goto	l4080
 13593  0055CC  0E01               	movlw	1
 13594  0055CE  0012               	return	
 13595  0055D0                     l4080:
 13596                           
 13597                           ;diskio.c: 112:  deselect();
 13598  0055D0  EC1B  F02B         	call	_deselect	;wreg free
 13599                           
 13600                           ;diskio.c: 113:  return 0;
 13601  0055D4  0E00               	movlw	0
 13602  0055D6  0012               	return		;funcret
 13603  0055D8                     __end_of_select:
 13604                           	opt callstack 0
 13605                           
 13606 ;; *************** function _wait_ready *****************
 13607 ;; Defined at:
 13608 ;;		line 74 in file "diskio.c"
 13609 ;; Parameters:    Size  Location     Type
 13610 ;;		None
 13611 ;; Auto vars:     Size  Location     Type
 13612 ;;  tmr             2    1[COMRAM] unsigned short 
 13613 ;; Return value:  Size  Location     Type
 13614 ;;                  1    wreg      unsigned char 
 13615 ;; Registers used:
 13616 ;;		wreg, status,2, status,0, cstack
 13617 ;; Tracked objects:
 13618 ;;		On entry : 0/0
 13619 ;;		On exit  : 0/0
 13620 ;;		Unchanged: 0/0
 13621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13622 ;;      Params:         0       0       0       0       0       0       0       0       0
 13623 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13624 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13625 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13626 ;;Total ram usage:        2 bytes
 13627 ;; Hardware stack levels used:    1
 13628 ;; Hardware stack levels required when called:    1
 13629 ;; This function calls:
 13630 ;;		_SPI1_Exchange8bit
 13631 ;; This function is called by:
 13632 ;;		_select
 13633 ;;		_xmit_datablock
 13634 ;; This function uses a non-reentrant model
 13635 ;;
 13636                           
 13637                           	psect	text46
 13638  00542C                     __ptext46:
 13639                           	opt callstack 0
 13640  00542C                     _wait_ready:
 13641                           	opt callstack 24
 13642                           
 13643                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13644                           
 13645                           ;incstack = 0
 13646  00542C  0E13               	movlw	19
 13647  00542E  6E03               	movwf	wait_ready@tmr+1,c
 13648  005430  0E88               	movlw	136
 13649  005432  6E02               	movwf	wait_ready@tmr,c
 13650  005434  D00D               	goto	l80
 13651  005436                     l4058:
 13652                           
 13653                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13654  005436  0EFF               	movlw	255
 13655  005438  ECFE  F02A         	call	_SPI1_Exchange8bit
 13656  00543C  0AFF               	xorlw	255
 13657  00543E  B4D8               	btfsc	status,2,c
 13658  005440  D00B               	goto	u4520
 13659                           
 13660                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13661  005442  0E42               	movlw	66
 13662  005444                     u9017:
 13663  005444  2EE8               	decfsz	wreg,f,c
 13664  005446  D7FE               	bra	u9017
 13665  005448  D000               	nop2	
 13666                           
 13667                           ;diskio.c: 81:  }
 13668  00544A  0602               	decf	wait_ready@tmr,f,c
 13669  00544C  A0D8               	btfss	status,0,c
 13670  00544E  0603               	decf	wait_ready@tmr+1,f,c
 13671  005450                     l80:
 13672  005450  5002               	movf	wait_ready@tmr,w,c
 13673  005452  1003               	iorwf	wait_ready@tmr+1,w,c
 13674  005454  A4D8               	btfss	status,2,c
 13675  005456  D7EF               	goto	l4058
 13676  005458                     u4520:
 13677                           
 13678                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13679  005458  5002               	movf	wait_ready@tmr,w,c
 13680  00545A  1003               	iorwf	wait_ready@tmr+1,w,c
 13681  00545C  B4D8               	btfsc	status,2,c
 13682  00545E  D002               	goto	u4530
 13683  005460  0E01               	movlw	1
 13684  005462  0012               	return	
 13685  005464                     u4530:
 13686  005464  0E00               	movlw	0
 13687  005466  0012               	return		;funcret
 13688  005468                     __end_of_wait_ready:
 13689                           	opt callstack 0
 13690                           
 13691 ;; *************** function _deselect *****************
 13692 ;; Defined at:
 13693 ;;		line 93 in file "diskio.c"
 13694 ;; Parameters:    Size  Location     Type
 13695 ;;		None
 13696 ;; Auto vars:     Size  Location     Type
 13697 ;;		None
 13698 ;; Return value:  Size  Location     Type
 13699 ;;                  1    wreg      void 
 13700 ;; Registers used:
 13701 ;;		wreg, status,2, cstack
 13702 ;; Tracked objects:
 13703 ;;		On entry : 0/0
 13704 ;;		On exit  : 0/0
 13705 ;;		Unchanged: 0/0
 13706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13707 ;;      Params:         0       0       0       0       0       0       0       0       0
 13708 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13709 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13710 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13711 ;;Total ram usage:        0 bytes
 13712 ;; Hardware stack levels used:    1
 13713 ;; Hardware stack levels required when called:    1
 13714 ;; This function calls:
 13715 ;;		_SPI1_Exchange8bit
 13716 ;; This function is called by:
 13717 ;;		_select
 13718 ;;		___send_cmd
 13719 ;;		_disk_initialize
 13720 ;;		_disk_read
 13721 ;;		_disk_write
 13722 ;;		_disk_ioctl
 13723 ;; This function uses a non-reentrant model
 13724 ;;
 13725                           
 13726                           	psect	text47
 13727  005636                     __ptext47:
 13728                           	opt callstack 0
 13729  005636                     _deselect:
 13730                           	opt callstack 22
 13731                           
 13732                           ;incstack = 0
 13733                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13734  005636  848A               	bsf	3978,2,c	;volatile
 13735                           
 13736                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13737  005638  0EFF               	movlw	255
 13738  00563A  ECFE  F02A         	call	_SPI1_Exchange8bit
 13739  00563E  0012               	return		;funcret
 13740  005640                     __end_of_deselect:
 13741                           	opt callstack 0
 13742                           
 13743 ;; *************** function _rcvr_datablock *****************
 13744 ;; Defined at:
 13745 ;;		line 123 in file "diskio.c"
 13746 ;; Parameters:    Size  Location     Type
 13747 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13748 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 13749 ;;  btr             2    3[COMRAM] unsigned short 
 13750 ;; Auto vars:     Size  Location     Type
 13751 ;;  tmr             2    5[COMRAM] unsigned short 
 13752 ;;  token           1    7[COMRAM] unsigned char 
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      unsigned char 
 13755 ;; Registers used:
 13756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13757 ;; Tracked objects:
 13758 ;;		On entry : 0/0
 13759 ;;		On exit  : 0/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13762 ;;      Params:         4       0       0       0       0       0       0       0       0
 13763 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13764 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13765 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13766 ;;Total ram usage:        7 bytes
 13767 ;; Hardware stack levels used:    1
 13768 ;; Hardware stack levels required when called:    1
 13769 ;; This function calls:
 13770 ;;		_SPI1_Exchange8bit
 13771 ;; This function is called by:
 13772 ;;		_disk_read
 13773 ;;		_disk_ioctl
 13774 ;; This function uses a non-reentrant model
 13775 ;;
 13776                           
 13777                           	psect	text48
 13778  00523E                     __ptext48:
 13779                           	opt callstack 0
 13780  00523E                     _rcvr_datablock:
 13781                           	opt callstack 25
 13782                           
 13783                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13784                           
 13785                           ;incstack = 0
 13786  00523E  0E07               	movlw	7
 13787  005240  6E07               	movwf	rcvr_datablock@tmr+1,c
 13788  005242  0ED0               	movlw	208
 13789  005244  6E06               	movwf	rcvr_datablock@tmr,c
 13790  005246  D00E               	goto	l98
 13791  005248                     l4182:
 13792                           
 13793                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13794  005248  0EFF               	movlw	255
 13795  00524A  ECFE  F02A         	call	_SPI1_Exchange8bit
 13796  00524E  6E08               	movwf	rcvr_datablock@token,c
 13797                           
 13798                           ;diskio.c: 134:   if (token != 0xFF) break;
 13799  005250  2808               	incf	rcvr_datablock@token,w,c
 13800  005252  A4D8               	btfss	status,2,c
 13801  005254  D00B               	goto	u4700
 13802                           
 13803                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13804  005256  0E42               	movlw	66
 13805  005258                     u9027:
 13806  005258  2EE8               	decfsz	wreg,f,c
 13807  00525A  D7FE               	bra	u9027
 13808  00525C  D000               	nop2	
 13809                           
 13810                           ;diskio.c: 136:  }
 13811  00525E  0606               	decf	rcvr_datablock@tmr,f,c
 13812  005260  A0D8               	btfss	status,0,c
 13813  005262  0607               	decf	rcvr_datablock@tmr+1,f,c
 13814  005264                     l98:
 13815  005264  5006               	movf	rcvr_datablock@tmr,w,c
 13816  005266  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13817  005268  A4D8               	btfss	status,2,c
 13818  00526A  D7EE               	goto	l4182
 13819  00526C                     u4700:
 13820                           
 13821                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 13822  00526C  0EFE               	movlw	254
 13823  00526E  1808               	xorwf	rcvr_datablock@token,w,c
 13824  005270  B4D8               	btfsc	status,2,c
 13825  005272  D002               	goto	l4198
 13826  005274  0E00               	movlw	0
 13827  005276  0012               	return	
 13828  005278                     l4198:
 13829                           
 13830                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 13831  005278  0EFF               	movlw	255
 13832  00527A  ECFE  F02A         	call	_SPI1_Exchange8bit
 13833  00527E  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 13834  005282  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 13835  005286  6EDF               	movwf	indf2,c
 13836  005288  4A02               	infsnz	rcvr_datablock@buff,f,c
 13837  00528A  2A03               	incf	rcvr_datablock@buff+1,f,c
 13838  00528C  0604               	decf	rcvr_datablock@btr,f,c
 13839  00528E  A0D8               	btfss	status,0,c
 13840  005290  0605               	decf	rcvr_datablock@btr+1,f,c
 13841  005292  5004               	movf	rcvr_datablock@btr,w,c
 13842  005294  1005               	iorwf	rcvr_datablock@btr+1,w,c
 13843  005296  A4D8               	btfss	status,2,c
 13844  005298  D7EF               	goto	l4198
 13845                           
 13846                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 13847  00529A  0EFF               	movlw	255
 13848  00529C  ECFE  F02A         	call	_SPI1_Exchange8bit
 13849                           
 13850                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 13851  0052A0  0EFF               	movlw	255
 13852  0052A2  ECFE  F02A         	call	_SPI1_Exchange8bit
 13853                           
 13854                           ;diskio.c: 145:  return 1;
 13855  0052A6  0E01               	movlw	1
 13856  0052A8  0012               	return		;funcret
 13857  0052AA                     __end_of_rcvr_datablock:
 13858                           	opt callstack 0
 13859                           
 13860 ;; *************** function _SPI1_Exchange8bit *****************
 13861 ;; Defined at:
 13862 ;;		line 90 in file "mcc_generated_files/spi1.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  data            1    wreg     unsigned char 
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;  data            1    0[COMRAM] unsigned char 
 13867 ;; Return value:  Size  Location     Type
 13868 ;;                  1    wreg      unsigned char 
 13869 ;; Registers used:
 13870 ;;		wreg, status,2
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13876 ;;      Params:         0       0       0       0       0       0       0       0       0
 13877 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13878 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13879 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13880 ;;Total ram usage:        1 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; This function calls:
 13883 ;;		Nothing
 13884 ;; This function is called by:
 13885 ;;		_wait_ready
 13886 ;;		_deselect
 13887 ;;		_select
 13888 ;;		_rcvr_datablock
 13889 ;;		_xmit_datablock
 13890 ;;		___send_cmd
 13891 ;;		_disk_initialize
 13892 ;;		_disk_ioctl
 13893 ;;		_SPI1_Exchange8bitBuffer
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           	psect	text49
 13898  0055FC                     __ptext49:
 13899                           	opt callstack 0
 13900  0055FC                     _SPI1_Exchange8bit:
 13901                           	opt callstack 24
 13902                           
 13903                           ;incstack = 0
 13904                           ;SPI1_Exchange8bit@data stored from wreg
 13905  0055FC  6E01               	movwf	SPI1_Exchange8bit@data,c
 13906                           
 13907                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 13908  0055FE  9EC6               	bcf	4038,7,c	;volatile
 13909                           
 13910                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 13911  005600  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 13912  005604                     l823:
 13913                           
 13914                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 13915  005604  A0C7               	btfss	4039,0,c	;volatile
 13916  005606  D7FE               	goto	l823
 13917                           
 13918                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 13919  005608  50C9               	movf	4041,w,c	;volatile
 13920  00560A  0012               	return		;funcret
 13921  00560C                     __end_of_SPI1_Exchange8bit:
 13922                           	opt callstack 0
 13923                           
 13924 ;; *************** function ___delay_sec *****************
 13925 ;; Defined at:
 13926 ;;		line 9 in file "Main.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;  sec             1    wreg     unsigned char 
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;  sec             1    3[COMRAM] unsigned char 
 13931 ;;  i               1    4[COMRAM] unsigned char 
 13932 ;; Return value:  Size  Location     Type
 13933 ;;                  1    wreg      void 
 13934 ;; Registers used:
 13935 ;;		wreg, status,2, status,0, prodl, prodh
 13936 ;; Tracked objects:
 13937 ;;		On entry : 0/0
 13938 ;;		On exit  : 0/0
 13939 ;;		Unchanged: 0/0
 13940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13941 ;;      Params:         0       0       0       0       0       0       0       0       0
 13942 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13943 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13944 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13945 ;;Total ram usage:        5 bytes
 13946 ;; Hardware stack levels used:    1
 13947 ;; This function calls:
 13948 ;;		Nothing
 13949 ;; This function is called by:
 13950 ;;		_guardar
 13951 ;;		_main
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           	psect	text50
 13956  0054A2                     __ptext50:
 13957                           	opt callstack 0
 13958  0054A2                     ___delay_sec:
 13959                           	opt callstack 29
 13960                           
 13961                           ;incstack = 0
 13962                           ;___delay_sec@sec stored from wreg
 13963  0054A2  6E04               	movwf	___delay_sec@sec,c
 13964                           
 13965                           ;Main.c: 10:     for(char i=0;i<=(50*sec);i++) {
 13966  0054A4  0E00               	movlw	0
 13967  0054A6  6E05               	movwf	___delay_sec@i,c
 13968  0054A8  D008               	goto	l5902
 13969  0054AA                     l5898:
 13970                           
 13971                           ;Main.c: 11:         _delay((unsigned long)((20)*(8000000/4000.0)));
 13972  0054AA  0E34               	movlw	52
 13973  0054AC  6E01               	movwf	??___delay_sec& (0+255),c
 13974  0054AE  0EF2               	movlw	242
 13975  0054B0                     u9037:
 13976  0054B0  2EE8               	decfsz	wreg,f,c
 13977  0054B2  D7FE               	bra	u9037
 13978  0054B4  2E01               	decfsz	??___delay_sec& (0+255),f,c
 13979  0054B6  D7FC               	bra	u9037
 13980                           
 13981                           ;Main.c: 12:     }
 13982  0054B8  2A05               	incf	___delay_sec@i,f,c
 13983  0054BA                     l5902:
 13984  0054BA  5005               	movf	___delay_sec@i,w,c
 13985  0054BC  6E01               	movwf	??___delay_sec& (0+255),c
 13986  0054BE  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 13987  0054C0  5004               	movf	___delay_sec@sec,w,c
 13988  0054C2  0D32               	mullw	50
 13989  0054C4  5001               	movf	??___delay_sec,w,c
 13990  0054C6  5CF3               	subwf	prodl,w,c
 13991  0054C8  50F4               	movf	prodh,w,c
 13992  0054CA  0A80               	xorlw	128
 13993  0054CC  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 13994  0054CE  5002               	movf	??___delay_sec+1,w,c
 13995  0054D0  0A80               	xorlw	128
 13996  0054D2  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 13997  0054D4  A0D8               	btfss	status,0,c
 13998  0054D6  0012               	return	
 13999  0054D8  D7E8               	goto	l5898
 14000  0054DA                     __end_of___delay_sec:
 14001                           	opt callstack 0
 14002                           
 14003 ;; *************** function _SYSTEM_Initialize *****************
 14004 ;; Defined at:
 14005 ;;		line 116 in file "mcc_generated_files/mcc.c"
 14006 ;; Parameters:    Size  Location     Type
 14007 ;;		None
 14008 ;; Auto vars:     Size  Location     Type
 14009 ;;		None
 14010 ;; Return value:  Size  Location     Type
 14011 ;;                  1    wreg      void 
 14012 ;; Registers used:
 14013 ;;		wreg, status,2, cstack
 14014 ;; Tracked objects:
 14015 ;;		On entry : 0/0
 14016 ;;		On exit  : 0/0
 14017 ;;		Unchanged: 0/0
 14018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14019 ;;      Params:         0       0       0       0       0       0       0       0       0
 14020 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14021 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14022 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14023 ;;Total ram usage:        0 bytes
 14024 ;; Hardware stack levels used:    1
 14025 ;; Hardware stack levels required when called:    1
 14026 ;; This function calls:
 14027 ;;		_OSCILLATOR_Initialize
 14028 ;;		_PIN_MANAGER_Initialize
 14029 ;;		_SPI1_Initialize
 14030 ;; This function is called by:
 14031 ;;		_guardar
 14032 ;; This function uses a non-reentrant model
 14033 ;;
 14034                           
 14035                           	psect	text51
 14036  00561A                     __ptext51:
 14037                           	opt callstack 0
 14038  00561A                     _SYSTEM_Initialize:
 14039                           	opt callstack 28
 14040                           
 14041                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 14042                           
 14043                           ;incstack = 0
 14044  00561A  EC6D  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 14045                           
 14046                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 14047  00561E  ECF5  F02A         	call	_OSCILLATOR_Initialize	;wreg free
 14048                           
 14049                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14050  005622  EC14  F02B         	call	_SPI1_Initialize	;wreg free
 14051  005626  0012               	return		;funcret
 14052  005628                     __end_of_SYSTEM_Initialize:
 14053                           	opt callstack 0
 14054                           
 14055 ;; *************** function _SPI1_Initialize *****************
 14056 ;; Defined at:
 14057 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;		None
 14060 ;; Auto vars:     Size  Location     Type
 14061 ;;		None
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      void 
 14064 ;; Registers used:
 14065 ;;		wreg, status,2
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 0/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14071 ;;      Params:         0       0       0       0       0       0       0       0       0
 14072 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14073 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14074 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14075 ;;Total ram usage:        0 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; This function calls:
 14078 ;;		Nothing
 14079 ;; This function is called by:
 14080 ;;		_disk_initialize
 14081 ;;		_SYSTEM_Initialize
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           	psect	text52
 14086  005628                     __ptext52:
 14087                           	opt callstack 0
 14088  005628                     _SPI1_Initialize:
 14089                           	opt callstack 26
 14090                           
 14091                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14092                           
 14093                           ;incstack = 0
 14094  005628  0E40               	movlw	64
 14095  00562A  6EC7               	movwf	4039,c	;volatile
 14096                           
 14097                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14098  00562C  0E22               	movlw	34
 14099  00562E  6EC6               	movwf	4038,c	;volatile
 14100                           
 14101                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14102  005630  0E00               	movlw	0
 14103  005632  6EC8               	movwf	4040,c	;volatile
 14104  005634  0012               	return		;funcret
 14105  005636                     __end_of_SPI1_Initialize:
 14106                           	opt callstack 0
 14107                           
 14108 ;; *************** function _PIN_MANAGER_Initialize *****************
 14109 ;; Defined at:
 14110 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;		None
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;		None
 14115 ;; Return value:  Size  Location     Type
 14116 ;;                  1    wreg      void 
 14117 ;; Registers used:
 14118 ;;		wreg, status,2
 14119 ;; Tracked objects:
 14120 ;;		On entry : 0/0
 14121 ;;		On exit  : 0/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14124 ;;      Params:         0       0       0       0       0       0       0       0       0
 14125 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14126 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14127 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14128 ;;Total ram usage:        0 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; This function calls:
 14131 ;;		Nothing
 14132 ;; This function is called by:
 14133 ;;		_SYSTEM_Initialize
 14134 ;; This function uses a non-reentrant model
 14135 ;;
 14136                           
 14137                           	psect	text53
 14138  0054DA                     __ptext53:
 14139                           	opt callstack 0
 14140  0054DA                     _PIN_MANAGER_Initialize:
 14141                           	opt callstack 28
 14142                           
 14143                           ;mcc_generated_files/pin_manager.c: 56:     LATE = 0x00;
 14144                           
 14145                           ;incstack = 0
 14146  0054DA  0E00               	movlw	0
 14147  0054DC  6E8D               	movwf	3981,c	;volatile
 14148                           
 14149                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 14150  0054DE  0E00               	movlw	0
 14151  0054E0  6E8C               	movwf	3980,c	;volatile
 14152                           
 14153                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14154  0054E2  0E04               	movlw	4
 14155  0054E4  6E8A               	movwf	3978,c	;volatile
 14156                           
 14157                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14158  0054E6  0E00               	movlw	0
 14159  0054E8  6E8B               	movwf	3979,c	;volatile
 14160                           
 14161                           ;mcc_generated_files/pin_manager.c: 65:     TRISE = 0x07;
 14162  0054EA  0E07               	movlw	7
 14163  0054EC  6E96               	movwf	3990,c	;volatile
 14164                           
 14165                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14166  0054EE  0EF1               	movlw	241
 14167  0054F0  6E93               	movwf	3987,c	;volatile
 14168                           
 14169                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14170  0054F2  0EC7               	movlw	199
 14171  0054F4  6E94               	movwf	3988,c	;volatile
 14172                           
 14173                           ;mcc_generated_files/pin_manager.c: 69:     TRISD = 0x00;
 14174  0054F6  0E00               	movlw	0
 14175  0054F8  6E95               	movwf	3989,c	;volatile
 14176                           
 14177                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14178  0054FA  0EC4               	movlw	196
 14179  0054FC  010F               	movlb	15	; () banked
 14180  0054FE  6F5D               	movwf	93,b	;volatile
 14181                           
 14182                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14183  005500  0E30               	movlw	48
 14184  005502  6F5C               	movwf	92,b	;volatile
 14185                           
 14186                           ;mcc_generated_files/pin_manager.c: 76:     ANSELD = 0x00;
 14187  005504  0E00               	movlw	0
 14188  005506  6F5E               	movwf	94,b	;volatile
 14189                           
 14190                           ;mcc_generated_files/pin_manager.c: 77:     ANSELE = 0x07;
 14191  005508  0E07               	movlw	7
 14192  00550A  6F5F               	movwf	95,b	;volatile
 14193                           
 14194                           ; BSR set to: 15
 14195                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14196  00550C  6885               	setf	3973,c	;volatile
 14197                           
 14198                           ; BSR set to: 15
 14199                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14200  00550E  9EF1               	bcf	4081,7,c	;volatile
 14201                           
 14202                           ; BSR set to: 15
 14203  005510  0012               	return		;funcret
 14204  005512                     __end_of_PIN_MANAGER_Initialize:
 14205                           	opt callstack 0
 14206                           
 14207 ;; *************** function _OSCILLATOR_Initialize *****************
 14208 ;; Defined at:
 14209 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14210 ;; Parameters:    Size  Location     Type
 14211 ;;		None
 14212 ;; Auto vars:     Size  Location     Type
 14213 ;;		None
 14214 ;; Return value:  Size  Location     Type
 14215 ;;                  1    wreg      void 
 14216 ;; Registers used:
 14217 ;;		wreg, status,2
 14218 ;; Tracked objects:
 14219 ;;		On entry : 0/0
 14220 ;;		On exit  : 0/0
 14221 ;;		Unchanged: 0/0
 14222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14223 ;;      Params:         0       0       0       0       0       0       0       0       0
 14224 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14225 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14226 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14227 ;;Total ram usage:        0 bytes
 14228 ;; Hardware stack levels used:    1
 14229 ;; This function calls:
 14230 ;;		Nothing
 14231 ;; This function is called by:
 14232 ;;		_SYSTEM_Initialize
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           	psect	text54
 14237  0055EA                     __ptext54:
 14238                           	opt callstack 0
 14239  0055EA                     _OSCILLATOR_Initialize:
 14240                           	opt callstack 28
 14241                           
 14242                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14243                           
 14244                           ; BSR set to: 15
 14245                           ;incstack = 0
 14246  0055EA  0E60               	movlw	96
 14247  0055EC  6ED3               	movwf	4051,c	;volatile
 14248                           
 14249                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14250  0055EE  0E00               	movlw	0
 14251  0055F0  6ED2               	movwf	4050,c	;volatile
 14252                           
 14253                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14254  0055F2  0E00               	movlw	0
 14255  0055F4  6E9B               	movwf	3995,c	;volatile
 14256                           
 14257                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14258  0055F6  0E00               	movlw	0
 14259  0055F8  6EB5               	movwf	4021,c	;volatile
 14260  0055FA  0012               	return		;funcret
 14261  0055FC                     __end_of_OSCILLATOR_Initialize:
 14262                           	opt callstack 0
 14263                           
 14264 ;; *************** function _Error *****************
 14265 ;; Defined at:
 14266 ;;		line 11 in file "./Errores.h"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;  a               1    wreg     unsigned char 
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;  a               1    0[COMRAM] unsigned char 
 14271 ;; Return value:  Size  Location     Type
 14272 ;;                  1    wreg      void 
 14273 ;; Registers used:
 14274 ;;		wreg, status,2, status,0
 14275 ;; Tracked objects:
 14276 ;;		On entry : 0/0
 14277 ;;		On exit  : 0/0
 14278 ;;		Unchanged: 0/0
 14279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14280 ;;      Params:         0       0       0       0       0       0       0       0       0
 14281 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14282 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14283 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14284 ;;Total ram usage:        1 bytes
 14285 ;; Hardware stack levels used:    1
 14286 ;; This function calls:
 14287 ;;		Nothing
 14288 ;; This function is called by:
 14289 ;;		_guardar
 14290 ;;		_main
 14291 ;; This function uses a non-reentrant model
 14292 ;;
 14293                           
 14294                           	psect	text55
 14295  004A66                     __ptext55:
 14296                           	opt callstack 0
 14297  004A66                     _Error:
 14298                           	opt callstack 29
 14299                           
 14300                           ;incstack = 0
 14301                           ;Error@a stored from wreg
 14302  004A66  6E01               	movwf	Error@a,c
 14303                           
 14304                           ;./Errores.h: 12:     if (a == 1){
 14305  004A68  0401               	decf	Error@a,w,c
 14306  004A6A  A4D8               	btfss	status,2,c
 14307  004A6C  D008               	goto	l5810
 14308                           
 14309                           ;./Errores.h: 13:         LATAbits.LATA0 ^= 1;
 14310  004A6E  7089               	btg	3977,0,c	;volatile
 14311                           
 14312                           ;./Errores.h: 14:         LATAbits.LATA1 ^= 1;
 14313  004A70  7289               	btg	3977,1,c	;volatile
 14314                           
 14315                           ;./Errores.h: 15:         LATAbits.LATA2 ^= 1;
 14316  004A72  7489               	btg	3977,2,c	;volatile
 14317                           
 14318                           ;./Errores.h: 16:         LATAbits.LATA3 ^= 1;
 14319  004A74  7689               	btg	3977,3,c	;volatile
 14320                           
 14321                           ;./Errores.h: 17:         LATAbits.LATA4 ^= 1;
 14322  004A76  7889               	btg	3977,4,c	;volatile
 14323                           
 14324                           ;./Errores.h: 18:         LATAbits.LATA5 ^= 1;
 14325  004A78  7A89               	btg	3977,5,c	;volatile
 14326                           
 14327                           ;./Errores.h: 19:         LATAbits.LATA6 ^= 1;
 14328  004A7A  7C89               	btg	3977,6,c	;volatile
 14329                           
 14330                           ;./Errores.h: 20:         LATAbits.LATA7 ^= 1;
 14331  004A7C  7E89               	btg	3977,7,c	;volatile
 14332  004A7E                     l5810:
 14333                           
 14334                           ;./Errores.h: 22:     if (a == 2){
 14335  004A7E  0E02               	movlw	2
 14336  004A80  1801               	xorwf	Error@a,w,c
 14337  004A82  A4D8               	btfss	status,2,c
 14338  004A84  D008               	goto	l5816
 14339                           
 14340                           ;./Errores.h: 23:         LATAbits.LATA0 ^= 0;
 14341  004A86  5089               	movf	3977,w,c	;volatile
 14342                           
 14343                           ;./Errores.h: 24:         LATAbits.LATA1 ^= 0;
 14344  004A88  5089               	movf	3977,w,c	;volatile
 14345                           
 14346                           ;./Errores.h: 25:         LATAbits.LATA2 ^= 0;
 14347  004A8A  5089               	movf	3977,w,c	;volatile
 14348                           
 14349                           ;./Errores.h: 26:         LATAbits.LATA3 ^= 0;
 14350  004A8C  5089               	movf	3977,w,c	;volatile
 14351                           
 14352                           ;./Errores.h: 27:         LATAbits.LATA4 ^= 0;
 14353  004A8E  5089               	movf	3977,w,c	;volatile
 14354                           
 14355                           ;./Errores.h: 28:         LATAbits.LATA5 ^= 0;
 14356  004A90  5089               	movf	3977,w,c	;volatile
 14357                           
 14358                           ;./Errores.h: 29:         LATAbits.LATA6 ^= 0;
 14359  004A92  5089               	movf	3977,w,c	;volatile
 14360                           
 14361                           ;./Errores.h: 30:         LATAbits.LATA7 ^= 1;
 14362  004A94  7E89               	btg	3977,7,c	;volatile
 14363  004A96                     l5816:
 14364                           
 14365                           ;./Errores.h: 32:     if (a == 3){
 14366  004A96  0E03               	movlw	3
 14367  004A98  1801               	xorwf	Error@a,w,c
 14368  004A9A  A4D8               	btfss	status,2,c
 14369  004A9C  D008               	goto	l5824
 14370                           
 14371                           ;./Errores.h: 33:         LATAbits.LATA0 ^= 0;
 14372  004A9E  5089               	movf	3977,w,c	;volatile
 14373                           
 14374                           ;./Errores.h: 34:         LATAbits.LATA1 ^= 0;
 14375  004AA0  5089               	movf	3977,w,c	;volatile
 14376                           
 14377                           ;./Errores.h: 35:         LATAbits.LATA2 ^= 0;
 14378  004AA2  5089               	movf	3977,w,c	;volatile
 14379                           
 14380                           ;./Errores.h: 36:         LATAbits.LATA3 ^= 0;
 14381  004AA4  5089               	movf	3977,w,c	;volatile
 14382                           
 14383                           ;./Errores.h: 37:         LATAbits.LATA4 ^= 0;
 14384  004AA6  5089               	movf	3977,w,c	;volatile
 14385                           
 14386                           ;./Errores.h: 38:         LATAbits.LATA5 ^= 0;
 14387  004AA8  5089               	movf	3977,w,c	;volatile
 14388                           
 14389                           ;./Errores.h: 39:         LATAbits.LATA6 ^= 1;
 14390  004AAA  7C89               	btg	3977,6,c	;volatile
 14391                           
 14392                           ;./Errores.h: 40:         LATAbits.LATA7 ^= 1;
 14393  004AAC  7E89               	btg	3977,7,c	;volatile
 14394  004AAE                     l5824:
 14395                           
 14396                           ;./Errores.h: 42:     if (a == 4){
 14397  004AAE  0E04               	movlw	4
 14398  004AB0  1801               	xorwf	Error@a,w,c
 14399  004AB2  A4D8               	btfss	status,2,c
 14400  004AB4  D008               	goto	l5834
 14401                           
 14402                           ;./Errores.h: 43:         LATAbits.LATA0 ^= 0;
 14403  004AB6  5089               	movf	3977,w,c	;volatile
 14404                           
 14405                           ;./Errores.h: 44:         LATAbits.LATA1 ^= 0;
 14406  004AB8  5089               	movf	3977,w,c	;volatile
 14407                           
 14408                           ;./Errores.h: 45:         LATAbits.LATA2 ^= 0;
 14409  004ABA  5089               	movf	3977,w,c	;volatile
 14410                           
 14411                           ;./Errores.h: 46:         LATAbits.LATA3 ^= 0;
 14412  004ABC  5089               	movf	3977,w,c	;volatile
 14413                           
 14414                           ;./Errores.h: 47:         LATAbits.LATA4 ^= 0;
 14415  004ABE  5089               	movf	3977,w,c	;volatile
 14416                           
 14417                           ;./Errores.h: 48:         LATAbits.LATA5 ^= 1;
 14418  004AC0  7A89               	btg	3977,5,c	;volatile
 14419                           
 14420                           ;./Errores.h: 49:         LATAbits.LATA6 ^= 1;
 14421  004AC2  7C89               	btg	3977,6,c	;volatile
 14422                           
 14423                           ;./Errores.h: 50:         LATAbits.LATA7 ^= 1;
 14424  004AC4  7E89               	btg	3977,7,c	;volatile
 14425  004AC6                     l5834:
 14426                           
 14427                           ;./Errores.h: 52:     if (a == 5){
 14428  004AC6  0E05               	movlw	5
 14429  004AC8  1801               	xorwf	Error@a,w,c
 14430  004ACA  A4D8               	btfss	status,2,c
 14431  004ACC  D008               	goto	l5846
 14432                           
 14433                           ;./Errores.h: 53:         LATAbits.LATA0 ^= 0;
 14434  004ACE  5089               	movf	3977,w,c	;volatile
 14435                           
 14436                           ;./Errores.h: 54:         LATAbits.LATA1 ^= 0;
 14437  004AD0  5089               	movf	3977,w,c	;volatile
 14438                           
 14439                           ;./Errores.h: 55:         LATAbits.LATA2 ^= 0;
 14440  004AD2  5089               	movf	3977,w,c	;volatile
 14441                           
 14442                           ;./Errores.h: 56:         LATAbits.LATA3 ^= 0;
 14443  004AD4  5089               	movf	3977,w,c	;volatile
 14444                           
 14445                           ;./Errores.h: 57:         LATAbits.LATA4 ^= 1;
 14446  004AD6  7889               	btg	3977,4,c	;volatile
 14447                           
 14448                           ;./Errores.h: 58:         LATAbits.LATA5 ^= 1;
 14449  004AD8  7A89               	btg	3977,5,c	;volatile
 14450                           
 14451                           ;./Errores.h: 59:         LATAbits.LATA6 ^= 1;
 14452  004ADA  7C89               	btg	3977,6,c	;volatile
 14453                           
 14454                           ;./Errores.h: 60:         LATAbits.LATA7 ^= 1;
 14455  004ADC  7E89               	btg	3977,7,c	;volatile
 14456  004ADE                     l5846:
 14457                           
 14458                           ;./Errores.h: 62:     if (a == 6){
 14459  004ADE  0E06               	movlw	6
 14460  004AE0  1801               	xorwf	Error@a,w,c
 14461  004AE2  A4D8               	btfss	status,2,c
 14462  004AE4  D008               	goto	l5860
 14463                           
 14464                           ;./Errores.h: 63:         LATAbits.LATA0 ^= 0;
 14465  004AE6  5089               	movf	3977,w,c	;volatile
 14466                           
 14467                           ;./Errores.h: 64:         LATAbits.LATA1 ^= 0;
 14468  004AE8  5089               	movf	3977,w,c	;volatile
 14469                           
 14470                           ;./Errores.h: 65:         LATAbits.LATA2 ^= 0;
 14471  004AEA  5089               	movf	3977,w,c	;volatile
 14472                           
 14473                           ;./Errores.h: 66:         LATAbits.LATA3 ^= 1;
 14474  004AEC  7689               	btg	3977,3,c	;volatile
 14475                           
 14476                           ;./Errores.h: 67:         LATAbits.LATA4 ^= 1;
 14477  004AEE  7889               	btg	3977,4,c	;volatile
 14478                           
 14479                           ;./Errores.h: 68:         LATAbits.LATA5 ^= 1;
 14480  004AF0  7A89               	btg	3977,5,c	;volatile
 14481                           
 14482                           ;./Errores.h: 69:         LATAbits.LATA6 ^= 1;
 14483  004AF2  7C89               	btg	3977,6,c	;volatile
 14484                           
 14485                           ;./Errores.h: 70:         LATAbits.LATA7 ^= 1;
 14486  004AF4  7E89               	btg	3977,7,c	;volatile
 14487  004AF6                     l5860:
 14488                           
 14489                           ;./Errores.h: 72:     if (a == 7){
 14490  004AF6  0E07               	movlw	7
 14491  004AF8  1801               	xorwf	Error@a,w,c
 14492  004AFA  A4D8               	btfss	status,2,c
 14493  004AFC  D008               	goto	l5876
 14494                           
 14495                           ;./Errores.h: 73:         LATAbits.LATA0 ^= 0;
 14496  004AFE  5089               	movf	3977,w,c	;volatile
 14497                           
 14498                           ;./Errores.h: 74:         LATAbits.LATA1 ^= 0;
 14499  004B00  5089               	movf	3977,w,c	;volatile
 14500                           
 14501                           ;./Errores.h: 75:         LATAbits.LATA2 ^= 1;
 14502  004B02  7489               	btg	3977,2,c	;volatile
 14503                           
 14504                           ;./Errores.h: 76:         LATAbits.LATA3 ^= 1;
 14505  004B04  7689               	btg	3977,3,c	;volatile
 14506                           
 14507                           ;./Errores.h: 77:         LATAbits.LATA4 ^= 1;
 14508  004B06  7889               	btg	3977,4,c	;volatile
 14509                           
 14510                           ;./Errores.h: 78:         LATAbits.LATA5 ^= 1;
 14511  004B08  7A89               	btg	3977,5,c	;volatile
 14512                           
 14513                           ;./Errores.h: 79:         LATAbits.LATA6 ^= 1;
 14514  004B0A  7C89               	btg	3977,6,c	;volatile
 14515                           
 14516                           ;./Errores.h: 80:         LATAbits.LATA7 ^= 1;
 14517  004B0C  7E89               	btg	3977,7,c	;volatile
 14518  004B0E                     l5876:
 14519                           
 14520                           ;./Errores.h: 82:     if (a == 11){
 14521  004B0E  0E0B               	movlw	11
 14522  004B10  1801               	xorwf	Error@a,w,c
 14523  004B12  A4D8               	btfss	status,2,c
 14524  004B14  D008               	goto	l5892
 14525                           
 14526                           ;./Errores.h: 83:         LATAbits.LATA0 ^= 0;
 14527  004B16  5089               	movf	3977,w,c	;volatile
 14528                           
 14529                           ;./Errores.h: 84:         LATAbits.LATA1 ^= 1;
 14530  004B18  7289               	btg	3977,1,c	;volatile
 14531                           
 14532                           ;./Errores.h: 85:         LATAbits.LATA2 ^= 0;
 14533  004B1A  5089               	movf	3977,w,c	;volatile
 14534                           
 14535                           ;./Errores.h: 86:         LATAbits.LATA3 ^= 0;
 14536  004B1C  5089               	movf	3977,w,c	;volatile
 14537                           
 14538                           ;./Errores.h: 87:         LATAbits.LATA4 ^= 0;
 14539  004B1E  5089               	movf	3977,w,c	;volatile
 14540                           
 14541                           ;./Errores.h: 88:         LATAbits.LATA5 ^= 1;
 14542  004B20  7A89               	btg	3977,5,c	;volatile
 14543                           
 14544                           ;./Errores.h: 89:         LATAbits.LATA6 ^= 0;
 14545  004B22  5089               	movf	3977,w,c	;volatile
 14546                           
 14547                           ;./Errores.h: 90:         LATAbits.LATA7 ^= 1;
 14548  004B24  7E89               	btg	3977,7,c	;volatile
 14549  004B26                     l5892:
 14550                           
 14551                           ;./Errores.h: 92:     if(a == 15) {
 14552  004B26  0E0F               	movlw	15
 14553  004B28  1801               	xorwf	Error@a,w,c
 14554  004B2A  A4D8               	btfss	status,2,c
 14555  004B2C  0012               	return	
 14556                           
 14557                           ;./Errores.h: 93:         LATAbits.LATA0 ^= 0;
 14558  004B2E  5089               	movf	3977,w,c	;volatile
 14559                           
 14560                           ;./Errores.h: 94:         LATAbits.LATA1 ^= 0;
 14561  004B30  5089               	movf	3977,w,c	;volatile
 14562                           
 14563                           ;./Errores.h: 95:         LATAbits.LATA2 ^= 0;
 14564  004B32  5089               	movf	3977,w,c	;volatile
 14565                           
 14566                           ;./Errores.h: 96:         LATAbits.LATA3 ^= 0;
 14567  004B34  5089               	movf	3977,w,c	;volatile
 14568                           
 14569                           ;./Errores.h: 97:         LATAbits.LATA4 ^= 0;
 14570  004B36  5089               	movf	3977,w,c	;volatile
 14571                           
 14572                           ;./Errores.h: 98:         LATAbits.LATA5 ^= 0;
 14573  004B38  5089               	movf	3977,w,c	;volatile
 14574                           
 14575                           ;./Errores.h: 99:         LATAbits.LATA6 ^= 0;
 14576  004B3A  5089               	movf	3977,w,c	;volatile
 14577                           
 14578                           ;./Errores.h: 100:         LATAbits.LATA7 ^= 0;
 14579  004B3C  5089               	movf	3977,w,c	;volatile
 14580  004B3E  0012               	return		;funcret
 14581  004B40                     __end_of_Error:
 14582                           	opt callstack 0
 14583                           
 14584                           	psect	rparam
 14585  0000                     tosu	equ	0xFFF
 14586                           tosh	equ	0xFFE
 14587                           tosl	equ	0xFFD
 14588                           stkptr	equ	0xFFC
 14589                           pclatu	equ	0xFFB
 14590                           pclath	equ	0xFFA
 14591                           pcl	equ	0xFF9
 14592                           tblptru	equ	0xFF8
 14593                           tblptrh	equ	0xFF7
 14594                           tblptrl	equ	0xFF6
 14595                           tablat	equ	0xFF5
 14596                           prodh	equ	0xFF4
 14597                           prodl	equ	0xFF3
 14598                           indf0	equ	0xFEF
 14599                           postinc0	equ	0xFEE
 14600                           postdec0	equ	0xFED
 14601                           preinc0	equ	0xFEC
 14602                           plusw0	equ	0xFEB
 14603                           fsr0h	equ	0xFEA
 14604                           fsr0l	equ	0xFE9
 14605                           wreg	equ	0xFE8
 14606                           indf1	equ	0xFE7
 14607                           postinc1	equ	0xFE6
 14608                           postdec1	equ	0xFE5
 14609                           preinc1	equ	0xFE4
 14610                           plusw1	equ	0xFE3
 14611                           fsr1h	equ	0xFE2
 14612                           fsr1l	equ	0xFE1
 14613                           bsr	equ	0xFE0
 14614                           indf2	equ	0xFDF
 14615                           postinc2	equ	0xFDE
 14616                           postdec2	equ	0xFDD
 14617                           preinc2	equ	0xFDC
 14618                           plusw2	equ	0xFDB
 14619                           fsr2h	equ	0xFDA
 14620                           fsr2l	equ	0xFD9
 14621                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    0
    Data        1
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    114     152
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> guardar@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 21
		 -> STR_4(CODE[21]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_4(CODE[21]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S402$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S402$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S402$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[21]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S83$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S83$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_guardar
    _guardar->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  430439
                              _Error
                        ___delay_sec
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              2     2      0  430195
                                            112 BANK0      2     2      0
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (2) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (5) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (6) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (7) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (6) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error                                                1     1      0     198
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   ___delay_sec
   _guardar
     _Error
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
       _mem_cpy
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _validate
         _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     72      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F7       6        0.0%
DATA                 0      0     325       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 15 21:37:36 2019

              _SPI1_Exchange8bit 55FC                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l80 5450  
                             l98 5264                      disk_ioctl@n 0037  
            ___wmul@multiplicand 0003                   ??_dir_register 0060  
               disk_write@sector 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                    create_name@dp 0009  
                  create_name@ni 0016                     __CFG_CP2$OFF 000000  
                  create_name@si 0013                   create_chain@cs 0069  
                   __CFG_CP3$OFF 000000                   create_chain@fs 0056  
                    __CFG_LVP$ON 000000                              l133 3BA4  
                            l320 2C6A                              l144 3C6C  
                            l305 3F3E                              l218 2104  
                            l315 2C60                              l155 3D6A  
                            l172 4C2A                              l412 3810  
                            l341 2426                              l318 2FB0  
                            l158 3D3A                              l176 4C34  
                            l177 4C48                              l193 45CE  
                            l194 45D6                              l610 1012  
                            l602 0CB4                              l195 45EA  
                            l380 3464                              l532 42C2  
                            l189 45C4                              l365 41C0  
                            l454 47AC                              l199 464A  
                            l519 3B70                              l730 19CC  
                            l651 322E                              l644 30A4  
                            l397 3640                              l653 3216  
                            l645 309C                              l734 1C5C  
                            l823 5604                              l399 3638  
                            l583 09D2                              l495 3A1A  
                            l596 0B1A                              l880 50B0  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 00D7              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                   ??_create_chain 005C  
                            wreg 000FE8                disk_initialize@ty 001A  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                create_chain@scl 0061                  create_chain@res 0060  
                    ld_clust@dir 0003                             l4112 510C  
                           l4130 5140                             l4122 512C  
                           l4124 5130                             l4116 5118  
                           l4140 51D0                             l4302 3FB6  
                           l5102 51B0                             l4080 55D0  
                           l4160 523A                             l4312 403C  
                           l4320 4096                             l5032 4D8A  
                           l5016 4CF4                             l5024 4D4A  
                           l4058 5436                             l4146 51E6  
                           l4234 462C                             l5026 4D58  
                           l5130 483A                             l4308 4030  
                           l4340 4FA8                             l5060 3F16  
                           l4420 24E2                             l6100 1C1A  
                           l5220 3AB2                             l5116 47D4  
                           l4182 5248                             l4270 4C5C  
                           l4502 4DF2                             l4422 2516  
                           l6110 1C78                             l4096 50DE  
                           l4176 53D8                             l4248 46AC  
                           l5072 46E6                             l5240 3AEE  
                           l5232 3ADC                             l5160 3998  
                           l5136 487A                             l5400 40D0  
                           l4338 4F8C                             l4370 2DD6  
                           l4442 2634                             l6122 1CEA  
                           l6114 1C86                             l5314 4A52  
                           l5250 3B2E                             l5242 3AFE  
                           l5146 3926                             l5402 40D8  
                           l6018 31FC                             l6202 128E  
                           l4372 2DF4                             l4452 26E6  
                           l4532 3474                             l4524 3410  
                           l4516 33C0                             l6132 1D32  
                           l6124 1D1E                             l6108 1C40  
                           l5332 48EE                             l5244 3B04  
                           l5148 392A                             l5500 4326  
                           l6036 3274                             l6052 3354  
                           l4198 5278                             l4286 4CCE  
                           l4614 1F74                             l4606 1F66  
                           l4382 2EBA                             l4374 2DFE  
                           l4462 27D8                             l4438 25FE  
                           l6070 1980                             l5350 4984  
                           l5318 4A5C                             l5086 477A  
                           l5182 39F6                             l6302 189A  
                           l6310 18D6                             l4704 23A0  
                           l4392 2F84                             l4560 3546  
                           l4544 34D2                             l4528 3434  
                           l6064 195E                             l5344 494A  
                           l5088 4782                             l5264 3B5E  
                           l5416 4136                             l6216 1376  
                           l4618 1F82                             l4706 23A6  
                           l4482 5334                             l4466 27EA  
                           l6170 1EEC                             l6146 1DB2  
                           l5338 490C                             l5602 0A64  
                           l5522 0886                             l5514 0860  
                           l4730 5368                             l5186 3A10  
                           l5426 41B0                             l6234 1406  
                           l6218 13B6                             l4644 214A  
                           l4628 2060                             l4708 23E8  
                           l4492 5558                             l5364 5038  
                           l5380 506E                             l4468 2816  
                           l6164 1E7A                             l5604 0A8A  
                           l4812 2860                             l4732 536C  
                           l4724 52C2                             l6316 1932  
                           l6260 15A8                             l6228 13E2  
                           l4670 22BE                             l4662 2228  
                           l4654 2198                             l5390 50A2  
                           l4478 5320                             l4574 3620  
                           l6086 1B9C                             l5286 49AE  
                           l5702 0DB6                             l5622 0ABA  
                           l5542 08CE                             l4822 28C4  
                           l4750 36BC                             l5446 4C10  
                           l6254 1520                             l6246 14BE  
                           l6238 1456                             l6342 435E  
                           l4648 2152                             l4488 5548  
                           l5368 503C                             l4568 35B8  
                           l4920 3BBA                             l5288 49B2  
                           l5616 0AB0                             l4832 296A  
                           l5464 4262                             l5456 420E  
                           l6272 16D6                             l5810 4A7E  
                           l4682 2328                             l4666 22B0  
                           l4594 55E4                             l5378 5062  
                           l5722 0EF0                             l5618 0AB6  
                           l5562 0912                             l5554 0908  
                           l5538 08CA                             l6282 1750  
                           l6266 15FC                             l6274 16F6  
                           l4692 2360                             l4676 22F6  
                           l4924 3BC2                             l4916 3BB0  
                           l5644 0B78                             l4756 370C  
                           l6292 17DA                             l6284 1774  
                           l6364 43F0                             l5902 54BA  
                           l4686 234A                             l4950 3C3C  
                           l5734 0FE4                             l5590 0A08  
                           l5574 0950                             l4854 2A02  
                           l4838 2980                             l4766 375E  
                           l6286 1792                             l5824 4AAE  
                           l5816 4A96                             l4696 2368  
                           l5584 09B6                             l4776 37D0  
                           l4768 3784                             l6392 5524  
                           l5834 4AC6                             l4938 3C08  
                           l5922 4EA8                             l4890 2B16  
                           l4866 2A20                             l6298 1824  
                           l6378 443A                             l6386 4466  
                           l5860 4AF6                             l4980 3CD2  
                           l5596 0A1E                             l5916 4E7A  
                           l4788 3850                             l5846 4ADE  
                           l5758 11B6                             l5926 4EBC  
                           l4878 2AC0                             l4894 2B5E  
                           l4984 3CF8                             l4976 3CC4  
                           l4968 3C9C                             l5936 4EE8  
                           l5794 45AC                             l4986 3D0A  
                           l5698 0DA0                             l4898 2BBC  
                           l5970 304A                             l5892 4B26  
                           l5876 4B0E                             l5948 2FD0  
                           l5982 3080                             l5898 54AA  
                           l5978 3074                             STR_1 0815  
                           STR_2 0815                             STR_3 0825  
                           STR_4 0801                             STR_5 0816  
                           STR_6 0816                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5200 2420                             u5105 2CB4  
                           u5050 4F30                             u6010 285C  
                           u5125 2D52                             u5215 2470  
                           u4520 5458                             u5080 2C30  
                           u4530 5464                             u5170 2EFC  
                           u5090 2C50                             u5155 2DE2  
                           u4700 526C                             u4620 51CC  
                           u5500 35F8                             u5420 34C0  
                           u7100 40CA                             u5245 2562  
                           u5270 261C                             u5190 2400  
                           u6070 2966                             u5175 2EF2  
                           u6055 28D0                             u4640 5206  
                           u5440 351E                             u6080 297C  
                           u6400 4D80                             u7200 4208  
                           u7050 5038                             u5290 2728  
                           u5370 33AE                             u5275 2612  
                           u4900 4C26                             u4740 45C0  
                           u5620 20FE                             u6340 3D42  
                           u5605 2068                             u4830 4666  
                           u5550 1F7E                             u7070 5072  
                           u5390 3422                             u8110 195A  
                           u6270 3C74                             u6190 3BAA  
                           u6510 47A0                             u7150 418A  
                           u4647 51FC                             u5615 208E  
                           u5295 271E                             u6175 2BDE  
                           u6407 4D76                             u8200 1C06  
                           u6360 3D66                             u7160 41E0  
                           u5625 20F4                             u4850 468E  
                           u8210 1C2C                             u7330 08C6  
                           u7250 42BC                             u7090 40AA  
                           u5715 21DC                             u6380 4D22  
                           u6540 47CE                             u5725 21FE  
                           u4950 4C84                             u4870 46BC  
                           u5734 221C                             u5670 217A  
                           u8310 1E66                             u7430 0AA4  
                           u6710 3A26                             u5830 52D2  
                           u4935 4C3A                             u5735 2216  
                           u9007 3D2C                             u5840 5306  
                           u8400 12E8                             u9017 5444  
                           u4785 45DC                             u5745 2266  
                           u4970 4CB0                             u8330 1ED0  
                           u7450 0AB6                             u6490 4766  
                           u6730 3A32                             u9027 5258  
                           u5675 2170                             u5595 2038  
                           u8315 1E5C                             u6387 4D12  
                           u8260 1D42                             u5940 37E0  
                           u5860 539C                             u6660 39E0  
                           u9037 54B0                             u8165 1A44  
                           u8405 12DE                             u4990 4CDE  
                           u6750 3A5C                             u8280 1DC6  
                           u6920 49D4                             u5880 36B8  
                           u6680 39F2                             u7625 0ED0  
                           u7650 1038                             u6770 3A68  
                           u7555 0CE8                             u8515 1538  
                           u7580 0D9C                             u7900 4EE4  
                           u8620 18DE                             u7590 0DB2  
                           u7655 102E                             u5985 3886  
                           u5995 38D2                             u6980 4908  
                           u8565 169C                             u6990 4946  
                           u8670 437C                             u8575 16E0  
                           u8997 3C5E                             _WPUB 000F85  
                           _Fsid 00D2                             _Stat 00F7  
                           _main 5512                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 560C                    __CFG_IESO$OFF 000000  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0019  
                   ?_follow_path 0086               disk_initialize@ocr 0013  
                   ___param_bank 000000               disk_initialize@tmr 001B  
                create_name@path 000B                 create_chain@clst 0058  
                    _sync_window 3F42   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 55FC                            ?_main 0001  
                __end_of___lldiv 50C2                   __CFG_DEBUG$OFF 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  __end_of_f_close 54A2  
                          _FatFs 05D2                  __end_of_chk_chr 53AE  
             __size_of_SPI1_Open 000E                  __end_of_f_lseek 1F52  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000              ___lmul@multiplicand 0005  
                  __CFG_WRT3$OFF 000000                  __end_of_f_mount 4F06  
                          _Error 4A66                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                     ___send_cmd@n 0009  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                __end_of_dir_sdi 3914                   __CFG_EBTR3$OFF 000000  
                __end_of_f_write 1944                  __end_of_get_fat 2FC2  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
                __end_of_mem_cmp 5310                  __end_of_mem_cpy 4D9C  
                __end_of_mem_set 556A                  __end_of_guardar 446E  
                  find_volume@br 0060                    find_volume@fs 0098  
                  find_volume@pt 007A                   disk_ioctl@buff 0012  
                 disk_read@count 0017                            tablat 000FF5  
                 disk_ioctl@pdrv 0031                            plusw2 000FDB  
                __end_of_put_fat 281A                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                  __end_of_sync_fs 3F42  
                 __CFG_ICPRT$OFF 000000                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                  __initialization 53F0  
            disk_initialize@pdrv 0012                     __end_of_main 553E  
                   clust2sect@fs 000D                   __CFG_PCLKEN$ON 000000  
                         ??_main 0060                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000                           ?_Error 0001  
                __CFG_CCP2MX$RC1 000000                           _ACTCON 000FB5  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F                   __CFG_WDTEN$OFF 000000  
                         _OSCCON 000FD3             __end_of_dir_register 4C16  
               __end_of_check_fs 4988            SPI1_Exchange8bit@data 0001  
                         Error@a 0001       __size_of_SPI1_Exchange8bit 0010  
           __size_of_create_name 0284         __size_of_disk_initialize 01EA  
               __end_of_deselect 5640                 __end_of_dir_find 489C  
                 __CFG_XINST$OFF 000000                __end_of_SPI1_Open 561A  
               __end_of_dir_next 2C20                     ?_move_window 0030  
           __end_of_create_chain 3652                 __end_of_ld_clust 51C2  
                         ___lmul 5310             __size_of_find_volume 09AE  
           __size_of_disk_status 0012                           ___wmul 5594  
                 __CFG_STVREN$ON 000000                        ??___lldiv 0009  
                         _f_open 2FC2                           _f_sync 446E  
                      ??_f_close 0050                   find_volume@fmt 0097  
                         clear_0 540A                           clear_1 541C  
                 find_volume@rfs 0045                        ??_chk_chr 0005  
                 find_volume@vol 0080                           _select 55BA  
                      ??_f_lseek 0073                        ??_f_mount 0057  
                      ??_dir_sdi 0060                        ??_f_write 0075  
                      ??_get_fat 0041                 __end_of_send_cmd 53F0  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                        ??_guardar 0060  
                disk_ioctl@csize 0032                 __end_of_validate 5040  
           __end_of_get_ldnumber 4A66                     __mediumconst 0000  
                disk_read@sector 0013                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               __end_of_st_clust 5594                        ??_put_fat 0045  
                xmit_datablock@i 0007                        ??_sync_fs 003C  
             rcvr_datablock@buff 0002             __CFG_LS48MHZ$SYS24X4 000000  
              _SYSTEM_Initialize 561A                       __accesstop 0060  
        __end_of__initialization 5422                  __CFG_PBADEN$OFF 000000  
                 disk_write@buff 0011                   get_ldnumber@tp 0007  
                 get_ldnumber@tt 000D                   disk_write@pdrv 001A  
             ?_SYSTEM_Initialize 0001                    ___rparam_used 000001  
        __size_of_rcvr_datablock 006C                    __end_of_Error 4B40  
                 __pcstackCOMRAM 0001                 __CFG_nPWRTEN$OFF 000000  
                   __pidataBANK0 5640              ??_SYSTEM_Initialize 0001  
                     ___send_cmd 50C2             __size_of_follow_path 0146  
              ??_SPI1_Initialize 0001                    ??___delay_sec 0001  
             __size_of_dir_alloc 00F0                          ??_Error 0001  
             __size_of_disk_read 00CC        __end_of_SYSTEM_Initialize 5628  
                     __pbssBANK0 00D2                __CFG_PLLSEL$PLL4X 000000  
                        ?___lmul 0001                          ?___wmul 0001  
                        ?_f_open 009A          __size_of_xmit_datablock 007C  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?_check_fs 003B  
                     _disk_ioctl 1F52                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 45B0                          _OSCTUNE 000F9B  
                    send_cmd@cmd 000F                        ?_deselect 0001  
                    send_cmd@arg 000B                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0056  
                        _SSP1BUF 000FC9                        ?_dir_find 0080  
            __end_of___delay_sec 54DA                        ?_dir_next 006D  
          __size_of_dir_register 00D6                        ?_ld_clust 0001  
                     _clust2sect 4D9C                 sync_window@wsect 002C  
                  ?_remove_chain 0056            __size_of_create_chain 02FA  
              __end_of_dir_alloc 47B0                        ?_send_cmd 000B  
                        __Hparam 0000                   ___send_cmd@cmd 000A  
                 ___send_cmd@arg 0004                   ___send_cmd@res 0008  
                        __Lparam 0000                        ?_validate 0002  
              __end_of_disk_read 4CE2                          ff@FatFs 00D4  
                     f_close@res 0050                  __size_of___lmul 0056  
                      ?_st_clust 0001                      ?___send_cmd 0004  
                        ___lldiv 5040                  __size_of___wmul 0026  
           __size_of_move_window 00A6                       check_fs@fs 003B  
                __size_of_f_open 0396                     __psmallconst 0800  
                __size_of_f_sync 0142                          _f_close 5468  
          __size_of_get_ldnumber 00DE              _disk_initialize$326 0017  
                        __pcinit 53F0                          _chk_chr 5366  
                        _f_lseek 1944                          __ramtop 0800  
                        _f_mount 4E56                  __size_of_select 001E  
                        __ptext0 5512                          __ptext1 432A  
                        __ptext2 11E0                          __ptext3 2FC2  
                        __ptext4 409A                          __ptext5 41E4  
                        __ptext6 5144                          __ptext7 47B0  
                        __ptext8 52AA                          __ptext9 3914  
                        _dir_sdi 3652                      validate@fil 0008  
                        _f_write 11E0                      validate@obj 0002  
                        _get_fat 2C20                       chk_chr@chr 0003  
                   _dir_register 4B40                       chk_chr@str 0001  
                        _mem_cmp 52AA                          _mem_cpy 4CE2  
          _OSCILLATOR_Initialize 55EA                          _mem_set 553E  
                        _guardar 432A                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3358                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23F0  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 3D82                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 5422  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 523E  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 4988  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 560C                       _wait_ready 542C  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$816 0011  
                     dir_sdi@idx 0058                      ___delay_sec 54A2  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 52AA  
                  ??_create_name 000D                 disk_initialize@n 001D  
                     ld_clust@cl 000B                       ld_clust@fs 0001  
                _SPI1_Initialize 5628                    ??_find_volume 004A  
                  ??_disk_status 0001                   _xmit_datablock 51C2  
                     ?_SPI1_Open 0001                   __end_of___lmul 5366  
                    st_clust@dir 0001                   __end_of___wmul 55BA  
                 __end_of_f_open 3358                   __end_of_f_sync 45B0  
                 clust2sect@clst 000F           ?_OSCILLATOR_Initialize 0001  
                 __end_of_select 55D8             __size_of_sync_window 0158  
            start_initialization 53F0  __size_of_PIN_MANAGER_Initialize 0038  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 3B98  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 523E  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 3B98              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00F7  
            __end_of_find_volume 11E0              __end_of_disk_status 55EA  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 41E4                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 05D2  
                  __pcstackBANK0 0060                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 5636                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
                _find_volume$920 0070                  _find_volume$921 0074  
         _PIN_MANAGER_Initialize 54DA                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 46C0                         ?___lldiv 0001  
              __size_of_validate 0094                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 4C16  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 432A  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                       ?_guardar 0001                   __size_of_Error 00DA  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 3D82                         ?_sync_fs 003A  
                    _get_fat$566 004A                find_volume@fasize 008D  
            __size_of_wait_ready 003C               __end_of___send_cmd 5144  
                    _create_name 3914                   ___wmul@product 0005  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 0832                      _disk_status 55D8  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00D6  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                     put_fat@res 0053                       put_fat@val 0041  
              move_window@sector 0032                  dir_next@stretch 006F  
                       __Hrparam 0000                        guardar@bw 00D0  
                       __Lrparam 0000                      _follow_path 41E4  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23F0  
          __size_of_remove_chain 014A               __end_of_disk_write 46C0  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 0082  
            __end_of_move_window 4FAC               __end_of_clust2sect 4E56  
               __size_of_f_close 003A                 __size_of_chk_chr 0048  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 0764  
               __size_of_get_fat 03A2                         _check_fs 489C  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 00BA  
               __size_of_mem_set 002C                 __size_of_guardar 0144  
            xmit_datablock@token 0006                  ___delay_sec@sec 0004  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 5636                         __ptext10 5366  
                       __ptext11 4B40                         __ptext20 560C  
                       __ptext12 4CE2                         __ptext21 489C  
                       __ptext13 46C0                         __ptext30 446E  
                       __ptext22 1944                         __ptext14 3652  
                       __ptext31 4FAC                         __ptext23 3358  
                       __ptext15 281A                         __ptext40 45B0  
                       __ptext32 55D8                         __ptext24 23F0  
                       __ptext16 4E56                         __ptext41 51C2  
                       __ptext33 3D82                         __ptext25 2C20  
                       __ptext17 0832                         __ptext50 54A2  
                       __ptext42 4C16                         __ptext34 553E  
                       __ptext26 4D9C                         __ptext18 4988  
                       __ptext51 561A                         __ptext43 53AE  
                       __ptext35 1F52                         __ptext27 5310  
                       __ptext19 3B98                         __ptext52 5628  
                       __ptext44 50C2                         __ptext36 5594  
                       __ptext28 5040                         __ptext53 54DA  
                       __ptext45 55BA                         __ptext37 556A  
                       __ptext29 5468                         __ptext54 55EA  
                       __ptext46 542C                         __ptext38 4F06  
                       __ptext55 4A66                         __ptext47 5636  
                       __ptext39 3F42                         __ptext48 523E  
                       __ptext49 55FC                         _dir_find 47B0  
                   _SSP1CON1bits 000FC6                         _dir_next 281A  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 5144                 __size_of_put_fat 042A  
                 sync_window@res 0029                 __size_of_sync_fs 01C0  
                  __size_of_main 002C                       sync_fs@res 0044  
                   _remove_chain 409A                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 53AE  
                       _validate 4FAC                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 556A  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$335 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0009  
                      put_fat@fs 003B                         mem_cpy@s 000B  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                 dir_register@dp 008A                 ??_xmit_datablock 0007  
             __end_of_wait_ready 5468                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 4F06             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054                    ?_dir_register 008A  
                  ___delay_sec@i 0005                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 409A                      dir_find@res 0085  
           __size_of___delay_sec 0038                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 5512  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                   ?_disk_status 0001                      _put_fat$592 004D  
                    _put_fat$593 004F  
