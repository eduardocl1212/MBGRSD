

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 17 22:04:36 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73  0000                     
    74                           ; Version 2.05
    75                           ; Generated 20/12/2018 GMT
    76                           ; 
    77                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F45K50 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataBANK0
   110  00563E                     __pidataBANK0:
   111                           	opt callstack 0
   112                           
   113                           ;initializer for _Stat
   114  00563E  01                 	db	1
   115                           
   116                           	psect	idataBANK1
   117  00562A                     __pidataBANK1:
   118                           	opt callstack 0
   119                           
   120                           ;initializer for Error@F5051
   121  00562A  7E                 	db	126
   122  00562B  30                 	db	48
   123  00562C  6D                 	db	109
   124  00562D  79                 	db	121
   125  00562E  33                 	db	51
   126  00562F  5B                 	db	91
   127  005630  5F                 	db	95
   128  005631  70                 	db	112
   129  005632  7F                 	db	127
   130  005633  73                 	db	115
   131  0000                     _ANSELB	set	3932
   132  0000                     _ANSELC	set	3933
   133  0000                     _ANSELE	set	3935
   134  0000                     _ANSELD	set	3934
   135  0000                     _SSP1STATbits	set	4039
   136  0000                     _SSP1BUF	set	4041
   137  0000                     _SSP1CON1bits	set	4038
   138  0000                     _SSP1ADD	set	4040
   139  0000                     _SSP1CON1	set	4038
   140  0000                     _SSP1STAT	set	4039
   141  0000                     _INTCON2bits	set	4081
   142  0000                     _WPUB	set	3973
   143  0000                     _TRISC	set	3988
   144  0000                     _TRISB	set	3987
   145  0000                     _LATC	set	3979
   146  0000                     _LATB	set	3978
   147  0000                     _ACTCON	set	4021
   148  0000                     _OSCTUNE	set	3995
   149  0000                     _OSCCON2	set	4050
   150  0000                     _OSCCON	set	4051
   151  0000                     _LATBbits	set	3978
   152  0000                     _TRISE	set	3990
   153  0000                     _LATE	set	3981
   154  0000                     _TRISD	set	3989
   155  0000                     _LATD	set	3980
   156                           
   157                           	psect	smallconst
   158  000800                     __psmallconst:
   159                           	opt callstack 0
   160  000800  00                 	db	0
   161  000801                     STR_4:
   162  000801  50                 	db	80	;'P'
   163  000802  72                 	db	114	;'r'
   164  000803  75                 	db	117	;'u'
   165  000804  65                 	db	101	;'e'
   166  000805  62                 	db	98	;'b'
   167  000806  61                 	db	97	;'a'
   168  000807  20                 	db	32
   169  000808  70                 	db	112	;'p'
   170  000809  6F                 	db	111	;'o'
   171  00080A  72                 	db	114	;'r'
   172  00080B  20                 	db	32
   173  00080C  41                 	db	65	;'A'
   174  00080D  52                 	db	82	;'R'
   175  00080E  52                 	db	82	;'R'
   176  00080F  41                 	db	65	;'A'
   177  000810  59                 	db	89	;'Y'
   178  000811  2E                 	db	46
   179  000812  0D                 	db	13
   180  000813  0A                 	db	10
   181  000814  00                 	db	0
   182  000815                     STR_5:
   183  000815  22                 	db	34
   184  000816  2A                 	db	42
   185  000817  2B                 	db	43
   186  000818  2C                 	db	44
   187  000819  3A                 	db	58	;':'
   188  00081A  3B                 	db	59	;';'
   189  00081B  3C                 	db	60	;'<'
   190  00081C  3D                 	db	61	;'='
   191  00081D  3E                 	db	62	;'>'
   192  00081E  3F                 	db	63	;'?'
   193  00081F  5B                 	db	91	;'['
   194  000820  5D                 	db	93	;']'
   195  000821  7C                 	db	124
   196  000822  7F                 	db	127
   197  000823  00                 	db	0
   198  000824                     STR_3:
   199  000824  42                 	db	66	;'B'
   200  000825  65                 	db	101	;'e'
   201  000826  65                 	db	101	;'e'
   202  000827  44                 	db	68	;'D'
   203  000828  65                 	db	101	;'e'
   204  000829  76                 	db	118	;'v'
   205  00082A  2E                 	db	46
   206  00082B  74                 	db	116	;'t'
   207  00082C  78                 	db	120	;'x'
   208  00082D  74                 	db	116	;'t'
   209  00082E  00                 	db	0
   210  0000                     
   211                           ; #config settings
   212  00082F  00                 	db	0	; dummy byte at the end
   213  0000                     
   214                           	psect	cinit
   215  005306                     __pcinit:
   216                           	opt callstack 0
   217  005306                     start_initialization:
   218                           	opt callstack 0
   219  005306                     __initialization:
   220                           	opt callstack 0
   221                           
   222                           ; Initialize objects allocated to BANK1 (10 bytes)
   223                           ; load TBLPTR registers with __pidataBANK1
   224  005306  0E2A               	movlw	low __pidataBANK1
   225  005308  6EF6               	movwf	tblptrl,c
   226  00530A  0E56               	movlw	high __pidataBANK1
   227  00530C  6EF7               	movwf	tblptrh,c
   228  00530E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   229  005310  6EF8               	movwf	tblptru,c
   230  005312  EE01  F000         	lfsr	0,__pdataBANK1
   231  005316  EE10 F00A          	lfsr	1,10
   232  00531A                     copy_data0:
   233  00531A  0009               	tblrd		*+
   234  00531C  CFF5 FFEE          	movff	tablat,postinc0
   235  005320  50E5               	movf	postdec1,w,c
   236  005322  50E1               	movf	fsr1l,w,c
   237  005324  E1FA               	bnz	copy_data0
   238                           
   239                           ; Initialize objects allocated to BANK0 (1 bytes)
   240                           ; load TBLPTR registers with __pidataBANK0
   241  005326  0E3E               	movlw	low __pidataBANK0
   242  005328  6EF6               	movwf	tblptrl,c
   243  00532A  0E56               	movlw	high __pidataBANK0
   244  00532C  6EF7               	movwf	tblptrh,c
   245  00532E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   246  005330  6EF8               	movwf	tblptru,c
   247  005332  0009               	tblrd		*+	;fetch initializer
   248  005334  CFF5 F0FA          	movff	tablat,__pdataBANK0
   249                           
   250                           ; Clear objects allocated to BIGRAM (558 bytes)
   251  005338  EE01  F00A         	lfsr	0,__pbssBIGRAM
   252  00533C  EE12 F02E          	lfsr	1,558
   253  005340                     clear_0:
   254  005340  6AEE               	clrf	postinc0,c
   255  005342  50E5               	movf	postdec1,w,c
   256  005344  50E1               	movf	fsr1l,w,c
   257  005346  E1FC               	bnz	clear_0
   258  005348  50E2               	movf	fsr1h,w,c
   259  00534A  E1FA               	bnz	clear_0
   260                           
   261                           ; Clear objects allocated to BANK0 (38 bytes)
   262  00534C  EE00  F0D4         	lfsr	0,__pbssBANK0
   263  005350  0E26               	movlw	38
   264  005352                     clear_1:
   265  005352  6AEE               	clrf	postinc0,c
   266  005354  06E8               	decf	wreg,f,c
   267  005356  E1FD               	bnz	clear_1
   268  005358                     end_of_initialization:
   269                           	opt callstack 0
   270  005358                     __end_of__initialization:
   271                           	opt callstack 0
   272  005358  0E00               	movlw	low (__Lmediumconst shr (0+16))
   273  00535A  6EF8               	movwf	tblptru,c
   274  00535C  0100               	movlb	0
   275  00535E  EFB6  F02A         	goto	_main	;jump to C main() function
   276                           
   277                           	psect	bssBANK0
   278  0000D4                     __pbssBANK0:
   279                           	opt callstack 0
   280  0000D4                     _Fsid:
   281                           	opt callstack 0
   282  0000D4                     	ds	2
   283  0000D6                     ff@FatFs:
   284                           	opt callstack 0
   285  0000D6                     	ds	2
   286  0000D8                     _CardType:
   287                           	opt callstack 0
   288  0000D8                     	ds	1
   289  0000D9                     _data:
   290                           	opt callstack 0
   291  0000D9                     	ds	1
   292  0000DA                     _Fil:
   293                           	opt callstack 0
   294  0000DA                     	ds	32
   295                           
   296                           	psect	dataBANK0
   297  0000FA                     __pdataBANK0:
   298                           	opt callstack 0
   299  0000FA                     _Stat:
   300                           	opt callstack 0
   301  0000FA                     	ds	1
   302                           
   303                           	psect	dataBANK1
   304  000100                     __pdataBANK1:
   305                           	opt callstack 0
   306  000100                     Error@F5051:
   307                           	opt callstack 0
   308  000100                     	ds	10
   309                           
   310                           	psect	bssBIGRAM
   311  00010A                     __pbssBIGRAM:
   312                           	opt callstack 0
   313  00010A                     _FatFs:
   314                           	opt callstack 0
   315  00010A                     	ds	558
   316                           
   317                           	psect	cstackBANK0
   318  000060                     __pcstackBANK0:
   319                           	opt callstack 0
   320  000060                     ??_dir_sdi:
   321  000060                     remove_chain@res:
   322                           	opt callstack 0
   323  000060                     create_chain@res:
   324                           	opt callstack 0
   325  000060                     find_volume@br:
   326                           	opt callstack 0
   327                           
   328                           ; 16 bytes @ 0x0
   329  000060                     	ds	1
   330  000061                     remove_chain@nxt:
   331                           	opt callstack 0
   332  000061                     create_chain@scl:
   333                           	opt callstack 0
   334                           
   335                           ; 4 bytes @ 0x1
   336  000061                     	ds	4
   337  000065                     create_chain@ncl:
   338                           	opt callstack 0
   339                           
   340                           ; 4 bytes @ 0x5
   341  000065                     	ds	2
   342  000067                     dir_sdi@ic:
   343                           	opt callstack 0
   344                           
   345                           ; 2 bytes @ 0x7
   346  000067                     	ds	2
   347  000069                     create_chain@cs:
   348                           	opt callstack 0
   349  000069                     dir_sdi@sect:
   350                           	opt callstack 0
   351                           
   352                           ; 4 bytes @ 0x9
   353  000069                     	ds	4
   354  00006D                     dir_next@dp:
   355                           	opt callstack 0
   356  00006D                     f_write@fp:
   357                           	opt callstack 0
   358  00006D                     f_lseek@fp:
   359                           	opt callstack 0
   360  00006D                     dir_sdi@clst:
   361                           	opt callstack 0
   362                           
   363                           ; 4 bytes @ 0xD
   364  00006D                     	ds	2
   365  00006F                     dir_next@stretch:
   366                           	opt callstack 0
   367  00006F                     f_write@buff:
   368                           	opt callstack 0
   369  00006F                     f_lseek@ofs:
   370                           	opt callstack 0
   371                           
   372                           ; 4 bytes @ 0xF
   373  00006F                     	ds	1
   374  000070                     _find_volume$879:
   375                           	opt callstack 0
   376                           
   377                           ; 4 bytes @ 0x10
   378  000070                     	ds	1
   379  000071                     ??_dir_next:
   380  000071                     f_write@btw:
   381                           	opt callstack 0
   382                           
   383                           ; 2 bytes @ 0x11
   384  000071                     	ds	2
   385  000073                     ??_f_lseek:
   386  000073                     f_write@bw:
   387                           	opt callstack 0
   388                           
   389                           ; 2 bytes @ 0x13
   390  000073                     	ds	1
   391  000074                     _find_volume$880:
   392                           	opt callstack 0
   393                           
   394                           ; 2 bytes @ 0x14
   395  000074                     	ds	1
   396  000075                     ??_f_write:
   397                           
   398                           ; 1 bytes @ 0x15
   399  000075                     	ds	1
   400  000076                     find_volume@szbfat:
   401                           	opt callstack 0
   402                           
   403                           ; 4 bytes @ 0x16
   404  000076                     	ds	2
   405  000078                     dir_next@c:
   406                           	opt callstack 0
   407                           
   408                           ; 2 bytes @ 0x18
   409  000078                     	ds	2
   410  00007A                     dir_next@i:
   411                           	opt callstack 0
   412  00007A                     find_volume@pt:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x1A
   416  00007A                     	ds	2
   417  00007C                     dir_next@clst:
   418                           	opt callstack 0
   419  00007C                     find_volume@sysect:
   420                           	opt callstack 0
   421                           
   422                           ; 4 bytes @ 0x1C
   423  00007C                     	ds	4
   424  000080                     dir_alloc@dp:
   425                           	opt callstack 0
   426  000080                     dir_find@dp:
   427                           	opt callstack 0
   428  000080                     find_volume@vol:
   429                           	opt callstack 0
   430                           
   431                           ; 2 bytes @ 0x20
   432  000080                     	ds	1
   433  000081                     f_write@res:
   434                           	opt callstack 0
   435                           
   436                           ; 1 bytes @ 0x21
   437  000081                     	ds	1
   438  000082                     dir_find@c:
   439                           	opt callstack 0
   440  000082                     dir_alloc@nent:
   441                           	opt callstack 0
   442  000082                     find_volume@nrsv:
   443                           	opt callstack 0
   444  000082                     f_write@wbuff:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x22
   448  000082                     	ds	1
   449  000083                     dir_find@dir:
   450                           	opt callstack 0
   451  000083                     f_lseek@ifptr:
   452                           	opt callstack 0
   453                           
   454                           ; 4 bytes @ 0x23
   455  000083                     	ds	1
   456  000084                     ??_dir_alloc:
   457  000084                     f_write@csect:
   458                           	opt callstack 0
   459  000084                     find_volume@tsect:
   460                           	opt callstack 0
   461                           
   462                           ; 4 bytes @ 0x24
   463  000084                     	ds	1
   464  000085                     dir_find@res:
   465                           	opt callstack 0
   466  000085                     f_write@cc:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x25
   470  000085                     	ds	1
   471  000086                     follow_path@dp:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x26
   475  000086                     	ds	1
   476  000087                     f_lseek@res:
   477                           	opt callstack 0
   478  000087                     dir_alloc@n:
   479                           	opt callstack 0
   480  000087                     f_write@sect:
   481                           	opt callstack 0
   482                           
   483                           ; 4 bytes @ 0x27
   484  000087                     	ds	1
   485  000088                     follow_path@path:
   486                           	opt callstack 0
   487  000088                     find_volume@nclst:
   488                           	opt callstack 0
   489  000088                     f_lseek@nsect:
   490                           	opt callstack 0
   491                           
   492                           ; 4 bytes @ 0x28
   493  000088                     	ds	1
   494  000089                     dir_alloc@res:
   495                           	opt callstack 0
   496                           
   497                           ; 1 bytes @ 0x29
   498  000089                     	ds	1
   499  00008A                     dir_register@dp:
   500                           	opt callstack 0
   501  00008A                     follow_path@dir:
   502                           	opt callstack 0
   503                           
   504                           ; 2 bytes @ 0x2A
   505  00008A                     	ds	1
   506  00008B                     f_write@clst:
   507                           	opt callstack 0
   508                           
   509                           ; 4 bytes @ 0x2B
   510  00008B                     	ds	1
   511  00008C                     dir_register@res:
   512                           	opt callstack 0
   513  00008C                     follow_path@ns:
   514                           	opt callstack 0
   515  00008C                     find_volume@stat:
   516                           	opt callstack 0
   517  00008C                     f_lseek@bcs:
   518                           	opt callstack 0
   519                           
   520                           ; 4 bytes @ 0x2C
   521  00008C                     	ds	1
   522  00008D                     follow_path@res:
   523                           	opt callstack 0
   524  00008D                     find_volume@fasize:
   525                           	opt callstack 0
   526                           
   527                           ; 4 bytes @ 0x2D
   528  00008D                     	ds	2
   529  00008F                     f_write@wcnt:
   530                           	opt callstack 0
   531                           
   532                           ; 2 bytes @ 0x2F
   533  00008F                     	ds	1
   534  000090                     f_lseek@clst:
   535                           	opt callstack 0
   536                           
   537                           ; 4 bytes @ 0x30
   538  000090                     	ds	1
   539  000091                     find_volume@bsect:
   540                           	opt callstack 0
   541                           
   542                           ; 4 bytes @ 0x31
   543  000091                     	ds	4
   544  000095                     find_volume@i:
   545                           	opt callstack 0
   546                           
   547                           ; 2 bytes @ 0x35
   548  000095                     	ds	2
   549  000097                     find_volume@fmt:
   550                           	opt callstack 0
   551                           
   552                           ; 1 bytes @ 0x37
   553  000097                     	ds	1
   554  000098                     find_volume@fs:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0x38
   558  000098                     	ds	2
   559  00009A                     f_open@fp:
   560                           	opt callstack 0
   561                           
   562                           ; 2 bytes @ 0x3A
   563  00009A                     	ds	2
   564  00009C                     f_open@path:
   565                           	opt callstack 0
   566                           
   567                           ; 2 bytes @ 0x3C
   568  00009C                     	ds	2
   569  00009E                     f_open@mode:
   570                           	opt callstack 0
   571                           
   572                           ; 1 bytes @ 0x3E
   573  00009E                     	ds	1
   574  00009F                     ??_f_open:
   575                           
   576                           ; 1 bytes @ 0x3F
   577  00009F                     	ds	4
   578  0000A3                     f_open@sfn:
   579                           	opt callstack 0
   580                           
   581                           ; 12 bytes @ 0x43
   582  0000A3                     	ds	12
   583  0000AF                     f_open@cl:
   584                           	opt callstack 0
   585                           
   586                           ; 4 bytes @ 0x4F
   587  0000AF                     	ds	4
   588  0000B3                     f_open@dw:
   589                           	opt callstack 0
   590                           
   591                           ; 4 bytes @ 0x53
   592  0000B3                     	ds	4
   593  0000B7                     f_open@res:
   594                           	opt callstack 0
   595                           
   596                           ; 1 bytes @ 0x57
   597  0000B7                     	ds	1
   598  0000B8                     f_open@dir:
   599                           	opt callstack 0
   600                           
   601                           ; 2 bytes @ 0x58
   602  0000B8                     	ds	2
   603  0000BA                     f_open@dj:
   604                           	opt callstack 0
   605                           
   606                           ; 22 bytes @ 0x5A
   607  0000BA                     	ds	22
   608  0000D0                     guardar@data:
   609                           	opt callstack 0
   610                           
   611                           ; 2 bytes @ 0x70
   612  0000D0                     	ds	2
   613  0000D2                     guardar@bw:
   614                           	opt callstack 0
   615                           
   616                           ; 2 bytes @ 0x72
   617  0000D2                     	ds	2
   618                           
   619                           	psect	cstackCOMRAM
   620  000001                     __pcstackCOMRAM:
   621                           	opt callstack 0
   622  000001                     ??___delay_sec:
   623  000001                     ?_mem_cmp:
   624                           	opt callstack 0
   625  000001                     ?_chk_chr:
   626                           	opt callstack 0
   627  000001                     ?_get_ldnumber:
   628                           	opt callstack 0
   629  000001                     ?___wmul:
   630                           	opt callstack 0
   631  000001                     ?_ld_clust:
   632                           	opt callstack 0
   633  000001                     ?___lmul:
   634                           	opt callstack 0
   635  000001                     ?___lldiv:
   636                           	opt callstack 0
   637  000001                     disk_status@pdrv:
   638                           	opt callstack 0
   639  000001                     SPI1_Exchange8bit@data:
   640                           	opt callstack 0
   641  000001                     Error@a:
   642                           	opt callstack 0
   643  000001                     mem_cpy@dst:
   644                           	opt callstack 0
   645  000001                     mem_set@dst:
   646                           	opt callstack 0
   647  000001                     mem_cmp@dst:
   648                           	opt callstack 0
   649  000001                     chk_chr@str:
   650                           	opt callstack 0
   651  000001                     ld_clust@fs:
   652                           	opt callstack 0
   653  000001                     st_clust@dir:
   654                           	opt callstack 0
   655  000001                     get_ldnumber@path:
   656                           	opt callstack 0
   657  000001                     ___wmul@multiplier:
   658                           	opt callstack 0
   659  000001                     ___lmul@multiplier:
   660                           	opt callstack 0
   661  000001                     ___lldiv@dividend:
   662                           	opt callstack 0
   663                           
   664                           ; 4 bytes @ 0x0
   665  000001                     	ds	1
   666  000002                     wait_ready@tmr:
   667                           	opt callstack 0
   668  000002                     rcvr_datablock@buff:
   669                           	opt callstack 0
   670  000002                     validate@obj:
   671                           	opt callstack 0
   672                           
   673                           ; 2 bytes @ 0x1
   674  000002                     	ds	1
   675  000003                     ??_Error:
   676  000003                     ??_get_ldnumber:
   677  000003                     mem_cpy@src:
   678                           	opt callstack 0
   679  000003                     mem_set@val:
   680                           	opt callstack 0
   681  000003                     mem_cmp@src:
   682                           	opt callstack 0
   683  000003                     chk_chr@chr:
   684                           	opt callstack 0
   685  000003                     ld_clust@dir:
   686                           	opt callstack 0
   687  000003                     ___wmul@multiplicand:
   688                           	opt callstack 0
   689  000003                     st_clust@cl:
   690                           	opt callstack 0
   691                           
   692                           ; 4 bytes @ 0x2
   693  000003                     	ds	1
   694  000004                     ??_validate:
   695  000004                     ___delay_sec@sec:
   696                           	opt callstack 0
   697  000004                     rcvr_datablock@btr:
   698                           	opt callstack 0
   699  000004                     xmit_datablock@buff:
   700                           	opt callstack 0
   701  000004                     ___send_cmd@arg:
   702                           	opt callstack 0
   703  000004                     Error@v_seg:
   704                           	opt callstack 0
   705                           
   706                           ; 10 bytes @ 0x3
   707  000004                     	ds	1
   708  000005                     ??_chk_chr:
   709  000005                     ??_ld_clust:
   710  000005                     ___delay_sec@i:
   711                           	opt callstack 0
   712  000005                     mem_cpy@cnt:
   713                           	opt callstack 0
   714  000005                     mem_set@cnt:
   715                           	opt callstack 0
   716  000005                     mem_cmp@cnt:
   717                           	opt callstack 0
   718  000005                     ___wmul@product:
   719                           	opt callstack 0
   720  000005                     ___lmul@multiplicand:
   721                           	opt callstack 0
   722  000005                     ___lldiv@divisor:
   723                           	opt callstack 0
   724                           
   725                           ; 4 bytes @ 0x4
   726  000005                     	ds	1
   727  000006                     xmit_datablock@token:
   728                           	opt callstack 0
   729  000006                     rcvr_datablock@tmr:
   730                           	opt callstack 0
   731                           
   732                           ; 2 bytes @ 0x5
   733  000006                     	ds	1
   734  000007                     ??_mem_cpy:
   735  000007                     ??_mem_cmp:
   736  000007                     xmit_datablock@i:
   737                           	opt callstack 0
   738  000007                     mem_set@d:
   739                           	opt callstack 0
   740  000007                     get_ldnumber@tp:
   741                           	opt callstack 0
   742                           
   743                           ; 2 bytes @ 0x6
   744  000007                     	ds	1
   745  000008                     rcvr_datablock@token:
   746                           	opt callstack 0
   747  000008                     ___send_cmd@res:
   748                           	opt callstack 0
   749  000008                     validate@fil:
   750                           	opt callstack 0
   751                           
   752                           ; 2 bytes @ 0x7
   753  000008                     	ds	1
   754  000009                     xmit_datablock@resp:
   755                           	opt callstack 0
   756  000009                     ___send_cmd@n:
   757                           	opt callstack 0
   758  000009                     mem_cpy@d:
   759                           	opt callstack 0
   760  000009                     mem_cmp@d:
   761                           	opt callstack 0
   762  000009                     create_name@dp:
   763                           	opt callstack 0
   764  000009                     get_ldnumber@vol:
   765                           	opt callstack 0
   766  000009                     ___lmul@product:
   767                           	opt callstack 0
   768  000009                     ___lldiv@quotient:
   769                           	opt callstack 0
   770                           
   771                           ; 4 bytes @ 0x8
   772  000009                     	ds	1
   773  00000A                     ___send_cmd@cmd:
   774                           	opt callstack 0
   775                           
   776                           ; 1 bytes @ 0x9
   777  00000A                     	ds	1
   778  00000B                     mem_cpy@s:
   779                           	opt callstack 0
   780  00000B                     mem_cmp@s:
   781                           	opt callstack 0
   782  00000B                     create_name@path:
   783                           	opt callstack 0
   784  00000B                     get_ldnumber@i:
   785                           	opt callstack 0
   786  00000B                     send_cmd@arg:
   787                           	opt callstack 0
   788  00000B                     ld_clust@cl:
   789                           	opt callstack 0
   790                           
   791                           ; 4 bytes @ 0xA
   792  00000B                     	ds	2
   793  00000D                     ??_create_name:
   794  00000D                     ?_clust2sect:
   795                           	opt callstack 0
   796  00000D                     ___lldiv@counter:
   797                           	opt callstack 0
   798  00000D                     mem_cmp@r:
   799                           	opt callstack 0
   800  00000D                     clust2sect@fs:
   801                           	opt callstack 0
   802  00000D                     get_ldnumber@tt:
   803                           	opt callstack 0
   804                           
   805                           ; 2 bytes @ 0xC
   806  00000D                     	ds	2
   807  00000F                     send_cmd@cmd:
   808                           	opt callstack 0
   809  00000F                     clust2sect@clst:
   810                           	opt callstack 0
   811                           
   812                           ; 4 bytes @ 0xE
   813  00000F                     	ds	1
   814  000010                     send_cmd@res:
   815                           	opt callstack 0
   816                           
   817                           ; 1 bytes @ 0xF
   818  000010                     	ds	1
   819  000011                     ??_disk_initialize:
   820  000011                     disk_ioctl@cmd:
   821                           	opt callstack 0
   822  000011                     disk_read@buff:
   823                           	opt callstack 0
   824  000011                     disk_write@buff:
   825                           	opt callstack 0
   826  000011                     _create_name$775:
   827                           	opt callstack 0
   828                           
   829                           ; 2 bytes @ 0x10
   830  000011                     	ds	1
   831  000012                     disk_initialize@pdrv:
   832                           	opt callstack 0
   833  000012                     disk_ioctl@buff:
   834                           	opt callstack 0
   835                           
   836                           ; 2 bytes @ 0x11
   837  000012                     	ds	1
   838  000013                     ??_clust2sect:
   839  000013                     create_name@si:
   840                           	opt callstack 0
   841  000013                     disk_initialize@ocr:
   842                           	opt callstack 0
   843  000013                     disk_read@sector:
   844                           	opt callstack 0
   845  000013                     disk_write@sector:
   846                           	opt callstack 0
   847                           
   848                           ; 4 bytes @ 0x12
   849  000013                     	ds	1
   850  000014                     ??_disk_ioctl:
   851                           
   852                           ; 1 bytes @ 0x13
   853  000014                     	ds	1
   854  000015                     create_name@b:
   855                           	opt callstack 0
   856                           
   857                           ; 1 bytes @ 0x14
   858  000015                     	ds	1
   859  000016                     create_name@ni:
   860                           	opt callstack 0
   861                           
   862                           ; 2 bytes @ 0x15
   863  000016                     	ds	1
   864  000017                     _disk_initialize$285:
   865                           	opt callstack 0
   866  000017                     disk_read@count:
   867                           	opt callstack 0
   868  000017                     disk_write@count:
   869                           	opt callstack 0
   870                           
   871                           ; 2 bytes @ 0x16
   872  000017                     	ds	1
   873  000018                     create_name@p:
   874                           	opt callstack 0
   875                           
   876                           ; 2 bytes @ 0x17
   877  000018                     	ds	1
   878  000019                     ??_disk_write:
   879  000019                     disk_initialize@cmd:
   880                           	opt callstack 0
   881  000019                     disk_read@pdrv:
   882                           	opt callstack 0
   883                           
   884                           ; 1 bytes @ 0x18
   885  000019                     	ds	1
   886  00001A                     disk_initialize@ty:
   887                           	opt callstack 0
   888  00001A                     disk_write@pdrv:
   889                           	opt callstack 0
   890  00001A                     create_name@d:
   891                           	opt callstack 0
   892  00001A                     _disk_read$294:
   893                           	opt callstack 0
   894                           
   895                           ; 2 bytes @ 0x19
   896  00001A                     	ds	1
   897  00001B                     disk_initialize@tmr:
   898                           	opt callstack 0
   899  00001B                     sync_window@fs:
   900                           	opt callstack 0
   901  00001B                     create_name@sfn:
   902                           	opt callstack 0
   903                           
   904                           ; 2 bytes @ 0x1A
   905  00001B                     	ds	1
   906  00001C                     disk_read@cmd:
   907                           	opt callstack 0
   908                           
   909                           ; 1 bytes @ 0x1B
   910  00001C                     	ds	1
   911  00001D                     ??_sync_window:
   912  00001D                     disk_initialize@n:
   913                           	opt callstack 0
   914  00001D                     create_name@i:
   915                           	opt callstack 0
   916                           
   917                           ; 2 bytes @ 0x1C
   918  00001D                     	ds	2
   919  00001F                     create_name@c:
   920                           	opt callstack 0
   921                           
   922                           ; 1 bytes @ 0x1E
   923  00001F                     	ds	2
   924  000021                     disk_ioctl@csd:
   925                           	opt callstack 0
   926                           
   927                           ; 16 bytes @ 0x20
   928  000021                     	ds	8
   929  000029                     sync_window@res:
   930                           	opt callstack 0
   931                           
   932                           ; 1 bytes @ 0x28
   933  000029                     	ds	1
   934  00002A                     sync_window@nf:
   935                           	opt callstack 0
   936                           
   937                           ; 2 bytes @ 0x29
   938  00002A                     	ds	2
   939  00002C                     sync_window@wsect:
   940                           	opt callstack 0
   941                           
   942                           ; 4 bytes @ 0x2B
   943  00002C                     	ds	4
   944  000030                     move_window@fs:
   945                           	opt callstack 0
   946                           
   947                           ; 2 bytes @ 0x2F
   948  000030                     	ds	1
   949  000031                     disk_ioctl@pdrv:
   950                           	opt callstack 0
   951                           
   952                           ; 1 bytes @ 0x30
   953  000031                     	ds	1
   954  000032                     disk_ioctl@csize:
   955                           	opt callstack 0
   956  000032                     move_window@sector:
   957                           	opt callstack 0
   958                           
   959                           ; 4 bytes @ 0x31
   960  000032                     	ds	4
   961  000036                     disk_ioctl@res:
   962                           	opt callstack 0
   963                           
   964                           ; 1 bytes @ 0x35
   965  000036                     	ds	1
   966  000037                     disk_ioctl@n:
   967                           	opt callstack 0
   968                           
   969                           ; 1 bytes @ 0x36
   970  000037                     	ds	1
   971  000038                     disk_ioctl@ptr:
   972                           	opt callstack 0
   973                           
   974                           ; 2 bytes @ 0x37
   975  000038                     	ds	2
   976  00003A                     move_window@res:
   977                           	opt callstack 0
   978  00003A                     sync_fs@fs:
   979                           	opt callstack 0
   980                           
   981                           ; 2 bytes @ 0x39
   982  00003A                     	ds	1
   983  00003B                     ?_get_fat:
   984                           	opt callstack 0
   985  00003B                     get_fat@fs:
   986                           	opt callstack 0
   987  00003B                     put_fat@fs:
   988                           	opt callstack 0
   989  00003B                     check_fs@fs:
   990                           	opt callstack 0
   991                           
   992                           ; 2 bytes @ 0x3A
   993  00003B                     	ds	1
   994  00003C                     ??_sync_fs:
   995                           
   996                           ; 1 bytes @ 0x3B
   997  00003C                     	ds	1
   998  00003D                     get_fat@clst:
   999                           	opt callstack 0
  1000  00003D                     put_fat@clst:
  1001                           	opt callstack 0
  1002  00003D                     check_fs@sect:
  1003                           	opt callstack 0
  1004                           
  1005                           ; 4 bytes @ 0x3C
  1006  00003D                     	ds	4
  1007  000041                     ??_get_fat:
  1008  000041                     ??_check_fs:
  1009  000041                     put_fat@val:
  1010                           	opt callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x40
  1013  000041                     	ds	3
  1014  000044                     sync_fs@res:
  1015                           	opt callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x43
  1018  000044                     	ds	1
  1019  000045                     ??_put_fat:
  1020  000045                     find_volume@rfs:
  1021                           	opt callstack 0
  1022  000045                     f_sync@fp:
  1023                           	opt callstack 0
  1024                           
  1025                           ; 2 bytes @ 0x44
  1026  000045                     	ds	2
  1027  000047                     find_volume@path:
  1028                           	opt callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x46
  1031  000047                     	ds	2
  1032  000049                     find_volume@wmode:
  1033                           	opt callstack 0
  1034                           
  1035                           ; 1 bytes @ 0x48
  1036  000049                     	ds	1
  1037  00004A                     ??_find_volume:
  1038  00004A                     _get_fat$525:
  1039                           	opt callstack 0
  1040                           
  1041                           ; 2 bytes @ 0x49
  1042  00004A                     	ds	1
  1043  00004B                     f_sync@res:
  1044                           	opt callstack 0
  1045                           
  1046                           ; 1 bytes @ 0x4A
  1047  00004B                     	ds	1
  1048  00004C                     f_sync@dir:
  1049                           	opt callstack 0
  1050  00004C                     get_fat@val:
  1051                           	opt callstack 0
  1052                           
  1053                           ; 4 bytes @ 0x4B
  1054  00004C                     	ds	1
  1055  00004D                     _put_fat$551:
  1056                           	opt callstack 0
  1057                           
  1058                           ; 2 bytes @ 0x4C
  1059  00004D                     	ds	1
  1060  00004E                     f_close@fp:
  1061                           	opt callstack 0
  1062                           
  1063                           ; 2 bytes @ 0x4D
  1064  00004E                     	ds	1
  1065  00004F                     _put_fat$552:
  1066                           	opt callstack 0
  1067                           
  1068                           ; 2 bytes @ 0x4E
  1069  00004F                     	ds	1
  1070  000050                     f_close@res:
  1071                           	opt callstack 0
  1072  000050                     get_fat@wc:
  1073                           	opt callstack 0
  1074                           
  1075                           ; 2 bytes @ 0x4F
  1076  000050                     	ds	1
  1077  000051                     put_fat@bc:
  1078                           	opt callstack 0
  1079                           
  1080                           ; 2 bytes @ 0x50
  1081  000051                     	ds	1
  1082  000052                     get_fat@p:
  1083                           	opt callstack 0
  1084  000052                     f_mount@fs:
  1085                           	opt callstack 0
  1086                           
  1087                           ; 2 bytes @ 0x51
  1088  000052                     	ds	1
  1089  000053                     put_fat@res:
  1090                           	opt callstack 0
  1091                           
  1092                           ; 1 bytes @ 0x52
  1093  000053                     	ds	1
  1094  000054                     get_fat@bc:
  1095                           	opt callstack 0
  1096  000054                     put_fat@p:
  1097                           	opt callstack 0
  1098  000054                     f_mount@path:
  1099                           	opt callstack 0
  1100                           
  1101                           ; 2 bytes @ 0x53
  1102  000054                     	ds	2
  1103  000056                     ?_create_chain:
  1104                           	opt callstack 0
  1105  000056                     f_mount@opt:
  1106                           	opt callstack 0
  1107  000056                     remove_chain@fs:
  1108                           	opt callstack 0
  1109  000056                     create_chain@fs:
  1110                           	opt callstack 0
  1111  000056                     dir_sdi@dp:
  1112                           	opt callstack 0
  1113                           
  1114                           ; 2 bytes @ 0x55
  1115  000056                     	ds	1
  1116  000057                     f_mount@res:
  1117                           	opt callstack 0
  1118                           
  1119                           ; 1 bytes @ 0x56
  1120  000057                     	ds	1
  1121  000058                     dir_sdi@idx:
  1122                           	opt callstack 0
  1123  000058                     f_mount@cfs:
  1124                           	opt callstack 0
  1125  000058                     remove_chain@clst:
  1126                           	opt callstack 0
  1127  000058                     create_chain@clst:
  1128                           	opt callstack 0
  1129                           
  1130                           ; 4 bytes @ 0x57
  1131  000058                     	ds	2
  1132  00005A                     f_mount@rp:
  1133                           	opt callstack 0
  1134                           
  1135                           ; 2 bytes @ 0x59
  1136  00005A                     	ds	2
  1137  00005C                     f_mount@vol:
  1138                           	opt callstack 0
  1139                           
  1140                           ; 2 bytes @ 0x5B
  1141  00005C                     	ds	4
  1142  000060                     
  1143                           ; 1 bytes @ 0x5F
  1144 ;;
  1145 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1146 ;;
  1147 ;; *************** function _main *****************
  1148 ;; Defined at:
  1149 ;;		line 59 in file "Main.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;		None
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1163 ;;      Params:         0       0       0       0       0       0       0       0       0
  1164 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1166 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1167 ;;Total ram usage:        0 bytes
  1168 ;; Hardware stack levels required when called:   15
  1169 ;; This function calls:
  1170 ;;		_Error
  1171 ;;		___delay_sec
  1172 ;;		_guardar
  1173 ;; This function is called by:
  1174 ;;		Startup code after reset
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text0
  1179  00556C                     __ptext0:
  1180                           	opt callstack 0
  1181  00556C                     _main:
  1182                           	opt callstack 16
  1183                           
  1184                           ;Main.c: 61:     guardar("Prueba por ARRAY.\r\n");
  1185                           
  1186                           ;incstack = 0
  1187  00556C  0E01               	movlw	low STR_4
  1188  00556E  0100               	movlb	0	; () banked
  1189  005570  6FD0               	movwf	guardar@data& (0+255),b
  1190  005572  0E08               	movlw	high STR_4
  1191  005574  6FD1               	movwf	(guardar@data+1)& (0+255),b
  1192  005576  ECA0  F01F         	call	_guardar	;wreg free
  1193                           
  1194                           ;Main.c: 62:     __delay_sec(1);
  1195  00557A  0E01               	movlw	1
  1196  00557C  EC5C  F02A         	call	___delay_sec
  1197  005580                     l6257:
  1198                           
  1199                           ;Main.c: 64:     {;Main.c: 65:         Error(55);
  1200  005580  0E00               	movlw	0
  1201  005582  6E02               	movwf	Error@a+1,c
  1202  005584  0E37               	movlw	55
  1203  005586  6E01               	movwf	Error@a,c
  1204  005588  ECC9  F026         	call	_Error	;wreg free
  1205  00558C  D7F9               	goto	l6257
  1206  00558E                     __end_of_main:
  1207                           	opt callstack 0
  1208                           
  1209 ;; *************** function _guardar *****************
  1210 ;; Defined at:
  1211 ;;		line 16 in file "Main.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;  data            2  112[BANK0 ] PTR unsigned char 
  1214 ;;		 -> STR_4(20), 
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;  bw              2  114[BANK0 ] unsigned short 
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1    wreg      void 
  1219 ;; Registers used:
  1220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1226 ;;      Params:         0       2       0       0       0       0       0       0       0
  1227 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1229 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1230 ;;Total ram usage:        4 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:   14
  1233 ;; This function calls:
  1234 ;;		_Error
  1235 ;;		_SYSTEM_Initialize
  1236 ;;		___delay_sec
  1237 ;;		_f_close
  1238 ;;		_f_lseek
  1239 ;;		_f_mount
  1240 ;;		_f_open
  1241 ;;		_f_write
  1242 ;; This function is called by:
  1243 ;;		_main
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text1
  1248  003F40                     __ptext1:
  1249                           	opt callstack 0
  1250  003F40                     _guardar:
  1251                           	opt callstack 16
  1252                           
  1253                           ;Main.c: 17:     UINT bw;;Main.c: 18:     SYSTEM_Initialize();
  1254                           
  1255                           ;incstack = 0
  1256  003F40  EC07  F02B         	call	_SYSTEM_Initialize	;wreg free
  1257                           
  1258                           ;Main.c: 19:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1259  003F44  0E0A               	movlw	low _FatFs
  1260  003F46  6E52               	movwf	f_mount@fs,c
  1261  003F48  0E01               	movlw	high _FatFs
  1262  003F4A  6E53               	movwf	f_mount@fs+1,c
  1263  003F4C  0E14               	movlw	low (STR_4+19)
  1264  003F4E  6E54               	movwf	f_mount@path,c
  1265  003F50  0E08               	movlw	high (STR_4+19)
  1266  003F52  6E55               	movwf	f_mount@path+1,c
  1267  003F54  0E01               	movlw	1
  1268  003F56  6E56               	movwf	f_mount@opt,c
  1269  003F58  EC26  F027         	call	_f_mount	;wreg free
  1270  003F5C  0900               	iorlw	0
  1271  003F5E  B4D8               	btfsc	status,2,c
  1272  003F60  D018               	goto	u8570
  1273                           
  1274                           ;Main.c: 21:         Error(33);
  1275  003F62  0E00               	movlw	0
  1276  003F64  6E02               	movwf	Error@a+1,c
  1277  003F66  0E21               	movlw	33
  1278  003F68  6E01               	movwf	Error@a,c
  1279  003F6A  ECC9  F026         	call	_Error	;wreg free
  1280                           
  1281                           ;Main.c: 22:         __delay_sec(2);
  1282  003F6E  0E02               	movlw	2
  1283  003F70  EC5C  F02A         	call	___delay_sec
  1284  003F74                     l6211:
  1285                           
  1286                           ;Main.c: 23:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1287  003F74  0E0A               	movlw	low _FatFs
  1288  003F76  6E52               	movwf	f_mount@fs,c
  1289  003F78  0E01               	movlw	high _FatFs
  1290  003F7A  6E53               	movwf	f_mount@fs+1,c
  1291  003F7C  0E14               	movlw	low (STR_4+19)
  1292  003F7E  6E54               	movwf	f_mount@path,c
  1293  003F80  0E08               	movlw	high (STR_4+19)
  1294  003F82  6E55               	movwf	f_mount@path+1,c
  1295  003F84  0E01               	movlw	1
  1296  003F86  6E56               	movwf	f_mount@opt,c
  1297  003F88  EC26  F027         	call	_f_mount	;wreg free
  1298  003F8C  0900               	iorlw	0
  1299  003F8E  A4D8               	btfss	status,2,c
  1300  003F90  D7F1               	goto	l6211
  1301  003F92                     u8570:
  1302                           
  1303                           ;Main.c: 28:     Error(1);
  1304  003F92  0E00               	movlw	0
  1305  003F94  6E02               	movwf	Error@a+1,c
  1306  003F96  0E01               	movlw	1
  1307  003F98  6E01               	movwf	Error@a,c
  1308  003F9A  ECC9  F026         	call	_Error	;wreg free
  1309                           
  1310                           ;Main.c: 29:     __delay_sec(2);
  1311  003F9E  0E02               	movlw	2
  1312  003FA0  EC5C  F02A         	call	___delay_sec
  1313                           
  1314                           ;Main.c: 31:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1315  003FA4  0EDA               	movlw	low _Fil
  1316  003FA6  0100               	movlb	0	; () banked
  1317  003FA8  6F9A               	movwf	f_open@fp& (0+255),b
  1318  003FAA  0E00               	movlw	high _Fil
  1319  003FAC  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1320  003FAE  0E24               	movlw	low STR_3
  1321  003FB0  6F9C               	movwf	f_open@path& (0+255),b
  1322  003FB2  0E08               	movlw	high STR_3
  1323  003FB4  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1324  003FB6  0E13               	movlw	19
  1325  003FB8  6F9E               	movwf	f_open@mode& (0+255),b
  1326  003FBA  ECE0  F017         	call	_f_open	;wreg free
  1327  003FBE  0900               	iorlw	0
  1328  003FC0  A4D8               	btfss	status,2,c
  1329  003FC2  D065               	goto	l6251
  1330                           
  1331                           ;Main.c: 32:         Error(2);
  1332  003FC4  0E00               	movlw	0
  1333  003FC6  6E02               	movwf	Error@a+1,c
  1334  003FC8  0E02               	movlw	2
  1335  003FCA  6E01               	movwf	Error@a,c
  1336  003FCC  ECC9  F026         	call	_Error	;wreg free
  1337                           
  1338                           ;Main.c: 35:         __delay_sec(2);
  1339  003FD0  0E02               	movlw	2
  1340  003FD2  EC5C  F02A         	call	___delay_sec
  1341                           
  1342                           ;Main.c: 36:          Error(3);
  1343  003FD6  0E00               	movlw	0
  1344  003FD8  6E02               	movwf	Error@a+1,c
  1345  003FDA  0E03               	movlw	3
  1346  003FDC  6E01               	movwf	Error@a,c
  1347  003FDE  ECC9  F026         	call	_Error	;wreg free
  1348                           
  1349                           ;Main.c: 38:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1350  003FE2  0100               	movlb	0	; () banked
  1351  003FE4  51E4               	movf	(_Fil+10)& (0+255),w,b
  1352  003FE6  11E5               	iorwf	(_Fil+11)& (0+255),w,b
  1353  003FE8  11E6               	iorwf	(_Fil+12)& (0+255),w,b
  1354  003FEA  11E7               	iorwf	(_Fil+13)& (0+255),w,b
  1355  003FEC  B4D8               	btfsc	status,2,c
  1356  003FEE  D011               	goto	l6231
  1357                           
  1358                           ; BSR set to: 0
  1359  003FF0  0EDA               	movlw	low _Fil
  1360  003FF2  6F6D               	movwf	f_lseek@fp& (0+255),b
  1361  003FF4  0E00               	movlw	high _Fil
  1362  003FF6  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1363  003FF8  C0E4  F06F         	movff	_Fil+10,f_lseek@ofs
  1364  003FFC  C0E5  F070         	movff	_Fil+11,f_lseek@ofs+1
  1365  004000  C0E6  F071         	movff	_Fil+12,f_lseek@ofs+2
  1366  004004  C0E7  F072         	movff	_Fil+13,f_lseek@ofs+3
  1367  004008  ECA1  F00C         	call	_f_lseek	;wreg free
  1368  00400C  0900               	iorlw	0
  1369  00400E  A4D8               	btfss	status,2,c
  1370  004010  D025               	goto	l6241
  1371  004012                     l6231:
  1372                           
  1373                           ;Main.c: 39:                 Error(4);
  1374  004012  0E00               	movlw	0
  1375  004014  6E02               	movwf	Error@a+1,c
  1376  004016  0E04               	movlw	4
  1377  004018  6E01               	movwf	Error@a,c
  1378  00401A  ECC9  F026         	call	_Error	;wreg free
  1379                           
  1380                           ;Main.c: 40:                 __delay_sec(2);
  1381  00401E  0E02               	movlw	2
  1382  004020  EC5C  F02A         	call	___delay_sec
  1383                           
  1384                           ;Main.c: 42:                 f_write(&Fil, data , 28 , &bw);
  1385  004024  0EDA               	movlw	low _Fil
  1386  004026  0100               	movlb	0	; () banked
  1387  004028  6F6D               	movwf	f_write@fp& (0+255),b
  1388  00402A  0E00               	movlw	high _Fil
  1389  00402C  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1390  00402E  C0D0  F06F         	movff	guardar@data,f_write@buff
  1391  004032  C0D1  F070         	movff	guardar@data+1,f_write@buff+1
  1392  004036  0E00               	movlw	0
  1393  004038  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1394  00403A  0E1C               	movlw	28
  1395  00403C  6F71               	movwf	f_write@btw& (0+255),b
  1396  00403E  0ED2               	movlw	low guardar@bw
  1397  004040  6F73               	movwf	f_write@bw& (0+255),b
  1398  004042  0E00               	movlw	high guardar@bw
  1399  004044  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1400  004046  ECEF  F008         	call	_f_write	;wreg free
  1401                           
  1402                           ;Main.c: 44:                 Error(5);
  1403  00404A  0E00               	movlw	0
  1404  00404C  6E02               	movwf	Error@a+1,c
  1405  00404E  0E05               	movlw	5
  1406  004050  6E01               	movwf	Error@a,c
  1407  004052  ECC9  F026         	call	_Error	;wreg free
  1408                           
  1409                           ;Main.c: 45:                 __delay_sec(2);
  1410  004056  0E02               	movlw	2
  1411  004058  EC5C  F02A         	call	___delay_sec
  1412  00405C                     l6241:
  1413  00405C  0EDA               	movlw	low _Fil
  1414  00405E  6E4E               	movwf	f_close@fp,c
  1415  004060  0E00               	movlw	high _Fil
  1416  004062  6E4F               	movwf	f_close@fp+1,c
  1417  004064  EC3F  F02A         	call	_f_close	;wreg free
  1418                           
  1419                           ;Main.c: 47:                 Error(6);
  1420  004068  0E00               	movlw	0
  1421  00406A  6E02               	movwf	Error@a+1,c
  1422  00406C  0E06               	movlw	6
  1423  00406E  6E01               	movwf	Error@a,c
  1424  004070  ECC9  F026         	call	_Error	;wreg free
  1425                           
  1426                           ;Main.c: 48:                 __delay_sec(1);
  1427  004074  0E01               	movlw	1
  1428  004076  EC5C  F02A         	call	___delay_sec
  1429                           
  1430                           ;Main.c: 50:                 Error(7);
  1431  00407A  0E00               	movlw	0
  1432  00407C  6E02               	movwf	Error@a+1,c
  1433  00407E  0E07               	movlw	7
  1434  004080  6E01               	movwf	Error@a,c
  1435  004082  ECC9  F026         	call	_Error	;wreg free
  1436                           
  1437                           ;Main.c: 51:                 __delay_sec(2);
  1438  004086  0E02               	movlw	2
  1439  004088  EC5C  F02A         	call	___delay_sec
  1440                           
  1441                           ;Main.c: 53:  }
  1442  00408C  0012               	return	
  1443  00408E                     l6251:
  1444                           
  1445                           ;Main.c: 55:         Error(0);
  1446  00408E  0E00               	movlw	0
  1447  004090  6E02               	movwf	Error@a+1,c
  1448  004092  0E00               	movlw	0
  1449  004094  6E01               	movwf	Error@a,c
  1450  004096  ECC9  F026         	call	_Error	;wreg free
  1451  00409A  0012               	return		;funcret
  1452  00409C                     __end_of_guardar:
  1453                           	opt callstack 0
  1454                           
  1455 ;; *************** function _f_write *****************
  1456 ;; Defined at:
  1457 ;;		line 2691 in file "ff.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;  fp              2   13[BANK0 ] PTR struct .
  1460 ;;		 -> Fil(32), 
  1461 ;;  buff            2   15[BANK0 ] PTR const void 
  1462 ;;		 -> STR_4(20), 
  1463 ;;  btw             2   17[BANK0 ] unsigned short 
  1464 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1465 ;;		 -> guardar@bw(2), 
  1466 ;; Auto vars:     Size  Location     Type
  1467 ;;  clst            4   43[BANK0 ] unsigned long 
  1468 ;;  sect            4   39[BANK0 ] unsigned long 
  1469 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1470 ;;  cc              2   37[BANK0 ] unsigned short 
  1471 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1472 ;;		 -> STR_4(20), 
  1473 ;;  csect           1   36[BANK0 ] unsigned char 
  1474 ;;  res             1   33[BANK0 ] enum E93
  1475 ;; Return value:  Size  Location     Type
  1476 ;;                  1    wreg      enum E4918
  1477 ;; Registers used:
  1478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1479 ;; Tracked objects:
  1480 ;;		On entry : 0/0
  1481 ;;		On exit  : 0/0
  1482 ;;		Unchanged: 0/0
  1483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1484 ;;      Params:         0       8       0       0       0       0       0       0       0
  1485 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1486 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1487 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1488 ;;Total ram usage:       36 bytes
  1489 ;; Hardware stack levels used:    1
  1490 ;; Hardware stack levels required when called:   10
  1491 ;; This function calls:
  1492 ;;		_clust2sect
  1493 ;;		_create_chain
  1494 ;;		_disk_write
  1495 ;;		_mem_cpy
  1496 ;;		_move_window
  1497 ;;		_sync_window
  1498 ;;		_validate
  1499 ;; This function is called by:
  1500 ;;		_guardar
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text2
  1505  0011DE                     __ptext2:
  1506                           	opt callstack 0
  1507  0011DE                     _f_write:
  1508                           	opt callstack 19
  1509                           
  1510                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1511                           
  1512                           ;incstack = 0
  1513  0011DE  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1514  0011E2  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1515                           
  1516                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1517  0011E6  C073  FFD9         	movff	f_write@bw,fsr2l
  1518  0011EA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1519  0011EE  0E00               	movlw	0
  1520  0011F0  6EDE               	movwf	postinc2,c
  1521  0011F2  0E00               	movlw	0
  1522  0011F4  6EDD               	movwf	postdec2,c
  1523                           
  1524                           ;ff.c: 2707:  res = validate(fp);
  1525  0011F6  C06D  F002         	movff	f_write@fp,validate@obj
  1526  0011FA  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1527  0011FE  ECD1  F027         	call	_validate	;wreg free
  1528  001202  0100               	movlb	0	; () banked
  1529  001204  6F81               	movwf	f_write@res& (0+255),b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1533  001206  5181               	movf	f_write@res& (0+255),w,b
  1534  001208  A4D8               	btfss	status,2,c
  1535  00120A  0012               	return	
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;ff.c: 2709:  if (fp->err)
  1539  00120C  EE20 F005          	lfsr	2,5
  1540  001210  516D               	movf	f_write@fp& (0+255),w,b
  1541  001212  26D9               	addwf	fsr2l,f,c
  1542  001214  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1543  001216  22DA               	addwfc	fsr2h,f,c
  1544  001218  50DF               	movf	indf2,w,c
  1545  00121A  A4D8               	btfss	status,2,c
  1546  00121C  0012               	return	
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1550  00121E  EE20 F004          	lfsr	2,4
  1551  001222  516D               	movf	f_write@fp& (0+255),w,b
  1552  001224  26D9               	addwf	fsr2l,f,c
  1553  001226  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1554  001228  22DA               	addwfc	fsr2h,f,c
  1555  00122A  A2DF               	btfss	indf2,1,c
  1556  00122C  0012               	return	
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1560  00122E  EE20 F006          	lfsr	2,6
  1561  001232  516D               	movf	f_write@fp& (0+255),w,b
  1562  001234  26D9               	addwf	fsr2l,f,c
  1563  001236  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1564  001238  22DA               	addwfc	fsr2h,f,c
  1565  00123A  EE10 F006          	lfsr	1,6
  1566  00123E  516D               	movf	f_write@fp& (0+255),w,b
  1567  001240  26E1               	addwf	fsr1l,f,c
  1568  001242  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1569  001244  22E2               	addwfc	fsr1h,f,c
  1570  001246  CFE6 F079          	movff	postinc1,??_f_write+4
  1571  00124A  CFE6 F07A          	movff	postinc1,??_f_write+5
  1572  00124E  CFE6 F07B          	movff	postinc1,??_f_write+6
  1573  001252  CFE6 F07C          	movff	postinc1,??_f_write+7
  1574  001256  5171               	movf	f_write@btw& (0+255),w,b
  1575  001258  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1576  00125A  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1577  00125C  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1578  00125E  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1579  001260  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1580  001262  0E00               	movlw	0
  1581  001264  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1582  001266  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1583  001268  0E00               	movlw	0
  1584  00126A  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1585  00126C  6F80               	movwf	(??_f_write+11)& (0+255),b
  1586  00126E  50DE               	movf	postinc2,w,c
  1587  001270  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1588  001272  50DE               	movf	postinc2,w,c
  1589  001274  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1590  001276  50DE               	movf	postinc2,w,c
  1591  001278  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1592  00127A  50DE               	movf	postinc2,w,c
  1593  00127C  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1594  00127E  B0D8               	btfsc	status,0,c
  1595  001280  D329               	goto	l6181
  1596                           
  1597                           ; BSR set to: 0
  1598  001282  0E00               	movlw	0
  1599  001284  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1600  001286  0E00               	movlw	0
  1601  001288  6F71               	movwf	f_write@btw& (0+255),b
  1602  00128A  D324               	goto	l6181
  1603  00128C                     l6073:
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1607  00128C  EE20 F006          	lfsr	2,6
  1608  001290  516D               	movf	f_write@fp& (0+255),w,b
  1609  001292  26D9               	addwf	fsr2l,f,c
  1610  001294  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1611  001296  22DA               	addwfc	fsr2h,f,c
  1612  001298  0EFF               	movlw	255
  1613  00129A  14DE               	andwf	postinc2,w,c
  1614  00129C  6F75               	movwf	??_f_write& (0+255),b
  1615  00129E  0E01               	movlw	1
  1616  0012A0  14DE               	andwf	postinc2,w,c
  1617  0012A2  6F76               	movwf	(??_f_write+1)& (0+255),b
  1618  0012A4  0E00               	movlw	0
  1619  0012A6  14DE               	andwf	postinc2,w,c
  1620  0012A8  6F77               	movwf	(??_f_write+2)& (0+255),b
  1621  0012AA  0E00               	movlw	0
  1622  0012AC  14DE               	andwf	postinc2,w,c
  1623  0012AE  6F78               	movwf	(??_f_write+3)& (0+255),b
  1624  0012B0  5175               	movf	??_f_write& (0+255),w,b
  1625  0012B2  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1626  0012B4  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1627  0012B6  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1628  0012B8  A4D8               	btfss	status,2,c
  1629  0012BA  D26A               	goto	l6157
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1633  0012BC  EE20 F006          	lfsr	2,6
  1634  0012C0  516D               	movf	f_write@fp& (0+255),w,b
  1635  0012C2  26D9               	addwf	fsr2l,f,c
  1636  0012C4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1637  0012C6  22DA               	addwfc	fsr2h,f,c
  1638  0012C8  CFDE F075          	movff	postinc2,??_f_write
  1639  0012CC  CFDE F076          	movff	postinc2,??_f_write+1
  1640  0012D0  CFDE F077          	movff	postinc2,??_f_write+2
  1641  0012D4  CFDE F078          	movff	postinc2,??_f_write+3
  1642  0012D8  0E0A               	movlw	10
  1643  0012DA  D005               	goto	u8300
  1644  0012DC                     u8305:
  1645  0012DC  90D8               	bcf	status,0,c
  1646  0012DE  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1647  0012E0  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1648  0012E2  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1649  0012E4  3375               	rrcf	??_f_write& (0+255),f,b
  1650  0012E6                     u8300:
  1651  0012E6  2EE8               	decfsz	wreg,f,c
  1652  0012E8  D7F9               	goto	u8305
  1653  0012EA  C06D  FFD9         	movff	f_write@fp,fsr2l
  1654  0012EE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1655  0012F2  EE10 F002          	lfsr	1,2
  1656  0012F6  50DE               	movf	postinc2,w,c
  1657  0012F8  26E1               	addwf	fsr1l,f,c
  1658  0012FA  50DD               	movf	postdec2,w,c
  1659  0012FC  22E2               	addwfc	fsr1h,f,c
  1660  0012FE  50E7               	movf	indf1,w,c
  1661  001300  6F79               	movwf	(??_f_write+4)& (0+255),b
  1662  001302  0579               	decf	(??_f_write+4)& (0+255),w,b
  1663  001304  1575               	andwf	??_f_write& (0+255),w,b
  1664  001306  6F84               	movwf	f_write@csect& (0+255),b
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;ff.c: 2719:    if (!csect) {
  1668  001308  5184               	movf	f_write@csect& (0+255),w,b
  1669  00130A  A4D8               	btfss	status,2,c
  1670  00130C  D0A3               	goto	l6109
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1674  00130E  EE20 F006          	lfsr	2,6
  1675  001312  516D               	movf	f_write@fp& (0+255),w,b
  1676  001314  26D9               	addwf	fsr2l,f,c
  1677  001316  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1678  001318  22DA               	addwfc	fsr2h,f,c
  1679  00131A  50DE               	movf	postinc2,w,c
  1680  00131C  10DE               	iorwf	postinc2,w,c
  1681  00131E  10DE               	iorwf	postinc2,w,c
  1682  001320  10DE               	iorwf	postinc2,w,c
  1683  001322  A4D8               	btfss	status,2,c
  1684  001324  D027               	goto	l6087
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;ff.c: 2721:      clst = fp->sclust;
  1688  001326  EE20 F00E          	lfsr	2,14
  1689  00132A  516D               	movf	f_write@fp& (0+255),w,b
  1690  00132C  26D9               	addwf	fsr2l,f,c
  1691  00132E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1692  001330  22DA               	addwfc	fsr2h,f,c
  1693  001332  CFDE F08B          	movff	postinc2,f_write@clst
  1694  001336  CFDE F08C          	movff	postinc2,f_write@clst+1
  1695  00133A  CFDE F08D          	movff	postinc2,f_write@clst+2
  1696  00133E  CFDE F08E          	movff	postinc2,f_write@clst+3
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;ff.c: 2722:      if (clst == 0)
  1700  001342  518B               	movf	f_write@clst& (0+255),w,b
  1701  001344  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1702  001346  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1703  001348  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1704  00134A  A4D8               	btfss	status,2,c
  1705  00134C  D033               	goto	l6089
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1709  00134E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1710  001352  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1711  001356  CFDE F056          	movff	postinc2,create_chain@fs
  1712  00135A  CFDD F057          	movff	postdec2,create_chain@fs+1
  1713  00135E  0E00               	movlw	0
  1714  001360  6E58               	movwf	create_chain@clst,c
  1715  001362  0E00               	movlw	0
  1716  001364  6E59               	movwf	create_chain@clst+1,c
  1717  001366  0E00               	movlw	0
  1718  001368  6E5A               	movwf	create_chain@clst+2,c
  1719  00136A  0E00               	movlw	0
  1720  00136C  6E5B               	movwf	create_chain@clst+3,c
  1721  00136E  ECAB  F019         	call	_create_chain	;wreg free
  1722  001372  D018               	goto	L1
  1723  001374                     l6087:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1727  001374  C06D  FFD9         	movff	f_write@fp,fsr2l
  1728  001378  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1729  00137C  CFDE F056          	movff	postinc2,create_chain@fs
  1730  001380  CFDD F057          	movff	postdec2,create_chain@fs+1
  1731  001384  EE20 F012          	lfsr	2,18
  1732  001388  516D               	movf	f_write@fp& (0+255),w,b
  1733  00138A  26D9               	addwf	fsr2l,f,c
  1734  00138C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1735  00138E  22DA               	addwfc	fsr2h,f,c
  1736  001390  CFDE F058          	movff	postinc2,create_chain@clst
  1737  001394  CFDE F059          	movff	postinc2,create_chain@clst+1
  1738  001398  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1739  00139C  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1740  0013A0  ECAB  F019         	call	_create_chain	;wreg free
  1741  0013A4                     L1:
  1742  0013A4  C056  F08B         	movff	?_create_chain,f_write@clst
  1743  0013A8  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1744  0013AC  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1745  0013B0  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1746  0013B4                     l6089:
  1747                           
  1748                           ;ff.c: 2732:     if (clst == 0) break;
  1749  0013B4  0100               	movlb	0	; () banked
  1750  0013B6  518B               	movf	f_write@clst& (0+255),w,b
  1751  0013B8  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1752  0013BA  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1753  0013BC  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1754  0013BE  B4D8               	btfsc	status,2,c
  1755  0013C0  D28D               	goto	u8520
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1759  0013C2  058B               	decf	f_write@clst& (0+255),w,b
  1760  0013C4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1761  0013C6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1762  0013C8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1763  0013CA  A4D8               	btfss	status,2,c
  1764  0013CC  D009               	goto	l6099
  1765                           
  1766                           ; BSR set to: 0
  1767  0013CE  EE20 F005          	lfsr	2,5
  1768  0013D2  516D               	movf	f_write@fp& (0+255),w,b
  1769  0013D4  26D9               	addwf	fsr2l,f,c
  1770  0013D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1771  0013D8  22DA               	addwfc	fsr2h,f,c
  1772  0013DA  0E02               	movlw	2
  1773  0013DC  6EDF               	movwf	indf2,c
  1774  0013DE  0012               	return	
  1775  0013E0                     l6099:
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1779  0013E0  298B               	incf	f_write@clst& (0+255),w,b
  1780  0013E2  E110               	bnz	l6105
  1781  0013E4  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1782  0013E6  E10E               	bnz	l6105
  1783  0013E8  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1784  0013EA  E10C               	bnz	l6105
  1785  0013EC  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1786  0013EE  A4D8               	btfss	status,2,c
  1787  0013F0  D009               	goto	l6105
  1788                           
  1789                           ; BSR set to: 0
  1790  0013F2  EE20 F005          	lfsr	2,5
  1791  0013F6  516D               	movf	f_write@fp& (0+255),w,b
  1792  0013F8  26D9               	addwf	fsr2l,f,c
  1793  0013FA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1794  0013FC  22DA               	addwfc	fsr2h,f,c
  1795  0013FE  0E01               	movlw	1
  1796  001400  6EDF               	movwf	indf2,c
  1797  001402  0012               	return	
  1798  001404                     l6105:
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;ff.c: 2735:     fp->clust = clst;
  1802  001404  EE20 F012          	lfsr	2,18
  1803  001408  516D               	movf	f_write@fp& (0+255),w,b
  1804  00140A  26D9               	addwf	fsr2l,f,c
  1805  00140C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1806  00140E  22DA               	addwfc	fsr2h,f,c
  1807  001410  C08B  FFDE         	movff	f_write@clst,postinc2
  1808  001414  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1809  001418  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1810  00141C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1811                           
  1812                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1813  001420  EE20 F00E          	lfsr	2,14
  1814  001424  516D               	movf	f_write@fp& (0+255),w,b
  1815  001426  26D9               	addwf	fsr2l,f,c
  1816  001428  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1817  00142A  22DA               	addwfc	fsr2h,f,c
  1818  00142C  50DE               	movf	postinc2,w,c
  1819  00142E  10DE               	iorwf	postinc2,w,c
  1820  001430  10DE               	iorwf	postinc2,w,c
  1821  001432  10DE               	iorwf	postinc2,w,c
  1822  001434  A4D8               	btfss	status,2,c
  1823  001436  D00E               	goto	l6109
  1824                           
  1825                           ; BSR set to: 0
  1826  001438  EE20 F00E          	lfsr	2,14
  1827  00143C  516D               	movf	f_write@fp& (0+255),w,b
  1828  00143E  26D9               	addwf	fsr2l,f,c
  1829  001440  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1830  001442  22DA               	addwfc	fsr2h,f,c
  1831  001444  C08B  FFDE         	movff	f_write@clst,postinc2
  1832  001448  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1833  00144C  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1834  001450  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1835  001454                     l6109:
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1839  001454  EE20 F016          	lfsr	2,22
  1840  001458  516D               	movf	f_write@fp& (0+255),w,b
  1841  00145A  26D9               	addwf	fsr2l,f,c
  1842  00145C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1843  00145E  22DA               	addwfc	fsr2h,f,c
  1844  001460  C06D  FFE1         	movff	f_write@fp,fsr1l
  1845  001464  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1846  001468  EE00 F02A          	lfsr	0,42
  1847  00146C  50E6               	movf	postinc1,w,c
  1848  00146E  26E9               	addwf	fsr0l,f,c
  1849  001470  50E5               	movf	postdec1,w,c
  1850  001472  22EA               	addwfc	fsr0h,f,c
  1851  001474  50DE               	movf	postinc2,w,c
  1852  001476  18EE               	xorwf	postinc0,w,c
  1853  001478  E121               	bnz	l6117
  1854  00147A  50DE               	movf	postinc2,w,c
  1855  00147C  18EE               	xorwf	postinc0,w,c
  1856  00147E  E11E               	bnz	l6117
  1857  001480  50DE               	movf	postinc2,w,c
  1858  001482  18EE               	xorwf	postinc0,w,c
  1859  001484  E11B               	bnz	l6117
  1860  001486  50DE               	movf	postinc2,w,c
  1861  001488  18EE               	xorwf	postinc0,w,c
  1862  00148A  A4D8               	btfss	status,2,c
  1863  00148C  D017               	goto	l6117
  1864                           
  1865                           ; BSR set to: 0
  1866  00148E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1867  001492  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1868  001496  CFDE F01B          	movff	postinc2,sync_window@fs
  1869  00149A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1870  00149E  EC4E  F020         	call	_sync_window	;wreg free
  1871  0014A2  0900               	iorlw	0
  1872  0014A4  B4D8               	btfsc	status,2,c
  1873  0014A6  D00A               	goto	l6117
  1874                           
  1875                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1876  0014A8  0100               	movlb	0	; () banked
  1877  0014AA  EE20 F005          	lfsr	2,5
  1878  0014AE  516D               	movf	f_write@fp& (0+255),w,b
  1879  0014B0  26D9               	addwf	fsr2l,f,c
  1880  0014B2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1881  0014B4  22DA               	addwfc	fsr2h,f,c
  1882  0014B6  0E01               	movlw	1
  1883  0014B8  6EDF               	movwf	indf2,c
  1884  0014BA  0012               	return	
  1885  0014BC                     l6117:
  1886                           
  1887                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1888  0014BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1889  0014C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1890  0014C4  CFDE F00D          	movff	postinc2,clust2sect@fs
  1891  0014C8  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1892  0014CC  0100               	movlb	0	; () banked
  1893  0014CE  EE20 F012          	lfsr	2,18
  1894  0014D2  516D               	movf	f_write@fp& (0+255),w,b
  1895  0014D4  26D9               	addwf	fsr2l,f,c
  1896  0014D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1897  0014D8  22DA               	addwfc	fsr2h,f,c
  1898  0014DA  CFDE F00F          	movff	postinc2,clust2sect@clst
  1899  0014DE  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1900  0014E2  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1901  0014E6  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1902  0014EA  EC6C  F026         	call	_clust2sect	;wreg free
  1903  0014EE  C00D  F087         	movff	?_clust2sect,f_write@sect
  1904  0014F2  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1905  0014F6  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1906  0014FA  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1907                           
  1908                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1909  0014FE  0100               	movlb	0	; () banked
  1910  001500  5187               	movf	f_write@sect& (0+255),w,b
  1911  001502  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1912  001504  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1913  001506  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1914  001508  A4D8               	btfss	status,2,c
  1915  00150A  D009               	goto	l6125
  1916                           
  1917                           ; BSR set to: 0
  1918  00150C  EE20 F005          	lfsr	2,5
  1919  001510  516D               	movf	f_write@fp& (0+255),w,b
  1920  001512  26D9               	addwf	fsr2l,f,c
  1921  001514  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1922  001516  22DA               	addwfc	fsr2h,f,c
  1923  001518  0E02               	movlw	2
  1924  00151A  6EDF               	movwf	indf2,c
  1925  00151C  0012               	return	
  1926  00151E                     l6125:
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;ff.c: 2750:    sect += csect;
  1930  00151E  5184               	movf	f_write@csect& (0+255),w,b
  1931  001520  2787               	addwf	f_write@sect& (0+255),f,b
  1932  001522  0E00               	movlw	0
  1933  001524  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1934  001526  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1935  001528  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1936                           
  1937                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1938  00152A  C071  F075         	movff	f_write@btw,??_f_write
  1939  00152E  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1940  001532  0E09               	movlw	9
  1941  001534  6F77               	movwf	(??_f_write+2)& (0+255),b
  1942  001536                     u8415:
  1943  001536  90D8               	bcf	status,0,c
  1944  001538  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1945  00153A  3375               	rrcf	??_f_write& (0+255),f,b
  1946  00153C  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1947  00153E  D7FB               	goto	u8415
  1948  001540  C075  F085         	movff	??_f_write,f_write@cc
  1949  001544  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1950                           
  1951                           ;ff.c: 2752:    if (cc) {
  1952  001548  5185               	movf	f_write@cc& (0+255),w,b
  1953  00154A  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1954  00154C  B4D8               	btfsc	status,2,c
  1955  00154E  D0D2               	goto	l6145
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1959  001550  5184               	movf	f_write@csect& (0+255),w,b
  1960  001552  2585               	addwf	f_write@cc& (0+255),w,b
  1961  001554  6F75               	movwf	??_f_write& (0+255),b
  1962  001556  0E00               	movlw	0
  1963  001558  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1964  00155A  6F76               	movwf	(??_f_write+1)& (0+255),b
  1965  00155C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1966  001560  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1967  001564  EE10 F002          	lfsr	1,2
  1968  001568  50DE               	movf	postinc2,w,c
  1969  00156A  26E1               	addwf	fsr1l,f,c
  1970  00156C  50DD               	movf	postdec2,w,c
  1971  00156E  22E2               	addwfc	fsr1h,f,c
  1972  001570  50E7               	movf	indf1,w,c
  1973  001572  6F77               	movwf	(??_f_write+2)& (0+255),b
  1974  001574  6B78               	clrf	(??_f_write+3)& (0+255),b
  1975  001576  5175               	movf	??_f_write& (0+255),w,b
  1976  001578  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1977  00157A  5176               	movf	(??_f_write+1)& (0+255),w,b
  1978  00157C  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1979  00157E  B0D8               	btfsc	status,0,c
  1980  001580  D012               	goto	l6131
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  1984  001582  C06D  FFD9         	movff	f_write@fp,fsr2l
  1985  001586  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1986  00158A  EE10 F002          	lfsr	1,2
  1987  00158E  50DE               	movf	postinc2,w,c
  1988  001590  26E1               	addwf	fsr1l,f,c
  1989  001592  50DD               	movf	postdec2,w,c
  1990  001594  22E2               	addwfc	fsr1h,f,c
  1991  001596  50E7               	movf	indf1,w,c
  1992  001598  6F75               	movwf	??_f_write& (0+255),b
  1993  00159A  5184               	movf	f_write@csect& (0+255),w,b
  1994  00159C  5D75               	subwf	??_f_write& (0+255),w,b
  1995  00159E  6F85               	movwf	f_write@cc& (0+255),b
  1996  0015A0  6B86               	clrf	(f_write@cc+1)& (0+255),b
  1997  0015A2  A0D8               	btfss	status,0,c
  1998  0015A4  0786               	decf	(f_write@cc+1)& (0+255),f,b
  1999  0015A6                     l6131:
  2000                           
  2001                           ; BSR set to: 0
  2002                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2003  0015A6  C082  F011         	movff	f_write@wbuff,disk_write@buff
  2004  0015AA  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2005  0015AE  C087  F013         	movff	f_write@sect,disk_write@sector
  2006  0015B2  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  2007  0015B6  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  2008  0015BA  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  2009  0015BE  C085  F017         	movff	f_write@cc,disk_write@count
  2010  0015C2  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  2011  0015C6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2012  0015CA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2013  0015CE  EE10 F001          	lfsr	1,1
  2014  0015D2  50DE               	movf	postinc2,w,c
  2015  0015D4  26E1               	addwf	fsr1l,f,c
  2016  0015D6  50DD               	movf	postdec2,w,c
  2017  0015D8  22E2               	addwfc	fsr1h,f,c
  2018  0015DA  50E7               	movf	indf1,w,c
  2019  0015DC  ECE3  F022         	call	_disk_write
  2020  0015E0  0900               	iorlw	0
  2021  0015E2  B4D8               	btfsc	status,2,c
  2022  0015E4  D00A               	goto	l6137
  2023                           
  2024                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2025  0015E6  0100               	movlb	0	; () banked
  2026  0015E8  EE20 F005          	lfsr	2,5
  2027  0015EC  516D               	movf	f_write@fp& (0+255),w,b
  2028  0015EE  26D9               	addwf	fsr2l,f,c
  2029  0015F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2030  0015F2  22DA               	addwfc	fsr2h,f,c
  2031  0015F4  0E01               	movlw	1
  2032  0015F6  6EDF               	movwf	indf2,c
  2033  0015F8  0012               	return	
  2034  0015FA                     l6137:
  2035                           
  2036                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2037  0015FA  0100               	movlb	0	; () banked
  2038  0015FC  5185               	movf	f_write@cc& (0+255),w,b
  2039  0015FE  6F75               	movwf	??_f_write& (0+255),b
  2040  001600  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2041  001602  6F76               	movwf	(??_f_write+1)& (0+255),b
  2042  001604  6B77               	clrf	(??_f_write+2)& (0+255),b
  2043  001606  6B78               	clrf	(??_f_write+3)& (0+255),b
  2044  001608  C06D  FFD9         	movff	f_write@fp,fsr2l
  2045  00160C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2046  001610  EE10 F02A          	lfsr	1,42
  2047  001614  50DE               	movf	postinc2,w,c
  2048  001616  26E1               	addwf	fsr1l,f,c
  2049  001618  50DD               	movf	postdec2,w,c
  2050  00161A  22E2               	addwfc	fsr1h,f,c
  2051  00161C  CFE6 F079          	movff	postinc1,??_f_write+4
  2052  001620  CFE6 F07A          	movff	postinc1,??_f_write+5
  2053  001624  CFE6 F07B          	movff	postinc1,??_f_write+6
  2054  001628  CFE6 F07C          	movff	postinc1,??_f_write+7
  2055  00162C  5187               	movf	f_write@sect& (0+255),w,b
  2056  00162E  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2057  001630  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2058  001632  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2059  001634  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2060  001636  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2061  001638  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2062  00163A  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2063  00163C  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2064  00163E  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2065  001640  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2066  001642  6F80               	movwf	(??_f_write+11)& (0+255),b
  2067  001644  5175               	movf	??_f_write& (0+255),w,b
  2068  001646  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2069  001648  5176               	movf	(??_f_write+1)& (0+255),w,b
  2070  00164A  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2071  00164C  5177               	movf	(??_f_write+2)& (0+255),w,b
  2072  00164E  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2073  001650  5178               	movf	(??_f_write+3)& (0+255),w,b
  2074  001652  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2075  001654  B0D8               	btfsc	status,0,c
  2076  001656  D03E               	goto	l6143
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2080  001658  C06D  FFD9         	movff	f_write@fp,fsr2l
  2081  00165C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2082  001660  CFDE F075          	movff	postinc2,??_f_write
  2083  001664  CFDD F076          	movff	postdec2,??_f_write+1
  2084  001668  0E2E               	movlw	46
  2085  00166A  2575               	addwf	??_f_write& (0+255),w,b
  2086  00166C  6E01               	movwf	mem_cpy@dst,c
  2087  00166E  0E00               	movlw	0
  2088  001670  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2089  001672  6E02               	movwf	mem_cpy@dst+1,c
  2090  001674  C06D  FFD9         	movff	f_write@fp,fsr2l
  2091  001678  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2092  00167C  EE10 F02A          	lfsr	1,42
  2093  001680  50DE               	movf	postinc2,w,c
  2094  001682  26E1               	addwf	fsr1l,f,c
  2095  001684  50DD               	movf	postdec2,w,c
  2096  001686  22E2               	addwfc	fsr1h,f,c
  2097  001688  CFE6 F077          	movff	postinc1,??_f_write+2
  2098  00168C  CFE5 F078          	movff	postdec1,??_f_write+3
  2099  001690  5187               	movf	f_write@sect& (0+255),w,b
  2100  001692  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2101  001694  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2102  001696  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2103  001698  0E09               	movlw	9
  2104  00169A                     u8465:
  2105  00169A  90D8               	bcf	status,0,c
  2106  00169C  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2107  00169E  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2108  0016A0  2EE8               	decfsz	wreg,f,c
  2109  0016A2  D7FB               	goto	u8465
  2110  0016A4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2111  0016A6  2582               	addwf	f_write@wbuff& (0+255),w,b
  2112  0016A8  6E03               	movwf	mem_cpy@src,c
  2113  0016AA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2114  0016AC  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2115  0016AE  6E04               	movwf	mem_cpy@src+1,c
  2116  0016B0  0E02               	movlw	2
  2117  0016B2  6E06               	movwf	mem_cpy@cnt+1,c
  2118  0016B4  0E00               	movlw	0
  2119  0016B6  6E05               	movwf	mem_cpy@cnt,c
  2120  0016B8  EC0F  F026         	call	_mem_cpy	;wreg free
  2121                           
  2122                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2123  0016BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  2124  0016C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2125  0016C4  EE10 F004          	lfsr	1,4
  2126  0016C8  50DE               	movf	postinc2,w,c
  2127  0016CA  26E1               	addwf	fsr1l,f,c
  2128  0016CC  50DD               	movf	postdec2,w,c
  2129  0016CE  22E2               	addwfc	fsr1h,f,c
  2130  0016D0  0E00               	movlw	0
  2131  0016D2  6EE7               	movwf	indf1,c
  2132  0016D4                     l6143:
  2133                           
  2134                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2135  0016D4  C085  F075         	movff	f_write@cc,??_f_write
  2136  0016D8  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2137  0016DC  0E09               	movlw	9
  2138  0016DE                     u8475:
  2139  0016DE  90D8               	bcf	status,0,c
  2140  0016E0  0100               	movlb	0	; () banked
  2141  0016E2  3775               	rlcf	??_f_write& (0+255),f,b
  2142  0016E4  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2143  0016E6  2EE8               	decfsz	wreg,f,c
  2144  0016E8  D7FA               	goto	u8475
  2145  0016EA  C075  F08F         	movff	??_f_write,f_write@wcnt
  2146  0016EE  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2147                           
  2148                           ;ff.c: 2771:     continue;
  2149  0016F2  D0D2               	goto	l6173
  2150  0016F4                     l6145:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2154  0016F4  EE20 F00A          	lfsr	2,10
  2155  0016F8  516D               	movf	f_write@fp& (0+255),w,b
  2156  0016FA  26D9               	addwf	fsr2l,f,c
  2157  0016FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2158  0016FE  22DA               	addwfc	fsr2h,f,c
  2159  001700  EE10 F006          	lfsr	1,6
  2160  001704  516D               	movf	f_write@fp& (0+255),w,b
  2161  001706  26E1               	addwf	fsr1l,f,c
  2162  001708  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2163  00170A  22E2               	addwfc	fsr1h,f,c
  2164  00170C  50DE               	movf	postinc2,w,c
  2165  00170E  5CE6               	subwf	postinc1,w,c
  2166  001710  50DE               	movf	postinc2,w,c
  2167  001712  58E6               	subwfb	postinc1,w,c
  2168  001714  50DE               	movf	postinc2,w,c
  2169  001716  58E6               	subwfb	postinc1,w,c
  2170  001718  50DE               	movf	postinc2,w,c
  2171  00171A  58E6               	subwfb	postinc1,w,c
  2172  00171C  A0D8               	btfss	status,0,c
  2173  00171E  D029               	goto	l6155
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2177  001720  C06D  FFD9         	movff	f_write@fp,fsr2l
  2178  001724  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2179  001728  CFDE F01B          	movff	postinc2,sync_window@fs
  2180  00172C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2181  001730  EC4E  F020         	call	_sync_window	;wreg free
  2182  001734  0900               	iorlw	0
  2183  001736  B4D8               	btfsc	status,2,c
  2184  001738  D00A               	goto	l6153
  2185  00173A  0100               	movlb	0	; () banked
  2186  00173C  EE20 F005          	lfsr	2,5
  2187  001740  516D               	movf	f_write@fp& (0+255),w,b
  2188  001742  26D9               	addwf	fsr2l,f,c
  2189  001744  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2190  001746  22DA               	addwfc	fsr2h,f,c
  2191  001748  0E01               	movlw	1
  2192  00174A  6EDF               	movwf	indf2,c
  2193  00174C  0012               	return	
  2194  00174E                     l6153:
  2195                           
  2196                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2197  00174E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2198  001752  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2199  001756  EE10 F02A          	lfsr	1,42
  2200  00175A  50DE               	movf	postinc2,w,c
  2201  00175C  26E1               	addwf	fsr1l,f,c
  2202  00175E  50DD               	movf	postdec2,w,c
  2203  001760  22E2               	addwfc	fsr1h,f,c
  2204  001762  C087  FFE6         	movff	f_write@sect,postinc1
  2205  001766  C088  FFE6         	movff	f_write@sect+1,postinc1
  2206  00176A  C089  FFE6         	movff	f_write@sect+2,postinc1
  2207  00176E  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2208  001772                     l6155:
  2209                           
  2210                           ;ff.c: 2785:    fp->dsect = sect;
  2211  001772  0100               	movlb	0	; () banked
  2212  001774  EE20 F016          	lfsr	2,22
  2213  001778  516D               	movf	f_write@fp& (0+255),w,b
  2214  00177A  26D9               	addwf	fsr2l,f,c
  2215  00177C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2216  00177E  22DA               	addwfc	fsr2h,f,c
  2217  001780  C087  FFDE         	movff	f_write@sect,postinc2
  2218  001784  C088  FFDE         	movff	f_write@sect+1,postinc2
  2219  001788  C089  FFDE         	movff	f_write@sect+2,postinc2
  2220  00178C  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2221  001790                     l6157:
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2225  001790  0EFF               	movlw	255
  2226  001792  6F75               	movwf	??_f_write& (0+255),b
  2227  001794  0E01               	movlw	1
  2228  001796  6F76               	movwf	(??_f_write+1)& (0+255),b
  2229  001798  EE20 F006          	lfsr	2,6
  2230  00179C  516D               	movf	f_write@fp& (0+255),w,b
  2231  00179E  26D9               	addwf	fsr2l,f,c
  2232  0017A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2233  0017A2  22DA               	addwfc	fsr2h,f,c
  2234  0017A4  CFDE F077          	movff	postinc2,??_f_write+2
  2235  0017A8  CFDD F078          	movff	postdec2,??_f_write+3
  2236  0017AC  5175               	movf	??_f_write& (0+255),w,b
  2237  0017AE  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2238  0017B0  5176               	movf	(??_f_write+1)& (0+255),w,b
  2239  0017B2  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2240  0017B4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2241  0017B6  0800               	sublw	0
  2242  0017B8  6F8F               	movwf	f_write@wcnt& (0+255),b
  2243  0017BA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2244  0017BC  A0D8               	btfss	status,0,c
  2245  0017BE  2AE8               	incf	wreg,f,c
  2246  0017C0  0802               	sublw	2
  2247  0017C2  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2251  0017C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2252  0017C6  5D71               	subwf	f_write@btw& (0+255),w,b
  2253  0017C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2254  0017CA  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2255  0017CC  B0D8               	btfsc	status,0,c
  2256  0017CE  D004               	goto	l6163
  2257                           
  2258                           ; BSR set to: 0
  2259  0017D0  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2260  0017D4  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2261  0017D8                     l6163:
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2265  0017D8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2266  0017DC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2267  0017E0  CFDE F030          	movff	postinc2,move_window@fs
  2268  0017E4  CFDD F031          	movff	postdec2,move_window@fs+1
  2269  0017E8  EE20 F016          	lfsr	2,22
  2270  0017EC  516D               	movf	f_write@fp& (0+255),w,b
  2271  0017EE  26D9               	addwf	fsr2l,f,c
  2272  0017F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2273  0017F2  22DA               	addwfc	fsr2h,f,c
  2274  0017F4  CFDE F032          	movff	postinc2,move_window@sector
  2275  0017F8  CFDE F033          	movff	postinc2,move_window@sector+1
  2276  0017FC  CFDE F034          	movff	postinc2,move_window@sector+2
  2277  001800  CFDE F035          	movff	postinc2,move_window@sector+3
  2278  001804  EC7E  F027         	call	_move_window	;wreg free
  2279  001808  0900               	iorlw	0
  2280  00180A  B4D8               	btfsc	status,2,c
  2281  00180C  D00A               	goto	l6169
  2282                           
  2283                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2284  00180E  0100               	movlb	0	; () banked
  2285  001810  EE20 F005          	lfsr	2,5
  2286  001814  516D               	movf	f_write@fp& (0+255),w,b
  2287  001816  26D9               	addwf	fsr2l,f,c
  2288  001818  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2289  00181A  22DA               	addwfc	fsr2h,f,c
  2290  00181C  0E01               	movlw	1
  2291  00181E  6EDF               	movwf	indf2,c
  2292  001820  0012               	return	
  2293  001822                     l6169:
  2294                           
  2295                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2296  001822  0EFF               	movlw	255
  2297  001824  0100               	movlb	0	; () banked
  2298  001826  6F75               	movwf	??_f_write& (0+255),b
  2299  001828  0E01               	movlw	1
  2300  00182A  6F76               	movwf	(??_f_write+1)& (0+255),b
  2301  00182C  EE20 F006          	lfsr	2,6
  2302  001830  516D               	movf	f_write@fp& (0+255),w,b
  2303  001832  26D9               	addwf	fsr2l,f,c
  2304  001834  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2305  001836  22DA               	addwfc	fsr2h,f,c
  2306  001838  CFDE F077          	movff	postinc2,??_f_write+2
  2307  00183C  CFDD F078          	movff	postdec2,??_f_write+3
  2308  001840  5175               	movf	??_f_write& (0+255),w,b
  2309  001842  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2310  001844  5176               	movf	(??_f_write+1)& (0+255),w,b
  2311  001846  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2312  001848  C06D  FFD9         	movff	f_write@fp,fsr2l
  2313  00184C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2314  001850  CFDE F079          	movff	postinc2,??_f_write+4
  2315  001854  CFDD F07A          	movff	postdec2,??_f_write+5
  2316  001858  5177               	movf	(??_f_write+2)& (0+255),w,b
  2317  00185A  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2318  00185C  5178               	movf	(??_f_write+3)& (0+255),w,b
  2319  00185E  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2320  001860  0E2E               	movlw	46
  2321  001862  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2322  001864  6E01               	movwf	mem_cpy@dst,c
  2323  001866  0E00               	movlw	0
  2324  001868  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2325  00186A  6E02               	movwf	mem_cpy@dst+1,c
  2326  00186C  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2327  001870  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2328  001874  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2329  001878  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2330  00187C  EC0F  F026         	call	_mem_cpy	;wreg free
  2331                           
  2332                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2333  001880  C06D  FFD9         	movff	f_write@fp,fsr2l
  2334  001884  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2335  001888  EE10 F004          	lfsr	1,4
  2336  00188C  50DE               	movf	postinc2,w,c
  2337  00188E  26E1               	addwf	fsr1l,f,c
  2338  001890  50DD               	movf	postdec2,w,c
  2339  001892  22E2               	addwfc	fsr1h,f,c
  2340  001894  0E01               	movlw	1
  2341  001896  6EE7               	movwf	indf1,c
  2342  001898                     l6173:
  2343  001898  0100               	movlb	0	; () banked
  2344  00189A  518F               	movf	f_write@wcnt& (0+255),w,b
  2345  00189C  2782               	addwf	f_write@wbuff& (0+255),f,b
  2346  00189E  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2347  0018A0  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2348                           
  2349                           ; BSR set to: 0
  2350  0018A2  EE20 F006          	lfsr	2,6
  2351  0018A6  516D               	movf	f_write@fp& (0+255),w,b
  2352  0018A8  26D9               	addwf	fsr2l,f,c
  2353  0018AA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2354  0018AC  22DA               	addwfc	fsr2h,f,c
  2355  0018AE  518F               	movf	f_write@wcnt& (0+255),w,b
  2356  0018B0  26DE               	addwf	postinc2,f,c
  2357  0018B2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2358  0018B4  22DE               	addwfc	postinc2,f,c
  2359  0018B6  0E00               	movlw	0
  2360  0018B8  22DE               	addwfc	postinc2,f,c
  2361  0018BA  22DE               	addwfc	postinc2,f,c
  2362                           
  2363                           ; BSR set to: 0
  2364  0018BC  C073  FFD9         	movff	f_write@bw,fsr2l
  2365  0018C0  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2366  0018C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2367  0018C6  26DE               	addwf	postinc2,f,c
  2368  0018C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2369  0018CA  22DD               	addwfc	postdec2,f,c
  2370                           
  2371                           ; BSR set to: 0
  2372  0018CC  518F               	movf	f_write@wcnt& (0+255),w,b
  2373  0018CE  5F71               	subwf	f_write@btw& (0+255),f,b
  2374  0018D0  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2375  0018D2  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2376  0018D4                     l6181:
  2377                           
  2378                           ; BSR set to: 0
  2379  0018D4  5171               	movf	f_write@btw& (0+255),w,b
  2380  0018D6  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2381  0018D8  A4D8               	btfss	status,2,c
  2382  0018DA  D4D8               	goto	l6073
  2383  0018DC                     u8520:
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2387  0018DC  EE20 F006          	lfsr	2,6
  2388  0018E0  516D               	movf	f_write@fp& (0+255),w,b
  2389  0018E2  26D9               	addwf	fsr2l,f,c
  2390  0018E4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2391  0018E6  22DA               	addwfc	fsr2h,f,c
  2392  0018E8  EE10 F00A          	lfsr	1,10
  2393  0018EC  516D               	movf	f_write@fp& (0+255),w,b
  2394  0018EE  26E1               	addwf	fsr1l,f,c
  2395  0018F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2396  0018F2  22E2               	addwfc	fsr1h,f,c
  2397  0018F4  50DE               	movf	postinc2,w,c
  2398  0018F6  5CE6               	subwf	postinc1,w,c
  2399  0018F8  50DE               	movf	postinc2,w,c
  2400  0018FA  58E6               	subwfb	postinc1,w,c
  2401  0018FC  50DE               	movf	postinc2,w,c
  2402  0018FE  58E6               	subwfb	postinc1,w,c
  2403  001900  50DE               	movf	postinc2,w,c
  2404  001902  58E6               	subwfb	postinc1,w,c
  2405  001904  B0D8               	btfsc	status,0,c
  2406  001906  D014               	goto	l6187
  2407                           
  2408                           ; BSR set to: 0
  2409  001908  EE20 F006          	lfsr	2,6
  2410  00190C  516D               	movf	f_write@fp& (0+255),w,b
  2411  00190E  26D9               	addwf	fsr2l,f,c
  2412  001910  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2413  001912  22DA               	addwfc	fsr2h,f,c
  2414  001914  EE10 F00A          	lfsr	1,10
  2415  001918  516D               	movf	f_write@fp& (0+255),w,b
  2416  00191A  26E1               	addwf	fsr1l,f,c
  2417  00191C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2418  00191E  22E2               	addwfc	fsr1h,f,c
  2419  001920  CFDE FFE6          	movff	postinc2,postinc1
  2420  001924  CFDE FFE6          	movff	postinc2,postinc1
  2421  001928  CFDE FFE6          	movff	postinc2,postinc1
  2422  00192C  CFDE FFE6          	movff	postinc2,postinc1
  2423  001930                     l6187:
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;ff.c: 2801:  fp->flag |= 0x20;
  2427  001930  EE20 F004          	lfsr	2,4
  2428  001934  516D               	movf	f_write@fp& (0+255),w,b
  2429  001936  26D9               	addwf	fsr2l,f,c
  2430  001938  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2431  00193A  22DA               	addwfc	fsr2h,f,c
  2432  00193C  0E00               	movlw	0
  2433  00193E  8ADB               	bsf	plusw2,5,c
  2434                           
  2435                           ; BSR set to: 0
  2436  001940  0012               	return		;funcret
  2437  001942                     __end_of_f_write:
  2438                           	opt callstack 0
  2439                           
  2440 ;; *************** function _f_open *****************
  2441 ;; Defined at:
  2442 ;;		line 2449 in file "ff.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  fp              2   58[BANK0 ] PTR struct .
  2445 ;;		 -> Fil(32), 
  2446 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2447 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  2448 ;;  mode            1   62[BANK0 ] unsigned char 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  dj             22   90[BANK0 ] struct .
  2451 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2452 ;;  dw              4   83[BANK0 ] unsigned long 
  2453 ;;  cl              4   79[BANK0 ] unsigned long 
  2454 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2455 ;;		 -> NULL(0), FatFs(558), 
  2456 ;;  res             1   87[BANK0 ] enum E93
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      enum E4918
  2459 ;; Registers used:
  2460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2466 ;;      Params:         0       5       0       0       0       0       0       0       0
  2467 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2468 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2469 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2470 ;;Total ram usage:       54 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:   13
  2473 ;; This function calls:
  2474 ;;		_dir_register
  2475 ;;		_find_volume
  2476 ;;		_follow_path
  2477 ;;		_ld_clust
  2478 ;;		_move_window
  2479 ;;		_remove_chain
  2480 ;;		_st_clust
  2481 ;; This function is called by:
  2482 ;;		_guardar
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text3
  2487  002FC0                     __ptext3:
  2488                           	opt callstack 0
  2489  002FC0                     _f_open:
  2490                           	opt callstack 16
  2491                           
  2492                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;incstack = 0
  2496  002FC0  0100               	movlb	0	; () banked
  2497  002FC2  519A               	movf	f_open@fp& (0+255),w,b
  2498  002FC4  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2499  002FC6  A4D8               	btfss	status,2,c
  2500  002FC8  D002               	goto	l5819
  2501                           
  2502                           ; BSR set to: 0
  2503  002FCA  0E09               	movlw	9
  2504  002FCC  0012               	return	
  2505  002FCE                     l5819:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;ff.c: 2465:  fp->fs = 0;
  2509  002FCE  C09A  FFD9         	movff	f_open@fp,fsr2l
  2510  002FD2  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2511  002FD6  0E00               	movlw	0
  2512  002FD8  6EDE               	movwf	postinc2,c
  2513  002FDA  0E00               	movlw	0
  2514  002FDC  6EDD               	movwf	postdec2,c
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2518  002FDE  C0D6  F0BA         	movff	ff@FatFs,f_open@dj
  2519  002FE2  C0D7  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2523  002FE6  0E1F               	movlw	31
  2524  002FE8  179E               	andwf	f_open@mode& (0+255),f,b
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2528  002FEA  0EBA               	movlw	low f_open@dj
  2529  002FEC  6E45               	movwf	find_volume@rfs,c
  2530  002FEE  0E00               	movlw	high f_open@dj
  2531  002FF0  6E46               	movwf	find_volume@rfs+1,c
  2532  002FF2  0E9C               	movlw	low f_open@path
  2533  002FF4  6E47               	movwf	find_volume@path,c
  2534  002FF6  0E00               	movlw	high f_open@path
  2535  002FF8  6E48               	movwf	find_volume@path+1,c
  2536  002FFA  519E               	movf	f_open@mode& (0+255),w,b
  2537  002FFC  0BFE               	andlw	254
  2538  002FFE  6E49               	movwf	find_volume@wmode,c
  2539  003000  EC18  F004         	call	_find_volume	;wreg free
  2540  003004  0100               	movlb	0	; () banked
  2541  003006  6FB7               	movwf	f_open@res& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;ff.c: 2479:  if (res == FR_OK) {
  2545  003008  51B7               	movf	f_open@res& (0+255),w,b
  2546  00300A  A4D8               	btfss	status,2,c
  2547  00300C  D1A2               	goto	l5923
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;ff.c: 2480:   (dj).fn = sfn;
  2551  00300E  0EA3               	movlw	low f_open@sfn
  2552  003010  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2553  003012  0E00               	movlw	high f_open@sfn
  2554  003014  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2558  003016  0EBA               	movlw	low f_open@dj
  2559  003018  6F86               	movwf	follow_path@dp& (0+255),b
  2560  00301A  0E00               	movlw	high f_open@dj
  2561  00301C  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2562  00301E  C09C  F088         	movff	f_open@path,follow_path@path
  2563  003022  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2564  003026  EC9F  F021         	call	_follow_path	;wreg free
  2565  00302A  0100               	movlb	0	; () banked
  2566  00302C  6FB7               	movwf	f_open@res& (0+255),b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;ff.c: 2482:   dir = dj.dir;
  2570  00302E  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2571  003032  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;ff.c: 2484:   if (res == FR_OK) {
  2575  003036  51B7               	movf	f_open@res& (0+255),w,b
  2576  003038  A4D8               	btfss	status,2,c
  2577  00303A  D006               	goto	l5841
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;ff.c: 2485:    if (!dir)
  2581  00303C  51B8               	movf	f_open@dir& (0+255),w,b
  2582  00303E  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2583  003040  A4D8               	btfss	status,2,c
  2584  003042  D002               	goto	l5841
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2588  003044  0E06               	movlw	6
  2589  003046  6FB7               	movwf	f_open@res& (0+255),b
  2590  003048                     l5841:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2594  003048  C09E  F09F         	movff	f_open@mode,??_f_open
  2595  00304C  0E1C               	movlw	28
  2596  00304E  179F               	andwf	??_f_open& (0+255),f,b
  2597  003050  B4D8               	btfsc	status,2,c
  2598  003052  D0D3               	goto	l5889
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;ff.c: 2494:    if (res != FR_OK) {
  2602  003054  51B7               	movf	f_open@res& (0+255),w,b
  2603  003056  B4D8               	btfsc	status,2,c
  2604  003058  D012               	goto	l5853
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2608  00305A  0E04               	movlw	4
  2609  00305C  19B7               	xorwf	f_open@res& (0+255),w,b
  2610  00305E  A4D8               	btfss	status,2,c
  2611  003060  D008               	goto	l5849
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;ff.c: 2499:      res = dir_register(&dj);
  2615  003062  0EBA               	movlw	low f_open@dj
  2616  003064  6F8A               	movwf	dir_register@dp& (0+255),b
  2617  003066  0E00               	movlw	high f_open@dj
  2618  003068  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2619  00306A  EC3E  F025         	call	_dir_register	;wreg free
  2620  00306E  0100               	movlb	0	; () banked
  2621  003070  6FB7               	movwf	f_open@res& (0+255),b
  2622  003072                     l5849:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;ff.c: 2501:     mode |= 0x08;
  2626  003072  879E               	bsf	f_open@mode& (0+255),3,b
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;ff.c: 2502:     dir = dj.dir;
  2630  003074  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2631  003078  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2632                           
  2633                           ;ff.c: 2503:    }
  2634  00307C  D012               	goto	l647
  2635  00307E                     l5853:
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2639  00307E  EE20 F00B          	lfsr	2,11
  2640  003082  51B8               	movf	f_open@dir& (0+255),w,b
  2641  003084  26D9               	addwf	fsr2l,f,c
  2642  003086  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2643  003088  22DA               	addwfc	fsr2h,f,c
  2644  00308A  50DF               	movf	indf2,w,c
  2645  00308C  6F9F               	movwf	??_f_open& (0+255),b
  2646  00308E  0E11               	movlw	17
  2647  003090  179F               	andwf	??_f_open& (0+255),f,b
  2648  003092  B4D8               	btfsc	status,2,c
  2649  003094  D002               	goto	l648
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;ff.c: 2506:      res = FR_DENIED;
  2653  003096  0E07               	movlw	7
  2654  003098  D003               	goto	L2
  2655  00309A                     l648:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;ff.c: 2508:      if (mode & 0x04)
  2659  00309A  A59E               	btfss	f_open@mode& (0+255),2,b
  2660  00309C  D002               	goto	l647
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;ff.c: 2509:       res = FR_EXIST;
  2664  00309E  0E08               	movlw	8
  2665  0030A0                     L2:
  2666  0030A0  6FB7               	movwf	f_open@res& (0+255),b
  2667  0030A2                     l647:
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2671  0030A2  51B7               	movf	f_open@res& (0+255),w,b
  2672  0030A4  B4D8               	btfsc	status,2,c
  2673                           
  2674                           ; BSR set to: 0
  2675  0030A6  A79E               	btfss	f_open@mode& (0+255),3,b
  2676  0030A8  D0C1               	goto	l654
  2677                           
  2678                           ; BSR set to: 0
  2679                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2680                           
  2681                           ; BSR set to: 0
  2682  0030AA  EE20 F00E          	lfsr	2,14
  2683  0030AE  51B8               	movf	f_open@dir& (0+255),w,b
  2684  0030B0  26D9               	addwf	fsr2l,f,c
  2685  0030B2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2686  0030B4  22DA               	addwfc	fsr2h,f,c
  2687  0030B6  0E00               	movlw	0
  2688  0030B8  6EDE               	movwf	postinc2,c
  2689  0030BA  0E00               	movlw	0
  2690  0030BC  6EDE               	movwf	postinc2,c
  2691  0030BE  0E21               	movlw	33
  2692  0030C0  6EDE               	movwf	postinc2,c
  2693  0030C2  0E46               	movlw	70
  2694  0030C4  6EDD               	movwf	postdec2,c
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2698  0030C6  EE20 F016          	lfsr	2,22
  2699  0030CA  51B8               	movf	f_open@dir& (0+255),w,b
  2700  0030CC  26D9               	addwf	fsr2l,f,c
  2701  0030CE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2702  0030D0  22DA               	addwfc	fsr2h,f,c
  2703  0030D2  0E00               	movlw	0
  2704  0030D4  6EDE               	movwf	postinc2,c
  2705  0030D6  0E00               	movlw	0
  2706  0030D8  6EDE               	movwf	postinc2,c
  2707  0030DA  0E21               	movlw	33
  2708  0030DC  6EDE               	movwf	postinc2,c
  2709  0030DE  0E46               	movlw	70
  2710  0030E0  6EDD               	movwf	postdec2,c
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;ff.c: 2516:     dir[11] = 0;
  2714  0030E2  EE20 F00B          	lfsr	2,11
  2715  0030E6  51B8               	movf	f_open@dir& (0+255),w,b
  2716  0030E8  26D9               	addwf	fsr2l,f,c
  2717  0030EA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2718  0030EC  22DA               	addwfc	fsr2h,f,c
  2719  0030EE  0E00               	movlw	0
  2720  0030F0  6EDF               	movwf	indf2,c
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2724  0030F2  EE20 F01C          	lfsr	2,28
  2725  0030F6  51B8               	movf	f_open@dir& (0+255),w,b
  2726  0030F8  26D9               	addwf	fsr2l,f,c
  2727  0030FA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2728  0030FC  22DA               	addwfc	fsr2h,f,c
  2729  0030FE  6ADE               	clrf	postinc2,c
  2730  003100  6ADE               	clrf	postinc2,c
  2731  003102  6ADE               	clrf	postinc2,c
  2732  003104  6ADD               	clrf	postdec2,c
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2736  003106  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2737  00310A  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2738  00310E  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2739  003112  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2740  003116  EC9D  F028         	call	_ld_clust	;wreg free
  2741  00311A  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2742  00311E  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2743  003122  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2744  003126  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2745                           
  2746                           ;ff.c: 2519:     st_clust(dir, 0);
  2747  00312A  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2748  00312E  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2749  003132  0E00               	movlw	0
  2750  003134  6E03               	movwf	st_clust@cl,c
  2751  003136  0E00               	movlw	0
  2752  003138  6E04               	movwf	st_clust@cl+1,c
  2753  00313A  0E00               	movlw	0
  2754  00313C  6E05               	movwf	st_clust@cl+2,c
  2755  00313E  0E00               	movlw	0
  2756  003140  6E06               	movwf	st_clust@cl+3,c
  2757  003142  EC8E  F02A         	call	_st_clust	;wreg free
  2758                           
  2759                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2760  003146  0100               	movlb	0	; () banked
  2761  003148  EE20 F004          	lfsr	2,4
  2762  00314C  51BA               	movf	f_open@dj& (0+255),w,b
  2763  00314E  26D9               	addwf	fsr2l,f,c
  2764  003150  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2765  003152  22DA               	addwfc	fsr2h,f,c
  2766  003154  0E01               	movlw	1
  2767  003156  6EDF               	movwf	indf2,c
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;ff.c: 2521:     if (cl) {
  2771  003158  51AF               	movf	f_open@cl& (0+255),w,b
  2772  00315A  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2773  00315C  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2774  00315E  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2775  003160  B4D8               	btfsc	status,2,c
  2776  003162  D064               	goto	l654
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2780  003164  EE20 F02A          	lfsr	2,42
  2781  003168  51BA               	movf	f_open@dj& (0+255),w,b
  2782  00316A  26D9               	addwf	fsr2l,f,c
  2783  00316C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2784  00316E  22DA               	addwfc	fsr2h,f,c
  2785  003170  CFDE F0B3          	movff	postinc2,f_open@dw
  2786  003174  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2787  003178  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2788  00317C  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2792  003180  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2793  003184  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2794  003188  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2795  00318C  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2796  003190  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2797  003194  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2798  003198  ECFA  F020         	call	_remove_chain	;wreg free
  2799  00319C  0100               	movlb	0	; () banked
  2800  00319E  6FB7               	movwf	f_open@res& (0+255),b
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;ff.c: 2524:      if (res == FR_OK) {
  2804  0031A0  51B7               	movf	f_open@res& (0+255),w,b
  2805  0031A2  A4D8               	btfss	status,2,c
  2806  0031A4  D043               	goto	l654
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2810  0031A6  0EFF               	movlw	255
  2811  0031A8  25AF               	addwf	f_open@cl& (0+255),w,b
  2812  0031AA  6F9F               	movwf	??_f_open& (0+255),b
  2813  0031AC  0EFF               	movlw	255
  2814  0031AE  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2815  0031B0  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2816  0031B2  0EFF               	movlw	255
  2817  0031B4  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2818  0031B6  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2819  0031B8  0EFF               	movlw	255
  2820  0031BA  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2821  0031BC  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2822  0031BE  EE20 F00A          	lfsr	2,10
  2823  0031C2  51BA               	movf	f_open@dj& (0+255),w,b
  2824  0031C4  26D9               	addwf	fsr2l,f,c
  2825  0031C6  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2826  0031C8  22DA               	addwfc	fsr2h,f,c
  2827  0031CA  C09F  FFDE         	movff	??_f_open,postinc2
  2828  0031CE  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2829  0031D2  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2830  0031D6  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2834  0031DA  C0BA  F030         	movff	f_open@dj,move_window@fs
  2835  0031DE  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2836  0031E2  C0B3  F032         	movff	f_open@dw,move_window@sector
  2837  0031E6  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2838  0031EA  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2839  0031EE  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2840  0031F2  EC7E  F027         	call	_move_window	;wreg free
  2841  0031F6  0100               	movlb	0	; () banked
  2842  0031F8  D018               	goto	L3
  2843  0031FA                     l5889:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;ff.c: 2532:    if (res == FR_OK) {
  2847  0031FA  51B7               	movf	f_open@res& (0+255),w,b
  2848  0031FC  A4D8               	btfss	status,2,c
  2849  0031FE  D016               	goto	l654
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2853  003200  EE20 F00B          	lfsr	2,11
  2854  003204  51B8               	movf	f_open@dir& (0+255),w,b
  2855  003206  26D9               	addwf	fsr2l,f,c
  2856  003208  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2857  00320A  22DA               	addwfc	fsr2h,f,c
  2858  00320C  A8DF               	btfss	indf2,4,c
  2859  00320E  D002               	goto	l656
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;ff.c: 2534:      res = FR_NO_FILE;
  2863  003210  0E04               	movlw	4
  2864  003212  D00B               	goto	L3
  2865  003214                     l656:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2869  003214  A39E               	btfss	f_open@mode& (0+255),1,b
  2870  003216  D00A               	goto	l654
  2871                           
  2872                           ; BSR set to: 0
  2873  003218  EE20 F00B          	lfsr	2,11
  2874  00321C  51B8               	movf	f_open@dir& (0+255),w,b
  2875  00321E  26D9               	addwf	fsr2l,f,c
  2876  003220  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2877  003222  22DA               	addwfc	fsr2h,f,c
  2878  003224  A0DF               	btfss	indf2,0,c
  2879  003226  D002               	goto	l654
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;ff.c: 2537:       res = FR_DENIED;
  2883  003228  0E07               	movlw	7
  2884  00322A                     L3:
  2885  00322A  6FB7               	movwf	f_open@res& (0+255),b
  2886  00322C                     l654:
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;ff.c: 2541:   if (res == FR_OK) {
  2890  00322C  51B7               	movf	f_open@res& (0+255),w,b
  2891  00322E  A4D8               	btfss	status,2,c
  2892  003230  D020               	goto	l5907
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;ff.c: 2542:    if (mode & 0x08)
  2896  003232  B79E               	btfsc	f_open@mode& (0+255),3,b
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;ff.c: 2543:     mode |= 0x20;
  2900  003234  8B9E               	bsf	f_open@mode& (0+255),5,b
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2904  003236  EE20 F02A          	lfsr	2,42
  2905  00323A  51BA               	movf	f_open@dj& (0+255),w,b
  2906  00323C  26D9               	addwf	fsr2l,f,c
  2907  00323E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2908  003240  22DA               	addwfc	fsr2h,f,c
  2909  003242  EE10 F01A          	lfsr	1,26
  2910  003246  519A               	movf	f_open@fp& (0+255),w,b
  2911  003248  26E1               	addwf	fsr1l,f,c
  2912  00324A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2913  00324C  22E2               	addwfc	fsr1h,f,c
  2914  00324E  CFDE FFE6          	movff	postinc2,postinc1
  2915  003252  CFDE FFE6          	movff	postinc2,postinc1
  2916  003256  CFDE FFE6          	movff	postinc2,postinc1
  2917  00325A  CFDE FFE6          	movff	postinc2,postinc1
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2921  00325E  EE20 F01E          	lfsr	2,30
  2922  003262  519A               	movf	f_open@fp& (0+255),w,b
  2923  003264  26D9               	addwf	fsr2l,f,c
  2924  003266  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2925  003268  22DA               	addwfc	fsr2h,f,c
  2926  00326A  C0B8  FFDE         	movff	f_open@dir,postinc2
  2927  00326E  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2928  003272                     l5907:
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;ff.c: 2565:   if (res == FR_OK) {
  2932  003272  51B7               	movf	f_open@res& (0+255),w,b
  2933  003274  A4D8               	btfss	status,2,c
  2934  003276  D06D               	goto	l5923
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;ff.c: 2566:    fp->flag = mode;
  2938  003278  EE20 F004          	lfsr	2,4
  2939  00327C  519A               	movf	f_open@fp& (0+255),w,b
  2940  00327E  26D9               	addwf	fsr2l,f,c
  2941  003280  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2942  003282  22DA               	addwfc	fsr2h,f,c
  2943  003284  C09E  FFDF         	movff	f_open@mode,indf2
  2944                           
  2945                           ;ff.c: 2567:    fp->err = 0;
  2946  003288  EE20 F005          	lfsr	2,5
  2947  00328C  519A               	movf	f_open@fp& (0+255),w,b
  2948  00328E  26D9               	addwf	fsr2l,f,c
  2949  003290  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2950  003292  22DA               	addwfc	fsr2h,f,c
  2951  003294  0E00               	movlw	0
  2952  003296  6EDF               	movwf	indf2,c
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2956  003298  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2957  00329C  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2958  0032A0  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2959  0032A4  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2960  0032A8  EC9D  F028         	call	_ld_clust	;wreg free
  2961  0032AC  0100               	movlb	0	; () banked
  2962  0032AE  EE20 F00E          	lfsr	2,14
  2963  0032B2  519A               	movf	f_open@fp& (0+255),w,b
  2964  0032B4  26D9               	addwf	fsr2l,f,c
  2965  0032B6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2966  0032B8  22DA               	addwfc	fsr2h,f,c
  2967  0032BA  C001  FFDE         	movff	?_ld_clust,postinc2
  2968  0032BE  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2969  0032C2  C003  FFDE         	movff	?_ld_clust+2,postinc2
  2970  0032C6  C004  FFDE         	movff	?_ld_clust+3,postinc2
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  2974  0032CA  EE20 F01C          	lfsr	2,28
  2975  0032CE  51B8               	movf	f_open@dir& (0+255),w,b
  2976  0032D0  26D9               	addwf	fsr2l,f,c
  2977  0032D2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2978  0032D4  22DA               	addwfc	fsr2h,f,c
  2979  0032D6  EE10 F00A          	lfsr	1,10
  2980  0032DA  519A               	movf	f_open@fp& (0+255),w,b
  2981  0032DC  26E1               	addwf	fsr1l,f,c
  2982  0032DE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2983  0032E0  22E2               	addwfc	fsr1h,f,c
  2984  0032E2  CFDE FFE6          	movff	postinc2,postinc1
  2985  0032E6  CFDE FFE6          	movff	postinc2,postinc1
  2986  0032EA  CFDE FFE6          	movff	postinc2,postinc1
  2987  0032EE  CFDE FFE6          	movff	postinc2,postinc1
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;ff.c: 2570:    fp->fptr = 0;
  2991  0032F2  EE20 F006          	lfsr	2,6
  2992  0032F6  519A               	movf	f_open@fp& (0+255),w,b
  2993  0032F8  26D9               	addwf	fsr2l,f,c
  2994  0032FA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2995  0032FC  22DA               	addwfc	fsr2h,f,c
  2996  0032FE  6ADE               	clrf	postinc2,c
  2997  003300  6ADE               	clrf	postinc2,c
  2998  003302  6ADE               	clrf	postinc2,c
  2999  003304  6ADD               	clrf	postdec2,c
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;ff.c: 2571:    fp->dsect = 0;
  3003  003306  EE20 F016          	lfsr	2,22
  3004  00330A  519A               	movf	f_open@fp& (0+255),w,b
  3005  00330C  26D9               	addwf	fsr2l,f,c
  3006  00330E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3007  003310  22DA               	addwfc	fsr2h,f,c
  3008  003312  6ADE               	clrf	postinc2,c
  3009  003314  6ADE               	clrf	postinc2,c
  3010  003316  6ADE               	clrf	postinc2,c
  3011  003318  6ADD               	clrf	postdec2,c
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;ff.c: 2575:    fp->fs = dj.fs;
  3015  00331A  C09A  FFD9         	movff	f_open@fp,fsr2l
  3016  00331E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3017  003322  C0BA  FFDE         	movff	f_open@dj,postinc2
  3018  003326  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;ff.c: 2576:    fp->id = fp->fs->id;
  3022  00332A  C09A  FFD9         	movff	f_open@fp,fsr2l
  3023  00332E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3024  003332  EE10 F006          	lfsr	1,6
  3025  003336  50DE               	movf	postinc2,w,c
  3026  003338  26E1               	addwf	fsr1l,f,c
  3027  00333A  50DD               	movf	postdec2,w,c
  3028  00333C  22E2               	addwfc	fsr1h,f,c
  3029  00333E  EE20 F002          	lfsr	2,2
  3030  003342  519A               	movf	f_open@fp& (0+255),w,b
  3031  003344  26D9               	addwf	fsr2l,f,c
  3032  003346  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3033  003348  22DA               	addwfc	fsr2h,f,c
  3034  00334A  CFE6 FFDE          	movff	postinc1,postinc2
  3035  00334E  CFE5 FFDD          	movff	postdec1,postdec2
  3036  003352                     l5923:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;ff.c: 2580:  return res;
  3040  003352  51B7               	movf	f_open@res& (0+255),w,b
  3041                           
  3042                           ; BSR set to: 0
  3043  003354  0012               	return		;funcret
  3044  003356                     __end_of_f_open:
  3045                           	opt callstack 0
  3046                           
  3047 ;; *************** function _remove_chain *****************
  3048 ;; Defined at:
  3049 ;;		line 937 in file "ff.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  fs              2   85[COMRAM] PTR struct .
  3052 ;;		 -> NULL(0), FatFs(558), 
  3053 ;;  clst            4   87[COMRAM] unsigned long 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  nxt             4    1[BANK0 ] unsigned long 
  3056 ;;  res             1    0[BANK0 ] enum E93
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      enum E93
  3059 ;; Registers used:
  3060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3066 ;;      Params:         6       0       0       0       0       0       0       0       0
  3067 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3068 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3069 ;;      Totals:        10       5       0       0       0       0       0       0       0
  3070 ;;Total ram usage:       15 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    9
  3073 ;; This function calls:
  3074 ;;		_get_fat
  3075 ;;		_put_fat
  3076 ;; This function is called by:
  3077 ;;		_f_open
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text4
  3082  0041F4                     __ptext4:
  3083                           	opt callstack 0
  3084  0041F4                     _remove_chain:
  3085                           	opt callstack 19
  3086                           
  3087                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;incstack = 0
  3091  0041F4  505B               	movf	remove_chain@clst+3,w,c
  3092  0041F6  105A               	iorwf	remove_chain@clst+2,w,c
  3093  0041F8  1059               	iorwf	remove_chain@clst+1,w,c
  3094  0041FA  E104               	bnz	u7040
  3095  0041FC  0E02               	movlw	2
  3096  0041FE  5C58               	subwf	remove_chain@clst,w,c
  3097  004200  A0D8               	btfss	status,0,c
  3098  004202  D010               	goto	u7050
  3099  004204                     u7040:
  3100  004204  EE20 F012          	lfsr	2,18
  3101  004208  5056               	movf	remove_chain@fs,w,c
  3102  00420A  26D9               	addwf	fsr2l,f,c
  3103  00420C  5057               	movf	remove_chain@fs+1,w,c
  3104  00420E  22DA               	addwfc	fsr2h,f,c
  3105  004210  50DE               	movf	postinc2,w,c
  3106  004212  5C58               	subwf	remove_chain@clst,w,c
  3107  004214  50DE               	movf	postinc2,w,c
  3108  004216  5859               	subwfb	remove_chain@clst+1,w,c
  3109  004218  50DE               	movf	postinc2,w,c
  3110  00421A  585A               	subwfb	remove_chain@clst+2,w,c
  3111  00421C  50DE               	movf	postinc2,w,c
  3112  00421E  585B               	subwfb	remove_chain@clst+3,w,c
  3113  004220  A0D8               	btfss	status,0,c
  3114  004222  D003               	goto	l5325
  3115  004224                     u7050:
  3116                           
  3117                           ;ff.c: 949:   res = FR_INT_ERR;
  3118  004224  0E02               	movlw	2
  3119  004226  0100               	movlb	0	; () banked
  3120  004228  D031               	goto	L4
  3121  00422A                     l5325:
  3122                           
  3123                           ;ff.c: 952:   res = FR_OK;
  3124  00422A  0E00               	movlw	0
  3125  00422C  0100               	movlb	0	; () banked
  3126  00422E  6F60               	movwf	remove_chain@res& (0+255),b
  3127                           
  3128                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3129  004230  D074               	goto	l368
  3130  004232                     l5327:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3134  004232  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3135  004236  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3136  00423A  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3137  00423E  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3138  004242  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3139  004246  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3140  00424A  EC0F  F016         	call	_get_fat	;wreg free
  3141  00424E  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3142  004252  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3143  004256  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3144  00425A  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3145                           
  3146                           ;ff.c: 955:    if (nxt == 0) break;
  3147  00425E  0100               	movlb	0	; () banked
  3148  004260  5161               	movf	remove_chain@nxt& (0+255),w,b
  3149  004262  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3150  004264  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3151  004266  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3152  004268  B4D8               	btfsc	status,2,c
  3153  00426A  D067               	goto	u7110
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3157  00426C  0561               	decf	remove_chain@nxt& (0+255),w,b
  3158  00426E  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3159  004270  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3160  004272  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3161  004274  B4D8               	btfsc	status,2,c
  3162  004276  D7D6               	goto	u7050
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3166  004278  2961               	incf	remove_chain@nxt& (0+255),w,b
  3167  00427A  E10A               	bnz	l5341
  3168  00427C  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3169  00427E  E108               	bnz	l5341
  3170  004280  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3171  004282  E106               	bnz	l5341
  3172  004284  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3173  004286  A4D8               	btfss	status,2,c
  3174  004288  D003               	goto	l5341
  3175                           
  3176                           ; BSR set to: 0
  3177  00428A  0E01               	movlw	1
  3178  00428C                     L4:
  3179  00428C  6F60               	movwf	remove_chain@res& (0+255),b
  3180  00428E  D055               	goto	u7110
  3181  004290                     l5341:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3185  004290  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3186  004294  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3187  004298  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3188  00429C  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3189  0042A0  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3190  0042A4  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3191  0042A8  0E00               	movlw	0
  3192  0042AA  6E41               	movwf	put_fat@val,c
  3193  0042AC  0E00               	movlw	0
  3194  0042AE  6E42               	movwf	put_fat@val+1,c
  3195  0042B0  0E00               	movlw	0
  3196  0042B2  6E43               	movwf	put_fat@val+2,c
  3197  0042B4  0E00               	movlw	0
  3198  0042B6  6E44               	movwf	put_fat@val+3,c
  3199  0042B8  ECF7  F011         	call	_put_fat	;wreg free
  3200  0042BC  0100               	movlb	0	; () banked
  3201  0042BE  6F60               	movwf	remove_chain@res& (0+255),b
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;ff.c: 959:    if (res != FR_OK) break;
  3205  0042C0  5160               	movf	remove_chain@res& (0+255),w,b
  3206  0042C2  A4D8               	btfss	status,2,c
  3207  0042C4  D03A               	goto	u7110
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3211  0042C6  EE20 F00E          	lfsr	2,14
  3212  0042CA  5056               	movf	remove_chain@fs,w,c
  3213  0042CC  26D9               	addwf	fsr2l,f,c
  3214  0042CE  5057               	movf	remove_chain@fs+1,w,c
  3215  0042D0  22DA               	addwfc	fsr2h,f,c
  3216  0042D2  28DE               	incf	postinc2,w,c
  3217  0042D4  E107               	bnz	u7100
  3218  0042D6  28DE               	incf	postinc2,w,c
  3219  0042D8  E105               	bnz	u7100
  3220  0042DA  28DE               	incf	postinc2,w,c
  3221  0042DC  E103               	bnz	u7100
  3222  0042DE  28DE               	incf	postinc2,w,c
  3223  0042E0  B4D8               	btfsc	status,2,c
  3224  0042E2  D013               	goto	l5351
  3225  0042E4                     u7100:
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;ff.c: 961:     fs->free_clust++;
  3229  0042E4  EE20 F00E          	lfsr	2,14
  3230  0042E8  5056               	movf	remove_chain@fs,w,c
  3231  0042EA  26D9               	addwf	fsr2l,f,c
  3232  0042EC  5057               	movf	remove_chain@fs+1,w,c
  3233  0042EE  22DA               	addwfc	fsr2h,f,c
  3234  0042F0  2ADE               	incf	postinc2,f,c
  3235  0042F2  0E00               	movlw	0
  3236  0042F4  22DE               	addwfc	postinc2,f,c
  3237  0042F6  22DE               	addwfc	postinc2,f,c
  3238  0042F8  22DE               	addwfc	postinc2,f,c
  3239                           
  3240                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3241  0042FA  EE20 F005          	lfsr	2,5
  3242  0042FE  5056               	movf	remove_chain@fs,w,c
  3243  004300  26D9               	addwf	fsr2l,f,c
  3244  004302  5057               	movf	remove_chain@fs+1,w,c
  3245  004304  22DA               	addwfc	fsr2h,f,c
  3246  004306  0E00               	movlw	0
  3247  004308  80DB               	bsf	plusw2,0,c
  3248  00430A                     l5351:
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;ff.c: 974:    clst = nxt;
  3252  00430A  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3253  00430E  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3254  004312  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3255  004316  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3256  00431A                     l368:
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3260  00431A  EE20 F012          	lfsr	2,18
  3261  00431E  5056               	movf	remove_chain@fs,w,c
  3262  004320  26D9               	addwf	fsr2l,f,c
  3263  004322  5057               	movf	remove_chain@fs+1,w,c
  3264  004324  22DA               	addwfc	fsr2h,f,c
  3265  004326  50DE               	movf	postinc2,w,c
  3266  004328  5C58               	subwf	remove_chain@clst,w,c
  3267  00432A  50DE               	movf	postinc2,w,c
  3268  00432C  5859               	subwfb	remove_chain@clst+1,w,c
  3269  00432E  50DE               	movf	postinc2,w,c
  3270  004330  585A               	subwfb	remove_chain@clst+2,w,c
  3271  004332  50DE               	movf	postinc2,w,c
  3272  004334  585B               	subwfb	remove_chain@clst+3,w,c
  3273  004336  A0D8               	btfss	status,0,c
  3274  004338  D77C               	goto	l5327
  3275  00433A                     u7110:
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;ff.c: 978:  return res;
  3279  00433A  5160               	movf	remove_chain@res& (0+255),w,b
  3280                           
  3281                           ; BSR set to: 0
  3282  00433C  0012               	return		;funcret
  3283  00433E                     __end_of_remove_chain:
  3284                           	opt callstack 0
  3285                           
  3286 ;; *************** function _follow_path *****************
  3287 ;; Defined at:
  3288 ;;		line 2052 in file "ff.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  dp              2   38[BANK0 ] PTR struct .
  3291 ;;		 -> f_open@dj(22), 
  3292 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3293 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3296 ;;		 -> NULL(0), FatFs(558), 
  3297 ;;  res             1   45[BANK0 ] enum E93
  3298 ;;  ns              1   44[BANK0 ] unsigned char 
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      enum E93
  3301 ;; Registers used:
  3302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3308 ;;      Params:         0       4       0       0       0       0       0       0       0
  3309 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3310 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3311 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3312 ;;Total ram usage:        8 bytes
  3313 ;; Hardware stack levels used:    1
  3314 ;; Hardware stack levels required when called:   12
  3315 ;; This function calls:
  3316 ;;		_create_name
  3317 ;;		_dir_find
  3318 ;;		_dir_sdi
  3319 ;;		_ld_clust
  3320 ;; This function is called by:
  3321 ;;		_f_open
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           	psect	text5
  3326  00433E                     __ptext5:
  3327                           	opt callstack 0
  3328  00433E                     _follow_path:
  3329                           	opt callstack 16
  3330                           
  3331                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;incstack = 0
  3335  00433E  C088  FFF6         	movff	follow_path@path,tblptrl
  3336  004342  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3337  004346                     	if	0	;tblptru may be non-zero
  3338  004346                     	endif
  3339  004346                     	if	0	;tblptru may be non-zero
  3340  004346                     	endif
  3341  004346  0008               	tblrd		*
  3342  004348  50F5               	movf	tablat,w,c
  3343  00434A  0A2F               	xorlw	47
  3344  00434C  B4D8               	btfsc	status,2,c
  3345  00434E  D009               	goto	u7150
  3346  004350  C088  FFF6         	movff	follow_path@path,tblptrl
  3347  004354  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3348  004358                     	if	0	;tblptru may be non-zero
  3349  004358                     	endif
  3350  004358                     	if	0	;tblptru may be non-zero
  3351  004358                     	endif
  3352  004358  0008               	tblrd		*
  3353  00435A  50F5               	movf	tablat,w,c
  3354  00435C  0A5C               	xorlw	92
  3355  00435E  A4D8               	btfss	status,2,c
  3356  004360  D003               	goto	l5381
  3357  004362                     u7150:
  3358                           
  3359                           ;ff.c: 2069:   path++;
  3360  004362  0100               	movlb	0	; () banked
  3361  004364  4B88               	infsnz	follow_path@path& (0+255),f,b
  3362  004366  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3363  004368                     l5381:
  3364                           
  3365                           ;ff.c: 2070:  dp->sclust = 0;
  3366  004368  0100               	movlb	0	; () banked
  3367  00436A  EE20 F006          	lfsr	2,6
  3368  00436E  5186               	movf	follow_path@dp& (0+255),w,b
  3369  004370  26D9               	addwf	fsr2l,f,c
  3370  004372  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3371  004374  22DA               	addwfc	fsr2h,f,c
  3372  004376  6ADE               	clrf	postinc2,c
  3373  004378  6ADE               	clrf	postinc2,c
  3374  00437A  6ADE               	clrf	postinc2,c
  3375  00437C  6ADD               	clrf	postdec2,c
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3379  00437E  C088  FFF6         	movff	follow_path@path,tblptrl
  3380  004382  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3381  004386                     	if	0	;tblptru may be non-zero
  3382  004386                     	endif
  3383  004386                     	if	0	;tblptru may be non-zero
  3384  004386                     	endif
  3385  004386  0E20               	movlw	32
  3386  004388  0008               	tblrd		*
  3387  00438A  60F5               	cpfslt	tablat,c
  3388  00438C  D017               	goto	l5389
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3392  00438E  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3393  004392  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3394  004396  0E00               	movlw	0
  3395  004398  6E59               	movwf	dir_sdi@idx+1,c
  3396  00439A  0E00               	movlw	0
  3397  00439C  6E58               	movwf	dir_sdi@idx,c
  3398  00439E  EC28  F01B         	call	_dir_sdi	;wreg free
  3399  0043A2  0100               	movlb	0	; () banked
  3400  0043A4  6F8D               	movwf	follow_path@res& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;ff.c: 2075:   dp->dir = 0;
  3404  0043A6  EE20 F012          	lfsr	2,18
  3405  0043AA  5186               	movf	follow_path@dp& (0+255),w,b
  3406  0043AC  26D9               	addwf	fsr2l,f,c
  3407  0043AE  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3408  0043B0  22DA               	addwfc	fsr2h,f,c
  3409  0043B2  0E00               	movlw	0
  3410  0043B4  6EDE               	movwf	postinc2,c
  3411  0043B6  0E00               	movlw	0
  3412  0043B8  6EDD               	movwf	postdec2,c
  3413                           
  3414                           ;ff.c: 2076:  } else {
  3415  0043BA  D062               	goto	l5425
  3416  0043BC                     l5389:
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;ff.c: 2078:    res = create_name(dp, &path);
  3420  0043BC  C086  F009         	movff	follow_path@dp,create_name@dp
  3421  0043C0  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3422  0043C4  0E88               	movlw	low follow_path@path
  3423  0043C6  6E0B               	movwf	create_name@path,c
  3424  0043C8  0E00               	movlw	high follow_path@path
  3425  0043CA  6E0C               	movwf	create_name@path+1,c
  3426  0043CC  EC89  F01C         	call	_create_name	;wreg free
  3427  0043D0  0100               	movlb	0	; () banked
  3428  0043D2  6F8D               	movwf	follow_path@res& (0+255),b
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;ff.c: 2079:    if (res != FR_OK) break;
  3432  0043D4  518D               	movf	follow_path@res& (0+255),w,b
  3433  0043D6  A4D8               	btfss	status,2,c
  3434  0043D8  D053               	goto	l5425
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;ff.c: 2080:    res = dir_find(dp);
  3438  0043DA  C086  F080         	movff	follow_path@dp,dir_find@dp
  3439  0043DE  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3440  0043E2  ECE3  F023         	call	_dir_find	;wreg free
  3441  0043E6  0100               	movlb	0	; () banked
  3442  0043E8  6F8D               	movwf	follow_path@res& (0+255),b
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;ff.c: 2081:    ns = dp->fn[11];
  3446  0043EA  EE20 F014          	lfsr	2,20
  3447  0043EE  5186               	movf	follow_path@dp& (0+255),w,b
  3448  0043F0  26D9               	addwf	fsr2l,f,c
  3449  0043F2  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3450  0043F4  22DA               	addwfc	fsr2h,f,c
  3451  0043F6  EE10 F00B          	lfsr	1,11
  3452  0043FA  50DE               	movf	postinc2,w,c
  3453  0043FC  26E1               	addwf	fsr1l,f,c
  3454  0043FE  50DD               	movf	postdec2,w,c
  3455  004400  22E2               	addwfc	fsr1h,f,c
  3456  004402  50E7               	movf	indf1,w,c
  3457  004404  6F8C               	movwf	follow_path@ns& (0+255),b
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;ff.c: 2082:    if (res != FR_OK) {
  3461  004406  518D               	movf	follow_path@res& (0+255),w,b
  3462  004408  B4D8               	btfsc	status,2,c
  3463  00440A  D008               	goto	l535
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3467  00440C  0E04               	movlw	4
  3468  00440E  198D               	xorwf	follow_path@res& (0+255),w,b
  3469  004410  B4D8               	btfsc	status,2,c
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3473  004412  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3474  004414  D035               	goto	l5425
  3475  004416                     u7200:
  3476                           
  3477                           ; BSR set to: 0
  3478  004416  0E05               	movlw	5
  3479  004418  6F8D               	movwf	follow_path@res& (0+255),b
  3480  00441A  D032               	goto	l5425
  3481  00441C                     l535:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;ff.c: 2094:    if (ns & 0x04) break;
  3485  00441C  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3486  00441E  D030               	goto	l5425
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;ff.c: 2095:    dir = dp->dir;
  3490  004420  EE20 F012          	lfsr	2,18
  3491  004424  5186               	movf	follow_path@dp& (0+255),w,b
  3492  004426  26D9               	addwf	fsr2l,f,c
  3493  004428  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3494  00442A  22DA               	addwfc	fsr2h,f,c
  3495  00442C  CFDE F08A          	movff	postinc2,follow_path@dir
  3496  004430  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3497                           
  3498                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3499  004434  EE20 F00B          	lfsr	2,11
  3500  004438  518A               	movf	follow_path@dir& (0+255),w,b
  3501  00443A  26D9               	addwf	fsr2l,f,c
  3502  00443C  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3503  00443E  22DA               	addwfc	fsr2h,f,c
  3504  004440  A8DF               	btfss	indf2,4,c
  3505  004442  D7E9               	goto	u7200
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3509  004444  C086  FFD9         	movff	follow_path@dp,fsr2l
  3510  004448  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3511  00444C  CFDE F001          	movff	postinc2,ld_clust@fs
  3512  004450  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3513  004454  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3514  004458  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3515  00445C  EC9D  F028         	call	_ld_clust	;wreg free
  3516  004460  0100               	movlb	0	; () banked
  3517  004462  EE20 F006          	lfsr	2,6
  3518  004466  5186               	movf	follow_path@dp& (0+255),w,b
  3519  004468  26D9               	addwf	fsr2l,f,c
  3520  00446A  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3521  00446C  22DA               	addwfc	fsr2h,f,c
  3522  00446E  C001  FFDE         	movff	?_ld_clust,postinc2
  3523  004472  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3524  004476  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3525  00447A  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3526  00447E  D79E               	goto	l5389
  3527  004480                     l5425:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;ff.c: 2103:  return res;
  3531  004480  518D               	movf	follow_path@res& (0+255),w,b
  3532                           
  3533                           ; BSR set to: 0
  3534  004482  0012               	return		;funcret
  3535  004484                     __end_of_follow_path:
  3536                           	opt callstack 0
  3537                           
  3538 ;; *************** function _ld_clust *****************
  3539 ;; Defined at:
  3540 ;;		line 1235 in file "ff.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  fs              2    0[COMRAM] PTR struct .
  3543 ;;		 -> NULL(0), FatFs(558), 
  3544 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3545 ;;		 -> NULL(0), FatFs(558), 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;  cl              4   10[COMRAM] unsigned long 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  4    0[COMRAM] unsigned long 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3557 ;;      Params:         4       0       0       0       0       0       0       0       0
  3558 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3559 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3560 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3561 ;;Total ram usage:       14 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; This function calls:
  3564 ;;		Nothing
  3565 ;; This function is called by:
  3566 ;;		_follow_path
  3567 ;;		_f_open
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text6
  3572  00513A                     __ptext6:
  3573                           	opt callstack 0
  3574  00513A                     _ld_clust:
  3575                           	opt callstack 28
  3576                           
  3577                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;incstack = 0
  3581  00513A  0E1A               	movlw	26
  3582  00513C  2403               	addwf	ld_clust@dir,w,c
  3583  00513E  6ED9               	movwf	fsr2l,c
  3584  005140  0E00               	movlw	0
  3585  005142  2004               	addwfc	ld_clust@dir+1,w,c
  3586  005144  6EDA               	movwf	fsr2h,c
  3587  005146  CFDE F005          	movff	postinc2,??_ld_clust
  3588  00514A  CFDD F006          	movff	postdec2,??_ld_clust+1
  3589  00514E  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3590  005152  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3591  005156  6A0D               	clrf	ld_clust@cl+2,c
  3592  005158  6A0E               	clrf	ld_clust@cl+3,c
  3593                           
  3594                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3595  00515A  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3596  00515E  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3597  005162  0E03               	movlw	3
  3598  005164  18DE               	xorwf	postinc2,w,c
  3599  005166  A4D8               	btfss	status,2,c
  3600  005168  D01E               	goto	l5027
  3601                           
  3602                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3603  00516A  0E14               	movlw	20
  3604  00516C  2403               	addwf	ld_clust@dir,w,c
  3605  00516E  6ED9               	movwf	fsr2l,c
  3606  005170  0E00               	movlw	0
  3607  005172  2004               	addwfc	ld_clust@dir+1,w,c
  3608  005174  6EDA               	movwf	fsr2h,c
  3609  005176  CFDE F005          	movff	postinc2,??_ld_clust
  3610  00517A  CFDD F006          	movff	postdec2,??_ld_clust+1
  3611  00517E  5005               	movf	??_ld_clust,w,c
  3612  005180  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3613  005182  5006               	movf	??_ld_clust+1,w,c
  3614  005184  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3615  005186  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3616  005188  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3617  00518A  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3618  00518E  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3619  005192  6A08               	clrf	??_ld_clust+3,c
  3620  005194  6A07               	clrf	??_ld_clust+2,c
  3621  005196  5007               	movf	??_ld_clust+2,w,c
  3622  005198  120B               	iorwf	ld_clust@cl,f,c
  3623  00519A  5008               	movf	??_ld_clust+3,w,c
  3624  00519C  120C               	iorwf	ld_clust@cl+1,f,c
  3625  00519E  5009               	movf	??_ld_clust+4,w,c
  3626  0051A0  120D               	iorwf	ld_clust@cl+2,f,c
  3627  0051A2  500A               	movf	??_ld_clust+5,w,c
  3628  0051A4  120E               	iorwf	ld_clust@cl+3,f,c
  3629  0051A6                     l5027:
  3630                           
  3631                           ;ff.c: 1246:  return cl;
  3632  0051A6  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3633  0051AA  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3634  0051AE  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3635  0051B2  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3636  0051B6  0012               	return		;funcret
  3637  0051B8                     __end_of_ld_clust:
  3638                           	opt callstack 0
  3639                           
  3640 ;; *************** function _dir_find *****************
  3641 ;; Defined at:
  3642 ;;		line 1458 in file "ff.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  dp              2   32[BANK0 ] PTR struct .
  3645 ;;		 -> f_open@dj(22), 
  3646 ;; Auto vars:     Size  Location     Type
  3647 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3648 ;;		 -> NULL(0), FatFs(558), 
  3649 ;;  res             1   37[BANK0 ] enum E93
  3650 ;;  c               1   34[BANK0 ] unsigned char 
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      enum E93
  3653 ;; Registers used:
  3654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3660 ;;      Params:         0       2       0       0       0       0       0       0       0
  3661 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3663 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3664 ;;Total ram usage:        6 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:   11
  3667 ;; This function calls:
  3668 ;;		_dir_next
  3669 ;;		_dir_sdi
  3670 ;;		_mem_cmp
  3671 ;;		_move_window
  3672 ;; This function is called by:
  3673 ;;		_follow_path
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           	psect	text7
  3678  0047C6                     __ptext7:
  3679                           	opt callstack 0
  3680  0047C6                     _dir_find:
  3681                           	opt callstack 16
  3682                           
  3683                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3684                           
  3685                           ;incstack = 0
  3686  0047C6  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3687  0047CA  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3688  0047CE  0E00               	movlw	0
  3689  0047D0  6E59               	movwf	dir_sdi@idx+1,c
  3690  0047D2  0E00               	movlw	0
  3691  0047D4  6E58               	movwf	dir_sdi@idx,c
  3692  0047D6  EC28  F01B         	call	_dir_sdi	;wreg free
  3693  0047DA  0100               	movlb	0	; () banked
  3694  0047DC  6F85               	movwf	dir_find@res& (0+255),b
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3698  0047DE  5185               	movf	dir_find@res& (0+255),w,b
  3699  0047E0  B4D8               	btfsc	status,2,c
  3700  0047E2  D003               	goto	l5041
  3701  0047E4                     u6490:
  3702  0047E4  0100               	movlb	0	; () banked
  3703  0047E6  5185               	movf	dir_find@res& (0+255),w,b
  3704  0047E8  0012               	return	
  3705  0047EA                     l5041:
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3709  0047EA  C080  FFD9         	movff	dir_find@dp,fsr2l
  3710  0047EE  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3711  0047F2  CFDE F030          	movff	postinc2,move_window@fs
  3712  0047F6  CFDD F031          	movff	postdec2,move_window@fs+1
  3713  0047FA  EE20 F00E          	lfsr	2,14
  3714  0047FE  5180               	movf	dir_find@dp& (0+255),w,b
  3715  004800  26D9               	addwf	fsr2l,f,c
  3716  004802  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3717  004804  22DA               	addwfc	fsr2h,f,c
  3718  004806  CFDE F032          	movff	postinc2,move_window@sector
  3719  00480A  CFDE F033          	movff	postinc2,move_window@sector+1
  3720  00480E  CFDE F034          	movff	postinc2,move_window@sector+2
  3721  004812  CFDE F035          	movff	postinc2,move_window@sector+3
  3722  004816  EC7E  F027         	call	_move_window	;wreg free
  3723  00481A  0100               	movlb	0	; () banked
  3724  00481C  6F85               	movwf	dir_find@res& (0+255),b
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;ff.c: 1476:   if (res != FR_OK) break;
  3728  00481E  5185               	movf	dir_find@res& (0+255),w,b
  3729  004820  A4D8               	btfss	status,2,c
  3730  004822  D7E0               	goto	u6490
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;ff.c: 1477:   dir = dp->dir;
  3734  004824  EE20 F012          	lfsr	2,18
  3735  004828  5180               	movf	dir_find@dp& (0+255),w,b
  3736  00482A  26D9               	addwf	fsr2l,f,c
  3737  00482C  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3738  00482E  22DA               	addwfc	fsr2h,f,c
  3739  004830  CFDE F083          	movff	postinc2,dir_find@dir
  3740  004834  CFDD F084          	movff	postdec2,dir_find@dir+1
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;ff.c: 1478:   c = dir[0];
  3744  004838  C083  FFD9         	movff	dir_find@dir,fsr2l
  3745  00483C  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3746  004840  50DF               	movf	indf2,w,c
  3747  004842  6F82               	movwf	dir_find@c& (0+255),b
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3751  004844  5182               	movf	dir_find@c& (0+255),w,b
  3752  004846  A4D8               	btfss	status,2,c
  3753  004848  D003               	goto	l5055
  3754                           
  3755                           ; BSR set to: 0
  3756  00484A  0E04               	movlw	4
  3757  00484C  6F85               	movwf	dir_find@res& (0+255),b
  3758  00484E  D7CA               	goto	u6490
  3759  004850                     l5055:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3763  004850  EE20 F00B          	lfsr	2,11
  3764  004854  5183               	movf	dir_find@dir& (0+255),w,b
  3765  004856  26D9               	addwf	fsr2l,f,c
  3766  004858  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3767  00485A  22DA               	addwfc	fsr2h,f,c
  3768  00485C  B6DF               	btfsc	indf2,3,c
  3769  00485E  D018               	goto	l5061
  3770                           
  3771                           ; BSR set to: 0
  3772  004860  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3773  004864  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3774  004868  EE20 F014          	lfsr	2,20
  3775  00486C  5180               	movf	dir_find@dp& (0+255),w,b
  3776  00486E  26D9               	addwf	fsr2l,f,c
  3777  004870  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3778  004872  22DA               	addwfc	fsr2h,f,c
  3779  004874  CFDE F003          	movff	postinc2,mem_cmp@src
  3780  004878  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3781  00487C  0E00               	movlw	0
  3782  00487E  6E06               	movwf	mem_cmp@cnt+1,c
  3783  004880  0E0B               	movlw	11
  3784  004882  6E05               	movwf	mem_cmp@cnt,c
  3785  004884  EC50  F029         	call	_mem_cmp	;wreg free
  3786  004888  5001               	movf	?_mem_cmp,w,c
  3787  00488A  1002               	iorwf	?_mem_cmp+1,w,c
  3788  00488C  B4D8               	btfsc	status,2,c
  3789  00488E  D7AA               	goto	u6490
  3790  004890                     l5061:
  3791                           
  3792                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3793  004890  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3794  004894  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3795  004898  0E00               	movlw	0
  3796  00489A  0100               	movlb	0	; () banked
  3797  00489C  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3798  00489E  0E00               	movlw	0
  3799  0048A0  6F6F               	movwf	dir_next@stretch& (0+255),b
  3800  0048A2  EC0C  F014         	call	_dir_next	;wreg free
  3801  0048A6  0100               	movlb	0	; () banked
  3802  0048A8  6F85               	movwf	dir_find@res& (0+255),b
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;ff.c: 1506:  } while (res == FR_OK);
  3806  0048AA  5185               	movf	dir_find@res& (0+255),w,b
  3807  0048AC  A4D8               	btfss	status,2,c
  3808  0048AE  D79A               	goto	u6490
  3809  0048B0  D79C               	goto	l5041
  3810  0048B2                     __end_of_dir_find:
  3811                           	opt callstack 0
  3812                           
  3813 ;; *************** function _mem_cmp *****************
  3814 ;; Defined at:
  3815 ;;		line 533 in file "ff.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  dst             2    0[COMRAM] PTR const void 
  3818 ;;		 -> NULL(0), FatFs(558), 
  3819 ;;  src             2    2[COMRAM] PTR const void 
  3820 ;;		 -> f_open@sfn(12), 
  3821 ;;  cnt             2    4[COMRAM] unsigned short 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  r               2   12[COMRAM] int 
  3824 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3825 ;;		 -> f_open@sfn(12), 
  3826 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3827 ;;		 -> NULL(0), FatFs(558), 
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  2    0[COMRAM] int 
  3830 ;; Registers used:
  3831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3837 ;;      Params:         6       0       0       0       0       0       0       0       0
  3838 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3839 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3840 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3841 ;;Total ram usage:       14 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; This function calls:
  3844 ;;		Nothing
  3845 ;; This function is called by:
  3846 ;;		_dir_find
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text8
  3851  0052A0                     __ptext8:
  3852                           	opt callstack 0
  3853  0052A0                     _mem_cmp:
  3854                           	opt callstack 26
  3855                           
  3856                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;incstack = 0
  3860  0052A0  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3861  0052A4  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3862  0052A8  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3863  0052AC  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3864                           
  3865                           ;ff.c: 535:  int r = 0;
  3866  0052B0  0E00               	movlw	0
  3867  0052B2  6E0E               	movwf	mem_cmp@r+1,c
  3868  0052B4  0E00               	movlw	0
  3869  0052B6  6E0D               	movwf	mem_cmp@r,c
  3870  0052B8                     l4649:
  3871  0052B8  0605               	decf	mem_cmp@cnt,f,c
  3872  0052BA  A0D8               	btfss	status,0,c
  3873  0052BC  0606               	decf	mem_cmp@cnt+1,f,c
  3874  0052BE  2805               	incf	mem_cmp@cnt,w,c
  3875  0052C0  E103               	bnz	u5780
  3876  0052C2  2806               	incf	mem_cmp@cnt+1,w,c
  3877  0052C4  B4D8               	btfsc	status,2,c
  3878  0052C6  D01A               	goto	u5790
  3879  0052C8                     u5780:
  3880  0052C8  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3881  0052CC  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3882  0052D0  4A09               	infsnz	mem_cmp@d,f,c
  3883  0052D2  2A0A               	incf	mem_cmp@d+1,f,c
  3884  0052D4  50DF               	movf	indf2,w,c
  3885  0052D6  6E07               	movwf	??_mem_cmp& (0+255),c
  3886  0052D8  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3887  0052DC  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3888  0052E0  4A0B               	infsnz	mem_cmp@s,f,c
  3889  0052E2  2A0C               	incf	mem_cmp@s+1,f,c
  3890  0052E4  50DF               	movf	indf2,w,c
  3891  0052E6  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  3892  0052E8  5008               	movf	??_mem_cmp+1,w,c
  3893  0052EA  5C07               	subwf	??_mem_cmp,w,c
  3894  0052EC  6E0D               	movwf	mem_cmp@r,c
  3895  0052EE  6A0E               	clrf	mem_cmp@r+1,c
  3896  0052F0  A0D8               	btfss	status,0,c
  3897  0052F2  060E               	decf	mem_cmp@r+1,f,c
  3898  0052F4  500D               	movf	mem_cmp@r,w,c
  3899  0052F6  100E               	iorwf	mem_cmp@r+1,w,c
  3900  0052F8  B4D8               	btfsc	status,2,c
  3901  0052FA  D7DE               	goto	l4649
  3902  0052FC                     u5790:
  3903                           
  3904                           ;ff.c: 538:  return r;
  3905  0052FC  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3906  005300  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3907  005304  0012               	return		;funcret
  3908  005306                     __end_of_mem_cmp:
  3909                           	opt callstack 0
  3910                           
  3911 ;; *************** function _create_name *****************
  3912 ;; Defined at:
  3913 ;;		line 1843 in file "ff.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;  dp              2    8[COMRAM] PTR struct .
  3916 ;;		 -> f_open@dj(22), 
  3917 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3918 ;;		 -> follow_path@path(2), 
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;  i               2   28[COMRAM] unsigned short 
  3921 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  3922 ;;		 -> f_open@sfn(12), 
  3923 ;;  p               2   23[COMRAM] PTR const unsigned char 
  3924 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3925 ;;  ni              2   21[COMRAM] unsigned short 
  3926 ;;  si              2   18[COMRAM] unsigned short 
  3927 ;;  c               1   30[COMRAM] unsigned char 
  3928 ;;  d               1   25[COMRAM] unsigned char 
  3929 ;;  b               1   20[COMRAM] unsigned char 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      enum E93
  3932 ;; Registers used:
  3933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3939 ;;      Params:         4       0       0       0       0       0       0       0       0
  3940 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3941 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3942 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3943 ;;Total ram usage:       23 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    1
  3946 ;; This function calls:
  3947 ;;		_chk_chr
  3948 ;;		_mem_set
  3949 ;; This function is called by:
  3950 ;;		_follow_path
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text9
  3955  003912                     __ptext9:
  3956                           	opt callstack 0
  3957  003912                     _create_name:
  3958                           	opt callstack 26
  3959                           
  3960                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  3961                           
  3962                           ;incstack = 0
  3963  003912  C00B  FFD9         	movff	create_name@path,fsr2l
  3964  003916  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3965  00391A  CFDE F018          	movff	postinc2,create_name@p
  3966  00391E  CFDD F019          	movff	postdec2,create_name@p+1
  3967  003922  D002               	goto	l5073
  3968  003924                     l5071:
  3969  003924  4A18               	infsnz	create_name@p,f,c
  3970  003926  2A19               	incf	create_name@p+1,f,c
  3971  003928                     l5073:
  3972  003928  C018  FFF6         	movff	create_name@p,tblptrl
  3973  00392C  C019  FFF7         	movff	create_name@p+1,tblptrh
  3974  003930                     	if	0	;tblptru may be non-zero
  3975  003930                     	endif
  3976  003930                     	if	0	;tblptru may be non-zero
  3977  003930                     	endif
  3978  003930  0008               	tblrd		*
  3979  003932  50F5               	movf	tablat,w,c
  3980  003934  0A2F               	xorlw	47
  3981  003936  B4D8               	btfsc	status,2,c
  3982  003938  D7F5               	goto	l5071
  3983  00393A  C018  FFF6         	movff	create_name@p,tblptrl
  3984  00393E  C019  FFF7         	movff	create_name@p+1,tblptrh
  3985  003942                     	if	0	;tblptru may be non-zero
  3986  003942                     	endif
  3987  003942                     	if	0	;tblptru may be non-zero
  3988  003942                     	endif
  3989  003942  0008               	tblrd		*
  3990  003944  50F5               	movf	tablat,w,c
  3991  003946  0A5C               	xorlw	92
  3992  003948  B4D8               	btfsc	status,2,c
  3993  00394A  D7EC               	goto	l5071
  3994                           
  3995                           ;ff.c: 1975:  sfn = dp->fn;
  3996  00394C  EE20 F014          	lfsr	2,20
  3997  003950  5009               	movf	create_name@dp,w,c
  3998  003952  26D9               	addwf	fsr2l,f,c
  3999  003954  500A               	movf	create_name@dp+1,w,c
  4000  003956  22DA               	addwfc	fsr2h,f,c
  4001  003958  CFDE F01B          	movff	postinc2,create_name@sfn
  4002  00395C  CFDD F01C          	movff	postdec2,create_name@sfn+1
  4003                           
  4004                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  4005  003960  C01B  F001         	movff	create_name@sfn,mem_set@dst
  4006  003964  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  4007  003968  0E00               	movlw	0
  4008  00396A  6E04               	movwf	mem_set@val+1,c
  4009  00396C  0E20               	movlw	32
  4010  00396E  6E03               	movwf	mem_set@val,c
  4011  003970  0E00               	movlw	0
  4012  003972  6E06               	movwf	mem_set@cnt+1,c
  4013  003974  0E0B               	movlw	11
  4014  003976  6E05               	movwf	mem_set@cnt,c
  4015  003978  EC78  F02A         	call	_mem_set	;wreg free
  4016                           
  4017                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  4018  00397C  0E00               	movlw	0
  4019  00397E  6E15               	movwf	create_name@b,c
  4020  003980  C015  F01D         	movff	create_name@b,create_name@i
  4021  003984  6A1E               	clrf	create_name@i+1,c
  4022  003986  C01D  F013         	movff	create_name@i,create_name@si
  4023  00398A  C01E  F014         	movff	create_name@i+1,create_name@si+1
  4024  00398E  0E00               	movlw	0
  4025  003990  6E17               	movwf	create_name@ni+1,c
  4026  003992  0E08               	movlw	8
  4027  003994  6E16               	movwf	create_name@ni,c
  4028  003996                     l5085:
  4029                           
  4030                           ;ff.c: 1992:   c = (BYTE)p[si++];
  4031  003996  5013               	movf	create_name@si,w,c
  4032  003998  2418               	addwf	create_name@p,w,c
  4033  00399A  6E0D               	movwf	??_create_name& (0+255),c
  4034  00399C  5014               	movf	create_name@si+1,w,c
  4035  00399E  2019               	addwfc	create_name@p+1,w,c
  4036  0039A0  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4037  0039A2  C00D  FFF6         	movff	??_create_name,tblptrl
  4038  0039A6  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4039  0039AA                     	if	0	;tblptru may be non-zero
  4040  0039AA                     	endif
  4041  0039AA                     	if	0	;tblptru may be non-zero
  4042  0039AA                     	endif
  4043  0039AA  0008               	tblrd		*
  4044  0039AC  CFF5 F01F          	movff	tablat,create_name@c
  4045  0039B0  4A13               	infsnz	create_name@si,f,c
  4046  0039B2  2A14               	incf	create_name@si+1,f,c
  4047                           
  4048                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4049  0039B4  0E20               	movlw	32
  4050  0039B6  641F               	cpfsgt	create_name@c,c
  4051  0039B8  D0A4               	goto	l5169
  4052  0039BA  0E2F               	movlw	47
  4053  0039BC  181F               	xorwf	create_name@c,w,c
  4054  0039BE  B4D8               	btfsc	status,2,c
  4055  0039C0  D0A0               	goto	l5169
  4056  0039C2  0E5C               	movlw	92
  4057  0039C4  181F               	xorwf	create_name@c,w,c
  4058  0039C6  B4D8               	btfsc	status,2,c
  4059  0039C8  D09C               	goto	l5169
  4060                           
  4061                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4062  0039CA  0E2E               	movlw	46
  4063  0039CC  181F               	xorwf	create_name@c,w,c
  4064  0039CE  B4D8               	btfsc	status,2,c
  4065  0039D0  D006               	goto	u6610
  4066  0039D2  5016               	movf	create_name@ni,w,c
  4067  0039D4  5C1D               	subwf	create_name@i,w,c
  4068  0039D6  5017               	movf	create_name@ni+1,w,c
  4069  0039D8  581E               	subwfb	create_name@i+1,w,c
  4070  0039DA  A0D8               	btfss	status,0,c
  4071  0039DC  D018               	goto	l5111
  4072  0039DE                     u6610:
  4073                           
  4074                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4075  0039DE  0E08               	movlw	8
  4076  0039E0  1816               	xorwf	create_name@ni,w,c
  4077  0039E2  1017               	iorwf	create_name@ni+1,w,c
  4078  0039E4  A4D8               	btfss	status,2,c
  4079  0039E6  D004               	goto	u6630
  4080  0039E8  0E2E               	movlw	46
  4081  0039EA  181F               	xorwf	create_name@c,w,c
  4082  0039EC  B4D8               	btfsc	status,2,c
  4083  0039EE  D002               	goto	l5107
  4084  0039F0                     u6630:
  4085  0039F0  0E06               	movlw	6
  4086  0039F2  0012               	return	
  4087  0039F4                     l5107:
  4088                           
  4089                           ;ff.c: 1996:    i = 8; ni = 11;
  4090  0039F4  0E00               	movlw	0
  4091  0039F6  6E1E               	movwf	create_name@i+1,c
  4092  0039F8  0E08               	movlw	8
  4093  0039FA  6E1D               	movwf	create_name@i,c
  4094  0039FC  0E00               	movlw	0
  4095  0039FE  6E17               	movwf	create_name@ni+1,c
  4096  003A00  0E0B               	movlw	11
  4097  003A02  6E16               	movwf	create_name@ni,c
  4098                           
  4099                           ;ff.c: 1997:    b <<= 2; continue;
  4100  003A04  90D8               	bcf	status,0,c
  4101  003A06  3615               	rlcf	create_name@b,f,c
  4102  003A08  90D8               	bcf	status,0,c
  4103  003A0A  3615               	rlcf	create_name@b,f,c
  4104  003A0C  D7C4               	goto	l5085
  4105  003A0E                     l5111:
  4106                           
  4107                           ;ff.c: 1999:   if (c >= 0x80) {
  4108  003A0E  0E7F               	movlw	127
  4109  003A10  641F               	cpfsgt	create_name@c,c
  4110  003A12  D002               	goto	l498
  4111                           
  4112                           ;ff.c: 2000:    b |= 3;
  4113  003A14  0E03               	movlw	3
  4114  003A16  1215               	iorwf	create_name@b,f,c
  4115  003A18                     l498:
  4116                           
  4117                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4118  003A18  0E80               	movlw	128
  4119  003A1A  641F               	cpfsgt	create_name@c,c
  4120  003A1C  D003               	goto	u6660
  4121  003A1E  0E9F               	movlw	159
  4122  003A20  641F               	cpfsgt	create_name@c,c
  4123  003A22  D006               	goto	u6680
  4124  003A24                     u6660:
  4125  003A24  0EDF               	movlw	223
  4126  003A26  641F               	cpfsgt	create_name@c,c
  4127  003A28  D043               	goto	l5145
  4128  003A2A  0EFD               	movlw	253
  4129  003A2C  601F               	cpfslt	create_name@c,c
  4130  003A2E  D040               	goto	l5145
  4131  003A30                     u6680:
  4132                           
  4133                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4134  003A30  5013               	movf	create_name@si,w,c
  4135  003A32  2418               	addwf	create_name@p,w,c
  4136  003A34  6E0D               	movwf	??_create_name& (0+255),c
  4137  003A36  5014               	movf	create_name@si+1,w,c
  4138  003A38  2019               	addwfc	create_name@p+1,w,c
  4139  003A3A  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4140  003A3C  C00D  FFF6         	movff	??_create_name,tblptrl
  4141  003A40  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4142  003A44                     	if	0	;tblptru may be non-zero
  4143  003A44                     	endif
  4144  003A44                     	if	0	;tblptru may be non-zero
  4145  003A44                     	endif
  4146  003A44  0008               	tblrd		*
  4147  003A46  CFF5 F01A          	movff	tablat,create_name@d
  4148  003A4A  4A13               	infsnz	create_name@si,f,c
  4149  003A4C  2A14               	incf	create_name@si+1,f,c
  4150                           
  4151                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4152  003A4E  0E3F               	movlw	63
  4153  003A50  641A               	cpfsgt	create_name@d,c
  4154  003A52  D003               	goto	u6700
  4155  003A54  0E7E               	movlw	126
  4156  003A56  641A               	cpfsgt	create_name@d,c
  4157  003A58  D006               	goto	u6720
  4158  003A5A                     u6700:
  4159  003A5A  0E7F               	movlw	127
  4160  003A5C  641A               	cpfsgt	create_name@d,c
  4161  003A5E  D7C8               	goto	u6630
  4162  003A60  0EFD               	movlw	253
  4163  003A62  601A               	cpfslt	create_name@d,c
  4164  003A64  D7C5               	goto	u6630
  4165  003A66                     u6720:
  4166  003A66  0EFF               	movlw	255
  4167  003A68  6E0D               	movwf	??_create_name& (0+255),c
  4168  003A6A  0EFF               	movlw	255
  4169  003A6C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4170  003A6E  C016  F00F         	movff	create_name@ni,??_create_name+2
  4171  003A72  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4172  003A76  500D               	movf	??_create_name,w,c
  4173  003A78  260F               	addwf	??_create_name+2,f,c
  4174  003A7A  500E               	movf	??_create_name+1,w,c
  4175  003A7C  2210               	addwfc	??_create_name+3,f,c
  4176  003A7E  500F               	movf	??_create_name+2,w,c
  4177  003A80  5C1D               	subwf	create_name@i,w,c
  4178  003A82  5010               	movf	??_create_name+3,w,c
  4179  003A84  581E               	subwfb	create_name@i+1,w,c
  4180  003A86  B0D8               	btfsc	status,0,c
  4181  003A88  D7B3               	goto	u6630
  4182                           
  4183                           ;ff.c: 2013:    sfn[i++] = c;
  4184  003A8A  501D               	movf	create_name@i,w,c
  4185  003A8C  241B               	addwf	create_name@sfn,w,c
  4186  003A8E  6ED9               	movwf	fsr2l,c
  4187  003A90  501E               	movf	create_name@i+1,w,c
  4188  003A92  201C               	addwfc	create_name@sfn+1,w,c
  4189  003A94  6EDA               	movwf	fsr2h,c
  4190  003A96  C01F  FFDF         	movff	create_name@c,indf2
  4191  003A9A  4A1D               	infsnz	create_name@i,f,c
  4192  003A9C  2A1E               	incf	create_name@i+1,f,c
  4193                           
  4194                           ;ff.c: 2014:    sfn[i++] = d;
  4195  003A9E  501D               	movf	create_name@i,w,c
  4196  003AA0  241B               	addwf	create_name@sfn,w,c
  4197  003AA2  6ED9               	movwf	fsr2l,c
  4198  003AA4  501E               	movf	create_name@i+1,w,c
  4199  003AA6  201C               	addwfc	create_name@sfn+1,w,c
  4200  003AA8  6EDA               	movwf	fsr2h,c
  4201  003AAA  C01A  FFDF         	movff	create_name@d,indf2
  4202  003AAE  D026               	goto	l5167
  4203  003AB0                     l5145:
  4204                           
  4205                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4206  003AB0  0E15               	movlw	low STR_5
  4207  003AB2  6E01               	movwf	chk_chr@str,c
  4208  003AB4  0E08               	movlw	high STR_5
  4209  003AB6  6E02               	movwf	chk_chr@str+1,c
  4210  003AB8  C01F  F003         	movff	create_name@c,chk_chr@chr
  4211  003ABC  6A04               	clrf	chk_chr@chr+1,c
  4212  003ABE  ECDC  F029         	call	_chk_chr	;wreg free
  4213  003AC2  5001               	movf	?_chk_chr,w,c
  4214  003AC4  1002               	iorwf	?_chk_chr+1,w,c
  4215  003AC6  A4D8               	btfss	status,2,c
  4216  003AC8  D793               	goto	u6630
  4217                           
  4218                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4219  003ACA  0E40               	movlw	64
  4220  003ACC  641F               	cpfsgt	create_name@c,c
  4221  003ACE  D005               	goto	l5157
  4222  003AD0  0E5B               	movlw	91
  4223  003AD2  601F               	cpfslt	create_name@c,c
  4224  003AD4  D002               	goto	l5157
  4225                           
  4226                           ;ff.c: 2019:     b |= 2;
  4227  003AD6  8215               	bsf	create_name@b,1,c
  4228                           
  4229                           ;ff.c: 2020:    } else {
  4230  003AD8  D009               	goto	l5165
  4231  003ADA                     l5157:
  4232                           
  4233                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4234  003ADA  0E60               	movlw	96
  4235  003ADC  641F               	cpfsgt	create_name@c,c
  4236  003ADE  D006               	goto	l5165
  4237  003AE0  0E7B               	movlw	123
  4238  003AE2  601F               	cpfslt	create_name@c,c
  4239  003AE4  D003               	goto	l5165
  4240                           
  4241                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4242  003AE6  8015               	bsf	create_name@b,0,c
  4243  003AE8  0E20               	movlw	32
  4244  003AEA  5E1F               	subwf	create_name@c,f,c
  4245  003AEC                     l5165:
  4246                           
  4247                           ;ff.c: 2025:    sfn[i++] = c;
  4248  003AEC  501D               	movf	create_name@i,w,c
  4249  003AEE  241B               	addwf	create_name@sfn,w,c
  4250  003AF0  6ED9               	movwf	fsr2l,c
  4251  003AF2  501E               	movf	create_name@i+1,w,c
  4252  003AF4  201C               	addwfc	create_name@sfn+1,w,c
  4253  003AF6  6EDA               	movwf	fsr2h,c
  4254  003AF8  C01F  FFDF         	movff	create_name@c,indf2
  4255  003AFC                     l5167:
  4256  003AFC  4A1D               	infsnz	create_name@i,f,c
  4257  003AFE  2A1E               	incf	create_name@i+1,f,c
  4258  003B00  D74A               	goto	l5085
  4259  003B02                     l5169:
  4260                           
  4261                           ;ff.c: 2028:  *path = &p[si];
  4262  003B02  5013               	movf	create_name@si,w,c
  4263  003B04  2418               	addwf	create_name@p,w,c
  4264  003B06  6E0D               	movwf	??_create_name& (0+255),c
  4265  003B08  5014               	movf	create_name@si+1,w,c
  4266  003B0A  2019               	addwfc	create_name@p+1,w,c
  4267  003B0C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4268  003B0E  C00B  FFD9         	movff	create_name@path,fsr2l
  4269  003B12  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4270  003B16  C00D  FFDE         	movff	??_create_name,postinc2
  4271  003B1A  C00E  FFDD         	movff	??_create_name+1,postdec2
  4272                           
  4273                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4274  003B1E  0E20               	movlw	32
  4275  003B20  641F               	cpfsgt	create_name@c,c
  4276  003B22  D004               	goto	l5175
  4277  003B24  0E00               	movlw	0
  4278  003B26  6E12               	movwf	_create_name$775+1,c
  4279  003B28  0E00               	movlw	0
  4280  003B2A  D003               	goto	L5
  4281  003B2C                     l5175:
  4282  003B2C  0E00               	movlw	0
  4283  003B2E  6E12               	movwf	_create_name$775+1,c
  4284  003B30  0E04               	movlw	4
  4285  003B32                     L5:
  4286  003B32  6E11               	movwf	_create_name$775,c
  4287  003B34  C011  F01F         	movff	_create_name$775,create_name@c
  4288                           
  4289                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4290  003B38  501D               	movf	create_name@i,w,c
  4291  003B3A  101E               	iorwf	create_name@i+1,w,c
  4292  003B3C  B4D8               	btfsc	status,2,c
  4293  003B3E  D758               	goto	u6630
  4294                           
  4295                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4296  003B40  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4297  003B44  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4298  003B48  0EE5               	movlw	229
  4299  003B4A  18DE               	xorwf	postinc2,w,c
  4300  003B4C  A4D8               	btfss	status,2,c
  4301  003B4E  D006               	goto	l5189
  4302  003B50  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4303  003B54  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4304  003B58  0E05               	movlw	5
  4305  003B5A  6EDF               	movwf	indf2,c
  4306  003B5C                     l5189:
  4307                           
  4308                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4309  003B5C  0E08               	movlw	8
  4310  003B5E  1816               	xorwf	create_name@ni,w,c
  4311  003B60  1017               	iorwf	create_name@ni+1,w,c
  4312  003B62  A4D8               	btfss	status,2,c
  4313  003B64  D004               	goto	l522
  4314  003B66  90D8               	bcf	status,0,c
  4315  003B68  3615               	rlcf	create_name@b,f,c
  4316  003B6A  90D8               	bcf	status,0,c
  4317  003B6C  3615               	rlcf	create_name@b,f,c
  4318  003B6E                     l522:
  4319                           
  4320                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4321  003B6E  5015               	movf	create_name@b,w,c
  4322  003B70  0B03               	andlw	3
  4323  003B72  06E8               	decf	wreg,f,c
  4324  003B74  B4D8               	btfsc	status,2,c
  4325  003B76  881F               	bsf	create_name@c,4,c
  4326                           
  4327                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4328  003B78  5015               	movf	create_name@b,w,c
  4329  003B7A  0B0C               	andlw	12
  4330  003B7C  0A04               	xorlw	4
  4331  003B7E  B4D8               	btfsc	status,2,c
  4332  003B80  861F               	bsf	create_name@c,3,c
  4333                           
  4334                           ;ff.c: 2038:  sfn[11] = c;
  4335  003B82  EE20 F00B          	lfsr	2,11
  4336  003B86  501B               	movf	create_name@sfn,w,c
  4337  003B88  26D9               	addwf	fsr2l,f,c
  4338  003B8A  501C               	movf	create_name@sfn+1,w,c
  4339  003B8C  22DA               	addwfc	fsr2h,f,c
  4340  003B8E  C01F  FFDF         	movff	create_name@c,indf2
  4341                           
  4342                           ;ff.c: 2040:  return FR_OK;
  4343  003B92  0E00               	movlw	0
  4344  003B94  0012               	return		;funcret
  4345  003B96                     __end_of_create_name:
  4346                           	opt callstack 0
  4347                           
  4348 ;; *************** function _chk_chr *****************
  4349 ;; Defined at:
  4350 ;;		line 543 in file "ff.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4353 ;;		 -> STR_6(15), 
  4354 ;;  chr             2    2[COMRAM] int 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  2    0[COMRAM] int 
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4366 ;;      Params:         4       0       0       0       0       0       0       0       0
  4367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4368 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4369 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4370 ;;Total ram usage:        6 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_create_name
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text10
  4380  0053B8                     __ptext10:
  4381                           	opt callstack 0
  4382  0053B8                     _chk_chr:
  4383                           	opt callstack 26
  4384                           
  4385                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4386                           
  4387                           ;incstack = 0
  4388  0053B8  D002               	goto	l4657
  4389  0053BA                     l4655:
  4390  0053BA  4A01               	infsnz	chk_chr@str,f,c
  4391  0053BC  2A02               	incf	chk_chr@str+1,f,c
  4392  0053BE                     l4657:
  4393  0053BE  C001  FFF6         	movff	chk_chr@str,tblptrl
  4394  0053C2  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4395  0053C6                     	if	0	;tblptru may be non-zero
  4396  0053C6                     	endif
  4397  0053C6                     	if	0	;tblptru may be non-zero
  4398  0053C6                     	endif
  4399  0053C6  0008               	tblrd		*
  4400  0053C8  50F5               	movf	tablat,w,c
  4401  0053CA  0900               	iorlw	0
  4402  0053CC  B4D8               	btfsc	status,2,c
  4403  0053CE  D00F               	goto	u5810
  4404  0053D0  C001  FFF6         	movff	chk_chr@str,tblptrl
  4405  0053D4  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4406  0053D8                     	if	0	;tblptru may be non-zero
  4407  0053D8                     	endif
  4408  0053D8                     	if	0	;tblptru may be non-zero
  4409  0053D8                     	endif
  4410  0053D8  0008               	tblrd		*
  4411  0053DA  50F5               	movf	tablat,w,c
  4412  0053DC  6E05               	movwf	??_chk_chr& (0+255),c
  4413  0053DE  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4414  0053E0  5003               	movf	chk_chr@chr,w,c
  4415  0053E2  1805               	xorwf	??_chk_chr,w,c
  4416  0053E4  E1EA               	bnz	l4655
  4417  0053E6  5004               	movf	chk_chr@chr+1,w,c
  4418  0053E8  1806               	xorwf	??_chk_chr+1,w,c
  4419  0053EA  A4D8               	btfss	status,2,c
  4420  0053EC  D7E6               	goto	l4655
  4421  0053EE                     u5810:
  4422                           
  4423                           ;ff.c: 545:  return *str;
  4424  0053EE  C001  FFF6         	movff	chk_chr@str,tblptrl
  4425  0053F2  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4426  0053F6                     	if	0	;tblptru may be non-zero
  4427  0053F6                     	endif
  4428  0053F6                     	if	0	;tblptru may be non-zero
  4429  0053F6                     	endif
  4430  0053F6  0008               	tblrd		*
  4431  0053F8  50F5               	movf	tablat,w,c
  4432  0053FA  6E01               	movwf	?_chk_chr,c
  4433  0053FC  6A02               	clrf	?_chk_chr+1,c
  4434  0053FE  0012               	return		;funcret
  4435  005400                     __end_of_chk_chr:
  4436                           	opt callstack 0
  4437                           
  4438 ;; *************** function _dir_register *****************
  4439 ;; Defined at:
  4440 ;;		line 1578 in file "ff.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;  dp              2   42[BANK0 ] PTR struct .
  4443 ;;		 -> f_open@dj(22), 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  res             1   44[BANK0 ] enum E93
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      enum E93
  4448 ;; Registers used:
  4449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4455 ;;      Params:         0       2       0       0       0       0       0       0       0
  4456 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4458 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4459 ;;Total ram usage:        3 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:   12
  4462 ;; This function calls:
  4463 ;;		_dir_alloc
  4464 ;;		_mem_cpy
  4465 ;;		_mem_set
  4466 ;;		_move_window
  4467 ;; This function is called by:
  4468 ;;		_f_open
  4469 ;; This function uses a non-reentrant model
  4470 ;;
  4471                           
  4472                           	psect	text11
  4473  004A7C                     __ptext11:
  4474                           	opt callstack 0
  4475  004A7C                     _dir_register:
  4476                           	opt callstack 16
  4477                           
  4478                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4479                           
  4480                           ;incstack = 0
  4481  004A7C  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4482  004A80  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4483  004A84  0E00               	movlw	0
  4484  004A86  0100               	movlb	0	; () banked
  4485  004A88  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4486  004A8A  0E01               	movlw	1
  4487  004A8C  6F82               	movwf	dir_alloc@nent& (0+255),b
  4488  004A8E  EC6B  F023         	call	_dir_alloc	;wreg free
  4489  004A92  0100               	movlb	0	; () banked
  4490  004A94  6F8C               	movwf	dir_register@res& (0+255),b
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;ff.c: 1632:  if (res == FR_OK) {
  4494  004A96  518C               	movf	dir_register@res& (0+255),w,b
  4495  004A98  A4D8               	btfss	status,2,c
  4496  004A9A  D058               	goto	l5371
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4500  004A9C  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4501  004AA0  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4502  004AA4  CFDE F030          	movff	postinc2,move_window@fs
  4503  004AA8  CFDD F031          	movff	postdec2,move_window@fs+1
  4504  004AAC  EE20 F00E          	lfsr	2,14
  4505  004AB0  518A               	movf	dir_register@dp& (0+255),w,b
  4506  004AB2  26D9               	addwf	fsr2l,f,c
  4507  004AB4  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4508  004AB6  22DA               	addwfc	fsr2h,f,c
  4509  004AB8  CFDE F032          	movff	postinc2,move_window@sector
  4510  004ABC  CFDE F033          	movff	postinc2,move_window@sector+1
  4511  004AC0  CFDE F034          	movff	postinc2,move_window@sector+2
  4512  004AC4  CFDE F035          	movff	postinc2,move_window@sector+3
  4513  004AC8  EC7E  F027         	call	_move_window	;wreg free
  4514  004ACC  0100               	movlb	0	; () banked
  4515  004ACE  6F8C               	movwf	dir_register@res& (0+255),b
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;ff.c: 1634:   if (res == FR_OK) {
  4519  004AD0  518C               	movf	dir_register@res& (0+255),w,b
  4520  004AD2  A4D8               	btfss	status,2,c
  4521  004AD4  D03B               	goto	l5371
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4525  004AD6  EE20 F012          	lfsr	2,18
  4526  004ADA  518A               	movf	dir_register@dp& (0+255),w,b
  4527  004ADC  26D9               	addwf	fsr2l,f,c
  4528  004ADE  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4529  004AE0  22DA               	addwfc	fsr2h,f,c
  4530  004AE2  CFDE F001          	movff	postinc2,mem_set@dst
  4531  004AE6  CFDD F002          	movff	postdec2,mem_set@dst+1
  4532  004AEA  0E00               	movlw	0
  4533  004AEC  6E04               	movwf	mem_set@val+1,c
  4534  004AEE  0E00               	movlw	0
  4535  004AF0  6E03               	movwf	mem_set@val,c
  4536  004AF2  0E00               	movlw	0
  4537  004AF4  6E06               	movwf	mem_set@cnt+1,c
  4538  004AF6  0E20               	movlw	32
  4539  004AF8  6E05               	movwf	mem_set@cnt,c
  4540  004AFA  EC78  F02A         	call	_mem_set	;wreg free
  4541                           
  4542                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4543  004AFE  0100               	movlb	0	; () banked
  4544  004B00  EE20 F012          	lfsr	2,18
  4545  004B04  518A               	movf	dir_register@dp& (0+255),w,b
  4546  004B06  26D9               	addwf	fsr2l,f,c
  4547  004B08  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4548  004B0A  22DA               	addwfc	fsr2h,f,c
  4549  004B0C  CFDE F001          	movff	postinc2,mem_cpy@dst
  4550  004B10  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4551  004B14  EE20 F014          	lfsr	2,20
  4552  004B18  518A               	movf	dir_register@dp& (0+255),w,b
  4553  004B1A  26D9               	addwf	fsr2l,f,c
  4554  004B1C  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4555  004B1E  22DA               	addwfc	fsr2h,f,c
  4556  004B20  CFDE F003          	movff	postinc2,mem_cpy@src
  4557  004B24  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4558  004B28  0E00               	movlw	0
  4559  004B2A  6E06               	movwf	mem_cpy@cnt+1,c
  4560  004B2C  0E0B               	movlw	11
  4561  004B2E  6E05               	movwf	mem_cpy@cnt,c
  4562  004B30  EC0F  F026         	call	_mem_cpy	;wreg free
  4563                           
  4564                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4565  004B34  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4566  004B38  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4567  004B3C  EE10 F004          	lfsr	1,4
  4568  004B40  50DE               	movf	postinc2,w,c
  4569  004B42  26E1               	addwf	fsr1l,f,c
  4570  004B44  50DD               	movf	postdec2,w,c
  4571  004B46  22E2               	addwfc	fsr1h,f,c
  4572  004B48  0E01               	movlw	1
  4573  004B4A  6EE7               	movwf	indf1,c
  4574  004B4C                     l5371:
  4575                           
  4576                           ;ff.c: 1644:  return res;
  4577  004B4C  0100               	movlb	0	; () banked
  4578  004B4E  518C               	movf	dir_register@res& (0+255),w,b
  4579                           
  4580                           ; BSR set to: 0
  4581  004B50  0012               	return		;funcret
  4582  004B52                     __end_of_dir_register:
  4583                           	opt callstack 0
  4584                           
  4585 ;; *************** function _mem_cpy *****************
  4586 ;; Defined at:
  4587 ;;		line 507 in file "ff.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;  dst             2    0[COMRAM] PTR void 
  4590 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4591 ;;  src             2    2[COMRAM] PTR const void 
  4592 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4593 ;;  cnt             2    4[COMRAM] unsigned short 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4596 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4597 ;;  d               2    8[COMRAM] PTR unsigned char 
  4598 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4599 ;; Return value:  Size  Location     Type
  4600 ;;                  1    wreg      void 
  4601 ;; Registers used:
  4602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4608 ;;      Params:         6       0       0       0       0       0       0       0       0
  4609 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4610 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4611 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4612 ;;Total ram usage:       12 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; This function calls:
  4615 ;;		Nothing
  4616 ;; This function is called by:
  4617 ;;		_dir_register
  4618 ;;		_f_write
  4619 ;;		_f_read
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text12
  4624  004C1E                     __ptext12:
  4625                           	opt callstack 0
  4626  004C1E                     _mem_cpy:
  4627                           	opt callstack 28
  4628                           
  4629                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;incstack = 0
  4633  004C1E  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4634  004C22  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4635                           
  4636                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4637  004C26  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4638  004C2A  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4639                           
  4640                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4641  004C2E  D02B               	goto	l4949
  4642  004C30                     l4941:
  4643                           
  4644                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4645  004C30  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4646  004C34  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4647  004C38  6AF8               	clrf	tblptru,c
  4648  004C3A  0E07               	movlw	(high __ramtop+-1)
  4649  004C3C  64F7               	cpfsgt	tblptrh,c
  4650  004C3E  D007               	bra	u6337
  4651  004C40  0009               	tblrd		*+
  4652  004C42  CFF5 F007          	movff	tablat,??_mem_cpy
  4653  004C46  0009               	tblrd		*+
  4654  004C48  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4655  004C4C  D008               	bra	u6330
  4656  004C4E                     u6337:
  4657  004C4E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4658  004C52  CFF7 FFEA          	movff	tblptrh,fsr0h
  4659  004C56  CFEE F007          	movff	postinc0,??_mem_cpy
  4660  004C5A  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4661  004C5E                     u6330:
  4662  004C5E  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4663  004C62  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4664  004C66  C007  FFDE         	movff	??_mem_cpy,postinc2
  4665  004C6A  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4666                           
  4667                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4668  004C6E  0E02               	movlw	2
  4669  004C70  2609               	addwf	mem_cpy@d,f,c
  4670  004C72  0E00               	movlw	0
  4671  004C74  220A               	addwfc	mem_cpy@d+1,f,c
  4672  004C76  0E02               	movlw	2
  4673  004C78  260B               	addwf	mem_cpy@s,f,c
  4674  004C7A  0E00               	movlw	0
  4675  004C7C  220C               	addwfc	mem_cpy@s+1,f,c
  4676                           
  4677                           ;ff.c: 515:   cnt -= sizeof (int);
  4678  004C7E  0E02               	movlw	2
  4679  004C80  5E05               	subwf	mem_cpy@cnt,f,c
  4680  004C82  0E00               	movlw	0
  4681  004C84  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4682  004C86                     l4949:
  4683                           
  4684                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4685  004C86  5006               	movf	mem_cpy@cnt+1,w,c
  4686  004C88  E1D3               	bnz	l4941
  4687  004C8A  0E02               	movlw	2
  4688  004C8C  5C05               	subwf	mem_cpy@cnt,w,c
  4689  004C8E  A0D8               	btfss	status,0,c
  4690  004C90  D01A               	goto	l4957
  4691  004C92  D7CE               	goto	l4941
  4692  004C94                     l4951:
  4693                           
  4694                           ;ff.c: 519:   *d++ = *s++;
  4695  004C94  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4696  004C98  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4697  004C9C  6AF8               	clrf	tblptru,c
  4698  004C9E  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4699  004CA2  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4700  004CA6  0E07               	movlw	(high __ramtop+-1)
  4701  004CA8  64F7               	cpfsgt	tblptrh,c
  4702  004CAA  D003               	bra	u6357
  4703  004CAC  0008               	tblrd		*
  4704  004CAE  50F5               	movf	tablat,w,c
  4705  004CB0  D005               	bra	u6350
  4706  004CB2                     u6357:
  4707  004CB2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4708  004CB6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4709  004CBA  50EF               	movf	indf0,w,c
  4710  004CBC                     u6350:
  4711  004CBC  6EDF               	movwf	indf2,c
  4712  004CBE  4A0B               	infsnz	mem_cpy@s,f,c
  4713  004CC0  2A0C               	incf	mem_cpy@s+1,f,c
  4714  004CC2  4A09               	infsnz	mem_cpy@d,f,c
  4715  004CC4  2A0A               	incf	mem_cpy@d+1,f,c
  4716  004CC6                     l4957:
  4717                           
  4718                           ;ff.c: 518:  while (cnt--)
  4719  004CC6  0605               	decf	mem_cpy@cnt,f,c
  4720  004CC8  A0D8               	btfss	status,0,c
  4721  004CCA  0606               	decf	mem_cpy@cnt+1,f,c
  4722  004CCC  2805               	incf	mem_cpy@cnt,w,c
  4723  004CCE  E1E2               	bnz	l4951
  4724  004CD0  2806               	incf	mem_cpy@cnt+1,w,c
  4725  004CD2  B4D8               	btfsc	status,2,c
  4726  004CD4  0012               	return	
  4727  004CD6  D7DE               	goto	l4951
  4728  004CD8                     __end_of_mem_cpy:
  4729                           	opt callstack 0
  4730                           
  4731 ;; *************** function _dir_alloc *****************
  4732 ;; Defined at:
  4733 ;;		line 1199 in file "ff.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  dp              2   32[BANK0 ] PTR struct .
  4736 ;;		 -> f_open@dj(22), 
  4737 ;;  nent            2   34[BANK0 ] unsigned short 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  n               2   39[BANK0 ] unsigned short 
  4740 ;;  res             1   41[BANK0 ] enum E93
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      enum E93
  4743 ;; Registers used:
  4744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4750 ;;      Params:         0       4       0       0       0       0       0       0       0
  4751 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4752 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4753 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4754 ;;Total ram usage:       10 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:   11
  4757 ;; This function calls:
  4758 ;;		_dir_next
  4759 ;;		_dir_sdi
  4760 ;;		_move_window
  4761 ;; This function is called by:
  4762 ;;		_dir_register
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text13
  4767  0046D6                     __ptext13:
  4768                           	opt callstack 0
  4769  0046D6                     _dir_alloc:
  4770                           	opt callstack 16
  4771                           
  4772                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4773                           
  4774                           ;incstack = 0
  4775  0046D6  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4776  0046DA  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4777  0046DE  0E00               	movlw	0
  4778  0046E0  6E59               	movwf	dir_sdi@idx+1,c
  4779  0046E2  0E00               	movlw	0
  4780  0046E4  6E58               	movwf	dir_sdi@idx,c
  4781  0046E6  EC28  F01B         	call	_dir_sdi	;wreg free
  4782  0046EA  0100               	movlb	0	; () banked
  4783  0046EC  6F89               	movwf	dir_alloc@res& (0+255),b
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;ff.c: 1209:  if (res == FR_OK) {
  4787  0046EE  5189               	movf	dir_alloc@res& (0+255),w,b
  4788  0046F0  A4D8               	btfss	status,2,c
  4789  0046F2  D061               	goto	u6460
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;ff.c: 1210:   n = 0;
  4793  0046F4  0E00               	movlw	0
  4794  0046F6  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4795  0046F8  0E00               	movlw	0
  4796  0046FA  6F87               	movwf	dir_alloc@n& (0+255),b
  4797  0046FC                     l4997:
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4801  0046FC  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4802  004700  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4803  004704  CFDE F030          	movff	postinc2,move_window@fs
  4804  004708  CFDD F031          	movff	postdec2,move_window@fs+1
  4805  00470C  EE20 F00E          	lfsr	2,14
  4806  004710  5180               	movf	dir_alloc@dp& (0+255),w,b
  4807  004712  26D9               	addwf	fsr2l,f,c
  4808  004714  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4809  004716  22DA               	addwfc	fsr2h,f,c
  4810  004718  CFDE F032          	movff	postinc2,move_window@sector
  4811  00471C  CFDE F033          	movff	postinc2,move_window@sector+1
  4812  004720  CFDE F034          	movff	postinc2,move_window@sector+2
  4813  004724  CFDE F035          	movff	postinc2,move_window@sector+3
  4814  004728  EC7E  F027         	call	_move_window	;wreg free
  4815  00472C  0100               	movlb	0	; () banked
  4816  00472E  6F89               	movwf	dir_alloc@res& (0+255),b
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;ff.c: 1213:    if (res != FR_OK) break;
  4820  004730  5189               	movf	dir_alloc@res& (0+255),w,b
  4821  004732  A4D8               	btfss	status,2,c
  4822  004734  D040               	goto	u6460
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4826  004736  EE20 F012          	lfsr	2,18
  4827  00473A  5180               	movf	dir_alloc@dp& (0+255),w,b
  4828  00473C  26D9               	addwf	fsr2l,f,c
  4829  00473E  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4830  004740  22DA               	addwfc	fsr2h,f,c
  4831  004742  CFDE F084          	movff	postinc2,??_dir_alloc
  4832  004746  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4833  00474A  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4834  00474E  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4835  004752  0EE5               	movlw	229
  4836  004754  18DE               	xorwf	postinc2,w,c
  4837  004756  B4D8               	btfsc	status,2,c
  4838  004758  D011               	goto	u6440
  4839                           
  4840                           ; BSR set to: 0
  4841  00475A  EE20 F012          	lfsr	2,18
  4842  00475E  5180               	movf	dir_alloc@dp& (0+255),w,b
  4843  004760  26D9               	addwf	fsr2l,f,c
  4844  004762  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4845  004764  22DA               	addwfc	fsr2h,f,c
  4846  004766  CFDE F084          	movff	postinc2,??_dir_alloc
  4847  00476A  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4848  00476E  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4849  004772  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4850  004776  50DF               	movf	indf2,w,c
  4851  004778  A4D8               	btfss	status,2,c
  4852  00477A  D00A               	goto	l5011
  4853  00477C                     u6440:
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;ff.c: 1215:     if (++n == nent) break;
  4857  00477C  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  4858  00477E  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  4859  004780  5182               	movf	dir_alloc@nent& (0+255),w,b
  4860  004782  1987               	xorwf	dir_alloc@n& (0+255),w,b
  4861  004784  E109               	bnz	l5013
  4862  004786  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  4863  004788  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  4864  00478A  B4D8               	btfsc	status,2,c
  4865  00478C  D014               	goto	u6460
  4866  00478E  D004               	goto	l5013
  4867  004790                     l5011:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;ff.c: 1217:     n = 0;
  4871  004790  0E00               	movlw	0
  4872  004792  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4873  004794  0E00               	movlw	0
  4874  004796  6F87               	movwf	dir_alloc@n& (0+255),b
  4875  004798                     l5013:
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;ff.c: 1219:    res = dir_next(dp, 1);
  4879  004798  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  4880  00479C  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  4881  0047A0  0E00               	movlw	0
  4882  0047A2  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4883  0047A4  0E01               	movlw	1
  4884  0047A6  6F6F               	movwf	dir_next@stretch& (0+255),b
  4885  0047A8  EC0C  F014         	call	_dir_next	;wreg free
  4886  0047AC  0100               	movlb	0	; () banked
  4887  0047AE  6F89               	movwf	dir_alloc@res& (0+255),b
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;ff.c: 1220:   } while (res == FR_OK);
  4891  0047B0  5189               	movf	dir_alloc@res& (0+255),w,b
  4892  0047B2  B4D8               	btfsc	status,2,c
  4893  0047B4  D7A3               	goto	l4997
  4894  0047B6                     u6460:
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  4898  0047B6  0E04               	movlw	4
  4899  0047B8  1989               	xorwf	dir_alloc@res& (0+255),w,b
  4900  0047BA  A4D8               	btfss	status,2,c
  4901  0047BC  D002               	goto	l457
  4902                           
  4903                           ; BSR set to: 0
  4904  0047BE  0E07               	movlw	7
  4905  0047C0  6F89               	movwf	dir_alloc@res& (0+255),b
  4906  0047C2                     l457:
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;ff.c: 1223:  return res;
  4910  0047C2  5189               	movf	dir_alloc@res& (0+255),w,b
  4911                           
  4912                           ; BSR set to: 0
  4913  0047C4  0012               	return		;funcret
  4914  0047C6                     __end_of_dir_alloc:
  4915                           	opt callstack 0
  4916                           
  4917 ;; *************** function _dir_sdi *****************
  4918 ;; Defined at:
  4919 ;;		line 1080 in file "ff.c"
  4920 ;; Parameters:    Size  Location     Type
  4921 ;;  dp              2   85[COMRAM] PTR struct .
  4922 ;;		 -> f_open@dj(22), 
  4923 ;;  idx             2   87[COMRAM] unsigned short 
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  clst            4   13[BANK0 ] unsigned long 
  4926 ;;  sect            4    9[BANK0 ] unsigned long 
  4927 ;;  ic              2    7[BANK0 ] unsigned short 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      enum E93
  4930 ;; Registers used:
  4931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/0
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4937 ;;      Params:         4       0       0       0       0       0       0       0       0
  4938 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4939 ;;      Temps:          0       7       0       0       0       0       0       0       0
  4940 ;;      Totals:         4      17       0       0       0       0       0       0       0
  4941 ;;Total ram usage:       21 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    9
  4944 ;; This function calls:
  4945 ;;		_clust2sect
  4946 ;;		_get_fat
  4947 ;; This function is called by:
  4948 ;;		_dir_alloc
  4949 ;;		_dir_find
  4950 ;;		_follow_path
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text14
  4955  003650                     __ptext14:
  4956                           	opt callstack 0
  4957  003650                     _dir_sdi:
  4958                           	opt callstack 18
  4959                           
  4960                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;incstack = 0
  4964  003650  EE20 F004          	lfsr	2,4
  4965  003654  5056               	movf	dir_sdi@dp,w,c
  4966  003656  26D9               	addwf	fsr2l,f,c
  4967  003658  5057               	movf	dir_sdi@dp+1,w,c
  4968  00365A  22DA               	addwfc	fsr2h,f,c
  4969  00365C  C058  FFDE         	movff	dir_sdi@idx,postinc2
  4970  003660  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  4971                           
  4972                           ;ff.c: 1090:  clst = dp->sclust;
  4973  003664  EE20 F006          	lfsr	2,6
  4974  003668  5056               	movf	dir_sdi@dp,w,c
  4975  00366A  26D9               	addwf	fsr2l,f,c
  4976  00366C  5057               	movf	dir_sdi@dp+1,w,c
  4977  00366E  22DA               	addwfc	fsr2h,f,c
  4978  003670  CFDE F06D          	movff	postinc2,dir_sdi@clst
  4979  003674  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  4980  003678  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  4981  00367C  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  4982                           
  4983                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  4984  003680  0100               	movlb	0	; () banked
  4985  003682  056D               	decf	dir_sdi@clst& (0+255),w,b
  4986  003684  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4987  003686  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4988  003688  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4989  00368A  B4D8               	btfsc	status,2,c
  4990  00368C  D014               	goto	u5830
  4991                           
  4992                           ; BSR set to: 0
  4993  00368E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4994  003692  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4995  003696  EE10 F012          	lfsr	1,18
  4996  00369A  50DE               	movf	postinc2,w,c
  4997  00369C  26E1               	addwf	fsr1l,f,c
  4998  00369E  50DD               	movf	postdec2,w,c
  4999  0036A0  22E2               	addwfc	fsr1h,f,c
  5000  0036A2  50E6               	movf	postinc1,w,c
  5001  0036A4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5002  0036A6  50E6               	movf	postinc1,w,c
  5003  0036A8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5004  0036AA  50E6               	movf	postinc1,w,c
  5005  0036AC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5006  0036AE  50E6               	movf	postinc1,w,c
  5007  0036B0  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5008  0036B2  A0D8               	btfss	status,0,c
  5009  0036B4  D002               	goto	l4675
  5010  0036B6                     u5830:
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;ff.c: 1092:   return FR_INT_ERR;
  5014  0036B6  0E02               	movlw	2
  5015  0036B8  0012               	return	
  5016  0036BA                     l4675:
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  5020  0036BA  516D               	movf	dir_sdi@clst& (0+255),w,b
  5021  0036BC  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5022  0036BE  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5023  0036C0  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5024  0036C2  A4D8               	btfss	status,2,c
  5025  0036C4  D022               	goto	l4681
  5026                           
  5027                           ; BSR set to: 0
  5028  0036C6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5029  0036CA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5030  0036CE  CFDE F060          	movff	postinc2,??_dir_sdi
  5031  0036D2  CFDD F061          	movff	postdec2,??_dir_sdi+1
  5032  0036D6  C060  FFD9         	movff	??_dir_sdi,fsr2l
  5033  0036DA  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  5034  0036DE  0E03               	movlw	3
  5035  0036E0  18DE               	xorwf	postinc2,w,c
  5036  0036E2  A4D8               	btfss	status,2,c
  5037  0036E4  D012               	goto	l4681
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5041  0036E6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5042  0036EA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5043  0036EE  EE10 F022          	lfsr	1,34
  5044  0036F2  50DE               	movf	postinc2,w,c
  5045  0036F4  26E1               	addwf	fsr1l,f,c
  5046  0036F6  50DD               	movf	postdec2,w,c
  5047  0036F8  22E2               	addwfc	fsr1h,f,c
  5048  0036FA  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  5049  0036FE  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  5050  003702  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  5051  003706  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  5052  00370A                     l4681:
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;ff.c: 1096:  if (clst == 0) {
  5056  00370A  516D               	movf	dir_sdi@clst& (0+255),w,b
  5057  00370C  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5058  00370E  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5059  003710  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5060  003712  A4D8               	btfss	status,2,c
  5061  003714  D023               	goto	l4691
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5065  003716  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5066  00371A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5067  00371E  EE10 F008          	lfsr	1,8
  5068  003722  50DE               	movf	postinc2,w,c
  5069  003724  26E1               	addwf	fsr1l,f,c
  5070  003726  50DD               	movf	postdec2,w,c
  5071  003728  22E2               	addwfc	fsr1h,f,c
  5072  00372A  50E6               	movf	postinc1,w,c
  5073  00372C  5C58               	subwf	dir_sdi@idx,w,c
  5074  00372E  50E6               	movf	postinc1,w,c
  5075  003730  5859               	subwfb	dir_sdi@idx+1,w,c
  5076  003732  B0D8               	btfsc	status,0,c
  5077  003734  D7C0               	goto	u5830
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5081  003736  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5082  00373A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5083  00373E  EE10 F022          	lfsr	1,34
  5084  003742  50DE               	movf	postinc2,w,c
  5085  003744  26E1               	addwf	fsr1l,f,c
  5086  003746  50DD               	movf	postdec2,w,c
  5087  003748  22E2               	addwfc	fsr1h,f,c
  5088  00374A  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5089  00374E  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5090  003752  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5091  003756  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5092                           
  5093                           ;ff.c: 1100:  }
  5094  00375A  D079               	goto	l4713
  5095  00375C                     l4691:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5099  00375C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5100  003760  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5101  003764  EE10 F002          	lfsr	1,2
  5102  003768  50DE               	movf	postinc2,w,c
  5103  00376A  26E1               	addwf	fsr1l,f,c
  5104  00376C  50DD               	movf	postdec2,w,c
  5105  00376E  22E2               	addwfc	fsr1h,f,c
  5106  003770  50E7               	movf	indf1,w,c
  5107  003772  6F60               	movwf	??_dir_sdi& (0+255),b
  5108  003774  5160               	movf	??_dir_sdi& (0+255),w,b
  5109  003776  0D10               	mullw	16
  5110  003778  CFF3 F067          	movff	prodl,dir_sdi@ic
  5111  00377C  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5112                           
  5113                           ;ff.c: 1103:   while (idx >= ic) {
  5114  003780  D046               	goto	l415
  5115  003782                     l4693:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5119  003782  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5120  003786  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5121  00378A  CFDE F03B          	movff	postinc2,get_fat@fs
  5122  00378E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5123  003792  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5124  003796  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5125  00379A  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5126  00379E  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5127  0037A2  EC0F  F016         	call	_get_fat	;wreg free
  5128  0037A6  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5129  0037AA  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5130  0037AE  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5131  0037B2  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5132                           
  5133                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5134  0037B6  0100               	movlb	0	; () banked
  5135  0037B8  296D               	incf	dir_sdi@clst& (0+255),w,b
  5136  0037BA  E109               	bnz	l4701
  5137  0037BC  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5138  0037BE  E107               	bnz	l4701
  5139  0037C0  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5140  0037C2  E105               	bnz	l4701
  5141  0037C4  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5142  0037C6  A4D8               	btfss	status,2,c
  5143  0037C8  D002               	goto	l4701
  5144                           
  5145                           ; BSR set to: 0
  5146  0037CA  0E01               	movlw	1
  5147  0037CC  0012               	return	
  5148  0037CE                     l4701:
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5152  0037CE  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5153  0037D0  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5154  0037D2  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5155  0037D4  E104               	bnz	u5890
  5156  0037D6  0E02               	movlw	2
  5157  0037D8  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5158  0037DA  A0D8               	btfss	status,0,c
  5159  0037DC  D76C               	goto	u5830
  5160  0037DE                     u5890:
  5161                           
  5162                           ; BSR set to: 0
  5163  0037DE  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5164  0037E2  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5165  0037E6  EE10 F012          	lfsr	1,18
  5166  0037EA  50DE               	movf	postinc2,w,c
  5167  0037EC  26E1               	addwf	fsr1l,f,c
  5168  0037EE  50DD               	movf	postdec2,w,c
  5169  0037F0  22E2               	addwfc	fsr1h,f,c
  5170  0037F2  50E6               	movf	postinc1,w,c
  5171  0037F4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5172  0037F6  50E6               	movf	postinc1,w,c
  5173  0037F8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5174  0037FA  50E6               	movf	postinc1,w,c
  5175  0037FC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5176  0037FE  50E6               	movf	postinc1,w,c
  5177  003800  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5178  003802  B0D8               	btfsc	status,0,c
  5179  003804  D758               	goto	u5830
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;ff.c: 1108:    idx -= ic;
  5183  003806  5167               	movf	dir_sdi@ic& (0+255),w,b
  5184  003808  5E58               	subwf	dir_sdi@idx,f,c
  5185  00380A  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5186  00380C  5A59               	subwfb	dir_sdi@idx+1,f,c
  5187  00380E                     l415:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;ff.c: 1103:   while (idx >= ic) {
  5191  00380E  5167               	movf	dir_sdi@ic& (0+255),w,b
  5192  003810  5C58               	subwf	dir_sdi@idx,w,c
  5193  003812  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5194  003814  5859               	subwfb	dir_sdi@idx+1,w,c
  5195  003816  B0D8               	btfsc	status,0,c
  5196  003818  D7B4               	goto	l4693
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5200  00381A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5201  00381E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5202  003822  CFDE F00D          	movff	postinc2,clust2sect@fs
  5203  003826  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5204  00382A  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5205  00382E  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5206  003832  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5207  003836  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5208  00383A  EC6C  F026         	call	_clust2sect	;wreg free
  5209  00383E  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5210  003842  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5211  003846  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5212  00384A  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5213  00384E                     l4713:
  5214                           
  5215                           ;ff.c: 1112:  dp->clust = clst;
  5216  00384E  EE20 F00A          	lfsr	2,10
  5217  003852  5056               	movf	dir_sdi@dp,w,c
  5218  003854  26D9               	addwf	fsr2l,f,c
  5219  003856  5057               	movf	dir_sdi@dp+1,w,c
  5220  003858  22DA               	addwfc	fsr2h,f,c
  5221  00385A  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5222  00385E  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5223  003862  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5224  003866  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5225                           
  5226                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5227  00386A  0100               	movlb	0	; () banked
  5228  00386C  5169               	movf	dir_sdi@sect& (0+255),w,b
  5229  00386E  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5230  003870  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5231  003872  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5232  003874  B4D8               	btfsc	status,2,c
  5233  003876  D71F               	goto	u5830
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5237  003878  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5238  00387C  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5239  003880  0E04               	movlw	4
  5240  003882  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5241  003884                     u5935:
  5242  003884  90D8               	bcf	status,0,c
  5243  003886  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5244  003888  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5245  00388A  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5246  00388C  D7FB               	goto	u5935
  5247  00388E  5160               	movf	??_dir_sdi& (0+255),w,b
  5248  003890  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5249  003892  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5250  003894  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5251  003896  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5252  003898  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5253  00389A  0E00               	movlw	0
  5254  00389C  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5255  00389E  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5256  0038A0  0E00               	movlw	0
  5257  0038A2  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5258  0038A4  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5259  0038A6  EE20 F00E          	lfsr	2,14
  5260  0038AA  5056               	movf	dir_sdi@dp,w,c
  5261  0038AC  26D9               	addwf	fsr2l,f,c
  5262  0038AE  5057               	movf	dir_sdi@dp+1,w,c
  5263  0038B0  22DA               	addwfc	fsr2h,f,c
  5264  0038B2  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5265  0038B6  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5266  0038BA  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5267  0038BE  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5268                           
  5269                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5270  0038C2  0E0F               	movlw	15
  5271  0038C4  1458               	andwf	dir_sdi@idx,w,c
  5272  0038C6  6F60               	movwf	??_dir_sdi& (0+255),b
  5273  0038C8  0E00               	movlw	0
  5274  0038CA  1459               	andwf	dir_sdi@idx+1,w,c
  5275  0038CC  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5276  0038CE  0E05               	movlw	5
  5277  0038D0                     u5945:
  5278  0038D0  90D8               	bcf	status,0,c
  5279  0038D2  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5280  0038D4  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5281  0038D6  2EE8               	decfsz	wreg,f,c
  5282  0038D8  D7FB               	goto	u5945
  5283  0038DA  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5284  0038DE  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5285  0038E2  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5286  0038E6  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5287  0038EA  5160               	movf	??_dir_sdi& (0+255),w,b
  5288  0038EC  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5289  0038EE  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5290  0038F0  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5291  0038F2  0E2E               	movlw	46
  5292  0038F4  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5293  0038F6  0E00               	movlw	0
  5294  0038F8  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5295  0038FA  EE20 F012          	lfsr	2,18
  5296  0038FE  5056               	movf	dir_sdi@dp,w,c
  5297  003900  26D9               	addwf	fsr2l,f,c
  5298  003902  5057               	movf	dir_sdi@dp+1,w,c
  5299  003904  22DA               	addwfc	fsr2h,f,c
  5300  003906  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5301  00390A  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;ff.c: 1117:  return FR_OK;
  5305  00390E  0E00               	movlw	0
  5306                           
  5307                           ; BSR set to: 0
  5308  003910  0012               	return		;funcret
  5309  003912                     __end_of_dir_sdi:
  5310                           	opt callstack 0
  5311                           
  5312 ;; *************** function _dir_next *****************
  5313 ;; Defined at:
  5314 ;;		line 1128 in file "ff.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  dp              2   13[BANK0 ] PTR struct .
  5317 ;;		 -> f_open@dj(22), 
  5318 ;;  stretch         2   15[BANK0 ] int 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  clst            4   28[BANK0 ] unsigned long 
  5321 ;;  i               2   26[BANK0 ] unsigned short 
  5322 ;;  c               2   24[BANK0 ] unsigned short 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      enum E93
  5325 ;; Registers used:
  5326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5332 ;;      Params:         0       4       0       0       0       0       0       0       0
  5333 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5334 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5335 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5336 ;;Total ram usage:       19 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:   10
  5339 ;; This function calls:
  5340 ;;		_clust2sect
  5341 ;;		_create_chain
  5342 ;;		_get_fat
  5343 ;;		_mem_set
  5344 ;;		_sync_window
  5345 ;; This function is called by:
  5346 ;;		_dir_alloc
  5347 ;;		_dir_find
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text15
  5352  002818                     __ptext15:
  5353                           	opt callstack 0
  5354  002818                     _dir_next:
  5355                           	opt callstack 16
  5356                           
  5357                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;incstack = 0
  5361  002818  0100               	movlb	0	; () banked
  5362  00281A  EE20 F004          	lfsr	2,4
  5363  00281E  516D               	movf	dir_next@dp& (0+255),w,b
  5364  002820  26D9               	addwf	fsr2l,f,c
  5365  002822  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5366  002824  22DA               	addwfc	fsr2h,f,c
  5367  002826  CFDE F071          	movff	postinc2,??_dir_next
  5368  00282A  CFDD F072          	movff	postdec2,??_dir_next+1
  5369  00282E  0E01               	movlw	1
  5370  002830  2571               	addwf	??_dir_next& (0+255),w,b
  5371  002832  6F7A               	movwf	dir_next@i& (0+255),b
  5372  002834  0E00               	movlw	0
  5373  002836  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5374  002838  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5378  00283A  517A               	movf	dir_next@i& (0+255),w,b
  5379  00283C  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5380  00283E  B4D8               	btfsc	status,2,c
  5381  002840  D00C               	goto	u5960
  5382                           
  5383                           ; BSR set to: 0
  5384  002842  EE20 F00E          	lfsr	2,14
  5385  002846  516D               	movf	dir_next@dp& (0+255),w,b
  5386  002848  26D9               	addwf	fsr2l,f,c
  5387  00284A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5388  00284C  22DA               	addwfc	fsr2h,f,c
  5389  00284E  50DE               	movf	postinc2,w,c
  5390  002850  10DE               	iorwf	postinc2,w,c
  5391  002852  10DE               	iorwf	postinc2,w,c
  5392  002854  10DE               	iorwf	postinc2,w,c
  5393  002856  A4D8               	btfss	status,2,c
  5394  002858  D002               	goto	l4737
  5395  00285A                     u5960:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;ff.c: 1142:   return FR_NO_FILE;
  5399  00285A  0E04               	movlw	4
  5400  00285C  0012               	return	
  5401  00285E                     l4737:
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5405  00285E  0E0F               	movlw	15
  5406  002860  157A               	andwf	dir_next@i& (0+255),w,b
  5407  002862  6F71               	movwf	??_dir_next& (0+255),b
  5408  002864  0E00               	movlw	0
  5409  002866  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5410  002868  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5411  00286A  5171               	movf	??_dir_next& (0+255),w,b
  5412  00286C  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5413  00286E  A4D8               	btfss	status,2,c
  5414  002870  D1A4               	goto	l4823
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;ff.c: 1145:   dp->sect++;
  5418  002872  EE20 F00E          	lfsr	2,14
  5419  002876  516D               	movf	dir_next@dp& (0+255),w,b
  5420  002878  26D9               	addwf	fsr2l,f,c
  5421  00287A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5422  00287C  22DA               	addwfc	fsr2h,f,c
  5423  00287E  2ADE               	incf	postinc2,f,c
  5424  002880  0E00               	movlw	0
  5425  002882  22DE               	addwfc	postinc2,f,c
  5426  002884  22DE               	addwfc	postinc2,f,c
  5427  002886  22DE               	addwfc	postinc2,f,c
  5428                           
  5429                           ;ff.c: 1147:   if (!dp->clust) {
  5430  002888  EE20 F00A          	lfsr	2,10
  5431  00288C  516D               	movf	dir_next@dp& (0+255),w,b
  5432  00288E  26D9               	addwf	fsr2l,f,c
  5433  002890  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5434  002892  22DA               	addwfc	fsr2h,f,c
  5435  002894  50DE               	movf	postinc2,w,c
  5436  002896  10DE               	iorwf	postinc2,w,c
  5437  002898  10DE               	iorwf	postinc2,w,c
  5438  00289A  10DE               	iorwf	postinc2,w,c
  5439  00289C  A4D8               	btfss	status,2,c
  5440  00289E  D011               	goto	l4747
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5444  0028A0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5445  0028A4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5446  0028A8  EE10 F008          	lfsr	1,8
  5447  0028AC  50DE               	movf	postinc2,w,c
  5448  0028AE  26E1               	addwf	fsr1l,f,c
  5449  0028B0  50DD               	movf	postdec2,w,c
  5450  0028B2  22E2               	addwfc	fsr1h,f,c
  5451  0028B4  50E6               	movf	postinc1,w,c
  5452  0028B6  5D7A               	subwf	dir_next@i& (0+255),w,b
  5453  0028B8  50E6               	movf	postinc1,w,c
  5454  0028BA  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5455  0028BC  B0D8               	btfsc	status,0,c
  5456  0028BE  D7CD               	goto	u5960
  5457  0028C0  D17C               	goto	l4823
  5458  0028C2                     l4747:
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5462  0028C2  C07A  F071         	movff	dir_next@i,??_dir_next
  5463  0028C6  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5464  0028CA  0E04               	movlw	4
  5465  0028CC  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5466  0028CE                     u6005:
  5467  0028CE  90D8               	bcf	status,0,c
  5468  0028D0  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5469  0028D2  3371               	rrcf	??_dir_next& (0+255),f,b
  5470  0028D4  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5471  0028D6  D7FB               	goto	u6005
  5472  0028D8  0EFF               	movlw	255
  5473  0028DA  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5474  0028DC  0EFF               	movlw	255
  5475  0028DE  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5476  0028E0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5477  0028E4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5478  0028E8  EE10 F002          	lfsr	1,2
  5479  0028EC  50DE               	movf	postinc2,w,c
  5480  0028EE  26E1               	addwf	fsr1l,f,c
  5481  0028F0  50DD               	movf	postdec2,w,c
  5482  0028F2  22E2               	addwfc	fsr1h,f,c
  5483  0028F4  50E7               	movf	indf1,w,c
  5484  0028F6  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5485  0028F8  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5486  0028FA  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5487  0028FC  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5488  0028FE  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5489  002900  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5490  002902  5171               	movf	??_dir_next& (0+255),w,b
  5491  002904  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5492  002906  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5493  002908  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5494  00290A  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5495  00290C  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5496  00290E  A4D8               	btfss	status,2,c
  5497  002910  D154               	goto	l4823
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5501  002912  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5502  002916  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5503  00291A  CFDE F03B          	movff	postinc2,get_fat@fs
  5504  00291E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5505  002922  EE20 F00A          	lfsr	2,10
  5506  002926  516D               	movf	dir_next@dp& (0+255),w,b
  5507  002928  26D9               	addwf	fsr2l,f,c
  5508  00292A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5509  00292C  22DA               	addwfc	fsr2h,f,c
  5510  00292E  CFDE F03D          	movff	postinc2,get_fat@clst
  5511  002932  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5512  002936  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5513  00293A  CFDE F040          	movff	postinc2,get_fat@clst+3
  5514  00293E  EC0F  F016         	call	_get_fat	;wreg free
  5515  002942  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5516  002946  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5517  00294A  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5518  00294E  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5519                           
  5520                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5521  002952  0100               	movlb	0	; () banked
  5522  002954  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5523  002956  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5524  002958  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5525  00295A  E106               	bnz	l4757
  5526  00295C  0E02               	movlw	2
  5527  00295E  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5528  002960  B0D8               	btfsc	status,0,c
  5529  002962  D002               	goto	l4757
  5530  002964                     u6020:
  5531                           
  5532                           ; BSR set to: 0
  5533  002964  0E02               	movlw	2
  5534  002966  0012               	return	
  5535  002968                     l4757:
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5539  002968  297C               	incf	dir_next@clst& (0+255),w,b
  5540  00296A  E109               	bnz	l4763
  5541  00296C  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5542  00296E  E107               	bnz	l4763
  5543  002970  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5544  002972  E105               	bnz	l4763
  5545  002974  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5546  002976  A4D8               	btfss	status,2,c
  5547  002978  D002               	goto	l4763
  5548  00297A                     u6030:
  5549  00297A  0E01               	movlw	1
  5550  00297C  0012               	return	
  5551  00297E                     l4763:
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5555  00297E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5556  002982  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5557  002986  EE10 F012          	lfsr	1,18
  5558  00298A  50DE               	movf	postinc2,w,c
  5559  00298C  26E1               	addwf	fsr1l,f,c
  5560  00298E  50DD               	movf	postdec2,w,c
  5561  002990  22E2               	addwfc	fsr1h,f,c
  5562  002992  50E6               	movf	postinc1,w,c
  5563  002994  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5564  002996  50E6               	movf	postinc1,w,c
  5565  002998  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5566  00299A  50E6               	movf	postinc1,w,c
  5567  00299C  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5568  00299E  50E6               	movf	postinc1,w,c
  5569  0029A0  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5570  0029A2  A0D8               	btfss	status,0,c
  5571  0029A4  D0DB               	goto	l4819
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5575  0029A6  516F               	movf	dir_next@stretch& (0+255),w,b
  5576  0029A8  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5577  0029AA  B4D8               	btfsc	status,2,c
  5578  0029AC  D756               	goto	u5960
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5582  0029AE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5583  0029B2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5584  0029B6  CFDE F056          	movff	postinc2,create_chain@fs
  5585  0029BA  CFDD F057          	movff	postdec2,create_chain@fs+1
  5586  0029BE  EE20 F00A          	lfsr	2,10
  5587  0029C2  516D               	movf	dir_next@dp& (0+255),w,b
  5588  0029C4  26D9               	addwf	fsr2l,f,c
  5589  0029C6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5590  0029C8  22DA               	addwfc	fsr2h,f,c
  5591  0029CA  CFDE F058          	movff	postinc2,create_chain@clst
  5592  0029CE  CFDE F059          	movff	postinc2,create_chain@clst+1
  5593  0029D2  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5594  0029D6  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5595  0029DA  ECAB  F019         	call	_create_chain	;wreg free
  5596  0029DE  C056  F07C         	movff	?_create_chain,dir_next@clst
  5597  0029E2  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5598  0029E6  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5599  0029EA  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5600                           
  5601                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5602  0029EE  0100               	movlb	0	; () banked
  5603  0029F0  517C               	movf	dir_next@clst& (0+255),w,b
  5604  0029F2  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5605  0029F4  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5606  0029F6  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5607  0029F8  A4D8               	btfss	status,2,c
  5608  0029FA  D002               	goto	l4779
  5609                           
  5610                           ; BSR set to: 0
  5611  0029FC  0E07               	movlw	7
  5612  0029FE  0012               	return	
  5613  002A00                     l4779:
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5617  002A00  057C               	decf	dir_next@clst& (0+255),w,b
  5618  002A02  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5619  002A04  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5620  002A06  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5621  002A08  B4D8               	btfsc	status,2,c
  5622  002A0A  D7AC               	goto	u6020
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5626  002A0C  297C               	incf	dir_next@clst& (0+255),w,b
  5627  002A0E  E107               	bnz	l4791
  5628  002A10  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5629  002A12  E105               	bnz	l4791
  5630  002A14  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5631  002A16  E103               	bnz	l4791
  5632  002A18  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5633  002A1A  B4D8               	btfsc	status,2,c
  5634  002A1C  D7AE               	goto	u6030
  5635  002A1E                     l4791:
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5639  002A1E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5640  002A22  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5641  002A26  CFDE F01B          	movff	postinc2,sync_window@fs
  5642  002A2A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5643  002A2E  EC4E  F020         	call	_sync_window	;wreg free
  5644  002A32  0900               	iorlw	0
  5645  002A34  A4D8               	btfss	status,2,c
  5646  002A36  D7A1               	goto	u6030
  5647                           
  5648                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5649  002A38  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5650  002A3C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5651  002A40  CFDE F071          	movff	postinc2,??_dir_next
  5652  002A44  CFDD F072          	movff	postdec2,??_dir_next+1
  5653  002A48  0E2E               	movlw	46
  5654  002A4A  0100               	movlb	0	; () banked
  5655  002A4C  2571               	addwf	??_dir_next& (0+255),w,b
  5656  002A4E  6E01               	movwf	mem_set@dst,c
  5657  002A50  0E00               	movlw	0
  5658  002A52  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5659  002A54  6E02               	movwf	mem_set@dst+1,c
  5660  002A56  0E00               	movlw	0
  5661  002A58  6E04               	movwf	mem_set@val+1,c
  5662  002A5A  0E00               	movlw	0
  5663  002A5C  6E03               	movwf	mem_set@val,c
  5664  002A5E  0E02               	movlw	2
  5665  002A60  6E06               	movwf	mem_set@cnt+1,c
  5666  002A62  0E00               	movlw	0
  5667  002A64  6E05               	movwf	mem_set@cnt,c
  5668  002A66  EC78  F02A         	call	_mem_set	;wreg free
  5669                           
  5670                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5671  002A6A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5672  002A6E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5673  002A72  CFDE F00D          	movff	postinc2,clust2sect@fs
  5674  002A76  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5675  002A7A  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5676  002A7E  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5677  002A82  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5678  002A86  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5679  002A8A  EC6C  F026         	call	_clust2sect	;wreg free
  5680  002A8E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5681  002A92  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5682  002A96  EE10 F02A          	lfsr	1,42
  5683  002A9A  50DE               	movf	postinc2,w,c
  5684  002A9C  26E1               	addwf	fsr1l,f,c
  5685  002A9E  50DD               	movf	postdec2,w,c
  5686  002AA0  22E2               	addwfc	fsr1h,f,c
  5687  002AA2  C00D  FFE6         	movff	?_clust2sect,postinc1
  5688  002AA6  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5689  002AAA  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5690  002AAE  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5691                           
  5692                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5693  002AB2  0E00               	movlw	0
  5694  002AB4  0100               	movlb	0	; () banked
  5695  002AB6  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5696  002AB8  0E00               	movlw	0
  5697  002ABA  6F78               	movwf	dir_next@c& (0+255),b
  5698  002ABC  D02B               	goto	l4815
  5699  002ABE                     l4803:
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5703  002ABE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5704  002AC2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5705  002AC6  EE10 F004          	lfsr	1,4
  5706  002ACA  50DE               	movf	postinc2,w,c
  5707  002ACC  26E1               	addwf	fsr1l,f,c
  5708  002ACE  50DD               	movf	postdec2,w,c
  5709  002AD0  22E2               	addwfc	fsr1h,f,c
  5710  002AD2  0E01               	movlw	1
  5711  002AD4  6EE7               	movwf	indf1,c
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5715  002AD6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5716  002ADA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5717  002ADE  CFDE F01B          	movff	postinc2,sync_window@fs
  5718  002AE2  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5719  002AE6  EC4E  F020         	call	_sync_window	;wreg free
  5720  002AEA  0900               	iorlw	0
  5721  002AEC  A4D8               	btfss	status,2,c
  5722  002AEE  D745               	goto	u6030
  5723                           
  5724                           ;ff.c: 1170:       dp->fs->winsect++;
  5725  002AF0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5726  002AF4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5727  002AF8  EE10 F02A          	lfsr	1,42
  5728  002AFC  50DE               	movf	postinc2,w,c
  5729  002AFE  26E1               	addwf	fsr1l,f,c
  5730  002B00  50DD               	movf	postdec2,w,c
  5731  002B02  22E2               	addwfc	fsr1h,f,c
  5732  002B04  2AE6               	incf	postinc1,f,c
  5733  002B06  0E00               	movlw	0
  5734  002B08  22E6               	addwfc	postinc1,f,c
  5735  002B0A  22E6               	addwfc	postinc1,f,c
  5736  002B0C  22E6               	addwfc	postinc1,f,c
  5737                           
  5738                           ;ff.c: 1171:      }
  5739  002B0E  0100               	movlb	0	; () banked
  5740  002B10  4B78               	infsnz	dir_next@c& (0+255),f,b
  5741  002B12  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5742  002B14                     l4815:
  5743                           
  5744                           ; BSR set to: 0
  5745  002B14  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5746  002B18  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5747  002B1C  EE10 F002          	lfsr	1,2
  5748  002B20  50DE               	movf	postinc2,w,c
  5749  002B22  26E1               	addwf	fsr1l,f,c
  5750  002B24  50DD               	movf	postdec2,w,c
  5751  002B26  22E2               	addwfc	fsr1h,f,c
  5752  002B28  50E7               	movf	indf1,w,c
  5753  002B2A  6F71               	movwf	??_dir_next& (0+255),b
  5754  002B2C  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5755  002B2E  5171               	movf	??_dir_next& (0+255),w,b
  5756  002B30  5D78               	subwf	dir_next@c& (0+255),w,b
  5757  002B32  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5758  002B34  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5759  002B36  A0D8               	btfss	status,0,c
  5760  002B38  D7C2               	goto	l4803
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5764  002B3A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5765  002B3E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5766  002B42  EE10 F02A          	lfsr	1,42
  5767  002B46  50DE               	movf	postinc2,w,c
  5768  002B48  26E1               	addwf	fsr1l,f,c
  5769  002B4A  50DD               	movf	postdec2,w,c
  5770  002B4C  22E2               	addwfc	fsr1h,f,c
  5771  002B4E  5178               	movf	dir_next@c& (0+255),w,b
  5772  002B50  5EE6               	subwf	postinc1,f,c
  5773  002B52  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5774  002B54  5AE6               	subwfb	postinc1,f,c
  5775  002B56  0E00               	movlw	0
  5776  002B58  5AE6               	subwfb	postinc1,f,c
  5777  002B5A  5AE6               	subwfb	postinc1,f,c
  5778  002B5C                     l4819:
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;ff.c: 1178:     dp->clust = clst;
  5782  002B5C  EE20 F00A          	lfsr	2,10
  5783  002B60  516D               	movf	dir_next@dp& (0+255),w,b
  5784  002B62  26D9               	addwf	fsr2l,f,c
  5785  002B64  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5786  002B66  22DA               	addwfc	fsr2h,f,c
  5787  002B68  C07C  FFDE         	movff	dir_next@clst,postinc2
  5788  002B6C  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5789  002B70  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5790  002B74  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5794  002B78  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5795  002B7C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5796  002B80  CFDE F00D          	movff	postinc2,clust2sect@fs
  5797  002B84  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5798  002B88  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5799  002B8C  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5800  002B90  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5801  002B94  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5802  002B98  EC6C  F026         	call	_clust2sect	;wreg free
  5803  002B9C  0100               	movlb	0	; () banked
  5804  002B9E  EE20 F00E          	lfsr	2,14
  5805  002BA2  516D               	movf	dir_next@dp& (0+255),w,b
  5806  002BA4  26D9               	addwf	fsr2l,f,c
  5807  002BA6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5808  002BA8  22DA               	addwfc	fsr2h,f,c
  5809  002BAA  C00D  FFDE         	movff	?_clust2sect,postinc2
  5810  002BAE  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5811  002BB2  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5812  002BB6  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5813  002BBA                     l4823:
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;ff.c: 1184:  dp->index = (WORD)i;
  5817  002BBA  EE20 F004          	lfsr	2,4
  5818  002BBE  516D               	movf	dir_next@dp& (0+255),w,b
  5819  002BC0  26D9               	addwf	fsr2l,f,c
  5820  002BC2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5821  002BC4  22DA               	addwfc	fsr2h,f,c
  5822  002BC6  C07A  FFDE         	movff	dir_next@i,postinc2
  5823  002BCA  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5827  002BCE  0E0F               	movlw	15
  5828  002BD0  157A               	andwf	dir_next@i& (0+255),w,b
  5829  002BD2  6F71               	movwf	??_dir_next& (0+255),b
  5830  002BD4  0E00               	movlw	0
  5831  002BD6  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5832  002BD8  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5833  002BDA  0E05               	movlw	5
  5834  002BDC                     u6125:
  5835  002BDC  90D8               	bcf	status,0,c
  5836  002BDE  3771               	rlcf	??_dir_next& (0+255),f,b
  5837  002BE0  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5838  002BE2  2EE8               	decfsz	wreg,f,c
  5839  002BE4  D7FB               	goto	u6125
  5840  002BE6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5841  002BEA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5842  002BEE  CFDE F073          	movff	postinc2,??_dir_next+2
  5843  002BF2  CFDD F074          	movff	postdec2,??_dir_next+3
  5844  002BF6  5171               	movf	??_dir_next& (0+255),w,b
  5845  002BF8  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5846  002BFA  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5847  002BFC  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5848  002BFE  0E2E               	movlw	46
  5849  002C00  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5850  002C02  0E00               	movlw	0
  5851  002C04  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5852  002C06  EE20 F012          	lfsr	2,18
  5853  002C0A  516D               	movf	dir_next@dp& (0+255),w,b
  5854  002C0C  26D9               	addwf	fsr2l,f,c
  5855  002C0E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5856  002C10  22DA               	addwfc	fsr2h,f,c
  5857  002C12  C073  FFDE         	movff	??_dir_next+2,postinc2
  5858  002C16  C074  FFDD         	movff	??_dir_next+3,postdec2
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;ff.c: 1187:  return FR_OK;
  5862  002C1A  0E00               	movlw	0
  5863  002C1C  0012               	return		;funcret
  5864  002C1E                     __end_of_dir_next:
  5865                           	opt callstack 0
  5866                           
  5867 ;; *************** function _f_mount *****************
  5868 ;; Defined at:
  5869 ;;		line 2402 in file "ff.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  fs              2   81[COMRAM] PTR struct .
  5872 ;;		 -> NULL(0), FatFs(558), 
  5873 ;;  path            2   83[COMRAM] PTR const unsigned char 
  5874 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5875 ;;  opt             1   85[COMRAM] unsigned char 
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;  vol             2   91[COMRAM] int 
  5878 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  5879 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5880 ;;  cfs             2   87[COMRAM] PTR struct .
  5881 ;;		 -> NULL(0), FatFs(558), 
  5882 ;;  res             1   86[COMRAM] enum E93
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  1    wreg      enum E4918
  5885 ;; Registers used:
  5886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5892 ;;      Params:         5       0       0       0       0       0       0       0       0
  5893 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5895 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5896 ;;Total ram usage:       12 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:   10
  5899 ;; This function calls:
  5900 ;;		_find_volume
  5901 ;;		_get_ldnumber
  5902 ;; This function is called by:
  5903 ;;		_guardar
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text16
  5908  004E4C                     __ptext16:
  5909                           	opt callstack 0
  5910  004E4C                     _f_mount:
  5911                           	opt callstack 19
  5912                           
  5913                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  5914                           
  5915                           ;incstack = 0
  5916  004E4C  C054  F05A         	movff	f_mount@path,f_mount@rp
  5917  004E50  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  5918                           
  5919                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  5920  004E54  0E5A               	movlw	low f_mount@rp
  5921  004E56  6E01               	movwf	get_ldnumber@path,c
  5922  004E58  0E00               	movlw	high f_mount@rp
  5923  004E5A  6E02               	movwf	get_ldnumber@path+1,c
  5924  004E5C  ECCF  F024         	call	_get_ldnumber	;wreg free
  5925  004E60  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  5926  004E64  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  5927                           
  5928                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  5929  004E68  AE5D               	btfss	f_mount@vol+1,7,c
  5930  004E6A  D002               	goto	l5787
  5931  004E6C  0E0B               	movlw	11
  5932  004E6E  0012               	return	
  5933  004E70                     l5787:
  5934                           
  5935                           ;ff.c: 2416:  cfs = FatFs[vol];
  5936  004E70  90D8               	bcf	status,0,c
  5937  004E72  345C               	rlcf	f_mount@vol,w,c
  5938  004E74  6ED9               	movwf	fsr2l,c
  5939  004E76  345D               	rlcf	f_mount@vol+1,w,c
  5940  004E78  6EDA               	movwf	fsr2h,c
  5941  004E7A  0ED6               	movlw	low ff@FatFs
  5942  004E7C  26D9               	addwf	fsr2l,f,c
  5943  004E7E  0E00               	movlw	high ff@FatFs
  5944  004E80  22DA               	addwfc	fsr2h,f,c
  5945  004E82  CFDE F058          	movff	postinc2,f_mount@cfs
  5946  004E86  CFDD F059          	movff	postdec2,f_mount@cfs+1
  5947                           
  5948                           ;ff.c: 2418:  if (cfs) {
  5949  004E8A  5058               	movf	f_mount@cfs,w,c
  5950  004E8C  1059               	iorwf	f_mount@cfs+1,w,c
  5951  004E8E  B4D8               	btfsc	status,2,c
  5952  004E90  D006               	goto	l5793
  5953                           
  5954                           ;ff.c: 2425:   cfs->fs_type = 0;
  5955  004E92  C058  FFD9         	movff	f_mount@cfs,fsr2l
  5956  004E96  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  5957  004E9A  0E00               	movlw	0
  5958  004E9C  6EDF               	movwf	indf2,c
  5959  004E9E                     l5793:
  5960                           
  5961                           ;ff.c: 2428:  if (fs) {
  5962  004E9E  5052               	movf	f_mount@fs,w,c
  5963  004EA0  1053               	iorwf	f_mount@fs+1,w,c
  5964  004EA2  B4D8               	btfsc	status,2,c
  5965  004EA4  D006               	goto	l5797
  5966                           
  5967                           ;ff.c: 2429:   fs->fs_type = 0;
  5968  004EA6  C052  FFD9         	movff	f_mount@fs,fsr2l
  5969  004EAA  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  5970  004EAE  0E00               	movlw	0
  5971  004EB0  6EDF               	movwf	indf2,c
  5972  004EB2                     l5797:
  5973                           
  5974                           ;ff.c: 2434:  FatFs[vol] = fs;
  5975  004EB2  90D8               	bcf	status,0,c
  5976  004EB4  345C               	rlcf	f_mount@vol,w,c
  5977  004EB6  6ED9               	movwf	fsr2l,c
  5978  004EB8  345D               	rlcf	f_mount@vol+1,w,c
  5979  004EBA  6EDA               	movwf	fsr2h,c
  5980  004EBC  0ED6               	movlw	low ff@FatFs
  5981  004EBE  26D9               	addwf	fsr2l,f,c
  5982  004EC0  0E00               	movlw	high ff@FatFs
  5983  004EC2  22DA               	addwfc	fsr2h,f,c
  5984  004EC4  C052  FFDE         	movff	f_mount@fs,postinc2
  5985  004EC8  C053  FFDD         	movff	f_mount@fs+1,postdec2
  5986                           
  5987                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  5988  004ECC  5052               	movf	f_mount@fs,w,c
  5989  004ECE  1053               	iorwf	f_mount@fs+1,w,c
  5990  004ED0  B4D8               	btfsc	status,2,c
  5991  004ED2  D003               	goto	u7800
  5992  004ED4  0456               	decf	f_mount@opt,w,c
  5993  004ED6  B4D8               	btfsc	status,2,c
  5994  004ED8  D002               	goto	l5807
  5995  004EDA                     u7800:
  5996  004EDA  0E00               	movlw	0
  5997  004EDC  0012               	return	
  5998  004EDE                     l5807:
  5999                           
  6000                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  6001  004EDE  0E52               	movlw	low f_mount@fs
  6002  004EE0  6E45               	movwf	find_volume@rfs,c
  6003  004EE2  0E00               	movlw	high f_mount@fs
  6004  004EE4  6E46               	movwf	find_volume@rfs+1,c
  6005  004EE6  0E54               	movlw	low f_mount@path
  6006  004EE8  6E47               	movwf	find_volume@path,c
  6007  004EEA  0E00               	movlw	high f_mount@path
  6008  004EEC  6E48               	movwf	find_volume@path+1,c
  6009  004EEE  0E00               	movlw	0
  6010  004EF0  6E49               	movwf	find_volume@wmode,c
  6011  004EF2  EC18  F004         	call	_find_volume	;wreg free
  6012  004EF6  6E57               	movwf	f_mount@res,c
  6013                           
  6014                           ;ff.c: 2439:  return res;
  6015  004EF8  5057               	movf	f_mount@res,w,c
  6016  004EFA  0012               	return		;funcret
  6017  004EFC                     __end_of_f_mount:
  6018                           	opt callstack 0
  6019                           
  6020 ;; *************** function _find_volume *****************
  6021 ;; Defined at:
  6022 ;;		line 2203 in file "ff.c"
  6023 ;; Parameters:    Size  Location     Type
  6024 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  6025 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  6026 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  6027 ;;		 -> f_open@path(2), f_mount@path(2), 
  6028 ;;  wmode           1   72[COMRAM] unsigned char 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  br             16    0[BANK0 ] unsigned long [4]
  6031 ;;  bsect           4   49[BANK0 ] unsigned long 
  6032 ;;  fasize          4   45[BANK0 ] unsigned long 
  6033 ;;  nclst           4   40[BANK0 ] unsigned long 
  6034 ;;  tsect           4   36[BANK0 ] unsigned long 
  6035 ;;  sysect          4   28[BANK0 ] unsigned long 
  6036 ;;  szbfat          4   22[BANK0 ] unsigned long 
  6037 ;;  fs              2   56[BANK0 ] PTR struct .
  6038 ;;		 -> NULL(0), FatFs(558), 
  6039 ;;  i               2   53[BANK0 ] unsigned short 
  6040 ;;  nrsv            2   34[BANK0 ] unsigned short 
  6041 ;;  vol             2   32[BANK0 ] int 
  6042 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  6043 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  6044 ;;  fmt             1   55[BANK0 ] unsigned char 
  6045 ;;  stat            1   44[BANK0 ] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;                  1    wreg      enum E93
  6048 ;; Registers used:
  6049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6055 ;;      Params:         5       0       0       0       0       0       0       0       0
  6056 ;;      Locals:         0      58       0       0       0       0       0       0       0
  6057 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6058 ;;      Totals:        13      58       0       0       0       0       0       0       0
  6059 ;;Total ram usage:       71 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    9
  6062 ;; This function calls:
  6063 ;;		___lldiv
  6064 ;;		___lmul
  6065 ;;		_check_fs
  6066 ;;		_disk_initialize
  6067 ;;		_disk_status
  6068 ;;		_get_ldnumber
  6069 ;;		_move_window
  6070 ;; This function is called by:
  6071 ;;		_f_mount
  6072 ;;		_f_open
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text17
  6077  000830                     __ptext17:
  6078                           	opt callstack 0
  6079  000830                     _find_volume:
  6080                           	opt callstack 19
  6081                           
  6082                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  6083                           
  6084                           ;incstack = 0
  6085  000830  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6086  000834  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6087  000838  0E00               	movlw	0
  6088  00083A  6EDE               	movwf	postinc2,c
  6089  00083C  0E00               	movlw	0
  6090  00083E  6EDD               	movwf	postdec2,c
  6091                           
  6092                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6093  000840  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6094  000844  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6095  000848  ECCF  F024         	call	_get_ldnumber	;wreg free
  6096  00084C  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6097  000850  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6098                           
  6099                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6100  000854  0100               	movlb	0	; () banked
  6101  000856  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6102  000858  D002               	goto	l5439
  6103                           
  6104                           ; BSR set to: 0
  6105  00085A  0E0B               	movlw	11
  6106  00085C  0012               	return	
  6107  00085E                     l5439:
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;ff.c: 2224:  fs = FatFs[vol];
  6111  00085E  90D8               	bcf	status,0,c
  6112  000860  3580               	rlcf	find_volume@vol& (0+255),w,b
  6113  000862  6ED9               	movwf	fsr2l,c
  6114  000864  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6115  000866  6EDA               	movwf	fsr2h,c
  6116  000868  0ED6               	movlw	low ff@FatFs
  6117  00086A  26D9               	addwf	fsr2l,f,c
  6118  00086C  0E00               	movlw	high ff@FatFs
  6119  00086E  22DA               	addwfc	fsr2h,f,c
  6120  000870  CFDE F098          	movff	postinc2,find_volume@fs
  6121  000874  CFDD F099          	movff	postdec2,find_volume@fs+1
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6125  000878  5198               	movf	find_volume@fs& (0+255),w,b
  6126  00087A  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6127  00087C  A4D8               	btfss	status,2,c
  6128  00087E  D002               	goto	l5447
  6129                           
  6130                           ; BSR set to: 0
  6131  000880  0E0C               	movlw	12
  6132  000882  0012               	return	
  6133  000884                     l5447:
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;ff.c: 2228:  *rfs = fs;
  6137  000884  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6138  000888  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6139  00088C  C098  FFDE         	movff	find_volume@fs,postinc2
  6140  000890  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;ff.c: 2230:  if (fs->fs_type) {
  6144  000894  C098  FFD9         	movff	find_volume@fs,fsr2l
  6145  000898  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6146  00089C  50DF               	movf	indf2,w,c
  6147  00089E  B4D8               	btfsc	status,2,c
  6148  0008A0  D015               	goto	l5467
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6152  0008A2  EE20 F001          	lfsr	2,1
  6153  0008A6  5198               	movf	find_volume@fs& (0+255),w,b
  6154  0008A8  26D9               	addwf	fsr2l,f,c
  6155  0008AA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6156  0008AC  22DA               	addwfc	fsr2h,f,c
  6157  0008AE  50DF               	movf	indf2,w,c
  6158  0008B0  ECE6  F02A         	call	_disk_status
  6159  0008B4  0100               	movlb	0	; () banked
  6160  0008B6  6F8C               	movwf	find_volume@stat& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6164  0008B8  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6165  0008BA  D008               	goto	l5467
  6166                           
  6167                           ; BSR set to: 0
  6168  0008BC  5049               	movf	find_volume@wmode,w,c
  6169  0008BE  A4D8               	btfss	status,2,c
  6170                           
  6171                           ; BSR set to: 0
  6172  0008C0  A58C               	btfss	find_volume@stat& (0+255),2,b
  6173  0008C2  D002               	goto	l5463
  6174  0008C4                     u7280:
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6178  0008C4  0E0A               	movlw	10
  6179  0008C6  0012               	return	
  6180  0008C8                     l5463:
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;ff.c: 2235:    return FR_OK;
  6184  0008C8  0E00               	movlw	0
  6185  0008CA  0012               	return	
  6186  0008CC                     l5467:
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;ff.c: 2242:  fs->fs_type = 0;
  6190  0008CC  C098  FFD9         	movff	find_volume@fs,fsr2l
  6191  0008D0  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6192  0008D4  0E00               	movlw	0
  6193  0008D6  6EDF               	movwf	indf2,c
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6197  0008D8  EE20 F001          	lfsr	2,1
  6198  0008DC  5198               	movf	find_volume@fs& (0+255),w,b
  6199  0008DE  26D9               	addwf	fsr2l,f,c
  6200  0008E0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6201  0008E2  22DA               	addwfc	fsr2h,f,c
  6202  0008E4  C080  FFDF         	movff	find_volume@vol,indf2
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6206  0008E8  EE20 F001          	lfsr	2,1
  6207  0008EC  5198               	movf	find_volume@fs& (0+255),w,b
  6208  0008EE  26D9               	addwf	fsr2l,f,c
  6209  0008F0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6210  0008F2  22DA               	addwfc	fsr2h,f,c
  6211  0008F4  50DF               	movf	indf2,w,c
  6212  0008F6  ECCB  F01D         	call	_disk_initialize
  6213  0008FA  0100               	movlb	0	; () banked
  6214  0008FC  6F8C               	movwf	find_volume@stat& (0+255),b
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;ff.c: 2245:  if (stat & 0x01)
  6218  0008FE  A18C               	btfss	find_volume@stat& (0+255),0,b
  6219  000900  D002               	goto	l5479
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;ff.c: 2246:   return FR_NOT_READY;
  6223  000902  0E03               	movlw	3
  6224  000904  0012               	return	
  6225  000906                     l5479:
  6226                           
  6227                           ; BSR set to: 0
  6228  000906  5049               	movf	find_volume@wmode,w,c
  6229  000908  B4D8               	btfsc	status,2,c
  6230  00090A  D002               	goto	l5487
  6231                           
  6232                           ; BSR set to: 0
  6233  00090C  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6234  00090E  D7DA               	goto	u7280
  6235  000910                     l5487:
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;ff.c: 2254:  bsect = 0;
  6239  000910  0E00               	movlw	0
  6240  000912  6F91               	movwf	find_volume@bsect& (0+255),b
  6241  000914  0E00               	movlw	0
  6242  000916  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6243  000918  0E00               	movlw	0
  6244  00091A  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6245  00091C  0E00               	movlw	0
  6246  00091E  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6250  000920  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6251  000924  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6252  000928  0E00               	movlw	0
  6253  00092A  6E3D               	movwf	check_fs@sect,c
  6254  00092C  0E00               	movlw	0
  6255  00092E  6E3E               	movwf	check_fs@sect+1,c
  6256  000930  0E00               	movlw	0
  6257  000932  6E3F               	movwf	check_fs@sect+2,c
  6258  000934  0E00               	movlw	0
  6259  000936  6E40               	movwf	check_fs@sect+3,c
  6260  000938  EC59  F024         	call	_check_fs	;wreg free
  6261  00093C  0100               	movlb	0	; () banked
  6262  00093E  6F97               	movwf	find_volume@fmt& (0+255),b
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6266  000940  0597               	decf	find_volume@fmt& (0+255),w,b
  6267  000942  A4D8               	btfss	status,2,c
  6268  000944  D0AE               	goto	u7380
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6272  000946  0E00               	movlw	0
  6273  000948  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6274  00094A  0E00               	movlw	0
  6275  00094C  6F95               	movwf	find_volume@i& (0+255),b
  6276  00094E                     l5499:
  6277                           
  6278                           ; BSR set to: 0
  6279  00094E  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6280  000950  E15A               	bnz	l5515
  6281  000952  0E04               	movlw	4
  6282  000954  5D95               	subwf	find_volume@i& (0+255),w,b
  6283  000956  B0D8               	btfsc	status,0,c
  6284  000958  D056               	goto	l5515
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6288  00095A  C095  F04A         	movff	find_volume@i,??_find_volume
  6289  00095E  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6290  000962  3A4A               	swapf	??_find_volume,f,c
  6291  000964  3A4B               	swapf	??_find_volume+1,f,c
  6292  000966  0EF0               	movlw	240
  6293  000968  164B               	andwf	??_find_volume+1,f,c
  6294  00096A  504A               	movf	??_find_volume,w,c
  6295  00096C  0B0F               	andlw	15
  6296  00096E  124B               	iorwf	??_find_volume+1,f,c
  6297  000970  0EF0               	movlw	240
  6298  000972  164A               	andwf	??_find_volume,f,c
  6299  000974  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6300  000978  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6301  00097C  504A               	movf	??_find_volume,w,c
  6302  00097E  264C               	addwf	??_find_volume+2,f,c
  6303  000980  504B               	movf	??_find_volume+1,w,c
  6304  000982  224D               	addwfc	??_find_volume+3,f,c
  6305  000984  0EEC               	movlw	236
  6306  000986  244C               	addwf	??_find_volume+2,w,c
  6307  000988  6F7A               	movwf	find_volume@pt& (0+255),b
  6308  00098A  0E01               	movlw	1
  6309  00098C  204D               	addwfc	??_find_volume+3,w,c
  6310  00098E  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6314  000990  EE20 F004          	lfsr	2,4
  6315  000994  517A               	movf	find_volume@pt& (0+255),w,b
  6316  000996  26D9               	addwf	fsr2l,f,c
  6317  000998  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6318  00099A  22DA               	addwfc	fsr2h,f,c
  6319  00099C  50DF               	movf	indf2,w,c
  6320  00099E  A4D8               	btfss	status,2,c
  6321  0009A0  D009               	goto	l5509
  6322                           
  6323                           ; BSR set to: 0
  6324  0009A2  0E00               	movlw	0
  6325  0009A4  6F70               	movwf	_find_volume$879& (0+255),b
  6326  0009A6  0E00               	movlw	0
  6327  0009A8  6F71               	movwf	(_find_volume$879+1)& (0+255),b
  6328  0009AA  0E00               	movlw	0
  6329  0009AC  6F72               	movwf	(_find_volume$879+2)& (0+255),b
  6330  0009AE  0E00               	movlw	0
  6331  0009B0  6F73               	movwf	(_find_volume$879+3)& (0+255),b
  6332  0009B2  D00E               	goto	l586
  6333  0009B4                     l5509:
  6334                           
  6335                           ; BSR set to: 0
  6336  0009B4  EE20 F008          	lfsr	2,8
  6337  0009B8  517A               	movf	find_volume@pt& (0+255),w,b
  6338  0009BA  26D9               	addwf	fsr2l,f,c
  6339  0009BC  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6340  0009BE  22DA               	addwfc	fsr2h,f,c
  6341  0009C0  CFDE F070          	movff	postinc2,_find_volume$879
  6342  0009C4  CFDE F071          	movff	postinc2,_find_volume$879+1
  6343  0009C8  CFDE F072          	movff	postinc2,_find_volume$879+2
  6344  0009CC  CFDE F073          	movff	postinc2,_find_volume$879+3
  6345  0009D0                     l586:
  6346                           
  6347                           ; BSR set to: 0
  6348  0009D0  0E60               	movlw	low find_volume@br
  6349  0009D2  6E4A               	movwf	??_find_volume& (0+255),c
  6350  0009D4  0E00               	movlw	high find_volume@br
  6351  0009D6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6352  0009D8  90D8               	bcf	status,0,c
  6353  0009DA  3595               	rlcf	find_volume@i& (0+255),w,b
  6354  0009DC  6ED9               	movwf	fsr2l,c
  6355  0009DE  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6356  0009E0  6EDA               	movwf	fsr2h,c
  6357  0009E2  90D8               	bcf	status,0,c
  6358  0009E4  36D9               	rlcf	fsr2l,f,c
  6359  0009E6  36DA               	rlcf	fsr2h,f,c
  6360  0009E8  504A               	movf	??_find_volume,w,c
  6361  0009EA  26D9               	addwf	fsr2l,f,c
  6362  0009EC  504B               	movf	??_find_volume+1,w,c
  6363  0009EE  22DA               	addwfc	fsr2h,f,c
  6364  0009F0  C070  FFDE         	movff	_find_volume$879,postinc2
  6365  0009F4  C071  FFDE         	movff	_find_volume$879+1,postinc2
  6366  0009F8  C072  FFDE         	movff	_find_volume$879+2,postinc2
  6367  0009FC  C073  FFDE         	movff	_find_volume$879+3,postinc2
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;ff.c: 2260:   }
  6371  000A00  4B95               	infsnz	find_volume@i& (0+255),f,b
  6372  000A02  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6373  000A04  D7A4               	goto	l5499
  6374  000A06                     l5515:
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;ff.c: 2261:   i = 0;
  6378  000A06  0E00               	movlw	0
  6379  000A08  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6380  000A0A  0E00               	movlw	0
  6381  000A0C  6F95               	movwf	find_volume@i& (0+255),b
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;ff.c: 2262:   if (i) i--;
  6385  000A0E  5195               	movf	find_volume@i& (0+255),w,b
  6386  000A10  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6387  000A12  B4D8               	btfsc	status,2,c
  6388  000A14  D003               	goto	l5521
  6389                           
  6390                           ; BSR set to: 0
  6391  000A16  0795               	decf	find_volume@i& (0+255),f,b
  6392  000A18  A0D8               	btfss	status,0,c
  6393  000A1A  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6394  000A1C                     l5521:
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;ff.c: 2264:    bsect = br[i];
  6398  000A1C  0E60               	movlw	low find_volume@br
  6399  000A1E  6E4A               	movwf	??_find_volume& (0+255),c
  6400  000A20  0E00               	movlw	high find_volume@br
  6401  000A22  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6402  000A24  90D8               	bcf	status,0,c
  6403  000A26  3595               	rlcf	find_volume@i& (0+255),w,b
  6404  000A28  6ED9               	movwf	fsr2l,c
  6405  000A2A  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6406  000A2C  6EDA               	movwf	fsr2h,c
  6407  000A2E  90D8               	bcf	status,0,c
  6408  000A30  36D9               	rlcf	fsr2l,f,c
  6409  000A32  36DA               	rlcf	fsr2h,f,c
  6410  000A34  504A               	movf	??_find_volume,w,c
  6411  000A36  26D9               	addwf	fsr2l,f,c
  6412  000A38  504B               	movf	??_find_volume+1,w,c
  6413  000A3A  22DA               	addwfc	fsr2h,f,c
  6414  000A3C  CFDE F091          	movff	postinc2,find_volume@bsect
  6415  000A40  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6416  000A44  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6417  000A48  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6421  000A4C  5191               	movf	find_volume@bsect& (0+255),w,b
  6422  000A4E  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6423  000A50  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6424  000A52  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6425  000A54  A4D8               	btfss	status,2,c
  6426  000A56  D005               	goto	l5527
  6427                           
  6428                           ; BSR set to: 0
  6429  000A58  0E00               	movlw	0
  6430  000A5A  6F75               	movwf	(_find_volume$880+1)& (0+255),b
  6431  000A5C  0E02               	movlw	2
  6432  000A5E  6F74               	movwf	_find_volume$880& (0+255),b
  6433  000A60  D013               	goto	l5529
  6434  000A62                     l5527:
  6435                           
  6436                           ; BSR set to: 0
  6437  000A62  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6438  000A66  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6439  000A6A  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6440  000A6E  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6441  000A72  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6442  000A76  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6443  000A7A  EC59  F024         	call	_check_fs	;wreg free
  6444  000A7E  6E4A               	movwf	??_find_volume& (0+255),c
  6445  000A80  504A               	movf	??_find_volume,w,c
  6446  000A82  0100               	movlb	0	; () banked
  6447  000A84  6F74               	movwf	_find_volume$880& (0+255),b
  6448  000A86  6B75               	clrf	(_find_volume$880+1)& (0+255),b
  6449  000A88                     l5529:
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6453  000A88  C074  F097         	movff	_find_volume$880,find_volume@fmt
  6454                           
  6455                           ; BSR set to: 0
  6456  000A8C  5197               	movf	find_volume@fmt& (0+255),w,b
  6457  000A8E  B4D8               	btfsc	status,2,c
  6458  000A90  D008               	goto	u7380
  6459                           
  6460                           ; BSR set to: 0
  6461  000A92  4B95               	infsnz	find_volume@i& (0+255),f,b
  6462  000A94  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6463  000A96  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6464  000A98  E104               	bnz	u7380
  6465  000A9A  0E04               	movlw	4
  6466  000A9C  5D95               	subwf	find_volume@i& (0+255),w,b
  6467  000A9E  A0D8               	btfss	status,0,c
  6468  000AA0  D7BD               	goto	l5521
  6469  000AA2                     u7380:
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6473  000AA2  0E03               	movlw	3
  6474  000AA4  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6475  000AA6  A4D8               	btfss	status,2,c
  6476  000AA8  D002               	goto	l5541
  6477                           
  6478                           ; BSR set to: 0
  6479  000AAA  0E01               	movlw	1
  6480  000AAC  0012               	return	
  6481  000AAE                     l5541:
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6485  000AAE  5197               	movf	find_volume@fmt& (0+255),w,b
  6486  000AB0  B4D8               	btfsc	status,2,c
  6487  000AB2  D002               	goto	l5547
  6488  000AB4                     u7400:
  6489  000AB4                     l5543:
  6490                           
  6491                           ; BSR set to: 0
  6492  000AB4  0E0D               	movlw	13
  6493  000AB6  0012               	return	
  6494  000AB8                     l5547:
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6498  000AB8  EE20 F039          	lfsr	2,57
  6499  000ABC  5198               	movf	find_volume@fs& (0+255),w,b
  6500  000ABE  26D9               	addwf	fsr2l,f,c
  6501  000AC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6502  000AC2  22DA               	addwfc	fsr2h,f,c
  6503  000AC4  50DE               	movf	postinc2,w,c
  6504  000AC6  E1F6               	bnz	l5543
  6505  000AC8  0E02               	movlw	2
  6506  000ACA  18DE               	xorwf	postinc2,w,c
  6507  000ACC  A4D8               	btfss	status,2,c
  6508  000ACE  D7F2               	goto	u7400
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6512  000AD0  EE20 F044          	lfsr	2,68
  6513  000AD4  5198               	movf	find_volume@fs& (0+255),w,b
  6514  000AD6  26D9               	addwf	fsr2l,f,c
  6515  000AD8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6516  000ADA  22DA               	addwfc	fsr2h,f,c
  6517  000ADC  CFDE F04A          	movff	postinc2,??_find_volume
  6518  000AE0  CFDD F04B          	movff	postdec2,??_find_volume+1
  6519  000AE4  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6520  000AE8  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6521  000AEC  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6522  000AEE  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6526  000AF0  518D               	movf	find_volume@fasize& (0+255),w,b
  6527  000AF2  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6528  000AF4  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6529  000AF6  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6530  000AF8  A4D8               	btfss	status,2,c
  6531  000AFA  D00E               	goto	l599
  6532                           
  6533                           ; BSR set to: 0
  6534  000AFC  EE20 F052          	lfsr	2,82
  6535  000B00  5198               	movf	find_volume@fs& (0+255),w,b
  6536  000B02  26D9               	addwf	fsr2l,f,c
  6537  000B04  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6538  000B06  22DA               	addwfc	fsr2h,f,c
  6539  000B08  CFDE F08D          	movff	postinc2,find_volume@fasize
  6540  000B0C  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6541  000B10  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6542  000B14  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6543  000B18                     l599:
  6544                           
  6545                           ; BSR set to: 0
  6546                           ;ff.c: 2278:  fs->fsize = fasize;
  6547  000B18  EE20 F016          	lfsr	2,22
  6548  000B1C  5198               	movf	find_volume@fs& (0+255),w,b
  6549  000B1E  26D9               	addwf	fsr2l,f,c
  6550  000B20  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6551  000B22  22DA               	addwfc	fsr2h,f,c
  6552  000B24  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6553  000B28  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6554  000B2C  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6555  000B30  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6559  000B34  EE20 F03E          	lfsr	2,62
  6560  000B38  5198               	movf	find_volume@fs& (0+255),w,b
  6561  000B3A  26D9               	addwf	fsr2l,f,c
  6562  000B3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6563  000B3E  22DA               	addwfc	fsr2h,f,c
  6564  000B40  EE10 F003          	lfsr	1,3
  6565  000B44  5198               	movf	find_volume@fs& (0+255),w,b
  6566  000B46  26E1               	addwf	fsr1l,f,c
  6567  000B48  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6568  000B4A  22E2               	addwfc	fsr1h,f,c
  6569  000B4C  CFDF FFE7          	movff	indf2,indf1
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6573  000B50  EE20 F003          	lfsr	2,3
  6574  000B54  5198               	movf	find_volume@fs& (0+255),w,b
  6575  000B56  26D9               	addwf	fsr2l,f,c
  6576  000B58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6577  000B5A  22DA               	addwfc	fsr2h,f,c
  6578  000B5C  04DE               	decf	postinc2,w,c
  6579  000B5E  B4D8               	btfsc	status,2,c
  6580  000B60  D00A               	goto	l5569
  6581                           
  6582                           ; BSR set to: 0
  6583  000B62  EE20 F003          	lfsr	2,3
  6584  000B66  5198               	movf	find_volume@fs& (0+255),w,b
  6585  000B68  26D9               	addwf	fsr2l,f,c
  6586  000B6A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6587  000B6C  22DA               	addwfc	fsr2h,f,c
  6588  000B6E  0E02               	movlw	2
  6589  000B70  18DE               	xorwf	postinc2,w,c
  6590  000B72  A4D8               	btfss	status,2,c
  6591  000B74  D79F               	goto	u7400
  6592  000B76                     l5569:
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6596  000B76  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6597  000B7A  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6598  000B7E  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6599  000B82  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6600  000B86  EE20 F003          	lfsr	2,3
  6601  000B8A  5198               	movf	find_volume@fs& (0+255),w,b
  6602  000B8C  26D9               	addwf	fsr2l,f,c
  6603  000B8E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6604  000B90  22DA               	addwfc	fsr2h,f,c
  6605  000B92  50DF               	movf	indf2,w,c
  6606  000B94  6E4A               	movwf	??_find_volume& (0+255),c
  6607  000B96  504A               	movf	??_find_volume,w,c
  6608  000B98  6E05               	movwf	___lmul@multiplicand,c
  6609  000B9A  6A06               	clrf	___lmul@multiplicand+1,c
  6610  000B9C  6A07               	clrf	___lmul@multiplicand+2,c
  6611  000B9E  6A08               	clrf	___lmul@multiplicand+3,c
  6612  000BA0  ECB1  F029         	call	___lmul	;wreg free
  6613  000BA4  C001  F08D         	movff	?___lmul,find_volume@fasize
  6614  000BA8  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6615  000BAC  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6616  000BB0  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6617                           
  6618                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6619  000BB4  0100               	movlb	0	; () banked
  6620  000BB6  EE20 F03B          	lfsr	2,59
  6621  000BBA  5198               	movf	find_volume@fs& (0+255),w,b
  6622  000BBC  26D9               	addwf	fsr2l,f,c
  6623  000BBE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6624  000BC0  22DA               	addwfc	fsr2h,f,c
  6625  000BC2  EE10 F002          	lfsr	1,2
  6626  000BC6  5198               	movf	find_volume@fs& (0+255),w,b
  6627  000BC8  26E1               	addwf	fsr1l,f,c
  6628  000BCA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6629  000BCC  22E2               	addwfc	fsr1h,f,c
  6630  000BCE  CFDF FFE7          	movff	indf2,indf1
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6634  000BD2  EE20 F002          	lfsr	2,2
  6635  000BD6  5198               	movf	find_volume@fs& (0+255),w,b
  6636  000BD8  26D9               	addwf	fsr2l,f,c
  6637  000BDA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6638  000BDC  22DA               	addwfc	fsr2h,f,c
  6639  000BDE  50DF               	movf	indf2,w,c
  6640  000BE0  B4D8               	btfsc	status,2,c
  6641  000BE2  D768               	goto	u7400
  6642                           
  6643                           ; BSR set to: 0
  6644  000BE4  0EFF               	movlw	255
  6645  000BE6  6E4A               	movwf	??_find_volume& (0+255),c
  6646  000BE8  0EFF               	movlw	255
  6647  000BEA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6648  000BEC  EE20 F002          	lfsr	2,2
  6649  000BF0  5198               	movf	find_volume@fs& (0+255),w,b
  6650  000BF2  26D9               	addwf	fsr2l,f,c
  6651  000BF4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6652  000BF6  22DA               	addwfc	fsr2h,f,c
  6653  000BF8  50DF               	movf	indf2,w,c
  6654  000BFA  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6655  000BFC  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6656  000BFE  504A               	movf	??_find_volume,w,c
  6657  000C00  264C               	addwf	??_find_volume+2,f,c
  6658  000C02  504B               	movf	??_find_volume+1,w,c
  6659  000C04  224D               	addwfc	??_find_volume+3,f,c
  6660  000C06  EE20 F002          	lfsr	2,2
  6661  000C0A  5198               	movf	find_volume@fs& (0+255),w,b
  6662  000C0C  26D9               	addwf	fsr2l,f,c
  6663  000C0E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6664  000C10  22DA               	addwfc	fsr2h,f,c
  6665  000C12  50DF               	movf	indf2,w,c
  6666  000C14  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6667  000C16  504E               	movf	??_find_volume+4,w,c
  6668  000C18  164C               	andwf	??_find_volume+2,f,c
  6669  000C1A  0E00               	movlw	0
  6670  000C1C  164D               	andwf	??_find_volume+3,f,c
  6671  000C1E  504C               	movf	??_find_volume+2,w,c
  6672  000C20  104D               	iorwf	??_find_volume+3,w,c
  6673  000C22  A4D8               	btfss	status,2,c
  6674  000C24  D747               	goto	u7400
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6678  000C26  EE20 F03F          	lfsr	2,63
  6679  000C2A  5198               	movf	find_volume@fs& (0+255),w,b
  6680  000C2C  26D9               	addwf	fsr2l,f,c
  6681  000C2E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6682  000C30  22DA               	addwfc	fsr2h,f,c
  6683  000C32  EE10 F008          	lfsr	1,8
  6684  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  6685  000C38  26E1               	addwf	fsr1l,f,c
  6686  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6687  000C3C  22E2               	addwfc	fsr1h,f,c
  6688  000C3E  CFDE FFE6          	movff	postinc2,postinc1
  6689  000C42  CFDD FFE5          	movff	postdec2,postdec1
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6693  000C46  EE20 F008          	lfsr	2,8
  6694  000C4A  5198               	movf	find_volume@fs& (0+255),w,b
  6695  000C4C  26D9               	addwf	fsr2l,f,c
  6696  000C4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6697  000C50  22DA               	addwfc	fsr2h,f,c
  6698  000C52  CFDE F04A          	movff	postinc2,??_find_volume
  6699  000C56  CFDD F04B          	movff	postdec2,??_find_volume+1
  6700  000C5A  0E0F               	movlw	15
  6701  000C5C  164A               	andwf	??_find_volume,f,c
  6702  000C5E  0E00               	movlw	0
  6703  000C60  164B               	andwf	??_find_volume+1,f,c
  6704  000C62  504A               	movf	??_find_volume,w,c
  6705  000C64  104B               	iorwf	??_find_volume+1,w,c
  6706  000C66  A4D8               	btfss	status,2,c
  6707  000C68  D725               	goto	u7400
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6711  000C6A  EE20 F041          	lfsr	2,65
  6712  000C6E  5198               	movf	find_volume@fs& (0+255),w,b
  6713  000C70  26D9               	addwf	fsr2l,f,c
  6714  000C72  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6715  000C74  22DA               	addwfc	fsr2h,f,c
  6716  000C76  CFDE F04A          	movff	postinc2,??_find_volume
  6717  000C7A  CFDD F04B          	movff	postdec2,??_find_volume+1
  6718  000C7E  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6719  000C82  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6720  000C86  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6721  000C88  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6725  000C8A  5184               	movf	find_volume@tsect& (0+255),w,b
  6726  000C8C  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6727  000C8E  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6728  000C90  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6729  000C92  A4D8               	btfss	status,2,c
  6730  000C94  D00E               	goto	l605
  6731                           
  6732                           ; BSR set to: 0
  6733  000C96  EE20 F04E          	lfsr	2,78
  6734  000C9A  5198               	movf	find_volume@fs& (0+255),w,b
  6735  000C9C  26D9               	addwf	fsr2l,f,c
  6736  000C9E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6737  000CA0  22DA               	addwfc	fsr2h,f,c
  6738  000CA2  CFDE F084          	movff	postinc2,find_volume@tsect
  6739  000CA6  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6740  000CAA  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6741  000CAE  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6742  000CB2                     l605:
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6746  000CB2  EE20 F03C          	lfsr	2,60
  6747  000CB6  5198               	movf	find_volume@fs& (0+255),w,b
  6748  000CB8  26D9               	addwf	fsr2l,f,c
  6749  000CBA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6750  000CBC  22DA               	addwfc	fsr2h,f,c
  6751  000CBE  CFDE F082          	movff	postinc2,find_volume@nrsv
  6752  000CC2  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6756  000CC6  5182               	movf	find_volume@nrsv& (0+255),w,b
  6757  000CC8  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6758  000CCA  B4D8               	btfsc	status,2,c
  6759  000CCC  D6F3               	goto	u7400
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6763  000CCE  EE20 F008          	lfsr	2,8
  6764  000CD2  5198               	movf	find_volume@fs& (0+255),w,b
  6765  000CD4  26D9               	addwf	fsr2l,f,c
  6766  000CD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6767  000CD8  22DA               	addwfc	fsr2h,f,c
  6768  000CDA  CFDE F04A          	movff	postinc2,??_find_volume
  6769  000CDE  CFDD F04B          	movff	postdec2,??_find_volume+1
  6770  000CE2  0E04               	movlw	4
  6771  000CE4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6772  000CE6                     u7505:
  6773  000CE6  90D8               	bcf	status,0,c
  6774  000CE8  324B               	rrcf	??_find_volume+1,f,c
  6775  000CEA  324A               	rrcf	??_find_volume,f,c
  6776  000CEC  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6777  000CEE  D7FB               	goto	u7505
  6778  000CF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  6779  000CF2  244A               	addwf	??_find_volume,w,c
  6780  000CF4  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6781  000CF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6782  000CF8  204B               	addwfc	??_find_volume+1,w,c
  6783  000CFA  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6784  000CFC  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6785  000CFE  B0D8               	btfsc	status,0,c
  6786  000D00  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6787  000D02  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6788  000D04  518D               	movf	find_volume@fasize& (0+255),w,b
  6789  000D06  244D               	addwf	??_find_volume+3,w,c
  6790  000D08  6F7C               	movwf	find_volume@sysect& (0+255),b
  6791  000D0A  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6792  000D0C  204E               	addwfc	??_find_volume+4,w,c
  6793  000D0E  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6794  000D10  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6795  000D12  204F               	addwfc	??_find_volume+5,w,c
  6796  000D14  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6797  000D16  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6798  000D18  2050               	addwfc	??_find_volume+6,w,c
  6799  000D1A  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6803  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  6804  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6805  000D20  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6806  000D22  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6807  000D24  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6808  000D26  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6809  000D28  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6810  000D2A  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6811  000D2C  A0D8               	btfss	status,0,c
  6812  000D2E  D6C2               	goto	u7400
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6816  000D30  517C               	movf	find_volume@sysect& (0+255),w,b
  6817  000D32  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6818  000D34  6E01               	movwf	___lldiv@dividend,c
  6819  000D36  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6820  000D38  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6821  000D3A  6E02               	movwf	___lldiv@dividend+1,c
  6822  000D3C  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6823  000D3E  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6824  000D40  6E03               	movwf	___lldiv@dividend+2,c
  6825  000D42  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6826  000D44  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6827  000D46  6E04               	movwf	___lldiv@dividend+3,c
  6828  000D48  EE20 F002          	lfsr	2,2
  6829  000D4C  5198               	movf	find_volume@fs& (0+255),w,b
  6830  000D4E  26D9               	addwf	fsr2l,f,c
  6831  000D50  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6832  000D52  22DA               	addwfc	fsr2h,f,c
  6833  000D54  50DF               	movf	indf2,w,c
  6834  000D56  6E4A               	movwf	??_find_volume& (0+255),c
  6835  000D58  504A               	movf	??_find_volume,w,c
  6836  000D5A  6E05               	movwf	___lldiv@divisor,c
  6837  000D5C  6A06               	clrf	___lldiv@divisor+1,c
  6838  000D5E  6A07               	clrf	___lldiv@divisor+2,c
  6839  000D60  6A08               	clrf	___lldiv@divisor+3,c
  6840  000D62  EC1B  F028         	call	___lldiv	;wreg free
  6841  000D66  C001  F088         	movff	?___lldiv,find_volume@nclst
  6842  000D6A  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6843  000D6E  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6844  000D72  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6845                           
  6846                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6847  000D76  0100               	movlb	0	; () banked
  6848  000D78  5188               	movf	find_volume@nclst& (0+255),w,b
  6849  000D7A  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  6850  000D7C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6851  000D7E  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  6852  000D80  B4D8               	btfsc	status,2,c
  6853  000D82  D698               	goto	u7400
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;ff.c: 2304:  fmt = 1;
  6857  000D84  0E01               	movlw	1
  6858  000D86  6F97               	movwf	find_volume@fmt& (0+255),b
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  6862  000D88  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6863  000D8A  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6864  000D8C  E106               	bnz	u7530
  6865  000D8E  0EF6               	movlw	246
  6866  000D90  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6867  000D92  0E0F               	movlw	15
  6868  000D94  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6869  000D96  A0D8               	btfss	status,0,c
  6870  000D98  D002               	goto	l5623
  6871  000D9A                     u7530:
  6872                           
  6873                           ; BSR set to: 0
  6874  000D9A  0E02               	movlw	2
  6875  000D9C  6F97               	movwf	find_volume@fmt& (0+255),b
  6876  000D9E                     l5623:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  6880  000D9E  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6881  000DA0  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6882  000DA2  E106               	bnz	u7540
  6883  000DA4  0EF6               	movlw	246
  6884  000DA6  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6885  000DA8  0EFF               	movlw	255
  6886  000DAA  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6887  000DAC  A0D8               	btfss	status,0,c
  6888  000DAE  D002               	goto	l5627
  6889  000DB0                     u7540:
  6890                           
  6891                           ; BSR set to: 0
  6892  000DB0  0E03               	movlw	3
  6893  000DB2  6F97               	movwf	find_volume@fmt& (0+255),b
  6894  000DB4                     l5627:
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  6898  000DB4  0E02               	movlw	2
  6899  000DB6  2588               	addwf	find_volume@nclst& (0+255),w,b
  6900  000DB8  6E4A               	movwf	??_find_volume& (0+255),c
  6901  000DBA  0E00               	movlw	0
  6902  000DBC  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  6903  000DBE  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6904  000DC0  0E00               	movlw	0
  6905  000DC2  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  6906  000DC4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6907  000DC6  0E00               	movlw	0
  6908  000DC8  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  6909  000DCA  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6910  000DCC  EE20 F012          	lfsr	2,18
  6911  000DD0  5198               	movf	find_volume@fs& (0+255),w,b
  6912  000DD2  26D9               	addwf	fsr2l,f,c
  6913  000DD4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6914  000DD6  22DA               	addwfc	fsr2h,f,c
  6915  000DD8  C04A  FFDE         	movff	??_find_volume,postinc2
  6916  000DDC  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6917  000DE0  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6918  000DE4  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;ff.c: 2310:  fs->volbase = bsect;
  6922  000DE8  EE20 F01A          	lfsr	2,26
  6923  000DEC  5198               	movf	find_volume@fs& (0+255),w,b
  6924  000DEE  26D9               	addwf	fsr2l,f,c
  6925  000DF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6926  000DF2  22DA               	addwfc	fsr2h,f,c
  6927  000DF4  C091  FFDE         	movff	find_volume@bsect,postinc2
  6928  000DF8  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  6929  000DFC  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  6930  000E00  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  6934  000E04  5182               	movf	find_volume@nrsv& (0+255),w,b
  6935  000E06  2591               	addwf	find_volume@bsect& (0+255),w,b
  6936  000E08  6E4A               	movwf	??_find_volume& (0+255),c
  6937  000E0A  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6938  000E0C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6939  000E0E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6940  000E10  0E00               	movlw	0
  6941  000E12  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6942  000E14  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6943  000E16  0E00               	movlw	0
  6944  000E18  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6945  000E1A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6946  000E1C  EE20 F01E          	lfsr	2,30
  6947  000E20  5198               	movf	find_volume@fs& (0+255),w,b
  6948  000E22  26D9               	addwf	fsr2l,f,c
  6949  000E24  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6950  000E26  22DA               	addwfc	fsr2h,f,c
  6951  000E28  C04A  FFDE         	movff	??_find_volume,postinc2
  6952  000E2C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6953  000E30  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6954  000E34  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;ff.c: 2312:  fs->database = bsect + sysect;
  6958  000E38  517C               	movf	find_volume@sysect& (0+255),w,b
  6959  000E3A  2591               	addwf	find_volume@bsect& (0+255),w,b
  6960  000E3C  6E4A               	movwf	??_find_volume& (0+255),c
  6961  000E3E  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6962  000E40  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6963  000E42  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6964  000E44  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6965  000E46  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6966  000E48  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6967  000E4A  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6968  000E4C  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6969  000E4E  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6970  000E50  EE20 F026          	lfsr	2,38
  6971  000E54  5198               	movf	find_volume@fs& (0+255),w,b
  6972  000E56  26D9               	addwf	fsr2l,f,c
  6973  000E58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6974  000E5A  22DA               	addwfc	fsr2h,f,c
  6975  000E5C  C04A  FFDE         	movff	??_find_volume,postinc2
  6976  000E60  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6977  000E64  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6978  000E68  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;ff.c: 2313:  if (fmt == 3) {
  6982  000E6C  0E03               	movlw	3
  6983  000E6E  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6984  000E70  A4D8               	btfss	status,2,c
  6985  000E72  D03D               	goto	l5647
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  6989  000E74  EE20 F008          	lfsr	2,8
  6990  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  6991  000E7A  26D9               	addwf	fsr2l,f,c
  6992  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6993  000E7E  22DA               	addwfc	fsr2h,f,c
  6994  000E80  50DE               	movf	postinc2,w,c
  6995  000E82  10DE               	iorwf	postinc2,w,c
  6996  000E84  A4D8               	btfss	status,2,c
  6997  000E86  D616               	goto	u7400
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  7001  000E88  EE20 F05A          	lfsr	2,90
  7002  000E8C  5198               	movf	find_volume@fs& (0+255),w,b
  7003  000E8E  26D9               	addwf	fsr2l,f,c
  7004  000E90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7005  000E92  22DA               	addwfc	fsr2h,f,c
  7006  000E94  EE10 F022          	lfsr	1,34
  7007  000E98  5198               	movf	find_volume@fs& (0+255),w,b
  7008  000E9A  26E1               	addwf	fsr1l,f,c
  7009  000E9C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7010  000E9E  22E2               	addwfc	fsr1h,f,c
  7011  000EA0  CFDE FFE6          	movff	postinc2,postinc1
  7012  000EA4  CFDE FFE6          	movff	postinc2,postinc1
  7013  000EA8  CFDE FFE6          	movff	postinc2,postinc1
  7014  000EAC  CFDE FFE6          	movff	postinc2,postinc1
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  7018  000EB0  EE20 F012          	lfsr	2,18
  7019  000EB4  5198               	movf	find_volume@fs& (0+255),w,b
  7020  000EB6  26D9               	addwf	fsr2l,f,c
  7021  000EB8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7022  000EBA  22DA               	addwfc	fsr2h,f,c
  7023  000EBC  CFDE F04A          	movff	postinc2,??_find_volume
  7024  000EC0  CFDE F04B          	movff	postinc2,??_find_volume+1
  7025  000EC4  CFDE F04C          	movff	postinc2,??_find_volume+2
  7026  000EC8  CFDE F04D          	movff	postinc2,??_find_volume+3
  7027  000ECC  0E02               	movlw	2
  7028  000ECE                     u7575:
  7029  000ECE  90D8               	bcf	status,0,c
  7030  000ED0  364A               	rlcf	??_find_volume,f,c
  7031  000ED2  364B               	rlcf	??_find_volume+1,f,c
  7032  000ED4  364C               	rlcf	??_find_volume+2,f,c
  7033  000ED6  364D               	rlcf	??_find_volume+3,f,c
  7034  000ED8  2EE8               	decfsz	wreg,f,c
  7035  000EDA  D7F9               	goto	u7575
  7036  000EDC  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  7037  000EE0  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  7038  000EE4  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  7039  000EE8  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  7040                           
  7041                           ;ff.c: 2317:  } else {
  7042  000EEC  D091               	goto	l613
  7043  000EEE                     l5647:
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  7047  000EEE  EE20 F008          	lfsr	2,8
  7048  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  7049  000EF4  26D9               	addwf	fsr2l,f,c
  7050  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7051  000EF8  22DA               	addwfc	fsr2h,f,c
  7052  000EFA  50DE               	movf	postinc2,w,c
  7053  000EFC  10DE               	iorwf	postinc2,w,c
  7054  000EFE  B4D8               	btfsc	status,2,c
  7055  000F00  D5D9               	goto	u7400
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  7059  000F02  EE20 F01E          	lfsr	2,30
  7060  000F06  5198               	movf	find_volume@fs& (0+255),w,b
  7061  000F08  26D9               	addwf	fsr2l,f,c
  7062  000F0A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7063  000F0C  22DA               	addwfc	fsr2h,f,c
  7064  000F0E  CFDE F04A          	movff	postinc2,??_find_volume
  7065  000F12  CFDE F04B          	movff	postinc2,??_find_volume+1
  7066  000F16  CFDE F04C          	movff	postinc2,??_find_volume+2
  7067  000F1A  CFDE F04D          	movff	postinc2,??_find_volume+3
  7068  000F1E  518D               	movf	find_volume@fasize& (0+255),w,b
  7069  000F20  244A               	addwf	??_find_volume,w,c
  7070  000F22  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7071  000F24  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7072  000F26  204B               	addwfc	??_find_volume+1,w,c
  7073  000F28  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7074  000F2A  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7075  000F2C  204C               	addwfc	??_find_volume+2,w,c
  7076  000F2E  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7077  000F30  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7078  000F32  204D               	addwfc	??_find_volume+3,w,c
  7079  000F34  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7080  000F36  EE20 F022          	lfsr	2,34
  7081  000F3A  5198               	movf	find_volume@fs& (0+255),w,b
  7082  000F3C  26D9               	addwf	fsr2l,f,c
  7083  000F3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7084  000F40  22DA               	addwfc	fsr2h,f,c
  7085  000F42  C04E  FFDE         	movff	??_find_volume+4,postinc2
  7086  000F46  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7087  000F4A  C050  FFDE         	movff	??_find_volume+6,postinc2
  7088  000F4E  C051  FFDE         	movff	??_find_volume+7,postinc2
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7092  000F52  0E02               	movlw	2
  7093  000F54  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7094  000F56  B4D8               	btfsc	status,2,c
  7095  000F58  D044               	goto	l5659
  7096                           
  7097                           ; BSR set to: 0
  7098  000F5A  EE20 F012          	lfsr	2,18
  7099  000F5E  5198               	movf	find_volume@fs& (0+255),w,b
  7100  000F60  26D9               	addwf	fsr2l,f,c
  7101  000F62  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7102  000F64  22DA               	addwfc	fsr2h,f,c
  7103  000F66  CFDE F04A          	movff	postinc2,??_find_volume
  7104  000F6A  CFDE F04B          	movff	postinc2,??_find_volume+1
  7105  000F6E  CFDE F04C          	movff	postinc2,??_find_volume+2
  7106  000F72  CFDE F04D          	movff	postinc2,??_find_volume+3
  7107  000F76  0E01               	movlw	1
  7108  000F78  144A               	andwf	??_find_volume,w,c
  7109  000F7A  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7110  000F7C  0E00               	movlw	0
  7111  000F7E  144B               	andwf	??_find_volume+1,w,c
  7112  000F80  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7113  000F82  0E00               	movlw	0
  7114  000F84  144C               	andwf	??_find_volume+2,w,c
  7115  000F86  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7116  000F88  0E00               	movlw	0
  7117  000F8A  144D               	andwf	??_find_volume+3,w,c
  7118  000F8C  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7119  000F8E  EE20 F012          	lfsr	2,18
  7120  000F92  5198               	movf	find_volume@fs& (0+255),w,b
  7121  000F94  26D9               	addwf	fsr2l,f,c
  7122  000F96  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7123  000F98  22DA               	addwfc	fsr2h,f,c
  7124  000F9A  CFDE F001          	movff	postinc2,___lmul@multiplier
  7125  000F9E  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7126  000FA2  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7127  000FA6  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7128  000FAA  0E03               	movlw	3
  7129  000FAC  6E05               	movwf	___lmul@multiplicand,c
  7130  000FAE  0E00               	movlw	0
  7131  000FB0  6E06               	movwf	___lmul@multiplicand+1,c
  7132  000FB2  0E00               	movlw	0
  7133  000FB4  6E07               	movwf	___lmul@multiplicand+2,c
  7134  000FB6  0E00               	movlw	0
  7135  000FB8  6E08               	movwf	___lmul@multiplicand+3,c
  7136  000FBA  ECB1  F029         	call	___lmul	;wreg free
  7137  000FBE  90D8               	bcf	status,0,c
  7138  000FC0  3204               	rrcf	?___lmul+3,f,c
  7139  000FC2  3203               	rrcf	?___lmul+2,f,c
  7140  000FC4  3202               	rrcf	?___lmul+1,f,c
  7141  000FC6  3201               	rrcf	?___lmul,f,c
  7142  000FC8  504E               	movf	??_find_volume+4,w,c
  7143  000FCA  2401               	addwf	?___lmul,w,c
  7144  000FCC  0100               	movlb	0	; () banked
  7145  000FCE  6F76               	movwf	find_volume@szbfat& (0+255),b
  7146  000FD0  504F               	movf	??_find_volume+5,w,c
  7147  000FD2  2002               	addwfc	?___lmul+1,w,c
  7148  000FD4  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7149  000FD6  5050               	movf	??_find_volume+6,w,c
  7150  000FD8  2003               	addwfc	?___lmul+2,w,c
  7151  000FDA  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7152  000FDC  5051               	movf	??_find_volume+7,w,c
  7153  000FDE  2004               	addwfc	?___lmul+3,w,c
  7154  000FE0  D016               	goto	L6
  7155  000FE2                     l5659:
  7156                           
  7157                           ; BSR set to: 0
  7158  000FE2  EE20 F012          	lfsr	2,18
  7159  000FE6  5198               	movf	find_volume@fs& (0+255),w,b
  7160  000FE8  26D9               	addwf	fsr2l,f,c
  7161  000FEA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7162  000FEC  22DA               	addwfc	fsr2h,f,c
  7163  000FEE  CFDE F04A          	movff	postinc2,??_find_volume
  7164  000FF2  CFDE F04B          	movff	postinc2,??_find_volume+1
  7165  000FF6  CFDE F04C          	movff	postinc2,??_find_volume+2
  7166  000FFA  CFDE F04D          	movff	postinc2,??_find_volume+3
  7167  000FFE  90D8               	bcf	status,0,c
  7168  001000  344A               	rlcf	??_find_volume,w,c
  7169  001002  6F76               	movwf	find_volume@szbfat& (0+255),b
  7170  001004  344B               	rlcf	??_find_volume+1,w,c
  7171  001006  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7172  001008  344C               	rlcf	??_find_volume+2,w,c
  7173  00100A  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7174  00100C  344D               	rlcf	??_find_volume+3,w,c
  7175  00100E                     L6:
  7176  00100E  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7177  001010                     l613:
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7181  001010  0EFF               	movlw	255
  7182  001012  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7183  001014  6E4A               	movwf	??_find_volume& (0+255),c
  7184  001016  0E01               	movlw	1
  7185  001018  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7186  00101A  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7187  00101C  0E00               	movlw	0
  7188  00101E  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7189  001020  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7190  001022  0E00               	movlw	0
  7191  001024  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7192  001026  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7193  001028  0E0A               	movlw	10
  7194  00102A  D005               	goto	u7600
  7195  00102C                     u7605:
  7196  00102C  90D8               	bcf	status,0,c
  7197  00102E  324D               	rrcf	??_find_volume+3,f,c
  7198  001030  324C               	rrcf	??_find_volume+2,f,c
  7199  001032  324B               	rrcf	??_find_volume+1,f,c
  7200  001034  324A               	rrcf	??_find_volume,f,c
  7201  001036                     u7600:
  7202  001036  2EE8               	decfsz	wreg,f,c
  7203  001038  D7F9               	goto	u7605
  7204  00103A  EE20 F016          	lfsr	2,22
  7205  00103E  5198               	movf	find_volume@fs& (0+255),w,b
  7206  001040  26D9               	addwf	fsr2l,f,c
  7207  001042  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7208  001044  22DA               	addwfc	fsr2h,f,c
  7209  001046  504A               	movf	??_find_volume,w,c
  7210  001048  5CDE               	subwf	postinc2,w,c
  7211  00104A  504B               	movf	??_find_volume+1,w,c
  7212  00104C  58DE               	subwfb	postinc2,w,c
  7213  00104E  504C               	movf	??_find_volume+2,w,c
  7214  001050  58DE               	subwfb	postinc2,w,c
  7215  001052  504D               	movf	??_find_volume+3,w,c
  7216  001054  58DE               	subwfb	postinc2,w,c
  7217  001056  A0D8               	btfss	status,0,c
  7218  001058  D52D               	goto	u7400
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7222  00105A  EE20 F00E          	lfsr	2,14
  7223  00105E  5198               	movf	find_volume@fs& (0+255),w,b
  7224  001060  26D9               	addwf	fsr2l,f,c
  7225  001062  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7226  001064  22DA               	addwfc	fsr2h,f,c
  7227  001066  0EFF               	movlw	255
  7228  001068  6EDE               	movwf	postinc2,c
  7229  00106A  0EFF               	movlw	255
  7230  00106C  6EDE               	movwf	postinc2,c
  7231  00106E  0EFF               	movlw	255
  7232  001070  6EDE               	movwf	postinc2,c
  7233  001072  0EFF               	movlw	255
  7234  001074  6EDD               	movwf	postdec2,c
  7235  001076  52DD               	movf	postdec2,f,c
  7236  001078  52DD               	movf	postdec2,f,c
  7237  00107A  EE10 F00A          	lfsr	1,10
  7238  00107E  5198               	movf	find_volume@fs& (0+255),w,b
  7239  001080  26E1               	addwf	fsr1l,f,c
  7240  001082  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7241  001084  22E2               	addwfc	fsr1h,f,c
  7242  001086  CFDE FFE6          	movff	postinc2,postinc1
  7243  00108A  CFDE FFE6          	movff	postinc2,postinc1
  7244  00108E  CFDE FFE6          	movff	postinc2,postinc1
  7245  001092  CFDE FFE6          	movff	postinc2,postinc1
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7249  001096  EE20 F005          	lfsr	2,5
  7250  00109A  5198               	movf	find_volume@fs& (0+255),w,b
  7251  00109C  26D9               	addwf	fsr2l,f,c
  7252  00109E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7253  0010A0  22DA               	addwfc	fsr2h,f,c
  7254  0010A2  0E80               	movlw	128
  7255  0010A4  6EDF               	movwf	indf2,c
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;ff.c: 2333:  if (fmt == 3
  7259  0010A6  0E03               	movlw	3
  7260  0010A8  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7261  0010AA  A4D8               	btfss	status,2,c
  7262  0010AC  D083               	goto	l5683
  7263                           
  7264                           ; BSR set to: 0
  7265  0010AE  EE20 F05E          	lfsr	2,94
  7266  0010B2  5198               	movf	find_volume@fs& (0+255),w,b
  7267  0010B4  26D9               	addwf	fsr2l,f,c
  7268  0010B6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7269  0010B8  22DA               	addwfc	fsr2h,f,c
  7270  0010BA  04DE               	decf	postinc2,w,c
  7271  0010BC  10DE               	iorwf	postinc2,w,c
  7272  0010BE  A4D8               	btfss	status,2,c
  7273  0010C0  D079               	goto	l5683
  7274                           
  7275                           ; BSR set to: 0
  7276  0010C2  C098  F030         	movff	find_volume@fs,move_window@fs
  7277  0010C6  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7278  0010CA  0E01               	movlw	1
  7279  0010CC  2591               	addwf	find_volume@bsect& (0+255),w,b
  7280  0010CE  6E32               	movwf	move_window@sector,c
  7281  0010D0  0E00               	movlw	0
  7282  0010D2  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7283  0010D4  6E33               	movwf	move_window@sector+1,c
  7284  0010D6  0E00               	movlw	0
  7285  0010D8  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7286  0010DA  6E34               	movwf	move_window@sector+2,c
  7287  0010DC  0E00               	movlw	0
  7288  0010DE  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7289  0010E0  6E35               	movwf	move_window@sector+3,c
  7290  0010E2  EC7E  F027         	call	_move_window	;wreg free
  7291  0010E6  0900               	iorlw	0
  7292  0010E8  A4D8               	btfss	status,2,c
  7293  0010EA  D064               	goto	l5683
  7294                           
  7295                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7296  0010EC  0100               	movlb	0	; () banked
  7297  0010EE  EE20 F005          	lfsr	2,5
  7298  0010F2  5198               	movf	find_volume@fs& (0+255),w,b
  7299  0010F4  26D9               	addwf	fsr2l,f,c
  7300  0010F6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7301  0010F8  22DA               	addwfc	fsr2h,f,c
  7302  0010FA  0E00               	movlw	0
  7303  0010FC  6EDF               	movwf	indf2,c
  7304                           
  7305                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7306  0010FE  EE22 F02C          	lfsr	2,556
  7307  001102  5198               	movf	find_volume@fs& (0+255),w,b
  7308  001104  26D9               	addwf	fsr2l,f,c
  7309  001106  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7310  001108  22DA               	addwfc	fsr2h,f,c
  7311  00110A  0E55               	movlw	85
  7312  00110C  18DE               	xorwf	postinc2,w,c
  7313  00110E  E152               	bnz	l5683
  7314  001110  0EAA               	movlw	170
  7315  001112  18DE               	xorwf	postinc2,w,c
  7316  001114  A4D8               	btfss	status,2,c
  7317  001116  D04E               	goto	l5683
  7318                           
  7319                           ; BSR set to: 0
  7320  001118  EE20 F02E          	lfsr	2,46
  7321  00111C  5198               	movf	find_volume@fs& (0+255),w,b
  7322  00111E  26D9               	addwf	fsr2l,f,c
  7323  001120  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7324  001122  22DA               	addwfc	fsr2h,f,c
  7325  001124  0E52               	movlw	82
  7326  001126  18DE               	xorwf	postinc2,w,c
  7327  001128  E145               	bnz	l5683
  7328  00112A  0E52               	movlw	82
  7329  00112C  18DE               	xorwf	postinc2,w,c
  7330  00112E  E142               	bnz	l5683
  7331  001130  0E61               	movlw	97
  7332  001132  18DE               	xorwf	postinc2,w,c
  7333  001134  E13F               	bnz	l5683
  7334  001136  0E41               	movlw	65
  7335  001138  18DE               	xorwf	postinc2,w,c
  7336  00113A  A4D8               	btfss	status,2,c
  7337  00113C  D03B               	goto	l5683
  7338                           
  7339                           ; BSR set to: 0
  7340  00113E  EE22 F012          	lfsr	2,530
  7341  001142  5198               	movf	find_volume@fs& (0+255),w,b
  7342  001144  26D9               	addwf	fsr2l,f,c
  7343  001146  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7344  001148  22DA               	addwfc	fsr2h,f,c
  7345  00114A  0E72               	movlw	114
  7346  00114C  18DE               	xorwf	postinc2,w,c
  7347  00114E  E132               	bnz	l5683
  7348  001150  0E72               	movlw	114
  7349  001152  18DE               	xorwf	postinc2,w,c
  7350  001154  E12F               	bnz	l5683
  7351  001156  0E41               	movlw	65
  7352  001158  18DE               	xorwf	postinc2,w,c
  7353  00115A  E12C               	bnz	l5683
  7354  00115C  0E61               	movlw	97
  7355  00115E  18DE               	xorwf	postinc2,w,c
  7356  001160  A4D8               	btfss	status,2,c
  7357  001162  D028               	goto	l5683
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7361  001164  EE22 F016          	lfsr	2,534
  7362  001168  5198               	movf	find_volume@fs& (0+255),w,b
  7363  00116A  26D9               	addwf	fsr2l,f,c
  7364  00116C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7365  00116E  22DA               	addwfc	fsr2h,f,c
  7366  001170  EE10 F00E          	lfsr	1,14
  7367  001174  5198               	movf	find_volume@fs& (0+255),w,b
  7368  001176  26E1               	addwf	fsr1l,f,c
  7369  001178  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7370  00117A  22E2               	addwfc	fsr1h,f,c
  7371  00117C  CFDE FFE6          	movff	postinc2,postinc1
  7372  001180  CFDE FFE6          	movff	postinc2,postinc1
  7373  001184  CFDE FFE6          	movff	postinc2,postinc1
  7374  001188  CFDE FFE6          	movff	postinc2,postinc1
  7375                           
  7376                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7377  00118C  EE22 F01A          	lfsr	2,538
  7378  001190  5198               	movf	find_volume@fs& (0+255),w,b
  7379  001192  26D9               	addwf	fsr2l,f,c
  7380  001194  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7381  001196  22DA               	addwfc	fsr2h,f,c
  7382  001198  EE10 F00A          	lfsr	1,10
  7383  00119C  5198               	movf	find_volume@fs& (0+255),w,b
  7384  00119E  26E1               	addwf	fsr1l,f,c
  7385  0011A0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7386  0011A2  22E2               	addwfc	fsr1h,f,c
  7387  0011A4  CFDE FFE6          	movff	postinc2,postinc1
  7388  0011A8  CFDE FFE6          	movff	postinc2,postinc1
  7389  0011AC  CFDE FFE6          	movff	postinc2,postinc1
  7390  0011B0  CFDE FFE6          	movff	postinc2,postinc1
  7391  0011B4                     l5683:
  7392                           
  7393                           ;ff.c: 2352:  fs->fs_type = fmt;
  7394  0011B4  C098  FFD9         	movff	find_volume@fs,fsr2l
  7395  0011B8  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7396  0011BC  C097  FFDF         	movff	find_volume@fmt,indf2
  7397                           
  7398                           ;ff.c: 2353:  fs->id = ++Fsid;
  7399  0011C0  0100               	movlb	0	; () banked
  7400  0011C2  4BD4               	infsnz	_Fsid& (0+255),f,b
  7401  0011C4  2BD5               	incf	(_Fsid+1)& (0+255),f,b
  7402  0011C6  EE20 F006          	lfsr	2,6
  7403  0011CA  5198               	movf	find_volume@fs& (0+255),w,b
  7404  0011CC  26D9               	addwf	fsr2l,f,c
  7405  0011CE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7406  0011D0  22DA               	addwfc	fsr2h,f,c
  7407  0011D2  C0D4  FFDE         	movff	_Fsid,postinc2
  7408  0011D6  C0D5  FFDD         	movff	_Fsid+1,postdec2
  7409  0011DA  EF64  F004         	goto	l5463
  7410  0011DE                     __end_of_find_volume:
  7411                           	opt callstack 0
  7412                           
  7413 ;; *************** function _get_ldnumber *****************
  7414 ;; Defined at:
  7415 ;;		line 2114 in file "ff.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7418 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7419 ;; Auto vars:     Size  Location     Type
  7420 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7421 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7422 ;;  i               2   10[COMRAM] unsigned short 
  7423 ;;  vol             2    8[COMRAM] int 
  7424 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7425 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  2    0[COMRAM] int 
  7428 ;; Registers used:
  7429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7435 ;;      Params:         2       0       0       0       0       0       0       0       0
  7436 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7437 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7438 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7439 ;;Total ram usage:       14 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_find_volume
  7445 ;;		_f_mount
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           	psect	text18
  7450  00499E                     __ptext18:
  7451                           	opt callstack 0
  7452  00499E                     _get_ldnumber:
  7453                           	opt callstack 27
  7454                           
  7455                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;incstack = 0
  7459  00499E  6809               	setf	get_ldnumber@vol,c
  7460  0049A0  680A               	setf	get_ldnumber@vol+1,c
  7461                           
  7462                           ;ff.c: 2129:  if (*path) {
  7463  0049A2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7464  0049A6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7465  0049AA  50DE               	movf	postinc2,w,c
  7466  0049AC  10DE               	iorwf	postinc2,w,c
  7467  0049AE  B4D8               	btfsc	status,2,c
  7468  0049B0  D05B               	goto	l5239
  7469                           
  7470                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7471  0049B2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7472  0049B6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7473  0049BA  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7474  0049BE  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7475  0049C2  D002               	goto	l5213
  7476  0049C4                     l5211:
  7477  0049C4  4A0D               	infsnz	get_ldnumber@tt,f,c
  7478  0049C6  2A0E               	incf	get_ldnumber@tt+1,f,c
  7479  0049C8                     l5213:
  7480  0049C8  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7481  0049CC  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7482  0049D0                     	if	0	;tblptru may be non-zero
  7483  0049D0                     	endif
  7484  0049D0                     	if	0	;tblptru may be non-zero
  7485  0049D0                     	endif
  7486  0049D0  0E20               	movlw	32
  7487  0049D2  0008               	tblrd		*
  7488  0049D4  64F5               	cpfsgt	tablat,c
  7489  0049D6  D009               	goto	u6870
  7490  0049D8  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7491  0049DC  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7492  0049E0                     	if	0	;tblptru may be non-zero
  7493  0049E0                     	endif
  7494  0049E0                     	if	0	;tblptru may be non-zero
  7495  0049E0                     	endif
  7496  0049E0  0008               	tblrd		*
  7497  0049E2  50F5               	movf	tablat,w,c
  7498  0049E4  0A3A               	xorlw	58
  7499  0049E6  A4D8               	btfss	status,2,c
  7500  0049E8  D7ED               	goto	l5211
  7501  0049EA                     u6870:
  7502                           
  7503                           ;ff.c: 2131:   if (*tt == ':') {
  7504  0049EA  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7505  0049EE  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7506  0049F2                     	if	0	;tblptru may be non-zero
  7507  0049F2                     	endif
  7508  0049F2                     	if	0	;tblptru may be non-zero
  7509  0049F2                     	endif
  7510  0049F2  0008               	tblrd		*
  7511  0049F4  50F5               	movf	tablat,w,c
  7512  0049F6  0A3A               	xorlw	58
  7513  0049F8  A4D8               	btfss	status,2,c
  7514  0049FA  D03B               	goto	l5243
  7515                           
  7516                           ;ff.c: 2132:    tp = *path;
  7517  0049FC  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7518  004A00  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7519  004A04  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7520  004A08  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7521                           
  7522                           ;ff.c: 2133:    i = *tp++ - '0';
  7523  004A0C  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7524  004A10  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7525  004A14                     	if	0	;tblptru may be non-zero
  7526  004A14                     	endif
  7527  004A14                     	if	0	;tblptru may be non-zero
  7528  004A14                     	endif
  7529  004A14  0008               	tblrd		*
  7530  004A16  CFF5 F003          	movff	tablat,??_get_ldnumber
  7531  004A1A  0ED0               	movlw	208
  7532  004A1C  2403               	addwf	??_get_ldnumber,w,c
  7533  004A1E  6E0B               	movwf	get_ldnumber@i,c
  7534  004A20  6A0C               	clrf	get_ldnumber@i+1,c
  7535  004A22  0EFF               	movlw	255
  7536  004A24  220C               	addwfc	get_ldnumber@i+1,f,c
  7537  004A26  4A07               	infsnz	get_ldnumber@tp,f,c
  7538  004A28  2A08               	incf	get_ldnumber@tp+1,f,c
  7539                           
  7540                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7541  004A2A  500C               	movf	get_ldnumber@i+1,w,c
  7542  004A2C  E11D               	bnz	l5239
  7543  004A2E  0E0A               	movlw	10
  7544  004A30  5C0B               	subwf	get_ldnumber@i,w,c
  7545  004A32  B0D8               	btfsc	status,0,c
  7546  004A34  D019               	goto	l5239
  7547  004A36  500D               	movf	get_ldnumber@tt,w,c
  7548  004A38  1807               	xorwf	get_ldnumber@tp,w,c
  7549  004A3A  E116               	bnz	l5239
  7550  004A3C  500E               	movf	get_ldnumber@tt+1,w,c
  7551  004A3E  1808               	xorwf	get_ldnumber@tp+1,w,c
  7552  004A40  A4D8               	btfss	status,2,c
  7553  004A42  D012               	goto	l5239
  7554                           
  7555                           ;ff.c: 2135:     if (i < 1) {
  7556  004A44  500B               	movf	get_ldnumber@i,w,c
  7557  004A46  100C               	iorwf	get_ldnumber@i+1,w,c
  7558  004A48  A4D8               	btfss	status,2,c
  7559  004A4A  D00E               	goto	l5239
  7560                           
  7561                           ;ff.c: 2136:      vol = (int)i;
  7562  004A4C  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7563  004A50  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7564                           
  7565                           ;ff.c: 2137:      *path = ++tt;
  7566  004A54  4A0D               	infsnz	get_ldnumber@tt,f,c
  7567  004A56  2A0E               	incf	get_ldnumber@tt+1,f,c
  7568  004A58  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7569  004A5C  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7570  004A60  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7571  004A64  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7572  004A68                     l5239:
  7573                           
  7574                           ;ff.c: 2156:    return vol;
  7575  004A68  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7576  004A6C  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7577  004A70  0012               	return	
  7578  004A72                     l5243:
  7579                           
  7580                           ;ff.c: 2161:   vol = 0;
  7581  004A72  0E00               	movlw	0
  7582  004A74  6E0A               	movwf	get_ldnumber@vol+1,c
  7583  004A76  0E00               	movlw	0
  7584  004A78  6E09               	movwf	get_ldnumber@vol,c
  7585  004A7A  D7F6               	goto	l5239
  7586  004A7C                     __end_of_get_ldnumber:
  7587                           	opt callstack 0
  7588                           
  7589 ;; *************** function _disk_initialize *****************
  7590 ;; Defined at:
  7591 ;;		line 296 in file "diskio.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;  pdrv            1    wreg     unsigned char 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  pdrv            1   17[COMRAM] unsigned char 
  7596 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7597 ;;  tmr             2   26[COMRAM] unsigned short 
  7598 ;;  n               1   28[COMRAM] unsigned char 
  7599 ;;  ty              1   25[COMRAM] unsigned char 
  7600 ;;  cmd             1   24[COMRAM] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  1    wreg      unsigned char 
  7603 ;; Registers used:
  7604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0
  7611 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7612 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7613 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7614 ;;Total ram usage:       13 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    5
  7617 ;; This function calls:
  7618 ;;		_SPI1_Exchange8bit
  7619 ;;		_SPI1_Initialize
  7620 ;;		_SPI1_Open
  7621 ;;		_deselect
  7622 ;;		_send_cmd
  7623 ;; This function is called by:
  7624 ;;		_find_volume
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text19
  7629  003B96                     __ptext19:
  7630                           	opt callstack 0
  7631  003B96                     _disk_initialize:
  7632                           	opt callstack 22
  7633                           
  7634                           ;incstack = 0
  7635                           ;disk_initialize@pdrv stored from wreg
  7636  003B96  6E12               	movwf	disk_initialize@pdrv,c
  7637                           
  7638                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7639  003B98  5012               	movf	disk_initialize@pdrv,w,c
  7640  003B9A  B4D8               	btfsc	status,2,c
  7641  003B9C  D002               	goto	l136
  7642  003B9E  0E01               	movlw	1
  7643  003BA0  0012               	return	
  7644  003BA2                     l136:
  7645                           
  7646                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7647  003BA2  0100               	movlb	0	; () banked
  7648  003BA4  A3FA               	btfss	_Stat& (0+255),1,b
  7649  003BA6  D003               	goto	l4841
  7650  003BA8                     u6140:
  7651  003BA8  0100               	movlb	0	; () banked
  7652  003BAA  51FA               	movf	_Stat& (0+255),w,b
  7653  003BAC  0012               	return	
  7654  003BAE                     l4841:
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;diskio.c: 308:  SPI1_Initialize();
  7658  003BAE  EC0E  F02B         	call	_SPI1_Initialize	;wreg free
  7659                           
  7660                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7661  003BB2  0E0A               	movlw	10
  7662  003BB4  6E1D               	movwf	disk_initialize@n,c
  7663  003BB6  D004               	goto	l4849
  7664  003BB8                     l4845:
  7665  003BB8  0EFF               	movlw	255
  7666  003BBA  ECF8  F02A         	call	_SPI1_Exchange8bit
  7667  003BBE  061D               	decf	disk_initialize@n,f,c
  7668  003BC0                     l4849:
  7669  003BC0  501D               	movf	disk_initialize@n,w,c
  7670  003BC2  A4D8               	btfss	status,2,c
  7671  003BC4  D7F9               	goto	l4845
  7672                           
  7673                           ;diskio.c: 311:  ty = 0;
  7674  003BC6  0E00               	movlw	0
  7675  003BC8  6E1A               	movwf	disk_initialize@ty,c
  7676                           
  7677                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7678  003BCA  0E00               	movlw	0
  7679  003BCC  6E0B               	movwf	send_cmd@arg,c
  7680  003BCE  0E00               	movlw	0
  7681  003BD0  6E0C               	movwf	send_cmd@arg+1,c
  7682  003BD2  0E00               	movlw	0
  7683  003BD4  6E0D               	movwf	send_cmd@arg+2,c
  7684  003BD6  0E00               	movlw	0
  7685  003BD8  6E0E               	movwf	send_cmd@arg+3,c
  7686  003BDA  0E00               	movlw	0
  7687  003BDC  EC00  F02A         	call	_send_cmd
  7688  003BE0  06E8               	decf	wreg,f,c
  7689  003BE2  A4D8               	btfss	status,2,c
  7690  003BE4  D0C1               	goto	l158
  7691                           
  7692                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7693  003BE6  0EAA               	movlw	170
  7694  003BE8  6E0B               	movwf	send_cmd@arg,c
  7695  003BEA  0E01               	movlw	1
  7696  003BEC  6E0C               	movwf	send_cmd@arg+1,c
  7697  003BEE  0E00               	movlw	0
  7698  003BF0  6E0D               	movwf	send_cmd@arg+2,c
  7699  003BF2  0E00               	movlw	0
  7700  003BF4  6E0E               	movwf	send_cmd@arg+3,c
  7701  003BF6  0E08               	movlw	8
  7702  003BF8  EC00  F02A         	call	_send_cmd
  7703  003BFC  06E8               	decf	wreg,f,c
  7704  003BFE  A4D8               	btfss	status,2,c
  7705  003C00  D067               	goto	l4905
  7706                           
  7707                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7708  003C02  0E00               	movlw	0
  7709  003C04  6E1D               	movwf	disk_initialize@n,c
  7710  003C06                     l4863:
  7711  003C06  0E13               	movlw	low disk_initialize@ocr
  7712  003C08  241D               	addwf	disk_initialize@n,w,c
  7713  003C0A  6ED9               	movwf	fsr2l,c
  7714  003C0C  6ADA               	clrf	fsr2h,c
  7715  003C0E  0E00               	movlw	high disk_initialize@ocr
  7716  003C10  22DA               	addwfc	fsr2h,f,c
  7717  003C12  0EFF               	movlw	255
  7718  003C14  ECF8  F02A         	call	_SPI1_Exchange8bit
  7719  003C18  6EDF               	movwf	indf2,c
  7720  003C1A  2A1D               	incf	disk_initialize@n,f,c
  7721  003C1C  0E03               	movlw	3
  7722  003C1E  641D               	cpfsgt	disk_initialize@n,c
  7723  003C20  D7F2               	goto	l4863
  7724                           
  7725                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7726  003C22  0415               	decf	disk_initialize@ocr+2,w,c
  7727  003C24  A4D8               	btfss	status,2,c
  7728  003C26  D0A0               	goto	l158
  7729  003C28  0EAA               	movlw	170
  7730  003C2A  1816               	xorwf	disk_initialize@ocr+3,w,c
  7731  003C2C  A4D8               	btfss	status,2,c
  7732  003C2E  D09C               	goto	l158
  7733                           
  7734                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7735  003C30  0E03               	movlw	3
  7736  003C32  6E1C               	movwf	disk_initialize@tmr+1,c
  7737  003C34  0EE8               	movlw	232
  7738  003C36  6E1B               	movwf	disk_initialize@tmr,c
  7739  003C38  D018               	goto	l147
  7740  003C3A                     l4875:
  7741                           
  7742                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7743  003C3A  0E00               	movlw	0
  7744  003C3C  6E0B               	movwf	send_cmd@arg,c
  7745  003C3E  0E00               	movlw	0
  7746  003C40  6E0C               	movwf	send_cmd@arg+1,c
  7747  003C42  0E00               	movlw	0
  7748  003C44  6E0D               	movwf	send_cmd@arg+2,c
  7749  003C46  0E40               	movlw	64
  7750  003C48  6E0E               	movwf	send_cmd@arg+3,c
  7751  003C4A  0EA9               	movlw	169
  7752  003C4C  EC00  F02A         	call	_send_cmd
  7753  003C50  0900               	iorlw	0
  7754  003C52  B4D8               	btfsc	status,2,c
  7755  003C54  D00E               	goto	u6220
  7756                           
  7757                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7758  003C56  0E03               	movlw	3
  7759  003C58  6E11               	movwf	??_disk_initialize& (0+255),c
  7760  003C5A  0E98               	movlw	152
  7761  003C5C                     u8897:
  7762  003C5C  2EE8               	decfsz	wreg,f,c
  7763  003C5E  D7FE               	bra	u8897
  7764  003C60  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7765  003C62  D7FC               	bra	u8897
  7766                           
  7767                           ;diskio.c: 319:     }
  7768  003C64  061B               	decf	disk_initialize@tmr,f,c
  7769  003C66  A0D8               	btfss	status,0,c
  7770  003C68  061C               	decf	disk_initialize@tmr+1,f,c
  7771  003C6A                     l147:
  7772  003C6A  501B               	movf	disk_initialize@tmr,w,c
  7773  003C6C  101C               	iorwf	disk_initialize@tmr+1,w,c
  7774  003C6E  A4D8               	btfss	status,2,c
  7775  003C70  D7E4               	goto	l4875
  7776  003C72                     u6220:
  7777                           
  7778                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7779  003C72  501B               	movf	disk_initialize@tmr,w,c
  7780  003C74  101C               	iorwf	disk_initialize@tmr+1,w,c
  7781  003C76  B4D8               	btfsc	status,2,c
  7782  003C78  D077               	goto	l158
  7783  003C7A  0E00               	movlw	0
  7784  003C7C  6E0B               	movwf	send_cmd@arg,c
  7785  003C7E  0E00               	movlw	0
  7786  003C80  6E0C               	movwf	send_cmd@arg+1,c
  7787  003C82  0E00               	movlw	0
  7788  003C84  6E0D               	movwf	send_cmd@arg+2,c
  7789  003C86  0E00               	movlw	0
  7790  003C88  6E0E               	movwf	send_cmd@arg+3,c
  7791  003C8A  0E3A               	movlw	58
  7792  003C8C  EC00  F02A         	call	_send_cmd
  7793  003C90  0900               	iorlw	0
  7794  003C92  A4D8               	btfss	status,2,c
  7795  003C94  D069               	goto	l158
  7796                           
  7797                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7798  003C96  0E00               	movlw	0
  7799  003C98  6E1D               	movwf	disk_initialize@n,c
  7800  003C9A                     l4893:
  7801  003C9A  0E13               	movlw	low disk_initialize@ocr
  7802  003C9C  241D               	addwf	disk_initialize@n,w,c
  7803  003C9E  6ED9               	movwf	fsr2l,c
  7804  003CA0  6ADA               	clrf	fsr2h,c
  7805  003CA2  0E00               	movlw	high disk_initialize@ocr
  7806  003CA4  22DA               	addwfc	fsr2h,f,c
  7807  003CA6  0EFF               	movlw	255
  7808  003CA8  ECF8  F02A         	call	_SPI1_Exchange8bit
  7809  003CAC  6EDF               	movwf	indf2,c
  7810  003CAE  2A1D               	incf	disk_initialize@n,f,c
  7811  003CB0  0E03               	movlw	3
  7812  003CB2  641D               	cpfsgt	disk_initialize@n,c
  7813  003CB4  D7F2               	goto	l4893
  7814                           
  7815                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7816  003CB6  BC13               	btfsc	disk_initialize@ocr,6,c
  7817  003CB8  D004               	goto	l4901
  7818  003CBA  0E00               	movlw	0
  7819  003CBC  6E18               	movwf	_disk_initialize$285+1,c
  7820  003CBE  0E04               	movlw	4
  7821  003CC0  D003               	goto	L7
  7822  003CC2                     l4901:
  7823  003CC2  0E00               	movlw	0
  7824  003CC4  6E18               	movwf	_disk_initialize$285+1,c
  7825  003CC6  0E0C               	movlw	12
  7826  003CC8                     L7:
  7827  003CC8  6E17               	movwf	_disk_initialize$285,c
  7828  003CCA  C017  F01A         	movff	_disk_initialize$285,disk_initialize@ty
  7829  003CCE  D04C               	goto	l158
  7830  003CD0                     l4905:
  7831                           
  7832                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7833  003CD0  0E00               	movlw	0
  7834  003CD2  6E0B               	movwf	send_cmd@arg,c
  7835  003CD4  0E00               	movlw	0
  7836  003CD6  6E0C               	movwf	send_cmd@arg+1,c
  7837  003CD8  0E00               	movlw	0
  7838  003CDA  6E0D               	movwf	send_cmd@arg+2,c
  7839  003CDC  0E00               	movlw	0
  7840  003CDE  6E0E               	movwf	send_cmd@arg+3,c
  7841  003CE0  0EA9               	movlw	169
  7842  003CE2  EC00  F02A         	call	_send_cmd
  7843  003CE6  6E11               	movwf	??_disk_initialize& (0+255),c
  7844  003CE8  0E02               	movlw	2
  7845  003CEA  6011               	cpfslt	??_disk_initialize,c
  7846  003CEC  D004               	goto	l4909
  7847                           
  7848                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  7849  003CEE  0E02               	movlw	2
  7850  003CF0  6E1A               	movwf	disk_initialize@ty,c
  7851  003CF2  0EA9               	movlw	169
  7852  003CF4  D003               	goto	L8
  7853  003CF6                     l4909:
  7854                           
  7855                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  7856  003CF6  0E01               	movlw	1
  7857  003CF8  6E1A               	movwf	disk_initialize@ty,c
  7858  003CFA  0E01               	movlw	1
  7859  003CFC                     L8:
  7860  003CFC  6E19               	movwf	disk_initialize@cmd,c
  7861                           
  7862                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  7863                           
  7864                           ;diskio.c: 330:    }
  7865  003CFE  0E03               	movlw	3
  7866  003D00  6E1C               	movwf	disk_initialize@tmr+1,c
  7867  003D02  0EE8               	movlw	232
  7868  003D04  6E1B               	movwf	disk_initialize@tmr,c
  7869  003D06  D018               	goto	l161
  7870  003D08                     l4911:
  7871                           
  7872                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  7873  003D08  0E00               	movlw	0
  7874  003D0A  6E0B               	movwf	send_cmd@arg,c
  7875  003D0C  0E00               	movlw	0
  7876  003D0E  6E0C               	movwf	send_cmd@arg+1,c
  7877  003D10  0E00               	movlw	0
  7878  003D12  6E0D               	movwf	send_cmd@arg+2,c
  7879  003D14  0E00               	movlw	0
  7880  003D16  6E0E               	movwf	send_cmd@arg+3,c
  7881  003D18  5019               	movf	disk_initialize@cmd,w,c
  7882  003D1A  EC00  F02A         	call	_send_cmd
  7883  003D1E  0900               	iorlw	0
  7884  003D20  B4D8               	btfsc	status,2,c
  7885  003D22  D00E               	goto	u6290
  7886                           
  7887                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  7888  003D24  0E03               	movlw	3
  7889  003D26  6E11               	movwf	??_disk_initialize& (0+255),c
  7890  003D28  0E98               	movlw	152
  7891  003D2A                     u8907:
  7892  003D2A  2EE8               	decfsz	wreg,f,c
  7893  003D2C  D7FE               	bra	u8907
  7894  003D2E  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7895  003D30  D7FC               	bra	u8907
  7896                           
  7897                           ;diskio.c: 334:    }
  7898  003D32  061B               	decf	disk_initialize@tmr,f,c
  7899  003D34  A0D8               	btfss	status,0,c
  7900  003D36  061C               	decf	disk_initialize@tmr+1,f,c
  7901  003D38                     l161:
  7902  003D38  501B               	movf	disk_initialize@tmr,w,c
  7903  003D3A  101C               	iorwf	disk_initialize@tmr+1,w,c
  7904  003D3C  A4D8               	btfss	status,2,c
  7905  003D3E  D7E4               	goto	l4911
  7906  003D40                     u6290:
  7907                           
  7908                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  7909  003D40  501B               	movf	disk_initialize@tmr,w,c
  7910  003D42  101C               	iorwf	disk_initialize@tmr+1,w,c
  7911  003D44  B4D8               	btfsc	status,2,c
  7912  003D46  D00E               	goto	u6310
  7913  003D48  0E00               	movlw	0
  7914  003D4A  6E0B               	movwf	send_cmd@arg,c
  7915  003D4C  0E02               	movlw	2
  7916  003D4E  6E0C               	movwf	send_cmd@arg+1,c
  7917  003D50  0E00               	movlw	0
  7918  003D52  6E0D               	movwf	send_cmd@arg+2,c
  7919  003D54  0E00               	movlw	0
  7920  003D56  6E0E               	movwf	send_cmd@arg+3,c
  7921  003D58  0E10               	movlw	16
  7922  003D5A  EC00  F02A         	call	_send_cmd
  7923  003D5E  0900               	iorlw	0
  7924  003D60  B4D8               	btfsc	status,2,c
  7925  003D62  D002               	goto	l158
  7926  003D64                     u6310:
  7927                           
  7928                           ;diskio.c: 336:     ty = 0;
  7929  003D64  0E00               	movlw	0
  7930  003D66  6E1A               	movwf	disk_initialize@ty,c
  7931  003D68                     l158:
  7932                           
  7933                           ;diskio.c: 339:  CardType = ty;
  7934  003D68  C01A  F0D8         	movff	disk_initialize@ty,_CardType
  7935                           
  7936                           ;diskio.c: 340:  deselect();
  7937  003D6C  EC1A  F02B         	call	_deselect	;wreg free
  7938                           
  7939                           ;diskio.c: 342:  if (ty) {
  7940  003D70  501A               	movf	disk_initialize@ty,w,c
  7941  003D72  B4D8               	btfsc	status,2,c
  7942  003D74  D719               	goto	u6140
  7943                           
  7944                           ;diskio.c: 343:   Stat &= ~0x01;
  7945  003D76  0100               	movlb	0	; () banked
  7946  003D78  91FA               	bcf	_Stat& (0+255),0,b
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;diskio.c: 344:   SPI1_Open();
  7950  003D7A  EC00  F02B         	call	_SPI1_Open	;wreg free
  7951  003D7E  D714               	goto	u6140
  7952  003D80                     __end_of_disk_initialize:
  7953                           	opt callstack 0
  7954                           
  7955 ;; *************** function _SPI1_Open *****************
  7956 ;; Defined at:
  7957 ;;		line 77 in file "mcc_generated_files/spi1.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;		None
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      void 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0
  7972 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7974 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7975 ;;Total ram usage:        0 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; This function calls:
  7978 ;;		Nothing
  7979 ;; This function is called by:
  7980 ;;		_disk_initialize
  7981 ;; This function uses a non-reentrant model
  7982 ;;
  7983                           
  7984                           	psect	text20
  7985  005600                     __ptext20:
  7986                           	opt callstack 0
  7987  005600                     _SPI1_Open:
  7988                           	opt callstack 26
  7989                           
  7990                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  7991                           
  7992                           ;incstack = 0
  7993  005600  0E40               	movlw	64
  7994  005602  6EC7               	movwf	4039,c	;volatile
  7995                           
  7996                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  7997  005604  0E20               	movlw	32
  7998  005606  6EC6               	movwf	4038,c	;volatile
  7999                           
  8000                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  8001  005608  0E00               	movlw	0
  8002  00560A  6EC8               	movwf	4040,c	;volatile
  8003  00560C  0012               	return		;funcret
  8004  00560E                     __end_of_SPI1_Open:
  8005                           	opt callstack 0
  8006                           
  8007 ;; *************** function _check_fs *****************
  8008 ;; Defined at:
  8009 ;;		line 2175 in file "ff.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  fs              2   58[COMRAM] PTR struct .
  8012 ;;		 -> NULL(0), FatFs(558), 
  8013 ;;  sect            4   60[COMRAM] unsigned long 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;		None
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      unsigned char 
  8018 ;; Registers used:
  8019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8025 ;;      Params:         6       0       0       0       0       0       0       0       0
  8026 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8027 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8028 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8029 ;;Total ram usage:       10 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    8
  8032 ;; This function calls:
  8033 ;;		_move_window
  8034 ;; This function is called by:
  8035 ;;		_find_volume
  8036 ;; This function uses a non-reentrant model
  8037 ;;
  8038                           
  8039                           	psect	text21
  8040  0048B2                     __ptext21:
  8041                           	opt callstack 0
  8042  0048B2                     _check_fs:
  8043                           	opt callstack 19
  8044                           
  8045                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  8046                           
  8047                           ;incstack = 0
  8048  0048B2  EE20 F004          	lfsr	2,4
  8049  0048B6  503B               	movf	check_fs@fs,w,c
  8050  0048B8  26D9               	addwf	fsr2l,f,c
  8051  0048BA  503C               	movf	check_fs@fs+1,w,c
  8052  0048BC  22DA               	addwfc	fsr2h,f,c
  8053  0048BE  0E00               	movlw	0
  8054  0048C0  6EDF               	movwf	indf2,c
  8055  0048C2  EE20 F02A          	lfsr	2,42
  8056  0048C6  503B               	movf	check_fs@fs,w,c
  8057  0048C8  26D9               	addwf	fsr2l,f,c
  8058  0048CA  503C               	movf	check_fs@fs+1,w,c
  8059  0048CC  22DA               	addwfc	fsr2h,f,c
  8060  0048CE  0EFF               	movlw	255
  8061  0048D0  6EDE               	movwf	postinc2,c
  8062  0048D2  0EFF               	movlw	255
  8063  0048D4  6EDE               	movwf	postinc2,c
  8064  0048D6  0EFF               	movlw	255
  8065  0048D8  6EDE               	movwf	postinc2,c
  8066  0048DA  0EFF               	movlw	255
  8067  0048DC  6EDD               	movwf	postdec2,c
  8068                           
  8069                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  8070  0048DE  C03B  F030         	movff	check_fs@fs,move_window@fs
  8071  0048E2  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  8072  0048E6  C03D  F032         	movff	check_fs@sect,move_window@sector
  8073  0048EA  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  8074  0048EE  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  8075  0048F2  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  8076  0048F6  EC7E  F027         	call	_move_window	;wreg free
  8077  0048FA  0900               	iorlw	0
  8078  0048FC  B4D8               	btfsc	status,2,c
  8079  0048FE  D002               	goto	l5257
  8080                           
  8081                           ;ff.c: 2182:   return 3;
  8082  004900  0E03               	movlw	3
  8083  004902  0012               	return	
  8084  004904                     l5257:
  8085                           
  8086                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8087  004904  EE22 F02C          	lfsr	2,556
  8088  004908  503B               	movf	check_fs@fs,w,c
  8089  00490A  26D9               	addwf	fsr2l,f,c
  8090  00490C  503C               	movf	check_fs@fs+1,w,c
  8091  00490E  22DA               	addwfc	fsr2h,f,c
  8092  004910  0E55               	movlw	85
  8093  004912  18DE               	xorwf	postinc2,w,c
  8094  004914  E104               	bnz	u6930
  8095  004916  0EAA               	movlw	170
  8096  004918  18DE               	xorwf	postinc2,w,c
  8097  00491A  B4D8               	btfsc	status,2,c
  8098  00491C  D002               	goto	l5263
  8099  00491E                     u6930:
  8100                           
  8101                           ;ff.c: 2185:   return 2;
  8102  00491E  0E02               	movlw	2
  8103  004920  0012               	return	
  8104  004922                     l5263:
  8105                           
  8106                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8107  004922  EE20 F064          	lfsr	2,100
  8108  004926  503B               	movf	check_fs@fs,w,c
  8109  004928  26D9               	addwf	fsr2l,f,c
  8110  00492A  503C               	movf	check_fs@fs+1,w,c
  8111  00492C  22DA               	addwfc	fsr2h,f,c
  8112  00492E  0EFF               	movlw	255
  8113  004930  14DE               	andwf	postinc2,w,c
  8114  004932  6E41               	movwf	??_check_fs& (0+255),c
  8115  004934  0EFF               	movlw	255
  8116  004936  14DE               	andwf	postinc2,w,c
  8117  004938  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8118  00493A  0EFF               	movlw	255
  8119  00493C  14DE               	andwf	postinc2,w,c
  8120  00493E  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8121  004940  0E00               	movlw	0
  8122  004942  14DE               	andwf	postinc2,w,c
  8123  004944  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8124  004946  0E46               	movlw	70
  8125  004948  1841               	xorwf	??_check_fs,w,c
  8126  00494A  E10A               	bnz	l5269
  8127  00494C  0E41               	movlw	65
  8128  00494E  1842               	xorwf	??_check_fs+1,w,c
  8129  004950  E107               	bnz	l5269
  8130  004952  0E54               	movlw	84
  8131  004954  1843               	xorwf	??_check_fs+2,w,c
  8132  004956  1044               	iorwf	??_check_fs+3,w,c
  8133  004958  A4D8               	btfss	status,2,c
  8134  00495A  D002               	goto	l5269
  8135  00495C                     u6940:
  8136                           
  8137                           ;ff.c: 2188:   return 0;
  8138  00495C  0E00               	movlw	0
  8139  00495E  0012               	return	
  8140  004960                     l5269:
  8141                           
  8142                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8143  004960  EE20 F080          	lfsr	2,128
  8144  004964  503B               	movf	check_fs@fs,w,c
  8145  004966  26D9               	addwf	fsr2l,f,c
  8146  004968  503C               	movf	check_fs@fs+1,w,c
  8147  00496A  22DA               	addwfc	fsr2h,f,c
  8148  00496C  0EFF               	movlw	255
  8149  00496E  14DE               	andwf	postinc2,w,c
  8150  004970  6E41               	movwf	??_check_fs& (0+255),c
  8151  004972  0EFF               	movlw	255
  8152  004974  14DE               	andwf	postinc2,w,c
  8153  004976  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8154  004978  0EFF               	movlw	255
  8155  00497A  14DE               	andwf	postinc2,w,c
  8156  00497C  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8157  00497E  0E00               	movlw	0
  8158  004980  14DE               	andwf	postinc2,w,c
  8159  004982  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8160  004984  0E46               	movlw	70
  8161  004986  1841               	xorwf	??_check_fs,w,c
  8162  004988  E108               	bnz	l5275
  8163  00498A  0E41               	movlw	65
  8164  00498C  1842               	xorwf	??_check_fs+1,w,c
  8165  00498E  E105               	bnz	l5275
  8166  004990  0E54               	movlw	84
  8167  004992  1843               	xorwf	??_check_fs+2,w,c
  8168  004994  1044               	iorwf	??_check_fs+3,w,c
  8169  004996  B4D8               	btfsc	status,2,c
  8170  004998  D7E1               	goto	u6940
  8171  00499A                     l5275:
  8172                           
  8173                           ;ff.c: 2192:  return 1;
  8174  00499A  0E01               	movlw	1
  8175  00499C  0012               	return		;funcret
  8176  00499E                     __end_of_check_fs:
  8177                           	opt callstack 0
  8178                           
  8179 ;; *************** function _f_lseek *****************
  8180 ;; Defined at:
  8181 ;;		line 3033 in file "ff.c"
  8182 ;; Parameters:    Size  Location     Type
  8183 ;;  fp              2   13[BANK0 ] PTR struct .
  8184 ;;		 -> Fil(32), 
  8185 ;;  ofs             4   15[BANK0 ] unsigned long 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  clst            4   48[BANK0 ] unsigned long 
  8188 ;;  bcs             4   44[BANK0 ] unsigned long 
  8189 ;;  nsect           4   40[BANK0 ] unsigned long 
  8190 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8191 ;;  res             1   39[BANK0 ] enum E93
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      enum E4918
  8194 ;; Registers used:
  8195 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8201 ;;      Params:         0       6       0       0       0       0       0       0       0
  8202 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8203 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8204 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8205 ;;Total ram usage:       39 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:   10
  8208 ;; This function calls:
  8209 ;;		___lldiv
  8210 ;;		_clust2sect
  8211 ;;		_create_chain
  8212 ;;		_get_fat
  8213 ;;		_validate
  8214 ;; This function is called by:
  8215 ;;		_guardar
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text22
  8220  001942                     __ptext22:
  8221                           	opt callstack 0
  8222  001942                     _f_lseek:
  8223                           	opt callstack 19
  8224                           
  8225                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8226                           
  8227                           ;incstack = 0
  8228  001942  C06D  F002         	movff	f_lseek@fp,validate@obj
  8229  001946  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8230  00194A  ECD1  F027         	call	_validate	;wreg free
  8231  00194E  0100               	movlb	0	; () banked
  8232  001950  6F87               	movwf	f_lseek@res& (0+255),b
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8236  001952  5187               	movf	f_lseek@res& (0+255),w,b
  8237  001954  B4D8               	btfsc	status,2,c
  8238  001956  D002               	goto	l5935
  8239  001958                     u8010:
  8240                           
  8241                           ; BSR set to: 0
  8242  001958  5187               	movf	f_lseek@res& (0+255),w,b
  8243  00195A  0012               	return	
  8244  00195C                     l5935:
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;ff.c: 3047:  if (fp->err)
  8248  00195C  EE20 F005          	lfsr	2,5
  8249  001960  516D               	movf	f_lseek@fp& (0+255),w,b
  8250  001962  26D9               	addwf	fsr2l,f,c
  8251  001964  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8252  001966  22DA               	addwfc	fsr2h,f,c
  8253  001968  50DF               	movf	indf2,w,c
  8254  00196A  B4D8               	btfsc	status,2,c
  8255  00196C  D008               	goto	l5941
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8259  00196E  EE20 F005          	lfsr	2,5
  8260  001972  516D               	movf	f_lseek@fp& (0+255),w,b
  8261  001974  26D9               	addwf	fsr2l,f,c
  8262  001976  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8263  001978  22DA               	addwfc	fsr2h,f,c
  8264  00197A  50DF               	movf	indf2,w,c
  8265  00197C  0012               	return	
  8266  00197E                     l5941:
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8270  00197E  EE20 F00A          	lfsr	2,10
  8271  001982  516D               	movf	f_lseek@fp& (0+255),w,b
  8272  001984  26D9               	addwf	fsr2l,f,c
  8273  001986  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8274  001988  22DA               	addwfc	fsr2h,f,c
  8275  00198A  516F               	movf	f_lseek@ofs& (0+255),w,b
  8276  00198C  5CDE               	subwf	postinc2,w,c
  8277  00198E  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8278  001990  58DE               	subwfb	postinc2,w,c
  8279  001992  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8280  001994  58DE               	subwfb	postinc2,w,c
  8281  001996  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8282  001998  58DE               	subwfb	postinc2,w,c
  8283  00199A  B0D8               	btfsc	status,0,c
  8284  00199C  D016               	goto	l733
  8285                           
  8286                           ; BSR set to: 0
  8287  00199E  EE20 F004          	lfsr	2,4
  8288  0019A2  516D               	movf	f_lseek@fp& (0+255),w,b
  8289  0019A4  26D9               	addwf	fsr2l,f,c
  8290  0019A6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8291  0019A8  22DA               	addwfc	fsr2h,f,c
  8292  0019AA  B2DF               	btfsc	indf2,1,c
  8293  0019AC  D00E               	goto	l733
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8297  0019AE  EE20 F00A          	lfsr	2,10
  8298  0019B2  516D               	movf	f_lseek@fp& (0+255),w,b
  8299  0019B4  26D9               	addwf	fsr2l,f,c
  8300  0019B6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8301  0019B8  22DA               	addwfc	fsr2h,f,c
  8302  0019BA  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8303  0019BE  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8304  0019C2  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8305  0019C6  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8306  0019CA                     l733:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;ff.c: 3113:   ifptr = fp->fptr;
  8310  0019CA  EE20 F006          	lfsr	2,6
  8311  0019CE  516D               	movf	f_lseek@fp& (0+255),w,b
  8312  0019D0  26D9               	addwf	fsr2l,f,c
  8313  0019D2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8314  0019D4  22DA               	addwfc	fsr2h,f,c
  8315  0019D6  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8316  0019DA  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8317  0019DE  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8318  0019E2  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8319                           
  8320                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8321  0019E6  0E00               	movlw	0
  8322  0019E8  6F88               	movwf	f_lseek@nsect& (0+255),b
  8323  0019EA  0E00               	movlw	0
  8324  0019EC  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8325  0019EE  0E00               	movlw	0
  8326  0019F0  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8327  0019F2  0E00               	movlw	0
  8328  0019F4  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8329  0019F6  EE20 F006          	lfsr	2,6
  8330  0019FA  516D               	movf	f_lseek@fp& (0+255),w,b
  8331  0019FC  26D9               	addwf	fsr2l,f,c
  8332  0019FE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8333  001A00  22DA               	addwfc	fsr2h,f,c
  8334  001A02  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8335  001A06  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8336  001A0A  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8337  001A0E  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;ff.c: 3115:   if (ofs) {
  8341  001A12  516F               	movf	f_lseek@ofs& (0+255),w,b
  8342  001A14  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8343  001A16  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8344  001A18  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8345  001A1A  B4D8               	btfsc	status,2,c
  8346  001A1C  D22D               	goto	l6035
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8350  001A1E  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8351  001A22  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8352  001A26  EE10 F002          	lfsr	1,2
  8353  001A2A  50DE               	movf	postinc2,w,c
  8354  001A2C  26E1               	addwf	fsr1l,f,c
  8355  001A2E  50DD               	movf	postdec2,w,c
  8356  001A30  22E2               	addwfc	fsr1h,f,c
  8357  001A32  50E7               	movf	indf1,w,c
  8358  001A34  6F73               	movwf	??_f_lseek& (0+255),b
  8359  001A36  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8360  001A3A  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8361  001A3C  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8362  001A3E  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8363  001A40  0E09               	movlw	9
  8364  001A42                     u8065:
  8365  001A42  90D8               	bcf	status,0,c
  8366  001A44  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8367  001A46  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8368  001A48  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8369  001A4A  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8370  001A4C  2EE8               	decfsz	wreg,f,c
  8371  001A4E  D7F9               	goto	u8065
  8372  001A50  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8373  001A54  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8374  001A58  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8375  001A5C  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;ff.c: 3117:    if (ifptr > 0 &&
  8379  001A60  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8380  001A62  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8381  001A64  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8382  001A66  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8383  001A68  B4D8               	btfsc	status,2,c
  8384  001A6A  D097               	goto	l5957
  8385                           
  8386                           ; BSR set to: 0
  8387  001A6C  0EFF               	movlw	255
  8388  001A6E  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8389  001A70  6E01               	movwf	___lldiv@dividend,c
  8390  001A72  0EFF               	movlw	255
  8391  001A74  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8392  001A76  6E02               	movwf	___lldiv@dividend+1,c
  8393  001A78  0EFF               	movlw	255
  8394  001A7A  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8395  001A7C  6E03               	movwf	___lldiv@dividend+2,c
  8396  001A7E  0EFF               	movlw	255
  8397  001A80  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8398  001A82  6E04               	movwf	___lldiv@dividend+3,c
  8399  001A84  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8400  001A88  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8401  001A8C  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8402  001A90  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8403  001A94  EC1B  F028         	call	___lldiv	;wreg free
  8404  001A98  C001  F073         	movff	?___lldiv,??_f_lseek
  8405  001A9C  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8406  001AA0  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8407  001AA4  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8408  001AA8  0EFF               	movlw	255
  8409  001AAA  0100               	movlb	0	; () banked
  8410  001AAC  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8411  001AAE  6E01               	movwf	___lldiv@dividend,c
  8412  001AB0  0EFF               	movlw	255
  8413  001AB2  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8414  001AB4  6E02               	movwf	___lldiv@dividend+1,c
  8415  001AB6  0EFF               	movlw	255
  8416  001AB8  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8417  001ABA  6E03               	movwf	___lldiv@dividend+2,c
  8418  001ABC  0EFF               	movlw	255
  8419  001ABE  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8420  001AC0  6E04               	movwf	___lldiv@dividend+3,c
  8421  001AC2  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8422  001AC6  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8423  001ACA  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8424  001ACE  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8425  001AD2  EC1B  F028         	call	___lldiv	;wreg free
  8426  001AD6  5001               	movf	?___lldiv,w,c
  8427  001AD8  0100               	movlb	0	; () banked
  8428  001ADA  5D73               	subwf	??_f_lseek& (0+255),w,b
  8429  001ADC  5002               	movf	?___lldiv+1,w,c
  8430  001ADE  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8431  001AE0  5003               	movf	?___lldiv+2,w,c
  8432  001AE2  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8433  001AE4  5004               	movf	?___lldiv+3,w,c
  8434  001AE6  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8435  001AE8  A0D8               	btfss	status,0,c
  8436  001AEA  D057               	goto	l5957
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8440  001AEC  0EFF               	movlw	255
  8441  001AEE  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8442  001AF0  6F73               	movwf	??_f_lseek& (0+255),b
  8443  001AF2  0EFF               	movlw	255
  8444  001AF4  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8445  001AF6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8446  001AF8  0EFF               	movlw	255
  8447  001AFA  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8448  001AFC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8449  001AFE  0EFF               	movlw	255
  8450  001B00  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8451  001B02  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8452  001B04  1D73               	comf	??_f_lseek& (0+255),w,b
  8453  001B06  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8454  001B08  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8455  001B0A  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8456  001B0C  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8457  001B0E  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8458  001B10  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8459  001B12  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8460  001B14  0EFF               	movlw	255
  8461  001B16  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8462  001B18  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8463  001B1A  0EFF               	movlw	255
  8464  001B1C  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8465  001B1E  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8466  001B20  0EFF               	movlw	255
  8467  001B22  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8468  001B24  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8469  001B26  0EFF               	movlw	255
  8470  001B28  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8471  001B2A  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8472  001B2C  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8473  001B2E  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8474  001B30  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8475  001B32  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8476  001B34  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8477  001B36  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8478  001B38  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8479  001B3A  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8480  001B3C  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8481  001B3E  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8482  001B40  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8483  001B42  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8484  001B44  EE20 F006          	lfsr	2,6
  8485  001B48  516D               	movf	f_lseek@fp& (0+255),w,b
  8486  001B4A  26D9               	addwf	fsr2l,f,c
  8487  001B4C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8488  001B4E  22DA               	addwfc	fsr2h,f,c
  8489  001B50  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8490  001B54  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8491  001B58  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8492  001B5C  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8493                           
  8494                           ;ff.c: 3120:     ofs -= fp->fptr;
  8495  001B60  EE20 F006          	lfsr	2,6
  8496  001B64  516D               	movf	f_lseek@fp& (0+255),w,b
  8497  001B66  26D9               	addwf	fsr2l,f,c
  8498  001B68  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8499  001B6A  22DA               	addwfc	fsr2h,f,c
  8500  001B6C  50DE               	movf	postinc2,w,c
  8501  001B6E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8502  001B70  50DE               	movf	postinc2,w,c
  8503  001B72  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8504  001B74  50DE               	movf	postinc2,w,c
  8505  001B76  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8506  001B78  50DD               	movf	postdec2,w,c
  8507  001B7A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8508                           
  8509                           ;ff.c: 3121:     clst = fp->clust;
  8510  001B7C  EE20 F012          	lfsr	2,18
  8511  001B80  516D               	movf	f_lseek@fp& (0+255),w,b
  8512  001B82  26D9               	addwf	fsr2l,f,c
  8513  001B84  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8514  001B86  22DA               	addwfc	fsr2h,f,c
  8515  001B88  CFDE F090          	movff	postinc2,f_lseek@clst
  8516  001B8C  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8517  001B90  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8518  001B94  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8519                           
  8520                           ;ff.c: 3122:    } else {
  8521  001B98  D06E               	goto	l5981
  8522  001B9A                     l5957:
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;ff.c: 3123:     clst = fp->sclust;
  8526  001B9A  EE20 F00E          	lfsr	2,14
  8527  001B9E  516D               	movf	f_lseek@fp& (0+255),w,b
  8528  001BA0  26D9               	addwf	fsr2l,f,c
  8529  001BA2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8530  001BA4  22DA               	addwfc	fsr2h,f,c
  8531  001BA6  CFDE F090          	movff	postinc2,f_lseek@clst
  8532  001BAA  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8533  001BAE  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8534  001BB2  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;ff.c: 3125:     if (clst == 0) {
  8538  001BB6  5190               	movf	f_lseek@clst& (0+255),w,b
  8539  001BB8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8540  001BBA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8541  001BBC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8542  001BBE  A4D8               	btfss	status,2,c
  8543  001BC0  D04C               	goto	l737
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8547  001BC2  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8548  001BC6  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8549  001BCA  CFDE F056          	movff	postinc2,create_chain@fs
  8550  001BCE  CFDD F057          	movff	postdec2,create_chain@fs+1
  8551  001BD2  0E00               	movlw	0
  8552  001BD4  6E58               	movwf	create_chain@clst,c
  8553  001BD6  0E00               	movlw	0
  8554  001BD8  6E59               	movwf	create_chain@clst+1,c
  8555  001BDA  0E00               	movlw	0
  8556  001BDC  6E5A               	movwf	create_chain@clst+2,c
  8557  001BDE  0E00               	movlw	0
  8558  001BE0  6E5B               	movwf	create_chain@clst+3,c
  8559  001BE2  ECAB  F019         	call	_create_chain	;wreg free
  8560  001BE6  C056  F090         	movff	?_create_chain,f_lseek@clst
  8561  001BEA  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8562  001BEE  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8563  001BF2  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8564                           
  8565                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8566  001BF6  0100               	movlb	0	; () banked
  8567  001BF8  0590               	decf	f_lseek@clst& (0+255),w,b
  8568  001BFA  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8569  001BFC  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8570  001BFE  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8571  001C00  A4D8               	btfss	status,2,c
  8572  001C02  D00A               	goto	l5971
  8573  001C04                     u8100:
  8574                           
  8575                           ; BSR set to: 0
  8576  001C04  EE20 F005          	lfsr	2,5
  8577  001C08  516D               	movf	f_lseek@fp& (0+255),w,b
  8578  001C0A  26D9               	addwf	fsr2l,f,c
  8579  001C0C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8580  001C0E  22DA               	addwfc	fsr2h,f,c
  8581  001C10  0E02               	movlw	2
  8582  001C12  6EDF               	movwf	indf2,c
  8583                           
  8584                           ; BSR set to: 0
  8585  001C14  0E02               	movlw	2
  8586  001C16  0012               	return	
  8587  001C18                     l5971:
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8591  001C18  2990               	incf	f_lseek@clst& (0+255),w,b
  8592  001C1A  E111               	bnz	l5979
  8593  001C1C  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8594  001C1E  E10F               	bnz	l5979
  8595  001C20  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8596  001C22  E10D               	bnz	l5979
  8597  001C24  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8598  001C26  A4D8               	btfss	status,2,c
  8599  001C28  D00A               	goto	l5979
  8600  001C2A                     u8110:
  8601                           
  8602                           ; BSR set to: 0
  8603  001C2A  EE20 F005          	lfsr	2,5
  8604  001C2E  516D               	movf	f_lseek@fp& (0+255),w,b
  8605  001C30  26D9               	addwf	fsr2l,f,c
  8606  001C32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8607  001C34  22DA               	addwfc	fsr2h,f,c
  8608  001C36  0E01               	movlw	1
  8609  001C38  6EDF               	movwf	indf2,c
  8610                           
  8611                           ; BSR set to: 0
  8612  001C3A  0E01               	movlw	1
  8613  001C3C  0012               	return	
  8614  001C3E                     l5979:
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;ff.c: 3129:      fp->sclust = clst;
  8618  001C3E  EE20 F00E          	lfsr	2,14
  8619  001C42  516D               	movf	f_lseek@fp& (0+255),w,b
  8620  001C44  26D9               	addwf	fsr2l,f,c
  8621  001C46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8622  001C48  22DA               	addwfc	fsr2h,f,c
  8623  001C4A  C090  FFDE         	movff	f_lseek@clst,postinc2
  8624  001C4E  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8625  001C52  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8626  001C56  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8627  001C5A                     l737:
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;ff.c: 3132:     fp->clust = clst;
  8631  001C5A  EE20 F012          	lfsr	2,18
  8632  001C5E  516D               	movf	f_lseek@fp& (0+255),w,b
  8633  001C60  26D9               	addwf	fsr2l,f,c
  8634  001C62  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8635  001C64  22DA               	addwfc	fsr2h,f,c
  8636  001C66  C090  FFDE         	movff	f_lseek@clst,postinc2
  8637  001C6A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8638  001C6E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8639  001C72  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8640  001C76                     l5981:
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;ff.c: 3134:    if (clst != 0) {
  8644  001C76  5190               	movf	f_lseek@clst& (0+255),w,b
  8645  001C78  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8646  001C7A  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8647  001C7C  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8648  001C7E  A4D8               	btfss	status,2,c
  8649  001C80  D097               	goto	l6017
  8650  001C82  D0FA               	goto	l6035
  8651  001C84                     l5985:
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8655  001C84  EE20 F004          	lfsr	2,4
  8656  001C88  516D               	movf	f_lseek@fp& (0+255),w,b
  8657  001C8A  26D9               	addwf	fsr2l,f,c
  8658  001C8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8659  001C8E  22DA               	addwfc	fsr2h,f,c
  8660  001C90  A2DF               	btfss	indf2,1,c
  8661  001C92  D02A               	goto	l5993
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8665  001C94  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8666  001C98  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8667  001C9C  CFDE F056          	movff	postinc2,create_chain@fs
  8668  001CA0  CFDD F057          	movff	postdec2,create_chain@fs+1
  8669  001CA4  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8670  001CA8  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8671  001CAC  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8672  001CB0  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8673  001CB4  ECAB  F019         	call	_create_chain	;wreg free
  8674  001CB8  C056  F090         	movff	?_create_chain,f_lseek@clst
  8675  001CBC  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8676  001CC0  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8677  001CC4  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8678                           
  8679                           ;ff.c: 3139:       if (clst == 0) {
  8680  001CC8  0100               	movlb	0	; () banked
  8681  001CCA  5190               	movf	f_lseek@clst& (0+255),w,b
  8682  001CCC  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8683  001CCE  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8684  001CD0  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8685  001CD2  A4D8               	btfss	status,2,c
  8686  001CD4  D023               	goto	l5995
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;ff.c: 3140:        ofs = bcs; break;
  8690  001CD6  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8691  001CDA  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8692  001CDE  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8693  001CE2  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8694  001CE6  D06E               	goto	u8180
  8695  001CE8                     l5993:
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8699  001CE8  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8700  001CEC  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8701  001CF0  CFDE F03B          	movff	postinc2,get_fat@fs
  8702  001CF4  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8703  001CF8  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8704  001CFC  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8705  001D00  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8706  001D04  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8707  001D08  EC0F  F016         	call	_get_fat	;wreg free
  8708  001D0C  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8709  001D10  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8710  001D14  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8711  001D18  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8712  001D1C                     l5995:
  8713                           
  8714                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8715  001D1C  0100               	movlb	0	; () banked
  8716  001D1E  2990               	incf	f_lseek@clst& (0+255),w,b
  8717  001D20  E107               	bnz	l6003
  8718  001D22  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8719  001D24  E105               	bnz	l6003
  8720  001D26  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8721  001D28  E103               	bnz	l6003
  8722  001D2A  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8723  001D2C  B4D8               	btfsc	status,2,c
  8724  001D2E  D77D               	goto	u8110
  8725  001D30                     l6003:
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8729  001D30  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8730  001D32  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8731  001D34  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8732  001D36  E104               	bnz	u8160
  8733  001D38  0E02               	movlw	2
  8734  001D3A  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8735  001D3C  A0D8               	btfss	status,0,c
  8736  001D3E  D762               	goto	u8100
  8737  001D40                     u8160:
  8738                           
  8739                           ; BSR set to: 0
  8740  001D40  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8741  001D44  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8742  001D48  EE10 F012          	lfsr	1,18
  8743  001D4C  50DE               	movf	postinc2,w,c
  8744  001D4E  26E1               	addwf	fsr1l,f,c
  8745  001D50  50DD               	movf	postdec2,w,c
  8746  001D52  22E2               	addwfc	fsr1h,f,c
  8747  001D54  50E6               	movf	postinc1,w,c
  8748  001D56  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8749  001D58  50E6               	movf	postinc1,w,c
  8750  001D5A  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8751  001D5C  50E6               	movf	postinc1,w,c
  8752  001D5E  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8753  001D60  50E6               	movf	postinc1,w,c
  8754  001D62  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8755  001D64  B0D8               	btfsc	status,0,c
  8756  001D66  D74E               	goto	u8100
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;ff.c: 3147:      fp->clust = clst;
  8760                           
  8761                           ; BSR set to: 0
  8762  001D68  EE20 F012          	lfsr	2,18
  8763  001D6C  516D               	movf	f_lseek@fp& (0+255),w,b
  8764  001D6E  26D9               	addwf	fsr2l,f,c
  8765  001D70  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8766  001D72  22DA               	addwfc	fsr2h,f,c
  8767  001D74  C090  FFDE         	movff	f_lseek@clst,postinc2
  8768  001D78  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8769  001D7C  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8770  001D80  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8771                           
  8772                           ;ff.c: 3148:      fp->fptr += bcs;
  8773  001D84  EE20 F006          	lfsr	2,6
  8774  001D88  516D               	movf	f_lseek@fp& (0+255),w,b
  8775  001D8A  26D9               	addwf	fsr2l,f,c
  8776  001D8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8777  001D8E  22DA               	addwfc	fsr2h,f,c
  8778  001D90  518C               	movf	f_lseek@bcs& (0+255),w,b
  8779  001D92  26DE               	addwf	postinc2,f,c
  8780  001D94  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8781  001D96  22DE               	addwfc	postinc2,f,c
  8782  001D98  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8783  001D9A  22DE               	addwfc	postinc2,f,c
  8784  001D9C  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8785  001D9E  22DE               	addwfc	postinc2,f,c
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;ff.c: 3149:      ofs -= bcs;
  8789  001DA0  518C               	movf	f_lseek@bcs& (0+255),w,b
  8790  001DA2  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8791  001DA4  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8792  001DA6  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8793  001DA8  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8794  001DAA  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8795  001DAC  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8796  001DAE  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8797  001DB0                     l6017:
  8798                           
  8799                           ; BSR set to: 0
  8800                           ;ff.c: 3135:     while (ofs > bcs) {
  8801  001DB0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8802  001DB2  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8803  001DB4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8804  001DB6  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8805  001DB8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8806  001DBA  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8807  001DBC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8808  001DBE  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8809  001DC0  A0D8               	btfss	status,0,c
  8810  001DC2  D760               	goto	l5985
  8811  001DC4                     u8180:
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;ff.c: 3151:     fp->fptr += ofs;
  8815  001DC4  EE20 F006          	lfsr	2,6
  8816  001DC8  516D               	movf	f_lseek@fp& (0+255),w,b
  8817  001DCA  26D9               	addwf	fsr2l,f,c
  8818  001DCC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8819  001DCE  22DA               	addwfc	fsr2h,f,c
  8820  001DD0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8821  001DD2  26DE               	addwf	postinc2,f,c
  8822  001DD4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8823  001DD6  22DE               	addwfc	postinc2,f,c
  8824  001DD8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8825  001DDA  22DE               	addwfc	postinc2,f,c
  8826  001DDC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8827  001DDE  22DE               	addwfc	postinc2,f,c
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8831  001DE0  0EFF               	movlw	255
  8832  001DE2  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8833  001DE4  6F73               	movwf	??_f_lseek& (0+255),b
  8834  001DE6  0E01               	movlw	1
  8835  001DE8  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8836  001DEA  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8837  001DEC  0E00               	movlw	0
  8838  001DEE  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8839  001DF0  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8840  001DF2  0E00               	movlw	0
  8841  001DF4  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8842  001DF6  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8843  001DF8  5173               	movf	??_f_lseek& (0+255),w,b
  8844  001DFA  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8845  001DFC  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8846  001DFE  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8847  001E00  B4D8               	btfsc	status,2,c
  8848  001E02  D03A               	goto	l6035
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  8852  001E04  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8853  001E08  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8854  001E0C  CFDE F00D          	movff	postinc2,clust2sect@fs
  8855  001E10  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8856  001E14  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  8857  001E18  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  8858  001E1C  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  8859  001E20  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  8860  001E24  EC6C  F026         	call	_clust2sect	;wreg free
  8861  001E28  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  8862  001E2C  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  8863  001E30  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  8864  001E34  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  8865                           
  8866                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8867  001E38  0100               	movlb	0	; () banked
  8868  001E3A  5188               	movf	f_lseek@nsect& (0+255),w,b
  8869  001E3C  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8870  001E3E  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8871  001E40  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8872  001E42  B4D8               	btfsc	status,2,c
  8873  001E44  D6DF               	goto	u8100
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  8877                           
  8878                           ; BSR set to: 0
  8879  001E46  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  8880  001E4A  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  8881  001E4E  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  8882  001E52  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  8883  001E56  0E0A               	movlw	10
  8884  001E58  D005               	goto	u8210
  8885  001E5A                     u8215:
  8886  001E5A  90D8               	bcf	status,0,c
  8887  001E5C  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8888  001E5E  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8889  001E60  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8890  001E62  3373               	rrcf	??_f_lseek& (0+255),f,b
  8891  001E64                     u8210:
  8892  001E64  2EE8               	decfsz	wreg,f,c
  8893  001E66  D7F9               	goto	u8215
  8894  001E68  5173               	movf	??_f_lseek& (0+255),w,b
  8895  001E6A  2788               	addwf	f_lseek@nsect& (0+255),f,b
  8896  001E6C  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  8897  001E6E  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8898  001E70  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  8899  001E72  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8900  001E74  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  8901  001E76  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8902  001E78                     l6035:
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8906  001E78  EE20 F006          	lfsr	2,6
  8907  001E7C  516D               	movf	f_lseek@fp& (0+255),w,b
  8908  001E7E  26D9               	addwf	fsr2l,f,c
  8909  001E80  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8910  001E82  22DA               	addwfc	fsr2h,f,c
  8911  001E84  0EFF               	movlw	255
  8912  001E86  14DE               	andwf	postinc2,w,c
  8913  001E88  6F73               	movwf	??_f_lseek& (0+255),b
  8914  001E8A  0E01               	movlw	1
  8915  001E8C  14DE               	andwf	postinc2,w,c
  8916  001E8E  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8917  001E90  0E00               	movlw	0
  8918  001E92  14DE               	andwf	postinc2,w,c
  8919  001E94  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8920  001E96  0E00               	movlw	0
  8921  001E98  14DE               	andwf	postinc2,w,c
  8922  001E9A  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8923  001E9C  5173               	movf	??_f_lseek& (0+255),w,b
  8924  001E9E  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8925  001EA0  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8926  001EA2  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8927  001EA4  B4D8               	btfsc	status,2,c
  8928  001EA6  D021               	goto	l6041
  8929                           
  8930                           ; BSR set to: 0
  8931  001EA8  EE20 F016          	lfsr	2,22
  8932  001EAC  516D               	movf	f_lseek@fp& (0+255),w,b
  8933  001EAE  26D9               	addwf	fsr2l,f,c
  8934  001EB0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8935  001EB2  22DA               	addwfc	fsr2h,f,c
  8936  001EB4  5188               	movf	f_lseek@nsect& (0+255),w,b
  8937  001EB6  18DE               	xorwf	postinc2,w,c
  8938  001EB8  E10A               	bnz	u8230
  8939  001EBA  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8940  001EBC  18DE               	xorwf	postinc2,w,c
  8941  001EBE  E107               	bnz	u8230
  8942  001EC0  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8943  001EC2  18DE               	xorwf	postinc2,w,c
  8944  001EC4  E104               	bnz	u8230
  8945  001EC6  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8946  001EC8  18DE               	xorwf	postinc2,w,c
  8947  001ECA  B4D8               	btfsc	status,2,c
  8948  001ECC  D00E               	goto	l6041
  8949  001ECE                     u8230:
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;ff.c: 3171:    fp->dsect = nsect;
  8953  001ECE  EE20 F016          	lfsr	2,22
  8954  001ED2  516D               	movf	f_lseek@fp& (0+255),w,b
  8955  001ED4  26D9               	addwf	fsr2l,f,c
  8956  001ED6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8957  001ED8  22DA               	addwfc	fsr2h,f,c
  8958  001EDA  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8959  001EDE  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8960  001EE2  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8961  001EE6  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8962  001EEA                     l6041:
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  8966  001EEA  EE20 F006          	lfsr	2,6
  8967  001EEE  516D               	movf	f_lseek@fp& (0+255),w,b
  8968  001EF0  26D9               	addwf	fsr2l,f,c
  8969  001EF2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8970  001EF4  22DA               	addwfc	fsr2h,f,c
  8971  001EF6  EE10 F00A          	lfsr	1,10
  8972  001EFA  516D               	movf	f_lseek@fp& (0+255),w,b
  8973  001EFC  26E1               	addwf	fsr1l,f,c
  8974  001EFE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8975  001F00  22E2               	addwfc	fsr1h,f,c
  8976  001F02  50DE               	movf	postinc2,w,c
  8977  001F04  5CE6               	subwf	postinc1,w,c
  8978  001F06  50DE               	movf	postinc2,w,c
  8979  001F08  58E6               	subwfb	postinc1,w,c
  8980  001F0A  50DE               	movf	postinc2,w,c
  8981  001F0C  58E6               	subwfb	postinc1,w,c
  8982  001F0E  50DE               	movf	postinc2,w,c
  8983  001F10  58E6               	subwfb	postinc1,w,c
  8984  001F12  B0D8               	btfsc	status,0,c
  8985  001F14  D521               	goto	u8010
  8986                           
  8987                           ; BSR set to: 0
  8988                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  8989  001F16  EE20 F006          	lfsr	2,6
  8990  001F1A  516D               	movf	f_lseek@fp& (0+255),w,b
  8991  001F1C  26D9               	addwf	fsr2l,f,c
  8992  001F1E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8993  001F20  22DA               	addwfc	fsr2h,f,c
  8994  001F22  EE10 F00A          	lfsr	1,10
  8995  001F26  516D               	movf	f_lseek@fp& (0+255),w,b
  8996  001F28  26E1               	addwf	fsr1l,f,c
  8997  001F2A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8998  001F2C  22E2               	addwfc	fsr1h,f,c
  8999  001F2E  CFDE FFE6          	movff	postinc2,postinc1
  9000  001F32  CFDE FFE6          	movff	postinc2,postinc1
  9001  001F36  CFDE FFE6          	movff	postinc2,postinc1
  9002  001F3A  CFDE FFE6          	movff	postinc2,postinc1
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;ff.c: 3176:    fp->flag |= 0x20;
  9006  001F3E  EE20 F004          	lfsr	2,4
  9007  001F42  516D               	movf	f_lseek@fp& (0+255),w,b
  9008  001F44  26D9               	addwf	fsr2l,f,c
  9009  001F46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9010  001F48  22DA               	addwfc	fsr2h,f,c
  9011  001F4A  0E00               	movlw	0
  9012  001F4C  8ADB               	bsf	plusw2,5,c
  9013  001F4E  D504               	goto	u8010
  9014  001F50                     __end_of_f_lseek:
  9015                           	opt callstack 0
  9016                           
  9017 ;; *************** function _create_chain *****************
  9018 ;; Defined at:
  9019 ;;		line 990 in file "ff.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  fs              2   85[COMRAM] PTR struct .
  9022 ;;		 -> NULL(0), FatFs(558), 
  9023 ;;  clst            4   87[COMRAM] unsigned long 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  cs              4    9[BANK0 ] unsigned long 
  9026 ;;  ncl             4    5[BANK0 ] unsigned long 
  9027 ;;  scl             4    1[BANK0 ] unsigned long 
  9028 ;;  res             1    0[BANK0 ] enum E93
  9029 ;; Return value:  Size  Location     Type
  9030 ;;                  4   85[COMRAM] unsigned long 
  9031 ;; Registers used:
  9032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9038 ;;      Params:         6       0       0       0       0       0       0       0       0
  9039 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9040 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9041 ;;      Totals:        10      13       0       0       0       0       0       0       0
  9042 ;;Total ram usage:       23 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    9
  9045 ;; This function calls:
  9046 ;;		_get_fat
  9047 ;;		_put_fat
  9048 ;; This function is called by:
  9049 ;;		_dir_next
  9050 ;;		_f_write
  9051 ;;		_f_lseek
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           	psect	text23
  9056  003356                     __ptext23:
  9057                           	opt callstack 0
  9058  003356                     _create_chain:
  9059                           	opt callstack 19
  9060                           
  9061                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;incstack = 0
  9065  003356  5058               	movf	create_chain@clst,w,c
  9066  003358  1059               	iorwf	create_chain@clst+1,w,c
  9067  00335A  105A               	iorwf	create_chain@clst+2,w,c
  9068  00335C  105B               	iorwf	create_chain@clst+3,w,c
  9069  00335E  A4D8               	btfss	status,2,c
  9070  003360  D02E               	goto	l4441
  9071                           
  9072                           ;ff.c: 1000:   scl = fs->last_clust;
  9073  003362  EE20 F00A          	lfsr	2,10
  9074  003366  5056               	movf	create_chain@fs,w,c
  9075  003368  26D9               	addwf	fsr2l,f,c
  9076  00336A  5057               	movf	create_chain@fs+1,w,c
  9077  00336C  22DA               	addwfc	fsr2h,f,c
  9078  00336E  CFDE F061          	movff	postinc2,create_chain@scl
  9079  003372  CFDE F062          	movff	postinc2,create_chain@scl+1
  9080  003376  CFDE F063          	movff	postinc2,create_chain@scl+2
  9081  00337A  CFDE F064          	movff	postinc2,create_chain@scl+3
  9082                           
  9083                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  9084  00337E  0100               	movlb	0	; () banked
  9085  003380  5161               	movf	create_chain@scl& (0+255),w,b
  9086  003382  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9087  003384  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9088  003386  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9089  003388  B4D8               	btfsc	status,2,c
  9090  00338A  D010               	goto	u5320
  9091                           
  9092                           ; BSR set to: 0
  9093  00338C  EE20 F012          	lfsr	2,18
  9094  003390  5056               	movf	create_chain@fs,w,c
  9095  003392  26D9               	addwf	fsr2l,f,c
  9096  003394  5057               	movf	create_chain@fs+1,w,c
  9097  003396  22DA               	addwfc	fsr2h,f,c
  9098  003398  50DE               	movf	postinc2,w,c
  9099  00339A  5D61               	subwf	create_chain@scl& (0+255),w,b
  9100  00339C  50DE               	movf	postinc2,w,c
  9101  00339E  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9102  0033A0  50DE               	movf	postinc2,w,c
  9103  0033A2  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9104  0033A4  50DE               	movf	postinc2,w,c
  9105  0033A6  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9106  0033A8  A0D8               	btfss	status,0,c
  9107  0033AA  D05B               	goto	l383
  9108  0033AC                     u5320:
  9109                           
  9110                           ; BSR set to: 0
  9111  0033AC  0E01               	movlw	1
  9112  0033AE  6F61               	movwf	create_chain@scl& (0+255),b
  9113  0033B0  0E00               	movlw	0
  9114  0033B2  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9115  0033B4  0E00               	movlw	0
  9116  0033B6  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9117  0033B8  0E00               	movlw	0
  9118  0033BA  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9119  0033BC  D052               	goto	l383
  9120  0033BE                     l4441:
  9121                           
  9122                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9123  0033BE  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9124  0033C2  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9125  0033C6  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9126  0033CA  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9127  0033CE  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9128  0033D2  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9129  0033D6  EC0F  F016         	call	_get_fat	;wreg free
  9130  0033DA  C03B  F069         	movff	?_get_fat,create_chain@cs
  9131  0033DE  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9132  0033E2  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9133  0033E6  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9134                           
  9135                           ;ff.c: 1005:   if (cs < 2) return 1;
  9136  0033EA  0100               	movlb	0	; () banked
  9137  0033EC  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9138  0033EE  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9139  0033F0  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9140  0033F2  E10D               	bnz	l4449
  9141  0033F4  0E02               	movlw	2
  9142  0033F6  5D69               	subwf	create_chain@cs& (0+255),w,b
  9143  0033F8  B0D8               	btfsc	status,0,c
  9144  0033FA  D009               	goto	l4449
  9145                           
  9146                           ; BSR set to: 0
  9147  0033FC  0E01               	movlw	1
  9148  0033FE  6E56               	movwf	?_create_chain,c
  9149  003400  0E00               	movlw	0
  9150  003402  6E57               	movwf	?_create_chain+1,c
  9151  003404  0E00               	movlw	0
  9152  003406  6E58               	movwf	?_create_chain+2,c
  9153  003408  0E00               	movlw	0
  9154  00340A  6E59               	movwf	?_create_chain+3,c
  9155  00340C  0012               	return	
  9156  00340E                     l4449:
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9160  00340E  2969               	incf	create_chain@cs& (0+255),w,b
  9161  003410  E110               	bnz	l4453
  9162  003412  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9163  003414  E10E               	bnz	l4453
  9164  003416  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9165  003418  E10C               	bnz	l4453
  9166  00341A  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9167  00341C  A4D8               	btfss	status,2,c
  9168  00341E  D009               	goto	l4453
  9169  003420                     u5340:
  9170                           
  9171                           ; BSR set to: 0
  9172  003420  C069  F056         	movff	create_chain@cs,?_create_chain
  9173  003424  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9174  003428  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9175  00342C  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9176  003430  0012               	return	
  9177  003432                     l4453:
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9181  003432  EE20 F012          	lfsr	2,18
  9182  003436  5056               	movf	create_chain@fs,w,c
  9183  003438  26D9               	addwf	fsr2l,f,c
  9184  00343A  5057               	movf	create_chain@fs+1,w,c
  9185  00343C  22DA               	addwfc	fsr2h,f,c
  9186  00343E  50DE               	movf	postinc2,w,c
  9187  003440  5D69               	subwf	create_chain@cs& (0+255),w,b
  9188  003442  50DE               	movf	postinc2,w,c
  9189  003444  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9190  003446  50DE               	movf	postinc2,w,c
  9191  003448  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9192  00344A  50DE               	movf	postinc2,w,c
  9193  00344C  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9194  00344E  A0D8               	btfss	status,0,c
  9195  003450  D7E7               	goto	u5340
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;ff.c: 1008:   scl = clst;
  9199  003452  C058  F061         	movff	create_chain@clst,create_chain@scl
  9200  003456  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9201  00345A  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9202  00345E  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9203  003462                     l383:
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;ff.c: 1011:  ncl = scl;
  9207  003462  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9208  003466  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9209  00346A  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9210  00346E  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9211  003472                     l4457:
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;ff.c: 1013:   ncl++;
  9215  003472  0E01               	movlw	1
  9216  003474  2765               	addwf	create_chain@ncl& (0+255),f,b
  9217  003476  0E00               	movlw	0
  9218  003478  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9219  00347A  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9220  00347C  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9224  00347E  EE20 F012          	lfsr	2,18
  9225  003482  5056               	movf	create_chain@fs,w,c
  9226  003484  26D9               	addwf	fsr2l,f,c
  9227  003486  5057               	movf	create_chain@fs+1,w,c
  9228  003488  22DA               	addwfc	fsr2h,f,c
  9229  00348A  50DE               	movf	postinc2,w,c
  9230  00348C  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9231  00348E  50DE               	movf	postinc2,w,c
  9232  003490  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9233  003492  50DE               	movf	postinc2,w,c
  9234  003494  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9235  003496  50DE               	movf	postinc2,w,c
  9236  003498  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9237  00349A  A0D8               	btfss	status,0,c
  9238  00349C  D019               	goto	l4469
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;ff.c: 1015:    ncl = 2;
  9242  00349E  0E02               	movlw	2
  9243  0034A0  6F65               	movwf	create_chain@ncl& (0+255),b
  9244  0034A2  0E00               	movlw	0
  9245  0034A4  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9246  0034A6  0E00               	movlw	0
  9247  0034A8  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9248  0034AA  0E00               	movlw	0
  9249  0034AC  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9253  0034AE  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9254  0034B0  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9255  0034B2  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9256  0034B4  E10D               	bnz	l4469
  9257  0034B6  0E02               	movlw	2
  9258  0034B8  5D61               	subwf	create_chain@scl& (0+255),w,b
  9259  0034BA  B0D8               	btfsc	status,0,c
  9260  0034BC  D009               	goto	l4469
  9261  0034BE                     u5370:
  9262                           
  9263                           ; BSR set to: 0
  9264  0034BE  0E00               	movlw	0
  9265  0034C0  6E56               	movwf	?_create_chain,c
  9266  0034C2  0E00               	movlw	0
  9267  0034C4  6E57               	movwf	?_create_chain+1,c
  9268  0034C6  0E00               	movlw	0
  9269  0034C8  6E58               	movwf	?_create_chain+2,c
  9270  0034CA  0E00               	movlw	0
  9271  0034CC  6E59               	movwf	?_create_chain+3,c
  9272  0034CE  0012               	return	
  9273  0034D0                     l4469:
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9277  0034D0  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9278  0034D4  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9279  0034D8  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9280  0034DC  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9281  0034E0  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9282  0034E4  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9283  0034E8  EC0F  F016         	call	_get_fat	;wreg free
  9284  0034EC  C03B  F069         	movff	?_get_fat,create_chain@cs
  9285  0034F0  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9286  0034F4  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9287  0034F8  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9288                           
  9289                           ;ff.c: 1019:   if (cs == 0) break;
  9290  0034FC  0100               	movlb	0	; () banked
  9291  0034FE  5169               	movf	create_chain@cs& (0+255),w,b
  9292  003500  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9293  003502  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9294  003504  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9295  003506  B4D8               	btfsc	status,2,c
  9296  003508  D01D               	goto	l4485
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9300  00350A  2969               	incf	create_chain@cs& (0+255),w,b
  9301  00350C  E107               	bnz	u5390
  9302  00350E  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9303  003510  E105               	bnz	u5390
  9304  003512  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9305  003514  E103               	bnz	u5390
  9306  003516  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9307  003518  B4D8               	btfsc	status,2,c
  9308  00351A  D782               	goto	u5340
  9309  00351C                     u5390:
  9310                           
  9311                           ; BSR set to: 0
  9312  00351C  0569               	decf	create_chain@cs& (0+255),w,b
  9313  00351E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9314  003520  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9315  003522  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9316  003524  B4D8               	btfsc	status,2,c
  9317  003526  D77C               	goto	u5340
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9321  003528  5161               	movf	create_chain@scl& (0+255),w,b
  9322  00352A  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9323  00352C  E1A2               	bnz	l4457
  9324  00352E  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9325  003530  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9326  003532  E19F               	bnz	l4457
  9327  003534  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9328  003536  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9329  003538  E19C               	bnz	l4457
  9330  00353A  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9331  00353C  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9332  00353E  B4D8               	btfsc	status,2,c
  9333  003540  D7BE               	goto	u5370
  9334  003542  D797               	goto	l4457
  9335  003544                     l4485:
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9339  003544  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9340  003548  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9341  00354C  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9342  003550  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9343  003554  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9344  003558  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9345  00355C  0EFF               	movlw	255
  9346  00355E  6E41               	movwf	put_fat@val,c
  9347  003560  0EFF               	movlw	255
  9348  003562  6E42               	movwf	put_fat@val+1,c
  9349  003564  0EFF               	movlw	255
  9350  003566  6E43               	movwf	put_fat@val+2,c
  9351  003568  0E0F               	movlw	15
  9352  00356A  6E44               	movwf	put_fat@val+3,c
  9353  00356C  ECF7  F011         	call	_put_fat	;wreg free
  9354  003570  0100               	movlb	0	; () banked
  9355  003572  6F60               	movwf	create_chain@res& (0+255),b
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9359  003574  5160               	movf	create_chain@res& (0+255),w,b
  9360  003576  A4D8               	btfss	status,2,c
  9361  003578  D01E               	goto	l4493
  9362                           
  9363                           ; BSR set to: 0
  9364  00357A  5058               	movf	create_chain@clst,w,c
  9365  00357C  1059               	iorwf	create_chain@clst+1,w,c
  9366  00357E  105A               	iorwf	create_chain@clst+2,w,c
  9367  003580  105B               	iorwf	create_chain@clst+3,w,c
  9368  003582  B4D8               	btfsc	status,2,c
  9369  003584  D018               	goto	l4493
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9373  003586  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9374  00358A  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9375  00358E  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9376  003592  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9377  003596  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9378  00359A  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9379  00359E  C065  F041         	movff	create_chain@ncl,put_fat@val
  9380  0035A2  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9381  0035A6  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9382  0035AA  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9383  0035AE  ECF7  F011         	call	_put_fat	;wreg free
  9384  0035B2  0100               	movlb	0	; () banked
  9385  0035B4  6F60               	movwf	create_chain@res& (0+255),b
  9386  0035B6                     l4493:
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;ff.c: 1029:  if (res == FR_OK) {
  9390  0035B6  5160               	movf	create_chain@res& (0+255),w,b
  9391  0035B8  A4D8               	btfss	status,2,c
  9392  0035BA  D031               	goto	l4499
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;ff.c: 1030:   fs->last_clust = ncl;
  9396  0035BC  EE20 F00A          	lfsr	2,10
  9397  0035C0  5056               	movf	create_chain@fs,w,c
  9398  0035C2  26D9               	addwf	fsr2l,f,c
  9399  0035C4  5057               	movf	create_chain@fs+1,w,c
  9400  0035C6  22DA               	addwfc	fsr2h,f,c
  9401  0035C8  C065  FFDE         	movff	create_chain@ncl,postinc2
  9402  0035CC  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9403  0035D0  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9404  0035D4  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9405                           
  9406                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9407  0035D8  EE20 F00E          	lfsr	2,14
  9408  0035DC  5056               	movf	create_chain@fs,w,c
  9409  0035DE  26D9               	addwf	fsr2l,f,c
  9410  0035E0  5057               	movf	create_chain@fs+1,w,c
  9411  0035E2  22DA               	addwfc	fsr2h,f,c
  9412  0035E4  28DE               	incf	postinc2,w,c
  9413  0035E6  E107               	bnz	u5450
  9414  0035E8  28DE               	incf	postinc2,w,c
  9415  0035EA  E105               	bnz	u5450
  9416  0035EC  28DE               	incf	postinc2,w,c
  9417  0035EE  E103               	bnz	u5450
  9418  0035F0  28DE               	incf	postinc2,w,c
  9419  0035F2  B4D8               	btfsc	status,2,c
  9420  0035F4  D024               	goto	l400
  9421  0035F6                     u5450:
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;ff.c: 1032:    fs->free_clust--;
  9425  0035F6  EE20 F00E          	lfsr	2,14
  9426  0035FA  5056               	movf	create_chain@fs,w,c
  9427  0035FC  26D9               	addwf	fsr2l,f,c
  9428  0035FE  5057               	movf	create_chain@fs+1,w,c
  9429  003600  22DA               	addwfc	fsr2h,f,c
  9430  003602  06DE               	decf	postinc2,f,c
  9431  003604  0E00               	movlw	0
  9432  003606  5ADE               	subwfb	postinc2,f,c
  9433  003608  5ADE               	subwfb	postinc2,f,c
  9434  00360A  5ADE               	subwfb	postinc2,f,c
  9435                           
  9436                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9437  00360C  EE20 F005          	lfsr	2,5
  9438  003610  5056               	movf	create_chain@fs,w,c
  9439  003612  26D9               	addwf	fsr2l,f,c
  9440  003614  5057               	movf	create_chain@fs+1,w,c
  9441  003616  22DA               	addwfc	fsr2h,f,c
  9442  003618  0E00               	movlw	0
  9443  00361A  80DB               	bsf	plusw2,0,c
  9444  00361C  D010               	goto	l400
  9445  00361E                     l4499:
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9449  00361E  0560               	decf	create_chain@res& (0+255),w,b
  9450  003620  B4D8               	btfsc	status,2,c
  9451  003622  D009               	goto	l402
  9452                           
  9453                           ; BSR set to: 0
  9454  003624  0E01               	movlw	1
  9455  003626  6F65               	movwf	create_chain@ncl& (0+255),b
  9456  003628  0E00               	movlw	0
  9457  00362A  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9458  00362C  0E00               	movlw	0
  9459  00362E  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9460  003630  0E00               	movlw	0
  9461  003632  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9462  003634  D004               	goto	l400
  9463  003636                     l402:
  9464                           
  9465                           ; BSR set to: 0
  9466  003636  6965               	setf	create_chain@ncl& (0+255),b
  9467  003638  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9468  00363A  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9469  00363C  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9470  00363E                     l400:
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;ff.c: 1039:  return ncl;
  9474  00363E  C065  F056         	movff	create_chain@ncl,?_create_chain
  9475  003642  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9476  003646  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9477  00364A  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9478                           
  9479                           ; BSR set to: 0
  9480  00364E  0012               	return		;funcret
  9481  003650                     __end_of_create_chain:
  9482                           	opt callstack 0
  9483                           
  9484 ;; *************** function _put_fat *****************
  9485 ;; Defined at:
  9486 ;;		line 873 in file "ff.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;  fs              2   58[COMRAM] PTR struct .
  9489 ;;		 -> NULL(0), FatFs(558), 
  9490 ;;  clst            4   60[COMRAM] unsigned long 
  9491 ;;  val             4   64[COMRAM] unsigned long 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;  p               2   83[COMRAM] PTR unsigned char 
  9494 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9495 ;;  bc              2   80[COMRAM] unsigned short 
  9496 ;;  res             1   82[COMRAM] enum E93
  9497 ;; Return value:  Size  Location     Type
  9498 ;;                  1    wreg      enum E93
  9499 ;; Registers used:
  9500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9501 ;; Tracked objects:
  9502 ;;		On entry : 0/0
  9503 ;;		On exit  : 0/0
  9504 ;;		Unchanged: 0/0
  9505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9506 ;;      Params:        10       0       0       0       0       0       0       0       0
  9507 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9508 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9509 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9510 ;;Total ram usage:       27 bytes
  9511 ;; Hardware stack levels used:    1
  9512 ;; Hardware stack levels required when called:    8
  9513 ;; This function calls:
  9514 ;;		_move_window
  9515 ;; This function is called by:
  9516 ;;		_remove_chain
  9517 ;;		_create_chain
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           	psect	text24
  9522  0023EE                     __ptext24:
  9523                           	opt callstack 0
  9524  0023EE                     _put_fat:
  9525                           	opt callstack 19
  9526                           
  9527                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9528                           
  9529                           ; BSR set to: 0
  9530                           ;incstack = 0
  9531  0023EE  5040               	movf	put_fat@clst+3,w,c
  9532  0023F0  103F               	iorwf	put_fat@clst+2,w,c
  9533  0023F2  103E               	iorwf	put_fat@clst+1,w,c
  9534  0023F4  E104               	bnz	u5140
  9535  0023F6  0E02               	movlw	2
  9536  0023F8  5C3D               	subwf	put_fat@clst,w,c
  9537  0023FA  A0D8               	btfss	status,0,c
  9538  0023FC  D010               	goto	u5150
  9539  0023FE                     u5140:
  9540  0023FE  EE20 F012          	lfsr	2,18
  9541  002402  503B               	movf	put_fat@fs,w,c
  9542  002404  26D9               	addwf	fsr2l,f,c
  9543  002406  503C               	movf	put_fat@fs+1,w,c
  9544  002408  22DA               	addwfc	fsr2h,f,c
  9545  00240A  50DE               	movf	postinc2,w,c
  9546  00240C  5C3D               	subwf	put_fat@clst,w,c
  9547  00240E  50DE               	movf	postinc2,w,c
  9548  002410  583E               	subwfb	put_fat@clst+1,w,c
  9549  002412  50DE               	movf	postinc2,w,c
  9550  002414  583F               	subwfb	put_fat@clst+2,w,c
  9551  002416  50DE               	movf	postinc2,w,c
  9552  002418  5840               	subwfb	put_fat@clst+3,w,c
  9553  00241A  A0D8               	btfss	status,0,c
  9554  00241C  D1E5               	goto	l4391
  9555  00241E                     u5150:
  9556                           
  9557                           ;ff.c: 885:   res = FR_INT_ERR;
  9558  00241E  0E02               	movlw	2
  9559  002420  6E53               	movwf	put_fat@res,c
  9560                           
  9561                           ;ff.c: 887:  } else {
  9562  002422  D1F8               	goto	l4393
  9563  002424                     l344:
  9564                           
  9565                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9566  002424  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9567  002428  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9568  00242C  90D8               	bcf	status,0,c
  9569  00242E  3052               	rrcf	put_fat@bc+1,w,c
  9570  002430  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9571  002432  3051               	rrcf	put_fat@bc,w,c
  9572  002434  6E45               	movwf	??_put_fat& (0+255),c
  9573  002436  5045               	movf	??_put_fat,w,c
  9574  002438  2651               	addwf	put_fat@bc,f,c
  9575  00243A  5046               	movf	??_put_fat+1,w,c
  9576  00243C  2252               	addwfc	put_fat@bc+1,f,c
  9577                           
  9578                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9579  00243E  C03B  F030         	movff	put_fat@fs,move_window@fs
  9580  002442  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9581  002446  EE20 F01E          	lfsr	2,30
  9582  00244A  503B               	movf	put_fat@fs,w,c
  9583  00244C  26D9               	addwf	fsr2l,f,c
  9584  00244E  503C               	movf	put_fat@fs+1,w,c
  9585  002450  22DA               	addwfc	fsr2h,f,c
  9586  002452  CFDE F045          	movff	postinc2,??_put_fat
  9587  002456  CFDE F046          	movff	postinc2,??_put_fat+1
  9588  00245A  CFDE F047          	movff	postinc2,??_put_fat+2
  9589  00245E  CFDE F048          	movff	postinc2,??_put_fat+3
  9590  002462  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9591  002466  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9592  00246A  0E09               	movlw	9
  9593  00246C  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9594  00246E                     u5165:
  9595  00246E  90D8               	bcf	status,0,c
  9596  002470  324A               	rrcf	??_put_fat+5,f,c
  9597  002472  3249               	rrcf	??_put_fat+4,f,c
  9598  002474  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9599  002476  D7FB               	goto	u5165
  9600  002478  5049               	movf	??_put_fat+4,w,c
  9601  00247A  2445               	addwf	??_put_fat,w,c
  9602  00247C  6E32               	movwf	move_window@sector,c
  9603  00247E  504A               	movf	??_put_fat+5,w,c
  9604  002480  2046               	addwfc	??_put_fat+1,w,c
  9605  002482  6E33               	movwf	move_window@sector+1,c
  9606  002484  0E00               	movlw	0
  9607  002486  2047               	addwfc	??_put_fat+2,w,c
  9608  002488  6E34               	movwf	move_window@sector+2,c
  9609  00248A  0E00               	movlw	0
  9610  00248C  2048               	addwfc	??_put_fat+3,w,c
  9611  00248E  6E35               	movwf	move_window@sector+3,c
  9612  002490  EC7E  F027         	call	_move_window	;wreg free
  9613  002494  6E53               	movwf	put_fat@res,c
  9614                           
  9615                           ;ff.c: 892:    if (res != FR_OK) break;
  9616  002496  5053               	movf	put_fat@res,w,c
  9617  002498  A4D8               	btfss	status,2,c
  9618  00249A  D1BC               	goto	l4393
  9619                           
  9620                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9621  00249C  0EFF               	movlw	255
  9622  00249E  6E45               	movwf	??_put_fat& (0+255),c
  9623  0024A0  0E01               	movlw	1
  9624  0024A2  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9625  0024A4  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9626  0024A8  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9627  0024AC  5045               	movf	??_put_fat,w,c
  9628  0024AE  1647               	andwf	??_put_fat+2,f,c
  9629  0024B0  5046               	movf	??_put_fat+1,w,c
  9630  0024B2  1648               	andwf	??_put_fat+3,f,c
  9631  0024B4  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9632  0024B8  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9633  0024BC  5047               	movf	??_put_fat+2,w,c
  9634  0024BE  2649               	addwf	??_put_fat+4,f,c
  9635  0024C0  5048               	movf	??_put_fat+3,w,c
  9636  0024C2  224A               	addwfc	??_put_fat+5,f,c
  9637  0024C4  0E2E               	movlw	46
  9638  0024C6  2449               	addwf	??_put_fat+4,w,c
  9639  0024C8  6E54               	movwf	put_fat@p,c
  9640  0024CA  0E00               	movlw	0
  9641  0024CC  204A               	addwfc	??_put_fat+5,w,c
  9642  0024CE  6E55               	movwf	put_fat@p+1,c
  9643  0024D0  4A51               	infsnz	put_fat@bc,f,c
  9644  0024D2  2A52               	incf	put_fat@bc+1,f,c
  9645                           
  9646                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9647  0024D4  B03D               	btfsc	put_fat@clst,0,c
  9648  0024D6  D004               	goto	l4345
  9649  0024D8  C041  F04D         	movff	put_fat@val,_put_fat$551
  9650  0024DC  6A4E               	clrf	_put_fat$551+1,c
  9651  0024DE  D01A               	goto	l4347
  9652  0024E0                     l4345:
  9653  0024E0  5041               	movf	put_fat@val,w,c
  9654  0024E2  6E45               	movwf	??_put_fat& (0+255),c
  9655  0024E4  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9656  0024E6  3A45               	swapf	??_put_fat,f,c
  9657  0024E8  3A46               	swapf	??_put_fat+1,f,c
  9658  0024EA  0EF0               	movlw	240
  9659  0024EC  1646               	andwf	??_put_fat+1,f,c
  9660  0024EE  5045               	movf	??_put_fat,w,c
  9661  0024F0  0B0F               	andlw	15
  9662  0024F2  1246               	iorwf	??_put_fat+1,f,c
  9663  0024F4  0EF0               	movlw	240
  9664  0024F6  1645               	andwf	??_put_fat,f,c
  9665  0024F8  C054  FFD9         	movff	put_fat@p,fsr2l
  9666  0024FC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9667  002500  50DF               	movf	indf2,w,c
  9668  002502  0B0F               	andlw	15
  9669  002504  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9670  002506  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9671  002508  5045               	movf	??_put_fat,w,c
  9672  00250A  1047               	iorwf	??_put_fat+2,w,c
  9673  00250C  6E4D               	movwf	_put_fat$551,c
  9674  00250E  5046               	movf	??_put_fat+1,w,c
  9675  002510  1048               	iorwf	??_put_fat+3,w,c
  9676  002512  6E4E               	movwf	_put_fat$551+1,c
  9677  002514                     l4347:
  9678  002514  C054  FFD9         	movff	put_fat@p,fsr2l
  9679  002518  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9680  00251C  C04D  FFDF         	movff	_put_fat$551,indf2
  9681                           
  9682                           ;ff.c: 895:    fs->wflag = 1;
  9683  002520  EE20 F004          	lfsr	2,4
  9684  002524  503B               	movf	put_fat@fs,w,c
  9685  002526  26D9               	addwf	fsr2l,f,c
  9686  002528  503C               	movf	put_fat@fs+1,w,c
  9687  00252A  22DA               	addwfc	fsr2h,f,c
  9688  00252C  0E01               	movlw	1
  9689  00252E  6EDF               	movwf	indf2,c
  9690                           
  9691                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9692  002530  C03B  F030         	movff	put_fat@fs,move_window@fs
  9693  002534  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9694  002538  EE20 F01E          	lfsr	2,30
  9695  00253C  503B               	movf	put_fat@fs,w,c
  9696  00253E  26D9               	addwf	fsr2l,f,c
  9697  002540  503C               	movf	put_fat@fs+1,w,c
  9698  002542  22DA               	addwfc	fsr2h,f,c
  9699  002544  CFDE F045          	movff	postinc2,??_put_fat
  9700  002548  CFDE F046          	movff	postinc2,??_put_fat+1
  9701  00254C  CFDE F047          	movff	postinc2,??_put_fat+2
  9702  002550  CFDE F048          	movff	postinc2,??_put_fat+3
  9703  002554  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9704  002558  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9705  00255C  0E09               	movlw	9
  9706  00255E  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9707  002560                     u5195:
  9708  002560  90D8               	bcf	status,0,c
  9709  002562  324A               	rrcf	??_put_fat+5,f,c
  9710  002564  3249               	rrcf	??_put_fat+4,f,c
  9711  002566  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9712  002568  D7FB               	goto	u5195
  9713  00256A  5049               	movf	??_put_fat+4,w,c
  9714  00256C  2445               	addwf	??_put_fat,w,c
  9715  00256E  6E32               	movwf	move_window@sector,c
  9716  002570  504A               	movf	??_put_fat+5,w,c
  9717  002572  2046               	addwfc	??_put_fat+1,w,c
  9718  002574  6E33               	movwf	move_window@sector+1,c
  9719  002576  0E00               	movlw	0
  9720  002578  2047               	addwfc	??_put_fat+2,w,c
  9721  00257A  6E34               	movwf	move_window@sector+2,c
  9722  00257C  0E00               	movlw	0
  9723  00257E  2048               	addwfc	??_put_fat+3,w,c
  9724  002580  6E35               	movwf	move_window@sector+3,c
  9725  002582  EC7E  F027         	call	_move_window	;wreg free
  9726  002586  6E53               	movwf	put_fat@res,c
  9727                           
  9728                           ;ff.c: 897:    if (res != FR_OK) break;
  9729  002588  5053               	movf	put_fat@res,w,c
  9730  00258A  A4D8               	btfss	status,2,c
  9731  00258C  D143               	goto	l4393
  9732                           
  9733                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9734  00258E  0EFF               	movlw	255
  9735  002590  6E45               	movwf	??_put_fat& (0+255),c
  9736  002592  0E01               	movlw	1
  9737  002594  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9738  002596  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9739  00259A  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9740  00259E  5045               	movf	??_put_fat,w,c
  9741  0025A0  1647               	andwf	??_put_fat+2,f,c
  9742  0025A2  5046               	movf	??_put_fat+1,w,c
  9743  0025A4  1648               	andwf	??_put_fat+3,f,c
  9744  0025A6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9745  0025AA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9746  0025AE  5047               	movf	??_put_fat+2,w,c
  9747  0025B0  2649               	addwf	??_put_fat+4,f,c
  9748  0025B2  5048               	movf	??_put_fat+3,w,c
  9749  0025B4  224A               	addwfc	??_put_fat+5,f,c
  9750  0025B6  0E2E               	movlw	46
  9751  0025B8  2449               	addwf	??_put_fat+4,w,c
  9752  0025BA  6E54               	movwf	put_fat@p,c
  9753  0025BC  0E00               	movlw	0
  9754  0025BE  204A               	addwfc	??_put_fat+5,w,c
  9755  0025C0  6E55               	movwf	put_fat@p+1,c
  9756                           
  9757                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9758  0025C2  B03D               	btfsc	put_fat@clst,0,c
  9759  0025C4  D01B               	goto	l4363
  9760  0025C6  C041  F045         	movff	put_fat@val,??_put_fat
  9761  0025CA  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9762  0025CE  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9763  0025D2  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9764  0025D6  C046  F045         	movff	??_put_fat+1,??_put_fat
  9765  0025DA  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9766  0025DE  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9767  0025E2  6A48               	clrf	??_put_fat+3,c
  9768  0025E4  0E0F               	movlw	15
  9769  0025E6  1645               	andwf	??_put_fat,f,c
  9770  0025E8  C054  FFD9         	movff	put_fat@p,fsr2l
  9771  0025EC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9772  0025F0  50DF               	movf	indf2,w,c
  9773  0025F2  0BF0               	andlw	240
  9774  0025F4  1045               	iorwf	??_put_fat,w,c
  9775  0025F6  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9776  0025F8  5049               	movf	??_put_fat+4,w,c
  9777  0025FA  D012               	goto	L9
  9778  0025FC                     l4363:
  9779  0025FC  C041  F045         	movff	put_fat@val,??_put_fat
  9780  002600  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9781  002604  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9782  002608  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9783  00260C  0E05               	movlw	5
  9784  00260E  D005               	goto	u5220
  9785  002610                     u5225:
  9786  002610  90D8               	bcf	status,0,c
  9787  002612  3248               	rrcf	??_put_fat+3,f,c
  9788  002614  3247               	rrcf	??_put_fat+2,f,c
  9789  002616  3246               	rrcf	??_put_fat+1,f,c
  9790  002618  3245               	rrcf	??_put_fat,f,c
  9791  00261A                     u5220:
  9792  00261A  2EE8               	decfsz	wreg,f,c
  9793  00261C  D7F9               	goto	u5225
  9794  00261E  5045               	movf	??_put_fat,w,c
  9795  002620                     L9:
  9796  002620  6E4F               	movwf	_put_fat$552,c
  9797  002622  6A50               	clrf	_put_fat$552+1,c
  9798  002624  C054  FFD9         	movff	put_fat@p,fsr2l
  9799  002628  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9800  00262C  C04F  FFDF         	movff	_put_fat$552,indf2
  9801  002630  D0D2               	goto	l4387
  9802  002632                     l4367:
  9803                           
  9804                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9805  002632  C03B  F030         	movff	put_fat@fs,move_window@fs
  9806  002636  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9807  00263A  EE20 F01E          	lfsr	2,30
  9808  00263E  503B               	movf	put_fat@fs,w,c
  9809  002640  26D9               	addwf	fsr2l,f,c
  9810  002642  503C               	movf	put_fat@fs+1,w,c
  9811  002644  22DA               	addwfc	fsr2h,f,c
  9812  002646  CFDE F045          	movff	postinc2,??_put_fat
  9813  00264A  CFDE F046          	movff	postinc2,??_put_fat+1
  9814  00264E  CFDE F047          	movff	postinc2,??_put_fat+2
  9815  002652  CFDE F048          	movff	postinc2,??_put_fat+3
  9816  002656  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9817  00265A  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9818  00265E  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9819  002662  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9820  002666  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9821  00266A  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9822  00266E  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9823  002672  6A4C               	clrf	??_put_fat+7,c
  9824  002674  5045               	movf	??_put_fat,w,c
  9825  002676  2449               	addwf	??_put_fat+4,w,c
  9826  002678  6E32               	movwf	move_window@sector,c
  9827  00267A  5046               	movf	??_put_fat+1,w,c
  9828  00267C  204A               	addwfc	??_put_fat+5,w,c
  9829  00267E  6E33               	movwf	move_window@sector+1,c
  9830  002680  5047               	movf	??_put_fat+2,w,c
  9831  002682  204B               	addwfc	??_put_fat+6,w,c
  9832  002684  6E34               	movwf	move_window@sector+2,c
  9833  002686  5048               	movf	??_put_fat+3,w,c
  9834  002688  204C               	addwfc	??_put_fat+7,w,c
  9835  00268A  6E35               	movwf	move_window@sector+3,c
  9836  00268C  EC7E  F027         	call	_move_window	;wreg free
  9837  002690  6E53               	movwf	put_fat@res,c
  9838                           
  9839                           ;ff.c: 905:    if (res != FR_OK) break;
  9840  002692  5053               	movf	put_fat@res,w,c
  9841  002694  A4D8               	btfss	status,2,c
  9842  002696  D0BE               	goto	l4393
  9843                           
  9844                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9845  002698  0EFF               	movlw	255
  9846  00269A  6E45               	movwf	??_put_fat& (0+255),c
  9847  00269C  0E01               	movlw	1
  9848  00269E  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9849  0026A0  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9850  0026A4  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9851  0026A8  90D8               	bcf	status,0,c
  9852  0026AA  3647               	rlcf	??_put_fat+2,f,c
  9853  0026AC  3648               	rlcf	??_put_fat+3,f,c
  9854  0026AE  5045               	movf	??_put_fat,w,c
  9855  0026B0  1647               	andwf	??_put_fat+2,f,c
  9856  0026B2  5046               	movf	??_put_fat+1,w,c
  9857  0026B4  1648               	andwf	??_put_fat+3,f,c
  9858  0026B6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9859  0026BA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9860  0026BE  5047               	movf	??_put_fat+2,w,c
  9861  0026C0  2649               	addwf	??_put_fat+4,f,c
  9862  0026C2  5048               	movf	??_put_fat+3,w,c
  9863  0026C4  224A               	addwfc	??_put_fat+5,f,c
  9864  0026C6  0E2E               	movlw	46
  9865  0026C8  2449               	addwf	??_put_fat+4,w,c
  9866  0026CA  6E54               	movwf	put_fat@p,c
  9867  0026CC  0E00               	movlw	0
  9868  0026CE  204A               	addwfc	??_put_fat+5,w,c
  9869  0026D0  6E55               	movwf	put_fat@p+1,c
  9870                           
  9871                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  9872  0026D2  C054  FFD9         	movff	put_fat@p,fsr2l
  9873  0026D6  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9874  0026DA  C041  FFDE         	movff	put_fat@val,postinc2
  9875  0026DE  C042  FFDD         	movff	put_fat@val+1,postdec2
  9876  0026E2  D079               	goto	l4387
  9877  0026E4                     l4377:
  9878                           
  9879                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  9880  0026E4  C03B  F030         	movff	put_fat@fs,move_window@fs
  9881  0026E8  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9882  0026EC  EE20 F01E          	lfsr	2,30
  9883  0026F0  503B               	movf	put_fat@fs,w,c
  9884  0026F2  26D9               	addwf	fsr2l,f,c
  9885  0026F4  503C               	movf	put_fat@fs+1,w,c
  9886  0026F6  22DA               	addwfc	fsr2h,f,c
  9887  0026F8  CFDE F045          	movff	postinc2,??_put_fat
  9888  0026FC  CFDE F046          	movff	postinc2,??_put_fat+1
  9889  002700  CFDE F047          	movff	postinc2,??_put_fat+2
  9890  002704  CFDE F048          	movff	postinc2,??_put_fat+3
  9891  002708  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9892  00270C  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9893  002710  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9894  002714  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9895  002718  0E08               	movlw	8
  9896  00271A  D005               	goto	u5240
  9897  00271C                     u5245:
  9898  00271C  90D8               	bcf	status,0,c
  9899  00271E  324C               	rrcf	??_put_fat+7,f,c
  9900  002720  324B               	rrcf	??_put_fat+6,f,c
  9901  002722  324A               	rrcf	??_put_fat+5,f,c
  9902  002724  3249               	rrcf	??_put_fat+4,f,c
  9903  002726                     u5240:
  9904  002726  2EE8               	decfsz	wreg,f,c
  9905  002728  D7F9               	goto	u5245
  9906  00272A  5045               	movf	??_put_fat,w,c
  9907  00272C  2449               	addwf	??_put_fat+4,w,c
  9908  00272E  6E32               	movwf	move_window@sector,c
  9909  002730  5046               	movf	??_put_fat+1,w,c
  9910  002732  204A               	addwfc	??_put_fat+5,w,c
  9911  002734  6E33               	movwf	move_window@sector+1,c
  9912  002736  5047               	movf	??_put_fat+2,w,c
  9913  002738  204B               	addwfc	??_put_fat+6,w,c
  9914  00273A  6E34               	movwf	move_window@sector+2,c
  9915  00273C  5048               	movf	??_put_fat+3,w,c
  9916  00273E  204C               	addwfc	??_put_fat+7,w,c
  9917  002740  6E35               	movwf	move_window@sector+3,c
  9918  002742  EC7E  F027         	call	_move_window	;wreg free
  9919  002746  6E53               	movwf	put_fat@res,c
  9920                           
  9921                           ;ff.c: 913:    if (res != FR_OK) break;
  9922  002748  5053               	movf	put_fat@res,w,c
  9923  00274A  A4D8               	btfss	status,2,c
  9924  00274C  D063               	goto	l4393
  9925                           
  9926                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  9927  00274E  0EFF               	movlw	255
  9928  002750  6E45               	movwf	??_put_fat& (0+255),c
  9929  002752  0E01               	movlw	1
  9930  002754  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9931  002756  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9932  00275A  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9933  00275E  90D8               	bcf	status,0,c
  9934  002760  3647               	rlcf	??_put_fat+2,f,c
  9935  002762  3648               	rlcf	??_put_fat+3,f,c
  9936  002764  90D8               	bcf	status,0,c
  9937  002766  3647               	rlcf	??_put_fat+2,f,c
  9938  002768  3648               	rlcf	??_put_fat+3,f,c
  9939  00276A  5045               	movf	??_put_fat,w,c
  9940  00276C  1647               	andwf	??_put_fat+2,f,c
  9941  00276E  5046               	movf	??_put_fat+1,w,c
  9942  002770  1648               	andwf	??_put_fat+3,f,c
  9943  002772  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9944  002776  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9945  00277A  5047               	movf	??_put_fat+2,w,c
  9946  00277C  2649               	addwf	??_put_fat+4,f,c
  9947  00277E  5048               	movf	??_put_fat+3,w,c
  9948  002780  224A               	addwfc	??_put_fat+5,f,c
  9949  002782  0E2E               	movlw	46
  9950  002784  2449               	addwf	??_put_fat+4,w,c
  9951  002786  6E54               	movwf	put_fat@p,c
  9952  002788  0E00               	movlw	0
  9953  00278A  204A               	addwfc	??_put_fat+5,w,c
  9954  00278C  6E55               	movwf	put_fat@p+1,c
  9955                           
  9956                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  9957  00278E  C054  FFD9         	movff	put_fat@p,fsr2l
  9958  002792  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9959  002796  0E00               	movlw	0
  9960  002798  14DE               	andwf	postinc2,w,c
  9961  00279A  6E45               	movwf	??_put_fat& (0+255),c
  9962  00279C  0E00               	movlw	0
  9963  00279E  14DE               	andwf	postinc2,w,c
  9964  0027A0  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9965  0027A2  0E00               	movlw	0
  9966  0027A4  14DE               	andwf	postinc2,w,c
  9967  0027A6  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9968  0027A8  0EF0               	movlw	240
  9969  0027AA  14DE               	andwf	postinc2,w,c
  9970  0027AC  6E48               	movwf	(??_put_fat+3)& (0+255),c
  9971  0027AE  5045               	movf	??_put_fat,w,c
  9972  0027B0  1241               	iorwf	put_fat@val,f,c
  9973  0027B2  5046               	movf	??_put_fat+1,w,c
  9974  0027B4  1242               	iorwf	put_fat@val+1,f,c
  9975  0027B6  5047               	movf	??_put_fat+2,w,c
  9976  0027B8  1243               	iorwf	put_fat@val+2,f,c
  9977  0027BA  5048               	movf	??_put_fat+3,w,c
  9978  0027BC  1244               	iorwf	put_fat@val+3,f,c
  9979                           
  9980                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
  9981  0027BE  C054  FFD9         	movff	put_fat@p,fsr2l
  9982  0027C2  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9983  0027C6  C041  FFDE         	movff	put_fat@val,postinc2
  9984  0027CA  C042  FFDE         	movff	put_fat@val+1,postinc2
  9985  0027CE  C043  FFDE         	movff	put_fat@val+2,postinc2
  9986  0027D2  C044  FFDE         	movff	put_fat@val+3,postinc2
  9987  0027D6                     l4387:
  9988                           
  9989                           ;ff.c: 917:    fs->wflag = 1;
  9990  0027D6  EE20 F004          	lfsr	2,4
  9991  0027DA  503B               	movf	put_fat@fs,w,c
  9992  0027DC  26D9               	addwf	fsr2l,f,c
  9993  0027DE  503C               	movf	put_fat@fs+1,w,c
  9994  0027E0  22DA               	addwfc	fsr2h,f,c
  9995  0027E2  0E01               	movlw	1
  9996  0027E4  6EDF               	movwf	indf2,c
  9997                           
  9998                           ;ff.c: 918:    break;
  9999  0027E6  D016               	goto	l4393
 10000  0027E8                     l4391:
 10001  0027E8  C03B  FFD9         	movff	put_fat@fs,fsr2l
 10002  0027EC  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 10003  0027F0  50DF               	movf	indf2,w,c
 10004  0027F2  6E45               	movwf	??_put_fat& (0+255),c
 10005  0027F4  6A46               	clrf	(??_put_fat+1)& (0+255),c
 10006                           
 10007                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10008                           ; Switch size 1, requested type "simple"
 10009                           ; Number of cases is 1, Range of values is 0 to 0
 10010                           ; switch strategies available:
 10011                           ; Name         Instructions Cycles
 10012                           ; simple_byte            4     3 (average)
 10013                           ;	Chosen strategy is simple_byte
 10014  0027F6  5046               	movf	??_put_fat+1,w,c
 10015  0027F8  0A00               	xorlw	0	; case 0
 10016  0027FA  A4D8               	btfss	status,2,c
 10017  0027FC  D610               	goto	u5150
 10018                           
 10019                           ; Switch size 1, requested type "simple"
 10020                           ; Number of cases is 3, Range of values is 1 to 3
 10021                           ; switch strategies available:
 10022                           ; Name         Instructions Cycles
 10023                           ; simple_byte           10     6 (average)
 10024                           ;	Chosen strategy is simple_byte
 10025  0027FE  5045               	movf	??_put_fat,w,c
 10026  002800  0A01               	xorlw	1	; case 1
 10027  002802  B4D8               	btfsc	status,2,c
 10028  002804  D60F               	goto	l344
 10029  002806  0A03               	xorlw	3	; case 2
 10030  002808  B4D8               	btfsc	status,2,c
 10031  00280A  D713               	goto	l4367
 10032  00280C  0A01               	xorlw	1	; case 3
 10033  00280E  B4D8               	btfsc	status,2,c
 10034  002810  D769               	goto	l4377
 10035  002812  D605               	goto	u5150
 10036  002814                     l4393:
 10037                           
 10038                           ;ff.c: 925:  return res;
 10039  002814  5053               	movf	put_fat@res,w,c
 10040  002816  0012               	return		;funcret
 10041  002818                     __end_of_put_fat:
 10042                           	opt callstack 0
 10043                           
 10044 ;; *************** function _get_fat *****************
 10045 ;; Defined at:
 10046 ;;		line 818 in file "ff.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  fs              2   58[COMRAM] PTR struct .
 10049 ;;		 -> NULL(0), FatFs(558), 
 10050 ;;  clst            4   60[COMRAM] unsigned long 
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;  val             4   75[COMRAM] unsigned long 
 10053 ;;  bc              2   83[COMRAM] unsigned short 
 10054 ;;  p               2   81[COMRAM] PTR unsigned char 
 10055 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 10056 ;;  wc              2   79[COMRAM] unsigned short 
 10057 ;; Return value:  Size  Location     Type
 10058 ;;                  4   58[COMRAM] unsigned long 
 10059 ;; Registers used:
 10060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10061 ;; Tracked objects:
 10062 ;;		On entry : 0/0
 10063 ;;		On exit  : 0/0
 10064 ;;		Unchanged: 0/0
 10065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10066 ;;      Params:         6       0       0       0       0       0       0       0       0
 10067 ;;      Locals:        12       0       0       0       0       0       0       0       0
 10068 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10069 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10070 ;;Total ram usage:       27 bytes
 10071 ;; Hardware stack levels used:    1
 10072 ;; Hardware stack levels required when called:    8
 10073 ;; This function calls:
 10074 ;;		_move_window
 10075 ;; This function is called by:
 10076 ;;		_remove_chain
 10077 ;;		_create_chain
 10078 ;;		_dir_sdi
 10079 ;;		_dir_next
 10080 ;;		_f_lseek
 10081 ;;		_f_read
 10082 ;; This function uses a non-reentrant model
 10083 ;;
 10084                           
 10085                           	psect	text25
 10086  002C1E                     __ptext25:
 10087                           	opt callstack 0
 10088  002C1E                     _get_fat:
 10089                           	opt callstack 19
 10090                           
 10091                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10092                           
 10093                           ;incstack = 0
 10094  002C1E  5040               	movf	get_fat@clst+3,w,c
 10095  002C20  103F               	iorwf	get_fat@clst+2,w,c
 10096  002C22  103E               	iorwf	get_fat@clst+1,w,c
 10097  002C24  E104               	bnz	u5030
 10098  002C26  0E02               	movlw	2
 10099  002C28  5C3D               	subwf	get_fat@clst,w,c
 10100  002C2A  A0D8               	btfss	status,0,c
 10101  002C2C  D010               	goto	u5040
 10102  002C2E                     u5030:
 10103  002C2E  EE20 F012          	lfsr	2,18
 10104  002C32  503B               	movf	get_fat@fs,w,c
 10105  002C34  26D9               	addwf	fsr2l,f,c
 10106  002C36  503C               	movf	get_fat@fs+1,w,c
 10107  002C38  22DA               	addwfc	fsr2h,f,c
 10108  002C3A  50DE               	movf	postinc2,w,c
 10109  002C3C  5C3D               	subwf	get_fat@clst,w,c
 10110  002C3E  50DE               	movf	postinc2,w,c
 10111  002C40  583E               	subwfb	get_fat@clst+1,w,c
 10112  002C42  50DE               	movf	postinc2,w,c
 10113  002C44  583F               	subwfb	get_fat@clst+2,w,c
 10114  002C46  50DE               	movf	postinc2,w,c
 10115  002C48  5840               	subwfb	get_fat@clst+3,w,c
 10116  002C4A  A0D8               	btfss	status,0,c
 10117  002C4C  D008               	goto	l318
 10118  002C4E                     u5040:
 10119                           
 10120                           ;ff.c: 829:   val = 1;
 10121  002C4E  0E01               	movlw	1
 10122  002C50  6E4C               	movwf	get_fat@val,c
 10123  002C52  0E00               	movlw	0
 10124  002C54  6E4D               	movwf	get_fat@val+1,c
 10125  002C56  0E00               	movlw	0
 10126  002C58  6E4E               	movwf	get_fat@val+2,c
 10127  002C5A  0E00               	movlw	0
 10128  002C5C  D190               	goto	L11
 10129  002C5E                     l318:
 10130                           
 10131                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10132  002C5E  684C               	setf	get_fat@val,c
 10133  002C60  684D               	setf	get_fat@val+1,c
 10134  002C62  684E               	setf	get_fat@val+2,c
 10135  002C64  684F               	setf	get_fat@val+3,c
 10136                           
 10137                           ;ff.c: 834:   switch (fs->fs_type) {
 10138  002C66  D18D               	goto	l4317
 10139  002C68                     l323:
 10140                           
 10141                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10142  002C68  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10143  002C6C  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10144  002C70  90D8               	bcf	status,0,c
 10145  002C72  3055               	rrcf	get_fat@bc+1,w,c
 10146  002C74  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10147  002C76  3054               	rrcf	get_fat@bc,w,c
 10148  002C78  6E41               	movwf	??_get_fat& (0+255),c
 10149  002C7A  5041               	movf	??_get_fat,w,c
 10150  002C7C  2654               	addwf	get_fat@bc,f,c
 10151  002C7E  5042               	movf	??_get_fat+1,w,c
 10152  002C80  2255               	addwfc	get_fat@bc+1,f,c
 10153                           
 10154                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10155  002C82  C03B  F030         	movff	get_fat@fs,move_window@fs
 10156  002C86  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10157  002C8A  EE20 F01E          	lfsr	2,30
 10158  002C8E  503B               	movf	get_fat@fs,w,c
 10159  002C90  26D9               	addwf	fsr2l,f,c
 10160  002C92  503C               	movf	get_fat@fs+1,w,c
 10161  002C94  22DA               	addwfc	fsr2h,f,c
 10162  002C96  CFDE F041          	movff	postinc2,??_get_fat
 10163  002C9A  CFDE F042          	movff	postinc2,??_get_fat+1
 10164  002C9E  CFDE F043          	movff	postinc2,??_get_fat+2
 10165  002CA2  CFDE F044          	movff	postinc2,??_get_fat+3
 10166  002CA6  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10167  002CAA  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10168  002CAE  0E09               	movlw	9
 10169  002CB0  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10170  002CB2                     u5055:
 10171  002CB2  90D8               	bcf	status,0,c
 10172  002CB4  3246               	rrcf	??_get_fat+5,f,c
 10173  002CB6  3245               	rrcf	??_get_fat+4,f,c
 10174  002CB8  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10175  002CBA  D7FB               	goto	u5055
 10176  002CBC  5045               	movf	??_get_fat+4,w,c
 10177  002CBE  2441               	addwf	??_get_fat,w,c
 10178  002CC0  6E32               	movwf	move_window@sector,c
 10179  002CC2  5046               	movf	??_get_fat+5,w,c
 10180  002CC4  2042               	addwfc	??_get_fat+1,w,c
 10181  002CC6  6E33               	movwf	move_window@sector+1,c
 10182  002CC8  0E00               	movlw	0
 10183  002CCA  2043               	addwfc	??_get_fat+2,w,c
 10184  002CCC  6E34               	movwf	move_window@sector+2,c
 10185  002CCE  0E00               	movlw	0
 10186  002CD0  2044               	addwfc	??_get_fat+3,w,c
 10187  002CD2  6E35               	movwf	move_window@sector+3,c
 10188  002CD4  EC7E  F027         	call	_move_window	;wreg free
 10189  002CD8  0900               	iorlw	0
 10190  002CDA  A4D8               	btfss	status,2,c
 10191  002CDC  D168               	goto	l321
 10192                           
 10193                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10194  002CDE  0EFF               	movlw	255
 10195  002CE0  6E41               	movwf	??_get_fat& (0+255),c
 10196  002CE2  0E01               	movlw	1
 10197  002CE4  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10198  002CE6  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10199  002CEA  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10200  002CEE  5041               	movf	??_get_fat,w,c
 10201  002CF0  1643               	andwf	??_get_fat+2,f,c
 10202  002CF2  5042               	movf	??_get_fat+1,w,c
 10203  002CF4  1644               	andwf	??_get_fat+3,f,c
 10204  002CF6  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10205  002CFA  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10206  002CFE  5043               	movf	??_get_fat+2,w,c
 10207  002D00  2645               	addwf	??_get_fat+4,f,c
 10208  002D02  5044               	movf	??_get_fat+3,w,c
 10209  002D04  2246               	addwfc	??_get_fat+5,f,c
 10210  002D06  0E2E               	movlw	46
 10211  002D08  2445               	addwf	??_get_fat+4,w,c
 10212  002D0A  6ED9               	movwf	fsr2l,c
 10213  002D0C  0E00               	movlw	0
 10214  002D0E  2046               	addwfc	??_get_fat+5,w,c
 10215  002D10  6EDA               	movwf	fsr2h,c
 10216  002D12  50DF               	movf	indf2,w,c
 10217  002D14  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10218  002D16  5047               	movf	??_get_fat+6,w,c
 10219  002D18  6E50               	movwf	get_fat@wc,c
 10220  002D1A  6A51               	clrf	get_fat@wc+1,c
 10221  002D1C  4A54               	infsnz	get_fat@bc,f,c
 10222  002D1E  2A55               	incf	get_fat@bc+1,f,c
 10223                           
 10224                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10225  002D20  C03B  F030         	movff	get_fat@fs,move_window@fs
 10226  002D24  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10227  002D28  EE20 F01E          	lfsr	2,30
 10228  002D2C  503B               	movf	get_fat@fs,w,c
 10229  002D2E  26D9               	addwf	fsr2l,f,c
 10230  002D30  503C               	movf	get_fat@fs+1,w,c
 10231  002D32  22DA               	addwfc	fsr2h,f,c
 10232  002D34  CFDE F041          	movff	postinc2,??_get_fat
 10233  002D38  CFDE F042          	movff	postinc2,??_get_fat+1
 10234  002D3C  CFDE F043          	movff	postinc2,??_get_fat+2
 10235  002D40  CFDE F044          	movff	postinc2,??_get_fat+3
 10236  002D44  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10237  002D48  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10238  002D4C  0E09               	movlw	9
 10239  002D4E  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10240  002D50                     u5075:
 10241  002D50  90D8               	bcf	status,0,c
 10242  002D52  3246               	rrcf	??_get_fat+5,f,c
 10243  002D54  3245               	rrcf	??_get_fat+4,f,c
 10244  002D56  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10245  002D58  D7FB               	goto	u5075
 10246  002D5A  5045               	movf	??_get_fat+4,w,c
 10247  002D5C  2441               	addwf	??_get_fat,w,c
 10248  002D5E  6E32               	movwf	move_window@sector,c
 10249  002D60  5046               	movf	??_get_fat+5,w,c
 10250  002D62  2042               	addwfc	??_get_fat+1,w,c
 10251  002D64  6E33               	movwf	move_window@sector+1,c
 10252  002D66  0E00               	movlw	0
 10253  002D68  2043               	addwfc	??_get_fat+2,w,c
 10254  002D6A  6E34               	movwf	move_window@sector+2,c
 10255  002D6C  0E00               	movlw	0
 10256  002D6E  2044               	addwfc	??_get_fat+3,w,c
 10257  002D70  6E35               	movwf	move_window@sector+3,c
 10258  002D72  EC7E  F027         	call	_move_window	;wreg free
 10259  002D76  0900               	iorlw	0
 10260  002D78  A4D8               	btfss	status,2,c
 10261  002D7A  D119               	goto	l321
 10262                           
 10263                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10264  002D7C  0EFF               	movlw	255
 10265  002D7E  6E41               	movwf	??_get_fat& (0+255),c
 10266  002D80  0E01               	movlw	1
 10267  002D82  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10268  002D84  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10269  002D88  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10270  002D8C  5041               	movf	??_get_fat,w,c
 10271  002D8E  1643               	andwf	??_get_fat+2,f,c
 10272  002D90  5042               	movf	??_get_fat+1,w,c
 10273  002D92  1644               	andwf	??_get_fat+3,f,c
 10274  002D94  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10275  002D98  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10276  002D9C  5043               	movf	??_get_fat+2,w,c
 10277  002D9E  2645               	addwf	??_get_fat+4,f,c
 10278  002DA0  5044               	movf	??_get_fat+3,w,c
 10279  002DA2  2246               	addwfc	??_get_fat+5,f,c
 10280  002DA4  0E2E               	movlw	46
 10281  002DA6  2445               	addwf	??_get_fat+4,w,c
 10282  002DA8  6ED9               	movwf	fsr2l,c
 10283  002DAA  0E00               	movlw	0
 10284  002DAC  2046               	addwfc	??_get_fat+5,w,c
 10285  002DAE  6EDA               	movwf	fsr2h,c
 10286  002DB0  50DF               	movf	indf2,w,c
 10287  002DB2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10288  002DB4  5047               	movf	??_get_fat+6,w,c
 10289  002DB6  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10290  002DB8  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10291  002DBA  5048               	movf	??_get_fat+7,w,c
 10292  002DBC  1250               	iorwf	get_fat@wc,f,c
 10293  002DBE  5049               	movf	??_get_fat+8,w,c
 10294  002DC0  1251               	iorwf	get_fat@wc+1,f,c
 10295                           
 10296                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10297  002DC2  B03D               	btfsc	get_fat@clst,0,c
 10298  002DC4  D007               	goto	l4295
 10299  002DC6  0EFF               	movlw	255
 10300  002DC8  1450               	andwf	get_fat@wc,w,c
 10301  002DCA  6E4A               	movwf	_get_fat$525,c
 10302  002DCC  0E0F               	movlw	15
 10303  002DCE  1451               	andwf	get_fat@wc+1,w,c
 10304  002DD0  6E4B               	movwf	_get_fat$525+1,c
 10305  002DD2  D00F               	goto	l4297
 10306  002DD4                     l4295:
 10307  002DD4  C050  F041         	movff	get_fat@wc,??_get_fat
 10308  002DD8  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10309  002DDC  0E04               	movlw	4
 10310  002DDE  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10311  002DE0                     u5105:
 10312  002DE0  90D8               	bcf	status,0,c
 10313  002DE2  3242               	rrcf	??_get_fat+1,f,c
 10314  002DE4  3241               	rrcf	??_get_fat,f,c
 10315  002DE6  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10316  002DE8  D7FB               	goto	u5105
 10317  002DEA  C041  F04A         	movff	??_get_fat,_get_fat$525
 10318  002DEE  C042  F04B         	movff	??_get_fat+1,_get_fat$525+1
 10319  002DF2                     l4297:
 10320  002DF2  C04A  F04C         	movff	_get_fat$525,get_fat@val
 10321  002DF6  C04B  F04D         	movff	_get_fat$525+1,get_fat@val+1
 10322  002DFA  D05B               	goto	L12
 10323  002DFC                     l4299:
 10324                           
 10325                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10326  002DFC  C03B  F030         	movff	get_fat@fs,move_window@fs
 10327  002E00  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10328  002E04  EE20 F01E          	lfsr	2,30
 10329  002E08  503B               	movf	get_fat@fs,w,c
 10330  002E0A  26D9               	addwf	fsr2l,f,c
 10331  002E0C  503C               	movf	get_fat@fs+1,w,c
 10332  002E0E  22DA               	addwfc	fsr2h,f,c
 10333  002E10  CFDE F041          	movff	postinc2,??_get_fat
 10334  002E14  CFDE F042          	movff	postinc2,??_get_fat+1
 10335  002E18  CFDE F043          	movff	postinc2,??_get_fat+2
 10336  002E1C  CFDE F044          	movff	postinc2,??_get_fat+3
 10337  002E20  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10338  002E24  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10339  002E28  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10340  002E2C  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10341  002E30  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10342  002E34  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10343  002E38  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10344  002E3C  6A48               	clrf	??_get_fat+7,c
 10345  002E3E  5041               	movf	??_get_fat,w,c
 10346  002E40  2445               	addwf	??_get_fat+4,w,c
 10347  002E42  6E32               	movwf	move_window@sector,c
 10348  002E44  5042               	movf	??_get_fat+1,w,c
 10349  002E46  2046               	addwfc	??_get_fat+5,w,c
 10350  002E48  6E33               	movwf	move_window@sector+1,c
 10351  002E4A  5043               	movf	??_get_fat+2,w,c
 10352  002E4C  2047               	addwfc	??_get_fat+6,w,c
 10353  002E4E  6E34               	movwf	move_window@sector+2,c
 10354  002E50  5044               	movf	??_get_fat+3,w,c
 10355  002E52  2048               	addwfc	??_get_fat+7,w,c
 10356  002E54  6E35               	movwf	move_window@sector+3,c
 10357  002E56  EC7E  F027         	call	_move_window	;wreg free
 10358  002E5A  0900               	iorlw	0
 10359  002E5C  A4D8               	btfss	status,2,c
 10360  002E5E  D0A7               	goto	l321
 10361                           
 10362                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10363  002E60  0EFF               	movlw	255
 10364  002E62  6E41               	movwf	??_get_fat& (0+255),c
 10365  002E64  0E01               	movlw	1
 10366  002E66  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10367  002E68  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10368  002E6C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10369  002E70  90D8               	bcf	status,0,c
 10370  002E72  3643               	rlcf	??_get_fat+2,f,c
 10371  002E74  3644               	rlcf	??_get_fat+3,f,c
 10372  002E76  5041               	movf	??_get_fat,w,c
 10373  002E78  1643               	andwf	??_get_fat+2,f,c
 10374  002E7A  5042               	movf	??_get_fat+1,w,c
 10375  002E7C  1644               	andwf	??_get_fat+3,f,c
 10376  002E7E  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10377  002E82  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10378  002E86  5043               	movf	??_get_fat+2,w,c
 10379  002E88  2645               	addwf	??_get_fat+4,f,c
 10380  002E8A  5044               	movf	??_get_fat+3,w,c
 10381  002E8C  2246               	addwfc	??_get_fat+5,f,c
 10382  002E8E  0E2E               	movlw	46
 10383  002E90  2445               	addwf	??_get_fat+4,w,c
 10384  002E92  6E52               	movwf	get_fat@p,c
 10385  002E94  0E00               	movlw	0
 10386  002E96  2046               	addwfc	??_get_fat+5,w,c
 10387  002E98  6E53               	movwf	get_fat@p+1,c
 10388                           
 10389                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10390  002E9A  C052  FFD9         	movff	get_fat@p,fsr2l
 10391  002E9E  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10392  002EA2  CFDE F041          	movff	postinc2,??_get_fat
 10393  002EA6  CFDD F042          	movff	postdec2,??_get_fat+1
 10394  002EAA  C041  F04C         	movff	??_get_fat,get_fat@val
 10395  002EAE  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10396  002EB2                     L12:
 10397  002EB2  6A4E               	clrf	get_fat@val+2,c
 10398  002EB4  6A4F               	clrf	get_fat@val+3,c
 10399                           
 10400                           ;ff.c: 848:    break;
 10401  002EB6  D07B               	goto	l321
 10402  002EB8                     l4307:
 10403                           
 10404                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10405  002EB8  C03B  F030         	movff	get_fat@fs,move_window@fs
 10406  002EBC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10407  002EC0  EE20 F01E          	lfsr	2,30
 10408  002EC4  503B               	movf	get_fat@fs,w,c
 10409  002EC6  26D9               	addwf	fsr2l,f,c
 10410  002EC8  503C               	movf	get_fat@fs+1,w,c
 10411  002ECA  22DA               	addwfc	fsr2h,f,c
 10412  002ECC  CFDE F041          	movff	postinc2,??_get_fat
 10413  002ED0  CFDE F042          	movff	postinc2,??_get_fat+1
 10414  002ED4  CFDE F043          	movff	postinc2,??_get_fat+2
 10415  002ED8  CFDE F044          	movff	postinc2,??_get_fat+3
 10416  002EDC  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10417  002EE0  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10418  002EE4  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10419  002EE8  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10420  002EEC  0E08               	movlw	8
 10421  002EEE  D005               	goto	u5120
 10422  002EF0                     u5125:
 10423  002EF0  90D8               	bcf	status,0,c
 10424  002EF2  3248               	rrcf	??_get_fat+7,f,c
 10425  002EF4  3247               	rrcf	??_get_fat+6,f,c
 10426  002EF6  3246               	rrcf	??_get_fat+5,f,c
 10427  002EF8  3245               	rrcf	??_get_fat+4,f,c
 10428  002EFA                     u5120:
 10429  002EFA  2EE8               	decfsz	wreg,f,c
 10430  002EFC  D7F9               	goto	u5125
 10431  002EFE  5041               	movf	??_get_fat,w,c
 10432  002F00  2445               	addwf	??_get_fat+4,w,c
 10433  002F02  6E32               	movwf	move_window@sector,c
 10434  002F04  5042               	movf	??_get_fat+1,w,c
 10435  002F06  2046               	addwfc	??_get_fat+5,w,c
 10436  002F08  6E33               	movwf	move_window@sector+1,c
 10437  002F0A  5043               	movf	??_get_fat+2,w,c
 10438  002F0C  2047               	addwfc	??_get_fat+6,w,c
 10439  002F0E  6E34               	movwf	move_window@sector+2,c
 10440  002F10  5044               	movf	??_get_fat+3,w,c
 10441  002F12  2048               	addwfc	??_get_fat+7,w,c
 10442  002F14  6E35               	movwf	move_window@sector+3,c
 10443  002F16  EC7E  F027         	call	_move_window	;wreg free
 10444  002F1A  0900               	iorlw	0
 10445  002F1C  A4D8               	btfss	status,2,c
 10446  002F1E  D047               	goto	l321
 10447                           
 10448                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10449  002F20  0EFF               	movlw	255
 10450  002F22  6E41               	movwf	??_get_fat& (0+255),c
 10451  002F24  0E01               	movlw	1
 10452  002F26  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10453  002F28  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10454  002F2C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10455  002F30  90D8               	bcf	status,0,c
 10456  002F32  3643               	rlcf	??_get_fat+2,f,c
 10457  002F34  3644               	rlcf	??_get_fat+3,f,c
 10458  002F36  90D8               	bcf	status,0,c
 10459  002F38  3643               	rlcf	??_get_fat+2,f,c
 10460  002F3A  3644               	rlcf	??_get_fat+3,f,c
 10461  002F3C  5041               	movf	??_get_fat,w,c
 10462  002F3E  1643               	andwf	??_get_fat+2,f,c
 10463  002F40  5042               	movf	??_get_fat+1,w,c
 10464  002F42  1644               	andwf	??_get_fat+3,f,c
 10465  002F44  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10466  002F48  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10467  002F4C  5043               	movf	??_get_fat+2,w,c
 10468  002F4E  2645               	addwf	??_get_fat+4,f,c
 10469  002F50  5044               	movf	??_get_fat+3,w,c
 10470  002F52  2246               	addwfc	??_get_fat+5,f,c
 10471  002F54  0E2E               	movlw	46
 10472  002F56  2445               	addwf	??_get_fat+4,w,c
 10473  002F58  6E52               	movwf	get_fat@p,c
 10474  002F5A  0E00               	movlw	0
 10475  002F5C  2046               	addwfc	??_get_fat+5,w,c
 10476  002F5E  6E53               	movwf	get_fat@p+1,c
 10477                           
 10478                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10479  002F60  C052  FFD9         	movff	get_fat@p,fsr2l
 10480  002F64  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10481  002F68  0EFF               	movlw	255
 10482  002F6A  14DE               	andwf	postinc2,w,c
 10483  002F6C  6E4C               	movwf	get_fat@val,c
 10484  002F6E  0EFF               	movlw	255
 10485  002F70  14DE               	andwf	postinc2,w,c
 10486  002F72  6E4D               	movwf	get_fat@val+1,c
 10487  002F74  0EFF               	movlw	255
 10488  002F76  14DE               	andwf	postinc2,w,c
 10489  002F78  6E4E               	movwf	get_fat@val+2,c
 10490  002F7A  0E0F               	movlw	15
 10491  002F7C  14DE               	andwf	postinc2,w,c
 10492  002F7E                     L11:
 10493  002F7E  6E4F               	movwf	get_fat@val+3,c
 10494                           
 10495                           ;ff.c: 854:    break;
 10496  002F80  D016               	goto	l321
 10497  002F82                     l4317:
 10498  002F82  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10499  002F86  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10500  002F8A  50DF               	movf	indf2,w,c
 10501  002F8C  6E41               	movwf	??_get_fat& (0+255),c
 10502  002F8E  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10503                           
 10504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10505                           ; Switch size 1, requested type "simple"
 10506                           ; Number of cases is 1, Range of values is 0 to 0
 10507                           ; switch strategies available:
 10508                           ; Name         Instructions Cycles
 10509                           ; simple_byte            4     3 (average)
 10510                           ;	Chosen strategy is simple_byte
 10511  002F90  5042               	movf	??_get_fat+1,w,c
 10512  002F92  0A00               	xorlw	0	; case 0
 10513  002F94  A4D8               	btfss	status,2,c
 10514  002F96  D65B               	goto	u5040
 10515                           
 10516                           ; Switch size 1, requested type "simple"
 10517                           ; Number of cases is 3, Range of values is 1 to 3
 10518                           ; switch strategies available:
 10519                           ; Name         Instructions Cycles
 10520                           ; simple_byte           10     6 (average)
 10521                           ;	Chosen strategy is simple_byte
 10522  002F98  5041               	movf	??_get_fat,w,c
 10523  002F9A  0A01               	xorlw	1	; case 1
 10524  002F9C  B4D8               	btfsc	status,2,c
 10525  002F9E  D664               	goto	l323
 10526  002FA0  0A03               	xorlw	3	; case 2
 10527  002FA2  B4D8               	btfsc	status,2,c
 10528  002FA4  D72B               	goto	l4299
 10529  002FA6  0A01               	xorlw	1	; case 3
 10530  002FA8  B4D8               	btfsc	status,2,c
 10531  002FAA  D786               	goto	l4307
 10532  002FAC  D650               	goto	u5040
 10533  002FAE                     l321:
 10534                           
 10535                           ;ff.c: 861:  return val;
 10536  002FAE  C04C  F03B         	movff	get_fat@val,?_get_fat
 10537  002FB2  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10538  002FB6  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10539  002FBA  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10540  002FBE  0012               	return		;funcret
 10541  002FC0                     __end_of_get_fat:
 10542                           	opt callstack 0
 10543                           
 10544 ;; *************** function _clust2sect *****************
 10545 ;; Defined at:
 10546 ;;		line 800 in file "ff.c"
 10547 ;; Parameters:    Size  Location     Type
 10548 ;;  fs              2   12[COMRAM] PTR struct .
 10549 ;;		 -> NULL(0), FatFs(558), 
 10550 ;;  clst            4   14[COMRAM] unsigned long 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;                  4   12[COMRAM] unsigned long 
 10555 ;; Registers used:
 10556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10562 ;;      Params:         6       0       0       0       0       0       0       0       0
 10563 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10564 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10565 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10566 ;;Total ram usage:       11 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; Hardware stack levels required when called:    1
 10569 ;; This function calls:
 10570 ;;		___lmul
 10571 ;; This function is called by:
 10572 ;;		_dir_sdi
 10573 ;;		_dir_next
 10574 ;;		_f_write
 10575 ;;		_f_lseek
 10576 ;;		_f_read
 10577 ;; This function uses a non-reentrant model
 10578 ;;
 10579                           
 10580                           	psect	text26
 10581  004CD8                     __ptext26:
 10582                           	opt callstack 0
 10583  004CD8                     _clust2sect:
 10584                           	opt callstack 27
 10585                           
 10586                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10587                           
 10588                           ;incstack = 0
 10589  004CD8  0E02               	movlw	2
 10590  004CDA  5E0F               	subwf	clust2sect@clst,f,c
 10591  004CDC  0E00               	movlw	0
 10592  004CDE  5A10               	subwfb	clust2sect@clst+1,f,c
 10593  004CE0  5A11               	subwfb	clust2sect@clst+2,f,c
 10594  004CE2  5A12               	subwfb	clust2sect@clst+3,f,c
 10595                           
 10596                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10597  004CE4  EE20 F012          	lfsr	2,18
 10598  004CE8  500D               	movf	clust2sect@fs,w,c
 10599  004CEA  26D9               	addwf	fsr2l,f,c
 10600  004CEC  500E               	movf	clust2sect@fs+1,w,c
 10601  004CEE  22DA               	addwfc	fsr2h,f,c
 10602  004CF0  0EFE               	movlw	254
 10603  004CF2  24DE               	addwf	postinc2,w,c
 10604  004CF4  6E13               	movwf	??_clust2sect& (0+255),c
 10605  004CF6  0EFF               	movlw	255
 10606  004CF8  20DE               	addwfc	postinc2,w,c
 10607  004CFA  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10608  004CFC  0EFF               	movlw	255
 10609  004CFE  20DE               	addwfc	postinc2,w,c
 10610  004D00  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10611  004D02  0EFF               	movlw	255
 10612  004D04  20DE               	addwfc	postinc2,w,c
 10613  004D06  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10614  004D08  5013               	movf	??_clust2sect,w,c
 10615  004D0A  5C0F               	subwf	clust2sect@clst,w,c
 10616  004D0C  5014               	movf	??_clust2sect+1,w,c
 10617  004D0E  5810               	subwfb	clust2sect@clst+1,w,c
 10618  004D10  5015               	movf	??_clust2sect+2,w,c
 10619  004D12  5811               	subwfb	clust2sect@clst+2,w,c
 10620  004D14  5016               	movf	??_clust2sect+3,w,c
 10621  004D16  5812               	subwfb	clust2sect@clst+3,w,c
 10622  004D18  A0D8               	btfss	status,0,c
 10623  004D1A  D009               	goto	l4427
 10624  004D1C  0E00               	movlw	0
 10625  004D1E  6E0D               	movwf	?_clust2sect,c
 10626  004D20  0E00               	movlw	0
 10627  004D22  6E0E               	movwf	?_clust2sect+1,c
 10628  004D24  0E00               	movlw	0
 10629  004D26  6E0F               	movwf	?_clust2sect+2,c
 10630  004D28  0E00               	movlw	0
 10631  004D2A  6E10               	movwf	?_clust2sect+3,c
 10632  004D2C  0012               	return	
 10633  004D2E                     l4427:
 10634                           
 10635                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10636  004D2E  EE20 F026          	lfsr	2,38
 10637  004D32  500D               	movf	clust2sect@fs,w,c
 10638  004D34  26D9               	addwf	fsr2l,f,c
 10639  004D36  500E               	movf	clust2sect@fs+1,w,c
 10640  004D38  22DA               	addwfc	fsr2h,f,c
 10641  004D3A  CFDE F013          	movff	postinc2,??_clust2sect
 10642  004D3E  CFDE F014          	movff	postinc2,??_clust2sect+1
 10643  004D42  CFDE F015          	movff	postinc2,??_clust2sect+2
 10644  004D46  CFDE F016          	movff	postinc2,??_clust2sect+3
 10645  004D4A  EE20 F002          	lfsr	2,2
 10646  004D4E  500D               	movf	clust2sect@fs,w,c
 10647  004D50  26D9               	addwf	fsr2l,f,c
 10648  004D52  500E               	movf	clust2sect@fs+1,w,c
 10649  004D54  22DA               	addwfc	fsr2h,f,c
 10650  004D56  50DF               	movf	indf2,w,c
 10651  004D58  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10652  004D5A  5017               	movf	??_clust2sect+4,w,c
 10653  004D5C  6E01               	movwf	___lmul@multiplier,c
 10654  004D5E  6A02               	clrf	___lmul@multiplier+1,c
 10655  004D60  6A03               	clrf	___lmul@multiplier+2,c
 10656  004D62  6A04               	clrf	___lmul@multiplier+3,c
 10657  004D64  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10658  004D68  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10659  004D6C  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10660  004D70  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10661  004D74  ECB1  F029         	call	___lmul	;wreg free
 10662  004D78  5013               	movf	??_clust2sect,w,c
 10663  004D7A  2401               	addwf	?___lmul,w,c
 10664  004D7C  6E0D               	movwf	?_clust2sect,c
 10665  004D7E  5014               	movf	??_clust2sect+1,w,c
 10666  004D80  2002               	addwfc	?___lmul+1,w,c
 10667  004D82  6E0E               	movwf	?_clust2sect+1,c
 10668  004D84  5015               	movf	??_clust2sect+2,w,c
 10669  004D86  2003               	addwfc	?___lmul+2,w,c
 10670  004D88  6E0F               	movwf	?_clust2sect+2,c
 10671  004D8A  5016               	movf	??_clust2sect+3,w,c
 10672  004D8C  2004               	addwfc	?___lmul+3,w,c
 10673  004D8E  6E10               	movwf	?_clust2sect+3,c
 10674  004D90  0012               	return		;funcret
 10675  004D92                     __end_of_clust2sect:
 10676                           	opt callstack 0
 10677                           
 10678 ;; *************** function ___lmul *****************
 10679 ;; Defined at:
 10680 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;  multiplier      4    0[COMRAM] unsigned long 
 10683 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  product         4    8[COMRAM] unsigned long 
 10686 ;; Return value:  Size  Location     Type
 10687 ;;                  4    0[COMRAM] unsigned long 
 10688 ;; Registers used:
 10689 ;;		wreg, status,2, status,0
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10695 ;;      Params:         8       0       0       0       0       0       0       0       0
 10696 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10698 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10699 ;;Total ram usage:       12 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; This function calls:
 10702 ;;		Nothing
 10703 ;; This function is called by:
 10704 ;;		_clust2sect
 10705 ;;		_find_volume
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           	psect	text27
 10710  005362                     __ptext27:
 10711                           	opt callstack 0
 10712  005362                     ___lmul:
 10713                           	opt callstack 27
 10714                           
 10715                           ;incstack = 0
 10716  005362  0E00               	movlw	0
 10717  005364  6E09               	movwf	___lmul@product,c
 10718  005366  0E00               	movlw	0
 10719  005368  6E0A               	movwf	___lmul@product+1,c
 10720  00536A  0E00               	movlw	0
 10721  00536C  6E0B               	movwf	___lmul@product+2,c
 10722  00536E  0E00               	movlw	0
 10723  005370  6E0C               	movwf	___lmul@product+3,c
 10724  005372                     l4403:
 10725  005372  A001               	btfss	___lmul@multiplier,0,c
 10726  005374  D008               	goto	l4407
 10727  005376  5005               	movf	___lmul@multiplicand,w,c
 10728  005378  2609               	addwf	___lmul@product,f,c
 10729  00537A  5006               	movf	___lmul@multiplicand+1,w,c
 10730  00537C  220A               	addwfc	___lmul@product+1,f,c
 10731  00537E  5007               	movf	___lmul@multiplicand+2,w,c
 10732  005380  220B               	addwfc	___lmul@product+2,f,c
 10733  005382  5008               	movf	___lmul@multiplicand+3,w,c
 10734  005384  220C               	addwfc	___lmul@product+3,f,c
 10735  005386                     l4407:
 10736  005386  90D8               	bcf	status,0,c
 10737  005388  3605               	rlcf	___lmul@multiplicand,f,c
 10738  00538A  3606               	rlcf	___lmul@multiplicand+1,f,c
 10739  00538C  3607               	rlcf	___lmul@multiplicand+2,f,c
 10740  00538E  3608               	rlcf	___lmul@multiplicand+3,f,c
 10741  005390  90D8               	bcf	status,0,c
 10742  005392  3204               	rrcf	___lmul@multiplier+3,f,c
 10743  005394  3203               	rrcf	___lmul@multiplier+2,f,c
 10744  005396  3202               	rrcf	___lmul@multiplier+1,f,c
 10745  005398  3201               	rrcf	___lmul@multiplier,f,c
 10746  00539A  5001               	movf	___lmul@multiplier,w,c
 10747  00539C  1002               	iorwf	___lmul@multiplier+1,w,c
 10748  00539E  1003               	iorwf	___lmul@multiplier+2,w,c
 10749  0053A0  1004               	iorwf	___lmul@multiplier+3,w,c
 10750  0053A2  A4D8               	btfss	status,2,c
 10751  0053A4  D7E6               	goto	l4403
 10752  0053A6  C009  F001         	movff	___lmul@product,?___lmul
 10753  0053AA  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10754  0053AE  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10755  0053B2  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10756  0053B6  0012               	return		;funcret
 10757  0053B8                     __end_of___lmul:
 10758                           	opt callstack 0
 10759                           
 10760 ;; *************** function ___lldiv *****************
 10761 ;; Defined at:
 10762 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;  dividend        4    0[COMRAM] unsigned long 
 10765 ;;  divisor         4    4[COMRAM] unsigned long 
 10766 ;; Auto vars:     Size  Location     Type
 10767 ;;  quotient        4    8[COMRAM] unsigned long 
 10768 ;;  counter         1   12[COMRAM] unsigned char 
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  4    0[COMRAM] unsigned long 
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10778 ;;      Params:         8       0       0       0       0       0       0       0       0
 10779 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10781 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10782 ;;Total ram usage:       13 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		_find_volume
 10788 ;;		_f_lseek
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text28
 10793  005036                     __ptext28:
 10794                           	opt callstack 0
 10795  005036                     ___lldiv:
 10796                           	opt callstack 27
 10797                           
 10798                           ;incstack = 0
 10799  005036  0E00               	movlw	0
 10800  005038  6E09               	movwf	___lldiv@quotient,c
 10801  00503A  0E00               	movlw	0
 10802  00503C  6E0A               	movwf	___lldiv@quotient+1,c
 10803  00503E  0E00               	movlw	0
 10804  005040  6E0B               	movwf	___lldiv@quotient+2,c
 10805  005042  0E00               	movlw	0
 10806  005044  6E0C               	movwf	___lldiv@quotient+3,c
 10807  005046  5005               	movf	___lldiv@divisor,w,c
 10808  005048  1006               	iorwf	___lldiv@divisor+1,w,c
 10809  00504A  1007               	iorwf	___lldiv@divisor+2,w,c
 10810  00504C  1008               	iorwf	___lldiv@divisor+3,w,c
 10811  00504E  B4D8               	btfsc	status,2,c
 10812  005050  D02A               	goto	l871
 10813  005052  0E01               	movlw	1
 10814  005054  6E0D               	movwf	___lldiv@counter,c
 10815  005056  D006               	goto	l5305
 10816  005058                     l5303:
 10817  005058  90D8               	bcf	status,0,c
 10818  00505A  3605               	rlcf	___lldiv@divisor,f,c
 10819  00505C  3606               	rlcf	___lldiv@divisor+1,f,c
 10820  00505E  3607               	rlcf	___lldiv@divisor+2,f,c
 10821  005060  3608               	rlcf	___lldiv@divisor+3,f,c
 10822  005062  2A0D               	incf	___lldiv@counter,f,c
 10823  005064                     l5305:
 10824  005064  AE08               	btfss	___lldiv@divisor+3,7,c
 10825  005066  D7F8               	goto	l5303
 10826  005068                     u7020:
 10827  005068  90D8               	bcf	status,0,c
 10828  00506A  3609               	rlcf	___lldiv@quotient,f,c
 10829  00506C  360A               	rlcf	___lldiv@quotient+1,f,c
 10830  00506E  360B               	rlcf	___lldiv@quotient+2,f,c
 10831  005070  360C               	rlcf	___lldiv@quotient+3,f,c
 10832  005072  5005               	movf	___lldiv@divisor,w,c
 10833  005074  5C01               	subwf	___lldiv@dividend,w,c
 10834  005076  5006               	movf	___lldiv@divisor+1,w,c
 10835  005078  5802               	subwfb	___lldiv@dividend+1,w,c
 10836  00507A  5007               	movf	___lldiv@divisor+2,w,c
 10837  00507C  5803               	subwfb	___lldiv@dividend+2,w,c
 10838  00507E  5008               	movf	___lldiv@divisor+3,w,c
 10839  005080  5804               	subwfb	___lldiv@dividend+3,w,c
 10840  005082  A0D8               	btfss	status,0,c
 10841  005084  D009               	goto	l5315
 10842  005086  5005               	movf	___lldiv@divisor,w,c
 10843  005088  5E01               	subwf	___lldiv@dividend,f,c
 10844  00508A  5006               	movf	___lldiv@divisor+1,w,c
 10845  00508C  5A02               	subwfb	___lldiv@dividend+1,f,c
 10846  00508E  5007               	movf	___lldiv@divisor+2,w,c
 10847  005090  5A03               	subwfb	___lldiv@dividend+2,f,c
 10848  005092  5008               	movf	___lldiv@divisor+3,w,c
 10849  005094  5A04               	subwfb	___lldiv@dividend+3,f,c
 10850  005096  8009               	bsf	___lldiv@quotient,0,c
 10851  005098                     l5315:
 10852  005098  90D8               	bcf	status,0,c
 10853  00509A  3208               	rrcf	___lldiv@divisor+3,f,c
 10854  00509C  3207               	rrcf	___lldiv@divisor+2,f,c
 10855  00509E  3206               	rrcf	___lldiv@divisor+1,f,c
 10856  0050A0  3205               	rrcf	___lldiv@divisor,f,c
 10857  0050A2  2E0D               	decfsz	___lldiv@counter,f,c
 10858  0050A4  D7E1               	goto	u7020
 10859  0050A6                     l871:
 10860  0050A6  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10861  0050AA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10862  0050AE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10863  0050B2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10864  0050B6  0012               	return		;funcret
 10865  0050B8                     __end_of___lldiv:
 10866                           	opt callstack 0
 10867                           
 10868 ;; *************** function _f_close *****************
 10869 ;; Defined at:
 10870 ;;		line 2861 in file "ff.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;  fp              2   77[COMRAM] PTR struct .
 10873 ;;		 -> Fil(32), 
 10874 ;; Auto vars:     Size  Location     Type
 10875 ;;  res             1   79[COMRAM] enum E93
 10876 ;; Return value:  Size  Location     Type
 10877 ;;                  1    wreg      enum E4918
 10878 ;; Registers used:
 10879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10880 ;; Tracked objects:
 10881 ;;		On entry : 0/0
 10882 ;;		On exit  : 0/0
 10883 ;;		Unchanged: 0/0
 10884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10885 ;;      Params:         2       0       0       0       0       0       0       0       0
 10886 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10887 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10888 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10889 ;;Total ram usage:        3 bytes
 10890 ;; Hardware stack levels used:    1
 10891 ;; Hardware stack levels required when called:    9
 10892 ;; This function calls:
 10893 ;;		_f_sync
 10894 ;;		_validate
 10895 ;; This function is called by:
 10896 ;;		_guardar
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           	psect	text29
 10901  00547E                     __ptext29:
 10902                           	opt callstack 0
 10903  00547E                     _f_close:
 10904                           	opt callstack 20
 10905                           
 10906                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10907                           
 10908                           ;incstack = 0
 10909  00547E  C04E  F045         	movff	f_close@fp,f_sync@fp
 10910  005482  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 10911  005486  EC42  F022         	call	_f_sync	;wreg free
 10912  00548A  6E50               	movwf	f_close@res,c
 10913                           
 10914                           ;ff.c: 2870:  if (res == FR_OK)
 10915  00548C  5050               	movf	f_close@res,w,c
 10916  00548E  A4D8               	btfss	status,2,c
 10917  005490  0012               	return	
 10918                           
 10919                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10920  005492  C04E  F002         	movff	f_close@fp,validate@obj
 10921  005496  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 10922  00549A  ECD1  F027         	call	_validate	;wreg free
 10923  00549E  6E50               	movwf	f_close@res,c
 10924                           
 10925                           ;ff.c: 2874:   if (res == FR_OK) {
 10926  0054A0  5050               	movf	f_close@res,w,c
 10927  0054A2  A4D8               	btfss	status,2,c
 10928  0054A4  0012               	return	
 10929                           
 10930                           ;ff.c: 2882:     fp->fs = 0;
 10931  0054A6  C04E  FFD9         	movff	f_close@fp,fsr2l
 10932  0054AA  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 10933  0054AE  0E00               	movlw	0
 10934  0054B0  6EDE               	movwf	postinc2,c
 10935  0054B2  0E00               	movlw	0
 10936  0054B4  6EDD               	movwf	postdec2,c
 10937  0054B6  0012               	return		;funcret
 10938  0054B8                     __end_of_f_close:
 10939                           	opt callstack 0
 10940                           
 10941 ;; *************** function _f_sync *****************
 10942 ;; Defined at:
 10943 ;;		line 2813 in file "ff.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;  fp              2   68[COMRAM] PTR struct .
 10946 ;;		 -> Fil(32), 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  tm              4    0        unsigned long 
 10949 ;;  dir             2   75[COMRAM] PTR unsigned char 
 10950 ;;		 -> NULL(0), FatFs(558), 
 10951 ;;  res             1   74[COMRAM] enum E93
 10952 ;; Return value:  Size  Location     Type
 10953 ;;                  1    wreg      enum E93
 10954 ;; Registers used:
 10955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10961 ;;      Params:         2       0       0       0       0       0       0       0       0
 10962 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10963 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10964 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10965 ;;Total ram usage:        9 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    8
 10968 ;; This function calls:
 10969 ;;		_move_window
 10970 ;;		_st_clust
 10971 ;;		_sync_fs
 10972 ;;		_validate
 10973 ;; This function is called by:
 10974 ;;		_f_close
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           	psect	text30
 10979  004484                     __ptext30:
 10980                           	opt callstack 0
 10981  004484                     _f_sync:
 10982                           	opt callstack 20
 10983                           
 10984                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 10985                           
 10986                           ;incstack = 0
 10987  004484  C045  F002         	movff	f_sync@fp,validate@obj
 10988  004488  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 10989  00448C  ECD1  F027         	call	_validate	;wreg free
 10990  004490  6E4B               	movwf	f_sync@res,c
 10991                           
 10992                           ;ff.c: 2823:  if (res == FR_OK) {
 10993  004492  504B               	movf	f_sync@res,w,c
 10994  004494  A4D8               	btfss	status,2,c
 10995  004496  D095               	goto	l5719
 10996                           
 10997                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 10998  004498  EE20 F004          	lfsr	2,4
 10999  00449C  5045               	movf	f_sync@fp,w,c
 11000  00449E  26D9               	addwf	fsr2l,f,c
 11001  0044A0  5046               	movf	f_sync@fp+1,w,c
 11002  0044A2  22DA               	addwfc	fsr2h,f,c
 11003  0044A4  AADF               	btfss	indf2,5,c
 11004  0044A6  D08D               	goto	l5719
 11005                           
 11006                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 11007  0044A8  C045  FFD9         	movff	f_sync@fp,fsr2l
 11008  0044AC  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11009  0044B0  CFDE F030          	movff	postinc2,move_window@fs
 11010  0044B4  CFDD F031          	movff	postdec2,move_window@fs+1
 11011  0044B8  EE20 F01A          	lfsr	2,26
 11012  0044BC  5045               	movf	f_sync@fp,w,c
 11013  0044BE  26D9               	addwf	fsr2l,f,c
 11014  0044C0  5046               	movf	f_sync@fp+1,w,c
 11015  0044C2  22DA               	addwfc	fsr2h,f,c
 11016  0044C4  CFDE F032          	movff	postinc2,move_window@sector
 11017  0044C8  CFDE F033          	movff	postinc2,move_window@sector+1
 11018  0044CC  CFDE F034          	movff	postinc2,move_window@sector+2
 11019  0044D0  CFDE F035          	movff	postinc2,move_window@sector+3
 11020  0044D4  EC7E  F027         	call	_move_window	;wreg free
 11021  0044D8  6E4B               	movwf	f_sync@res,c
 11022                           
 11023                           ;ff.c: 2834:    if (res == FR_OK) {
 11024  0044DA  504B               	movf	f_sync@res,w,c
 11025  0044DC  A4D8               	btfss	status,2,c
 11026  0044DE  D071               	goto	l5719
 11027                           
 11028                           ;ff.c: 2835:     dir = fp->dir_ptr;
 11029  0044E0  EE20 F01E          	lfsr	2,30
 11030  0044E4  5045               	movf	f_sync@fp,w,c
 11031  0044E6  26D9               	addwf	fsr2l,f,c
 11032  0044E8  5046               	movf	f_sync@fp+1,w,c
 11033  0044EA  22DA               	addwfc	fsr2h,f,c
 11034  0044EC  CFDE F04C          	movff	postinc2,f_sync@dir
 11035  0044F0  CFDD F04D          	movff	postdec2,f_sync@dir+1
 11036                           
 11037                           ;ff.c: 2836:     dir[11] |= 0x20;
 11038  0044F4  EE20 F00B          	lfsr	2,11
 11039  0044F8  504C               	movf	f_sync@dir,w,c
 11040  0044FA  26D9               	addwf	fsr2l,f,c
 11041  0044FC  504D               	movf	f_sync@dir+1,w,c
 11042  0044FE  22DA               	addwfc	fsr2h,f,c
 11043  004500  0E00               	movlw	0
 11044  004502  8ADB               	bsf	plusw2,5,c
 11045                           
 11046                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11047  004504  EE20 F00A          	lfsr	2,10
 11048  004508  5045               	movf	f_sync@fp,w,c
 11049  00450A  26D9               	addwf	fsr2l,f,c
 11050  00450C  5046               	movf	f_sync@fp+1,w,c
 11051  00450E  22DA               	addwfc	fsr2h,f,c
 11052  004510  EE10 F01C          	lfsr	1,28
 11053  004514  504C               	movf	f_sync@dir,w,c
 11054  004516  26E1               	addwf	fsr1l,f,c
 11055  004518  504D               	movf	f_sync@dir+1,w,c
 11056  00451A  22E2               	addwfc	fsr1h,f,c
 11057  00451C  CFDE FFE6          	movff	postinc2,postinc1
 11058  004520  CFDE FFE6          	movff	postinc2,postinc1
 11059  004524  CFDE FFE6          	movff	postinc2,postinc1
 11060  004528  CFDE FFE6          	movff	postinc2,postinc1
 11061                           
 11062                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11063  00452C  C04C  F001         	movff	f_sync@dir,st_clust@dir
 11064  004530  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11065  004534  EE20 F00E          	lfsr	2,14
 11066  004538  5045               	movf	f_sync@fp,w,c
 11067  00453A  26D9               	addwf	fsr2l,f,c
 11068  00453C  5046               	movf	f_sync@fp+1,w,c
 11069  00453E  22DA               	addwfc	fsr2h,f,c
 11070  004540  CFDE F003          	movff	postinc2,st_clust@cl
 11071  004544  CFDE F004          	movff	postinc2,st_clust@cl+1
 11072  004548  CFDE F005          	movff	postinc2,st_clust@cl+2
 11073  00454C  CFDE F006          	movff	postinc2,st_clust@cl+3
 11074  004550  EC8E  F02A         	call	_st_clust	;wreg free
 11075                           
 11076                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11077  004554  EE20 F016          	lfsr	2,22
 11078  004558  504C               	movf	f_sync@dir,w,c
 11079  00455A  26D9               	addwf	fsr2l,f,c
 11080  00455C  504D               	movf	f_sync@dir+1,w,c
 11081  00455E  22DA               	addwfc	fsr2h,f,c
 11082  004560  0E00               	movlw	0
 11083  004562  6EDE               	movwf	postinc2,c
 11084  004564  0E00               	movlw	0
 11085  004566  6EDE               	movwf	postinc2,c
 11086  004568  0E21               	movlw	33
 11087  00456A  6EDE               	movwf	postinc2,c
 11088  00456C  0E46               	movlw	70
 11089  00456E  6EDD               	movwf	postdec2,c
 11090                           
 11091                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11092  004570  EE20 F012          	lfsr	2,18
 11093  004574  504C               	movf	f_sync@dir,w,c
 11094  004576  26D9               	addwf	fsr2l,f,c
 11095  004578  504D               	movf	f_sync@dir+1,w,c
 11096  00457A  22DA               	addwfc	fsr2h,f,c
 11097  00457C  0E00               	movlw	0
 11098  00457E  6EDE               	movwf	postinc2,c
 11099  004580  0E00               	movlw	0
 11100  004582  6EDD               	movwf	postdec2,c
 11101                           
 11102                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11103  004584  EE20 F004          	lfsr	2,4
 11104  004588  5045               	movf	f_sync@fp,w,c
 11105  00458A  26D9               	addwf	fsr2l,f,c
 11106  00458C  5046               	movf	f_sync@fp+1,w,c
 11107  00458E  22DA               	addwfc	fsr2h,f,c
 11108  004590  0EDF               	movlw	223
 11109  004592  16DF               	andwf	indf2,f,c
 11110                           
 11111                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11112  004594  C045  FFD9         	movff	f_sync@fp,fsr2l
 11113  004598  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11114  00459C  EE10 F004          	lfsr	1,4
 11115  0045A0  50DE               	movf	postinc2,w,c
 11116  0045A2  26E1               	addwf	fsr1l,f,c
 11117  0045A4  50DD               	movf	postdec2,w,c
 11118  0045A6  22E2               	addwfc	fsr1h,f,c
 11119  0045A8  0E01               	movlw	1
 11120  0045AA  6EE7               	movwf	indf1,c
 11121                           
 11122                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11123  0045AC  C045  FFD9         	movff	f_sync@fp,fsr2l
 11124  0045B0  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11125  0045B4  CFDE F03A          	movff	postinc2,sync_fs@fs
 11126  0045B8  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11127  0045BC  ECC0  F01E         	call	_sync_fs	;wreg free
 11128  0045C0  6E4B               	movwf	f_sync@res,c
 11129  0045C2                     l5719:
 11130                           
 11131                           ;ff.c: 2849:  return res;
 11132  0045C2  504B               	movf	f_sync@res,w,c
 11133  0045C4  0012               	return		;funcret
 11134  0045C6                     __end_of_f_sync:
 11135                           	opt callstack 0
 11136                           
 11137 ;; *************** function _validate *****************
 11138 ;; Defined at:
 11139 ;;		line 2372 in file "ff.c"
 11140 ;; Parameters:    Size  Location     Type
 11141 ;;  obj             2    1[COMRAM] PTR void 
 11142 ;;		 -> Fil(32), 
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;  fil             2    7[COMRAM] PTR struct .
 11145 ;;		 -> Fil(32), 
 11146 ;; Return value:  Size  Location     Type
 11147 ;;                  1    wreg      enum E93
 11148 ;; Registers used:
 11149 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11150 ;; Tracked objects:
 11151 ;;		On entry : 0/0
 11152 ;;		On exit  : 0/0
 11153 ;;		Unchanged: 0/0
 11154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11155 ;;      Params:         2       0       0       0       0       0       0       0       0
 11156 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11157 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11158 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11159 ;;Total ram usage:        8 bytes
 11160 ;; Hardware stack levels used:    1
 11161 ;; Hardware stack levels required when called:    1
 11162 ;; This function calls:
 11163 ;;		_disk_status
 11164 ;; This function is called by:
 11165 ;;		_f_write
 11166 ;;		_f_sync
 11167 ;;		_f_close
 11168 ;;		_f_lseek
 11169 ;;		_f_read
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           	psect	text31
 11174  004FA2                     __ptext31:
 11175                           	opt callstack 0
 11176  004FA2                     _validate:
 11177                           	opt callstack 27
 11178                           
 11179                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11180                           
 11181                           ;incstack = 0
 11182  004FA2  C002  F008         	movff	validate@obj,validate@fil
 11183  004FA6  C003  F009         	movff	validate@obj+1,validate@fil+1
 11184                           
 11185                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11186  004FAA  5008               	movf	validate@fil,w,c
 11187  004FAC  1009               	iorwf	validate@fil+1,w,c
 11188  004FAE  B4D8               	btfsc	status,2,c
 11189  004FB0  D03E               	goto	u7000
 11190  004FB2  C008  FFD9         	movff	validate@fil,fsr2l
 11191  004FB6  C009  FFDA         	movff	validate@fil+1,fsr2h
 11192  004FBA  50DE               	movf	postinc2,w,c
 11193  004FBC  10DE               	iorwf	postinc2,w,c
 11194  004FBE  B4D8               	btfsc	status,2,c
 11195  004FC0  D036               	goto	u7000
 11196  004FC2  C008  FFD9         	movff	validate@fil,fsr2l
 11197  004FC6  C009  FFDA         	movff	validate@fil+1,fsr2h
 11198  004FCA  CFDE F004          	movff	postinc2,??_validate
 11199  004FCE  CFDD F005          	movff	postdec2,??_validate+1
 11200  004FD2  C004  FFD9         	movff	??_validate,fsr2l
 11201  004FD6  C005  FFDA         	movff	??_validate+1,fsr2h
 11202  004FDA  50DF               	movf	indf2,w,c
 11203  004FDC  B4D8               	btfsc	status,2,c
 11204  004FDE  D027               	goto	u7000
 11205  004FE0  EE20 F002          	lfsr	2,2
 11206  004FE4  5008               	movf	validate@fil,w,c
 11207  004FE6  26D9               	addwf	fsr2l,f,c
 11208  004FE8  5009               	movf	validate@fil+1,w,c
 11209  004FEA  22DA               	addwfc	fsr2h,f,c
 11210  004FEC  C008  FFE1         	movff	validate@fil,fsr1l
 11211  004FF0  C009  FFE2         	movff	validate@fil+1,fsr1h
 11212  004FF4  EE00 F006          	lfsr	0,6
 11213  004FF8  50E6               	movf	postinc1,w,c
 11214  004FFA  26E9               	addwf	fsr0l,f,c
 11215  004FFC  50E5               	movf	postdec1,w,c
 11216  004FFE  22EA               	addwfc	fsr0h,f,c
 11217  005000  50DE               	movf	postinc2,w,c
 11218  005002  18EE               	xorwf	postinc0,w,c
 11219  005004  E114               	bnz	l5289
 11220  005006  50DE               	movf	postinc2,w,c
 11221  005008  18EE               	xorwf	postinc0,w,c
 11222  00500A  A4D8               	btfss	status,2,c
 11223  00500C  D010               	goto	u7000
 11224  00500E  C008  FFD9         	movff	validate@fil,fsr2l
 11225  005012  C009  FFDA         	movff	validate@fil+1,fsr2h
 11226  005016  EE10 F001          	lfsr	1,1
 11227  00501A  50DE               	movf	postinc2,w,c
 11228  00501C  26E1               	addwf	fsr1l,f,c
 11229  00501E  50DD               	movf	postdec2,w,c
 11230  005020  22E2               	addwfc	fsr1h,f,c
 11231  005022  50E7               	movf	indf1,w,c
 11232  005024  ECE6  F02A         	call	_disk_status
 11233  005028  6E04               	movwf	??_validate& (0+255),c
 11234  00502A  A004               	btfss	??_validate,0,c
 11235  00502C  D002               	goto	l5293
 11236  00502E                     u7000:
 11237  00502E                     l5289:
 11238                           
 11239                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11240  00502E  0E09               	movlw	9
 11241  005030  0012               	return	
 11242  005032                     l5293:
 11243                           
 11244                           ;ff.c: 2384:  return FR_OK;
 11245  005032  0E00               	movlw	0
 11246  005034  0012               	return		;funcret
 11247  005036                     __end_of_validate:
 11248                           	opt callstack 0
 11249                           
 11250 ;; *************** function _disk_status *****************
 11251 ;; Defined at:
 11252 ;;		line 356 in file "diskio.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;  pdrv            1    wreg     unsigned char 
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  pdrv            1    0[COMRAM] unsigned char 
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      unsigned char 
 11259 ;; Registers used:
 11260 ;;		wreg, status,2
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0
 11267 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11268 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11269 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11270 ;;Total ram usage:        1 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; This function calls:
 11273 ;;		Nothing
 11274 ;; This function is called by:
 11275 ;;		_find_volume
 11276 ;;		_validate
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           
 11280                           	psect	text32
 11281  0055CC                     __ptext32:
 11282                           	opt callstack 0
 11283  0055CC                     _disk_status:
 11284                           	opt callstack 27
 11285                           
 11286                           ;incstack = 0
 11287                           ;disk_status@pdrv stored from wreg
 11288  0055CC  6E01               	movwf	disk_status@pdrv,c
 11289                           
 11290                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11291  0055CE  5001               	movf	disk_status@pdrv,w,c
 11292  0055D0  B4D8               	btfsc	status,2,c
 11293  0055D2  D002               	goto	l4519
 11294  0055D4  0E01               	movlw	1
 11295  0055D6  0012               	return	
 11296  0055D8                     l4519:
 11297                           
 11298                           ;diskio.c: 361:  return Stat;
 11299  0055D8  0100               	movlb	0	; () banked
 11300  0055DA  51FA               	movf	_Stat& (0+255),w,b
 11301  0055DC  0012               	return		;funcret
 11302  0055DE                     __end_of_disk_status:
 11303                           	opt callstack 0
 11304                           
 11305 ;; *************** function _sync_fs *****************
 11306 ;; Defined at:
 11307 ;;		line 760 in file "ff.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;  fs              2   57[COMRAM] PTR struct .
 11310 ;;		 -> NULL(0), FatFs(558), 
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  res             1   67[COMRAM] enum E93
 11313 ;; Return value:  Size  Location     Type
 11314 ;;                  1    wreg      enum E93
 11315 ;; Registers used:
 11316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11322 ;;      Params:         2       0       0       0       0       0       0       0       0
 11323 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11324 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11325 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11326 ;;Total ram usage:       11 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    7
 11329 ;; This function calls:
 11330 ;;		_disk_ioctl
 11331 ;;		_disk_write
 11332 ;;		_mem_set
 11333 ;;		_sync_window
 11334 ;; This function is called by:
 11335 ;;		_f_sync
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           	psect	text33
 11340  003D80                     __ptext33:
 11341                           	opt callstack 0
 11342  003D80                     _sync_fs:
 11343                           	opt callstack 20
 11344                           
 11345                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11346                           
 11347                           ;incstack = 0
 11348  003D80  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11349  003D84  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11350  003D88  EC4E  F020         	call	_sync_window	;wreg free
 11351  003D8C  6E44               	movwf	sync_fs@res,c
 11352                           
 11353                           ;ff.c: 768:  if (res == FR_OK) {
 11354  003D8E  5044               	movf	sync_fs@res,w,c
 11355  003D90  A4D8               	btfss	status,2,c
 11356  003D92  D0D4               	goto	l308
 11357                           
 11358                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11359  003D94  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11360  003D98  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11361  003D9C  0E03               	movlw	3
 11362  003D9E  18DE               	xorwf	postinc2,w,c
 11363  003DA0  A4D8               	btfss	status,2,c
 11364  003DA2  D0B8               	goto	l4985
 11365  003DA4  EE20 F005          	lfsr	2,5
 11366  003DA8  503A               	movf	sync_fs@fs,w,c
 11367  003DAA  26D9               	addwf	fsr2l,f,c
 11368  003DAC  503B               	movf	sync_fs@fs+1,w,c
 11369  003DAE  22DA               	addwfc	fsr2h,f,c
 11370  003DB0  04DE               	decf	postinc2,w,c
 11371  003DB2  A4D8               	btfss	status,2,c
 11372  003DB4  D0AF               	goto	l4985
 11373                           
 11374                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11375  003DB6  0E2E               	movlw	46
 11376  003DB8  243A               	addwf	sync_fs@fs,w,c
 11377  003DBA  6E01               	movwf	mem_set@dst,c
 11378  003DBC  0E00               	movlw	0
 11379  003DBE  203B               	addwfc	sync_fs@fs+1,w,c
 11380  003DC0  6E02               	movwf	mem_set@dst+1,c
 11381  003DC2  0E00               	movlw	0
 11382  003DC4  6E04               	movwf	mem_set@val+1,c
 11383  003DC6  0E00               	movlw	0
 11384  003DC8  6E03               	movwf	mem_set@val,c
 11385  003DCA  0E02               	movlw	2
 11386  003DCC  6E06               	movwf	mem_set@cnt+1,c
 11387  003DCE  0E00               	movlw	0
 11388  003DD0  6E05               	movwf	mem_set@cnt,c
 11389  003DD2  EC78  F02A         	call	_mem_set	;wreg free
 11390                           
 11391                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11392  003DD6  EE22 F02C          	lfsr	2,556
 11393  003DDA  503A               	movf	sync_fs@fs,w,c
 11394  003DDC  26D9               	addwf	fsr2l,f,c
 11395  003DDE  503B               	movf	sync_fs@fs+1,w,c
 11396  003DE0  22DA               	addwfc	fsr2h,f,c
 11397  003DE2  0E55               	movlw	85
 11398  003DE4  6EDE               	movwf	postinc2,c
 11399  003DE6  0EAA               	movlw	170
 11400  003DE8  6EDD               	movwf	postdec2,c
 11401                           
 11402                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11403  003DEA  EE20 F02E          	lfsr	2,46
 11404  003DEE  503A               	movf	sync_fs@fs,w,c
 11405  003DF0  26D9               	addwf	fsr2l,f,c
 11406  003DF2  503B               	movf	sync_fs@fs+1,w,c
 11407  003DF4  22DA               	addwfc	fsr2h,f,c
 11408  003DF6  0E52               	movlw	82
 11409  003DF8  6EDE               	movwf	postinc2,c
 11410  003DFA  0E52               	movlw	82
 11411  003DFC  6EDE               	movwf	postinc2,c
 11412  003DFE  0E61               	movlw	97
 11413  003E00  6EDE               	movwf	postinc2,c
 11414  003E02  0E41               	movlw	65
 11415  003E04  6EDD               	movwf	postdec2,c
 11416                           
 11417                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11418  003E06  EE22 F012          	lfsr	2,530
 11419  003E0A  503A               	movf	sync_fs@fs,w,c
 11420  003E0C  26D9               	addwf	fsr2l,f,c
 11421  003E0E  503B               	movf	sync_fs@fs+1,w,c
 11422  003E10  22DA               	addwfc	fsr2h,f,c
 11423  003E12  0E72               	movlw	114
 11424  003E14  6EDE               	movwf	postinc2,c
 11425  003E16  0E72               	movlw	114
 11426  003E18  6EDE               	movwf	postinc2,c
 11427  003E1A  0E41               	movlw	65
 11428  003E1C  6EDE               	movwf	postinc2,c
 11429  003E1E  0E61               	movlw	97
 11430  003E20  6EDD               	movwf	postdec2,c
 11431                           
 11432                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11433  003E22  EE20 F00E          	lfsr	2,14
 11434  003E26  503A               	movf	sync_fs@fs,w,c
 11435  003E28  26D9               	addwf	fsr2l,f,c
 11436  003E2A  503B               	movf	sync_fs@fs+1,w,c
 11437  003E2C  22DA               	addwfc	fsr2h,f,c
 11438  003E2E  EE12 F016          	lfsr	1,534
 11439  003E32  503A               	movf	sync_fs@fs,w,c
 11440  003E34  26E1               	addwf	fsr1l,f,c
 11441  003E36  503B               	movf	sync_fs@fs+1,w,c
 11442  003E38  22E2               	addwfc	fsr1h,f,c
 11443  003E3A  CFDE FFE6          	movff	postinc2,postinc1
 11444  003E3E  CFDE FFE6          	movff	postinc2,postinc1
 11445  003E42  CFDE FFE6          	movff	postinc2,postinc1
 11446  003E46  CFDE FFE6          	movff	postinc2,postinc1
 11447                           
 11448                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11449  003E4A  EE20 F00A          	lfsr	2,10
 11450  003E4E  503A               	movf	sync_fs@fs,w,c
 11451  003E50  26D9               	addwf	fsr2l,f,c
 11452  003E52  503B               	movf	sync_fs@fs+1,w,c
 11453  003E54  22DA               	addwfc	fsr2h,f,c
 11454  003E56  EE12 F01A          	lfsr	1,538
 11455  003E5A  503A               	movf	sync_fs@fs,w,c
 11456  003E5C  26E1               	addwf	fsr1l,f,c
 11457  003E5E  503B               	movf	sync_fs@fs+1,w,c
 11458  003E60  22E2               	addwfc	fsr1h,f,c
 11459  003E62  CFDE FFE6          	movff	postinc2,postinc1
 11460  003E66  CFDE FFE6          	movff	postinc2,postinc1
 11461  003E6A  CFDE FFE6          	movff	postinc2,postinc1
 11462  003E6E  CFDE FFE6          	movff	postinc2,postinc1
 11463                           
 11464                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11465  003E72  EE20 F01A          	lfsr	2,26
 11466  003E76  503A               	movf	sync_fs@fs,w,c
 11467  003E78  26D9               	addwf	fsr2l,f,c
 11468  003E7A  503B               	movf	sync_fs@fs+1,w,c
 11469  003E7C  22DA               	addwfc	fsr2h,f,c
 11470  003E7E  CFDE F03C          	movff	postinc2,??_sync_fs
 11471  003E82  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11472  003E86  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11473  003E8A  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11474  003E8E  0E01               	movlw	1
 11475  003E90  243C               	addwf	??_sync_fs,w,c
 11476  003E92  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11477  003E94  0E00               	movlw	0
 11478  003E96  203D               	addwfc	??_sync_fs+1,w,c
 11479  003E98  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11480  003E9A  0E00               	movlw	0
 11481  003E9C  203E               	addwfc	??_sync_fs+2,w,c
 11482  003E9E  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11483  003EA0  0E00               	movlw	0
 11484  003EA2  203F               	addwfc	??_sync_fs+3,w,c
 11485  003EA4  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11486  003EA6  EE20 F02A          	lfsr	2,42
 11487  003EAA  503A               	movf	sync_fs@fs,w,c
 11488  003EAC  26D9               	addwf	fsr2l,f,c
 11489  003EAE  503B               	movf	sync_fs@fs+1,w,c
 11490  003EB0  22DA               	addwfc	fsr2h,f,c
 11491  003EB2  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11492  003EB6  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11493  003EBA  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11494  003EBE  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11495                           
 11496                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11497  003EC2  0E2E               	movlw	46
 11498  003EC4  243A               	addwf	sync_fs@fs,w,c
 11499  003EC6  6E11               	movwf	disk_write@buff,c
 11500  003EC8  0E00               	movlw	0
 11501  003ECA  203B               	addwfc	sync_fs@fs+1,w,c
 11502  003ECC  6E12               	movwf	disk_write@buff+1,c
 11503  003ECE  EE20 F02A          	lfsr	2,42
 11504  003ED2  503A               	movf	sync_fs@fs,w,c
 11505  003ED4  26D9               	addwf	fsr2l,f,c
 11506  003ED6  503B               	movf	sync_fs@fs+1,w,c
 11507  003ED8  22DA               	addwfc	fsr2h,f,c
 11508  003EDA  CFDE F013          	movff	postinc2,disk_write@sector
 11509  003EDE  CFDE F014          	movff	postinc2,disk_write@sector+1
 11510  003EE2  CFDE F015          	movff	postinc2,disk_write@sector+2
 11511  003EE6  CFDE F016          	movff	postinc2,disk_write@sector+3
 11512  003EEA  0E00               	movlw	0
 11513  003EEC  6E18               	movwf	disk_write@count+1,c
 11514  003EEE  0E01               	movlw	1
 11515  003EF0  6E17               	movwf	disk_write@count,c
 11516  003EF2  EE20 F001          	lfsr	2,1
 11517  003EF6  503A               	movf	sync_fs@fs,w,c
 11518  003EF8  26D9               	addwf	fsr2l,f,c
 11519  003EFA  503B               	movf	sync_fs@fs+1,w,c
 11520  003EFC  22DA               	addwfc	fsr2h,f,c
 11521  003EFE  50DF               	movf	indf2,w,c
 11522  003F00  ECE3  F022         	call	_disk_write
 11523                           
 11524                           ;ff.c: 781:    fs->fsi_flag = 0;
 11525  003F04  EE20 F005          	lfsr	2,5
 11526  003F08  503A               	movf	sync_fs@fs,w,c
 11527  003F0A  26D9               	addwf	fsr2l,f,c
 11528  003F0C  503B               	movf	sync_fs@fs+1,w,c
 11529  003F0E  22DA               	addwfc	fsr2h,f,c
 11530  003F10  0E00               	movlw	0
 11531  003F12  6EDF               	movwf	indf2,c
 11532  003F14                     l4985:
 11533                           
 11534                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11535  003F14  0E00               	movlw	0
 11536  003F16  6E11               	movwf	disk_ioctl@cmd,c
 11537  003F18  0E00               	movlw	0
 11538  003F1A  6E12               	movwf	disk_ioctl@buff,c
 11539  003F1C  0E00               	movlw	0
 11540  003F1E  6E13               	movwf	disk_ioctl@buff+1,c
 11541  003F20  EE20 F001          	lfsr	2,1
 11542  003F24  503A               	movf	sync_fs@fs,w,c
 11543  003F26  26D9               	addwf	fsr2l,f,c
 11544  003F28  503B               	movf	sync_fs@fs+1,w,c
 11545  003F2A  22DA               	addwfc	fsr2h,f,c
 11546  003F2C  50DF               	movf	indf2,w,c
 11547  003F2E  ECA8  F00F         	call	_disk_ioctl
 11548  003F32  0900               	iorlw	0
 11549  003F34  B4D8               	btfsc	status,2,c
 11550  003F36  D002               	goto	l308
 11551                           
 11552                           ;ff.c: 785:    res = FR_DISK_ERR;
 11553  003F38  0E01               	movlw	1
 11554  003F3A  6E44               	movwf	sync_fs@res,c
 11555  003F3C                     l308:
 11556                           
 11557                           ;ff.c: 788:  return res;
 11558  003F3C  5044               	movf	sync_fs@res,w,c
 11559  003F3E  0012               	return		;funcret
 11560  003F40                     __end_of_sync_fs:
 11561                           	opt callstack 0
 11562                           
 11563 ;; *************** function _mem_set *****************
 11564 ;; Defined at:
 11565 ;;		line 524 in file "ff.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;  dst             2    0[COMRAM] PTR void 
 11568 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11569 ;;  val             2    2[COMRAM] int 
 11570 ;;  cnt             2    4[COMRAM] unsigned short 
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;  d               2    6[COMRAM] PTR unsigned char 
 11573 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11574 ;; Return value:  Size  Location     Type
 11575 ;;                  1    wreg      void 
 11576 ;; Registers used:
 11577 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11578 ;; Tracked objects:
 11579 ;;		On entry : 0/0
 11580 ;;		On exit  : 0/0
 11581 ;;		Unchanged: 0/0
 11582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11583 ;;      Params:         6       0       0       0       0       0       0       0       0
 11584 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11585 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11586 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11587 ;;Total ram usage:        8 bytes
 11588 ;; Hardware stack levels used:    1
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		_sync_fs
 11593 ;;		_dir_next
 11594 ;;		_dir_register
 11595 ;;		_create_name
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           	psect	text34
 11600  0054F0                     __ptext34:
 11601                           	opt callstack 0
 11602  0054F0                     _mem_set:
 11603                           	opt callstack 25
 11604                           
 11605                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11606                           
 11607                           ;incstack = 0
 11608  0054F0  C001  F007         	movff	mem_set@dst,mem_set@d
 11609  0054F4  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11610                           
 11611                           ;ff.c: 527:  while (cnt--)
 11612  0054F8  D008               	goto	l4417
 11613  0054FA                     l4413:
 11614                           
 11615                           ;ff.c: 528:   *d++ = (BYTE)val;
 11616  0054FA  C007  FFD9         	movff	mem_set@d,fsr2l
 11617  0054FE  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11618  005502  C003  FFDF         	movff	mem_set@val,indf2
 11619  005506  4A07               	infsnz	mem_set@d,f,c
 11620  005508  2A08               	incf	mem_set@d+1,f,c
 11621  00550A                     l4417:
 11622                           
 11623                           ;ff.c: 527:  while (cnt--)
 11624  00550A  0605               	decf	mem_set@cnt,f,c
 11625  00550C  A0D8               	btfss	status,0,c
 11626  00550E  0606               	decf	mem_set@cnt+1,f,c
 11627  005510  2805               	incf	mem_set@cnt,w,c
 11628  005512  E1F3               	bnz	l4413
 11629  005514  2806               	incf	mem_set@cnt+1,w,c
 11630  005516  B4D8               	btfsc	status,2,c
 11631  005518  0012               	return	
 11632  00551A  D7EF               	goto	l4413
 11633  00551C                     __end_of_mem_set:
 11634                           	opt callstack 0
 11635                           
 11636 ;; *************** function _disk_ioctl *****************
 11637 ;; Defined at:
 11638 ;;		line 446 in file "diskio.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;  pdrv            1    wreg     unsigned char 
 11641 ;;  cmd             1   16[COMRAM] unsigned char 
 11642 ;;  buff            2   17[COMRAM] PTR void 
 11643 ;;		 -> NULL(0), 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  pdrv            1   48[COMRAM] unsigned char 
 11646 ;;  csd            16   32[COMRAM] unsigned char [16]
 11647 ;;  csize           4   49[COMRAM] unsigned long 
 11648 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11649 ;;		 -> NULL(0), 
 11650 ;;  n               1   54[COMRAM] unsigned char 
 11651 ;;  res             1   53[COMRAM] enum E43
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      enum E43
 11654 ;; Registers used:
 11655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11661 ;;      Params:         3       0       0       0       0       0       0       0       0
 11662 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11663 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11664 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11665 ;;Total ram usage:       41 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    5
 11668 ;; This function calls:
 11669 ;;		_SPI1_Exchange8bit
 11670 ;;		___wmul
 11671 ;;		_deselect
 11672 ;;		_rcvr_datablock
 11673 ;;		_select
 11674 ;;		_send_cmd
 11675 ;; This function is called by:
 11676 ;;		_sync_fs
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           	psect	text35
 11681  001F50                     __ptext35:
 11682                           	opt callstack 0
 11683  001F50                     _disk_ioctl:
 11684                           	opt callstack 21
 11685                           
 11686                           ;incstack = 0
 11687                           ;disk_ioctl@pdrv stored from wreg
 11688  001F50  6E31               	movwf	disk_ioctl@pdrv,c
 11689                           
 11690                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11691  001F52  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11692  001F56  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11693                           
 11694                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11695  001F5A  5031               	movf	disk_ioctl@pdrv,w,c
 11696  001F5C  B4D8               	btfsc	status,2,c
 11697  001F5E  D002               	goto	l4531
 11698  001F60  0E04               	movlw	4
 11699  001F62  0012               	return	
 11700  001F64                     l4531:
 11701                           
 11702                           ;diskio.c: 459:  res = RES_ERROR;
 11703  001F64  0E01               	movlw	1
 11704  001F66  6E36               	movwf	disk_ioctl@res,c
 11705                           
 11706                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11707  001F68  0100               	movlb	0	; () banked
 11708  001F6A  A1FA               	btfss	_Stat& (0+255),0,b
 11709  001F6C  D21B               	goto	l4631
 11710                           
 11711                           ; BSR set to: 0
 11712  001F6E  0E03               	movlw	3
 11713  001F70  0012               	return	
 11714  001F72                     l4539:
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11718  001F72  ECD7  F02A         	call	_select	;wreg free
 11719  001F76  0900               	iorlw	0
 11720  001F78  B4D8               	btfsc	status,2,c
 11721  001F7A  D235               	goto	l4633
 11722  001F7C                     u5500:
 11723  001F7C  0E00               	movlw	0
 11724  001F7E  D210               	goto	L13
 11725  001F80                     l4543:
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11729  001F80  0E00               	movlw	0
 11730  001F82  6E0B               	movwf	send_cmd@arg,c
 11731  001F84  0E00               	movlw	0
 11732  001F86  6E0C               	movwf	send_cmd@arg+1,c
 11733  001F88  0E00               	movlw	0
 11734  001F8A  6E0D               	movwf	send_cmd@arg+2,c
 11735  001F8C  0E00               	movlw	0
 11736  001F8E  6E0E               	movwf	send_cmd@arg+3,c
 11737  001F90  0E09               	movlw	9
 11738  001F92  EC00  F02A         	call	_send_cmd
 11739  001F96  0900               	iorlw	0
 11740  001F98  A4D8               	btfss	status,2,c
 11741  001F9A  D225               	goto	l4633
 11742  001F9C  0E21               	movlw	low disk_ioctl@csd
 11743  001F9E  6E02               	movwf	rcvr_datablock@buff,c
 11744  001FA0  0E00               	movlw	high disk_ioctl@csd
 11745  001FA2  6E03               	movwf	rcvr_datablock@buff+1,c
 11746  001FA4  0E00               	movlw	0
 11747  001FA6  6E05               	movwf	rcvr_datablock@btr+1,c
 11748  001FA8  0E10               	movlw	16
 11749  001FAA  6E04               	movwf	rcvr_datablock@btr,c
 11750  001FAC  EC1A  F029         	call	_rcvr_datablock	;wreg free
 11751  001FB0  0900               	iorlw	0
 11752  001FB2  B4D8               	btfsc	status,2,c
 11753  001FB4  D218               	goto	l4633
 11754                           
 11755                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11756  001FB6  4421               	rlncf	disk_ioctl@csd,w,c
 11757  001FB8  46E8               	rlncf	wreg,f,c
 11758  001FBA  0B03               	andlw	3
 11759  001FBC  06E8               	decf	wreg,f,c
 11760  001FBE  A4D8               	btfss	status,2,c
 11761  001FC0  D04E               	goto	l4553
 11762                           
 11763                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11764  001FC2  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11765  001FC6  0E3F               	movlw	63
 11766  001FC8  1614               	andwf	??_disk_ioctl,f,c
 11767  001FCA  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11768  001FCE  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11769  001FD0  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11770  001FD2  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11771  001FD4  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11772  001FD8  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11773  001FDC  6A16               	clrf	??_disk_ioctl+2,c
 11774  001FDE  6A15               	clrf	??_disk_ioctl+1,c
 11775  001FE0  5029               	movf	disk_ioctl@csd+8,w,c
 11776  001FE2  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11777  001FE4  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11778  001FE6  502A               	movf	disk_ioctl@csd+9,w,c
 11779  001FE8  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11780  001FEA  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11781  001FEC  5019               	movf	??_disk_ioctl+5,w,c
 11782  001FEE  261B               	addwf	??_disk_ioctl+7,f,c
 11783  001FF0  501A               	movf	??_disk_ioctl+6,w,c
 11784  001FF2  221C               	addwfc	??_disk_ioctl+8,f,c
 11785  001FF4  501B               	movf	??_disk_ioctl+7,w,c
 11786  001FF6  2415               	addwf	??_disk_ioctl+1,w,c
 11787  001FF8  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11788  001FFA  501C               	movf	??_disk_ioctl+8,w,c
 11789  001FFC  2016               	addwfc	??_disk_ioctl+2,w,c
 11790  001FFE  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11791  002000  0E00               	movlw	0
 11792  002002  2017               	addwfc	??_disk_ioctl+3,w,c
 11793  002004  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11794  002006  0E00               	movlw	0
 11795  002008  2018               	addwfc	??_disk_ioctl+4,w,c
 11796  00200A  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11797  00200C  0E01               	movlw	1
 11798  00200E  241D               	addwf	??_disk_ioctl+9,w,c
 11799  002010  6E32               	movwf	disk_ioctl@csize,c
 11800  002012  0E00               	movlw	0
 11801  002014  201E               	addwfc	??_disk_ioctl+10,w,c
 11802  002016  6E33               	movwf	disk_ioctl@csize+1,c
 11803  002018  0E00               	movlw	0
 11804  00201A  201F               	addwfc	??_disk_ioctl+11,w,c
 11805  00201C  6E34               	movwf	disk_ioctl@csize+2,c
 11806  00201E  0E00               	movlw	0
 11807  002020  2020               	addwfc	??_disk_ioctl+12,w,c
 11808  002022  6E35               	movwf	disk_ioctl@csize+3,c
 11809                           
 11810                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11811  002024  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11812  002028  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11813  00202C  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11814  002030  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11815  002034  0E0A               	movlw	10
 11816  002036                     u5545:
 11817  002036  90D8               	bcf	status,0,c
 11818  002038  3614               	rlcf	??_disk_ioctl,f,c
 11819  00203A  3615               	rlcf	??_disk_ioctl+1,f,c
 11820  00203C  3616               	rlcf	??_disk_ioctl+2,f,c
 11821  00203E  3617               	rlcf	??_disk_ioctl+3,f,c
 11822  002040  2EE8               	decfsz	wreg,f,c
 11823  002042  D7F9               	goto	u5545
 11824  002044  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11825  002048  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11826  00204C  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11827  002050  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11828  002054  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11829  002058  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11830                           
 11831                           ;diskio.c: 473:    } else {
 11832  00205C  D78F               	goto	u5500
 11833  00205E                     l4553:
 11834                           
 11835                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11836  00205E  6A14               	clrf	??_disk_ioctl& (0+255),c
 11837  002060  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11838  002062  D001               	bra	u5555
 11839  002064  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11840  002066                     u5555:
 11841  002066  0E01               	movlw	1
 11842  002068  1614               	andwf	??_disk_ioctl,f,c
 11843  00206A  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11844  00206E  0E0F               	movlw	15
 11845  002070  1615               	andwf	??_disk_ioctl+1,f,c
 11846  002072  502A               	movf	disk_ioctl@csd+9,w,c
 11847  002074  0B03               	andlw	3
 11848  002076  0D02               	mullw	2
 11849  002078  50F3               	movf	prodl,w,c
 11850  00207A  2415               	addwf	??_disk_ioctl+1,w,c
 11851  00207C  2414               	addwf	??_disk_ioctl,w,c
 11852  00207E  0F02               	addlw	2
 11853  002080  6E37               	movwf	disk_ioctl@n,c
 11854                           
 11855                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11856  002082  5027               	movf	disk_ioctl@csd+6,w,c
 11857  002084  0B03               	andlw	3
 11858  002086  6E14               	movwf	??_disk_ioctl& (0+255),c
 11859  002088  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 11860  00208A  0E0A               	movlw	10
 11861  00208C                     u5565:
 11862  00208C  90D8               	bcf	status,0,c
 11863  00208E  3614               	rlcf	??_disk_ioctl,f,c
 11864  002090  3615               	rlcf	??_disk_ioctl+1,f,c
 11865  002092  2EE8               	decfsz	wreg,f,c
 11866  002094  D7FB               	goto	u5565
 11867  002096  5028               	movf	disk_ioctl@csd+7,w,c
 11868  002098  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11869  00209A  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11870  00209C  90D8               	bcf	status,0,c
 11871  00209E  3616               	rlcf	??_disk_ioctl+2,f,c
 11872  0020A0  3617               	rlcf	??_disk_ioctl+3,f,c
 11873  0020A2  90D8               	bcf	status,0,c
 11874  0020A4  3616               	rlcf	??_disk_ioctl+2,f,c
 11875  0020A6  3617               	rlcf	??_disk_ioctl+3,f,c
 11876  0020A8  4429               	rlncf	disk_ioctl@csd+8,w,c
 11877  0020AA  46E8               	rlncf	wreg,f,c
 11878  0020AC  0B03               	andlw	3
 11879  0020AE  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11880  0020B0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11881  0020B2  5016               	movf	??_disk_ioctl+2,w,c
 11882  0020B4  2618               	addwf	??_disk_ioctl+4,f,c
 11883  0020B6  5017               	movf	??_disk_ioctl+3,w,c
 11884  0020B8  2219               	addwfc	??_disk_ioctl+5,f,c
 11885  0020BA  5014               	movf	??_disk_ioctl,w,c
 11886  0020BC  2618               	addwf	??_disk_ioctl+4,f,c
 11887  0020BE  5015               	movf	??_disk_ioctl+1,w,c
 11888  0020C0  2219               	addwfc	??_disk_ioctl+5,f,c
 11889  0020C2  0E01               	movlw	1
 11890  0020C4  2618               	addwf	??_disk_ioctl+4,f,c
 11891  0020C6  0E00               	movlw	0
 11892  0020C8  2219               	addwfc	??_disk_ioctl+5,f,c
 11893  0020CA  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 11894  0020CE  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 11895  0020D2  6A34               	clrf	disk_ioctl@csize+2,c
 11896  0020D4  6A35               	clrf	disk_ioctl@csize+3,c
 11897                           
 11898                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 11899  0020D6  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11900  0020DA  0EF7               	movlw	-9
 11901  0020DC  2614               	addwf	??_disk_ioctl,f,c
 11902  0020DE  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11903  0020E2  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11904  0020E6  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11905  0020EA  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 11906  0020EE  2A14               	incf	??_disk_ioctl,f,c
 11907  0020F0  D005               	goto	u5570
 11908  0020F2                     u5575:
 11909  0020F2  90D8               	bcf	status,0,c
 11910  0020F4  3615               	rlcf	??_disk_ioctl+1,f,c
 11911  0020F6  3616               	rlcf	??_disk_ioctl+2,f,c
 11912  0020F8  3617               	rlcf	??_disk_ioctl+3,f,c
 11913  0020FA  3618               	rlcf	??_disk_ioctl+4,f,c
 11914  0020FC                     u5570:
 11915  0020FC  2E14               	decfsz	??_disk_ioctl,f,c
 11916  0020FE  D7F9               	goto	u5575
 11917  002100  D03D               	goto	L15
 11918  002102                     l221:
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;diskio.c: 483:   if (CardType & 0x04) {
 11922  002102  A5D8               	btfss	_CardType& (0+255),2,b
 11923  002104  D048               	goto	l4579
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 11927  002106  0E00               	movlw	0
 11928  002108  6E0B               	movwf	send_cmd@arg,c
 11929  00210A  0E00               	movlw	0
 11930  00210C  6E0C               	movwf	send_cmd@arg+1,c
 11931  00210E  0E00               	movlw	0
 11932  002110  6E0D               	movwf	send_cmd@arg+2,c
 11933  002112  0E00               	movlw	0
 11934  002114  6E0E               	movwf	send_cmd@arg+3,c
 11935  002116  0E8D               	movlw	141
 11936  002118  EC00  F02A         	call	_send_cmd
 11937  00211C  0900               	iorlw	0
 11938  00211E  A4D8               	btfss	status,2,c
 11939  002120  D162               	goto	l4633
 11940                           
 11941                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 11942  002122  0EFF               	movlw	255
 11943  002124  ECF8  F02A         	call	_SPI1_Exchange8bit
 11944                           
 11945                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 11946  002128  0E21               	movlw	low disk_ioctl@csd
 11947  00212A  6E02               	movwf	rcvr_datablock@buff,c
 11948  00212C  0E00               	movlw	high disk_ioctl@csd
 11949  00212E  6E03               	movwf	rcvr_datablock@buff+1,c
 11950  002130  0E00               	movlw	0
 11951  002132  6E05               	movwf	rcvr_datablock@btr+1,c
 11952  002134  0E10               	movlw	16
 11953  002136  6E04               	movwf	rcvr_datablock@btr,c
 11954  002138  EC1A  F029         	call	_rcvr_datablock	;wreg free
 11955  00213C  0900               	iorlw	0
 11956  00213E  B4D8               	btfsc	status,2,c
 11957  002140  D152               	goto	l4633
 11958                           
 11959                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 11960  002142  0E30               	movlw	48
 11961  002144  6E37               	movwf	disk_ioctl@n,c
 11962  002146  D004               	goto	l4573
 11963  002148                     l4569:
 11964  002148  0EFF               	movlw	255
 11965  00214A  ECF8  F02A         	call	_SPI1_Exchange8bit
 11966  00214E  0637               	decf	disk_ioctl@n,f,c
 11967  002150                     l4573:
 11968  002150  5037               	movf	disk_ioctl@n,w,c
 11969  002152  A4D8               	btfss	status,2,c
 11970  002154  D7F9               	goto	l4569
 11971                           
 11972                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 11973  002156  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 11974  00215A  3A14               	swapf	??_disk_ioctl,f,c
 11975  00215C  0E0F               	movlw	15
 11976  00215E  1614               	andwf	??_disk_ioctl,f,c
 11977  002160  0E10               	movlw	16
 11978  002162  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11979  002164  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11980  002166  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11981  002168  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11982  00216A  2A14               	incf	??_disk_ioctl,f,c
 11983  00216C  D005               	goto	u5620
 11984  00216E                     u5625:
 11985  00216E  90D8               	bcf	status,0,c
 11986  002170  3615               	rlcf	??_disk_ioctl+1,f,c
 11987  002172  3616               	rlcf	??_disk_ioctl+2,f,c
 11988  002174  3617               	rlcf	??_disk_ioctl+3,f,c
 11989  002176  3618               	rlcf	??_disk_ioctl+4,f,c
 11990  002178                     u5620:
 11991  002178  2E14               	decfsz	??_disk_ioctl,f,c
 11992  00217A  D7F9               	goto	u5625
 11993  00217C                     L15:
 11994  00217C  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11995  002180  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11996  002184  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11997  002188  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11998  00218C  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11999  002190  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 12000  002194  D6F3               	goto	u5500
 12001  002196                     l4579:
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 12005  002196  0E00               	movlw	0
 12006  002198  6E0B               	movwf	send_cmd@arg,c
 12007  00219A  0E00               	movlw	0
 12008  00219C  6E0C               	movwf	send_cmd@arg+1,c
 12009  00219E  0E00               	movlw	0
 12010  0021A0  6E0D               	movwf	send_cmd@arg+2,c
 12011  0021A2  0E00               	movlw	0
 12012  0021A4  6E0E               	movwf	send_cmd@arg+3,c
 12013  0021A6  0E09               	movlw	9
 12014  0021A8  EC00  F02A         	call	_send_cmd
 12015  0021AC  0900               	iorlw	0
 12016  0021AE  A4D8               	btfss	status,2,c
 12017  0021B0  D11A               	goto	l4633
 12018  0021B2  0E21               	movlw	low disk_ioctl@csd
 12019  0021B4  6E02               	movwf	rcvr_datablock@buff,c
 12020  0021B6  0E00               	movlw	high disk_ioctl@csd
 12021  0021B8  6E03               	movwf	rcvr_datablock@buff+1,c
 12022  0021BA  0E00               	movlw	0
 12023  0021BC  6E05               	movwf	rcvr_datablock@btr+1,c
 12024  0021BE  0E10               	movlw	16
 12025  0021C0  6E04               	movwf	rcvr_datablock@btr,c
 12026  0021C2  EC1A  F029         	call	_rcvr_datablock	;wreg free
 12027  0021C6  0900               	iorlw	0
 12028  0021C8  B4D8               	btfsc	status,2,c
 12029  0021CA  D10D               	goto	l4633
 12030                           
 12031                           ;diskio.c: 494:     if (CardType & 0x02) {
 12032  0021CC  0100               	movlb	0	; () banked
 12033  0021CE  A3D8               	btfss	_CardType& (0+255),1,b
 12034  0021D0  D02A               	goto	l4587
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 12038  0021D2  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 12039  0021D6  0E06               	movlw	6
 12040  0021D8  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12041  0021DA                     u5665:
 12042  0021DA  90D8               	bcf	status,0,c
 12043  0021DC  3214               	rrcf	??_disk_ioctl,f,c
 12044  0021DE  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 12045  0021E0  D7FC               	goto	u5665
 12046  0021E2  0EFF               	movlw	-1
 12047  0021E4  2614               	addwf	??_disk_ioctl,f,c
 12048  0021E6  502B               	movf	disk_ioctl@csd+10,w,c
 12049  0021E8  0B3F               	andlw	63
 12050  0021EA  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12051  0021EC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12052  0021EE  90D8               	bcf	status,0,c
 12053  0021F0  3616               	rlcf	??_disk_ioctl+2,f,c
 12054  0021F2  3617               	rlcf	??_disk_ioctl+3,f,c
 12055  0021F4  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12056  0021F6  AE2C               	btfss	disk_ioctl@csd+11,7,c
 12057  0021F8  D001               	bra	u5675
 12058  0021FA  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 12059  0021FC                     u5675:
 12060  0021FC  0E01               	movlw	1
 12061  0021FE  1618               	andwf	??_disk_ioctl+4,f,c
 12062  002200  5018               	movf	??_disk_ioctl+4,w,c
 12063  002202  2616               	addwf	??_disk_ioctl+2,f,c
 12064  002204  0E00               	movlw	0
 12065  002206  2217               	addwfc	??_disk_ioctl+3,f,c
 12066  002208  0E01               	movlw	1
 12067  00220A  2616               	addwf	??_disk_ioctl+2,f,c
 12068  00220C  0E00               	movlw	0
 12069  00220E  2217               	addwfc	??_disk_ioctl+3,f,c
 12070  002210  2A14               	incf	??_disk_ioctl,f,c
 12071  002212  D003               	goto	u5684
 12072  002214                     u5685:
 12073  002214  90D8               	bcf	status,0,c
 12074  002216  3616               	rlcf	??_disk_ioctl+2,f,c
 12075  002218  3617               	rlcf	??_disk_ioctl+3,f,c
 12076  00221A                     u5684:
 12077  00221A  2E14               	decfsz	??_disk_ioctl,f,c
 12078  00221C  D7FB               	goto	u5685
 12079  00221E  5016               	movf	??_disk_ioctl+2,w,c
 12080  002220  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12081  002222  5017               	movf	??_disk_ioctl+3,w,c
 12082  002224  D034               	goto	L16
 12083  002226                     l4587:
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12087  002226  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12088  00222A  90D8               	bcf	status,0,c
 12089  00222C  3214               	rrcf	??_disk_ioctl,f,c
 12090  00222E  90D8               	bcf	status,0,c
 12091  002230  3214               	rrcf	??_disk_ioctl,f,c
 12092  002232  0E1F               	movlw	31
 12093  002234  1614               	andwf	??_disk_ioctl,f,c
 12094  002236  0E01               	movlw	1
 12095  002238  2414               	addwf	??_disk_ioctl,w,c
 12096  00223A  6E01               	movwf	___wmul@multiplier,c
 12097  00223C  6A02               	clrf	___wmul@multiplier+1,c
 12098  00223E  0E00               	movlw	0
 12099  002240  2202               	addwfc	___wmul@multiplier+1,f,c
 12100  002242  502C               	movf	disk_ioctl@csd+11,w,c
 12101  002244  0B03               	andlw	3
 12102  002246  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12103  002248  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12104  00224A  90D8               	bcf	status,0,c
 12105  00224C  3615               	rlcf	??_disk_ioctl+1,f,c
 12106  00224E  3616               	rlcf	??_disk_ioctl+2,f,c
 12107  002250  90D8               	bcf	status,0,c
 12108  002252  3615               	rlcf	??_disk_ioctl+1,f,c
 12109  002254  3616               	rlcf	??_disk_ioctl+2,f,c
 12110  002256  90D8               	bcf	status,0,c
 12111  002258  3615               	rlcf	??_disk_ioctl+1,f,c
 12112  00225A  3616               	rlcf	??_disk_ioctl+2,f,c
 12113  00225C  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12114  002260  0E05               	movlw	5
 12115  002262  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12116  002264                     u5695:
 12117  002264  90D8               	bcf	status,0,c
 12118  002266  3217               	rrcf	??_disk_ioctl+3,f,c
 12119  002268  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12120  00226A  D7FC               	goto	u5695
 12121  00226C  0E07               	movlw	7
 12122  00226E  1617               	andwf	??_disk_ioctl+3,f,c
 12123  002270  5017               	movf	??_disk_ioctl+3,w,c
 12124  002272  2615               	addwf	??_disk_ioctl+1,f,c
 12125  002274  0E00               	movlw	0
 12126  002276  2216               	addwfc	??_disk_ioctl+2,f,c
 12127  002278  0E01               	movlw	1
 12128  00227A  2415               	addwf	??_disk_ioctl+1,w,c
 12129  00227C  6E03               	movwf	___wmul@multiplicand,c
 12130  00227E  0E00               	movlw	0
 12131  002280  2016               	addwfc	??_disk_ioctl+2,w,c
 12132  002282  6E04               	movwf	___wmul@multiplicand+1,c
 12133  002284  ECA3  F02A         	call	___wmul	;wreg free
 12134  002288  5001               	movf	?___wmul,w,c
 12135  00228A  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12136  00228C  5002               	movf	?___wmul+1,w,c
 12137  00228E                     L16:
 12138  00228E  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12139  002290  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12140  002292  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12141  002294  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12142  002298  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12143  00229C  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12144  0022A0  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12145  0022A4  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12146  0022A8  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12147  0022AC  D667               	goto	u5500
 12148  0022AE                     l4591:
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;diskio.c: 507:   *ptr = CardType;
 12152  0022AE  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12153  0022B2  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12154  0022B6  C0D8  FFDF         	movff	_CardType,indf2
 12155  0022BA  D660               	goto	u5500
 12156  0022BC                     l4595:
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12160  0022BC  0E00               	movlw	0
 12161  0022BE  6E0B               	movwf	send_cmd@arg,c
 12162  0022C0  0E00               	movlw	0
 12163  0022C2  6E0C               	movwf	send_cmd@arg+1,c
 12164  0022C4  0E00               	movlw	0
 12165  0022C6  6E0D               	movwf	send_cmd@arg+2,c
 12166  0022C8  0E00               	movlw	0
 12167  0022CA  6E0E               	movwf	send_cmd@arg+3,c
 12168  0022CC  0E09               	movlw	9
 12169  0022CE  EC00  F02A         	call	_send_cmd
 12170  0022D2  0900               	iorlw	0
 12171  0022D4  A4D8               	btfss	status,2,c
 12172  0022D6  D087               	goto	l4633
 12173  0022D8  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12174  0022DC  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12175  0022E0  0E00               	movlw	0
 12176  0022E2  6E05               	movwf	rcvr_datablock@btr+1,c
 12177  0022E4  0E10               	movlw	16
 12178  0022E6  6E04               	movwf	rcvr_datablock@btr,c
 12179  0022E8  EC1A  F029         	call	_rcvr_datablock	;wreg free
 12180  0022EC                     L14:
 12181  0022EC  0900               	iorlw	0
 12182  0022EE  A4D8               	btfss	status,2,c
 12183  0022F0  D645               	goto	u5500
 12184  0022F2  D079               	goto	l4633
 12185  0022F4                     l4601:
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12189  0022F4  0E00               	movlw	0
 12190  0022F6  6E0B               	movwf	send_cmd@arg,c
 12191  0022F8  0E00               	movlw	0
 12192  0022FA  6E0C               	movwf	send_cmd@arg+1,c
 12193  0022FC  0E00               	movlw	0
 12194  0022FE  6E0D               	movwf	send_cmd@arg+2,c
 12195  002300  0E00               	movlw	0
 12196  002302  6E0E               	movwf	send_cmd@arg+3,c
 12197  002304  0E0A               	movlw	10
 12198  002306  EC00  F02A         	call	_send_cmd
 12199  00230A  0900               	iorlw	0
 12200  00230C  A4D8               	btfss	status,2,c
 12201  00230E  D06B               	goto	l4633
 12202  002310  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12203  002314  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12204  002318  0E00               	movlw	0
 12205  00231A  6E05               	movwf	rcvr_datablock@btr+1,c
 12206  00231C  0E10               	movlw	16
 12207  00231E  6E04               	movwf	rcvr_datablock@btr,c
 12208  002320  EC1A  F029         	call	_rcvr_datablock	;wreg free
 12209  002324  D7E3               	goto	L14
 12210  002326                     l4607:
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12214  002326  0E00               	movlw	0
 12215  002328  6E0B               	movwf	send_cmd@arg,c
 12216  00232A  0E00               	movlw	0
 12217  00232C  6E0C               	movwf	send_cmd@arg+1,c
 12218  00232E  0E00               	movlw	0
 12219  002330  6E0D               	movwf	send_cmd@arg+2,c
 12220  002332  0E00               	movlw	0
 12221  002334  6E0E               	movwf	send_cmd@arg+3,c
 12222  002336  0E3A               	movlw	58
 12223  002338  EC00  F02A         	call	_send_cmd
 12224  00233C  0900               	iorlw	0
 12225  00233E  A4D8               	btfss	status,2,c
 12226  002340  D052               	goto	l4633
 12227                           
 12228                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12229  002342  0E04               	movlw	4
 12230  002344  6E37               	movwf	disk_ioctl@n,c
 12231  002346  D00B               	goto	l4617
 12232  002348                     l4611:
 12233  002348  0EFF               	movlw	255
 12234  00234A  ECF8  F02A         	call	_SPI1_Exchange8bit
 12235  00234E  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12236  002352  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12237  002356  6EDF               	movwf	indf2,c
 12238  002358  4A38               	infsnz	disk_ioctl@ptr,f,c
 12239  00235A  2A39               	incf	disk_ioctl@ptr+1,f,c
 12240  00235C  0637               	decf	disk_ioctl@n,f,c
 12241  00235E                     l4617:
 12242  00235E  5037               	movf	disk_ioctl@n,w,c
 12243  002360  B4D8               	btfsc	status,2,c
 12244  002362  D60C               	goto	u5500
 12245  002364  D7F1               	goto	l4611
 12246  002366                     l4621:
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12250  002366  0E00               	movlw	0
 12251  002368  6E0B               	movwf	send_cmd@arg,c
 12252  00236A  0E00               	movlw	0
 12253  00236C  6E0C               	movwf	send_cmd@arg+1,c
 12254  00236E  0E00               	movlw	0
 12255  002370  6E0D               	movwf	send_cmd@arg+2,c
 12256  002372  0E00               	movlw	0
 12257  002374  6E0E               	movwf	send_cmd@arg+3,c
 12258  002376  0E8D               	movlw	141
 12259  002378  EC00  F02A         	call	_send_cmd
 12260  00237C  0900               	iorlw	0
 12261  00237E  A4D8               	btfss	status,2,c
 12262  002380  D032               	goto	l4633
 12263                           
 12264                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12265  002382  0EFF               	movlw	255
 12266  002384  ECF8  F02A         	call	_SPI1_Exchange8bit
 12267                           
 12268                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12269  002388  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12270  00238C  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12271  002390  0E00               	movlw	0
 12272  002392  6E05               	movwf	rcvr_datablock@btr+1,c
 12273  002394  0E40               	movlw	64
 12274  002396  6E04               	movwf	rcvr_datablock@btr,c
 12275  002398  EC1A  F029         	call	_rcvr_datablock	;wreg free
 12276  00239C  D7A7               	goto	L14
 12277  00239E                     l4629:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;diskio.c: 539:   res = RES_PARERR;
 12281  00239E  0E04               	movlw	4
 12282  0023A0                     L13:
 12283  0023A0  6E36               	movwf	disk_ioctl@res,c
 12284                           
 12285                           ;diskio.c: 540:  }
 12286  0023A2  D021               	goto	l4633
 12287  0023A4                     l4631:
 12288                           
 12289                           ; BSR set to: 0
 12290  0023A4  5011               	movf	disk_ioctl@cmd,w,c
 12291  0023A6  6E14               	movwf	??_disk_ioctl& (0+255),c
 12292  0023A8  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12293                           
 12294                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12295                           ; Switch size 1, requested type "simple"
 12296                           ; Number of cases is 1, Range of values is 0 to 0
 12297                           ; switch strategies available:
 12298                           ; Name         Instructions Cycles
 12299                           ; simple_byte            4     3 (average)
 12300                           ;	Chosen strategy is simple_byte
 12301  0023AA  5015               	movf	??_disk_ioctl+1,w,c
 12302  0023AC  0A00               	xorlw	0	; case 0
 12303  0023AE  A4D8               	btfss	status,2,c
 12304  0023B0  D7F6               	goto	l4629
 12305                           
 12306                           ; BSR set to: 0
 12307                           ; Switch size 1, requested type "simple"
 12308                           ; Number of cases is 8, Range of values is 0 to 14
 12309                           ; switch strategies available:
 12310                           ; Name         Instructions Cycles
 12311                           ; simple_byte           25    13 (average)
 12312                           ;	Chosen strategy is simple_byte
 12313  0023B2  5014               	movf	??_disk_ioctl,w,c
 12314  0023B4  0A00               	xorlw	0	; case 0
 12315  0023B6  B4D8               	btfsc	status,2,c
 12316  0023B8  D5DC               	goto	l4539
 12317  0023BA  0A01               	xorlw	1	; case 1
 12318  0023BC  B4D8               	btfsc	status,2,c
 12319  0023BE  D5E0               	goto	l4543
 12320  0023C0  0A02               	xorlw	2	; case 3
 12321  0023C2  B4D8               	btfsc	status,2,c
 12322  0023C4  D69E               	goto	l221
 12323  0023C6  0A09               	xorlw	9	; case 10
 12324  0023C8  B4D8               	btfsc	status,2,c
 12325  0023CA  D771               	goto	l4591
 12326  0023CC  0A01               	xorlw	1	; case 11
 12327  0023CE  B4D8               	btfsc	status,2,c
 12328  0023D0  D775               	goto	l4595
 12329  0023D2  0A07               	xorlw	7	; case 12
 12330  0023D4  B4D8               	btfsc	status,2,c
 12331  0023D6  D78E               	goto	l4601
 12332  0023D8  0A01               	xorlw	1	; case 13
 12333  0023DA  B4D8               	btfsc	status,2,c
 12334  0023DC  D7A4               	goto	l4607
 12335  0023DE  0A03               	xorlw	3	; case 14
 12336  0023E0  B4D8               	btfsc	status,2,c
 12337  0023E2  D7C1               	goto	l4621
 12338  0023E4  D7DC               	goto	l4629
 12339  0023E6                     l4633:
 12340                           
 12341                           ;diskio.c: 542:  deselect();
 12342  0023E6  EC1A  F02B         	call	_deselect	;wreg free
 12343                           
 12344                           ;diskio.c: 544:  return res;
 12345  0023EA  5036               	movf	disk_ioctl@res,w,c
 12346  0023EC  0012               	return		;funcret
 12347  0023EE                     __end_of_disk_ioctl:
 12348                           	opt callstack 0
 12349                           
 12350 ;; *************** function ___wmul *****************
 12351 ;; Defined at:
 12352 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12353 ;; Parameters:    Size  Location     Type
 12354 ;;  multiplier      2    0[COMRAM] unsigned int 
 12355 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12356 ;; Auto vars:     Size  Location     Type
 12357 ;;  product         2    4[COMRAM] unsigned int 
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  2    0[COMRAM] unsigned int 
 12360 ;; Registers used:
 12361 ;;		wreg, status,2, status,0, prodl, prodh
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12367 ;;      Params:         4       0       0       0       0       0       0       0       0
 12368 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12369 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12370 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12371 ;;Total ram usage:        6 bytes
 12372 ;; Hardware stack levels used:    1
 12373 ;; This function calls:
 12374 ;;		Nothing
 12375 ;; This function is called by:
 12376 ;;		_disk_ioctl
 12377 ;; This function uses a non-reentrant model
 12378 ;;
 12379                           
 12380                           	psect	text36
 12381  005546                     __ptext36:
 12382                           	opt callstack 0
 12383  005546                     ___wmul:
 12384                           	opt callstack 25
 12385                           
 12386                           ;incstack = 0
 12387  005546  5001               	movf	___wmul@multiplier,w,c
 12388  005548  0203               	mulwf	___wmul@multiplicand,c
 12389  00554A  CFF3 F005          	movff	prodl,___wmul@product
 12390  00554E  CFF4 F006          	movff	prodh,___wmul@product+1
 12391  005552  5001               	movf	___wmul@multiplier,w,c
 12392  005554  0204               	mulwf	___wmul@multiplicand+1,c
 12393  005556  50F3               	movf	prodl,w,c
 12394  005558  2606               	addwf	___wmul@product+1,f,c
 12395  00555A  5002               	movf	___wmul@multiplier+1,w,c
 12396  00555C  0203               	mulwf	___wmul@multiplicand,c
 12397  00555E  50F3               	movf	prodl,w,c
 12398  005560  2606               	addwf	___wmul@product+1,f,c
 12399  005562  C005  F001         	movff	___wmul@product,?___wmul
 12400  005566  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12401  00556A  0012               	return		;funcret
 12402  00556C                     __end_of___wmul:
 12403                           	opt callstack 0
 12404                           
 12405 ;; *************** function _st_clust *****************
 12406 ;; Defined at:
 12407 ;;		line 1252 in file "ff.c"
 12408 ;; Parameters:    Size  Location     Type
 12409 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12410 ;;		 -> NULL(0), FatFs(558), 
 12411 ;;  cl              4    2[COMRAM] unsigned long 
 12412 ;; Auto vars:     Size  Location     Type
 12413 ;;		None
 12414 ;; Return value:  Size  Location     Type
 12415 ;;                  1    wreg      void 
 12416 ;; Registers used:
 12417 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12418 ;; Tracked objects:
 12419 ;;		On entry : 0/0
 12420 ;;		On exit  : 0/0
 12421 ;;		Unchanged: 0/0
 12422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12423 ;;      Params:         6       0       0       0       0       0       0       0       0
 12424 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12425 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12426 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12427 ;;Total ram usage:        6 bytes
 12428 ;; Hardware stack levels used:    1
 12429 ;; This function calls:
 12430 ;;		Nothing
 12431 ;; This function is called by:
 12432 ;;		_f_open
 12433 ;;		_f_sync
 12434 ;; This function uses a non-reentrant model
 12435 ;;
 12436                           
 12437                           	psect	text37
 12438  00551C                     __ptext37:
 12439                           	opt callstack 0
 12440  00551C                     _st_clust:
 12441                           	opt callstack 28
 12442                           
 12443                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12444                           
 12445                           ;incstack = 0
 12446  00551C  EE20 F01A          	lfsr	2,26
 12447  005520  5001               	movf	st_clust@dir,w,c
 12448  005522  26D9               	addwf	fsr2l,f,c
 12449  005524  5002               	movf	st_clust@dir+1,w,c
 12450  005526  22DA               	addwfc	fsr2h,f,c
 12451  005528  C003  FFDE         	movff	st_clust@cl,postinc2
 12452  00552C  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12453                           
 12454                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12455  005530  EE20 F014          	lfsr	2,20
 12456  005534  5001               	movf	st_clust@dir,w,c
 12457  005536  26D9               	addwf	fsr2l,f,c
 12458  005538  5002               	movf	st_clust@dir+1,w,c
 12459  00553A  22DA               	addwfc	fsr2h,f,c
 12460  00553C  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12461  005540  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12462  005544  0012               	return		;funcret
 12463  005546                     __end_of_st_clust:
 12464                           	opt callstack 0
 12465                           
 12466 ;; *************** function _move_window *****************
 12467 ;; Defined at:
 12468 ;;		line 729 in file "ff.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;  fs              2   47[COMRAM] PTR struct .
 12471 ;;		 -> NULL(0), FatFs(558), 
 12472 ;;  sector          4   49[COMRAM] unsigned long 
 12473 ;; Auto vars:     Size  Location     Type
 12474 ;;  res             1   57[COMRAM] enum E93
 12475 ;; Return value:  Size  Location     Type
 12476 ;;                  1    wreg      enum E93
 12477 ;; Registers used:
 12478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12479 ;; Tracked objects:
 12480 ;;		On entry : 0/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12484 ;;      Params:         6       0       0       0       0       0       0       0       0
 12485 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12486 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12487 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12488 ;;Total ram usage:       11 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:    7
 12491 ;; This function calls:
 12492 ;;		_disk_read
 12493 ;;		_sync_window
 12494 ;; This function is called by:
 12495 ;;		_get_fat
 12496 ;;		_put_fat
 12497 ;;		_dir_alloc
 12498 ;;		_dir_find
 12499 ;;		_dir_register
 12500 ;;		_check_fs
 12501 ;;		_find_volume
 12502 ;;		_f_open
 12503 ;;		_f_write
 12504 ;;		_f_sync
 12505 ;;		_f_read
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           	psect	text38
 12510  004EFC                     __ptext38:
 12511                           	opt callstack 0
 12512  004EFC                     _move_window:
 12513                           	opt callstack 21
 12514                           
 12515                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12516                           
 12517                           ;incstack = 0
 12518  004EFC  0E00               	movlw	0
 12519  004EFE  6E3A               	movwf	move_window@res,c
 12520                           
 12521                           ;ff.c: 737:  if (sector != fs->winsect) {
 12522  004F00  EE20 F02A          	lfsr	2,42
 12523  004F04  5030               	movf	move_window@fs,w,c
 12524  004F06  26D9               	addwf	fsr2l,f,c
 12525  004F08  5031               	movf	move_window@fs+1,w,c
 12526  004F0A  22DA               	addwfc	fsr2h,f,c
 12527  004F0C  5032               	movf	move_window@sector,w,c
 12528  004F0E  18DE               	xorwf	postinc2,w,c
 12529  004F10  E10A               	bnz	u5000
 12530  004F12  5033               	movf	move_window@sector+1,w,c
 12531  004F14  18DE               	xorwf	postinc2,w,c
 12532  004F16  E107               	bnz	u5000
 12533  004F18  5034               	movf	move_window@sector+2,w,c
 12534  004F1A  18DE               	xorwf	postinc2,w,c
 12535  004F1C  E104               	bnz	u5000
 12536  004F1E  5035               	movf	move_window@sector+3,w,c
 12537  004F20  18DE               	xorwf	postinc2,w,c
 12538  004F22  B4D8               	btfsc	status,2,c
 12539  004F24  D03C               	goto	l4265
 12540  004F26                     u5000:
 12541                           
 12542                           ;ff.c: 739:   res = sync_window(fs);
 12543  004F26  C030  F01B         	movff	move_window@fs,sync_window@fs
 12544  004F2A  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12545  004F2E  EC4E  F020         	call	_sync_window	;wreg free
 12546  004F32  6E3A               	movwf	move_window@res,c
 12547                           
 12548                           ;ff.c: 741:   if (res == FR_OK) {
 12549  004F34  503A               	movf	move_window@res,w,c
 12550  004F36  A4D8               	btfss	status,2,c
 12551  004F38  D032               	goto	l4265
 12552                           
 12553                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12554  004F3A  0E2E               	movlw	46
 12555  004F3C  2430               	addwf	move_window@fs,w,c
 12556  004F3E  6E11               	movwf	disk_read@buff,c
 12557  004F40  0E00               	movlw	0
 12558  004F42  2031               	addwfc	move_window@fs+1,w,c
 12559  004F44  6E12               	movwf	disk_read@buff+1,c
 12560  004F46  C032  F013         	movff	move_window@sector,disk_read@sector
 12561  004F4A  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12562  004F4E  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12563  004F52  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12564  004F56  0E00               	movlw	0
 12565  004F58  6E18               	movwf	disk_read@count+1,c
 12566  004F5A  0E01               	movlw	1
 12567  004F5C  6E17               	movwf	disk_read@count,c
 12568  004F5E  EE20 F001          	lfsr	2,1
 12569  004F62  5030               	movf	move_window@fs,w,c
 12570  004F64  26D9               	addwf	fsr2l,f,c
 12571  004F66  5031               	movf	move_window@fs+1,w,c
 12572  004F68  22DA               	addwfc	fsr2h,f,c
 12573  004F6A  50DF               	movf	indf2,w,c
 12574  004F6C  ECA9  F025         	call	_disk_read
 12575  004F70  0900               	iorlw	0
 12576  004F72  B4D8               	btfsc	status,2,c
 12577  004F74  D006               	goto	l4263
 12578                           
 12579                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12580  004F76  6832               	setf	move_window@sector,c
 12581  004F78  6833               	setf	move_window@sector+1,c
 12582  004F7A  6834               	setf	move_window@sector+2,c
 12583  004F7C  6835               	setf	move_window@sector+3,c
 12584                           
 12585                           ;ff.c: 744:     res = FR_DISK_ERR;
 12586  004F7E  0E01               	movlw	1
 12587  004F80  6E3A               	movwf	move_window@res,c
 12588  004F82                     l4263:
 12589                           
 12590                           ;ff.c: 746:    fs->winsect = sector;
 12591  004F82  EE20 F02A          	lfsr	2,42
 12592  004F86  5030               	movf	move_window@fs,w,c
 12593  004F88  26D9               	addwf	fsr2l,f,c
 12594  004F8A  5031               	movf	move_window@fs+1,w,c
 12595  004F8C  22DA               	addwfc	fsr2h,f,c
 12596  004F8E  C032  FFDE         	movff	move_window@sector,postinc2
 12597  004F92  C033  FFDE         	movff	move_window@sector+1,postinc2
 12598  004F96  C034  FFDE         	movff	move_window@sector+2,postinc2
 12599  004F9A  C035  FFDE         	movff	move_window@sector+3,postinc2
 12600  004F9E                     l4265:
 12601                           
 12602                           ;ff.c: 749:  return res;
 12603  004F9E  503A               	movf	move_window@res,w,c
 12604  004FA0  0012               	return		;funcret
 12605  004FA2                     __end_of_move_window:
 12606                           	opt callstack 0
 12607                           
 12608 ;; *************** function _sync_window *****************
 12609 ;; Defined at:
 12610 ;;		line 700 in file "ff.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;  fs              2   26[COMRAM] PTR struct .
 12613 ;;		 -> NULL(0), FatFs(558), 
 12614 ;; Auto vars:     Size  Location     Type
 12615 ;;  wsect           4   43[COMRAM] unsigned long 
 12616 ;;  nf              2   41[COMRAM] unsigned short 
 12617 ;;  res             1   40[COMRAM] enum E93
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  1    wreg      enum E93
 12620 ;; Registers used:
 12621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12627 ;;      Params:         2       0       0       0       0       0       0       0       0
 12628 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12629 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12630 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12631 ;;Total ram usage:       21 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    6
 12634 ;; This function calls:
 12635 ;;		_disk_write
 12636 ;; This function is called by:
 12637 ;;		_move_window
 12638 ;;		_sync_fs
 12639 ;;		_dir_next
 12640 ;;		_f_write
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           	psect	text39
 12645  00409C                     __ptext39:
 12646                           	opt callstack 0
 12647  00409C                     _sync_window:
 12648                           	opt callstack 22
 12649                           
 12650                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12651                           
 12652                           ;incstack = 0
 12653  00409C  0E00               	movlw	0
 12654  00409E  6E29               	movwf	sync_window@res,c
 12655                           
 12656                           ;ff.c: 709:  if (fs->wflag) {
 12657  0040A0  EE20 F004          	lfsr	2,4
 12658  0040A4  501B               	movf	sync_window@fs,w,c
 12659  0040A6  26D9               	addwf	fsr2l,f,c
 12660  0040A8  501C               	movf	sync_window@fs+1,w,c
 12661  0040AA  22DA               	addwfc	fsr2h,f,c
 12662  0040AC  50DF               	movf	indf2,w,c
 12663  0040AE  B4D8               	btfsc	status,2,c
 12664  0040B0  D09F               	goto	l4245
 12665                           
 12666                           ;ff.c: 710:   wsect = fs->winsect;
 12667  0040B2  EE20 F02A          	lfsr	2,42
 12668  0040B6  501B               	movf	sync_window@fs,w,c
 12669  0040B8  26D9               	addwf	fsr2l,f,c
 12670  0040BA  501C               	movf	sync_window@fs+1,w,c
 12671  0040BC  22DA               	addwfc	fsr2h,f,c
 12672  0040BE  CFDE F02C          	movff	postinc2,sync_window@wsect
 12673  0040C2  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12674  0040C6  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12675  0040CA  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12676                           
 12677                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12678  0040CE  0E2E               	movlw	46
 12679  0040D0  241B               	addwf	sync_window@fs,w,c
 12680  0040D2  6E11               	movwf	disk_write@buff,c
 12681  0040D4  0E00               	movlw	0
 12682  0040D6  201C               	addwfc	sync_window@fs+1,w,c
 12683  0040D8  6E12               	movwf	disk_write@buff+1,c
 12684  0040DA  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12685  0040DE  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12686  0040E2  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12687  0040E6  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12688  0040EA  0E00               	movlw	0
 12689  0040EC  6E18               	movwf	disk_write@count+1,c
 12690  0040EE  0E01               	movlw	1
 12691  0040F0  6E17               	movwf	disk_write@count,c
 12692  0040F2  EE20 F001          	lfsr	2,1
 12693  0040F6  501B               	movf	sync_window@fs,w,c
 12694  0040F8  26D9               	addwf	fsr2l,f,c
 12695  0040FA  501C               	movf	sync_window@fs+1,w,c
 12696  0040FC  22DA               	addwfc	fsr2h,f,c
 12697  0040FE  50DF               	movf	indf2,w,c
 12698  004100  ECE3  F022         	call	_disk_write
 12699  004104  0900               	iorlw	0
 12700  004106  B4D8               	btfsc	status,2,c
 12701  004108  D003               	goto	l4227
 12702                           
 12703                           ;ff.c: 712:    res = FR_DISK_ERR;
 12704  00410A  0E01               	movlw	1
 12705  00410C  6E29               	movwf	sync_window@res,c
 12706                           
 12707                           ;ff.c: 713:   } else {
 12708  00410E  D070               	goto	l4245
 12709  004110                     l4227:
 12710                           
 12711                           ;ff.c: 714:    fs->wflag = 0;
 12712  004110  EE20 F004          	lfsr	2,4
 12713  004114  501B               	movf	sync_window@fs,w,c
 12714  004116  26D9               	addwf	fsr2l,f,c
 12715  004118  501C               	movf	sync_window@fs+1,w,c
 12716  00411A  22DA               	addwfc	fsr2h,f,c
 12717  00411C  0E00               	movlw	0
 12718  00411E  6EDF               	movwf	indf2,c
 12719                           
 12720                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12721  004120  EE20 F016          	lfsr	2,22
 12722  004124  501B               	movf	sync_window@fs,w,c
 12723  004126  26D9               	addwf	fsr2l,f,c
 12724  004128  501C               	movf	sync_window@fs+1,w,c
 12725  00412A  22DA               	addwfc	fsr2h,f,c
 12726  00412C  EE10 F01E          	lfsr	1,30
 12727  004130  501B               	movf	sync_window@fs,w,c
 12728  004132  26E1               	addwf	fsr1l,f,c
 12729  004134  501C               	movf	sync_window@fs+1,w,c
 12730  004136  22E2               	addwfc	fsr1h,f,c
 12731  004138  CFE6 F021          	movff	postinc1,??_sync_window+4
 12732  00413C  CFE6 F022          	movff	postinc1,??_sync_window+5
 12733  004140  CFE6 F023          	movff	postinc1,??_sync_window+6
 12734  004144  CFE6 F024          	movff	postinc1,??_sync_window+7
 12735  004148  5021               	movf	??_sync_window+4,w,c
 12736  00414A  5C2C               	subwf	sync_window@wsect,w,c
 12737  00414C  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12738  00414E  5022               	movf	??_sync_window+5,w,c
 12739  004150  582D               	subwfb	sync_window@wsect+1,w,c
 12740  004152  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12741  004154  5023               	movf	??_sync_window+6,w,c
 12742  004156  582E               	subwfb	sync_window@wsect+2,w,c
 12743  004158  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12744  00415A  5024               	movf	??_sync_window+7,w,c
 12745  00415C  582F               	subwfb	sync_window@wsect+3,w,c
 12746  00415E  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12747  004160  50DE               	movf	postinc2,w,c
 12748  004162  5C25               	subwf	??_sync_window+8,w,c
 12749  004164  50DE               	movf	postinc2,w,c
 12750  004166  5826               	subwfb	??_sync_window+9,w,c
 12751  004168  50DE               	movf	postinc2,w,c
 12752  00416A  5827               	subwfb	??_sync_window+10,w,c
 12753  00416C  50DE               	movf	postinc2,w,c
 12754  00416E  5828               	subwfb	??_sync_window+11,w,c
 12755  004170  B0D8               	btfsc	status,0,c
 12756  004172  D03E               	goto	l4245
 12757                           
 12758                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12759  004174  EE20 F003          	lfsr	2,3
 12760  004178  501B               	movf	sync_window@fs,w,c
 12761  00417A  26D9               	addwf	fsr2l,f,c
 12762  00417C  501C               	movf	sync_window@fs+1,w,c
 12763  00417E  22DA               	addwfc	fsr2h,f,c
 12764  004180  50DF               	movf	indf2,w,c
 12765  004182  6E1D               	movwf	??_sync_window& (0+255),c
 12766  004184  501D               	movf	??_sync_window,w,c
 12767  004186  6E2A               	movwf	sync_window@nf,c
 12768  004188  6A2B               	clrf	sync_window@nf+1,c
 12769  00418A                     l4233:
 12770  00418A  502B               	movf	sync_window@nf+1,w,c
 12771  00418C  E104               	bnz	l4237
 12772  00418E  0E02               	movlw	2
 12773  004190  5C2A               	subwf	sync_window@nf,w,c
 12774  004192  A0D8               	btfss	status,0,c
 12775  004194  D02D               	goto	l4245
 12776  004196                     l4237:
 12777                           
 12778                           ;ff.c: 717:      wsect += fs->fsize;
 12779  004196  EE20 F016          	lfsr	2,22
 12780  00419A  501B               	movf	sync_window@fs,w,c
 12781  00419C  26D9               	addwf	fsr2l,f,c
 12782  00419E  501C               	movf	sync_window@fs+1,w,c
 12783  0041A0  22DA               	addwfc	fsr2h,f,c
 12784  0041A2  50DE               	movf	postinc2,w,c
 12785  0041A4  262C               	addwf	sync_window@wsect,f,c
 12786  0041A6  50DE               	movf	postinc2,w,c
 12787  0041A8  222D               	addwfc	sync_window@wsect+1,f,c
 12788  0041AA  50DE               	movf	postinc2,w,c
 12789  0041AC  222E               	addwfc	sync_window@wsect+2,f,c
 12790  0041AE  50DD               	movf	postdec2,w,c
 12791  0041B0  222F               	addwfc	sync_window@wsect+3,f,c
 12792                           
 12793                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12794  0041B2  0E2E               	movlw	46
 12795  0041B4  241B               	addwf	sync_window@fs,w,c
 12796  0041B6  6E11               	movwf	disk_write@buff,c
 12797  0041B8  0E00               	movlw	0
 12798  0041BA  201C               	addwfc	sync_window@fs+1,w,c
 12799  0041BC  6E12               	movwf	disk_write@buff+1,c
 12800  0041BE  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12801  0041C2  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12802  0041C6  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12803  0041CA  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12804  0041CE  0E00               	movlw	0
 12805  0041D0  6E18               	movwf	disk_write@count+1,c
 12806  0041D2  0E01               	movlw	1
 12807  0041D4  6E17               	movwf	disk_write@count,c
 12808  0041D6  EE20 F001          	lfsr	2,1
 12809  0041DA  501B               	movf	sync_window@fs,w,c
 12810  0041DC  26D9               	addwf	fsr2l,f,c
 12811  0041DE  501C               	movf	sync_window@fs+1,w,c
 12812  0041E0  22DA               	addwfc	fsr2h,f,c
 12813  0041E2  50DF               	movf	indf2,w,c
 12814  0041E4  ECE3  F022         	call	_disk_write
 12815                           
 12816                           ;ff.c: 719:     }
 12817  0041E8  062A               	decf	sync_window@nf,f,c
 12818  0041EA  A0D8               	btfss	status,0,c
 12819  0041EC  062B               	decf	sync_window@nf+1,f,c
 12820  0041EE  D7CD               	goto	l4233
 12821  0041F0                     l4245:
 12822                           
 12823                           ;ff.c: 723:  return res;
 12824  0041F0  5029               	movf	sync_window@res,w,c
 12825  0041F2  0012               	return		;funcret
 12826  0041F4                     __end_of_sync_window:
 12827                           	opt callstack 0
 12828                           
 12829 ;; *************** function _disk_write *****************
 12830 ;; Defined at:
 12831 ;;		line 405 in file "diskio.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  pdrv            1    wreg     unsigned char 
 12834 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12835 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 12836 ;;  sector          4   18[COMRAM] unsigned long 
 12837 ;;  count           2   22[COMRAM] unsigned short 
 12838 ;; Auto vars:     Size  Location     Type
 12839 ;;  pdrv            1   25[COMRAM] unsigned char 
 12840 ;; Return value:  Size  Location     Type
 12841 ;;                  1    wreg      enum E43
 12842 ;; Registers used:
 12843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12844 ;; Tracked objects:
 12845 ;;		On entry : 0/0
 12846 ;;		On exit  : 0/0
 12847 ;;		Unchanged: 0/0
 12848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12849 ;;      Params:         8       0       0       0       0       0       0       0       0
 12850 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12851 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12852 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12853 ;;Total ram usage:       10 bytes
 12854 ;; Hardware stack levels used:    1
 12855 ;; Hardware stack levels required when called:    5
 12856 ;; This function calls:
 12857 ;;		_deselect
 12858 ;;		_send_cmd
 12859 ;;		_xmit_datablock
 12860 ;; This function is called by:
 12861 ;;		_sync_window
 12862 ;;		_sync_fs
 12863 ;;		_f_write
 12864 ;; This function uses a non-reentrant model
 12865 ;;
 12866                           
 12867                           	psect	text40
 12868  0045C6                     __ptext40:
 12869                           	opt callstack 0
 12870  0045C6                     _disk_write:
 12871                           	opt callstack 22
 12872                           
 12873                           ;incstack = 0
 12874                           ;disk_write@pdrv stored from wreg
 12875  0045C6  6E1A               	movwf	disk_write@pdrv,c
 12876                           
 12877                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 12878  0045C8  501A               	movf	disk_write@pdrv,w,c
 12879  0045CA  A4D8               	btfss	status,2,c
 12880  0045CC  D004               	goto	u4690
 12881  0045CE  5017               	movf	disk_write@count,w,c
 12882  0045D0  1018               	iorwf	disk_write@count+1,w,c
 12883  0045D2  A4D8               	btfss	status,2,c
 12884  0045D4  D002               	goto	l192
 12885  0045D6                     u4690:
 12886  0045D6  0E04               	movlw	4
 12887  0045D8  0012               	return	
 12888  0045DA                     l192:
 12889                           
 12890                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 12891  0045DA  0100               	movlb	0	; () banked
 12892  0045DC  A1FA               	btfss	_Stat& (0+255),0,b
 12893  0045DE  D002               	goto	l196
 12894                           
 12895                           ; BSR set to: 0
 12896  0045E0  0E03               	movlw	3
 12897  0045E2  0012               	return	
 12898  0045E4                     l196:
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 12902  0045E4  A5FA               	btfss	_Stat& (0+255),2,b
 12903  0045E6  D002               	goto	l197
 12904                           
 12905                           ; BSR set to: 0
 12906  0045E8  0E02               	movlw	2
 12907  0045EA  0012               	return	
 12908  0045EC                     l197:
 12909                           
 12910                           ; BSR set to: 0
 12911                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 12912  0045EC  B7D8               	btfsc	_CardType& (0+255),3,b
 12913  0045EE  D008               	goto	l198
 12914                           
 12915                           ; BSR set to: 0
 12916  0045F0  0E09               	movlw	9
 12917  0045F2                     u4735:
 12918  0045F2  90D8               	bcf	status,0,c
 12919  0045F4  3613               	rlcf	disk_write@sector,f,c
 12920  0045F6  3614               	rlcf	disk_write@sector+1,f,c
 12921  0045F8  3615               	rlcf	disk_write@sector+2,f,c
 12922  0045FA  3616               	rlcf	disk_write@sector+3,f,c
 12923  0045FC  2EE8               	decfsz	wreg,f,c
 12924  0045FE  D7F9               	goto	u4735
 12925  004600                     l198:
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;diskio.c: 418:  if (count == 1) {
 12929  004600  0417               	decf	disk_write@count,w,c
 12930  004602  1018               	iorwf	disk_write@count+1,w,c
 12931  004604  A4D8               	btfss	status,2,c
 12932  004606  D01D               	goto	l4159
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 12936  004608  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12937  00460C  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12938  004610  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12939  004614  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12940  004618  0E18               	movlw	24
 12941  00461A  EC00  F02A         	call	_send_cmd
 12942  00461E  0900               	iorlw	0
 12943  004620  A4D8               	btfss	status,2,c
 12944  004622  D04F               	goto	l4173
 12945  004624  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12946  004628  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12947  00462C  0EFE               	movlw	254
 12948  00462E  6E06               	movwf	xmit_datablock@token,c
 12949  004630  ECDC  F028         	call	_xmit_datablock	;wreg free
 12950  004634  0900               	iorlw	0
 12951  004636  B4D8               	btfsc	status,2,c
 12952  004638  D044               	goto	l4173
 12953                           
 12954                           ;diskio.c: 421:    count = 0;
 12955  00463A  0E00               	movlw	0
 12956  00463C  6E18               	movwf	disk_write@count+1,c
 12957  00463E  0E00               	movlw	0
 12958  004640  D03F               	goto	L17
 12959  004642                     l4159:
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 12963  004642  C0D8  F019         	movff	_CardType,??_disk_write
 12964  004646  0E06               	movlw	6
 12965  004648  1619               	andwf	??_disk_write,f,c
 12966  00464A  B4D8               	btfsc	status,2,c
 12967  00464C  D009               	goto	l202
 12968                           
 12969                           ; BSR set to: 0
 12970  00464E  C017  F00B         	movff	disk_write@count,send_cmd@arg
 12971  004652  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 12972  004656  6A0D               	clrf	send_cmd@arg+2,c
 12973  004658  6A0E               	clrf	send_cmd@arg+3,c
 12974  00465A  0E97               	movlw	151
 12975  00465C  EC00  F02A         	call	_send_cmd
 12976  004660                     l202:
 12977                           
 12978                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 12979  004660  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12980  004664  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12981  004668  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12982  00466C  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12983  004670  0E19               	movlw	25
 12984  004672  EC00  F02A         	call	_send_cmd
 12985  004676  0900               	iorlw	0
 12986  004678  A4D8               	btfss	status,2,c
 12987  00467A  D023               	goto	l4173
 12988  00467C                     u4780:
 12989                           
 12990                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 12991  00467C  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12992  004680  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12993  004684  0EFC               	movlw	252
 12994  004686  6E06               	movwf	xmit_datablock@token,c
 12995  004688  ECDC  F028         	call	_xmit_datablock	;wreg free
 12996  00468C  0900               	iorlw	0
 12997  00468E  B4D8               	btfsc	status,2,c
 12998  004690  D009               	goto	u4800
 12999                           
 13000                           ;diskio.c: 428:     buff += 512;
 13001  004692  0E02               	movlw	2
 13002  004694  2612               	addwf	disk_write@buff+1,f,c
 13003                           
 13004                           ;diskio.c: 429:    } while (--count);
 13005  004696  0617               	decf	disk_write@count,f,c
 13006  004698  A0D8               	btfss	status,0,c
 13007  00469A  0618               	decf	disk_write@count+1,f,c
 13008  00469C  5017               	movf	disk_write@count,w,c
 13009  00469E  1018               	iorwf	disk_write@count+1,w,c
 13010  0046A0  A4D8               	btfss	status,2,c
 13011  0046A2  D7EC               	goto	u4780
 13012  0046A4                     u4800:
 13013                           
 13014                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 13015  0046A4  0E00               	movlw	0
 13016  0046A6  6E04               	movwf	xmit_datablock@buff,c
 13017  0046A8  0E00               	movlw	0
 13018  0046AA  6E05               	movwf	xmit_datablock@buff+1,c
 13019  0046AC  0EFD               	movlw	253
 13020  0046AE  6E06               	movwf	xmit_datablock@token,c
 13021  0046B0  ECDC  F028         	call	_xmit_datablock	;wreg free
 13022  0046B4  0900               	iorlw	0
 13023  0046B6  A4D8               	btfss	status,2,c
 13024  0046B8  D004               	goto	l4173
 13025                           
 13026                           ;diskio.c: 431:     count = 1;
 13027  0046BA  0E00               	movlw	0
 13028  0046BC  6E18               	movwf	disk_write@count+1,c
 13029  0046BE  0E01               	movlw	1
 13030  0046C0                     L17:
 13031  0046C0  6E17               	movwf	disk_write@count,c
 13032  0046C2                     l4173:
 13033                           
 13034                           ;diskio.c: 434:  deselect();
 13035  0046C2  EC1A  F02B         	call	_deselect	;wreg free
 13036                           
 13037                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 13038  0046C6  5017               	movf	disk_write@count,w,c
 13039  0046C8  1018               	iorwf	disk_write@count+1,w,c
 13040  0046CA  B4D8               	btfsc	status,2,c
 13041  0046CC  D002               	goto	u4820
 13042  0046CE  0E01               	movlw	1
 13043  0046D0  0012               	return	
 13044  0046D2                     u4820:
 13045  0046D2  0E00               	movlw	0
 13046  0046D4  0012               	return		;funcret
 13047  0046D6                     __end_of_disk_write:
 13048                           	opt callstack 0
 13049                           
 13050 ;; *************** function _xmit_datablock *****************
 13051 ;; Defined at:
 13052 ;;		line 156 in file "diskio.c"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13055 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 13056 ;;  token           1    5[COMRAM] unsigned char 
 13057 ;; Auto vars:     Size  Location     Type
 13058 ;;  i               2    6[COMRAM] unsigned short 
 13059 ;;  resp            1    8[COMRAM] unsigned char 
 13060 ;; Return value:  Size  Location     Type
 13061 ;;                  1    wreg      unsigned char 
 13062 ;; Registers used:
 13063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13069 ;;      Params:         3       0       0       0       0       0       0       0       0
 13070 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13072 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13073 ;;Total ram usage:        6 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; Hardware stack levels required when called:    2
 13076 ;; This function calls:
 13077 ;;		_SPI1_Exchange8bit
 13078 ;;		_wait_ready
 13079 ;; This function is called by:
 13080 ;;		_disk_write
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           	psect	text41
 13085  0051B8                     __ptext41:
 13086                           	opt callstack 0
 13087  0051B8                     _xmit_datablock:
 13088                           	opt callstack 24
 13089                           
 13090                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13091                           
 13092                           ;incstack = 0
 13093  0051B8  EC21  F02A         	call	_wait_ready	;wreg free
 13094  0051BC  0900               	iorlw	0
 13095  0051BE  A4D8               	btfss	status,2,c
 13096  0051C0  D002               	goto	l4065
 13097  0051C2                     u4570:
 13098  0051C2  0E00               	movlw	0
 13099  0051C4  0012               	return	
 13100  0051C6                     l4065:
 13101                           
 13102                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13103  0051C6  5006               	movf	xmit_datablock@token,w,c
 13104  0051C8  ECF8  F02A         	call	_SPI1_Exchange8bit
 13105                           
 13106                           ;diskio.c: 168:  if (token != 0xFD) {
 13107  0051CC  0EFD               	movlw	253
 13108  0051CE  1806               	xorwf	xmit_datablock@token,w,c
 13109  0051D0  B4D8               	btfsc	status,2,c
 13110  0051D2  D02E               	goto	l4085
 13111                           
 13112                           ;diskio.c: 169:   i = 512;
 13113  0051D4  0E02               	movlw	2
 13114  0051D6  6E08               	movwf	xmit_datablock@i+1,c
 13115  0051D8  0E00               	movlw	0
 13116  0051DA  6E07               	movwf	xmit_datablock@i,c
 13117  0051DC                     l4071:
 13118                           
 13119                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13120  0051DC  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13121  0051E0  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13122  0051E4  6AF8               	clrf	tblptru,c
 13123  0051E6  0E07               	movlw	(high __ramtop+-1)
 13124  0051E8  64F7               	cpfsgt	tblptrh,c
 13125  0051EA  D003               	bra	u4597
 13126  0051EC  0008               	tblrd		*
 13127  0051EE  50F5               	movf	tablat,w,c
 13128  0051F0  D005               	bra	u4590
 13129  0051F2                     u4597:
 13130  0051F2  CFF6 FFE9          	movff	tblptrl,fsr0l
 13131  0051F6  CFF7 FFEA          	movff	tblptrh,fsr0h
 13132  0051FA  50EF               	movf	indf0,w,c
 13133  0051FC                     u4590:
 13134  0051FC  ECF8  F02A         	call	_SPI1_Exchange8bit
 13135  005200  4A04               	infsnz	xmit_datablock@buff,f,c
 13136  005202  2A05               	incf	xmit_datablock@buff+1,f,c
 13137  005204  0607               	decf	xmit_datablock@i,f,c
 13138  005206  A0D8               	btfss	status,0,c
 13139  005208  0608               	decf	xmit_datablock@i+1,f,c
 13140  00520A  5007               	movf	xmit_datablock@i,w,c
 13141  00520C  1008               	iorwf	xmit_datablock@i+1,w,c
 13142  00520E  A4D8               	btfss	status,2,c
 13143  005210  D7E5               	goto	l4071
 13144                           
 13145                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13146  005212  0EFF               	movlw	255
 13147  005214  ECF8  F02A         	call	_SPI1_Exchange8bit
 13148                           
 13149                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13150  005218  0EFF               	movlw	255
 13151  00521A  ECF8  F02A         	call	_SPI1_Exchange8bit
 13152                           
 13153                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13154  00521E  0EFF               	movlw	255
 13155  005220  ECF8  F02A         	call	_SPI1_Exchange8bit
 13156  005224  6E09               	movwf	xmit_datablock@resp,c
 13157                           
 13158                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13159  005226  5009               	movf	xmit_datablock@resp,w,c
 13160  005228  0B1F               	andlw	31
 13161  00522A  0A05               	xorlw	5
 13162  00522C  A4D8               	btfss	status,2,c
 13163  00522E  D7C9               	goto	u4570
 13164  005230                     l4085:
 13165                           
 13166                           ;diskio.c: 180:  return 1;
 13167  005230  0E01               	movlw	1
 13168  005232  0012               	return		;funcret
 13169  005234                     __end_of_xmit_datablock:
 13170                           	opt callstack 0
 13171                           
 13172 ;; *************** function _disk_read *****************
 13173 ;; Defined at:
 13174 ;;		line 370 in file "diskio.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;  pdrv            1    wreg     unsigned char 
 13177 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13178 ;;		 -> NULL(0), FatFs(558), 
 13179 ;;  sector          4   18[COMRAM] unsigned long 
 13180 ;;  count           2   22[COMRAM] unsigned short 
 13181 ;; Auto vars:     Size  Location     Type
 13182 ;;  pdrv            1   24[COMRAM] unsigned char 
 13183 ;;  cmd             1   27[COMRAM] unsigned char 
 13184 ;; Return value:  Size  Location     Type
 13185 ;;                  1    wreg      enum E43
 13186 ;; Registers used:
 13187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13193 ;;      Params:         8       0       0       0       0       0       0       0       0
 13194 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13195 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13196 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13197 ;;Total ram usage:       12 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; Hardware stack levels required when called:    5
 13200 ;; This function calls:
 13201 ;;		_deselect
 13202 ;;		_rcvr_datablock
 13203 ;;		_send_cmd
 13204 ;; This function is called by:
 13205 ;;		_move_window
 13206 ;;		_f_read
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text42
 13211  004B52                     __ptext42:
 13212                           	opt callstack 0
 13213  004B52                     _disk_read:
 13214                           	opt callstack 22
 13215                           
 13216                           ;incstack = 0
 13217                           ;disk_read@pdrv stored from wreg
 13218  004B52  6E19               	movwf	disk_read@pdrv,c
 13219                           
 13220                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13221  004B54  5019               	movf	disk_read@pdrv,w,c
 13222  004B56  A4D8               	btfss	status,2,c
 13223  004B58  D004               	goto	u4850
 13224  004B5A  5017               	movf	disk_read@count,w,c
 13225  004B5C  1018               	iorwf	disk_read@count+1,w,c
 13226  004B5E  A4D8               	btfss	status,2,c
 13227  004B60  D002               	goto	l175
 13228  004B62                     u4850:
 13229  004B62  0E04               	movlw	4
 13230  004B64  0012               	return	
 13231  004B66                     l175:
 13232                           
 13233                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13234  004B66  0100               	movlb	0	; () banked
 13235  004B68  A1FA               	btfss	_Stat& (0+255),0,b
 13236  004B6A  D002               	goto	l179
 13237                           
 13238                           ; BSR set to: 0
 13239  004B6C  0E03               	movlw	3
 13240  004B6E  0012               	return	
 13241  004B70                     l179:
 13242                           
 13243                           ; BSR set to: 0
 13244                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13245  004B70  B7D8               	btfsc	_CardType& (0+255),3,b
 13246  004B72  D008               	goto	l180
 13247                           
 13248                           ; BSR set to: 0
 13249  004B74  0E09               	movlw	9
 13250  004B76                     u4885:
 13251  004B76  90D8               	bcf	status,0,c
 13252  004B78  3613               	rlcf	disk_read@sector,f,c
 13253  004B7A  3614               	rlcf	disk_read@sector+1,f,c
 13254  004B7C  3615               	rlcf	disk_read@sector+2,f,c
 13255  004B7E  3616               	rlcf	disk_read@sector+3,f,c
 13256  004B80  2EE8               	decfsz	wreg,f,c
 13257  004B82  D7F9               	goto	u4885
 13258  004B84                     l180:
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13262  004B84  5018               	movf	disk_read@count+1,w,c
 13263  004B86  E108               	bnz	l4195
 13264  004B88  0E02               	movlw	2
 13265  004B8A  5C17               	subwf	disk_read@count,w,c
 13266  004B8C  B0D8               	btfsc	status,0,c
 13267  004B8E  D004               	goto	l4195
 13268                           
 13269                           ; BSR set to: 0
 13270  004B90  0E00               	movlw	0
 13271  004B92  6E1B               	movwf	_disk_read$294+1,c
 13272  004B94  0E11               	movlw	17
 13273  004B96  D003               	goto	L18
 13274  004B98                     l4195:
 13275                           
 13276                           ; BSR set to: 0
 13277  004B98  0E00               	movlw	0
 13278  004B9A  6E1B               	movwf	_disk_read$294+1,c
 13279  004B9C  0E12               	movlw	18
 13280  004B9E                     L18:
 13281  004B9E  6E1A               	movwf	_disk_read$294,c
 13282                           
 13283                           ; BSR set to: 0
 13284  004BA0  C01A  F01C         	movff	_disk_read$294,disk_read@cmd
 13285                           
 13286                           ; BSR set to: 0
 13287                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13288  004BA4  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13289  004BA8  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13290  004BAC  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13291  004BB0  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13292  004BB4  501C               	movf	disk_read@cmd,w,c
 13293  004BB6  EC00  F02A         	call	_send_cmd
 13294  004BBA  0900               	iorlw	0
 13295  004BBC  A4D8               	btfss	status,2,c
 13296  004BBE  D025               	goto	l4211
 13297  004BC0                     u4900:
 13298                           
 13299                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13300  004BC0  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13301  004BC4  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13302  004BC8  0E02               	movlw	2
 13303  004BCA  6E05               	movwf	rcvr_datablock@btr+1,c
 13304  004BCC  0E00               	movlw	0
 13305  004BCE  6E04               	movwf	rcvr_datablock@btr,c
 13306  004BD0  EC1A  F029         	call	_rcvr_datablock	;wreg free
 13307  004BD4  0900               	iorlw	0
 13308  004BD6  B4D8               	btfsc	status,2,c
 13309  004BD8  D009               	goto	u4920
 13310                           
 13311                           ;diskio.c: 389:    buff += 512;
 13312  004BDA  0E02               	movlw	2
 13313  004BDC  2612               	addwf	disk_read@buff+1,f,c
 13314                           
 13315                           ;diskio.c: 390:   } while (--count);
 13316  004BDE  0617               	decf	disk_read@count,f,c
 13317  004BE0  A0D8               	btfss	status,0,c
 13318  004BE2  0618               	decf	disk_read@count+1,f,c
 13319  004BE4  5017               	movf	disk_read@count,w,c
 13320  004BE6  1018               	iorwf	disk_read@count+1,w,c
 13321  004BE8  A4D8               	btfss	status,2,c
 13322  004BEA  D7EA               	goto	u4900
 13323  004BEC                     u4920:
 13324                           
 13325                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13326  004BEC  0E12               	movlw	18
 13327  004BEE  181C               	xorwf	disk_read@cmd,w,c
 13328  004BF0  A4D8               	btfss	status,2,c
 13329  004BF2  D00B               	goto	l4211
 13330  004BF4  0E00               	movlw	0
 13331  004BF6  6E0B               	movwf	send_cmd@arg,c
 13332  004BF8  0E00               	movlw	0
 13333  004BFA  6E0C               	movwf	send_cmd@arg+1,c
 13334  004BFC  0E00               	movlw	0
 13335  004BFE  6E0D               	movwf	send_cmd@arg+2,c
 13336  004C00  0E00               	movlw	0
 13337  004C02  6E0E               	movwf	send_cmd@arg+3,c
 13338  004C04  0E0C               	movlw	12
 13339  004C06  EC00  F02A         	call	_send_cmd
 13340  004C0A                     l4211:
 13341                           
 13342                           ;diskio.c: 393:  deselect();
 13343  004C0A  EC1A  F02B         	call	_deselect	;wreg free
 13344                           
 13345                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13346  004C0E  5017               	movf	disk_read@count,w,c
 13347  004C10  1018               	iorwf	disk_read@count+1,w,c
 13348  004C12  B4D8               	btfsc	status,2,c
 13349  004C14  D002               	goto	u4940
 13350  004C16  0E01               	movlw	1
 13351  004C18  0012               	return	
 13352  004C1A                     u4940:
 13353  004C1A  0E00               	movlw	0
 13354  004C1C  0012               	return		;funcret
 13355  004C1E                     __end_of_disk_read:
 13356                           	opt callstack 0
 13357                           
 13358 ;; *************** function _send_cmd *****************
 13359 ;; Defined at:
 13360 ;;		line 231 in file "diskio.c"
 13361 ;; Parameters:    Size  Location     Type
 13362 ;;  cmd             1    wreg     unsigned char 
 13363 ;;  arg             4   10[COMRAM] unsigned long 
 13364 ;; Auto vars:     Size  Location     Type
 13365 ;;  cmd             1   14[COMRAM] unsigned char 
 13366 ;;  res             1   15[COMRAM] unsigned char 
 13367 ;; Return value:  Size  Location     Type
 13368 ;;                  1    wreg      unsigned char 
 13369 ;; Registers used:
 13370 ;;		wreg, status,2, status,0, cstack
 13371 ;; Tracked objects:
 13372 ;;		On entry : 0/0
 13373 ;;		On exit  : 0/0
 13374 ;;		Unchanged: 0/0
 13375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13376 ;;      Params:         4       0       0       0       0       0       0       0       0
 13377 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13378 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13379 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13380 ;;Total ram usage:        6 bytes
 13381 ;; Hardware stack levels used:    1
 13382 ;; Hardware stack levels required when called:    4
 13383 ;; This function calls:
 13384 ;;		___send_cmd
 13385 ;; This function is called by:
 13386 ;;		_disk_initialize
 13387 ;;		_disk_read
 13388 ;;		_disk_write
 13389 ;;		_disk_ioctl
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           	psect	text43
 13394  005400                     __ptext43:
 13395                           	opt callstack 0
 13396  005400                     _send_cmd:
 13397                           	opt callstack 22
 13398                           
 13399                           ;incstack = 0
 13400                           ;send_cmd@cmd stored from wreg
 13401  005400  6E0F               	movwf	send_cmd@cmd,c
 13402                           
 13403                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13404  005402  AE0F               	btfss	send_cmd@cmd,7,c
 13405  005404  D012               	goto	l4101
 13406                           
 13407                           ;diskio.c: 243:   cmd &= 0x7F;
 13408  005406  9E0F               	bcf	send_cmd@cmd,7,c
 13409                           
 13410                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13411  005408  0E00               	movlw	0
 13412  00540A  6E04               	movwf	___send_cmd@arg,c
 13413  00540C  0E00               	movlw	0
 13414  00540E  6E05               	movwf	___send_cmd@arg+1,c
 13415  005410  0E00               	movlw	0
 13416  005412  6E06               	movwf	___send_cmd@arg+2,c
 13417  005414  0E00               	movlw	0
 13418  005416  6E07               	movwf	___send_cmd@arg+3,c
 13419  005418  0E37               	movlw	55
 13420  00541A  EC5C  F028         	call	___send_cmd
 13421  00541E  6E10               	movwf	send_cmd@res,c
 13422                           
 13423                           ;diskio.c: 249:   if (res > 1) return res;
 13424  005420  0E01               	movlw	1
 13425  005422  6410               	cpfsgt	send_cmd@res,c
 13426  005424  D002               	goto	l4101
 13427  005426  5010               	movf	send_cmd@res,w,c
 13428  005428  0012               	return	
 13429  00542A                     l4101:
 13430                           
 13431                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13432  00542A  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13433  00542E  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13434  005432  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13435  005436  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13436  00543A  500F               	movf	send_cmd@cmd,w,c
 13437  00543C  EC5C  F028         	call	___send_cmd
 13438  005440  0012               	return		;funcret
 13439  005442                     __end_of_send_cmd:
 13440                           	opt callstack 0
 13441                           
 13442 ;; *************** function ___send_cmd *****************
 13443 ;; Defined at:
 13444 ;;		line 195 in file "diskio.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  cmd             1    wreg     unsigned char 
 13447 ;;  arg             4    3[COMRAM] unsigned long 
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  cmd             1    9[COMRAM] unsigned char 
 13450 ;;  n               1    8[COMRAM] unsigned char 
 13451 ;;  res             1    7[COMRAM] unsigned char 
 13452 ;; Return value:  Size  Location     Type
 13453 ;;                  1    wreg      unsigned char 
 13454 ;; Registers used:
 13455 ;;		wreg, status,2, status,0, cstack
 13456 ;; Tracked objects:
 13457 ;;		On entry : 0/0
 13458 ;;		On exit  : 0/0
 13459 ;;		Unchanged: 0/0
 13460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13461 ;;      Params:         4       0       0       0       0       0       0       0       0
 13462 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13463 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13464 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13465 ;;Total ram usage:        7 bytes
 13466 ;; Hardware stack levels used:    1
 13467 ;; Hardware stack levels required when called:    3
 13468 ;; This function calls:
 13469 ;;		_SPI1_Exchange8bit
 13470 ;;		_deselect
 13471 ;;		_select
 13472 ;; This function is called by:
 13473 ;;		_send_cmd
 13474 ;; This function uses a non-reentrant model
 13475 ;;
 13476                           
 13477                           	psect	text44
 13478  0050B8                     __ptext44:
 13479                           	opt callstack 0
 13480  0050B8                     ___send_cmd:
 13481                           	opt callstack 22
 13482                           
 13483                           ;incstack = 0
 13484                           ;___send_cmd@cmd stored from wreg
 13485  0050B8  6E0A               	movwf	___send_cmd@cmd,c
 13486                           
 13487                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13488  0050BA  0E0C               	movlw	12
 13489  0050BC  180A               	xorwf	___send_cmd@cmd,w,c
 13490  0050BE  B4D8               	btfsc	status,2,c
 13491  0050C0  D009               	goto	l4021
 13492                           
 13493                           ;diskio.c: 204:   deselect();
 13494  0050C2  EC1A  F02B         	call	_deselect	;wreg free
 13495                           
 13496                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13497  0050C6  ECD7  F02A         	call	_select	;wreg free
 13498  0050CA  0900               	iorlw	0
 13499  0050CC  A4D8               	btfss	status,2,c
 13500  0050CE  D002               	goto	l4021
 13501  0050D0  0EFF               	movlw	255
 13502  0050D2  0012               	return	
 13503  0050D4                     l4021:
 13504                           
 13505                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13506  0050D4  500A               	movf	___send_cmd@cmd,w,c
 13507  0050D6  0940               	iorlw	64
 13508  0050D8  ECF8  F02A         	call	_SPI1_Exchange8bit
 13509                           
 13510                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13511  0050DC  5007               	movf	___send_cmd@arg+3,w,c
 13512  0050DE  ECF8  F02A         	call	_SPI1_Exchange8bit
 13513                           
 13514                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13515  0050E2  5006               	movf	___send_cmd@arg+2,w,c
 13516  0050E4  ECF8  F02A         	call	_SPI1_Exchange8bit
 13517                           
 13518                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13519  0050E8  5005               	movf	___send_cmd@arg+1,w,c
 13520  0050EA  ECF8  F02A         	call	_SPI1_Exchange8bit
 13521                           
 13522                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13523  0050EE  5004               	movf	___send_cmd@arg,w,c
 13524  0050F0  ECF8  F02A         	call	_SPI1_Exchange8bit
 13525                           
 13526                           ;diskio.c: 214:  n = 0x01;
 13527  0050F4  0E01               	movlw	1
 13528  0050F6  6E09               	movwf	___send_cmd@n,c
 13529                           
 13530                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13531  0050F8  500A               	movf	___send_cmd@cmd,w,c
 13532  0050FA  A4D8               	btfss	status,2,c
 13533  0050FC  D002               	goto	l4037
 13534  0050FE  0E95               	movlw	149
 13535  005100  6E09               	movwf	___send_cmd@n,c
 13536  005102                     l4037:
 13537                           
 13538                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13539  005102  0E08               	movlw	8
 13540  005104  180A               	xorwf	___send_cmd@cmd,w,c
 13541  005106  A4D8               	btfss	status,2,c
 13542  005108  D002               	goto	l4041
 13543  00510A  0E87               	movlw	135
 13544  00510C  6E09               	movwf	___send_cmd@n,c
 13545  00510E                     l4041:
 13546                           
 13547                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13548  00510E  5009               	movf	___send_cmd@n,w,c
 13549  005110  ECF8  F02A         	call	_SPI1_Exchange8bit
 13550                           
 13551                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13552  005114  0E0C               	movlw	12
 13553  005116  180A               	xorwf	___send_cmd@cmd,w,c
 13554  005118  A4D8               	btfss	status,2,c
 13555  00511A  D003               	goto	l4047
 13556  00511C  0EFF               	movlw	255
 13557  00511E  ECF8  F02A         	call	_SPI1_Exchange8bit
 13558  005122                     l4047:
 13559                           
 13560                           ;diskio.c: 221:  n = 10;
 13561  005122  0E0A               	movlw	10
 13562  005124  6E09               	movwf	___send_cmd@n,c
 13563  005126                     l4049:
 13564                           
 13565                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13566  005126  0EFF               	movlw	255
 13567  005128  ECF8  F02A         	call	_SPI1_Exchange8bit
 13568  00512C  6E08               	movwf	___send_cmd@res,c
 13569  00512E  AE08               	btfss	___send_cmd@res,7,c
 13570  005130  D002               	goto	l4055
 13571  005132  2E09               	decfsz	___send_cmd@n,f,c
 13572  005134  D7F8               	goto	l4049
 13573  005136                     l4055:
 13574                           
 13575                           ;diskio.c: 226:  return res;
 13576  005136  5008               	movf	___send_cmd@res,w,c
 13577  005138  0012               	return		;funcret
 13578  00513A                     __end_of___send_cmd:
 13579                           	opt callstack 0
 13580                           
 13581 ;; *************** function _select *****************
 13582 ;; Defined at:
 13583 ;;		line 106 in file "diskio.c"
 13584 ;; Parameters:    Size  Location     Type
 13585 ;;		None
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;		None
 13588 ;; Return value:  Size  Location     Type
 13589 ;;                  1    wreg      unsigned char 
 13590 ;; Registers used:
 13591 ;;		wreg, status,2, status,0, cstack
 13592 ;; Tracked objects:
 13593 ;;		On entry : 0/0
 13594 ;;		On exit  : 0/0
 13595 ;;		Unchanged: 0/0
 13596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13597 ;;      Params:         0       0       0       0       0       0       0       0       0
 13598 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13599 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13600 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13601 ;;Total ram usage:        0 bytes
 13602 ;; Hardware stack levels used:    1
 13603 ;; Hardware stack levels required when called:    2
 13604 ;; This function calls:
 13605 ;;		_SPI1_Exchange8bit
 13606 ;;		_deselect
 13607 ;;		_wait_ready
 13608 ;; This function is called by:
 13609 ;;		___send_cmd
 13610 ;;		_disk_ioctl
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           	psect	text45
 13615  0055AE                     __ptext45:
 13616                           	opt callstack 0
 13617  0055AE                     _select:
 13618                           	opt callstack 22
 13619                           
 13620                           ;incstack = 0
 13621                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13622  0055AE  948A               	bcf	3978,2,c	;volatile
 13623                           
 13624                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13625  0055B0  0EFF               	movlw	255
 13626  0055B2  ECF8  F02A         	call	_SPI1_Exchange8bit
 13627                           
 13628                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13629  0055B6  EC21  F02A         	call	_wait_ready	;wreg free
 13630  0055BA  0900               	iorlw	0
 13631  0055BC  B4D8               	btfsc	status,2,c
 13632  0055BE  D002               	goto	l4005
 13633  0055C0  0E01               	movlw	1
 13634  0055C2  0012               	return	
 13635  0055C4                     l4005:
 13636                           
 13637                           ;diskio.c: 112:  deselect();
 13638  0055C4  EC1A  F02B         	call	_deselect	;wreg free
 13639                           
 13640                           ;diskio.c: 113:  return 0;
 13641  0055C8  0E00               	movlw	0
 13642  0055CA  0012               	return		;funcret
 13643  0055CC                     __end_of_select:
 13644                           	opt callstack 0
 13645                           
 13646 ;; *************** function _wait_ready *****************
 13647 ;; Defined at:
 13648 ;;		line 74 in file "diskio.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;		None
 13651 ;; Auto vars:     Size  Location     Type
 13652 ;;  tmr             2    1[COMRAM] unsigned short 
 13653 ;; Return value:  Size  Location     Type
 13654 ;;                  1    wreg      unsigned char 
 13655 ;; Registers used:
 13656 ;;		wreg, status,2, status,0, cstack
 13657 ;; Tracked objects:
 13658 ;;		On entry : 0/0
 13659 ;;		On exit  : 0/0
 13660 ;;		Unchanged: 0/0
 13661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13662 ;;      Params:         0       0       0       0       0       0       0       0       0
 13663 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13664 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13665 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13666 ;;Total ram usage:        2 bytes
 13667 ;; Hardware stack levels used:    1
 13668 ;; Hardware stack levels required when called:    1
 13669 ;; This function calls:
 13670 ;;		_SPI1_Exchange8bit
 13671 ;; This function is called by:
 13672 ;;		_select
 13673 ;;		_xmit_datablock
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           	psect	text46
 13678  005442                     __ptext46:
 13679                           	opt callstack 0
 13680  005442                     _wait_ready:
 13681                           	opt callstack 24
 13682                           
 13683                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13684                           
 13685                           ;incstack = 0
 13686  005442  0E13               	movlw	19
 13687  005444  6E03               	movwf	wait_ready@tmr+1,c
 13688  005446  0E88               	movlw	136
 13689  005448  6E02               	movwf	wait_ready@tmr,c
 13690  00544A  D00D               	goto	l83
 13691  00544C                     l3983:
 13692                           
 13693                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13694  00544C  0EFF               	movlw	255
 13695  00544E  ECF8  F02A         	call	_SPI1_Exchange8bit
 13696  005452  0AFF               	xorlw	255
 13697  005454  B4D8               	btfsc	status,2,c
 13698  005456  D00B               	goto	u4470
 13699                           
 13700                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13701  005458  0E42               	movlw	66
 13702  00545A                     u8917:
 13703  00545A  2EE8               	decfsz	wreg,f,c
 13704  00545C  D7FE               	bra	u8917
 13705  00545E  D000               	nop2	
 13706                           
 13707                           ;diskio.c: 81:  }
 13708  005460  0602               	decf	wait_ready@tmr,f,c
 13709  005462  A0D8               	btfss	status,0,c
 13710  005464  0603               	decf	wait_ready@tmr+1,f,c
 13711  005466                     l83:
 13712  005466  5002               	movf	wait_ready@tmr,w,c
 13713  005468  1003               	iorwf	wait_ready@tmr+1,w,c
 13714  00546A  A4D8               	btfss	status,2,c
 13715  00546C  D7EF               	goto	l3983
 13716  00546E                     u4470:
 13717                           
 13718                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13719  00546E  5002               	movf	wait_ready@tmr,w,c
 13720  005470  1003               	iorwf	wait_ready@tmr+1,w,c
 13721  005472  B4D8               	btfsc	status,2,c
 13722  005474  D002               	goto	u4480
 13723  005476  0E01               	movlw	1
 13724  005478  0012               	return	
 13725  00547A                     u4480:
 13726  00547A  0E00               	movlw	0
 13727  00547C  0012               	return		;funcret
 13728  00547E                     __end_of_wait_ready:
 13729                           	opt callstack 0
 13730                           
 13731 ;; *************** function _deselect *****************
 13732 ;; Defined at:
 13733 ;;		line 93 in file "diskio.c"
 13734 ;; Parameters:    Size  Location     Type
 13735 ;;		None
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;		None
 13738 ;; Return value:  Size  Location     Type
 13739 ;;                  1    wreg      void 
 13740 ;; Registers used:
 13741 ;;		wreg, status,2, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : 0/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13747 ;;      Params:         0       0       0       0       0       0       0       0       0
 13748 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13749 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13750 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13751 ;;Total ram usage:        0 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:    1
 13754 ;; This function calls:
 13755 ;;		_SPI1_Exchange8bit
 13756 ;; This function is called by:
 13757 ;;		_select
 13758 ;;		___send_cmd
 13759 ;;		_disk_initialize
 13760 ;;		_disk_read
 13761 ;;		_disk_write
 13762 ;;		_disk_ioctl
 13763 ;; This function uses a non-reentrant model
 13764 ;;
 13765                           
 13766                           	psect	text47
 13767  005634                     __ptext47:
 13768                           	opt callstack 0
 13769  005634                     _deselect:
 13770                           	opt callstack 22
 13771                           
 13772                           ;incstack = 0
 13773                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13774  005634  848A               	bsf	3978,2,c	;volatile
 13775                           
 13776                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13777  005636  0EFF               	movlw	255
 13778  005638  ECF8  F02A         	call	_SPI1_Exchange8bit
 13779  00563C  0012               	return		;funcret
 13780  00563E                     __end_of_deselect:
 13781                           	opt callstack 0
 13782                           
 13783 ;; *************** function _rcvr_datablock *****************
 13784 ;; Defined at:
 13785 ;;		line 123 in file "diskio.c"
 13786 ;; Parameters:    Size  Location     Type
 13787 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13788 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 13789 ;;  btr             2    3[COMRAM] unsigned short 
 13790 ;; Auto vars:     Size  Location     Type
 13791 ;;  tmr             2    5[COMRAM] unsigned short 
 13792 ;;  token           1    7[COMRAM] unsigned char 
 13793 ;; Return value:  Size  Location     Type
 13794 ;;                  1    wreg      unsigned char 
 13795 ;; Registers used:
 13796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13802 ;;      Params:         4       0       0       0       0       0       0       0       0
 13803 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13804 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13805 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13806 ;;Total ram usage:        7 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; Hardware stack levels required when called:    1
 13809 ;; This function calls:
 13810 ;;		_SPI1_Exchange8bit
 13811 ;; This function is called by:
 13812 ;;		_disk_read
 13813 ;;		_disk_ioctl
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           	psect	text48
 13818  005234                     __ptext48:
 13819                           	opt callstack 0
 13820  005234                     _rcvr_datablock:
 13821                           	opt callstack 25
 13822                           
 13823                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13824                           
 13825                           ;incstack = 0
 13826  005234  0E07               	movlw	7
 13827  005236  6E07               	movwf	rcvr_datablock@tmr+1,c
 13828  005238  0ED0               	movlw	208
 13829  00523A  6E06               	movwf	rcvr_datablock@tmr,c
 13830  00523C  D00E               	goto	l101
 13831  00523E                     l4107:
 13832                           
 13833                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13834  00523E  0EFF               	movlw	255
 13835  005240  ECF8  F02A         	call	_SPI1_Exchange8bit
 13836  005244  6E08               	movwf	rcvr_datablock@token,c
 13837                           
 13838                           ;diskio.c: 134:   if (token != 0xFF) break;
 13839  005246  2808               	incf	rcvr_datablock@token,w,c
 13840  005248  A4D8               	btfss	status,2,c
 13841  00524A  D00B               	goto	u4650
 13842                           
 13843                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13844  00524C  0E42               	movlw	66
 13845  00524E                     u8927:
 13846  00524E  2EE8               	decfsz	wreg,f,c
 13847  005250  D7FE               	bra	u8927
 13848  005252  D000               	nop2	
 13849                           
 13850                           ;diskio.c: 136:  }
 13851  005254  0606               	decf	rcvr_datablock@tmr,f,c
 13852  005256  A0D8               	btfss	status,0,c
 13853  005258  0607               	decf	rcvr_datablock@tmr+1,f,c
 13854  00525A                     l101:
 13855  00525A  5006               	movf	rcvr_datablock@tmr,w,c
 13856  00525C  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13857  00525E  A4D8               	btfss	status,2,c
 13858  005260  D7EE               	goto	l4107
 13859  005262                     u4650:
 13860                           
 13861                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 13862  005262  0EFE               	movlw	254
 13863  005264  1808               	xorwf	rcvr_datablock@token,w,c
 13864  005266  B4D8               	btfsc	status,2,c
 13865  005268  D002               	goto	l4123
 13866  00526A  0E00               	movlw	0
 13867  00526C  0012               	return	
 13868  00526E                     l4123:
 13869                           
 13870                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 13871  00526E  0EFF               	movlw	255
 13872  005270  ECF8  F02A         	call	_SPI1_Exchange8bit
 13873  005274  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 13874  005278  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 13875  00527C  6EDF               	movwf	indf2,c
 13876  00527E  4A02               	infsnz	rcvr_datablock@buff,f,c
 13877  005280  2A03               	incf	rcvr_datablock@buff+1,f,c
 13878  005282  0604               	decf	rcvr_datablock@btr,f,c
 13879  005284  A0D8               	btfss	status,0,c
 13880  005286  0605               	decf	rcvr_datablock@btr+1,f,c
 13881  005288  5004               	movf	rcvr_datablock@btr,w,c
 13882  00528A  1005               	iorwf	rcvr_datablock@btr+1,w,c
 13883  00528C  A4D8               	btfss	status,2,c
 13884  00528E  D7EF               	goto	l4123
 13885                           
 13886                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 13887  005290  0EFF               	movlw	255
 13888  005292  ECF8  F02A         	call	_SPI1_Exchange8bit
 13889                           
 13890                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 13891  005296  0EFF               	movlw	255
 13892  005298  ECF8  F02A         	call	_SPI1_Exchange8bit
 13893                           
 13894                           ;diskio.c: 145:  return 1;
 13895  00529C  0E01               	movlw	1
 13896  00529E  0012               	return		;funcret
 13897  0052A0                     __end_of_rcvr_datablock:
 13898                           	opt callstack 0
 13899                           
 13900 ;; *************** function _SPI1_Exchange8bit *****************
 13901 ;; Defined at:
 13902 ;;		line 90 in file "mcc_generated_files/spi1.c"
 13903 ;; Parameters:    Size  Location     Type
 13904 ;;  data            1    wreg     unsigned char 
 13905 ;; Auto vars:     Size  Location     Type
 13906 ;;  data            1    0[COMRAM] unsigned char 
 13907 ;; Return value:  Size  Location     Type
 13908 ;;                  1    wreg      unsigned char 
 13909 ;; Registers used:
 13910 ;;		wreg, status,2
 13911 ;; Tracked objects:
 13912 ;;		On entry : 0/0
 13913 ;;		On exit  : 0/0
 13914 ;;		Unchanged: 0/0
 13915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13916 ;;      Params:         0       0       0       0       0       0       0       0       0
 13917 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13918 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13919 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13920 ;;Total ram usage:        1 bytes
 13921 ;; Hardware stack levels used:    1
 13922 ;; This function calls:
 13923 ;;		Nothing
 13924 ;; This function is called by:
 13925 ;;		_wait_ready
 13926 ;;		_deselect
 13927 ;;		_select
 13928 ;;		_rcvr_datablock
 13929 ;;		_xmit_datablock
 13930 ;;		___send_cmd
 13931 ;;		_disk_initialize
 13932 ;;		_disk_ioctl
 13933 ;;		_SPI1_Exchange8bitBuffer
 13934 ;; This function uses a non-reentrant model
 13935 ;;
 13936                           
 13937                           	psect	text49
 13938  0055F0                     __ptext49:
 13939                           	opt callstack 0
 13940  0055F0                     _SPI1_Exchange8bit:
 13941                           	opt callstack 24
 13942                           
 13943                           ;incstack = 0
 13944                           ;SPI1_Exchange8bit@data stored from wreg
 13945  0055F0  6E01               	movwf	SPI1_Exchange8bit@data,c
 13946                           
 13947                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 13948  0055F2  9EC6               	bcf	4038,7,c	;volatile
 13949                           
 13950                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 13951  0055F4  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 13952  0055F8                     l814:
 13953                           
 13954                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 13955  0055F8  A0C7               	btfss	4039,0,c	;volatile
 13956  0055FA  D7FE               	goto	l814
 13957                           
 13958                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 13959  0055FC  50C9               	movf	4041,w,c	;volatile
 13960  0055FE  0012               	return		;funcret
 13961  005600                     __end_of_SPI1_Exchange8bit:
 13962                           	opt callstack 0
 13963                           
 13964 ;; *************** function ___delay_sec *****************
 13965 ;; Defined at:
 13966 ;;		line 10 in file "Main.c"
 13967 ;; Parameters:    Size  Location     Type
 13968 ;;  sec             1    wreg     unsigned char 
 13969 ;; Auto vars:     Size  Location     Type
 13970 ;;  sec             1    3[COMRAM] unsigned char 
 13971 ;;  i               1    4[COMRAM] unsigned char 
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  1    wreg      void 
 13974 ;; Registers used:
 13975 ;;		wreg, status,2, status,0, prodl, prodh
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13981 ;;      Params:         0       0       0       0       0       0       0       0       0
 13982 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13983 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13984 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13985 ;;Total ram usage:        5 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; This function calls:
 13988 ;;		Nothing
 13989 ;; This function is called by:
 13990 ;;		_guardar
 13991 ;;		_main
 13992 ;; This function uses a non-reentrant model
 13993 ;;
 13994                           
 13995                           	psect	text50
 13996  0054B8                     __ptext50:
 13997                           	opt callstack 0
 13998  0054B8                     ___delay_sec:
 13999                           	opt callstack 29
 14000                           
 14001                           ;incstack = 0
 14002                           ;___delay_sec@sec stored from wreg
 14003  0054B8  6E04               	movwf	___delay_sec@sec,c
 14004                           
 14005                           ;Main.c: 11:     for(char i=0;i<=(50*sec);i++) {
 14006  0054BA  0E00               	movlw	0
 14007  0054BC  6E05               	movwf	___delay_sec@i,c
 14008  0054BE  D008               	goto	l5773
 14009  0054C0                     l5769:
 14010                           
 14011                           ;Main.c: 12:         _delay((unsigned long)((20)*(8000000/4000.0)));
 14012  0054C0  0E34               	movlw	52
 14013  0054C2  6E01               	movwf	??___delay_sec& (0+255),c
 14014  0054C4  0EF2               	movlw	242
 14015  0054C6                     u8937:
 14016  0054C6  2EE8               	decfsz	wreg,f,c
 14017  0054C8  D7FE               	bra	u8937
 14018  0054CA  2E01               	decfsz	??___delay_sec& (0+255),f,c
 14019  0054CC  D7FC               	bra	u8937
 14020                           
 14021                           ;Main.c: 13:     }
 14022  0054CE  2A05               	incf	___delay_sec@i,f,c
 14023  0054D0                     l5773:
 14024  0054D0  5005               	movf	___delay_sec@i,w,c
 14025  0054D2  6E01               	movwf	??___delay_sec& (0+255),c
 14026  0054D4  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 14027  0054D6  5004               	movf	___delay_sec@sec,w,c
 14028  0054D8  0D32               	mullw	50
 14029  0054DA  5001               	movf	??___delay_sec,w,c
 14030  0054DC  5CF3               	subwf	prodl,w,c
 14031  0054DE  50F4               	movf	prodh,w,c
 14032  0054E0  0A80               	xorlw	128
 14033  0054E2  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 14034  0054E4  5002               	movf	??___delay_sec+1,w,c
 14035  0054E6  0A80               	xorlw	128
 14036  0054E8  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 14037  0054EA  A0D8               	btfss	status,0,c
 14038  0054EC  0012               	return	
 14039  0054EE  D7E8               	goto	l5769
 14040  0054F0                     __end_of___delay_sec:
 14041                           	opt callstack 0
 14042                           
 14043 ;; *************** function _SYSTEM_Initialize *****************
 14044 ;; Defined at:
 14045 ;;		line 116 in file "mcc_generated_files/mcc.c"
 14046 ;; Parameters:    Size  Location     Type
 14047 ;;		None
 14048 ;; Auto vars:     Size  Location     Type
 14049 ;;		None
 14050 ;; Return value:  Size  Location     Type
 14051 ;;                  1    wreg      void 
 14052 ;; Registers used:
 14053 ;;		wreg, status,2, cstack
 14054 ;; Tracked objects:
 14055 ;;		On entry : 0/0
 14056 ;;		On exit  : 0/0
 14057 ;;		Unchanged: 0/0
 14058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14059 ;;      Params:         0       0       0       0       0       0       0       0       0
 14060 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14061 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14062 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14063 ;;Total ram usage:        0 bytes
 14064 ;; Hardware stack levels used:    1
 14065 ;; Hardware stack levels required when called:    1
 14066 ;; This function calls:
 14067 ;;		_OSCILLATOR_Initialize
 14068 ;;		_PIN_MANAGER_Initialize
 14069 ;;		_SPI1_Initialize
 14070 ;; This function is called by:
 14071 ;;		_guardar
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           	psect	text51
 14076  00560E                     __ptext51:
 14077                           	opt callstack 0
 14078  00560E                     _SYSTEM_Initialize:
 14079                           	opt callstack 28
 14080                           
 14081                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 14082                           
 14083                           ;incstack = 0
 14084  00560E  ECC7  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 14085                           
 14086                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 14087  005612  ECEF  F02A         	call	_OSCILLATOR_Initialize	;wreg free
 14088                           
 14089                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14090  005616  EC0E  F02B         	call	_SPI1_Initialize	;wreg free
 14091  00561A  0012               	return		;funcret
 14092  00561C                     __end_of_SYSTEM_Initialize:
 14093                           	opt callstack 0
 14094                           
 14095 ;; *************** function _SPI1_Initialize *****************
 14096 ;; Defined at:
 14097 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14098 ;; Parameters:    Size  Location     Type
 14099 ;;		None
 14100 ;; Auto vars:     Size  Location     Type
 14101 ;;		None
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  1    wreg      void 
 14104 ;; Registers used:
 14105 ;;		wreg, status,2
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14111 ;;      Params:         0       0       0       0       0       0       0       0       0
 14112 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14113 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14114 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14115 ;;Total ram usage:        0 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; This function calls:
 14118 ;;		Nothing
 14119 ;; This function is called by:
 14120 ;;		_disk_initialize
 14121 ;;		_SYSTEM_Initialize
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           	psect	text52
 14126  00561C                     __ptext52:
 14127                           	opt callstack 0
 14128  00561C                     _SPI1_Initialize:
 14129                           	opt callstack 26
 14130                           
 14131                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14132                           
 14133                           ;incstack = 0
 14134  00561C  0E40               	movlw	64
 14135  00561E  6EC7               	movwf	4039,c	;volatile
 14136                           
 14137                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14138  005620  0E22               	movlw	34
 14139  005622  6EC6               	movwf	4038,c	;volatile
 14140                           
 14141                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14142  005624  0E00               	movlw	0
 14143  005626  6EC8               	movwf	4040,c	;volatile
 14144  005628  0012               	return		;funcret
 14145  00562A                     __end_of_SPI1_Initialize:
 14146                           	opt callstack 0
 14147                           
 14148 ;; *************** function _PIN_MANAGER_Initialize *****************
 14149 ;; Defined at:
 14150 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14151 ;; Parameters:    Size  Location     Type
 14152 ;;		None
 14153 ;; Auto vars:     Size  Location     Type
 14154 ;;		None
 14155 ;; Return value:  Size  Location     Type
 14156 ;;                  1    wreg      void 
 14157 ;; Registers used:
 14158 ;;		wreg, status,2
 14159 ;; Tracked objects:
 14160 ;;		On entry : 0/0
 14161 ;;		On exit  : 0/0
 14162 ;;		Unchanged: 0/0
 14163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14164 ;;      Params:         0       0       0       0       0       0       0       0       0
 14165 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14166 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14167 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14168 ;;Total ram usage:        0 bytes
 14169 ;; Hardware stack levels used:    1
 14170 ;; This function calls:
 14171 ;;		Nothing
 14172 ;; This function is called by:
 14173 ;;		_SYSTEM_Initialize
 14174 ;; This function uses a non-reentrant model
 14175 ;;
 14176                           
 14177                           	psect	text53
 14178  00558E                     __ptext53:
 14179                           	opt callstack 0
 14180  00558E                     _PIN_MANAGER_Initialize:
 14181                           	opt callstack 28
 14182                           
 14183                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14184                           
 14185                           ;incstack = 0
 14186  00558E  0E04               	movlw	4
 14187  005590  6E8A               	movwf	3978,c	;volatile
 14188                           
 14189                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14190  005592  0E00               	movlw	0
 14191  005594  6E8B               	movwf	3979,c	;volatile
 14192                           
 14193                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14194  005596  0EF1               	movlw	241
 14195  005598  6E93               	movwf	3987,c	;volatile
 14196                           
 14197                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14198  00559A  0EC7               	movlw	199
 14199  00559C  6E94               	movwf	3988,c	;volatile
 14200                           
 14201                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14202  00559E  0EC4               	movlw	196
 14203  0055A0  010F               	movlb	15	; () banked
 14204  0055A2  6F5D               	movwf	93,b	;volatile
 14205                           
 14206                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14207  0055A4  0E30               	movlw	48
 14208  0055A6  6F5C               	movwf	92,b	;volatile
 14209                           
 14210                           ; BSR set to: 15
 14211                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14212  0055A8  6885               	setf	3973,c	;volatile
 14213                           
 14214                           ; BSR set to: 15
 14215                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14216  0055AA  9EF1               	bcf	4081,7,c	;volatile
 14217                           
 14218                           ; BSR set to: 15
 14219  0055AC  0012               	return		;funcret
 14220  0055AE                     __end_of_PIN_MANAGER_Initialize:
 14221                           	opt callstack 0
 14222                           
 14223 ;; *************** function _OSCILLATOR_Initialize *****************
 14224 ;; Defined at:
 14225 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;		None
 14228 ;; Auto vars:     Size  Location     Type
 14229 ;;		None
 14230 ;; Return value:  Size  Location     Type
 14231 ;;                  1    wreg      void 
 14232 ;; Registers used:
 14233 ;;		wreg, status,2
 14234 ;; Tracked objects:
 14235 ;;		On entry : 0/0
 14236 ;;		On exit  : 0/0
 14237 ;;		Unchanged: 0/0
 14238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14239 ;;      Params:         0       0       0       0       0       0       0       0       0
 14240 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14241 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14242 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14243 ;;Total ram usage:        0 bytes
 14244 ;; Hardware stack levels used:    1
 14245 ;; This function calls:
 14246 ;;		Nothing
 14247 ;; This function is called by:
 14248 ;;		_SYSTEM_Initialize
 14249 ;; This function uses a non-reentrant model
 14250 ;;
 14251                           
 14252                           	psect	text54
 14253  0055DE                     __ptext54:
 14254                           	opt callstack 0
 14255  0055DE                     _OSCILLATOR_Initialize:
 14256                           	opt callstack 28
 14257                           
 14258                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14259                           
 14260                           ; BSR set to: 15
 14261                           ;incstack = 0
 14262  0055DE  0E60               	movlw	96
 14263  0055E0  6ED3               	movwf	4051,c	;volatile
 14264                           
 14265                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14266  0055E2  0E00               	movlw	0
 14267  0055E4  6ED2               	movwf	4050,c	;volatile
 14268                           
 14269                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14270  0055E6  0E00               	movlw	0
 14271  0055E8  6E9B               	movwf	3995,c	;volatile
 14272                           
 14273                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14274  0055EA  0E00               	movlw	0
 14275  0055EC  6EB5               	movwf	4021,c	;volatile
 14276  0055EE  0012               	return		;funcret
 14277  0055F0                     __end_of_OSCILLATOR_Initialize:
 14278                           	opt callstack 0
 14279                           
 14280 ;; *************** function _Error *****************
 14281 ;; Defined at:
 14282 ;;		line 13 in file "./Errores.h"
 14283 ;; Parameters:    Size  Location     Type
 14284 ;;  a               2    0[COMRAM] int 
 14285 ;; Auto vars:     Size  Location     Type
 14286 ;;  v_seg          10    3[COMRAM] unsigned char [10]
 14287 ;; Return value:  Size  Location     Type
 14288 ;;                  1    wreg      void 
 14289 ;; Registers used:
 14290 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14291 ;; Tracked objects:
 14292 ;;		On entry : 0/0
 14293 ;;		On exit  : 0/0
 14294 ;;		Unchanged: 0/0
 14295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14296 ;;      Params:         2       0       0       0       0       0       0       0       0
 14297 ;;      Locals:        10       0       0       0       0       0       0       0       0
 14298 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14299 ;;      Totals:        13       0       0       0       0       0       0       0       0
 14300 ;;Total ram usage:       13 bytes
 14301 ;; Hardware stack levels used:    1
 14302 ;; This function calls:
 14303 ;;		Nothing
 14304 ;; This function is called by:
 14305 ;;		_guardar
 14306 ;;		_main
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           	psect	text55
 14311  004D92                     __ptext55:
 14312                           	opt callstack 0
 14313  004D92                     _Error:
 14314                           	opt callstack 29
 14315                           
 14316                           ;./Errores.h: 14:     LATD = 0x00;
 14317                           
 14318                           ;incstack = 0
 14319  004D92  0E00               	movlw	0
 14320  004D94  6E8C               	movwf	3980,c	;volatile
 14321                           
 14322                           ;./Errores.h: 15:     TRISD = 0x00;
 14323  004D96  0E00               	movlw	0
 14324  004D98  6E95               	movwf	3989,c	;volatile
 14325                           
 14326                           ;./Errores.h: 16:     ANSELD = 0x00;
 14327  004D9A  0E00               	movlw	0
 14328  004D9C  010F               	movlb	15	; () banked
 14329  004D9E  6F5E               	movwf	94,b	;volatile
 14330                           
 14331                           ;./Errores.h: 17:     LATE = 0x00;
 14332  004DA0  0E00               	movlw	0
 14333  004DA2  6E8D               	movwf	3981,c	;volatile
 14334                           
 14335                           ;./Errores.h: 18:     TRISE = 0x00;
 14336  004DA4  0E00               	movlw	0
 14337  004DA6  6E96               	movwf	3990,c	;volatile
 14338                           
 14339                           ;./Errores.h: 19:     ANSELE = 0x00;
 14340  004DA8  0E00               	movlw	0
 14341  004DAA  6F5F               	movwf	95,b	;volatile
 14342                           
 14343                           ; BSR set to: 15
 14344                           ;./Errores.h: 21:     unsigned char v_seg[10]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0
      +                          x7F,0x73};
 14345  004DAC  EE21  F000         	lfsr	2,Error@F5051
 14346  004DB0  EE10  F004         	lfsr	1,Error@v_seg
 14347  004DB4  0E09               	movlw	9
 14348  004DB6                     u7711:
 14349  004DB6  CFDB FFE3          	movff	plusw2,plusw1
 14350  004DBA  06E8               	decf	wreg,f,c
 14351  004DBC  E2FC               	bc	u7711
 14352                           
 14353                           ; BSR set to: 15
 14354                           ;./Errores.h: 22:     if(a != 33 && a != 55){
 14355  004DBE  0E21               	movlw	33
 14356  004DC0  1801               	xorwf	Error@a,w,c
 14357  004DC2  1002               	iorwf	Error@a+1,w,c
 14358  004DC4  B4D8               	btfsc	status,2,c
 14359  004DC6  D010               	goto	l5743
 14360                           
 14361                           ; BSR set to: 15
 14362  004DC8  0E37               	movlw	55
 14363  004DCA  1801               	xorwf	Error@a,w,c
 14364  004DCC  1002               	iorwf	Error@a+1,w,c
 14365  004DCE  B4D8               	btfsc	status,2,c
 14366  004DD0  D00B               	goto	l5743
 14367                           
 14368                           ; BSR set to: 15
 14369                           ;./Errores.h: 23:     LATD = v_seg[a];
 14370  004DD2  0E04               	movlw	low Error@v_seg
 14371  004DD4  2401               	addwf	Error@a,w,c
 14372  004DD6  6ED9               	movwf	fsr2l,c
 14373  004DD8  0E00               	movlw	high Error@v_seg
 14374  004DDA  2002               	addwfc	Error@a+1,w,c
 14375  004DDC  6EDA               	movwf	fsr2h,c
 14376  004DDE  50DF               	movf	indf2,w,c
 14377  004DE0  6E8C               	movwf	3980,c	;volatile
 14378                           
 14379                           ; BSR set to: 15
 14380                           ;./Errores.h: 24:     LATE = 0x01;
 14381  004DE2  0E01               	movlw	1
 14382  004DE4  6E8D               	movwf	3981,c	;volatile
 14383                           
 14384                           ;./Errores.h: 25:     }
 14385  004DE6  0012               	return	
 14386  004DE8                     l5743:
 14387                           
 14388                           ; BSR set to: 15
 14389  004DE8  0E21               	movlw	33
 14390  004DEA  1801               	xorwf	Error@a,w,c
 14391  004DEC  1002               	iorwf	Error@a+1,w,c
 14392  004DEE  A4D8               	btfss	status,2,c
 14393  004DF0  D005               	goto	l33
 14394                           
 14395                           ; BSR set to: 15
 14396                           ;./Errores.h: 27:     LATD = v_seg[6];
 14397  004DF2  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 14398                           
 14399                           ; BSR set to: 15
 14400                           ;./Errores.h: 28:     LATE = 0x02;
 14401  004DF6  0E02               	movlw	2
 14402  004DF8  6E8D               	movwf	3981,c	;volatile
 14403                           
 14404                           ;./Errores.h: 29:     }
 14405  004DFA  0012               	return	
 14406  004DFC                     l33:
 14407                           
 14408                           ; BSR set to: 15
 14409                           ;./Errores.h: 31:     LATD = v_seg[0];
 14410  004DFC  C004  FF8C         	movff	Error@v_seg,3980	;volatile
 14411                           
 14412                           ; BSR set to: 15
 14413                           ;./Errores.h: 32:     LATE = 0x01;
 14414  004E00  0E01               	movlw	1
 14415  004E02  6E8D               	movwf	3981,c	;volatile
 14416                           
 14417                           ; BSR set to: 15
 14418                           ;./Errores.h: 33:     _delay((unsigned long)((1)*(8000000/4000.0)));
 14419  004E04  0E03               	movlw	3
 14420  004E06  6E03               	movwf	??_Error& (0+255),c
 14421  004E08  0E98               	movlw	152
 14422  004E0A                     u8947:
 14423  004E0A  2EE8               	decfsz	wreg,f,c
 14424  004E0C  D7FE               	bra	u8947
 14425  004E0E  2E03               	decfsz	??_Error& (0+255),f,c
 14426  004E10  D7FC               	bra	u8947
 14427                           
 14428                           ;./Errores.h: 35:     LATE = 0x00;
 14429  004E12  0E00               	movlw	0
 14430  004E14  6E8D               	movwf	3981,c	;volatile
 14431                           
 14432                           ;./Errores.h: 36:     LATD = v_seg[9];
 14433  004E16  C00D  FF8C         	movff	Error@v_seg+9,3980	;volatile
 14434                           
 14435                           ;./Errores.h: 37:     LATE = 0x02;
 14436  004E1A  0E02               	movlw	2
 14437  004E1C  6E8D               	movwf	3981,c	;volatile
 14438                           
 14439                           ;./Errores.h: 38:     _delay((unsigned long)((1)*(8000000/4000.0)));
 14440  004E1E  0E03               	movlw	3
 14441  004E20  6E03               	movwf	??_Error& (0+255),c
 14442  004E22  0E98               	movlw	152
 14443  004E24                     u8957:
 14444  004E24  2EE8               	decfsz	wreg,f,c
 14445  004E26  D7FE               	bra	u8957
 14446  004E28  2E03               	decfsz	??_Error& (0+255),f,c
 14447  004E2A  D7FC               	bra	u8957
 14448                           
 14449                           ;./Errores.h: 40:     LATE = 0x00;
 14450  004E2C  0E00               	movlw	0
 14451  004E2E  6E8D               	movwf	3981,c	;volatile
 14452                           
 14453                           ;./Errores.h: 41:     LATD = v_seg[6];
 14454  004E30  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 14455                           
 14456                           ;./Errores.h: 42:     LATE = 0x04;
 14457  004E34  0E04               	movlw	4
 14458  004E36  6E8D               	movwf	3981,c	;volatile
 14459                           
 14460                           ;./Errores.h: 43:     _delay((unsigned long)((1)*(8000000/4000.0)));
 14461  004E38  0E03               	movlw	3
 14462  004E3A  6E03               	movwf	??_Error& (0+255),c
 14463  004E3C  0E98               	movlw	152
 14464  004E3E                     u8967:
 14465  004E3E  2EE8               	decfsz	wreg,f,c
 14466  004E40  D7FE               	bra	u8967
 14467  004E42  2E03               	decfsz	??_Error& (0+255),f,c
 14468  004E44  D7FC               	bra	u8967
 14469                           
 14470                           ;./Errores.h: 45:     LATE = 0x00;
 14471  004E46  0E00               	movlw	0
 14472  004E48  6E8D               	movwf	3981,c	;volatile
 14473  004E4A  0012               	return		;funcret
 14474  004E4C                     __end_of_Error:
 14475                           	opt callstack 0
 14476                           
 14477                           	psect	rparam
 14478  0000                     tosu	equ	0xFFF
 14479                           tosh	equ	0xFFE
 14480                           tosl	equ	0xFFD
 14481                           stkptr	equ	0xFFC
 14482                           pclatu	equ	0xFFB
 14483                           pclath	equ	0xFFA
 14484                           pcl	equ	0xFF9
 14485                           tblptru	equ	0xFF8
 14486                           tblptrh	equ	0xFF7
 14487                           tblptrl	equ	0xFF6
 14488                           tablat	equ	0xFF5
 14489                           prodh	equ	0xFF4
 14490                           prodl	equ	0xFF3
 14491                           indf0	equ	0xFEF
 14492                           postinc0	equ	0xFEE
 14493                           postdec0	equ	0xFED
 14494                           preinc0	equ	0xFEC
 14495                           plusw0	equ	0xFEB
 14496                           fsr0h	equ	0xFEA
 14497                           fsr0l	equ	0xFE9
 14498                           wreg	equ	0xFE8
 14499                           indf1	equ	0xFE7
 14500                           postinc1	equ	0xFE6
 14501                           postdec1	equ	0xFE5
 14502                           preinc1	equ	0xFE4
 14503                           plusw1	equ	0xFE3
 14504                           fsr1h	equ	0xFE2
 14505                           fsr1l	equ	0xFE1
 14506                           bsr	equ	0xFE0
 14507                           indf2	equ	0xFDF
 14508                           postinc2	equ	0xFDE
 14509                           postdec2	equ	0xFDD
 14510                           preinc2	equ	0xFDC
 14511                           plusw2	equ	0xFDB
 14512                           fsr2h	equ	0xFDA
 14513                           fsr2l	equ	0xFD9
 14514                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    0
    Data        11
    BSS         596
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    116     155
    BANK1           256      0      10
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> guardar@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S361$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S361$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S361$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    guardar@data	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    S55$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S55$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_guardar
    _guardar->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  432067
                              _Error
                        ___delay_sec
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              4     2      2  431058
                                            112 BANK0      4     2      2
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (2) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (5) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (6) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (7) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (6) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error                                               13    11      2     963
                                              0 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   ___delay_sec
   _guardar
     _Error
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
       _mem_cpy
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _validate
         _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       A       8        3.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     74      9B       5       96.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     104       6        0.0%
DATA                 0      0     332       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 17 22:04:36 2019

              _SPI1_Exchange8bit 55F0                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l33 4DFC  
                             l83 5466                      disk_ioctl@n 0037  
            ___wmul@multiplicand 0003                   ??_dir_register 0060  
               disk_write@sector 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                    create_name@dp 0009  
                  create_name@ni 0016                     __CFG_CP2$OFF 000000  
                  create_name@si 0013                   create_chain@cs 0069  
                   __CFG_CP3$OFF 000000                   create_chain@fs 0056  
                    __CFG_LVP$ON 000000                              l101 525A  
                            l202 4660                              l221 2102  
                            l400 363E                              l136 3BA2  
                            l321 2FAE                              l161 3D38  
                            l402 3636                              l323 2C68  
                            l147 3C6A                              l180 4B84  
                            l308 3F3C                              l318 2C5E  
                            l158 3D68                              l175 4B66  
                            l415 380E                              l192 45DA  
                            l344 2424                              l522 3B6E  
                            l179 4B70                              l196 45E4  
                            l197 45EC                              l613 1010  
                            l605 0CB2                              l198 4600  
                            l383 3462                              l535 441C  
                            l368 431A                              l457 47C2  
                            l733 19CA                              l814 55F8  
                            l654 322C                              l647 30A2  
                            l656 3214                              l648 309A  
                            l737 1C5A                              l586 09D0  
                            l498 3A18                              l871 50A6  
                            l599 0B18                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _Fil 00DA  
            ??_SPI1_Exchange8bit 0001                     disk_read@cmd 001C  
                 ??_create_chain 005C                              wreg 000FE8  
              disk_initialize@ty 001A                   create_name@sfn 001B  
                create_chain@ncl 0065                       Error@F5051 0100  
                create_chain@scl 0061                  create_chain@res 0060  
                    ld_clust@dir 0003                             l4005 55C4  
                           l4021 50D4                             l4101 542A  
                           l4041 510E                             l4123 526E  
                           l4107 523E                             l4211 4C0A  
                           l5011 4790                             l4037 5102  
                           l5013 4798                             l4055 5136  
                           l4047 5122                             l4071 51DC  
                           l5111 3A0E                             l4049 5126  
                           l4065 51C6                             l4233 418A  
                           l5041 47EA                             l4227 4110  
                           l4403 5372                             l4307 2EB8  
                           l6003 1D30                             l5211 49C4  
                           l5107 39F4                             l5027 51A6  
                           l4085 5230                             l4173 46C2  
                           l4237 4196                             l4245 41F0  
                           l4413 54FA                             l4317 2F82  
                           l5213 49C8                             l5061 4890  
                           l4159 4642                             l4263 4F82  
                           l5303 5058                             l4407 5386  
                           l5071 3924                             l5055 4850  
                           l4265 4F9E                             l4601 22F4  
                           l4417 550A                             l5305 5064  
                           l4345 24E0                             l4441 33BE  
                           l6041 1EEA                             l6017 1DB0  
                           l5145 3AB0                             l5073 3928  
                           l6105 1404                             l4195 4B98  
                           l4611 2348                             l4531 1F64  
                           l5315 5098                             l4427 4D2E  
                           l4363 25FC                             l4347 2514  
                           l6035 1E78                             l5243 4A72  
                           l6131 15A6                             l6211 3F74  
                           l4621 2366                             l4453 3432  
                           l4701 37CE                             l5165 3AEC  
                           l5157 3ADA                             l5085 3996  
                           l5341 4290                             l5325 422A  
                           l6125 151E                             l6117 14BC  
                           l6109 1454                             l4607 2326  
                           l4543 1F80                             l4631 23A4  
                           l4519 55D8                             l4295 2DD4  
                           l4367 2632                             l4391 27E8  
                           l5263 4922                             l5239 4A68  
                           l5175 3B2C                             l5167 3AFC  
                           l5351 430A                             l5327 4232  
                           l6143 16D4                             l6231 4012  
                           l4617 235E                             l4553 205E  
                           l4633 23E6                             l4297 2DF2  
                           l4377 26E4                             l4393 2814  
                           l4457 3472                             l4449 340E  
                           l5257 4904                             l5521 0A1C  
                           l4713 384E                             l5169 3B02  
                           l5425 4480                             l6153 174E  
                           l6137 15FA                             l6145 16F4  
                           l6073 128C                             l6241 405C  
                           l4539 1F72                             l4299 2DFC  
                           l4387 27D6                             l5275 499A  
                           l5515 0A06                             l4803 2ABE  
                           l5371 4B4C                             l6163 17D8  
                           l6155 1772                             l6251 408E  
                           l4629 239E                             l4573 2150  
                           l5293 5032                             l4493 35B6  
                           l4485 3544                             l4469 34D0  
                           l5269 4960                             l4901 3CC2  
                           l5541 0AAE                             l5509 09B4  
                           l5189 3B5C                             l5381 4368  
                           l6173 1898                             l6157 1790  
                           l6181 18D4                             l4591 22AE  
                           l4911 3D08                             l5623 0D9E  
                           l5543 0AB4                             l5527 0A62  
                           l5463 08C8                             l5447 0884  
                           l5439 085E                             l4815 2B14  
                           l4823 2BBA                             l4655 53BA  
                           l6087 1374                             l4569 2148  
                           l5289 502E                             l4905 3CD0  
                           l4841 3BAE                             l5529 0A88  
                           l4737 285E                             l4681 370A  
                           l4657 53BE                             l4649 52B8  
                           l6169 1822                             l6089 13B4  
                           l6257 5580                             l4595 22BC  
                           l4587 2226                             l4579 2196  
                           l4499 361E                             l5627 0DB4  
                           l5547 0AB8                             l5467 08CC  
                           l4819 2B5C                             l4763 297E  
                           l4747 28C2                             l4691 375C  
                           l4675 36BA                             l6187 1930  
                           l6099 13E0                             l4909 3CF6  
                           l4845 3BB8                             l4757 2968  
                           l4693 3782                             l4941 4C30  
                           l5389 43BC                             l5743 4DE8  
                           l3983 544C                             l5719 45C2  
                           l4863 3C06                             l5647 0EEE  
                           l5487 0910                             l5479 0906  
                           l5807 4EDE                             l4791 2A1E  
                           l4951 4C94                             l4849 3BC0  
                           l5569 0B76                             l5841 3048  
                           l4875 3C3A                             l5683 11B4  
                           l5659 0FE2                             l5499 094E  
                           l4779 2A00                             l5907 3272  
                           l5923 3352                             l5819 2FCE  
                           l5773 54D0                             l5941 197E  
                           l4893 3C9A                             l4957 4CC6  
                           l4949 4C86                             l5853 307E  
                           l5935 195C                             l5769 54C0  
                           l4985 3F14                             l5793 4E9E  
                           l5849 3072                             l5971 1C18  
                           l5787 4E70                             l5981 1C76  
                           l5957 1B9A                             l5797 4EB2  
                           l4997 46FC                             l5993 1CE8  
                           l5985 1C84                             l5889 31FA  
                           l5995 1D1C                             l5979 1C3E  
                           STR_1 0814                             STR_2 0814  
                           STR_3 0824                             STR_4 0801  
                           STR_5 0815                             STR_6 0815  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5000 4F26                             u5030 2C2E  
                           u5120 2EFA                             u5040 2C4E  
                           u5105 2DE0                             u5220 261A  
                           u5140 23FE                             u6020 2964  
                           u5125 2EF0                             u6005 28CE  
                           u5150 241E                             u6030 297A  
                           u5055 2CB2                             u7000 502E  
                           u5240 2726                             u5320 33AC  
                           u5225 2610                             u5075 2D50  
                           u5500 1F7C                             u7020 5068  
                           u5340 3420                             u6220 3C72  
                           u6140 3BA8                             u7100 42E4  
                           u5245 271C                             u5165 246E  
                           u6125 2BDC                             u4470 546E  
                           u6310 3D64                             u7110 433A  
                           u4480 547A                             u4800 46A4  
                           u7200 4416                             u7040 4204  
                           u4650 5262                             u4570 51C2  
                           u5450 35F6                             u5370 34BE  
                           u8010 1958                             u6330 4C5E  
                           u7050 4224                             u5195 2560  
                           u4900 4BC0                             u4820 46D2  
                           u5620 2178                             u8100 1C04  
                           u4590 51FC                             u5390 351C  
                           u8110 1C2A                             u6350 4CBC  
                           u7150 4362                             u4735 45F2  
                           u4920 4BEC                             u7400 0AB4  
                           u6440 477C                             u5625 216E  
                           u5545 2036                             u6337 4C4E  
                           u4850 4B62                             u4690 45D6  
                           u5570 20FC                             u8210 1E64  
                           u6290 3D40                             u5810 53EE  
                           u6610 39DE                             u5555 2066  
                           u4940 4C1A                             u4780 467C  
                           u6460 47B6                             u6700 3A5A  
                           u8300 12E6                             u4597 51F2  
                           u5565 208C                             u6357 4CB2  
                           u8230 1ECE                             u5830 36B6  
                           u6630 39F0                             u5575 20F2  
                           u8215 1E5A                             u8160 1D40  
                           u7600 1036                             u7280 08C4  
                           u6720 3A66                             u5665 21DA  
                           u8065 1A42                             u7505 0CE6  
                           u8305 12DC                             u7530 0D9A  
                           u6490 47E4                             u5675 21FC  
                           u5684 221A                             u8180 1DC4  
                           u7540 0DB0                             u7380 0AA2  
                           u6660 3A24                             u5780 52C8  
                           u4885 4B76                             u5685 2214  
                           u7605 102C                             u5790 52FC  
                           u7711 4DB6                             u5695 2264  
                           u5935 3884                             u8415 1536  
                           u7800 4EDA                             u5960 285A  
                           u6680 3A30                             u8520 18DC  
                           u5945 38D0                             u6930 491E  
                           u5890 37DE                             u6940 495C  
                           u6870 49EA                             u7575 0ECE  
                           u8465 169A                             u8570 3F92  
                           u8475 16DE                             u8907 3D2A  
                           u8917 545A                             u8927 524E  
                           u8937 54C6                             u8947 4E0A  
                           u8957 4E24                             u8967 4E3E  
                           u8897 3C5C                             _WPUB 000F85  
                           _Fsid 00D4                             _Stat 00FA  
                           _data 00D9                             _main 556C  
                   find_volume@i 0095                             fsr0h 000FEA  
                           fsr1h 000FE2                             indf0 000FEF  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                  __CFG_BORV$190 000000                    disk_ioctl@cmd 0011  
                  disk_ioctl@csd 0021                    disk_read@buff 0011  
                  disk_ioctl@res 0036                    disk_ioctl@ptr 0038  
                  disk_read@pdrv 0019                             prodh 000FF4  
                           prodl 000FF3                   ??_get_ldnumber 0003  
                           start 0000        __end_of_SPI1_Exchange8bit 5600  
                  __CFG_IESO$OFF 000000                       Error@v_seg 0004  
                  __CFG_MCLRE$ON 000000               disk_initialize@cmd 0019  
                   ?_follow_path 0086               disk_initialize@ocr 0013  
                   ___param_bank 000000               disk_initialize@tmr 001B  
                create_name@path 000B                 create_chain@clst 0058  
                    _sync_window 409C   __size_of_OSCILLATOR_Initialize 0012  
  __end_of_OSCILLATOR_Initialize 55F0                            ?_main 0001  
                __end_of___lldiv 50B8                   __CFG_DEBUG$OFF 000000  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 54B8                            _FatFs 010A  
                __end_of_chk_chr 5400               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F50                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 4EFC                            _Error 4D92  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 3912  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 1942  
                __end_of_get_fat 2FC0                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 5306  
                __end_of_mem_cpy 4CD8                  __end_of_mem_set 551C  
                __end_of_guardar 409C                    find_volume@br 0060  
                  find_volume@fs 0098                    find_volume@pt 007A  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw1 000FE3                            plusw2 000FDB  
                __end_of_put_fat 2818                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                  __end_of_sync_fs 3F40  
                 __CFG_ICPRT$OFF 000000                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                  __initialization 5306  
            disk_initialize@pdrv 0012                     __end_of_main 558E  
                   clust2sect@fs 000D                   __CFG_PCLKEN$ON 000000  
                         ??_main 0060                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000                           ?_Error 0001  
                __CFG_CCP2MX$RC1 000000                           _ACTCON 000FB5  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
           __end_of_dir_register 4B52                 __end_of_check_fs 499E  
                    guardar@data 00D0            SPI1_Exchange8bit@data 0001  
                         Error@a 0001       __size_of_SPI1_Exchange8bit 0010  
           __size_of_create_name 0284         __size_of_disk_initialize 01EA  
               __end_of_deselect 563E                 __end_of_dir_find 48B2  
                 __CFG_XINST$OFF 000000                __end_of_SPI1_Open 560E  
               __end_of_dir_next 2C1E                     ?_move_window 0030  
           __end_of_create_chain 3650                 __end_of_ld_clust 51B8  
                         ___lmul 5362             __size_of_find_volume 09AE  
           __size_of_disk_status 0012                           ___wmul 5546  
                 __CFG_STVREN$ON 000000                        ??___lldiv 0009  
                         _f_open 2FC0                           _f_sync 4484  
                      ??_f_close 0050                   find_volume@fmt 0097  
                         clear_0 5340                           clear_1 5352  
                 find_volume@rfs 0045                        ??_chk_chr 0005  
                 find_volume@vol 0080                           _select 55AE  
                      ??_f_lseek 0073                        ??_f_mount 0057  
                      ??_dir_sdi 0060                        ??_f_write 0075  
                      ??_get_fat 0041                 __end_of_send_cmd 5442  
                      ??_mem_cmp 0007                        ??_mem_cpy 0007  
                      ??_mem_set 0007                        ??_guardar 0060  
                disk_ioctl@csize 0032                 __end_of_validate 5036  
           __end_of_get_ldnumber 4A7C                     __mediumconst 0000  
                disk_read@sector 0013                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               __end_of_st_clust 5546                        ??_put_fat 0045  
                xmit_datablock@i 0007                        ??_sync_fs 003C  
             rcvr_datablock@buff 0002             __CFG_LS48MHZ$SYS24X4 000000  
              _SYSTEM_Initialize 560E                       __accesstop 0060  
        __end_of__initialization 5358                  __CFG_PBADEN$OFF 000000  
                 disk_write@buff 0011                   get_ldnumber@tp 0007  
                 get_ldnumber@tt 000D                   disk_write@pdrv 001A  
             ?_SYSTEM_Initialize 0001                    ___rparam_used 000001  
        __size_of_rcvr_datablock 006C                    __end_of_Error 4E4C  
                 __pcstackCOMRAM 0001                 __CFG_nPWRTEN$OFF 000000  
                   __pidataBANK0 563E                     __pidataBANK1 562A  
            ??_SYSTEM_Initialize 0001                       ___send_cmd 50B8  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
                  ??___delay_sec 0001               __size_of_dir_alloc 00F0  
                        ??_Error 0003               __size_of_disk_read 00CC  
      __end_of_SYSTEM_Initialize 561C                       __pbssBANK0 00D4  
              __CFG_PLLSEL$PLL4X 000000                          ?___lmul 0001  
                        ?___wmul 0001                          ?_f_open 009A  
        __size_of_xmit_datablock 007C                          ?_f_sync 0045  
              ??_disk_initialize 0011                     ?_sync_window 001B  
                 ___lmul@product 0009                          ?_select 0001  
                      ?_check_fs 003B                       _disk_ioctl 1F50  
                 follow_path@dir 008A                          _OSCCON2 000FD2  
                 follow_path@res 008D                       _disk_write 45C6  
                        _OSCTUNE 000F9B                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                        _SSP1ADD 000FC8                      send_cmd@res 0010  
                 remove_chain@fs 0056                          _SSP1BUF 000FC9  
                      ?_dir_find 0080              __end_of___delay_sec 54F0  
                      ?_dir_next 006D            __size_of_dir_register 00D6  
                      ?_ld_clust 0001                       _clust2sect 4CD8  
               sync_window@wsect 002C                    ?_remove_chain 0056  
          __size_of_create_chain 02FA                __end_of_dir_alloc 47C6  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 4C1E  
                        ff@FatFs 00D6                       f_close@res 0050  
                __size_of___lmul 0056                        ?_st_clust 0001  
                    ?___send_cmd 0004                          ___lldiv 5036  
                __size_of___wmul 0026             __size_of_move_window 00A6  
                     check_fs@fs 003B                  __size_of_f_open 0396  
                   __psmallconst 0800                  __size_of_f_sync 0142  
                        _f_close 547E            __size_of_get_ldnumber 00DE  
                        __pcinit 5306                          _chk_chr 53B8  
            _disk_initialize$285 0017                          _f_lseek 1942  
                        __ramtop 0800                          _f_mount 4E4C  
                __size_of_select 001E                          __ptext0 556C  
                        __ptext1 3F40                          __ptext2 11DE  
                        __ptext3 2FC0                          __ptext4 41F4  
                        __ptext5 433E                          __ptext6 513A  
                        __ptext7 47C6                          __ptext8 52A0  
                        __ptext9 3912                          _dir_sdi 3650  
                    validate@fil 0008                          _f_write 11DE  
                    validate@obj 0002                          _get_fat 2C1E  
                     chk_chr@chr 0003                     _dir_register 4A7C  
                     chk_chr@str 0001                          _mem_cmp 52A0  
                        _mem_cpy 4C1E            _OSCILLATOR_Initialize 55DE  
                        _mem_set 54F0                          _guardar 3F40  
                     ??_check_fs 0041                  find_volume@path 0047  
                find_volume@nrsv 0082                  find_volume@stat 008C  
       ??_PIN_MANAGER_Initialize 0001                     _create_chain 3356  
                     ??_deselect 0002                       ??_dir_find 0060  
                        _put_fat 23EE                       ??_dir_next 0071  
     __size_of_SYSTEM_Initialize 000E                       f_lseek@bcs 008C  
                     ??_ld_clust 0005                          _sync_fs 3D80  
                     f_lseek@ofs 006F                       f_lseek@res 0087  
           end_of_initialization 5358                       f_open@mode 009E  
                     f_open@path 009C                   ??_remove_chain 005C  
                  __Lmediumconst 0000                  disk_status@pdrv 0001  
                 _rcvr_datablock 5234                  ___lldiv@divisor 0005  
                     f_mount@cfs 0058                       f_mount@res 0057  
                     ??_send_cmd 000F                       f_mount@opt 0056  
                     f_mount@vol 005C                  ___lldiv@counter 000D  
                   _get_ldnumber 499E                       ??_validate 0004  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                       ??_st_clust 0007  
                 move_window@res 003A                        _SPI1_Open 5600  
                     _wait_ready 5442                       dir_alloc@n 0087  
               remove_chain@clst 0058                       dir_find@dp 0080  
                _create_name$775 0011                       dir_sdi@idx 0058  
                    ___delay_sec 54B8                       dir_next@dp 006D  
                    ?_disk_ioctl 0011              rcvr_datablock@token 0008  
                     f_write@btw 0071                       f_write@res 0081  
                    ?_disk_write 0011                       get_fat@val 004C  
                get_ldnumber@vol 0009                  disk_write@count 0017  
                    ?_clust2sect 000D              __size_of___send_cmd 0082  
         __end_of_rcvr_datablock 52A0                    ??_create_name 000D  
               disk_initialize@n 001D                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 561C  
                  ??_find_volume 004A                    ??_disk_status 0001  
                 _xmit_datablock 51B8                       ?_SPI1_Open 0001  
                 __end_of___lmul 53B8                      st_clust@dir 0001  
                 __end_of___wmul 556C                   __end_of_f_open 3356  
                 __end_of_f_sync 45C6                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                   __end_of_select 55CC  
           __size_of_sync_window 0158              start_initialization 5306  
__size_of_PIN_MANAGER_Initialize 0020                       mem_cmp@cnt 0005  
                     mem_cmp@dst 0001                       mem_cmp@src 0003  
                     mem_cpy@cnt 0005                      put_fat@clst 003D  
                     mem_cpy@dst 0001                       mem_cpy@src 0003  
                ?_rcvr_datablock 0002                  __CFG_nLPBOR$OFF 000000  
                _disk_initialize 3B96                       mem_set@cnt 0005  
                     mem_set@dst 0001                       mem_set@val 0003  
         __end_of_xmit_datablock 5234                    ??_follow_path 0060  
            __size_of_disk_ioctl 049E              __end_of_create_name 3B96  
            __size_of_disk_write 0110                         ??___lmul 0009  
                       ??___wmul 0005                         ??_f_open 009F  
                       ??_f_sync 0047                      ?_wait_ready 0001  
                    __pdataBANK0 00FA                      __pdataBANK1 0100  
            __end_of_find_volume 11DE              __end_of_disk_status 55DE  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 433E                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 010A  
                  __pcstackBANK0 0060                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 562A                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
                _find_volume$880 0074           _PIN_MANAGER_Initialize 558E  
                _find_volume$879 0070                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 46D6                         ?___lldiv 0001  
              __size_of_validate 0094                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 4B52  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 4484  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                       ?_guardar 00D0                   __size_of_Error 00BA  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 3D80                         ?_sync_fs 003A  
                    _get_fat$525 004A                find_volume@fasize 008D  
            __size_of_wait_ready 003C               __end_of___send_cmd 513A  
                    _create_name 3912                   ___wmul@product 0005  
                       _LATBbits 000F8A                        f_lseek@fp 006D  
              find_volume@szbfat 0076                        f_open@dir 00B8  
                      f_open@res 00B7                        f_open@sfn 00A3  
              find_volume@sysect 007C                      _find_volume 0830  
                    _disk_status 55CC                    ??_move_window 0036  
                      f_mount@fs 0052                        f_mount@rp 005A  
                follow_path@path 0088                    move_window@fs 0030  
               __CFG_WDTPS$32768 000000                         _SSP1CON1 000FC6  
                      dir_find@c 0082                       ?_dir_alloc 0080  
                remove_chain@res 0060                  remove_chain@nxt 0061  
                       _SSP1STAT 000FC7                        f_sync@dir 004C  
                      f_sync@res 004B                        dir_sdi@ic 0067  
                      dir_sdi@dp 0056                        dir_next@c 0078  
                      dir_next@i 007A                       ?_disk_read 0011  
                      f_write@cc 0085                        f_write@bw 0073  
                      f_write@fp 006D                        get_fat@bc 0054  
                      get_fat@fs 003B                        get_fat@wc 0050  
              ___wmul@multiplier 0001                     ?___delay_sec 0001  
                       _CardType 00D8                     ??_disk_ioctl 0014  
              __CFG_CFGPLLEN$OFF 000000                     ??_disk_write 0019  
                   f_lseek@ifptr 0083                     f_lseek@nsect 0088  
                     st_clust@cl 0003                 ?_SPI1_Initialize 0001  
                   ??_clust2sect 0013                ___lmul@multiplier 0001  
                    _INTCON2bits 000FF1                        copy_data0 531A  
                     put_fat@res 0053                       put_fat@val 0041  
              move_window@sector 0032                  dir_next@stretch 006F  
                       __Hrparam 0000                        guardar@bw 00D2  
                       __Lrparam 0000                      _follow_path 433E  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23EE  
          __size_of_remove_chain 014A               __end_of_disk_write 46D6  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 0082  
            __end_of_move_window 4FA2               __end_of_clust2sect 4D92  
               __size_of_f_close 003A                 __size_of_chk_chr 0048  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 0764  
               __size_of_get_fat 03A2                         _check_fs 48B2  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 00BA  
               __size_of_mem_set 002C                 __size_of_guardar 015C  
            xmit_datablock@token 0006                  ___delay_sec@sec 0004  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 5634                         __ptext10 53B8  
                       __ptext11 4A7C                         __ptext20 5600  
                       __ptext12 4C1E                         __ptext21 48B2  
                       __ptext13 46D6                         __ptext30 4484  
                       __ptext22 1942                         __ptext14 3650  
                       __ptext31 4FA2                         __ptext23 3356  
                       __ptext15 2818                         __ptext40 45C6  
                       __ptext32 55CC                         __ptext24 23EE  
                       __ptext16 4E4C                         __ptext41 51B8  
                       __ptext33 3D80                         __ptext25 2C1E  
                       __ptext17 0830                         __ptext50 54B8  
                       __ptext42 4B52                         __ptext34 54F0  
                       __ptext26 4CD8                         __ptext18 499E  
                       __ptext51 560E                         __ptext43 5400  
                       __ptext35 1F50                         __ptext27 5362  
                       __ptext19 3B96                         __ptext52 561C  
                       __ptext44 50B8                         __ptext36 5546  
                       __ptext28 5036                         __ptext53 558E  
                       __ptext45 55AE                         __ptext37 551C  
                       __ptext29 547E                         __ptext54 55DE  
                       __ptext46 5442                         __ptext38 4EFC  
                       __ptext55 4D92                         __ptext47 5634  
                       __ptext39 409C                         __ptext48 5234  
                       __ptext49 55F0                         _dir_find 47C6  
                   _SSP1CON1bits 000FC6                         _dir_next 2818  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 513A                 __size_of_put_fat 042A  
                 sync_window@res 0029                 __size_of_sync_fs 01C0  
                  __size_of_main 0022                       sync_fs@res 0044  
                   _remove_chain 41F4                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 5400  
                       _validate 4FA2                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 551C  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$294 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0009  
                      put_fat@fs 003B                         mem_cpy@s 000B  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                 dir_register@dp 008A                 ??_xmit_datablock 0007  
             __end_of_wait_ready 547E                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 4EFC             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054                    ?_dir_register 008A  
                  ___delay_sec@i 0005                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 41F4                      dir_find@res 0085  
           __size_of___delay_sec 0038                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 55AE  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                   ?_disk_status 0001                      _put_fat$551 004D  
                    _put_fat$552 004F  
