

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 29 20:57:28 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77  0000                     
    78                           ; Version 2.05
    79                           ; Generated 20/12/2018 GMT
    80                           ; 
    81                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    82                           ; All rights reserved.
    83                           ; 
    84                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    85                           ; 
    86                           ; Redistribution and use in source and binary forms, with or without modification, are
    87                           ; permitted provided that the following conditions are met:
    88                           ; 
    89                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    90                           ;        conditions and the following disclaimer.
    91                           ; 
    92                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    93                           ;        of conditions and the following disclaimer in the documentation and/or other
    94                           ;        materials provided with the distribution.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F45K50 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112  0000                     
   113                           	psect	idataBANK0
   114  005D38                     __pidataBANK0:
   115                           	opt callstack 0
   116                           
   117                           ;initializer for Error@F5051
   118  005D38  7E                 	db	126
   119  005D39  30                 	db	48
   120  005D3A  6D                 	db	109
   121  005D3B  79                 	db	121
   122  005D3C  33                 	db	51
   123  005D3D  5B                 	db	91
   124  005D3E  5F                 	db	95
   125  005D3F  70                 	db	112
   126  005D40  7F                 	db	127
   127  005D41  73                 	db	115
   128                           
   129                           ;initializer for _i
   130  005D42  EC78               	dw	60536
   131                           
   132                           ;initializer for _data
   133  005D44  64                 	db	100
   134  005D45  61                 	db	97
   135                           
   136                           ;initializer for _Stat
   137  005D46  01                 	db	1
   138  0000                     _ANSELA	set	3931
   139  0000                     _ANSELE	set	3935
   140  0000                     _ANSELD	set	3934
   141  0000                     _ANSELB	set	3932
   142  0000                     _ANSELC	set	3933
   143  0000                     _PORTA	set	3968
   144  0000                     _ADCON0bits	set	4034
   145  0000                     _ADRESL	set	4035
   146  0000                     _ADRESH	set	4036
   147  0000                     _ADCON0	set	4034
   148  0000                     _TRISA	set	3986
   149  0000                     _LATA	set	3977
   150  0000                     _ADCON1	set	4033
   151  0000                     _ADCON2	set	4032
   152  0000                     _TRISE	set	3990
   153  0000                     _LATE	set	3981
   154  0000                     _TRISD	set	3989
   155  0000                     _LATD	set	3980
   156  0000                     _SSP1STATbits	set	4039
   157  0000                     _SSP1BUF	set	4041
   158  0000                     _SSP1CON1bits	set	4038
   159  0000                     _SSP1ADD	set	4040
   160  0000                     _SSP1CON1	set	4038
   161  0000                     _SSP1STAT	set	4039
   162  0000                     _INTCON2bits	set	4081
   163  0000                     _WPUB	set	3973
   164  0000                     _TRISC	set	3988
   165  0000                     _TRISB	set	3987
   166  0000                     _LATC	set	3979
   167  0000                     _LATB	set	3978
   168  0000                     _ACTCON	set	4021
   169  0000                     _OSCTUNE	set	3995
   170  0000                     _OSCCON2	set	4050
   171  0000                     _OSCCON	set	4051
   172  0000                     _LATBbits	set	3978
   173  0000                     _ADIF	set	31990
   174  0000                     _ADIE	set	31982
   175  0000                     _PEIE	set	32662
   176  0000                     _GIE	set	32663
   177                           
   178                           	psect	smallconst
   179  000800                     __psmallconst:
   180                           	opt callstack 0
   181  000800  00                 	db	0
   182  000801                     STR_1:
   183                           
   184                           ; BSR set to: 15
   185  000801  22                 	db	34
   186  000802  2A                 	db	42
   187  000803  2B                 	db	43
   188  000804  2C                 	db	44
   189  000805  3A                 	db	58	;':'
   190  000806  3B                 	db	59	;';'
   191  000807  3C                 	db	60	;'<'
   192  000808  3D                 	db	61	;'='
   193  000809  3E                 	db	62	;'>'
   194  00080A  3F                 	db	63	;'?'
   195  00080B  5B                 	db	91	;'['
   196  00080C  5D                 	db	93	;']'
   197  00080D  7C                 	db	124
   198  00080E  7F                 	db	127
   199  00080F  00                 	db	0
   200  000810                     STR_5:
   201                           
   202                           ; BSR set to: 15
   203  000810  42                 	db	66	;'B'
   204  000811  65                 	db	101	;'e'
   205  000812  65                 	db	101	;'e'
   206  000813  44                 	db	68	;'D'
   207  000814  65                 	db	101	;'e'
   208  000815  76                 	db	118	;'v'
   209  000816  2E                 	db	46
   210  000817  74                 	db	116	;'t'
   211  000818  78                 	db	120	;'x'
   212  000819  74                 	db	116	;'t'
   213  00081A  00                 	db	0
   214  0000                     
   215                           ; #config settings
   216  00081B  00                 	db	0	; dummy byte at the end
   217  0000                     
   218                           	psect	cinit
   219  005A22                     __pcinit:
   220                           	opt callstack 0
   221  005A22                     start_initialization:
   222                           	opt callstack 0
   223  005A22                     __initialization:
   224                           	opt callstack 0
   225                           
   226                           ; Initialize objects allocated to BANK0 (15 bytes)
   227                           ; load TBLPTR registers with __pidataBANK0
   228  005A22  0E38               	movlw	low __pidataBANK0
   229  005A24  6EF6               	movwf	tblptrl,c
   230  005A26  0E5D               	movlw	high __pidataBANK0
   231  005A28  6EF7               	movwf	tblptrh,c
   232  005A2A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   233  005A2C  6EF8               	movwf	tblptru,c
   234  005A2E  EE00  F0E3         	lfsr	0,__pdataBANK0
   235  005A32  EE10 F00F          	lfsr	1,15
   236  005A36                     copy_data0:
   237  005A36  0009               	tblrd		*+
   238  005A38  CFF5 FFEE          	movff	tablat,postinc0
   239  005A3C  50E5               	movf	postdec1,w,c
   240  005A3E  50E1               	movf	fsr1l,w,c
   241  005A40  E1FA               	bnz	copy_data0
   242                           
   243                           ; Clear objects allocated to BIGRAM (558 bytes)
   244  005A42  EE01  F020         	lfsr	0,__pbssBIGRAM
   245  005A46  EE12 F02E          	lfsr	1,558
   246  005A4A                     clear_0:
   247  005A4A  6AEE               	clrf	postinc0,c
   248  005A4C  50E5               	movf	postdec1,w,c
   249  005A4E  50E1               	movf	fsr1l,w,c
   250  005A50  E1FC               	bnz	clear_0
   251  005A52  50E2               	movf	fsr1h,w,c
   252  005A54  E1FA               	bnz	clear_0
   253                           
   254                           ; Clear objects allocated to BANK1 (32 bytes)
   255  005A56  EE01  F000         	lfsr	0,__pbssBANK1
   256  005A5A  0E20               	movlw	32
   257  005A5C                     clear_1:
   258  005A5C  6AEE               	clrf	postinc0,c
   259  005A5E  06E8               	decf	wreg,f,c
   260  005A60  E1FD               	bnz	clear_1
   261                           
   262                           ; Clear objects allocated to BANK0 (19 bytes)
   263  005A62  EE00  F0D0         	lfsr	0,__pbssBANK0
   264  005A66  0E13               	movlw	19
   265  005A68                     clear_2:
   266  005A68  6AEE               	clrf	postinc0,c
   267  005A6A  06E8               	decf	wreg,f,c
   268  005A6C  E1FD               	bnz	clear_2
   269  005A6E                     end_of_initialization:
   270                           	opt callstack 0
   271  005A6E                     __end_of__initialization:
   272                           	opt callstack 0
   273  005A6E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   274  005A70  6EF8               	movwf	tblptru,c
   275  005A72  0100               	movlb	0
   276  005A74  EF8B  F02D         	goto	_main	;jump to C main() function
   277                           
   278                           	psect	bssBANK0
   279  0000D0                     __pbssBANK0:
   280                           	opt callstack 0
   281  0000D0                     _volt:
   282                           	opt callstack 0
   283  0000D0                     	ds	4
   284  0000D4                     _out:
   285                           	opt callstack 0
   286  0000D4                     	ds	2
   287  0000D6                     _a:
   288                           	opt callstack 0
   289  0000D6                     	ds	2
   290  0000D8                     _adcin:
   291                           	opt callstack 0
   292  0000D8                     	ds	2
   293  0000DA                     _Fsid:
   294                           	opt callstack 0
   295  0000DA                     	ds	2
   296  0000DC                     ff@FatFs:
   297                           	opt callstack 0
   298  0000DC                     	ds	2
   299  0000DE                     _CardType:
   300                           	opt callstack 0
   301  0000DE                     	ds	1
   302  0000DF                     _ND:
   303                           	opt callstack 0
   304  0000DF                     	ds	2
   305  0000E1                     _bw:
   306                           	opt callstack 0
   307  0000E1                     	ds	2
   308                           
   309                           	psect	dataBANK0
   310  0000E3                     __pdataBANK0:
   311                           	opt callstack 0
   312  0000E3                     Error@F5051:
   313                           	opt callstack 0
   314  0000E3                     	ds	10
   315  0000ED                     _i:
   316                           	opt callstack 0
   317  0000ED                     	ds	2
   318  0000EF                     _data:
   319                           	opt callstack 0
   320  0000EF                     	ds	2
   321  0000F1                     _Stat:
   322                           	opt callstack 0
   323  0000F1                     	ds	1
   324                           
   325                           	psect	bssBANK1
   326  000100                     __pbssBANK1:
   327                           	opt callstack 0
   328  000100                     _Fil:
   329                           	opt callstack 0
   330  000100                     	ds	32
   331                           
   332                           	psect	bssBIGRAM
   333  000120                     __pbssBIGRAM:
   334                           	opt callstack 0
   335  000120                     _FatFs:
   336                           	opt callstack 0
   337  000120                     	ds	558
   338                           
   339                           	psect	cstackBANK0
   340  000060                     __pcstackBANK0:
   341                           	opt callstack 0
   342  000060                     ??_dir_sdi:
   343  000060                     remove_chain@res:
   344                           	opt callstack 0
   345  000060                     create_chain@res:
   346                           	opt callstack 0
   347  000060                     find_volume@br:
   348                           	opt callstack 0
   349                           
   350                           ; 16 bytes @ 0x0
   351  000060                     	ds	1
   352  000061                     remove_chain@nxt:
   353                           	opt callstack 0
   354  000061                     create_chain@scl:
   355                           	opt callstack 0
   356                           
   357                           ; 4 bytes @ 0x1
   358  000061                     	ds	4
   359  000065                     create_chain@ncl:
   360                           	opt callstack 0
   361                           
   362                           ; 4 bytes @ 0x5
   363  000065                     	ds	2
   364  000067                     dir_sdi@ic:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x7
   368  000067                     	ds	2
   369  000069                     create_chain@cs:
   370                           	opt callstack 0
   371  000069                     dir_sdi@sect:
   372                           	opt callstack 0
   373                           
   374                           ; 4 bytes @ 0x9
   375  000069                     	ds	4
   376  00006D                     dir_next@dp:
   377                           	opt callstack 0
   378  00006D                     f_write@fp:
   379                           	opt callstack 0
   380  00006D                     f_lseek@fp:
   381                           	opt callstack 0
   382  00006D                     dir_sdi@clst:
   383                           	opt callstack 0
   384                           
   385                           ; 4 bytes @ 0xD
   386  00006D                     	ds	2
   387  00006F                     dir_next@stretch:
   388                           	opt callstack 0
   389  00006F                     f_write@buff:
   390                           	opt callstack 0
   391  00006F                     f_lseek@ofs:
   392                           	opt callstack 0
   393                           
   394                           ; 4 bytes @ 0xF
   395  00006F                     	ds	1
   396  000070                     _find_volume$728:
   397                           	opt callstack 0
   398                           
   399                           ; 4 bytes @ 0x10
   400  000070                     	ds	1
   401  000071                     ??_dir_next:
   402  000071                     f_write@btw:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x11
   406  000071                     	ds	2
   407  000073                     ??_f_lseek:
   408  000073                     f_write@bw:
   409                           	opt callstack 0
   410                           
   411                           ; 2 bytes @ 0x13
   412  000073                     	ds	1
   413  000074                     _find_volume$729:
   414                           	opt callstack 0
   415                           
   416                           ; 2 bytes @ 0x14
   417  000074                     	ds	1
   418  000075                     ??_f_write:
   419                           
   420                           ; 1 bytes @ 0x15
   421  000075                     	ds	1
   422  000076                     find_volume@szbfat:
   423                           	opt callstack 0
   424                           
   425                           ; 4 bytes @ 0x16
   426  000076                     	ds	2
   427  000078                     dir_next@c:
   428                           	opt callstack 0
   429                           
   430                           ; 2 bytes @ 0x18
   431  000078                     	ds	2
   432  00007A                     dir_next@i:
   433                           	opt callstack 0
   434  00007A                     find_volume@pt:
   435                           	opt callstack 0
   436                           
   437                           ; 2 bytes @ 0x1A
   438  00007A                     	ds	2
   439  00007C                     dir_next@clst:
   440                           	opt callstack 0
   441  00007C                     find_volume@sysect:
   442                           	opt callstack 0
   443                           
   444                           ; 4 bytes @ 0x1C
   445  00007C                     	ds	4
   446  000080                     dir_alloc@dp:
   447                           	opt callstack 0
   448  000080                     dir_find@dp:
   449                           	opt callstack 0
   450  000080                     find_volume@vol:
   451                           	opt callstack 0
   452                           
   453                           ; 2 bytes @ 0x20
   454  000080                     	ds	1
   455  000081                     f_write@res:
   456                           	opt callstack 0
   457                           
   458                           ; 1 bytes @ 0x21
   459  000081                     	ds	1
   460  000082                     dir_find@c:
   461                           	opt callstack 0
   462  000082                     dir_alloc@nent:
   463                           	opt callstack 0
   464  000082                     find_volume@nrsv:
   465                           	opt callstack 0
   466  000082                     f_write@wbuff:
   467                           	opt callstack 0
   468                           
   469                           ; 2 bytes @ 0x22
   470  000082                     	ds	1
   471  000083                     dir_find@dir:
   472                           	opt callstack 0
   473  000083                     f_lseek@ifptr:
   474                           	opt callstack 0
   475                           
   476                           ; 4 bytes @ 0x23
   477  000083                     	ds	1
   478  000084                     ??_dir_alloc:
   479  000084                     f_write@csect:
   480                           	opt callstack 0
   481  000084                     find_volume@tsect:
   482                           	opt callstack 0
   483                           
   484                           ; 4 bytes @ 0x24
   485  000084                     	ds	1
   486  000085                     dir_find@res:
   487                           	opt callstack 0
   488  000085                     f_write@cc:
   489                           	opt callstack 0
   490                           
   491                           ; 2 bytes @ 0x25
   492  000085                     	ds	1
   493  000086                     follow_path@dp:
   494                           	opt callstack 0
   495                           
   496                           ; 2 bytes @ 0x26
   497  000086                     	ds	1
   498  000087                     f_lseek@res:
   499                           	opt callstack 0
   500  000087                     dir_alloc@n:
   501                           	opt callstack 0
   502  000087                     f_write@sect:
   503                           	opt callstack 0
   504                           
   505                           ; 4 bytes @ 0x27
   506  000087                     	ds	1
   507  000088                     follow_path@path:
   508                           	opt callstack 0
   509  000088                     find_volume@nclst:
   510                           	opt callstack 0
   511  000088                     f_lseek@nsect:
   512                           	opt callstack 0
   513                           
   514                           ; 4 bytes @ 0x28
   515  000088                     	ds	1
   516  000089                     dir_alloc@res:
   517                           	opt callstack 0
   518                           
   519                           ; 1 bytes @ 0x29
   520  000089                     	ds	1
   521  00008A                     dir_register@dp:
   522                           	opt callstack 0
   523  00008A                     follow_path@dir:
   524                           	opt callstack 0
   525                           
   526                           ; 2 bytes @ 0x2A
   527  00008A                     	ds	1
   528  00008B                     f_write@clst:
   529                           	opt callstack 0
   530                           
   531                           ; 4 bytes @ 0x2B
   532  00008B                     	ds	1
   533  00008C                     dir_register@res:
   534                           	opt callstack 0
   535  00008C                     follow_path@ns:
   536                           	opt callstack 0
   537  00008C                     find_volume@stat:
   538                           	opt callstack 0
   539  00008C                     f_lseek@bcs:
   540                           	opt callstack 0
   541                           
   542                           ; 4 bytes @ 0x2C
   543  00008C                     	ds	1
   544  00008D                     follow_path@res:
   545                           	opt callstack 0
   546  00008D                     find_volume@fasize:
   547                           	opt callstack 0
   548                           
   549                           ; 4 bytes @ 0x2D
   550  00008D                     	ds	2
   551  00008F                     f_write@wcnt:
   552                           	opt callstack 0
   553                           
   554                           ; 2 bytes @ 0x2F
   555  00008F                     	ds	1
   556  000090                     f_lseek@clst:
   557                           	opt callstack 0
   558                           
   559                           ; 4 bytes @ 0x30
   560  000090                     	ds	1
   561  000091                     ??_grabador:
   562  000091                     find_volume@bsect:
   563                           	opt callstack 0
   564                           
   565                           ; 4 bytes @ 0x31
   566  000091                     	ds	4
   567  000095                     find_volume@i:
   568                           	opt callstack 0
   569                           
   570                           ; 2 bytes @ 0x35
   571  000095                     	ds	2
   572  000097                     find_volume@fmt:
   573                           	opt callstack 0
   574                           
   575                           ; 1 bytes @ 0x37
   576  000097                     	ds	1
   577  000098                     find_volume@fs:
   578                           	opt callstack 0
   579                           
   580                           ; 2 bytes @ 0x38
   581  000098                     	ds	2
   582  00009A                     f_open@fp:
   583                           	opt callstack 0
   584                           
   585                           ; 2 bytes @ 0x3A
   586  00009A                     	ds	2
   587  00009C                     f_open@path:
   588                           	opt callstack 0
   589                           
   590                           ; 2 bytes @ 0x3C
   591  00009C                     	ds	2
   592  00009E                     f_open@mode:
   593                           	opt callstack 0
   594                           
   595                           ; 1 bytes @ 0x3E
   596  00009E                     	ds	1
   597  00009F                     ??_f_open:
   598                           
   599                           ; 1 bytes @ 0x3F
   600  00009F                     	ds	4
   601  0000A3                     f_open@sfn:
   602                           	opt callstack 0
   603                           
   604                           ; 12 bytes @ 0x43
   605  0000A3                     	ds	12
   606  0000AF                     f_open@cl:
   607                           	opt callstack 0
   608                           
   609                           ; 4 bytes @ 0x4F
   610  0000AF                     	ds	4
   611  0000B3                     f_open@dw:
   612                           	opt callstack 0
   613                           
   614                           ; 4 bytes @ 0x53
   615  0000B3                     	ds	4
   616  0000B7                     f_open@res:
   617                           	opt callstack 0
   618                           
   619                           ; 1 bytes @ 0x57
   620  0000B7                     	ds	1
   621  0000B8                     f_open@dir:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0x58
   625  0000B8                     	ds	2
   626  0000BA                     f_open@dj:
   627                           	opt callstack 0
   628                           
   629                           ; 22 bytes @ 0x5A
   630  0000BA                     	ds	22
   631                           
   632                           	psect	cstackCOMRAM
   633  000001                     __pcstackCOMRAM:
   634                           	opt callstack 0
   635  000001                     ?_mem_cmp:
   636                           	opt callstack 0
   637  000001                     ?_chk_chr:
   638                           	opt callstack 0
   639  000001                     ?_get_ldnumber:
   640                           	opt callstack 0
   641  000001                     ?_interruptadc:
   642                           	opt callstack 0
   643  000001                     ?___wmul:
   644                           	opt callstack 0
   645  000001                     ?_ld_clust:
   646                           	opt callstack 0
   647  000001                     ?___lmul:
   648                           	opt callstack 0
   649  000001                     ?___lldiv:
   650                           	opt callstack 0
   651  000001                     ?___xxtofl:
   652                           	opt callstack 0
   653  000001                     disk_status@pdrv:
   654                           	opt callstack 0
   655  000001                     SPI1_Exchange8bit@data:
   656                           	opt callstack 0
   657  000001                     mem_cpy@dst:
   658                           	opt callstack 0
   659  000001                     mem_set@dst:
   660                           	opt callstack 0
   661  000001                     mem_cmp@dst:
   662                           	opt callstack 0
   663  000001                     chk_chr@str:
   664                           	opt callstack 0
   665  000001                     ld_clust@fs:
   666                           	opt callstack 0
   667  000001                     st_clust@dir:
   668                           	opt callstack 0
   669  000001                     get_ldnumber@path:
   670                           	opt callstack 0
   671  000001                     Error@a:
   672                           	opt callstack 0
   673  000001                     interruptadc@adcin:
   674                           	opt callstack 0
   675  000001                     ___wmul@multiplier:
   676                           	opt callstack 0
   677  000001                     ___lmul@multiplier:
   678                           	opt callstack 0
   679  000001                     ___lldiv@dividend:
   680                           	opt callstack 0
   681  000001                     ___xxtofl@val:
   682                           	opt callstack 0
   683                           
   684                           ; 4 bytes @ 0x0
   685  000001                     	ds	1
   686  000002                     wait_ready@tmr:
   687                           	opt callstack 0
   688  000002                     rcvr_datablock@buff:
   689                           	opt callstack 0
   690  000002                     validate@obj:
   691                           	opt callstack 0
   692                           
   693                           ; 2 bytes @ 0x1
   694  000002                     	ds	1
   695  000003                     ??_get_ldnumber:
   696  000003                     ??_Error:
   697  000003                     mem_cpy@src:
   698                           	opt callstack 0
   699  000003                     mem_set@val:
   700                           	opt callstack 0
   701  000003                     mem_cmp@src:
   702                           	opt callstack 0
   703  000003                     chk_chr@chr:
   704                           	opt callstack 0
   705  000003                     ld_clust@dir:
   706                           	opt callstack 0
   707  000003                     interruptadc@a:
   708                           	opt callstack 0
   709  000003                     ___wmul@multiplicand:
   710                           	opt callstack 0
   711  000003                     st_clust@cl:
   712                           	opt callstack 0
   713                           
   714                           ; 4 bytes @ 0x2
   715  000003                     	ds	1
   716  000004                     ??_validate:
   717  000004                     rcvr_datablock@btr:
   718                           	opt callstack 0
   719  000004                     xmit_datablock@buff:
   720                           	opt callstack 0
   721  000004                     ___send_cmd@arg:
   722                           	opt callstack 0
   723  000004                     Error@v_seg:
   724                           	opt callstack 0
   725                           
   726                           ; 10 bytes @ 0x3
   727  000004                     	ds	1
   728  000005                     ??_chk_chr:
   729  000005                     ??_ld_clust:
   730  000005                     ??_interruptadc:
   731  000005                     ??___xxtofl:
   732  000005                     mem_cpy@cnt:
   733                           	opt callstack 0
   734  000005                     mem_set@cnt:
   735                           	opt callstack 0
   736  000005                     mem_cmp@cnt:
   737                           	opt callstack 0
   738  000005                     ___wmul@product:
   739                           	opt callstack 0
   740  000005                     ___lmul@multiplicand:
   741                           	opt callstack 0
   742  000005                     ___lldiv@divisor:
   743                           	opt callstack 0
   744                           
   745                           ; 4 bytes @ 0x4
   746  000005                     	ds	1
   747  000006                     xmit_datablock@token:
   748                           	opt callstack 0
   749  000006                     rcvr_datablock@tmr:
   750                           	opt callstack 0
   751                           
   752                           ; 2 bytes @ 0x5
   753  000006                     	ds	1
   754  000007                     ??_mem_cmp:
   755  000007                     xmit_datablock@i:
   756                           	opt callstack 0
   757  000007                     mem_cpy@d:
   758                           	opt callstack 0
   759  000007                     mem_set@d:
   760                           	opt callstack 0
   761  000007                     get_ldnumber@tp:
   762                           	opt callstack 0
   763                           
   764                           ; 2 bytes @ 0x6
   765  000007                     	ds	1
   766  000008                     rcvr_datablock@token:
   767                           	opt callstack 0
   768  000008                     ___send_cmd@res:
   769                           	opt callstack 0
   770  000008                     validate@fil:
   771                           	opt callstack 0
   772                           
   773                           ; 2 bytes @ 0x7
   774  000008                     	ds	1
   775  000009                     xmit_datablock@resp:
   776                           	opt callstack 0
   777  000009                     ___send_cmd@n:
   778                           	opt callstack 0
   779  000009                     ___xxtofl@sign:
   780                           	opt callstack 0
   781  000009                     mem_cpy@s:
   782                           	opt callstack 0
   783  000009                     mem_cmp@d:
   784                           	opt callstack 0
   785  000009                     create_name@dp:
   786                           	opt callstack 0
   787  000009                     get_ldnumber@vol:
   788                           	opt callstack 0
   789  000009                     ___lmul@product:
   790                           	opt callstack 0
   791  000009                     ___lldiv@quotient:
   792                           	opt callstack 0
   793                           
   794                           ; 4 bytes @ 0x8
   795  000009                     	ds	1
   796  00000A                     ___send_cmd@cmd:
   797                           	opt callstack 0
   798  00000A                     ___xxtofl@exp:
   799                           	opt callstack 0
   800                           
   801                           ; 1 bytes @ 0x9
   802  00000A                     	ds	1
   803  00000B                     mem_cmp@s:
   804                           	opt callstack 0
   805  00000B                     create_name@path:
   806                           	opt callstack 0
   807  00000B                     get_ldnumber@i:
   808                           	opt callstack 0
   809  00000B                     send_cmd@arg:
   810                           	opt callstack 0
   811  00000B                     ld_clust@cl:
   812                           	opt callstack 0
   813  00000B                     ___xxtofl@arg:
   814                           	opt callstack 0
   815                           
   816                           ; 4 bytes @ 0xA
   817  00000B                     	ds	2
   818  00000D                     ??_create_name:
   819  00000D                     ?_clust2sect:
   820                           	opt callstack 0
   821  00000D                     ___lldiv@counter:
   822                           	opt callstack 0
   823  00000D                     mem_cmp@r:
   824                           	opt callstack 0
   825  00000D                     clust2sect@fs:
   826                           	opt callstack 0
   827  00000D                     get_ldnumber@tt:
   828                           	opt callstack 0
   829                           
   830                           ; 2 bytes @ 0xC
   831  00000D                     	ds	2
   832  00000F                     ?___flmul:
   833                           	opt callstack 0
   834  00000F                     send_cmd@cmd:
   835                           	opt callstack 0
   836  00000F                     clust2sect@clst:
   837                           	opt callstack 0
   838  00000F                     ___flmul@b:
   839                           	opt callstack 0
   840                           
   841                           ; 4 bytes @ 0xE
   842  00000F                     	ds	1
   843  000010                     send_cmd@res:
   844                           	opt callstack 0
   845                           
   846                           ; 1 bytes @ 0xF
   847  000010                     	ds	1
   848  000011                     ??_disk_initialize:
   849  000011                     disk_ioctl@cmd:
   850                           	opt callstack 0
   851  000011                     disk_read@buff:
   852                           	opt callstack 0
   853  000011                     disk_write@buff:
   854                           	opt callstack 0
   855  000011                     _create_name$624:
   856                           	opt callstack 0
   857                           
   858                           ; 2 bytes @ 0x10
   859  000011                     	ds	1
   860  000012                     disk_initialize@pdrv:
   861                           	opt callstack 0
   862  000012                     disk_ioctl@buff:
   863                           	opt callstack 0
   864                           
   865                           ; 2 bytes @ 0x11
   866  000012                     	ds	1
   867  000013                     ??_clust2sect:
   868  000013                     create_name@si:
   869                           	opt callstack 0
   870  000013                     disk_initialize@ocr:
   871                           	opt callstack 0
   872  000013                     disk_read@sector:
   873                           	opt callstack 0
   874  000013                     disk_write@sector:
   875                           	opt callstack 0
   876  000013                     ___flmul@a:
   877                           	opt callstack 0
   878                           
   879                           ; 4 bytes @ 0x12
   880  000013                     	ds	1
   881  000014                     ??_disk_ioctl:
   882                           
   883                           ; 1 bytes @ 0x13
   884  000014                     	ds	1
   885  000015                     create_name@b:
   886                           	opt callstack 0
   887                           
   888                           ; 1 bytes @ 0x14
   889  000015                     	ds	1
   890  000016                     create_name@ni:
   891                           	opt callstack 0
   892                           
   893                           ; 2 bytes @ 0x15
   894  000016                     	ds	1
   895  000017                     ??___flmul:
   896  000017                     _disk_initialize$134:
   897                           	opt callstack 0
   898  000017                     disk_read@count:
   899                           	opt callstack 0
   900  000017                     disk_write@count:
   901                           	opt callstack 0
   902                           
   903                           ; 2 bytes @ 0x16
   904  000017                     	ds	1
   905  000018                     create_name@p:
   906                           	opt callstack 0
   907                           
   908                           ; 2 bytes @ 0x17
   909  000018                     	ds	1
   910  000019                     ??_disk_write:
   911  000019                     disk_initialize@cmd:
   912                           	opt callstack 0
   913  000019                     disk_read@pdrv:
   914                           	opt callstack 0
   915                           
   916                           ; 1 bytes @ 0x18
   917  000019                     	ds	1
   918  00001A                     disk_initialize@ty:
   919                           	opt callstack 0
   920  00001A                     disk_write@pdrv:
   921                           	opt callstack 0
   922  00001A                     create_name@d:
   923                           	opt callstack 0
   924  00001A                     _disk_read$143:
   925                           	opt callstack 0
   926                           
   927                           ; 2 bytes @ 0x19
   928  00001A                     	ds	1
   929  00001B                     ___flmul@sign:
   930                           	opt callstack 0
   931  00001B                     disk_initialize@tmr:
   932                           	opt callstack 0
   933  00001B                     sync_window@fs:
   934                           	opt callstack 0
   935  00001B                     create_name@sfn:
   936                           	opt callstack 0
   937                           
   938                           ; 2 bytes @ 0x1A
   939  00001B                     	ds	1
   940  00001C                     disk_read@cmd:
   941                           	opt callstack 0
   942  00001C                     ___flmul@grs:
   943                           	opt callstack 0
   944                           
   945                           ; 4 bytes @ 0x1B
   946  00001C                     	ds	1
   947  00001D                     ??_sync_window:
   948  00001D                     disk_initialize@n:
   949                           	opt callstack 0
   950  00001D                     create_name@i:
   951                           	opt callstack 0
   952                           
   953                           ; 2 bytes @ 0x1C
   954  00001D                     	ds	2
   955  00001F                     create_name@c:
   956                           	opt callstack 0
   957                           
   958                           ; 1 bytes @ 0x1E
   959  00001F                     	ds	1
   960  000020                     ___flmul@aexp:
   961                           	opt callstack 0
   962                           
   963                           ; 1 bytes @ 0x1F
   964  000020                     	ds	1
   965  000021                     ___flmul@bexp:
   966                           	opt callstack 0
   967  000021                     disk_ioctl@csd:
   968                           	opt callstack 0
   969                           
   970                           ; 16 bytes @ 0x20
   971  000021                     	ds	1
   972  000022                     ___flmul@prod:
   973                           	opt callstack 0
   974                           
   975                           ; 4 bytes @ 0x21
   976  000022                     	ds	4
   977  000026                     ___flmul@temp:
   978                           	opt callstack 0
   979                           
   980                           ; 2 bytes @ 0x25
   981  000026                     	ds	2
   982  000028                     ?___fldiv:
   983                           	opt callstack 0
   984  000028                     ___fldiv@b:
   985                           	opt callstack 0
   986                           
   987                           ; 4 bytes @ 0x27
   988  000028                     	ds	1
   989  000029                     sync_window@res:
   990                           	opt callstack 0
   991                           
   992                           ; 1 bytes @ 0x28
   993  000029                     	ds	1
   994  00002A                     sync_window@nf:
   995                           	opt callstack 0
   996                           
   997                           ; 2 bytes @ 0x29
   998  00002A                     	ds	2
   999  00002C                     sync_window@wsect:
  1000                           	opt callstack 0
  1001  00002C                     ___fldiv@a:
  1002                           	opt callstack 0
  1003                           
  1004                           ; 4 bytes @ 0x2B
  1005  00002C                     	ds	4
  1006  000030                     ??___fldiv:
  1007  000030                     move_window@fs:
  1008                           	opt callstack 0
  1009                           
  1010                           ; 2 bytes @ 0x2F
  1011  000030                     	ds	1
  1012  000031                     disk_ioctl@pdrv:
  1013                           	opt callstack 0
  1014                           
  1015                           ; 1 bytes @ 0x30
  1016  000031                     	ds	1
  1017  000032                     disk_ioctl@csize:
  1018                           	opt callstack 0
  1019  000032                     move_window@sector:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 4 bytes @ 0x31
  1023  000032                     	ds	2
  1024  000034                     ___fldiv@rem:
  1025                           	opt callstack 0
  1026                           
  1027                           ; 4 bytes @ 0x33
  1028  000034                     	ds	2
  1029  000036                     disk_ioctl@res:
  1030                           	opt callstack 0
  1031                           
  1032                           ; 1 bytes @ 0x35
  1033  000036                     	ds	1
  1034  000037                     disk_ioctl@n:
  1035                           	opt callstack 0
  1036                           
  1037                           ; 1 bytes @ 0x36
  1038  000037                     	ds	1
  1039  000038                     ___fldiv@sign:
  1040                           	opt callstack 0
  1041  000038                     disk_ioctl@ptr:
  1042                           	opt callstack 0
  1043                           
  1044                           ; 2 bytes @ 0x37
  1045  000038                     	ds	1
  1046  000039                     ___fldiv@new_exp:
  1047                           	opt callstack 0
  1048                           
  1049                           ; 2 bytes @ 0x38
  1050  000039                     	ds	1
  1051  00003A                     move_window@res:
  1052                           	opt callstack 0
  1053  00003A                     sync_fs@fs:
  1054                           	opt callstack 0
  1055                           
  1056                           ; 2 bytes @ 0x39
  1057  00003A                     	ds	1
  1058  00003B                     ?_get_fat:
  1059                           	opt callstack 0
  1060  00003B                     get_fat@fs:
  1061                           	opt callstack 0
  1062  00003B                     put_fat@fs:
  1063                           	opt callstack 0
  1064  00003B                     check_fs@fs:
  1065                           	opt callstack 0
  1066  00003B                     ___fldiv@grs:
  1067                           	opt callstack 0
  1068                           
  1069                           ; 4 bytes @ 0x3A
  1070  00003B                     	ds	1
  1071  00003C                     ??_sync_fs:
  1072                           
  1073                           ; 1 bytes @ 0x3B
  1074  00003C                     	ds	1
  1075  00003D                     get_fat@clst:
  1076                           	opt callstack 0
  1077  00003D                     put_fat@clst:
  1078                           	opt callstack 0
  1079  00003D                     check_fs@sect:
  1080                           	opt callstack 0
  1081                           
  1082                           ; 4 bytes @ 0x3C
  1083  00003D                     	ds	2
  1084  00003F                     ___fldiv@bexp:
  1085                           	opt callstack 0
  1086                           
  1087                           ; 1 bytes @ 0x3E
  1088  00003F                     	ds	1
  1089  000040                     ___fldiv@aexp:
  1090                           	opt callstack 0
  1091                           
  1092                           ; 1 bytes @ 0x3F
  1093  000040                     	ds	1
  1094  000041                     ??_get_fat:
  1095  000041                     ??_check_fs:
  1096  000041                     put_fat@val:
  1097                           	opt callstack 0
  1098                           
  1099                           ; 4 bytes @ 0x40
  1100  000041                     	ds	3
  1101  000044                     sync_fs@res:
  1102                           	opt callstack 0
  1103                           
  1104                           ; 1 bytes @ 0x43
  1105  000044                     	ds	1
  1106  000045                     ??_put_fat:
  1107  000045                     find_volume@rfs:
  1108                           	opt callstack 0
  1109  000045                     f_sync@fp:
  1110                           	opt callstack 0
  1111                           
  1112                           ; 2 bytes @ 0x44
  1113  000045                     	ds	2
  1114  000047                     find_volume@path:
  1115                           	opt callstack 0
  1116                           
  1117                           ; 2 bytes @ 0x46
  1118  000047                     	ds	2
  1119  000049                     find_volume@wmode:
  1120                           	opt callstack 0
  1121                           
  1122                           ; 1 bytes @ 0x48
  1123  000049                     	ds	1
  1124  00004A                     ??_find_volume:
  1125  00004A                     _get_fat$374:
  1126                           	opt callstack 0
  1127                           
  1128                           ; 2 bytes @ 0x49
  1129  00004A                     	ds	1
  1130  00004B                     f_sync@res:
  1131                           	opt callstack 0
  1132                           
  1133                           ; 1 bytes @ 0x4A
  1134  00004B                     	ds	1
  1135  00004C                     f_sync@dir:
  1136                           	opt callstack 0
  1137  00004C                     get_fat@val:
  1138                           	opt callstack 0
  1139                           
  1140                           ; 4 bytes @ 0x4B
  1141  00004C                     	ds	1
  1142  00004D                     _put_fat$400:
  1143                           	opt callstack 0
  1144                           
  1145                           ; 2 bytes @ 0x4C
  1146  00004D                     	ds	1
  1147  00004E                     f_close@fp:
  1148                           	opt callstack 0
  1149                           
  1150                           ; 2 bytes @ 0x4D
  1151  00004E                     	ds	1
  1152  00004F                     _put_fat$401:
  1153                           	opt callstack 0
  1154                           
  1155                           ; 2 bytes @ 0x4E
  1156  00004F                     	ds	1
  1157  000050                     f_close@res:
  1158                           	opt callstack 0
  1159  000050                     get_fat@wc:
  1160                           	opt callstack 0
  1161                           
  1162                           ; 2 bytes @ 0x4F
  1163  000050                     	ds	1
  1164  000051                     put_fat@bc:
  1165                           	opt callstack 0
  1166                           
  1167                           ; 2 bytes @ 0x50
  1168  000051                     	ds	1
  1169  000052                     get_fat@p:
  1170                           	opt callstack 0
  1171  000052                     f_mount@fs:
  1172                           	opt callstack 0
  1173                           
  1174                           ; 2 bytes @ 0x51
  1175  000052                     	ds	1
  1176  000053                     put_fat@res:
  1177                           	opt callstack 0
  1178                           
  1179                           ; 1 bytes @ 0x52
  1180  000053                     	ds	1
  1181  000054                     get_fat@bc:
  1182                           	opt callstack 0
  1183  000054                     put_fat@p:
  1184                           	opt callstack 0
  1185  000054                     f_mount@path:
  1186                           	opt callstack 0
  1187                           
  1188                           ; 2 bytes @ 0x53
  1189  000054                     	ds	2
  1190  000056                     ?_create_chain:
  1191                           	opt callstack 0
  1192  000056                     f_mount@opt:
  1193                           	opt callstack 0
  1194  000056                     remove_chain@fs:
  1195                           	opt callstack 0
  1196  000056                     create_chain@fs:
  1197                           	opt callstack 0
  1198  000056                     dir_sdi@dp:
  1199                           	opt callstack 0
  1200                           
  1201                           ; 2 bytes @ 0x55
  1202  000056                     	ds	1
  1203  000057                     f_mount@res:
  1204                           	opt callstack 0
  1205                           
  1206                           ; 1 bytes @ 0x56
  1207  000057                     	ds	1
  1208  000058                     dir_sdi@idx:
  1209                           	opt callstack 0
  1210  000058                     f_mount@cfs:
  1211                           	opt callstack 0
  1212  000058                     remove_chain@clst:
  1213                           	opt callstack 0
  1214  000058                     create_chain@clst:
  1215                           	opt callstack 0
  1216                           
  1217                           ; 4 bytes @ 0x57
  1218  000058                     	ds	2
  1219  00005A                     f_mount@rp:
  1220                           	opt callstack 0
  1221                           
  1222                           ; 2 bytes @ 0x59
  1223  00005A                     	ds	2
  1224  00005C                     f_mount@vol:
  1225                           	opt callstack 0
  1226                           
  1227                           ; 2 bytes @ 0x5B
  1228  00005C                     	ds	4
  1229  000060                     
  1230                           ; 1 bytes @ 0x5F
  1231 ;;
  1232 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1233 ;;
  1234 ;; *************** function _main *****************
  1235 ;; Defined at:
  1236 ;;		line 37 in file "Main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;                  1    wreg      void 
  1243 ;; Registers used:
  1244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0
  1251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1253 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1254 ;;Total ram usage:        0 bytes
  1255 ;; Hardware stack levels required when called:   15
  1256 ;; This function calls:
  1257 ;;		_Error
  1258 ;;		_Init8LEDs
  1259 ;;		_SYSTEM_Initialize
  1260 ;;		_guardar
  1261 ;; This function is called by:
  1262 ;;		Startup code after reset
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266                           	psect	text0
  1267  005B16                     __ptext0:
  1268                           	opt callstack 0
  1269  005B16                     _main:
  1270                           	opt callstack 16
  1271                           
  1272                           ;Main.c: 40:     SYSTEM_Initialize();
  1273                           
  1274                           ;incstack = 0
  1275  005B16  ECAB  F02E         	call	_SYSTEM_Initialize	;wreg free
  1276                           
  1277                           ;Main.c: 41:     Init8LEDs();
  1278  005B1A  EC94  F02E         	call	_Init8LEDs	;wreg free
  1279                           
  1280                           ;Main.c: 43:     OSCCON = 0x53;
  1281  005B1E  0E53               	movlw	83
  1282  005B20  6ED3               	movwf	4051,c	;volatile
  1283                           
  1284                           ;Main.c: 44:     ADCON2 = 0x94;
  1285  005B22  0E94               	movlw	148
  1286  005B24  6EC0               	movwf	4032,c	;volatile
  1287                           
  1288                           ;Main.c: 45:     ADCON1 = 0x00;
  1289  005B26  0E00               	movlw	0
  1290  005B28  6EC1               	movwf	4033,c	;volatile
  1291                           
  1292                           ;Main.c: 46:     LATA = 0x00;
  1293  005B2A  0E00               	movlw	0
  1294  005B2C  6E89               	movwf	3977,c	;volatile
  1295                           
  1296                           ;Main.c: 47:     TRISA = 0x00;
  1297  005B2E  0E00               	movlw	0
  1298  005B30  6E92               	movwf	3986,c	;volatile
  1299                           
  1300                           ;Main.c: 48:     ANSELA = 0x00;
  1301  005B32  0E00               	movlw	0
  1302  005B34  010F               	movlb	15	; () banked
  1303  005B36  6F5B               	movwf	91,b	;volatile
  1304                           
  1305                           ; BSR set to: 15
  1306                           ;Main.c: 49:     TRISC = 0x04;
  1307  005B38  0E04               	movlw	4
  1308  005B3A  6E94               	movwf	3988,c	;volatile
  1309                           
  1310                           ; BSR set to: 15
  1311                           ;Main.c: 50:     ANSELC = 0x04;
  1312  005B3C  0E04               	movlw	4
  1313  005B3E  6F5D               	movwf	93,b	;volatile
  1314                           
  1315                           ; BSR set to: 15
  1316                           ;Main.c: 51:     ADCON0 = 0x39;
  1317  005B40  0E39               	movlw	57
  1318  005B42  6EC2               	movwf	4034,c	;volatile
  1319                           
  1320                           ; BSR set to: 15
  1321                           ;Main.c: 52:     GIE = 1;
  1322  005B44  8EF2               	bsf	4082,7,c	;volatile
  1323                           
  1324                           ; BSR set to: 15
  1325                           ;Main.c: 53:     PEIE = 1;
  1326  005B46  8CF2               	bsf	4082,6,c	;volatile
  1327                           
  1328                           ; BSR set to: 15
  1329                           ;Main.c: 54:     ADIE = 1;
  1330  005B48  8C9D               	bsf	3997,6,c	;volatile
  1331                           
  1332                           ; BSR set to: 15
  1333                           ;Main.c: 55:        guardar();
  1334  005B4A  ECF0  F028         	call	_guardar	;wreg free
  1335  005B4E                     l7112:
  1336                           
  1337                           ;Main.c: 57:         Error(55);
  1338  005B4E  0E00               	movlw	0
  1339  005B50  6E02               	movwf	Error@a+1,c
  1340  005B52  0E37               	movlw	55
  1341  005B54  6E01               	movwf	Error@a,c
  1342  005B56  ECBE  F029         	call	_Error	;wreg free
  1343  005B5A  D7F9               	goto	l7112
  1344  005B5C                     __end_of_main:
  1345                           	opt callstack 0
  1346                           
  1347 ;; *************** function _guardar *****************
  1348 ;; Defined at:
  1349 ;;		line 112 in file "Main.c"
  1350 ;; Parameters:    Size  Location     Type
  1351 ;;		None
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;		None
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1363 ;;      Params:         0       0       0       0       0       0       0       0       0
  1364 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1366 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1367 ;;Total ram usage:        0 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:   14
  1370 ;; This function calls:
  1371 ;;		_Error
  1372 ;;		_f_close
  1373 ;;		_f_lseek
  1374 ;;		_f_mount
  1375 ;;		_f_open
  1376 ;;		_grabador
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text1
  1383  0051E0                     __ptext1:
  1384                           	opt callstack 0
  1385  0051E0                     _guardar:
  1386                           	opt callstack 16
  1387                           
  1388                           ;Main.c: 113:     Error(5);
  1389                           
  1390                           ;incstack = 0
  1391  0051E0  0E00               	movlw	0
  1392  0051E2  6E02               	movwf	Error@a+1,c
  1393  0051E4  0E05               	movlw	5
  1394  0051E6  6E01               	movwf	Error@a,c
  1395  0051E8  ECBE  F029         	call	_Error	;wreg free
  1396                           
  1397                           ;Main.c: 114:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1398  0051EC  0E20               	movlw	low _FatFs
  1399  0051EE  6E52               	movwf	f_mount@fs,c
  1400  0051F0  0E01               	movlw	high _FatFs
  1401  0051F2  6E53               	movwf	f_mount@fs+1,c
  1402  0051F4  0E1A               	movlw	low (STR_5+10)
  1403  0051F6  6E54               	movwf	f_mount@path,c
  1404  0051F8  0E08               	movlw	high (STR_5+10)
  1405  0051FA  6E55               	movwf	f_mount@path+1,c
  1406  0051FC  0E01               	movlw	1
  1407  0051FE  6E56               	movwf	f_mount@opt,c
  1408  005200  EC80  F02A         	call	_f_mount	;wreg free
  1409  005204  0900               	iorlw	0
  1410  005206  B4D8               	btfsc	status,2,c
  1411  005208  D00F               	goto	u9600
  1412  00520A                     u9590:
  1413                           
  1414                           ;Main.c: 116:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1415  00520A  0E20               	movlw	low _FatFs
  1416  00520C  6E52               	movwf	f_mount@fs,c
  1417  00520E  0E01               	movlw	high _FatFs
  1418  005210  6E53               	movwf	f_mount@fs+1,c
  1419  005212  0E1A               	movlw	low (STR_5+10)
  1420  005214  6E54               	movwf	f_mount@path,c
  1421  005216  0E08               	movlw	high (STR_5+10)
  1422  005218  6E55               	movwf	f_mount@path+1,c
  1423  00521A  0E01               	movlw	1
  1424  00521C  6E56               	movwf	f_mount@opt,c
  1425  00521E  EC80  F02A         	call	_f_mount	;wreg free
  1426  005222  0900               	iorlw	0
  1427  005224  A4D8               	btfss	status,2,c
  1428  005226  D7F1               	goto	u9590
  1429  005228                     u9600:
  1430                           
  1431                           ;Main.c: 121:     Error(1);
  1432  005228  0E00               	movlw	0
  1433  00522A  6E02               	movwf	Error@a+1,c
  1434  00522C  0E01               	movlw	1
  1435  00522E  6E01               	movwf	Error@a,c
  1436  005230  ECBE  F029         	call	_Error	;wreg free
  1437                           
  1438                           ;Main.c: 124:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1439  005234  0E00               	movlw	low _Fil
  1440  005236  0100               	movlb	0	; () banked
  1441  005238  6F9A               	movwf	f_open@fp& (0+255),b
  1442  00523A  0E01               	movlw	high _Fil
  1443  00523C  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1444  00523E  0E10               	movlw	low STR_5
  1445  005240  6F9C               	movwf	f_open@path& (0+255),b
  1446  005242  0E08               	movlw	high STR_5
  1447  005244  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1448  005246  0E13               	movlw	19
  1449  005248  6F9E               	movwf	f_open@mode& (0+255),b
  1450  00524A  ECD6  F017         	call	_f_open	;wreg free
  1451  00524E  0900               	iorlw	0
  1452  005250  A4D8               	btfss	status,2,c
  1453  005252  D027               	goto	l6972
  1454                           
  1455                           ;Main.c: 127:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD
      +                          ;
  1456  005254  0101               	movlb	1	; () banked
  1457  005256  510A               	movf	(_Fil+10)& (0+255),w,b
  1458  005258  110B               	iorwf	(_Fil+11)& (0+255),w,b
  1459  00525A  110C               	iorwf	(_Fil+12)& (0+255),w,b
  1460  00525C  110D               	iorwf	(_Fil+13)& (0+255),w,b
  1461  00525E  B4D8               	btfsc	status,2,c
  1462  005260  D011               	goto	l6968
  1463                           
  1464                           ; BSR set to: 1
  1465  005262  0E00               	movlw	low _Fil
  1466  005264  0100               	movlb	0	; () banked
  1467  005266  6F6D               	movwf	f_lseek@fp& (0+255),b
  1468  005268  0E01               	movlw	high _Fil
  1469  00526A  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1470  00526C  C10A  F06F         	movff	_Fil+10,f_lseek@ofs
  1471  005270  C10B  F070         	movff	_Fil+11,f_lseek@ofs+1
  1472  005274  C10C  F071         	movff	_Fil+12,f_lseek@ofs+2
  1473  005278  C10D  F072         	movff	_Fil+13,f_lseek@ofs+3
  1474  00527C  EC97  F00C         	call	_f_lseek	;wreg free
  1475  005280  0900               	iorlw	0
  1476  005282  B4D8               	btfsc	status,2,c
  1477  005284                     l6968:
  1478                           
  1479                           ;Main.c: 129:                 grabador();
  1480  005284  ECA4  F027         	call	_grabador	;wreg free
  1481                           
  1482                           ;Main.c: 130:                 endSD: f_close(&Fil);
  1483  005288  0E00               	movlw	low _Fil
  1484  00528A  6E4E               	movwf	f_close@fp,c
  1485  00528C  0E01               	movlw	high _Fil
  1486  00528E  6E4F               	movwf	f_close@fp+1,c
  1487  005290  ECED  F02D         	call	_f_close	;wreg free
  1488                           
  1489                           ;Main.c: 131:                 Error(55);
  1490  005294  0E00               	movlw	0
  1491  005296  6E02               	movwf	Error@a+1,c
  1492  005298  0E37               	movlw	55
  1493  00529A  6E01               	movwf	Error@a,c
  1494  00529C  ECBE  F029         	call	_Error	;wreg free
  1495                           
  1496                           ;Main.c: 132:  }
  1497  0052A0  0012               	return	
  1498  0052A2                     l6972:
  1499                           
  1500                           ;Main.c: 134:         Error(0);
  1501  0052A2  0E00               	movlw	0
  1502  0052A4  6E02               	movwf	Error@a+1,c
  1503  0052A6  0E00               	movlw	0
  1504  0052A8  6E01               	movwf	Error@a,c
  1505  0052AA  ECBE  F029         	call	_Error	;wreg free
  1506  0052AE  0012               	return		;funcret
  1507  0052B0                     __end_of_guardar:
  1508                           	opt callstack 0
  1509                           
  1510 ;; *************** function _grabador *****************
  1511 ;; Defined at:
  1512 ;;		line 83 in file "Main.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  1    wreg      void 
  1519 ;; Registers used:
  1520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1526 ;;      Params:         0       0       0       0       0       0       0       0       0
  1527 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1528 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1529 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1530 ;;Total ram usage:        2 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:   11
  1533 ;; This function calls:
  1534 ;;		___fldiv
  1535 ;;		___flmul
  1536 ;;		___xxtofl
  1537 ;;		_f_write
  1538 ;;		_interruptadc
  1539 ;; This function is called by:
  1540 ;;		_guardar
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text2
  1545  004F48                     __ptext2:
  1546                           	opt callstack 0
  1547  004F48                     _grabador:
  1548                           	opt callstack 18
  1549  004F48                     l888:
  1550                           
  1551                           ;Main.c: 86:         i++;
  1552  004F48  0100               	movlb	0	; () banked
  1553  004F4A  4BED               	infsnz	_i& (0+255),f,b
  1554  004F4C  2BEE               	incf	(_i+1)& (0+255),f,b
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;Main.c: 87:         ADCON0bits.GO=1;
  1558  004F4E  82C2               	bsf	4034,1,c	;volatile
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;Main.c: 88:         adcin = interruptadc(adcin, i);
  1562  004F50  C0D8  F001         	movff	_adcin,interruptadc@adcin
  1563  004F54  C0D9  F002         	movff	_adcin+1,interruptadc@adcin+1
  1564  004F58  C0ED  F003         	movff	_i,interruptadc@a
  1565  004F5C  C0EE  F004         	movff	_i+1,interruptadc@a+1
  1566  004F60  EC35  F02E         	call	_interruptadc	;wreg free
  1567  004F64  C001  F0D8         	movff	?_interruptadc,_adcin
  1568  004F68  C002  F0D9         	movff	?_interruptadc+1,_adcin+1
  1569                           
  1570                           ;Main.c: 89:         PORTA = adcin/4;
  1571  004F6C  C0D8  F091         	movff	_adcin,??_grabador
  1572  004F70  C0D9  F092         	movff	_adcin+1,??_grabador+1
  1573  004F74  0100               	movlb	0	; () banked
  1574  004F76  90D8               	bcf	status,0,c
  1575  004F78  3392               	rrcf	(??_grabador+1)& (0+255),f,b
  1576  004F7A  3391               	rrcf	??_grabador& (0+255),f,b
  1577  004F7C  90D8               	bcf	status,0,c
  1578  004F7E  3392               	rrcf	(??_grabador+1)& (0+255),f,b
  1579  004F80  3391               	rrcf	??_grabador& (0+255),f,b
  1580  004F82  5191               	movf	??_grabador& (0+255),w,b
  1581  004F84  6E80               	movwf	3968,c	;volatile
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;Main.c: 90:         volt = (adcin*5.0)/1023.0;
  1585  004F86  0E00               	movlw	0
  1586  004F88  6E13               	movwf	___flmul@a,c
  1587  004F8A  0E00               	movlw	0
  1588  004F8C  6E14               	movwf	___flmul@a+1,c
  1589  004F8E  0EA0               	movlw	160
  1590  004F90  6E15               	movwf	___flmul@a+2,c
  1591  004F92  0E40               	movlw	64
  1592  004F94  6E16               	movwf	___flmul@a+3,c
  1593  004F96  C0D8  F001         	movff	_adcin,___xxtofl@val
  1594  004F9A  C0D9  F002         	movff	_adcin+1,___xxtofl@val+1
  1595  004F9E  6A03               	clrf	___xxtofl@val+2,c
  1596  004FA0  6A04               	clrf	___xxtofl@val+3,c
  1597  004FA2  0E00               	movlw	0
  1598  004FA4  EC18  F025         	call	___xxtofl
  1599  004FA8  C001  F00F         	movff	?___xxtofl,___flmul@b
  1600  004FAC  C002  F010         	movff	?___xxtofl+1,___flmul@b+1
  1601  004FB0  C003  F011         	movff	?___xxtofl+2,___flmul@b+2
  1602  004FB4  C004  F012         	movff	?___xxtofl+3,___flmul@b+3
  1603  004FB8  ECA1  F019         	call	___flmul	;wreg free
  1604  004FBC  C00F  F028         	movff	?___flmul,___fldiv@b
  1605  004FC0  C010  F029         	movff	?___flmul+1,___fldiv@b+1
  1606  004FC4  C011  F02A         	movff	?___flmul+2,___fldiv@b+2
  1607  004FC8  C012  F02B         	movff	?___flmul+3,___fldiv@b+3
  1608  004FCC  0E00               	movlw	0
  1609  004FCE  6E2C               	movwf	___fldiv@a,c
  1610  004FD0  0EC0               	movlw	192
  1611  004FD2  6E2D               	movwf	___fldiv@a+1,c
  1612  004FD4  0E7F               	movlw	127
  1613  004FD6  6E2E               	movwf	___fldiv@a+2,c
  1614  004FD8  0E44               	movlw	68
  1615  004FDA  6E2F               	movwf	___fldiv@a+3,c
  1616  004FDC  EC28  F01E         	call	___fldiv	;wreg free
  1617  004FE0  C028  F0D0         	movff	?___fldiv,_volt
  1618  004FE4  C029  F0D1         	movff	?___fldiv+1,_volt+1
  1619  004FE8  C02A  F0D2         	movff	?___fldiv+2,_volt+2
  1620  004FEC  C02B  F0D3         	movff	?___fldiv+3,_volt+3
  1621                           
  1622                           ;Main.c: 91:         ND[0] = (char) adcin;
  1623  004FF0  C0D8  F0DF         	movff	_adcin,_ND
  1624                           
  1625                           ;Main.c: 93:         f_write(&Fil, ND , 2 , &bw);
  1626  004FF4  0E00               	movlw	low _Fil
  1627  004FF6  0100               	movlb	0	; () banked
  1628  004FF8  6F6D               	movwf	f_write@fp& (0+255),b
  1629  004FFA  0E01               	movlw	high _Fil
  1630  004FFC  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1631  004FFE  0EDF               	movlw	low _ND
  1632  005000  6F6F               	movwf	f_write@buff& (0+255),b
  1633  005002  0E00               	movlw	high _ND
  1634  005004  6F70               	movwf	(f_write@buff+1)& (0+255),b
  1635  005006  0E00               	movlw	0
  1636  005008  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1637  00500A  0E02               	movlw	2
  1638  00500C  6F71               	movwf	f_write@btw& (0+255),b
  1639  00500E  0EE1               	movlw	low _bw
  1640  005010  6F73               	movwf	f_write@bw& (0+255),b
  1641  005012  0E00               	movlw	high _bw
  1642  005014  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1643  005016  ECE5  F008         	call	_f_write	;wreg free
  1644                           
  1645                           ;Main.c: 94:         }while(i!=5000);
  1646  00501A  0E88               	movlw	136
  1647  00501C  0100               	movlb	0	; () banked
  1648  00501E  19ED               	xorwf	_i& (0+255),w,b
  1649  005020  E193               	bnz	l888
  1650  005022  0E13               	movlw	19
  1651  005024  19EE               	xorwf	(_i+1)& (0+255),w,b
  1652  005026  B4D8               	btfsc	status,2,c
  1653  005028  0012               	return	
  1654  00502A  D78E               	goto	_grabador
  1655  00502C                     __end_of_grabador:
  1656                           	opt callstack 0
  1657                           
  1658 ;; *************** function _interruptadc *****************
  1659 ;; Defined at:
  1660 ;;		line 62 in file "Main.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  adcin           2    0[COMRAM] int 
  1663 ;;  a               2    2[COMRAM] int 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  2    0[COMRAM] int 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, status,0
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1675 ;;      Params:         4       0       0       0       0       0       0       0       0
  1676 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1677 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1678 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1679 ;;Total ram usage:        6 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_grabador
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text3
  1689  005C6A                     __ptext3:
  1690                           	opt callstack 0
  1691  005C6A                     _interruptadc:
  1692                           	opt callstack 28
  1693                           
  1694                           ;Main.c: 63:     if(ADIF==1) {
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;incstack = 0
  1698  005C6A  AC9E               	btfss	3998,6,c	;volatile
  1699  005C6C  D00A               	goto	l6284
  1700                           
  1701                           ;Main.c: 64:         ADIE=0;
  1702  005C6E  9C9D               	bcf	3997,6,c	;volatile
  1703                           
  1704                           ;Main.c: 65:         adcin = (ADRESH<<8)+ADRESL;
  1705  005C70  50C4               	movf	4036,w,c	;volatile
  1706  005C72  6E06               	movwf	(??_interruptadc+1)& (0+255),c
  1707  005C74  6A05               	clrf	??_interruptadc& (0+255),c
  1708  005C76  50C3               	movf	4035,w,c	;volatile
  1709  005C78  2405               	addwf	??_interruptadc,w,c
  1710  005C7A  6E01               	movwf	interruptadc@adcin,c
  1711  005C7C  0E00               	movlw	0
  1712  005C7E  2006               	addwfc	??_interruptadc+1,w,c
  1713  005C80  6E02               	movwf	interruptadc@adcin+1,c
  1714  005C82                     l6284:
  1715                           
  1716                           ;Main.c: 67:     ADIE=1;
  1717  005C82  8C9D               	bsf	3997,6,c	;volatile
  1718                           
  1719                           ;Main.c: 68:     ADIF=0;
  1720  005C84  9C9E               	bcf	3998,6,c	;volatile
  1721                           
  1722                           ;Main.c: 70:     return adcin;
  1723  005C86  C001  F001         	movff	interruptadc@adcin,?_interruptadc
  1724  005C8A  C002  F002         	movff	interruptadc@adcin+1,?_interruptadc+1
  1725  005C8E  0012               	return		;funcret
  1726  005C90                     __end_of_interruptadc:
  1727                           	opt callstack 0
  1728                           
  1729 ;; *************** function _f_write *****************
  1730 ;; Defined at:
  1731 ;;		line 2691 in file "ff.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  fp              2   13[BANK0 ] PTR struct .
  1734 ;;		 -> Fil(32), 
  1735 ;;  buff            2   15[BANK0 ] PTR const void 
  1736 ;;		 -> ND(2), 
  1737 ;;  btw             2   17[BANK0 ] unsigned short 
  1738 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1739 ;;		 -> bw(2), 
  1740 ;; Auto vars:     Size  Location     Type
  1741 ;;  clst            4   43[BANK0 ] unsigned long 
  1742 ;;  sect            4   39[BANK0 ] unsigned long 
  1743 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1744 ;;  cc              2   37[BANK0 ] unsigned short 
  1745 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1746 ;;		 -> ND(2), 
  1747 ;;  csect           1   36[BANK0 ] unsigned char 
  1748 ;;  res             1   33[BANK0 ] enum E93
  1749 ;; Return value:  Size  Location     Type
  1750 ;;                  1    wreg      enum E93
  1751 ;; Registers used:
  1752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1758 ;;      Params:         0       8       0       0       0       0       0       0       0
  1759 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1760 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1761 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1762 ;;Total ram usage:       36 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:   10
  1765 ;; This function calls:
  1766 ;;		_clust2sect
  1767 ;;		_create_chain
  1768 ;;		_disk_write
  1769 ;;		_mem_cpy
  1770 ;;		_move_window
  1771 ;;		_sync_window
  1772 ;;		_validate
  1773 ;; This function is called by:
  1774 ;;		_grabador
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text4
  1779  0011CA                     __ptext4:
  1780                           	opt callstack 0
  1781  0011CA                     _f_write:
  1782                           	opt callstack 18
  1783                           
  1784                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1785                           
  1786                           ;incstack = 0
  1787  0011CA  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1788  0011CE  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1789                           
  1790                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1791  0011D2  C073  FFD9         	movff	f_write@bw,fsr2l
  1792  0011D6  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1793  0011DA  0E00               	movlw	0
  1794  0011DC  6EDE               	movwf	postinc2,c
  1795  0011DE  0E00               	movlw	0
  1796  0011E0  6EDD               	movwf	postdec2,c
  1797                           
  1798                           ;ff.c: 2707:  res = validate(fp);
  1799  0011E2  C06D  F002         	movff	f_write@fp,validate@obj
  1800  0011E6  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1801  0011EA  EC2B  F02B         	call	_validate	;wreg free
  1802  0011EE  0100               	movlb	0	; () banked
  1803  0011F0  6F81               	movwf	f_write@res& (0+255),b
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1807  0011F2  5181               	movf	f_write@res& (0+255),w,b
  1808  0011F4  A4D8               	btfss	status,2,c
  1809  0011F6  0012               	return	
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;ff.c: 2709:  if (fp->err)
  1813  0011F8  EE20 F005          	lfsr	2,5
  1814  0011FC  516D               	movf	f_write@fp& (0+255),w,b
  1815  0011FE  26D9               	addwf	fsr2l,f,c
  1816  001200  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1817  001202  22DA               	addwfc	fsr2h,f,c
  1818  001204  50DF               	movf	indf2,w,c
  1819  001206  A4D8               	btfss	status,2,c
  1820  001208  0012               	return	
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1824  00120A  EE20 F004          	lfsr	2,4
  1825  00120E  516D               	movf	f_write@fp& (0+255),w,b
  1826  001210  26D9               	addwf	fsr2l,f,c
  1827  001212  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1828  001214  22DA               	addwfc	fsr2h,f,c
  1829  001216  A2DF               	btfss	indf2,1,c
  1830  001218  0012               	return	
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1834  00121A  EE20 F006          	lfsr	2,6
  1835  00121E  516D               	movf	f_write@fp& (0+255),w,b
  1836  001220  26D9               	addwf	fsr2l,f,c
  1837  001222  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1838  001224  22DA               	addwfc	fsr2h,f,c
  1839  001226  EE10 F006          	lfsr	1,6
  1840  00122A  516D               	movf	f_write@fp& (0+255),w,b
  1841  00122C  26E1               	addwf	fsr1l,f,c
  1842  00122E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1843  001230  22E2               	addwfc	fsr1h,f,c
  1844  001232  CFE6 F079          	movff	postinc1,??_f_write+4
  1845  001236  CFE6 F07A          	movff	postinc1,??_f_write+5
  1846  00123A  CFE6 F07B          	movff	postinc1,??_f_write+6
  1847  00123E  CFE6 F07C          	movff	postinc1,??_f_write+7
  1848  001242  5171               	movf	f_write@btw& (0+255),w,b
  1849  001244  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1850  001246  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1851  001248  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1852  00124A  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1853  00124C  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1854  00124E  0E00               	movlw	0
  1855  001250  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1856  001252  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1857  001254  0E00               	movlw	0
  1858  001256  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1859  001258  6F80               	movwf	(??_f_write+11)& (0+255),b
  1860  00125A  50DE               	movf	postinc2,w,c
  1861  00125C  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1862  00125E  50DE               	movf	postinc2,w,c
  1863  001260  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1864  001262  50DE               	movf	postinc2,w,c
  1865  001264  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1866  001266  50DE               	movf	postinc2,w,c
  1867  001268  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1868  00126A  B0D8               	btfsc	status,0,c
  1869  00126C  D329               	goto	l6236
  1870                           
  1871                           ; BSR set to: 0
  1872  00126E  0E00               	movlw	0
  1873  001270  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1874  001272  0E00               	movlw	0
  1875  001274  6F71               	movwf	f_write@btw& (0+255),b
  1876  001276  D324               	goto	l6236
  1877  001278                     l6128:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1881  001278  EE20 F006          	lfsr	2,6
  1882  00127C  516D               	movf	f_write@fp& (0+255),w,b
  1883  00127E  26D9               	addwf	fsr2l,f,c
  1884  001280  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1885  001282  22DA               	addwfc	fsr2h,f,c
  1886  001284  0EFF               	movlw	255
  1887  001286  14DE               	andwf	postinc2,w,c
  1888  001288  6F75               	movwf	??_f_write& (0+255),b
  1889  00128A  0E01               	movlw	1
  1890  00128C  14DE               	andwf	postinc2,w,c
  1891  00128E  6F76               	movwf	(??_f_write+1)& (0+255),b
  1892  001290  0E00               	movlw	0
  1893  001292  14DE               	andwf	postinc2,w,c
  1894  001294  6F77               	movwf	(??_f_write+2)& (0+255),b
  1895  001296  0E00               	movlw	0
  1896  001298  14DE               	andwf	postinc2,w,c
  1897  00129A  6F78               	movwf	(??_f_write+3)& (0+255),b
  1898  00129C  5175               	movf	??_f_write& (0+255),w,b
  1899  00129E  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1900  0012A0  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1901  0012A2  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1902  0012A4  A4D8               	btfss	status,2,c
  1903  0012A6  D26A               	goto	l6212
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1907  0012A8  EE20 F006          	lfsr	2,6
  1908  0012AC  516D               	movf	f_write@fp& (0+255),w,b
  1909  0012AE  26D9               	addwf	fsr2l,f,c
  1910  0012B0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1911  0012B2  22DA               	addwfc	fsr2h,f,c
  1912  0012B4  CFDE F075          	movff	postinc2,??_f_write
  1913  0012B8  CFDE F076          	movff	postinc2,??_f_write+1
  1914  0012BC  CFDE F077          	movff	postinc2,??_f_write+2
  1915  0012C0  CFDE F078          	movff	postinc2,??_f_write+3
  1916  0012C4  0E0A               	movlw	10
  1917  0012C6  D005               	goto	u8220
  1918  0012C8                     u8225:
  1919  0012C8  90D8               	bcf	status,0,c
  1920  0012CA  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1921  0012CC  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1922  0012CE  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1923  0012D0  3375               	rrcf	??_f_write& (0+255),f,b
  1924  0012D2                     u8220:
  1925  0012D2  2EE8               	decfsz	wreg,f,c
  1926  0012D4  D7F9               	goto	u8225
  1927  0012D6  C06D  FFD9         	movff	f_write@fp,fsr2l
  1928  0012DA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1929  0012DE  EE10 F002          	lfsr	1,2
  1930  0012E2  50DE               	movf	postinc2,w,c
  1931  0012E4  26E1               	addwf	fsr1l,f,c
  1932  0012E6  50DD               	movf	postdec2,w,c
  1933  0012E8  22E2               	addwfc	fsr1h,f,c
  1934  0012EA  50E7               	movf	indf1,w,c
  1935  0012EC  6F79               	movwf	(??_f_write+4)& (0+255),b
  1936  0012EE  0579               	decf	(??_f_write+4)& (0+255),w,b
  1937  0012F0  1575               	andwf	??_f_write& (0+255),w,b
  1938  0012F2  6F84               	movwf	f_write@csect& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;ff.c: 2719:    if (!csect) {
  1942  0012F4  5184               	movf	f_write@csect& (0+255),w,b
  1943  0012F6  A4D8               	btfss	status,2,c
  1944  0012F8  D0A3               	goto	l6164
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1948  0012FA  EE20 F006          	lfsr	2,6
  1949  0012FE  516D               	movf	f_write@fp& (0+255),w,b
  1950  001300  26D9               	addwf	fsr2l,f,c
  1951  001302  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1952  001304  22DA               	addwfc	fsr2h,f,c
  1953  001306  50DE               	movf	postinc2,w,c
  1954  001308  10DE               	iorwf	postinc2,w,c
  1955  00130A  10DE               	iorwf	postinc2,w,c
  1956  00130C  10DE               	iorwf	postinc2,w,c
  1957  00130E  A4D8               	btfss	status,2,c
  1958  001310  D027               	goto	l6142
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;ff.c: 2721:      clst = fp->sclust;
  1962  001312  EE20 F00E          	lfsr	2,14
  1963  001316  516D               	movf	f_write@fp& (0+255),w,b
  1964  001318  26D9               	addwf	fsr2l,f,c
  1965  00131A  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1966  00131C  22DA               	addwfc	fsr2h,f,c
  1967  00131E  CFDE F08B          	movff	postinc2,f_write@clst
  1968  001322  CFDE F08C          	movff	postinc2,f_write@clst+1
  1969  001326  CFDE F08D          	movff	postinc2,f_write@clst+2
  1970  00132A  CFDE F08E          	movff	postinc2,f_write@clst+3
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;ff.c: 2722:      if (clst == 0)
  1974  00132E  518B               	movf	f_write@clst& (0+255),w,b
  1975  001330  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1976  001332  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1977  001334  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1978  001336  A4D8               	btfss	status,2,c
  1979  001338  D033               	goto	l6144
  1980                           
  1981                           ; BSR set to: 0
  1982                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1983  00133A  C06D  FFD9         	movff	f_write@fp,fsr2l
  1984  00133E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1985  001342  CFDE F056          	movff	postinc2,create_chain@fs
  1986  001346  CFDD F057          	movff	postdec2,create_chain@fs+1
  1987  00134A  0E00               	movlw	0
  1988  00134C  6E58               	movwf	create_chain@clst,c
  1989  00134E  0E00               	movlw	0
  1990  001350  6E59               	movwf	create_chain@clst+1,c
  1991  001352  0E00               	movlw	0
  1992  001354  6E5A               	movwf	create_chain@clst+2,c
  1993  001356  0E00               	movlw	0
  1994  001358  6E5B               	movwf	create_chain@clst+3,c
  1995  00135A  EC4A  F01B         	call	_create_chain	;wreg free
  1996  00135E  D018               	goto	L1
  1997  001360                     l6142:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  2001  001360  C06D  FFD9         	movff	f_write@fp,fsr2l
  2002  001364  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2003  001368  CFDE F056          	movff	postinc2,create_chain@fs
  2004  00136C  CFDD F057          	movff	postdec2,create_chain@fs+1
  2005  001370  EE20 F012          	lfsr	2,18
  2006  001374  516D               	movf	f_write@fp& (0+255),w,b
  2007  001376  26D9               	addwf	fsr2l,f,c
  2008  001378  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2009  00137A  22DA               	addwfc	fsr2h,f,c
  2010  00137C  CFDE F058          	movff	postinc2,create_chain@clst
  2011  001380  CFDE F059          	movff	postinc2,create_chain@clst+1
  2012  001384  CFDE F05A          	movff	postinc2,create_chain@clst+2
  2013  001388  CFDE F05B          	movff	postinc2,create_chain@clst+3
  2014  00138C  EC4A  F01B         	call	_create_chain	;wreg free
  2015  001390                     L1:
  2016  001390  C056  F08B         	movff	?_create_chain,f_write@clst
  2017  001394  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  2018  001398  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  2019  00139C  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  2020  0013A0                     l6144:
  2021                           
  2022                           ;ff.c: 2732:     if (clst == 0) break;
  2023  0013A0  0100               	movlb	0	; () banked
  2024  0013A2  518B               	movf	f_write@clst& (0+255),w,b
  2025  0013A4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  2026  0013A6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  2027  0013A8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  2028  0013AA  B4D8               	btfsc	status,2,c
  2029  0013AC  D28D               	goto	u8440
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2033  0013AE  058B               	decf	f_write@clst& (0+255),w,b
  2034  0013B0  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  2035  0013B2  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  2036  0013B4  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  2037  0013B6  A4D8               	btfss	status,2,c
  2038  0013B8  D009               	goto	l6154
  2039                           
  2040                           ; BSR set to: 0
  2041  0013BA  EE20 F005          	lfsr	2,5
  2042  0013BE  516D               	movf	f_write@fp& (0+255),w,b
  2043  0013C0  26D9               	addwf	fsr2l,f,c
  2044  0013C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2045  0013C4  22DA               	addwfc	fsr2h,f,c
  2046  0013C6  0E02               	movlw	2
  2047  0013C8  6EDF               	movwf	indf2,c
  2048  0013CA  0012               	return	
  2049  0013CC                     l6154:
  2050                           
  2051                           ; BSR set to: 0
  2052                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  2053  0013CC  298B               	incf	f_write@clst& (0+255),w,b
  2054  0013CE  E110               	bnz	l6160
  2055  0013D0  298C               	incf	(f_write@clst+1)& (0+255),w,b
  2056  0013D2  E10E               	bnz	l6160
  2057  0013D4  298D               	incf	(f_write@clst+2)& (0+255),w,b
  2058  0013D6  E10C               	bnz	l6160
  2059  0013D8  298E               	incf	(f_write@clst+3)& (0+255),w,b
  2060  0013DA  A4D8               	btfss	status,2,c
  2061  0013DC  D009               	goto	l6160
  2062                           
  2063                           ; BSR set to: 0
  2064  0013DE  EE20 F005          	lfsr	2,5
  2065  0013E2  516D               	movf	f_write@fp& (0+255),w,b
  2066  0013E4  26D9               	addwf	fsr2l,f,c
  2067  0013E6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2068  0013E8  22DA               	addwfc	fsr2h,f,c
  2069  0013EA  0E01               	movlw	1
  2070  0013EC  6EDF               	movwf	indf2,c
  2071  0013EE  0012               	return	
  2072  0013F0                     l6160:
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;ff.c: 2735:     fp->clust = clst;
  2076  0013F0  EE20 F012          	lfsr	2,18
  2077  0013F4  516D               	movf	f_write@fp& (0+255),w,b
  2078  0013F6  26D9               	addwf	fsr2l,f,c
  2079  0013F8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2080  0013FA  22DA               	addwfc	fsr2h,f,c
  2081  0013FC  C08B  FFDE         	movff	f_write@clst,postinc2
  2082  001400  C08C  FFDE         	movff	f_write@clst+1,postinc2
  2083  001404  C08D  FFDE         	movff	f_write@clst+2,postinc2
  2084  001408  C08E  FFDE         	movff	f_write@clst+3,postinc2
  2085                           
  2086                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  2087  00140C  EE20 F00E          	lfsr	2,14
  2088  001410  516D               	movf	f_write@fp& (0+255),w,b
  2089  001412  26D9               	addwf	fsr2l,f,c
  2090  001414  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2091  001416  22DA               	addwfc	fsr2h,f,c
  2092  001418  50DE               	movf	postinc2,w,c
  2093  00141A  10DE               	iorwf	postinc2,w,c
  2094  00141C  10DE               	iorwf	postinc2,w,c
  2095  00141E  10DE               	iorwf	postinc2,w,c
  2096  001420  A4D8               	btfss	status,2,c
  2097  001422  D00E               	goto	l6164
  2098                           
  2099                           ; BSR set to: 0
  2100  001424  EE20 F00E          	lfsr	2,14
  2101  001428  516D               	movf	f_write@fp& (0+255),w,b
  2102  00142A  26D9               	addwf	fsr2l,f,c
  2103  00142C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2104  00142E  22DA               	addwfc	fsr2h,f,c
  2105  001430  C08B  FFDE         	movff	f_write@clst,postinc2
  2106  001434  C08C  FFDE         	movff	f_write@clst+1,postinc2
  2107  001438  C08D  FFDE         	movff	f_write@clst+2,postinc2
  2108  00143C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  2109  001440                     l6164:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  2113  001440  EE20 F016          	lfsr	2,22
  2114  001444  516D               	movf	f_write@fp& (0+255),w,b
  2115  001446  26D9               	addwf	fsr2l,f,c
  2116  001448  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2117  00144A  22DA               	addwfc	fsr2h,f,c
  2118  00144C  C06D  FFE1         	movff	f_write@fp,fsr1l
  2119  001450  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  2120  001454  EE00 F02A          	lfsr	0,42
  2121  001458  50E6               	movf	postinc1,w,c
  2122  00145A  26E9               	addwf	fsr0l,f,c
  2123  00145C  50E5               	movf	postdec1,w,c
  2124  00145E  22EA               	addwfc	fsr0h,f,c
  2125  001460  50DE               	movf	postinc2,w,c
  2126  001462  18EE               	xorwf	postinc0,w,c
  2127  001464  E121               	bnz	l6172
  2128  001466  50DE               	movf	postinc2,w,c
  2129  001468  18EE               	xorwf	postinc0,w,c
  2130  00146A  E11E               	bnz	l6172
  2131  00146C  50DE               	movf	postinc2,w,c
  2132  00146E  18EE               	xorwf	postinc0,w,c
  2133  001470  E11B               	bnz	l6172
  2134  001472  50DE               	movf	postinc2,w,c
  2135  001474  18EE               	xorwf	postinc0,w,c
  2136  001476  A4D8               	btfss	status,2,c
  2137  001478  D017               	goto	l6172
  2138                           
  2139                           ; BSR set to: 0
  2140  00147A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2141  00147E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2142  001482  CFDE F01B          	movff	postinc2,sync_window@fs
  2143  001486  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2144  00148A  EC83  F022         	call	_sync_window	;wreg free
  2145  00148E  0900               	iorlw	0
  2146  001490  B4D8               	btfsc	status,2,c
  2147  001492  D00A               	goto	l6172
  2148                           
  2149                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2150  001494  0100               	movlb	0	; () banked
  2151  001496  EE20 F005          	lfsr	2,5
  2152  00149A  516D               	movf	f_write@fp& (0+255),w,b
  2153  00149C  26D9               	addwf	fsr2l,f,c
  2154  00149E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2155  0014A0  22DA               	addwfc	fsr2h,f,c
  2156  0014A2  0E01               	movlw	1
  2157  0014A4  6EDF               	movwf	indf2,c
  2158  0014A6  0012               	return	
  2159  0014A8                     l6172:
  2160                           
  2161                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  2162  0014A8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2163  0014AC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2164  0014B0  CFDE F00D          	movff	postinc2,clust2sect@fs
  2165  0014B4  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  2166  0014B8  0100               	movlb	0	; () banked
  2167  0014BA  EE20 F012          	lfsr	2,18
  2168  0014BE  516D               	movf	f_write@fp& (0+255),w,b
  2169  0014C0  26D9               	addwf	fsr2l,f,c
  2170  0014C2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2171  0014C4  22DA               	addwfc	fsr2h,f,c
  2172  0014C6  CFDE F00F          	movff	postinc2,clust2sect@clst
  2173  0014CA  CFDE F010          	movff	postinc2,clust2sect@clst+1
  2174  0014CE  CFDE F011          	movff	postinc2,clust2sect@clst+2
  2175  0014D2  CFDE F012          	movff	postinc2,clust2sect@clst+3
  2176  0014D6  EC23  F02A         	call	_clust2sect	;wreg free
  2177  0014DA  C00D  F087         	movff	?_clust2sect,f_write@sect
  2178  0014DE  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  2179  0014E2  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  2180  0014E6  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  2181                           
  2182                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  2183  0014EA  0100               	movlb	0	; () banked
  2184  0014EC  5187               	movf	f_write@sect& (0+255),w,b
  2185  0014EE  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  2186  0014F0  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  2187  0014F2  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  2188  0014F4  A4D8               	btfss	status,2,c
  2189  0014F6  D009               	goto	l6180
  2190                           
  2191                           ; BSR set to: 0
  2192  0014F8  EE20 F005          	lfsr	2,5
  2193  0014FC  516D               	movf	f_write@fp& (0+255),w,b
  2194  0014FE  26D9               	addwf	fsr2l,f,c
  2195  001500  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2196  001502  22DA               	addwfc	fsr2h,f,c
  2197  001504  0E02               	movlw	2
  2198  001506  6EDF               	movwf	indf2,c
  2199  001508  0012               	return	
  2200  00150A                     l6180:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;ff.c: 2750:    sect += csect;
  2204  00150A  5184               	movf	f_write@csect& (0+255),w,b
  2205  00150C  2787               	addwf	f_write@sect& (0+255),f,b
  2206  00150E  0E00               	movlw	0
  2207  001510  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  2208  001512  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  2209  001514  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  2210                           
  2211                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  2212  001516  C071  F075         	movff	f_write@btw,??_f_write
  2213  00151A  C072  F076         	movff	f_write@btw+1,??_f_write+1
  2214  00151E  0E09               	movlw	9
  2215  001520  6F77               	movwf	(??_f_write+2)& (0+255),b
  2216  001522                     u8335:
  2217  001522  90D8               	bcf	status,0,c
  2218  001524  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  2219  001526  3375               	rrcf	??_f_write& (0+255),f,b
  2220  001528  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  2221  00152A  D7FB               	goto	u8335
  2222  00152C  C075  F085         	movff	??_f_write,f_write@cc
  2223  001530  C076  F086         	movff	??_f_write+1,f_write@cc+1
  2224                           
  2225                           ;ff.c: 2752:    if (cc) {
  2226  001534  5185               	movf	f_write@cc& (0+255),w,b
  2227  001536  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  2228  001538  B4D8               	btfsc	status,2,c
  2229  00153A  D0D2               	goto	l6200
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  2233  00153C  5184               	movf	f_write@csect& (0+255),w,b
  2234  00153E  2585               	addwf	f_write@cc& (0+255),w,b
  2235  001540  6F75               	movwf	??_f_write& (0+255),b
  2236  001542  0E00               	movlw	0
  2237  001544  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  2238  001546  6F76               	movwf	(??_f_write+1)& (0+255),b
  2239  001548  C06D  FFD9         	movff	f_write@fp,fsr2l
  2240  00154C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2241  001550  EE10 F002          	lfsr	1,2
  2242  001554  50DE               	movf	postinc2,w,c
  2243  001556  26E1               	addwf	fsr1l,f,c
  2244  001558  50DD               	movf	postdec2,w,c
  2245  00155A  22E2               	addwfc	fsr1h,f,c
  2246  00155C  50E7               	movf	indf1,w,c
  2247  00155E  6F77               	movwf	(??_f_write+2)& (0+255),b
  2248  001560  6B78               	clrf	(??_f_write+3)& (0+255),b
  2249  001562  5175               	movf	??_f_write& (0+255),w,b
  2250  001564  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  2251  001566  5176               	movf	(??_f_write+1)& (0+255),w,b
  2252  001568  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  2253  00156A  B0D8               	btfsc	status,0,c
  2254  00156C  D012               	goto	l6186
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  2258  00156E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2259  001572  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2260  001576  EE10 F002          	lfsr	1,2
  2261  00157A  50DE               	movf	postinc2,w,c
  2262  00157C  26E1               	addwf	fsr1l,f,c
  2263  00157E  50DD               	movf	postdec2,w,c
  2264  001580  22E2               	addwfc	fsr1h,f,c
  2265  001582  50E7               	movf	indf1,w,c
  2266  001584  6F75               	movwf	??_f_write& (0+255),b
  2267  001586  5184               	movf	f_write@csect& (0+255),w,b
  2268  001588  5D75               	subwf	??_f_write& (0+255),w,b
  2269  00158A  6F85               	movwf	f_write@cc& (0+255),b
  2270  00158C  6B86               	clrf	(f_write@cc+1)& (0+255),b
  2271  00158E  A0D8               	btfss	status,0,c
  2272  001590  0786               	decf	(f_write@cc+1)& (0+255),f,b
  2273  001592                     l6186:
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2277  001592  C082  F011         	movff	f_write@wbuff,disk_write@buff
  2278  001596  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2279  00159A  C087  F013         	movff	f_write@sect,disk_write@sector
  2280  00159E  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  2281  0015A2  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  2282  0015A6  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  2283  0015AA  C085  F017         	movff	f_write@cc,disk_write@count
  2284  0015AE  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  2285  0015B2  C06D  FFD9         	movff	f_write@fp,fsr2l
  2286  0015B6  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2287  0015BA  EE10 F001          	lfsr	1,1
  2288  0015BE  50DE               	movf	postinc2,w,c
  2289  0015C0  26E1               	addwf	fsr1l,f,c
  2290  0015C2  50DD               	movf	postdec2,w,c
  2291  0015C4  22E2               	addwfc	fsr1h,f,c
  2292  0015C6  50E7               	movf	indf1,w,c
  2293  0015C8  ECB8  F025         	call	_disk_write
  2294  0015CC  0900               	iorlw	0
  2295  0015CE  B4D8               	btfsc	status,2,c
  2296  0015D0  D00A               	goto	l6192
  2297                           
  2298                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2299  0015D2  0100               	movlb	0	; () banked
  2300  0015D4  EE20 F005          	lfsr	2,5
  2301  0015D8  516D               	movf	f_write@fp& (0+255),w,b
  2302  0015DA  26D9               	addwf	fsr2l,f,c
  2303  0015DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2304  0015DE  22DA               	addwfc	fsr2h,f,c
  2305  0015E0  0E01               	movlw	1
  2306  0015E2  6EDF               	movwf	indf2,c
  2307  0015E4  0012               	return	
  2308  0015E6                     l6192:
  2309                           
  2310                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2311  0015E6  0100               	movlb	0	; () banked
  2312  0015E8  5185               	movf	f_write@cc& (0+255),w,b
  2313  0015EA  6F75               	movwf	??_f_write& (0+255),b
  2314  0015EC  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2315  0015EE  6F76               	movwf	(??_f_write+1)& (0+255),b
  2316  0015F0  6B77               	clrf	(??_f_write+2)& (0+255),b
  2317  0015F2  6B78               	clrf	(??_f_write+3)& (0+255),b
  2318  0015F4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2319  0015F8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2320  0015FC  EE10 F02A          	lfsr	1,42
  2321  001600  50DE               	movf	postinc2,w,c
  2322  001602  26E1               	addwf	fsr1l,f,c
  2323  001604  50DD               	movf	postdec2,w,c
  2324  001606  22E2               	addwfc	fsr1h,f,c
  2325  001608  CFE6 F079          	movff	postinc1,??_f_write+4
  2326  00160C  CFE6 F07A          	movff	postinc1,??_f_write+5
  2327  001610  CFE6 F07B          	movff	postinc1,??_f_write+6
  2328  001614  CFE6 F07C          	movff	postinc1,??_f_write+7
  2329  001618  5187               	movf	f_write@sect& (0+255),w,b
  2330  00161A  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2331  00161C  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2332  00161E  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2333  001620  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2334  001622  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2335  001624  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2336  001626  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2337  001628  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2338  00162A  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2339  00162C  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2340  00162E  6F80               	movwf	(??_f_write+11)& (0+255),b
  2341  001630  5175               	movf	??_f_write& (0+255),w,b
  2342  001632  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2343  001634  5176               	movf	(??_f_write+1)& (0+255),w,b
  2344  001636  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2345  001638  5177               	movf	(??_f_write+2)& (0+255),w,b
  2346  00163A  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2347  00163C  5178               	movf	(??_f_write+3)& (0+255),w,b
  2348  00163E  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2349  001640  B0D8               	btfsc	status,0,c
  2350  001642  D03E               	goto	l6198
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2354  001644  C06D  FFD9         	movff	f_write@fp,fsr2l
  2355  001648  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2356  00164C  CFDE F075          	movff	postinc2,??_f_write
  2357  001650  CFDD F076          	movff	postdec2,??_f_write+1
  2358  001654  0E2E               	movlw	46
  2359  001656  2575               	addwf	??_f_write& (0+255),w,b
  2360  001658  6E01               	movwf	mem_cpy@dst,c
  2361  00165A  0E00               	movlw	0
  2362  00165C  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2363  00165E  6E02               	movwf	mem_cpy@dst+1,c
  2364  001660  C06D  FFD9         	movff	f_write@fp,fsr2l
  2365  001664  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2366  001668  EE10 F02A          	lfsr	1,42
  2367  00166C  50DE               	movf	postinc2,w,c
  2368  00166E  26E1               	addwf	fsr1l,f,c
  2369  001670  50DD               	movf	postdec2,w,c
  2370  001672  22E2               	addwfc	fsr1h,f,c
  2371  001674  CFE6 F077          	movff	postinc1,??_f_write+2
  2372  001678  CFE5 F078          	movff	postdec1,??_f_write+3
  2373  00167C  5187               	movf	f_write@sect& (0+255),w,b
  2374  00167E  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2375  001680  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2376  001682  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2377  001684  0E09               	movlw	9
  2378  001686                     u8385:
  2379  001686  90D8               	bcf	status,0,c
  2380  001688  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2381  00168A  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2382  00168C  2EE8               	decfsz	wreg,f,c
  2383  00168E  D7FB               	goto	u8385
  2384  001690  5177               	movf	(??_f_write+2)& (0+255),w,b
  2385  001692  2582               	addwf	f_write@wbuff& (0+255),w,b
  2386  001694  6E03               	movwf	mem_cpy@src,c
  2387  001696  5178               	movf	(??_f_write+3)& (0+255),w,b
  2388  001698  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2389  00169A  6E04               	movwf	mem_cpy@src+1,c
  2390  00169C  0E02               	movlw	2
  2391  00169E  6E06               	movwf	mem_cpy@cnt+1,c
  2392  0016A0  0E00               	movlw	0
  2393  0016A2  6E05               	movwf	mem_cpy@cnt,c
  2394  0016A4  EC36  F02C         	call	_mem_cpy	;wreg free
  2395                           
  2396                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2397  0016A8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2398  0016AC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2399  0016B0  EE10 F004          	lfsr	1,4
  2400  0016B4  50DE               	movf	postinc2,w,c
  2401  0016B6  26E1               	addwf	fsr1l,f,c
  2402  0016B8  50DD               	movf	postdec2,w,c
  2403  0016BA  22E2               	addwfc	fsr1h,f,c
  2404  0016BC  0E00               	movlw	0
  2405  0016BE  6EE7               	movwf	indf1,c
  2406  0016C0                     l6198:
  2407                           
  2408                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2409  0016C0  C085  F075         	movff	f_write@cc,??_f_write
  2410  0016C4  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2411  0016C8  0E09               	movlw	9
  2412  0016CA                     u8395:
  2413  0016CA  90D8               	bcf	status,0,c
  2414  0016CC  0100               	movlb	0	; () banked
  2415  0016CE  3775               	rlcf	??_f_write& (0+255),f,b
  2416  0016D0  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2417  0016D2  2EE8               	decfsz	wreg,f,c
  2418  0016D4  D7FA               	goto	u8395
  2419  0016D6  C075  F08F         	movff	??_f_write,f_write@wcnt
  2420  0016DA  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2421                           
  2422                           ;ff.c: 2771:     continue;
  2423  0016DE  D0D2               	goto	l6228
  2424  0016E0                     l6200:
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2428  0016E0  EE20 F00A          	lfsr	2,10
  2429  0016E4  516D               	movf	f_write@fp& (0+255),w,b
  2430  0016E6  26D9               	addwf	fsr2l,f,c
  2431  0016E8  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2432  0016EA  22DA               	addwfc	fsr2h,f,c
  2433  0016EC  EE10 F006          	lfsr	1,6
  2434  0016F0  516D               	movf	f_write@fp& (0+255),w,b
  2435  0016F2  26E1               	addwf	fsr1l,f,c
  2436  0016F4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2437  0016F6  22E2               	addwfc	fsr1h,f,c
  2438  0016F8  50DE               	movf	postinc2,w,c
  2439  0016FA  5CE6               	subwf	postinc1,w,c
  2440  0016FC  50DE               	movf	postinc2,w,c
  2441  0016FE  58E6               	subwfb	postinc1,w,c
  2442  001700  50DE               	movf	postinc2,w,c
  2443  001702  58E6               	subwfb	postinc1,w,c
  2444  001704  50DE               	movf	postinc2,w,c
  2445  001706  58E6               	subwfb	postinc1,w,c
  2446  001708  A0D8               	btfss	status,0,c
  2447  00170A  D029               	goto	l6210
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2451  00170C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2452  001710  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2453  001714  CFDE F01B          	movff	postinc2,sync_window@fs
  2454  001718  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2455  00171C  EC83  F022         	call	_sync_window	;wreg free
  2456  001720  0900               	iorlw	0
  2457  001722  B4D8               	btfsc	status,2,c
  2458  001724  D00A               	goto	l6208
  2459  001726  0100               	movlb	0	; () banked
  2460  001728  EE20 F005          	lfsr	2,5
  2461  00172C  516D               	movf	f_write@fp& (0+255),w,b
  2462  00172E  26D9               	addwf	fsr2l,f,c
  2463  001730  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2464  001732  22DA               	addwfc	fsr2h,f,c
  2465  001734  0E01               	movlw	1
  2466  001736  6EDF               	movwf	indf2,c
  2467  001738  0012               	return	
  2468  00173A                     l6208:
  2469                           
  2470                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2471  00173A  C06D  FFD9         	movff	f_write@fp,fsr2l
  2472  00173E  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2473  001742  EE10 F02A          	lfsr	1,42
  2474  001746  50DE               	movf	postinc2,w,c
  2475  001748  26E1               	addwf	fsr1l,f,c
  2476  00174A  50DD               	movf	postdec2,w,c
  2477  00174C  22E2               	addwfc	fsr1h,f,c
  2478  00174E  C087  FFE6         	movff	f_write@sect,postinc1
  2479  001752  C088  FFE6         	movff	f_write@sect+1,postinc1
  2480  001756  C089  FFE6         	movff	f_write@sect+2,postinc1
  2481  00175A  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2482  00175E                     l6210:
  2483                           
  2484                           ;ff.c: 2785:    fp->dsect = sect;
  2485  00175E  0100               	movlb	0	; () banked
  2486  001760  EE20 F016          	lfsr	2,22
  2487  001764  516D               	movf	f_write@fp& (0+255),w,b
  2488  001766  26D9               	addwf	fsr2l,f,c
  2489  001768  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2490  00176A  22DA               	addwfc	fsr2h,f,c
  2491  00176C  C087  FFDE         	movff	f_write@sect,postinc2
  2492  001770  C088  FFDE         	movff	f_write@sect+1,postinc2
  2493  001774  C089  FFDE         	movff	f_write@sect+2,postinc2
  2494  001778  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2495  00177C                     l6212:
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2499  00177C  0EFF               	movlw	255
  2500  00177E  6F75               	movwf	??_f_write& (0+255),b
  2501  001780  0E01               	movlw	1
  2502  001782  6F76               	movwf	(??_f_write+1)& (0+255),b
  2503  001784  EE20 F006          	lfsr	2,6
  2504  001788  516D               	movf	f_write@fp& (0+255),w,b
  2505  00178A  26D9               	addwf	fsr2l,f,c
  2506  00178C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2507  00178E  22DA               	addwfc	fsr2h,f,c
  2508  001790  CFDE F077          	movff	postinc2,??_f_write+2
  2509  001794  CFDD F078          	movff	postdec2,??_f_write+3
  2510  001798  5175               	movf	??_f_write& (0+255),w,b
  2511  00179A  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2512  00179C  5176               	movf	(??_f_write+1)& (0+255),w,b
  2513  00179E  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2514  0017A0  5177               	movf	(??_f_write+2)& (0+255),w,b
  2515  0017A2  0800               	sublw	0
  2516  0017A4  6F8F               	movwf	f_write@wcnt& (0+255),b
  2517  0017A6  5178               	movf	(??_f_write+3)& (0+255),w,b
  2518  0017A8  A0D8               	btfss	status,0,c
  2519  0017AA  2AE8               	incf	wreg,f,c
  2520  0017AC  0802               	sublw	2
  2521  0017AE  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2525  0017B0  518F               	movf	f_write@wcnt& (0+255),w,b
  2526  0017B2  5D71               	subwf	f_write@btw& (0+255),w,b
  2527  0017B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2528  0017B6  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2529  0017B8  B0D8               	btfsc	status,0,c
  2530  0017BA  D004               	goto	l6218
  2531                           
  2532                           ; BSR set to: 0
  2533  0017BC  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2534  0017C0  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2535  0017C4                     l6218:
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2539  0017C4  C06D  FFD9         	movff	f_write@fp,fsr2l
  2540  0017C8  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2541  0017CC  CFDE F030          	movff	postinc2,move_window@fs
  2542  0017D0  CFDD F031          	movff	postdec2,move_window@fs+1
  2543  0017D4  EE20 F016          	lfsr	2,22
  2544  0017D8  516D               	movf	f_write@fp& (0+255),w,b
  2545  0017DA  26D9               	addwf	fsr2l,f,c
  2546  0017DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2547  0017DE  22DA               	addwfc	fsr2h,f,c
  2548  0017E0  CFDE F032          	movff	postinc2,move_window@sector
  2549  0017E4  CFDE F033          	movff	postinc2,move_window@sector+1
  2550  0017E8  CFDE F034          	movff	postinc2,move_window@sector+2
  2551  0017EC  CFDE F035          	movff	postinc2,move_window@sector+3
  2552  0017F0  ECD8  F02A         	call	_move_window	;wreg free
  2553  0017F4  0900               	iorlw	0
  2554  0017F6  B4D8               	btfsc	status,2,c
  2555  0017F8  D00A               	goto	l6224
  2556                           
  2557                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2558  0017FA  0100               	movlb	0	; () banked
  2559  0017FC  EE20 F005          	lfsr	2,5
  2560  001800  516D               	movf	f_write@fp& (0+255),w,b
  2561  001802  26D9               	addwf	fsr2l,f,c
  2562  001804  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2563  001806  22DA               	addwfc	fsr2h,f,c
  2564  001808  0E01               	movlw	1
  2565  00180A  6EDF               	movwf	indf2,c
  2566  00180C  0012               	return	
  2567  00180E                     l6224:
  2568                           
  2569                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2570  00180E  0EFF               	movlw	255
  2571  001810  0100               	movlb	0	; () banked
  2572  001812  6F75               	movwf	??_f_write& (0+255),b
  2573  001814  0E01               	movlw	1
  2574  001816  6F76               	movwf	(??_f_write+1)& (0+255),b
  2575  001818  EE20 F006          	lfsr	2,6
  2576  00181C  516D               	movf	f_write@fp& (0+255),w,b
  2577  00181E  26D9               	addwf	fsr2l,f,c
  2578  001820  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2579  001822  22DA               	addwfc	fsr2h,f,c
  2580  001824  CFDE F077          	movff	postinc2,??_f_write+2
  2581  001828  CFDD F078          	movff	postdec2,??_f_write+3
  2582  00182C  5175               	movf	??_f_write& (0+255),w,b
  2583  00182E  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2584  001830  5176               	movf	(??_f_write+1)& (0+255),w,b
  2585  001832  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2586  001834  C06D  FFD9         	movff	f_write@fp,fsr2l
  2587  001838  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2588  00183C  CFDE F079          	movff	postinc2,??_f_write+4
  2589  001840  CFDD F07A          	movff	postdec2,??_f_write+5
  2590  001844  5177               	movf	(??_f_write+2)& (0+255),w,b
  2591  001846  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2592  001848  5178               	movf	(??_f_write+3)& (0+255),w,b
  2593  00184A  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2594  00184C  0E2E               	movlw	46
  2595  00184E  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2596  001850  6E01               	movwf	mem_cpy@dst,c
  2597  001852  0E00               	movlw	0
  2598  001854  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2599  001856  6E02               	movwf	mem_cpy@dst+1,c
  2600  001858  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2601  00185C  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2602  001860  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2603  001864  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2604  001868  EC36  F02C         	call	_mem_cpy	;wreg free
  2605                           
  2606                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2607  00186C  C06D  FFD9         	movff	f_write@fp,fsr2l
  2608  001870  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2609  001874  EE10 F004          	lfsr	1,4
  2610  001878  50DE               	movf	postinc2,w,c
  2611  00187A  26E1               	addwf	fsr1l,f,c
  2612  00187C  50DD               	movf	postdec2,w,c
  2613  00187E  22E2               	addwfc	fsr1h,f,c
  2614  001880  0E01               	movlw	1
  2615  001882  6EE7               	movwf	indf1,c
  2616  001884                     l6228:
  2617  001884  0100               	movlb	0	; () banked
  2618  001886  518F               	movf	f_write@wcnt& (0+255),w,b
  2619  001888  2782               	addwf	f_write@wbuff& (0+255),f,b
  2620  00188A  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2621  00188C  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2622                           
  2623                           ; BSR set to: 0
  2624  00188E  EE20 F006          	lfsr	2,6
  2625  001892  516D               	movf	f_write@fp& (0+255),w,b
  2626  001894  26D9               	addwf	fsr2l,f,c
  2627  001896  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2628  001898  22DA               	addwfc	fsr2h,f,c
  2629  00189A  518F               	movf	f_write@wcnt& (0+255),w,b
  2630  00189C  26DE               	addwf	postinc2,f,c
  2631  00189E  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2632  0018A0  22DE               	addwfc	postinc2,f,c
  2633  0018A2  0E00               	movlw	0
  2634  0018A4  22DE               	addwfc	postinc2,f,c
  2635  0018A6  22DE               	addwfc	postinc2,f,c
  2636                           
  2637                           ; BSR set to: 0
  2638  0018A8  C073  FFD9         	movff	f_write@bw,fsr2l
  2639  0018AC  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2640  0018B0  518F               	movf	f_write@wcnt& (0+255),w,b
  2641  0018B2  26DE               	addwf	postinc2,f,c
  2642  0018B4  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2643  0018B6  22DD               	addwfc	postdec2,f,c
  2644                           
  2645                           ; BSR set to: 0
  2646  0018B8  518F               	movf	f_write@wcnt& (0+255),w,b
  2647  0018BA  5F71               	subwf	f_write@btw& (0+255),f,b
  2648  0018BC  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2649  0018BE  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2650  0018C0                     l6236:
  2651                           
  2652                           ; BSR set to: 0
  2653  0018C0  5171               	movf	f_write@btw& (0+255),w,b
  2654  0018C2  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2655  0018C4  A4D8               	btfss	status,2,c
  2656  0018C6  D4D8               	goto	l6128
  2657  0018C8                     u8440:
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2661  0018C8  EE20 F006          	lfsr	2,6
  2662  0018CC  516D               	movf	f_write@fp& (0+255),w,b
  2663  0018CE  26D9               	addwf	fsr2l,f,c
  2664  0018D0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2665  0018D2  22DA               	addwfc	fsr2h,f,c
  2666  0018D4  EE10 F00A          	lfsr	1,10
  2667  0018D8  516D               	movf	f_write@fp& (0+255),w,b
  2668  0018DA  26E1               	addwf	fsr1l,f,c
  2669  0018DC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2670  0018DE  22E2               	addwfc	fsr1h,f,c
  2671  0018E0  50DE               	movf	postinc2,w,c
  2672  0018E2  5CE6               	subwf	postinc1,w,c
  2673  0018E4  50DE               	movf	postinc2,w,c
  2674  0018E6  58E6               	subwfb	postinc1,w,c
  2675  0018E8  50DE               	movf	postinc2,w,c
  2676  0018EA  58E6               	subwfb	postinc1,w,c
  2677  0018EC  50DE               	movf	postinc2,w,c
  2678  0018EE  58E6               	subwfb	postinc1,w,c
  2679  0018F0  B0D8               	btfsc	status,0,c
  2680  0018F2  D014               	goto	l6242
  2681                           
  2682                           ; BSR set to: 0
  2683  0018F4  EE20 F006          	lfsr	2,6
  2684  0018F8  516D               	movf	f_write@fp& (0+255),w,b
  2685  0018FA  26D9               	addwf	fsr2l,f,c
  2686  0018FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2687  0018FE  22DA               	addwfc	fsr2h,f,c
  2688  001900  EE10 F00A          	lfsr	1,10
  2689  001904  516D               	movf	f_write@fp& (0+255),w,b
  2690  001906  26E1               	addwf	fsr1l,f,c
  2691  001908  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2692  00190A  22E2               	addwfc	fsr1h,f,c
  2693  00190C  CFDE FFE6          	movff	postinc2,postinc1
  2694  001910  CFDE FFE6          	movff	postinc2,postinc1
  2695  001914  CFDE FFE6          	movff	postinc2,postinc1
  2696  001918  CFDE FFE6          	movff	postinc2,postinc1
  2697  00191C                     l6242:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;ff.c: 2801:  fp->flag |= 0x20;
  2701  00191C  EE20 F004          	lfsr	2,4
  2702  001920  516D               	movf	f_write@fp& (0+255),w,b
  2703  001922  26D9               	addwf	fsr2l,f,c
  2704  001924  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2705  001926  22DA               	addwfc	fsr2h,f,c
  2706  001928  0E00               	movlw	0
  2707  00192A  8ADB               	bsf	plusw2,5,c
  2708                           
  2709                           ; BSR set to: 0
  2710  00192C  0012               	return		;funcret
  2711  00192E                     __end_of_f_write:
  2712                           	opt callstack 0
  2713                           
  2714 ;; *************** function ___xxtofl *****************
  2715 ;; Defined at:
  2716 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\xxtofl.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  sign            1    wreg     unsigned char 
  2719 ;;  val             4    0[COMRAM] long 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  sign            1    8[COMRAM] unsigned char 
  2722 ;;  arg             4   10[COMRAM] unsigned long 
  2723 ;;  exp             1    9[COMRAM] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  4    0[COMRAM] unsigned char 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2733 ;;      Params:         4       0       0       0       0       0       0       0       0
  2734 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2735 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2736 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2737 ;;Total ram usage:       14 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_grabador
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text5
  2747  004A30                     __ptext5:
  2748                           	opt callstack 0
  2749  004A30                     ___xxtofl:
  2750                           	opt callstack 28
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;incstack = 0
  2754                           ;___xxtofl@sign stored from wreg
  2755  004A30  6E09               	movwf	___xxtofl@sign,c
  2756  004A32  5009               	movf	___xxtofl@sign,w,c
  2757  004A34  A4D8               	btfss	status,2,c
  2758  004A36  AE04               	btfss	___xxtofl@val+3,7,c
  2759  004A38  D01A               	goto	l1568
  2760  004A3A  C001  F005         	movff	___xxtofl@val,??___xxtofl
  2761  004A3E  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  2762  004A42  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  2763  004A46  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  2764  004A4A  1E05               	comf	??___xxtofl,f,c
  2765  004A4C  1E06               	comf	??___xxtofl+1,f,c
  2766  004A4E  1E07               	comf	??___xxtofl+2,f,c
  2767  004A50  1E08               	comf	??___xxtofl+3,f,c
  2768  004A52  2A05               	incf	??___xxtofl,f,c
  2769  004A54  0E00               	movlw	0
  2770  004A56  2206               	addwfc	??___xxtofl+1,f,c
  2771  004A58  2207               	addwfc	??___xxtofl+2,f,c
  2772  004A5A  2208               	addwfc	??___xxtofl+3,f,c
  2773  004A5C  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  2774  004A60  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  2775  004A64  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  2776  004A68  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  2777  004A6C  D008               	goto	l6566
  2778  004A6E                     l1568:
  2779  004A6E  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  2780  004A72  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  2781  004A76  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  2782  004A7A  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  2783  004A7E                     l6566:
  2784  004A7E  5001               	movf	___xxtofl@val,w,c
  2785  004A80  1002               	iorwf	___xxtofl@val+1,w,c
  2786  004A82  1003               	iorwf	___xxtofl@val+2,w,c
  2787  004A84  1004               	iorwf	___xxtofl@val+3,w,c
  2788  004A86  A4D8               	btfss	status,2,c
  2789  004A88  D009               	goto	l6572
  2790  004A8A  0E00               	movlw	0
  2791  004A8C  6E01               	movwf	?___xxtofl,c
  2792  004A8E  0E00               	movlw	0
  2793  004A90  6E02               	movwf	?___xxtofl+1,c
  2794  004A92  0E00               	movlw	0
  2795  004A94  6E03               	movwf	?___xxtofl+2,c
  2796  004A96  0E00               	movlw	0
  2797  004A98  6E04               	movwf	?___xxtofl+3,c
  2798  004A9A  0012               	return	
  2799  004A9C                     l6572:
  2800  004A9C  0E96               	movlw	150
  2801  004A9E  6E0A               	movwf	___xxtofl@exp,c
  2802  004AA0  D006               	goto	l6576
  2803  004AA2                     l6574:
  2804  004AA2  2A0A               	incf	___xxtofl@exp,f,c
  2805  004AA4  90D8               	bcf	status,0,c
  2806  004AA6  320E               	rrcf	___xxtofl@arg+3,f,c
  2807  004AA8  320D               	rrcf	___xxtofl@arg+2,f,c
  2808  004AAA  320C               	rrcf	___xxtofl@arg+1,f,c
  2809  004AAC  320B               	rrcf	___xxtofl@arg,f,c
  2810  004AAE                     l6576:
  2811  004AAE  0E00               	movlw	0
  2812  004AB0  140B               	andwf	___xxtofl@arg,w,c
  2813  004AB2  6E05               	movwf	??___xxtofl& (0+255),c
  2814  004AB4  0E00               	movlw	0
  2815  004AB6  140C               	andwf	___xxtofl@arg+1,w,c
  2816  004AB8  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  2817  004ABA  0E00               	movlw	0
  2818  004ABC  140D               	andwf	___xxtofl@arg+2,w,c
  2819  004ABE  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  2820  004AC0  0EFE               	movlw	254
  2821  004AC2  140E               	andwf	___xxtofl@arg+3,w,c
  2822  004AC4  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  2823  004AC6  5005               	movf	??___xxtofl,w,c
  2824  004AC8  1006               	iorwf	??___xxtofl+1,w,c
  2825  004ACA  1007               	iorwf	??___xxtofl+2,w,c
  2826  004ACC  1008               	iorwf	??___xxtofl+3,w,c
  2827  004ACE  B4D8               	btfsc	status,2,c
  2828  004AD0  D00D               	goto	l1575
  2829  004AD2  D7E7               	goto	l6574
  2830  004AD4                     l6578:
  2831  004AD4  2A0A               	incf	___xxtofl@exp,f,c
  2832  004AD6  0E01               	movlw	1
  2833  004AD8  260B               	addwf	___xxtofl@arg,f,c
  2834  004ADA  0E00               	movlw	0
  2835  004ADC  220C               	addwfc	___xxtofl@arg+1,f,c
  2836  004ADE  220D               	addwfc	___xxtofl@arg+2,f,c
  2837  004AE0  220E               	addwfc	___xxtofl@arg+3,f,c
  2838  004AE2  90D8               	bcf	status,0,c
  2839  004AE4  320E               	rrcf	___xxtofl@arg+3,f,c
  2840  004AE6  320D               	rrcf	___xxtofl@arg+2,f,c
  2841  004AE8  320C               	rrcf	___xxtofl@arg+1,f,c
  2842  004AEA  320B               	rrcf	___xxtofl@arg,f,c
  2843  004AEC                     l1575:
  2844  004AEC  0E00               	movlw	0
  2845  004AEE  140B               	andwf	___xxtofl@arg,w,c
  2846  004AF0  6E05               	movwf	??___xxtofl& (0+255),c
  2847  004AF2  0E00               	movlw	0
  2848  004AF4  140C               	andwf	___xxtofl@arg+1,w,c
  2849  004AF6  6E06               	movwf	(??___xxtofl+1)& (0+255),c
  2850  004AF8  0E00               	movlw	0
  2851  004AFA  140D               	andwf	___xxtofl@arg+2,w,c
  2852  004AFC  6E07               	movwf	(??___xxtofl+2)& (0+255),c
  2853  004AFE  0EFF               	movlw	255
  2854  004B00  140E               	andwf	___xxtofl@arg+3,w,c
  2855  004B02  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  2856  004B04  5005               	movf	??___xxtofl,w,c
  2857  004B06  1006               	iorwf	??___xxtofl+1,w,c
  2858  004B08  1007               	iorwf	??___xxtofl+2,w,c
  2859  004B0A  1008               	iorwf	??___xxtofl+3,w,c
  2860  004B0C  B4D8               	btfsc	status,2,c
  2861  004B0E  D007               	goto	l6586
  2862  004B10  D7E1               	goto	l6578
  2863  004B12                     l6584:
  2864  004B12  060A               	decf	___xxtofl@exp,f,c
  2865  004B14  90D8               	bcf	status,0,c
  2866  004B16  360B               	rlcf	___xxtofl@arg,f,c
  2867  004B18  360C               	rlcf	___xxtofl@arg+1,f,c
  2868  004B1A  360D               	rlcf	___xxtofl@arg+2,f,c
  2869  004B1C  360E               	rlcf	___xxtofl@arg+3,f,c
  2870  004B1E                     l6586:
  2871  004B1E  BE0D               	btfsc	___xxtofl@arg+2,7,c
  2872  004B20  D003               	goto	u8980
  2873  004B22  0E02               	movlw	2
  2874  004B24  600A               	cpfslt	___xxtofl@exp,c
  2875  004B26  D7F5               	goto	l6584
  2876  004B28                     u8980:
  2877  004B28  A00A               	btfss	___xxtofl@exp,0,c
  2878  004B2A  9E0D               	bcf	___xxtofl@arg+2,7,c
  2879  004B2C  90D8               	bcf	status,0,c
  2880  004B2E  320A               	rrcf	___xxtofl@exp,f,c
  2881  004B30  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  2882  004B34  6A06               	clrf	(??___xxtofl+1)& (0+255),c
  2883  004B36  6A07               	clrf	(??___xxtofl+2)& (0+255),c
  2884  004B38  6A08               	clrf	(??___xxtofl+3)& (0+255),c
  2885  004B3A  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  2886  004B3E  6A07               	clrf	??___xxtofl+2,c
  2887  004B40  6A06               	clrf	??___xxtofl+1,c
  2888  004B42  6A05               	clrf	??___xxtofl,c
  2889  004B44  5005               	movf	??___xxtofl,w,c
  2890  004B46  120B               	iorwf	___xxtofl@arg,f,c
  2891  004B48  5006               	movf	??___xxtofl+1,w,c
  2892  004B4A  120C               	iorwf	___xxtofl@arg+1,f,c
  2893  004B4C  5007               	movf	??___xxtofl+2,w,c
  2894  004B4E  120D               	iorwf	___xxtofl@arg+2,f,c
  2895  004B50  5008               	movf	??___xxtofl+3,w,c
  2896  004B52  120E               	iorwf	___xxtofl@arg+3,f,c
  2897  004B54  5009               	movf	___xxtofl@sign,w,c
  2898  004B56  A4D8               	btfss	status,2,c
  2899  004B58  AE04               	btfss	___xxtofl@val+3,7,c
  2900  004B5A  D001               	goto	l6602
  2901  004B5C  8E0E               	bsf	___xxtofl@arg+3,7,c
  2902  004B5E                     l6602:
  2903  004B5E  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  2904  004B62  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  2905  004B66  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  2906  004B6A  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  2907  004B6E  0012               	return		;funcret
  2908  004B70                     __end_of___xxtofl:
  2909                           	opt callstack 0
  2910                           
  2911 ;; *************** function ___flmul *****************
  2912 ;; Defined at:
  2913 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcmul.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  b               4   14[COMRAM] unsigned char 
  2916 ;;  a               4   18[COMRAM] unsigned char 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  prod            4   33[COMRAM] struct .
  2919 ;;  grs             4   27[COMRAM] unsigned long 
  2920 ;;  temp            2   37[COMRAM] struct .
  2921 ;;  bexp            1   32[COMRAM] unsigned char 
  2922 ;;  aexp            1   31[COMRAM] unsigned char 
  2923 ;;  sign            1   26[COMRAM] unsigned char 
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  4   14[COMRAM] unsigned char 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0, prodl, prodh
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2933 ;;      Params:         8       0       0       0       0       0       0       0       0
  2934 ;;      Locals:        13       0       0       0       0       0       0       0       0
  2935 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2936 ;;      Totals:        25       0       0       0       0       0       0       0       0
  2937 ;;Total ram usage:       25 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; This function calls:
  2940 ;;		Nothing
  2941 ;; This function is called by:
  2942 ;;		_grabador
  2943 ;; This function uses a non-reentrant model
  2944 ;;
  2945                           
  2946                           	psect	text6
  2947  003342                     __ptext6:
  2948                           	opt callstack 0
  2949  003342                     ___flmul:
  2950                           	opt callstack 28
  2951                           
  2952                           ;incstack = 0
  2953  003342  5012               	movf	___flmul@b+3,w,c
  2954  003344  0B80               	andlw	128
  2955  003346  6E1B               	movwf	___flmul@sign,c
  2956  003348  5012               	movf	___flmul@b+3,w,c
  2957  00334A  2412               	addwf	___flmul@b+3,w,c
  2958  00334C  6E21               	movwf	___flmul@bexp,c
  2959  00334E  BE11               	btfsc	___flmul@b+2,7,c
  2960  003350  8021               	bsf	___flmul@bexp,0,c
  2961  003352  5021               	movf	___flmul@bexp,w,c
  2962  003354  B4D8               	btfsc	status,2,c
  2963  003356  D00D               	goto	l6444
  2964  003358  2821               	incf	___flmul@bexp,w,c
  2965  00335A  A4D8               	btfss	status,2,c
  2966  00335C  D008               	goto	l6442
  2967  00335E  0E00               	movlw	0
  2968  003360  6E0F               	movwf	___flmul@b,c
  2969  003362  0E00               	movlw	0
  2970  003364  6E10               	movwf	___flmul@b+1,c
  2971  003366  0E00               	movlw	0
  2972  003368  6E11               	movwf	___flmul@b+2,c
  2973  00336A  0E00               	movlw	0
  2974  00336C  6E12               	movwf	___flmul@b+3,c
  2975  00336E                     l6442:
  2976  00336E  8E11               	bsf	___flmul@b+2,7,c
  2977  003370  D008               	goto	l6446
  2978  003372                     l6444:
  2979  003372  0E00               	movlw	0
  2980  003374  6E0F               	movwf	___flmul@b,c
  2981  003376  0E00               	movlw	0
  2982  003378  6E10               	movwf	___flmul@b+1,c
  2983  00337A  0E00               	movlw	0
  2984  00337C  6E11               	movwf	___flmul@b+2,c
  2985  00337E  0E00               	movlw	0
  2986  003380  6E12               	movwf	___flmul@b+3,c
  2987  003382                     l6446:
  2988  003382  5016               	movf	___flmul@a+3,w,c
  2989  003384  0B80               	andlw	128
  2990  003386  1A1B               	xorwf	___flmul@sign,f,c
  2991  003388  5016               	movf	___flmul@a+3,w,c
  2992  00338A  2416               	addwf	___flmul@a+3,w,c
  2993  00338C  6E20               	movwf	___flmul@aexp,c
  2994  00338E  BE15               	btfsc	___flmul@a+2,7,c
  2995  003390  8020               	bsf	___flmul@aexp,0,c
  2996  003392  5020               	movf	___flmul@aexp,w,c
  2997  003394  B4D8               	btfsc	status,2,c
  2998  003396  D00D               	goto	l6462
  2999  003398  2820               	incf	___flmul@aexp,w,c
  3000  00339A  A4D8               	btfss	status,2,c
  3001  00339C  D008               	goto	l6460
  3002  00339E  0E00               	movlw	0
  3003  0033A0  6E13               	movwf	___flmul@a,c
  3004  0033A2  0E00               	movlw	0
  3005  0033A4  6E14               	movwf	___flmul@a+1,c
  3006  0033A6  0E00               	movlw	0
  3007  0033A8  6E15               	movwf	___flmul@a+2,c
  3008  0033AA  0E00               	movlw	0
  3009  0033AC  6E16               	movwf	___flmul@a+3,c
  3010  0033AE                     l6460:
  3011  0033AE  8E15               	bsf	___flmul@a+2,7,c
  3012  0033B0  D008               	goto	l1527
  3013  0033B2                     l6462:
  3014  0033B2  0E00               	movlw	0
  3015  0033B4  6E13               	movwf	___flmul@a,c
  3016  0033B6  0E00               	movlw	0
  3017  0033B8  6E14               	movwf	___flmul@a+1,c
  3018  0033BA  0E00               	movlw	0
  3019  0033BC  6E15               	movwf	___flmul@a+2,c
  3020  0033BE  0E00               	movlw	0
  3021  0033C0  6E16               	movwf	___flmul@a+3,c
  3022  0033C2                     l1527:
  3023  0033C2  5020               	movf	___flmul@aexp,w,c
  3024  0033C4  B4D8               	btfsc	status,2,c
  3025  0033C6  D003               	goto	u8800
  3026  0033C8  5021               	movf	___flmul@bexp,w,c
  3027  0033CA  A4D8               	btfss	status,2,c
  3028  0033CC  D009               	goto	l6470
  3029  0033CE                     u8800:
  3030  0033CE  0E00               	movlw	0
  3031  0033D0  6E0F               	movwf	?___flmul,c
  3032  0033D2  0E00               	movlw	0
  3033  0033D4  6E10               	movwf	?___flmul+1,c
  3034  0033D6  0E00               	movlw	0
  3035  0033D8  6E11               	movwf	?___flmul+2,c
  3036  0033DA  0E00               	movlw	0
  3037  0033DC  6E12               	movwf	?___flmul+3,c
  3038  0033DE  0012               	return	
  3039  0033E0                     l6470:
  3040  0033E0  5015               	movf	___flmul@a+2,w,c
  3041  0033E2  020F               	mulwf	___flmul@b,c
  3042  0033E4  CFF3 F026          	movff	prodl,___flmul@temp
  3043  0033E8  CFF4 F027          	movff	prodh,___flmul@temp+1
  3044  0033EC  5026               	movf	___flmul@temp,w,c
  3045  0033EE  6E1C               	movwf	___flmul@grs,c
  3046  0033F0  6A1D               	clrf	___flmul@grs+1,c
  3047  0033F2  6A1E               	clrf	___flmul@grs+2,c
  3048  0033F4  6A1F               	clrf	___flmul@grs+3,c
  3049  0033F6  5027               	movf	___flmul@temp+1,w,c
  3050  0033F8  6E22               	movwf	___flmul@prod,c
  3051  0033FA  6A23               	clrf	___flmul@prod+1,c
  3052  0033FC  6A24               	clrf	___flmul@prod+2,c
  3053  0033FE  6A25               	clrf	___flmul@prod+3,c
  3054  003400  5014               	movf	___flmul@a+1,w,c
  3055  003402  0210               	mulwf	___flmul@b+1,c
  3056  003404  CFF3 F026          	movff	prodl,___flmul@temp
  3057  003408  CFF4 F027          	movff	prodh,___flmul@temp+1
  3058  00340C  5026               	movf	___flmul@temp,w,c
  3059  00340E  261C               	addwf	___flmul@grs,f,c
  3060  003410  0E00               	movlw	0
  3061  003412  221D               	addwfc	___flmul@grs+1,f,c
  3062  003414  221E               	addwfc	___flmul@grs+2,f,c
  3063  003416  221F               	addwfc	___flmul@grs+3,f,c
  3064  003418  5027               	movf	___flmul@temp+1,w,c
  3065  00341A  2622               	addwf	___flmul@prod,f,c
  3066  00341C  0E00               	movlw	0
  3067  00341E  2223               	addwfc	___flmul@prod+1,f,c
  3068  003420  2224               	addwfc	___flmul@prod+2,f,c
  3069  003422  2225               	addwfc	___flmul@prod+3,f,c
  3070  003424  5013               	movf	___flmul@a,w,c
  3071  003426  0211               	mulwf	___flmul@b+2,c
  3072  003428  CFF3 F026          	movff	prodl,___flmul@temp
  3073  00342C  CFF4 F027          	movff	prodh,___flmul@temp+1
  3074  003430  5026               	movf	___flmul@temp,w,c
  3075  003432  261C               	addwf	___flmul@grs,f,c
  3076  003434  0E00               	movlw	0
  3077  003436  221D               	addwfc	___flmul@grs+1,f,c
  3078  003438  221E               	addwfc	___flmul@grs+2,f,c
  3079  00343A  221F               	addwfc	___flmul@grs+3,f,c
  3080  00343C  5027               	movf	___flmul@temp+1,w,c
  3081  00343E  2622               	addwf	___flmul@prod,f,c
  3082  003440  0E00               	movlw	0
  3083  003442  2223               	addwfc	___flmul@prod+1,f,c
  3084  003444  2224               	addwfc	___flmul@prod+2,f,c
  3085  003446  2225               	addwfc	___flmul@prod+3,f,c
  3086  003448  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3087  00344C  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3088  003450  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3089  003454  6A1C               	clrf	___flmul@grs,c
  3090  003456  5013               	movf	___flmul@a,w,c
  3091  003458  0210               	mulwf	___flmul@b+1,c
  3092  00345A  CFF3 F026          	movff	prodl,___flmul@temp
  3093  00345E  CFF4 F027          	movff	prodh,___flmul@temp+1
  3094  003462  5026               	movf	___flmul@temp,w,c
  3095  003464  261C               	addwf	___flmul@grs,f,c
  3096  003466  5027               	movf	___flmul@temp+1,w,c
  3097  003468  221D               	addwfc	___flmul@grs+1,f,c
  3098  00346A  0E00               	movlw	0
  3099  00346C  221E               	addwfc	___flmul@grs+2,f,c
  3100  00346E  0E00               	movlw	0
  3101  003470  221F               	addwfc	___flmul@grs+3,f,c
  3102  003472  5014               	movf	___flmul@a+1,w,c
  3103  003474  020F               	mulwf	___flmul@b,c
  3104  003476  CFF3 F026          	movff	prodl,___flmul@temp
  3105  00347A  CFF4 F027          	movff	prodh,___flmul@temp+1
  3106  00347E  5026               	movf	___flmul@temp,w,c
  3107  003480  261C               	addwf	___flmul@grs,f,c
  3108  003482  5027               	movf	___flmul@temp+1,w,c
  3109  003484  221D               	addwfc	___flmul@grs+1,f,c
  3110  003486  0E00               	movlw	0
  3111  003488  221E               	addwfc	___flmul@grs+2,f,c
  3112  00348A  0E00               	movlw	0
  3113  00348C  221F               	addwfc	___flmul@grs+3,f,c
  3114  00348E  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3115  003492  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3116  003496  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3117  00349A  6A1C               	clrf	___flmul@grs,c
  3118  00349C  5013               	movf	___flmul@a,w,c
  3119  00349E  020F               	mulwf	___flmul@b,c
  3120  0034A0  CFF3 F026          	movff	prodl,___flmul@temp
  3121  0034A4  CFF4 F027          	movff	prodh,___flmul@temp+1
  3122  0034A8  5026               	movf	___flmul@temp,w,c
  3123  0034AA  261C               	addwf	___flmul@grs,f,c
  3124  0034AC  5027               	movf	___flmul@temp+1,w,c
  3125  0034AE  221D               	addwfc	___flmul@grs+1,f,c
  3126  0034B0  0E00               	movlw	0
  3127  0034B2  221E               	addwfc	___flmul@grs+2,f,c
  3128  0034B4  0E00               	movlw	0
  3129  0034B6  221F               	addwfc	___flmul@grs+3,f,c
  3130  0034B8  5015               	movf	___flmul@a+2,w,c
  3131  0034BA  0210               	mulwf	___flmul@b+1,c
  3132  0034BC  CFF3 F026          	movff	prodl,___flmul@temp
  3133  0034C0  CFF4 F027          	movff	prodh,___flmul@temp+1
  3134  0034C4  5026               	movf	___flmul@temp,w,c
  3135  0034C6  2622               	addwf	___flmul@prod,f,c
  3136  0034C8  5027               	movf	___flmul@temp+1,w,c
  3137  0034CA  2223               	addwfc	___flmul@prod+1,f,c
  3138  0034CC  0E00               	movlw	0
  3139  0034CE  2224               	addwfc	___flmul@prod+2,f,c
  3140  0034D0  0E00               	movlw	0
  3141  0034D2  2225               	addwfc	___flmul@prod+3,f,c
  3142  0034D4  5014               	movf	___flmul@a+1,w,c
  3143  0034D6  0211               	mulwf	___flmul@b+2,c
  3144  0034D8  CFF3 F026          	movff	prodl,___flmul@temp
  3145  0034DC  CFF4 F027          	movff	prodh,___flmul@temp+1
  3146  0034E0  5026               	movf	___flmul@temp,w,c
  3147  0034E2  2622               	addwf	___flmul@prod,f,c
  3148  0034E4  5027               	movf	___flmul@temp+1,w,c
  3149  0034E6  2223               	addwfc	___flmul@prod+1,f,c
  3150  0034E8  0E00               	movlw	0
  3151  0034EA  2224               	addwfc	___flmul@prod+2,f,c
  3152  0034EC  0E00               	movlw	0
  3153  0034EE  2225               	addwfc	___flmul@prod+3,f,c
  3154  0034F0  5015               	movf	___flmul@a+2,w,c
  3155  0034F2  0211               	mulwf	___flmul@b+2,c
  3156  0034F4  CFF3 F026          	movff	prodl,___flmul@temp
  3157  0034F8  CFF4 F027          	movff	prodh,___flmul@temp+1
  3158  0034FC  5026               	movf	___flmul@temp,w,c
  3159  0034FE  6E17               	movwf	??___flmul& (0+255),c
  3160  003500  5027               	movf	___flmul@temp+1,w,c
  3161  003502  6E18               	movwf	(??___flmul+1)& (0+255),c
  3162  003504  6A19               	clrf	(??___flmul+2)& (0+255),c
  3163  003506  6A1A               	clrf	(??___flmul+3)& (0+255),c
  3164  003508  C019  F01A         	movff	??___flmul+2,??___flmul+3
  3165  00350C  C018  F019         	movff	??___flmul+1,??___flmul+2
  3166  003510  C017  F018         	movff	??___flmul,??___flmul+1
  3167  003514  6A17               	clrf	??___flmul,c
  3168  003516  5017               	movf	??___flmul,w,c
  3169  003518  2622               	addwf	___flmul@prod,f,c
  3170  00351A  5018               	movf	??___flmul+1,w,c
  3171  00351C  2223               	addwfc	___flmul@prod+1,f,c
  3172  00351E  5019               	movf	??___flmul+2,w,c
  3173  003520  2224               	addwfc	___flmul@prod+2,f,c
  3174  003522  501A               	movf	??___flmul+3,w,c
  3175  003524  2225               	addwfc	___flmul@prod+3,f,c
  3176  003526  C01C  F017         	movff	___flmul@grs,??___flmul
  3177  00352A  C01D  F018         	movff	___flmul@grs+1,??___flmul+1
  3178  00352E  C01E  F019         	movff	___flmul@grs+2,??___flmul+2
  3179  003532  C01F  F01A         	movff	___flmul@grs+3,??___flmul+3
  3180  003536  0E19               	movlw	25
  3181  003538  D005               	goto	u8810
  3182  00353A                     u8815:
  3183  00353A  90D8               	bcf	status,0,c
  3184  00353C  321A               	rrcf	??___flmul+3,f,c
  3185  00353E  3219               	rrcf	??___flmul+2,f,c
  3186  003540  3218               	rrcf	??___flmul+1,f,c
  3187  003542  3217               	rrcf	??___flmul,f,c
  3188  003544                     u8810:
  3189  003544  2EE8               	decfsz	wreg,f,c
  3190  003546  D7F9               	goto	u8815
  3191  003548  5017               	movf	??___flmul,w,c
  3192  00354A  2622               	addwf	___flmul@prod,f,c
  3193  00354C  5018               	movf	??___flmul+1,w,c
  3194  00354E  2223               	addwfc	___flmul@prod+1,f,c
  3195  003550  5019               	movf	??___flmul+2,w,c
  3196  003552  2224               	addwfc	___flmul@prod+2,f,c
  3197  003554  501A               	movf	??___flmul+3,w,c
  3198  003556  2225               	addwfc	___flmul@prod+3,f,c
  3199  003558  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  3200  00355C  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  3201  003560  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  3202  003564  6A1C               	clrf	___flmul@grs,c
  3203  003566  5020               	movf	___flmul@aexp,w,c
  3204  003568  C021  F017         	movff	___flmul@bexp,??___flmul
  3205  00356C  6A18               	clrf	(??___flmul+1)& (0+255),c
  3206  00356E  2617               	addwf	??___flmul,f,c
  3207  003570  0E00               	movlw	0
  3208  003572  2218               	addwfc	??___flmul+1,f,c
  3209  003574  0E82               	movlw	130
  3210  003576  2417               	addwf	??___flmul,w,c
  3211  003578  6E26               	movwf	___flmul@temp,c
  3212  00357A  0EFF               	movlw	255
  3213  00357C  2018               	addwfc	??___flmul+1,w,c
  3214  00357E  6E27               	movwf	___flmul@temp+1,c
  3215  003580  D00F               	goto	l6518
  3216  003582                     l6512:
  3217  003582  90D8               	bcf	status,0,c
  3218  003584  3622               	rlcf	___flmul@prod,f,c
  3219  003586  3623               	rlcf	___flmul@prod+1,f,c
  3220  003588  3624               	rlcf	___flmul@prod+2,f,c
  3221  00358A  3625               	rlcf	___flmul@prod+3,f,c
  3222  00358C  BE1F               	btfsc	___flmul@grs+3,7,c
  3223  00358E  8022               	bsf	___flmul@prod,0,c
  3224  003590  90D8               	bcf	status,0,c
  3225  003592  361C               	rlcf	___flmul@grs,f,c
  3226  003594  361D               	rlcf	___flmul@grs+1,f,c
  3227  003596  361E               	rlcf	___flmul@grs+2,f,c
  3228  003598  361F               	rlcf	___flmul@grs+3,f,c
  3229  00359A  0626               	decf	___flmul@temp,f,c
  3230  00359C  A0D8               	btfss	status,0,c
  3231  00359E  0627               	decf	___flmul@temp+1,f,c
  3232  0035A0                     l6518:
  3233  0035A0  AE24               	btfss	___flmul@prod+2,7,c
  3234  0035A2  D7EF               	goto	l6512
  3235  0035A4  0E00               	movlw	0
  3236  0035A6  6E20               	movwf	___flmul@aexp,c
  3237  0035A8  AE1F               	btfss	___flmul@grs+3,7,c
  3238  0035AA  D017               	goto	l1536
  3239  0035AC  0EFF               	movlw	255
  3240  0035AE  141C               	andwf	___flmul@grs,w,c
  3241  0035B0  6E17               	movwf	??___flmul& (0+255),c
  3242  0035B2  0EFF               	movlw	255
  3243  0035B4  141D               	andwf	___flmul@grs+1,w,c
  3244  0035B6  6E18               	movwf	(??___flmul+1)& (0+255),c
  3245  0035B8  0EFF               	movlw	255
  3246  0035BA  141E               	andwf	___flmul@grs+2,w,c
  3247  0035BC  6E19               	movwf	(??___flmul+2)& (0+255),c
  3248  0035BE  0E7F               	movlw	127
  3249  0035C0  141F               	andwf	___flmul@grs+3,w,c
  3250  0035C2  6E1A               	movwf	(??___flmul+3)& (0+255),c
  3251  0035C4  5017               	movf	??___flmul,w,c
  3252  0035C6  1018               	iorwf	??___flmul+1,w,c
  3253  0035C8  1019               	iorwf	??___flmul+2,w,c
  3254  0035CA  101A               	iorwf	??___flmul+3,w,c
  3255  0035CC  B4D8               	btfsc	status,2,c
  3256  0035CE  D003               	goto	l1537
  3257  0035D0                     u8850:
  3258  0035D0  0E01               	movlw	1
  3259  0035D2  6E20               	movwf	___flmul@aexp,c
  3260  0035D4  D002               	goto	l1536
  3261  0035D6                     l1537:
  3262  0035D6  B022               	btfsc	___flmul@prod,0,c
  3263  0035D8  D7FB               	goto	u8850
  3264  0035DA                     l1536:
  3265  0035DA  5020               	movf	___flmul@aexp,w,c
  3266  0035DC  B4D8               	btfsc	status,2,c
  3267  0035DE  D01F               	goto	l6538
  3268  0035E0  0E01               	movlw	1
  3269  0035E2  2622               	addwf	___flmul@prod,f,c
  3270  0035E4  0E00               	movlw	0
  3271  0035E6  2223               	addwfc	___flmul@prod+1,f,c
  3272  0035E8  2224               	addwfc	___flmul@prod+2,f,c
  3273  0035EA  2225               	addwfc	___flmul@prod+3,f,c
  3274  0035EC  A025               	btfss	___flmul@prod+3,0,c
  3275  0035EE  D017               	goto	l6538
  3276  0035F0  C022  F017         	movff	___flmul@prod,??___flmul
  3277  0035F4  C023  F018         	movff	___flmul@prod+1,??___flmul+1
  3278  0035F8  C024  F019         	movff	___flmul@prod+2,??___flmul+2
  3279  0035FC  C025  F01A         	movff	___flmul@prod+3,??___flmul+3
  3280  003600  341A               	rlcf	??___flmul+3,w,c
  3281  003602  321A               	rrcf	??___flmul+3,f,c
  3282  003604  3219               	rrcf	??___flmul+2,f,c
  3283  003606  3218               	rrcf	??___flmul+1,f,c
  3284  003608  3217               	rrcf	??___flmul,f,c
  3285  00360A  C017  F022         	movff	??___flmul,___flmul@prod
  3286  00360E  C018  F023         	movff	??___flmul+1,___flmul@prod+1
  3287  003612  C019  F024         	movff	??___flmul+2,___flmul@prod+2
  3288  003616  C01A  F025         	movff	??___flmul+3,___flmul@prod+3
  3289  00361A  4A26               	infsnz	___flmul@temp,f,c
  3290  00361C  2A27               	incf	___flmul@temp+1,f,c
  3291  00361E                     l6538:
  3292  00361E  BE27               	btfsc	___flmul@temp+1,7,c
  3293  003620  D00D               	goto	l6542
  3294  003622  5027               	movf	___flmul@temp+1,w,c
  3295  003624  E103               	bnz	u8890
  3296  003626  2826               	incf	___flmul@temp,w,c
  3297  003628  A0D8               	btfss	status,0,c
  3298  00362A  D008               	goto	l6542
  3299  00362C                     u8890:
  3300  00362C  0E00               	movlw	0
  3301  00362E  6E22               	movwf	___flmul@prod,c
  3302  003630  0E00               	movlw	0
  3303  003632  6E23               	movwf	___flmul@prod+1,c
  3304  003634  0E80               	movlw	128
  3305  003636  6E24               	movwf	___flmul@prod+2,c
  3306  003638  0E7F               	movlw	127
  3307  00363A  D020               	goto	L2
  3308  00363C                     l6542:
  3309  00363C  BE27               	btfsc	___flmul@temp+1,7,c
  3310  00363E  D005               	goto	u8900
  3311  003640  5027               	movf	___flmul@temp+1,w,c
  3312  003642  E10E               	bnz	l1544
  3313  003644  0426               	decf	___flmul@temp,w,c
  3314  003646  B0D8               	btfsc	status,0,c
  3315  003648  D00B               	goto	l1544
  3316  00364A                     u8900:
  3317  00364A  0E00               	movlw	0
  3318  00364C  6E22               	movwf	___flmul@prod,c
  3319  00364E  0E00               	movlw	0
  3320  003650  6E23               	movwf	___flmul@prod+1,c
  3321  003652  0E00               	movlw	0
  3322  003654  6E24               	movwf	___flmul@prod+2,c
  3323  003656  0E00               	movlw	0
  3324  003658  6E25               	movwf	___flmul@prod+3,c
  3325  00365A  0E00               	movlw	0
  3326  00365C  6E1B               	movwf	___flmul@sign,c
  3327  00365E  D00F               	goto	l6554
  3328  003660                     l1544:
  3329  003660  C026  F021         	movff	___flmul@temp,___flmul@bexp
  3330  003664  0EFF               	movlw	255
  3331  003666  1622               	andwf	___flmul@prod,f,c
  3332  003668  0EFF               	movlw	255
  3333  00366A  1623               	andwf	___flmul@prod+1,f,c
  3334  00366C  0E7F               	movlw	127
  3335  00366E  1624               	andwf	___flmul@prod+2,f,c
  3336  003670  0E00               	movlw	0
  3337  003672  1625               	andwf	___flmul@prod+3,f,c
  3338  003674  B021               	btfsc	___flmul@bexp,0,c
  3339  003676  8E24               	bsf	___flmul@prod+2,7,c
  3340  003678  90D8               	bcf	status,0,c
  3341  00367A  3021               	rrcf	___flmul@bexp,w,c
  3342  00367C                     L2:
  3343  00367C  6E25               	movwf	___flmul@prod+3,c
  3344  00367E                     l6554:
  3345  00367E  501B               	movf	___flmul@sign,w,c
  3346  003680  1225               	iorwf	___flmul@prod+3,f,c
  3347  003682  C022  F00F         	movff	___flmul@prod,?___flmul
  3348  003686  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  3349  00368A  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  3350  00368E  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  3351  003692  0012               	return		;funcret
  3352  003694                     __end_of___flmul:
  3353                           	opt callstack 0
  3354                           
  3355 ;; *************** function ___fldiv *****************
  3356 ;; Defined at:
  3357 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcdiv.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  b               4   39[COMRAM] unsigned char 
  3360 ;;  a               4   43[COMRAM] unsigned char 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  grs             4   58[COMRAM] unsigned long 
  3363 ;;  rem             4   51[COMRAM] unsigned long 
  3364 ;;  new_exp         2   56[COMRAM] short 
  3365 ;;  aexp            1   63[COMRAM] unsigned char 
  3366 ;;  bexp            1   62[COMRAM] unsigned char 
  3367 ;;  sign            1   55[COMRAM] unsigned char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  4   39[COMRAM] unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg, status,2, status,0
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3377 ;;      Params:         8       0       0       0       0       0       0       0       0
  3378 ;;      Locals:        13       0       0       0       0       0       0       0       0
  3379 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3380 ;;      Totals:        25       0       0       0       0       0       0       0       0
  3381 ;;Total ram usage:       25 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; This function calls:
  3384 ;;		Nothing
  3385 ;; This function is called by:
  3386 ;;		_grabador
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text7
  3391  003C50                     __ptext7:
  3392                           	opt callstack 0
  3393  003C50                     ___fldiv:
  3394                           	opt callstack 28
  3395                           
  3396                           ;incstack = 0
  3397  003C50  502B               	movf	___fldiv@b+3,w,c
  3398  003C52  0B80               	andlw	128
  3399  003C54  6E38               	movwf	___fldiv@sign,c
  3400  003C56  502B               	movf	___fldiv@b+3,w,c
  3401  003C58  242B               	addwf	___fldiv@b+3,w,c
  3402  003C5A  6E3F               	movwf	___fldiv@bexp,c
  3403  003C5C  BE2A               	btfsc	___fldiv@b+2,7,c
  3404  003C5E  803F               	bsf	___fldiv@bexp,0,c
  3405  003C60  503F               	movf	___fldiv@bexp,w,c
  3406  003C62  B4D8               	btfsc	status,2,c
  3407  003C64  D00D               	goto	l6308
  3408  003C66  283F               	incf	___fldiv@bexp,w,c
  3409  003C68  A4D8               	btfss	status,2,c
  3410  003C6A  D008               	goto	l6304
  3411  003C6C  0E00               	movlw	0
  3412  003C6E  6E28               	movwf	___fldiv@b,c
  3413  003C70  0E00               	movlw	0
  3414  003C72  6E29               	movwf	___fldiv@b+1,c
  3415  003C74  0E00               	movlw	0
  3416  003C76  6E2A               	movwf	___fldiv@b+2,c
  3417  003C78  0E00               	movlw	0
  3418  003C7A  6E2B               	movwf	___fldiv@b+3,c
  3419  003C7C                     l6304:
  3420  003C7C  8E2A               	bsf	___fldiv@b+2,7,c
  3421  003C7E  D006               	goto	L3
  3422  003C80                     l6308:
  3423  003C80  0E00               	movlw	0
  3424  003C82  6E28               	movwf	___fldiv@b,c
  3425  003C84  0E00               	movlw	0
  3426  003C86  6E29               	movwf	___fldiv@b+1,c
  3427  003C88  0E00               	movlw	0
  3428  003C8A  6E2A               	movwf	___fldiv@b+2,c
  3429  003C8C                     L3:
  3430  003C8C  0E00               	movlw	0
  3431  003C8E  6E2B               	movwf	___fldiv@b+3,c
  3432  003C90  502F               	movf	___fldiv@a+3,w,c
  3433  003C92  0B80               	andlw	128
  3434  003C94  1A38               	xorwf	___fldiv@sign,f,c
  3435  003C96  502F               	movf	___fldiv@a+3,w,c
  3436  003C98  242F               	addwf	___fldiv@a+3,w,c
  3437  003C9A  6E40               	movwf	___fldiv@aexp,c
  3438  003C9C  BE2E               	btfsc	___fldiv@a+2,7,c
  3439  003C9E  8040               	bsf	___fldiv@aexp,0,c
  3440  003CA0  5040               	movf	___fldiv@aexp,w,c
  3441  003CA2  B4D8               	btfsc	status,2,c
  3442  003CA4  D00D               	goto	l6328
  3443  003CA6  2840               	incf	___fldiv@aexp,w,c
  3444  003CA8  A4D8               	btfss	status,2,c
  3445  003CAA  D008               	goto	l6324
  3446  003CAC  0E00               	movlw	0
  3447  003CAE  6E2C               	movwf	___fldiv@a,c
  3448  003CB0  0E00               	movlw	0
  3449  003CB2  6E2D               	movwf	___fldiv@a+1,c
  3450  003CB4  0E00               	movlw	0
  3451  003CB6  6E2E               	movwf	___fldiv@a+2,c
  3452  003CB8  0E00               	movlw	0
  3453  003CBA  6E2F               	movwf	___fldiv@a+3,c
  3454  003CBC                     l6324:
  3455  003CBC  8E2E               	bsf	___fldiv@a+2,7,c
  3456  003CBE  D006               	goto	L4
  3457  003CC0                     l6328:
  3458  003CC0  0E00               	movlw	0
  3459  003CC2  6E2C               	movwf	___fldiv@a,c
  3460  003CC4  0E00               	movlw	0
  3461  003CC6  6E2D               	movwf	___fldiv@a+1,c
  3462  003CC8  0E00               	movlw	0
  3463  003CCA  6E2E               	movwf	___fldiv@a+2,c
  3464  003CCC                     L4:
  3465  003CCC  0E00               	movlw	0
  3466  003CCE  6E2F               	movwf	___fldiv@a+3,c
  3467  003CD0  502C               	movf	___fldiv@a,w,c
  3468  003CD2  102D               	iorwf	___fldiv@a+1,w,c
  3469  003CD4  102E               	iorwf	___fldiv@a+2,w,c
  3470  003CD6  102F               	iorwf	___fldiv@a+3,w,c
  3471  003CD8  A4D8               	btfss	status,2,c
  3472  003CDA  D017               	goto	l6342
  3473  003CDC  0E00               	movlw	0
  3474  003CDE  6E28               	movwf	___fldiv@b,c
  3475  003CE0  0E00               	movlw	0
  3476  003CE2  6E29               	movwf	___fldiv@b+1,c
  3477  003CE4  0E00               	movlw	0
  3478  003CE6  6E2A               	movwf	___fldiv@b+2,c
  3479  003CE8  0E00               	movlw	0
  3480  003CEA  6E2B               	movwf	___fldiv@b+3,c
  3481  003CEC  0E80               	movlw	128
  3482  003CEE  122A               	iorwf	___fldiv@b+2,f,c
  3483  003CF0  0E7F               	movlw	127
  3484  003CF2  122B               	iorwf	___fldiv@b+3,f,c
  3485  003CF4                     l6336:
  3486  003CF4  5038               	movf	___fldiv@sign,w,c
  3487  003CF6  122B               	iorwf	___fldiv@b+3,f,c
  3488  003CF8  C028  F028         	movff	___fldiv@b,?___fldiv
  3489  003CFC  C029  F029         	movff	___fldiv@b+1,?___fldiv+1
  3490  003D00  C02A  F02A         	movff	___fldiv@b+2,?___fldiv+2
  3491  003D04  C02B  F02B         	movff	___fldiv@b+3,?___fldiv+3
  3492  003D08  0012               	return	
  3493  003D0A                     l6342:
  3494  003D0A  503F               	movf	___fldiv@bexp,w,c
  3495  003D0C  A4D8               	btfss	status,2,c
  3496  003D0E  D009               	goto	l6350
  3497  003D10  0E00               	movlw	0
  3498  003D12  6E28               	movwf	?___fldiv,c
  3499  003D14  0E00               	movlw	0
  3500  003D16  6E29               	movwf	?___fldiv+1,c
  3501  003D18  0E00               	movlw	0
  3502  003D1A  6E2A               	movwf	?___fldiv+2,c
  3503  003D1C  0E00               	movlw	0
  3504  003D1E  6E2B               	movwf	?___fldiv+3,c
  3505  003D20  0012               	return	
  3506  003D22                     l6350:
  3507  003D22  5040               	movf	___fldiv@aexp,w,c
  3508  003D24  C03F  F030         	movff	___fldiv@bexp,??___fldiv
  3509  003D28  6A31               	clrf	(??___fldiv+1)& (0+255),c
  3510  003D2A  5E30               	subwf	??___fldiv,f,c
  3511  003D2C  0E00               	movlw	0
  3512  003D2E  5A31               	subwfb	??___fldiv+1,f,c
  3513  003D30  0E7F               	movlw	127
  3514  003D32  2430               	addwf	??___fldiv,w,c
  3515  003D34  6E39               	movwf	___fldiv@new_exp,c
  3516  003D36  0E00               	movlw	0
  3517  003D38  2031               	addwfc	??___fldiv+1,w,c
  3518  003D3A  6E3A               	movwf	___fldiv@new_exp+1,c
  3519  003D3C  C028  F034         	movff	___fldiv@b,___fldiv@rem
  3520  003D40  C029  F035         	movff	___fldiv@b+1,___fldiv@rem+1
  3521  003D44  C02A  F036         	movff	___fldiv@b+2,___fldiv@rem+2
  3522  003D48  C02B  F037         	movff	___fldiv@b+3,___fldiv@rem+3
  3523  003D4C  0E00               	movlw	0
  3524  003D4E  6E28               	movwf	___fldiv@b,c
  3525  003D50  0E00               	movlw	0
  3526  003D52  6E29               	movwf	___fldiv@b+1,c
  3527  003D54  0E00               	movlw	0
  3528  003D56  6E2A               	movwf	___fldiv@b+2,c
  3529  003D58  0E00               	movlw	0
  3530  003D5A  6E2B               	movwf	___fldiv@b+3,c
  3531  003D5C  0E00               	movlw	0
  3532  003D5E  6E3B               	movwf	___fldiv@grs,c
  3533  003D60  0E00               	movlw	0
  3534  003D62  6E3C               	movwf	___fldiv@grs+1,c
  3535  003D64  0E00               	movlw	0
  3536  003D66  6E3D               	movwf	___fldiv@grs+2,c
  3537  003D68  0E00               	movlw	0
  3538  003D6A  6E3E               	movwf	___fldiv@grs+3,c
  3539  003D6C  0E00               	movlw	0
  3540  003D6E  6E40               	movwf	___fldiv@aexp,c
  3541  003D70  D028               	goto	l1497
  3542  003D72                     l6360:
  3543  003D72  5040               	movf	___fldiv@aexp,w,c
  3544  003D74  B4D8               	btfsc	status,2,c
  3545  003D76  D011               	goto	l6368
  3546  003D78  90D8               	bcf	status,0,c
  3547  003D7A  3634               	rlcf	___fldiv@rem,f,c
  3548  003D7C  3635               	rlcf	___fldiv@rem+1,f,c
  3549  003D7E  3636               	rlcf	___fldiv@rem+2,f,c
  3550  003D80  3637               	rlcf	___fldiv@rem+3,f,c
  3551  003D82  90D8               	bcf	status,0,c
  3552  003D84  3628               	rlcf	___fldiv@b,f,c
  3553  003D86  3629               	rlcf	___fldiv@b+1,f,c
  3554  003D88  362A               	rlcf	___fldiv@b+2,f,c
  3555  003D8A  362B               	rlcf	___fldiv@b+3,f,c
  3556  003D8C  BE3E               	btfsc	___fldiv@grs+3,7,c
  3557  003D8E  8028               	bsf	___fldiv@b,0,c
  3558  003D90  90D8               	bcf	status,0,c
  3559  003D92  363B               	rlcf	___fldiv@grs,f,c
  3560  003D94  363C               	rlcf	___fldiv@grs+1,f,c
  3561  003D96  363D               	rlcf	___fldiv@grs+2,f,c
  3562  003D98  363E               	rlcf	___fldiv@grs+3,f,c
  3563  003D9A                     l6368:
  3564  003D9A  502C               	movf	___fldiv@a,w,c
  3565  003D9C  5C34               	subwf	___fldiv@rem,w,c
  3566  003D9E  502D               	movf	___fldiv@a+1,w,c
  3567  003DA0  5835               	subwfb	___fldiv@rem+1,w,c
  3568  003DA2  502E               	movf	___fldiv@a+2,w,c
  3569  003DA4  5836               	subwfb	___fldiv@rem+2,w,c
  3570  003DA6  502F               	movf	___fldiv@a+3,w,c
  3571  003DA8  5837               	subwfb	___fldiv@rem+3,w,c
  3572  003DAA  A0D8               	btfss	status,0,c
  3573  003DAC  D009               	goto	l6374
  3574  003DAE  8C3E               	bsf	___fldiv@grs+3,6,c
  3575  003DB0  502C               	movf	___fldiv@a,w,c
  3576  003DB2  5E34               	subwf	___fldiv@rem,f,c
  3577  003DB4  502D               	movf	___fldiv@a+1,w,c
  3578  003DB6  5A35               	subwfb	___fldiv@rem+1,f,c
  3579  003DB8  502E               	movf	___fldiv@a+2,w,c
  3580  003DBA  5A36               	subwfb	___fldiv@rem+2,f,c
  3581  003DBC  502F               	movf	___fldiv@a+3,w,c
  3582  003DBE  5A37               	subwfb	___fldiv@rem+3,f,c
  3583  003DC0                     l6374:
  3584  003DC0  2A40               	incf	___fldiv@aexp,f,c
  3585  003DC2                     l1497:
  3586  003DC2  0E19               	movlw	25
  3587  003DC4  6440               	cpfsgt	___fldiv@aexp,c
  3588  003DC6  D7D5               	goto	l6360
  3589  003DC8  5034               	movf	___fldiv@rem,w,c
  3590  003DCA  1035               	iorwf	___fldiv@rem+1,w,c
  3591  003DCC  1036               	iorwf	___fldiv@rem+2,w,c
  3592  003DCE  1037               	iorwf	___fldiv@rem+3,w,c
  3593  003DD0  B4D8               	btfsc	status,2,c
  3594  003DD2  D011               	goto	l6386
  3595  003DD4  803B               	bsf	___fldiv@grs,0,c
  3596  003DD6  D00F               	goto	l6386
  3597  003DD8                     l6380:
  3598  003DD8  90D8               	bcf	status,0,c
  3599  003DDA  3628               	rlcf	___fldiv@b,f,c
  3600  003DDC  3629               	rlcf	___fldiv@b+1,f,c
  3601  003DDE  362A               	rlcf	___fldiv@b+2,f,c
  3602  003DE0  362B               	rlcf	___fldiv@b+3,f,c
  3603  003DE2  BE3E               	btfsc	___fldiv@grs+3,7,c
  3604  003DE4  8028               	bsf	___fldiv@b,0,c
  3605  003DE6  90D8               	bcf	status,0,c
  3606  003DE8  363B               	rlcf	___fldiv@grs,f,c
  3607  003DEA  363C               	rlcf	___fldiv@grs+1,f,c
  3608  003DEC  363D               	rlcf	___fldiv@grs+2,f,c
  3609  003DEE  363E               	rlcf	___fldiv@grs+3,f,c
  3610  003DF0  0639               	decf	___fldiv@new_exp,f,c
  3611  003DF2  A0D8               	btfss	status,0,c
  3612  003DF4  063A               	decf	___fldiv@new_exp+1,f,c
  3613  003DF6                     l6386:
  3614  003DF6  AE2A               	btfss	___fldiv@b+2,7,c
  3615  003DF8  D7EF               	goto	l6380
  3616  003DFA  0E00               	movlw	0
  3617  003DFC  6E40               	movwf	___fldiv@aexp,c
  3618  003DFE  AE3E               	btfss	___fldiv@grs+3,7,c
  3619  003E00  D017               	goto	l1508
  3620  003E02  0EFF               	movlw	255
  3621  003E04  143B               	andwf	___fldiv@grs,w,c
  3622  003E06  6E30               	movwf	??___fldiv& (0+255),c
  3623  003E08  0EFF               	movlw	255
  3624  003E0A  143C               	andwf	___fldiv@grs+1,w,c
  3625  003E0C  6E31               	movwf	(??___fldiv+1)& (0+255),c
  3626  003E0E  0EFF               	movlw	255
  3627  003E10  143D               	andwf	___fldiv@grs+2,w,c
  3628  003E12  6E32               	movwf	(??___fldiv+2)& (0+255),c
  3629  003E14  0E7F               	movlw	127
  3630  003E16  143E               	andwf	___fldiv@grs+3,w,c
  3631  003E18  6E33               	movwf	(??___fldiv+3)& (0+255),c
  3632  003E1A  5030               	movf	??___fldiv,w,c
  3633  003E1C  1031               	iorwf	??___fldiv+1,w,c
  3634  003E1E  1032               	iorwf	??___fldiv+2,w,c
  3635  003E20  1033               	iorwf	??___fldiv+3,w,c
  3636  003E22  B4D8               	btfsc	status,2,c
  3637  003E24  D003               	goto	l1509
  3638  003E26                     u8660:
  3639  003E26  0E01               	movlw	1
  3640  003E28  6E40               	movwf	___fldiv@aexp,c
  3641  003E2A  D002               	goto	l1508
  3642  003E2C                     l1509:
  3643  003E2C  B028               	btfsc	___fldiv@b,0,c
  3644  003E2E  D7FB               	goto	u8660
  3645  003E30                     l1508:
  3646  003E30  5040               	movf	___fldiv@aexp,w,c
  3647  003E32  B4D8               	btfsc	status,2,c
  3648  003E34  D01F               	goto	l6406
  3649  003E36  0E01               	movlw	1
  3650  003E38  2628               	addwf	___fldiv@b,f,c
  3651  003E3A  0E00               	movlw	0
  3652  003E3C  2229               	addwfc	___fldiv@b+1,f,c
  3653  003E3E  222A               	addwfc	___fldiv@b+2,f,c
  3654  003E40  222B               	addwfc	___fldiv@b+3,f,c
  3655  003E42  A02B               	btfss	___fldiv@b+3,0,c
  3656  003E44  D017               	goto	l6406
  3657  003E46  C028  F030         	movff	___fldiv@b,??___fldiv
  3658  003E4A  C029  F031         	movff	___fldiv@b+1,??___fldiv+1
  3659  003E4E  C02A  F032         	movff	___fldiv@b+2,??___fldiv+2
  3660  003E52  C02B  F033         	movff	___fldiv@b+3,??___fldiv+3
  3661  003E56  3433               	rlcf	??___fldiv+3,w,c
  3662  003E58  3233               	rrcf	??___fldiv+3,f,c
  3663  003E5A  3232               	rrcf	??___fldiv+2,f,c
  3664  003E5C  3231               	rrcf	??___fldiv+1,f,c
  3665  003E5E  3230               	rrcf	??___fldiv,f,c
  3666  003E60  C030  F028         	movff	??___fldiv,___fldiv@b
  3667  003E64  C031  F029         	movff	??___fldiv+1,___fldiv@b+1
  3668  003E68  C032  F02A         	movff	??___fldiv+2,___fldiv@b+2
  3669  003E6C  C033  F02B         	movff	??___fldiv+3,___fldiv@b+3
  3670  003E70  4A39               	infsnz	___fldiv@new_exp,f,c
  3671  003E72  2A3A               	incf	___fldiv@new_exp+1,f,c
  3672  003E74                     l6406:
  3673  003E74  BE3A               	btfsc	___fldiv@new_exp+1,7,c
  3674  003E76  D010               	goto	l6410
  3675  003E78  503A               	movf	___fldiv@new_exp+1,w,c
  3676  003E7A  E103               	bnz	u8700
  3677  003E7C  2839               	incf	___fldiv@new_exp,w,c
  3678  003E7E  A0D8               	btfss	status,0,c
  3679  003E80  D00B               	goto	l6410
  3680  003E82                     u8700:
  3681  003E82  0E00               	movlw	0
  3682  003E84  6E3A               	movwf	___fldiv@new_exp+1,c
  3683  003E86  6839               	setf	___fldiv@new_exp,c
  3684  003E88  0E00               	movlw	0
  3685  003E8A  6E28               	movwf	___fldiv@b,c
  3686  003E8C  0E00               	movlw	0
  3687  003E8E  6E29               	movwf	___fldiv@b+1,c
  3688  003E90  0E00               	movlw	0
  3689  003E92  6E2A               	movwf	___fldiv@b+2,c
  3690  003E94  0E00               	movlw	0
  3691  003E96  6E2B               	movwf	___fldiv@b+3,c
  3692  003E98                     l6410:
  3693  003E98  BE3A               	btfsc	___fldiv@new_exp+1,7,c
  3694  003E9A  D005               	goto	u8710
  3695  003E9C  503A               	movf	___fldiv@new_exp+1,w,c
  3696  003E9E  E111               	bnz	l6414
  3697  003EA0  0439               	decf	___fldiv@new_exp,w,c
  3698  003EA2  B0D8               	btfsc	status,0,c
  3699  003EA4  D00E               	goto	l6414
  3700  003EA6                     u8710:
  3701  003EA6  0E00               	movlw	0
  3702  003EA8  6E3A               	movwf	___fldiv@new_exp+1,c
  3703  003EAA  0E00               	movlw	0
  3704  003EAC  6E39               	movwf	___fldiv@new_exp,c
  3705  003EAE  0E00               	movlw	0
  3706  003EB0  6E28               	movwf	___fldiv@b,c
  3707  003EB2  0E00               	movlw	0
  3708  003EB4  6E29               	movwf	___fldiv@b+1,c
  3709  003EB6  0E00               	movlw	0
  3710  003EB8  6E2A               	movwf	___fldiv@b+2,c
  3711  003EBA  0E00               	movlw	0
  3712  003EBC  6E2B               	movwf	___fldiv@b+3,c
  3713  003EBE  0E00               	movlw	0
  3714  003EC0  6E38               	movwf	___fldiv@sign,c
  3715  003EC2                     l6414:
  3716  003EC2  C039  F03F         	movff	___fldiv@new_exp,___fldiv@bexp
  3717  003EC6  A03F               	btfss	___fldiv@bexp,0,c
  3718  003EC8  D002               	goto	l6420
  3719  003ECA  8E2A               	bsf	___fldiv@b+2,7,c
  3720  003ECC  D001               	goto	l6422
  3721  003ECE                     l6420:
  3722  003ECE  9E2A               	bcf	___fldiv@b+2,7,c
  3723  003ED0                     l6422:
  3724  003ED0  90D8               	bcf	status,0,c
  3725  003ED2  303F               	rrcf	___fldiv@bexp,w,c
  3726  003ED4  6E2B               	movwf	___fldiv@b+3,c
  3727  003ED6  D70E               	goto	l6336
  3728  003ED8                     __end_of___fldiv:
  3729                           	opt callstack 0
  3730                           
  3731 ;; *************** function _f_open *****************
  3732 ;; Defined at:
  3733 ;;		line 2449 in file "ff.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  fp              2   58[BANK0 ] PTR struct .
  3736 ;;		 -> Fil(32), 
  3737 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  3738 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  3739 ;;  mode            1   62[BANK0 ] unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  dj             22   90[BANK0 ] struct .
  3742 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  3743 ;;  dw              4   83[BANK0 ] unsigned long 
  3744 ;;  cl              4   79[BANK0 ] unsigned long 
  3745 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  3746 ;;		 -> FatFs(558), NULL(0), 
  3747 ;;  res             1   87[BANK0 ] enum E93
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      enum E93
  3750 ;; Registers used:
  3751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3757 ;;      Params:         0       5       0       0       0       0       0       0       0
  3758 ;;      Locals:         0      45       0       0       0       0       0       0       0
  3759 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3760 ;;      Totals:         0      54       0       0       0       0       0       0       0
  3761 ;;Total ram usage:       54 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:   13
  3764 ;; This function calls:
  3765 ;;		_dir_register
  3766 ;;		_find_volume
  3767 ;;		_follow_path
  3768 ;;		_ld_clust
  3769 ;;		_move_window
  3770 ;;		_remove_chain
  3771 ;;		_st_clust
  3772 ;; This function is called by:
  3773 ;;		_guardar
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text8
  3778  002FAC                     __ptext8:
  3779                           	opt callstack 0
  3780  002FAC                     _f_open:
  3781                           	opt callstack 16
  3782                           
  3783                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  3784                           
  3785                           ;incstack = 0
  3786  002FAC  0100               	movlb	0	; () banked
  3787  002FAE  519A               	movf	f_open@fp& (0+255),w,b
  3788  002FB0  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  3789  002FB2  A4D8               	btfss	status,2,c
  3790  002FB4  D002               	goto	l6648
  3791                           
  3792                           ; BSR set to: 0
  3793  002FB6  0E09               	movlw	9
  3794  002FB8  0012               	return	
  3795  002FBA                     l6648:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;ff.c: 2465:  fp->fs = 0;
  3799  002FBA  C09A  FFD9         	movff	f_open@fp,fsr2l
  3800  002FBE  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3801  002FC2  0E00               	movlw	0
  3802  002FC4  6EDE               	movwf	postinc2,c
  3803  002FC6  0E00               	movlw	0
  3804  002FC8  6EDD               	movwf	postdec2,c
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;ff.c: 2468:  dj.fs = FatFs[0];
  3808  002FCA  C0DC  F0BA         	movff	ff@FatFs,f_open@dj
  3809  002FCE  C0DD  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  3813  002FD2  0E1F               	movlw	31
  3814  002FD4  179E               	andwf	f_open@mode& (0+255),f,b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  3818  002FD6  0EBA               	movlw	low f_open@dj
  3819  002FD8  6E45               	movwf	find_volume@rfs,c
  3820  002FDA  0E00               	movlw	high f_open@dj
  3821  002FDC  6E46               	movwf	find_volume@rfs+1,c
  3822  002FDE  0E9C               	movlw	low f_open@path
  3823  002FE0  6E47               	movwf	find_volume@path,c
  3824  002FE2  0E00               	movlw	high f_open@path
  3825  002FE4  6E48               	movwf	find_volume@path+1,c
  3826  002FE6  519E               	movf	f_open@mode& (0+255),w,b
  3827  002FE8  0BFE               	andlw	254
  3828  002FEA  6E49               	movwf	find_volume@wmode,c
  3829  002FEC  EC0E  F004         	call	_find_volume	;wreg free
  3830  002FF0  0100               	movlb	0	; () banked
  3831  002FF2  6FB7               	movwf	f_open@res& (0+255),b
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;ff.c: 2479:  if (res == FR_OK) {
  3835  002FF4  51B7               	movf	f_open@res& (0+255),w,b
  3836  002FF6  A4D8               	btfss	status,2,c
  3837  002FF8  D1A2               	goto	l6752
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;ff.c: 2480:   (dj).fn = sfn;
  3841  002FFA  0EA3               	movlw	low f_open@sfn
  3842  002FFC  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  3843  002FFE  0E00               	movlw	high f_open@sfn
  3844  003000  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;ff.c: 2481:   res = follow_path(&dj, path);
  3848  003002  0EBA               	movlw	low f_open@dj
  3849  003004  6F86               	movwf	follow_path@dp& (0+255),b
  3850  003006  0E00               	movlw	high f_open@dj
  3851  003008  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  3852  00300A  C09C  F088         	movff	f_open@path,follow_path@path
  3853  00300E  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  3854  003012  ECD4  F023         	call	_follow_path	;wreg free
  3855  003016  0100               	movlb	0	; () banked
  3856  003018  6FB7               	movwf	f_open@res& (0+255),b
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;ff.c: 2482:   dir = dj.dir;
  3860  00301A  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  3861  00301E  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;ff.c: 2484:   if (res == FR_OK) {
  3865  003022  51B7               	movf	f_open@res& (0+255),w,b
  3866  003024  A4D8               	btfss	status,2,c
  3867  003026  D006               	goto	l6670
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;ff.c: 2485:    if (!dir)
  3871  003028  51B8               	movf	f_open@dir& (0+255),w,b
  3872  00302A  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  3873  00302C  A4D8               	btfss	status,2,c
  3874  00302E  D002               	goto	l6670
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  3878  003030  0E06               	movlw	6
  3879  003032  6FB7               	movwf	f_open@res& (0+255),b
  3880  003034                     l6670:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  3884  003034  C09E  F09F         	movff	f_open@mode,??_f_open
  3885  003038  0E1C               	movlw	28
  3886  00303A  179F               	andwf	??_f_open& (0+255),f,b
  3887  00303C  B4D8               	btfsc	status,2,c
  3888  00303E  D0D3               	goto	l6718
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;ff.c: 2494:    if (res != FR_OK) {
  3892  003040  51B7               	movf	f_open@res& (0+255),w,b
  3893  003042  B4D8               	btfsc	status,2,c
  3894  003044  D012               	goto	l6682
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  3898  003046  0E04               	movlw	4
  3899  003048  19B7               	xorwf	f_open@res& (0+255),w,b
  3900  00304A  A4D8               	btfss	status,2,c
  3901  00304C  D008               	goto	l6678
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;ff.c: 2499:      res = dir_register(&dj);
  3905  00304E  0EBA               	movlw	low f_open@dj
  3906  003050  6F8A               	movwf	dir_register@dp& (0+255),b
  3907  003052  0E00               	movlw	high f_open@dj
  3908  003054  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  3909  003056  EC85  F028         	call	_dir_register	;wreg free
  3910  00305A  0100               	movlb	0	; () banked
  3911  00305C  6FB7               	movwf	f_open@res& (0+255),b
  3912  00305E                     l6678:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;ff.c: 2501:     mode |= 0x08;
  3916  00305E  879E               	bsf	f_open@mode& (0+255),3,b
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;ff.c: 2502:     dir = dj.dir;
  3920  003060  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  3921  003064  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  3922                           
  3923                           ;ff.c: 2503:    }
  3924  003068  D012               	goto	l581
  3925  00306A                     l6682:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  3929  00306A  EE20 F00B          	lfsr	2,11
  3930  00306E  51B8               	movf	f_open@dir& (0+255),w,b
  3931  003070  26D9               	addwf	fsr2l,f,c
  3932  003072  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3933  003074  22DA               	addwfc	fsr2h,f,c
  3934  003076  50DF               	movf	indf2,w,c
  3935  003078  6F9F               	movwf	??_f_open& (0+255),b
  3936  00307A  0E11               	movlw	17
  3937  00307C  179F               	andwf	??_f_open& (0+255),f,b
  3938  00307E  B4D8               	btfsc	status,2,c
  3939  003080  D002               	goto	l582
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;ff.c: 2506:      res = FR_DENIED;
  3943  003082  0E07               	movlw	7
  3944  003084  D003               	goto	L5
  3945  003086                     l582:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;ff.c: 2508:      if (mode & 0x04)
  3949  003086  A59E               	btfss	f_open@mode& (0+255),2,b
  3950  003088  D002               	goto	l581
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;ff.c: 2509:       res = FR_EXIST;
  3954  00308A  0E08               	movlw	8
  3955  00308C                     L5:
  3956  00308C  6FB7               	movwf	f_open@res& (0+255),b
  3957  00308E                     l581:
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  3961  00308E  51B7               	movf	f_open@res& (0+255),w,b
  3962  003090  B4D8               	btfsc	status,2,c
  3963                           
  3964                           ; BSR set to: 0
  3965  003092  A79E               	btfss	f_open@mode& (0+255),3,b
  3966  003094  D0C1               	goto	l588
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  3970                           
  3971                           ; BSR set to: 0
  3972  003096  EE20 F00E          	lfsr	2,14
  3973  00309A  51B8               	movf	f_open@dir& (0+255),w,b
  3974  00309C  26D9               	addwf	fsr2l,f,c
  3975  00309E  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3976  0030A0  22DA               	addwfc	fsr2h,f,c
  3977  0030A2  0E00               	movlw	0
  3978  0030A4  6EDE               	movwf	postinc2,c
  3979  0030A6  0E00               	movlw	0
  3980  0030A8  6EDE               	movwf	postinc2,c
  3981  0030AA  0E21               	movlw	33
  3982  0030AC  6EDE               	movwf	postinc2,c
  3983  0030AE  0E46               	movlw	70
  3984  0030B0  6EDD               	movwf	postdec2,c
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  3988  0030B2  EE20 F016          	lfsr	2,22
  3989  0030B6  51B8               	movf	f_open@dir& (0+255),w,b
  3990  0030B8  26D9               	addwf	fsr2l,f,c
  3991  0030BA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3992  0030BC  22DA               	addwfc	fsr2h,f,c
  3993  0030BE  0E00               	movlw	0
  3994  0030C0  6EDE               	movwf	postinc2,c
  3995  0030C2  0E00               	movlw	0
  3996  0030C4  6EDE               	movwf	postinc2,c
  3997  0030C6  0E21               	movlw	33
  3998  0030C8  6EDE               	movwf	postinc2,c
  3999  0030CA  0E46               	movlw	70
  4000  0030CC  6EDD               	movwf	postdec2,c
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;ff.c: 2516:     dir[11] = 0;
  4004  0030CE  EE20 F00B          	lfsr	2,11
  4005  0030D2  51B8               	movf	f_open@dir& (0+255),w,b
  4006  0030D4  26D9               	addwf	fsr2l,f,c
  4007  0030D6  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4008  0030D8  22DA               	addwfc	fsr2h,f,c
  4009  0030DA  0E00               	movlw	0
  4010  0030DC  6EDF               	movwf	indf2,c
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  4014  0030DE  EE20 F01C          	lfsr	2,28
  4015  0030E2  51B8               	movf	f_open@dir& (0+255),w,b
  4016  0030E4  26D9               	addwf	fsr2l,f,c
  4017  0030E6  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4018  0030E8  22DA               	addwfc	fsr2h,f,c
  4019  0030EA  6ADE               	clrf	postinc2,c
  4020  0030EC  6ADE               	clrf	postinc2,c
  4021  0030EE  6ADE               	clrf	postinc2,c
  4022  0030F0  6ADD               	clrf	postdec2,c
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  4026  0030F2  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4027  0030F6  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4028  0030FA  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4029  0030FE  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4030  003102  ECF7  F02B         	call	_ld_clust	;wreg free
  4031  003106  C001  F0AF         	movff	?_ld_clust,f_open@cl
  4032  00310A  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  4033  00310E  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  4034  003112  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  4035                           
  4036                           ;ff.c: 2519:     st_clust(dir, 0);
  4037  003116  C0B8  F001         	movff	f_open@dir,st_clust@dir
  4038  00311A  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  4039  00311E  0E00               	movlw	0
  4040  003120  6E03               	movwf	st_clust@cl,c
  4041  003122  0E00               	movlw	0
  4042  003124  6E04               	movwf	st_clust@cl+1,c
  4043  003126  0E00               	movlw	0
  4044  003128  6E05               	movwf	st_clust@cl+2,c
  4045  00312A  0E00               	movlw	0
  4046  00312C  6E06               	movwf	st_clust@cl+3,c
  4047  00312E  EC20  F02E         	call	_st_clust	;wreg free
  4048                           
  4049                           ;ff.c: 2520:     dj.fs->wflag = 1;
  4050  003132  0100               	movlb	0	; () banked
  4051  003134  EE20 F004          	lfsr	2,4
  4052  003138  51BA               	movf	f_open@dj& (0+255),w,b
  4053  00313A  26D9               	addwf	fsr2l,f,c
  4054  00313C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4055  00313E  22DA               	addwfc	fsr2h,f,c
  4056  003140  0E01               	movlw	1
  4057  003142  6EDF               	movwf	indf2,c
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;ff.c: 2521:     if (cl) {
  4061  003144  51AF               	movf	f_open@cl& (0+255),w,b
  4062  003146  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  4063  003148  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  4064  00314A  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  4065  00314C  B4D8               	btfsc	status,2,c
  4066  00314E  D064               	goto	l588
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;ff.c: 2522:      dw = dj.fs->winsect;
  4070  003150  EE20 F02A          	lfsr	2,42
  4071  003154  51BA               	movf	f_open@dj& (0+255),w,b
  4072  003156  26D9               	addwf	fsr2l,f,c
  4073  003158  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4074  00315A  22DA               	addwfc	fsr2h,f,c
  4075  00315C  CFDE F0B3          	movff	postinc2,f_open@dw
  4076  003160  CFDE F0B4          	movff	postinc2,f_open@dw+1
  4077  003164  CFDE F0B5          	movff	postinc2,f_open@dw+2
  4078  003168  CFDE F0B6          	movff	postinc2,f_open@dw+3
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  4082  00316C  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  4083  003170  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  4084  003174  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  4085  003178  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  4086  00317C  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  4087  003180  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  4088  003184  EC2F  F023         	call	_remove_chain	;wreg free
  4089  003188  0100               	movlb	0	; () banked
  4090  00318A  6FB7               	movwf	f_open@res& (0+255),b
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;ff.c: 2524:      if (res == FR_OK) {
  4094  00318C  51B7               	movf	f_open@res& (0+255),w,b
  4095  00318E  A4D8               	btfss	status,2,c
  4096  003190  D043               	goto	l588
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  4100  003192  0EFF               	movlw	255
  4101  003194  25AF               	addwf	f_open@cl& (0+255),w,b
  4102  003196  6F9F               	movwf	??_f_open& (0+255),b
  4103  003198  0EFF               	movlw	255
  4104  00319A  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  4105  00319C  6FA0               	movwf	(??_f_open+1)& (0+255),b
  4106  00319E  0EFF               	movlw	255
  4107  0031A0  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  4108  0031A2  6FA1               	movwf	(??_f_open+2)& (0+255),b
  4109  0031A4  0EFF               	movlw	255
  4110  0031A6  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  4111  0031A8  6FA2               	movwf	(??_f_open+3)& (0+255),b
  4112  0031AA  EE20 F00A          	lfsr	2,10
  4113  0031AE  51BA               	movf	f_open@dj& (0+255),w,b
  4114  0031B0  26D9               	addwf	fsr2l,f,c
  4115  0031B2  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4116  0031B4  22DA               	addwfc	fsr2h,f,c
  4117  0031B6  C09F  FFDE         	movff	??_f_open,postinc2
  4118  0031BA  C0A0  FFDE         	movff	??_f_open+1,postinc2
  4119  0031BE  C0A1  FFDE         	movff	??_f_open+2,postinc2
  4120  0031C2  C0A2  FFDE         	movff	??_f_open+3,postinc2
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  4124  0031C6  C0BA  F030         	movff	f_open@dj,move_window@fs
  4125  0031CA  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  4126  0031CE  C0B3  F032         	movff	f_open@dw,move_window@sector
  4127  0031D2  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  4128  0031D6  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  4129  0031DA  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  4130  0031DE  ECD8  F02A         	call	_move_window	;wreg free
  4131  0031E2  0100               	movlb	0	; () banked
  4132  0031E4  D018               	goto	L6
  4133  0031E6                     l6718:
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;ff.c: 2532:    if (res == FR_OK) {
  4137  0031E6  51B7               	movf	f_open@res& (0+255),w,b
  4138  0031E8  A4D8               	btfss	status,2,c
  4139  0031EA  D016               	goto	l588
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  4143  0031EC  EE20 F00B          	lfsr	2,11
  4144  0031F0  51B8               	movf	f_open@dir& (0+255),w,b
  4145  0031F2  26D9               	addwf	fsr2l,f,c
  4146  0031F4  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4147  0031F6  22DA               	addwfc	fsr2h,f,c
  4148  0031F8  A8DF               	btfss	indf2,4,c
  4149  0031FA  D002               	goto	l590
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;ff.c: 2534:      res = FR_NO_FILE;
  4153  0031FC  0E04               	movlw	4
  4154  0031FE  D00B               	goto	L6
  4155  003200                     l590:
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  4159  003200  A39E               	btfss	f_open@mode& (0+255),1,b
  4160  003202  D00A               	goto	l588
  4161                           
  4162                           ; BSR set to: 0
  4163  003204  EE20 F00B          	lfsr	2,11
  4164  003208  51B8               	movf	f_open@dir& (0+255),w,b
  4165  00320A  26D9               	addwf	fsr2l,f,c
  4166  00320C  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4167  00320E  22DA               	addwfc	fsr2h,f,c
  4168  003210  A0DF               	btfss	indf2,0,c
  4169  003212  D002               	goto	l588
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;ff.c: 2537:       res = FR_DENIED;
  4173  003214  0E07               	movlw	7
  4174  003216                     L6:
  4175  003216  6FB7               	movwf	f_open@res& (0+255),b
  4176  003218                     l588:
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;ff.c: 2541:   if (res == FR_OK) {
  4180  003218  51B7               	movf	f_open@res& (0+255),w,b
  4181  00321A  A4D8               	btfss	status,2,c
  4182  00321C  D020               	goto	l6736
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;ff.c: 2542:    if (mode & 0x08)
  4186  00321E  B79E               	btfsc	f_open@mode& (0+255),3,b
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;ff.c: 2543:     mode |= 0x20;
  4190  003220  8B9E               	bsf	f_open@mode& (0+255),5,b
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  4194  003222  EE20 F02A          	lfsr	2,42
  4195  003226  51BA               	movf	f_open@dj& (0+255),w,b
  4196  003228  26D9               	addwf	fsr2l,f,c
  4197  00322A  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  4198  00322C  22DA               	addwfc	fsr2h,f,c
  4199  00322E  EE10 F01A          	lfsr	1,26
  4200  003232  519A               	movf	f_open@fp& (0+255),w,b
  4201  003234  26E1               	addwf	fsr1l,f,c
  4202  003236  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4203  003238  22E2               	addwfc	fsr1h,f,c
  4204  00323A  CFDE FFE6          	movff	postinc2,postinc1
  4205  00323E  CFDE FFE6          	movff	postinc2,postinc1
  4206  003242  CFDE FFE6          	movff	postinc2,postinc1
  4207  003246  CFDE FFE6          	movff	postinc2,postinc1
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;ff.c: 2545:    fp->dir_ptr = dir;
  4211  00324A  EE20 F01E          	lfsr	2,30
  4212  00324E  519A               	movf	f_open@fp& (0+255),w,b
  4213  003250  26D9               	addwf	fsr2l,f,c
  4214  003252  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4215  003254  22DA               	addwfc	fsr2h,f,c
  4216  003256  C0B8  FFDE         	movff	f_open@dir,postinc2
  4217  00325A  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  4218  00325E                     l6736:
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;ff.c: 2565:   if (res == FR_OK) {
  4222  00325E  51B7               	movf	f_open@res& (0+255),w,b
  4223  003260  A4D8               	btfss	status,2,c
  4224  003262  D06D               	goto	l6752
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;ff.c: 2566:    fp->flag = mode;
  4228  003264  EE20 F004          	lfsr	2,4
  4229  003268  519A               	movf	f_open@fp& (0+255),w,b
  4230  00326A  26D9               	addwf	fsr2l,f,c
  4231  00326C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4232  00326E  22DA               	addwfc	fsr2h,f,c
  4233  003270  C09E  FFDF         	movff	f_open@mode,indf2
  4234                           
  4235                           ;ff.c: 2567:    fp->err = 0;
  4236  003274  EE20 F005          	lfsr	2,5
  4237  003278  519A               	movf	f_open@fp& (0+255),w,b
  4238  00327A  26D9               	addwf	fsr2l,f,c
  4239  00327C  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4240  00327E  22DA               	addwfc	fsr2h,f,c
  4241  003280  0E00               	movlw	0
  4242  003282  6EDF               	movwf	indf2,c
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  4246  003284  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  4247  003288  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  4248  00328C  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  4249  003290  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  4250  003294  ECF7  F02B         	call	_ld_clust	;wreg free
  4251  003298  0100               	movlb	0	; () banked
  4252  00329A  EE20 F00E          	lfsr	2,14
  4253  00329E  519A               	movf	f_open@fp& (0+255),w,b
  4254  0032A0  26D9               	addwf	fsr2l,f,c
  4255  0032A2  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4256  0032A4  22DA               	addwfc	fsr2h,f,c
  4257  0032A6  C001  FFDE         	movff	?_ld_clust,postinc2
  4258  0032AA  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4259  0032AE  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4260  0032B2  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  4264  0032B6  EE20 F01C          	lfsr	2,28
  4265  0032BA  51B8               	movf	f_open@dir& (0+255),w,b
  4266  0032BC  26D9               	addwf	fsr2l,f,c
  4267  0032BE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  4268  0032C0  22DA               	addwfc	fsr2h,f,c
  4269  0032C2  EE10 F00A          	lfsr	1,10
  4270  0032C6  519A               	movf	f_open@fp& (0+255),w,b
  4271  0032C8  26E1               	addwf	fsr1l,f,c
  4272  0032CA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4273  0032CC  22E2               	addwfc	fsr1h,f,c
  4274  0032CE  CFDE FFE6          	movff	postinc2,postinc1
  4275  0032D2  CFDE FFE6          	movff	postinc2,postinc1
  4276  0032D6  CFDE FFE6          	movff	postinc2,postinc1
  4277  0032DA  CFDE FFE6          	movff	postinc2,postinc1
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;ff.c: 2570:    fp->fptr = 0;
  4281  0032DE  EE20 F006          	lfsr	2,6
  4282  0032E2  519A               	movf	f_open@fp& (0+255),w,b
  4283  0032E4  26D9               	addwf	fsr2l,f,c
  4284  0032E6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4285  0032E8  22DA               	addwfc	fsr2h,f,c
  4286  0032EA  6ADE               	clrf	postinc2,c
  4287  0032EC  6ADE               	clrf	postinc2,c
  4288  0032EE  6ADE               	clrf	postinc2,c
  4289  0032F0  6ADD               	clrf	postdec2,c
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;ff.c: 2571:    fp->dsect = 0;
  4293  0032F2  EE20 F016          	lfsr	2,22
  4294  0032F6  519A               	movf	f_open@fp& (0+255),w,b
  4295  0032F8  26D9               	addwf	fsr2l,f,c
  4296  0032FA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4297  0032FC  22DA               	addwfc	fsr2h,f,c
  4298  0032FE  6ADE               	clrf	postinc2,c
  4299  003300  6ADE               	clrf	postinc2,c
  4300  003302  6ADE               	clrf	postinc2,c
  4301  003304  6ADD               	clrf	postdec2,c
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;ff.c: 2575:    fp->fs = dj.fs;
  4305  003306  C09A  FFD9         	movff	f_open@fp,fsr2l
  4306  00330A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4307  00330E  C0BA  FFDE         	movff	f_open@dj,postinc2
  4308  003312  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;ff.c: 2576:    fp->id = fp->fs->id;
  4312  003316  C09A  FFD9         	movff	f_open@fp,fsr2l
  4313  00331A  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  4314  00331E  EE10 F006          	lfsr	1,6
  4315  003322  50DE               	movf	postinc2,w,c
  4316  003324  26E1               	addwf	fsr1l,f,c
  4317  003326  50DD               	movf	postdec2,w,c
  4318  003328  22E2               	addwfc	fsr1h,f,c
  4319  00332A  EE20 F002          	lfsr	2,2
  4320  00332E  519A               	movf	f_open@fp& (0+255),w,b
  4321  003330  26D9               	addwf	fsr2l,f,c
  4322  003332  519B               	movf	(f_open@fp+1)& (0+255),w,b
  4323  003334  22DA               	addwfc	fsr2h,f,c
  4324  003336  CFE6 FFDE          	movff	postinc1,postinc2
  4325  00333A  CFE5 FFDD          	movff	postdec1,postdec2
  4326  00333E                     l6752:
  4327                           
  4328                           ; BSR set to: 0
  4329                           ;ff.c: 2580:  return res;
  4330  00333E  51B7               	movf	f_open@res& (0+255),w,b
  4331                           
  4332                           ; BSR set to: 0
  4333  003340  0012               	return		;funcret
  4334  003342                     __end_of_f_open:
  4335                           	opt callstack 0
  4336                           
  4337 ;; *************** function _remove_chain *****************
  4338 ;; Defined at:
  4339 ;;		line 937 in file "ff.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;  fs              2   85[COMRAM] PTR struct .
  4342 ;;		 -> FatFs(558), NULL(0), 
  4343 ;;  clst            4   87[COMRAM] unsigned long 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  nxt             4    1[BANK0 ] unsigned long 
  4346 ;;  res             1    0[BANK0 ] enum E93
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      enum E93
  4349 ;; Registers used:
  4350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4356 ;;      Params:         6       0       0       0       0       0       0       0       0
  4357 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4358 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4359 ;;      Totals:        10       5       0       0       0       0       0       0       0
  4360 ;;Total ram usage:       15 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    9
  4363 ;; This function calls:
  4364 ;;		_get_fat
  4365 ;;		_put_fat
  4366 ;; This function is called by:
  4367 ;;		_f_open
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text9
  4372  00465E                     __ptext9:
  4373                           	opt callstack 0
  4374  00465E                     _remove_chain:
  4375                           	opt callstack 19
  4376                           
  4377                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;incstack = 0
  4381  00465E  505B               	movf	remove_chain@clst+3,w,c
  4382  004660  105A               	iorwf	remove_chain@clst+2,w,c
  4383  004662  1059               	iorwf	remove_chain@clst+1,w,c
  4384  004664  E104               	bnz	u7530
  4385  004666  0E02               	movlw	2
  4386  004668  5C58               	subwf	remove_chain@clst,w,c
  4387  00466A  A0D8               	btfss	status,0,c
  4388  00466C  D010               	goto	u7540
  4389  00466E                     u7530:
  4390  00466E  EE20 F012          	lfsr	2,18
  4391  004672  5056               	movf	remove_chain@fs,w,c
  4392  004674  26D9               	addwf	fsr2l,f,c
  4393  004676  5057               	movf	remove_chain@fs+1,w,c
  4394  004678  22DA               	addwfc	fsr2h,f,c
  4395  00467A  50DE               	movf	postinc2,w,c
  4396  00467C  5C58               	subwf	remove_chain@clst,w,c
  4397  00467E  50DE               	movf	postinc2,w,c
  4398  004680  5859               	subwfb	remove_chain@clst+1,w,c
  4399  004682  50DE               	movf	postinc2,w,c
  4400  004684  585A               	subwfb	remove_chain@clst+2,w,c
  4401  004686  50DE               	movf	postinc2,w,c
  4402  004688  585B               	subwfb	remove_chain@clst+3,w,c
  4403  00468A  A0D8               	btfss	status,0,c
  4404  00468C  D003               	goto	l5740
  4405  00468E                     u7540:
  4406                           
  4407                           ;ff.c: 949:   res = FR_INT_ERR;
  4408  00468E  0E02               	movlw	2
  4409  004690  0100               	movlb	0	; () banked
  4410  004692  D031               	goto	L7
  4411  004694                     l5740:
  4412                           
  4413                           ;ff.c: 952:   res = FR_OK;
  4414  004694  0E00               	movlw	0
  4415  004696  0100               	movlb	0	; () banked
  4416  004698  6F60               	movwf	remove_chain@res& (0+255),b
  4417                           
  4418                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4419  00469A  D074               	goto	l302
  4420  00469C                     l5742:
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  4424  00469C  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  4425  0046A0  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  4426  0046A4  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  4427  0046A8  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  4428  0046AC  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  4429  0046B0  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  4430  0046B4  EC05  F016         	call	_get_fat	;wreg free
  4431  0046B8  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  4432  0046BC  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  4433  0046C0  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  4434  0046C4  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  4435                           
  4436                           ;ff.c: 955:    if (nxt == 0) break;
  4437  0046C8  0100               	movlb	0	; () banked
  4438  0046CA  5161               	movf	remove_chain@nxt& (0+255),w,b
  4439  0046CC  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4440  0046CE  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4441  0046D0  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4442  0046D2  B4D8               	btfsc	status,2,c
  4443  0046D4  D067               	goto	u7600
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  4447  0046D6  0561               	decf	remove_chain@nxt& (0+255),w,b
  4448  0046D8  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  4449  0046DA  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  4450  0046DC  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  4451  0046DE  B4D8               	btfsc	status,2,c
  4452  0046E0  D7D6               	goto	u7540
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  4456  0046E2  2961               	incf	remove_chain@nxt& (0+255),w,b
  4457  0046E4  E10A               	bnz	l5756
  4458  0046E6  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  4459  0046E8  E108               	bnz	l5756
  4460  0046EA  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  4461  0046EC  E106               	bnz	l5756
  4462  0046EE  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  4463  0046F0  A4D8               	btfss	status,2,c
  4464  0046F2  D003               	goto	l5756
  4465                           
  4466                           ; BSR set to: 0
  4467  0046F4  0E01               	movlw	1
  4468  0046F6                     L7:
  4469  0046F6  6F60               	movwf	remove_chain@res& (0+255),b
  4470  0046F8  D055               	goto	u7600
  4471  0046FA                     l5756:
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  4475  0046FA  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  4476  0046FE  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  4477  004702  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  4478  004706  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  4479  00470A  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  4480  00470E  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  4481  004712  0E00               	movlw	0
  4482  004714  6E41               	movwf	put_fat@val,c
  4483  004716  0E00               	movlw	0
  4484  004718  6E42               	movwf	put_fat@val+1,c
  4485  00471A  0E00               	movlw	0
  4486  00471C  6E43               	movwf	put_fat@val+2,c
  4487  00471E  0E00               	movlw	0
  4488  004720  6E44               	movwf	put_fat@val+3,c
  4489  004722  ECED  F011         	call	_put_fat	;wreg free
  4490  004726  0100               	movlb	0	; () banked
  4491  004728  6F60               	movwf	remove_chain@res& (0+255),b
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;ff.c: 959:    if (res != FR_OK) break;
  4495  00472A  5160               	movf	remove_chain@res& (0+255),w,b
  4496  00472C  A4D8               	btfss	status,2,c
  4497  00472E  D03A               	goto	u7600
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  4501  004730  EE20 F00E          	lfsr	2,14
  4502  004734  5056               	movf	remove_chain@fs,w,c
  4503  004736  26D9               	addwf	fsr2l,f,c
  4504  004738  5057               	movf	remove_chain@fs+1,w,c
  4505  00473A  22DA               	addwfc	fsr2h,f,c
  4506  00473C  28DE               	incf	postinc2,w,c
  4507  00473E  E107               	bnz	u7590
  4508  004740  28DE               	incf	postinc2,w,c
  4509  004742  E105               	bnz	u7590
  4510  004744  28DE               	incf	postinc2,w,c
  4511  004746  E103               	bnz	u7590
  4512  004748  28DE               	incf	postinc2,w,c
  4513  00474A  B4D8               	btfsc	status,2,c
  4514  00474C  D013               	goto	l5766
  4515  00474E                     u7590:
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;ff.c: 961:     fs->free_clust++;
  4519  00474E  EE20 F00E          	lfsr	2,14
  4520  004752  5056               	movf	remove_chain@fs,w,c
  4521  004754  26D9               	addwf	fsr2l,f,c
  4522  004756  5057               	movf	remove_chain@fs+1,w,c
  4523  004758  22DA               	addwfc	fsr2h,f,c
  4524  00475A  2ADE               	incf	postinc2,f,c
  4525  00475C  0E00               	movlw	0
  4526  00475E  22DE               	addwfc	postinc2,f,c
  4527  004760  22DE               	addwfc	postinc2,f,c
  4528  004762  22DE               	addwfc	postinc2,f,c
  4529                           
  4530                           ;ff.c: 962:     fs->fsi_flag |= 1;
  4531  004764  EE20 F005          	lfsr	2,5
  4532  004768  5056               	movf	remove_chain@fs,w,c
  4533  00476A  26D9               	addwf	fsr2l,f,c
  4534  00476C  5057               	movf	remove_chain@fs+1,w,c
  4535  00476E  22DA               	addwfc	fsr2h,f,c
  4536  004770  0E00               	movlw	0
  4537  004772  80DB               	bsf	plusw2,0,c
  4538  004774                     l5766:
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;ff.c: 974:    clst = nxt;
  4542  004774  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  4543  004778  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  4544  00477C  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  4545  004780  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  4546  004784                     l302:
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  4550  004784  EE20 F012          	lfsr	2,18
  4551  004788  5056               	movf	remove_chain@fs,w,c
  4552  00478A  26D9               	addwf	fsr2l,f,c
  4553  00478C  5057               	movf	remove_chain@fs+1,w,c
  4554  00478E  22DA               	addwfc	fsr2h,f,c
  4555  004790  50DE               	movf	postinc2,w,c
  4556  004792  5C58               	subwf	remove_chain@clst,w,c
  4557  004794  50DE               	movf	postinc2,w,c
  4558  004796  5859               	subwfb	remove_chain@clst+1,w,c
  4559  004798  50DE               	movf	postinc2,w,c
  4560  00479A  585A               	subwfb	remove_chain@clst+2,w,c
  4561  00479C  50DE               	movf	postinc2,w,c
  4562  00479E  585B               	subwfb	remove_chain@clst+3,w,c
  4563  0047A0  A0D8               	btfss	status,0,c
  4564  0047A2  D77C               	goto	l5742
  4565  0047A4                     u7600:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;ff.c: 978:  return res;
  4569  0047A4  5160               	movf	remove_chain@res& (0+255),w,b
  4570                           
  4571                           ; BSR set to: 0
  4572  0047A6  0012               	return		;funcret
  4573  0047A8                     __end_of_remove_chain:
  4574                           	opt callstack 0
  4575                           
  4576 ;; *************** function _follow_path *****************
  4577 ;; Defined at:
  4578 ;;		line 2052 in file "ff.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  dp              2   38[BANK0 ] PTR struct .
  4581 ;;		 -> f_open@dj(22), 
  4582 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  4583 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  4586 ;;		 -> FatFs(558), NULL(0), 
  4587 ;;  res             1   45[BANK0 ] enum E93
  4588 ;;  ns              1   44[BANK0 ] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      enum E93
  4591 ;; Registers used:
  4592 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4598 ;;      Params:         0       4       0       0       0       0       0       0       0
  4599 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4600 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4601 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4602 ;;Total ram usage:        8 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:   12
  4605 ;; This function calls:
  4606 ;;		_create_name
  4607 ;;		_dir_find
  4608 ;;		_dir_sdi
  4609 ;;		_ld_clust
  4610 ;; This function is called by:
  4611 ;;		_f_open
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text10
  4616  0047A8                     __ptext10:
  4617                           	opt callstack 0
  4618  0047A8                     _follow_path:
  4619                           	opt callstack 16
  4620                           
  4621                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;incstack = 0
  4625  0047A8  C088  FFF6         	movff	follow_path@path,tblptrl
  4626  0047AC  C089  FFF7         	movff	follow_path@path+1,tblptrh
  4627  0047B0                     	if	0	;tblptru may be non-zero
  4628  0047B0                     	endif
  4629  0047B0                     	if	0	;tblptru may be non-zero
  4630  0047B0                     	endif
  4631  0047B0  0008               	tblrd		*
  4632  0047B2  50F5               	movf	tablat,w,c
  4633  0047B4  0A2F               	xorlw	47
  4634  0047B6  B4D8               	btfsc	status,2,c
  4635  0047B8  D009               	goto	u7640
  4636  0047BA  C088  FFF6         	movff	follow_path@path,tblptrl
  4637  0047BE  C089  FFF7         	movff	follow_path@path+1,tblptrh
  4638  0047C2                     	if	0	;tblptru may be non-zero
  4639  0047C2                     	endif
  4640  0047C2                     	if	0	;tblptru may be non-zero
  4641  0047C2                     	endif
  4642  0047C2  0008               	tblrd		*
  4643  0047C4  50F5               	movf	tablat,w,c
  4644  0047C6  0A5C               	xorlw	92
  4645  0047C8  A4D8               	btfss	status,2,c
  4646  0047CA  D003               	goto	l5796
  4647  0047CC                     u7640:
  4648                           
  4649                           ;ff.c: 2069:   path++;
  4650  0047CC  0100               	movlb	0	; () banked
  4651  0047CE  4B88               	infsnz	follow_path@path& (0+255),f,b
  4652  0047D0  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  4653  0047D2                     l5796:
  4654                           
  4655                           ;ff.c: 2070:  dp->sclust = 0;
  4656  0047D2  0100               	movlb	0	; () banked
  4657  0047D4  EE20 F006          	lfsr	2,6
  4658  0047D8  5186               	movf	follow_path@dp& (0+255),w,b
  4659  0047DA  26D9               	addwf	fsr2l,f,c
  4660  0047DC  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  4661  0047DE  22DA               	addwfc	fsr2h,f,c
  4662  0047E0  6ADE               	clrf	postinc2,c
  4663  0047E2  6ADE               	clrf	postinc2,c
  4664  0047E4  6ADE               	clrf	postinc2,c
  4665  0047E6  6ADD               	clrf	postdec2,c
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  4669  0047E8  C088  FFF6         	movff	follow_path@path,tblptrl
  4670  0047EC  C089  FFF7         	movff	follow_path@path+1,tblptrh
  4671  0047F0                     	if	0	;tblptru may be non-zero
  4672  0047F0                     	endif
  4673  0047F0                     	if	0	;tblptru may be non-zero
  4674  0047F0                     	endif
  4675  0047F0  0E20               	movlw	32
  4676  0047F2  0008               	tblrd		*
  4677  0047F4  60F5               	cpfslt	tablat,c
  4678  0047F6  D017               	goto	l5804
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  4682  0047F8  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  4683  0047FC  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  4684  004800  0E00               	movlw	0
  4685  004802  6E59               	movwf	dir_sdi@idx+1,c
  4686  004804  0E00               	movlw	0
  4687  004806  6E58               	movwf	dir_sdi@idx,c
  4688  004808  ECC7  F01C         	call	_dir_sdi	;wreg free
  4689  00480C  0100               	movlb	0	; () banked
  4690  00480E  6F8D               	movwf	follow_path@res& (0+255),b
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;ff.c: 2075:   dp->dir = 0;
  4694  004810  EE20 F012          	lfsr	2,18
  4695  004814  5186               	movf	follow_path@dp& (0+255),w,b
  4696  004816  26D9               	addwf	fsr2l,f,c
  4697  004818  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  4698  00481A  22DA               	addwfc	fsr2h,f,c
  4699  00481C  0E00               	movlw	0
  4700  00481E  6EDE               	movwf	postinc2,c
  4701  004820  0E00               	movlw	0
  4702  004822  6EDD               	movwf	postdec2,c
  4703                           
  4704                           ;ff.c: 2076:  } else {
  4705  004824  D062               	goto	l5840
  4706  004826                     l5804:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;ff.c: 2078:    res = create_name(dp, &path);
  4710  004826  C086  F009         	movff	follow_path@dp,create_name@dp
  4711  00482A  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  4712  00482E  0E88               	movlw	low follow_path@path
  4713  004830  6E0B               	movwf	create_name@path,c
  4714  004832  0E00               	movlw	high follow_path@path
  4715  004834  6E0C               	movwf	create_name@path+1,c
  4716  004836  EC6C  F01F         	call	_create_name	;wreg free
  4717  00483A  0100               	movlb	0	; () banked
  4718  00483C  6F8D               	movwf	follow_path@res& (0+255),b
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;ff.c: 2079:    if (res != FR_OK) break;
  4722  00483E  518D               	movf	follow_path@res& (0+255),w,b
  4723  004840  A4D8               	btfss	status,2,c
  4724  004842  D053               	goto	l5840
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;ff.c: 2080:    res = dir_find(dp);
  4728  004844  C086  F080         	movff	follow_path@dp,dir_find@dp
  4729  004848  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  4730  00484C  ECB8  F026         	call	_dir_find	;wreg free
  4731  004850  0100               	movlb	0	; () banked
  4732  004852  6F8D               	movwf	follow_path@res& (0+255),b
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;ff.c: 2081:    ns = dp->fn[11];
  4736  004854  EE20 F014          	lfsr	2,20
  4737  004858  5186               	movf	follow_path@dp& (0+255),w,b
  4738  00485A  26D9               	addwf	fsr2l,f,c
  4739  00485C  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  4740  00485E  22DA               	addwfc	fsr2h,f,c
  4741  004860  EE10 F00B          	lfsr	1,11
  4742  004864  50DE               	movf	postinc2,w,c
  4743  004866  26E1               	addwf	fsr1l,f,c
  4744  004868  50DD               	movf	postdec2,w,c
  4745  00486A  22E2               	addwfc	fsr1h,f,c
  4746  00486C  50E7               	movf	indf1,w,c
  4747  00486E  6F8C               	movwf	follow_path@ns& (0+255),b
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;ff.c: 2082:    if (res != FR_OK) {
  4751  004870  518D               	movf	follow_path@res& (0+255),w,b
  4752  004872  B4D8               	btfsc	status,2,c
  4753  004874  D008               	goto	l469
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  4757  004876  0E04               	movlw	4
  4758  004878  198D               	xorwf	follow_path@res& (0+255),w,b
  4759  00487A  B4D8               	btfsc	status,2,c
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  4763  00487C  B58C               	btfsc	follow_path@ns& (0+255),2,b
  4764  00487E  D035               	goto	l5840
  4765  004880                     u7690:
  4766                           
  4767                           ; BSR set to: 0
  4768  004880  0E05               	movlw	5
  4769  004882  6F8D               	movwf	follow_path@res& (0+255),b
  4770  004884  D032               	goto	l5840
  4771  004886                     l469:
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;ff.c: 2094:    if (ns & 0x04) break;
  4775  004886  B58C               	btfsc	follow_path@ns& (0+255),2,b
  4776  004888  D030               	goto	l5840
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;ff.c: 2095:    dir = dp->dir;
  4780  00488A  EE20 F012          	lfsr	2,18
  4781  00488E  5186               	movf	follow_path@dp& (0+255),w,b
  4782  004890  26D9               	addwf	fsr2l,f,c
  4783  004892  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  4784  004894  22DA               	addwfc	fsr2h,f,c
  4785  004896  CFDE F08A          	movff	postinc2,follow_path@dir
  4786  00489A  CFDD F08B          	movff	postdec2,follow_path@dir+1
  4787                           
  4788                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  4789  00489E  EE20 F00B          	lfsr	2,11
  4790  0048A2  518A               	movf	follow_path@dir& (0+255),w,b
  4791  0048A4  26D9               	addwf	fsr2l,f,c
  4792  0048A6  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  4793  0048A8  22DA               	addwfc	fsr2h,f,c
  4794  0048AA  A8DF               	btfss	indf2,4,c
  4795  0048AC  D7E9               	goto	u7690
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  4799  0048AE  C086  FFD9         	movff	follow_path@dp,fsr2l
  4800  0048B2  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  4801  0048B6  CFDE F001          	movff	postinc2,ld_clust@fs
  4802  0048BA  CFDD F002          	movff	postdec2,ld_clust@fs+1
  4803  0048BE  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  4804  0048C2  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  4805  0048C6  ECF7  F02B         	call	_ld_clust	;wreg free
  4806  0048CA  0100               	movlb	0	; () banked
  4807  0048CC  EE20 F006          	lfsr	2,6
  4808  0048D0  5186               	movf	follow_path@dp& (0+255),w,b
  4809  0048D2  26D9               	addwf	fsr2l,f,c
  4810  0048D4  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  4811  0048D6  22DA               	addwfc	fsr2h,f,c
  4812  0048D8  C001  FFDE         	movff	?_ld_clust,postinc2
  4813  0048DC  C002  FFDE         	movff	?_ld_clust+1,postinc2
  4814  0048E0  C003  FFDE         	movff	?_ld_clust+2,postinc2
  4815  0048E4  C004  FFDE         	movff	?_ld_clust+3,postinc2
  4816  0048E8  D79E               	goto	l5804
  4817  0048EA                     l5840:
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;ff.c: 2103:  return res;
  4821  0048EA  518D               	movf	follow_path@res& (0+255),w,b
  4822                           
  4823                           ; BSR set to: 0
  4824  0048EC  0012               	return		;funcret
  4825  0048EE                     __end_of_follow_path:
  4826                           	opt callstack 0
  4827                           
  4828 ;; *************** function _ld_clust *****************
  4829 ;; Defined at:
  4830 ;;		line 1235 in file "ff.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;  fs              2    0[COMRAM] PTR struct .
  4833 ;;		 -> FatFs(558), NULL(0), 
  4834 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  4835 ;;		 -> FatFs(558), NULL(0), 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;  cl              4   10[COMRAM] unsigned long 
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  4    0[COMRAM] unsigned long 
  4840 ;; Registers used:
  4841 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4847 ;;      Params:         4       0       0       0       0       0       0       0       0
  4848 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4849 ;;      Temps:          6       0       0       0       0       0       0       0       0
  4850 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4851 ;;Total ram usage:       14 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; This function calls:
  4854 ;;		Nothing
  4855 ;; This function is called by:
  4856 ;;		_follow_path
  4857 ;;		_f_open
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text11
  4862  0057EE                     __ptext11:
  4863                           	opt callstack 0
  4864  0057EE                     _ld_clust:
  4865                           	opt callstack 28
  4866                           
  4867                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;incstack = 0
  4871  0057EE  0E1A               	movlw	26
  4872  0057F0  2403               	addwf	ld_clust@dir,w,c
  4873  0057F2  6ED9               	movwf	fsr2l,c
  4874  0057F4  0E00               	movlw	0
  4875  0057F6  2004               	addwfc	ld_clust@dir+1,w,c
  4876  0057F8  6EDA               	movwf	fsr2h,c
  4877  0057FA  CFDE F005          	movff	postinc2,??_ld_clust
  4878  0057FE  CFDD F006          	movff	postdec2,??_ld_clust+1
  4879  005802  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  4880  005806  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  4881  00580A  6A0D               	clrf	ld_clust@cl+2,c
  4882  00580C  6A0E               	clrf	ld_clust@cl+3,c
  4883                           
  4884                           ;ff.c: 1243:  if (fs->fs_type == 3)
  4885  00580E  C001  FFD9         	movff	ld_clust@fs,fsr2l
  4886  005812  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  4887  005816  0E03               	movlw	3
  4888  005818  18DE               	xorwf	postinc2,w,c
  4889  00581A  A4D8               	btfss	status,2,c
  4890  00581C  D01E               	goto	l5442
  4891                           
  4892                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  4893  00581E  0E14               	movlw	20
  4894  005820  2403               	addwf	ld_clust@dir,w,c
  4895  005822  6ED9               	movwf	fsr2l,c
  4896  005824  0E00               	movlw	0
  4897  005826  2004               	addwfc	ld_clust@dir+1,w,c
  4898  005828  6EDA               	movwf	fsr2h,c
  4899  00582A  CFDE F005          	movff	postinc2,??_ld_clust
  4900  00582E  CFDD F006          	movff	postdec2,??_ld_clust+1
  4901  005832  5005               	movf	??_ld_clust,w,c
  4902  005834  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  4903  005836  5006               	movf	??_ld_clust+1,w,c
  4904  005838  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  4905  00583A  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  4906  00583C  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  4907  00583E  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  4908  005842  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  4909  005846  6A08               	clrf	??_ld_clust+3,c
  4910  005848  6A07               	clrf	??_ld_clust+2,c
  4911  00584A  5007               	movf	??_ld_clust+2,w,c
  4912  00584C  120B               	iorwf	ld_clust@cl,f,c
  4913  00584E  5008               	movf	??_ld_clust+3,w,c
  4914  005850  120C               	iorwf	ld_clust@cl+1,f,c
  4915  005852  5009               	movf	??_ld_clust+4,w,c
  4916  005854  120D               	iorwf	ld_clust@cl+2,f,c
  4917  005856  500A               	movf	??_ld_clust+5,w,c
  4918  005858  120E               	iorwf	ld_clust@cl+3,f,c
  4919  00585A                     l5442:
  4920                           
  4921                           ;ff.c: 1246:  return cl;
  4922  00585A  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  4923  00585E  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  4924  005862  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  4925  005866  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  4926  00586A  0012               	return		;funcret
  4927  00586C                     __end_of_ld_clust:
  4928                           	opt callstack 0
  4929                           
  4930 ;; *************** function _dir_find *****************
  4931 ;; Defined at:
  4932 ;;		line 1458 in file "ff.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;  dp              2   32[BANK0 ] PTR struct .
  4935 ;;		 -> f_open@dj(22), 
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  4938 ;;		 -> FatFs(558), NULL(0), 
  4939 ;;  res             1   37[BANK0 ] enum E93
  4940 ;;  c               1   34[BANK0 ] unsigned char 
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      enum E93
  4943 ;; Registers used:
  4944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4950 ;;      Params:         0       2       0       0       0       0       0       0       0
  4951 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4953 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4954 ;;Total ram usage:        6 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:   11
  4957 ;; This function calls:
  4958 ;;		_dir_next
  4959 ;;		_dir_sdi
  4960 ;;		_mem_cmp
  4961 ;;		_move_window
  4962 ;; This function is called by:
  4963 ;;		_follow_path
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text12
  4968  004D70                     __ptext12:
  4969                           	opt callstack 0
  4970  004D70                     _dir_find:
  4971                           	opt callstack 16
  4972                           
  4973                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  4974                           
  4975                           ;incstack = 0
  4976  004D70  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  4977  004D74  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  4978  004D78  0E00               	movlw	0
  4979  004D7A  6E59               	movwf	dir_sdi@idx+1,c
  4980  004D7C  0E00               	movlw	0
  4981  004D7E  6E58               	movwf	dir_sdi@idx,c
  4982  004D80  ECC7  F01C         	call	_dir_sdi	;wreg free
  4983  004D84  0100               	movlb	0	; () banked
  4984  004D86  6F85               	movwf	dir_find@res& (0+255),b
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;ff.c: 1469:  if (res != FR_OK) return res;
  4988  004D88  5185               	movf	dir_find@res& (0+255),w,b
  4989  004D8A  B4D8               	btfsc	status,2,c
  4990  004D8C  D003               	goto	l5456
  4991  004D8E                     u6980:
  4992  004D8E  0100               	movlb	0	; () banked
  4993  004D90  5185               	movf	dir_find@res& (0+255),w,b
  4994  004D92  0012               	return	
  4995  004D94                     l5456:
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  4999  004D94  C080  FFD9         	movff	dir_find@dp,fsr2l
  5000  004D98  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  5001  004D9C  CFDE F030          	movff	postinc2,move_window@fs
  5002  004DA0  CFDD F031          	movff	postdec2,move_window@fs+1
  5003  004DA4  EE20 F00E          	lfsr	2,14
  5004  004DA8  5180               	movf	dir_find@dp& (0+255),w,b
  5005  004DAA  26D9               	addwf	fsr2l,f,c
  5006  004DAC  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5007  004DAE  22DA               	addwfc	fsr2h,f,c
  5008  004DB0  CFDE F032          	movff	postinc2,move_window@sector
  5009  004DB4  CFDE F033          	movff	postinc2,move_window@sector+1
  5010  004DB8  CFDE F034          	movff	postinc2,move_window@sector+2
  5011  004DBC  CFDE F035          	movff	postinc2,move_window@sector+3
  5012  004DC0  ECD8  F02A         	call	_move_window	;wreg free
  5013  004DC4  0100               	movlb	0	; () banked
  5014  004DC6  6F85               	movwf	dir_find@res& (0+255),b
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;ff.c: 1476:   if (res != FR_OK) break;
  5018  004DC8  5185               	movf	dir_find@res& (0+255),w,b
  5019  004DCA  A4D8               	btfss	status,2,c
  5020  004DCC  D7E0               	goto	u6980
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;ff.c: 1477:   dir = dp->dir;
  5024  004DCE  EE20 F012          	lfsr	2,18
  5025  004DD2  5180               	movf	dir_find@dp& (0+255),w,b
  5026  004DD4  26D9               	addwf	fsr2l,f,c
  5027  004DD6  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5028  004DD8  22DA               	addwfc	fsr2h,f,c
  5029  004DDA  CFDE F083          	movff	postinc2,dir_find@dir
  5030  004DDE  CFDD F084          	movff	postdec2,dir_find@dir+1
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;ff.c: 1478:   c = dir[0];
  5034  004DE2  C083  FFD9         	movff	dir_find@dir,fsr2l
  5035  004DE6  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  5036  004DEA  50DF               	movf	indf2,w,c
  5037  004DEC  6F82               	movwf	dir_find@c& (0+255),b
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  5041  004DEE  5182               	movf	dir_find@c& (0+255),w,b
  5042  004DF0  A4D8               	btfss	status,2,c
  5043  004DF2  D003               	goto	l5470
  5044                           
  5045                           ; BSR set to: 0
  5046  004DF4  0E04               	movlw	4
  5047  004DF6  6F85               	movwf	dir_find@res& (0+255),b
  5048  004DF8  D7CA               	goto	u6980
  5049  004DFA                     l5470:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  5053  004DFA  EE20 F00B          	lfsr	2,11
  5054  004DFE  5183               	movf	dir_find@dir& (0+255),w,b
  5055  004E00  26D9               	addwf	fsr2l,f,c
  5056  004E02  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  5057  004E04  22DA               	addwfc	fsr2h,f,c
  5058  004E06  B6DF               	btfsc	indf2,3,c
  5059  004E08  D018               	goto	l5476
  5060                           
  5061                           ; BSR set to: 0
  5062  004E0A  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  5063  004E0E  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  5064  004E12  EE20 F014          	lfsr	2,20
  5065  004E16  5180               	movf	dir_find@dp& (0+255),w,b
  5066  004E18  26D9               	addwf	fsr2l,f,c
  5067  004E1A  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  5068  004E1C  22DA               	addwfc	fsr2h,f,c
  5069  004E1E  CFDE F003          	movff	postinc2,mem_cmp@src
  5070  004E22  CFDD F004          	movff	postdec2,mem_cmp@src+1
  5071  004E26  0E00               	movlw	0
  5072  004E28  6E06               	movwf	mem_cmp@cnt+1,c
  5073  004E2A  0E0B               	movlw	11
  5074  004E2C  6E05               	movwf	mem_cmp@cnt,c
  5075  004E2E  ECAB  F02C         	call	_mem_cmp	;wreg free
  5076  004E32  5001               	movf	?_mem_cmp,w,c
  5077  004E34  1002               	iorwf	?_mem_cmp+1,w,c
  5078  004E36  B4D8               	btfsc	status,2,c
  5079  004E38  D7AA               	goto	u6980
  5080  004E3A                     l5476:
  5081                           
  5082                           ;ff.c: 1505:   res = dir_next(dp, 0);
  5083  004E3A  C080  F06D         	movff	dir_find@dp,dir_next@dp
  5084  004E3E  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  5085  004E42  0E00               	movlw	0
  5086  004E44  0100               	movlb	0	; () banked
  5087  004E46  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  5088  004E48  0E00               	movlw	0
  5089  004E4A  6F6F               	movwf	dir_next@stretch& (0+255),b
  5090  004E4C  EC02  F014         	call	_dir_next	;wreg free
  5091  004E50  0100               	movlb	0	; () banked
  5092  004E52  6F85               	movwf	dir_find@res& (0+255),b
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;ff.c: 1506:  } while (res == FR_OK);
  5096  004E54  5185               	movf	dir_find@res& (0+255),w,b
  5097  004E56  A4D8               	btfss	status,2,c
  5098  004E58  D79A               	goto	u6980
  5099  004E5A  D79C               	goto	l5456
  5100  004E5C                     __end_of_dir_find:
  5101                           	opt callstack 0
  5102                           
  5103 ;; *************** function _mem_cmp *****************
  5104 ;; Defined at:
  5105 ;;		line 533 in file "ff.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;  dst             2    0[COMRAM] PTR const void 
  5108 ;;		 -> FatFs(558), NULL(0), 
  5109 ;;  src             2    2[COMRAM] PTR const void 
  5110 ;;		 -> f_open@sfn(12), 
  5111 ;;  cnt             2    4[COMRAM] unsigned short 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  r               2   12[COMRAM] int 
  5114 ;;  s               2   10[COMRAM] PTR const unsigned char 
  5115 ;;		 -> f_open@sfn(12), 
  5116 ;;  d               2    8[COMRAM] PTR const unsigned char 
  5117 ;;		 -> FatFs(558), NULL(0), 
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  2    0[COMRAM] int 
  5120 ;; Registers used:
  5121 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5127 ;;      Params:         6       0       0       0       0       0       0       0       0
  5128 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5129 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5130 ;;      Totals:        14       0       0       0       0       0       0       0       0
  5131 ;;Total ram usage:       14 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; This function calls:
  5134 ;;		Nothing
  5135 ;; This function is called by:
  5136 ;;		_dir_find
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text13
  5141  005956                     __ptext13:
  5142                           	opt callstack 0
  5143  005956                     _mem_cmp:
  5144                           	opt callstack 26
  5145                           
  5146                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;incstack = 0
  5150  005956  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  5151  00595A  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5152  00595E  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  5153  005962  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  5154                           
  5155                           ;ff.c: 535:  int r = 0;
  5156  005966  0E00               	movlw	0
  5157  005968  6E0E               	movwf	mem_cmp@r+1,c
  5158  00596A  0E00               	movlw	0
  5159  00596C  6E0D               	movwf	mem_cmp@r,c
  5160  00596E                     l5066:
  5161  00596E  0605               	decf	mem_cmp@cnt,f,c
  5162  005970  A0D8               	btfss	status,0,c
  5163  005972  0606               	decf	mem_cmp@cnt+1,f,c
  5164  005974  2805               	incf	mem_cmp@cnt,w,c
  5165  005976  E103               	bnz	u6290
  5166  005978  2806               	incf	mem_cmp@cnt+1,w,c
  5167  00597A  B4D8               	btfsc	status,2,c
  5168  00597C  D01A               	goto	u6300
  5169  00597E                     u6290:
  5170  00597E  C009  FFD9         	movff	mem_cmp@d,fsr2l
  5171  005982  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  5172  005986  4A09               	infsnz	mem_cmp@d,f,c
  5173  005988  2A0A               	incf	mem_cmp@d+1,f,c
  5174  00598A  50DF               	movf	indf2,w,c
  5175  00598C  6E07               	movwf	??_mem_cmp& (0+255),c
  5176  00598E  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  5177  005992  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  5178  005996  4A0B               	infsnz	mem_cmp@s,f,c
  5179  005998  2A0C               	incf	mem_cmp@s+1,f,c
  5180  00599A  50DF               	movf	indf2,w,c
  5181  00599C  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  5182  00599E  5008               	movf	??_mem_cmp+1,w,c
  5183  0059A0  5C07               	subwf	??_mem_cmp,w,c
  5184  0059A2  6E0D               	movwf	mem_cmp@r,c
  5185  0059A4  6A0E               	clrf	mem_cmp@r+1,c
  5186  0059A6  A0D8               	btfss	status,0,c
  5187  0059A8  060E               	decf	mem_cmp@r+1,f,c
  5188  0059AA  500D               	movf	mem_cmp@r,w,c
  5189  0059AC  100E               	iorwf	mem_cmp@r+1,w,c
  5190  0059AE  B4D8               	btfsc	status,2,c
  5191  0059B0  D7DE               	goto	l5066
  5192  0059B2                     u6300:
  5193                           
  5194                           ;ff.c: 538:  return r;
  5195  0059B2  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  5196  0059B6  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  5197  0059BA  0012               	return		;funcret
  5198  0059BC                     __end_of_mem_cmp:
  5199                           	opt callstack 0
  5200                           
  5201 ;; *************** function _create_name *****************
  5202 ;; Defined at:
  5203 ;;		line 1843 in file "ff.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  dp              2    8[COMRAM] PTR struct .
  5206 ;;		 -> f_open@dj(22), 
  5207 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  5208 ;;		 -> follow_path@path(2), 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  i               2   28[COMRAM] unsigned short 
  5211 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  5212 ;;		 -> f_open@sfn(12), 
  5213 ;;  p               2   23[COMRAM] PTR const unsigned char 
  5214 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  5215 ;;  ni              2   21[COMRAM] unsigned short 
  5216 ;;  si              2   18[COMRAM] unsigned short 
  5217 ;;  c               1   30[COMRAM] unsigned char 
  5218 ;;  d               1   25[COMRAM] unsigned char 
  5219 ;;  b               1   20[COMRAM] unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      enum E93
  5222 ;; Registers used:
  5223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5229 ;;      Params:         4       0       0       0       0       0       0       0       0
  5230 ;;      Locals:        15       0       0       0       0       0       0       0       0
  5231 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5232 ;;      Totals:        23       0       0       0       0       0       0       0       0
  5233 ;;Total ram usage:       23 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    1
  5236 ;; This function calls:
  5237 ;;		_chk_chr
  5238 ;;		_mem_set
  5239 ;; This function is called by:
  5240 ;;		_follow_path
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           	psect	text14
  5245  003ED8                     __ptext14:
  5246                           	opt callstack 0
  5247  003ED8                     _create_name:
  5248                           	opt callstack 26
  5249                           
  5250                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  5251                           
  5252                           ;incstack = 0
  5253  003ED8  C00B  FFD9         	movff	create_name@path,fsr2l
  5254  003EDC  C00C  FFDA         	movff	create_name@path+1,fsr2h
  5255  003EE0  CFDE F018          	movff	postinc2,create_name@p
  5256  003EE4  CFDD F019          	movff	postdec2,create_name@p+1
  5257  003EE8  D002               	goto	l5488
  5258  003EEA                     l5486:
  5259  003EEA  4A18               	infsnz	create_name@p,f,c
  5260  003EEC  2A19               	incf	create_name@p+1,f,c
  5261  003EEE                     l5488:
  5262  003EEE  C018  FFF6         	movff	create_name@p,tblptrl
  5263  003EF2  C019  FFF7         	movff	create_name@p+1,tblptrh
  5264  003EF6                     	if	0	;tblptru may be non-zero
  5265  003EF6                     	endif
  5266  003EF6                     	if	0	;tblptru may be non-zero
  5267  003EF6                     	endif
  5268  003EF6  0008               	tblrd		*
  5269  003EF8  50F5               	movf	tablat,w,c
  5270  003EFA  0A2F               	xorlw	47
  5271  003EFC  B4D8               	btfsc	status,2,c
  5272  003EFE  D7F5               	goto	l5486
  5273  003F00  C018  FFF6         	movff	create_name@p,tblptrl
  5274  003F04  C019  FFF7         	movff	create_name@p+1,tblptrh
  5275  003F08                     	if	0	;tblptru may be non-zero
  5276  003F08                     	endif
  5277  003F08                     	if	0	;tblptru may be non-zero
  5278  003F08                     	endif
  5279  003F08  0008               	tblrd		*
  5280  003F0A  50F5               	movf	tablat,w,c
  5281  003F0C  0A5C               	xorlw	92
  5282  003F0E  B4D8               	btfsc	status,2,c
  5283  003F10  D7EC               	goto	l5486
  5284                           
  5285                           ;ff.c: 1975:  sfn = dp->fn;
  5286  003F12  EE20 F014          	lfsr	2,20
  5287  003F16  5009               	movf	create_name@dp,w,c
  5288  003F18  26D9               	addwf	fsr2l,f,c
  5289  003F1A  500A               	movf	create_name@dp+1,w,c
  5290  003F1C  22DA               	addwfc	fsr2h,f,c
  5291  003F1E  CFDE F01B          	movff	postinc2,create_name@sfn
  5292  003F22  CFDD F01C          	movff	postdec2,create_name@sfn+1
  5293                           
  5294                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  5295  003F26  C01B  F001         	movff	create_name@sfn,mem_set@dst
  5296  003F2A  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  5297  003F2E  0E00               	movlw	0
  5298  003F30  6E04               	movwf	mem_set@val+1,c
  5299  003F32  0E20               	movlw	32
  5300  003F34  6E03               	movwf	mem_set@val,c
  5301  003F36  0E00               	movlw	0
  5302  003F38  6E06               	movwf	mem_set@cnt+1,c
  5303  003F3A  0E0B               	movlw	11
  5304  003F3C  6E05               	movwf	mem_set@cnt,c
  5305  003F3E  EC0A  F02E         	call	_mem_set	;wreg free
  5306                           
  5307                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  5308  003F42  0E00               	movlw	0
  5309  003F44  6E15               	movwf	create_name@b,c
  5310  003F46  C015  F01D         	movff	create_name@b,create_name@i
  5311  003F4A  6A1E               	clrf	create_name@i+1,c
  5312  003F4C  C01D  F013         	movff	create_name@i,create_name@si
  5313  003F50  C01E  F014         	movff	create_name@i+1,create_name@si+1
  5314  003F54  0E00               	movlw	0
  5315  003F56  6E17               	movwf	create_name@ni+1,c
  5316  003F58  0E08               	movlw	8
  5317  003F5A  6E16               	movwf	create_name@ni,c
  5318  003F5C                     l5500:
  5319                           
  5320                           ;ff.c: 1992:   c = (BYTE)p[si++];
  5321  003F5C  5013               	movf	create_name@si,w,c
  5322  003F5E  2418               	addwf	create_name@p,w,c
  5323  003F60  6E0D               	movwf	??_create_name& (0+255),c
  5324  003F62  5014               	movf	create_name@si+1,w,c
  5325  003F64  2019               	addwfc	create_name@p+1,w,c
  5326  003F66  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5327  003F68  C00D  FFF6         	movff	??_create_name,tblptrl
  5328  003F6C  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5329  003F70                     	if	0	;tblptru may be non-zero
  5330  003F70                     	endif
  5331  003F70                     	if	0	;tblptru may be non-zero
  5332  003F70                     	endif
  5333  003F70  0008               	tblrd		*
  5334  003F72  CFF5 F01F          	movff	tablat,create_name@c
  5335  003F76  4A13               	infsnz	create_name@si,f,c
  5336  003F78  2A14               	incf	create_name@si+1,f,c
  5337                           
  5338                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  5339  003F7A  0E20               	movlw	32
  5340  003F7C  641F               	cpfsgt	create_name@c,c
  5341  003F7E  D0A4               	goto	l5584
  5342  003F80  0E2F               	movlw	47
  5343  003F82  181F               	xorwf	create_name@c,w,c
  5344  003F84  B4D8               	btfsc	status,2,c
  5345  003F86  D0A0               	goto	l5584
  5346  003F88  0E5C               	movlw	92
  5347  003F8A  181F               	xorwf	create_name@c,w,c
  5348  003F8C  B4D8               	btfsc	status,2,c
  5349  003F8E  D09C               	goto	l5584
  5350                           
  5351                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  5352  003F90  0E2E               	movlw	46
  5353  003F92  181F               	xorwf	create_name@c,w,c
  5354  003F94  B4D8               	btfsc	status,2,c
  5355  003F96  D006               	goto	u7100
  5356  003F98  5016               	movf	create_name@ni,w,c
  5357  003F9A  5C1D               	subwf	create_name@i,w,c
  5358  003F9C  5017               	movf	create_name@ni+1,w,c
  5359  003F9E  581E               	subwfb	create_name@i+1,w,c
  5360  003FA0  A0D8               	btfss	status,0,c
  5361  003FA2  D018               	goto	l5526
  5362  003FA4                     u7100:
  5363                           
  5364                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  5365  003FA4  0E08               	movlw	8
  5366  003FA6  1816               	xorwf	create_name@ni,w,c
  5367  003FA8  1017               	iorwf	create_name@ni+1,w,c
  5368  003FAA  A4D8               	btfss	status,2,c
  5369  003FAC  D004               	goto	u7120
  5370  003FAE  0E2E               	movlw	46
  5371  003FB0  181F               	xorwf	create_name@c,w,c
  5372  003FB2  B4D8               	btfsc	status,2,c
  5373  003FB4  D002               	goto	l5522
  5374  003FB6                     u7120:
  5375  003FB6  0E06               	movlw	6
  5376  003FB8  0012               	return	
  5377  003FBA                     l5522:
  5378                           
  5379                           ;ff.c: 1996:    i = 8; ni = 11;
  5380  003FBA  0E00               	movlw	0
  5381  003FBC  6E1E               	movwf	create_name@i+1,c
  5382  003FBE  0E08               	movlw	8
  5383  003FC0  6E1D               	movwf	create_name@i,c
  5384  003FC2  0E00               	movlw	0
  5385  003FC4  6E17               	movwf	create_name@ni+1,c
  5386  003FC6  0E0B               	movlw	11
  5387  003FC8  6E16               	movwf	create_name@ni,c
  5388                           
  5389                           ;ff.c: 1997:    b <<= 2; continue;
  5390  003FCA  90D8               	bcf	status,0,c
  5391  003FCC  3615               	rlcf	create_name@b,f,c
  5392  003FCE  90D8               	bcf	status,0,c
  5393  003FD0  3615               	rlcf	create_name@b,f,c
  5394  003FD2  D7C4               	goto	l5500
  5395  003FD4                     l5526:
  5396                           
  5397                           ;ff.c: 1999:   if (c >= 0x80) {
  5398  003FD4  0E7F               	movlw	127
  5399  003FD6  641F               	cpfsgt	create_name@c,c
  5400  003FD8  D002               	goto	l432
  5401                           
  5402                           ;ff.c: 2000:    b |= 3;
  5403  003FDA  0E03               	movlw	3
  5404  003FDC  1215               	iorwf	create_name@b,f,c
  5405  003FDE                     l432:
  5406                           
  5407                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  5408  003FDE  0E80               	movlw	128
  5409  003FE0  641F               	cpfsgt	create_name@c,c
  5410  003FE2  D003               	goto	u7150
  5411  003FE4  0E9F               	movlw	159
  5412  003FE6  641F               	cpfsgt	create_name@c,c
  5413  003FE8  D006               	goto	u7170
  5414  003FEA                     u7150:
  5415  003FEA  0EDF               	movlw	223
  5416  003FEC  641F               	cpfsgt	create_name@c,c
  5417  003FEE  D043               	goto	l5560
  5418  003FF0  0EFD               	movlw	253
  5419  003FF2  601F               	cpfslt	create_name@c,c
  5420  003FF4  D040               	goto	l5560
  5421  003FF6                     u7170:
  5422                           
  5423                           ;ff.c: 2010:    d = (BYTE)p[si++];
  5424  003FF6  5013               	movf	create_name@si,w,c
  5425  003FF8  2418               	addwf	create_name@p,w,c
  5426  003FFA  6E0D               	movwf	??_create_name& (0+255),c
  5427  003FFC  5014               	movf	create_name@si+1,w,c
  5428  003FFE  2019               	addwfc	create_name@p+1,w,c
  5429  004000  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5430  004002  C00D  FFF6         	movff	??_create_name,tblptrl
  5431  004006  C00E  FFF7         	movff	??_create_name+1,tblptrh
  5432  00400A                     	if	0	;tblptru may be non-zero
  5433  00400A                     	endif
  5434  00400A                     	if	0	;tblptru may be non-zero
  5435  00400A                     	endif
  5436  00400A  0008               	tblrd		*
  5437  00400C  CFF5 F01A          	movff	tablat,create_name@d
  5438  004010  4A13               	infsnz	create_name@si,f,c
  5439  004012  2A14               	incf	create_name@si+1,f,c
  5440                           
  5441                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  5442  004014  0E3F               	movlw	63
  5443  004016  641A               	cpfsgt	create_name@d,c
  5444  004018  D003               	goto	u7190
  5445  00401A  0E7E               	movlw	126
  5446  00401C  641A               	cpfsgt	create_name@d,c
  5447  00401E  D006               	goto	u7210
  5448  004020                     u7190:
  5449  004020  0E7F               	movlw	127
  5450  004022  641A               	cpfsgt	create_name@d,c
  5451  004024  D7C8               	goto	u7120
  5452  004026  0EFD               	movlw	253
  5453  004028  601A               	cpfslt	create_name@d,c
  5454  00402A  D7C5               	goto	u7120
  5455  00402C                     u7210:
  5456  00402C  0EFF               	movlw	255
  5457  00402E  6E0D               	movwf	??_create_name& (0+255),c
  5458  004030  0EFF               	movlw	255
  5459  004032  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5460  004034  C016  F00F         	movff	create_name@ni,??_create_name+2
  5461  004038  C017  F010         	movff	create_name@ni+1,??_create_name+3
  5462  00403C  500D               	movf	??_create_name,w,c
  5463  00403E  260F               	addwf	??_create_name+2,f,c
  5464  004040  500E               	movf	??_create_name+1,w,c
  5465  004042  2210               	addwfc	??_create_name+3,f,c
  5466  004044  500F               	movf	??_create_name+2,w,c
  5467  004046  5C1D               	subwf	create_name@i,w,c
  5468  004048  5010               	movf	??_create_name+3,w,c
  5469  00404A  581E               	subwfb	create_name@i+1,w,c
  5470  00404C  B0D8               	btfsc	status,0,c
  5471  00404E  D7B3               	goto	u7120
  5472                           
  5473                           ;ff.c: 2013:    sfn[i++] = c;
  5474  004050  501D               	movf	create_name@i,w,c
  5475  004052  241B               	addwf	create_name@sfn,w,c
  5476  004054  6ED9               	movwf	fsr2l,c
  5477  004056  501E               	movf	create_name@i+1,w,c
  5478  004058  201C               	addwfc	create_name@sfn+1,w,c
  5479  00405A  6EDA               	movwf	fsr2h,c
  5480  00405C  C01F  FFDF         	movff	create_name@c,indf2
  5481  004060  4A1D               	infsnz	create_name@i,f,c
  5482  004062  2A1E               	incf	create_name@i+1,f,c
  5483                           
  5484                           ;ff.c: 2014:    sfn[i++] = d;
  5485  004064  501D               	movf	create_name@i,w,c
  5486  004066  241B               	addwf	create_name@sfn,w,c
  5487  004068  6ED9               	movwf	fsr2l,c
  5488  00406A  501E               	movf	create_name@i+1,w,c
  5489  00406C  201C               	addwfc	create_name@sfn+1,w,c
  5490  00406E  6EDA               	movwf	fsr2h,c
  5491  004070  C01A  FFDF         	movff	create_name@d,indf2
  5492  004074  D026               	goto	l5582
  5493  004076                     l5560:
  5494                           
  5495                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  5496  004076  0E01               	movlw	low STR_1
  5497  004078  6E01               	movwf	chk_chr@str,c
  5498  00407A  0E08               	movlw	high STR_1
  5499  00407C  6E02               	movwf	chk_chr@str+1,c
  5500  00407E  C01F  F003         	movff	create_name@c,chk_chr@chr
  5501  004082  6A04               	clrf	chk_chr@chr+1,c
  5502  004084  EC67  F02D         	call	_chk_chr	;wreg free
  5503  004088  5001               	movf	?_chk_chr,w,c
  5504  00408A  1002               	iorwf	?_chk_chr+1,w,c
  5505  00408C  A4D8               	btfss	status,2,c
  5506  00408E  D793               	goto	u7120
  5507                           
  5508                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  5509  004090  0E40               	movlw	64
  5510  004092  641F               	cpfsgt	create_name@c,c
  5511  004094  D005               	goto	l5572
  5512  004096  0E5B               	movlw	91
  5513  004098  601F               	cpfslt	create_name@c,c
  5514  00409A  D002               	goto	l5572
  5515                           
  5516                           ;ff.c: 2019:     b |= 2;
  5517  00409C  8215               	bsf	create_name@b,1,c
  5518                           
  5519                           ;ff.c: 2020:    } else {
  5520  00409E  D009               	goto	l5580
  5521  0040A0                     l5572:
  5522                           
  5523                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  5524  0040A0  0E60               	movlw	96
  5525  0040A2  641F               	cpfsgt	create_name@c,c
  5526  0040A4  D006               	goto	l5580
  5527  0040A6  0E7B               	movlw	123
  5528  0040A8  601F               	cpfslt	create_name@c,c
  5529  0040AA  D003               	goto	l5580
  5530                           
  5531                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  5532  0040AC  8015               	bsf	create_name@b,0,c
  5533  0040AE  0E20               	movlw	32
  5534  0040B0  5E1F               	subwf	create_name@c,f,c
  5535  0040B2                     l5580:
  5536                           
  5537                           ;ff.c: 2025:    sfn[i++] = c;
  5538  0040B2  501D               	movf	create_name@i,w,c
  5539  0040B4  241B               	addwf	create_name@sfn,w,c
  5540  0040B6  6ED9               	movwf	fsr2l,c
  5541  0040B8  501E               	movf	create_name@i+1,w,c
  5542  0040BA  201C               	addwfc	create_name@sfn+1,w,c
  5543  0040BC  6EDA               	movwf	fsr2h,c
  5544  0040BE  C01F  FFDF         	movff	create_name@c,indf2
  5545  0040C2                     l5582:
  5546  0040C2  4A1D               	infsnz	create_name@i,f,c
  5547  0040C4  2A1E               	incf	create_name@i+1,f,c
  5548  0040C6  D74A               	goto	l5500
  5549  0040C8                     l5584:
  5550                           
  5551                           ;ff.c: 2028:  *path = &p[si];
  5552  0040C8  5013               	movf	create_name@si,w,c
  5553  0040CA  2418               	addwf	create_name@p,w,c
  5554  0040CC  6E0D               	movwf	??_create_name& (0+255),c
  5555  0040CE  5014               	movf	create_name@si+1,w,c
  5556  0040D0  2019               	addwfc	create_name@p+1,w,c
  5557  0040D2  6E0E               	movwf	(??_create_name+1)& (0+255),c
  5558  0040D4  C00B  FFD9         	movff	create_name@path,fsr2l
  5559  0040D8  C00C  FFDA         	movff	create_name@path+1,fsr2h
  5560  0040DC  C00D  FFDE         	movff	??_create_name,postinc2
  5561  0040E0  C00E  FFDD         	movff	??_create_name+1,postdec2
  5562                           
  5563                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  5564  0040E4  0E20               	movlw	32
  5565  0040E6  641F               	cpfsgt	create_name@c,c
  5566  0040E8  D004               	goto	l5590
  5567  0040EA  0E00               	movlw	0
  5568  0040EC  6E12               	movwf	_create_name$624+1,c
  5569  0040EE  0E00               	movlw	0
  5570  0040F0  D003               	goto	L8
  5571  0040F2                     l5590:
  5572  0040F2  0E00               	movlw	0
  5573  0040F4  6E12               	movwf	_create_name$624+1,c
  5574  0040F6  0E04               	movlw	4
  5575  0040F8                     L8:
  5576  0040F8  6E11               	movwf	_create_name$624,c
  5577  0040FA  C011  F01F         	movff	_create_name$624,create_name@c
  5578                           
  5579                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  5580  0040FE  501D               	movf	create_name@i,w,c
  5581  004100  101E               	iorwf	create_name@i+1,w,c
  5582  004102  B4D8               	btfsc	status,2,c
  5583  004104  D758               	goto	u7120
  5584                           
  5585                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  5586  004106  C01B  FFD9         	movff	create_name@sfn,fsr2l
  5587  00410A  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  5588  00410E  0EE5               	movlw	229
  5589  004110  18DE               	xorwf	postinc2,w,c
  5590  004112  A4D8               	btfss	status,2,c
  5591  004114  D006               	goto	l5604
  5592  004116  C01B  FFD9         	movff	create_name@sfn,fsr2l
  5593  00411A  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  5594  00411E  0E05               	movlw	5
  5595  004120  6EDF               	movwf	indf2,c
  5596  004122                     l5604:
  5597                           
  5598                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  5599  004122  0E08               	movlw	8
  5600  004124  1816               	xorwf	create_name@ni,w,c
  5601  004126  1017               	iorwf	create_name@ni+1,w,c
  5602  004128  A4D8               	btfss	status,2,c
  5603  00412A  D004               	goto	l456
  5604  00412C  90D8               	bcf	status,0,c
  5605  00412E  3615               	rlcf	create_name@b,f,c
  5606  004130  90D8               	bcf	status,0,c
  5607  004132  3615               	rlcf	create_name@b,f,c
  5608  004134                     l456:
  5609                           
  5610                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  5611  004134  5015               	movf	create_name@b,w,c
  5612  004136  0B03               	andlw	3
  5613  004138  06E8               	decf	wreg,f,c
  5614  00413A  B4D8               	btfsc	status,2,c
  5615  00413C  881F               	bsf	create_name@c,4,c
  5616                           
  5617                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  5618  00413E  5015               	movf	create_name@b,w,c
  5619  004140  0B0C               	andlw	12
  5620  004142  0A04               	xorlw	4
  5621  004144  B4D8               	btfsc	status,2,c
  5622  004146  861F               	bsf	create_name@c,3,c
  5623                           
  5624                           ;ff.c: 2038:  sfn[11] = c;
  5625  004148  EE20 F00B          	lfsr	2,11
  5626  00414C  501B               	movf	create_name@sfn,w,c
  5627  00414E  26D9               	addwf	fsr2l,f,c
  5628  004150  501C               	movf	create_name@sfn+1,w,c
  5629  004152  22DA               	addwfc	fsr2h,f,c
  5630  004154  C01F  FFDF         	movff	create_name@c,indf2
  5631                           
  5632                           ;ff.c: 2040:  return FR_OK;
  5633  004158  0E00               	movlw	0
  5634  00415A  0012               	return		;funcret
  5635  00415C                     __end_of_create_name:
  5636                           	opt callstack 0
  5637                           
  5638 ;; *************** function _chk_chr *****************
  5639 ;; Defined at:
  5640 ;;		line 543 in file "ff.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  str             2    0[COMRAM] PTR const unsigned char 
  5643 ;;		 -> STR_2(15), 
  5644 ;;  chr             2    2[COMRAM] int 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  2    0[COMRAM] int 
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5656 ;;      Params:         4       0       0       0       0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5658 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5659 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5660 ;;Total ram usage:        6 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		_create_name
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text15
  5670  005ACE                     __ptext15:
  5671                           	opt callstack 0
  5672  005ACE                     _chk_chr:
  5673                           	opt callstack 26
  5674                           
  5675                           ;ff.c: 544:  while (*str && *str != chr) str++;
  5676                           
  5677                           ;incstack = 0
  5678  005ACE  D002               	goto	l5074
  5679  005AD0                     l5072:
  5680  005AD0  4A01               	infsnz	chk_chr@str,f,c
  5681  005AD2  2A02               	incf	chk_chr@str+1,f,c
  5682  005AD4                     l5074:
  5683  005AD4  C001  FFF6         	movff	chk_chr@str,tblptrl
  5684  005AD8  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5685  005ADC                     	if	0	;tblptru may be non-zero
  5686  005ADC                     	endif
  5687  005ADC                     	if	0	;tblptru may be non-zero
  5688  005ADC                     	endif
  5689  005ADC  0008               	tblrd		*
  5690  005ADE  50F5               	movf	tablat,w,c
  5691  005AE0  0900               	iorlw	0
  5692  005AE2  B4D8               	btfsc	status,2,c
  5693  005AE4  D00F               	goto	u6320
  5694  005AE6  C001  FFF6         	movff	chk_chr@str,tblptrl
  5695  005AEA  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5696  005AEE                     	if	0	;tblptru may be non-zero
  5697  005AEE                     	endif
  5698  005AEE                     	if	0	;tblptru may be non-zero
  5699  005AEE                     	endif
  5700  005AEE  0008               	tblrd		*
  5701  005AF0  50F5               	movf	tablat,w,c
  5702  005AF2  6E05               	movwf	??_chk_chr& (0+255),c
  5703  005AF4  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  5704  005AF6  5003               	movf	chk_chr@chr,w,c
  5705  005AF8  1805               	xorwf	??_chk_chr,w,c
  5706  005AFA  E1EA               	bnz	l5072
  5707  005AFC  5004               	movf	chk_chr@chr+1,w,c
  5708  005AFE  1806               	xorwf	??_chk_chr+1,w,c
  5709  005B00  A4D8               	btfss	status,2,c
  5710  005B02  D7E6               	goto	l5072
  5711  005B04                     u6320:
  5712                           
  5713                           ;ff.c: 545:  return *str;
  5714  005B04  C001  FFF6         	movff	chk_chr@str,tblptrl
  5715  005B08  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  5716  005B0C                     	if	0	;tblptru may be non-zero
  5717  005B0C                     	endif
  5718  005B0C                     	if	0	;tblptru may be non-zero
  5719  005B0C                     	endif
  5720  005B0C  0008               	tblrd		*
  5721  005B0E  50F5               	movf	tablat,w,c
  5722  005B10  6E01               	movwf	?_chk_chr,c
  5723  005B12  6A02               	clrf	?_chk_chr+1,c
  5724  005B14  0012               	return		;funcret
  5725  005B16                     __end_of_chk_chr:
  5726                           	opt callstack 0
  5727                           
  5728 ;; *************** function _dir_register *****************
  5729 ;; Defined at:
  5730 ;;		line 1578 in file "ff.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  dp              2   42[BANK0 ] PTR struct .
  5733 ;;		 -> f_open@dj(22), 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  res             1   44[BANK0 ] enum E93
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  1    wreg      enum E93
  5738 ;; Registers used:
  5739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5745 ;;      Params:         0       2       0       0       0       0       0       0       0
  5746 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5748 ;;      Totals:         0       3       0       0       0       0       0       0       0
  5749 ;;Total ram usage:        3 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:   12
  5752 ;; This function calls:
  5753 ;;		_dir_alloc
  5754 ;;		_mem_cpy
  5755 ;;		_mem_set
  5756 ;;		_move_window
  5757 ;; This function is called by:
  5758 ;;		_f_open
  5759 ;; This function uses a non-reentrant model
  5760 ;;
  5761                           
  5762                           	psect	text16
  5763  00510A                     __ptext16:
  5764                           	opt callstack 0
  5765  00510A                     _dir_register:
  5766                           	opt callstack 16
  5767                           
  5768                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  5769                           
  5770                           ;incstack = 0
  5771  00510A  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  5772  00510E  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  5773  005112  0E00               	movlw	0
  5774  005114  0100               	movlb	0	; () banked
  5775  005116  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  5776  005118  0E01               	movlw	1
  5777  00511A  6F82               	movwf	dir_alloc@nent& (0+255),b
  5778  00511C  EC40  F026         	call	_dir_alloc	;wreg free
  5779  005120  0100               	movlb	0	; () banked
  5780  005122  6F8C               	movwf	dir_register@res& (0+255),b
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;ff.c: 1632:  if (res == FR_OK) {
  5784  005124  518C               	movf	dir_register@res& (0+255),w,b
  5785  005126  A4D8               	btfss	status,2,c
  5786  005128  D058               	goto	l5786
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  5790  00512A  C08A  FFD9         	movff	dir_register@dp,fsr2l
  5791  00512E  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  5792  005132  CFDE F030          	movff	postinc2,move_window@fs
  5793  005136  CFDD F031          	movff	postdec2,move_window@fs+1
  5794  00513A  EE20 F00E          	lfsr	2,14
  5795  00513E  518A               	movf	dir_register@dp& (0+255),w,b
  5796  005140  26D9               	addwf	fsr2l,f,c
  5797  005142  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5798  005144  22DA               	addwfc	fsr2h,f,c
  5799  005146  CFDE F032          	movff	postinc2,move_window@sector
  5800  00514A  CFDE F033          	movff	postinc2,move_window@sector+1
  5801  00514E  CFDE F034          	movff	postinc2,move_window@sector+2
  5802  005152  CFDE F035          	movff	postinc2,move_window@sector+3
  5803  005156  ECD8  F02A         	call	_move_window	;wreg free
  5804  00515A  0100               	movlb	0	; () banked
  5805  00515C  6F8C               	movwf	dir_register@res& (0+255),b
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;ff.c: 1634:   if (res == FR_OK) {
  5809  00515E  518C               	movf	dir_register@res& (0+255),w,b
  5810  005160  A4D8               	btfss	status,2,c
  5811  005162  D03B               	goto	l5786
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  5815  005164  EE20 F012          	lfsr	2,18
  5816  005168  518A               	movf	dir_register@dp& (0+255),w,b
  5817  00516A  26D9               	addwf	fsr2l,f,c
  5818  00516C  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5819  00516E  22DA               	addwfc	fsr2h,f,c
  5820  005170  CFDE F001          	movff	postinc2,mem_set@dst
  5821  005174  CFDD F002          	movff	postdec2,mem_set@dst+1
  5822  005178  0E00               	movlw	0
  5823  00517A  6E04               	movwf	mem_set@val+1,c
  5824  00517C  0E00               	movlw	0
  5825  00517E  6E03               	movwf	mem_set@val,c
  5826  005180  0E00               	movlw	0
  5827  005182  6E06               	movwf	mem_set@cnt+1,c
  5828  005184  0E20               	movlw	32
  5829  005186  6E05               	movwf	mem_set@cnt,c
  5830  005188  EC0A  F02E         	call	_mem_set	;wreg free
  5831                           
  5832                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  5833  00518C  0100               	movlb	0	; () banked
  5834  00518E  EE20 F012          	lfsr	2,18
  5835  005192  518A               	movf	dir_register@dp& (0+255),w,b
  5836  005194  26D9               	addwf	fsr2l,f,c
  5837  005196  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5838  005198  22DA               	addwfc	fsr2h,f,c
  5839  00519A  CFDE F001          	movff	postinc2,mem_cpy@dst
  5840  00519E  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  5841  0051A2  EE20 F014          	lfsr	2,20
  5842  0051A6  518A               	movf	dir_register@dp& (0+255),w,b
  5843  0051A8  26D9               	addwf	fsr2l,f,c
  5844  0051AA  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  5845  0051AC  22DA               	addwfc	fsr2h,f,c
  5846  0051AE  CFDE F003          	movff	postinc2,mem_cpy@src
  5847  0051B2  CFDD F004          	movff	postdec2,mem_cpy@src+1
  5848  0051B6  0E00               	movlw	0
  5849  0051B8  6E06               	movwf	mem_cpy@cnt+1,c
  5850  0051BA  0E0B               	movlw	11
  5851  0051BC  6E05               	movwf	mem_cpy@cnt,c
  5852  0051BE  EC36  F02C         	call	_mem_cpy	;wreg free
  5853                           
  5854                           ;ff.c: 1640:    dp->fs->wflag = 1;
  5855  0051C2  C08A  FFD9         	movff	dir_register@dp,fsr2l
  5856  0051C6  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  5857  0051CA  EE10 F004          	lfsr	1,4
  5858  0051CE  50DE               	movf	postinc2,w,c
  5859  0051D0  26E1               	addwf	fsr1l,f,c
  5860  0051D2  50DD               	movf	postdec2,w,c
  5861  0051D4  22E2               	addwfc	fsr1h,f,c
  5862  0051D6  0E01               	movlw	1
  5863  0051D8  6EE7               	movwf	indf1,c
  5864  0051DA                     l5786:
  5865                           
  5866                           ;ff.c: 1644:  return res;
  5867  0051DA  0100               	movlb	0	; () banked
  5868  0051DC  518C               	movf	dir_register@res& (0+255),w,b
  5869                           
  5870                           ; BSR set to: 0
  5871  0051DE  0012               	return		;funcret
  5872  0051E0                     __end_of_dir_register:
  5873                           	opt callstack 0
  5874                           
  5875 ;; *************** function _mem_cpy *****************
  5876 ;; Defined at:
  5877 ;;		line 507 in file "ff.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  dst             2    0[COMRAM] PTR void 
  5880 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  5881 ;;  src             2    2[COMRAM] PTR const void 
  5882 ;;		 -> FatFs(558), ND(2), f_open@sfn(12), NULL(0), 
  5883 ;;  cnt             2    4[COMRAM] unsigned short 
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;  s               2    8[COMRAM] PTR const unsigned char 
  5886 ;;		 -> FatFs(558), ND(2), f_open@sfn(12), NULL(0), 
  5887 ;;  d               2    6[COMRAM] PTR unsigned char 
  5888 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      void 
  5891 ;; Registers used:
  5892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5898 ;;      Params:         6       0       0       0       0       0       0       0       0
  5899 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5901 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5902 ;;Total ram usage:       10 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; This function calls:
  5905 ;;		Nothing
  5906 ;; This function is called by:
  5907 ;;		_dir_register
  5908 ;;		_f_write
  5909 ;;		_f_read
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text17
  5914  00586C                     __ptext17:
  5915                           	opt callstack 0
  5916  00586C                     _mem_cpy:
  5917                           	opt callstack 27
  5918                           
  5919                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;incstack = 0
  5923  00586C  C001  F007         	movff	mem_cpy@dst,mem_cpy@d
  5924  005870  C002  F008         	movff	mem_cpy@dst+1,mem_cpy@d+1
  5925                           
  5926                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  5927  005874  C003  F009         	movff	mem_cpy@src,mem_cpy@s
  5928  005878  C004  F00A         	movff	mem_cpy@src+1,mem_cpy@s+1
  5929                           
  5930                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  5931  00587C  D018               	goto	l5366
  5932  00587E                     l5358:
  5933                           
  5934                           ;ff.c: 513:   *(int*)d = *(int*)s;
  5935  00587E  C009  FFD9         	movff	mem_cpy@s,fsr2l
  5936  005882  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  5937  005886  C007  FFE1         	movff	mem_cpy@d,fsr1l
  5938  00588A  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  5939  00588E  CFDE FFE6          	movff	postinc2,postinc1
  5940  005892  CFDD FFE5          	movff	postdec2,postdec1
  5941                           
  5942                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  5943  005896  0E02               	movlw	2
  5944  005898  2607               	addwf	mem_cpy@d,f,c
  5945  00589A  0E00               	movlw	0
  5946  00589C  2208               	addwfc	mem_cpy@d+1,f,c
  5947  00589E  0E02               	movlw	2
  5948  0058A0  2609               	addwf	mem_cpy@s,f,c
  5949  0058A2  0E00               	movlw	0
  5950  0058A4  220A               	addwfc	mem_cpy@s+1,f,c
  5951                           
  5952                           ;ff.c: 515:   cnt -= sizeof (int);
  5953  0058A6  0E02               	movlw	2
  5954  0058A8  5E05               	subwf	mem_cpy@cnt,f,c
  5955  0058AA  0E00               	movlw	0
  5956  0058AC  5A06               	subwfb	mem_cpy@cnt+1,f,c
  5957  0058AE                     l5366:
  5958                           
  5959                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  5960  0058AE  5006               	movf	mem_cpy@cnt+1,w,c
  5961  0058B0  E1E6               	bnz	l5358
  5962  0058B2  0E02               	movlw	2
  5963  0058B4  5C05               	subwf	mem_cpy@cnt,w,c
  5964  0058B6  A0D8               	btfss	status,0,c
  5965  0058B8  D00F               	goto	l5374
  5966  0058BA  D7E1               	goto	l5358
  5967  0058BC                     l5368:
  5968                           
  5969                           ;ff.c: 519:   *d++ = *s++;
  5970  0058BC  C009  FFD9         	movff	mem_cpy@s,fsr2l
  5971  0058C0  C00A  FFDA         	movff	mem_cpy@s+1,fsr2h
  5972  0058C4  C007  FFE1         	movff	mem_cpy@d,fsr1l
  5973  0058C8  C008  FFE2         	movff	mem_cpy@d+1,fsr1h
  5974  0058CC  CFDF FFE7          	movff	indf2,indf1
  5975  0058D0  4A09               	infsnz	mem_cpy@s,f,c
  5976  0058D2  2A0A               	incf	mem_cpy@s+1,f,c
  5977  0058D4  4A07               	infsnz	mem_cpy@d,f,c
  5978  0058D6  2A08               	incf	mem_cpy@d+1,f,c
  5979  0058D8                     l5374:
  5980                           
  5981                           ;ff.c: 518:  while (cnt--)
  5982  0058D8  0605               	decf	mem_cpy@cnt,f,c
  5983  0058DA  A0D8               	btfss	status,0,c
  5984  0058DC  0606               	decf	mem_cpy@cnt+1,f,c
  5985  0058DE  2805               	incf	mem_cpy@cnt,w,c
  5986  0058E0  E1ED               	bnz	l5368
  5987  0058E2  2806               	incf	mem_cpy@cnt+1,w,c
  5988  0058E4  B4D8               	btfsc	status,2,c
  5989  0058E6  0012               	return	
  5990  0058E8  D7E9               	goto	l5368
  5991  0058EA                     __end_of_mem_cpy:
  5992                           	opt callstack 0
  5993                           
  5994 ;; *************** function _dir_alloc *****************
  5995 ;; Defined at:
  5996 ;;		line 1199 in file "ff.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  dp              2   32[BANK0 ] PTR struct .
  5999 ;;		 -> f_open@dj(22), 
  6000 ;;  nent            2   34[BANK0 ] unsigned short 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;  n               2   39[BANK0 ] unsigned short 
  6003 ;;  res             1   41[BANK0 ] enum E93
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  1    wreg      enum E93
  6006 ;; Registers used:
  6007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6013 ;;      Params:         0       4       0       0       0       0       0       0       0
  6014 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6015 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6016 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6017 ;;Total ram usage:       10 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; Hardware stack levels required when called:   11
  6020 ;; This function calls:
  6021 ;;		_dir_next
  6022 ;;		_dir_sdi
  6023 ;;		_move_window
  6024 ;; This function is called by:
  6025 ;;		_dir_register
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text18
  6030  004C80                     __ptext18:
  6031                           	opt callstack 0
  6032  004C80                     _dir_alloc:
  6033                           	opt callstack 16
  6034                           
  6035                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  6036                           
  6037                           ;incstack = 0
  6038  004C80  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  6039  004C84  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  6040  004C88  0E00               	movlw	0
  6041  004C8A  6E59               	movwf	dir_sdi@idx+1,c
  6042  004C8C  0E00               	movlw	0
  6043  004C8E  6E58               	movwf	dir_sdi@idx,c
  6044  004C90  ECC7  F01C         	call	_dir_sdi	;wreg free
  6045  004C94  0100               	movlb	0	; () banked
  6046  004C96  6F89               	movwf	dir_alloc@res& (0+255),b
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;ff.c: 1209:  if (res == FR_OK) {
  6050  004C98  5189               	movf	dir_alloc@res& (0+255),w,b
  6051  004C9A  A4D8               	btfss	status,2,c
  6052  004C9C  D061               	goto	u6950
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;ff.c: 1210:   n = 0;
  6056  004C9E  0E00               	movlw	0
  6057  004CA0  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  6058  004CA2  0E00               	movlw	0
  6059  004CA4  6F87               	movwf	dir_alloc@n& (0+255),b
  6060  004CA6                     l5412:
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  6064  004CA6  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  6065  004CAA  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  6066  004CAE  CFDE F030          	movff	postinc2,move_window@fs
  6067  004CB2  CFDD F031          	movff	postdec2,move_window@fs+1
  6068  004CB6  EE20 F00E          	lfsr	2,14
  6069  004CBA  5180               	movf	dir_alloc@dp& (0+255),w,b
  6070  004CBC  26D9               	addwf	fsr2l,f,c
  6071  004CBE  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6072  004CC0  22DA               	addwfc	fsr2h,f,c
  6073  004CC2  CFDE F032          	movff	postinc2,move_window@sector
  6074  004CC6  CFDE F033          	movff	postinc2,move_window@sector+1
  6075  004CCA  CFDE F034          	movff	postinc2,move_window@sector+2
  6076  004CCE  CFDE F035          	movff	postinc2,move_window@sector+3
  6077  004CD2  ECD8  F02A         	call	_move_window	;wreg free
  6078  004CD6  0100               	movlb	0	; () banked
  6079  004CD8  6F89               	movwf	dir_alloc@res& (0+255),b
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;ff.c: 1213:    if (res != FR_OK) break;
  6083  004CDA  5189               	movf	dir_alloc@res& (0+255),w,b
  6084  004CDC  A4D8               	btfss	status,2,c
  6085  004CDE  D040               	goto	u6950
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  6089  004CE0  EE20 F012          	lfsr	2,18
  6090  004CE4  5180               	movf	dir_alloc@dp& (0+255),w,b
  6091  004CE6  26D9               	addwf	fsr2l,f,c
  6092  004CE8  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6093  004CEA  22DA               	addwfc	fsr2h,f,c
  6094  004CEC  CFDE F084          	movff	postinc2,??_dir_alloc
  6095  004CF0  CFDD F085          	movff	postdec2,??_dir_alloc+1
  6096  004CF4  C084  FFD9         	movff	??_dir_alloc,fsr2l
  6097  004CF8  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  6098  004CFC  0EE5               	movlw	229
  6099  004CFE  18DE               	xorwf	postinc2,w,c
  6100  004D00  B4D8               	btfsc	status,2,c
  6101  004D02  D011               	goto	u6930
  6102                           
  6103                           ; BSR set to: 0
  6104  004D04  EE20 F012          	lfsr	2,18
  6105  004D08  5180               	movf	dir_alloc@dp& (0+255),w,b
  6106  004D0A  26D9               	addwf	fsr2l,f,c
  6107  004D0C  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  6108  004D0E  22DA               	addwfc	fsr2h,f,c
  6109  004D10  CFDE F084          	movff	postinc2,??_dir_alloc
  6110  004D14  CFDD F085          	movff	postdec2,??_dir_alloc+1
  6111  004D18  C084  FFD9         	movff	??_dir_alloc,fsr2l
  6112  004D1C  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  6113  004D20  50DF               	movf	indf2,w,c
  6114  004D22  A4D8               	btfss	status,2,c
  6115  004D24  D00A               	goto	l5426
  6116  004D26                     u6930:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;ff.c: 1215:     if (++n == nent) break;
  6120  004D26  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  6121  004D28  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  6122  004D2A  5182               	movf	dir_alloc@nent& (0+255),w,b
  6123  004D2C  1987               	xorwf	dir_alloc@n& (0+255),w,b
  6124  004D2E  E109               	bnz	l5428
  6125  004D30  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  6126  004D32  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  6127  004D34  B4D8               	btfsc	status,2,c
  6128  004D36  D014               	goto	u6950
  6129  004D38  D004               	goto	l5428
  6130  004D3A                     l5426:
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;ff.c: 1217:     n = 0;
  6134  004D3A  0E00               	movlw	0
  6135  004D3C  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  6136  004D3E  0E00               	movlw	0
  6137  004D40  6F87               	movwf	dir_alloc@n& (0+255),b
  6138  004D42                     l5428:
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;ff.c: 1219:    res = dir_next(dp, 1);
  6142  004D42  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  6143  004D46  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  6144  004D4A  0E00               	movlw	0
  6145  004D4C  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  6146  004D4E  0E01               	movlw	1
  6147  004D50  6F6F               	movwf	dir_next@stretch& (0+255),b
  6148  004D52  EC02  F014         	call	_dir_next	;wreg free
  6149  004D56  0100               	movlb	0	; () banked
  6150  004D58  6F89               	movwf	dir_alloc@res& (0+255),b
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;ff.c: 1220:   } while (res == FR_OK);
  6154  004D5A  5189               	movf	dir_alloc@res& (0+255),w,b
  6155  004D5C  B4D8               	btfsc	status,2,c
  6156  004D5E  D7A3               	goto	l5412
  6157  004D60                     u6950:
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  6161  004D60  0E04               	movlw	4
  6162  004D62  1989               	xorwf	dir_alloc@res& (0+255),w,b
  6163  004D64  A4D8               	btfss	status,2,c
  6164  004D66  D002               	goto	l391
  6165                           
  6166                           ; BSR set to: 0
  6167  004D68  0E07               	movlw	7
  6168  004D6A  6F89               	movwf	dir_alloc@res& (0+255),b
  6169  004D6C                     l391:
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;ff.c: 1223:  return res;
  6173  004D6C  5189               	movf	dir_alloc@res& (0+255),w,b
  6174                           
  6175                           ; BSR set to: 0
  6176  004D6E  0012               	return		;funcret
  6177  004D70                     __end_of_dir_alloc:
  6178                           	opt callstack 0
  6179                           
  6180 ;; *************** function _dir_sdi *****************
  6181 ;; Defined at:
  6182 ;;		line 1080 in file "ff.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  dp              2   85[COMRAM] PTR struct .
  6185 ;;		 -> f_open@dj(22), 
  6186 ;;  idx             2   87[COMRAM] unsigned short 
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  clst            4   13[BANK0 ] unsigned long 
  6189 ;;  sect            4    9[BANK0 ] unsigned long 
  6190 ;;  ic              2    7[BANK0 ] unsigned short 
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  1    wreg      enum E93
  6193 ;; Registers used:
  6194 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6200 ;;      Params:         4       0       0       0       0       0       0       0       0
  6201 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6202 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6203 ;;      Totals:         4      17       0       0       0       0       0       0       0
  6204 ;;Total ram usage:       21 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    9
  6207 ;; This function calls:
  6208 ;;		_clust2sect
  6209 ;;		_get_fat
  6210 ;; This function is called by:
  6211 ;;		_dir_alloc
  6212 ;;		_dir_find
  6213 ;;		_follow_path
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           	psect	text19
  6218  00398E                     __ptext19:
  6219                           	opt callstack 0
  6220  00398E                     _dir_sdi:
  6221                           	opt callstack 18
  6222                           
  6223                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;incstack = 0
  6227  00398E  EE20 F004          	lfsr	2,4
  6228  003992  5056               	movf	dir_sdi@dp,w,c
  6229  003994  26D9               	addwf	fsr2l,f,c
  6230  003996  5057               	movf	dir_sdi@dp+1,w,c
  6231  003998  22DA               	addwfc	fsr2h,f,c
  6232  00399A  C058  FFDE         	movff	dir_sdi@idx,postinc2
  6233  00399E  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  6234                           
  6235                           ;ff.c: 1090:  clst = dp->sclust;
  6236  0039A2  EE20 F006          	lfsr	2,6
  6237  0039A6  5056               	movf	dir_sdi@dp,w,c
  6238  0039A8  26D9               	addwf	fsr2l,f,c
  6239  0039AA  5057               	movf	dir_sdi@dp+1,w,c
  6240  0039AC  22DA               	addwfc	fsr2h,f,c
  6241  0039AE  CFDE F06D          	movff	postinc2,dir_sdi@clst
  6242  0039B2  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  6243  0039B6  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  6244  0039BA  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  6245                           
  6246                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  6247  0039BE  0100               	movlb	0	; () banked
  6248  0039C0  056D               	decf	dir_sdi@clst& (0+255),w,b
  6249  0039C2  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6250  0039C4  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6251  0039C6  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6252  0039C8  B4D8               	btfsc	status,2,c
  6253  0039CA  D014               	goto	u6340
  6254                           
  6255                           ; BSR set to: 0
  6256  0039CC  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6257  0039D0  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6258  0039D4  EE10 F012          	lfsr	1,18
  6259  0039D8  50DE               	movf	postinc2,w,c
  6260  0039DA  26E1               	addwf	fsr1l,f,c
  6261  0039DC  50DD               	movf	postdec2,w,c
  6262  0039DE  22E2               	addwfc	fsr1h,f,c
  6263  0039E0  50E6               	movf	postinc1,w,c
  6264  0039E2  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6265  0039E4  50E6               	movf	postinc1,w,c
  6266  0039E6  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6267  0039E8  50E6               	movf	postinc1,w,c
  6268  0039EA  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6269  0039EC  50E6               	movf	postinc1,w,c
  6270  0039EE  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6271  0039F0  A0D8               	btfss	status,0,c
  6272  0039F2  D002               	goto	l5092
  6273  0039F4                     u6340:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;ff.c: 1092:   return FR_INT_ERR;
  6277  0039F4  0E02               	movlw	2
  6278  0039F6  0012               	return	
  6279  0039F8                     l5092:
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  6283  0039F8  516D               	movf	dir_sdi@clst& (0+255),w,b
  6284  0039FA  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6285  0039FC  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6286  0039FE  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6287  003A00  A4D8               	btfss	status,2,c
  6288  003A02  D022               	goto	l5098
  6289                           
  6290                           ; BSR set to: 0
  6291  003A04  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6292  003A08  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6293  003A0C  CFDE F060          	movff	postinc2,??_dir_sdi
  6294  003A10  CFDD F061          	movff	postdec2,??_dir_sdi+1
  6295  003A14  C060  FFD9         	movff	??_dir_sdi,fsr2l
  6296  003A18  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  6297  003A1C  0E03               	movlw	3
  6298  003A1E  18DE               	xorwf	postinc2,w,c
  6299  003A20  A4D8               	btfss	status,2,c
  6300  003A22  D012               	goto	l5098
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  6304  003A24  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6305  003A28  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6306  003A2C  EE10 F022          	lfsr	1,34
  6307  003A30  50DE               	movf	postinc2,w,c
  6308  003A32  26E1               	addwf	fsr1l,f,c
  6309  003A34  50DD               	movf	postdec2,w,c
  6310  003A36  22E2               	addwfc	fsr1h,f,c
  6311  003A38  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  6312  003A3C  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  6313  003A40  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  6314  003A44  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  6315  003A48                     l5098:
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;ff.c: 1096:  if (clst == 0) {
  6319  003A48  516D               	movf	dir_sdi@clst& (0+255),w,b
  6320  003A4A  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6321  003A4C  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6322  003A4E  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  6323  003A50  A4D8               	btfss	status,2,c
  6324  003A52  D023               	goto	l5108
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  6328  003A54  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6329  003A58  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6330  003A5C  EE10 F008          	lfsr	1,8
  6331  003A60  50DE               	movf	postinc2,w,c
  6332  003A62  26E1               	addwf	fsr1l,f,c
  6333  003A64  50DD               	movf	postdec2,w,c
  6334  003A66  22E2               	addwfc	fsr1h,f,c
  6335  003A68  50E6               	movf	postinc1,w,c
  6336  003A6A  5C58               	subwf	dir_sdi@idx,w,c
  6337  003A6C  50E6               	movf	postinc1,w,c
  6338  003A6E  5859               	subwfb	dir_sdi@idx+1,w,c
  6339  003A70  B0D8               	btfsc	status,0,c
  6340  003A72  D7C0               	goto	u6340
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  6344  003A74  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6345  003A78  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6346  003A7C  EE10 F022          	lfsr	1,34
  6347  003A80  50DE               	movf	postinc2,w,c
  6348  003A82  26E1               	addwf	fsr1l,f,c
  6349  003A84  50DD               	movf	postdec2,w,c
  6350  003A86  22E2               	addwfc	fsr1h,f,c
  6351  003A88  CFE6 F069          	movff	postinc1,dir_sdi@sect
  6352  003A8C  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  6353  003A90  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  6354  003A94  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  6355                           
  6356                           ;ff.c: 1100:  }
  6357  003A98  D079               	goto	l5130
  6358  003A9A                     l5108:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  6362  003A9A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6363  003A9E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6364  003AA2  EE10 F002          	lfsr	1,2
  6365  003AA6  50DE               	movf	postinc2,w,c
  6366  003AA8  26E1               	addwf	fsr1l,f,c
  6367  003AAA  50DD               	movf	postdec2,w,c
  6368  003AAC  22E2               	addwfc	fsr1h,f,c
  6369  003AAE  50E7               	movf	indf1,w,c
  6370  003AB0  6F60               	movwf	??_dir_sdi& (0+255),b
  6371  003AB2  5160               	movf	??_dir_sdi& (0+255),w,b
  6372  003AB4  0D10               	mullw	16
  6373  003AB6  CFF3 F067          	movff	prodl,dir_sdi@ic
  6374  003ABA  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  6375                           
  6376                           ;ff.c: 1103:   while (idx >= ic) {
  6377  003ABE  D046               	goto	l349
  6378  003AC0                     l5110:
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  6382  003AC0  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6383  003AC4  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6384  003AC8  CFDE F03B          	movff	postinc2,get_fat@fs
  6385  003ACC  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6386  003AD0  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  6387  003AD4  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  6388  003AD8  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  6389  003ADC  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  6390  003AE0  EC05  F016         	call	_get_fat	;wreg free
  6391  003AE4  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  6392  003AE8  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  6393  003AEC  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  6394  003AF0  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  6395                           
  6396                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6397  003AF4  0100               	movlb	0	; () banked
  6398  003AF6  296D               	incf	dir_sdi@clst& (0+255),w,b
  6399  003AF8  E109               	bnz	l5118
  6400  003AFA  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  6401  003AFC  E107               	bnz	l5118
  6402  003AFE  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  6403  003B00  E105               	bnz	l5118
  6404  003B02  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  6405  003B04  A4D8               	btfss	status,2,c
  6406  003B06  D002               	goto	l5118
  6407                           
  6408                           ; BSR set to: 0
  6409  003B08  0E01               	movlw	1
  6410  003B0A  0012               	return	
  6411  003B0C                     l5118:
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  6415  003B0C  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  6416  003B0E  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  6417  003B10  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  6418  003B12  E104               	bnz	u6400
  6419  003B14  0E02               	movlw	2
  6420  003B16  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6421  003B18  A0D8               	btfss	status,0,c
  6422  003B1A  D76C               	goto	u6340
  6423  003B1C                     u6400:
  6424                           
  6425                           ; BSR set to: 0
  6426  003B1C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6427  003B20  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6428  003B24  EE10 F012          	lfsr	1,18
  6429  003B28  50DE               	movf	postinc2,w,c
  6430  003B2A  26E1               	addwf	fsr1l,f,c
  6431  003B2C  50DD               	movf	postdec2,w,c
  6432  003B2E  22E2               	addwfc	fsr1h,f,c
  6433  003B30  50E6               	movf	postinc1,w,c
  6434  003B32  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  6435  003B34  50E6               	movf	postinc1,w,c
  6436  003B36  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  6437  003B38  50E6               	movf	postinc1,w,c
  6438  003B3A  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  6439  003B3C  50E6               	movf	postinc1,w,c
  6440  003B3E  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  6441  003B40  B0D8               	btfsc	status,0,c
  6442  003B42  D758               	goto	u6340
  6443                           
  6444                           ; BSR set to: 0
  6445                           ;ff.c: 1108:    idx -= ic;
  6446  003B44  5167               	movf	dir_sdi@ic& (0+255),w,b
  6447  003B46  5E58               	subwf	dir_sdi@idx,f,c
  6448  003B48  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6449  003B4A  5A59               	subwfb	dir_sdi@idx+1,f,c
  6450  003B4C                     l349:
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;ff.c: 1103:   while (idx >= ic) {
  6454  003B4C  5167               	movf	dir_sdi@ic& (0+255),w,b
  6455  003B4E  5C58               	subwf	dir_sdi@idx,w,c
  6456  003B50  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  6457  003B52  5859               	subwfb	dir_sdi@idx+1,w,c
  6458  003B54  B0D8               	btfsc	status,0,c
  6459  003B56  D7B4               	goto	l5110
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  6463  003B58  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6464  003B5C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6465  003B60  CFDE F00D          	movff	postinc2,clust2sect@fs
  6466  003B64  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6467  003B68  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  6468  003B6C  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  6469  003B70  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  6470  003B74  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  6471  003B78  EC23  F02A         	call	_clust2sect	;wreg free
  6472  003B7C  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  6473  003B80  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  6474  003B84  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  6475  003B88  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  6476  003B8C                     l5130:
  6477                           
  6478                           ;ff.c: 1112:  dp->clust = clst;
  6479  003B8C  EE20 F00A          	lfsr	2,10
  6480  003B90  5056               	movf	dir_sdi@dp,w,c
  6481  003B92  26D9               	addwf	fsr2l,f,c
  6482  003B94  5057               	movf	dir_sdi@dp+1,w,c
  6483  003B96  22DA               	addwfc	fsr2h,f,c
  6484  003B98  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  6485  003B9C  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  6486  003BA0  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  6487  003BA4  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  6488                           
  6489                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  6490  003BA8  0100               	movlb	0	; () banked
  6491  003BAA  5169               	movf	dir_sdi@sect& (0+255),w,b
  6492  003BAC  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  6493  003BAE  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  6494  003BB0  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  6495  003BB2  B4D8               	btfsc	status,2,c
  6496  003BB4  D71F               	goto	u6340
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  6500  003BB6  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  6501  003BBA  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  6502  003BBE  0E04               	movlw	4
  6503  003BC0  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  6504  003BC2                     u6445:
  6505  003BC2  90D8               	bcf	status,0,c
  6506  003BC4  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  6507  003BC6  3360               	rrcf	??_dir_sdi& (0+255),f,b
  6508  003BC8  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  6509  003BCA  D7FB               	goto	u6445
  6510  003BCC  5160               	movf	??_dir_sdi& (0+255),w,b
  6511  003BCE  2569               	addwf	dir_sdi@sect& (0+255),w,b
  6512  003BD0  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  6513  003BD2  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6514  003BD4  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  6515  003BD6  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  6516  003BD8  0E00               	movlw	0
  6517  003BDA  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  6518  003BDC  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  6519  003BDE  0E00               	movlw	0
  6520  003BE0  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  6521  003BE2  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  6522  003BE4  EE20 F00E          	lfsr	2,14
  6523  003BE8  5056               	movf	dir_sdi@dp,w,c
  6524  003BEA  26D9               	addwf	fsr2l,f,c
  6525  003BEC  5057               	movf	dir_sdi@dp+1,w,c
  6526  003BEE  22DA               	addwfc	fsr2h,f,c
  6527  003BF0  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  6528  003BF4  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  6529  003BF8  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  6530  003BFC  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  6531                           
  6532                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  6533  003C00  0E0F               	movlw	15
  6534  003C02  1458               	andwf	dir_sdi@idx,w,c
  6535  003C04  6F60               	movwf	??_dir_sdi& (0+255),b
  6536  003C06  0E00               	movlw	0
  6537  003C08  1459               	andwf	dir_sdi@idx+1,w,c
  6538  003C0A  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  6539  003C0C  0E05               	movlw	5
  6540  003C0E                     u6455:
  6541  003C0E  90D8               	bcf	status,0,c
  6542  003C10  3760               	rlcf	??_dir_sdi& (0+255),f,b
  6543  003C12  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  6544  003C14  2EE8               	decfsz	wreg,f,c
  6545  003C16  D7FB               	goto	u6455
  6546  003C18  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  6547  003C1C  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  6548  003C20  CFDE F062          	movff	postinc2,??_dir_sdi+2
  6549  003C24  CFDD F063          	movff	postdec2,??_dir_sdi+3
  6550  003C28  5160               	movf	??_dir_sdi& (0+255),w,b
  6551  003C2A  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6552  003C2C  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  6553  003C2E  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6554  003C30  0E2E               	movlw	46
  6555  003C32  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  6556  003C34  0E00               	movlw	0
  6557  003C36  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  6558  003C38  EE20 F012          	lfsr	2,18
  6559  003C3C  5056               	movf	dir_sdi@dp,w,c
  6560  003C3E  26D9               	addwf	fsr2l,f,c
  6561  003C40  5057               	movf	dir_sdi@dp+1,w,c
  6562  003C42  22DA               	addwfc	fsr2h,f,c
  6563  003C44  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  6564  003C48  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;ff.c: 1117:  return FR_OK;
  6568  003C4C  0E00               	movlw	0
  6569                           
  6570                           ; BSR set to: 0
  6571  003C4E  0012               	return		;funcret
  6572  003C50                     __end_of_dir_sdi:
  6573                           	opt callstack 0
  6574                           
  6575 ;; *************** function _dir_next *****************
  6576 ;; Defined at:
  6577 ;;		line 1128 in file "ff.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;  dp              2   13[BANK0 ] PTR struct .
  6580 ;;		 -> f_open@dj(22), 
  6581 ;;  stretch         2   15[BANK0 ] int 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  clst            4   28[BANK0 ] unsigned long 
  6584 ;;  i               2   26[BANK0 ] unsigned short 
  6585 ;;  c               2   24[BANK0 ] unsigned short 
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      enum E93
  6588 ;; Registers used:
  6589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6595 ;;      Params:         0       4       0       0       0       0       0       0       0
  6596 ;;      Locals:         0       8       0       0       0       0       0       0       0
  6597 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6598 ;;      Totals:         0      19       0       0       0       0       0       0       0
  6599 ;;Total ram usage:       19 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:   10
  6602 ;; This function calls:
  6603 ;;		_clust2sect
  6604 ;;		_create_chain
  6605 ;;		_get_fat
  6606 ;;		_mem_set
  6607 ;;		_sync_window
  6608 ;; This function is called by:
  6609 ;;		_dir_alloc
  6610 ;;		_dir_find
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text20
  6615  002804                     __ptext20:
  6616                           	opt callstack 0
  6617  002804                     _dir_next:
  6618                           	opt callstack 16
  6619                           
  6620                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;incstack = 0
  6624  002804  0100               	movlb	0	; () banked
  6625  002806  EE20 F004          	lfsr	2,4
  6626  00280A  516D               	movf	dir_next@dp& (0+255),w,b
  6627  00280C  26D9               	addwf	fsr2l,f,c
  6628  00280E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6629  002810  22DA               	addwfc	fsr2h,f,c
  6630  002812  CFDE F071          	movff	postinc2,??_dir_next
  6631  002816  CFDD F072          	movff	postdec2,??_dir_next+1
  6632  00281A  0E01               	movlw	1
  6633  00281C  2571               	addwf	??_dir_next& (0+255),w,b
  6634  00281E  6F7A               	movwf	dir_next@i& (0+255),b
  6635  002820  0E00               	movlw	0
  6636  002822  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  6637  002824  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  6641  002826  517A               	movf	dir_next@i& (0+255),w,b
  6642  002828  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  6643  00282A  B4D8               	btfsc	status,2,c
  6644  00282C  D00C               	goto	u6470
  6645                           
  6646                           ; BSR set to: 0
  6647  00282E  EE20 F00E          	lfsr	2,14
  6648  002832  516D               	movf	dir_next@dp& (0+255),w,b
  6649  002834  26D9               	addwf	fsr2l,f,c
  6650  002836  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6651  002838  22DA               	addwfc	fsr2h,f,c
  6652  00283A  50DE               	movf	postinc2,w,c
  6653  00283C  10DE               	iorwf	postinc2,w,c
  6654  00283E  10DE               	iorwf	postinc2,w,c
  6655  002840  10DE               	iorwf	postinc2,w,c
  6656  002842  A4D8               	btfss	status,2,c
  6657  002844  D002               	goto	l5154
  6658  002846                     u6470:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;ff.c: 1142:   return FR_NO_FILE;
  6662  002846  0E04               	movlw	4
  6663  002848  0012               	return	
  6664  00284A                     l5154:
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  6668  00284A  0E0F               	movlw	15
  6669  00284C  157A               	andwf	dir_next@i& (0+255),w,b
  6670  00284E  6F71               	movwf	??_dir_next& (0+255),b
  6671  002850  0E00               	movlw	0
  6672  002852  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  6673  002854  6F72               	movwf	(??_dir_next+1)& (0+255),b
  6674  002856  5171               	movf	??_dir_next& (0+255),w,b
  6675  002858  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  6676  00285A  A4D8               	btfss	status,2,c
  6677  00285C  D1A4               	goto	l5240
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;ff.c: 1145:   dp->sect++;
  6681  00285E  EE20 F00E          	lfsr	2,14
  6682  002862  516D               	movf	dir_next@dp& (0+255),w,b
  6683  002864  26D9               	addwf	fsr2l,f,c
  6684  002866  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6685  002868  22DA               	addwfc	fsr2h,f,c
  6686  00286A  2ADE               	incf	postinc2,f,c
  6687  00286C  0E00               	movlw	0
  6688  00286E  22DE               	addwfc	postinc2,f,c
  6689  002870  22DE               	addwfc	postinc2,f,c
  6690  002872  22DE               	addwfc	postinc2,f,c
  6691                           
  6692                           ;ff.c: 1147:   if (!dp->clust) {
  6693  002874  EE20 F00A          	lfsr	2,10
  6694  002878  516D               	movf	dir_next@dp& (0+255),w,b
  6695  00287A  26D9               	addwf	fsr2l,f,c
  6696  00287C  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6697  00287E  22DA               	addwfc	fsr2h,f,c
  6698  002880  50DE               	movf	postinc2,w,c
  6699  002882  10DE               	iorwf	postinc2,w,c
  6700  002884  10DE               	iorwf	postinc2,w,c
  6701  002886  10DE               	iorwf	postinc2,w,c
  6702  002888  A4D8               	btfss	status,2,c
  6703  00288A  D011               	goto	l5164
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  6707  00288C  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6708  002890  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6709  002894  EE10 F008          	lfsr	1,8
  6710  002898  50DE               	movf	postinc2,w,c
  6711  00289A  26E1               	addwf	fsr1l,f,c
  6712  00289C  50DD               	movf	postdec2,w,c
  6713  00289E  22E2               	addwfc	fsr1h,f,c
  6714  0028A0  50E6               	movf	postinc1,w,c
  6715  0028A2  5D7A               	subwf	dir_next@i& (0+255),w,b
  6716  0028A4  50E6               	movf	postinc1,w,c
  6717  0028A6  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  6718  0028A8  B0D8               	btfsc	status,0,c
  6719  0028AA  D7CD               	goto	u6470
  6720  0028AC  D17C               	goto	l5240
  6721  0028AE                     l5164:
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  6725  0028AE  C07A  F071         	movff	dir_next@i,??_dir_next
  6726  0028B2  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  6727  0028B6  0E04               	movlw	4
  6728  0028B8  6F73               	movwf	(??_dir_next+2)& (0+255),b
  6729  0028BA                     u6515:
  6730  0028BA  90D8               	bcf	status,0,c
  6731  0028BC  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  6732  0028BE  3371               	rrcf	??_dir_next& (0+255),f,b
  6733  0028C0  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  6734  0028C2  D7FB               	goto	u6515
  6735  0028C4  0EFF               	movlw	255
  6736  0028C6  6F74               	movwf	(??_dir_next+3)& (0+255),b
  6737  0028C8  0EFF               	movlw	255
  6738  0028CA  6F75               	movwf	(??_dir_next+4)& (0+255),b
  6739  0028CC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6740  0028D0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6741  0028D4  EE10 F002          	lfsr	1,2
  6742  0028D8  50DE               	movf	postinc2,w,c
  6743  0028DA  26E1               	addwf	fsr1l,f,c
  6744  0028DC  50DD               	movf	postdec2,w,c
  6745  0028DE  22E2               	addwfc	fsr1h,f,c
  6746  0028E0  50E7               	movf	indf1,w,c
  6747  0028E2  6F76               	movwf	(??_dir_next+5)& (0+255),b
  6748  0028E4  6B77               	clrf	(??_dir_next+6)& (0+255),b
  6749  0028E6  5174               	movf	(??_dir_next+3)& (0+255),w,b
  6750  0028E8  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  6751  0028EA  5175               	movf	(??_dir_next+4)& (0+255),w,b
  6752  0028EC  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  6753  0028EE  5171               	movf	??_dir_next& (0+255),w,b
  6754  0028F0  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  6755  0028F2  5172               	movf	(??_dir_next+1)& (0+255),w,b
  6756  0028F4  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  6757  0028F6  5176               	movf	(??_dir_next+5)& (0+255),w,b
  6758  0028F8  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  6759  0028FA  A4D8               	btfss	status,2,c
  6760  0028FC  D154               	goto	l5240
  6761                           
  6762                           ; BSR set to: 0
  6763                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  6764  0028FE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6765  002902  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6766  002906  CFDE F03B          	movff	postinc2,get_fat@fs
  6767  00290A  CFDD F03C          	movff	postdec2,get_fat@fs+1
  6768  00290E  EE20 F00A          	lfsr	2,10
  6769  002912  516D               	movf	dir_next@dp& (0+255),w,b
  6770  002914  26D9               	addwf	fsr2l,f,c
  6771  002916  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6772  002918  22DA               	addwfc	fsr2h,f,c
  6773  00291A  CFDE F03D          	movff	postinc2,get_fat@clst
  6774  00291E  CFDE F03E          	movff	postinc2,get_fat@clst+1
  6775  002922  CFDE F03F          	movff	postinc2,get_fat@clst+2
  6776  002926  CFDE F040          	movff	postinc2,get_fat@clst+3
  6777  00292A  EC05  F016         	call	_get_fat	;wreg free
  6778  00292E  C03B  F07C         	movff	?_get_fat,dir_next@clst
  6779  002932  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  6780  002936  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  6781  00293A  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  6782                           
  6783                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  6784  00293E  0100               	movlb	0	; () banked
  6785  002940  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  6786  002942  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6787  002944  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6788  002946  E106               	bnz	l5174
  6789  002948  0E02               	movlw	2
  6790  00294A  5D7C               	subwf	dir_next@clst& (0+255),w,b
  6791  00294C  B0D8               	btfsc	status,0,c
  6792  00294E  D002               	goto	l5174
  6793  002950                     u6530:
  6794                           
  6795                           ; BSR set to: 0
  6796  002950  0E02               	movlw	2
  6797  002952  0012               	return	
  6798  002954                     l5174:
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6802  002954  297C               	incf	dir_next@clst& (0+255),w,b
  6803  002956  E109               	bnz	l5180
  6804  002958  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  6805  00295A  E107               	bnz	l5180
  6806  00295C  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  6807  00295E  E105               	bnz	l5180
  6808  002960  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  6809  002962  A4D8               	btfss	status,2,c
  6810  002964  D002               	goto	l5180
  6811  002966                     u6540:
  6812  002966  0E01               	movlw	1
  6813  002968  0012               	return	
  6814  00296A                     l5180:
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  6818  00296A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6819  00296E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6820  002972  EE10 F012          	lfsr	1,18
  6821  002976  50DE               	movf	postinc2,w,c
  6822  002978  26E1               	addwf	fsr1l,f,c
  6823  00297A  50DD               	movf	postdec2,w,c
  6824  00297C  22E2               	addwfc	fsr1h,f,c
  6825  00297E  50E6               	movf	postinc1,w,c
  6826  002980  5D7C               	subwf	dir_next@clst& (0+255),w,b
  6827  002982  50E6               	movf	postinc1,w,c
  6828  002984  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  6829  002986  50E6               	movf	postinc1,w,c
  6830  002988  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  6831  00298A  50E6               	movf	postinc1,w,c
  6832  00298C  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  6833  00298E  A0D8               	btfss	status,0,c
  6834  002990  D0DB               	goto	l5236
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  6838  002992  516F               	movf	dir_next@stretch& (0+255),w,b
  6839  002994  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  6840  002996  B4D8               	btfsc	status,2,c
  6841  002998  D756               	goto	u6470
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  6845  00299A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6846  00299E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6847  0029A2  CFDE F056          	movff	postinc2,create_chain@fs
  6848  0029A6  CFDD F057          	movff	postdec2,create_chain@fs+1
  6849  0029AA  EE20 F00A          	lfsr	2,10
  6850  0029AE  516D               	movf	dir_next@dp& (0+255),w,b
  6851  0029B0  26D9               	addwf	fsr2l,f,c
  6852  0029B2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  6853  0029B4  22DA               	addwfc	fsr2h,f,c
  6854  0029B6  CFDE F058          	movff	postinc2,create_chain@clst
  6855  0029BA  CFDE F059          	movff	postinc2,create_chain@clst+1
  6856  0029BE  CFDE F05A          	movff	postinc2,create_chain@clst+2
  6857  0029C2  CFDE F05B          	movff	postinc2,create_chain@clst+3
  6858  0029C6  EC4A  F01B         	call	_create_chain	;wreg free
  6859  0029CA  C056  F07C         	movff	?_create_chain,dir_next@clst
  6860  0029CE  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  6861  0029D2  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  6862  0029D6  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  6863                           
  6864                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  6865  0029DA  0100               	movlb	0	; () banked
  6866  0029DC  517C               	movf	dir_next@clst& (0+255),w,b
  6867  0029DE  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6868  0029E0  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6869  0029E2  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6870  0029E4  A4D8               	btfss	status,2,c
  6871  0029E6  D002               	goto	l5196
  6872                           
  6873                           ; BSR set to: 0
  6874  0029E8  0E07               	movlw	7
  6875  0029EA  0012               	return	
  6876  0029EC                     l5196:
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  6880  0029EC  057C               	decf	dir_next@clst& (0+255),w,b
  6881  0029EE  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  6882  0029F0  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  6883  0029F2  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  6884  0029F4  B4D8               	btfsc	status,2,c
  6885  0029F6  D7AC               	goto	u6530
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  6889  0029F8  297C               	incf	dir_next@clst& (0+255),w,b
  6890  0029FA  E107               	bnz	l5208
  6891  0029FC  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  6892  0029FE  E105               	bnz	l5208
  6893  002A00  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  6894  002A02  E103               	bnz	l5208
  6895  002A04  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  6896  002A06  B4D8               	btfsc	status,2,c
  6897  002A08  D7AE               	goto	u6540
  6898  002A0A                     l5208:
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  6902  002A0A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6903  002A0E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6904  002A12  CFDE F01B          	movff	postinc2,sync_window@fs
  6905  002A16  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6906  002A1A  EC83  F022         	call	_sync_window	;wreg free
  6907  002A1E  0900               	iorlw	0
  6908  002A20  A4D8               	btfss	status,2,c
  6909  002A22  D7A1               	goto	u6540
  6910                           
  6911                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  6912  002A24  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6913  002A28  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6914  002A2C  CFDE F071          	movff	postinc2,??_dir_next
  6915  002A30  CFDD F072          	movff	postdec2,??_dir_next+1
  6916  002A34  0E2E               	movlw	46
  6917  002A36  0100               	movlb	0	; () banked
  6918  002A38  2571               	addwf	??_dir_next& (0+255),w,b
  6919  002A3A  6E01               	movwf	mem_set@dst,c
  6920  002A3C  0E00               	movlw	0
  6921  002A3E  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  6922  002A40  6E02               	movwf	mem_set@dst+1,c
  6923  002A42  0E00               	movlw	0
  6924  002A44  6E04               	movwf	mem_set@val+1,c
  6925  002A46  0E00               	movlw	0
  6926  002A48  6E03               	movwf	mem_set@val,c
  6927  002A4A  0E02               	movlw	2
  6928  002A4C  6E06               	movwf	mem_set@cnt+1,c
  6929  002A4E  0E00               	movlw	0
  6930  002A50  6E05               	movwf	mem_set@cnt,c
  6931  002A52  EC0A  F02E         	call	_mem_set	;wreg free
  6932                           
  6933                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  6934  002A56  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6935  002A5A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6936  002A5E  CFDE F00D          	movff	postinc2,clust2sect@fs
  6937  002A62  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  6938  002A66  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  6939  002A6A  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  6940  002A6E  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  6941  002A72  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  6942  002A76  EC23  F02A         	call	_clust2sect	;wreg free
  6943  002A7A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6944  002A7E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6945  002A82  EE10 F02A          	lfsr	1,42
  6946  002A86  50DE               	movf	postinc2,w,c
  6947  002A88  26E1               	addwf	fsr1l,f,c
  6948  002A8A  50DD               	movf	postdec2,w,c
  6949  002A8C  22E2               	addwfc	fsr1h,f,c
  6950  002A8E  C00D  FFE6         	movff	?_clust2sect,postinc1
  6951  002A92  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  6952  002A96  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  6953  002A9A  C010  FFE6         	movff	?_clust2sect+3,postinc1
  6954                           
  6955                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  6956  002A9E  0E00               	movlw	0
  6957  002AA0  0100               	movlb	0	; () banked
  6958  002AA2  6F79               	movwf	(dir_next@c+1)& (0+255),b
  6959  002AA4  0E00               	movlw	0
  6960  002AA6  6F78               	movwf	dir_next@c& (0+255),b
  6961  002AA8  D02B               	goto	l5232
  6962  002AAA                     l5220:
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;ff.c: 1168:       dp->fs->wflag = 1;
  6966  002AAA  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6967  002AAE  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6968  002AB2  EE10 F004          	lfsr	1,4
  6969  002AB6  50DE               	movf	postinc2,w,c
  6970  002AB8  26E1               	addwf	fsr1l,f,c
  6971  002ABA  50DD               	movf	postdec2,w,c
  6972  002ABC  22E2               	addwfc	fsr1h,f,c
  6973  002ABE  0E01               	movlw	1
  6974  002AC0  6EE7               	movwf	indf1,c
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  6978  002AC2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6979  002AC6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6980  002ACA  CFDE F01B          	movff	postinc2,sync_window@fs
  6981  002ACE  CFDD F01C          	movff	postdec2,sync_window@fs+1
  6982  002AD2  EC83  F022         	call	_sync_window	;wreg free
  6983  002AD6  0900               	iorlw	0
  6984  002AD8  A4D8               	btfss	status,2,c
  6985  002ADA  D745               	goto	u6540
  6986                           
  6987                           ;ff.c: 1170:       dp->fs->winsect++;
  6988  002ADC  C06D  FFD9         	movff	dir_next@dp,fsr2l
  6989  002AE0  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  6990  002AE4  EE10 F02A          	lfsr	1,42
  6991  002AE8  50DE               	movf	postinc2,w,c
  6992  002AEA  26E1               	addwf	fsr1l,f,c
  6993  002AEC  50DD               	movf	postdec2,w,c
  6994  002AEE  22E2               	addwfc	fsr1h,f,c
  6995  002AF0  2AE6               	incf	postinc1,f,c
  6996  002AF2  0E00               	movlw	0
  6997  002AF4  22E6               	addwfc	postinc1,f,c
  6998  002AF6  22E6               	addwfc	postinc1,f,c
  6999  002AF8  22E6               	addwfc	postinc1,f,c
  7000                           
  7001                           ;ff.c: 1171:      }
  7002  002AFA  0100               	movlb	0	; () banked
  7003  002AFC  4B78               	infsnz	dir_next@c& (0+255),f,b
  7004  002AFE  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  7005  002B00                     l5232:
  7006                           
  7007                           ; BSR set to: 0
  7008  002B00  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7009  002B04  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7010  002B08  EE10 F002          	lfsr	1,2
  7011  002B0C  50DE               	movf	postinc2,w,c
  7012  002B0E  26E1               	addwf	fsr1l,f,c
  7013  002B10  50DD               	movf	postdec2,w,c
  7014  002B12  22E2               	addwfc	fsr1h,f,c
  7015  002B14  50E7               	movf	indf1,w,c
  7016  002B16  6F71               	movwf	??_dir_next& (0+255),b
  7017  002B18  6B72               	clrf	(??_dir_next+1)& (0+255),b
  7018  002B1A  5171               	movf	??_dir_next& (0+255),w,b
  7019  002B1C  5D78               	subwf	dir_next@c& (0+255),w,b
  7020  002B1E  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7021  002B20  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  7022  002B22  A0D8               	btfss	status,0,c
  7023  002B24  D7C2               	goto	l5220
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;ff.c: 1172:      dp->fs->winsect -= c;
  7027  002B26  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7028  002B2A  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7029  002B2E  EE10 F02A          	lfsr	1,42
  7030  002B32  50DE               	movf	postinc2,w,c
  7031  002B34  26E1               	addwf	fsr1l,f,c
  7032  002B36  50DD               	movf	postdec2,w,c
  7033  002B38  22E2               	addwfc	fsr1h,f,c
  7034  002B3A  5178               	movf	dir_next@c& (0+255),w,b
  7035  002B3C  5EE6               	subwf	postinc1,f,c
  7036  002B3E  5179               	movf	(dir_next@c+1)& (0+255),w,b
  7037  002B40  5AE6               	subwfb	postinc1,f,c
  7038  002B42  0E00               	movlw	0
  7039  002B44  5AE6               	subwfb	postinc1,f,c
  7040  002B46  5AE6               	subwfb	postinc1,f,c
  7041  002B48                     l5236:
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;ff.c: 1178:     dp->clust = clst;
  7045  002B48  EE20 F00A          	lfsr	2,10
  7046  002B4C  516D               	movf	dir_next@dp& (0+255),w,b
  7047  002B4E  26D9               	addwf	fsr2l,f,c
  7048  002B50  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7049  002B52  22DA               	addwfc	fsr2h,f,c
  7050  002B54  C07C  FFDE         	movff	dir_next@clst,postinc2
  7051  002B58  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  7052  002B5C  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  7053  002B60  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  7057  002B64  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7058  002B68  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7059  002B6C  CFDE F00D          	movff	postinc2,clust2sect@fs
  7060  002B70  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  7061  002B74  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  7062  002B78  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  7063  002B7C  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  7064  002B80  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  7065  002B84  EC23  F02A         	call	_clust2sect	;wreg free
  7066  002B88  0100               	movlb	0	; () banked
  7067  002B8A  EE20 F00E          	lfsr	2,14
  7068  002B8E  516D               	movf	dir_next@dp& (0+255),w,b
  7069  002B90  26D9               	addwf	fsr2l,f,c
  7070  002B92  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7071  002B94  22DA               	addwfc	fsr2h,f,c
  7072  002B96  C00D  FFDE         	movff	?_clust2sect,postinc2
  7073  002B9A  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  7074  002B9E  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  7075  002BA2  C010  FFDE         	movff	?_clust2sect+3,postinc2
  7076  002BA6                     l5240:
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;ff.c: 1184:  dp->index = (WORD)i;
  7080  002BA6  EE20 F004          	lfsr	2,4
  7081  002BAA  516D               	movf	dir_next@dp& (0+255),w,b
  7082  002BAC  26D9               	addwf	fsr2l,f,c
  7083  002BAE  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7084  002BB0  22DA               	addwfc	fsr2h,f,c
  7085  002BB2  C07A  FFDE         	movff	dir_next@i,postinc2
  7086  002BB6  C07B  FFDD         	movff	dir_next@i+1,postdec2
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  7090  002BBA  0E0F               	movlw	15
  7091  002BBC  157A               	andwf	dir_next@i& (0+255),w,b
  7092  002BBE  6F71               	movwf	??_dir_next& (0+255),b
  7093  002BC0  0E00               	movlw	0
  7094  002BC2  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  7095  002BC4  6F72               	movwf	(??_dir_next+1)& (0+255),b
  7096  002BC6  0E05               	movlw	5
  7097  002BC8                     u6635:
  7098  002BC8  90D8               	bcf	status,0,c
  7099  002BCA  3771               	rlcf	??_dir_next& (0+255),f,b
  7100  002BCC  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  7101  002BCE  2EE8               	decfsz	wreg,f,c
  7102  002BD0  D7FB               	goto	u6635
  7103  002BD2  C06D  FFD9         	movff	dir_next@dp,fsr2l
  7104  002BD6  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  7105  002BDA  CFDE F073          	movff	postinc2,??_dir_next+2
  7106  002BDE  CFDD F074          	movff	postdec2,??_dir_next+3
  7107  002BE2  5171               	movf	??_dir_next& (0+255),w,b
  7108  002BE4  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  7109  002BE6  5172               	movf	(??_dir_next+1)& (0+255),w,b
  7110  002BE8  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  7111  002BEA  0E2E               	movlw	46
  7112  002BEC  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  7113  002BEE  0E00               	movlw	0
  7114  002BF0  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  7115  002BF2  EE20 F012          	lfsr	2,18
  7116  002BF6  516D               	movf	dir_next@dp& (0+255),w,b
  7117  002BF8  26D9               	addwf	fsr2l,f,c
  7118  002BFA  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  7119  002BFC  22DA               	addwfc	fsr2h,f,c
  7120  002BFE  C073  FFDE         	movff	??_dir_next+2,postinc2
  7121  002C02  C074  FFDD         	movff	??_dir_next+3,postdec2
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;ff.c: 1187:  return FR_OK;
  7125  002C06  0E00               	movlw	0
  7126  002C08  0012               	return		;funcret
  7127  002C0A                     __end_of_dir_next:
  7128                           	opt callstack 0
  7129                           
  7130 ;; *************** function _f_mount *****************
  7131 ;; Defined at:
  7132 ;;		line 2402 in file "ff.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  fs              2   81[COMRAM] PTR struct .
  7135 ;;		 -> FatFs(558), NULL(0), 
  7136 ;;  path            2   83[COMRAM] PTR const unsigned char 
  7137 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  7138 ;;  opt             1   85[COMRAM] unsigned char 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  vol             2   91[COMRAM] int 
  7141 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  7142 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  7143 ;;  cfs             2   87[COMRAM] PTR struct .
  7144 ;;		 -> FatFs(558), NULL(0), 
  7145 ;;  res             1   86[COMRAM] enum E93
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  1    wreg      enum E93
  7148 ;; Registers used:
  7149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7155 ;;      Params:         5       0       0       0       0       0       0       0       0
  7156 ;;      Locals:         7       0       0       0       0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7158 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7159 ;;Total ram usage:       12 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:   10
  7162 ;; This function calls:
  7163 ;;		_find_volume
  7164 ;;		_get_ldnumber
  7165 ;; This function is called by:
  7166 ;;		_guardar
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           	psect	text21
  7171  005500                     __ptext21:
  7172                           	opt callstack 0
  7173  005500                     _f_mount:
  7174                           	opt callstack 19
  7175                           
  7176                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  7177                           
  7178                           ;incstack = 0
  7179  005500  C054  F05A         	movff	f_mount@path,f_mount@rp
  7180  005504  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  7181                           
  7182                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  7183  005508  0E5A               	movlw	low f_mount@rp
  7184  00550A  6E01               	movwf	get_ldnumber@path,c
  7185  00550C  0E00               	movlw	high f_mount@rp
  7186  00550E  6E02               	movwf	get_ldnumber@path+1,c
  7187  005510  EC16  F028         	call	_get_ldnumber	;wreg free
  7188  005514  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  7189  005518  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  7190                           
  7191                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  7192  00551C  AE5D               	btfss	f_mount@vol+1,7,c
  7193  00551E  D002               	goto	l6616
  7194  005520  0E0B               	movlw	11
  7195  005522  0012               	return	
  7196  005524                     l6616:
  7197                           
  7198                           ;ff.c: 2416:  cfs = FatFs[vol];
  7199  005524  90D8               	bcf	status,0,c
  7200  005526  345C               	rlcf	f_mount@vol,w,c
  7201  005528  6ED9               	movwf	fsr2l,c
  7202  00552A  345D               	rlcf	f_mount@vol+1,w,c
  7203  00552C  6EDA               	movwf	fsr2h,c
  7204  00552E  0EDC               	movlw	low ff@FatFs
  7205  005530  26D9               	addwf	fsr2l,f,c
  7206  005532  0E00               	movlw	high ff@FatFs
  7207  005534  22DA               	addwfc	fsr2h,f,c
  7208  005536  CFDE F058          	movff	postinc2,f_mount@cfs
  7209  00553A  CFDD F059          	movff	postdec2,f_mount@cfs+1
  7210                           
  7211                           ;ff.c: 2418:  if (cfs) {
  7212  00553E  5058               	movf	f_mount@cfs,w,c
  7213  005540  1059               	iorwf	f_mount@cfs+1,w,c
  7214  005542  B4D8               	btfsc	status,2,c
  7215  005544  D006               	goto	l6622
  7216                           
  7217                           ;ff.c: 2425:   cfs->fs_type = 0;
  7218  005546  C058  FFD9         	movff	f_mount@cfs,fsr2l
  7219  00554A  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  7220  00554E  0E00               	movlw	0
  7221  005550  6EDF               	movwf	indf2,c
  7222  005552                     l6622:
  7223                           
  7224                           ;ff.c: 2428:  if (fs) {
  7225  005552  5052               	movf	f_mount@fs,w,c
  7226  005554  1053               	iorwf	f_mount@fs+1,w,c
  7227  005556  B4D8               	btfsc	status,2,c
  7228  005558  D006               	goto	l6626
  7229                           
  7230                           ;ff.c: 2429:   fs->fs_type = 0;
  7231  00555A  C052  FFD9         	movff	f_mount@fs,fsr2l
  7232  00555E  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  7233  005562  0E00               	movlw	0
  7234  005564  6EDF               	movwf	indf2,c
  7235  005566                     l6626:
  7236                           
  7237                           ;ff.c: 2434:  FatFs[vol] = fs;
  7238  005566  90D8               	bcf	status,0,c
  7239  005568  345C               	rlcf	f_mount@vol,w,c
  7240  00556A  6ED9               	movwf	fsr2l,c
  7241  00556C  345D               	rlcf	f_mount@vol+1,w,c
  7242  00556E  6EDA               	movwf	fsr2h,c
  7243  005570  0EDC               	movlw	low ff@FatFs
  7244  005572  26D9               	addwf	fsr2l,f,c
  7245  005574  0E00               	movlw	high ff@FatFs
  7246  005576  22DA               	addwfc	fsr2h,f,c
  7247  005578  C052  FFDE         	movff	f_mount@fs,postinc2
  7248  00557C  C053  FFDD         	movff	f_mount@fs+1,postdec2
  7249                           
  7250                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  7251  005580  5052               	movf	f_mount@fs,w,c
  7252  005582  1053               	iorwf	f_mount@fs+1,w,c
  7253  005584  B4D8               	btfsc	status,2,c
  7254  005586  D003               	goto	u9060
  7255  005588  0456               	decf	f_mount@opt,w,c
  7256  00558A  B4D8               	btfsc	status,2,c
  7257  00558C  D002               	goto	l6636
  7258  00558E                     u9060:
  7259  00558E  0E00               	movlw	0
  7260  005590  0012               	return	
  7261  005592                     l6636:
  7262                           
  7263                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  7264  005592  0E52               	movlw	low f_mount@fs
  7265  005594  6E45               	movwf	find_volume@rfs,c
  7266  005596  0E00               	movlw	high f_mount@fs
  7267  005598  6E46               	movwf	find_volume@rfs+1,c
  7268  00559A  0E54               	movlw	low f_mount@path
  7269  00559C  6E47               	movwf	find_volume@path,c
  7270  00559E  0E00               	movlw	high f_mount@path
  7271  0055A0  6E48               	movwf	find_volume@path+1,c
  7272  0055A2  0E00               	movlw	0
  7273  0055A4  6E49               	movwf	find_volume@wmode,c
  7274  0055A6  EC0E  F004         	call	_find_volume	;wreg free
  7275  0055AA  6E57               	movwf	f_mount@res,c
  7276                           
  7277                           ;ff.c: 2439:  return res;
  7278  0055AC  5057               	movf	f_mount@res,w,c
  7279  0055AE  0012               	return		;funcret
  7280  0055B0                     __end_of_f_mount:
  7281                           	opt callstack 0
  7282                           
  7283 ;; *************** function _find_volume *****************
  7284 ;; Defined at:
  7285 ;;		line 2203 in file "ff.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  7288 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  7289 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  7290 ;;		 -> f_open@path(2), f_mount@path(2), 
  7291 ;;  wmode           1   72[COMRAM] unsigned char 
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;  br             16    0[BANK0 ] unsigned long [4]
  7294 ;;  bsect           4   49[BANK0 ] unsigned long 
  7295 ;;  fasize          4   45[BANK0 ] unsigned long 
  7296 ;;  nclst           4   40[BANK0 ] unsigned long 
  7297 ;;  tsect           4   36[BANK0 ] unsigned long 
  7298 ;;  sysect          4   28[BANK0 ] unsigned long 
  7299 ;;  szbfat          4   22[BANK0 ] unsigned long 
  7300 ;;  fs              2   56[BANK0 ] PTR struct .
  7301 ;;		 -> FatFs(558), NULL(0), 
  7302 ;;  i               2   53[BANK0 ] unsigned short 
  7303 ;;  nrsv            2   34[BANK0 ] unsigned short 
  7304 ;;  vol             2   32[BANK0 ] int 
  7305 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  7306 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
  7307 ;;  fmt             1   55[BANK0 ] unsigned char 
  7308 ;;  stat            1   44[BANK0 ] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      enum E93
  7311 ;; Registers used:
  7312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7318 ;;      Params:         5       0       0       0       0       0       0       0       0
  7319 ;;      Locals:         0      58       0       0       0       0       0       0       0
  7320 ;;      Temps:          8       0       0       0       0       0       0       0       0
  7321 ;;      Totals:        13      58       0       0       0       0       0       0       0
  7322 ;;Total ram usage:       71 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    9
  7325 ;; This function calls:
  7326 ;;		___lldiv
  7327 ;;		___lmul
  7328 ;;		_check_fs
  7329 ;;		_disk_initialize
  7330 ;;		_disk_status
  7331 ;;		_get_ldnumber
  7332 ;;		_move_window
  7333 ;; This function is called by:
  7334 ;;		_f_mount
  7335 ;;		_f_open
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text22
  7340  00081C                     __ptext22:
  7341                           	opt callstack 0
  7342  00081C                     _find_volume:
  7343                           	opt callstack 19
  7344                           
  7345                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  7346                           
  7347                           ;incstack = 0
  7348  00081C  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7349  000820  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7350  000824  0E00               	movlw	0
  7351  000826  6EDE               	movwf	postinc2,c
  7352  000828  0E00               	movlw	0
  7353  00082A  6EDD               	movwf	postdec2,c
  7354                           
  7355                           ;ff.c: 2220:  vol = get_ldnumber(path);
  7356  00082C  C047  F001         	movff	find_volume@path,get_ldnumber@path
  7357  000830  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  7358  000834  EC16  F028         	call	_get_ldnumber	;wreg free
  7359  000838  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  7360  00083C  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  7361                           
  7362                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  7363  000840  0100               	movlb	0	; () banked
  7364  000842  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  7365  000844  D002               	goto	l5854
  7366                           
  7367                           ; BSR set to: 0
  7368  000846  0E0B               	movlw	11
  7369  000848  0012               	return	
  7370  00084A                     l5854:
  7371                           
  7372                           ; BSR set to: 0
  7373                           ;ff.c: 2224:  fs = FatFs[vol];
  7374  00084A  90D8               	bcf	status,0,c
  7375  00084C  3580               	rlcf	find_volume@vol& (0+255),w,b
  7376  00084E  6ED9               	movwf	fsr2l,c
  7377  000850  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  7378  000852  6EDA               	movwf	fsr2h,c
  7379  000854  0EDC               	movlw	low ff@FatFs
  7380  000856  26D9               	addwf	fsr2l,f,c
  7381  000858  0E00               	movlw	high ff@FatFs
  7382  00085A  22DA               	addwfc	fsr2h,f,c
  7383  00085C  CFDE F098          	movff	postinc2,find_volume@fs
  7384  000860  CFDD F099          	movff	postdec2,find_volume@fs+1
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  7388  000864  5198               	movf	find_volume@fs& (0+255),w,b
  7389  000866  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  7390  000868  A4D8               	btfss	status,2,c
  7391  00086A  D002               	goto	l5862
  7392                           
  7393                           ; BSR set to: 0
  7394  00086C  0E0C               	movlw	12
  7395  00086E  0012               	return	
  7396  000870                     l5862:
  7397                           
  7398                           ; BSR set to: 0
  7399                           ;ff.c: 2228:  *rfs = fs;
  7400  000870  C045  FFD9         	movff	find_volume@rfs,fsr2l
  7401  000874  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  7402  000878  C098  FFDE         	movff	find_volume@fs,postinc2
  7403  00087C  C099  FFDD         	movff	find_volume@fs+1,postdec2
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;ff.c: 2230:  if (fs->fs_type) {
  7407  000880  C098  FFD9         	movff	find_volume@fs,fsr2l
  7408  000884  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7409  000888  50DF               	movf	indf2,w,c
  7410  00088A  B4D8               	btfsc	status,2,c
  7411  00088C  D015               	goto	l5882
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  7415  00088E  EE20 F001          	lfsr	2,1
  7416  000892  5198               	movf	find_volume@fs& (0+255),w,b
  7417  000894  26D9               	addwf	fsr2l,f,c
  7418  000896  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7419  000898  22DA               	addwfc	fsr2h,f,c
  7420  00089A  50DF               	movf	indf2,w,c
  7421  00089C  EC7A  F02E         	call	_disk_status
  7422  0008A0  0100               	movlb	0	; () banked
  7423  0008A2  6F8C               	movwf	find_volume@stat& (0+255),b
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  7427  0008A4  B18C               	btfsc	find_volume@stat& (0+255),0,b
  7428  0008A6  D008               	goto	l5882
  7429                           
  7430                           ; BSR set to: 0
  7431  0008A8  5049               	movf	find_volume@wmode,w,c
  7432  0008AA  A4D8               	btfss	status,2,c
  7433                           
  7434                           ; BSR set to: 0
  7435  0008AC  A58C               	btfss	find_volume@stat& (0+255),2,b
  7436  0008AE  D002               	goto	l5878
  7437  0008B0                     u7770:
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  7441  0008B0  0E0A               	movlw	10
  7442  0008B2  0012               	return	
  7443  0008B4                     l5878:
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;ff.c: 2235:    return FR_OK;
  7447  0008B4  0E00               	movlw	0
  7448  0008B6  0012               	return	
  7449  0008B8                     l5882:
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;ff.c: 2242:  fs->fs_type = 0;
  7453  0008B8  C098  FFD9         	movff	find_volume@fs,fsr2l
  7454  0008BC  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7455  0008C0  0E00               	movlw	0
  7456  0008C2  6EDF               	movwf	indf2,c
  7457                           
  7458                           ; BSR set to: 0
  7459                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  7460  0008C4  EE20 F001          	lfsr	2,1
  7461  0008C8  5198               	movf	find_volume@fs& (0+255),w,b
  7462  0008CA  26D9               	addwf	fsr2l,f,c
  7463  0008CC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7464  0008CE  22DA               	addwfc	fsr2h,f,c
  7465  0008D0  C080  FFDF         	movff	find_volume@vol,indf2
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  7469  0008D4  EE20 F001          	lfsr	2,1
  7470  0008D8  5198               	movf	find_volume@fs& (0+255),w,b
  7471  0008DA  26D9               	addwf	fsr2l,f,c
  7472  0008DC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7473  0008DE  22DA               	addwfc	fsr2h,f,c
  7474  0008E0  50DF               	movf	indf2,w,c
  7475  0008E2  ECAE  F020         	call	_disk_initialize
  7476  0008E6  0100               	movlb	0	; () banked
  7477  0008E8  6F8C               	movwf	find_volume@stat& (0+255),b
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;ff.c: 2245:  if (stat & 0x01)
  7481  0008EA  A18C               	btfss	find_volume@stat& (0+255),0,b
  7482  0008EC  D002               	goto	l5894
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;ff.c: 2246:   return FR_NOT_READY;
  7486  0008EE  0E03               	movlw	3
  7487  0008F0  0012               	return	
  7488  0008F2                     l5894:
  7489                           
  7490                           ; BSR set to: 0
  7491  0008F2  5049               	movf	find_volume@wmode,w,c
  7492  0008F4  B4D8               	btfsc	status,2,c
  7493  0008F6  D002               	goto	l5902
  7494                           
  7495                           ; BSR set to: 0
  7496  0008F8  B58C               	btfsc	find_volume@stat& (0+255),2,b
  7497  0008FA  D7DA               	goto	u7770
  7498  0008FC                     l5902:
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;ff.c: 2254:  bsect = 0;
  7502  0008FC  0E00               	movlw	0
  7503  0008FE  6F91               	movwf	find_volume@bsect& (0+255),b
  7504  000900  0E00               	movlw	0
  7505  000902  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  7506  000904  0E00               	movlw	0
  7507  000906  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  7508  000908  0E00               	movlw	0
  7509  00090A  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  7513  00090C  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7514  000910  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7515  000914  0E00               	movlw	0
  7516  000916  6E3D               	movwf	check_fs@sect,c
  7517  000918  0E00               	movlw	0
  7518  00091A  6E3E               	movwf	check_fs@sect+1,c
  7519  00091C  0E00               	movlw	0
  7520  00091E  6E3F               	movwf	check_fs@sect+2,c
  7521  000920  0E00               	movlw	0
  7522  000922  6E40               	movwf	check_fs@sect+3,c
  7523  000924  EC2E  F027         	call	_check_fs	;wreg free
  7524  000928  0100               	movlb	0	; () banked
  7525  00092A  6F97               	movwf	find_volume@fmt& (0+255),b
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  7529  00092C  0597               	decf	find_volume@fmt& (0+255),w,b
  7530  00092E  A4D8               	btfss	status,2,c
  7531  000930  D0AE               	goto	u7870
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  7535  000932  0E00               	movlw	0
  7536  000934  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7537  000936  0E00               	movlw	0
  7538  000938  6F95               	movwf	find_volume@i& (0+255),b
  7539  00093A                     l5914:
  7540                           
  7541                           ; BSR set to: 0
  7542  00093A  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7543  00093C  E15A               	bnz	l5930
  7544  00093E  0E04               	movlw	4
  7545  000940  5D95               	subwf	find_volume@i& (0+255),w,b
  7546  000942  B0D8               	btfsc	status,0,c
  7547  000944  D056               	goto	l5930
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  7551  000946  C095  F04A         	movff	find_volume@i,??_find_volume
  7552  00094A  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  7553  00094E  3A4A               	swapf	??_find_volume,f,c
  7554  000950  3A4B               	swapf	??_find_volume+1,f,c
  7555  000952  0EF0               	movlw	240
  7556  000954  164B               	andwf	??_find_volume+1,f,c
  7557  000956  504A               	movf	??_find_volume,w,c
  7558  000958  0B0F               	andlw	15
  7559  00095A  124B               	iorwf	??_find_volume+1,f,c
  7560  00095C  0EF0               	movlw	240
  7561  00095E  164A               	andwf	??_find_volume,f,c
  7562  000960  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  7563  000964  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  7564  000968  504A               	movf	??_find_volume,w,c
  7565  00096A  264C               	addwf	??_find_volume+2,f,c
  7566  00096C  504B               	movf	??_find_volume+1,w,c
  7567  00096E  224D               	addwfc	??_find_volume+3,f,c
  7568  000970  0EEC               	movlw	236
  7569  000972  244C               	addwf	??_find_volume+2,w,c
  7570  000974  6F7A               	movwf	find_volume@pt& (0+255),b
  7571  000976  0E01               	movlw	1
  7572  000978  204D               	addwfc	??_find_volume+3,w,c
  7573  00097A  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  7577  00097C  EE20 F004          	lfsr	2,4
  7578  000980  517A               	movf	find_volume@pt& (0+255),w,b
  7579  000982  26D9               	addwf	fsr2l,f,c
  7580  000984  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7581  000986  22DA               	addwfc	fsr2h,f,c
  7582  000988  50DF               	movf	indf2,w,c
  7583  00098A  A4D8               	btfss	status,2,c
  7584  00098C  D009               	goto	l5924
  7585                           
  7586                           ; BSR set to: 0
  7587  00098E  0E00               	movlw	0
  7588  000990  6F70               	movwf	_find_volume$728& (0+255),b
  7589  000992  0E00               	movlw	0
  7590  000994  6F71               	movwf	(_find_volume$728+1)& (0+255),b
  7591  000996  0E00               	movlw	0
  7592  000998  6F72               	movwf	(_find_volume$728+2)& (0+255),b
  7593  00099A  0E00               	movlw	0
  7594  00099C  6F73               	movwf	(_find_volume$728+3)& (0+255),b
  7595  00099E  D00E               	goto	l520
  7596  0009A0                     l5924:
  7597                           
  7598                           ; BSR set to: 0
  7599  0009A0  EE20 F008          	lfsr	2,8
  7600  0009A4  517A               	movf	find_volume@pt& (0+255),w,b
  7601  0009A6  26D9               	addwf	fsr2l,f,c
  7602  0009A8  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  7603  0009AA  22DA               	addwfc	fsr2h,f,c
  7604  0009AC  CFDE F070          	movff	postinc2,_find_volume$728
  7605  0009B0  CFDE F071          	movff	postinc2,_find_volume$728+1
  7606  0009B4  CFDE F072          	movff	postinc2,_find_volume$728+2
  7607  0009B8  CFDE F073          	movff	postinc2,_find_volume$728+3
  7608  0009BC                     l520:
  7609                           
  7610                           ; BSR set to: 0
  7611  0009BC  0E60               	movlw	low find_volume@br
  7612  0009BE  6E4A               	movwf	??_find_volume& (0+255),c
  7613  0009C0  0E00               	movlw	high find_volume@br
  7614  0009C2  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7615  0009C4  90D8               	bcf	status,0,c
  7616  0009C6  3595               	rlcf	find_volume@i& (0+255),w,b
  7617  0009C8  6ED9               	movwf	fsr2l,c
  7618  0009CA  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7619  0009CC  6EDA               	movwf	fsr2h,c
  7620  0009CE  90D8               	bcf	status,0,c
  7621  0009D0  36D9               	rlcf	fsr2l,f,c
  7622  0009D2  36DA               	rlcf	fsr2h,f,c
  7623  0009D4  504A               	movf	??_find_volume,w,c
  7624  0009D6  26D9               	addwf	fsr2l,f,c
  7625  0009D8  504B               	movf	??_find_volume+1,w,c
  7626  0009DA  22DA               	addwfc	fsr2h,f,c
  7627  0009DC  C070  FFDE         	movff	_find_volume$728,postinc2
  7628  0009E0  C071  FFDE         	movff	_find_volume$728+1,postinc2
  7629  0009E4  C072  FFDE         	movff	_find_volume$728+2,postinc2
  7630  0009E8  C073  FFDE         	movff	_find_volume$728+3,postinc2
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;ff.c: 2260:   }
  7634  0009EC  4B95               	infsnz	find_volume@i& (0+255),f,b
  7635  0009EE  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7636  0009F0  D7A4               	goto	l5914
  7637  0009F2                     l5930:
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;ff.c: 2261:   i = 0;
  7641  0009F2  0E00               	movlw	0
  7642  0009F4  6F96               	movwf	(find_volume@i+1)& (0+255),b
  7643  0009F6  0E00               	movlw	0
  7644  0009F8  6F95               	movwf	find_volume@i& (0+255),b
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;ff.c: 2262:   if (i) i--;
  7648  0009FA  5195               	movf	find_volume@i& (0+255),w,b
  7649  0009FC  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  7650  0009FE  B4D8               	btfsc	status,2,c
  7651  000A00  D003               	goto	l5936
  7652                           
  7653                           ; BSR set to: 0
  7654  000A02  0795               	decf	find_volume@i& (0+255),f,b
  7655  000A04  A0D8               	btfss	status,0,c
  7656  000A06  0796               	decf	(find_volume@i+1)& (0+255),f,b
  7657  000A08                     l5936:
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;ff.c: 2264:    bsect = br[i];
  7661  000A08  0E60               	movlw	low find_volume@br
  7662  000A0A  6E4A               	movwf	??_find_volume& (0+255),c
  7663  000A0C  0E00               	movlw	high find_volume@br
  7664  000A0E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7665  000A10  90D8               	bcf	status,0,c
  7666  000A12  3595               	rlcf	find_volume@i& (0+255),w,b
  7667  000A14  6ED9               	movwf	fsr2l,c
  7668  000A16  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  7669  000A18  6EDA               	movwf	fsr2h,c
  7670  000A1A  90D8               	bcf	status,0,c
  7671  000A1C  36D9               	rlcf	fsr2l,f,c
  7672  000A1E  36DA               	rlcf	fsr2h,f,c
  7673  000A20  504A               	movf	??_find_volume,w,c
  7674  000A22  26D9               	addwf	fsr2l,f,c
  7675  000A24  504B               	movf	??_find_volume+1,w,c
  7676  000A26  22DA               	addwfc	fsr2h,f,c
  7677  000A28  CFDE F091          	movff	postinc2,find_volume@bsect
  7678  000A2C  CFDE F092          	movff	postinc2,find_volume@bsect+1
  7679  000A30  CFDE F093          	movff	postinc2,find_volume@bsect+2
  7680  000A34  CFDE F094          	movff	postinc2,find_volume@bsect+3
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  7684  000A38  5191               	movf	find_volume@bsect& (0+255),w,b
  7685  000A3A  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  7686  000A3C  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  7687  000A3E  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  7688  000A40  A4D8               	btfss	status,2,c
  7689  000A42  D005               	goto	l5942
  7690                           
  7691                           ; BSR set to: 0
  7692  000A44  0E00               	movlw	0
  7693  000A46  6F75               	movwf	(_find_volume$729+1)& (0+255),b
  7694  000A48  0E02               	movlw	2
  7695  000A4A  6F74               	movwf	_find_volume$729& (0+255),b
  7696  000A4C  D013               	goto	l5944
  7697  000A4E                     l5942:
  7698                           
  7699                           ; BSR set to: 0
  7700  000A4E  C098  F03B         	movff	find_volume@fs,check_fs@fs
  7701  000A52  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  7702  000A56  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  7703  000A5A  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  7704  000A5E  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  7705  000A62  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  7706  000A66  EC2E  F027         	call	_check_fs	;wreg free
  7707  000A6A  6E4A               	movwf	??_find_volume& (0+255),c
  7708  000A6C  504A               	movf	??_find_volume,w,c
  7709  000A6E  0100               	movlb	0	; () banked
  7710  000A70  6F74               	movwf	_find_volume$729& (0+255),b
  7711  000A72  6B75               	clrf	(_find_volume$729+1)& (0+255),b
  7712  000A74                     l5944:
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  7716  000A74  C074  F097         	movff	_find_volume$729,find_volume@fmt
  7717                           
  7718                           ; BSR set to: 0
  7719  000A78  5197               	movf	find_volume@fmt& (0+255),w,b
  7720  000A7A  B4D8               	btfsc	status,2,c
  7721  000A7C  D008               	goto	u7870
  7722                           
  7723                           ; BSR set to: 0
  7724  000A7E  4B95               	infsnz	find_volume@i& (0+255),f,b
  7725  000A80  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  7726  000A82  5196               	movf	(find_volume@i+1)& (0+255),w,b
  7727  000A84  E104               	bnz	u7870
  7728  000A86  0E04               	movlw	4
  7729  000A88  5D95               	subwf	find_volume@i& (0+255),w,b
  7730  000A8A  A0D8               	btfss	status,0,c
  7731  000A8C  D7BD               	goto	l5936
  7732  000A8E                     u7870:
  7733                           
  7734                           ; BSR set to: 0
  7735                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  7736  000A8E  0E03               	movlw	3
  7737  000A90  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7738  000A92  A4D8               	btfss	status,2,c
  7739  000A94  D002               	goto	l5956
  7740                           
  7741                           ; BSR set to: 0
  7742  000A96  0E01               	movlw	1
  7743  000A98  0012               	return	
  7744  000A9A                     l5956:
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  7748  000A9A  5197               	movf	find_volume@fmt& (0+255),w,b
  7749  000A9C  B4D8               	btfsc	status,2,c
  7750  000A9E  D002               	goto	l5962
  7751  000AA0                     u7890:
  7752  000AA0                     l5958:
  7753                           
  7754                           ; BSR set to: 0
  7755  000AA0  0E0D               	movlw	13
  7756  000AA2  0012               	return	
  7757  000AA4                     l5962:
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  7761  000AA4  EE20 F039          	lfsr	2,57
  7762  000AA8  5198               	movf	find_volume@fs& (0+255),w,b
  7763  000AAA  26D9               	addwf	fsr2l,f,c
  7764  000AAC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7765  000AAE  22DA               	addwfc	fsr2h,f,c
  7766  000AB0  50DE               	movf	postinc2,w,c
  7767  000AB2  E1F6               	bnz	l5958
  7768  000AB4  0E02               	movlw	2
  7769  000AB6  18DE               	xorwf	postinc2,w,c
  7770  000AB8  A4D8               	btfss	status,2,c
  7771  000ABA  D7F2               	goto	u7890
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  7775  000ABC  EE20 F044          	lfsr	2,68
  7776  000AC0  5198               	movf	find_volume@fs& (0+255),w,b
  7777  000AC2  26D9               	addwf	fsr2l,f,c
  7778  000AC4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7779  000AC6  22DA               	addwfc	fsr2h,f,c
  7780  000AC8  CFDE F04A          	movff	postinc2,??_find_volume
  7781  000ACC  CFDD F04B          	movff	postdec2,??_find_volume+1
  7782  000AD0  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  7783  000AD4  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  7784  000AD8  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  7785  000ADA  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  7789  000ADC  518D               	movf	find_volume@fasize& (0+255),w,b
  7790  000ADE  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  7791  000AE0  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  7792  000AE2  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  7793  000AE4  A4D8               	btfss	status,2,c
  7794  000AE6  D00E               	goto	l533
  7795                           
  7796                           ; BSR set to: 0
  7797  000AE8  EE20 F052          	lfsr	2,82
  7798  000AEC  5198               	movf	find_volume@fs& (0+255),w,b
  7799  000AEE  26D9               	addwf	fsr2l,f,c
  7800  000AF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7801  000AF2  22DA               	addwfc	fsr2h,f,c
  7802  000AF4  CFDE F08D          	movff	postinc2,find_volume@fasize
  7803  000AF8  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  7804  000AFC  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  7805  000B00  CFDE F090          	movff	postinc2,find_volume@fasize+3
  7806  000B04                     l533:
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;ff.c: 2278:  fs->fsize = fasize;
  7810  000B04  EE20 F016          	lfsr	2,22
  7811  000B08  5198               	movf	find_volume@fs& (0+255),w,b
  7812  000B0A  26D9               	addwf	fsr2l,f,c
  7813  000B0C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7814  000B0E  22DA               	addwfc	fsr2h,f,c
  7815  000B10  C08D  FFDE         	movff	find_volume@fasize,postinc2
  7816  000B14  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  7817  000B18  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  7818  000B1C  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  7819                           
  7820                           ; BSR set to: 0
  7821                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  7822  000B20  EE20 F03E          	lfsr	2,62
  7823  000B24  5198               	movf	find_volume@fs& (0+255),w,b
  7824  000B26  26D9               	addwf	fsr2l,f,c
  7825  000B28  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7826  000B2A  22DA               	addwfc	fsr2h,f,c
  7827  000B2C  EE10 F003          	lfsr	1,3
  7828  000B30  5198               	movf	find_volume@fs& (0+255),w,b
  7829  000B32  26E1               	addwf	fsr1l,f,c
  7830  000B34  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7831  000B36  22E2               	addwfc	fsr1h,f,c
  7832  000B38  CFDF FFE7          	movff	indf2,indf1
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  7836  000B3C  EE20 F003          	lfsr	2,3
  7837  000B40  5198               	movf	find_volume@fs& (0+255),w,b
  7838  000B42  26D9               	addwf	fsr2l,f,c
  7839  000B44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7840  000B46  22DA               	addwfc	fsr2h,f,c
  7841  000B48  04DE               	decf	postinc2,w,c
  7842  000B4A  B4D8               	btfsc	status,2,c
  7843  000B4C  D00A               	goto	l5984
  7844                           
  7845                           ; BSR set to: 0
  7846  000B4E  EE20 F003          	lfsr	2,3
  7847  000B52  5198               	movf	find_volume@fs& (0+255),w,b
  7848  000B54  26D9               	addwf	fsr2l,f,c
  7849  000B56  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7850  000B58  22DA               	addwfc	fsr2h,f,c
  7851  000B5A  0E02               	movlw	2
  7852  000B5C  18DE               	xorwf	postinc2,w,c
  7853  000B5E  A4D8               	btfss	status,2,c
  7854  000B60  D79F               	goto	u7890
  7855  000B62                     l5984:
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;ff.c: 2283:  fasize *= fs->n_fats;
  7859  000B62  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  7860  000B66  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  7861  000B6A  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  7862  000B6E  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  7863  000B72  EE20 F003          	lfsr	2,3
  7864  000B76  5198               	movf	find_volume@fs& (0+255),w,b
  7865  000B78  26D9               	addwf	fsr2l,f,c
  7866  000B7A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7867  000B7C  22DA               	addwfc	fsr2h,f,c
  7868  000B7E  50DF               	movf	indf2,w,c
  7869  000B80  6E4A               	movwf	??_find_volume& (0+255),c
  7870  000B82  504A               	movf	??_find_volume,w,c
  7871  000B84  6E05               	movwf	___lmul@multiplicand,c
  7872  000B86  6A06               	clrf	___lmul@multiplicand+1,c
  7873  000B88  6A07               	clrf	___lmul@multiplicand+2,c
  7874  000B8A  6A08               	clrf	___lmul@multiplicand+3,c
  7875  000B8C  EC3C  F02D         	call	___lmul	;wreg free
  7876  000B90  C001  F08D         	movff	?___lmul,find_volume@fasize
  7877  000B94  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  7878  000B98  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  7879  000B9C  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  7880                           
  7881                           ;ff.c: 2285:  fs->csize = fs->win[13];
  7882  000BA0  0100               	movlb	0	; () banked
  7883  000BA2  EE20 F03B          	lfsr	2,59
  7884  000BA6  5198               	movf	find_volume@fs& (0+255),w,b
  7885  000BA8  26D9               	addwf	fsr2l,f,c
  7886  000BAA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7887  000BAC  22DA               	addwfc	fsr2h,f,c
  7888  000BAE  EE10 F002          	lfsr	1,2
  7889  000BB2  5198               	movf	find_volume@fs& (0+255),w,b
  7890  000BB4  26E1               	addwf	fsr1l,f,c
  7891  000BB6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7892  000BB8  22E2               	addwfc	fsr1h,f,c
  7893  000BBA  CFDF FFE7          	movff	indf2,indf1
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  7897  000BBE  EE20 F002          	lfsr	2,2
  7898  000BC2  5198               	movf	find_volume@fs& (0+255),w,b
  7899  000BC4  26D9               	addwf	fsr2l,f,c
  7900  000BC6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7901  000BC8  22DA               	addwfc	fsr2h,f,c
  7902  000BCA  50DF               	movf	indf2,w,c
  7903  000BCC  B4D8               	btfsc	status,2,c
  7904  000BCE  D768               	goto	u7890
  7905                           
  7906                           ; BSR set to: 0
  7907  000BD0  0EFF               	movlw	255
  7908  000BD2  6E4A               	movwf	??_find_volume& (0+255),c
  7909  000BD4  0EFF               	movlw	255
  7910  000BD6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7911  000BD8  EE20 F002          	lfsr	2,2
  7912  000BDC  5198               	movf	find_volume@fs& (0+255),w,b
  7913  000BDE  26D9               	addwf	fsr2l,f,c
  7914  000BE0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7915  000BE2  22DA               	addwfc	fsr2h,f,c
  7916  000BE4  50DF               	movf	indf2,w,c
  7917  000BE6  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7918  000BE8  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  7919  000BEA  504A               	movf	??_find_volume,w,c
  7920  000BEC  264C               	addwf	??_find_volume+2,f,c
  7921  000BEE  504B               	movf	??_find_volume+1,w,c
  7922  000BF0  224D               	addwfc	??_find_volume+3,f,c
  7923  000BF2  EE20 F002          	lfsr	2,2
  7924  000BF6  5198               	movf	find_volume@fs& (0+255),w,b
  7925  000BF8  26D9               	addwf	fsr2l,f,c
  7926  000BFA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7927  000BFC  22DA               	addwfc	fsr2h,f,c
  7928  000BFE  50DF               	movf	indf2,w,c
  7929  000C00  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7930  000C02  504E               	movf	??_find_volume+4,w,c
  7931  000C04  164C               	andwf	??_find_volume+2,f,c
  7932  000C06  0E00               	movlw	0
  7933  000C08  164D               	andwf	??_find_volume+3,f,c
  7934  000C0A  504C               	movf	??_find_volume+2,w,c
  7935  000C0C  104D               	iorwf	??_find_volume+3,w,c
  7936  000C0E  A4D8               	btfss	status,2,c
  7937  000C10  D747               	goto	u7890
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  7941  000C12  EE20 F03F          	lfsr	2,63
  7942  000C16  5198               	movf	find_volume@fs& (0+255),w,b
  7943  000C18  26D9               	addwf	fsr2l,f,c
  7944  000C1A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7945  000C1C  22DA               	addwfc	fsr2h,f,c
  7946  000C1E  EE10 F008          	lfsr	1,8
  7947  000C22  5198               	movf	find_volume@fs& (0+255),w,b
  7948  000C24  26E1               	addwf	fsr1l,f,c
  7949  000C26  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7950  000C28  22E2               	addwfc	fsr1h,f,c
  7951  000C2A  CFDE FFE6          	movff	postinc2,postinc1
  7952  000C2E  CFDD FFE5          	movff	postdec2,postdec1
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  7956  000C32  EE20 F008          	lfsr	2,8
  7957  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  7958  000C38  26D9               	addwf	fsr2l,f,c
  7959  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7960  000C3C  22DA               	addwfc	fsr2h,f,c
  7961  000C3E  CFDE F04A          	movff	postinc2,??_find_volume
  7962  000C42  CFDD F04B          	movff	postdec2,??_find_volume+1
  7963  000C46  0E0F               	movlw	15
  7964  000C48  164A               	andwf	??_find_volume,f,c
  7965  000C4A  0E00               	movlw	0
  7966  000C4C  164B               	andwf	??_find_volume+1,f,c
  7967  000C4E  504A               	movf	??_find_volume,w,c
  7968  000C50  104B               	iorwf	??_find_volume+1,w,c
  7969  000C52  A4D8               	btfss	status,2,c
  7970  000C54  D725               	goto	u7890
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  7974  000C56  EE20 F041          	lfsr	2,65
  7975  000C5A  5198               	movf	find_volume@fs& (0+255),w,b
  7976  000C5C  26D9               	addwf	fsr2l,f,c
  7977  000C5E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7978  000C60  22DA               	addwfc	fsr2h,f,c
  7979  000C62  CFDE F04A          	movff	postinc2,??_find_volume
  7980  000C66  CFDD F04B          	movff	postdec2,??_find_volume+1
  7981  000C6A  C04A  F084         	movff	??_find_volume,find_volume@tsect
  7982  000C6E  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  7983  000C72  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  7984  000C74  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  7988  000C76  5184               	movf	find_volume@tsect& (0+255),w,b
  7989  000C78  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  7990  000C7A  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  7991  000C7C  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  7992  000C7E  A4D8               	btfss	status,2,c
  7993  000C80  D00E               	goto	l539
  7994                           
  7995                           ; BSR set to: 0
  7996  000C82  EE20 F04E          	lfsr	2,78
  7997  000C86  5198               	movf	find_volume@fs& (0+255),w,b
  7998  000C88  26D9               	addwf	fsr2l,f,c
  7999  000C8A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8000  000C8C  22DA               	addwfc	fsr2h,f,c
  8001  000C8E  CFDE F084          	movff	postinc2,find_volume@tsect
  8002  000C92  CFDE F085          	movff	postinc2,find_volume@tsect+1
  8003  000C96  CFDE F086          	movff	postinc2,find_volume@tsect+2
  8004  000C9A  CFDE F087          	movff	postinc2,find_volume@tsect+3
  8005  000C9E                     l539:
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  8009  000C9E  EE20 F03C          	lfsr	2,60
  8010  000CA2  5198               	movf	find_volume@fs& (0+255),w,b
  8011  000CA4  26D9               	addwf	fsr2l,f,c
  8012  000CA6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8013  000CA8  22DA               	addwfc	fsr2h,f,c
  8014  000CAA  CFDE F082          	movff	postinc2,find_volume@nrsv
  8015  000CAE  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  8019  000CB2  5182               	movf	find_volume@nrsv& (0+255),w,b
  8020  000CB4  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  8021  000CB6  B4D8               	btfsc	status,2,c
  8022  000CB8  D6F3               	goto	u7890
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  8026  000CBA  EE20 F008          	lfsr	2,8
  8027  000CBE  5198               	movf	find_volume@fs& (0+255),w,b
  8028  000CC0  26D9               	addwf	fsr2l,f,c
  8029  000CC2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8030  000CC4  22DA               	addwfc	fsr2h,f,c
  8031  000CC6  CFDE F04A          	movff	postinc2,??_find_volume
  8032  000CCA  CFDD F04B          	movff	postdec2,??_find_volume+1
  8033  000CCE  0E04               	movlw	4
  8034  000CD0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8035  000CD2                     u7995:
  8036  000CD2  90D8               	bcf	status,0,c
  8037  000CD4  324B               	rrcf	??_find_volume+1,f,c
  8038  000CD6  324A               	rrcf	??_find_volume,f,c
  8039  000CD8  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  8040  000CDA  D7FB               	goto	u7995
  8041  000CDC  5182               	movf	find_volume@nrsv& (0+255),w,b
  8042  000CDE  244A               	addwf	??_find_volume,w,c
  8043  000CE0  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8044  000CE2  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8045  000CE4  204B               	addwfc	??_find_volume+1,w,c
  8046  000CE6  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8047  000CE8  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  8048  000CEA  B0D8               	btfsc	status,0,c
  8049  000CEC  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  8050  000CEE  6A50               	clrf	(??_find_volume+6)& (0+255),c
  8051  000CF0  518D               	movf	find_volume@fasize& (0+255),w,b
  8052  000CF2  244D               	addwf	??_find_volume+3,w,c
  8053  000CF4  6F7C               	movwf	find_volume@sysect& (0+255),b
  8054  000CF6  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8055  000CF8  204E               	addwfc	??_find_volume+4,w,c
  8056  000CFA  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  8057  000CFC  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8058  000CFE  204F               	addwfc	??_find_volume+5,w,c
  8059  000D00  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  8060  000D02  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8061  000D04  2050               	addwfc	??_find_volume+6,w,c
  8062  000D06  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  8066  000D08  517C               	movf	find_volume@sysect& (0+255),w,b
  8067  000D0A  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8068  000D0C  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8069  000D0E  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8070  000D10  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8071  000D12  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8072  000D14  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8073  000D16  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8074  000D18  A0D8               	btfss	status,0,c
  8075  000D1A  D6C2               	goto	u7890
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  8079  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  8080  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  8081  000D20  6E01               	movwf	___lldiv@dividend,c
  8082  000D22  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8083  000D24  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  8084  000D26  6E02               	movwf	___lldiv@dividend+1,c
  8085  000D28  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8086  000D2A  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  8087  000D2C  6E03               	movwf	___lldiv@dividend+2,c
  8088  000D2E  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8089  000D30  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  8090  000D32  6E04               	movwf	___lldiv@dividend+3,c
  8091  000D34  EE20 F002          	lfsr	2,2
  8092  000D38  5198               	movf	find_volume@fs& (0+255),w,b
  8093  000D3A  26D9               	addwf	fsr2l,f,c
  8094  000D3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8095  000D3E  22DA               	addwfc	fsr2h,f,c
  8096  000D40  50DF               	movf	indf2,w,c
  8097  000D42  6E4A               	movwf	??_find_volume& (0+255),c
  8098  000D44  504A               	movf	??_find_volume,w,c
  8099  000D46  6E05               	movwf	___lldiv@divisor,c
  8100  000D48  6A06               	clrf	___lldiv@divisor+1,c
  8101  000D4A  6A07               	clrf	___lldiv@divisor+2,c
  8102  000D4C  6A08               	clrf	___lldiv@divisor+3,c
  8103  000D4E  EC75  F02B         	call	___lldiv	;wreg free
  8104  000D52  C001  F088         	movff	?___lldiv,find_volume@nclst
  8105  000D56  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  8106  000D5A  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  8107  000D5E  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  8108                           
  8109                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  8110  000D62  0100               	movlb	0	; () banked
  8111  000D64  5188               	movf	find_volume@nclst& (0+255),w,b
  8112  000D66  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  8113  000D68  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8114  000D6A  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  8115  000D6C  B4D8               	btfsc	status,2,c
  8116  000D6E  D698               	goto	u7890
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;ff.c: 2304:  fmt = 1;
  8120  000D70  0E01               	movlw	1
  8121  000D72  6F97               	movwf	find_volume@fmt& (0+255),b
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  8125  000D74  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8126  000D76  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8127  000D78  E106               	bnz	u8020
  8128  000D7A  0EF6               	movlw	246
  8129  000D7C  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8130  000D7E  0E0F               	movlw	15
  8131  000D80  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8132  000D82  A0D8               	btfss	status,0,c
  8133  000D84  D002               	goto	l6038
  8134  000D86                     u8020:
  8135                           
  8136                           ; BSR set to: 0
  8137  000D86  0E02               	movlw	2
  8138  000D88  6F97               	movwf	find_volume@fmt& (0+255),b
  8139  000D8A                     l6038:
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  8143  000D8A  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  8144  000D8C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  8145  000D8E  E106               	bnz	u8030
  8146  000D90  0EF6               	movlw	246
  8147  000D92  5D88               	subwf	find_volume@nclst& (0+255),w,b
  8148  000D94  0EFF               	movlw	255
  8149  000D96  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  8150  000D98  A0D8               	btfss	status,0,c
  8151  000D9A  D002               	goto	l6042
  8152  000D9C                     u8030:
  8153                           
  8154                           ; BSR set to: 0
  8155  000D9C  0E03               	movlw	3
  8156  000D9E  6F97               	movwf	find_volume@fmt& (0+255),b
  8157  000DA0                     l6042:
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  8161  000DA0  0E02               	movlw	2
  8162  000DA2  2588               	addwf	find_volume@nclst& (0+255),w,b
  8163  000DA4  6E4A               	movwf	??_find_volume& (0+255),c
  8164  000DA6  0E00               	movlw	0
  8165  000DA8  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  8166  000DAA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8167  000DAC  0E00               	movlw	0
  8168  000DAE  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  8169  000DB0  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8170  000DB2  0E00               	movlw	0
  8171  000DB4  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  8172  000DB6  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8173  000DB8  EE20 F012          	lfsr	2,18
  8174  000DBC  5198               	movf	find_volume@fs& (0+255),w,b
  8175  000DBE  26D9               	addwf	fsr2l,f,c
  8176  000DC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8177  000DC2  22DA               	addwfc	fsr2h,f,c
  8178  000DC4  C04A  FFDE         	movff	??_find_volume,postinc2
  8179  000DC8  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8180  000DCC  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8181  000DD0  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;ff.c: 2310:  fs->volbase = bsect;
  8185  000DD4  EE20 F01A          	lfsr	2,26
  8186  000DD8  5198               	movf	find_volume@fs& (0+255),w,b
  8187  000DDA  26D9               	addwf	fsr2l,f,c
  8188  000DDC  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8189  000DDE  22DA               	addwfc	fsr2h,f,c
  8190  000DE0  C091  FFDE         	movff	find_volume@bsect,postinc2
  8191  000DE4  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  8192  000DE8  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  8193  000DEC  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  8197  000DF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  8198  000DF2  2591               	addwf	find_volume@bsect& (0+255),w,b
  8199  000DF4  6E4A               	movwf	??_find_volume& (0+255),c
  8200  000DF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  8201  000DF8  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8202  000DFA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8203  000DFC  0E00               	movlw	0
  8204  000DFE  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8205  000E00  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8206  000E02  0E00               	movlw	0
  8207  000E04  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8208  000E06  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8209  000E08  EE20 F01E          	lfsr	2,30
  8210  000E0C  5198               	movf	find_volume@fs& (0+255),w,b
  8211  000E0E  26D9               	addwf	fsr2l,f,c
  8212  000E10  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8213  000E12  22DA               	addwfc	fsr2h,f,c
  8214  000E14  C04A  FFDE         	movff	??_find_volume,postinc2
  8215  000E18  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8216  000E1C  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8217  000E20  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;ff.c: 2312:  fs->database = bsect + sysect;
  8221  000E24  517C               	movf	find_volume@sysect& (0+255),w,b
  8222  000E26  2591               	addwf	find_volume@bsect& (0+255),w,b
  8223  000E28  6E4A               	movwf	??_find_volume& (0+255),c
  8224  000E2A  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  8225  000E2C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8226  000E2E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8227  000E30  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  8228  000E32  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8229  000E34  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8230  000E36  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  8231  000E38  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8232  000E3A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8233  000E3C  EE20 F026          	lfsr	2,38
  8234  000E40  5198               	movf	find_volume@fs& (0+255),w,b
  8235  000E42  26D9               	addwf	fsr2l,f,c
  8236  000E44  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8237  000E46  22DA               	addwfc	fsr2h,f,c
  8238  000E48  C04A  FFDE         	movff	??_find_volume,postinc2
  8239  000E4C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  8240  000E50  C04C  FFDE         	movff	??_find_volume+2,postinc2
  8241  000E54  C04D  FFDE         	movff	??_find_volume+3,postinc2
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;ff.c: 2313:  if (fmt == 3) {
  8245  000E58  0E03               	movlw	3
  8246  000E5A  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8247  000E5C  A4D8               	btfss	status,2,c
  8248  000E5E  D03D               	goto	l6062
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  8252  000E60  EE20 F008          	lfsr	2,8
  8253  000E64  5198               	movf	find_volume@fs& (0+255),w,b
  8254  000E66  26D9               	addwf	fsr2l,f,c
  8255  000E68  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8256  000E6A  22DA               	addwfc	fsr2h,f,c
  8257  000E6C  50DE               	movf	postinc2,w,c
  8258  000E6E  10DE               	iorwf	postinc2,w,c
  8259  000E70  A4D8               	btfss	status,2,c
  8260  000E72  D616               	goto	u7890
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  8264  000E74  EE20 F05A          	lfsr	2,90
  8265  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  8266  000E7A  26D9               	addwf	fsr2l,f,c
  8267  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8268  000E7E  22DA               	addwfc	fsr2h,f,c
  8269  000E80  EE10 F022          	lfsr	1,34
  8270  000E84  5198               	movf	find_volume@fs& (0+255),w,b
  8271  000E86  26E1               	addwf	fsr1l,f,c
  8272  000E88  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8273  000E8A  22E2               	addwfc	fsr1h,f,c
  8274  000E8C  CFDE FFE6          	movff	postinc2,postinc1
  8275  000E90  CFDE FFE6          	movff	postinc2,postinc1
  8276  000E94  CFDE FFE6          	movff	postinc2,postinc1
  8277  000E98  CFDE FFE6          	movff	postinc2,postinc1
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  8281  000E9C  EE20 F012          	lfsr	2,18
  8282  000EA0  5198               	movf	find_volume@fs& (0+255),w,b
  8283  000EA2  26D9               	addwf	fsr2l,f,c
  8284  000EA4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8285  000EA6  22DA               	addwfc	fsr2h,f,c
  8286  000EA8  CFDE F04A          	movff	postinc2,??_find_volume
  8287  000EAC  CFDE F04B          	movff	postinc2,??_find_volume+1
  8288  000EB0  CFDE F04C          	movff	postinc2,??_find_volume+2
  8289  000EB4  CFDE F04D          	movff	postinc2,??_find_volume+3
  8290  000EB8  0E02               	movlw	2
  8291  000EBA                     u8065:
  8292  000EBA  90D8               	bcf	status,0,c
  8293  000EBC  364A               	rlcf	??_find_volume,f,c
  8294  000EBE  364B               	rlcf	??_find_volume+1,f,c
  8295  000EC0  364C               	rlcf	??_find_volume+2,f,c
  8296  000EC2  364D               	rlcf	??_find_volume+3,f,c
  8297  000EC4  2EE8               	decfsz	wreg,f,c
  8298  000EC6  D7F9               	goto	u8065
  8299  000EC8  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  8300  000ECC  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  8301  000ED0  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  8302  000ED4  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  8303                           
  8304                           ;ff.c: 2317:  } else {
  8305  000ED8  D091               	goto	l547
  8306  000EDA                     l6062:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  8310  000EDA  EE20 F008          	lfsr	2,8
  8311  000EDE  5198               	movf	find_volume@fs& (0+255),w,b
  8312  000EE0  26D9               	addwf	fsr2l,f,c
  8313  000EE2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8314  000EE4  22DA               	addwfc	fsr2h,f,c
  8315  000EE6  50DE               	movf	postinc2,w,c
  8316  000EE8  10DE               	iorwf	postinc2,w,c
  8317  000EEA  B4D8               	btfsc	status,2,c
  8318  000EEC  D5D9               	goto	u7890
  8319                           
  8320                           ; BSR set to: 0
  8321                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  8322  000EEE  EE20 F01E          	lfsr	2,30
  8323  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  8324  000EF4  26D9               	addwf	fsr2l,f,c
  8325  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8326  000EF8  22DA               	addwfc	fsr2h,f,c
  8327  000EFA  CFDE F04A          	movff	postinc2,??_find_volume
  8328  000EFE  CFDE F04B          	movff	postinc2,??_find_volume+1
  8329  000F02  CFDE F04C          	movff	postinc2,??_find_volume+2
  8330  000F06  CFDE F04D          	movff	postinc2,??_find_volume+3
  8331  000F0A  518D               	movf	find_volume@fasize& (0+255),w,b
  8332  000F0C  244A               	addwf	??_find_volume,w,c
  8333  000F0E  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8334  000F10  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  8335  000F12  204B               	addwfc	??_find_volume+1,w,c
  8336  000F14  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8337  000F16  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  8338  000F18  204C               	addwfc	??_find_volume+2,w,c
  8339  000F1A  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8340  000F1C  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  8341  000F1E  204D               	addwfc	??_find_volume+3,w,c
  8342  000F20  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8343  000F22  EE20 F022          	lfsr	2,34
  8344  000F26  5198               	movf	find_volume@fs& (0+255),w,b
  8345  000F28  26D9               	addwf	fsr2l,f,c
  8346  000F2A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8347  000F2C  22DA               	addwfc	fsr2h,f,c
  8348  000F2E  C04E  FFDE         	movff	??_find_volume+4,postinc2
  8349  000F32  C04F  FFDE         	movff	??_find_volume+5,postinc2
  8350  000F36  C050  FFDE         	movff	??_find_volume+6,postinc2
  8351  000F3A  C051  FFDE         	movff	??_find_volume+7,postinc2
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  8355  000F3E  0E02               	movlw	2
  8356  000F40  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8357  000F42  B4D8               	btfsc	status,2,c
  8358  000F44  D044               	goto	l6074
  8359                           
  8360                           ; BSR set to: 0
  8361  000F46  EE20 F012          	lfsr	2,18
  8362  000F4A  5198               	movf	find_volume@fs& (0+255),w,b
  8363  000F4C  26D9               	addwf	fsr2l,f,c
  8364  000F4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8365  000F50  22DA               	addwfc	fsr2h,f,c
  8366  000F52  CFDE F04A          	movff	postinc2,??_find_volume
  8367  000F56  CFDE F04B          	movff	postinc2,??_find_volume+1
  8368  000F5A  CFDE F04C          	movff	postinc2,??_find_volume+2
  8369  000F5E  CFDE F04D          	movff	postinc2,??_find_volume+3
  8370  000F62  0E01               	movlw	1
  8371  000F64  144A               	andwf	??_find_volume,w,c
  8372  000F66  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  8373  000F68  0E00               	movlw	0
  8374  000F6A  144B               	andwf	??_find_volume+1,w,c
  8375  000F6C  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  8376  000F6E  0E00               	movlw	0
  8377  000F70  144C               	andwf	??_find_volume+2,w,c
  8378  000F72  6E50               	movwf	(??_find_volume+6)& (0+255),c
  8379  000F74  0E00               	movlw	0
  8380  000F76  144D               	andwf	??_find_volume+3,w,c
  8381  000F78  6E51               	movwf	(??_find_volume+7)& (0+255),c
  8382  000F7A  EE20 F012          	lfsr	2,18
  8383  000F7E  5198               	movf	find_volume@fs& (0+255),w,b
  8384  000F80  26D9               	addwf	fsr2l,f,c
  8385  000F82  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8386  000F84  22DA               	addwfc	fsr2h,f,c
  8387  000F86  CFDE F001          	movff	postinc2,___lmul@multiplier
  8388  000F8A  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  8389  000F8E  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  8390  000F92  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  8391  000F96  0E03               	movlw	3
  8392  000F98  6E05               	movwf	___lmul@multiplicand,c
  8393  000F9A  0E00               	movlw	0
  8394  000F9C  6E06               	movwf	___lmul@multiplicand+1,c
  8395  000F9E  0E00               	movlw	0
  8396  000FA0  6E07               	movwf	___lmul@multiplicand+2,c
  8397  000FA2  0E00               	movlw	0
  8398  000FA4  6E08               	movwf	___lmul@multiplicand+3,c
  8399  000FA6  EC3C  F02D         	call	___lmul	;wreg free
  8400  000FAA  90D8               	bcf	status,0,c
  8401  000FAC  3204               	rrcf	?___lmul+3,f,c
  8402  000FAE  3203               	rrcf	?___lmul+2,f,c
  8403  000FB0  3202               	rrcf	?___lmul+1,f,c
  8404  000FB2  3201               	rrcf	?___lmul,f,c
  8405  000FB4  504E               	movf	??_find_volume+4,w,c
  8406  000FB6  2401               	addwf	?___lmul,w,c
  8407  000FB8  0100               	movlb	0	; () banked
  8408  000FBA  6F76               	movwf	find_volume@szbfat& (0+255),b
  8409  000FBC  504F               	movf	??_find_volume+5,w,c
  8410  000FBE  2002               	addwfc	?___lmul+1,w,c
  8411  000FC0  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8412  000FC2  5050               	movf	??_find_volume+6,w,c
  8413  000FC4  2003               	addwfc	?___lmul+2,w,c
  8414  000FC6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8415  000FC8  5051               	movf	??_find_volume+7,w,c
  8416  000FCA  2004               	addwfc	?___lmul+3,w,c
  8417  000FCC  D016               	goto	L9
  8418  000FCE                     l6074:
  8419                           
  8420                           ; BSR set to: 0
  8421  000FCE  EE20 F012          	lfsr	2,18
  8422  000FD2  5198               	movf	find_volume@fs& (0+255),w,b
  8423  000FD4  26D9               	addwf	fsr2l,f,c
  8424  000FD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8425  000FD8  22DA               	addwfc	fsr2h,f,c
  8426  000FDA  CFDE F04A          	movff	postinc2,??_find_volume
  8427  000FDE  CFDE F04B          	movff	postinc2,??_find_volume+1
  8428  000FE2  CFDE F04C          	movff	postinc2,??_find_volume+2
  8429  000FE6  CFDE F04D          	movff	postinc2,??_find_volume+3
  8430  000FEA  90D8               	bcf	status,0,c
  8431  000FEC  344A               	rlcf	??_find_volume,w,c
  8432  000FEE  6F76               	movwf	find_volume@szbfat& (0+255),b
  8433  000FF0  344B               	rlcf	??_find_volume+1,w,c
  8434  000FF2  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  8435  000FF4  344C               	rlcf	??_find_volume+2,w,c
  8436  000FF6  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  8437  000FF8  344D               	rlcf	??_find_volume+3,w,c
  8438  000FFA                     L9:
  8439  000FFA  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  8440  000FFC                     l547:
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  8444  000FFC  0EFF               	movlw	255
  8445  000FFE  2576               	addwf	find_volume@szbfat& (0+255),w,b
  8446  001000  6E4A               	movwf	??_find_volume& (0+255),c
  8447  001002  0E01               	movlw	1
  8448  001004  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  8449  001006  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  8450  001008  0E00               	movlw	0
  8451  00100A  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  8452  00100C  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  8453  00100E  0E00               	movlw	0
  8454  001010  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  8455  001012  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  8456  001014  0E0A               	movlw	10
  8457  001016  D005               	goto	u8090
  8458  001018                     u8095:
  8459  001018  90D8               	bcf	status,0,c
  8460  00101A  324D               	rrcf	??_find_volume+3,f,c
  8461  00101C  324C               	rrcf	??_find_volume+2,f,c
  8462  00101E  324B               	rrcf	??_find_volume+1,f,c
  8463  001020  324A               	rrcf	??_find_volume,f,c
  8464  001022                     u8090:
  8465  001022  2EE8               	decfsz	wreg,f,c
  8466  001024  D7F9               	goto	u8095
  8467  001026  EE20 F016          	lfsr	2,22
  8468  00102A  5198               	movf	find_volume@fs& (0+255),w,b
  8469  00102C  26D9               	addwf	fsr2l,f,c
  8470  00102E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8471  001030  22DA               	addwfc	fsr2h,f,c
  8472  001032  504A               	movf	??_find_volume,w,c
  8473  001034  5CDE               	subwf	postinc2,w,c
  8474  001036  504B               	movf	??_find_volume+1,w,c
  8475  001038  58DE               	subwfb	postinc2,w,c
  8476  00103A  504C               	movf	??_find_volume+2,w,c
  8477  00103C  58DE               	subwfb	postinc2,w,c
  8478  00103E  504D               	movf	??_find_volume+3,w,c
  8479  001040  58DE               	subwfb	postinc2,w,c
  8480  001042  A0D8               	btfss	status,0,c
  8481  001044  D52D               	goto	u7890
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  8485  001046  EE20 F00E          	lfsr	2,14
  8486  00104A  5198               	movf	find_volume@fs& (0+255),w,b
  8487  00104C  26D9               	addwf	fsr2l,f,c
  8488  00104E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8489  001050  22DA               	addwfc	fsr2h,f,c
  8490  001052  0EFF               	movlw	255
  8491  001054  6EDE               	movwf	postinc2,c
  8492  001056  0EFF               	movlw	255
  8493  001058  6EDE               	movwf	postinc2,c
  8494  00105A  0EFF               	movlw	255
  8495  00105C  6EDE               	movwf	postinc2,c
  8496  00105E  0EFF               	movlw	255
  8497  001060  6EDD               	movwf	postdec2,c
  8498  001062  52DD               	movf	postdec2,f,c
  8499  001064  52DD               	movf	postdec2,f,c
  8500  001066  EE10 F00A          	lfsr	1,10
  8501  00106A  5198               	movf	find_volume@fs& (0+255),w,b
  8502  00106C  26E1               	addwf	fsr1l,f,c
  8503  00106E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8504  001070  22E2               	addwfc	fsr1h,f,c
  8505  001072  CFDE FFE6          	movff	postinc2,postinc1
  8506  001076  CFDE FFE6          	movff	postinc2,postinc1
  8507  00107A  CFDE FFE6          	movff	postinc2,postinc1
  8508  00107E  CFDE FFE6          	movff	postinc2,postinc1
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  8512  001082  EE20 F005          	lfsr	2,5
  8513  001086  5198               	movf	find_volume@fs& (0+255),w,b
  8514  001088  26D9               	addwf	fsr2l,f,c
  8515  00108A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8516  00108C  22DA               	addwfc	fsr2h,f,c
  8517  00108E  0E80               	movlw	128
  8518  001090  6EDF               	movwf	indf2,c
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;ff.c: 2333:  if (fmt == 3
  8522  001092  0E03               	movlw	3
  8523  001094  1997               	xorwf	find_volume@fmt& (0+255),w,b
  8524  001096  A4D8               	btfss	status,2,c
  8525  001098  D083               	goto	l6098
  8526                           
  8527                           ; BSR set to: 0
  8528  00109A  EE20 F05E          	lfsr	2,94
  8529  00109E  5198               	movf	find_volume@fs& (0+255),w,b
  8530  0010A0  26D9               	addwf	fsr2l,f,c
  8531  0010A2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8532  0010A4  22DA               	addwfc	fsr2h,f,c
  8533  0010A6  04DE               	decf	postinc2,w,c
  8534  0010A8  10DE               	iorwf	postinc2,w,c
  8535  0010AA  A4D8               	btfss	status,2,c
  8536  0010AC  D079               	goto	l6098
  8537                           
  8538                           ; BSR set to: 0
  8539  0010AE  C098  F030         	movff	find_volume@fs,move_window@fs
  8540  0010B2  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  8541  0010B6  0E01               	movlw	1
  8542  0010B8  2591               	addwf	find_volume@bsect& (0+255),w,b
  8543  0010BA  6E32               	movwf	move_window@sector,c
  8544  0010BC  0E00               	movlw	0
  8545  0010BE  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  8546  0010C0  6E33               	movwf	move_window@sector+1,c
  8547  0010C2  0E00               	movlw	0
  8548  0010C4  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  8549  0010C6  6E34               	movwf	move_window@sector+2,c
  8550  0010C8  0E00               	movlw	0
  8551  0010CA  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  8552  0010CC  6E35               	movwf	move_window@sector+3,c
  8553  0010CE  ECD8  F02A         	call	_move_window	;wreg free
  8554  0010D2  0900               	iorlw	0
  8555  0010D4  A4D8               	btfss	status,2,c
  8556  0010D6  D064               	goto	l6098
  8557                           
  8558                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  8559  0010D8  0100               	movlb	0	; () banked
  8560  0010DA  EE20 F005          	lfsr	2,5
  8561  0010DE  5198               	movf	find_volume@fs& (0+255),w,b
  8562  0010E0  26D9               	addwf	fsr2l,f,c
  8563  0010E2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8564  0010E4  22DA               	addwfc	fsr2h,f,c
  8565  0010E6  0E00               	movlw	0
  8566  0010E8  6EDF               	movwf	indf2,c
  8567                           
  8568                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  8569  0010EA  EE22 F02C          	lfsr	2,556
  8570  0010EE  5198               	movf	find_volume@fs& (0+255),w,b
  8571  0010F0  26D9               	addwf	fsr2l,f,c
  8572  0010F2  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8573  0010F4  22DA               	addwfc	fsr2h,f,c
  8574  0010F6  0E55               	movlw	85
  8575  0010F8  18DE               	xorwf	postinc2,w,c
  8576  0010FA  E152               	bnz	l6098
  8577  0010FC  0EAA               	movlw	170
  8578  0010FE  18DE               	xorwf	postinc2,w,c
  8579  001100  A4D8               	btfss	status,2,c
  8580  001102  D04E               	goto	l6098
  8581                           
  8582                           ; BSR set to: 0
  8583  001104  EE20 F02E          	lfsr	2,46
  8584  001108  5198               	movf	find_volume@fs& (0+255),w,b
  8585  00110A  26D9               	addwf	fsr2l,f,c
  8586  00110C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8587  00110E  22DA               	addwfc	fsr2h,f,c
  8588  001110  0E52               	movlw	82
  8589  001112  18DE               	xorwf	postinc2,w,c
  8590  001114  E145               	bnz	l6098
  8591  001116  0E52               	movlw	82
  8592  001118  18DE               	xorwf	postinc2,w,c
  8593  00111A  E142               	bnz	l6098
  8594  00111C  0E61               	movlw	97
  8595  00111E  18DE               	xorwf	postinc2,w,c
  8596  001120  E13F               	bnz	l6098
  8597  001122  0E41               	movlw	65
  8598  001124  18DE               	xorwf	postinc2,w,c
  8599  001126  A4D8               	btfss	status,2,c
  8600  001128  D03B               	goto	l6098
  8601                           
  8602                           ; BSR set to: 0
  8603  00112A  EE22 F012          	lfsr	2,530
  8604  00112E  5198               	movf	find_volume@fs& (0+255),w,b
  8605  001130  26D9               	addwf	fsr2l,f,c
  8606  001132  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8607  001134  22DA               	addwfc	fsr2h,f,c
  8608  001136  0E72               	movlw	114
  8609  001138  18DE               	xorwf	postinc2,w,c
  8610  00113A  E132               	bnz	l6098
  8611  00113C  0E72               	movlw	114
  8612  00113E  18DE               	xorwf	postinc2,w,c
  8613  001140  E12F               	bnz	l6098
  8614  001142  0E41               	movlw	65
  8615  001144  18DE               	xorwf	postinc2,w,c
  8616  001146  E12C               	bnz	l6098
  8617  001148  0E61               	movlw	97
  8618  00114A  18DE               	xorwf	postinc2,w,c
  8619  00114C  A4D8               	btfss	status,2,c
  8620  00114E  D028               	goto	l6098
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  8624  001150  EE22 F016          	lfsr	2,534
  8625  001154  5198               	movf	find_volume@fs& (0+255),w,b
  8626  001156  26D9               	addwf	fsr2l,f,c
  8627  001158  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8628  00115A  22DA               	addwfc	fsr2h,f,c
  8629  00115C  EE10 F00E          	lfsr	1,14
  8630  001160  5198               	movf	find_volume@fs& (0+255),w,b
  8631  001162  26E1               	addwf	fsr1l,f,c
  8632  001164  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8633  001166  22E2               	addwfc	fsr1h,f,c
  8634  001168  CFDE FFE6          	movff	postinc2,postinc1
  8635  00116C  CFDE FFE6          	movff	postinc2,postinc1
  8636  001170  CFDE FFE6          	movff	postinc2,postinc1
  8637  001174  CFDE FFE6          	movff	postinc2,postinc1
  8638                           
  8639                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  8640  001178  EE22 F01A          	lfsr	2,538
  8641  00117C  5198               	movf	find_volume@fs& (0+255),w,b
  8642  00117E  26D9               	addwf	fsr2l,f,c
  8643  001180  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8644  001182  22DA               	addwfc	fsr2h,f,c
  8645  001184  EE10 F00A          	lfsr	1,10
  8646  001188  5198               	movf	find_volume@fs& (0+255),w,b
  8647  00118A  26E1               	addwf	fsr1l,f,c
  8648  00118C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8649  00118E  22E2               	addwfc	fsr1h,f,c
  8650  001190  CFDE FFE6          	movff	postinc2,postinc1
  8651  001194  CFDE FFE6          	movff	postinc2,postinc1
  8652  001198  CFDE FFE6          	movff	postinc2,postinc1
  8653  00119C  CFDE FFE6          	movff	postinc2,postinc1
  8654  0011A0                     l6098:
  8655                           
  8656                           ;ff.c: 2352:  fs->fs_type = fmt;
  8657  0011A0  C098  FFD9         	movff	find_volume@fs,fsr2l
  8658  0011A4  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  8659  0011A8  C097  FFDF         	movff	find_volume@fmt,indf2
  8660                           
  8661                           ;ff.c: 2353:  fs->id = ++Fsid;
  8662  0011AC  0100               	movlb	0	; () banked
  8663  0011AE  4BDA               	infsnz	_Fsid& (0+255),f,b
  8664  0011B0  2BDB               	incf	(_Fsid+1)& (0+255),f,b
  8665  0011B2  EE20 F006          	lfsr	2,6
  8666  0011B6  5198               	movf	find_volume@fs& (0+255),w,b
  8667  0011B8  26D9               	addwf	fsr2l,f,c
  8668  0011BA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  8669  0011BC  22DA               	addwfc	fsr2h,f,c
  8670  0011BE  C0DA  FFDE         	movff	_Fsid,postinc2
  8671  0011C2  C0DB  FFDD         	movff	_Fsid+1,postdec2
  8672  0011C6  EF5A  F004         	goto	l5878
  8673  0011CA                     __end_of_find_volume:
  8674                           	opt callstack 0
  8675                           
  8676 ;; *************** function _get_ldnumber *****************
  8677 ;; Defined at:
  8678 ;;		line 2114 in file "ff.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  8681 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  8684 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  8685 ;;  i               2   10[COMRAM] unsigned short 
  8686 ;;  vol             2    8[COMRAM] int 
  8687 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  8688 ;;		 -> STR_5(11), STR_4(1), STR_3(1), 
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  2    0[COMRAM] int 
  8691 ;; Registers used:
  8692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8698 ;;      Params:         2       0       0       0       0       0       0       0       0
  8699 ;;      Locals:        10       0       0       0       0       0       0       0       0
  8700 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8701 ;;      Totals:        14       0       0       0       0       0       0       0       0
  8702 ;;Total ram usage:       14 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; This function calls:
  8705 ;;		Nothing
  8706 ;; This function is called by:
  8707 ;;		_find_volume
  8708 ;;		_f_mount
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           	psect	text23
  8713  00502C                     __ptext23:
  8714                           	opt callstack 0
  8715  00502C                     _get_ldnumber:
  8716                           	opt callstack 27
  8717                           
  8718                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;incstack = 0
  8722  00502C  6809               	setf	get_ldnumber@vol,c
  8723  00502E  680A               	setf	get_ldnumber@vol+1,c
  8724                           
  8725                           ;ff.c: 2129:  if (*path) {
  8726  005030  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8727  005034  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8728  005038  50DE               	movf	postinc2,w,c
  8729  00503A  10DE               	iorwf	postinc2,w,c
  8730  00503C  B4D8               	btfsc	status,2,c
  8731  00503E  D05B               	goto	l5654
  8732                           
  8733                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  8734  005040  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8735  005044  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8736  005048  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  8737  00504C  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  8738  005050  D002               	goto	l5628
  8739  005052                     l5626:
  8740  005052  4A0D               	infsnz	get_ldnumber@tt,f,c
  8741  005054  2A0E               	incf	get_ldnumber@tt+1,f,c
  8742  005056                     l5628:
  8743  005056  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8744  00505A  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8745  00505E                     	if	0	;tblptru may be non-zero
  8746  00505E                     	endif
  8747  00505E                     	if	0	;tblptru may be non-zero
  8748  00505E                     	endif
  8749  00505E  0E20               	movlw	32
  8750  005060  0008               	tblrd		*
  8751  005062  64F5               	cpfsgt	tablat,c
  8752  005064  D009               	goto	u7360
  8753  005066  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8754  00506A  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8755  00506E                     	if	0	;tblptru may be non-zero
  8756  00506E                     	endif
  8757  00506E                     	if	0	;tblptru may be non-zero
  8758  00506E                     	endif
  8759  00506E  0008               	tblrd		*
  8760  005070  50F5               	movf	tablat,w,c
  8761  005072  0A3A               	xorlw	58
  8762  005074  A4D8               	btfss	status,2,c
  8763  005076  D7ED               	goto	l5626
  8764  005078                     u7360:
  8765                           
  8766                           ;ff.c: 2131:   if (*tt == ':') {
  8767  005078  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  8768  00507C  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  8769  005080                     	if	0	;tblptru may be non-zero
  8770  005080                     	endif
  8771  005080                     	if	0	;tblptru may be non-zero
  8772  005080                     	endif
  8773  005080  0008               	tblrd		*
  8774  005082  50F5               	movf	tablat,w,c
  8775  005084  0A3A               	xorlw	58
  8776  005086  A4D8               	btfss	status,2,c
  8777  005088  D03B               	goto	l5658
  8778                           
  8779                           ;ff.c: 2132:    tp = *path;
  8780  00508A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8781  00508E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8782  005092  CFDE F007          	movff	postinc2,get_ldnumber@tp
  8783  005096  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  8784                           
  8785                           ;ff.c: 2133:    i = *tp++ - '0';
  8786  00509A  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  8787  00509E  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  8788  0050A2                     	if	0	;tblptru may be non-zero
  8789  0050A2                     	endif
  8790  0050A2                     	if	0	;tblptru may be non-zero
  8791  0050A2                     	endif
  8792  0050A2  0008               	tblrd		*
  8793  0050A4  CFF5 F003          	movff	tablat,??_get_ldnumber
  8794  0050A8  0ED0               	movlw	208
  8795  0050AA  2403               	addwf	??_get_ldnumber,w,c
  8796  0050AC  6E0B               	movwf	get_ldnumber@i,c
  8797  0050AE  6A0C               	clrf	get_ldnumber@i+1,c
  8798  0050B0  0EFF               	movlw	255
  8799  0050B2  220C               	addwfc	get_ldnumber@i+1,f,c
  8800  0050B4  4A07               	infsnz	get_ldnumber@tp,f,c
  8801  0050B6  2A08               	incf	get_ldnumber@tp+1,f,c
  8802                           
  8803                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  8804  0050B8  500C               	movf	get_ldnumber@i+1,w,c
  8805  0050BA  E11D               	bnz	l5654
  8806  0050BC  0E0A               	movlw	10
  8807  0050BE  5C0B               	subwf	get_ldnumber@i,w,c
  8808  0050C0  B0D8               	btfsc	status,0,c
  8809  0050C2  D019               	goto	l5654
  8810  0050C4  500D               	movf	get_ldnumber@tt,w,c
  8811  0050C6  1807               	xorwf	get_ldnumber@tp,w,c
  8812  0050C8  E116               	bnz	l5654
  8813  0050CA  500E               	movf	get_ldnumber@tt+1,w,c
  8814  0050CC  1808               	xorwf	get_ldnumber@tp+1,w,c
  8815  0050CE  A4D8               	btfss	status,2,c
  8816  0050D0  D012               	goto	l5654
  8817                           
  8818                           ;ff.c: 2135:     if (i < 1) {
  8819  0050D2  500B               	movf	get_ldnumber@i,w,c
  8820  0050D4  100C               	iorwf	get_ldnumber@i+1,w,c
  8821  0050D6  A4D8               	btfss	status,2,c
  8822  0050D8  D00E               	goto	l5654
  8823                           
  8824                           ;ff.c: 2136:      vol = (int)i;
  8825  0050DA  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  8826  0050DE  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  8827                           
  8828                           ;ff.c: 2137:      *path = ++tt;
  8829  0050E2  4A0D               	infsnz	get_ldnumber@tt,f,c
  8830  0050E4  2A0E               	incf	get_ldnumber@tt+1,f,c
  8831  0050E6  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  8832  0050EA  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  8833  0050EE  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  8834  0050F2  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  8835  0050F6                     l5654:
  8836                           
  8837                           ;ff.c: 2156:    return vol;
  8838  0050F6  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  8839  0050FA  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  8840  0050FE  0012               	return	
  8841  005100                     l5658:
  8842                           
  8843                           ;ff.c: 2161:   vol = 0;
  8844  005100  0E00               	movlw	0
  8845  005102  6E0A               	movwf	get_ldnumber@vol+1,c
  8846  005104  0E00               	movlw	0
  8847  005106  6E09               	movwf	get_ldnumber@vol,c
  8848  005108  D7F6               	goto	l5654
  8849  00510A                     __end_of_get_ldnumber:
  8850                           	opt callstack 0
  8851                           
  8852 ;; *************** function _disk_initialize *****************
  8853 ;; Defined at:
  8854 ;;		line 296 in file "diskio.c"
  8855 ;; Parameters:    Size  Location     Type
  8856 ;;  pdrv            1    wreg     unsigned char 
  8857 ;; Auto vars:     Size  Location     Type
  8858 ;;  pdrv            1   17[COMRAM] unsigned char 
  8859 ;;  ocr             4   18[COMRAM] unsigned char [4]
  8860 ;;  tmr             2   26[COMRAM] unsigned short 
  8861 ;;  n               1   28[COMRAM] unsigned char 
  8862 ;;  ty              1   25[COMRAM] unsigned char 
  8863 ;;  cmd             1   24[COMRAM] unsigned char 
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  1    wreg      unsigned char 
  8866 ;; Registers used:
  8867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8873 ;;      Params:         0       0       0       0       0       0       0       0       0
  8874 ;;      Locals:        12       0       0       0       0       0       0       0       0
  8875 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8876 ;;      Totals:        13       0       0       0       0       0       0       0       0
  8877 ;;Total ram usage:       13 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    5
  8880 ;; This function calls:
  8881 ;;		_SPI1_Exchange8bit
  8882 ;;		_SPI1_Initialize
  8883 ;;		_SPI1_Open
  8884 ;;		_deselect
  8885 ;;		_send_cmd
  8886 ;; This function is called by:
  8887 ;;		_find_volume
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           	psect	text24
  8892  00415C                     __ptext24:
  8893                           	opt callstack 0
  8894  00415C                     _disk_initialize:
  8895                           	opt callstack 22
  8896                           
  8897                           ;incstack = 0
  8898                           ;disk_initialize@pdrv stored from wreg
  8899  00415C  6E12               	movwf	disk_initialize@pdrv,c
  8900                           
  8901                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  8902  00415E  5012               	movf	disk_initialize@pdrv,w,c
  8903  004160  B4D8               	btfsc	status,2,c
  8904  004162  D002               	goto	l70
  8905  004164  0E01               	movlw	1
  8906  004166  0012               	return	
  8907  004168                     l70:
  8908                           
  8909                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  8910  004168  0100               	movlb	0	; () banked
  8911  00416A  A3F1               	btfss	_Stat& (0+255),1,b
  8912  00416C  D003               	goto	l5258
  8913  00416E                     u6650:
  8914  00416E  0100               	movlb	0	; () banked
  8915  004170  51F1               	movf	_Stat& (0+255),w,b
  8916  004172  0012               	return	
  8917  004174                     l5258:
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;diskio.c: 308:  SPI1_Initialize();
  8921  004174  ECB2  F02E         	call	_SPI1_Initialize	;wreg free
  8922                           
  8923                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  8924  004178  0E0A               	movlw	10
  8925  00417A  6E1D               	movwf	disk_initialize@n,c
  8926  00417C  D004               	goto	l5266
  8927  00417E                     l5262:
  8928  00417E  0EFF               	movlw	255
  8929  004180  EC8C  F02E         	call	_SPI1_Exchange8bit
  8930  004184  061D               	decf	disk_initialize@n,f,c
  8931  004186                     l5266:
  8932  004186  501D               	movf	disk_initialize@n,w,c
  8933  004188  A4D8               	btfss	status,2,c
  8934  00418A  D7F9               	goto	l5262
  8935                           
  8936                           ;diskio.c: 311:  ty = 0;
  8937  00418C  0E00               	movlw	0
  8938  00418E  6E1A               	movwf	disk_initialize@ty,c
  8939                           
  8940                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  8941  004190  0E00               	movlw	0
  8942  004192  6E0B               	movwf	send_cmd@arg,c
  8943  004194  0E00               	movlw	0
  8944  004196  6E0C               	movwf	send_cmd@arg+1,c
  8945  004198  0E00               	movlw	0
  8946  00419A  6E0D               	movwf	send_cmd@arg+2,c
  8947  00419C  0E00               	movlw	0
  8948  00419E  6E0E               	movwf	send_cmd@arg+3,c
  8949  0041A0  0E00               	movlw	0
  8950  0041A2  ECAE  F02D         	call	_send_cmd
  8951  0041A6  06E8               	decf	wreg,f,c
  8952  0041A8  A4D8               	btfss	status,2,c
  8953  0041AA  D0C1               	goto	l92
  8954                           
  8955                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  8956  0041AC  0EAA               	movlw	170
  8957  0041AE  6E0B               	movwf	send_cmd@arg,c
  8958  0041B0  0E01               	movlw	1
  8959  0041B2  6E0C               	movwf	send_cmd@arg+1,c
  8960  0041B4  0E00               	movlw	0
  8961  0041B6  6E0D               	movwf	send_cmd@arg+2,c
  8962  0041B8  0E00               	movlw	0
  8963  0041BA  6E0E               	movwf	send_cmd@arg+3,c
  8964  0041BC  0E08               	movlw	8
  8965  0041BE  ECAE  F02D         	call	_send_cmd
  8966  0041C2  06E8               	decf	wreg,f,c
  8967  0041C4  A4D8               	btfss	status,2,c
  8968  0041C6  D067               	goto	l5322
  8969                           
  8970                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  8971  0041C8  0E00               	movlw	0
  8972  0041CA  6E1D               	movwf	disk_initialize@n,c
  8973  0041CC                     l5280:
  8974  0041CC  0E13               	movlw	low disk_initialize@ocr
  8975  0041CE  241D               	addwf	disk_initialize@n,w,c
  8976  0041D0  6ED9               	movwf	fsr2l,c
  8977  0041D2  6ADA               	clrf	fsr2h,c
  8978  0041D4  0E00               	movlw	high disk_initialize@ocr
  8979  0041D6  22DA               	addwfc	fsr2h,f,c
  8980  0041D8  0EFF               	movlw	255
  8981  0041DA  EC8C  F02E         	call	_SPI1_Exchange8bit
  8982  0041DE  6EDF               	movwf	indf2,c
  8983  0041E0  2A1D               	incf	disk_initialize@n,f,c
  8984  0041E2  0E03               	movlw	3
  8985  0041E4  641D               	cpfsgt	disk_initialize@n,c
  8986  0041E6  D7F2               	goto	l5280
  8987                           
  8988                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  8989  0041E8  0415               	decf	disk_initialize@ocr+2,w,c
  8990  0041EA  A4D8               	btfss	status,2,c
  8991  0041EC  D0A0               	goto	l92
  8992  0041EE  0EAA               	movlw	170
  8993  0041F0  1816               	xorwf	disk_initialize@ocr+3,w,c
  8994  0041F2  A4D8               	btfss	status,2,c
  8995  0041F4  D09C               	goto	l92
  8996                           
  8997                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  8998  0041F6  0E03               	movlw	3
  8999  0041F8  6E1C               	movwf	disk_initialize@tmr+1,c
  9000  0041FA  0EE8               	movlw	232
  9001  0041FC  6E1B               	movwf	disk_initialize@tmr,c
  9002  0041FE  D018               	goto	l81
  9003  004200                     l5292:
  9004                           
  9005                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  9006  004200  0E00               	movlw	0
  9007  004202  6E0B               	movwf	send_cmd@arg,c
  9008  004204  0E00               	movlw	0
  9009  004206  6E0C               	movwf	send_cmd@arg+1,c
  9010  004208  0E00               	movlw	0
  9011  00420A  6E0D               	movwf	send_cmd@arg+2,c
  9012  00420C  0E40               	movlw	64
  9013  00420E  6E0E               	movwf	send_cmd@arg+3,c
  9014  004210  0EA9               	movlw	169
  9015  004212  ECAE  F02D         	call	_send_cmd
  9016  004216  0900               	iorlw	0
  9017  004218  B4D8               	btfsc	status,2,c
  9018  00421A  D00E               	goto	u6730
  9019                           
  9020                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  9021  00421C  0E03               	movlw	3
  9022  00421E  6E11               	movwf	??_disk_initialize& (0+255),c
  9023  004220  0E98               	movlw	152
  9024  004222                     u9927:
  9025  004222  2EE8               	decfsz	wreg,f,c
  9026  004224  D7FE               	bra	u9927
  9027  004226  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9028  004228  D7FC               	bra	u9927
  9029                           
  9030                           ;diskio.c: 319:     }
  9031  00422A  061B               	decf	disk_initialize@tmr,f,c
  9032  00422C  A0D8               	btfss	status,0,c
  9033  00422E  061C               	decf	disk_initialize@tmr+1,f,c
  9034  004230                     l81:
  9035  004230  501B               	movf	disk_initialize@tmr,w,c
  9036  004232  101C               	iorwf	disk_initialize@tmr+1,w,c
  9037  004234  A4D8               	btfss	status,2,c
  9038  004236  D7E4               	goto	l5292
  9039  004238                     u6730:
  9040                           
  9041                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  9042  004238  501B               	movf	disk_initialize@tmr,w,c
  9043  00423A  101C               	iorwf	disk_initialize@tmr+1,w,c
  9044  00423C  B4D8               	btfsc	status,2,c
  9045  00423E  D077               	goto	l92
  9046  004240  0E00               	movlw	0
  9047  004242  6E0B               	movwf	send_cmd@arg,c
  9048  004244  0E00               	movlw	0
  9049  004246  6E0C               	movwf	send_cmd@arg+1,c
  9050  004248  0E00               	movlw	0
  9051  00424A  6E0D               	movwf	send_cmd@arg+2,c
  9052  00424C  0E00               	movlw	0
  9053  00424E  6E0E               	movwf	send_cmd@arg+3,c
  9054  004250  0E3A               	movlw	58
  9055  004252  ECAE  F02D         	call	_send_cmd
  9056  004256  0900               	iorlw	0
  9057  004258  A4D8               	btfss	status,2,c
  9058  00425A  D069               	goto	l92
  9059                           
  9060                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  9061  00425C  0E00               	movlw	0
  9062  00425E  6E1D               	movwf	disk_initialize@n,c
  9063  004260                     l5310:
  9064  004260  0E13               	movlw	low disk_initialize@ocr
  9065  004262  241D               	addwf	disk_initialize@n,w,c
  9066  004264  6ED9               	movwf	fsr2l,c
  9067  004266  6ADA               	clrf	fsr2h,c
  9068  004268  0E00               	movlw	high disk_initialize@ocr
  9069  00426A  22DA               	addwfc	fsr2h,f,c
  9070  00426C  0EFF               	movlw	255
  9071  00426E  EC8C  F02E         	call	_SPI1_Exchange8bit
  9072  004272  6EDF               	movwf	indf2,c
  9073  004274  2A1D               	incf	disk_initialize@n,f,c
  9074  004276  0E03               	movlw	3
  9075  004278  641D               	cpfsgt	disk_initialize@n,c
  9076  00427A  D7F2               	goto	l5310
  9077                           
  9078                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  9079  00427C  BC13               	btfsc	disk_initialize@ocr,6,c
  9080  00427E  D004               	goto	l5318
  9081  004280  0E00               	movlw	0
  9082  004282  6E18               	movwf	_disk_initialize$134+1,c
  9083  004284  0E04               	movlw	4
  9084  004286  D003               	goto	L10
  9085  004288                     l5318:
  9086  004288  0E00               	movlw	0
  9087  00428A  6E18               	movwf	_disk_initialize$134+1,c
  9088  00428C  0E0C               	movlw	12
  9089  00428E                     L10:
  9090  00428E  6E17               	movwf	_disk_initialize$134,c
  9091  004290  C017  F01A         	movff	_disk_initialize$134,disk_initialize@ty
  9092  004294  D04C               	goto	l92
  9093  004296                     l5322:
  9094                           
  9095                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  9096  004296  0E00               	movlw	0
  9097  004298  6E0B               	movwf	send_cmd@arg,c
  9098  00429A  0E00               	movlw	0
  9099  00429C  6E0C               	movwf	send_cmd@arg+1,c
  9100  00429E  0E00               	movlw	0
  9101  0042A0  6E0D               	movwf	send_cmd@arg+2,c
  9102  0042A2  0E00               	movlw	0
  9103  0042A4  6E0E               	movwf	send_cmd@arg+3,c
  9104  0042A6  0EA9               	movlw	169
  9105  0042A8  ECAE  F02D         	call	_send_cmd
  9106  0042AC  6E11               	movwf	??_disk_initialize& (0+255),c
  9107  0042AE  0E02               	movlw	2
  9108  0042B0  6011               	cpfslt	??_disk_initialize,c
  9109  0042B2  D004               	goto	l5326
  9110                           
  9111                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  9112  0042B4  0E02               	movlw	2
  9113  0042B6  6E1A               	movwf	disk_initialize@ty,c
  9114  0042B8  0EA9               	movlw	169
  9115  0042BA  D003               	goto	L11
  9116  0042BC                     l5326:
  9117                           
  9118                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  9119  0042BC  0E01               	movlw	1
  9120  0042BE  6E1A               	movwf	disk_initialize@ty,c
  9121  0042C0  0E01               	movlw	1
  9122  0042C2                     L11:
  9123  0042C2  6E19               	movwf	disk_initialize@cmd,c
  9124                           
  9125                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  9126                           
  9127                           ;diskio.c: 330:    }
  9128  0042C4  0E03               	movlw	3
  9129  0042C6  6E1C               	movwf	disk_initialize@tmr+1,c
  9130  0042C8  0EE8               	movlw	232
  9131  0042CA  6E1B               	movwf	disk_initialize@tmr,c
  9132  0042CC  D018               	goto	l95
  9133  0042CE                     l5328:
  9134                           
  9135                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  9136  0042CE  0E00               	movlw	0
  9137  0042D0  6E0B               	movwf	send_cmd@arg,c
  9138  0042D2  0E00               	movlw	0
  9139  0042D4  6E0C               	movwf	send_cmd@arg+1,c
  9140  0042D6  0E00               	movlw	0
  9141  0042D8  6E0D               	movwf	send_cmd@arg+2,c
  9142  0042DA  0E00               	movlw	0
  9143  0042DC  6E0E               	movwf	send_cmd@arg+3,c
  9144  0042DE  5019               	movf	disk_initialize@cmd,w,c
  9145  0042E0  ECAE  F02D         	call	_send_cmd
  9146  0042E4  0900               	iorlw	0
  9147  0042E6  B4D8               	btfsc	status,2,c
  9148  0042E8  D00E               	goto	u6800
  9149                           
  9150                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  9151  0042EA  0E03               	movlw	3
  9152  0042EC  6E11               	movwf	??_disk_initialize& (0+255),c
  9153  0042EE  0E98               	movlw	152
  9154  0042F0                     u9937:
  9155  0042F0  2EE8               	decfsz	wreg,f,c
  9156  0042F2  D7FE               	bra	u9937
  9157  0042F4  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  9158  0042F6  D7FC               	bra	u9937
  9159                           
  9160                           ;diskio.c: 334:    }
  9161  0042F8  061B               	decf	disk_initialize@tmr,f,c
  9162  0042FA  A0D8               	btfss	status,0,c
  9163  0042FC  061C               	decf	disk_initialize@tmr+1,f,c
  9164  0042FE                     l95:
  9165  0042FE  501B               	movf	disk_initialize@tmr,w,c
  9166  004300  101C               	iorwf	disk_initialize@tmr+1,w,c
  9167  004302  A4D8               	btfss	status,2,c
  9168  004304  D7E4               	goto	l5328
  9169  004306                     u6800:
  9170                           
  9171                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  9172  004306  501B               	movf	disk_initialize@tmr,w,c
  9173  004308  101C               	iorwf	disk_initialize@tmr+1,w,c
  9174  00430A  B4D8               	btfsc	status,2,c
  9175  00430C  D00E               	goto	u6820
  9176  00430E  0E00               	movlw	0
  9177  004310  6E0B               	movwf	send_cmd@arg,c
  9178  004312  0E02               	movlw	2
  9179  004314  6E0C               	movwf	send_cmd@arg+1,c
  9180  004316  0E00               	movlw	0
  9181  004318  6E0D               	movwf	send_cmd@arg+2,c
  9182  00431A  0E00               	movlw	0
  9183  00431C  6E0E               	movwf	send_cmd@arg+3,c
  9184  00431E  0E10               	movlw	16
  9185  004320  ECAE  F02D         	call	_send_cmd
  9186  004324  0900               	iorlw	0
  9187  004326  B4D8               	btfsc	status,2,c
  9188  004328  D002               	goto	l92
  9189  00432A                     u6820:
  9190                           
  9191                           ;diskio.c: 336:     ty = 0;
  9192  00432A  0E00               	movlw	0
  9193  00432C  6E1A               	movwf	disk_initialize@ty,c
  9194  00432E                     l92:
  9195                           
  9196                           ;diskio.c: 339:  CardType = ty;
  9197  00432E  C01A  F0DE         	movff	disk_initialize@ty,_CardType
  9198                           
  9199                           ;diskio.c: 340:  deselect();
  9200  004332  ECB9  F02E         	call	_deselect	;wreg free
  9201                           
  9202                           ;diskio.c: 342:  if (ty) {
  9203  004336  501A               	movf	disk_initialize@ty,w,c
  9204  004338  B4D8               	btfsc	status,2,c
  9205  00433A  D719               	goto	u6650
  9206                           
  9207                           ;diskio.c: 343:   Stat &= ~0x01;
  9208  00433C  0100               	movlb	0	; () banked
  9209  00433E  91F1               	bcf	_Stat& (0+255),0,b
  9210                           
  9211                           ; BSR set to: 0
  9212                           ;diskio.c: 344:   SPI1_Open();
  9213  004340  ECA4  F02E         	call	_SPI1_Open	;wreg free
  9214  004344  D714               	goto	u6650
  9215  004346                     __end_of_disk_initialize:
  9216                           	opt callstack 0
  9217                           
  9218 ;; *************** function _SPI1_Open *****************
  9219 ;; Defined at:
  9220 ;;		line 77 in file "mcc_generated_files/spi1.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;		None
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;		None
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  1    wreg      void 
  9227 ;; Registers used:
  9228 ;;		wreg, status,2
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9234 ;;      Params:         0       0       0       0       0       0       0       0       0
  9235 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9237 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9238 ;;Total ram usage:        0 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; This function calls:
  9241 ;;		Nothing
  9242 ;; This function is called by:
  9243 ;;		_disk_initialize
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text25
  9248  005D48                     __ptext25:
  9249                           	opt callstack 0
  9250  005D48                     _SPI1_Open:
  9251                           	opt callstack 26
  9252                           
  9253                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  9254                           
  9255                           ;incstack = 0
  9256  005D48  0E40               	movlw	64
  9257  005D4A  6EC7               	movwf	4039,c	;volatile
  9258                           
  9259                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  9260  005D4C  0E20               	movlw	32
  9261  005D4E  6EC6               	movwf	4038,c	;volatile
  9262                           
  9263                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  9264  005D50  0E00               	movlw	0
  9265  005D52  6EC8               	movwf	4040,c	;volatile
  9266  005D54  0012               	return		;funcret
  9267  005D56                     __end_of_SPI1_Open:
  9268                           	opt callstack 0
  9269                           
  9270 ;; *************** function _check_fs *****************
  9271 ;; Defined at:
  9272 ;;		line 2175 in file "ff.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  fs              2   58[COMRAM] PTR struct .
  9275 ;;		 -> FatFs(558), NULL(0), 
  9276 ;;  sect            4   60[COMRAM] unsigned long 
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;		None
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  1    wreg      unsigned char 
  9281 ;; Registers used:
  9282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9283 ;; Tracked objects:
  9284 ;;		On entry : 0/0
  9285 ;;		On exit  : 0/0
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9288 ;;      Params:         6       0       0       0       0       0       0       0       0
  9289 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9290 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9291 ;;      Totals:        10       0       0       0       0       0       0       0       0
  9292 ;;Total ram usage:       10 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; Hardware stack levels required when called:    8
  9295 ;; This function calls:
  9296 ;;		_move_window
  9297 ;; This function is called by:
  9298 ;;		_find_volume
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           	psect	text26
  9303  004E5C                     __ptext26:
  9304                           	opt callstack 0
  9305  004E5C                     _check_fs:
  9306                           	opt callstack 19
  9307                           
  9308                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  9309                           
  9310                           ;incstack = 0
  9311  004E5C  EE20 F004          	lfsr	2,4
  9312  004E60  503B               	movf	check_fs@fs,w,c
  9313  004E62  26D9               	addwf	fsr2l,f,c
  9314  004E64  503C               	movf	check_fs@fs+1,w,c
  9315  004E66  22DA               	addwfc	fsr2h,f,c
  9316  004E68  0E00               	movlw	0
  9317  004E6A  6EDF               	movwf	indf2,c
  9318  004E6C  EE20 F02A          	lfsr	2,42
  9319  004E70  503B               	movf	check_fs@fs,w,c
  9320  004E72  26D9               	addwf	fsr2l,f,c
  9321  004E74  503C               	movf	check_fs@fs+1,w,c
  9322  004E76  22DA               	addwfc	fsr2h,f,c
  9323  004E78  0EFF               	movlw	255
  9324  004E7A  6EDE               	movwf	postinc2,c
  9325  004E7C  0EFF               	movlw	255
  9326  004E7E  6EDE               	movwf	postinc2,c
  9327  004E80  0EFF               	movlw	255
  9328  004E82  6EDE               	movwf	postinc2,c
  9329  004E84  0EFF               	movlw	255
  9330  004E86  6EDD               	movwf	postdec2,c
  9331                           
  9332                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  9333  004E88  C03B  F030         	movff	check_fs@fs,move_window@fs
  9334  004E8C  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  9335  004E90  C03D  F032         	movff	check_fs@sect,move_window@sector
  9336  004E94  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  9337  004E98  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  9338  004E9C  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  9339  004EA0  ECD8  F02A         	call	_move_window	;wreg free
  9340  004EA4  0900               	iorlw	0
  9341  004EA6  B4D8               	btfsc	status,2,c
  9342  004EA8  D002               	goto	l5672
  9343                           
  9344                           ;ff.c: 2182:   return 3;
  9345  004EAA  0E03               	movlw	3
  9346  004EAC  0012               	return	
  9347  004EAE                     l5672:
  9348                           
  9349                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  9350  004EAE  EE22 F02C          	lfsr	2,556
  9351  004EB2  503B               	movf	check_fs@fs,w,c
  9352  004EB4  26D9               	addwf	fsr2l,f,c
  9353  004EB6  503C               	movf	check_fs@fs+1,w,c
  9354  004EB8  22DA               	addwfc	fsr2h,f,c
  9355  004EBA  0E55               	movlw	85
  9356  004EBC  18DE               	xorwf	postinc2,w,c
  9357  004EBE  E104               	bnz	u7420
  9358  004EC0  0EAA               	movlw	170
  9359  004EC2  18DE               	xorwf	postinc2,w,c
  9360  004EC4  B4D8               	btfsc	status,2,c
  9361  004EC6  D002               	goto	l5678
  9362  004EC8                     u7420:
  9363                           
  9364                           ;ff.c: 2185:   return 2;
  9365  004EC8  0E02               	movlw	2
  9366  004ECA  0012               	return	
  9367  004ECC                     l5678:
  9368                           
  9369                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  9370  004ECC  EE20 F064          	lfsr	2,100
  9371  004ED0  503B               	movf	check_fs@fs,w,c
  9372  004ED2  26D9               	addwf	fsr2l,f,c
  9373  004ED4  503C               	movf	check_fs@fs+1,w,c
  9374  004ED6  22DA               	addwfc	fsr2h,f,c
  9375  004ED8  0EFF               	movlw	255
  9376  004EDA  14DE               	andwf	postinc2,w,c
  9377  004EDC  6E41               	movwf	??_check_fs& (0+255),c
  9378  004EDE  0EFF               	movlw	255
  9379  004EE0  14DE               	andwf	postinc2,w,c
  9380  004EE2  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9381  004EE4  0EFF               	movlw	255
  9382  004EE6  14DE               	andwf	postinc2,w,c
  9383  004EE8  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9384  004EEA  0E00               	movlw	0
  9385  004EEC  14DE               	andwf	postinc2,w,c
  9386  004EEE  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9387  004EF0  0E46               	movlw	70
  9388  004EF2  1841               	xorwf	??_check_fs,w,c
  9389  004EF4  E10A               	bnz	l5684
  9390  004EF6  0E41               	movlw	65
  9391  004EF8  1842               	xorwf	??_check_fs+1,w,c
  9392  004EFA  E107               	bnz	l5684
  9393  004EFC  0E54               	movlw	84
  9394  004EFE  1843               	xorwf	??_check_fs+2,w,c
  9395  004F00  1044               	iorwf	??_check_fs+3,w,c
  9396  004F02  A4D8               	btfss	status,2,c
  9397  004F04  D002               	goto	l5684
  9398  004F06                     u7430:
  9399                           
  9400                           ;ff.c: 2188:   return 0;
  9401  004F06  0E00               	movlw	0
  9402  004F08  0012               	return	
  9403  004F0A                     l5684:
  9404                           
  9405                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  9406  004F0A  EE20 F080          	lfsr	2,128
  9407  004F0E  503B               	movf	check_fs@fs,w,c
  9408  004F10  26D9               	addwf	fsr2l,f,c
  9409  004F12  503C               	movf	check_fs@fs+1,w,c
  9410  004F14  22DA               	addwfc	fsr2h,f,c
  9411  004F16  0EFF               	movlw	255
  9412  004F18  14DE               	andwf	postinc2,w,c
  9413  004F1A  6E41               	movwf	??_check_fs& (0+255),c
  9414  004F1C  0EFF               	movlw	255
  9415  004F1E  14DE               	andwf	postinc2,w,c
  9416  004F20  6E42               	movwf	(??_check_fs+1)& (0+255),c
  9417  004F22  0EFF               	movlw	255
  9418  004F24  14DE               	andwf	postinc2,w,c
  9419  004F26  6E43               	movwf	(??_check_fs+2)& (0+255),c
  9420  004F28  0E00               	movlw	0
  9421  004F2A  14DE               	andwf	postinc2,w,c
  9422  004F2C  6E44               	movwf	(??_check_fs+3)& (0+255),c
  9423  004F2E  0E46               	movlw	70
  9424  004F30  1841               	xorwf	??_check_fs,w,c
  9425  004F32  E108               	bnz	l5690
  9426  004F34  0E41               	movlw	65
  9427  004F36  1842               	xorwf	??_check_fs+1,w,c
  9428  004F38  E105               	bnz	l5690
  9429  004F3A  0E54               	movlw	84
  9430  004F3C  1843               	xorwf	??_check_fs+2,w,c
  9431  004F3E  1044               	iorwf	??_check_fs+3,w,c
  9432  004F40  B4D8               	btfsc	status,2,c
  9433  004F42  D7E1               	goto	u7430
  9434  004F44                     l5690:
  9435                           
  9436                           ;ff.c: 2192:  return 1;
  9437  004F44  0E01               	movlw	1
  9438  004F46  0012               	return		;funcret
  9439  004F48                     __end_of_check_fs:
  9440                           	opt callstack 0
  9441                           
  9442 ;; *************** function _f_lseek *****************
  9443 ;; Defined at:
  9444 ;;		line 3033 in file "ff.c"
  9445 ;; Parameters:    Size  Location     Type
  9446 ;;  fp              2   13[BANK0 ] PTR struct .
  9447 ;;		 -> Fil(32), 
  9448 ;;  ofs             4   15[BANK0 ] unsigned long 
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;  clst            4   48[BANK0 ] unsigned long 
  9451 ;;  bcs             4   44[BANK0 ] unsigned long 
  9452 ;;  nsect           4   40[BANK0 ] unsigned long 
  9453 ;;  ifptr           4   35[BANK0 ] unsigned long 
  9454 ;;  res             1   39[BANK0 ] enum E93
  9455 ;; Return value:  Size  Location     Type
  9456 ;;                  1    wreg      enum E93
  9457 ;; Registers used:
  9458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9459 ;; Tracked objects:
  9460 ;;		On entry : 0/0
  9461 ;;		On exit  : 0/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9464 ;;      Params:         0       6       0       0       0       0       0       0       0
  9465 ;;      Locals:         0      17       0       0       0       0       0       0       0
  9466 ;;      Temps:          0      16       0       0       0       0       0       0       0
  9467 ;;      Totals:         0      39       0       0       0       0       0       0       0
  9468 ;;Total ram usage:       39 bytes
  9469 ;; Hardware stack levels used:    1
  9470 ;; Hardware stack levels required when called:   10
  9471 ;; This function calls:
  9472 ;;		___lldiv
  9473 ;;		_clust2sect
  9474 ;;		_create_chain
  9475 ;;		_get_fat
  9476 ;;		_validate
  9477 ;; This function is called by:
  9478 ;;		_guardar
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text27
  9483  00192E                     __ptext27:
  9484                           	opt callstack 0
  9485  00192E                     _f_lseek:
  9486                           	opt callstack 19
  9487                           
  9488                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  9489                           
  9490                           ;incstack = 0
  9491  00192E  C06D  F002         	movff	f_lseek@fp,validate@obj
  9492  001932  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  9493  001936  EC2B  F02B         	call	_validate	;wreg free
  9494  00193A  0100               	movlb	0	; () banked
  9495  00193C  6F87               	movwf	f_lseek@res& (0+255),b
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;ff.c: 3046:  if (res != FR_OK) return res;
  9499  00193E  5187               	movf	f_lseek@res& (0+255),w,b
  9500  001940  B4D8               	btfsc	status,2,c
  9501  001942  D002               	goto	l6776
  9502  001944                     u9290:
  9503                           
  9504                           ; BSR set to: 0
  9505  001944  5187               	movf	f_lseek@res& (0+255),w,b
  9506  001946  0012               	return	
  9507  001948                     l6776:
  9508                           
  9509                           ; BSR set to: 0
  9510                           ;ff.c: 3047:  if (fp->err)
  9511  001948  EE20 F005          	lfsr	2,5
  9512  00194C  516D               	movf	f_lseek@fp& (0+255),w,b
  9513  00194E  26D9               	addwf	fsr2l,f,c
  9514  001950  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9515  001952  22DA               	addwfc	fsr2h,f,c
  9516  001954  50DF               	movf	indf2,w,c
  9517  001956  B4D8               	btfsc	status,2,c
  9518  001958  D008               	goto	l6782
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;ff.c: 3048:   return (FRESULT)fp->err;
  9522  00195A  EE20 F005          	lfsr	2,5
  9523  00195E  516D               	movf	f_lseek@fp& (0+255),w,b
  9524  001960  26D9               	addwf	fsr2l,f,c
  9525  001962  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9526  001964  22DA               	addwfc	fsr2h,f,c
  9527  001966  50DF               	movf	indf2,w,c
  9528  001968  0012               	return	
  9529  00196A                     l6782:
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  9533  00196A  EE20 F00A          	lfsr	2,10
  9534  00196E  516D               	movf	f_lseek@fp& (0+255),w,b
  9535  001970  26D9               	addwf	fsr2l,f,c
  9536  001972  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9537  001974  22DA               	addwfc	fsr2h,f,c
  9538  001976  516F               	movf	f_lseek@ofs& (0+255),w,b
  9539  001978  5CDE               	subwf	postinc2,w,c
  9540  00197A  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  9541  00197C  58DE               	subwfb	postinc2,w,c
  9542  00197E  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  9543  001980  58DE               	subwfb	postinc2,w,c
  9544  001982  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  9545  001984  58DE               	subwfb	postinc2,w,c
  9546  001986  B0D8               	btfsc	status,0,c
  9547  001988  D016               	goto	l667
  9548                           
  9549                           ; BSR set to: 0
  9550  00198A  EE20 F004          	lfsr	2,4
  9551  00198E  516D               	movf	f_lseek@fp& (0+255),w,b
  9552  001990  26D9               	addwf	fsr2l,f,c
  9553  001992  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9554  001994  22DA               	addwfc	fsr2h,f,c
  9555  001996  B2DF               	btfsc	indf2,1,c
  9556  001998  D00E               	goto	l667
  9557                           
  9558                           ; BSR set to: 0
  9559                           ;ff.c: 3111:    ) ofs = fp->fsize;
  9560  00199A  EE20 F00A          	lfsr	2,10
  9561  00199E  516D               	movf	f_lseek@fp& (0+255),w,b
  9562  0019A0  26D9               	addwf	fsr2l,f,c
  9563  0019A2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9564  0019A4  22DA               	addwfc	fsr2h,f,c
  9565  0019A6  CFDE F06F          	movff	postinc2,f_lseek@ofs
  9566  0019AA  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  9567  0019AE  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  9568  0019B2  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  9569  0019B6                     l667:
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;ff.c: 3113:   ifptr = fp->fptr;
  9573  0019B6  EE20 F006          	lfsr	2,6
  9574  0019BA  516D               	movf	f_lseek@fp& (0+255),w,b
  9575  0019BC  26D9               	addwf	fsr2l,f,c
  9576  0019BE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9577  0019C0  22DA               	addwfc	fsr2h,f,c
  9578  0019C2  CFDE F083          	movff	postinc2,f_lseek@ifptr
  9579  0019C6  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  9580  0019CA  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  9581  0019CE  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  9582                           
  9583                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  9584  0019D2  0E00               	movlw	0
  9585  0019D4  6F88               	movwf	f_lseek@nsect& (0+255),b
  9586  0019D6  0E00               	movlw	0
  9587  0019D8  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  9588  0019DA  0E00               	movlw	0
  9589  0019DC  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  9590  0019DE  0E00               	movlw	0
  9591  0019E0  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  9592  0019E2  EE20 F006          	lfsr	2,6
  9593  0019E6  516D               	movf	f_lseek@fp& (0+255),w,b
  9594  0019E8  26D9               	addwf	fsr2l,f,c
  9595  0019EA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9596  0019EC  22DA               	addwfc	fsr2h,f,c
  9597  0019EE  C088  FFDE         	movff	f_lseek@nsect,postinc2
  9598  0019F2  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  9599  0019F6  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  9600  0019FA  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;ff.c: 3115:   if (ofs) {
  9604  0019FE  516F               	movf	f_lseek@ofs& (0+255),w,b
  9605  001A00  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  9606  001A02  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  9607  001A04  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  9608  001A06  B4D8               	btfsc	status,2,c
  9609  001A08  D22D               	goto	l6876
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  9613  001A0A  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9614  001A0E  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9615  001A12  EE10 F002          	lfsr	1,2
  9616  001A16  50DE               	movf	postinc2,w,c
  9617  001A18  26E1               	addwf	fsr1l,f,c
  9618  001A1A  50DD               	movf	postdec2,w,c
  9619  001A1C  22E2               	addwfc	fsr1h,f,c
  9620  001A1E  50E7               	movf	indf1,w,c
  9621  001A20  6F73               	movwf	??_f_lseek& (0+255),b
  9622  001A22  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  9623  001A26  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  9624  001A28  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  9625  001A2A  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  9626  001A2C  0E09               	movlw	9
  9627  001A2E                     u9345:
  9628  001A2E  90D8               	bcf	status,0,c
  9629  001A30  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  9630  001A32  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  9631  001A34  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  9632  001A36  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  9633  001A38  2EE8               	decfsz	wreg,f,c
  9634  001A3A  D7F9               	goto	u9345
  9635  001A3C  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  9636  001A40  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  9637  001A44  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  9638  001A48  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  9639                           
  9640                           ; BSR set to: 0
  9641                           ;ff.c: 3117:    if (ifptr > 0 &&
  9642  001A4C  5183               	movf	f_lseek@ifptr& (0+255),w,b
  9643  001A4E  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  9644  001A50  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  9645  001A52  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  9646  001A54  B4D8               	btfsc	status,2,c
  9647  001A56  D097               	goto	l6798
  9648                           
  9649                           ; BSR set to: 0
  9650  001A58  0EFF               	movlw	255
  9651  001A5A  256F               	addwf	f_lseek@ofs& (0+255),w,b
  9652  001A5C  6E01               	movwf	___lldiv@dividend,c
  9653  001A5E  0EFF               	movlw	255
  9654  001A60  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  9655  001A62  6E02               	movwf	___lldiv@dividend+1,c
  9656  001A64  0EFF               	movlw	255
  9657  001A66  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  9658  001A68  6E03               	movwf	___lldiv@dividend+2,c
  9659  001A6A  0EFF               	movlw	255
  9660  001A6C  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  9661  001A6E  6E04               	movwf	___lldiv@dividend+3,c
  9662  001A70  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  9663  001A74  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  9664  001A78  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  9665  001A7C  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  9666  001A80  EC75  F02B         	call	___lldiv	;wreg free
  9667  001A84  C001  F073         	movff	?___lldiv,??_f_lseek
  9668  001A88  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  9669  001A8C  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  9670  001A90  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  9671  001A94  0EFF               	movlw	255
  9672  001A96  0100               	movlb	0	; () banked
  9673  001A98  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  9674  001A9A  6E01               	movwf	___lldiv@dividend,c
  9675  001A9C  0EFF               	movlw	255
  9676  001A9E  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  9677  001AA0  6E02               	movwf	___lldiv@dividend+1,c
  9678  001AA2  0EFF               	movlw	255
  9679  001AA4  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  9680  001AA6  6E03               	movwf	___lldiv@dividend+2,c
  9681  001AA8  0EFF               	movlw	255
  9682  001AAA  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  9683  001AAC  6E04               	movwf	___lldiv@dividend+3,c
  9684  001AAE  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  9685  001AB2  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  9686  001AB6  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  9687  001ABA  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  9688  001ABE  EC75  F02B         	call	___lldiv	;wreg free
  9689  001AC2  5001               	movf	?___lldiv,w,c
  9690  001AC4  0100               	movlb	0	; () banked
  9691  001AC6  5D73               	subwf	??_f_lseek& (0+255),w,b
  9692  001AC8  5002               	movf	?___lldiv+1,w,c
  9693  001ACA  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  9694  001ACC  5003               	movf	?___lldiv+2,w,c
  9695  001ACE  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  9696  001AD0  5004               	movf	?___lldiv+3,w,c
  9697  001AD2  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  9698  001AD4  A0D8               	btfss	status,0,c
  9699  001AD6  D057               	goto	l6798
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  9703  001AD8  0EFF               	movlw	255
  9704  001ADA  258C               	addwf	f_lseek@bcs& (0+255),w,b
  9705  001ADC  6F73               	movwf	??_f_lseek& (0+255),b
  9706  001ADE  0EFF               	movlw	255
  9707  001AE0  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  9708  001AE2  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  9709  001AE4  0EFF               	movlw	255
  9710  001AE6  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  9711  001AE8  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  9712  001AEA  0EFF               	movlw	255
  9713  001AEC  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  9714  001AEE  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  9715  001AF0  1D73               	comf	??_f_lseek& (0+255),w,b
  9716  001AF2  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  9717  001AF4  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  9718  001AF6  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  9719  001AF8  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  9720  001AFA  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  9721  001AFC  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  9722  001AFE  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  9723  001B00  0EFF               	movlw	255
  9724  001B02  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  9725  001B04  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  9726  001B06  0EFF               	movlw	255
  9727  001B08  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  9728  001B0A  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  9729  001B0C  0EFF               	movlw	255
  9730  001B0E  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  9731  001B10  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  9732  001B12  0EFF               	movlw	255
  9733  001B14  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  9734  001B16  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  9735  001B18  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  9736  001B1A  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  9737  001B1C  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  9738  001B1E  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  9739  001B20  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  9740  001B22  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  9741  001B24  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  9742  001B26  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  9743  001B28  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  9744  001B2A  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  9745  001B2C  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  9746  001B2E  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  9747  001B30  EE20 F006          	lfsr	2,6
  9748  001B34  516D               	movf	f_lseek@fp& (0+255),w,b
  9749  001B36  26D9               	addwf	fsr2l,f,c
  9750  001B38  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9751  001B3A  22DA               	addwfc	fsr2h,f,c
  9752  001B3C  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  9753  001B40  C080  FFDE         	movff	??_f_lseek+13,postinc2
  9754  001B44  C081  FFDE         	movff	??_f_lseek+14,postinc2
  9755  001B48  C082  FFDE         	movff	??_f_lseek+15,postinc2
  9756                           
  9757                           ;ff.c: 3120:     ofs -= fp->fptr;
  9758  001B4C  EE20 F006          	lfsr	2,6
  9759  001B50  516D               	movf	f_lseek@fp& (0+255),w,b
  9760  001B52  26D9               	addwf	fsr2l,f,c
  9761  001B54  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9762  001B56  22DA               	addwfc	fsr2h,f,c
  9763  001B58  50DE               	movf	postinc2,w,c
  9764  001B5A  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  9765  001B5C  50DE               	movf	postinc2,w,c
  9766  001B5E  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  9767  001B60  50DE               	movf	postinc2,w,c
  9768  001B62  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  9769  001B64  50DD               	movf	postdec2,w,c
  9770  001B66  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  9771                           
  9772                           ;ff.c: 3121:     clst = fp->clust;
  9773  001B68  EE20 F012          	lfsr	2,18
  9774  001B6C  516D               	movf	f_lseek@fp& (0+255),w,b
  9775  001B6E  26D9               	addwf	fsr2l,f,c
  9776  001B70  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9777  001B72  22DA               	addwfc	fsr2h,f,c
  9778  001B74  CFDE F090          	movff	postinc2,f_lseek@clst
  9779  001B78  CFDE F091          	movff	postinc2,f_lseek@clst+1
  9780  001B7C  CFDE F092          	movff	postinc2,f_lseek@clst+2
  9781  001B80  CFDE F093          	movff	postinc2,f_lseek@clst+3
  9782                           
  9783                           ;ff.c: 3122:    } else {
  9784  001B84  D06E               	goto	l6822
  9785  001B86                     l6798:
  9786                           
  9787                           ; BSR set to: 0
  9788                           ;ff.c: 3123:     clst = fp->sclust;
  9789  001B86  EE20 F00E          	lfsr	2,14
  9790  001B8A  516D               	movf	f_lseek@fp& (0+255),w,b
  9791  001B8C  26D9               	addwf	fsr2l,f,c
  9792  001B8E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9793  001B90  22DA               	addwfc	fsr2h,f,c
  9794  001B92  CFDE F090          	movff	postinc2,f_lseek@clst
  9795  001B96  CFDE F091          	movff	postinc2,f_lseek@clst+1
  9796  001B9A  CFDE F092          	movff	postinc2,f_lseek@clst+2
  9797  001B9E  CFDE F093          	movff	postinc2,f_lseek@clst+3
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;ff.c: 3125:     if (clst == 0) {
  9801  001BA2  5190               	movf	f_lseek@clst& (0+255),w,b
  9802  001BA4  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9803  001BA6  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9804  001BA8  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  9805  001BAA  A4D8               	btfss	status,2,c
  9806  001BAC  D04C               	goto	l671
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  9810  001BAE  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9811  001BB2  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9812  001BB6  CFDE F056          	movff	postinc2,create_chain@fs
  9813  001BBA  CFDD F057          	movff	postdec2,create_chain@fs+1
  9814  001BBE  0E00               	movlw	0
  9815  001BC0  6E58               	movwf	create_chain@clst,c
  9816  001BC2  0E00               	movlw	0
  9817  001BC4  6E59               	movwf	create_chain@clst+1,c
  9818  001BC6  0E00               	movlw	0
  9819  001BC8  6E5A               	movwf	create_chain@clst+2,c
  9820  001BCA  0E00               	movlw	0
  9821  001BCC  6E5B               	movwf	create_chain@clst+3,c
  9822  001BCE  EC4A  F01B         	call	_create_chain	;wreg free
  9823  001BD2  C056  F090         	movff	?_create_chain,f_lseek@clst
  9824  001BD6  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  9825  001BDA  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  9826  001BDE  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  9827                           
  9828                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  9829  001BE2  0100               	movlb	0	; () banked
  9830  001BE4  0590               	decf	f_lseek@clst& (0+255),w,b
  9831  001BE6  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9832  001BE8  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9833  001BEA  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  9834  001BEC  A4D8               	btfss	status,2,c
  9835  001BEE  D00A               	goto	l6812
  9836  001BF0                     u9380:
  9837                           
  9838                           ; BSR set to: 0
  9839  001BF0  EE20 F005          	lfsr	2,5
  9840  001BF4  516D               	movf	f_lseek@fp& (0+255),w,b
  9841  001BF6  26D9               	addwf	fsr2l,f,c
  9842  001BF8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9843  001BFA  22DA               	addwfc	fsr2h,f,c
  9844  001BFC  0E02               	movlw	2
  9845  001BFE  6EDF               	movwf	indf2,c
  9846                           
  9847                           ; BSR set to: 0
  9848  001C00  0E02               	movlw	2
  9849  001C02  0012               	return	
  9850  001C04                     l6812:
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  9854  001C04  2990               	incf	f_lseek@clst& (0+255),w,b
  9855  001C06  E111               	bnz	l6820
  9856  001C08  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  9857  001C0A  E10F               	bnz	l6820
  9858  001C0C  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  9859  001C0E  E10D               	bnz	l6820
  9860  001C10  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  9861  001C12  A4D8               	btfss	status,2,c
  9862  001C14  D00A               	goto	l6820
  9863  001C16                     u9390:
  9864                           
  9865                           ; BSR set to: 0
  9866  001C16  EE20 F005          	lfsr	2,5
  9867  001C1A  516D               	movf	f_lseek@fp& (0+255),w,b
  9868  001C1C  26D9               	addwf	fsr2l,f,c
  9869  001C1E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9870  001C20  22DA               	addwfc	fsr2h,f,c
  9871  001C22  0E01               	movlw	1
  9872  001C24  6EDF               	movwf	indf2,c
  9873                           
  9874                           ; BSR set to: 0
  9875  001C26  0E01               	movlw	1
  9876  001C28  0012               	return	
  9877  001C2A                     l6820:
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;ff.c: 3129:      fp->sclust = clst;
  9881  001C2A  EE20 F00E          	lfsr	2,14
  9882  001C2E  516D               	movf	f_lseek@fp& (0+255),w,b
  9883  001C30  26D9               	addwf	fsr2l,f,c
  9884  001C32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9885  001C34  22DA               	addwfc	fsr2h,f,c
  9886  001C36  C090  FFDE         	movff	f_lseek@clst,postinc2
  9887  001C3A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  9888  001C3E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  9889  001C42  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  9890  001C46                     l671:
  9891                           
  9892                           ; BSR set to: 0
  9893                           ;ff.c: 3132:     fp->clust = clst;
  9894  001C46  EE20 F012          	lfsr	2,18
  9895  001C4A  516D               	movf	f_lseek@fp& (0+255),w,b
  9896  001C4C  26D9               	addwf	fsr2l,f,c
  9897  001C4E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9898  001C50  22DA               	addwfc	fsr2h,f,c
  9899  001C52  C090  FFDE         	movff	f_lseek@clst,postinc2
  9900  001C56  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  9901  001C5A  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  9902  001C5E  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  9903  001C62                     l6822:
  9904                           
  9905                           ; BSR set to: 0
  9906                           ;ff.c: 3134:    if (clst != 0) {
  9907  001C62  5190               	movf	f_lseek@clst& (0+255),w,b
  9908  001C64  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9909  001C66  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9910  001C68  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  9911  001C6A  A4D8               	btfss	status,2,c
  9912  001C6C  D097               	goto	l6858
  9913  001C6E  D0FA               	goto	l6876
  9914  001C70                     l6826:
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  9918  001C70  EE20 F004          	lfsr	2,4
  9919  001C74  516D               	movf	f_lseek@fp& (0+255),w,b
  9920  001C76  26D9               	addwf	fsr2l,f,c
  9921  001C78  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9922  001C7A  22DA               	addwfc	fsr2h,f,c
  9923  001C7C  A2DF               	btfss	indf2,1,c
  9924  001C7E  D02A               	goto	l6834
  9925                           
  9926                           ; BSR set to: 0
  9927                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  9928  001C80  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9929  001C84  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9930  001C88  CFDE F056          	movff	postinc2,create_chain@fs
  9931  001C8C  CFDD F057          	movff	postdec2,create_chain@fs+1
  9932  001C90  C090  F058         	movff	f_lseek@clst,create_chain@clst
  9933  001C94  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  9934  001C98  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  9935  001C9C  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  9936  001CA0  EC4A  F01B         	call	_create_chain	;wreg free
  9937  001CA4  C056  F090         	movff	?_create_chain,f_lseek@clst
  9938  001CA8  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  9939  001CAC  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  9940  001CB0  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  9941                           
  9942                           ;ff.c: 3139:       if (clst == 0) {
  9943  001CB4  0100               	movlb	0	; () banked
  9944  001CB6  5190               	movf	f_lseek@clst& (0+255),w,b
  9945  001CB8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9946  001CBA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9947  001CBC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  9948  001CBE  A4D8               	btfss	status,2,c
  9949  001CC0  D023               	goto	l6836
  9950                           
  9951                           ; BSR set to: 0
  9952                           ;ff.c: 3140:        ofs = bcs; break;
  9953  001CC2  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  9954  001CC6  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  9955  001CCA  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  9956  001CCE  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  9957  001CD2  D06E               	goto	u9460
  9958  001CD4                     l6834:
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  9962  001CD4  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  9963  001CD8  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  9964  001CDC  CFDE F03B          	movff	postinc2,get_fat@fs
  9965  001CE0  CFDD F03C          	movff	postdec2,get_fat@fs+1
  9966  001CE4  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  9967  001CE8  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  9968  001CEC  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  9969  001CF0  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  9970  001CF4  EC05  F016         	call	_get_fat	;wreg free
  9971  001CF8  C03B  F090         	movff	?_get_fat,f_lseek@clst
  9972  001CFC  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  9973  001D00  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  9974  001D04  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  9975  001D08                     l6836:
  9976                           
  9977                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  9978  001D08  0100               	movlb	0	; () banked
  9979  001D0A  2990               	incf	f_lseek@clst& (0+255),w,b
  9980  001D0C  E107               	bnz	l6844
  9981  001D0E  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  9982  001D10  E105               	bnz	l6844
  9983  001D12  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  9984  001D14  E103               	bnz	l6844
  9985  001D16  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  9986  001D18  B4D8               	btfsc	status,2,c
  9987  001D1A  D77D               	goto	u9390
  9988  001D1C                     l6844:
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  9992  001D1C  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  9993  001D1E  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  9994  001D20  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  9995  001D22  E104               	bnz	u9440
  9996  001D24  0E02               	movlw	2
  9997  001D26  5D90               	subwf	f_lseek@clst& (0+255),w,b
  9998  001D28  A0D8               	btfss	status,0,c
  9999  001D2A  D762               	goto	u9380
 10000  001D2C                     u9440:
 10001                           
 10002                           ; BSR set to: 0
 10003  001D2C  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10004  001D30  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10005  001D34  EE10 F012          	lfsr	1,18
 10006  001D38  50DE               	movf	postinc2,w,c
 10007  001D3A  26E1               	addwf	fsr1l,f,c
 10008  001D3C  50DD               	movf	postdec2,w,c
 10009  001D3E  22E2               	addwfc	fsr1h,f,c
 10010  001D40  50E6               	movf	postinc1,w,c
 10011  001D42  5D90               	subwf	f_lseek@clst& (0+255),w,b
 10012  001D44  50E6               	movf	postinc1,w,c
 10013  001D46  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
 10014  001D48  50E6               	movf	postinc1,w,c
 10015  001D4A  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
 10016  001D4C  50E6               	movf	postinc1,w,c
 10017  001D4E  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
 10018  001D50  B0D8               	btfsc	status,0,c
 10019  001D52  D74E               	goto	u9380
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;ff.c: 3147:      fp->clust = clst;
 10023                           
 10024                           ; BSR set to: 0
 10025  001D54  EE20 F012          	lfsr	2,18
 10026  001D58  516D               	movf	f_lseek@fp& (0+255),w,b
 10027  001D5A  26D9               	addwf	fsr2l,f,c
 10028  001D5C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10029  001D5E  22DA               	addwfc	fsr2h,f,c
 10030  001D60  C090  FFDE         	movff	f_lseek@clst,postinc2
 10031  001D64  C091  FFDE         	movff	f_lseek@clst+1,postinc2
 10032  001D68  C092  FFDE         	movff	f_lseek@clst+2,postinc2
 10033  001D6C  C093  FFDE         	movff	f_lseek@clst+3,postinc2
 10034                           
 10035                           ;ff.c: 3148:      fp->fptr += bcs;
 10036  001D70  EE20 F006          	lfsr	2,6
 10037  001D74  516D               	movf	f_lseek@fp& (0+255),w,b
 10038  001D76  26D9               	addwf	fsr2l,f,c
 10039  001D78  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10040  001D7A  22DA               	addwfc	fsr2h,f,c
 10041  001D7C  518C               	movf	f_lseek@bcs& (0+255),w,b
 10042  001D7E  26DE               	addwf	postinc2,f,c
 10043  001D80  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10044  001D82  22DE               	addwfc	postinc2,f,c
 10045  001D84  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10046  001D86  22DE               	addwfc	postinc2,f,c
 10047  001D88  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10048  001D8A  22DE               	addwfc	postinc2,f,c
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;ff.c: 3149:      ofs -= bcs;
 10052  001D8C  518C               	movf	f_lseek@bcs& (0+255),w,b
 10053  001D8E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
 10054  001D90  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
 10055  001D92  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
 10056  001D94  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
 10057  001D96  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
 10058  001D98  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
 10059  001D9A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
 10060  001D9C                     l6858:
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;ff.c: 3135:     while (ofs > bcs) {
 10064  001D9C  516F               	movf	f_lseek@ofs& (0+255),w,b
 10065  001D9E  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
 10066  001DA0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10067  001DA2  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
 10068  001DA4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10069  001DA6  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
 10070  001DA8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10071  001DAA  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
 10072  001DAC  A0D8               	btfss	status,0,c
 10073  001DAE  D760               	goto	l6826
 10074  001DB0                     u9460:
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;ff.c: 3151:     fp->fptr += ofs;
 10078  001DB0  EE20 F006          	lfsr	2,6
 10079  001DB4  516D               	movf	f_lseek@fp& (0+255),w,b
 10080  001DB6  26D9               	addwf	fsr2l,f,c
 10081  001DB8  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10082  001DBA  22DA               	addwfc	fsr2h,f,c
 10083  001DBC  516F               	movf	f_lseek@ofs& (0+255),w,b
 10084  001DBE  26DE               	addwf	postinc2,f,c
 10085  001DC0  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
 10086  001DC2  22DE               	addwfc	postinc2,f,c
 10087  001DC4  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
 10088  001DC6  22DE               	addwfc	postinc2,f,c
 10089  001DC8  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
 10090  001DCA  22DE               	addwfc	postinc2,f,c
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
 10094  001DCC  0EFF               	movlw	255
 10095  001DCE  156F               	andwf	f_lseek@ofs& (0+255),w,b
 10096  001DD0  6F73               	movwf	??_f_lseek& (0+255),b
 10097  001DD2  0E01               	movlw	1
 10098  001DD4  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
 10099  001DD6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10100  001DD8  0E00               	movlw	0
 10101  001DDA  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
 10102  001DDC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10103  001DDE  0E00               	movlw	0
 10104  001DE0  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
 10105  001DE2  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10106  001DE4  5173               	movf	??_f_lseek& (0+255),w,b
 10107  001DE6  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10108  001DE8  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10109  001DEA  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10110  001DEC  B4D8               	btfsc	status,2,c
 10111  001DEE  D03A               	goto	l6876
 10112                           
 10113                           ; BSR set to: 0
 10114                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
 10115  001DF0  C06D  FFD9         	movff	f_lseek@fp,fsr2l
 10116  001DF4  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
 10117  001DF8  CFDE F00D          	movff	postinc2,clust2sect@fs
 10118  001DFC  CFDD F00E          	movff	postdec2,clust2sect@fs+1
 10119  001E00  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
 10120  001E04  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
 10121  001E08  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
 10122  001E0C  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
 10123  001E10  EC23  F02A         	call	_clust2sect	;wreg free
 10124  001E14  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
 10125  001E18  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
 10126  001E1C  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
 10127  001E20  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
 10128                           
 10129                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
 10130  001E24  0100               	movlb	0	; () banked
 10131  001E26  5188               	movf	f_lseek@nsect& (0+255),w,b
 10132  001E28  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
 10133  001E2A  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
 10134  001E2C  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
 10135  001E2E  B4D8               	btfsc	status,2,c
 10136  001E30  D6DF               	goto	u9380
 10137                           
 10138                           ; BSR set to: 0
 10139                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
 10140                           
 10141                           ; BSR set to: 0
 10142  001E32  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
 10143  001E36  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
 10144  001E3A  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
 10145  001E3E  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
 10146  001E42  0E0A               	movlw	10
 10147  001E44  D005               	goto	u9490
 10148  001E46                     u9495:
 10149  001E46  90D8               	bcf	status,0,c
 10150  001E48  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
 10151  001E4A  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
 10152  001E4C  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
 10153  001E4E  3373               	rrcf	??_f_lseek& (0+255),f,b
 10154  001E50                     u9490:
 10155  001E50  2EE8               	decfsz	wreg,f,c
 10156  001E52  D7F9               	goto	u9495
 10157  001E54  5173               	movf	??_f_lseek& (0+255),w,b
 10158  001E56  2788               	addwf	f_lseek@nsect& (0+255),f,b
 10159  001E58  5174               	movf	(??_f_lseek+1)& (0+255),w,b
 10160  001E5A  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
 10161  001E5C  5175               	movf	(??_f_lseek+2)& (0+255),w,b
 10162  001E5E  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
 10163  001E60  5176               	movf	(??_f_lseek+3)& (0+255),w,b
 10164  001E62  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
 10165  001E64                     l6876:
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
 10169  001E64  EE20 F006          	lfsr	2,6
 10170  001E68  516D               	movf	f_lseek@fp& (0+255),w,b
 10171  001E6A  26D9               	addwf	fsr2l,f,c
 10172  001E6C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10173  001E6E  22DA               	addwfc	fsr2h,f,c
 10174  001E70  0EFF               	movlw	255
 10175  001E72  14DE               	andwf	postinc2,w,c
 10176  001E74  6F73               	movwf	??_f_lseek& (0+255),b
 10177  001E76  0E01               	movlw	1
 10178  001E78  14DE               	andwf	postinc2,w,c
 10179  001E7A  6F74               	movwf	(??_f_lseek+1)& (0+255),b
 10180  001E7C  0E00               	movlw	0
 10181  001E7E  14DE               	andwf	postinc2,w,c
 10182  001E80  6F75               	movwf	(??_f_lseek+2)& (0+255),b
 10183  001E82  0E00               	movlw	0
 10184  001E84  14DE               	andwf	postinc2,w,c
 10185  001E86  6F76               	movwf	(??_f_lseek+3)& (0+255),b
 10186  001E88  5173               	movf	??_f_lseek& (0+255),w,b
 10187  001E8A  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
 10188  001E8C  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
 10189  001E8E  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
 10190  001E90  B4D8               	btfsc	status,2,c
 10191  001E92  D021               	goto	l6882
 10192                           
 10193                           ; BSR set to: 0
 10194  001E94  EE20 F016          	lfsr	2,22
 10195  001E98  516D               	movf	f_lseek@fp& (0+255),w,b
 10196  001E9A  26D9               	addwf	fsr2l,f,c
 10197  001E9C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10198  001E9E  22DA               	addwfc	fsr2h,f,c
 10199  001EA0  5188               	movf	f_lseek@nsect& (0+255),w,b
 10200  001EA2  18DE               	xorwf	postinc2,w,c
 10201  001EA4  E10A               	bnz	u9510
 10202  001EA6  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
 10203  001EA8  18DE               	xorwf	postinc2,w,c
 10204  001EAA  E107               	bnz	u9510
 10205  001EAC  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
 10206  001EAE  18DE               	xorwf	postinc2,w,c
 10207  001EB0  E104               	bnz	u9510
 10208  001EB2  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
 10209  001EB4  18DE               	xorwf	postinc2,w,c
 10210  001EB6  B4D8               	btfsc	status,2,c
 10211  001EB8  D00E               	goto	l6882
 10212  001EBA                     u9510:
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;ff.c: 3171:    fp->dsect = nsect;
 10216  001EBA  EE20 F016          	lfsr	2,22
 10217  001EBE  516D               	movf	f_lseek@fp& (0+255),w,b
 10218  001EC0  26D9               	addwf	fsr2l,f,c
 10219  001EC2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10220  001EC4  22DA               	addwfc	fsr2h,f,c
 10221  001EC6  C088  FFDE         	movff	f_lseek@nsect,postinc2
 10222  001ECA  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
 10223  001ECE  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
 10224  001ED2  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
 10225  001ED6                     l6882:
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
 10229  001ED6  EE20 F006          	lfsr	2,6
 10230  001EDA  516D               	movf	f_lseek@fp& (0+255),w,b
 10231  001EDC  26D9               	addwf	fsr2l,f,c
 10232  001EDE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10233  001EE0  22DA               	addwfc	fsr2h,f,c
 10234  001EE2  EE10 F00A          	lfsr	1,10
 10235  001EE6  516D               	movf	f_lseek@fp& (0+255),w,b
 10236  001EE8  26E1               	addwf	fsr1l,f,c
 10237  001EEA  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10238  001EEC  22E2               	addwfc	fsr1h,f,c
 10239  001EEE  50DE               	movf	postinc2,w,c
 10240  001EF0  5CE6               	subwf	postinc1,w,c
 10241  001EF2  50DE               	movf	postinc2,w,c
 10242  001EF4  58E6               	subwfb	postinc1,w,c
 10243  001EF6  50DE               	movf	postinc2,w,c
 10244  001EF8  58E6               	subwfb	postinc1,w,c
 10245  001EFA  50DE               	movf	postinc2,w,c
 10246  001EFC  58E6               	subwfb	postinc1,w,c
 10247  001EFE  B0D8               	btfsc	status,0,c
 10248  001F00  D521               	goto	u9290
 10249                           
 10250                           ; BSR set to: 0
 10251                           ;ff.c: 3175:    fp->fsize = fp->fptr;
 10252  001F02  EE20 F006          	lfsr	2,6
 10253  001F06  516D               	movf	f_lseek@fp& (0+255),w,b
 10254  001F08  26D9               	addwf	fsr2l,f,c
 10255  001F0A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10256  001F0C  22DA               	addwfc	fsr2h,f,c
 10257  001F0E  EE10 F00A          	lfsr	1,10
 10258  001F12  516D               	movf	f_lseek@fp& (0+255),w,b
 10259  001F14  26E1               	addwf	fsr1l,f,c
 10260  001F16  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10261  001F18  22E2               	addwfc	fsr1h,f,c
 10262  001F1A  CFDE FFE6          	movff	postinc2,postinc1
 10263  001F1E  CFDE FFE6          	movff	postinc2,postinc1
 10264  001F22  CFDE FFE6          	movff	postinc2,postinc1
 10265  001F26  CFDE FFE6          	movff	postinc2,postinc1
 10266                           
 10267                           ; BSR set to: 0
 10268                           ;ff.c: 3176:    fp->flag |= 0x20;
 10269  001F2A  EE20 F004          	lfsr	2,4
 10270  001F2E  516D               	movf	f_lseek@fp& (0+255),w,b
 10271  001F30  26D9               	addwf	fsr2l,f,c
 10272  001F32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
 10273  001F34  22DA               	addwfc	fsr2h,f,c
 10274  001F36  0E00               	movlw	0
 10275  001F38  8ADB               	bsf	plusw2,5,c
 10276  001F3A  D504               	goto	u9290
 10277  001F3C                     __end_of_f_lseek:
 10278                           	opt callstack 0
 10279                           
 10280 ;; *************** function _create_chain *****************
 10281 ;; Defined at:
 10282 ;;		line 990 in file "ff.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;  fs              2   85[COMRAM] PTR struct .
 10285 ;;		 -> FatFs(558), NULL(0), 
 10286 ;;  clst            4   87[COMRAM] unsigned long 
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  cs              4    9[BANK0 ] unsigned long 
 10289 ;;  ncl             4    5[BANK0 ] unsigned long 
 10290 ;;  scl             4    1[BANK0 ] unsigned long 
 10291 ;;  res             1    0[BANK0 ] enum E93
 10292 ;; Return value:  Size  Location     Type
 10293 ;;                  4   85[COMRAM] unsigned long 
 10294 ;; Registers used:
 10295 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10301 ;;      Params:         6       0       0       0       0       0       0       0       0
 10302 ;;      Locals:         0      13       0       0       0       0       0       0       0
 10303 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10304 ;;      Totals:        10      13       0       0       0       0       0       0       0
 10305 ;;Total ram usage:       23 bytes
 10306 ;; Hardware stack levels used:    1
 10307 ;; Hardware stack levels required when called:    9
 10308 ;; This function calls:
 10309 ;;		_get_fat
 10310 ;;		_put_fat
 10311 ;; This function is called by:
 10312 ;;		_dir_next
 10313 ;;		_f_write
 10314 ;;		_f_lseek
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           	psect	text28
 10319  003694                     __ptext28:
 10320                           	opt callstack 0
 10321  003694                     _create_chain:
 10322                           	opt callstack 18
 10323                           
 10324                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
 10325                           
 10326                           ; BSR set to: 0
 10327                           ;incstack = 0
 10328  003694  5058               	movf	create_chain@clst,w,c
 10329  003696  1059               	iorwf	create_chain@clst+1,w,c
 10330  003698  105A               	iorwf	create_chain@clst+2,w,c
 10331  00369A  105B               	iorwf	create_chain@clst+3,w,c
 10332  00369C  A4D8               	btfss	status,2,c
 10333  00369E  D02E               	goto	l4858
 10334                           
 10335                           ;ff.c: 1000:   scl = fs->last_clust;
 10336  0036A0  EE20 F00A          	lfsr	2,10
 10337  0036A4  5056               	movf	create_chain@fs,w,c
 10338  0036A6  26D9               	addwf	fsr2l,f,c
 10339  0036A8  5057               	movf	create_chain@fs+1,w,c
 10340  0036AA  22DA               	addwfc	fsr2h,f,c
 10341  0036AC  CFDE F061          	movff	postinc2,create_chain@scl
 10342  0036B0  CFDE F062          	movff	postinc2,create_chain@scl+1
 10343  0036B4  CFDE F063          	movff	postinc2,create_chain@scl+2
 10344  0036B8  CFDE F064          	movff	postinc2,create_chain@scl+3
 10345                           
 10346                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
 10347  0036BC  0100               	movlb	0	; () banked
 10348  0036BE  5161               	movf	create_chain@scl& (0+255),w,b
 10349  0036C0  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10350  0036C2  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10351  0036C4  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
 10352  0036C6  B4D8               	btfsc	status,2,c
 10353  0036C8  D010               	goto	u5830
 10354                           
 10355                           ; BSR set to: 0
 10356  0036CA  EE20 F012          	lfsr	2,18
 10357  0036CE  5056               	movf	create_chain@fs,w,c
 10358  0036D0  26D9               	addwf	fsr2l,f,c
 10359  0036D2  5057               	movf	create_chain@fs+1,w,c
 10360  0036D4  22DA               	addwfc	fsr2h,f,c
 10361  0036D6  50DE               	movf	postinc2,w,c
 10362  0036D8  5D61               	subwf	create_chain@scl& (0+255),w,b
 10363  0036DA  50DE               	movf	postinc2,w,c
 10364  0036DC  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
 10365  0036DE  50DE               	movf	postinc2,w,c
 10366  0036E0  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
 10367  0036E2  50DE               	movf	postinc2,w,c
 10368  0036E4  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
 10369  0036E6  A0D8               	btfss	status,0,c
 10370  0036E8  D05B               	goto	l317
 10371  0036EA                     u5830:
 10372                           
 10373                           ; BSR set to: 0
 10374  0036EA  0E01               	movlw	1
 10375  0036EC  6F61               	movwf	create_chain@scl& (0+255),b
 10376  0036EE  0E00               	movlw	0
 10377  0036F0  6F62               	movwf	(create_chain@scl+1)& (0+255),b
 10378  0036F2  0E00               	movlw	0
 10379  0036F4  6F63               	movwf	(create_chain@scl+2)& (0+255),b
 10380  0036F6  0E00               	movlw	0
 10381  0036F8  6F64               	movwf	(create_chain@scl+3)& (0+255),b
 10382  0036FA  D052               	goto	l317
 10383  0036FC                     l4858:
 10384                           
 10385                           ;ff.c: 1004:   cs = get_fat(fs, clst);
 10386  0036FC  C056  F03B         	movff	create_chain@fs,get_fat@fs
 10387  003700  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 10388  003704  C058  F03D         	movff	create_chain@clst,get_fat@clst
 10389  003708  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
 10390  00370C  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
 10391  003710  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
 10392  003714  EC05  F016         	call	_get_fat	;wreg free
 10393  003718  C03B  F069         	movff	?_get_fat,create_chain@cs
 10394  00371C  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 10395  003720  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 10396  003724  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 10397                           
 10398                           ;ff.c: 1005:   if (cs < 2) return 1;
 10399  003728  0100               	movlb	0	; () banked
 10400  00372A  516C               	movf	(create_chain@cs+3)& (0+255),w,b
 10401  00372C  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10402  00372E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10403  003730  E10D               	bnz	l4866
 10404  003732  0E02               	movlw	2
 10405  003734  5D69               	subwf	create_chain@cs& (0+255),w,b
 10406  003736  B0D8               	btfsc	status,0,c
 10407  003738  D009               	goto	l4866
 10408                           
 10409                           ; BSR set to: 0
 10410  00373A  0E01               	movlw	1
 10411  00373C  6E56               	movwf	?_create_chain,c
 10412  00373E  0E00               	movlw	0
 10413  003740  6E57               	movwf	?_create_chain+1,c
 10414  003742  0E00               	movlw	0
 10415  003744  6E58               	movwf	?_create_chain+2,c
 10416  003746  0E00               	movlw	0
 10417  003748  6E59               	movwf	?_create_chain+3,c
 10418  00374A  0012               	return	
 10419  00374C                     l4866:
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
 10423  00374C  2969               	incf	create_chain@cs& (0+255),w,b
 10424  00374E  E110               	bnz	l4870
 10425  003750  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 10426  003752  E10E               	bnz	l4870
 10427  003754  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 10428  003756  E10C               	bnz	l4870
 10429  003758  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 10430  00375A  A4D8               	btfss	status,2,c
 10431  00375C  D009               	goto	l4870
 10432  00375E                     u5850:
 10433                           
 10434                           ; BSR set to: 0
 10435  00375E  C069  F056         	movff	create_chain@cs,?_create_chain
 10436  003762  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
 10437  003766  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
 10438  00376A  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
 10439  00376E  0012               	return	
 10440  003770                     l4870:
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
 10444  003770  EE20 F012          	lfsr	2,18
 10445  003774  5056               	movf	create_chain@fs,w,c
 10446  003776  26D9               	addwf	fsr2l,f,c
 10447  003778  5057               	movf	create_chain@fs+1,w,c
 10448  00377A  22DA               	addwfc	fsr2h,f,c
 10449  00377C  50DE               	movf	postinc2,w,c
 10450  00377E  5D69               	subwf	create_chain@cs& (0+255),w,b
 10451  003780  50DE               	movf	postinc2,w,c
 10452  003782  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
 10453  003784  50DE               	movf	postinc2,w,c
 10454  003786  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
 10455  003788  50DE               	movf	postinc2,w,c
 10456  00378A  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
 10457  00378C  A0D8               	btfss	status,0,c
 10458  00378E  D7E7               	goto	u5850
 10459                           
 10460                           ; BSR set to: 0
 10461                           ;ff.c: 1008:   scl = clst;
 10462  003790  C058  F061         	movff	create_chain@clst,create_chain@scl
 10463  003794  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
 10464  003798  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
 10465  00379C  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
 10466  0037A0                     l317:
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;ff.c: 1011:  ncl = scl;
 10470  0037A0  C061  F065         	movff	create_chain@scl,create_chain@ncl
 10471  0037A4  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
 10472  0037A8  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
 10473  0037AC  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
 10474  0037B0                     l4874:
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;ff.c: 1013:   ncl++;
 10478  0037B0  0E01               	movlw	1
 10479  0037B2  2765               	addwf	create_chain@ncl& (0+255),f,b
 10480  0037B4  0E00               	movlw	0
 10481  0037B6  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
 10482  0037B8  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
 10483  0037BA  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
 10484                           
 10485                           ; BSR set to: 0
 10486                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
 10487  0037BC  EE20 F012          	lfsr	2,18
 10488  0037C0  5056               	movf	create_chain@fs,w,c
 10489  0037C2  26D9               	addwf	fsr2l,f,c
 10490  0037C4  5057               	movf	create_chain@fs+1,w,c
 10491  0037C6  22DA               	addwfc	fsr2h,f,c
 10492  0037C8  50DE               	movf	postinc2,w,c
 10493  0037CA  5D65               	subwf	create_chain@ncl& (0+255),w,b
 10494  0037CC  50DE               	movf	postinc2,w,c
 10495  0037CE  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
 10496  0037D0  50DE               	movf	postinc2,w,c
 10497  0037D2  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
 10498  0037D4  50DE               	movf	postinc2,w,c
 10499  0037D6  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
 10500  0037D8  A0D8               	btfss	status,0,c
 10501  0037DA  D019               	goto	l4886
 10502                           
 10503                           ; BSR set to: 0
 10504                           ;ff.c: 1015:    ncl = 2;
 10505  0037DC  0E02               	movlw	2
 10506  0037DE  6F65               	movwf	create_chain@ncl& (0+255),b
 10507  0037E0  0E00               	movlw	0
 10508  0037E2  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 10509  0037E4  0E00               	movlw	0
 10510  0037E6  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 10511  0037E8  0E00               	movlw	0
 10512  0037EA  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 10513                           
 10514                           ; BSR set to: 0
 10515                           ;ff.c: 1016:    if (ncl > scl) return 0;
 10516  0037EC  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 10517  0037EE  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
 10518  0037F0  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
 10519  0037F2  E10D               	bnz	l4886
 10520  0037F4  0E02               	movlw	2
 10521  0037F6  5D61               	subwf	create_chain@scl& (0+255),w,b
 10522  0037F8  B0D8               	btfsc	status,0,c
 10523  0037FA  D009               	goto	l4886
 10524  0037FC                     u5880:
 10525                           
 10526                           ; BSR set to: 0
 10527  0037FC  0E00               	movlw	0
 10528  0037FE  6E56               	movwf	?_create_chain,c
 10529  003800  0E00               	movlw	0
 10530  003802  6E57               	movwf	?_create_chain+1,c
 10531  003804  0E00               	movlw	0
 10532  003806  6E58               	movwf	?_create_chain+2,c
 10533  003808  0E00               	movlw	0
 10534  00380A  6E59               	movwf	?_create_chain+3,c
 10535  00380C  0012               	return	
 10536  00380E                     l4886:
 10537                           
 10538                           ; BSR set to: 0
 10539                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
 10540  00380E  C056  F03B         	movff	create_chain@fs,get_fat@fs
 10541  003812  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
 10542  003816  C065  F03D         	movff	create_chain@ncl,get_fat@clst
 10543  00381A  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
 10544  00381E  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
 10545  003822  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
 10546  003826  EC05  F016         	call	_get_fat	;wreg free
 10547  00382A  C03B  F069         	movff	?_get_fat,create_chain@cs
 10548  00382E  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
 10549  003832  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
 10550  003836  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
 10551                           
 10552                           ;ff.c: 1019:   if (cs == 0) break;
 10553  00383A  0100               	movlb	0	; () banked
 10554  00383C  5169               	movf	create_chain@cs& (0+255),w,b
 10555  00383E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10556  003840  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10557  003842  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10558  003844  B4D8               	btfsc	status,2,c
 10559  003846  D01D               	goto	l4902
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
 10563  003848  2969               	incf	create_chain@cs& (0+255),w,b
 10564  00384A  E107               	bnz	u5900
 10565  00384C  296A               	incf	(create_chain@cs+1)& (0+255),w,b
 10566  00384E  E105               	bnz	u5900
 10567  003850  296B               	incf	(create_chain@cs+2)& (0+255),w,b
 10568  003852  E103               	bnz	u5900
 10569  003854  296C               	incf	(create_chain@cs+3)& (0+255),w,b
 10570  003856  B4D8               	btfsc	status,2,c
 10571  003858  D782               	goto	u5850
 10572  00385A                     u5900:
 10573                           
 10574                           ; BSR set to: 0
 10575  00385A  0569               	decf	create_chain@cs& (0+255),w,b
 10576  00385C  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
 10577  00385E  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
 10578  003860  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
 10579  003862  B4D8               	btfsc	status,2,c
 10580  003864  D77C               	goto	u5850
 10581                           
 10582                           ; BSR set to: 0
 10583                           ;ff.c: 1022:   if (ncl == scl) return 0;
 10584  003866  5161               	movf	create_chain@scl& (0+255),w,b
 10585  003868  1965               	xorwf	create_chain@ncl& (0+255),w,b
 10586  00386A  E1A2               	bnz	l4874
 10587  00386C  5162               	movf	(create_chain@scl+1)& (0+255),w,b
 10588  00386E  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
 10589  003870  E19F               	bnz	l4874
 10590  003872  5163               	movf	(create_chain@scl+2)& (0+255),w,b
 10591  003874  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
 10592  003876  E19C               	bnz	l4874
 10593  003878  5164               	movf	(create_chain@scl+3)& (0+255),w,b
 10594  00387A  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
 10595  00387C  B4D8               	btfsc	status,2,c
 10596  00387E  D7BE               	goto	u5880
 10597  003880  D797               	goto	l4874
 10598  003882                     l4902:
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
 10602  003882  C056  F03B         	movff	create_chain@fs,put_fat@fs
 10603  003886  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 10604  00388A  C065  F03D         	movff	create_chain@ncl,put_fat@clst
 10605  00388E  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
 10606  003892  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
 10607  003896  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
 10608  00389A  0EFF               	movlw	255
 10609  00389C  6E41               	movwf	put_fat@val,c
 10610  00389E  0EFF               	movlw	255
 10611  0038A0  6E42               	movwf	put_fat@val+1,c
 10612  0038A2  0EFF               	movlw	255
 10613  0038A4  6E43               	movwf	put_fat@val+2,c
 10614  0038A6  0E0F               	movlw	15
 10615  0038A8  6E44               	movwf	put_fat@val+3,c
 10616  0038AA  ECED  F011         	call	_put_fat	;wreg free
 10617  0038AE  0100               	movlb	0	; () banked
 10618  0038B0  6F60               	movwf	create_chain@res& (0+255),b
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
 10622  0038B2  5160               	movf	create_chain@res& (0+255),w,b
 10623  0038B4  A4D8               	btfss	status,2,c
 10624  0038B6  D01E               	goto	l4910
 10625                           
 10626                           ; BSR set to: 0
 10627  0038B8  5058               	movf	create_chain@clst,w,c
 10628  0038BA  1059               	iorwf	create_chain@clst+1,w,c
 10629  0038BC  105A               	iorwf	create_chain@clst+2,w,c
 10630  0038BE  105B               	iorwf	create_chain@clst+3,w,c
 10631  0038C0  B4D8               	btfsc	status,2,c
 10632  0038C2  D018               	goto	l4910
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
 10636  0038C4  C056  F03B         	movff	create_chain@fs,put_fat@fs
 10637  0038C8  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
 10638  0038CC  C058  F03D         	movff	create_chain@clst,put_fat@clst
 10639  0038D0  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
 10640  0038D4  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
 10641  0038D8  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
 10642  0038DC  C065  F041         	movff	create_chain@ncl,put_fat@val
 10643  0038E0  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
 10644  0038E4  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
 10645  0038E8  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
 10646  0038EC  ECED  F011         	call	_put_fat	;wreg free
 10647  0038F0  0100               	movlb	0	; () banked
 10648  0038F2  6F60               	movwf	create_chain@res& (0+255),b
 10649  0038F4                     l4910:
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;ff.c: 1029:  if (res == FR_OK) {
 10653  0038F4  5160               	movf	create_chain@res& (0+255),w,b
 10654  0038F6  A4D8               	btfss	status,2,c
 10655  0038F8  D031               	goto	l4916
 10656                           
 10657                           ; BSR set to: 0
 10658                           ;ff.c: 1030:   fs->last_clust = ncl;
 10659  0038FA  EE20 F00A          	lfsr	2,10
 10660  0038FE  5056               	movf	create_chain@fs,w,c
 10661  003900  26D9               	addwf	fsr2l,f,c
 10662  003902  5057               	movf	create_chain@fs+1,w,c
 10663  003904  22DA               	addwfc	fsr2h,f,c
 10664  003906  C065  FFDE         	movff	create_chain@ncl,postinc2
 10665  00390A  C066  FFDE         	movff	create_chain@ncl+1,postinc2
 10666  00390E  C067  FFDE         	movff	create_chain@ncl+2,postinc2
 10667  003912  C068  FFDE         	movff	create_chain@ncl+3,postinc2
 10668                           
 10669                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
 10670  003916  EE20 F00E          	lfsr	2,14
 10671  00391A  5056               	movf	create_chain@fs,w,c
 10672  00391C  26D9               	addwf	fsr2l,f,c
 10673  00391E  5057               	movf	create_chain@fs+1,w,c
 10674  003920  22DA               	addwfc	fsr2h,f,c
 10675  003922  28DE               	incf	postinc2,w,c
 10676  003924  E107               	bnz	u5960
 10677  003926  28DE               	incf	postinc2,w,c
 10678  003928  E105               	bnz	u5960
 10679  00392A  28DE               	incf	postinc2,w,c
 10680  00392C  E103               	bnz	u5960
 10681  00392E  28DE               	incf	postinc2,w,c
 10682  003930  B4D8               	btfsc	status,2,c
 10683  003932  D024               	goto	l334
 10684  003934                     u5960:
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;ff.c: 1032:    fs->free_clust--;
 10688  003934  EE20 F00E          	lfsr	2,14
 10689  003938  5056               	movf	create_chain@fs,w,c
 10690  00393A  26D9               	addwf	fsr2l,f,c
 10691  00393C  5057               	movf	create_chain@fs+1,w,c
 10692  00393E  22DA               	addwfc	fsr2h,f,c
 10693  003940  06DE               	decf	postinc2,f,c
 10694  003942  0E00               	movlw	0
 10695  003944  5ADE               	subwfb	postinc2,f,c
 10696  003946  5ADE               	subwfb	postinc2,f,c
 10697  003948  5ADE               	subwfb	postinc2,f,c
 10698                           
 10699                           ;ff.c: 1033:    fs->fsi_flag |= 1;
 10700  00394A  EE20 F005          	lfsr	2,5
 10701  00394E  5056               	movf	create_chain@fs,w,c
 10702  003950  26D9               	addwf	fsr2l,f,c
 10703  003952  5057               	movf	create_chain@fs+1,w,c
 10704  003954  22DA               	addwfc	fsr2h,f,c
 10705  003956  0E00               	movlw	0
 10706  003958  80DB               	bsf	plusw2,0,c
 10707  00395A  D010               	goto	l334
 10708  00395C                     l4916:
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 10712  00395C  0560               	decf	create_chain@res& (0+255),w,b
 10713  00395E  B4D8               	btfsc	status,2,c
 10714  003960  D009               	goto	l336
 10715                           
 10716                           ; BSR set to: 0
 10717  003962  0E01               	movlw	1
 10718  003964  6F65               	movwf	create_chain@ncl& (0+255),b
 10719  003966  0E00               	movlw	0
 10720  003968  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
 10721  00396A  0E00               	movlw	0
 10722  00396C  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
 10723  00396E  0E00               	movlw	0
 10724  003970  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
 10725  003972  D004               	goto	l334
 10726  003974                     l336:
 10727                           
 10728                           ; BSR set to: 0
 10729  003974  6965               	setf	create_chain@ncl& (0+255),b
 10730  003976  6966               	setf	(create_chain@ncl+1)& (0+255),b
 10731  003978  6967               	setf	(create_chain@ncl+2)& (0+255),b
 10732  00397A  6968               	setf	(create_chain@ncl+3)& (0+255),b
 10733  00397C                     l334:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;ff.c: 1039:  return ncl;
 10737  00397C  C065  F056         	movff	create_chain@ncl,?_create_chain
 10738  003980  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
 10739  003984  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
 10740  003988  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
 10741                           
 10742                           ; BSR set to: 0
 10743  00398C  0012               	return		;funcret
 10744  00398E                     __end_of_create_chain:
 10745                           	opt callstack 0
 10746                           
 10747 ;; *************** function _put_fat *****************
 10748 ;; Defined at:
 10749 ;;		line 873 in file "ff.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;  fs              2   58[COMRAM] PTR struct .
 10752 ;;		 -> FatFs(558), NULL(0), 
 10753 ;;  clst            4   60[COMRAM] unsigned long 
 10754 ;;  val             4   64[COMRAM] unsigned long 
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;  p               2   83[COMRAM] PTR unsigned char 
 10757 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 10758 ;;  bc              2   80[COMRAM] unsigned short 
 10759 ;;  res             1   82[COMRAM] enum E93
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  1    wreg      enum E93
 10762 ;; Registers used:
 10763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10764 ;; Tracked objects:
 10765 ;;		On entry : 0/0
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10769 ;;      Params:        10       0       0       0       0       0       0       0       0
 10770 ;;      Locals:         9       0       0       0       0       0       0       0       0
 10771 ;;      Temps:          8       0       0       0       0       0       0       0       0
 10772 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10773 ;;Total ram usage:       27 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; Hardware stack levels required when called:    8
 10776 ;; This function calls:
 10777 ;;		_move_window
 10778 ;; This function is called by:
 10779 ;;		_remove_chain
 10780 ;;		_create_chain
 10781 ;; This function uses a non-reentrant model
 10782 ;;
 10783                           
 10784                           	psect	text29
 10785  0023DA                     __ptext29:
 10786                           	opt callstack 0
 10787  0023DA                     _put_fat:
 10788                           	opt callstack 18
 10789                           
 10790                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;incstack = 0
 10794  0023DA  5040               	movf	put_fat@clst+3,w,c
 10795  0023DC  103F               	iorwf	put_fat@clst+2,w,c
 10796  0023DE  103E               	iorwf	put_fat@clst+1,w,c
 10797  0023E0  E104               	bnz	u5650
 10798  0023E2  0E02               	movlw	2
 10799  0023E4  5C3D               	subwf	put_fat@clst,w,c
 10800  0023E6  A0D8               	btfss	status,0,c
 10801  0023E8  D010               	goto	u5660
 10802  0023EA                     u5650:
 10803  0023EA  EE20 F012          	lfsr	2,18
 10804  0023EE  503B               	movf	put_fat@fs,w,c
 10805  0023F0  26D9               	addwf	fsr2l,f,c
 10806  0023F2  503C               	movf	put_fat@fs+1,w,c
 10807  0023F4  22DA               	addwfc	fsr2h,f,c
 10808  0023F6  50DE               	movf	postinc2,w,c
 10809  0023F8  5C3D               	subwf	put_fat@clst,w,c
 10810  0023FA  50DE               	movf	postinc2,w,c
 10811  0023FC  583E               	subwfb	put_fat@clst+1,w,c
 10812  0023FE  50DE               	movf	postinc2,w,c
 10813  002400  583F               	subwfb	put_fat@clst+2,w,c
 10814  002402  50DE               	movf	postinc2,w,c
 10815  002404  5840               	subwfb	put_fat@clst+3,w,c
 10816  002406  A0D8               	btfss	status,0,c
 10817  002408  D1E5               	goto	l4808
 10818  00240A                     u5660:
 10819                           
 10820                           ;ff.c: 885:   res = FR_INT_ERR;
 10821  00240A  0E02               	movlw	2
 10822  00240C  6E53               	movwf	put_fat@res,c
 10823                           
 10824                           ;ff.c: 887:  } else {
 10825  00240E  D1F8               	goto	l4810
 10826  002410                     l278:
 10827                           
 10828                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
 10829  002410  C03D  F051         	movff	put_fat@clst,put_fat@bc
 10830  002414  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
 10831  002418  90D8               	bcf	status,0,c
 10832  00241A  3052               	rrcf	put_fat@bc+1,w,c
 10833  00241C  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10834  00241E  3051               	rrcf	put_fat@bc,w,c
 10835  002420  6E45               	movwf	??_put_fat& (0+255),c
 10836  002422  5045               	movf	??_put_fat,w,c
 10837  002424  2651               	addwf	put_fat@bc,f,c
 10838  002426  5046               	movf	??_put_fat+1,w,c
 10839  002428  2252               	addwfc	put_fat@bc+1,f,c
 10840                           
 10841                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 10842  00242A  C03B  F030         	movff	put_fat@fs,move_window@fs
 10843  00242E  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 10844  002432  EE20 F01E          	lfsr	2,30
 10845  002436  503B               	movf	put_fat@fs,w,c
 10846  002438  26D9               	addwf	fsr2l,f,c
 10847  00243A  503C               	movf	put_fat@fs+1,w,c
 10848  00243C  22DA               	addwfc	fsr2h,f,c
 10849  00243E  CFDE F045          	movff	postinc2,??_put_fat
 10850  002442  CFDE F046          	movff	postinc2,??_put_fat+1
 10851  002446  CFDE F047          	movff	postinc2,??_put_fat+2
 10852  00244A  CFDE F048          	movff	postinc2,??_put_fat+3
 10853  00244E  C051  F049         	movff	put_fat@bc,??_put_fat+4
 10854  002452  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 10855  002456  0E09               	movlw	9
 10856  002458  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 10857  00245A                     u5675:
 10858  00245A  90D8               	bcf	status,0,c
 10859  00245C  324A               	rrcf	??_put_fat+5,f,c
 10860  00245E  3249               	rrcf	??_put_fat+4,f,c
 10861  002460  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 10862  002462  D7FB               	goto	u5675
 10863  002464  5049               	movf	??_put_fat+4,w,c
 10864  002466  2445               	addwf	??_put_fat,w,c
 10865  002468  6E32               	movwf	move_window@sector,c
 10866  00246A  504A               	movf	??_put_fat+5,w,c
 10867  00246C  2046               	addwfc	??_put_fat+1,w,c
 10868  00246E  6E33               	movwf	move_window@sector+1,c
 10869  002470  0E00               	movlw	0
 10870  002472  2047               	addwfc	??_put_fat+2,w,c
 10871  002474  6E34               	movwf	move_window@sector+2,c
 10872  002476  0E00               	movlw	0
 10873  002478  2048               	addwfc	??_put_fat+3,w,c
 10874  00247A  6E35               	movwf	move_window@sector+3,c
 10875  00247C  ECD8  F02A         	call	_move_window	;wreg free
 10876  002480  6E53               	movwf	put_fat@res,c
 10877                           
 10878                           ;ff.c: 892:    if (res != FR_OK) break;
 10879  002482  5053               	movf	put_fat@res,w,c
 10880  002484  A4D8               	btfss	status,2,c
 10881  002486  D1BC               	goto	l4810
 10882                           
 10883                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
 10884  002488  0EFF               	movlw	255
 10885  00248A  6E45               	movwf	??_put_fat& (0+255),c
 10886  00248C  0E01               	movlw	1
 10887  00248E  6E46               	movwf	(??_put_fat+1)& (0+255),c
 10888  002490  C051  F047         	movff	put_fat@bc,??_put_fat+2
 10889  002494  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 10890  002498  5045               	movf	??_put_fat,w,c
 10891  00249A  1647               	andwf	??_put_fat+2,f,c
 10892  00249C  5046               	movf	??_put_fat+1,w,c
 10893  00249E  1648               	andwf	??_put_fat+3,f,c
 10894  0024A0  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 10895  0024A4  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 10896  0024A8  5047               	movf	??_put_fat+2,w,c
 10897  0024AA  2649               	addwf	??_put_fat+4,f,c
 10898  0024AC  5048               	movf	??_put_fat+3,w,c
 10899  0024AE  224A               	addwfc	??_put_fat+5,f,c
 10900  0024B0  0E2E               	movlw	46
 10901  0024B2  2449               	addwf	??_put_fat+4,w,c
 10902  0024B4  6E54               	movwf	put_fat@p,c
 10903  0024B6  0E00               	movlw	0
 10904  0024B8  204A               	addwfc	??_put_fat+5,w,c
 10905  0024BA  6E55               	movwf	put_fat@p+1,c
 10906  0024BC  4A51               	infsnz	put_fat@bc,f,c
 10907  0024BE  2A52               	incf	put_fat@bc+1,f,c
 10908                           
 10909                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 10910  0024C0  B03D               	btfsc	put_fat@clst,0,c
 10911  0024C2  D004               	goto	l4762
 10912  0024C4  C041  F04D         	movff	put_fat@val,_put_fat$400
 10913  0024C8  6A4E               	clrf	_put_fat$400+1,c
 10914  0024CA  D01A               	goto	l4764
 10915  0024CC                     l4762:
 10916  0024CC  5041               	movf	put_fat@val,w,c
 10917  0024CE  6E45               	movwf	??_put_fat& (0+255),c
 10918  0024D0  6A46               	clrf	(??_put_fat+1)& (0+255),c
 10919  0024D2  3A45               	swapf	??_put_fat,f,c
 10920  0024D4  3A46               	swapf	??_put_fat+1,f,c
 10921  0024D6  0EF0               	movlw	240
 10922  0024D8  1646               	andwf	??_put_fat+1,f,c
 10923  0024DA  5045               	movf	??_put_fat,w,c
 10924  0024DC  0B0F               	andlw	15
 10925  0024DE  1246               	iorwf	??_put_fat+1,f,c
 10926  0024E0  0EF0               	movlw	240
 10927  0024E2  1645               	andwf	??_put_fat,f,c
 10928  0024E4  C054  FFD9         	movff	put_fat@p,fsr2l
 10929  0024E8  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10930  0024EC  50DF               	movf	indf2,w,c
 10931  0024EE  0B0F               	andlw	15
 10932  0024F0  6E47               	movwf	(??_put_fat+2)& (0+255),c
 10933  0024F2  6A48               	clrf	(??_put_fat+3)& (0+255),c
 10934  0024F4  5045               	movf	??_put_fat,w,c
 10935  0024F6  1047               	iorwf	??_put_fat+2,w,c
 10936  0024F8  6E4D               	movwf	_put_fat$400,c
 10937  0024FA  5046               	movf	??_put_fat+1,w,c
 10938  0024FC  1048               	iorwf	??_put_fat+3,w,c
 10939  0024FE  6E4E               	movwf	_put_fat$400+1,c
 10940  002500                     l4764:
 10941  002500  C054  FFD9         	movff	put_fat@p,fsr2l
 10942  002504  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10943  002508  C04D  FFDF         	movff	_put_fat$400,indf2
 10944                           
 10945                           ;ff.c: 895:    fs->wflag = 1;
 10946  00250C  EE20 F004          	lfsr	2,4
 10947  002510  503B               	movf	put_fat@fs,w,c
 10948  002512  26D9               	addwf	fsr2l,f,c
 10949  002514  503C               	movf	put_fat@fs+1,w,c
 10950  002516  22DA               	addwfc	fsr2h,f,c
 10951  002518  0E01               	movlw	1
 10952  00251A  6EDF               	movwf	indf2,c
 10953                           
 10954                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
 10955  00251C  C03B  F030         	movff	put_fat@fs,move_window@fs
 10956  002520  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 10957  002524  EE20 F01E          	lfsr	2,30
 10958  002528  503B               	movf	put_fat@fs,w,c
 10959  00252A  26D9               	addwf	fsr2l,f,c
 10960  00252C  503C               	movf	put_fat@fs+1,w,c
 10961  00252E  22DA               	addwfc	fsr2h,f,c
 10962  002530  CFDE F045          	movff	postinc2,??_put_fat
 10963  002534  CFDE F046          	movff	postinc2,??_put_fat+1
 10964  002538  CFDE F047          	movff	postinc2,??_put_fat+2
 10965  00253C  CFDE F048          	movff	postinc2,??_put_fat+3
 10966  002540  C051  F049         	movff	put_fat@bc,??_put_fat+4
 10967  002544  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
 10968  002548  0E09               	movlw	9
 10969  00254A  6E4B               	movwf	(??_put_fat+6)& (0+255),c
 10970  00254C                     u5705:
 10971  00254C  90D8               	bcf	status,0,c
 10972  00254E  324A               	rrcf	??_put_fat+5,f,c
 10973  002550  3249               	rrcf	??_put_fat+4,f,c
 10974  002552  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
 10975  002554  D7FB               	goto	u5705
 10976  002556  5049               	movf	??_put_fat+4,w,c
 10977  002558  2445               	addwf	??_put_fat,w,c
 10978  00255A  6E32               	movwf	move_window@sector,c
 10979  00255C  504A               	movf	??_put_fat+5,w,c
 10980  00255E  2046               	addwfc	??_put_fat+1,w,c
 10981  002560  6E33               	movwf	move_window@sector+1,c
 10982  002562  0E00               	movlw	0
 10983  002564  2047               	addwfc	??_put_fat+2,w,c
 10984  002566  6E34               	movwf	move_window@sector+2,c
 10985  002568  0E00               	movlw	0
 10986  00256A  2048               	addwfc	??_put_fat+3,w,c
 10987  00256C  6E35               	movwf	move_window@sector+3,c
 10988  00256E  ECD8  F02A         	call	_move_window	;wreg free
 10989  002572  6E53               	movwf	put_fat@res,c
 10990                           
 10991                           ;ff.c: 897:    if (res != FR_OK) break;
 10992  002574  5053               	movf	put_fat@res,w,c
 10993  002576  A4D8               	btfss	status,2,c
 10994  002578  D143               	goto	l4810
 10995                           
 10996                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
 10997  00257A  0EFF               	movlw	255
 10998  00257C  6E45               	movwf	??_put_fat& (0+255),c
 10999  00257E  0E01               	movlw	1
 11000  002580  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11001  002582  C051  F047         	movff	put_fat@bc,??_put_fat+2
 11002  002586  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
 11003  00258A  5045               	movf	??_put_fat,w,c
 11004  00258C  1647               	andwf	??_put_fat+2,f,c
 11005  00258E  5046               	movf	??_put_fat+1,w,c
 11006  002590  1648               	andwf	??_put_fat+3,f,c
 11007  002592  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11008  002596  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11009  00259A  5047               	movf	??_put_fat+2,w,c
 11010  00259C  2649               	addwf	??_put_fat+4,f,c
 11011  00259E  5048               	movf	??_put_fat+3,w,c
 11012  0025A0  224A               	addwfc	??_put_fat+5,f,c
 11013  0025A2  0E2E               	movlw	46
 11014  0025A4  2449               	addwf	??_put_fat+4,w,c
 11015  0025A6  6E54               	movwf	put_fat@p,c
 11016  0025A8  0E00               	movlw	0
 11017  0025AA  204A               	addwfc	??_put_fat+5,w,c
 11018  0025AC  6E55               	movwf	put_fat@p+1,c
 11019                           
 11020                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
 11021  0025AE  B03D               	btfsc	put_fat@clst,0,c
 11022  0025B0  D01B               	goto	l4780
 11023  0025B2  C041  F045         	movff	put_fat@val,??_put_fat
 11024  0025B6  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11025  0025BA  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11026  0025BE  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11027  0025C2  C046  F045         	movff	??_put_fat+1,??_put_fat
 11028  0025C6  C047  F046         	movff	??_put_fat+2,??_put_fat+1
 11029  0025CA  C048  F047         	movff	??_put_fat+3,??_put_fat+2
 11030  0025CE  6A48               	clrf	??_put_fat+3,c
 11031  0025D0  0E0F               	movlw	15
 11032  0025D2  1645               	andwf	??_put_fat,f,c
 11033  0025D4  C054  FFD9         	movff	put_fat@p,fsr2l
 11034  0025D8  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11035  0025DC  50DF               	movf	indf2,w,c
 11036  0025DE  0BF0               	andlw	240
 11037  0025E0  1045               	iorwf	??_put_fat,w,c
 11038  0025E2  6E49               	movwf	(??_put_fat+4)& (0+255),c
 11039  0025E4  5049               	movf	??_put_fat+4,w,c
 11040  0025E6  D012               	goto	L12
 11041  0025E8                     l4780:
 11042  0025E8  C041  F045         	movff	put_fat@val,??_put_fat
 11043  0025EC  C042  F046         	movff	put_fat@val+1,??_put_fat+1
 11044  0025F0  C043  F047         	movff	put_fat@val+2,??_put_fat+2
 11045  0025F4  C044  F048         	movff	put_fat@val+3,??_put_fat+3
 11046  0025F8  0E05               	movlw	5
 11047  0025FA  D005               	goto	u5730
 11048  0025FC                     u5735:
 11049  0025FC  90D8               	bcf	status,0,c
 11050  0025FE  3248               	rrcf	??_put_fat+3,f,c
 11051  002600  3247               	rrcf	??_put_fat+2,f,c
 11052  002602  3246               	rrcf	??_put_fat+1,f,c
 11053  002604  3245               	rrcf	??_put_fat,f,c
 11054  002606                     u5730:
 11055  002606  2EE8               	decfsz	wreg,f,c
 11056  002608  D7F9               	goto	u5735
 11057  00260A  5045               	movf	??_put_fat,w,c
 11058  00260C                     L12:
 11059  00260C  6E4F               	movwf	_put_fat$401,c
 11060  00260E  6A50               	clrf	_put_fat$401+1,c
 11061  002610  C054  FFD9         	movff	put_fat@p,fsr2l
 11062  002614  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11063  002618  C04F  FFDF         	movff	_put_fat$401,indf2
 11064  00261C  D0D2               	goto	l4804
 11065  00261E                     l4784:
 11066                           
 11067                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
 11068  00261E  C03B  F030         	movff	put_fat@fs,move_window@fs
 11069  002622  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11070  002626  EE20 F01E          	lfsr	2,30
 11071  00262A  503B               	movf	put_fat@fs,w,c
 11072  00262C  26D9               	addwf	fsr2l,f,c
 11073  00262E  503C               	movf	put_fat@fs+1,w,c
 11074  002630  22DA               	addwfc	fsr2h,f,c
 11075  002632  CFDE F045          	movff	postinc2,??_put_fat
 11076  002636  CFDE F046          	movff	postinc2,??_put_fat+1
 11077  00263A  CFDE F047          	movff	postinc2,??_put_fat+2
 11078  00263E  CFDE F048          	movff	postinc2,??_put_fat+3
 11079  002642  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11080  002646  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11081  00264A  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11082  00264E  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11083  002652  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
 11084  002656  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
 11085  00265A  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
 11086  00265E  6A4C               	clrf	??_put_fat+7,c
 11087  002660  5045               	movf	??_put_fat,w,c
 11088  002662  2449               	addwf	??_put_fat+4,w,c
 11089  002664  6E32               	movwf	move_window@sector,c
 11090  002666  5046               	movf	??_put_fat+1,w,c
 11091  002668  204A               	addwfc	??_put_fat+5,w,c
 11092  00266A  6E33               	movwf	move_window@sector+1,c
 11093  00266C  5047               	movf	??_put_fat+2,w,c
 11094  00266E  204B               	addwfc	??_put_fat+6,w,c
 11095  002670  6E34               	movwf	move_window@sector+2,c
 11096  002672  5048               	movf	??_put_fat+3,w,c
 11097  002674  204C               	addwfc	??_put_fat+7,w,c
 11098  002676  6E35               	movwf	move_window@sector+3,c
 11099  002678  ECD8  F02A         	call	_move_window	;wreg free
 11100  00267C  6E53               	movwf	put_fat@res,c
 11101                           
 11102                           ;ff.c: 905:    if (res != FR_OK) break;
 11103  00267E  5053               	movf	put_fat@res,w,c
 11104  002680  A4D8               	btfss	status,2,c
 11105  002682  D0BE               	goto	l4810
 11106                           
 11107                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
 11108  002684  0EFF               	movlw	255
 11109  002686  6E45               	movwf	??_put_fat& (0+255),c
 11110  002688  0E01               	movlw	1
 11111  00268A  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11112  00268C  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11113  002690  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11114  002694  90D8               	bcf	status,0,c
 11115  002696  3647               	rlcf	??_put_fat+2,f,c
 11116  002698  3648               	rlcf	??_put_fat+3,f,c
 11117  00269A  5045               	movf	??_put_fat,w,c
 11118  00269C  1647               	andwf	??_put_fat+2,f,c
 11119  00269E  5046               	movf	??_put_fat+1,w,c
 11120  0026A0  1648               	andwf	??_put_fat+3,f,c
 11121  0026A2  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11122  0026A6  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11123  0026AA  5047               	movf	??_put_fat+2,w,c
 11124  0026AC  2649               	addwf	??_put_fat+4,f,c
 11125  0026AE  5048               	movf	??_put_fat+3,w,c
 11126  0026B0  224A               	addwfc	??_put_fat+5,f,c
 11127  0026B2  0E2E               	movlw	46
 11128  0026B4  2449               	addwf	??_put_fat+4,w,c
 11129  0026B6  6E54               	movwf	put_fat@p,c
 11130  0026B8  0E00               	movlw	0
 11131  0026BA  204A               	addwfc	??_put_fat+5,w,c
 11132  0026BC  6E55               	movwf	put_fat@p+1,c
 11133                           
 11134                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
 11135  0026BE  C054  FFD9         	movff	put_fat@p,fsr2l
 11136  0026C2  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11137  0026C6  C041  FFDE         	movff	put_fat@val,postinc2
 11138  0026CA  C042  FFDD         	movff	put_fat@val+1,postdec2
 11139  0026CE  D079               	goto	l4804
 11140  0026D0                     l4794:
 11141                           
 11142                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
 11143  0026D0  C03B  F030         	movff	put_fat@fs,move_window@fs
 11144  0026D4  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
 11145  0026D8  EE20 F01E          	lfsr	2,30
 11146  0026DC  503B               	movf	put_fat@fs,w,c
 11147  0026DE  26D9               	addwf	fsr2l,f,c
 11148  0026E0  503C               	movf	put_fat@fs+1,w,c
 11149  0026E2  22DA               	addwfc	fsr2h,f,c
 11150  0026E4  CFDE F045          	movff	postinc2,??_put_fat
 11151  0026E8  CFDE F046          	movff	postinc2,??_put_fat+1
 11152  0026EC  CFDE F047          	movff	postinc2,??_put_fat+2
 11153  0026F0  CFDE F048          	movff	postinc2,??_put_fat+3
 11154  0026F4  C03D  F049         	movff	put_fat@clst,??_put_fat+4
 11155  0026F8  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
 11156  0026FC  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
 11157  002700  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
 11158  002704  0E08               	movlw	8
 11159  002706  D005               	goto	u5750
 11160  002708                     u5755:
 11161  002708  90D8               	bcf	status,0,c
 11162  00270A  324C               	rrcf	??_put_fat+7,f,c
 11163  00270C  324B               	rrcf	??_put_fat+6,f,c
 11164  00270E  324A               	rrcf	??_put_fat+5,f,c
 11165  002710  3249               	rrcf	??_put_fat+4,f,c
 11166  002712                     u5750:
 11167  002712  2EE8               	decfsz	wreg,f,c
 11168  002714  D7F9               	goto	u5755
 11169  002716  5045               	movf	??_put_fat,w,c
 11170  002718  2449               	addwf	??_put_fat+4,w,c
 11171  00271A  6E32               	movwf	move_window@sector,c
 11172  00271C  5046               	movf	??_put_fat+1,w,c
 11173  00271E  204A               	addwfc	??_put_fat+5,w,c
 11174  002720  6E33               	movwf	move_window@sector+1,c
 11175  002722  5047               	movf	??_put_fat+2,w,c
 11176  002724  204B               	addwfc	??_put_fat+6,w,c
 11177  002726  6E34               	movwf	move_window@sector+2,c
 11178  002728  5048               	movf	??_put_fat+3,w,c
 11179  00272A  204C               	addwfc	??_put_fat+7,w,c
 11180  00272C  6E35               	movwf	move_window@sector+3,c
 11181  00272E  ECD8  F02A         	call	_move_window	;wreg free
 11182  002732  6E53               	movwf	put_fat@res,c
 11183                           
 11184                           ;ff.c: 913:    if (res != FR_OK) break;
 11185  002734  5053               	movf	put_fat@res,w,c
 11186  002736  A4D8               	btfss	status,2,c
 11187  002738  D063               	goto	l4810
 11188                           
 11189                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
 11190  00273A  0EFF               	movlw	255
 11191  00273C  6E45               	movwf	??_put_fat& (0+255),c
 11192  00273E  0E01               	movlw	1
 11193  002740  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11194  002742  C03D  F047         	movff	put_fat@clst,??_put_fat+2
 11195  002746  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
 11196  00274A  90D8               	bcf	status,0,c
 11197  00274C  3647               	rlcf	??_put_fat+2,f,c
 11198  00274E  3648               	rlcf	??_put_fat+3,f,c
 11199  002750  90D8               	bcf	status,0,c
 11200  002752  3647               	rlcf	??_put_fat+2,f,c
 11201  002754  3648               	rlcf	??_put_fat+3,f,c
 11202  002756  5045               	movf	??_put_fat,w,c
 11203  002758  1647               	andwf	??_put_fat+2,f,c
 11204  00275A  5046               	movf	??_put_fat+1,w,c
 11205  00275C  1648               	andwf	??_put_fat+3,f,c
 11206  00275E  C03B  F049         	movff	put_fat@fs,??_put_fat+4
 11207  002762  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
 11208  002766  5047               	movf	??_put_fat+2,w,c
 11209  002768  2649               	addwf	??_put_fat+4,f,c
 11210  00276A  5048               	movf	??_put_fat+3,w,c
 11211  00276C  224A               	addwfc	??_put_fat+5,f,c
 11212  00276E  0E2E               	movlw	46
 11213  002770  2449               	addwf	??_put_fat+4,w,c
 11214  002772  6E54               	movwf	put_fat@p,c
 11215  002774  0E00               	movlw	0
 11216  002776  204A               	addwfc	??_put_fat+5,w,c
 11217  002778  6E55               	movwf	put_fat@p+1,c
 11218                           
 11219                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
 11220  00277A  C054  FFD9         	movff	put_fat@p,fsr2l
 11221  00277E  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11222  002782  0E00               	movlw	0
 11223  002784  14DE               	andwf	postinc2,w,c
 11224  002786  6E45               	movwf	??_put_fat& (0+255),c
 11225  002788  0E00               	movlw	0
 11226  00278A  14DE               	andwf	postinc2,w,c
 11227  00278C  6E46               	movwf	(??_put_fat+1)& (0+255),c
 11228  00278E  0E00               	movlw	0
 11229  002790  14DE               	andwf	postinc2,w,c
 11230  002792  6E47               	movwf	(??_put_fat+2)& (0+255),c
 11231  002794  0EF0               	movlw	240
 11232  002796  14DE               	andwf	postinc2,w,c
 11233  002798  6E48               	movwf	(??_put_fat+3)& (0+255),c
 11234  00279A  5045               	movf	??_put_fat,w,c
 11235  00279C  1241               	iorwf	put_fat@val,f,c
 11236  00279E  5046               	movf	??_put_fat+1,w,c
 11237  0027A0  1242               	iorwf	put_fat@val+1,f,c
 11238  0027A2  5047               	movf	??_put_fat+2,w,c
 11239  0027A4  1243               	iorwf	put_fat@val+2,f,c
 11240  0027A6  5048               	movf	??_put_fat+3,w,c
 11241  0027A8  1244               	iorwf	put_fat@val+3,f,c
 11242                           
 11243                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 11244  0027AA  C054  FFD9         	movff	put_fat@p,fsr2l
 11245  0027AE  C055  FFDA         	movff	put_fat@p+1,fsr2h
 11246  0027B2  C041  FFDE         	movff	put_fat@val,postinc2
 11247  0027B6  C042  FFDE         	movff	put_fat@val+1,postinc2
 11248  0027BA  C043  FFDE         	movff	put_fat@val+2,postinc2
 11249  0027BE  C044  FFDE         	movff	put_fat@val+3,postinc2
 11250  0027C2                     l4804:
 11251                           
 11252                           ;ff.c: 917:    fs->wflag = 1;
 11253  0027C2  EE20 F004          	lfsr	2,4
 11254  0027C6  503B               	movf	put_fat@fs,w,c
 11255  0027C8  26D9               	addwf	fsr2l,f,c
 11256  0027CA  503C               	movf	put_fat@fs+1,w,c
 11257  0027CC  22DA               	addwfc	fsr2h,f,c
 11258  0027CE  0E01               	movlw	1
 11259  0027D0  6EDF               	movwf	indf2,c
 11260                           
 11261                           ;ff.c: 918:    break;
 11262  0027D2  D016               	goto	l4810
 11263  0027D4                     l4808:
 11264  0027D4  C03B  FFD9         	movff	put_fat@fs,fsr2l
 11265  0027D8  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 11266  0027DC  50DF               	movf	indf2,w,c
 11267  0027DE  6E45               	movwf	??_put_fat& (0+255),c
 11268  0027E0  6A46               	clrf	(??_put_fat+1)& (0+255),c
 11269                           
 11270                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11271                           ; Switch size 1, requested type "simple"
 11272                           ; Number of cases is 1, Range of values is 0 to 0
 11273                           ; switch strategies available:
 11274                           ; Name         Instructions Cycles
 11275                           ; simple_byte            4     3 (average)
 11276                           ;	Chosen strategy is simple_byte
 11277  0027E2  5046               	movf	??_put_fat+1,w,c
 11278  0027E4  0A00               	xorlw	0	; case 0
 11279  0027E6  A4D8               	btfss	status,2,c
 11280  0027E8  D610               	goto	u5660
 11281                           
 11282                           ; Switch size 1, requested type "simple"
 11283                           ; Number of cases is 3, Range of values is 1 to 3
 11284                           ; switch strategies available:
 11285                           ; Name         Instructions Cycles
 11286                           ; simple_byte           10     6 (average)
 11287                           ;	Chosen strategy is simple_byte
 11288  0027EA  5045               	movf	??_put_fat,w,c
 11289  0027EC  0A01               	xorlw	1	; case 1
 11290  0027EE  B4D8               	btfsc	status,2,c
 11291  0027F0  D60F               	goto	l278
 11292  0027F2  0A03               	xorlw	3	; case 2
 11293  0027F4  B4D8               	btfsc	status,2,c
 11294  0027F6  D713               	goto	l4784
 11295  0027F8  0A01               	xorlw	1	; case 3
 11296  0027FA  B4D8               	btfsc	status,2,c
 11297  0027FC  D769               	goto	l4794
 11298  0027FE  D605               	goto	u5660
 11299  002800                     l4810:
 11300                           
 11301                           ;ff.c: 925:  return res;
 11302  002800  5053               	movf	put_fat@res,w,c
 11303  002802  0012               	return		;funcret
 11304  002804                     __end_of_put_fat:
 11305                           	opt callstack 0
 11306                           
 11307 ;; *************** function _get_fat *****************
 11308 ;; Defined at:
 11309 ;;		line 818 in file "ff.c"
 11310 ;; Parameters:    Size  Location     Type
 11311 ;;  fs              2   58[COMRAM] PTR struct .
 11312 ;;		 -> FatFs(558), NULL(0), 
 11313 ;;  clst            4   60[COMRAM] unsigned long 
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;  val             4   75[COMRAM] unsigned long 
 11316 ;;  bc              2   83[COMRAM] unsigned short 
 11317 ;;  p               2   81[COMRAM] PTR unsigned char 
 11318 ;;		 -> FatFs.win(512), FatFs(558), NULL(0), 
 11319 ;;  wc              2   79[COMRAM] unsigned short 
 11320 ;; Return value:  Size  Location     Type
 11321 ;;                  4   58[COMRAM] unsigned long 
 11322 ;; Registers used:
 11323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11329 ;;      Params:         6       0       0       0       0       0       0       0       0
 11330 ;;      Locals:        12       0       0       0       0       0       0       0       0
 11331 ;;      Temps:          9       0       0       0       0       0       0       0       0
 11332 ;;      Totals:        27       0       0       0       0       0       0       0       0
 11333 ;;Total ram usage:       27 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    8
 11336 ;; This function calls:
 11337 ;;		_move_window
 11338 ;; This function is called by:
 11339 ;;		_remove_chain
 11340 ;;		_create_chain
 11341 ;;		_dir_sdi
 11342 ;;		_dir_next
 11343 ;;		_f_lseek
 11344 ;;		_f_read
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           	psect	text30
 11349  002C0A                     __ptext30:
 11350                           	opt callstack 0
 11351  002C0A                     _get_fat:
 11352                           	opt callstack 18
 11353                           
 11354                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 11355                           
 11356                           ;incstack = 0
 11357  002C0A  5040               	movf	get_fat@clst+3,w,c
 11358  002C0C  103F               	iorwf	get_fat@clst+2,w,c
 11359  002C0E  103E               	iorwf	get_fat@clst+1,w,c
 11360  002C10  E104               	bnz	u5540
 11361  002C12  0E02               	movlw	2
 11362  002C14  5C3D               	subwf	get_fat@clst,w,c
 11363  002C16  A0D8               	btfss	status,0,c
 11364  002C18  D010               	goto	u5550
 11365  002C1A                     u5540:
 11366  002C1A  EE20 F012          	lfsr	2,18
 11367  002C1E  503B               	movf	get_fat@fs,w,c
 11368  002C20  26D9               	addwf	fsr2l,f,c
 11369  002C22  503C               	movf	get_fat@fs+1,w,c
 11370  002C24  22DA               	addwfc	fsr2h,f,c
 11371  002C26  50DE               	movf	postinc2,w,c
 11372  002C28  5C3D               	subwf	get_fat@clst,w,c
 11373  002C2A  50DE               	movf	postinc2,w,c
 11374  002C2C  583E               	subwfb	get_fat@clst+1,w,c
 11375  002C2E  50DE               	movf	postinc2,w,c
 11376  002C30  583F               	subwfb	get_fat@clst+2,w,c
 11377  002C32  50DE               	movf	postinc2,w,c
 11378  002C34  5840               	subwfb	get_fat@clst+3,w,c
 11379  002C36  A0D8               	btfss	status,0,c
 11380  002C38  D008               	goto	l252
 11381  002C3A                     u5550:
 11382                           
 11383                           ;ff.c: 829:   val = 1;
 11384  002C3A  0E01               	movlw	1
 11385  002C3C  6E4C               	movwf	get_fat@val,c
 11386  002C3E  0E00               	movlw	0
 11387  002C40  6E4D               	movwf	get_fat@val+1,c
 11388  002C42  0E00               	movlw	0
 11389  002C44  6E4E               	movwf	get_fat@val+2,c
 11390  002C46  0E00               	movlw	0
 11391  002C48  D190               	goto	L14
 11392  002C4A                     l252:
 11393                           
 11394                           ;ff.c: 832:   val = 0xFFFFFFFF;
 11395  002C4A  684C               	setf	get_fat@val,c
 11396  002C4C  684D               	setf	get_fat@val+1,c
 11397  002C4E  684E               	setf	get_fat@val+2,c
 11398  002C50  684F               	setf	get_fat@val+3,c
 11399                           
 11400                           ;ff.c: 834:   switch (fs->fs_type) {
 11401  002C52  D18D               	goto	l4734
 11402  002C54                     l257:
 11403                           
 11404                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 11405  002C54  C03D  F054         	movff	get_fat@clst,get_fat@bc
 11406  002C58  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 11407  002C5C  90D8               	bcf	status,0,c
 11408  002C5E  3055               	rrcf	get_fat@bc+1,w,c
 11409  002C60  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11410  002C62  3054               	rrcf	get_fat@bc,w,c
 11411  002C64  6E41               	movwf	??_get_fat& (0+255),c
 11412  002C66  5041               	movf	??_get_fat,w,c
 11413  002C68  2654               	addwf	get_fat@bc,f,c
 11414  002C6A  5042               	movf	??_get_fat+1,w,c
 11415  002C6C  2255               	addwfc	get_fat@bc+1,f,c
 11416                           
 11417                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11418  002C6E  C03B  F030         	movff	get_fat@fs,move_window@fs
 11419  002C72  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11420  002C76  EE20 F01E          	lfsr	2,30
 11421  002C7A  503B               	movf	get_fat@fs,w,c
 11422  002C7C  26D9               	addwf	fsr2l,f,c
 11423  002C7E  503C               	movf	get_fat@fs+1,w,c
 11424  002C80  22DA               	addwfc	fsr2h,f,c
 11425  002C82  CFDE F041          	movff	postinc2,??_get_fat
 11426  002C86  CFDE F042          	movff	postinc2,??_get_fat+1
 11427  002C8A  CFDE F043          	movff	postinc2,??_get_fat+2
 11428  002C8E  CFDE F044          	movff	postinc2,??_get_fat+3
 11429  002C92  C054  F045         	movff	get_fat@bc,??_get_fat+4
 11430  002C96  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 11431  002C9A  0E09               	movlw	9
 11432  002C9C  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11433  002C9E                     u5565:
 11434  002C9E  90D8               	bcf	status,0,c
 11435  002CA0  3246               	rrcf	??_get_fat+5,f,c
 11436  002CA2  3245               	rrcf	??_get_fat+4,f,c
 11437  002CA4  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 11438  002CA6  D7FB               	goto	u5565
 11439  002CA8  5045               	movf	??_get_fat+4,w,c
 11440  002CAA  2441               	addwf	??_get_fat,w,c
 11441  002CAC  6E32               	movwf	move_window@sector,c
 11442  002CAE  5046               	movf	??_get_fat+5,w,c
 11443  002CB0  2042               	addwfc	??_get_fat+1,w,c
 11444  002CB2  6E33               	movwf	move_window@sector+1,c
 11445  002CB4  0E00               	movlw	0
 11446  002CB6  2043               	addwfc	??_get_fat+2,w,c
 11447  002CB8  6E34               	movwf	move_window@sector+2,c
 11448  002CBA  0E00               	movlw	0
 11449  002CBC  2044               	addwfc	??_get_fat+3,w,c
 11450  002CBE  6E35               	movwf	move_window@sector+3,c
 11451  002CC0  ECD8  F02A         	call	_move_window	;wreg free
 11452  002CC4  0900               	iorlw	0
 11453  002CC6  A4D8               	btfss	status,2,c
 11454  002CC8  D168               	goto	l255
 11455                           
 11456                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 11457  002CCA  0EFF               	movlw	255
 11458  002CCC  6E41               	movwf	??_get_fat& (0+255),c
 11459  002CCE  0E01               	movlw	1
 11460  002CD0  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11461  002CD2  C054  F043         	movff	get_fat@bc,??_get_fat+2
 11462  002CD6  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 11463  002CDA  5041               	movf	??_get_fat,w,c
 11464  002CDC  1643               	andwf	??_get_fat+2,f,c
 11465  002CDE  5042               	movf	??_get_fat+1,w,c
 11466  002CE0  1644               	andwf	??_get_fat+3,f,c
 11467  002CE2  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11468  002CE6  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11469  002CEA  5043               	movf	??_get_fat+2,w,c
 11470  002CEC  2645               	addwf	??_get_fat+4,f,c
 11471  002CEE  5044               	movf	??_get_fat+3,w,c
 11472  002CF0  2246               	addwfc	??_get_fat+5,f,c
 11473  002CF2  0E2E               	movlw	46
 11474  002CF4  2445               	addwf	??_get_fat+4,w,c
 11475  002CF6  6ED9               	movwf	fsr2l,c
 11476  002CF8  0E00               	movlw	0
 11477  002CFA  2046               	addwfc	??_get_fat+5,w,c
 11478  002CFC  6EDA               	movwf	fsr2h,c
 11479  002CFE  50DF               	movf	indf2,w,c
 11480  002D00  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11481  002D02  5047               	movf	??_get_fat+6,w,c
 11482  002D04  6E50               	movwf	get_fat@wc,c
 11483  002D06  6A51               	clrf	get_fat@wc+1,c
 11484  002D08  4A54               	infsnz	get_fat@bc,f,c
 11485  002D0A  2A55               	incf	get_fat@bc+1,f,c
 11486                           
 11487                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 11488  002D0C  C03B  F030         	movff	get_fat@fs,move_window@fs
 11489  002D10  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11490  002D14  EE20 F01E          	lfsr	2,30
 11491  002D18  503B               	movf	get_fat@fs,w,c
 11492  002D1A  26D9               	addwf	fsr2l,f,c
 11493  002D1C  503C               	movf	get_fat@fs+1,w,c
 11494  002D1E  22DA               	addwfc	fsr2h,f,c
 11495  002D20  CFDE F041          	movff	postinc2,??_get_fat
 11496  002D24  CFDE F042          	movff	postinc2,??_get_fat+1
 11497  002D28  CFDE F043          	movff	postinc2,??_get_fat+2
 11498  002D2C  CFDE F044          	movff	postinc2,??_get_fat+3
 11499  002D30  C054  F045         	movff	get_fat@bc,??_get_fat+4
 11500  002D34  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 11501  002D38  0E09               	movlw	9
 11502  002D3A  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11503  002D3C                     u5585:
 11504  002D3C  90D8               	bcf	status,0,c
 11505  002D3E  3246               	rrcf	??_get_fat+5,f,c
 11506  002D40  3245               	rrcf	??_get_fat+4,f,c
 11507  002D42  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 11508  002D44  D7FB               	goto	u5585
 11509  002D46  5045               	movf	??_get_fat+4,w,c
 11510  002D48  2441               	addwf	??_get_fat,w,c
 11511  002D4A  6E32               	movwf	move_window@sector,c
 11512  002D4C  5046               	movf	??_get_fat+5,w,c
 11513  002D4E  2042               	addwfc	??_get_fat+1,w,c
 11514  002D50  6E33               	movwf	move_window@sector+1,c
 11515  002D52  0E00               	movlw	0
 11516  002D54  2043               	addwfc	??_get_fat+2,w,c
 11517  002D56  6E34               	movwf	move_window@sector+2,c
 11518  002D58  0E00               	movlw	0
 11519  002D5A  2044               	addwfc	??_get_fat+3,w,c
 11520  002D5C  6E35               	movwf	move_window@sector+3,c
 11521  002D5E  ECD8  F02A         	call	_move_window	;wreg free
 11522  002D62  0900               	iorlw	0
 11523  002D64  A4D8               	btfss	status,2,c
 11524  002D66  D119               	goto	l255
 11525                           
 11526                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 11527  002D68  0EFF               	movlw	255
 11528  002D6A  6E41               	movwf	??_get_fat& (0+255),c
 11529  002D6C  0E01               	movlw	1
 11530  002D6E  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11531  002D70  C054  F043         	movff	get_fat@bc,??_get_fat+2
 11532  002D74  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 11533  002D78  5041               	movf	??_get_fat,w,c
 11534  002D7A  1643               	andwf	??_get_fat+2,f,c
 11535  002D7C  5042               	movf	??_get_fat+1,w,c
 11536  002D7E  1644               	andwf	??_get_fat+3,f,c
 11537  002D80  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11538  002D84  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11539  002D88  5043               	movf	??_get_fat+2,w,c
 11540  002D8A  2645               	addwf	??_get_fat+4,f,c
 11541  002D8C  5044               	movf	??_get_fat+3,w,c
 11542  002D8E  2246               	addwfc	??_get_fat+5,f,c
 11543  002D90  0E2E               	movlw	46
 11544  002D92  2445               	addwf	??_get_fat+4,w,c
 11545  002D94  6ED9               	movwf	fsr2l,c
 11546  002D96  0E00               	movlw	0
 11547  002D98  2046               	addwfc	??_get_fat+5,w,c
 11548  002D9A  6EDA               	movwf	fsr2h,c
 11549  002D9C  50DF               	movf	indf2,w,c
 11550  002D9E  6E47               	movwf	(??_get_fat+6)& (0+255),c
 11551  002DA0  5047               	movf	??_get_fat+6,w,c
 11552  002DA2  6E49               	movwf	(??_get_fat+8)& (0+255),c
 11553  002DA4  6A48               	clrf	(??_get_fat+7)& (0+255),c
 11554  002DA6  5048               	movf	??_get_fat+7,w,c
 11555  002DA8  1250               	iorwf	get_fat@wc,f,c
 11556  002DAA  5049               	movf	??_get_fat+8,w,c
 11557  002DAC  1251               	iorwf	get_fat@wc+1,f,c
 11558                           
 11559                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 11560  002DAE  B03D               	btfsc	get_fat@clst,0,c
 11561  002DB0  D007               	goto	l4712
 11562  002DB2  0EFF               	movlw	255
 11563  002DB4  1450               	andwf	get_fat@wc,w,c
 11564  002DB6  6E4A               	movwf	_get_fat$374,c
 11565  002DB8  0E0F               	movlw	15
 11566  002DBA  1451               	andwf	get_fat@wc+1,w,c
 11567  002DBC  6E4B               	movwf	_get_fat$374+1,c
 11568  002DBE  D00F               	goto	l4714
 11569  002DC0                     l4712:
 11570  002DC0  C050  F041         	movff	get_fat@wc,??_get_fat
 11571  002DC4  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 11572  002DC8  0E04               	movlw	4
 11573  002DCA  6E43               	movwf	(??_get_fat+2)& (0+255),c
 11574  002DCC                     u5615:
 11575  002DCC  90D8               	bcf	status,0,c
 11576  002DCE  3242               	rrcf	??_get_fat+1,f,c
 11577  002DD0  3241               	rrcf	??_get_fat,f,c
 11578  002DD2  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 11579  002DD4  D7FB               	goto	u5615
 11580  002DD6  C041  F04A         	movff	??_get_fat,_get_fat$374
 11581  002DDA  C042  F04B         	movff	??_get_fat+1,_get_fat$374+1
 11582  002DDE                     l4714:
 11583  002DDE  C04A  F04C         	movff	_get_fat$374,get_fat@val
 11584  002DE2  C04B  F04D         	movff	_get_fat$374+1,get_fat@val+1
 11585  002DE6  D05B               	goto	L15
 11586  002DE8                     l4716:
 11587                           
 11588                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 11589  002DE8  C03B  F030         	movff	get_fat@fs,move_window@fs
 11590  002DEC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11591  002DF0  EE20 F01E          	lfsr	2,30
 11592  002DF4  503B               	movf	get_fat@fs,w,c
 11593  002DF6  26D9               	addwf	fsr2l,f,c
 11594  002DF8  503C               	movf	get_fat@fs+1,w,c
 11595  002DFA  22DA               	addwfc	fsr2h,f,c
 11596  002DFC  CFDE F041          	movff	postinc2,??_get_fat
 11597  002E00  CFDE F042          	movff	postinc2,??_get_fat+1
 11598  002E04  CFDE F043          	movff	postinc2,??_get_fat+2
 11599  002E08  CFDE F044          	movff	postinc2,??_get_fat+3
 11600  002E0C  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 11601  002E10  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 11602  002E14  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 11603  002E18  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 11604  002E1C  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 11605  002E20  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 11606  002E24  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 11607  002E28  6A48               	clrf	??_get_fat+7,c
 11608  002E2A  5041               	movf	??_get_fat,w,c
 11609  002E2C  2445               	addwf	??_get_fat+4,w,c
 11610  002E2E  6E32               	movwf	move_window@sector,c
 11611  002E30  5042               	movf	??_get_fat+1,w,c
 11612  002E32  2046               	addwfc	??_get_fat+5,w,c
 11613  002E34  6E33               	movwf	move_window@sector+1,c
 11614  002E36  5043               	movf	??_get_fat+2,w,c
 11615  002E38  2047               	addwfc	??_get_fat+6,w,c
 11616  002E3A  6E34               	movwf	move_window@sector+2,c
 11617  002E3C  5044               	movf	??_get_fat+3,w,c
 11618  002E3E  2048               	addwfc	??_get_fat+7,w,c
 11619  002E40  6E35               	movwf	move_window@sector+3,c
 11620  002E42  ECD8  F02A         	call	_move_window	;wreg free
 11621  002E46  0900               	iorlw	0
 11622  002E48  A4D8               	btfss	status,2,c
 11623  002E4A  D0A7               	goto	l255
 11624                           
 11625                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 11626  002E4C  0EFF               	movlw	255
 11627  002E4E  6E41               	movwf	??_get_fat& (0+255),c
 11628  002E50  0E01               	movlw	1
 11629  002E52  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11630  002E54  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 11631  002E58  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 11632  002E5C  90D8               	bcf	status,0,c
 11633  002E5E  3643               	rlcf	??_get_fat+2,f,c
 11634  002E60  3644               	rlcf	??_get_fat+3,f,c
 11635  002E62  5041               	movf	??_get_fat,w,c
 11636  002E64  1643               	andwf	??_get_fat+2,f,c
 11637  002E66  5042               	movf	??_get_fat+1,w,c
 11638  002E68  1644               	andwf	??_get_fat+3,f,c
 11639  002E6A  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11640  002E6E  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11641  002E72  5043               	movf	??_get_fat+2,w,c
 11642  002E74  2645               	addwf	??_get_fat+4,f,c
 11643  002E76  5044               	movf	??_get_fat+3,w,c
 11644  002E78  2246               	addwfc	??_get_fat+5,f,c
 11645  002E7A  0E2E               	movlw	46
 11646  002E7C  2445               	addwf	??_get_fat+4,w,c
 11647  002E7E  6E52               	movwf	get_fat@p,c
 11648  002E80  0E00               	movlw	0
 11649  002E82  2046               	addwfc	??_get_fat+5,w,c
 11650  002E84  6E53               	movwf	get_fat@p+1,c
 11651                           
 11652                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 11653  002E86  C052  FFD9         	movff	get_fat@p,fsr2l
 11654  002E8A  C053  FFDA         	movff	get_fat@p+1,fsr2h
 11655  002E8E  CFDE F041          	movff	postinc2,??_get_fat
 11656  002E92  CFDD F042          	movff	postdec2,??_get_fat+1
 11657  002E96  C041  F04C         	movff	??_get_fat,get_fat@val
 11658  002E9A  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 11659  002E9E                     L15:
 11660  002E9E  6A4E               	clrf	get_fat@val+2,c
 11661  002EA0  6A4F               	clrf	get_fat@val+3,c
 11662                           
 11663                           ;ff.c: 848:    break;
 11664  002EA2  D07B               	goto	l255
 11665  002EA4                     l4724:
 11666                           
 11667                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 11668  002EA4  C03B  F030         	movff	get_fat@fs,move_window@fs
 11669  002EA8  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 11670  002EAC  EE20 F01E          	lfsr	2,30
 11671  002EB0  503B               	movf	get_fat@fs,w,c
 11672  002EB2  26D9               	addwf	fsr2l,f,c
 11673  002EB4  503C               	movf	get_fat@fs+1,w,c
 11674  002EB6  22DA               	addwfc	fsr2h,f,c
 11675  002EB8  CFDE F041          	movff	postinc2,??_get_fat
 11676  002EBC  CFDE F042          	movff	postinc2,??_get_fat+1
 11677  002EC0  CFDE F043          	movff	postinc2,??_get_fat+2
 11678  002EC4  CFDE F044          	movff	postinc2,??_get_fat+3
 11679  002EC8  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 11680  002ECC  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 11681  002ED0  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 11682  002ED4  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 11683  002ED8  0E08               	movlw	8
 11684  002EDA  D005               	goto	u5630
 11685  002EDC                     u5635:
 11686  002EDC  90D8               	bcf	status,0,c
 11687  002EDE  3248               	rrcf	??_get_fat+7,f,c
 11688  002EE0  3247               	rrcf	??_get_fat+6,f,c
 11689  002EE2  3246               	rrcf	??_get_fat+5,f,c
 11690  002EE4  3245               	rrcf	??_get_fat+4,f,c
 11691  002EE6                     u5630:
 11692  002EE6  2EE8               	decfsz	wreg,f,c
 11693  002EE8  D7F9               	goto	u5635
 11694  002EEA  5041               	movf	??_get_fat,w,c
 11695  002EEC  2445               	addwf	??_get_fat+4,w,c
 11696  002EEE  6E32               	movwf	move_window@sector,c
 11697  002EF0  5042               	movf	??_get_fat+1,w,c
 11698  002EF2  2046               	addwfc	??_get_fat+5,w,c
 11699  002EF4  6E33               	movwf	move_window@sector+1,c
 11700  002EF6  5043               	movf	??_get_fat+2,w,c
 11701  002EF8  2047               	addwfc	??_get_fat+6,w,c
 11702  002EFA  6E34               	movwf	move_window@sector+2,c
 11703  002EFC  5044               	movf	??_get_fat+3,w,c
 11704  002EFE  2048               	addwfc	??_get_fat+7,w,c
 11705  002F00  6E35               	movwf	move_window@sector+3,c
 11706  002F02  ECD8  F02A         	call	_move_window	;wreg free
 11707  002F06  0900               	iorlw	0
 11708  002F08  A4D8               	btfss	status,2,c
 11709  002F0A  D047               	goto	l255
 11710                           
 11711                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 11712  002F0C  0EFF               	movlw	255
 11713  002F0E  6E41               	movwf	??_get_fat& (0+255),c
 11714  002F10  0E01               	movlw	1
 11715  002F12  6E42               	movwf	(??_get_fat+1)& (0+255),c
 11716  002F14  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 11717  002F18  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 11718  002F1C  90D8               	bcf	status,0,c
 11719  002F1E  3643               	rlcf	??_get_fat+2,f,c
 11720  002F20  3644               	rlcf	??_get_fat+3,f,c
 11721  002F22  90D8               	bcf	status,0,c
 11722  002F24  3643               	rlcf	??_get_fat+2,f,c
 11723  002F26  3644               	rlcf	??_get_fat+3,f,c
 11724  002F28  5041               	movf	??_get_fat,w,c
 11725  002F2A  1643               	andwf	??_get_fat+2,f,c
 11726  002F2C  5042               	movf	??_get_fat+1,w,c
 11727  002F2E  1644               	andwf	??_get_fat+3,f,c
 11728  002F30  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 11729  002F34  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 11730  002F38  5043               	movf	??_get_fat+2,w,c
 11731  002F3A  2645               	addwf	??_get_fat+4,f,c
 11732  002F3C  5044               	movf	??_get_fat+3,w,c
 11733  002F3E  2246               	addwfc	??_get_fat+5,f,c
 11734  002F40  0E2E               	movlw	46
 11735  002F42  2445               	addwf	??_get_fat+4,w,c
 11736  002F44  6E52               	movwf	get_fat@p,c
 11737  002F46  0E00               	movlw	0
 11738  002F48  2046               	addwfc	??_get_fat+5,w,c
 11739  002F4A  6E53               	movwf	get_fat@p+1,c
 11740                           
 11741                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 11742  002F4C  C052  FFD9         	movff	get_fat@p,fsr2l
 11743  002F50  C053  FFDA         	movff	get_fat@p+1,fsr2h
 11744  002F54  0EFF               	movlw	255
 11745  002F56  14DE               	andwf	postinc2,w,c
 11746  002F58  6E4C               	movwf	get_fat@val,c
 11747  002F5A  0EFF               	movlw	255
 11748  002F5C  14DE               	andwf	postinc2,w,c
 11749  002F5E  6E4D               	movwf	get_fat@val+1,c
 11750  002F60  0EFF               	movlw	255
 11751  002F62  14DE               	andwf	postinc2,w,c
 11752  002F64  6E4E               	movwf	get_fat@val+2,c
 11753  002F66  0E0F               	movlw	15
 11754  002F68  14DE               	andwf	postinc2,w,c
 11755  002F6A                     L14:
 11756  002F6A  6E4F               	movwf	get_fat@val+3,c
 11757                           
 11758                           ;ff.c: 854:    break;
 11759  002F6C  D016               	goto	l255
 11760  002F6E                     l4734:
 11761  002F6E  C03B  FFD9         	movff	get_fat@fs,fsr2l
 11762  002F72  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 11763  002F76  50DF               	movf	indf2,w,c
 11764  002F78  6E41               	movwf	??_get_fat& (0+255),c
 11765  002F7A  6A42               	clrf	(??_get_fat+1)& (0+255),c
 11766                           
 11767                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11768                           ; Switch size 1, requested type "simple"
 11769                           ; Number of cases is 1, Range of values is 0 to 0
 11770                           ; switch strategies available:
 11771                           ; Name         Instructions Cycles
 11772                           ; simple_byte            4     3 (average)
 11773                           ;	Chosen strategy is simple_byte
 11774  002F7C  5042               	movf	??_get_fat+1,w,c
 11775  002F7E  0A00               	xorlw	0	; case 0
 11776  002F80  A4D8               	btfss	status,2,c
 11777  002F82  D65B               	goto	u5550
 11778                           
 11779                           ; Switch size 1, requested type "simple"
 11780                           ; Number of cases is 3, Range of values is 1 to 3
 11781                           ; switch strategies available:
 11782                           ; Name         Instructions Cycles
 11783                           ; simple_byte           10     6 (average)
 11784                           ;	Chosen strategy is simple_byte
 11785  002F84  5041               	movf	??_get_fat,w,c
 11786  002F86  0A01               	xorlw	1	; case 1
 11787  002F88  B4D8               	btfsc	status,2,c
 11788  002F8A  D664               	goto	l257
 11789  002F8C  0A03               	xorlw	3	; case 2
 11790  002F8E  B4D8               	btfsc	status,2,c
 11791  002F90  D72B               	goto	l4716
 11792  002F92  0A01               	xorlw	1	; case 3
 11793  002F94  B4D8               	btfsc	status,2,c
 11794  002F96  D786               	goto	l4724
 11795  002F98  D650               	goto	u5550
 11796  002F9A                     l255:
 11797                           
 11798                           ;ff.c: 861:  return val;
 11799  002F9A  C04C  F03B         	movff	get_fat@val,?_get_fat
 11800  002F9E  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 11801  002FA2  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 11802  002FA6  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 11803  002FAA  0012               	return		;funcret
 11804  002FAC                     __end_of_get_fat:
 11805                           	opt callstack 0
 11806                           
 11807 ;; *************** function _clust2sect *****************
 11808 ;; Defined at:
 11809 ;;		line 800 in file "ff.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;  fs              2   12[COMRAM] PTR struct .
 11812 ;;		 -> FatFs(558), NULL(0), 
 11813 ;;  clst            4   14[COMRAM] unsigned long 
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;		None
 11816 ;; Return value:  Size  Location     Type
 11817 ;;                  4   12[COMRAM] unsigned long 
 11818 ;; Registers used:
 11819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11825 ;;      Params:         6       0       0       0       0       0       0       0       0
 11826 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11827 ;;      Temps:          5       0       0       0       0       0       0       0       0
 11828 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11829 ;;Total ram usage:       11 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:    1
 11832 ;; This function calls:
 11833 ;;		___lmul
 11834 ;; This function is called by:
 11835 ;;		_dir_sdi
 11836 ;;		_dir_next
 11837 ;;		_f_write
 11838 ;;		_f_lseek
 11839 ;;		_f_read
 11840 ;; This function uses a non-reentrant model
 11841 ;;
 11842                           
 11843                           	psect	text31
 11844  005446                     __ptext31:
 11845                           	opt callstack 0
 11846  005446                     _clust2sect:
 11847                           	opt callstack 26
 11848                           
 11849                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 11850                           
 11851                           ;incstack = 0
 11852  005446  0E02               	movlw	2
 11853  005448  5E0F               	subwf	clust2sect@clst,f,c
 11854  00544A  0E00               	movlw	0
 11855  00544C  5A10               	subwfb	clust2sect@clst+1,f,c
 11856  00544E  5A11               	subwfb	clust2sect@clst+2,f,c
 11857  005450  5A12               	subwfb	clust2sect@clst+3,f,c
 11858                           
 11859                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 11860  005452  EE20 F012          	lfsr	2,18
 11861  005456  500D               	movf	clust2sect@fs,w,c
 11862  005458  26D9               	addwf	fsr2l,f,c
 11863  00545A  500E               	movf	clust2sect@fs+1,w,c
 11864  00545C  22DA               	addwfc	fsr2h,f,c
 11865  00545E  0EFE               	movlw	254
 11866  005460  24DE               	addwf	postinc2,w,c
 11867  005462  6E13               	movwf	??_clust2sect& (0+255),c
 11868  005464  0EFF               	movlw	255
 11869  005466  20DE               	addwfc	postinc2,w,c
 11870  005468  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 11871  00546A  0EFF               	movlw	255
 11872  00546C  20DE               	addwfc	postinc2,w,c
 11873  00546E  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 11874  005470  0EFF               	movlw	255
 11875  005472  20DE               	addwfc	postinc2,w,c
 11876  005474  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 11877  005476  5013               	movf	??_clust2sect,w,c
 11878  005478  5C0F               	subwf	clust2sect@clst,w,c
 11879  00547A  5014               	movf	??_clust2sect+1,w,c
 11880  00547C  5810               	subwfb	clust2sect@clst+1,w,c
 11881  00547E  5015               	movf	??_clust2sect+2,w,c
 11882  005480  5811               	subwfb	clust2sect@clst+2,w,c
 11883  005482  5016               	movf	??_clust2sect+3,w,c
 11884  005484  5812               	subwfb	clust2sect@clst+3,w,c
 11885  005486  A0D8               	btfss	status,0,c
 11886  005488  D009               	goto	l4844
 11887  00548A  0E00               	movlw	0
 11888  00548C  6E0D               	movwf	?_clust2sect,c
 11889  00548E  0E00               	movlw	0
 11890  005490  6E0E               	movwf	?_clust2sect+1,c
 11891  005492  0E00               	movlw	0
 11892  005494  6E0F               	movwf	?_clust2sect+2,c
 11893  005496  0E00               	movlw	0
 11894  005498  6E10               	movwf	?_clust2sect+3,c
 11895  00549A  0012               	return	
 11896  00549C                     l4844:
 11897                           
 11898                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 11899  00549C  EE20 F026          	lfsr	2,38
 11900  0054A0  500D               	movf	clust2sect@fs,w,c
 11901  0054A2  26D9               	addwf	fsr2l,f,c
 11902  0054A4  500E               	movf	clust2sect@fs+1,w,c
 11903  0054A6  22DA               	addwfc	fsr2h,f,c
 11904  0054A8  CFDE F013          	movff	postinc2,??_clust2sect
 11905  0054AC  CFDE F014          	movff	postinc2,??_clust2sect+1
 11906  0054B0  CFDE F015          	movff	postinc2,??_clust2sect+2
 11907  0054B4  CFDE F016          	movff	postinc2,??_clust2sect+3
 11908  0054B8  EE20 F002          	lfsr	2,2
 11909  0054BC  500D               	movf	clust2sect@fs,w,c
 11910  0054BE  26D9               	addwf	fsr2l,f,c
 11911  0054C0  500E               	movf	clust2sect@fs+1,w,c
 11912  0054C2  22DA               	addwfc	fsr2h,f,c
 11913  0054C4  50DF               	movf	indf2,w,c
 11914  0054C6  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 11915  0054C8  5017               	movf	??_clust2sect+4,w,c
 11916  0054CA  6E01               	movwf	___lmul@multiplier,c
 11917  0054CC  6A02               	clrf	___lmul@multiplier+1,c
 11918  0054CE  6A03               	clrf	___lmul@multiplier+2,c
 11919  0054D0  6A04               	clrf	___lmul@multiplier+3,c
 11920  0054D2  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 11921  0054D6  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 11922  0054DA  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 11923  0054DE  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 11924  0054E2  EC3C  F02D         	call	___lmul	;wreg free
 11925  0054E6  5013               	movf	??_clust2sect,w,c
 11926  0054E8  2401               	addwf	?___lmul,w,c
 11927  0054EA  6E0D               	movwf	?_clust2sect,c
 11928  0054EC  5014               	movf	??_clust2sect+1,w,c
 11929  0054EE  2002               	addwfc	?___lmul+1,w,c
 11930  0054F0  6E0E               	movwf	?_clust2sect+1,c
 11931  0054F2  5015               	movf	??_clust2sect+2,w,c
 11932  0054F4  2003               	addwfc	?___lmul+2,w,c
 11933  0054F6  6E0F               	movwf	?_clust2sect+2,c
 11934  0054F8  5016               	movf	??_clust2sect+3,w,c
 11935  0054FA  2004               	addwfc	?___lmul+3,w,c
 11936  0054FC  6E10               	movwf	?_clust2sect+3,c
 11937  0054FE  0012               	return		;funcret
 11938  005500                     __end_of_clust2sect:
 11939                           	opt callstack 0
 11940                           
 11941 ;; *************** function ___lmul *****************
 11942 ;; Defined at:
 11943 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 11944 ;; Parameters:    Size  Location     Type
 11945 ;;  multiplier      4    0[COMRAM] unsigned long 
 11946 ;;  multiplicand    4    4[COMRAM] unsigned long 
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;  product         4    8[COMRAM] unsigned long 
 11949 ;; Return value:  Size  Location     Type
 11950 ;;                  4    0[COMRAM] unsigned long 
 11951 ;; Registers used:
 11952 ;;		wreg, status,2, status,0
 11953 ;; Tracked objects:
 11954 ;;		On entry : 0/0
 11955 ;;		On exit  : 0/0
 11956 ;;		Unchanged: 0/0
 11957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11958 ;;      Params:         8       0       0       0       0       0       0       0       0
 11959 ;;      Locals:         4       0       0       0       0       0       0       0       0
 11960 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11961 ;;      Totals:        12       0       0       0       0       0       0       0       0
 11962 ;;Total ram usage:       12 bytes
 11963 ;; Hardware stack levels used:    1
 11964 ;; This function calls:
 11965 ;;		Nothing
 11966 ;; This function is called by:
 11967 ;;		_clust2sect
 11968 ;;		_find_volume
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text32
 11973  005A78                     __ptext32:
 11974                           	opt callstack 0
 11975  005A78                     ___lmul:
 11976                           	opt callstack 26
 11977                           
 11978                           ;incstack = 0
 11979  005A78  0E00               	movlw	0
 11980  005A7A  6E09               	movwf	___lmul@product,c
 11981  005A7C  0E00               	movlw	0
 11982  005A7E  6E0A               	movwf	___lmul@product+1,c
 11983  005A80  0E00               	movlw	0
 11984  005A82  6E0B               	movwf	___lmul@product+2,c
 11985  005A84  0E00               	movlw	0
 11986  005A86  6E0C               	movwf	___lmul@product+3,c
 11987  005A88                     l4820:
 11988  005A88  A001               	btfss	___lmul@multiplier,0,c
 11989  005A8A  D008               	goto	l4824
 11990  005A8C  5005               	movf	___lmul@multiplicand,w,c
 11991  005A8E  2609               	addwf	___lmul@product,f,c
 11992  005A90  5006               	movf	___lmul@multiplicand+1,w,c
 11993  005A92  220A               	addwfc	___lmul@product+1,f,c
 11994  005A94  5007               	movf	___lmul@multiplicand+2,w,c
 11995  005A96  220B               	addwfc	___lmul@product+2,f,c
 11996  005A98  5008               	movf	___lmul@multiplicand+3,w,c
 11997  005A9A  220C               	addwfc	___lmul@product+3,f,c
 11998  005A9C                     l4824:
 11999  005A9C  90D8               	bcf	status,0,c
 12000  005A9E  3605               	rlcf	___lmul@multiplicand,f,c
 12001  005AA0  3606               	rlcf	___lmul@multiplicand+1,f,c
 12002  005AA2  3607               	rlcf	___lmul@multiplicand+2,f,c
 12003  005AA4  3608               	rlcf	___lmul@multiplicand+3,f,c
 12004  005AA6  90D8               	bcf	status,0,c
 12005  005AA8  3204               	rrcf	___lmul@multiplier+3,f,c
 12006  005AAA  3203               	rrcf	___lmul@multiplier+2,f,c
 12007  005AAC  3202               	rrcf	___lmul@multiplier+1,f,c
 12008  005AAE  3201               	rrcf	___lmul@multiplier,f,c
 12009  005AB0  5001               	movf	___lmul@multiplier,w,c
 12010  005AB2  1002               	iorwf	___lmul@multiplier+1,w,c
 12011  005AB4  1003               	iorwf	___lmul@multiplier+2,w,c
 12012  005AB6  1004               	iorwf	___lmul@multiplier+3,w,c
 12013  005AB8  A4D8               	btfss	status,2,c
 12014  005ABA  D7E6               	goto	l4820
 12015  005ABC  C009  F001         	movff	___lmul@product,?___lmul
 12016  005AC0  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 12017  005AC4  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 12018  005AC8  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 12019  005ACC  0012               	return		;funcret
 12020  005ACE                     __end_of___lmul:
 12021                           	opt callstack 0
 12022                           
 12023 ;; *************** function ___lldiv *****************
 12024 ;; Defined at:
 12025 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 12026 ;; Parameters:    Size  Location     Type
 12027 ;;  dividend        4    0[COMRAM] unsigned long 
 12028 ;;  divisor         4    4[COMRAM] unsigned long 
 12029 ;; Auto vars:     Size  Location     Type
 12030 ;;  quotient        4    8[COMRAM] unsigned long 
 12031 ;;  counter         1   12[COMRAM] unsigned char 
 12032 ;; Return value:  Size  Location     Type
 12033 ;;                  4    0[COMRAM] unsigned long 
 12034 ;; Registers used:
 12035 ;;		wreg, status,2, status,0
 12036 ;; Tracked objects:
 12037 ;;		On entry : 0/0
 12038 ;;		On exit  : 0/0
 12039 ;;		Unchanged: 0/0
 12040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12041 ;;      Params:         8       0       0       0       0       0       0       0       0
 12042 ;;      Locals:         5       0       0       0       0       0       0       0       0
 12043 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12044 ;;      Totals:        13       0       0       0       0       0       0       0       0
 12045 ;;Total ram usage:       13 bytes
 12046 ;; Hardware stack levels used:    1
 12047 ;; This function calls:
 12048 ;;		Nothing
 12049 ;; This function is called by:
 12050 ;;		_find_volume
 12051 ;;		_f_lseek
 12052 ;; This function uses a non-reentrant model
 12053 ;;
 12054                           
 12055                           	psect	text33
 12056  0056EA                     __ptext33:
 12057                           	opt callstack 0
 12058  0056EA                     ___lldiv:
 12059                           	opt callstack 27
 12060                           
 12061                           ;incstack = 0
 12062  0056EA  0E00               	movlw	0
 12063  0056EC  6E09               	movwf	___lldiv@quotient,c
 12064  0056EE  0E00               	movlw	0
 12065  0056F0  6E0A               	movwf	___lldiv@quotient+1,c
 12066  0056F2  0E00               	movlw	0
 12067  0056F4  6E0B               	movwf	___lldiv@quotient+2,c
 12068  0056F6  0E00               	movlw	0
 12069  0056F8  6E0C               	movwf	___lldiv@quotient+3,c
 12070  0056FA  5005               	movf	___lldiv@divisor,w,c
 12071  0056FC  1006               	iorwf	___lldiv@divisor+1,w,c
 12072  0056FE  1007               	iorwf	___lldiv@divisor+2,w,c
 12073  005700  1008               	iorwf	___lldiv@divisor+3,w,c
 12074  005702  B4D8               	btfsc	status,2,c
 12075  005704  D02A               	goto	l940
 12076  005706  0E01               	movlw	1
 12077  005708  6E0D               	movwf	___lldiv@counter,c
 12078  00570A  D006               	goto	l5720
 12079  00570C                     l5718:
 12080  00570C  90D8               	bcf	status,0,c
 12081  00570E  3605               	rlcf	___lldiv@divisor,f,c
 12082  005710  3606               	rlcf	___lldiv@divisor+1,f,c
 12083  005712  3607               	rlcf	___lldiv@divisor+2,f,c
 12084  005714  3608               	rlcf	___lldiv@divisor+3,f,c
 12085  005716  2A0D               	incf	___lldiv@counter,f,c
 12086  005718                     l5720:
 12087  005718  AE08               	btfss	___lldiv@divisor+3,7,c
 12088  00571A  D7F8               	goto	l5718
 12089  00571C                     u7510:
 12090  00571C  90D8               	bcf	status,0,c
 12091  00571E  3609               	rlcf	___lldiv@quotient,f,c
 12092  005720  360A               	rlcf	___lldiv@quotient+1,f,c
 12093  005722  360B               	rlcf	___lldiv@quotient+2,f,c
 12094  005724  360C               	rlcf	___lldiv@quotient+3,f,c
 12095  005726  5005               	movf	___lldiv@divisor,w,c
 12096  005728  5C01               	subwf	___lldiv@dividend,w,c
 12097  00572A  5006               	movf	___lldiv@divisor+1,w,c
 12098  00572C  5802               	subwfb	___lldiv@dividend+1,w,c
 12099  00572E  5007               	movf	___lldiv@divisor+2,w,c
 12100  005730  5803               	subwfb	___lldiv@dividend+2,w,c
 12101  005732  5008               	movf	___lldiv@divisor+3,w,c
 12102  005734  5804               	subwfb	___lldiv@dividend+3,w,c
 12103  005736  A0D8               	btfss	status,0,c
 12104  005738  D009               	goto	l5730
 12105  00573A  5005               	movf	___lldiv@divisor,w,c
 12106  00573C  5E01               	subwf	___lldiv@dividend,f,c
 12107  00573E  5006               	movf	___lldiv@divisor+1,w,c
 12108  005740  5A02               	subwfb	___lldiv@dividend+1,f,c
 12109  005742  5007               	movf	___lldiv@divisor+2,w,c
 12110  005744  5A03               	subwfb	___lldiv@dividend+2,f,c
 12111  005746  5008               	movf	___lldiv@divisor+3,w,c
 12112  005748  5A04               	subwfb	___lldiv@dividend+3,f,c
 12113  00574A  8009               	bsf	___lldiv@quotient,0,c
 12114  00574C                     l5730:
 12115  00574C  90D8               	bcf	status,0,c
 12116  00574E  3208               	rrcf	___lldiv@divisor+3,f,c
 12117  005750  3207               	rrcf	___lldiv@divisor+2,f,c
 12118  005752  3206               	rrcf	___lldiv@divisor+1,f,c
 12119  005754  3205               	rrcf	___lldiv@divisor,f,c
 12120  005756  2E0D               	decfsz	___lldiv@counter,f,c
 12121  005758  D7E1               	goto	u7510
 12122  00575A                     l940:
 12123  00575A  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12124  00575E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12125  005762  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12126  005766  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12127  00576A  0012               	return		;funcret
 12128  00576C                     __end_of___lldiv:
 12129                           	opt callstack 0
 12130                           
 12131 ;; *************** function _f_close *****************
 12132 ;; Defined at:
 12133 ;;		line 2861 in file "ff.c"
 12134 ;; Parameters:    Size  Location     Type
 12135 ;;  fp              2   77[COMRAM] PTR struct .
 12136 ;;		 -> Fil(32), 
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;  res             1   79[COMRAM] enum E93
 12139 ;; Return value:  Size  Location     Type
 12140 ;;                  1    wreg      enum E93
 12141 ;; Registers used:
 12142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12143 ;; Tracked objects:
 12144 ;;		On entry : 0/0
 12145 ;;		On exit  : 0/0
 12146 ;;		Unchanged: 0/0
 12147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12148 ;;      Params:         2       0       0       0       0       0       0       0       0
 12149 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12150 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12151 ;;      Totals:         3       0       0       0       0       0       0       0       0
 12152 ;;Total ram usage:        3 bytes
 12153 ;; Hardware stack levels used:    1
 12154 ;; Hardware stack levels required when called:    9
 12155 ;; This function calls:
 12156 ;;		_f_sync
 12157 ;;		_validate
 12158 ;; This function is called by:
 12159 ;;		_guardar
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           	psect	text34
 12164  005BDA                     __ptext34:
 12165                           	opt callstack 0
 12166  005BDA                     _f_close:
 12167                           	opt callstack 20
 12168                           
 12169                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 12170                           
 12171                           ;incstack = 0
 12172  005BDA  C04E  F045         	movff	f_close@fp,f_sync@fp
 12173  005BDE  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 12174  005BE2  EC77  F024         	call	_f_sync	;wreg free
 12175  005BE6  6E50               	movwf	f_close@res,c
 12176                           
 12177                           ;ff.c: 2870:  if (res == FR_OK)
 12178  005BE8  5050               	movf	f_close@res,w,c
 12179  005BEA  A4D8               	btfss	status,2,c
 12180  005BEC  0012               	return	
 12181                           
 12182                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 12183  005BEE  C04E  F002         	movff	f_close@fp,validate@obj
 12184  005BF2  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 12185  005BF6  EC2B  F02B         	call	_validate	;wreg free
 12186  005BFA  6E50               	movwf	f_close@res,c
 12187                           
 12188                           ;ff.c: 2874:   if (res == FR_OK) {
 12189  005BFC  5050               	movf	f_close@res,w,c
 12190  005BFE  A4D8               	btfss	status,2,c
 12191  005C00  0012               	return	
 12192                           
 12193                           ;ff.c: 2882:     fp->fs = 0;
 12194  005C02  C04E  FFD9         	movff	f_close@fp,fsr2l
 12195  005C06  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 12196  005C0A  0E00               	movlw	0
 12197  005C0C  6EDE               	movwf	postinc2,c
 12198  005C0E  0E00               	movlw	0
 12199  005C10  6EDD               	movwf	postdec2,c
 12200  005C12  0012               	return		;funcret
 12201  005C14                     __end_of_f_close:
 12202                           	opt callstack 0
 12203                           
 12204 ;; *************** function _f_sync *****************
 12205 ;; Defined at:
 12206 ;;		line 2813 in file "ff.c"
 12207 ;; Parameters:    Size  Location     Type
 12208 ;;  fp              2   68[COMRAM] PTR struct .
 12209 ;;		 -> Fil(32), 
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;  tm              4    0        unsigned long 
 12212 ;;  dir             2   75[COMRAM] PTR unsigned char 
 12213 ;;		 -> FatFs(558), NULL(0), 
 12214 ;;  res             1   74[COMRAM] enum E93
 12215 ;; Return value:  Size  Location     Type
 12216 ;;                  1    wreg      enum E93
 12217 ;; Registers used:
 12218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12224 ;;      Params:         2       0       0       0       0       0       0       0       0
 12225 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12226 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12227 ;;      Totals:         9       0       0       0       0       0       0       0       0
 12228 ;;Total ram usage:        9 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    8
 12231 ;; This function calls:
 12232 ;;		_move_window
 12233 ;;		_st_clust
 12234 ;;		_sync_fs
 12235 ;;		_validate
 12236 ;; This function is called by:
 12237 ;;		_f_close
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           
 12241                           	psect	text35
 12242  0048EE                     __ptext35:
 12243                           	opt callstack 0
 12244  0048EE                     _f_sync:
 12245                           	opt callstack 20
 12246                           
 12247                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 12248                           
 12249                           ;incstack = 0
 12250  0048EE  C045  F002         	movff	f_sync@fp,validate@obj
 12251  0048F2  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 12252  0048F6  EC2B  F02B         	call	_validate	;wreg free
 12253  0048FA  6E4B               	movwf	f_sync@res,c
 12254                           
 12255                           ;ff.c: 2823:  if (res == FR_OK) {
 12256  0048FC  504B               	movf	f_sync@res,w,c
 12257  0048FE  A4D8               	btfss	status,2,c
 12258  004900  D095               	goto	l6274
 12259                           
 12260                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 12261  004902  EE20 F004          	lfsr	2,4
 12262  004906  5045               	movf	f_sync@fp,w,c
 12263  004908  26D9               	addwf	fsr2l,f,c
 12264  00490A  5046               	movf	f_sync@fp+1,w,c
 12265  00490C  22DA               	addwfc	fsr2h,f,c
 12266  00490E  AADF               	btfss	indf2,5,c
 12267  004910  D08D               	goto	l6274
 12268                           
 12269                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 12270  004912  C045  FFD9         	movff	f_sync@fp,fsr2l
 12271  004916  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12272  00491A  CFDE F030          	movff	postinc2,move_window@fs
 12273  00491E  CFDD F031          	movff	postdec2,move_window@fs+1
 12274  004922  EE20 F01A          	lfsr	2,26
 12275  004926  5045               	movf	f_sync@fp,w,c
 12276  004928  26D9               	addwf	fsr2l,f,c
 12277  00492A  5046               	movf	f_sync@fp+1,w,c
 12278  00492C  22DA               	addwfc	fsr2h,f,c
 12279  00492E  CFDE F032          	movff	postinc2,move_window@sector
 12280  004932  CFDE F033          	movff	postinc2,move_window@sector+1
 12281  004936  CFDE F034          	movff	postinc2,move_window@sector+2
 12282  00493A  CFDE F035          	movff	postinc2,move_window@sector+3
 12283  00493E  ECD8  F02A         	call	_move_window	;wreg free
 12284  004942  6E4B               	movwf	f_sync@res,c
 12285                           
 12286                           ;ff.c: 2834:    if (res == FR_OK) {
 12287  004944  504B               	movf	f_sync@res,w,c
 12288  004946  A4D8               	btfss	status,2,c
 12289  004948  D071               	goto	l6274
 12290                           
 12291                           ;ff.c: 2835:     dir = fp->dir_ptr;
 12292  00494A  EE20 F01E          	lfsr	2,30
 12293  00494E  5045               	movf	f_sync@fp,w,c
 12294  004950  26D9               	addwf	fsr2l,f,c
 12295  004952  5046               	movf	f_sync@fp+1,w,c
 12296  004954  22DA               	addwfc	fsr2h,f,c
 12297  004956  CFDE F04C          	movff	postinc2,f_sync@dir
 12298  00495A  CFDD F04D          	movff	postdec2,f_sync@dir+1
 12299                           
 12300                           ;ff.c: 2836:     dir[11] |= 0x20;
 12301  00495E  EE20 F00B          	lfsr	2,11
 12302  004962  504C               	movf	f_sync@dir,w,c
 12303  004964  26D9               	addwf	fsr2l,f,c
 12304  004966  504D               	movf	f_sync@dir+1,w,c
 12305  004968  22DA               	addwfc	fsr2h,f,c
 12306  00496A  0E00               	movlw	0
 12307  00496C  8ADB               	bsf	plusw2,5,c
 12308                           
 12309                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 12310  00496E  EE20 F00A          	lfsr	2,10
 12311  004972  5045               	movf	f_sync@fp,w,c
 12312  004974  26D9               	addwf	fsr2l,f,c
 12313  004976  5046               	movf	f_sync@fp+1,w,c
 12314  004978  22DA               	addwfc	fsr2h,f,c
 12315  00497A  EE10 F01C          	lfsr	1,28
 12316  00497E  504C               	movf	f_sync@dir,w,c
 12317  004980  26E1               	addwf	fsr1l,f,c
 12318  004982  504D               	movf	f_sync@dir+1,w,c
 12319  004984  22E2               	addwfc	fsr1h,f,c
 12320  004986  CFDE FFE6          	movff	postinc2,postinc1
 12321  00498A  CFDE FFE6          	movff	postinc2,postinc1
 12322  00498E  CFDE FFE6          	movff	postinc2,postinc1
 12323  004992  CFDE FFE6          	movff	postinc2,postinc1
 12324                           
 12325                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 12326  004996  C04C  F001         	movff	f_sync@dir,st_clust@dir
 12327  00499A  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 12328  00499E  EE20 F00E          	lfsr	2,14
 12329  0049A2  5045               	movf	f_sync@fp,w,c
 12330  0049A4  26D9               	addwf	fsr2l,f,c
 12331  0049A6  5046               	movf	f_sync@fp+1,w,c
 12332  0049A8  22DA               	addwfc	fsr2h,f,c
 12333  0049AA  CFDE F003          	movff	postinc2,st_clust@cl
 12334  0049AE  CFDE F004          	movff	postinc2,st_clust@cl+1
 12335  0049B2  CFDE F005          	movff	postinc2,st_clust@cl+2
 12336  0049B6  CFDE F006          	movff	postinc2,st_clust@cl+3
 12337  0049BA  EC20  F02E         	call	_st_clust	;wreg free
 12338                           
 12339                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 12340  0049BE  EE20 F016          	lfsr	2,22
 12341  0049C2  504C               	movf	f_sync@dir,w,c
 12342  0049C4  26D9               	addwf	fsr2l,f,c
 12343  0049C6  504D               	movf	f_sync@dir+1,w,c
 12344  0049C8  22DA               	addwfc	fsr2h,f,c
 12345  0049CA  0E00               	movlw	0
 12346  0049CC  6EDE               	movwf	postinc2,c
 12347  0049CE  0E00               	movlw	0
 12348  0049D0  6EDE               	movwf	postinc2,c
 12349  0049D2  0E21               	movlw	33
 12350  0049D4  6EDE               	movwf	postinc2,c
 12351  0049D6  0E46               	movlw	70
 12352  0049D8  6EDD               	movwf	postdec2,c
 12353                           
 12354                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 12355  0049DA  EE20 F012          	lfsr	2,18
 12356  0049DE  504C               	movf	f_sync@dir,w,c
 12357  0049E0  26D9               	addwf	fsr2l,f,c
 12358  0049E2  504D               	movf	f_sync@dir+1,w,c
 12359  0049E4  22DA               	addwfc	fsr2h,f,c
 12360  0049E6  0E00               	movlw	0
 12361  0049E8  6EDE               	movwf	postinc2,c
 12362  0049EA  0E00               	movlw	0
 12363  0049EC  6EDD               	movwf	postdec2,c
 12364                           
 12365                           ;ff.c: 2842:     fp->flag &= ~0x20;
 12366  0049EE  EE20 F004          	lfsr	2,4
 12367  0049F2  5045               	movf	f_sync@fp,w,c
 12368  0049F4  26D9               	addwf	fsr2l,f,c
 12369  0049F6  5046               	movf	f_sync@fp+1,w,c
 12370  0049F8  22DA               	addwfc	fsr2h,f,c
 12371  0049FA  0EDF               	movlw	223
 12372  0049FC  16DF               	andwf	indf2,f,c
 12373                           
 12374                           ;ff.c: 2843:     fp->fs->wflag = 1;
 12375  0049FE  C045  FFD9         	movff	f_sync@fp,fsr2l
 12376  004A02  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12377  004A06  EE10 F004          	lfsr	1,4
 12378  004A0A  50DE               	movf	postinc2,w,c
 12379  004A0C  26E1               	addwf	fsr1l,f,c
 12380  004A0E  50DD               	movf	postdec2,w,c
 12381  004A10  22E2               	addwfc	fsr1h,f,c
 12382  004A12  0E01               	movlw	1
 12383  004A14  6EE7               	movwf	indf1,c
 12384                           
 12385                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 12386  004A16  C045  FFD9         	movff	f_sync@fp,fsr2l
 12387  004A1A  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 12388  004A1E  CFDE F03A          	movff	postinc2,sync_fs@fs
 12389  004A22  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 12390  004A26  ECA3  F021         	call	_sync_fs	;wreg free
 12391  004A2A  6E4B               	movwf	f_sync@res,c
 12392  004A2C                     l6274:
 12393                           
 12394                           ;ff.c: 2849:  return res;
 12395  004A2C  504B               	movf	f_sync@res,w,c
 12396  004A2E  0012               	return		;funcret
 12397  004A30                     __end_of_f_sync:
 12398                           	opt callstack 0
 12399                           
 12400 ;; *************** function _validate *****************
 12401 ;; Defined at:
 12402 ;;		line 2372 in file "ff.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  obj             2    1[COMRAM] PTR void 
 12405 ;;		 -> Fil(32), 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  fil             2    7[COMRAM] PTR struct .
 12408 ;;		 -> Fil(32), 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      enum E93
 12411 ;; Registers used:
 12412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12418 ;;      Params:         2       0       0       0       0       0       0       0       0
 12419 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12420 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12421 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12422 ;;Total ram usage:        8 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    1
 12425 ;; This function calls:
 12426 ;;		_disk_status
 12427 ;; This function is called by:
 12428 ;;		_f_write
 12429 ;;		_f_sync
 12430 ;;		_f_close
 12431 ;;		_f_lseek
 12432 ;;		_f_read
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text36
 12437  005656                     __ptext36:
 12438                           	opt callstack 0
 12439  005656                     _validate:
 12440                           	opt callstack 26
 12441                           
 12442                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 12443                           
 12444                           ;incstack = 0
 12445  005656  C002  F008         	movff	validate@obj,validate@fil
 12446  00565A  C003  F009         	movff	validate@obj+1,validate@fil+1
 12447                           
 12448                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 12449  00565E  5008               	movf	validate@fil,w,c
 12450  005660  1009               	iorwf	validate@fil+1,w,c
 12451  005662  B4D8               	btfsc	status,2,c
 12452  005664  D03E               	goto	u7490
 12453  005666  C008  FFD9         	movff	validate@fil,fsr2l
 12454  00566A  C009  FFDA         	movff	validate@fil+1,fsr2h
 12455  00566E  50DE               	movf	postinc2,w,c
 12456  005670  10DE               	iorwf	postinc2,w,c
 12457  005672  B4D8               	btfsc	status,2,c
 12458  005674  D036               	goto	u7490
 12459  005676  C008  FFD9         	movff	validate@fil,fsr2l
 12460  00567A  C009  FFDA         	movff	validate@fil+1,fsr2h
 12461  00567E  CFDE F004          	movff	postinc2,??_validate
 12462  005682  CFDD F005          	movff	postdec2,??_validate+1
 12463  005686  C004  FFD9         	movff	??_validate,fsr2l
 12464  00568A  C005  FFDA         	movff	??_validate+1,fsr2h
 12465  00568E  50DF               	movf	indf2,w,c
 12466  005690  B4D8               	btfsc	status,2,c
 12467  005692  D027               	goto	u7490
 12468  005694  EE20 F002          	lfsr	2,2
 12469  005698  5008               	movf	validate@fil,w,c
 12470  00569A  26D9               	addwf	fsr2l,f,c
 12471  00569C  5009               	movf	validate@fil+1,w,c
 12472  00569E  22DA               	addwfc	fsr2h,f,c
 12473  0056A0  C008  FFE1         	movff	validate@fil,fsr1l
 12474  0056A4  C009  FFE2         	movff	validate@fil+1,fsr1h
 12475  0056A8  EE00 F006          	lfsr	0,6
 12476  0056AC  50E6               	movf	postinc1,w,c
 12477  0056AE  26E9               	addwf	fsr0l,f,c
 12478  0056B0  50E5               	movf	postdec1,w,c
 12479  0056B2  22EA               	addwfc	fsr0h,f,c
 12480  0056B4  50DE               	movf	postinc2,w,c
 12481  0056B6  18EE               	xorwf	postinc0,w,c
 12482  0056B8  E114               	bnz	l5704
 12483  0056BA  50DE               	movf	postinc2,w,c
 12484  0056BC  18EE               	xorwf	postinc0,w,c
 12485  0056BE  A4D8               	btfss	status,2,c
 12486  0056C0  D010               	goto	u7490
 12487  0056C2  C008  FFD9         	movff	validate@fil,fsr2l
 12488  0056C6  C009  FFDA         	movff	validate@fil+1,fsr2h
 12489  0056CA  EE10 F001          	lfsr	1,1
 12490  0056CE  50DE               	movf	postinc2,w,c
 12491  0056D0  26E1               	addwf	fsr1l,f,c
 12492  0056D2  50DD               	movf	postdec2,w,c
 12493  0056D4  22E2               	addwfc	fsr1h,f,c
 12494  0056D6  50E7               	movf	indf1,w,c
 12495  0056D8  EC7A  F02E         	call	_disk_status
 12496  0056DC  6E04               	movwf	??_validate& (0+255),c
 12497  0056DE  A004               	btfss	??_validate,0,c
 12498  0056E0  D002               	goto	l5708
 12499  0056E2                     u7490:
 12500  0056E2                     l5704:
 12501                           
 12502                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 12503  0056E2  0E09               	movlw	9
 12504  0056E4  0012               	return	
 12505  0056E6                     l5708:
 12506                           
 12507                           ;ff.c: 2384:  return FR_OK;
 12508  0056E6  0E00               	movlw	0
 12509  0056E8  0012               	return		;funcret
 12510  0056EA                     __end_of_validate:
 12511                           	opt callstack 0
 12512                           
 12513 ;; *************** function _disk_status *****************
 12514 ;; Defined at:
 12515 ;;		line 356 in file "diskio.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;  pdrv            1    wreg     unsigned char 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  pdrv            1    0[COMRAM] unsigned char 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      unsigned char 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12529 ;;      Params:         0       0       0       0       0       0       0       0       0
 12530 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12532 ;;      Totals:         1       0       0       0       0       0       0       0       0
 12533 ;;Total ram usage:        1 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; This function calls:
 12536 ;;		Nothing
 12537 ;; This function is called by:
 12538 ;;		_find_volume
 12539 ;;		_validate
 12540 ;; This function uses a non-reentrant model
 12541 ;;
 12542                           
 12543                           	psect	text37
 12544  005CF4                     __ptext37:
 12545                           	opt callstack 0
 12546  005CF4                     _disk_status:
 12547                           	opt callstack 26
 12548                           
 12549                           ;incstack = 0
 12550                           ;disk_status@pdrv stored from wreg
 12551  005CF4  6E01               	movwf	disk_status@pdrv,c
 12552                           
 12553                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 12554  005CF6  5001               	movf	disk_status@pdrv,w,c
 12555  005CF8  B4D8               	btfsc	status,2,c
 12556  005CFA  D002               	goto	l4936
 12557  005CFC  0E01               	movlw	1
 12558  005CFE  0012               	return	
 12559  005D00                     l4936:
 12560                           
 12561                           ;diskio.c: 361:  return Stat;
 12562  005D00  0100               	movlb	0	; () banked
 12563  005D02  51F1               	movf	_Stat& (0+255),w,b
 12564  005D04  0012               	return		;funcret
 12565  005D06                     __end_of_disk_status:
 12566                           	opt callstack 0
 12567                           
 12568 ;; *************** function _sync_fs *****************
 12569 ;; Defined at:
 12570 ;;		line 760 in file "ff.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  fs              2   57[COMRAM] PTR struct .
 12573 ;;		 -> FatFs(558), NULL(0), 
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  res             1   67[COMRAM] enum E93
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1    wreg      enum E93
 12578 ;; Registers used:
 12579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12585 ;;      Params:         2       0       0       0       0       0       0       0       0
 12586 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12587 ;;      Temps:          8       0       0       0       0       0       0       0       0
 12588 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12589 ;;Total ram usage:       11 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    7
 12592 ;; This function calls:
 12593 ;;		_disk_ioctl
 12594 ;;		_disk_write
 12595 ;;		_mem_set
 12596 ;;		_sync_window
 12597 ;; This function is called by:
 12598 ;;		_f_sync
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           	psect	text38
 12603  004346                     __ptext38:
 12604                           	opt callstack 0
 12605  004346                     _sync_fs:
 12606                           	opt callstack 20
 12607                           
 12608                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 12609                           
 12610                           ;incstack = 0
 12611  004346  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 12612  00434A  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 12613  00434E  EC83  F022         	call	_sync_window	;wreg free
 12614  004352  6E44               	movwf	sync_fs@res,c
 12615                           
 12616                           ;ff.c: 768:  if (res == FR_OK) {
 12617  004354  5044               	movf	sync_fs@res,w,c
 12618  004356  A4D8               	btfss	status,2,c
 12619  004358  D0D4               	goto	l242
 12620                           
 12621                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 12622  00435A  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 12623  00435E  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 12624  004362  0E03               	movlw	3
 12625  004364  18DE               	xorwf	postinc2,w,c
 12626  004366  A4D8               	btfss	status,2,c
 12627  004368  D0B8               	goto	l5400
 12628  00436A  EE20 F005          	lfsr	2,5
 12629  00436E  503A               	movf	sync_fs@fs,w,c
 12630  004370  26D9               	addwf	fsr2l,f,c
 12631  004372  503B               	movf	sync_fs@fs+1,w,c
 12632  004374  22DA               	addwfc	fsr2h,f,c
 12633  004376  04DE               	decf	postinc2,w,c
 12634  004378  A4D8               	btfss	status,2,c
 12635  00437A  D0AF               	goto	l5400
 12636                           
 12637                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 12638  00437C  0E2E               	movlw	46
 12639  00437E  243A               	addwf	sync_fs@fs,w,c
 12640  004380  6E01               	movwf	mem_set@dst,c
 12641  004382  0E00               	movlw	0
 12642  004384  203B               	addwfc	sync_fs@fs+1,w,c
 12643  004386  6E02               	movwf	mem_set@dst+1,c
 12644  004388  0E00               	movlw	0
 12645  00438A  6E04               	movwf	mem_set@val+1,c
 12646  00438C  0E00               	movlw	0
 12647  00438E  6E03               	movwf	mem_set@val,c
 12648  004390  0E02               	movlw	2
 12649  004392  6E06               	movwf	mem_set@cnt+1,c
 12650  004394  0E00               	movlw	0
 12651  004396  6E05               	movwf	mem_set@cnt,c
 12652  004398  EC0A  F02E         	call	_mem_set	;wreg free
 12653                           
 12654                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 12655  00439C  EE22 F02C          	lfsr	2,556
 12656  0043A0  503A               	movf	sync_fs@fs,w,c
 12657  0043A2  26D9               	addwf	fsr2l,f,c
 12658  0043A4  503B               	movf	sync_fs@fs+1,w,c
 12659  0043A6  22DA               	addwfc	fsr2h,f,c
 12660  0043A8  0E55               	movlw	85
 12661  0043AA  6EDE               	movwf	postinc2,c
 12662  0043AC  0EAA               	movlw	170
 12663  0043AE  6EDD               	movwf	postdec2,c
 12664                           
 12665                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 12666  0043B0  EE20 F02E          	lfsr	2,46
 12667  0043B4  503A               	movf	sync_fs@fs,w,c
 12668  0043B6  26D9               	addwf	fsr2l,f,c
 12669  0043B8  503B               	movf	sync_fs@fs+1,w,c
 12670  0043BA  22DA               	addwfc	fsr2h,f,c
 12671  0043BC  0E52               	movlw	82
 12672  0043BE  6EDE               	movwf	postinc2,c
 12673  0043C0  0E52               	movlw	82
 12674  0043C2  6EDE               	movwf	postinc2,c
 12675  0043C4  0E61               	movlw	97
 12676  0043C6  6EDE               	movwf	postinc2,c
 12677  0043C8  0E41               	movlw	65
 12678  0043CA  6EDD               	movwf	postdec2,c
 12679                           
 12680                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 12681  0043CC  EE22 F012          	lfsr	2,530
 12682  0043D0  503A               	movf	sync_fs@fs,w,c
 12683  0043D2  26D9               	addwf	fsr2l,f,c
 12684  0043D4  503B               	movf	sync_fs@fs+1,w,c
 12685  0043D6  22DA               	addwfc	fsr2h,f,c
 12686  0043D8  0E72               	movlw	114
 12687  0043DA  6EDE               	movwf	postinc2,c
 12688  0043DC  0E72               	movlw	114
 12689  0043DE  6EDE               	movwf	postinc2,c
 12690  0043E0  0E41               	movlw	65
 12691  0043E2  6EDE               	movwf	postinc2,c
 12692  0043E4  0E61               	movlw	97
 12693  0043E6  6EDD               	movwf	postdec2,c
 12694                           
 12695                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 12696  0043E8  EE20 F00E          	lfsr	2,14
 12697  0043EC  503A               	movf	sync_fs@fs,w,c
 12698  0043EE  26D9               	addwf	fsr2l,f,c
 12699  0043F0  503B               	movf	sync_fs@fs+1,w,c
 12700  0043F2  22DA               	addwfc	fsr2h,f,c
 12701  0043F4  EE12 F016          	lfsr	1,534
 12702  0043F8  503A               	movf	sync_fs@fs,w,c
 12703  0043FA  26E1               	addwf	fsr1l,f,c
 12704  0043FC  503B               	movf	sync_fs@fs+1,w,c
 12705  0043FE  22E2               	addwfc	fsr1h,f,c
 12706  004400  CFDE FFE6          	movff	postinc2,postinc1
 12707  004404  CFDE FFE6          	movff	postinc2,postinc1
 12708  004408  CFDE FFE6          	movff	postinc2,postinc1
 12709  00440C  CFDE FFE6          	movff	postinc2,postinc1
 12710                           
 12711                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 12712  004410  EE20 F00A          	lfsr	2,10
 12713  004414  503A               	movf	sync_fs@fs,w,c
 12714  004416  26D9               	addwf	fsr2l,f,c
 12715  004418  503B               	movf	sync_fs@fs+1,w,c
 12716  00441A  22DA               	addwfc	fsr2h,f,c
 12717  00441C  EE12 F01A          	lfsr	1,538
 12718  004420  503A               	movf	sync_fs@fs,w,c
 12719  004422  26E1               	addwf	fsr1l,f,c
 12720  004424  503B               	movf	sync_fs@fs+1,w,c
 12721  004426  22E2               	addwfc	fsr1h,f,c
 12722  004428  CFDE FFE6          	movff	postinc2,postinc1
 12723  00442C  CFDE FFE6          	movff	postinc2,postinc1
 12724  004430  CFDE FFE6          	movff	postinc2,postinc1
 12725  004434  CFDE FFE6          	movff	postinc2,postinc1
 12726                           
 12727                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 12728  004438  EE20 F01A          	lfsr	2,26
 12729  00443C  503A               	movf	sync_fs@fs,w,c
 12730  00443E  26D9               	addwf	fsr2l,f,c
 12731  004440  503B               	movf	sync_fs@fs+1,w,c
 12732  004442  22DA               	addwfc	fsr2h,f,c
 12733  004444  CFDE F03C          	movff	postinc2,??_sync_fs
 12734  004448  CFDE F03D          	movff	postinc2,??_sync_fs+1
 12735  00444C  CFDE F03E          	movff	postinc2,??_sync_fs+2
 12736  004450  CFDE F03F          	movff	postinc2,??_sync_fs+3
 12737  004454  0E01               	movlw	1
 12738  004456  243C               	addwf	??_sync_fs,w,c
 12739  004458  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 12740  00445A  0E00               	movlw	0
 12741  00445C  203D               	addwfc	??_sync_fs+1,w,c
 12742  00445E  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 12743  004460  0E00               	movlw	0
 12744  004462  203E               	addwfc	??_sync_fs+2,w,c
 12745  004464  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 12746  004466  0E00               	movlw	0
 12747  004468  203F               	addwfc	??_sync_fs+3,w,c
 12748  00446A  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 12749  00446C  EE20 F02A          	lfsr	2,42
 12750  004470  503A               	movf	sync_fs@fs,w,c
 12751  004472  26D9               	addwf	fsr2l,f,c
 12752  004474  503B               	movf	sync_fs@fs+1,w,c
 12753  004476  22DA               	addwfc	fsr2h,f,c
 12754  004478  C040  FFDE         	movff	??_sync_fs+4,postinc2
 12755  00447C  C041  FFDE         	movff	??_sync_fs+5,postinc2
 12756  004480  C042  FFDE         	movff	??_sync_fs+6,postinc2
 12757  004484  C043  FFDE         	movff	??_sync_fs+7,postinc2
 12758                           
 12759                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 12760  004488  0E2E               	movlw	46
 12761  00448A  243A               	addwf	sync_fs@fs,w,c
 12762  00448C  6E11               	movwf	disk_write@buff,c
 12763  00448E  0E00               	movlw	0
 12764  004490  203B               	addwfc	sync_fs@fs+1,w,c
 12765  004492  6E12               	movwf	disk_write@buff+1,c
 12766  004494  EE20 F02A          	lfsr	2,42
 12767  004498  503A               	movf	sync_fs@fs,w,c
 12768  00449A  26D9               	addwf	fsr2l,f,c
 12769  00449C  503B               	movf	sync_fs@fs+1,w,c
 12770  00449E  22DA               	addwfc	fsr2h,f,c
 12771  0044A0  CFDE F013          	movff	postinc2,disk_write@sector
 12772  0044A4  CFDE F014          	movff	postinc2,disk_write@sector+1
 12773  0044A8  CFDE F015          	movff	postinc2,disk_write@sector+2
 12774  0044AC  CFDE F016          	movff	postinc2,disk_write@sector+3
 12775  0044B0  0E00               	movlw	0
 12776  0044B2  6E18               	movwf	disk_write@count+1,c
 12777  0044B4  0E01               	movlw	1
 12778  0044B6  6E17               	movwf	disk_write@count,c
 12779  0044B8  EE20 F001          	lfsr	2,1
 12780  0044BC  503A               	movf	sync_fs@fs,w,c
 12781  0044BE  26D9               	addwf	fsr2l,f,c
 12782  0044C0  503B               	movf	sync_fs@fs+1,w,c
 12783  0044C2  22DA               	addwfc	fsr2h,f,c
 12784  0044C4  50DF               	movf	indf2,w,c
 12785  0044C6  ECB8  F025         	call	_disk_write
 12786                           
 12787                           ;ff.c: 781:    fs->fsi_flag = 0;
 12788  0044CA  EE20 F005          	lfsr	2,5
 12789  0044CE  503A               	movf	sync_fs@fs,w,c
 12790  0044D0  26D9               	addwf	fsr2l,f,c
 12791  0044D2  503B               	movf	sync_fs@fs+1,w,c
 12792  0044D4  22DA               	addwfc	fsr2h,f,c
 12793  0044D6  0E00               	movlw	0
 12794  0044D8  6EDF               	movwf	indf2,c
 12795  0044DA                     l5400:
 12796                           
 12797                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 12798  0044DA  0E00               	movlw	0
 12799  0044DC  6E11               	movwf	disk_ioctl@cmd,c
 12800  0044DE  0E00               	movlw	0
 12801  0044E0  6E12               	movwf	disk_ioctl@buff,c
 12802  0044E2  0E00               	movlw	0
 12803  0044E4  6E13               	movwf	disk_ioctl@buff+1,c
 12804  0044E6  EE20 F001          	lfsr	2,1
 12805  0044EA  503A               	movf	sync_fs@fs,w,c
 12806  0044EC  26D9               	addwf	fsr2l,f,c
 12807  0044EE  503B               	movf	sync_fs@fs+1,w,c
 12808  0044F0  22DA               	addwfc	fsr2h,f,c
 12809  0044F2  50DF               	movf	indf2,w,c
 12810  0044F4  EC9E  F00F         	call	_disk_ioctl
 12811  0044F8  0900               	iorlw	0
 12812  0044FA  B4D8               	btfsc	status,2,c
 12813  0044FC  D002               	goto	l242
 12814                           
 12815                           ;ff.c: 785:    res = FR_DISK_ERR;
 12816  0044FE  0E01               	movlw	1
 12817  004500  6E44               	movwf	sync_fs@res,c
 12818  004502                     l242:
 12819                           
 12820                           ;ff.c: 788:  return res;
 12821  004502  5044               	movf	sync_fs@res,w,c
 12822  004504  0012               	return		;funcret
 12823  004506                     __end_of_sync_fs:
 12824                           	opt callstack 0
 12825                           
 12826 ;; *************** function _mem_set *****************
 12827 ;; Defined at:
 12828 ;;		line 524 in file "ff.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;  dst             2    0[COMRAM] PTR void 
 12831 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 12832 ;;  val             2    2[COMRAM] int 
 12833 ;;  cnt             2    4[COMRAM] unsigned short 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  d               2    6[COMRAM] PTR unsigned char 
 12836 ;;		 -> FatFs(558), f_open@sfn(12), NULL(0), 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  1    wreg      void 
 12839 ;; Registers used:
 12840 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12846 ;;      Params:         6       0       0       0       0       0       0       0       0
 12847 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12849 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12850 ;;Total ram usage:        8 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; This function calls:
 12853 ;;		Nothing
 12854 ;; This function is called by:
 12855 ;;		_sync_fs
 12856 ;;		_dir_next
 12857 ;;		_dir_register
 12858 ;;		_create_name
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           	psect	text39
 12863  005C14                     __ptext39:
 12864                           	opt callstack 0
 12865  005C14                     _mem_set:
 12866                           	opt callstack 25
 12867                           
 12868                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 12869                           
 12870                           ;incstack = 0
 12871  005C14  C001  F007         	movff	mem_set@dst,mem_set@d
 12872  005C18  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 12873                           
 12874                           ;ff.c: 527:  while (cnt--)
 12875  005C1C  D008               	goto	l4834
 12876  005C1E                     l4830:
 12877                           
 12878                           ;ff.c: 528:   *d++ = (BYTE)val;
 12879  005C1E  C007  FFD9         	movff	mem_set@d,fsr2l
 12880  005C22  C008  FFDA         	movff	mem_set@d+1,fsr2h
 12881  005C26  C003  FFDF         	movff	mem_set@val,indf2
 12882  005C2A  4A07               	infsnz	mem_set@d,f,c
 12883  005C2C  2A08               	incf	mem_set@d+1,f,c
 12884  005C2E                     l4834:
 12885                           
 12886                           ;ff.c: 527:  while (cnt--)
 12887  005C2E  0605               	decf	mem_set@cnt,f,c
 12888  005C30  A0D8               	btfss	status,0,c
 12889  005C32  0606               	decf	mem_set@cnt+1,f,c
 12890  005C34  2805               	incf	mem_set@cnt,w,c
 12891  005C36  E1F3               	bnz	l4830
 12892  005C38  2806               	incf	mem_set@cnt+1,w,c
 12893  005C3A  B4D8               	btfsc	status,2,c
 12894  005C3C  0012               	return	
 12895  005C3E  D7EF               	goto	l4830
 12896  005C40                     __end_of_mem_set:
 12897                           	opt callstack 0
 12898                           
 12899 ;; *************** function _disk_ioctl *****************
 12900 ;; Defined at:
 12901 ;;		line 446 in file "diskio.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;  pdrv            1    wreg     unsigned char 
 12904 ;;  cmd             1   16[COMRAM] unsigned char 
 12905 ;;  buff            2   17[COMRAM] PTR void 
 12906 ;;		 -> NULL(0), 
 12907 ;; Auto vars:     Size  Location     Type
 12908 ;;  pdrv            1   48[COMRAM] unsigned char 
 12909 ;;  csd            16   32[COMRAM] unsigned char [16]
 12910 ;;  csize           4   49[COMRAM] unsigned long 
 12911 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 12912 ;;		 -> NULL(0), 
 12913 ;;  n               1   54[COMRAM] unsigned char 
 12914 ;;  res             1   53[COMRAM] enum E43
 12915 ;; Return value:  Size  Location     Type
 12916 ;;                  1    wreg      enum E43
 12917 ;; Registers used:
 12918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12924 ;;      Params:         3       0       0       0       0       0       0       0       0
 12925 ;;      Locals:        25       0       0       0       0       0       0       0       0
 12926 ;;      Temps:         13       0       0       0       0       0       0       0       0
 12927 ;;      Totals:        41       0       0       0       0       0       0       0       0
 12928 ;;Total ram usage:       41 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; Hardware stack levels required when called:    5
 12931 ;; This function calls:
 12932 ;;		_SPI1_Exchange8bit
 12933 ;;		___wmul
 12934 ;;		_deselect
 12935 ;;		_rcvr_datablock
 12936 ;;		_select
 12937 ;;		_send_cmd
 12938 ;; This function is called by:
 12939 ;;		_sync_fs
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           	psect	text40
 12944  001F3C                     __ptext40:
 12945                           	opt callstack 0
 12946  001F3C                     _disk_ioctl:
 12947                           	opt callstack 21
 12948                           
 12949                           ;incstack = 0
 12950                           ;disk_ioctl@pdrv stored from wreg
 12951  001F3C  6E31               	movwf	disk_ioctl@pdrv,c
 12952                           
 12953                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 12954  001F3E  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 12955  001F42  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 12956                           
 12957                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 12958  001F46  5031               	movf	disk_ioctl@pdrv,w,c
 12959  001F48  B4D8               	btfsc	status,2,c
 12960  001F4A  D002               	goto	l4948
 12961  001F4C  0E04               	movlw	4
 12962  001F4E  0012               	return	
 12963  001F50                     l4948:
 12964                           
 12965                           ;diskio.c: 459:  res = RES_ERROR;
 12966  001F50  0E01               	movlw	1
 12967  001F52  6E36               	movwf	disk_ioctl@res,c
 12968                           
 12969                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 12970  001F54  0100               	movlb	0	; () banked
 12971  001F56  A1F1               	btfss	_Stat& (0+255),0,b
 12972  001F58  D21B               	goto	l5048
 12973                           
 12974                           ; BSR set to: 0
 12975  001F5A  0E03               	movlw	3
 12976  001F5C  0012               	return	
 12977  001F5E                     l4956:
 12978                           
 12979                           ; BSR set to: 0
 12980                           ;diskio.c: 465:   if (select()) res = RES_OK;
 12981  001F5E  EC6B  F02E         	call	_select	;wreg free
 12982  001F62  0900               	iorlw	0
 12983  001F64  B4D8               	btfsc	status,2,c
 12984  001F66  D235               	goto	l5050
 12985  001F68                     u6010:
 12986  001F68  0E00               	movlw	0
 12987  001F6A  D210               	goto	L16
 12988  001F6C                     l4960:
 12989                           
 12990                           ; BSR set to: 0
 12991                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 12992  001F6C  0E00               	movlw	0
 12993  001F6E  6E0B               	movwf	send_cmd@arg,c
 12994  001F70  0E00               	movlw	0
 12995  001F72  6E0C               	movwf	send_cmd@arg+1,c
 12996  001F74  0E00               	movlw	0
 12997  001F76  6E0D               	movwf	send_cmd@arg+2,c
 12998  001F78  0E00               	movlw	0
 12999  001F7A  6E0E               	movwf	send_cmd@arg+3,c
 13000  001F7C  0E09               	movlw	9
 13001  001F7E  ECAE  F02D         	call	_send_cmd
 13002  001F82  0900               	iorlw	0
 13003  001F84  A4D8               	btfss	status,2,c
 13004  001F86  D225               	goto	l5050
 13005  001F88  0E21               	movlw	low disk_ioctl@csd
 13006  001F8A  6E02               	movwf	rcvr_datablock@buff,c
 13007  001F8C  0E00               	movlw	high disk_ioctl@csd
 13008  001F8E  6E03               	movwf	rcvr_datablock@buff+1,c
 13009  001F90  0E00               	movlw	0
 13010  001F92  6E05               	movwf	rcvr_datablock@btr+1,c
 13011  001F94  0E10               	movlw	16
 13012  001F96  6E04               	movwf	rcvr_datablock@btr,c
 13013  001F98  EC75  F02C         	call	_rcvr_datablock	;wreg free
 13014  001F9C  0900               	iorlw	0
 13015  001F9E  B4D8               	btfsc	status,2,c
 13016  001FA0  D218               	goto	l5050
 13017                           
 13018                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 13019  001FA2  4421               	rlncf	disk_ioctl@csd,w,c
 13020  001FA4  46E8               	rlncf	wreg,f,c
 13021  001FA6  0B03               	andlw	3
 13022  001FA8  06E8               	decf	wreg,f,c
 13023  001FAA  A4D8               	btfss	status,2,c
 13024  001FAC  D04E               	goto	l4970
 13025                           
 13026                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 13027  001FAE  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 13028  001FB2  0E3F               	movlw	63
 13029  001FB4  1614               	andwf	??_disk_ioctl,f,c
 13030  001FB6  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 13031  001FBA  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13032  001FBC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13033  001FBE  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13034  001FC0  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 13035  001FC4  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 13036  001FC8  6A16               	clrf	??_disk_ioctl+2,c
 13037  001FCA  6A15               	clrf	??_disk_ioctl+1,c
 13038  001FCC  5029               	movf	disk_ioctl@csd+8,w,c
 13039  001FCE  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13040  001FD0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13041  001FD2  502A               	movf	disk_ioctl@csd+9,w,c
 13042  001FD4  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 13043  001FD6  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13044  001FD8  5019               	movf	??_disk_ioctl+5,w,c
 13045  001FDA  261B               	addwf	??_disk_ioctl+7,f,c
 13046  001FDC  501A               	movf	??_disk_ioctl+6,w,c
 13047  001FDE  221C               	addwfc	??_disk_ioctl+8,f,c
 13048  001FE0  501B               	movf	??_disk_ioctl+7,w,c
 13049  001FE2  2415               	addwf	??_disk_ioctl+1,w,c
 13050  001FE4  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 13051  001FE6  501C               	movf	??_disk_ioctl+8,w,c
 13052  001FE8  2016               	addwfc	??_disk_ioctl+2,w,c
 13053  001FEA  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 13054  001FEC  0E00               	movlw	0
 13055  001FEE  2017               	addwfc	??_disk_ioctl+3,w,c
 13056  001FF0  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 13057  001FF2  0E00               	movlw	0
 13058  001FF4  2018               	addwfc	??_disk_ioctl+4,w,c
 13059  001FF6  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 13060  001FF8  0E01               	movlw	1
 13061  001FFA  241D               	addwf	??_disk_ioctl+9,w,c
 13062  001FFC  6E32               	movwf	disk_ioctl@csize,c
 13063  001FFE  0E00               	movlw	0
 13064  002000  201E               	addwfc	??_disk_ioctl+10,w,c
 13065  002002  6E33               	movwf	disk_ioctl@csize+1,c
 13066  002004  0E00               	movlw	0
 13067  002006  201F               	addwfc	??_disk_ioctl+11,w,c
 13068  002008  6E34               	movwf	disk_ioctl@csize+2,c
 13069  00200A  0E00               	movlw	0
 13070  00200C  2020               	addwfc	??_disk_ioctl+12,w,c
 13071  00200E  6E35               	movwf	disk_ioctl@csize+3,c
 13072                           
 13073                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 13074  002010  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 13075  002014  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 13076  002018  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 13077  00201C  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 13078  002020  0E0A               	movlw	10
 13079  002022                     u6055:
 13080  002022  90D8               	bcf	status,0,c
 13081  002024  3614               	rlcf	??_disk_ioctl,f,c
 13082  002026  3615               	rlcf	??_disk_ioctl+1,f,c
 13083  002028  3616               	rlcf	??_disk_ioctl+2,f,c
 13084  00202A  3617               	rlcf	??_disk_ioctl+3,f,c
 13085  00202C  2EE8               	decfsz	wreg,f,c
 13086  00202E  D7F9               	goto	u6055
 13087  002030  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13088  002034  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13089  002038  C014  FFDE         	movff	??_disk_ioctl,postinc2
 13090  00203C  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13091  002040  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13092  002044  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13093                           
 13094                           ;diskio.c: 473:    } else {
 13095  002048  D78F               	goto	u6010
 13096  00204A                     l4970:
 13097                           
 13098                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 13099  00204A  6A14               	clrf	??_disk_ioctl& (0+255),c
 13100  00204C  AE2B               	btfss	disk_ioctl@csd+10,7,c
 13101  00204E  D001               	bra	u6065
 13102  002050  2A14               	incf	??_disk_ioctl& (0+255),f,c
 13103  002052                     u6065:
 13104  002052  0E01               	movlw	1
 13105  002054  1614               	andwf	??_disk_ioctl,f,c
 13106  002056  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 13107  00205A  0E0F               	movlw	15
 13108  00205C  1615               	andwf	??_disk_ioctl+1,f,c
 13109  00205E  502A               	movf	disk_ioctl@csd+9,w,c
 13110  002060  0B03               	andlw	3
 13111  002062  0D02               	mullw	2
 13112  002064  50F3               	movf	prodl,w,c
 13113  002066  2415               	addwf	??_disk_ioctl+1,w,c
 13114  002068  2414               	addwf	??_disk_ioctl,w,c
 13115  00206A  0F02               	addlw	2
 13116  00206C  6E37               	movwf	disk_ioctl@n,c
 13117                           
 13118                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 13119  00206E  5027               	movf	disk_ioctl@csd+6,w,c
 13120  002070  0B03               	andlw	3
 13121  002072  6E14               	movwf	??_disk_ioctl& (0+255),c
 13122  002074  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13123  002076  0E0A               	movlw	10
 13124  002078                     u6075:
 13125  002078  90D8               	bcf	status,0,c
 13126  00207A  3614               	rlcf	??_disk_ioctl,f,c
 13127  00207C  3615               	rlcf	??_disk_ioctl+1,f,c
 13128  00207E  2EE8               	decfsz	wreg,f,c
 13129  002080  D7FB               	goto	u6075
 13130  002082  5028               	movf	disk_ioctl@csd+7,w,c
 13131  002084  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13132  002086  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13133  002088  90D8               	bcf	status,0,c
 13134  00208A  3616               	rlcf	??_disk_ioctl+2,f,c
 13135  00208C  3617               	rlcf	??_disk_ioctl+3,f,c
 13136  00208E  90D8               	bcf	status,0,c
 13137  002090  3616               	rlcf	??_disk_ioctl+2,f,c
 13138  002092  3617               	rlcf	??_disk_ioctl+3,f,c
 13139  002094  4429               	rlncf	disk_ioctl@csd+8,w,c
 13140  002096  46E8               	rlncf	wreg,f,c
 13141  002098  0B03               	andlw	3
 13142  00209A  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13143  00209C  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 13144  00209E  5016               	movf	??_disk_ioctl+2,w,c
 13145  0020A0  2618               	addwf	??_disk_ioctl+4,f,c
 13146  0020A2  5017               	movf	??_disk_ioctl+3,w,c
 13147  0020A4  2219               	addwfc	??_disk_ioctl+5,f,c
 13148  0020A6  5014               	movf	??_disk_ioctl,w,c
 13149  0020A8  2618               	addwf	??_disk_ioctl+4,f,c
 13150  0020AA  5015               	movf	??_disk_ioctl+1,w,c
 13151  0020AC  2219               	addwfc	??_disk_ioctl+5,f,c
 13152  0020AE  0E01               	movlw	1
 13153  0020B0  2618               	addwf	??_disk_ioctl+4,f,c
 13154  0020B2  0E00               	movlw	0
 13155  0020B4  2219               	addwfc	??_disk_ioctl+5,f,c
 13156  0020B6  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 13157  0020BA  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 13158  0020BE  6A34               	clrf	disk_ioctl@csize+2,c
 13159  0020C0  6A35               	clrf	disk_ioctl@csize+3,c
 13160                           
 13161                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 13162  0020C2  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 13163  0020C6  0EF7               	movlw	-9
 13164  0020C8  2614               	addwf	??_disk_ioctl,f,c
 13165  0020CA  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 13166  0020CE  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 13167  0020D2  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 13168  0020D6  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 13169  0020DA  2A14               	incf	??_disk_ioctl,f,c
 13170  0020DC  D005               	goto	u6080
 13171  0020DE                     u6085:
 13172  0020DE  90D8               	bcf	status,0,c
 13173  0020E0  3615               	rlcf	??_disk_ioctl+1,f,c
 13174  0020E2  3616               	rlcf	??_disk_ioctl+2,f,c
 13175  0020E4  3617               	rlcf	??_disk_ioctl+3,f,c
 13176  0020E6  3618               	rlcf	??_disk_ioctl+4,f,c
 13177  0020E8                     u6080:
 13178  0020E8  2E14               	decfsz	??_disk_ioctl,f,c
 13179  0020EA  D7F9               	goto	u6085
 13180  0020EC  D03D               	goto	L18
 13181  0020EE                     l155:
 13182                           
 13183                           ; BSR set to: 0
 13184                           ;diskio.c: 483:   if (CardType & 0x04) {
 13185  0020EE  A5DE               	btfss	_CardType& (0+255),2,b
 13186  0020F0  D048               	goto	l4996
 13187                           
 13188                           ; BSR set to: 0
 13189                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 13190  0020F2  0E00               	movlw	0
 13191  0020F4  6E0B               	movwf	send_cmd@arg,c
 13192  0020F6  0E00               	movlw	0
 13193  0020F8  6E0C               	movwf	send_cmd@arg+1,c
 13194  0020FA  0E00               	movlw	0
 13195  0020FC  6E0D               	movwf	send_cmd@arg+2,c
 13196  0020FE  0E00               	movlw	0
 13197  002100  6E0E               	movwf	send_cmd@arg+3,c
 13198  002102  0E8D               	movlw	141
 13199  002104  ECAE  F02D         	call	_send_cmd
 13200  002108  0900               	iorlw	0
 13201  00210A  A4D8               	btfss	status,2,c
 13202  00210C  D162               	goto	l5050
 13203                           
 13204                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 13205  00210E  0EFF               	movlw	255
 13206  002110  EC8C  F02E         	call	_SPI1_Exchange8bit
 13207                           
 13208                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 13209  002114  0E21               	movlw	low disk_ioctl@csd
 13210  002116  6E02               	movwf	rcvr_datablock@buff,c
 13211  002118  0E00               	movlw	high disk_ioctl@csd
 13212  00211A  6E03               	movwf	rcvr_datablock@buff+1,c
 13213  00211C  0E00               	movlw	0
 13214  00211E  6E05               	movwf	rcvr_datablock@btr+1,c
 13215  002120  0E10               	movlw	16
 13216  002122  6E04               	movwf	rcvr_datablock@btr,c
 13217  002124  EC75  F02C         	call	_rcvr_datablock	;wreg free
 13218  002128  0900               	iorlw	0
 13219  00212A  B4D8               	btfsc	status,2,c
 13220  00212C  D152               	goto	l5050
 13221                           
 13222                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 13223  00212E  0E30               	movlw	48
 13224  002130  6E37               	movwf	disk_ioctl@n,c
 13225  002132  D004               	goto	l4990
 13226  002134                     l4986:
 13227  002134  0EFF               	movlw	255
 13228  002136  EC8C  F02E         	call	_SPI1_Exchange8bit
 13229  00213A  0637               	decf	disk_ioctl@n,f,c
 13230  00213C                     l4990:
 13231  00213C  5037               	movf	disk_ioctl@n,w,c
 13232  00213E  A4D8               	btfss	status,2,c
 13233  002140  D7F9               	goto	l4986
 13234                           
 13235                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 13236  002142  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13237  002146  3A14               	swapf	??_disk_ioctl,f,c
 13238  002148  0E0F               	movlw	15
 13239  00214A  1614               	andwf	??_disk_ioctl,f,c
 13240  00214C  0E10               	movlw	16
 13241  00214E  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13242  002150  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13243  002152  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13244  002154  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13245  002156  2A14               	incf	??_disk_ioctl,f,c
 13246  002158  D005               	goto	u6130
 13247  00215A                     u6135:
 13248  00215A  90D8               	bcf	status,0,c
 13249  00215C  3615               	rlcf	??_disk_ioctl+1,f,c
 13250  00215E  3616               	rlcf	??_disk_ioctl+2,f,c
 13251  002160  3617               	rlcf	??_disk_ioctl+3,f,c
 13252  002162  3618               	rlcf	??_disk_ioctl+4,f,c
 13253  002164                     u6130:
 13254  002164  2E14               	decfsz	??_disk_ioctl,f,c
 13255  002166  D7F9               	goto	u6135
 13256  002168                     L18:
 13257  002168  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13258  00216C  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13259  002170  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 13260  002174  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 13261  002178  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 13262  00217C  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 13263  002180  D6F3               	goto	u6010
 13264  002182                     l4996:
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 13268  002182  0E00               	movlw	0
 13269  002184  6E0B               	movwf	send_cmd@arg,c
 13270  002186  0E00               	movlw	0
 13271  002188  6E0C               	movwf	send_cmd@arg+1,c
 13272  00218A  0E00               	movlw	0
 13273  00218C  6E0D               	movwf	send_cmd@arg+2,c
 13274  00218E  0E00               	movlw	0
 13275  002190  6E0E               	movwf	send_cmd@arg+3,c
 13276  002192  0E09               	movlw	9
 13277  002194  ECAE  F02D         	call	_send_cmd
 13278  002198  0900               	iorlw	0
 13279  00219A  A4D8               	btfss	status,2,c
 13280  00219C  D11A               	goto	l5050
 13281  00219E  0E21               	movlw	low disk_ioctl@csd
 13282  0021A0  6E02               	movwf	rcvr_datablock@buff,c
 13283  0021A2  0E00               	movlw	high disk_ioctl@csd
 13284  0021A4  6E03               	movwf	rcvr_datablock@buff+1,c
 13285  0021A6  0E00               	movlw	0
 13286  0021A8  6E05               	movwf	rcvr_datablock@btr+1,c
 13287  0021AA  0E10               	movlw	16
 13288  0021AC  6E04               	movwf	rcvr_datablock@btr,c
 13289  0021AE  EC75  F02C         	call	_rcvr_datablock	;wreg free
 13290  0021B2  0900               	iorlw	0
 13291  0021B4  B4D8               	btfsc	status,2,c
 13292  0021B6  D10D               	goto	l5050
 13293                           
 13294                           ;diskio.c: 494:     if (CardType & 0x02) {
 13295  0021B8  0100               	movlb	0	; () banked
 13296  0021BA  A3DE               	btfss	_CardType& (0+255),1,b
 13297  0021BC  D02A               	goto	l5004
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 13301  0021BE  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 13302  0021C2  0E06               	movlw	6
 13303  0021C4  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13304  0021C6                     u6175:
 13305  0021C6  90D8               	bcf	status,0,c
 13306  0021C8  3214               	rrcf	??_disk_ioctl,f,c
 13307  0021CA  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 13308  0021CC  D7FC               	goto	u6175
 13309  0021CE  0EFF               	movlw	-1
 13310  0021D0  2614               	addwf	??_disk_ioctl,f,c
 13311  0021D2  502B               	movf	disk_ioctl@csd+10,w,c
 13312  0021D4  0B3F               	andlw	63
 13313  0021D6  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 13314  0021D8  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 13315  0021DA  90D8               	bcf	status,0,c
 13316  0021DC  3616               	rlcf	??_disk_ioctl+2,f,c
 13317  0021DE  3617               	rlcf	??_disk_ioctl+3,f,c
 13318  0021E0  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 13319  0021E2  AE2C               	btfss	disk_ioctl@csd+11,7,c
 13320  0021E4  D001               	bra	u6185
 13321  0021E6  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 13322  0021E8                     u6185:
 13323  0021E8  0E01               	movlw	1
 13324  0021EA  1618               	andwf	??_disk_ioctl+4,f,c
 13325  0021EC  5018               	movf	??_disk_ioctl+4,w,c
 13326  0021EE  2616               	addwf	??_disk_ioctl+2,f,c
 13327  0021F0  0E00               	movlw	0
 13328  0021F2  2217               	addwfc	??_disk_ioctl+3,f,c
 13329  0021F4  0E01               	movlw	1
 13330  0021F6  2616               	addwf	??_disk_ioctl+2,f,c
 13331  0021F8  0E00               	movlw	0
 13332  0021FA  2217               	addwfc	??_disk_ioctl+3,f,c
 13333  0021FC  2A14               	incf	??_disk_ioctl,f,c
 13334  0021FE  D003               	goto	u6194
 13335  002200                     u6195:
 13336  002200  90D8               	bcf	status,0,c
 13337  002202  3616               	rlcf	??_disk_ioctl+2,f,c
 13338  002204  3617               	rlcf	??_disk_ioctl+3,f,c
 13339  002206                     u6194:
 13340  002206  2E14               	decfsz	??_disk_ioctl,f,c
 13341  002208  D7FB               	goto	u6195
 13342  00220A  5016               	movf	??_disk_ioctl+2,w,c
 13343  00220C  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13344  00220E  5017               	movf	??_disk_ioctl+3,w,c
 13345  002210  D034               	goto	L19
 13346  002212                     l5004:
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 13350  002212  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 13351  002216  90D8               	bcf	status,0,c
 13352  002218  3214               	rrcf	??_disk_ioctl,f,c
 13353  00221A  90D8               	bcf	status,0,c
 13354  00221C  3214               	rrcf	??_disk_ioctl,f,c
 13355  00221E  0E1F               	movlw	31
 13356  002220  1614               	andwf	??_disk_ioctl,f,c
 13357  002222  0E01               	movlw	1
 13358  002224  2414               	addwf	??_disk_ioctl,w,c
 13359  002226  6E01               	movwf	___wmul@multiplier,c
 13360  002228  6A02               	clrf	___wmul@multiplier+1,c
 13361  00222A  0E00               	movlw	0
 13362  00222C  2202               	addwfc	___wmul@multiplier+1,f,c
 13363  00222E  502C               	movf	disk_ioctl@csd+11,w,c
 13364  002230  0B03               	andlw	3
 13365  002232  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 13366  002234  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 13367  002236  90D8               	bcf	status,0,c
 13368  002238  3615               	rlcf	??_disk_ioctl+1,f,c
 13369  00223A  3616               	rlcf	??_disk_ioctl+2,f,c
 13370  00223C  90D8               	bcf	status,0,c
 13371  00223E  3615               	rlcf	??_disk_ioctl+1,f,c
 13372  002240  3616               	rlcf	??_disk_ioctl+2,f,c
 13373  002242  90D8               	bcf	status,0,c
 13374  002244  3615               	rlcf	??_disk_ioctl+1,f,c
 13375  002246  3616               	rlcf	??_disk_ioctl+2,f,c
 13376  002248  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 13377  00224C  0E05               	movlw	5
 13378  00224E  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 13379  002250                     u6205:
 13380  002250  90D8               	bcf	status,0,c
 13381  002252  3217               	rrcf	??_disk_ioctl+3,f,c
 13382  002254  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 13383  002256  D7FC               	goto	u6205
 13384  002258  0E07               	movlw	7
 13385  00225A  1617               	andwf	??_disk_ioctl+3,f,c
 13386  00225C  5017               	movf	??_disk_ioctl+3,w,c
 13387  00225E  2615               	addwf	??_disk_ioctl+1,f,c
 13388  002260  0E00               	movlw	0
 13389  002262  2216               	addwfc	??_disk_ioctl+2,f,c
 13390  002264  0E01               	movlw	1
 13391  002266  2415               	addwf	??_disk_ioctl+1,w,c
 13392  002268  6E03               	movwf	___wmul@multiplicand,c
 13393  00226A  0E00               	movlw	0
 13394  00226C  2016               	addwfc	??_disk_ioctl+2,w,c
 13395  00226E  6E04               	movwf	___wmul@multiplicand+1,c
 13396  002270  EC48  F02E         	call	___wmul	;wreg free
 13397  002274  5001               	movf	?___wmul,w,c
 13398  002276  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 13399  002278  5002               	movf	?___wmul+1,w,c
 13400  00227A                     L19:
 13401  00227A  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 13402  00227C  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 13403  00227E  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 13404  002280  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 13405  002284  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 13406  002288  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 13407  00228C  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 13408  002290  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 13409  002294  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 13410  002298  D667               	goto	u6010
 13411  00229A                     l5008:
 13412                           
 13413                           ; BSR set to: 0
 13414                           ;diskio.c: 507:   *ptr = CardType;
 13415  00229A  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13416  00229E  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13417  0022A2  C0DE  FFDF         	movff	_CardType,indf2
 13418  0022A6  D660               	goto	u6010
 13419  0022A8                     l5012:
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 13423  0022A8  0E00               	movlw	0
 13424  0022AA  6E0B               	movwf	send_cmd@arg,c
 13425  0022AC  0E00               	movlw	0
 13426  0022AE  6E0C               	movwf	send_cmd@arg+1,c
 13427  0022B0  0E00               	movlw	0
 13428  0022B2  6E0D               	movwf	send_cmd@arg+2,c
 13429  0022B4  0E00               	movlw	0
 13430  0022B6  6E0E               	movwf	send_cmd@arg+3,c
 13431  0022B8  0E09               	movlw	9
 13432  0022BA  ECAE  F02D         	call	_send_cmd
 13433  0022BE  0900               	iorlw	0
 13434  0022C0  A4D8               	btfss	status,2,c
 13435  0022C2  D087               	goto	l5050
 13436  0022C4  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13437  0022C8  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13438  0022CC  0E00               	movlw	0
 13439  0022CE  6E05               	movwf	rcvr_datablock@btr+1,c
 13440  0022D0  0E10               	movlw	16
 13441  0022D2  6E04               	movwf	rcvr_datablock@btr,c
 13442  0022D4  EC75  F02C         	call	_rcvr_datablock	;wreg free
 13443  0022D8                     L17:
 13444  0022D8  0900               	iorlw	0
 13445  0022DA  A4D8               	btfss	status,2,c
 13446  0022DC  D645               	goto	u6010
 13447  0022DE  D079               	goto	l5050
 13448  0022E0                     l5018:
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 13452  0022E0  0E00               	movlw	0
 13453  0022E2  6E0B               	movwf	send_cmd@arg,c
 13454  0022E4  0E00               	movlw	0
 13455  0022E6  6E0C               	movwf	send_cmd@arg+1,c
 13456  0022E8  0E00               	movlw	0
 13457  0022EA  6E0D               	movwf	send_cmd@arg+2,c
 13458  0022EC  0E00               	movlw	0
 13459  0022EE  6E0E               	movwf	send_cmd@arg+3,c
 13460  0022F0  0E0A               	movlw	10
 13461  0022F2  ECAE  F02D         	call	_send_cmd
 13462  0022F6  0900               	iorlw	0
 13463  0022F8  A4D8               	btfss	status,2,c
 13464  0022FA  D06B               	goto	l5050
 13465  0022FC  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13466  002300  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13467  002304  0E00               	movlw	0
 13468  002306  6E05               	movwf	rcvr_datablock@btr+1,c
 13469  002308  0E10               	movlw	16
 13470  00230A  6E04               	movwf	rcvr_datablock@btr,c
 13471  00230C  EC75  F02C         	call	_rcvr_datablock	;wreg free
 13472  002310  D7E3               	goto	L17
 13473  002312                     l5024:
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 13477  002312  0E00               	movlw	0
 13478  002314  6E0B               	movwf	send_cmd@arg,c
 13479  002316  0E00               	movlw	0
 13480  002318  6E0C               	movwf	send_cmd@arg+1,c
 13481  00231A  0E00               	movlw	0
 13482  00231C  6E0D               	movwf	send_cmd@arg+2,c
 13483  00231E  0E00               	movlw	0
 13484  002320  6E0E               	movwf	send_cmd@arg+3,c
 13485  002322  0E3A               	movlw	58
 13486  002324  ECAE  F02D         	call	_send_cmd
 13487  002328  0900               	iorlw	0
 13488  00232A  A4D8               	btfss	status,2,c
 13489  00232C  D052               	goto	l5050
 13490                           
 13491                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 13492  00232E  0E04               	movlw	4
 13493  002330  6E37               	movwf	disk_ioctl@n,c
 13494  002332  D00B               	goto	l5034
 13495  002334                     l5028:
 13496  002334  0EFF               	movlw	255
 13497  002336  EC8C  F02E         	call	_SPI1_Exchange8bit
 13498  00233A  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 13499  00233E  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 13500  002342  6EDF               	movwf	indf2,c
 13501  002344  4A38               	infsnz	disk_ioctl@ptr,f,c
 13502  002346  2A39               	incf	disk_ioctl@ptr+1,f,c
 13503  002348  0637               	decf	disk_ioctl@n,f,c
 13504  00234A                     l5034:
 13505  00234A  5037               	movf	disk_ioctl@n,w,c
 13506  00234C  B4D8               	btfsc	status,2,c
 13507  00234E  D60C               	goto	u6010
 13508  002350  D7F1               	goto	l5028
 13509  002352                     l5038:
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 13513  002352  0E00               	movlw	0
 13514  002354  6E0B               	movwf	send_cmd@arg,c
 13515  002356  0E00               	movlw	0
 13516  002358  6E0C               	movwf	send_cmd@arg+1,c
 13517  00235A  0E00               	movlw	0
 13518  00235C  6E0D               	movwf	send_cmd@arg+2,c
 13519  00235E  0E00               	movlw	0
 13520  002360  6E0E               	movwf	send_cmd@arg+3,c
 13521  002362  0E8D               	movlw	141
 13522  002364  ECAE  F02D         	call	_send_cmd
 13523  002368  0900               	iorlw	0
 13524  00236A  A4D8               	btfss	status,2,c
 13525  00236C  D032               	goto	l5050
 13526                           
 13527                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 13528  00236E  0EFF               	movlw	255
 13529  002370  EC8C  F02E         	call	_SPI1_Exchange8bit
 13530                           
 13531                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 13532  002374  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 13533  002378  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 13534  00237C  0E00               	movlw	0
 13535  00237E  6E05               	movwf	rcvr_datablock@btr+1,c
 13536  002380  0E40               	movlw	64
 13537  002382  6E04               	movwf	rcvr_datablock@btr,c
 13538  002384  EC75  F02C         	call	_rcvr_datablock	;wreg free
 13539  002388  D7A7               	goto	L17
 13540  00238A                     l5046:
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;diskio.c: 539:   res = RES_PARERR;
 13544  00238A  0E04               	movlw	4
 13545  00238C                     L16:
 13546  00238C  6E36               	movwf	disk_ioctl@res,c
 13547                           
 13548                           ;diskio.c: 540:  }
 13549  00238E  D021               	goto	l5050
 13550  002390                     l5048:
 13551                           
 13552                           ; BSR set to: 0
 13553  002390  5011               	movf	disk_ioctl@cmd,w,c
 13554  002392  6E14               	movwf	??_disk_ioctl& (0+255),c
 13555  002394  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 13556                           
 13557                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13558                           ; Switch size 1, requested type "simple"
 13559                           ; Number of cases is 1, Range of values is 0 to 0
 13560                           ; switch strategies available:
 13561                           ; Name         Instructions Cycles
 13562                           ; simple_byte            4     3 (average)
 13563                           ;	Chosen strategy is simple_byte
 13564  002396  5015               	movf	??_disk_ioctl+1,w,c
 13565  002398  0A00               	xorlw	0	; case 0
 13566  00239A  A4D8               	btfss	status,2,c
 13567  00239C  D7F6               	goto	l5046
 13568                           
 13569                           ; BSR set to: 0
 13570                           ; Switch size 1, requested type "simple"
 13571                           ; Number of cases is 8, Range of values is 0 to 14
 13572                           ; switch strategies available:
 13573                           ; Name         Instructions Cycles
 13574                           ; simple_byte           25    13 (average)
 13575                           ;	Chosen strategy is simple_byte
 13576  00239E  5014               	movf	??_disk_ioctl,w,c
 13577  0023A0  0A00               	xorlw	0	; case 0
 13578  0023A2  B4D8               	btfsc	status,2,c
 13579  0023A4  D5DC               	goto	l4956
 13580  0023A6  0A01               	xorlw	1	; case 1
 13581  0023A8  B4D8               	btfsc	status,2,c
 13582  0023AA  D5E0               	goto	l4960
 13583  0023AC  0A02               	xorlw	2	; case 3
 13584  0023AE  B4D8               	btfsc	status,2,c
 13585  0023B0  D69E               	goto	l155
 13586  0023B2  0A09               	xorlw	9	; case 10
 13587  0023B4  B4D8               	btfsc	status,2,c
 13588  0023B6  D771               	goto	l5008
 13589  0023B8  0A01               	xorlw	1	; case 11
 13590  0023BA  B4D8               	btfsc	status,2,c
 13591  0023BC  D775               	goto	l5012
 13592  0023BE  0A07               	xorlw	7	; case 12
 13593  0023C0  B4D8               	btfsc	status,2,c
 13594  0023C2  D78E               	goto	l5018
 13595  0023C4  0A01               	xorlw	1	; case 13
 13596  0023C6  B4D8               	btfsc	status,2,c
 13597  0023C8  D7A4               	goto	l5024
 13598  0023CA  0A03               	xorlw	3	; case 14
 13599  0023CC  B4D8               	btfsc	status,2,c
 13600  0023CE  D7C1               	goto	l5038
 13601  0023D0  D7DC               	goto	l5046
 13602  0023D2                     l5050:
 13603                           
 13604                           ;diskio.c: 542:  deselect();
 13605  0023D2  ECB9  F02E         	call	_deselect	;wreg free
 13606                           
 13607                           ;diskio.c: 544:  return res;
 13608  0023D6  5036               	movf	disk_ioctl@res,w,c
 13609  0023D8  0012               	return		;funcret
 13610  0023DA                     __end_of_disk_ioctl:
 13611                           	opt callstack 0
 13612                           
 13613 ;; *************** function ___wmul *****************
 13614 ;; Defined at:
 13615 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;  multiplier      2    0[COMRAM] unsigned int 
 13618 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13619 ;; Auto vars:     Size  Location     Type
 13620 ;;  product         2    4[COMRAM] unsigned int 
 13621 ;; Return value:  Size  Location     Type
 13622 ;;                  2    0[COMRAM] unsigned int 
 13623 ;; Registers used:
 13624 ;;		wreg, status,2, status,0, prodl, prodh
 13625 ;; Tracked objects:
 13626 ;;		On entry : 0/0
 13627 ;;		On exit  : 0/0
 13628 ;;		Unchanged: 0/0
 13629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13630 ;;      Params:         4       0       0       0       0       0       0       0       0
 13631 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13632 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13633 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13634 ;;Total ram usage:        6 bytes
 13635 ;; Hardware stack levels used:    1
 13636 ;; This function calls:
 13637 ;;		Nothing
 13638 ;; This function is called by:
 13639 ;;		_disk_ioctl
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           	psect	text41
 13644  005C90                     __ptext41:
 13645                           	opt callstack 0
 13646  005C90                     ___wmul:
 13647                           	opt callstack 25
 13648                           
 13649                           ;incstack = 0
 13650  005C90  5001               	movf	___wmul@multiplier,w,c
 13651  005C92  0203               	mulwf	___wmul@multiplicand,c
 13652  005C94  CFF3 F005          	movff	prodl,___wmul@product
 13653  005C98  CFF4 F006          	movff	prodh,___wmul@product+1
 13654  005C9C  5001               	movf	___wmul@multiplier,w,c
 13655  005C9E  0204               	mulwf	___wmul@multiplicand+1,c
 13656  005CA0  50F3               	movf	prodl,w,c
 13657  005CA2  2606               	addwf	___wmul@product+1,f,c
 13658  005CA4  5002               	movf	___wmul@multiplier+1,w,c
 13659  005CA6  0203               	mulwf	___wmul@multiplicand,c
 13660  005CA8  50F3               	movf	prodl,w,c
 13661  005CAA  2606               	addwf	___wmul@product+1,f,c
 13662  005CAC  C005  F001         	movff	___wmul@product,?___wmul
 13663  005CB0  C006  F002         	movff	___wmul@product+1,?___wmul+1
 13664  005CB4  0012               	return		;funcret
 13665  005CB6                     __end_of___wmul:
 13666                           	opt callstack 0
 13667                           
 13668 ;; *************** function _st_clust *****************
 13669 ;; Defined at:
 13670 ;;		line 1252 in file "ff.c"
 13671 ;; Parameters:    Size  Location     Type
 13672 ;;  dir             2    0[COMRAM] PTR unsigned char 
 13673 ;;		 -> FatFs(558), NULL(0), 
 13674 ;;  cl              4    2[COMRAM] unsigned long 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;		None
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  1    wreg      void 
 13679 ;; Registers used:
 13680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13686 ;;      Params:         6       0       0       0       0       0       0       0       0
 13687 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13688 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13689 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13690 ;;Total ram usage:        6 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; This function calls:
 13693 ;;		Nothing
 13694 ;; This function is called by:
 13695 ;;		_f_open
 13696 ;;		_f_sync
 13697 ;; This function uses a non-reentrant model
 13698 ;;
 13699                           
 13700                           	psect	text42
 13701  005C40                     __ptext42:
 13702                           	opt callstack 0
 13703  005C40                     _st_clust:
 13704                           	opt callstack 28
 13705                           
 13706                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 13707                           
 13708                           ;incstack = 0
 13709  005C40  EE20 F01A          	lfsr	2,26
 13710  005C44  5001               	movf	st_clust@dir,w,c
 13711  005C46  26D9               	addwf	fsr2l,f,c
 13712  005C48  5002               	movf	st_clust@dir+1,w,c
 13713  005C4A  22DA               	addwfc	fsr2h,f,c
 13714  005C4C  C003  FFDE         	movff	st_clust@cl,postinc2
 13715  005C50  C004  FFDD         	movff	st_clust@cl+1,postdec2
 13716                           
 13717                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 13718  005C54  EE20 F014          	lfsr	2,20
 13719  005C58  5001               	movf	st_clust@dir,w,c
 13720  005C5A  26D9               	addwf	fsr2l,f,c
 13721  005C5C  5002               	movf	st_clust@dir+1,w,c
 13722  005C5E  22DA               	addwfc	fsr2h,f,c
 13723  005C60  C005  FFDE         	movff	st_clust@cl+2,postinc2
 13724  005C64  C006  FFDD         	movff	st_clust@cl+3,postdec2
 13725  005C68  0012               	return		;funcret
 13726  005C6A                     __end_of_st_clust:
 13727                           	opt callstack 0
 13728                           
 13729 ;; *************** function _move_window *****************
 13730 ;; Defined at:
 13731 ;;		line 729 in file "ff.c"
 13732 ;; Parameters:    Size  Location     Type
 13733 ;;  fs              2   47[COMRAM] PTR struct .
 13734 ;;		 -> FatFs(558), NULL(0), 
 13735 ;;  sector          4   49[COMRAM] unsigned long 
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;  res             1   57[COMRAM] enum E93
 13738 ;; Return value:  Size  Location     Type
 13739 ;;                  1    wreg      enum E93
 13740 ;; Registers used:
 13741 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : 0/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13747 ;;      Params:         6       0       0       0       0       0       0       0       0
 13748 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13749 ;;      Temps:          4       0       0       0       0       0       0       0       0
 13750 ;;      Totals:        11       0       0       0       0       0       0       0       0
 13751 ;;Total ram usage:       11 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:    7
 13754 ;; This function calls:
 13755 ;;		_disk_read
 13756 ;;		_sync_window
 13757 ;; This function is called by:
 13758 ;;		_get_fat
 13759 ;;		_put_fat
 13760 ;;		_dir_alloc
 13761 ;;		_dir_find
 13762 ;;		_dir_register
 13763 ;;		_check_fs
 13764 ;;		_find_volume
 13765 ;;		_f_open
 13766 ;;		_f_write
 13767 ;;		_f_sync
 13768 ;;		_f_read
 13769 ;; This function uses a non-reentrant model
 13770 ;;
 13771                           
 13772                           	psect	text43
 13773  0055B0                     __ptext43:
 13774                           	opt callstack 0
 13775  0055B0                     _move_window:
 13776                           	opt callstack 20
 13777                           
 13778                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 13779                           
 13780                           ;incstack = 0
 13781  0055B0  0E00               	movlw	0
 13782  0055B2  6E3A               	movwf	move_window@res,c
 13783                           
 13784                           ;ff.c: 737:  if (sector != fs->winsect) {
 13785  0055B4  EE20 F02A          	lfsr	2,42
 13786  0055B8  5030               	movf	move_window@fs,w,c
 13787  0055BA  26D9               	addwf	fsr2l,f,c
 13788  0055BC  5031               	movf	move_window@fs+1,w,c
 13789  0055BE  22DA               	addwfc	fsr2h,f,c
 13790  0055C0  5032               	movf	move_window@sector,w,c
 13791  0055C2  18DE               	xorwf	postinc2,w,c
 13792  0055C4  E10A               	bnz	u5510
 13793  0055C6  5033               	movf	move_window@sector+1,w,c
 13794  0055C8  18DE               	xorwf	postinc2,w,c
 13795  0055CA  E107               	bnz	u5510
 13796  0055CC  5034               	movf	move_window@sector+2,w,c
 13797  0055CE  18DE               	xorwf	postinc2,w,c
 13798  0055D0  E104               	bnz	u5510
 13799  0055D2  5035               	movf	move_window@sector+3,w,c
 13800  0055D4  18DE               	xorwf	postinc2,w,c
 13801  0055D6  B4D8               	btfsc	status,2,c
 13802  0055D8  D03C               	goto	l4682
 13803  0055DA                     u5510:
 13804                           
 13805                           ;ff.c: 739:   res = sync_window(fs);
 13806  0055DA  C030  F01B         	movff	move_window@fs,sync_window@fs
 13807  0055DE  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 13808  0055E2  EC83  F022         	call	_sync_window	;wreg free
 13809  0055E6  6E3A               	movwf	move_window@res,c
 13810                           
 13811                           ;ff.c: 741:   if (res == FR_OK) {
 13812  0055E8  503A               	movf	move_window@res,w,c
 13813  0055EA  A4D8               	btfss	status,2,c
 13814  0055EC  D032               	goto	l4682
 13815                           
 13816                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 13817  0055EE  0E2E               	movlw	46
 13818  0055F0  2430               	addwf	move_window@fs,w,c
 13819  0055F2  6E11               	movwf	disk_read@buff,c
 13820  0055F4  0E00               	movlw	0
 13821  0055F6  2031               	addwfc	move_window@fs+1,w,c
 13822  0055F8  6E12               	movwf	disk_read@buff+1,c
 13823  0055FA  C032  F013         	movff	move_window@sector,disk_read@sector
 13824  0055FE  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 13825  005602  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 13826  005606  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 13827  00560A  0E00               	movlw	0
 13828  00560C  6E18               	movwf	disk_read@count+1,c
 13829  00560E  0E01               	movlw	1
 13830  005610  6E17               	movwf	disk_read@count,c
 13831  005612  EE20 F001          	lfsr	2,1
 13832  005616  5030               	movf	move_window@fs,w,c
 13833  005618  26D9               	addwf	fsr2l,f,c
 13834  00561A  5031               	movf	move_window@fs+1,w,c
 13835  00561C  22DA               	addwfc	fsr2h,f,c
 13836  00561E  50DF               	movf	indf2,w,c
 13837  005620  EC58  F029         	call	_disk_read
 13838  005624  0900               	iorlw	0
 13839  005626  B4D8               	btfsc	status,2,c
 13840  005628  D006               	goto	l4680
 13841                           
 13842                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 13843  00562A  6832               	setf	move_window@sector,c
 13844  00562C  6833               	setf	move_window@sector+1,c
 13845  00562E  6834               	setf	move_window@sector+2,c
 13846  005630  6835               	setf	move_window@sector+3,c
 13847                           
 13848                           ;ff.c: 744:     res = FR_DISK_ERR;
 13849  005632  0E01               	movlw	1
 13850  005634  6E3A               	movwf	move_window@res,c
 13851  005636                     l4680:
 13852                           
 13853                           ;ff.c: 746:    fs->winsect = sector;
 13854  005636  EE20 F02A          	lfsr	2,42
 13855  00563A  5030               	movf	move_window@fs,w,c
 13856  00563C  26D9               	addwf	fsr2l,f,c
 13857  00563E  5031               	movf	move_window@fs+1,w,c
 13858  005640  22DA               	addwfc	fsr2h,f,c
 13859  005642  C032  FFDE         	movff	move_window@sector,postinc2
 13860  005646  C033  FFDE         	movff	move_window@sector+1,postinc2
 13861  00564A  C034  FFDE         	movff	move_window@sector+2,postinc2
 13862  00564E  C035  FFDE         	movff	move_window@sector+3,postinc2
 13863  005652                     l4682:
 13864                           
 13865                           ;ff.c: 749:  return res;
 13866  005652  503A               	movf	move_window@res,w,c
 13867  005654  0012               	return		;funcret
 13868  005656                     __end_of_move_window:
 13869                           	opt callstack 0
 13870                           
 13871 ;; *************** function _sync_window *****************
 13872 ;; Defined at:
 13873 ;;		line 700 in file "ff.c"
 13874 ;; Parameters:    Size  Location     Type
 13875 ;;  fs              2   26[COMRAM] PTR struct .
 13876 ;;		 -> FatFs(558), NULL(0), 
 13877 ;; Auto vars:     Size  Location     Type
 13878 ;;  wsect           4   43[COMRAM] unsigned long 
 13879 ;;  nf              2   41[COMRAM] unsigned short 
 13880 ;;  res             1   40[COMRAM] enum E93
 13881 ;; Return value:  Size  Location     Type
 13882 ;;                  1    wreg      enum E93
 13883 ;; Registers used:
 13884 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13890 ;;      Params:         2       0       0       0       0       0       0       0       0
 13891 ;;      Locals:         7       0       0       0       0       0       0       0       0
 13892 ;;      Temps:         12       0       0       0       0       0       0       0       0
 13893 ;;      Totals:        21       0       0       0       0       0       0       0       0
 13894 ;;Total ram usage:       21 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    6
 13897 ;; This function calls:
 13898 ;;		_disk_write
 13899 ;; This function is called by:
 13900 ;;		_move_window
 13901 ;;		_sync_fs
 13902 ;;		_dir_next
 13903 ;;		_f_write
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           	psect	text44
 13908  004506                     __ptext44:
 13909                           	opt callstack 0
 13910  004506                     _sync_window:
 13911                           	opt callstack 21
 13912                           
 13913                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 13914                           
 13915                           ;incstack = 0
 13916  004506  0E00               	movlw	0
 13917  004508  6E29               	movwf	sync_window@res,c
 13918                           
 13919                           ;ff.c: 709:  if (fs->wflag) {
 13920  00450A  EE20 F004          	lfsr	2,4
 13921  00450E  501B               	movf	sync_window@fs,w,c
 13922  004510  26D9               	addwf	fsr2l,f,c
 13923  004512  501C               	movf	sync_window@fs+1,w,c
 13924  004514  22DA               	addwfc	fsr2h,f,c
 13925  004516  50DF               	movf	indf2,w,c
 13926  004518  B4D8               	btfsc	status,2,c
 13927  00451A  D09F               	goto	l4662
 13928                           
 13929                           ;ff.c: 710:   wsect = fs->winsect;
 13930  00451C  EE20 F02A          	lfsr	2,42
 13931  004520  501B               	movf	sync_window@fs,w,c
 13932  004522  26D9               	addwf	fsr2l,f,c
 13933  004524  501C               	movf	sync_window@fs+1,w,c
 13934  004526  22DA               	addwfc	fsr2h,f,c
 13935  004528  CFDE F02C          	movff	postinc2,sync_window@wsect
 13936  00452C  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 13937  004530  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 13938  004534  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 13939                           
 13940                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 13941  004538  0E2E               	movlw	46
 13942  00453A  241B               	addwf	sync_window@fs,w,c
 13943  00453C  6E11               	movwf	disk_write@buff,c
 13944  00453E  0E00               	movlw	0
 13945  004540  201C               	addwfc	sync_window@fs+1,w,c
 13946  004542  6E12               	movwf	disk_write@buff+1,c
 13947  004544  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 13948  004548  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 13949  00454C  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 13950  004550  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 13951  004554  0E00               	movlw	0
 13952  004556  6E18               	movwf	disk_write@count+1,c
 13953  004558  0E01               	movlw	1
 13954  00455A  6E17               	movwf	disk_write@count,c
 13955  00455C  EE20 F001          	lfsr	2,1
 13956  004560  501B               	movf	sync_window@fs,w,c
 13957  004562  26D9               	addwf	fsr2l,f,c
 13958  004564  501C               	movf	sync_window@fs+1,w,c
 13959  004566  22DA               	addwfc	fsr2h,f,c
 13960  004568  50DF               	movf	indf2,w,c
 13961  00456A  ECB8  F025         	call	_disk_write
 13962  00456E  0900               	iorlw	0
 13963  004570  B4D8               	btfsc	status,2,c
 13964  004572  D003               	goto	l4644
 13965                           
 13966                           ;ff.c: 712:    res = FR_DISK_ERR;
 13967  004574  0E01               	movlw	1
 13968  004576  6E29               	movwf	sync_window@res,c
 13969                           
 13970                           ;ff.c: 713:   } else {
 13971  004578  D070               	goto	l4662
 13972  00457A                     l4644:
 13973                           
 13974                           ;ff.c: 714:    fs->wflag = 0;
 13975  00457A  EE20 F004          	lfsr	2,4
 13976  00457E  501B               	movf	sync_window@fs,w,c
 13977  004580  26D9               	addwf	fsr2l,f,c
 13978  004582  501C               	movf	sync_window@fs+1,w,c
 13979  004584  22DA               	addwfc	fsr2h,f,c
 13980  004586  0E00               	movlw	0
 13981  004588  6EDF               	movwf	indf2,c
 13982                           
 13983                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 13984  00458A  EE20 F016          	lfsr	2,22
 13985  00458E  501B               	movf	sync_window@fs,w,c
 13986  004590  26D9               	addwf	fsr2l,f,c
 13987  004592  501C               	movf	sync_window@fs+1,w,c
 13988  004594  22DA               	addwfc	fsr2h,f,c
 13989  004596  EE10 F01E          	lfsr	1,30
 13990  00459A  501B               	movf	sync_window@fs,w,c
 13991  00459C  26E1               	addwf	fsr1l,f,c
 13992  00459E  501C               	movf	sync_window@fs+1,w,c
 13993  0045A0  22E2               	addwfc	fsr1h,f,c
 13994  0045A2  CFE6 F021          	movff	postinc1,??_sync_window+4
 13995  0045A6  CFE6 F022          	movff	postinc1,??_sync_window+5
 13996  0045AA  CFE6 F023          	movff	postinc1,??_sync_window+6
 13997  0045AE  CFE6 F024          	movff	postinc1,??_sync_window+7
 13998  0045B2  5021               	movf	??_sync_window+4,w,c
 13999  0045B4  5C2C               	subwf	sync_window@wsect,w,c
 14000  0045B6  6E25               	movwf	(??_sync_window+8)& (0+255),c
 14001  0045B8  5022               	movf	??_sync_window+5,w,c
 14002  0045BA  582D               	subwfb	sync_window@wsect+1,w,c
 14003  0045BC  6E26               	movwf	(??_sync_window+9)& (0+255),c
 14004  0045BE  5023               	movf	??_sync_window+6,w,c
 14005  0045C0  582E               	subwfb	sync_window@wsect+2,w,c
 14006  0045C2  6E27               	movwf	(??_sync_window+10)& (0+255),c
 14007  0045C4  5024               	movf	??_sync_window+7,w,c
 14008  0045C6  582F               	subwfb	sync_window@wsect+3,w,c
 14009  0045C8  6E28               	movwf	(??_sync_window+11)& (0+255),c
 14010  0045CA  50DE               	movf	postinc2,w,c
 14011  0045CC  5C25               	subwf	??_sync_window+8,w,c
 14012  0045CE  50DE               	movf	postinc2,w,c
 14013  0045D0  5826               	subwfb	??_sync_window+9,w,c
 14014  0045D2  50DE               	movf	postinc2,w,c
 14015  0045D4  5827               	subwfb	??_sync_window+10,w,c
 14016  0045D6  50DE               	movf	postinc2,w,c
 14017  0045D8  5828               	subwfb	??_sync_window+11,w,c
 14018  0045DA  B0D8               	btfsc	status,0,c
 14019  0045DC  D03E               	goto	l4662
 14020                           
 14021                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 14022  0045DE  EE20 F003          	lfsr	2,3
 14023  0045E2  501B               	movf	sync_window@fs,w,c
 14024  0045E4  26D9               	addwf	fsr2l,f,c
 14025  0045E6  501C               	movf	sync_window@fs+1,w,c
 14026  0045E8  22DA               	addwfc	fsr2h,f,c
 14027  0045EA  50DF               	movf	indf2,w,c
 14028  0045EC  6E1D               	movwf	??_sync_window& (0+255),c
 14029  0045EE  501D               	movf	??_sync_window,w,c
 14030  0045F0  6E2A               	movwf	sync_window@nf,c
 14031  0045F2  6A2B               	clrf	sync_window@nf+1,c
 14032  0045F4                     l4650:
 14033  0045F4  502B               	movf	sync_window@nf+1,w,c
 14034  0045F6  E104               	bnz	l4654
 14035  0045F8  0E02               	movlw	2
 14036  0045FA  5C2A               	subwf	sync_window@nf,w,c
 14037  0045FC  A0D8               	btfss	status,0,c
 14038  0045FE  D02D               	goto	l4662
 14039  004600                     l4654:
 14040                           
 14041                           ;ff.c: 717:      wsect += fs->fsize;
 14042  004600  EE20 F016          	lfsr	2,22
 14043  004604  501B               	movf	sync_window@fs,w,c
 14044  004606  26D9               	addwf	fsr2l,f,c
 14045  004608  501C               	movf	sync_window@fs+1,w,c
 14046  00460A  22DA               	addwfc	fsr2h,f,c
 14047  00460C  50DE               	movf	postinc2,w,c
 14048  00460E  262C               	addwf	sync_window@wsect,f,c
 14049  004610  50DE               	movf	postinc2,w,c
 14050  004612  222D               	addwfc	sync_window@wsect+1,f,c
 14051  004614  50DE               	movf	postinc2,w,c
 14052  004616  222E               	addwfc	sync_window@wsect+2,f,c
 14053  004618  50DD               	movf	postdec2,w,c
 14054  00461A  222F               	addwfc	sync_window@wsect+3,f,c
 14055                           
 14056                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 14057  00461C  0E2E               	movlw	46
 14058  00461E  241B               	addwf	sync_window@fs,w,c
 14059  004620  6E11               	movwf	disk_write@buff,c
 14060  004622  0E00               	movlw	0
 14061  004624  201C               	addwfc	sync_window@fs+1,w,c
 14062  004626  6E12               	movwf	disk_write@buff+1,c
 14063  004628  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 14064  00462C  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 14065  004630  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 14066  004634  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 14067  004638  0E00               	movlw	0
 14068  00463A  6E18               	movwf	disk_write@count+1,c
 14069  00463C  0E01               	movlw	1
 14070  00463E  6E17               	movwf	disk_write@count,c
 14071  004640  EE20 F001          	lfsr	2,1
 14072  004644  501B               	movf	sync_window@fs,w,c
 14073  004646  26D9               	addwf	fsr2l,f,c
 14074  004648  501C               	movf	sync_window@fs+1,w,c
 14075  00464A  22DA               	addwfc	fsr2h,f,c
 14076  00464C  50DF               	movf	indf2,w,c
 14077  00464E  ECB8  F025         	call	_disk_write
 14078                           
 14079                           ;ff.c: 719:     }
 14080  004652  062A               	decf	sync_window@nf,f,c
 14081  004654  A0D8               	btfss	status,0,c
 14082  004656  062B               	decf	sync_window@nf+1,f,c
 14083  004658  D7CD               	goto	l4650
 14084  00465A                     l4662:
 14085                           
 14086                           ;ff.c: 723:  return res;
 14087  00465A  5029               	movf	sync_window@res,w,c
 14088  00465C  0012               	return		;funcret
 14089  00465E                     __end_of_sync_window:
 14090                           	opt callstack 0
 14091                           
 14092 ;; *************** function _disk_write *****************
 14093 ;; Defined at:
 14094 ;;		line 405 in file "diskio.c"
 14095 ;; Parameters:    Size  Location     Type
 14096 ;;  pdrv            1    wreg     unsigned char 
 14097 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 14098 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
 14099 ;;  sector          4   18[COMRAM] unsigned long 
 14100 ;;  count           2   22[COMRAM] unsigned short 
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;  pdrv            1   25[COMRAM] unsigned char 
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      enum E43
 14105 ;; Registers used:
 14106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14112 ;;      Params:         8       0       0       0       0       0       0       0       0
 14113 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14114 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14115 ;;      Totals:        10       0       0       0       0       0       0       0       0
 14116 ;;Total ram usage:       10 bytes
 14117 ;; Hardware stack levels used:    1
 14118 ;; Hardware stack levels required when called:    5
 14119 ;; This function calls:
 14120 ;;		_deselect
 14121 ;;		_send_cmd
 14122 ;;		_xmit_datablock
 14123 ;; This function is called by:
 14124 ;;		_sync_window
 14125 ;;		_sync_fs
 14126 ;;		_f_write
 14127 ;; This function uses a non-reentrant model
 14128 ;;
 14129                           
 14130                           	psect	text45
 14131  004B70                     __ptext45:
 14132                           	opt callstack 0
 14133  004B70                     _disk_write:
 14134                           	opt callstack 21
 14135                           
 14136                           ;incstack = 0
 14137                           ;disk_write@pdrv stored from wreg
 14138  004B70  6E1A               	movwf	disk_write@pdrv,c
 14139                           
 14140                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 14141  004B72  501A               	movf	disk_write@pdrv,w,c
 14142  004B74  A4D8               	btfss	status,2,c
 14143  004B76  D004               	goto	u5200
 14144  004B78  5017               	movf	disk_write@count,w,c
 14145  004B7A  1018               	iorwf	disk_write@count+1,w,c
 14146  004B7C  A4D8               	btfss	status,2,c
 14147  004B7E  D002               	goto	l126
 14148  004B80                     u5200:
 14149  004B80  0E04               	movlw	4
 14150  004B82  0012               	return	
 14151  004B84                     l126:
 14152                           
 14153                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 14154  004B84  0100               	movlb	0	; () banked
 14155  004B86  A1F1               	btfss	_Stat& (0+255),0,b
 14156  004B88  D002               	goto	l130
 14157                           
 14158                           ; BSR set to: 0
 14159  004B8A  0E03               	movlw	3
 14160  004B8C  0012               	return	
 14161  004B8E                     l130:
 14162                           
 14163                           ; BSR set to: 0
 14164                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 14165  004B8E  A5F1               	btfss	_Stat& (0+255),2,b
 14166  004B90  D002               	goto	l131
 14167                           
 14168                           ; BSR set to: 0
 14169  004B92  0E02               	movlw	2
 14170  004B94  0012               	return	
 14171  004B96                     l131:
 14172                           
 14173                           ; BSR set to: 0
 14174                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 14175  004B96  B7DE               	btfsc	_CardType& (0+255),3,b
 14176  004B98  D008               	goto	l132
 14177                           
 14178                           ; BSR set to: 0
 14179  004B9A  0E09               	movlw	9
 14180  004B9C                     u5245:
 14181  004B9C  90D8               	bcf	status,0,c
 14182  004B9E  3613               	rlcf	disk_write@sector,f,c
 14183  004BA0  3614               	rlcf	disk_write@sector+1,f,c
 14184  004BA2  3615               	rlcf	disk_write@sector+2,f,c
 14185  004BA4  3616               	rlcf	disk_write@sector+3,f,c
 14186  004BA6  2EE8               	decfsz	wreg,f,c
 14187  004BA8  D7F9               	goto	u5245
 14188  004BAA                     l132:
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;diskio.c: 418:  if (count == 1) {
 14192  004BAA  0417               	decf	disk_write@count,w,c
 14193  004BAC  1018               	iorwf	disk_write@count+1,w,c
 14194  004BAE  A4D8               	btfss	status,2,c
 14195  004BB0  D01D               	goto	l4576
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 14199  004BB2  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14200  004BB6  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14201  004BBA  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14202  004BBE  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14203  004BC2  0E18               	movlw	24
 14204  004BC4  ECAE  F02D         	call	_send_cmd
 14205  004BC8  0900               	iorlw	0
 14206  004BCA  A4D8               	btfss	status,2,c
 14207  004BCC  D04F               	goto	l4590
 14208  004BCE  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14209  004BD2  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14210  004BD6  0EFE               	movlw	254
 14211  004BD8  6E06               	movwf	xmit_datablock@token,c
 14212  004BDA  ECDE  F02C         	call	_xmit_datablock	;wreg free
 14213  004BDE  0900               	iorlw	0
 14214  004BE0  B4D8               	btfsc	status,2,c
 14215  004BE2  D044               	goto	l4590
 14216                           
 14217                           ;diskio.c: 421:    count = 0;
 14218  004BE4  0E00               	movlw	0
 14219  004BE6  6E18               	movwf	disk_write@count+1,c
 14220  004BE8  0E00               	movlw	0
 14221  004BEA  D03F               	goto	L20
 14222  004BEC                     l4576:
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 14226  004BEC  C0DE  F019         	movff	_CardType,??_disk_write
 14227  004BF0  0E06               	movlw	6
 14228  004BF2  1619               	andwf	??_disk_write,f,c
 14229  004BF4  B4D8               	btfsc	status,2,c
 14230  004BF6  D009               	goto	l136
 14231                           
 14232                           ; BSR set to: 0
 14233  004BF8  C017  F00B         	movff	disk_write@count,send_cmd@arg
 14234  004BFC  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 14235  004C00  6A0D               	clrf	send_cmd@arg+2,c
 14236  004C02  6A0E               	clrf	send_cmd@arg+3,c
 14237  004C04  0E97               	movlw	151
 14238  004C06  ECAE  F02D         	call	_send_cmd
 14239  004C0A                     l136:
 14240                           
 14241                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 14242  004C0A  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 14243  004C0E  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 14244  004C12  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 14245  004C16  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 14246  004C1A  0E19               	movlw	25
 14247  004C1C  ECAE  F02D         	call	_send_cmd
 14248  004C20  0900               	iorlw	0
 14249  004C22  A4D8               	btfss	status,2,c
 14250  004C24  D023               	goto	l4590
 14251  004C26                     u5290:
 14252                           
 14253                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 14254  004C26  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 14255  004C2A  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 14256  004C2E  0EFC               	movlw	252
 14257  004C30  6E06               	movwf	xmit_datablock@token,c
 14258  004C32  ECDE  F02C         	call	_xmit_datablock	;wreg free
 14259  004C36  0900               	iorlw	0
 14260  004C38  B4D8               	btfsc	status,2,c
 14261  004C3A  D009               	goto	u5310
 14262                           
 14263                           ;diskio.c: 428:     buff += 512;
 14264  004C3C  0E02               	movlw	2
 14265  004C3E  2612               	addwf	disk_write@buff+1,f,c
 14266                           
 14267                           ;diskio.c: 429:    } while (--count);
 14268  004C40  0617               	decf	disk_write@count,f,c
 14269  004C42  A0D8               	btfss	status,0,c
 14270  004C44  0618               	decf	disk_write@count+1,f,c
 14271  004C46  5017               	movf	disk_write@count,w,c
 14272  004C48  1018               	iorwf	disk_write@count+1,w,c
 14273  004C4A  A4D8               	btfss	status,2,c
 14274  004C4C  D7EC               	goto	u5290
 14275  004C4E                     u5310:
 14276                           
 14277                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 14278  004C4E  0E00               	movlw	0
 14279  004C50  6E04               	movwf	xmit_datablock@buff,c
 14280  004C52  0E00               	movlw	0
 14281  004C54  6E05               	movwf	xmit_datablock@buff+1,c
 14282  004C56  0EFD               	movlw	253
 14283  004C58  6E06               	movwf	xmit_datablock@token,c
 14284  004C5A  ECDE  F02C         	call	_xmit_datablock	;wreg free
 14285  004C5E  0900               	iorlw	0
 14286  004C60  A4D8               	btfss	status,2,c
 14287  004C62  D004               	goto	l4590
 14288                           
 14289                           ;diskio.c: 431:     count = 1;
 14290  004C64  0E00               	movlw	0
 14291  004C66  6E18               	movwf	disk_write@count+1,c
 14292  004C68  0E01               	movlw	1
 14293  004C6A                     L20:
 14294  004C6A  6E17               	movwf	disk_write@count,c
 14295  004C6C                     l4590:
 14296                           
 14297                           ;diskio.c: 434:  deselect();
 14298  004C6C  ECB9  F02E         	call	_deselect	;wreg free
 14299                           
 14300                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 14301  004C70  5017               	movf	disk_write@count,w,c
 14302  004C72  1018               	iorwf	disk_write@count+1,w,c
 14303  004C74  B4D8               	btfsc	status,2,c
 14304  004C76  D002               	goto	u5330
 14305  004C78  0E01               	movlw	1
 14306  004C7A  0012               	return	
 14307  004C7C                     u5330:
 14308  004C7C  0E00               	movlw	0
 14309  004C7E  0012               	return		;funcret
 14310  004C80                     __end_of_disk_write:
 14311                           	opt callstack 0
 14312                           
 14313 ;; *************** function _xmit_datablock *****************
 14314 ;; Defined at:
 14315 ;;		line 156 in file "diskio.c"
 14316 ;; Parameters:    Size  Location     Type
 14317 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 14318 ;;		 -> FatFs.win(512), FatFs(558), ND(2), NULL(0), 
 14319 ;;  token           1    5[COMRAM] unsigned char 
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;  i               2    6[COMRAM] unsigned short 
 14322 ;;  resp            1    8[COMRAM] unsigned char 
 14323 ;; Return value:  Size  Location     Type
 14324 ;;                  1    wreg      unsigned char 
 14325 ;; Registers used:
 14326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14327 ;; Tracked objects:
 14328 ;;		On entry : 0/0
 14329 ;;		On exit  : 0/0
 14330 ;;		Unchanged: 0/0
 14331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14332 ;;      Params:         3       0       0       0       0       0       0       0       0
 14333 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14334 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14335 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14336 ;;Total ram usage:        6 bytes
 14337 ;; Hardware stack levels used:    1
 14338 ;; Hardware stack levels required when called:    2
 14339 ;; This function calls:
 14340 ;;		_SPI1_Exchange8bit
 14341 ;;		_wait_ready
 14342 ;; This function is called by:
 14343 ;;		_disk_write
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           	psect	text46
 14348  0059BC                     __ptext46:
 14349                           	opt callstack 0
 14350  0059BC                     _xmit_datablock:
 14351                           	opt callstack 23
 14352                           
 14353                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 14354                           
 14355                           ;incstack = 0
 14356  0059BC  ECCF  F02D         	call	_wait_ready	;wreg free
 14357  0059C0  0900               	iorlw	0
 14358  0059C2  A4D8               	btfss	status,2,c
 14359  0059C4  D002               	goto	l4482
 14360  0059C6                     u5090:
 14361  0059C6  0E00               	movlw	0
 14362  0059C8  0012               	return	
 14363  0059CA                     l4482:
 14364                           
 14365                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 14366  0059CA  5006               	movf	xmit_datablock@token,w,c
 14367  0059CC  EC8C  F02E         	call	_SPI1_Exchange8bit
 14368                           
 14369                           ;diskio.c: 168:  if (token != 0xFD) {
 14370  0059D0  0EFD               	movlw	253
 14371  0059D2  1806               	xorwf	xmit_datablock@token,w,c
 14372  0059D4  B4D8               	btfsc	status,2,c
 14373  0059D6  D023               	goto	l4502
 14374                           
 14375                           ;diskio.c: 169:   i = 512;
 14376  0059D8  0E02               	movlw	2
 14377  0059DA  6E08               	movwf	xmit_datablock@i+1,c
 14378  0059DC  0E00               	movlw	0
 14379  0059DE  6E07               	movwf	xmit_datablock@i,c
 14380  0059E0                     l4488:
 14381                           
 14382                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 14383  0059E0  C004  FFD9         	movff	xmit_datablock@buff,fsr2l
 14384  0059E4  C005  FFDA         	movff	xmit_datablock@buff+1,fsr2h
 14385  0059E8  50DF               	movf	indf2,w,c
 14386  0059EA  EC8C  F02E         	call	_SPI1_Exchange8bit
 14387  0059EE  4A04               	infsnz	xmit_datablock@buff,f,c
 14388  0059F0  2A05               	incf	xmit_datablock@buff+1,f,c
 14389  0059F2  0607               	decf	xmit_datablock@i,f,c
 14390  0059F4  A0D8               	btfss	status,0,c
 14391  0059F6  0608               	decf	xmit_datablock@i+1,f,c
 14392  0059F8  5007               	movf	xmit_datablock@i,w,c
 14393  0059FA  1008               	iorwf	xmit_datablock@i+1,w,c
 14394  0059FC  A4D8               	btfss	status,2,c
 14395  0059FE  D7F0               	goto	l4488
 14396                           
 14397                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 14398  005A00  0EFF               	movlw	255
 14399  005A02  EC8C  F02E         	call	_SPI1_Exchange8bit
 14400                           
 14401                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 14402  005A06  0EFF               	movlw	255
 14403  005A08  EC8C  F02E         	call	_SPI1_Exchange8bit
 14404                           
 14405                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 14406  005A0C  0EFF               	movlw	255
 14407  005A0E  EC8C  F02E         	call	_SPI1_Exchange8bit
 14408  005A12  6E09               	movwf	xmit_datablock@resp,c
 14409                           
 14410                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 14411  005A14  5009               	movf	xmit_datablock@resp,w,c
 14412  005A16  0B1F               	andlw	31
 14413  005A18  0A05               	xorlw	5
 14414  005A1A  A4D8               	btfss	status,2,c
 14415  005A1C  D7D4               	goto	u5090
 14416  005A1E                     l4502:
 14417                           
 14418                           ;diskio.c: 180:  return 1;
 14419  005A1E  0E01               	movlw	1
 14420  005A20  0012               	return		;funcret
 14421  005A22                     __end_of_xmit_datablock:
 14422                           	opt callstack 0
 14423                           
 14424 ;; *************** function _disk_read *****************
 14425 ;; Defined at:
 14426 ;;		line 370 in file "diskio.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;  pdrv            1    wreg     unsigned char 
 14429 ;;  buff            2   16[COMRAM] PTR unsigned char 
 14430 ;;		 -> FatFs(558), NULL(0), 
 14431 ;;  sector          4   18[COMRAM] unsigned long 
 14432 ;;  count           2   22[COMRAM] unsigned short 
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;  pdrv            1   24[COMRAM] unsigned char 
 14435 ;;  cmd             1   27[COMRAM] unsigned char 
 14436 ;; Return value:  Size  Location     Type
 14437 ;;                  1    wreg      enum E43
 14438 ;; Registers used:
 14439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14440 ;; Tracked objects:
 14441 ;;		On entry : 0/0
 14442 ;;		On exit  : 0/0
 14443 ;;		Unchanged: 0/0
 14444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14445 ;;      Params:         8       0       0       0       0       0       0       0       0
 14446 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14447 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14448 ;;      Totals:        12       0       0       0       0       0       0       0       0
 14449 ;;Total ram usage:       12 bytes
 14450 ;; Hardware stack levels used:    1
 14451 ;; Hardware stack levels required when called:    5
 14452 ;; This function calls:
 14453 ;;		_deselect
 14454 ;;		_rcvr_datablock
 14455 ;;		_send_cmd
 14456 ;; This function is called by:
 14457 ;;		_move_window
 14458 ;;		_f_read
 14459 ;; This function uses a non-reentrant model
 14460 ;;
 14461                           
 14462                           	psect	text47
 14463  0052B0                     __ptext47:
 14464                           	opt callstack 0
 14465  0052B0                     _disk_read:
 14466                           	opt callstack 21
 14467                           
 14468                           ;incstack = 0
 14469                           ;disk_read@pdrv stored from wreg
 14470  0052B0  6E19               	movwf	disk_read@pdrv,c
 14471                           
 14472                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 14473  0052B2  5019               	movf	disk_read@pdrv,w,c
 14474  0052B4  A4D8               	btfss	status,2,c
 14475  0052B6  D004               	goto	u5360
 14476  0052B8  5017               	movf	disk_read@count,w,c
 14477  0052BA  1018               	iorwf	disk_read@count+1,w,c
 14478  0052BC  A4D8               	btfss	status,2,c
 14479  0052BE  D002               	goto	l109
 14480  0052C0                     u5360:
 14481  0052C0  0E04               	movlw	4
 14482  0052C2  0012               	return	
 14483  0052C4                     l109:
 14484                           
 14485                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 14486  0052C4  0100               	movlb	0	; () banked
 14487  0052C6  A1F1               	btfss	_Stat& (0+255),0,b
 14488  0052C8  D002               	goto	l113
 14489                           
 14490                           ; BSR set to: 0
 14491  0052CA  0E03               	movlw	3
 14492  0052CC  0012               	return	
 14493  0052CE                     l113:
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 14497  0052CE  B7DE               	btfsc	_CardType& (0+255),3,b
 14498  0052D0  D008               	goto	l114
 14499                           
 14500                           ; BSR set to: 0
 14501  0052D2  0E09               	movlw	9
 14502  0052D4                     u5395:
 14503  0052D4  90D8               	bcf	status,0,c
 14504  0052D6  3613               	rlcf	disk_read@sector,f,c
 14505  0052D8  3614               	rlcf	disk_read@sector+1,f,c
 14506  0052DA  3615               	rlcf	disk_read@sector+2,f,c
 14507  0052DC  3616               	rlcf	disk_read@sector+3,f,c
 14508  0052DE  2EE8               	decfsz	wreg,f,c
 14509  0052E0  D7F9               	goto	u5395
 14510  0052E2                     l114:
 14511                           
 14512                           ; BSR set to: 0
 14513                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 14514  0052E2  5018               	movf	disk_read@count+1,w,c
 14515  0052E4  E108               	bnz	l4612
 14516  0052E6  0E02               	movlw	2
 14517  0052E8  5C17               	subwf	disk_read@count,w,c
 14518  0052EA  B0D8               	btfsc	status,0,c
 14519  0052EC  D004               	goto	l4612
 14520                           
 14521                           ; BSR set to: 0
 14522  0052EE  0E00               	movlw	0
 14523  0052F0  6E1B               	movwf	_disk_read$143+1,c
 14524  0052F2  0E11               	movlw	17
 14525  0052F4  D003               	goto	L21
 14526  0052F6                     l4612:
 14527                           
 14528                           ; BSR set to: 0
 14529  0052F6  0E00               	movlw	0
 14530  0052F8  6E1B               	movwf	_disk_read$143+1,c
 14531  0052FA  0E12               	movlw	18
 14532  0052FC                     L21:
 14533  0052FC  6E1A               	movwf	_disk_read$143,c
 14534                           
 14535                           ; BSR set to: 0
 14536  0052FE  C01A  F01C         	movff	_disk_read$143,disk_read@cmd
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 14540  005302  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 14541  005306  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 14542  00530A  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 14543  00530E  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 14544  005312  501C               	movf	disk_read@cmd,w,c
 14545  005314  ECAE  F02D         	call	_send_cmd
 14546  005318  0900               	iorlw	0
 14547  00531A  A4D8               	btfss	status,2,c
 14548  00531C  D025               	goto	l4628
 14549  00531E                     u5410:
 14550                           
 14551                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 14552  00531E  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 14553  005322  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 14554  005326  0E02               	movlw	2
 14555  005328  6E05               	movwf	rcvr_datablock@btr+1,c
 14556  00532A  0E00               	movlw	0
 14557  00532C  6E04               	movwf	rcvr_datablock@btr,c
 14558  00532E  EC75  F02C         	call	_rcvr_datablock	;wreg free
 14559  005332  0900               	iorlw	0
 14560  005334  B4D8               	btfsc	status,2,c
 14561  005336  D009               	goto	u5430
 14562                           
 14563                           ;diskio.c: 389:    buff += 512;
 14564  005338  0E02               	movlw	2
 14565  00533A  2612               	addwf	disk_read@buff+1,f,c
 14566                           
 14567                           ;diskio.c: 390:   } while (--count);
 14568  00533C  0617               	decf	disk_read@count,f,c
 14569  00533E  A0D8               	btfss	status,0,c
 14570  005340  0618               	decf	disk_read@count+1,f,c
 14571  005342  5017               	movf	disk_read@count,w,c
 14572  005344  1018               	iorwf	disk_read@count+1,w,c
 14573  005346  A4D8               	btfss	status,2,c
 14574  005348  D7EA               	goto	u5410
 14575  00534A                     u5430:
 14576                           
 14577                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 14578  00534A  0E12               	movlw	18
 14579  00534C  181C               	xorwf	disk_read@cmd,w,c
 14580  00534E  A4D8               	btfss	status,2,c
 14581  005350  D00B               	goto	l4628
 14582  005352  0E00               	movlw	0
 14583  005354  6E0B               	movwf	send_cmd@arg,c
 14584  005356  0E00               	movlw	0
 14585  005358  6E0C               	movwf	send_cmd@arg+1,c
 14586  00535A  0E00               	movlw	0
 14587  00535C  6E0D               	movwf	send_cmd@arg+2,c
 14588  00535E  0E00               	movlw	0
 14589  005360  6E0E               	movwf	send_cmd@arg+3,c
 14590  005362  0E0C               	movlw	12
 14591  005364  ECAE  F02D         	call	_send_cmd
 14592  005368                     l4628:
 14593                           
 14594                           ;diskio.c: 393:  deselect();
 14595  005368  ECB9  F02E         	call	_deselect	;wreg free
 14596                           
 14597                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 14598  00536C  5017               	movf	disk_read@count,w,c
 14599  00536E  1018               	iorwf	disk_read@count+1,w,c
 14600  005370  B4D8               	btfsc	status,2,c
 14601  005372  D002               	goto	u5450
 14602  005374  0E01               	movlw	1
 14603  005376  0012               	return	
 14604  005378                     u5450:
 14605  005378  0E00               	movlw	0
 14606  00537A  0012               	return		;funcret
 14607  00537C                     __end_of_disk_read:
 14608                           	opt callstack 0
 14609                           
 14610 ;; *************** function _send_cmd *****************
 14611 ;; Defined at:
 14612 ;;		line 231 in file "diskio.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;  cmd             1    wreg     unsigned char 
 14615 ;;  arg             4   10[COMRAM] unsigned long 
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;  cmd             1   14[COMRAM] unsigned char 
 14618 ;;  res             1   15[COMRAM] unsigned char 
 14619 ;; Return value:  Size  Location     Type
 14620 ;;                  1    wreg      unsigned char 
 14621 ;; Registers used:
 14622 ;;		wreg, status,2, status,0, cstack
 14623 ;; Tracked objects:
 14624 ;;		On entry : 0/0
 14625 ;;		On exit  : 0/0
 14626 ;;		Unchanged: 0/0
 14627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14628 ;;      Params:         4       0       0       0       0       0       0       0       0
 14629 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14630 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14631 ;;      Totals:         6       0       0       0       0       0       0       0       0
 14632 ;;Total ram usage:        6 bytes
 14633 ;; Hardware stack levels used:    1
 14634 ;; Hardware stack levels required when called:    4
 14635 ;; This function calls:
 14636 ;;		___send_cmd
 14637 ;; This function is called by:
 14638 ;;		_disk_initialize
 14639 ;;		_disk_read
 14640 ;;		_disk_write
 14641 ;;		_disk_ioctl
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           	psect	text48
 14646  005B5C                     __ptext48:
 14647                           	opt callstack 0
 14648  005B5C                     _send_cmd:
 14649                           	opt callstack 21
 14650                           
 14651                           ;incstack = 0
 14652                           ;send_cmd@cmd stored from wreg
 14653  005B5C  6E0F               	movwf	send_cmd@cmd,c
 14654                           
 14655                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 14656  005B5E  AE0F               	btfss	send_cmd@cmd,7,c
 14657  005B60  D012               	goto	l4518
 14658                           
 14659                           ;diskio.c: 243:   cmd &= 0x7F;
 14660  005B62  9E0F               	bcf	send_cmd@cmd,7,c
 14661                           
 14662                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 14663  005B64  0E00               	movlw	0
 14664  005B66  6E04               	movwf	___send_cmd@arg,c
 14665  005B68  0E00               	movlw	0
 14666  005B6A  6E05               	movwf	___send_cmd@arg+1,c
 14667  005B6C  0E00               	movlw	0
 14668  005B6E  6E06               	movwf	___send_cmd@arg+2,c
 14669  005B70  0E00               	movlw	0
 14670  005B72  6E07               	movwf	___send_cmd@arg+3,c
 14671  005B74  0E37               	movlw	55
 14672  005B76  ECB6  F02B         	call	___send_cmd
 14673  005B7A  6E10               	movwf	send_cmd@res,c
 14674                           
 14675                           ;diskio.c: 249:   if (res > 1) return res;
 14676  005B7C  0E01               	movlw	1
 14677  005B7E  6410               	cpfsgt	send_cmd@res,c
 14678  005B80  D002               	goto	l4518
 14679  005B82  5010               	movf	send_cmd@res,w,c
 14680  005B84  0012               	return	
 14681  005B86                     l4518:
 14682                           
 14683                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 14684  005B86  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 14685  005B8A  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 14686  005B8E  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 14687  005B92  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 14688  005B96  500F               	movf	send_cmd@cmd,w,c
 14689  005B98  ECB6  F02B         	call	___send_cmd
 14690  005B9C  0012               	return		;funcret
 14691  005B9E                     __end_of_send_cmd:
 14692                           	opt callstack 0
 14693                           
 14694 ;; *************** function ___send_cmd *****************
 14695 ;; Defined at:
 14696 ;;		line 195 in file "diskio.c"
 14697 ;; Parameters:    Size  Location     Type
 14698 ;;  cmd             1    wreg     unsigned char 
 14699 ;;  arg             4    3[COMRAM] unsigned long 
 14700 ;; Auto vars:     Size  Location     Type
 14701 ;;  cmd             1    9[COMRAM] unsigned char 
 14702 ;;  n               1    8[COMRAM] unsigned char 
 14703 ;;  res             1    7[COMRAM] unsigned char 
 14704 ;; Return value:  Size  Location     Type
 14705 ;;                  1    wreg      unsigned char 
 14706 ;; Registers used:
 14707 ;;		wreg, status,2, status,0, cstack
 14708 ;; Tracked objects:
 14709 ;;		On entry : 0/0
 14710 ;;		On exit  : 0/0
 14711 ;;		Unchanged: 0/0
 14712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14713 ;;      Params:         4       0       0       0       0       0       0       0       0
 14714 ;;      Locals:         3       0       0       0       0       0       0       0       0
 14715 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14716 ;;      Totals:         7       0       0       0       0       0       0       0       0
 14717 ;;Total ram usage:        7 bytes
 14718 ;; Hardware stack levels used:    1
 14719 ;; Hardware stack levels required when called:    3
 14720 ;; This function calls:
 14721 ;;		_SPI1_Exchange8bit
 14722 ;;		_deselect
 14723 ;;		_select
 14724 ;; This function is called by:
 14725 ;;		_send_cmd
 14726 ;; This function uses a non-reentrant model
 14727 ;;
 14728                           
 14729                           	psect	text49
 14730  00576C                     __ptext49:
 14731                           	opt callstack 0
 14732  00576C                     ___send_cmd:
 14733                           	opt callstack 21
 14734                           
 14735                           ;incstack = 0
 14736                           ;___send_cmd@cmd stored from wreg
 14737  00576C  6E0A               	movwf	___send_cmd@cmd,c
 14738                           
 14739                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 14740  00576E  0E0C               	movlw	12
 14741  005770  180A               	xorwf	___send_cmd@cmd,w,c
 14742  005772  B4D8               	btfsc	status,2,c
 14743  005774  D009               	goto	l4438
 14744                           
 14745                           ;diskio.c: 204:   deselect();
 14746  005776  ECB9  F02E         	call	_deselect	;wreg free
 14747                           
 14748                           ;diskio.c: 205:   if (!select()) return 0xFF;
 14749  00577A  EC6B  F02E         	call	_select	;wreg free
 14750  00577E  0900               	iorlw	0
 14751  005780  A4D8               	btfss	status,2,c
 14752  005782  D002               	goto	l4438
 14753  005784  0EFF               	movlw	255
 14754  005786  0012               	return	
 14755  005788                     l4438:
 14756                           
 14757                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 14758  005788  500A               	movf	___send_cmd@cmd,w,c
 14759  00578A  0940               	iorlw	64
 14760  00578C  EC8C  F02E         	call	_SPI1_Exchange8bit
 14761                           
 14762                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 14763  005790  5007               	movf	___send_cmd@arg+3,w,c
 14764  005792  EC8C  F02E         	call	_SPI1_Exchange8bit
 14765                           
 14766                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 14767  005796  5006               	movf	___send_cmd@arg+2,w,c
 14768  005798  EC8C  F02E         	call	_SPI1_Exchange8bit
 14769                           
 14770                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 14771  00579C  5005               	movf	___send_cmd@arg+1,w,c
 14772  00579E  EC8C  F02E         	call	_SPI1_Exchange8bit
 14773                           
 14774                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 14775  0057A2  5004               	movf	___send_cmd@arg,w,c
 14776  0057A4  EC8C  F02E         	call	_SPI1_Exchange8bit
 14777                           
 14778                           ;diskio.c: 214:  n = 0x01;
 14779  0057A8  0E01               	movlw	1
 14780  0057AA  6E09               	movwf	___send_cmd@n,c
 14781                           
 14782                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 14783  0057AC  500A               	movf	___send_cmd@cmd,w,c
 14784  0057AE  A4D8               	btfss	status,2,c
 14785  0057B0  D002               	goto	l4454
 14786  0057B2  0E95               	movlw	149
 14787  0057B4  6E09               	movwf	___send_cmd@n,c
 14788  0057B6                     l4454:
 14789                           
 14790                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 14791  0057B6  0E08               	movlw	8
 14792  0057B8  180A               	xorwf	___send_cmd@cmd,w,c
 14793  0057BA  A4D8               	btfss	status,2,c
 14794  0057BC  D002               	goto	l4458
 14795  0057BE  0E87               	movlw	135
 14796  0057C0  6E09               	movwf	___send_cmd@n,c
 14797  0057C2                     l4458:
 14798                           
 14799                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 14800  0057C2  5009               	movf	___send_cmd@n,w,c
 14801  0057C4  EC8C  F02E         	call	_SPI1_Exchange8bit
 14802                           
 14803                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 14804  0057C8  0E0C               	movlw	12
 14805  0057CA  180A               	xorwf	___send_cmd@cmd,w,c
 14806  0057CC  A4D8               	btfss	status,2,c
 14807  0057CE  D003               	goto	l4464
 14808  0057D0  0EFF               	movlw	255
 14809  0057D2  EC8C  F02E         	call	_SPI1_Exchange8bit
 14810  0057D6                     l4464:
 14811                           
 14812                           ;diskio.c: 221:  n = 10;
 14813  0057D6  0E0A               	movlw	10
 14814  0057D8  6E09               	movwf	___send_cmd@n,c
 14815  0057DA                     l4466:
 14816                           
 14817                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 14818  0057DA  0EFF               	movlw	255
 14819  0057DC  EC8C  F02E         	call	_SPI1_Exchange8bit
 14820  0057E0  6E08               	movwf	___send_cmd@res,c
 14821  0057E2  AE08               	btfss	___send_cmd@res,7,c
 14822  0057E4  D002               	goto	l4472
 14823  0057E6  2E09               	decfsz	___send_cmd@n,f,c
 14824  0057E8  D7F8               	goto	l4466
 14825  0057EA                     l4472:
 14826                           
 14827                           ;diskio.c: 226:  return res;
 14828  0057EA  5008               	movf	___send_cmd@res,w,c
 14829  0057EC  0012               	return		;funcret
 14830  0057EE                     __end_of___send_cmd:
 14831                           	opt callstack 0
 14832                           
 14833 ;; *************** function _select *****************
 14834 ;; Defined at:
 14835 ;;		line 106 in file "diskio.c"
 14836 ;; Parameters:    Size  Location     Type
 14837 ;;		None
 14838 ;; Auto vars:     Size  Location     Type
 14839 ;;		None
 14840 ;; Return value:  Size  Location     Type
 14841 ;;                  1    wreg      unsigned char 
 14842 ;; Registers used:
 14843 ;;		wreg, status,2, status,0, cstack
 14844 ;; Tracked objects:
 14845 ;;		On entry : 0/0
 14846 ;;		On exit  : 0/0
 14847 ;;		Unchanged: 0/0
 14848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14849 ;;      Params:         0       0       0       0       0       0       0       0       0
 14850 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14851 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14852 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14853 ;;Total ram usage:        0 bytes
 14854 ;; Hardware stack levels used:    1
 14855 ;; Hardware stack levels required when called:    2
 14856 ;; This function calls:
 14857 ;;		_SPI1_Exchange8bit
 14858 ;;		_deselect
 14859 ;;		_wait_ready
 14860 ;; This function is called by:
 14861 ;;		___send_cmd
 14862 ;;		_disk_ioctl
 14863 ;; This function uses a non-reentrant model
 14864 ;;
 14865                           
 14866                           	psect	text50
 14867  005CD6                     __ptext50:
 14868                           	opt callstack 0
 14869  005CD6                     _select:
 14870                           	opt callstack 21
 14871                           
 14872                           ;incstack = 0
 14873                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 14874  005CD6  948A               	bcf	3978,2,c	;volatile
 14875                           
 14876                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 14877  005CD8  0EFF               	movlw	255
 14878  005CDA  EC8C  F02E         	call	_SPI1_Exchange8bit
 14879                           
 14880                           ;diskio.c: 110:  if (wait_ready()) return 1;
 14881  005CDE  ECCF  F02D         	call	_wait_ready	;wreg free
 14882  005CE2  0900               	iorlw	0
 14883  005CE4  B4D8               	btfsc	status,2,c
 14884  005CE6  D002               	goto	l4422
 14885  005CE8  0E01               	movlw	1
 14886  005CEA  0012               	return	
 14887  005CEC                     l4422:
 14888                           
 14889                           ;diskio.c: 112:  deselect();
 14890  005CEC  ECB9  F02E         	call	_deselect	;wreg free
 14891                           
 14892                           ;diskio.c: 113:  return 0;
 14893  005CF0  0E00               	movlw	0
 14894  005CF2  0012               	return		;funcret
 14895  005CF4                     __end_of_select:
 14896                           	opt callstack 0
 14897                           
 14898 ;; *************** function _wait_ready *****************
 14899 ;; Defined at:
 14900 ;;		line 74 in file "diskio.c"
 14901 ;; Parameters:    Size  Location     Type
 14902 ;;		None
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;  tmr             2    1[COMRAM] unsigned short 
 14905 ;; Return value:  Size  Location     Type
 14906 ;;                  1    wreg      unsigned char 
 14907 ;; Registers used:
 14908 ;;		wreg, status,2, status,0, cstack
 14909 ;; Tracked objects:
 14910 ;;		On entry : 0/0
 14911 ;;		On exit  : 0/0
 14912 ;;		Unchanged: 0/0
 14913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14914 ;;      Params:         0       0       0       0       0       0       0       0       0
 14915 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14916 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14917 ;;      Totals:         2       0       0       0       0       0       0       0       0
 14918 ;;Total ram usage:        2 bytes
 14919 ;; Hardware stack levels used:    1
 14920 ;; Hardware stack levels required when called:    1
 14921 ;; This function calls:
 14922 ;;		_SPI1_Exchange8bit
 14923 ;; This function is called by:
 14924 ;;		_select
 14925 ;;		_xmit_datablock
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text51
 14930  005B9E                     __ptext51:
 14931                           	opt callstack 0
 14932  005B9E                     _wait_ready:
 14933                           	opt callstack 23
 14934                           
 14935                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 14936                           
 14937                           ;incstack = 0
 14938  005B9E  0E13               	movlw	19
 14939  005BA0  6E03               	movwf	wait_ready@tmr+1,c
 14940  005BA2  0E88               	movlw	136
 14941  005BA4  6E02               	movwf	wait_ready@tmr,c
 14942  005BA6  D00D               	goto	l17
 14943  005BA8                     l4400:
 14944                           
 14945                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 14946  005BA8  0EFF               	movlw	255
 14947  005BAA  EC8C  F02E         	call	_SPI1_Exchange8bit
 14948  005BAE  0AFF               	xorlw	255
 14949  005BB0  B4D8               	btfsc	status,2,c
 14950  005BB2  D00B               	goto	u4990
 14951                           
 14952                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 14953  005BB4  0E42               	movlw	66
 14954  005BB6                     u9947:
 14955  005BB6  2EE8               	decfsz	wreg,f,c
 14956  005BB8  D7FE               	bra	u9947
 14957  005BBA  D000               	nop2	
 14958                           
 14959                           ;diskio.c: 81:  }
 14960  005BBC  0602               	decf	wait_ready@tmr,f,c
 14961  005BBE  A0D8               	btfss	status,0,c
 14962  005BC0  0603               	decf	wait_ready@tmr+1,f,c
 14963  005BC2                     l17:
 14964  005BC2  5002               	movf	wait_ready@tmr,w,c
 14965  005BC4  1003               	iorwf	wait_ready@tmr+1,w,c
 14966  005BC6  A4D8               	btfss	status,2,c
 14967  005BC8  D7EF               	goto	l4400
 14968  005BCA                     u4990:
 14969                           
 14970                           ;diskio.c: 83:  return tmr ? 1 : 0;
 14971  005BCA  5002               	movf	wait_ready@tmr,w,c
 14972  005BCC  1003               	iorwf	wait_ready@tmr+1,w,c
 14973  005BCE  B4D8               	btfsc	status,2,c
 14974  005BD0  D002               	goto	u5000
 14975  005BD2  0E01               	movlw	1
 14976  005BD4  0012               	return	
 14977  005BD6                     u5000:
 14978  005BD6  0E00               	movlw	0
 14979  005BD8  0012               	return		;funcret
 14980  005BDA                     __end_of_wait_ready:
 14981                           	opt callstack 0
 14982                           
 14983 ;; *************** function _deselect *****************
 14984 ;; Defined at:
 14985 ;;		line 93 in file "diskio.c"
 14986 ;; Parameters:    Size  Location     Type
 14987 ;;		None
 14988 ;; Auto vars:     Size  Location     Type
 14989 ;;		None
 14990 ;; Return value:  Size  Location     Type
 14991 ;;                  1    wreg      void 
 14992 ;; Registers used:
 14993 ;;		wreg, status,2, cstack
 14994 ;; Tracked objects:
 14995 ;;		On entry : 0/0
 14996 ;;		On exit  : 0/0
 14997 ;;		Unchanged: 0/0
 14998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14999 ;;      Params:         0       0       0       0       0       0       0       0       0
 15000 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15001 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15002 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15003 ;;Total ram usage:        0 bytes
 15004 ;; Hardware stack levels used:    1
 15005 ;; Hardware stack levels required when called:    1
 15006 ;; This function calls:
 15007 ;;		_SPI1_Exchange8bit
 15008 ;; This function is called by:
 15009 ;;		_select
 15010 ;;		___send_cmd
 15011 ;;		_disk_initialize
 15012 ;;		_disk_read
 15013 ;;		_disk_write
 15014 ;;		_disk_ioctl
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           	psect	text52
 15019  005D72                     __ptext52:
 15020                           	opt callstack 0
 15021  005D72                     _deselect:
 15022                           	opt callstack 21
 15023                           
 15024                           ;incstack = 0
 15025                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 15026  005D72  848A               	bsf	3978,2,c	;volatile
 15027                           
 15028                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 15029  005D74  0EFF               	movlw	255
 15030  005D76  EC8C  F02E         	call	_SPI1_Exchange8bit
 15031  005D7A  0012               	return		;funcret
 15032  005D7C                     __end_of_deselect:
 15033                           	opt callstack 0
 15034                           
 15035 ;; *************** function _rcvr_datablock *****************
 15036 ;; Defined at:
 15037 ;;		line 123 in file "diskio.c"
 15038 ;; Parameters:    Size  Location     Type
 15039 ;;  buff            2    1[COMRAM] PTR unsigned char 
 15040 ;;		 -> FatFs(558), disk_ioctl@csd(16), NULL(0), 
 15041 ;;  btr             2    3[COMRAM] unsigned short 
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;  tmr             2    5[COMRAM] unsigned short 
 15044 ;;  token           1    7[COMRAM] unsigned char 
 15045 ;; Return value:  Size  Location     Type
 15046 ;;                  1    wreg      unsigned char 
 15047 ;; Registers used:
 15048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15049 ;; Tracked objects:
 15050 ;;		On entry : 0/0
 15051 ;;		On exit  : 0/0
 15052 ;;		Unchanged: 0/0
 15053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15054 ;;      Params:         4       0       0       0       0       0       0       0       0
 15055 ;;      Locals:         3       0       0       0       0       0       0       0       0
 15056 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15057 ;;      Totals:         7       0       0       0       0       0       0       0       0
 15058 ;;Total ram usage:        7 bytes
 15059 ;; Hardware stack levels used:    1
 15060 ;; Hardware stack levels required when called:    1
 15061 ;; This function calls:
 15062 ;;		_SPI1_Exchange8bit
 15063 ;; This function is called by:
 15064 ;;		_disk_read
 15065 ;;		_disk_ioctl
 15066 ;; This function uses a non-reentrant model
 15067 ;;
 15068                           
 15069                           	psect	text53
 15070  0058EA                     __ptext53:
 15071                           	opt callstack 0
 15072  0058EA                     _rcvr_datablock:
 15073                           	opt callstack 24
 15074                           
 15075                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 15076                           
 15077                           ;incstack = 0
 15078  0058EA  0E07               	movlw	7
 15079  0058EC  6E07               	movwf	rcvr_datablock@tmr+1,c
 15080  0058EE  0ED0               	movlw	208
 15081  0058F0  6E06               	movwf	rcvr_datablock@tmr,c
 15082  0058F2  D00E               	goto	l35
 15083  0058F4                     l4524:
 15084                           
 15085                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 15086  0058F4  0EFF               	movlw	255
 15087  0058F6  EC8C  F02E         	call	_SPI1_Exchange8bit
 15088  0058FA  6E08               	movwf	rcvr_datablock@token,c
 15089                           
 15090                           ;diskio.c: 134:   if (token != 0xFF) break;
 15091  0058FC  2808               	incf	rcvr_datablock@token,w,c
 15092  0058FE  A4D8               	btfss	status,2,c
 15093  005900  D00B               	goto	u5160
 15094                           
 15095                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 15096  005902  0E42               	movlw	66
 15097  005904                     u9957:
 15098  005904  2EE8               	decfsz	wreg,f,c
 15099  005906  D7FE               	bra	u9957
 15100  005908  D000               	nop2	
 15101                           
 15102                           ;diskio.c: 136:  }
 15103  00590A  0606               	decf	rcvr_datablock@tmr,f,c
 15104  00590C  A0D8               	btfss	status,0,c
 15105  00590E  0607               	decf	rcvr_datablock@tmr+1,f,c
 15106  005910                     l35:
 15107  005910  5006               	movf	rcvr_datablock@tmr,w,c
 15108  005912  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 15109  005914  A4D8               	btfss	status,2,c
 15110  005916  D7EE               	goto	l4524
 15111  005918                     u5160:
 15112                           
 15113                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 15114  005918  0EFE               	movlw	254
 15115  00591A  1808               	xorwf	rcvr_datablock@token,w,c
 15116  00591C  B4D8               	btfsc	status,2,c
 15117  00591E  D002               	goto	l4540
 15118  005920  0E00               	movlw	0
 15119  005922  0012               	return	
 15120  005924                     l4540:
 15121                           
 15122                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 15123  005924  0EFF               	movlw	255
 15124  005926  EC8C  F02E         	call	_SPI1_Exchange8bit
 15125  00592A  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 15126  00592E  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 15127  005932  6EDF               	movwf	indf2,c
 15128  005934  4A02               	infsnz	rcvr_datablock@buff,f,c
 15129  005936  2A03               	incf	rcvr_datablock@buff+1,f,c
 15130  005938  0604               	decf	rcvr_datablock@btr,f,c
 15131  00593A  A0D8               	btfss	status,0,c
 15132  00593C  0605               	decf	rcvr_datablock@btr+1,f,c
 15133  00593E  5004               	movf	rcvr_datablock@btr,w,c
 15134  005940  1005               	iorwf	rcvr_datablock@btr+1,w,c
 15135  005942  A4D8               	btfss	status,2,c
 15136  005944  D7EF               	goto	l4540
 15137                           
 15138                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 15139  005946  0EFF               	movlw	255
 15140  005948  EC8C  F02E         	call	_SPI1_Exchange8bit
 15141                           
 15142                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 15143  00594C  0EFF               	movlw	255
 15144  00594E  EC8C  F02E         	call	_SPI1_Exchange8bit
 15145                           
 15146                           ;diskio.c: 145:  return 1;
 15147  005952  0E01               	movlw	1
 15148  005954  0012               	return		;funcret
 15149  005956                     __end_of_rcvr_datablock:
 15150                           	opt callstack 0
 15151                           
 15152 ;; *************** function _SPI1_Exchange8bit *****************
 15153 ;; Defined at:
 15154 ;;		line 90 in file "mcc_generated_files/spi1.c"
 15155 ;; Parameters:    Size  Location     Type
 15156 ;;  data            1    wreg     unsigned char 
 15157 ;; Auto vars:     Size  Location     Type
 15158 ;;  data            1    0[COMRAM] unsigned char 
 15159 ;; Return value:  Size  Location     Type
 15160 ;;                  1    wreg      unsigned char 
 15161 ;; Registers used:
 15162 ;;		wreg, status,2
 15163 ;; Tracked objects:
 15164 ;;		On entry : 0/0
 15165 ;;		On exit  : 0/0
 15166 ;;		Unchanged: 0/0
 15167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15168 ;;      Params:         0       0       0       0       0       0       0       0       0
 15169 ;;      Locals:         1       0       0       0       0       0       0       0       0
 15170 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15171 ;;      Totals:         1       0       0       0       0       0       0       0       0
 15172 ;;Total ram usage:        1 bytes
 15173 ;; Hardware stack levels used:    1
 15174 ;; This function calls:
 15175 ;;		Nothing
 15176 ;; This function is called by:
 15177 ;;		_wait_ready
 15178 ;;		_deselect
 15179 ;;		_select
 15180 ;;		_rcvr_datablock
 15181 ;;		_xmit_datablock
 15182 ;;		___send_cmd
 15183 ;;		_disk_initialize
 15184 ;;		_disk_ioctl
 15185 ;;		_SPI1_Exchange8bitBuffer
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           	psect	text54
 15190  005D18                     __ptext54:
 15191                           	opt callstack 0
 15192  005D18                     _SPI1_Exchange8bit:
 15193                           	opt callstack 23
 15194                           
 15195                           ;incstack = 0
 15196                           ;SPI1_Exchange8bit@data stored from wreg
 15197  005D18  6E01               	movwf	SPI1_Exchange8bit@data,c
 15198                           
 15199                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 15200  005D1A  9EC6               	bcf	4038,7,c	;volatile
 15201                           
 15202                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 15203  005D1C  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 15204  005D20                     l748:
 15205                           
 15206                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 15207  005D20  A0C7               	btfss	4039,0,c	;volatile
 15208  005D22  D7FE               	goto	l748
 15209                           
 15210                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 15211  005D24  50C9               	movf	4041,w,c	;volatile
 15212  005D26  0012               	return		;funcret
 15213  005D28                     __end_of_SPI1_Exchange8bit:
 15214                           	opt callstack 0
 15215                           
 15216 ;; *************** function _Error *****************
 15217 ;; Defined at:
 15218 ;;		line 13 in file "./Errores.h"
 15219 ;; Parameters:    Size  Location     Type
 15220 ;;  a               2    0[COMRAM] int 
 15221 ;; Auto vars:     Size  Location     Type
 15222 ;;  v_seg          10    3[COMRAM] unsigned char [10]
 15223 ;; Return value:  Size  Location     Type
 15224 ;;                  1    wreg      void 
 15225 ;; Registers used:
 15226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15227 ;; Tracked objects:
 15228 ;;		On entry : 0/0
 15229 ;;		On exit  : 0/0
 15230 ;;		Unchanged: 0/0
 15231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15232 ;;      Params:         2       0       0       0       0       0       0       0       0
 15233 ;;      Locals:        10       0       0       0       0       0       0       0       0
 15234 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15235 ;;      Totals:        13       0       0       0       0       0       0       0       0
 15236 ;;Total ram usage:       13 bytes
 15237 ;; Hardware stack levels used:    1
 15238 ;; This function calls:
 15239 ;;		Nothing
 15240 ;; This function is called by:
 15241 ;;		_main
 15242 ;;		_guardar
 15243 ;; This function uses a non-reentrant model
 15244 ;;
 15245                           
 15246                           	psect	text55
 15247  00537C                     __ptext55:
 15248                           	opt callstack 0
 15249  00537C                     _Error:
 15250                           	opt callstack 29
 15251                           
 15252                           ;./Errores.h: 14:     LATD = 0x00;
 15253                           
 15254                           ;incstack = 0
 15255  00537C  0E00               	movlw	0
 15256  00537E  6E8C               	movwf	3980,c	;volatile
 15257                           
 15258                           ;./Errores.h: 15:     TRISD = 0x00;
 15259  005380  0E00               	movlw	0
 15260  005382  6E95               	movwf	3989,c	;volatile
 15261                           
 15262                           ;./Errores.h: 16:     ANSELD = 0x00;
 15263  005384  0E00               	movlw	0
 15264  005386  010F               	movlb	15	; () banked
 15265  005388  6F5E               	movwf	94,b	;volatile
 15266                           
 15267                           ;./Errores.h: 17:     LATE = 0x00;
 15268  00538A  0E00               	movlw	0
 15269  00538C  6E8D               	movwf	3981,c	;volatile
 15270                           
 15271                           ;./Errores.h: 18:     TRISE = 0x00;
 15272  00538E  0E00               	movlw	0
 15273  005390  6E96               	movwf	3990,c	;volatile
 15274                           
 15275                           ;./Errores.h: 19:     ANSELE = 0x00;
 15276  005392  0E00               	movlw	0
 15277  005394  6F5F               	movwf	95,b	;volatile
 15278                           
 15279                           ; BSR set to: 15
 15280                           ;./Errores.h: 21:     unsigned char v_seg[10]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0
      +                          x7F,0x73};
 15281  005396  EE20  F0E3         	lfsr	2,Error@F5051
 15282  00539A  EE10  F004         	lfsr	1,Error@v_seg
 15283  00539E  0E09               	movlw	9
 15284  0053A0                     u9531:
 15285  0053A0  CFDB FFE3          	movff	plusw2,plusw1
 15286  0053A4  06E8               	decf	wreg,f,c
 15287  0053A6  E2FC               	bc	u9531
 15288                           
 15289                           ; BSR set to: 15
 15290                           ;./Errores.h: 22:     if(a != 33 && a != 55){
 15291  0053A8  0E21               	movlw	33
 15292  0053AA  1801               	xorwf	Error@a,w,c
 15293  0053AC  1002               	iorwf	Error@a+1,w,c
 15294  0053AE  B4D8               	btfsc	status,2,c
 15295  0053B0  D010               	goto	l6904
 15296                           
 15297                           ; BSR set to: 15
 15298  0053B2  0E37               	movlw	55
 15299  0053B4  1801               	xorwf	Error@a,w,c
 15300  0053B6  1002               	iorwf	Error@a+1,w,c
 15301  0053B8  B4D8               	btfsc	status,2,c
 15302  0053BA  D00B               	goto	l6904
 15303                           
 15304                           ; BSR set to: 15
 15305                           ;./Errores.h: 23:     LATD = v_seg[a];
 15306  0053BC  0E04               	movlw	low Error@v_seg
 15307  0053BE  2401               	addwf	Error@a,w,c
 15308  0053C0  6ED9               	movwf	fsr2l,c
 15309  0053C2  0E00               	movlw	high Error@v_seg
 15310  0053C4  2002               	addwfc	Error@a+1,w,c
 15311  0053C6  6EDA               	movwf	fsr2h,c
 15312  0053C8  50DF               	movf	indf2,w,c
 15313  0053CA  6E8C               	movwf	3980,c	;volatile
 15314                           
 15315                           ; BSR set to: 15
 15316                           ;./Errores.h: 24:     LATE = 0x01;
 15317  0053CC  0E01               	movlw	1
 15318  0053CE  6E8D               	movwf	3981,c	;volatile
 15319                           
 15320                           ;./Errores.h: 25:     }
 15321  0053D0  0012               	return	
 15322  0053D2                     l6904:
 15323                           
 15324                           ; BSR set to: 15
 15325  0053D2  0E21               	movlw	33
 15326  0053D4  1801               	xorwf	Error@a,w,c
 15327  0053D6  1002               	iorwf	Error@a+1,w,c
 15328  0053D8  A4D8               	btfss	status,2,c
 15329  0053DA  D005               	goto	l6910
 15330                           
 15331                           ; BSR set to: 15
 15332                           ;./Errores.h: 27:     LATD = v_seg[6];
 15333  0053DC  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 15334                           
 15335                           ; BSR set to: 15
 15336                           ;./Errores.h: 28:     LATE = 0x02;
 15337  0053E0  0E02               	movlw	2
 15338  0053E2  6E8D               	movwf	3981,c	;volatile
 15339                           
 15340                           ;./Errores.h: 29:     }
 15341  0053E4  0012               	return	
 15342  0053E6                     l6910:
 15343                           
 15344                           ; BSR set to: 15
 15345  0053E6  0EE7               	movlw	231
 15346  0053E8  1801               	xorwf	Error@a,w,c
 15347  0053EA  E107               	bnz	l848
 15348  0053EC  0E03               	movlw	3
 15349  0053EE  1802               	xorwf	Error@a+1,w,c
 15350  0053F0  A4D8               	btfss	status,2,c
 15351  0053F2  D003               	goto	l848
 15352  0053F4                     u9570:
 15353                           
 15354                           ;./Errores.h: 31:     LATE = 0x00;
 15355  0053F4  0E00               	movlw	0
 15356  0053F6  6E8D               	movwf	3981,c	;volatile
 15357                           
 15358                           ;./Errores.h: 32:     }
 15359  0053F8  0012               	return	
 15360  0053FA                     l848:
 15361                           
 15362                           ; BSR set to: 15
 15363                           ;./Errores.h: 34:     LATD = v_seg[0];
 15364  0053FA  C004  FF8C         	movff	Error@v_seg,3980	;volatile
 15365                           
 15366                           ; BSR set to: 15
 15367                           ;./Errores.h: 35:     LATE = 0x01;
 15368  0053FE  0E01               	movlw	1
 15369  005400  6E8D               	movwf	3981,c	;volatile
 15370                           
 15371                           ; BSR set to: 15
 15372                           ;./Errores.h: 36:     _delay((unsigned long)((1)*(8000000/4000.0)));
 15373  005402  0E03               	movlw	3
 15374  005404  6E03               	movwf	??_Error& (0+255),c
 15375  005406  0E98               	movlw	152
 15376  005408                     u9967:
 15377  005408  2EE8               	decfsz	wreg,f,c
 15378  00540A  D7FE               	bra	u9967
 15379  00540C  2E03               	decfsz	??_Error& (0+255),f,c
 15380  00540E  D7FC               	bra	u9967
 15381                           
 15382                           ;./Errores.h: 38:     LATE = 0x00;
 15383  005410  0E00               	movlw	0
 15384  005412  6E8D               	movwf	3981,c	;volatile
 15385                           
 15386                           ;./Errores.h: 39:     LATD = v_seg[9];
 15387  005414  C00D  FF8C         	movff	Error@v_seg+9,3980	;volatile
 15388                           
 15389                           ;./Errores.h: 40:     LATE = 0x02;
 15390  005418  0E02               	movlw	2
 15391  00541A  6E8D               	movwf	3981,c	;volatile
 15392                           
 15393                           ;./Errores.h: 41:     _delay((unsigned long)((1)*(8000000/4000.0)));
 15394  00541C  0E03               	movlw	3
 15395  00541E  6E03               	movwf	??_Error& (0+255),c
 15396  005420  0E98               	movlw	152
 15397  005422                     u9977:
 15398  005422  2EE8               	decfsz	wreg,f,c
 15399  005424  D7FE               	bra	u9977
 15400  005426  2E03               	decfsz	??_Error& (0+255),f,c
 15401  005428  D7FC               	bra	u9977
 15402                           
 15403                           ;./Errores.h: 43:     LATE = 0x00;
 15404  00542A  0E00               	movlw	0
 15405  00542C  6E8D               	movwf	3981,c	;volatile
 15406                           
 15407                           ;./Errores.h: 44:     LATD = v_seg[6];
 15408  00542E  C00A  FF8C         	movff	Error@v_seg+6,3980	;volatile
 15409                           
 15410                           ;./Errores.h: 45:     LATE = 0x04;
 15411  005432  0E04               	movlw	4
 15412  005434  6E8D               	movwf	3981,c	;volatile
 15413                           
 15414                           ;./Errores.h: 46:     _delay((unsigned long)((1)*(8000000/4000.0)));
 15415  005436  0E03               	movlw	3
 15416  005438  6E03               	movwf	??_Error& (0+255),c
 15417  00543A  0E98               	movlw	152
 15418  00543C                     u9987:
 15419  00543C  2EE8               	decfsz	wreg,f,c
 15420  00543E  D7FE               	bra	u9987
 15421  005440  2E03               	decfsz	??_Error& (0+255),f,c
 15422  005442  D7FC               	bra	u9987
 15423  005444  D7D7               	goto	u9570
 15424  005446                     __end_of_Error:
 15425                           	opt callstack 0
 15426                           
 15427 ;; *************** function _SYSTEM_Initialize *****************
 15428 ;; Defined at:
 15429 ;;		line 116 in file "mcc_generated_files/mcc.c"
 15430 ;; Parameters:    Size  Location     Type
 15431 ;;		None
 15432 ;; Auto vars:     Size  Location     Type
 15433 ;;		None
 15434 ;; Return value:  Size  Location     Type
 15435 ;;                  1    wreg      void 
 15436 ;; Registers used:
 15437 ;;		wreg, status,2, cstack
 15438 ;; Tracked objects:
 15439 ;;		On entry : 0/0
 15440 ;;		On exit  : 0/0
 15441 ;;		Unchanged: 0/0
 15442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15443 ;;      Params:         0       0       0       0       0       0       0       0       0
 15444 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15445 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15446 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15447 ;;Total ram usage:        0 bytes
 15448 ;; Hardware stack levels used:    1
 15449 ;; Hardware stack levels required when called:    1
 15450 ;; This function calls:
 15451 ;;		_OSCILLATOR_Initialize
 15452 ;;		_PIN_MANAGER_Initialize
 15453 ;;		_SPI1_Initialize
 15454 ;; This function is called by:
 15455 ;;		_main
 15456 ;; This function uses a non-reentrant model
 15457 ;;
 15458                           
 15459                           	psect	text56
 15460  005D56                     __ptext56:
 15461                           	opt callstack 0
 15462  005D56                     _SYSTEM_Initialize:
 15463                           	opt callstack 29
 15464                           
 15465                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 15466                           
 15467                           ;incstack = 0
 15468  005D56  EC5B  F02E         	call	_PIN_MANAGER_Initialize	;wreg free
 15469                           
 15470                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 15471  005D5A  EC83  F02E         	call	_OSCILLATOR_Initialize	;wreg free
 15472                           
 15473                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 15474  005D5E  ECB2  F02E         	call	_SPI1_Initialize	;wreg free
 15475  005D62  0012               	return		;funcret
 15476  005D64                     __end_of_SYSTEM_Initialize:
 15477                           	opt callstack 0
 15478                           
 15479 ;; *************** function _SPI1_Initialize *****************
 15480 ;; Defined at:
 15481 ;;		line 63 in file "mcc_generated_files/spi1.c"
 15482 ;; Parameters:    Size  Location     Type
 15483 ;;		None
 15484 ;; Auto vars:     Size  Location     Type
 15485 ;;		None
 15486 ;; Return value:  Size  Location     Type
 15487 ;;                  1    wreg      void 
 15488 ;; Registers used:
 15489 ;;		wreg, status,2
 15490 ;; Tracked objects:
 15491 ;;		On entry : 0/0
 15492 ;;		On exit  : 0/0
 15493 ;;		Unchanged: 0/0
 15494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15495 ;;      Params:         0       0       0       0       0       0       0       0       0
 15496 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15497 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15498 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15499 ;;Total ram usage:        0 bytes
 15500 ;; Hardware stack levels used:    1
 15501 ;; This function calls:
 15502 ;;		Nothing
 15503 ;; This function is called by:
 15504 ;;		_disk_initialize
 15505 ;;		_SYSTEM_Initialize
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           	psect	text57
 15510  005D64                     __ptext57:
 15511                           	opt callstack 0
 15512  005D64                     _SPI1_Initialize:
 15513                           	opt callstack 26
 15514                           
 15515                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 15516                           
 15517                           ;incstack = 0
 15518  005D64  0E40               	movlw	64
 15519  005D66  6EC7               	movwf	4039,c	;volatile
 15520                           
 15521                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 15522  005D68  0E22               	movlw	34
 15523  005D6A  6EC6               	movwf	4038,c	;volatile
 15524                           
 15525                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 15526  005D6C  0E00               	movlw	0
 15527  005D6E  6EC8               	movwf	4040,c	;volatile
 15528  005D70  0012               	return		;funcret
 15529  005D72                     __end_of_SPI1_Initialize:
 15530                           	opt callstack 0
 15531                           
 15532 ;; *************** function _PIN_MANAGER_Initialize *****************
 15533 ;; Defined at:
 15534 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 15535 ;; Parameters:    Size  Location     Type
 15536 ;;		None
 15537 ;; Auto vars:     Size  Location     Type
 15538 ;;		None
 15539 ;; Return value:  Size  Location     Type
 15540 ;;                  1    wreg      void 
 15541 ;; Registers used:
 15542 ;;		wreg, status,2
 15543 ;; Tracked objects:
 15544 ;;		On entry : 0/0
 15545 ;;		On exit  : 0/0
 15546 ;;		Unchanged: 0/0
 15547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15548 ;;      Params:         0       0       0       0       0       0       0       0       0
 15549 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15550 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15551 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15552 ;;Total ram usage:        0 bytes
 15553 ;; Hardware stack levels used:    1
 15554 ;; This function calls:
 15555 ;;		Nothing
 15556 ;; This function is called by:
 15557 ;;		_SYSTEM_Initialize
 15558 ;; This function uses a non-reentrant model
 15559 ;;
 15560                           
 15561                           	psect	text58
 15562  005CB6                     __ptext58:
 15563                           	opt callstack 0
 15564  005CB6                     _PIN_MANAGER_Initialize:
 15565                           	opt callstack 29
 15566                           
 15567                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 15568                           
 15569                           ;incstack = 0
 15570  005CB6  0E04               	movlw	4
 15571  005CB8  6E8A               	movwf	3978,c	;volatile
 15572                           
 15573                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 15574  005CBA  0E00               	movlw	0
 15575  005CBC  6E8B               	movwf	3979,c	;volatile
 15576                           
 15577                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 15578  005CBE  0EF1               	movlw	241
 15579  005CC0  6E93               	movwf	3987,c	;volatile
 15580                           
 15581                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 15582  005CC2  0EC7               	movlw	199
 15583  005CC4  6E94               	movwf	3988,c	;volatile
 15584                           
 15585                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 15586  005CC6  0EC4               	movlw	196
 15587  005CC8  010F               	movlb	15	; () banked
 15588  005CCA  6F5D               	movwf	93,b	;volatile
 15589                           
 15590                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 15591  005CCC  0E30               	movlw	48
 15592  005CCE  6F5C               	movwf	92,b	;volatile
 15593                           
 15594                           ; BSR set to: 15
 15595                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 15596  005CD0  6885               	setf	3973,c	;volatile
 15597                           
 15598                           ; BSR set to: 15
 15599                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 15600  005CD2  9EF1               	bcf	4081,7,c	;volatile
 15601                           
 15602                           ; BSR set to: 15
 15603  005CD4  0012               	return		;funcret
 15604  005CD6                     __end_of_PIN_MANAGER_Initialize:
 15605                           	opt callstack 0
 15606                           
 15607 ;; *************** function _OSCILLATOR_Initialize *****************
 15608 ;; Defined at:
 15609 ;;		line 124 in file "mcc_generated_files/mcc.c"
 15610 ;; Parameters:    Size  Location     Type
 15611 ;;		None
 15612 ;; Auto vars:     Size  Location     Type
 15613 ;;		None
 15614 ;; Return value:  Size  Location     Type
 15615 ;;                  1    wreg      void 
 15616 ;; Registers used:
 15617 ;;		wreg, status,2
 15618 ;; Tracked objects:
 15619 ;;		On entry : 0/0
 15620 ;;		On exit  : 0/0
 15621 ;;		Unchanged: 0/0
 15622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15623 ;;      Params:         0       0       0       0       0       0       0       0       0
 15624 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15625 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15626 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15627 ;;Total ram usage:        0 bytes
 15628 ;; Hardware stack levels used:    1
 15629 ;; This function calls:
 15630 ;;		Nothing
 15631 ;; This function is called by:
 15632 ;;		_SYSTEM_Initialize
 15633 ;; This function uses a non-reentrant model
 15634 ;;
 15635                           
 15636                           	psect	text59
 15637  005D06                     __ptext59:
 15638                           	opt callstack 0
 15639  005D06                     _OSCILLATOR_Initialize:
 15640                           	opt callstack 29
 15641                           
 15642                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 15643                           
 15644                           ; BSR set to: 15
 15645                           ;incstack = 0
 15646  005D06  0E60               	movlw	96
 15647  005D08  6ED3               	movwf	4051,c	;volatile
 15648                           
 15649                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 15650  005D0A  0E00               	movlw	0
 15651  005D0C  6ED2               	movwf	4050,c	;volatile
 15652                           
 15653                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 15654  005D0E  0E00               	movlw	0
 15655  005D10  6E9B               	movwf	3995,c	;volatile
 15656                           
 15657                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 15658  005D12  0E00               	movlw	0
 15659  005D14  6EB5               	movwf	4021,c	;volatile
 15660  005D16  0012               	return		;funcret
 15661  005D18                     __end_of_OSCILLATOR_Initialize:
 15662                           	opt callstack 0
 15663                           
 15664 ;; *************** function _Init8LEDs *****************
 15665 ;; Defined at:
 15666 ;;		line 74 in file "Main.c"
 15667 ;; Parameters:    Size  Location     Type
 15668 ;;		None
 15669 ;; Auto vars:     Size  Location     Type
 15670 ;;		None
 15671 ;; Return value:  Size  Location     Type
 15672 ;;                  1    wreg      void 
 15673 ;; Registers used:
 15674 ;;		wreg, status,2
 15675 ;; Tracked objects:
 15676 ;;		On entry : 0/0
 15677 ;;		On exit  : 0/0
 15678 ;;		Unchanged: 0/0
 15679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15680 ;;      Params:         0       0       0       0       0       0       0       0       0
 15681 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15682 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15683 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15684 ;;Total ram usage:        0 bytes
 15685 ;; Hardware stack levels used:    1
 15686 ;; This function calls:
 15687 ;;		Nothing
 15688 ;; This function is called by:
 15689 ;;		_main
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           	psect	text60
 15694  005D28                     __ptext60:
 15695                           	opt callstack 0
 15696  005D28                     _Init8LEDs:
 15697                           	opt callstack 30
 15698                           
 15699                           ;Main.c: 76:     LATA = 0x00;
 15700                           
 15701                           ;incstack = 0
 15702  005D28  0E00               	movlw	0
 15703  005D2A  6E89               	movwf	3977,c	;volatile
 15704                           
 15705                           ;Main.c: 77:     TRISA = 0x00;
 15706  005D2C  0E00               	movlw	0
 15707  005D2E  6E92               	movwf	3986,c	;volatile
 15708                           
 15709                           ;Main.c: 78:     ANSELA = 0x00;
 15710  005D30  0E00               	movlw	0
 15711  005D32  010F               	movlb	15	; () banked
 15712  005D34  6F5B               	movwf	91,b	;volatile
 15713                           
 15714                           ; BSR set to: 15
 15715  005D36  0012               	return		;funcret
 15716  005D38                     __end_of_Init8LEDs:
 15717                           	opt callstack 0
 15718                           
 15719                           	psect	rparam
 15720  0000                     tosu	equ	0xFFF
 15721                           tosh	equ	0xFFE
 15722                           tosl	equ	0xFFD
 15723                           stkptr	equ	0xFFC
 15724                           pclatu	equ	0xFFB
 15725                           pclath	equ	0xFFA
 15726                           pcl	equ	0xFF9
 15727                           tblptru	equ	0xFF8
 15728                           tblptrh	equ	0xFF7
 15729                           tblptrl	equ	0xFF6
 15730                           tablat	equ	0xFF5
 15731                           prodh	equ	0xFF4
 15732                           prodl	equ	0xFF3
 15733                           indf0	equ	0xFEF
 15734                           postinc0	equ	0xFEE
 15735                           postdec0	equ	0xFED
 15736                           preinc0	equ	0xFEC
 15737                           plusw0	equ	0xFEB
 15738                           fsr0h	equ	0xFEA
 15739                           fsr0l	equ	0xFE9
 15740                           wreg	equ	0xFE8
 15741                           indf1	equ	0xFE7
 15742                           postinc1	equ	0xFE6
 15743                           postdec1	equ	0xFE5
 15744                           preinc1	equ	0xFE4
 15745                           plusw1	equ	0xFE3
 15746                           fsr1h	equ	0xFE2
 15747                           fsr1l	equ	0xFE1
 15748                           bsr	equ	0xFE0
 15749                           indf2	equ	0xFDF
 15750                           postinc2	equ	0xFDE
 15751                           postdec2	equ	0xFDD
 15752                           preinc2	equ	0xFDC
 15753                           plusw2	equ	0xFDB
 15754                           fsr2h	equ	0xFDA
 15755                           fsr2l	equ	0xFD9
 15756                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    0
    Data        15
    BSS         609
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    112     146
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 2
		 -> ND(BANK0[2]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    S221$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S221$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK1[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_5(CODE[11]), STR_4(CODE[1]), STR_3(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S210$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S210$dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    S210$fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), ND(BANK0[2]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), ND(BANK0[2]), f_open@sfn(BANK0[12]), NULL(NULL[0]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), NULL(NULL[0]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), NULL(NULL[0]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), FatFs(BIGRAM[558]), ND(BANK0[2]), NULL(NULL[0]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs(BIGRAM[558]), disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _guardar->_f_open
    _grabador->_f_write
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  434851
                              _Error
                          _Init8LEDs
                  _SYSTEM_Initialize
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              0     0      0  434246
                              _Error
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                           _grabador
 ---------------------------------------------------------------------------------
 (2) _grabador                                             2     2      0   58614
                                             49 BANK0      2     2      0
                            ___fldiv
                            ___flmul
                           ___xxtofl
                            _f_write
                       _interruptadc
 ---------------------------------------------------------------------------------
 (3) _interruptadc                                         6     2      4     175
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     398
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    1744
                                             14 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    1399
                                             39 COMRAM    25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _mem_cpy                                             10     4      6    1323
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (4) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (5) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (4) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (5) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (4) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (4) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (5) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (6) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (5) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (7) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (8) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (7) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (9) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (6) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Error                                               13    11      2     605
                                              0 COMRAM    13    11      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init8LEDs                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   _Init8LEDs
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _SPI1_Initialize
   _guardar
     _Error
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _grabador
       ___fldiv
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
       _f_write
         _clust2sect
           ___lmul
         _create_chain
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
           _put_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
         _mem_cpy
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _validate
           _disk_status
       _interruptadc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      20       8       12.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     70      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     111       6        0.0%
DATA                 0      0     33F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 29 20:57:28 2019

              _SPI1_Exchange8bit 5D18                      get_fat@clst 003D  
                   ___fldiv@aexp 0040                     ___fldiv@bexp 003F  
                              _a 00D6                                _i 00ED  
                   ___fldiv@sign 0038                     create_name@b 0015  
                   create_name@c 001F                     create_name@d 001A  
                   create_name@i 001D                     create_name@p 0018  
             ?_SPI1_Exchange8bit 0001                 get_ldnumber@path 0001  
                             l17 5BC2                               l35 5910  
                             l70 4168                               l81 4230  
                             l92 432E                               l95 42FE  
                             _ND 00DF                               _bw 00E1  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                      __CFG_LVP$ON 000000  
                            l113 52CE                              l114 52E2  
                            l130 4B8E                              l131 4B96  
                            l132 4BAA                              l109 52C4  
                            l126 4B84                              l302 4784  
                            l136 4C0A                              l242 4502  
                            l155 20EE                              l252 2C4A  
                            l317 37A0                              l334 397C  
                            l255 2F9A                              l336 3974  
                            l520 09BC                              l432 3FDE  
                            l257 2C54                              l533 0B04  
                            l349 3B4C                              l278 2410  
                            l391 4D6C                              l456 4134  
                            l547 0FFC                              l539 0C9E  
                            l469 4886                              l581 308E  
                            l590 3200                              l582 3086  
                            l671 1C46                              l667 19B6  
                            l748 5D20                              l940 575A  
                            l588 3218                              l848 53FA  
                            l888 4F48                              _GIE 007F97  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 0100              ??_SPI1_Exchange8bit 0001  
                            _out 00D4                     disk_read@cmd 001C  
                 ??_create_chain 005C                              wreg 000FE8  
                   ___flmul@aexp 0020                     ___flmul@bexp 0021  
              disk_initialize@ty 001A                     ___flmul@sign 001B  
                   ___flmul@temp 0026                     ___flmul@prod 0022  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                     Error@F5051 00E3                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l1508 3E30                             l1509 3E2C  
                           l1527 33C2                             l1544 3660  
                           l1536 35DA                             l1537 35D6  
                           l5012 22A8                             l5004 2212  
                           l5110 3AC0                             l1575 4AEC  
                           l4400 5BA8                             l5024 2312  
                           l5008 229A                             l1568 4A6E  
                           l1497 3DC2                             l5034 234A  
                           l5018 22E0                             l5050 23D2  
                           l5130 3B8C                             l5028 2334  
                           l5220 2AAA                             l5108 3A9A  
                           l4422 5CEC                             l4502 5A1E  
                           l5046 238A                             l5038 2352  
                           l5310 4260                             l5118 3B0C  
                           l5048 2390                             l5400 44DA  
                           l5232 2B00                             l5208 2A0A  
                           l5240 2BA6                             l5072 5AD0  
                           l6200 16E0                             l5322 4296  
                           l6042 0DA0                             l5154 284A  
                           l5074 5AD4                             l5066 596E  
                           l6210 175E                             l4540 5924  
                           l4524 58F4                             l4612 52F6  
                           l5236 2B48                             l5180 296A  
                           l5164 28AE                             l5092 39F8  
                           l5412 4CA6                             l5500 3F5C  
                           l6212 177C                             l4454 57B6  
                           l4438 5788                             l4518 5B86  
                           l5326 42BC                             l5318 4288  
                           l5262 417E                             l6062 0EDA  
                           l6038 0D8A                             l5174 2954  
                           l6142 1360                             l4472 57EA  
                           l4464 57D6                             l4712 2DC0  
                           l5328 42CE                             l5280 41CC  
                           l6304 3C7C                             l6224 180E  
                           l6208 173A                             l6160 13F0  
                           l6144 13A0                             l6128 1278  
                           l7112 5B4E                             l4466 57DA  
                           l4458 57C2                             l4482 59CA  
                           l4650 45F4                             l4714 2DDE  
                           l4810 2800                             l5266 4186  
                           l5258 4174                             l6074 0FCE  
                           l5098 3A48                             l5426 4D3A  
                           l5522 3FBA                             l5442 585A  
                           l6410 3E98                             l6242 191C  
                           l6218 17C4                             l6154 13CC  
                           l4628 5368                             l4644 457A  
                           l4820 5A88                             l4724 2EA4  
                           l4716 2DE8                             l4804 27C2  
                           l5292 4200                             l5196 29EC  
                           l5428 4D42                             l5604 4122  
                           l6420 3ECE                             l6324 3CBC  
                           l6308 3C80                             l6228 1884  
                           l6180 150A                             l6172 14A8  
                           l6164 1440                             l6236 18C0  
                           l4590 4C6C                             l4654 4600  
                           l4662 465A                             l4830 5C1E  
                           l4734 2F6E                             l4910 38F4  
                           l4902 3882                             l5374 58D8  
                           l5358 587E                             l5366 58AE  
                           l5526 3FD4                             l5470 4DFA  
                           l6422 3ED0                             l6414 3EC2  
                           l6406 3E74                             l6350 3D22  
                           l6342 3D0A                             l4488 59E0  
                           l4576 4BEC                             l4680 5636  
                           l5704 56E2                             l5720 5718  
                           l4824 5A9C                             l4808 27D4  
                           l5368 58BC                             l5560 4076  
                           l5456 4D94                             l6360 3D72  
                           l6336 3CF4                             l6328 3CC0  
                           l6512 3582                             l6192 15E6  
                           l4682 5652                             l4834 5C2E  
                           l6274 4A2C                             l5730 574C  
                           l4762 24CC                             l5626 5052  
                           l6098 11A0                             l6442 336E  
                           l6602 4B5E                             l6186 1592  
                           l5708 56E6                             l4844 549C  
                           l4780 25E8                             l4764 2500  
                           l4916 395C                             l5628 5056  
                           l5580 40B2                             l5572 40A0  
                           l5476 4E3A                             l5804 4826  
                           l5740 4694                             l6380 3DD8  
                           l6460 33AE                             l6444 3372  
                           l6284 5C82                             l5718 570C  
                           l4870 3770                             l5654 50F6  
                           l5902 08FC                             l6622 5552  
                           l5590 40F2                             l5582 40C2  
                           l5486 3EEA                             l5742 469C  
                           l6374 3DC0                             l6542 363C  
                           l6518 35A0                             l6470 33E0  
                           l6462 33B2                             l6446 3382  
                           l6198 16C0                             _ADIE 007CEE  
                           l4960 1F6C                             l4936 5D00  
                           l4784 261E                             l5672 4EAE  
                           l6616 5524                             l5584 40C8  
                           l5488 3EEE                             l5840 48EA  
                           l6368 3D9A                             _ADIF 007CF6  
                           l4970 204A                             l4794 26D0  
                           l4874 37B0                             l4866 374C  
                           l4858 36FC                             l5690 4F44  
                           l5658 5100                             l5930 09F2  
                           l5914 093A                             l6626 5566  
                           l6386 3DF6                             l6554 367E  
                           l6538 361E                             l4956 1F5E  
                           l4948 1F50                             l6820 1C2A  
                           l6812 1C04                             l5684 4F0A  
                           l5924 09A0                             l6636 5592  
                           l5756 46FA                             l6572 4A9C  
                           l6910 53E6                             l4990 213C  
                           l4886 380E                             l6822 1C62  
                           l5678 4ECC                             l5942 0A4E  
                           l5862 0870                             l5854 084A  
                           l5766 4774                             l6718 31E6  
                           l6670 3034                             l6574 4AA2  
                           l6566 4A7E                             l6904 53D2  
                           l5944 0A74                             l5936 0A08  
                           l6736 325E                             l6752 333E  
                           l6648 2FBA                             l6584 4B12  
                           l6576 4AAE                             l4986 2134  
                           l6834 1CD4                             l6826 1C70  
                           l5962 0AA4                             l5882 08B8  
                           l5786 51DA                             l6682 306A  
                           l6586 4B1E                             l6578 4AD4  
                           l4996 2182                             l6844 1D1C  
                           l6836 1D08                             l5956 0A9A  
                           l5796 47D2                             l6782 196A  
                           l5958 0AA0                             l5894 08F2  
                           l5878 08B4                             l6678 305E  
                           l6776 1948                             l5984 0B62  
                           l6882 1ED6                             l6858 1D9C  
                           l6876 1E64                             l6972 52A2  
                           l6798 1B86                             l6968 5284  
                           STR_1 0801                             STR_2 0801  
                           STR_3 081A                             STR_4 081A  
                           STR_5 0810                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5000 5BD6                             u5200 4B80  
                           u6010 1F68                             u5310 4C4E  
                           u5160 5918                             u5410 531E  
                           u5090 59C6                             u5330 4C7C  
                           u6130 2164                             _PEIE 007F96  
                           u7100 3FA4                             u6300 59B2  
                           u5245 4B9C                             u6205 2250  
                           u5430 534A                             u5510 55DA  
                           u6135 215A                             u6055 2022  
                           u5360 52C0                             u6080 20E8  
                           u6400 3B1C                             u6320 5B04  
                           u7120 3FB6                             u6065 2052  
                           u5450 5378                             u5290 4C26  
                           u7210 402C                             u6075 2078  
                           u5540 2C1A                             u8020 0D86  
                           u6340 39F4                             u6085 20DE  
                           u5630 2EE6                             u5550 2C3A  
                           u8030 0D9C                             u7150 3FEA  
                           u6175 21C6                             u5615 2DCC  
                           u6185 21E8                             u5705 254C  
                           u6194 2206                             u5730 2606  
                           u5650 23EA                             u6530 2950  
                           u7170 3FF6                             u6290 597E  
                           u5395 52D4                             u6195 2200  
                           u5635 2EDC                             u6515 28BA  
                           u5660 240A                             u5900 385A  
                           u7420 4EC8                             u6540 2966  
                           u8220 12D2                             u5565 2C9E  
                           u6445 3BC2                             u7510 571C  
                           u5750 2712                             u5830 36EA  
                           u7430 4F06                             u6470 2846  
                           u7190 4020                             u5735 25FC  
                           u6455 3C0E                             u6800 4306  
                           u7360 5078                             u7600 47A4  
                           u5585 2D3C                             u8065 0EBA  
                           u8225 12C8                             u5850 375E  
                           u6730 4238                             u6650 416E  
                           u8090 1022                             u7530 466E  
                           u5755 2708                             u5675 245A  
                           u6635 2BC8                             u6820 432A  
                           u9060 558E                             u7540 468E  
                           u4990 5BCA                             u8095 1018  
                           u8335 1522                             u5960 3934  
                           u5880 37FC                             u7640 47CC  
                           u8440 18C8                             u7490 56E2  
                           u6930 4D26                             u8700 3E82  
                           u9510 1EBA                             u6950 4D60  
                           u7590 474E                             u8710 3EA6  
                           u9440 1D2C                             u8800 33CE  
                           u9600 5228                             u9345 1A2E  
                           u8385 1686                             u9290 1944  
                           u7770 08B0                             u7690 4880  
                           u8810 3544                             u9531 53A0  
                           u8395 16CA                             u9460 1DB0  
                           u9380 1BF0                             u6980 4D8E  
                           u8660 3E26                             u8900 364A  
                           u9390 1C16                             u7870 0A8E  
                           u8815 353A                             u9570 53F4  
                           u9490 1E50                             u7890 0AA0  
                           u8850 35D0                             u9590 520A  
                           u9495 1E46                             u8890 362C  
                           u7995 0CD2                             u8980 4B28  
                           u9927 4222                             u9937 42F0  
                           u9947 5BB6                             u9957 5904  
                           u9967 5408                             u9977 5422  
                           u9987 543C                             _WPUB 000F85  
                           _Fsid 00DA                             _Stat 00F1  
                           _data 00EF                             _main 5B16  
                   find_volume@i 0095                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             _volt 00D0  
                  __CFG_BORV$190 000000                    disk_ioctl@cmd 0011  
                  disk_ioctl@csd 0021                    disk_read@buff 0011  
                  disk_ioctl@res 0036                    disk_ioctl@ptr 0038  
                  disk_read@pdrv 0019                             prodh 000FF4  
                           prodl 000FF3                   ??_get_ldnumber 0003  
                           start 0000        __end_of_SPI1_Exchange8bit 5D28  
                  __CFG_IESO$OFF 000000                  ___fldiv@new_exp 0039  
                     Error@v_seg 0004                    __CFG_MCLRE$ON 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0086  
             disk_initialize@ocr 0013                     ___param_bank 000000  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0058                      _sync_window 4506  
 __size_of_OSCILLATOR_Initialize 0012    __end_of_OSCILLATOR_Initialize 5D18  
                          ?_main 0001                  __end_of___fldiv 3ED8  
                __end_of___flmul 3694                  __end_of___lldiv 576C  
                 __CFG_DEBUG$OFF 000000                            _PORTA 000F80  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                  __end_of_f_close 5C14  
                          _FatFs 0120                  __end_of_chk_chr 5B16  
             __size_of_SPI1_Open 000E                  __end_of_f_lseek 1F3C  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000              ___lmul@multiplicand 0005  
                  __CFG_WRT3$OFF 000000                  __end_of_f_mount 55B0  
                          _Error 537C                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                     ___send_cmd@n 0009  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                __end_of_dir_sdi 3C50                   __CFG_EBTR3$OFF 000000  
                __end_of_f_write 192E                  __end_of_get_fat 2FAC  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                            _adcin 00D8  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 59BC  
                __end_of_mem_cpy 58EA                  __end_of_mem_set 5C40  
                __end_of_guardar 52B0                    find_volume@br 0060  
                  find_volume@fs 0098                    find_volume@pt 007A  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw1 000FE3                            plusw2 000FDB  
                __end_of_put_fat 2804                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                  __end_of_sync_fs 4506  
                 __CFG_ICPRT$OFF 000000                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                  __initialization 5A22  
            disk_initialize@pdrv 0012                     __end_of_main 5B5C  
                   clust2sect@fs 000D                   __CFG_PCLKEN$ON 000000  
                         ??_main 0060                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000                           ?_Error 0001  
                __CFG_CCP2MX$RC1 000000                           _ADCON0 000FC2  
                         _ADCON1 000FC1                           _ADCON2 000FC0  
             __size_of_Init8LEDs 0010                           _ACTCON 000FB5  
                         _ADRESH 000FC4                           _ADRESL 000FC3  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F                   __CFG_WDTEN$OFF 000000  
                         _OSCCON 000FD3             __end_of_dir_register 51E0  
               __end_of___xxtofl 4B70                 __end_of_check_fs 4F48  
          SPI1_Exchange8bit@data 0001                           Error@a 0001  
     __size_of_SPI1_Exchange8bit 0010             __size_of_create_name 0284  
       __size_of_disk_initialize 01EA                 __end_of_deselect 5D7C  
               __end_of_dir_find 4E5C                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 5D56                 __end_of_dir_next 2C0A  
                   ?_move_window 0030             __end_of_create_chain 398E  
               __end_of_ld_clust 586C                           ___lmul 5A78  
               __end_of_grabador 502C             __size_of_find_volume 09AE  
           __size_of_disk_status 0012                           ___wmul 5C90  
                      ??___fldiv 0030                   __CFG_STVREN$ON 000000  
                      ??___flmul 0017                        ??___lldiv 0009  
                         _f_open 2FAC                           _f_sync 48EE  
                      ??_f_close 0050                   find_volume@fmt 0097  
                         clear_0 5A4A                           clear_1 5A5C  
                         clear_2 5A68                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 5CD6                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
               __end_of_send_cmd 5B9E                        ??_mem_cmp 0007  
                      ??_mem_cpy 0007                        ??_mem_set 0007  
                      ??_guardar 0060                  disk_ioctl@csize 0032  
               __end_of_validate 56EA             __end_of_get_ldnumber 510A  
                  interruptadc@a 0003                     __mediumconst 0000  
                disk_read@sector 0013                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
               __end_of_st_clust 5C6A                        ??_put_fat 0045  
                xmit_datablock@i 0007                        ??_sync_fs 003C  
             rcvr_datablock@buff 0002             __CFG_LS48MHZ$SYS24X4 000000  
                   ___xxtofl@arg 000B                     ___xxtofl@exp 000A  
              _SYSTEM_Initialize 5D56                     ___xxtofl@val 0001  
                     __accesstop 0060          __end_of__initialization 5A6E  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
                  __end_of_Error 5446                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                    ?_interruptadc 0001  
                   __pidataBANK0 5D38              ??_SYSTEM_Initialize 0001  
              __end_of_Init8LEDs 5D38                       ___send_cmd 576C  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
             __size_of_dir_alloc 00F0                          ??_Error 0003  
             __size_of_disk_read 00CC        __end_of_SYSTEM_Initialize 5D64  
                     __pbssBANK0 00D0                       __pbssBANK1 0100  
              __CFG_PLLSEL$PLL4X 000000                   ??_interruptadc 0005  
                        ?___lmul 0001                          ?___wmul 0001  
                        ?_f_open 009A          __size_of_xmit_datablock 0066  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?___xxtofl 0001  
                      ?_check_fs 003B                       _disk_ioctl 1F3C  
                 follow_path@dir 008A                          _OSCCON2 000FD2  
                 follow_path@res 008D                       _disk_write 4B70  
                        _OSCTUNE 000F9B                      send_cmd@cmd 000F  
                      ?_deselect 0001                      send_cmd@arg 000B  
                        _SSP1ADD 000FC8                      send_cmd@res 0010  
                 remove_chain@fs 0056                          _SSP1BUF 000FC9  
                      ?_dir_find 0080                        ?_dir_next 006D  
          __size_of_dir_register 00D6                        ?_ld_clust 0001  
                     _clust2sect 5446                 sync_window@wsect 002C  
                      ?_grabador 0001                    ?_remove_chain 0056  
          __size_of_create_chain 02FA                __end_of_dir_alloc 4D70  
                      ?_send_cmd 000B                          __Hparam 0000  
                 ___send_cmd@cmd 000A                   ___send_cmd@arg 0004  
                 ___send_cmd@res 0008                          __Lparam 0000  
                      ?_validate 0002                __end_of_disk_read 537C  
                        ff@FatFs 00DC                       f_close@res 0050  
                        ___fldiv 3C50                  __size_of___lmul 0056  
                      ?_st_clust 0001                          ___flmul 3342  
                    ?___send_cmd 0004                          ___lldiv 56EA  
                __size_of___wmul 0026             __size_of_move_window 00A6  
                     check_fs@fs 003B                  __size_of_f_open 0396  
                   __psmallconst 0800                  __size_of_f_sync 0142  
                        _f_close 5BDA              _disk_initialize$134 0017  
          __size_of_get_ldnumber 00DE                          __pcinit 5A22  
                        _chk_chr 5ACE                          _f_lseek 192E  
                        __ramtop 0800                          _f_mount 5500  
                __size_of_select 001E                          __ptext0 5B16  
                        __ptext1 51E0                          __ptext2 4F48  
                        __ptext3 5C6A                          __ptext4 11CA  
                        __ptext5 4A30                          __ptext6 3342  
                        __ptext7 3C50                          __ptext8 2FAC  
                        __ptext9 465E                          _dir_sdi 398E  
                    validate@fil 0008                          _f_write 11CA  
                    validate@obj 0002                          _get_fat 2C0A  
                     chk_chr@chr 0003                     _dir_register 510A  
                     chk_chr@str 0001                          _mem_cmp 5956  
                        _mem_cpy 586C            _OSCILLATOR_Initialize 5D06  
                        _mem_set 5C14                          _guardar 51E0  
                     ??___xxtofl 0005                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3694                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23DA  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 4346                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 5A6E  
                     ??_grabador 0091                       f_open@mode 009E  
                     f_open@path 009C                   ??_remove_chain 005C  
                  __Lmediumconst 0000                  disk_status@pdrv 0001  
                 _rcvr_datablock 58EA                  ___lldiv@divisor 0005  
                     f_mount@cfs 0058                       f_mount@res 0057  
                     ??_send_cmd 000F                       f_mount@opt 0056  
                     f_mount@vol 005C                  ___lldiv@counter 000D  
                   _get_ldnumber 502C                       ??_validate 0004  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                       ??_st_clust 0007  
                 move_window@res 003A                        _SPI1_Open 5D48  
                     _wait_ready 5B9E                       dir_alloc@n 0087  
               remove_chain@clst 0058                       dir_find@dp 0080  
                _create_name$624 0011                       dir_sdi@idx 0058  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                  ___xxtofl@sign 0009                       f_write@res 0081  
                    ?_disk_write 0011                       get_fat@val 004C  
                    ___fldiv@grs 003B                      ___fldiv@rem 0034  
           __end_of_interruptadc 5C90                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 5956  
                  ??_create_name 000D                 disk_initialize@n 001D  
                    ___flmul@grs 001C                       ld_clust@cl 000B  
                     ld_clust@fs 0001                  _SPI1_Initialize 5D64  
                  ??_find_volume 004A                    ??_disk_status 0001  
                 _xmit_datablock 59BC                       ?_SPI1_Open 0001  
                 __end_of___lmul 5ACE                      st_clust@dir 0001  
                 __end_of___wmul 5CB6                   __end_of_f_open 3342  
                 __end_of_f_sync 4A30                   clust2sect@clst 000F  
         ?_OSCILLATOR_Initialize 0001                        _Init8LEDs 5D28  
                 __end_of_select 5CF4             __size_of_sync_window 0158  
            start_initialization 5A22  __size_of_PIN_MANAGER_Initialize 0020  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 415C  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 5A22  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 415C              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00E3  
            __end_of_find_volume 11CA              __end_of_disk_status 5D06  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 47A8                       ?_Init8LEDs 0001  
              rcvr_datablock@btr 0004                rcvr_datablock@tmr 0006  
                      ___fldiv@a 002C                        ___fldiv@b 0028  
                    __pbssBIGRAM 0120                        ___flmul@a 0013  
                      ___flmul@b 000F                    __pcstackBANK0 0060  
              __size_of___xxtofl 0140                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 5D72                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
              __size_of_grabador 00E4                  _find_volume$728 0070  
                _find_volume$729 0074           _PIN_MANAGER_Initialize 5CB6  
                ?_xmit_datablock 0004                __size_of_send_cmd 0042  
                       ?___fldiv 0028                     ??___send_cmd 0008  
                       ?___flmul 000F                        _dir_alloc 4C80  
                       ?___lldiv 0001                __size_of_validate 0094  
              interruptadc@adcin 0001                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 52B0  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 48EE  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
          __size_of_interruptadc 0026                      __smallconst 0800  
                       ?_mem_cmp 0001                         ?_mem_cpy 0001  
                       ?_mem_set 0001                         ?_guardar 0001  
                 __size_of_Error 00CA                        f_close@fp 004E  
                       ?_put_fat 003B          __end_of_disk_initialize 4346  
                       ?_sync_fs 003A                      _get_fat$374 004A  
              find_volume@fasize 008D              __size_of_wait_ready 003C  
             __end_of___send_cmd 57EE                      _create_name 3ED8  
                 ___wmul@product 0005                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 081C                      _disk_status 5CF4  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                     _interruptadc 5C6A  
                      dir_find@c 0082                       ?_dir_alloc 0080  
                remove_chain@res 0060                  remove_chain@nxt 0061  
                       _SSP1STAT 000FC7                        f_sync@dir 004C  
                      f_sync@res 004B                        dir_sdi@ic 0067  
                      dir_sdi@dp 0056                        dir_next@c 0078  
                      dir_next@i 007A                       ?_disk_read 0011  
                      f_write@cc 0085                        f_write@bw 0073  
                      f_write@fp 006D                        get_fat@bc 0054  
                      get_fat@fs 003B                        get_fat@wc 0050  
                     _ADCON0bits 000FC2                      ??_Init8LEDs 0001  
              ___wmul@multiplier 0001                         _CardType 00DE  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                      copy_data0 5A36                       put_fat@res 0053  
                     put_fat@val 0041                move_window@sector 0032  
                dir_next@stretch 006F                         __Hrparam 0000  
                       __Lrparam 0000                      _follow_path 47A8  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23DA  
          __size_of_remove_chain 014A               __end_of_disk_write 4C80  
        ??_OSCILLATOR_Initialize 0001                 __size_of___fldiv 0288  
               __size_of___flmul 0352                 __size_of___lldiv 0082  
            __end_of_move_window 5656               __end_of_clust2sect 5500  
               __size_of_f_close 003A                 __size_of_chk_chr 0048  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 0764  
               __size_of_get_fat 03A2                         ___xxtofl 4A30  
                       _check_fs 4E5C                 __size_of_mem_cmp 0066  
               __size_of_mem_cpy 007E                 __size_of_mem_set 002C  
               __size_of_guardar 00D0              xmit_datablock@token 0006  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 5D72                         __ptext10 47A8  
                       __ptext11 57EE                         __ptext20 2804  
                       __ptext12 4D70                         __ptext21 5500  
                       __ptext13 5956                         __ptext30 2C0A  
                       __ptext22 081C                         __ptext14 3ED8  
                       __ptext31 5446                         __ptext23 502C  
                       __ptext15 5ACE                         __ptext40 1F3C  
                       __ptext32 5A78                         __ptext24 415C  
                       __ptext16 510A                         __ptext41 5C90  
                       __ptext33 56EA                         __ptext25 5D48  
                       __ptext17 586C                         __ptext50 5CD6  
                       __ptext42 5C40                         __ptext34 5BDA  
                       __ptext26 4E5C                         __ptext18 4C80  
                       __ptext51 5B9E                         __ptext43 55B0  
                       __ptext35 48EE                         __ptext27 192E  
                       __ptext19 398E                         __ptext60 5D28  
                       __ptext52 5D72                         __ptext44 4506  
                       __ptext36 5656                         __ptext28 3694  
                       __ptext53 58EA                         __ptext45 4B70  
                       __ptext37 5CF4                         __ptext29 23DA  
                       __ptext54 5D18                         __ptext46 59BC  
                       __ptext38 4346                         __ptext55 537C  
                       __ptext47 52B0                         __ptext39 5C14  
                       __ptext56 5D56                         __ptext48 5B5C  
                       __ptext57 5D64                         __ptext49 576C  
                       __ptext58 5CB6                         __ptext59 5D06  
                       _dir_find 4D70                     _SSP1CON1bits 000FC6  
                       _dir_next 2804                    dir_alloc@nent 0082  
               ?_disk_initialize 0001                         _ld_clust 57EE  
               __size_of_put_fat 042A                   sync_window@res 0029  
                       _grabador 4F48                 __size_of_sync_fs 01C0  
                  __size_of_main 0046                       sync_fs@res 0044  
                   _remove_chain 465E                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 5B5C  
                       _validate 5656                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 5C40  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$143 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0007  
                      put_fat@fs 003B                         mem_cpy@s 0009  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                 dir_register@dp 008A                 ??_xmit_datablock 0007  
             __end_of_wait_ready 5BDA                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 55B0             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054                    ?_dir_register 008A  
                    dir_alloc@dp 0080                 ___lldiv@quotient 0009  
                    dir_find@dir 0083              __end_of_sync_window 465E  
                    dir_find@res 0085                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 5CD6  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                    _put_fat$400 004D                      _put_fat$401 004F  
                   ?_disk_status 0001  
