

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 17 21:12:20 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73  0000                     
    74                           ; Version 2.05
    75                           ; Generated 20/12/2018 GMT
    76                           ; 
    77                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F45K50 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataBANK0
   110  005608                     __pidataBANK0:
   111                           	opt callstack 0
   112                           
   113                           ;initializer for _Stat
   114  005608  01                 	db	1
   115                           
   116                           	psect	idataBANK1
   117  0055F4                     __pidataBANK1:
   118                           	opt callstack 0
   119                           
   120                           ;initializer for Error@F5051
   121  0055F4  7E                 	db	126
   122  0055F5  30                 	db	48
   123  0055F6  6D                 	db	109
   124  0055F7  79                 	db	121
   125  0055F8  33                 	db	51
   126  0055F9  5B                 	db	91
   127  0055FA  5F                 	db	95
   128  0055FB  70                 	db	112
   129  0055FC  7F                 	db	127
   130  0055FD  73                 	db	115
   131  0000                     _ANSELA	set	3931
   132  0000                     _ANSELB	set	3932
   133  0000                     _ANSELC	set	3933
   134  0000                     _ANSELE	set	3935
   135  0000                     _ANSELD	set	3934
   136  0000                     _SSP1STATbits	set	4039
   137  0000                     _SSP1BUF	set	4041
   138  0000                     _SSP1CON1bits	set	4038
   139  0000                     _SSP1ADD	set	4040
   140  0000                     _SSP1CON1	set	4038
   141  0000                     _SSP1STAT	set	4039
   142  0000                     _INTCON2bits	set	4081
   143  0000                     _WPUB	set	3973
   144  0000                     _TRISC	set	3988
   145  0000                     _TRISB	set	3987
   146  0000                     _TRISA	set	3986
   147  0000                     _LATC	set	3979
   148  0000                     _LATB	set	3978
   149  0000                     _LATA	set	3977
   150  0000                     _ACTCON	set	4021
   151  0000                     _OSCTUNE	set	3995
   152  0000                     _OSCCON2	set	4050
   153  0000                     _OSCCON	set	4051
   154  0000                     _LATBbits	set	3978
   155  0000                     _TRISE	set	3990
   156  0000                     _LATE	set	3981
   157  0000                     _TRISD	set	3989
   158  0000                     _LATD	set	3980
   159                           
   160                           	psect	smallconst
   161  000800                     __psmallconst:
   162                           	opt callstack 0
   163  000800  00                 	db	0
   164  000801                     STR_4:
   165                           
   166                           ; BSR set to: 15
   167  000801  50                 	db	80	;'P'
   168  000802  72                 	db	114	;'r'
   169  000803  75                 	db	117	;'u'
   170  000804  65                 	db	101	;'e'
   171  000805  62                 	db	98	;'b'
   172  000806  61                 	db	97	;'a'
   173  000807  20                 	db	32
   174  000808  70                 	db	112	;'p'
   175  000809  6F                 	db	111	;'o'
   176  00080A  72                 	db	114	;'r'
   177  00080B  20                 	db	32
   178  00080C  41                 	db	65	;'A'
   179  00080D  52                 	db	82	;'R'
   180  00080E  52                 	db	82	;'R'
   181  00080F  41                 	db	65	;'A'
   182  000810  59                 	db	89	;'Y'
   183  000811  2E                 	db	46
   184  000812  0D                 	db	13
   185  000813  0A                 	db	10
   186  000814  00                 	db	0
   187  000815                     STR_5:
   188                           
   189                           ; BSR set to: 15
   190  000815  22                 	db	34
   191  000816  2A                 	db	42
   192  000817  2B                 	db	43
   193  000818  2C                 	db	44
   194  000819  3A                 	db	58	;':'
   195  00081A  3B                 	db	59	;';'
   196  00081B  3C                 	db	60	;'<'
   197  00081C  3D                 	db	61	;'='
   198  00081D  3E                 	db	62	;'>'
   199  00081E  3F                 	db	63	;'?'
   200  00081F  5B                 	db	91	;'['
   201  000820  5D                 	db	93	;']'
   202  000821  7C                 	db	124
   203  000822  7F                 	db	127
   204  000823  00                 	db	0
   205  000824                     STR_3:
   206                           
   207                           ; BSR set to: 15
   208  000824  42                 	db	66	;'B'
   209  000825  65                 	db	101	;'e'
   210  000826  65                 	db	101	;'e'
   211  000827  44                 	db	68	;'D'
   212  000828  65                 	db	101	;'e'
   213  000829  76                 	db	118	;'v'
   214  00082A  2E                 	db	46
   215  00082B  74                 	db	116	;'t'
   216  00082C  78                 	db	120	;'x'
   217  00082D  74                 	db	116	;'t'
   218  00082E  00                 	db	0
   219  0000                     
   220                           ; #config settings
   221  00082F  00                 	db	0	; dummy byte at the end
   222  0000                     
   223                           	psect	cinit
   224  00527C                     __pcinit:
   225                           	opt callstack 0
   226  00527C                     start_initialization:
   227                           	opt callstack 0
   228  00527C                     __initialization:
   229                           	opt callstack 0
   230                           
   231                           ; Initialize objects allocated to BANK1 (10 bytes)
   232                           ; load TBLPTR registers with __pidataBANK1
   233  00527C  0EF4               	movlw	low __pidataBANK1
   234  00527E  6EF6               	movwf	tblptrl,c
   235  005280  0E55               	movlw	high __pidataBANK1
   236  005282  6EF7               	movwf	tblptrh,c
   237  005284  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   238  005286  6EF8               	movwf	tblptru,c
   239  005288  EE01  F000         	lfsr	0,__pdataBANK1
   240  00528C  EE10 F00A          	lfsr	1,10
   241  005290                     copy_data0:
   242  005290  0009               	tblrd		*+
   243  005292  CFF5 FFEE          	movff	tablat,postinc0
   244  005296  50E5               	movf	postdec1,w,c
   245  005298  50E1               	movf	fsr1l,w,c
   246  00529A  E1FA               	bnz	copy_data0
   247                           
   248                           ; Initialize objects allocated to BANK0 (1 bytes)
   249                           ; load TBLPTR registers with __pidataBANK0
   250  00529C  0E08               	movlw	low __pidataBANK0
   251  00529E  6EF6               	movwf	tblptrl,c
   252  0052A0  0E56               	movlw	high __pidataBANK0
   253  0052A2  6EF7               	movwf	tblptrh,c
   254  0052A4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   255  0052A6  6EF8               	movwf	tblptru,c
   256  0052A8  0009               	tblrd		*+	;fetch initializer
   257  0052AA  CFF5 F0FA          	movff	tablat,__pdataBANK0
   258                           
   259                           ; Clear objects allocated to BIGRAM (558 bytes)
   260  0052AE  EE01  F00A         	lfsr	0,__pbssBIGRAM
   261  0052B2  EE12 F02E          	lfsr	1,558
   262  0052B6                     clear_0:
   263  0052B6  6AEE               	clrf	postinc0,c
   264  0052B8  50E5               	movf	postdec1,w,c
   265  0052BA  50E1               	movf	fsr1l,w,c
   266  0052BC  E1FC               	bnz	clear_0
   267  0052BE  50E2               	movf	fsr1h,w,c
   268  0052C0  E1FA               	bnz	clear_0
   269                           
   270                           ; Clear objects allocated to BANK0 (38 bytes)
   271  0052C2  EE00  F0D4         	lfsr	0,__pbssBANK0
   272  0052C6  0E26               	movlw	38
   273  0052C8                     clear_1:
   274  0052C8  6AEE               	clrf	postinc0,c
   275  0052CA  06E8               	decf	wreg,f,c
   276  0052CC  E1FD               	bnz	clear_1
   277  0052CE                     end_of_initialization:
   278                           	opt callstack 0
   279  0052CE                     __end_of__initialization:
   280                           	opt callstack 0
   281  0052CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   282  0052D0  6EF8               	movwf	tblptru,c
   283  0052D2  0100               	movlb	0
   284  0052D4  EFC0  F02A         	goto	_main	;jump to C main() function
   285                           
   286                           	psect	bssBANK0
   287  0000D4                     __pbssBANK0:
   288                           	opt callstack 0
   289  0000D4                     _Fsid:
   290                           	opt callstack 0
   291  0000D4                     	ds	2
   292  0000D6                     ff@FatFs:
   293                           	opt callstack 0
   294  0000D6                     	ds	2
   295  0000D8                     _CardType:
   296                           	opt callstack 0
   297  0000D8                     	ds	1
   298  0000D9                     _data:
   299                           	opt callstack 0
   300  0000D9                     	ds	1
   301  0000DA                     _Fil:
   302                           	opt callstack 0
   303  0000DA                     	ds	32
   304                           
   305                           	psect	dataBANK0
   306  0000FA                     __pdataBANK0:
   307                           	opt callstack 0
   308  0000FA                     _Stat:
   309                           	opt callstack 0
   310  0000FA                     	ds	1
   311                           
   312                           	psect	dataBANK1
   313  000100                     __pdataBANK1:
   314                           	opt callstack 0
   315  000100                     Error@F5051:
   316                           	opt callstack 0
   317  000100                     	ds	10
   318                           
   319                           	psect	bssBIGRAM
   320  00010A                     __pbssBIGRAM:
   321                           	opt callstack 0
   322  00010A                     _FatFs:
   323                           	opt callstack 0
   324  00010A                     	ds	558
   325                           
   326                           	psect	cstackBANK0
   327  000060                     __pcstackBANK0:
   328                           	opt callstack 0
   329  000060                     ??_dir_sdi:
   330  000060                     remove_chain@res:
   331                           	opt callstack 0
   332  000060                     create_chain@res:
   333                           	opt callstack 0
   334  000060                     find_volume@br:
   335                           	opt callstack 0
   336                           
   337                           ; 16 bytes @ 0x0
   338  000060                     	ds	1
   339  000061                     remove_chain@nxt:
   340                           	opt callstack 0
   341  000061                     create_chain@scl:
   342                           	opt callstack 0
   343                           
   344                           ; 4 bytes @ 0x1
   345  000061                     	ds	4
   346  000065                     create_chain@ncl:
   347                           	opt callstack 0
   348                           
   349                           ; 4 bytes @ 0x5
   350  000065                     	ds	2
   351  000067                     dir_sdi@ic:
   352                           	opt callstack 0
   353                           
   354                           ; 2 bytes @ 0x7
   355  000067                     	ds	2
   356  000069                     create_chain@cs:
   357                           	opt callstack 0
   358  000069                     dir_sdi@sect:
   359                           	opt callstack 0
   360                           
   361                           ; 4 bytes @ 0x9
   362  000069                     	ds	4
   363  00006D                     dir_next@dp:
   364                           	opt callstack 0
   365  00006D                     f_write@fp:
   366                           	opt callstack 0
   367  00006D                     f_lseek@fp:
   368                           	opt callstack 0
   369  00006D                     dir_sdi@clst:
   370                           	opt callstack 0
   371                           
   372                           ; 4 bytes @ 0xD
   373  00006D                     	ds	2
   374  00006F                     dir_next@stretch:
   375                           	opt callstack 0
   376  00006F                     f_write@buff:
   377                           	opt callstack 0
   378  00006F                     f_lseek@ofs:
   379                           	opt callstack 0
   380                           
   381                           ; 4 bytes @ 0xF
   382  00006F                     	ds	1
   383  000070                     _find_volume$879:
   384                           	opt callstack 0
   385                           
   386                           ; 4 bytes @ 0x10
   387  000070                     	ds	1
   388  000071                     ??_dir_next:
   389  000071                     f_write@btw:
   390                           	opt callstack 0
   391                           
   392                           ; 2 bytes @ 0x11
   393  000071                     	ds	2
   394  000073                     ??_f_lseek:
   395  000073                     f_write@bw:
   396                           	opt callstack 0
   397                           
   398                           ; 2 bytes @ 0x13
   399  000073                     	ds	1
   400  000074                     _find_volume$880:
   401                           	opt callstack 0
   402                           
   403                           ; 2 bytes @ 0x14
   404  000074                     	ds	1
   405  000075                     ??_f_write:
   406                           
   407                           ; 1 bytes @ 0x15
   408  000075                     	ds	1
   409  000076                     find_volume@szbfat:
   410                           	opt callstack 0
   411                           
   412                           ; 4 bytes @ 0x16
   413  000076                     	ds	2
   414  000078                     dir_next@c:
   415                           	opt callstack 0
   416                           
   417                           ; 2 bytes @ 0x18
   418  000078                     	ds	2
   419  00007A                     dir_next@i:
   420                           	opt callstack 0
   421  00007A                     find_volume@pt:
   422                           	opt callstack 0
   423                           
   424                           ; 2 bytes @ 0x1A
   425  00007A                     	ds	2
   426  00007C                     dir_next@clst:
   427                           	opt callstack 0
   428  00007C                     find_volume@sysect:
   429                           	opt callstack 0
   430                           
   431                           ; 4 bytes @ 0x1C
   432  00007C                     	ds	4
   433  000080                     dir_alloc@dp:
   434                           	opt callstack 0
   435  000080                     dir_find@dp:
   436                           	opt callstack 0
   437  000080                     find_volume@vol:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x20
   441  000080                     	ds	1
   442  000081                     f_write@res:
   443                           	opt callstack 0
   444                           
   445                           ; 1 bytes @ 0x21
   446  000081                     	ds	1
   447  000082                     dir_find@c:
   448                           	opt callstack 0
   449  000082                     dir_alloc@nent:
   450                           	opt callstack 0
   451  000082                     find_volume@nrsv:
   452                           	opt callstack 0
   453  000082                     f_write@wbuff:
   454                           	opt callstack 0
   455                           
   456                           ; 2 bytes @ 0x22
   457  000082                     	ds	1
   458  000083                     dir_find@dir:
   459                           	opt callstack 0
   460  000083                     f_lseek@ifptr:
   461                           	opt callstack 0
   462                           
   463                           ; 4 bytes @ 0x23
   464  000083                     	ds	1
   465  000084                     ??_dir_alloc:
   466  000084                     f_write@csect:
   467                           	opt callstack 0
   468  000084                     find_volume@tsect:
   469                           	opt callstack 0
   470                           
   471                           ; 4 bytes @ 0x24
   472  000084                     	ds	1
   473  000085                     dir_find@res:
   474                           	opt callstack 0
   475  000085                     f_write@cc:
   476                           	opt callstack 0
   477                           
   478                           ; 2 bytes @ 0x25
   479  000085                     	ds	1
   480  000086                     follow_path@dp:
   481                           	opt callstack 0
   482                           
   483                           ; 2 bytes @ 0x26
   484  000086                     	ds	1
   485  000087                     f_lseek@res:
   486                           	opt callstack 0
   487  000087                     dir_alloc@n:
   488                           	opt callstack 0
   489  000087                     f_write@sect:
   490                           	opt callstack 0
   491                           
   492                           ; 4 bytes @ 0x27
   493  000087                     	ds	1
   494  000088                     follow_path@path:
   495                           	opt callstack 0
   496  000088                     find_volume@nclst:
   497                           	opt callstack 0
   498  000088                     f_lseek@nsect:
   499                           	opt callstack 0
   500                           
   501                           ; 4 bytes @ 0x28
   502  000088                     	ds	1
   503  000089                     dir_alloc@res:
   504                           	opt callstack 0
   505                           
   506                           ; 1 bytes @ 0x29
   507  000089                     	ds	1
   508  00008A                     dir_register@dp:
   509                           	opt callstack 0
   510  00008A                     follow_path@dir:
   511                           	opt callstack 0
   512                           
   513                           ; 2 bytes @ 0x2A
   514  00008A                     	ds	1
   515  00008B                     f_write@clst:
   516                           	opt callstack 0
   517                           
   518                           ; 4 bytes @ 0x2B
   519  00008B                     	ds	1
   520  00008C                     dir_register@res:
   521                           	opt callstack 0
   522  00008C                     follow_path@ns:
   523                           	opt callstack 0
   524  00008C                     find_volume@stat:
   525                           	opt callstack 0
   526  00008C                     f_lseek@bcs:
   527                           	opt callstack 0
   528                           
   529                           ; 4 bytes @ 0x2C
   530  00008C                     	ds	1
   531  00008D                     follow_path@res:
   532                           	opt callstack 0
   533  00008D                     find_volume@fasize:
   534                           	opt callstack 0
   535                           
   536                           ; 4 bytes @ 0x2D
   537  00008D                     	ds	2
   538  00008F                     f_write@wcnt:
   539                           	opt callstack 0
   540                           
   541                           ; 2 bytes @ 0x2F
   542  00008F                     	ds	1
   543  000090                     f_lseek@clst:
   544                           	opt callstack 0
   545                           
   546                           ; 4 bytes @ 0x30
   547  000090                     	ds	1
   548  000091                     find_volume@bsect:
   549                           	opt callstack 0
   550                           
   551                           ; 4 bytes @ 0x31
   552  000091                     	ds	4
   553  000095                     find_volume@i:
   554                           	opt callstack 0
   555                           
   556                           ; 2 bytes @ 0x35
   557  000095                     	ds	2
   558  000097                     find_volume@fmt:
   559                           	opt callstack 0
   560                           
   561                           ; 1 bytes @ 0x37
   562  000097                     	ds	1
   563  000098                     find_volume@fs:
   564                           	opt callstack 0
   565                           
   566                           ; 2 bytes @ 0x38
   567  000098                     	ds	2
   568  00009A                     f_open@fp:
   569                           	opt callstack 0
   570                           
   571                           ; 2 bytes @ 0x3A
   572  00009A                     	ds	2
   573  00009C                     f_open@path:
   574                           	opt callstack 0
   575                           
   576                           ; 2 bytes @ 0x3C
   577  00009C                     	ds	2
   578  00009E                     f_open@mode:
   579                           	opt callstack 0
   580                           
   581                           ; 1 bytes @ 0x3E
   582  00009E                     	ds	1
   583  00009F                     ??_f_open:
   584                           
   585                           ; 1 bytes @ 0x3F
   586  00009F                     	ds	4
   587  0000A3                     f_open@sfn:
   588                           	opt callstack 0
   589                           
   590                           ; 12 bytes @ 0x43
   591  0000A3                     	ds	12
   592  0000AF                     f_open@cl:
   593                           	opt callstack 0
   594                           
   595                           ; 4 bytes @ 0x4F
   596  0000AF                     	ds	4
   597  0000B3                     f_open@dw:
   598                           	opt callstack 0
   599                           
   600                           ; 4 bytes @ 0x53
   601  0000B3                     	ds	4
   602  0000B7                     f_open@res:
   603                           	opt callstack 0
   604                           
   605                           ; 1 bytes @ 0x57
   606  0000B7                     	ds	1
   607  0000B8                     f_open@dir:
   608                           	opt callstack 0
   609                           
   610                           ; 2 bytes @ 0x58
   611  0000B8                     	ds	2
   612  0000BA                     f_open@dj:
   613                           	opt callstack 0
   614                           
   615                           ; 22 bytes @ 0x5A
   616  0000BA                     	ds	22
   617  0000D0                     guardar@data:
   618                           	opt callstack 0
   619                           
   620                           ; 2 bytes @ 0x70
   621  0000D0                     	ds	2
   622  0000D2                     guardar@bw:
   623                           	opt callstack 0
   624                           
   625                           ; 2 bytes @ 0x72
   626  0000D2                     	ds	2
   627                           
   628                           	psect	cstackCOMRAM
   629  000001                     __pcstackCOMRAM:
   630                           	opt callstack 0
   631  000001                     ??___delay_sec:
   632  000001                     ?_mem_cmp:
   633                           	opt callstack 0
   634  000001                     ?_chk_chr:
   635                           	opt callstack 0
   636  000001                     ?_get_ldnumber:
   637                           	opt callstack 0
   638  000001                     ?___wmul:
   639                           	opt callstack 0
   640  000001                     ?_ld_clust:
   641                           	opt callstack 0
   642  000001                     ?___lmul:
   643                           	opt callstack 0
   644  000001                     ?___lldiv:
   645                           	opt callstack 0
   646  000001                     disk_status@pdrv:
   647                           	opt callstack 0
   648  000001                     SPI1_Exchange8bit@data:
   649                           	opt callstack 0
   650  000001                     Error@a:
   651                           	opt callstack 0
   652  000001                     mem_cpy@dst:
   653                           	opt callstack 0
   654  000001                     mem_set@dst:
   655                           	opt callstack 0
   656  000001                     mem_cmp@dst:
   657                           	opt callstack 0
   658  000001                     chk_chr@str:
   659                           	opt callstack 0
   660  000001                     ld_clust@fs:
   661                           	opt callstack 0
   662  000001                     st_clust@dir:
   663                           	opt callstack 0
   664  000001                     get_ldnumber@path:
   665                           	opt callstack 0
   666  000001                     ___wmul@multiplier:
   667                           	opt callstack 0
   668  000001                     ___lmul@multiplier:
   669                           	opt callstack 0
   670  000001                     ___lldiv@dividend:
   671                           	opt callstack 0
   672                           
   673                           ; 4 bytes @ 0x0
   674  000001                     	ds	1
   675  000002                     wait_ready@tmr:
   676                           	opt callstack 0
   677  000002                     rcvr_datablock@buff:
   678                           	opt callstack 0
   679  000002                     validate@obj:
   680                           	opt callstack 0
   681                           
   682                           ; 2 bytes @ 0x1
   683  000002                     	ds	1
   684  000003                     ??_get_ldnumber:
   685  000003                     mem_cpy@src:
   686                           	opt callstack 0
   687  000003                     mem_set@val:
   688                           	opt callstack 0
   689  000003                     mem_cmp@src:
   690                           	opt callstack 0
   691  000003                     chk_chr@chr:
   692                           	opt callstack 0
   693  000003                     ld_clust@dir:
   694                           	opt callstack 0
   695  000003                     ___wmul@multiplicand:
   696                           	opt callstack 0
   697  000003                     st_clust@cl:
   698                           	opt callstack 0
   699  000003                     Error@v_seg:
   700                           	opt callstack 0
   701                           
   702                           ; 10 bytes @ 0x2
   703  000003                     	ds	1
   704  000004                     ??_validate:
   705  000004                     ___delay_sec@sec:
   706                           	opt callstack 0
   707  000004                     rcvr_datablock@btr:
   708                           	opt callstack 0
   709  000004                     xmit_datablock@buff:
   710                           	opt callstack 0
   711  000004                     ___send_cmd@arg:
   712                           	opt callstack 0
   713                           
   714                           ; 4 bytes @ 0x3
   715  000004                     	ds	1
   716  000005                     ??_chk_chr:
   717  000005                     ??_ld_clust:
   718  000005                     ___delay_sec@i:
   719                           	opt callstack 0
   720  000005                     mem_cpy@cnt:
   721                           	opt callstack 0
   722  000005                     mem_set@cnt:
   723                           	opt callstack 0
   724  000005                     mem_cmp@cnt:
   725                           	opt callstack 0
   726  000005                     ___wmul@product:
   727                           	opt callstack 0
   728  000005                     ___lmul@multiplicand:
   729                           	opt callstack 0
   730  000005                     ___lldiv@divisor:
   731                           	opt callstack 0
   732                           
   733                           ; 4 bytes @ 0x4
   734  000005                     	ds	1
   735  000006                     xmit_datablock@token:
   736                           	opt callstack 0
   737  000006                     rcvr_datablock@tmr:
   738                           	opt callstack 0
   739                           
   740                           ; 2 bytes @ 0x5
   741  000006                     	ds	1
   742  000007                     ??_mem_cpy:
   743  000007                     ??_mem_cmp:
   744  000007                     xmit_datablock@i:
   745                           	opt callstack 0
   746  000007                     mem_set@d:
   747                           	opt callstack 0
   748  000007                     get_ldnumber@tp:
   749                           	opt callstack 0
   750                           
   751                           ; 2 bytes @ 0x6
   752  000007                     	ds	1
   753  000008                     rcvr_datablock@token:
   754                           	opt callstack 0
   755  000008                     ___send_cmd@res:
   756                           	opt callstack 0
   757  000008                     validate@fil:
   758                           	opt callstack 0
   759                           
   760                           ; 2 bytes @ 0x7
   761  000008                     	ds	1
   762  000009                     xmit_datablock@resp:
   763                           	opt callstack 0
   764  000009                     ___send_cmd@n:
   765                           	opt callstack 0
   766  000009                     mem_cpy@d:
   767                           	opt callstack 0
   768  000009                     mem_cmp@d:
   769                           	opt callstack 0
   770  000009                     create_name@dp:
   771                           	opt callstack 0
   772  000009                     get_ldnumber@vol:
   773                           	opt callstack 0
   774  000009                     ___lmul@product:
   775                           	opt callstack 0
   776  000009                     ___lldiv@quotient:
   777                           	opt callstack 0
   778                           
   779                           ; 4 bytes @ 0x8
   780  000009                     	ds	1
   781  00000A                     ___send_cmd@cmd:
   782                           	opt callstack 0
   783                           
   784                           ; 1 bytes @ 0x9
   785  00000A                     	ds	1
   786  00000B                     mem_cpy@s:
   787                           	opt callstack 0
   788  00000B                     mem_cmp@s:
   789                           	opt callstack 0
   790  00000B                     create_name@path:
   791                           	opt callstack 0
   792  00000B                     get_ldnumber@i:
   793                           	opt callstack 0
   794  00000B                     send_cmd@arg:
   795                           	opt callstack 0
   796  00000B                     ld_clust@cl:
   797                           	opt callstack 0
   798                           
   799                           ; 4 bytes @ 0xA
   800  00000B                     	ds	2
   801  00000D                     ??_create_name:
   802  00000D                     ?_clust2sect:
   803                           	opt callstack 0
   804  00000D                     ___lldiv@counter:
   805                           	opt callstack 0
   806  00000D                     mem_cmp@r:
   807                           	opt callstack 0
   808  00000D                     clust2sect@fs:
   809                           	opt callstack 0
   810  00000D                     get_ldnumber@tt:
   811                           	opt callstack 0
   812                           
   813                           ; 2 bytes @ 0xC
   814  00000D                     	ds	2
   815  00000F                     send_cmd@cmd:
   816                           	opt callstack 0
   817  00000F                     clust2sect@clst:
   818                           	opt callstack 0
   819                           
   820                           ; 4 bytes @ 0xE
   821  00000F                     	ds	1
   822  000010                     send_cmd@res:
   823                           	opt callstack 0
   824                           
   825                           ; 1 bytes @ 0xF
   826  000010                     	ds	1
   827  000011                     ??_disk_initialize:
   828  000011                     disk_ioctl@cmd:
   829                           	opt callstack 0
   830  000011                     disk_read@buff:
   831                           	opt callstack 0
   832  000011                     disk_write@buff:
   833                           	opt callstack 0
   834  000011                     _create_name$775:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0x10
   838  000011                     	ds	1
   839  000012                     disk_initialize@pdrv:
   840                           	opt callstack 0
   841  000012                     disk_ioctl@buff:
   842                           	opt callstack 0
   843                           
   844                           ; 2 bytes @ 0x11
   845  000012                     	ds	1
   846  000013                     ??_clust2sect:
   847  000013                     create_name@si:
   848                           	opt callstack 0
   849  000013                     disk_initialize@ocr:
   850                           	opt callstack 0
   851  000013                     disk_read@sector:
   852                           	opt callstack 0
   853  000013                     disk_write@sector:
   854                           	opt callstack 0
   855                           
   856                           ; 4 bytes @ 0x12
   857  000013                     	ds	1
   858  000014                     ??_disk_ioctl:
   859                           
   860                           ; 1 bytes @ 0x13
   861  000014                     	ds	1
   862  000015                     create_name@b:
   863                           	opt callstack 0
   864                           
   865                           ; 1 bytes @ 0x14
   866  000015                     	ds	1
   867  000016                     create_name@ni:
   868                           	opt callstack 0
   869                           
   870                           ; 2 bytes @ 0x15
   871  000016                     	ds	1
   872  000017                     _disk_initialize$285:
   873                           	opt callstack 0
   874  000017                     disk_read@count:
   875                           	opt callstack 0
   876  000017                     disk_write@count:
   877                           	opt callstack 0
   878                           
   879                           ; 2 bytes @ 0x16
   880  000017                     	ds	1
   881  000018                     create_name@p:
   882                           	opt callstack 0
   883                           
   884                           ; 2 bytes @ 0x17
   885  000018                     	ds	1
   886  000019                     ??_disk_write:
   887  000019                     disk_initialize@cmd:
   888                           	opt callstack 0
   889  000019                     disk_read@pdrv:
   890                           	opt callstack 0
   891                           
   892                           ; 1 bytes @ 0x18
   893  000019                     	ds	1
   894  00001A                     disk_initialize@ty:
   895                           	opt callstack 0
   896  00001A                     disk_write@pdrv:
   897                           	opt callstack 0
   898  00001A                     create_name@d:
   899                           	opt callstack 0
   900  00001A                     _disk_read$294:
   901                           	opt callstack 0
   902                           
   903                           ; 2 bytes @ 0x19
   904  00001A                     	ds	1
   905  00001B                     disk_initialize@tmr:
   906                           	opt callstack 0
   907  00001B                     sync_window@fs:
   908                           	opt callstack 0
   909  00001B                     create_name@sfn:
   910                           	opt callstack 0
   911                           
   912                           ; 2 bytes @ 0x1A
   913  00001B                     	ds	1
   914  00001C                     disk_read@cmd:
   915                           	opt callstack 0
   916                           
   917                           ; 1 bytes @ 0x1B
   918  00001C                     	ds	1
   919  00001D                     ??_sync_window:
   920  00001D                     disk_initialize@n:
   921                           	opt callstack 0
   922  00001D                     create_name@i:
   923                           	opt callstack 0
   924                           
   925                           ; 2 bytes @ 0x1C
   926  00001D                     	ds	2
   927  00001F                     create_name@c:
   928                           	opt callstack 0
   929                           
   930                           ; 1 bytes @ 0x1E
   931  00001F                     	ds	2
   932  000021                     disk_ioctl@csd:
   933                           	opt callstack 0
   934                           
   935                           ; 16 bytes @ 0x20
   936  000021                     	ds	8
   937  000029                     sync_window@res:
   938                           	opt callstack 0
   939                           
   940                           ; 1 bytes @ 0x28
   941  000029                     	ds	1
   942  00002A                     sync_window@nf:
   943                           	opt callstack 0
   944                           
   945                           ; 2 bytes @ 0x29
   946  00002A                     	ds	2
   947  00002C                     sync_window@wsect:
   948                           	opt callstack 0
   949                           
   950                           ; 4 bytes @ 0x2B
   951  00002C                     	ds	4
   952  000030                     move_window@fs:
   953                           	opt callstack 0
   954                           
   955                           ; 2 bytes @ 0x2F
   956  000030                     	ds	1
   957  000031                     disk_ioctl@pdrv:
   958                           	opt callstack 0
   959                           
   960                           ; 1 bytes @ 0x30
   961  000031                     	ds	1
   962  000032                     disk_ioctl@csize:
   963                           	opt callstack 0
   964  000032                     move_window@sector:
   965                           	opt callstack 0
   966                           
   967                           ; 4 bytes @ 0x31
   968  000032                     	ds	4
   969  000036                     disk_ioctl@res:
   970                           	opt callstack 0
   971                           
   972                           ; 1 bytes @ 0x35
   973  000036                     	ds	1
   974  000037                     disk_ioctl@n:
   975                           	opt callstack 0
   976                           
   977                           ; 1 bytes @ 0x36
   978  000037                     	ds	1
   979  000038                     disk_ioctl@ptr:
   980                           	opt callstack 0
   981                           
   982                           ; 2 bytes @ 0x37
   983  000038                     	ds	2
   984  00003A                     move_window@res:
   985                           	opt callstack 0
   986  00003A                     sync_fs@fs:
   987                           	opt callstack 0
   988                           
   989                           ; 2 bytes @ 0x39
   990  00003A                     	ds	1
   991  00003B                     ?_get_fat:
   992                           	opt callstack 0
   993  00003B                     get_fat@fs:
   994                           	opt callstack 0
   995  00003B                     put_fat@fs:
   996                           	opt callstack 0
   997  00003B                     check_fs@fs:
   998                           	opt callstack 0
   999                           
  1000                           ; 2 bytes @ 0x3A
  1001  00003B                     	ds	1
  1002  00003C                     ??_sync_fs:
  1003                           
  1004                           ; 1 bytes @ 0x3B
  1005  00003C                     	ds	1
  1006  00003D                     get_fat@clst:
  1007                           	opt callstack 0
  1008  00003D                     put_fat@clst:
  1009                           	opt callstack 0
  1010  00003D                     check_fs@sect:
  1011                           	opt callstack 0
  1012                           
  1013                           ; 4 bytes @ 0x3C
  1014  00003D                     	ds	4
  1015  000041                     ??_get_fat:
  1016  000041                     ??_check_fs:
  1017  000041                     put_fat@val:
  1018                           	opt callstack 0
  1019                           
  1020                           ; 4 bytes @ 0x40
  1021  000041                     	ds	3
  1022  000044                     sync_fs@res:
  1023                           	opt callstack 0
  1024                           
  1025                           ; 1 bytes @ 0x43
  1026  000044                     	ds	1
  1027  000045                     ??_put_fat:
  1028  000045                     find_volume@rfs:
  1029                           	opt callstack 0
  1030  000045                     f_sync@fp:
  1031                           	opt callstack 0
  1032                           
  1033                           ; 2 bytes @ 0x44
  1034  000045                     	ds	2
  1035  000047                     find_volume@path:
  1036                           	opt callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x46
  1039  000047                     	ds	2
  1040  000049                     find_volume@wmode:
  1041                           	opt callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x48
  1044  000049                     	ds	1
  1045  00004A                     ??_find_volume:
  1046  00004A                     _get_fat$525:
  1047                           	opt callstack 0
  1048                           
  1049                           ; 2 bytes @ 0x49
  1050  00004A                     	ds	1
  1051  00004B                     f_sync@res:
  1052                           	opt callstack 0
  1053                           
  1054                           ; 1 bytes @ 0x4A
  1055  00004B                     	ds	1
  1056  00004C                     f_sync@dir:
  1057                           	opt callstack 0
  1058  00004C                     get_fat@val:
  1059                           	opt callstack 0
  1060                           
  1061                           ; 4 bytes @ 0x4B
  1062  00004C                     	ds	1
  1063  00004D                     _put_fat$551:
  1064                           	opt callstack 0
  1065                           
  1066                           ; 2 bytes @ 0x4C
  1067  00004D                     	ds	1
  1068  00004E                     f_close@fp:
  1069                           	opt callstack 0
  1070                           
  1071                           ; 2 bytes @ 0x4D
  1072  00004E                     	ds	1
  1073  00004F                     _put_fat$552:
  1074                           	opt callstack 0
  1075                           
  1076                           ; 2 bytes @ 0x4E
  1077  00004F                     	ds	1
  1078  000050                     f_close@res:
  1079                           	opt callstack 0
  1080  000050                     get_fat@wc:
  1081                           	opt callstack 0
  1082                           
  1083                           ; 2 bytes @ 0x4F
  1084  000050                     	ds	1
  1085  000051                     put_fat@bc:
  1086                           	opt callstack 0
  1087                           
  1088                           ; 2 bytes @ 0x50
  1089  000051                     	ds	1
  1090  000052                     get_fat@p:
  1091                           	opt callstack 0
  1092  000052                     f_mount@fs:
  1093                           	opt callstack 0
  1094                           
  1095                           ; 2 bytes @ 0x51
  1096  000052                     	ds	1
  1097  000053                     put_fat@res:
  1098                           	opt callstack 0
  1099                           
  1100                           ; 1 bytes @ 0x52
  1101  000053                     	ds	1
  1102  000054                     get_fat@bc:
  1103                           	opt callstack 0
  1104  000054                     put_fat@p:
  1105                           	opt callstack 0
  1106  000054                     f_mount@path:
  1107                           	opt callstack 0
  1108                           
  1109                           ; 2 bytes @ 0x53
  1110  000054                     	ds	2
  1111  000056                     ?_create_chain:
  1112                           	opt callstack 0
  1113  000056                     f_mount@opt:
  1114                           	opt callstack 0
  1115  000056                     remove_chain@fs:
  1116                           	opt callstack 0
  1117  000056                     create_chain@fs:
  1118                           	opt callstack 0
  1119  000056                     dir_sdi@dp:
  1120                           	opt callstack 0
  1121                           
  1122                           ; 2 bytes @ 0x55
  1123  000056                     	ds	1
  1124  000057                     f_mount@res:
  1125                           	opt callstack 0
  1126                           
  1127                           ; 1 bytes @ 0x56
  1128  000057                     	ds	1
  1129  000058                     dir_sdi@idx:
  1130                           	opt callstack 0
  1131  000058                     f_mount@cfs:
  1132                           	opt callstack 0
  1133  000058                     remove_chain@clst:
  1134                           	opt callstack 0
  1135  000058                     create_chain@clst:
  1136                           	opt callstack 0
  1137                           
  1138                           ; 4 bytes @ 0x57
  1139  000058                     	ds	2
  1140  00005A                     f_mount@rp:
  1141                           	opt callstack 0
  1142                           
  1143                           ; 2 bytes @ 0x59
  1144  00005A                     	ds	2
  1145  00005C                     f_mount@vol:
  1146                           	opt callstack 0
  1147                           
  1148                           ; 2 bytes @ 0x5B
  1149  00005C                     	ds	4
  1150  000060                     
  1151                           ; 1 bytes @ 0x5F
  1152 ;;
  1153 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1154 ;;
  1155 ;; *************** function _main *****************
  1156 ;; Defined at:
  1157 ;;		line 63 in file "Main.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0
  1172 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1174 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1175 ;;Total ram usage:        0 bytes
  1176 ;; Hardware stack levels required when called:   15
  1177 ;; This function calls:
  1178 ;;		___delay_sec
  1179 ;;		_guardar
  1180 ;; This function is called by:
  1181 ;;		Startup code after reset
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text0
  1186  005580                     __ptext0:
  1187                           	opt callstack 0
  1188  005580                     _main:
  1189                           	opt callstack 16
  1190                           
  1191                           ;Main.c: 67:     guardar("Prueba por ARRAY.\r\n");
  1192                           
  1193                           ;incstack = 0
  1194  005580  0E01               	movlw	low STR_4
  1195  005582  0100               	movlb	0	; () banked
  1196  005584  6FD0               	movwf	guardar@data& (0+255),b
  1197  005586  0E08               	movlw	high STR_4
  1198  005588  6FD1               	movwf	(guardar@data+1)& (0+255),b
  1199  00558A  ECA0  F01F         	call	_guardar	;wreg free
  1200                           
  1201                           ;Main.c: 68:     __delay_sec(5);
  1202  00558E  0E05               	movlw	5
  1203  005590  EC42  F02A         	call	___delay_sec
  1204  005594                     l61:
  1205                           
  1206                           ;Main.c: 70:     {;Main.c: 72:     }
  1207  005594  D7FF               	goto	l61
  1208  005596                     __end_of_main:
  1209                           	opt callstack 0
  1210                           
  1211 ;; *************** function _guardar *****************
  1212 ;; Defined at:
  1213 ;;		line 16 in file "Main.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  data            2  112[BANK0 ] PTR unsigned char 
  1216 ;;		 -> STR_4(20), 
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;  bw              2  114[BANK0 ] unsigned short 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1228 ;;      Params:         0       2       0       0       0       0       0       0       0
  1229 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1231 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1232 ;;Total ram usage:        4 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:   14
  1235 ;; This function calls:
  1236 ;;		_Error
  1237 ;;		_SYSTEM_Initialize
  1238 ;;		___delay_sec
  1239 ;;		_f_close
  1240 ;;		_f_lseek
  1241 ;;		_f_mount
  1242 ;;		_f_open
  1243 ;;		_f_write
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text1
  1250  003F40                     __ptext1:
  1251                           	opt callstack 0
  1252  003F40                     _guardar:
  1253                           	opt callstack 16
  1254                           
  1255                           ;Main.c: 17:     UINT bw;;Main.c: 18:     SYSTEM_Initialize();
  1256                           
  1257                           ;incstack = 0
  1258  003F40  ECEC  F02A         	call	_SYSTEM_Initialize	;wreg free
  1259                           
  1260                           ;Main.c: 19:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1261  003F44  0E0A               	movlw	low _FatFs
  1262  003F46  6E52               	movwf	f_mount@fs,c
  1263  003F48  0E01               	movlw	high _FatFs
  1264  003F4A  6E53               	movwf	f_mount@fs+1,c
  1265  003F4C  0E14               	movlw	low (STR_4+19)
  1266  003F4E  6E54               	movwf	f_mount@path,c
  1267  003F50  0E08               	movlw	high (STR_4+19)
  1268  003F52  6E55               	movwf	f_mount@path+1,c
  1269  003F54  0E01               	movlw	1
  1270  003F56  6E56               	movwf	f_mount@opt,c
  1271  003F58  ECE1  F026         	call	_f_mount	;wreg free
  1272  003F5C  0900               	iorlw	0
  1273  003F5E  B4D8               	btfsc	status,2,c
  1274  003F60  D018               	goto	u8530
  1275                           
  1276                           ;Main.c: 21:         Error(33);
  1277  003F62  0E00               	movlw	0
  1278  003F64  6E02               	movwf	Error@a+1,c
  1279  003F66  0E21               	movlw	33
  1280  003F68  6E01               	movwf	Error@a,c
  1281  003F6A  EC97  F029         	call	_Error	;wreg free
  1282                           
  1283                           ;Main.c: 22:         __delay_sec(2);
  1284  003F6E  0E02               	movlw	2
  1285  003F70  EC42  F02A         	call	___delay_sec
  1286  003F74                     l6177:
  1287                           
  1288                           ;Main.c: 23:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1289  003F74  0E0A               	movlw	low _FatFs
  1290  003F76  6E52               	movwf	f_mount@fs,c
  1291  003F78  0E01               	movlw	high _FatFs
  1292  003F7A  6E53               	movwf	f_mount@fs+1,c
  1293  003F7C  0E14               	movlw	low (STR_4+19)
  1294  003F7E  6E54               	movwf	f_mount@path,c
  1295  003F80  0E08               	movlw	high (STR_4+19)
  1296  003F82  6E55               	movwf	f_mount@path+1,c
  1297  003F84  0E01               	movlw	1
  1298  003F86  6E56               	movwf	f_mount@opt,c
  1299  003F88  ECE1  F026         	call	_f_mount	;wreg free
  1300  003F8C  0900               	iorlw	0
  1301  003F8E  A4D8               	btfss	status,2,c
  1302  003F90  D7F1               	goto	l6177
  1303  003F92                     u8530:
  1304                           
  1305                           ;Main.c: 28:     Error(1);
  1306  003F92  0E00               	movlw	0
  1307  003F94  6E02               	movwf	Error@a+1,c
  1308  003F96  0E01               	movlw	1
  1309  003F98  6E01               	movwf	Error@a,c
  1310  003F9A  EC97  F029         	call	_Error	;wreg free
  1311                           
  1312                           ;Main.c: 29:     __delay_sec(2);
  1313  003F9E  0E02               	movlw	2
  1314  003FA0  EC42  F02A         	call	___delay_sec
  1315                           
  1316                           ;Main.c: 30:     Error(2);
  1317  003FA4  0E00               	movlw	0
  1318  003FA6  6E02               	movwf	Error@a+1,c
  1319  003FA8  0E02               	movlw	2
  1320  003FAA  6E01               	movwf	Error@a,c
  1321  003FAC  EC97  F029         	call	_Error	;wreg free
  1322                           
  1323                           ;Main.c: 32:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1324  003FB0  0EDA               	movlw	low _Fil
  1325  003FB2  0100               	movlb	0	; () banked
  1326  003FB4  6F9A               	movwf	f_open@fp& (0+255),b
  1327  003FB6  0E00               	movlw	high _Fil
  1328  003FB8  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1329  003FBA  0E24               	movlw	low STR_3
  1330  003FBC  6F9C               	movwf	f_open@path& (0+255),b
  1331  003FBE  0E08               	movlw	high STR_3
  1332  003FC0  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1333  003FC2  0E13               	movlw	19
  1334  003FC4  6F9E               	movwf	f_open@mode& (0+255),b
  1335  003FC6  ECE0  F017         	call	_f_open	;wreg free
  1336  003FCA  0900               	iorlw	0
  1337  003FCC  A4D8               	btfss	status,2,c
  1338  003FCE  D077               	goto	l6225
  1339                           
  1340                           ;Main.c: 33:         Error(3);
  1341  003FD0  0E00               	movlw	0
  1342  003FD2  6E02               	movwf	Error@a+1,c
  1343  003FD4  0E03               	movlw	3
  1344  003FD6  6E01               	movwf	Error@a,c
  1345  003FD8  EC97  F029         	call	_Error	;wreg free
  1346                           
  1347                           ;Main.c: 36:         __delay_sec(2);
  1348  003FDC  0E02               	movlw	2
  1349  003FDE  EC42  F02A         	call	___delay_sec
  1350                           
  1351                           ;Main.c: 37:          Error(0);
  1352  003FE2  0E00               	movlw	0
  1353  003FE4  6E02               	movwf	Error@a+1,c
  1354  003FE6  0E00               	movlw	0
  1355  003FE8  6E01               	movwf	Error@a,c
  1356  003FEA  EC97  F029         	call	_Error	;wreg free
  1357                           
  1358                           ;Main.c: 39:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1359  003FEE  0100               	movlb	0	; () banked
  1360  003FF0  51E4               	movf	(_Fil+10)& (0+255),w,b
  1361  003FF2  11E5               	iorwf	(_Fil+11)& (0+255),w,b
  1362  003FF4  11E6               	iorwf	(_Fil+12)& (0+255),w,b
  1363  003FF6  11E7               	iorwf	(_Fil+13)& (0+255),w,b
  1364  003FF8  B4D8               	btfsc	status,2,c
  1365  003FFA  D011               	goto	l6199
  1366                           
  1367                           ; BSR set to: 0
  1368  003FFC  0EDA               	movlw	low _Fil
  1369  003FFE  6F6D               	movwf	f_lseek@fp& (0+255),b
  1370  004000  0E00               	movlw	high _Fil
  1371  004002  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1372  004004  C0E4  F06F         	movff	_Fil+10,f_lseek@ofs
  1373  004008  C0E5  F070         	movff	_Fil+11,f_lseek@ofs+1
  1374  00400C  C0E6  F071         	movff	_Fil+12,f_lseek@ofs+2
  1375  004010  C0E7  F072         	movff	_Fil+13,f_lseek@ofs+3
  1376  004014  ECA1  F00C         	call	_f_lseek	;wreg free
  1377  004018  0900               	iorlw	0
  1378  00401A  A4D8               	btfss	status,2,c
  1379  00401C  D031               	goto	l6213
  1380  00401E                     l6199:
  1381                           
  1382                           ;Main.c: 40:                 Error(4);
  1383  00401E  0E00               	movlw	0
  1384  004020  6E02               	movwf	Error@a+1,c
  1385  004022  0E04               	movlw	4
  1386  004024  6E01               	movwf	Error@a,c
  1387  004026  EC97  F029         	call	_Error	;wreg free
  1388                           
  1389                           ;Main.c: 41:                 __delay_sec(2);
  1390  00402A  0E02               	movlw	2
  1391  00402C  EC42  F02A         	call	___delay_sec
  1392                           
  1393                           ;Main.c: 43:                 Error(0);
  1394  004030  0E00               	movlw	0
  1395  004032  6E02               	movwf	Error@a+1,c
  1396  004034  0E00               	movlw	0
  1397  004036  6E01               	movwf	Error@a,c
  1398  004038  EC97  F029         	call	_Error	;wreg free
  1399                           
  1400                           ;Main.c: 44:                 f_write(&Fil, data , 28 , &bw);
  1401  00403C  0EDA               	movlw	low _Fil
  1402  00403E  0100               	movlb	0	; () banked
  1403  004040  6F6D               	movwf	f_write@fp& (0+255),b
  1404  004042  0E00               	movlw	high _Fil
  1405  004044  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1406  004046  C0D0  F06F         	movff	guardar@data,f_write@buff
  1407  00404A  C0D1  F070         	movff	guardar@data+1,f_write@buff+1
  1408  00404E  0E00               	movlw	0
  1409  004050  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1410  004052  0E1C               	movlw	28
  1411  004054  6F71               	movwf	f_write@btw& (0+255),b
  1412  004056  0ED2               	movlw	low guardar@bw
  1413  004058  6F73               	movwf	f_write@bw& (0+255),b
  1414  00405A  0E00               	movlw	high guardar@bw
  1415  00405C  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1416  00405E  ECEF  F008         	call	_f_write	;wreg free
  1417                           
  1418                           ;Main.c: 46:                 Error(5);
  1419  004062  0E00               	movlw	0
  1420  004064  6E02               	movwf	Error@a+1,c
  1421  004066  0E05               	movlw	5
  1422  004068  6E01               	movwf	Error@a,c
  1423  00406A  EC97  F029         	call	_Error	;wreg free
  1424                           
  1425                           ;Main.c: 47:                 __delay_sec(2);
  1426  00406E  0E02               	movlw	2
  1427  004070  EC42  F02A         	call	___delay_sec
  1428                           
  1429                           ;Main.c: 48:                  Error(0);
  1430  004074  0E00               	movlw	0
  1431  004076  6E02               	movwf	Error@a+1,c
  1432  004078  0E00               	movlw	0
  1433  00407A  6E01               	movwf	Error@a,c
  1434  00407C  EC97  F029         	call	_Error	;wreg free
  1435  004080                     l6213:
  1436  004080  0EDA               	movlw	low _Fil
  1437  004082  6E4E               	movwf	f_close@fp,c
  1438  004084  0E00               	movlw	high _Fil
  1439  004086  6E4F               	movwf	f_close@fp+1,c
  1440  004088  EC25  F02A         	call	_f_close	;wreg free
  1441                           
  1442                           ;Main.c: 50:                 Error(6);
  1443  00408C  0E00               	movlw	0
  1444  00408E  6E02               	movwf	Error@a+1,c
  1445  004090  0E06               	movlw	6
  1446  004092  6E01               	movwf	Error@a,c
  1447  004094  EC97  F029         	call	_Error	;wreg free
  1448                           
  1449                           ;Main.c: 51:                 __delay_sec(1);
  1450  004098  0E01               	movlw	1
  1451  00409A  EC42  F02A         	call	___delay_sec
  1452                           
  1453                           ;Main.c: 53:                 Error(7);
  1454  00409E  0E00               	movlw	0
  1455  0040A0  6E02               	movwf	Error@a+1,c
  1456  0040A2  0E07               	movlw	7
  1457  0040A4  6E01               	movwf	Error@a,c
  1458  0040A6  EC97  F029         	call	_Error	;wreg free
  1459                           
  1460                           ;Main.c: 54:                 __delay_sec(2);
  1461  0040AA  0E02               	movlw	2
  1462  0040AC  EC42  F02A         	call	___delay_sec
  1463                           
  1464                           ;Main.c: 55:                  Error(0);
  1465  0040B0  0E00               	movlw	0
  1466  0040B2  6E02               	movwf	Error@a+1,c
  1467  0040B4  0E00               	movlw	0
  1468  0040B6  6E01               	movwf	Error@a,c
  1469  0040B8  EC97  F029         	call	_Error	;wreg free
  1470                           
  1471                           ;Main.c: 57:  }
  1472  0040BC  0012               	return	
  1473  0040BE                     l6225:
  1474                           
  1475                           ;Main.c: 59:         Error(9);
  1476  0040BE  0E00               	movlw	0
  1477  0040C0  6E02               	movwf	Error@a+1,c
  1478  0040C2  0E09               	movlw	9
  1479  0040C4  6E01               	movwf	Error@a,c
  1480  0040C6  EC97  F029         	call	_Error	;wreg free
  1481  0040CA  0012               	return		;funcret
  1482  0040CC                     __end_of_guardar:
  1483                           	opt callstack 0
  1484                           
  1485 ;; *************** function _f_write *****************
  1486 ;; Defined at:
  1487 ;;		line 2691 in file "ff.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  fp              2   13[BANK0 ] PTR struct .
  1490 ;;		 -> Fil(32), 
  1491 ;;  buff            2   15[BANK0 ] PTR const void 
  1492 ;;		 -> STR_4(20), 
  1493 ;;  btw             2   17[BANK0 ] unsigned short 
  1494 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1495 ;;		 -> guardar@bw(2), 
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;  clst            4   43[BANK0 ] unsigned long 
  1498 ;;  sect            4   39[BANK0 ] unsigned long 
  1499 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1500 ;;  cc              2   37[BANK0 ] unsigned short 
  1501 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1502 ;;		 -> STR_4(20), 
  1503 ;;  csect           1   36[BANK0 ] unsigned char 
  1504 ;;  res             1   33[BANK0 ] enum E93
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  1    wreg      enum E4918
  1507 ;; Registers used:
  1508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1514 ;;      Params:         0       8       0       0       0       0       0       0       0
  1515 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1516 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1517 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1518 ;;Total ram usage:       36 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; Hardware stack levels required when called:   10
  1521 ;; This function calls:
  1522 ;;		_clust2sect
  1523 ;;		_create_chain
  1524 ;;		_disk_write
  1525 ;;		_mem_cpy
  1526 ;;		_move_window
  1527 ;;		_sync_window
  1528 ;;		_validate
  1529 ;; This function is called by:
  1530 ;;		_guardar
  1531 ;; This function uses a non-reentrant model
  1532 ;;
  1533                           
  1534                           	psect	text2
  1535  0011DE                     __ptext2:
  1536                           	opt callstack 0
  1537  0011DE                     _f_write:
  1538                           	opt callstack 19
  1539                           
  1540                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1541                           
  1542                           ;incstack = 0
  1543  0011DE  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1544  0011E2  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1545                           
  1546                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1547  0011E6  C073  FFD9         	movff	f_write@bw,fsr2l
  1548  0011EA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1549  0011EE  0E00               	movlw	0
  1550  0011F0  6EDE               	movwf	postinc2,c
  1551  0011F2  0E00               	movlw	0
  1552  0011F4  6EDD               	movwf	postdec2,c
  1553                           
  1554                           ;ff.c: 2707:  res = validate(fp);
  1555  0011F6  C06D  F002         	movff	f_write@fp,validate@obj
  1556  0011FA  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1557  0011FE  EC8C  F027         	call	_validate	;wreg free
  1558  001202  0100               	movlb	0	; () banked
  1559  001204  6F81               	movwf	f_write@res& (0+255),b
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1563  001206  5181               	movf	f_write@res& (0+255),w,b
  1564  001208  A4D8               	btfss	status,2,c
  1565  00120A  0012               	return	
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;ff.c: 2709:  if (fp->err)
  1569  00120C  EE20 F005          	lfsr	2,5
  1570  001210  516D               	movf	f_write@fp& (0+255),w,b
  1571  001212  26D9               	addwf	fsr2l,f,c
  1572  001214  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1573  001216  22DA               	addwfc	fsr2h,f,c
  1574  001218  50DF               	movf	indf2,w,c
  1575  00121A  A4D8               	btfss	status,2,c
  1576  00121C  0012               	return	
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1580  00121E  EE20 F004          	lfsr	2,4
  1581  001222  516D               	movf	f_write@fp& (0+255),w,b
  1582  001224  26D9               	addwf	fsr2l,f,c
  1583  001226  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1584  001228  22DA               	addwfc	fsr2h,f,c
  1585  00122A  A2DF               	btfss	indf2,1,c
  1586  00122C  0012               	return	
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1590  00122E  EE20 F006          	lfsr	2,6
  1591  001232  516D               	movf	f_write@fp& (0+255),w,b
  1592  001234  26D9               	addwf	fsr2l,f,c
  1593  001236  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1594  001238  22DA               	addwfc	fsr2h,f,c
  1595  00123A  EE10 F006          	lfsr	1,6
  1596  00123E  516D               	movf	f_write@fp& (0+255),w,b
  1597  001240  26E1               	addwf	fsr1l,f,c
  1598  001242  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1599  001244  22E2               	addwfc	fsr1h,f,c
  1600  001246  CFE6 F079          	movff	postinc1,??_f_write+4
  1601  00124A  CFE6 F07A          	movff	postinc1,??_f_write+5
  1602  00124E  CFE6 F07B          	movff	postinc1,??_f_write+6
  1603  001252  CFE6 F07C          	movff	postinc1,??_f_write+7
  1604  001256  5171               	movf	f_write@btw& (0+255),w,b
  1605  001258  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1606  00125A  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1607  00125C  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1608  00125E  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1609  001260  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1610  001262  0E00               	movlw	0
  1611  001264  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1612  001266  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1613  001268  0E00               	movlw	0
  1614  00126A  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1615  00126C  6F80               	movwf	(??_f_write+11)& (0+255),b
  1616  00126E  50DE               	movf	postinc2,w,c
  1617  001270  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1618  001272  50DE               	movf	postinc2,w,c
  1619  001274  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1620  001276  50DE               	movf	postinc2,w,c
  1621  001278  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1622  00127A  50DE               	movf	postinc2,w,c
  1623  00127C  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1624  00127E  B0D8               	btfsc	status,0,c
  1625  001280  D329               	goto	l6147
  1626                           
  1627                           ; BSR set to: 0
  1628  001282  0E00               	movlw	0
  1629  001284  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1630  001286  0E00               	movlw	0
  1631  001288  6F71               	movwf	f_write@btw& (0+255),b
  1632  00128A  D324               	goto	l6147
  1633  00128C                     l6039:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1637  00128C  EE20 F006          	lfsr	2,6
  1638  001290  516D               	movf	f_write@fp& (0+255),w,b
  1639  001292  26D9               	addwf	fsr2l,f,c
  1640  001294  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1641  001296  22DA               	addwfc	fsr2h,f,c
  1642  001298  0EFF               	movlw	255
  1643  00129A  14DE               	andwf	postinc2,w,c
  1644  00129C  6F75               	movwf	??_f_write& (0+255),b
  1645  00129E  0E01               	movlw	1
  1646  0012A0  14DE               	andwf	postinc2,w,c
  1647  0012A2  6F76               	movwf	(??_f_write+1)& (0+255),b
  1648  0012A4  0E00               	movlw	0
  1649  0012A6  14DE               	andwf	postinc2,w,c
  1650  0012A8  6F77               	movwf	(??_f_write+2)& (0+255),b
  1651  0012AA  0E00               	movlw	0
  1652  0012AC  14DE               	andwf	postinc2,w,c
  1653  0012AE  6F78               	movwf	(??_f_write+3)& (0+255),b
  1654  0012B0  5175               	movf	??_f_write& (0+255),w,b
  1655  0012B2  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1656  0012B4  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1657  0012B6  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1658  0012B8  A4D8               	btfss	status,2,c
  1659  0012BA  D26A               	goto	l6123
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1663  0012BC  EE20 F006          	lfsr	2,6
  1664  0012C0  516D               	movf	f_write@fp& (0+255),w,b
  1665  0012C2  26D9               	addwf	fsr2l,f,c
  1666  0012C4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1667  0012C6  22DA               	addwfc	fsr2h,f,c
  1668  0012C8  CFDE F075          	movff	postinc2,??_f_write
  1669  0012CC  CFDE F076          	movff	postinc2,??_f_write+1
  1670  0012D0  CFDE F077          	movff	postinc2,??_f_write+2
  1671  0012D4  CFDE F078          	movff	postinc2,??_f_write+3
  1672  0012D8  0E0A               	movlw	10
  1673  0012DA  D005               	goto	u8260
  1674  0012DC                     u8265:
  1675  0012DC  90D8               	bcf	status,0,c
  1676  0012DE  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1677  0012E0  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1678  0012E2  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1679  0012E4  3375               	rrcf	??_f_write& (0+255),f,b
  1680  0012E6                     u8260:
  1681  0012E6  2EE8               	decfsz	wreg,f,c
  1682  0012E8  D7F9               	goto	u8265
  1683  0012EA  C06D  FFD9         	movff	f_write@fp,fsr2l
  1684  0012EE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1685  0012F2  EE10 F002          	lfsr	1,2
  1686  0012F6  50DE               	movf	postinc2,w,c
  1687  0012F8  26E1               	addwf	fsr1l,f,c
  1688  0012FA  50DD               	movf	postdec2,w,c
  1689  0012FC  22E2               	addwfc	fsr1h,f,c
  1690  0012FE  50E7               	movf	indf1,w,c
  1691  001300  6F79               	movwf	(??_f_write+4)& (0+255),b
  1692  001302  0579               	decf	(??_f_write+4)& (0+255),w,b
  1693  001304  1575               	andwf	??_f_write& (0+255),w,b
  1694  001306  6F84               	movwf	f_write@csect& (0+255),b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;ff.c: 2719:    if (!csect) {
  1698  001308  5184               	movf	f_write@csect& (0+255),w,b
  1699  00130A  A4D8               	btfss	status,2,c
  1700  00130C  D0A3               	goto	l6075
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1704  00130E  EE20 F006          	lfsr	2,6
  1705  001312  516D               	movf	f_write@fp& (0+255),w,b
  1706  001314  26D9               	addwf	fsr2l,f,c
  1707  001316  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1708  001318  22DA               	addwfc	fsr2h,f,c
  1709  00131A  50DE               	movf	postinc2,w,c
  1710  00131C  10DE               	iorwf	postinc2,w,c
  1711  00131E  10DE               	iorwf	postinc2,w,c
  1712  001320  10DE               	iorwf	postinc2,w,c
  1713  001322  A4D8               	btfss	status,2,c
  1714  001324  D027               	goto	l6053
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;ff.c: 2721:      clst = fp->sclust;
  1718  001326  EE20 F00E          	lfsr	2,14
  1719  00132A  516D               	movf	f_write@fp& (0+255),w,b
  1720  00132C  26D9               	addwf	fsr2l,f,c
  1721  00132E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1722  001330  22DA               	addwfc	fsr2h,f,c
  1723  001332  CFDE F08B          	movff	postinc2,f_write@clst
  1724  001336  CFDE F08C          	movff	postinc2,f_write@clst+1
  1725  00133A  CFDE F08D          	movff	postinc2,f_write@clst+2
  1726  00133E  CFDE F08E          	movff	postinc2,f_write@clst+3
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;ff.c: 2722:      if (clst == 0)
  1730  001342  518B               	movf	f_write@clst& (0+255),w,b
  1731  001344  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1732  001346  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1733  001348  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1734  00134A  A4D8               	btfss	status,2,c
  1735  00134C  D033               	goto	l6055
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1739  00134E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1740  001352  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1741  001356  CFDE F056          	movff	postinc2,create_chain@fs
  1742  00135A  CFDD F057          	movff	postdec2,create_chain@fs+1
  1743  00135E  0E00               	movlw	0
  1744  001360  6E58               	movwf	create_chain@clst,c
  1745  001362  0E00               	movlw	0
  1746  001364  6E59               	movwf	create_chain@clst+1,c
  1747  001366  0E00               	movlw	0
  1748  001368  6E5A               	movwf	create_chain@clst+2,c
  1749  00136A  0E00               	movlw	0
  1750  00136C  6E5B               	movwf	create_chain@clst+3,c
  1751  00136E  ECAB  F019         	call	_create_chain	;wreg free
  1752  001372  D018               	goto	L1
  1753  001374                     l6053:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1757  001374  C06D  FFD9         	movff	f_write@fp,fsr2l
  1758  001378  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1759  00137C  CFDE F056          	movff	postinc2,create_chain@fs
  1760  001380  CFDD F057          	movff	postdec2,create_chain@fs+1
  1761  001384  EE20 F012          	lfsr	2,18
  1762  001388  516D               	movf	f_write@fp& (0+255),w,b
  1763  00138A  26D9               	addwf	fsr2l,f,c
  1764  00138C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1765  00138E  22DA               	addwfc	fsr2h,f,c
  1766  001390  CFDE F058          	movff	postinc2,create_chain@clst
  1767  001394  CFDE F059          	movff	postinc2,create_chain@clst+1
  1768  001398  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1769  00139C  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1770  0013A0  ECAB  F019         	call	_create_chain	;wreg free
  1771  0013A4                     L1:
  1772  0013A4  C056  F08B         	movff	?_create_chain,f_write@clst
  1773  0013A8  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1774  0013AC  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1775  0013B0  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1776  0013B4                     l6055:
  1777                           
  1778                           ;ff.c: 2732:     if (clst == 0) break;
  1779  0013B4  0100               	movlb	0	; () banked
  1780  0013B6  518B               	movf	f_write@clst& (0+255),w,b
  1781  0013B8  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1782  0013BA  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1783  0013BC  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1784  0013BE  B4D8               	btfsc	status,2,c
  1785  0013C0  D28D               	goto	u8480
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1789  0013C2  058B               	decf	f_write@clst& (0+255),w,b
  1790  0013C4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1791  0013C6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1792  0013C8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1793  0013CA  A4D8               	btfss	status,2,c
  1794  0013CC  D009               	goto	l6065
  1795                           
  1796                           ; BSR set to: 0
  1797  0013CE  EE20 F005          	lfsr	2,5
  1798  0013D2  516D               	movf	f_write@fp& (0+255),w,b
  1799  0013D4  26D9               	addwf	fsr2l,f,c
  1800  0013D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1801  0013D8  22DA               	addwfc	fsr2h,f,c
  1802  0013DA  0E02               	movlw	2
  1803  0013DC  6EDF               	movwf	indf2,c
  1804  0013DE  0012               	return	
  1805  0013E0                     l6065:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1809  0013E0  298B               	incf	f_write@clst& (0+255),w,b
  1810  0013E2  E110               	bnz	l6071
  1811  0013E4  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1812  0013E6  E10E               	bnz	l6071
  1813  0013E8  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1814  0013EA  E10C               	bnz	l6071
  1815  0013EC  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1816  0013EE  A4D8               	btfss	status,2,c
  1817  0013F0  D009               	goto	l6071
  1818                           
  1819                           ; BSR set to: 0
  1820  0013F2  EE20 F005          	lfsr	2,5
  1821  0013F6  516D               	movf	f_write@fp& (0+255),w,b
  1822  0013F8  26D9               	addwf	fsr2l,f,c
  1823  0013FA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1824  0013FC  22DA               	addwfc	fsr2h,f,c
  1825  0013FE  0E01               	movlw	1
  1826  001400  6EDF               	movwf	indf2,c
  1827  001402  0012               	return	
  1828  001404                     l6071:
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;ff.c: 2735:     fp->clust = clst;
  1832  001404  EE20 F012          	lfsr	2,18
  1833  001408  516D               	movf	f_write@fp& (0+255),w,b
  1834  00140A  26D9               	addwf	fsr2l,f,c
  1835  00140C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1836  00140E  22DA               	addwfc	fsr2h,f,c
  1837  001410  C08B  FFDE         	movff	f_write@clst,postinc2
  1838  001414  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1839  001418  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1840  00141C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1841                           
  1842                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1843  001420  EE20 F00E          	lfsr	2,14
  1844  001424  516D               	movf	f_write@fp& (0+255),w,b
  1845  001426  26D9               	addwf	fsr2l,f,c
  1846  001428  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1847  00142A  22DA               	addwfc	fsr2h,f,c
  1848  00142C  50DE               	movf	postinc2,w,c
  1849  00142E  10DE               	iorwf	postinc2,w,c
  1850  001430  10DE               	iorwf	postinc2,w,c
  1851  001432  10DE               	iorwf	postinc2,w,c
  1852  001434  A4D8               	btfss	status,2,c
  1853  001436  D00E               	goto	l6075
  1854                           
  1855                           ; BSR set to: 0
  1856  001438  EE20 F00E          	lfsr	2,14
  1857  00143C  516D               	movf	f_write@fp& (0+255),w,b
  1858  00143E  26D9               	addwf	fsr2l,f,c
  1859  001440  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1860  001442  22DA               	addwfc	fsr2h,f,c
  1861  001444  C08B  FFDE         	movff	f_write@clst,postinc2
  1862  001448  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1863  00144C  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1864  001450  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1865  001454                     l6075:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1869  001454  EE20 F016          	lfsr	2,22
  1870  001458  516D               	movf	f_write@fp& (0+255),w,b
  1871  00145A  26D9               	addwf	fsr2l,f,c
  1872  00145C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1873  00145E  22DA               	addwfc	fsr2h,f,c
  1874  001460  C06D  FFE1         	movff	f_write@fp,fsr1l
  1875  001464  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1876  001468  EE00 F02A          	lfsr	0,42
  1877  00146C  50E6               	movf	postinc1,w,c
  1878  00146E  26E9               	addwf	fsr0l,f,c
  1879  001470  50E5               	movf	postdec1,w,c
  1880  001472  22EA               	addwfc	fsr0h,f,c
  1881  001474  50DE               	movf	postinc2,w,c
  1882  001476  18EE               	xorwf	postinc0,w,c
  1883  001478  E121               	bnz	l6083
  1884  00147A  50DE               	movf	postinc2,w,c
  1885  00147C  18EE               	xorwf	postinc0,w,c
  1886  00147E  E11E               	bnz	l6083
  1887  001480  50DE               	movf	postinc2,w,c
  1888  001482  18EE               	xorwf	postinc0,w,c
  1889  001484  E11B               	bnz	l6083
  1890  001486  50DE               	movf	postinc2,w,c
  1891  001488  18EE               	xorwf	postinc0,w,c
  1892  00148A  A4D8               	btfss	status,2,c
  1893  00148C  D017               	goto	l6083
  1894                           
  1895                           ; BSR set to: 0
  1896  00148E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1897  001492  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1898  001496  CFDE F01B          	movff	postinc2,sync_window@fs
  1899  00149A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1900  00149E  EC66  F020         	call	_sync_window	;wreg free
  1901  0014A2  0900               	iorlw	0
  1902  0014A4  B4D8               	btfsc	status,2,c
  1903  0014A6  D00A               	goto	l6083
  1904                           
  1905                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1906  0014A8  0100               	movlb	0	; () banked
  1907  0014AA  EE20 F005          	lfsr	2,5
  1908  0014AE  516D               	movf	f_write@fp& (0+255),w,b
  1909  0014B0  26D9               	addwf	fsr2l,f,c
  1910  0014B2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1911  0014B4  22DA               	addwfc	fsr2h,f,c
  1912  0014B6  0E01               	movlw	1
  1913  0014B8  6EDF               	movwf	indf2,c
  1914  0014BA  0012               	return	
  1915  0014BC                     l6083:
  1916                           
  1917                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1918  0014BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1919  0014C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1920  0014C4  CFDE F00D          	movff	postinc2,clust2sect@fs
  1921  0014C8  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1922  0014CC  0100               	movlb	0	; () banked
  1923  0014CE  EE20 F012          	lfsr	2,18
  1924  0014D2  516D               	movf	f_write@fp& (0+255),w,b
  1925  0014D4  26D9               	addwf	fsr2l,f,c
  1926  0014D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1927  0014D8  22DA               	addwfc	fsr2h,f,c
  1928  0014DA  CFDE F00F          	movff	postinc2,clust2sect@clst
  1929  0014DE  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1930  0014E2  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1931  0014E6  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1932  0014EA  EC84  F026         	call	_clust2sect	;wreg free
  1933  0014EE  C00D  F087         	movff	?_clust2sect,f_write@sect
  1934  0014F2  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1935  0014F6  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1936  0014FA  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1937                           
  1938                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1939  0014FE  0100               	movlb	0	; () banked
  1940  001500  5187               	movf	f_write@sect& (0+255),w,b
  1941  001502  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1942  001504  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1943  001506  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1944  001508  A4D8               	btfss	status,2,c
  1945  00150A  D009               	goto	l6091
  1946                           
  1947                           ; BSR set to: 0
  1948  00150C  EE20 F005          	lfsr	2,5
  1949  001510  516D               	movf	f_write@fp& (0+255),w,b
  1950  001512  26D9               	addwf	fsr2l,f,c
  1951  001514  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1952  001516  22DA               	addwfc	fsr2h,f,c
  1953  001518  0E02               	movlw	2
  1954  00151A  6EDF               	movwf	indf2,c
  1955  00151C  0012               	return	
  1956  00151E                     l6091:
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;ff.c: 2750:    sect += csect;
  1960  00151E  5184               	movf	f_write@csect& (0+255),w,b
  1961  001520  2787               	addwf	f_write@sect& (0+255),f,b
  1962  001522  0E00               	movlw	0
  1963  001524  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1964  001526  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1965  001528  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1966                           
  1967                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1968  00152A  C071  F075         	movff	f_write@btw,??_f_write
  1969  00152E  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1970  001532  0E09               	movlw	9
  1971  001534  6F77               	movwf	(??_f_write+2)& (0+255),b
  1972  001536                     u8375:
  1973  001536  90D8               	bcf	status,0,c
  1974  001538  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1975  00153A  3375               	rrcf	??_f_write& (0+255),f,b
  1976  00153C  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1977  00153E  D7FB               	goto	u8375
  1978  001540  C075  F085         	movff	??_f_write,f_write@cc
  1979  001544  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1980                           
  1981                           ;ff.c: 2752:    if (cc) {
  1982  001548  5185               	movf	f_write@cc& (0+255),w,b
  1983  00154A  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1984  00154C  B4D8               	btfsc	status,2,c
  1985  00154E  D0D2               	goto	l6111
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1989  001550  5184               	movf	f_write@csect& (0+255),w,b
  1990  001552  2585               	addwf	f_write@cc& (0+255),w,b
  1991  001554  6F75               	movwf	??_f_write& (0+255),b
  1992  001556  0E00               	movlw	0
  1993  001558  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1994  00155A  6F76               	movwf	(??_f_write+1)& (0+255),b
  1995  00155C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1996  001560  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1997  001564  EE10 F002          	lfsr	1,2
  1998  001568  50DE               	movf	postinc2,w,c
  1999  00156A  26E1               	addwf	fsr1l,f,c
  2000  00156C  50DD               	movf	postdec2,w,c
  2001  00156E  22E2               	addwfc	fsr1h,f,c
  2002  001570  50E7               	movf	indf1,w,c
  2003  001572  6F77               	movwf	(??_f_write+2)& (0+255),b
  2004  001574  6B78               	clrf	(??_f_write+3)& (0+255),b
  2005  001576  5175               	movf	??_f_write& (0+255),w,b
  2006  001578  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  2007  00157A  5176               	movf	(??_f_write+1)& (0+255),w,b
  2008  00157C  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  2009  00157E  B0D8               	btfsc	status,0,c
  2010  001580  D012               	goto	l6097
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  2014  001582  C06D  FFD9         	movff	f_write@fp,fsr2l
  2015  001586  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2016  00158A  EE10 F002          	lfsr	1,2
  2017  00158E  50DE               	movf	postinc2,w,c
  2018  001590  26E1               	addwf	fsr1l,f,c
  2019  001592  50DD               	movf	postdec2,w,c
  2020  001594  22E2               	addwfc	fsr1h,f,c
  2021  001596  50E7               	movf	indf1,w,c
  2022  001598  6F75               	movwf	??_f_write& (0+255),b
  2023  00159A  5184               	movf	f_write@csect& (0+255),w,b
  2024  00159C  5D75               	subwf	??_f_write& (0+255),w,b
  2025  00159E  6F85               	movwf	f_write@cc& (0+255),b
  2026  0015A0  6B86               	clrf	(f_write@cc+1)& (0+255),b
  2027  0015A2  A0D8               	btfss	status,0,c
  2028  0015A4  0786               	decf	(f_write@cc+1)& (0+255),f,b
  2029  0015A6                     l6097:
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  2033  0015A6  C082  F011         	movff	f_write@wbuff,disk_write@buff
  2034  0015AA  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  2035  0015AE  C087  F013         	movff	f_write@sect,disk_write@sector
  2036  0015B2  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  2037  0015B6  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  2038  0015BA  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  2039  0015BE  C085  F017         	movff	f_write@cc,disk_write@count
  2040  0015C2  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  2041  0015C6  C06D  FFD9         	movff	f_write@fp,fsr2l
  2042  0015CA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2043  0015CE  EE10 F001          	lfsr	1,1
  2044  0015D2  50DE               	movf	postinc2,w,c
  2045  0015D4  26E1               	addwf	fsr1l,f,c
  2046  0015D6  50DD               	movf	postdec2,w,c
  2047  0015D8  22E2               	addwfc	fsr1h,f,c
  2048  0015DA  50E7               	movf	indf1,w,c
  2049  0015DC  ECFB  F022         	call	_disk_write
  2050  0015E0  0900               	iorlw	0
  2051  0015E2  B4D8               	btfsc	status,2,c
  2052  0015E4  D00A               	goto	l6103
  2053                           
  2054                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2055  0015E6  0100               	movlb	0	; () banked
  2056  0015E8  EE20 F005          	lfsr	2,5
  2057  0015EC  516D               	movf	f_write@fp& (0+255),w,b
  2058  0015EE  26D9               	addwf	fsr2l,f,c
  2059  0015F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2060  0015F2  22DA               	addwfc	fsr2h,f,c
  2061  0015F4  0E01               	movlw	1
  2062  0015F6  6EDF               	movwf	indf2,c
  2063  0015F8  0012               	return	
  2064  0015FA                     l6103:
  2065                           
  2066                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2067  0015FA  0100               	movlb	0	; () banked
  2068  0015FC  5185               	movf	f_write@cc& (0+255),w,b
  2069  0015FE  6F75               	movwf	??_f_write& (0+255),b
  2070  001600  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2071  001602  6F76               	movwf	(??_f_write+1)& (0+255),b
  2072  001604  6B77               	clrf	(??_f_write+2)& (0+255),b
  2073  001606  6B78               	clrf	(??_f_write+3)& (0+255),b
  2074  001608  C06D  FFD9         	movff	f_write@fp,fsr2l
  2075  00160C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2076  001610  EE10 F02A          	lfsr	1,42
  2077  001614  50DE               	movf	postinc2,w,c
  2078  001616  26E1               	addwf	fsr1l,f,c
  2079  001618  50DD               	movf	postdec2,w,c
  2080  00161A  22E2               	addwfc	fsr1h,f,c
  2081  00161C  CFE6 F079          	movff	postinc1,??_f_write+4
  2082  001620  CFE6 F07A          	movff	postinc1,??_f_write+5
  2083  001624  CFE6 F07B          	movff	postinc1,??_f_write+6
  2084  001628  CFE6 F07C          	movff	postinc1,??_f_write+7
  2085  00162C  5187               	movf	f_write@sect& (0+255),w,b
  2086  00162E  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2087  001630  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2088  001632  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2089  001634  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2090  001636  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2091  001638  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2092  00163A  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2093  00163C  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2094  00163E  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2095  001640  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2096  001642  6F80               	movwf	(??_f_write+11)& (0+255),b
  2097  001644  5175               	movf	??_f_write& (0+255),w,b
  2098  001646  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2099  001648  5176               	movf	(??_f_write+1)& (0+255),w,b
  2100  00164A  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2101  00164C  5177               	movf	(??_f_write+2)& (0+255),w,b
  2102  00164E  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2103  001650  5178               	movf	(??_f_write+3)& (0+255),w,b
  2104  001652  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2105  001654  B0D8               	btfsc	status,0,c
  2106  001656  D03E               	goto	l6109
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2110  001658  C06D  FFD9         	movff	f_write@fp,fsr2l
  2111  00165C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2112  001660  CFDE F075          	movff	postinc2,??_f_write
  2113  001664  CFDD F076          	movff	postdec2,??_f_write+1
  2114  001668  0E2E               	movlw	46
  2115  00166A  2575               	addwf	??_f_write& (0+255),w,b
  2116  00166C  6E01               	movwf	mem_cpy@dst,c
  2117  00166E  0E00               	movlw	0
  2118  001670  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2119  001672  6E02               	movwf	mem_cpy@dst+1,c
  2120  001674  C06D  FFD9         	movff	f_write@fp,fsr2l
  2121  001678  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2122  00167C  EE10 F02A          	lfsr	1,42
  2123  001680  50DE               	movf	postinc2,w,c
  2124  001682  26E1               	addwf	fsr1l,f,c
  2125  001684  50DD               	movf	postdec2,w,c
  2126  001686  22E2               	addwfc	fsr1h,f,c
  2127  001688  CFE6 F077          	movff	postinc1,??_f_write+2
  2128  00168C  CFE5 F078          	movff	postdec1,??_f_write+3
  2129  001690  5187               	movf	f_write@sect& (0+255),w,b
  2130  001692  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2131  001694  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2132  001696  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2133  001698  0E09               	movlw	9
  2134  00169A                     u8425:
  2135  00169A  90D8               	bcf	status,0,c
  2136  00169C  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2137  00169E  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2138  0016A0  2EE8               	decfsz	wreg,f,c
  2139  0016A2  D7FB               	goto	u8425
  2140  0016A4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2141  0016A6  2582               	addwf	f_write@wbuff& (0+255),w,b
  2142  0016A8  6E03               	movwf	mem_cpy@src,c
  2143  0016AA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2144  0016AC  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2145  0016AE  6E04               	movwf	mem_cpy@src+1,c
  2146  0016B0  0E02               	movlw	2
  2147  0016B2  6E06               	movwf	mem_cpy@cnt+1,c
  2148  0016B4  0E00               	movlw	0
  2149  0016B6  6E05               	movwf	mem_cpy@cnt,c
  2150  0016B8  EC27  F026         	call	_mem_cpy	;wreg free
  2151                           
  2152                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2153  0016BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  2154  0016C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2155  0016C4  EE10 F004          	lfsr	1,4
  2156  0016C8  50DE               	movf	postinc2,w,c
  2157  0016CA  26E1               	addwf	fsr1l,f,c
  2158  0016CC  50DD               	movf	postdec2,w,c
  2159  0016CE  22E2               	addwfc	fsr1h,f,c
  2160  0016D0  0E00               	movlw	0
  2161  0016D2  6EE7               	movwf	indf1,c
  2162  0016D4                     l6109:
  2163                           
  2164                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2165  0016D4  C085  F075         	movff	f_write@cc,??_f_write
  2166  0016D8  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2167  0016DC  0E09               	movlw	9
  2168  0016DE                     u8435:
  2169  0016DE  90D8               	bcf	status,0,c
  2170  0016E0  0100               	movlb	0	; () banked
  2171  0016E2  3775               	rlcf	??_f_write& (0+255),f,b
  2172  0016E4  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2173  0016E6  2EE8               	decfsz	wreg,f,c
  2174  0016E8  D7FA               	goto	u8435
  2175  0016EA  C075  F08F         	movff	??_f_write,f_write@wcnt
  2176  0016EE  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2177                           
  2178                           ;ff.c: 2771:     continue;
  2179  0016F2  D0D2               	goto	l6139
  2180  0016F4                     l6111:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2184  0016F4  EE20 F00A          	lfsr	2,10
  2185  0016F8  516D               	movf	f_write@fp& (0+255),w,b
  2186  0016FA  26D9               	addwf	fsr2l,f,c
  2187  0016FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2188  0016FE  22DA               	addwfc	fsr2h,f,c
  2189  001700  EE10 F006          	lfsr	1,6
  2190  001704  516D               	movf	f_write@fp& (0+255),w,b
  2191  001706  26E1               	addwf	fsr1l,f,c
  2192  001708  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2193  00170A  22E2               	addwfc	fsr1h,f,c
  2194  00170C  50DE               	movf	postinc2,w,c
  2195  00170E  5CE6               	subwf	postinc1,w,c
  2196  001710  50DE               	movf	postinc2,w,c
  2197  001712  58E6               	subwfb	postinc1,w,c
  2198  001714  50DE               	movf	postinc2,w,c
  2199  001716  58E6               	subwfb	postinc1,w,c
  2200  001718  50DE               	movf	postinc2,w,c
  2201  00171A  58E6               	subwfb	postinc1,w,c
  2202  00171C  A0D8               	btfss	status,0,c
  2203  00171E  D029               	goto	l6121
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2207  001720  C06D  FFD9         	movff	f_write@fp,fsr2l
  2208  001724  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2209  001728  CFDE F01B          	movff	postinc2,sync_window@fs
  2210  00172C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2211  001730  EC66  F020         	call	_sync_window	;wreg free
  2212  001734  0900               	iorlw	0
  2213  001736  B4D8               	btfsc	status,2,c
  2214  001738  D00A               	goto	l6119
  2215  00173A  0100               	movlb	0	; () banked
  2216  00173C  EE20 F005          	lfsr	2,5
  2217  001740  516D               	movf	f_write@fp& (0+255),w,b
  2218  001742  26D9               	addwf	fsr2l,f,c
  2219  001744  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2220  001746  22DA               	addwfc	fsr2h,f,c
  2221  001748  0E01               	movlw	1
  2222  00174A  6EDF               	movwf	indf2,c
  2223  00174C  0012               	return	
  2224  00174E                     l6119:
  2225                           
  2226                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2227  00174E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2228  001752  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2229  001756  EE10 F02A          	lfsr	1,42
  2230  00175A  50DE               	movf	postinc2,w,c
  2231  00175C  26E1               	addwf	fsr1l,f,c
  2232  00175E  50DD               	movf	postdec2,w,c
  2233  001760  22E2               	addwfc	fsr1h,f,c
  2234  001762  C087  FFE6         	movff	f_write@sect,postinc1
  2235  001766  C088  FFE6         	movff	f_write@sect+1,postinc1
  2236  00176A  C089  FFE6         	movff	f_write@sect+2,postinc1
  2237  00176E  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2238  001772                     l6121:
  2239                           
  2240                           ;ff.c: 2785:    fp->dsect = sect;
  2241  001772  0100               	movlb	0	; () banked
  2242  001774  EE20 F016          	lfsr	2,22
  2243  001778  516D               	movf	f_write@fp& (0+255),w,b
  2244  00177A  26D9               	addwf	fsr2l,f,c
  2245  00177C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2246  00177E  22DA               	addwfc	fsr2h,f,c
  2247  001780  C087  FFDE         	movff	f_write@sect,postinc2
  2248  001784  C088  FFDE         	movff	f_write@sect+1,postinc2
  2249  001788  C089  FFDE         	movff	f_write@sect+2,postinc2
  2250  00178C  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2251  001790                     l6123:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2255  001790  0EFF               	movlw	255
  2256  001792  6F75               	movwf	??_f_write& (0+255),b
  2257  001794  0E01               	movlw	1
  2258  001796  6F76               	movwf	(??_f_write+1)& (0+255),b
  2259  001798  EE20 F006          	lfsr	2,6
  2260  00179C  516D               	movf	f_write@fp& (0+255),w,b
  2261  00179E  26D9               	addwf	fsr2l,f,c
  2262  0017A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2263  0017A2  22DA               	addwfc	fsr2h,f,c
  2264  0017A4  CFDE F077          	movff	postinc2,??_f_write+2
  2265  0017A8  CFDD F078          	movff	postdec2,??_f_write+3
  2266  0017AC  5175               	movf	??_f_write& (0+255),w,b
  2267  0017AE  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2268  0017B0  5176               	movf	(??_f_write+1)& (0+255),w,b
  2269  0017B2  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2270  0017B4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2271  0017B6  0800               	sublw	0
  2272  0017B8  6F8F               	movwf	f_write@wcnt& (0+255),b
  2273  0017BA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2274  0017BC  A0D8               	btfss	status,0,c
  2275  0017BE  2AE8               	incf	wreg,f,c
  2276  0017C0  0802               	sublw	2
  2277  0017C2  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2281  0017C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2282  0017C6  5D71               	subwf	f_write@btw& (0+255),w,b
  2283  0017C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2284  0017CA  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2285  0017CC  B0D8               	btfsc	status,0,c
  2286  0017CE  D004               	goto	l6129
  2287                           
  2288                           ; BSR set to: 0
  2289  0017D0  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2290  0017D4  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2291  0017D8                     l6129:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2295  0017D8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2296  0017DC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2297  0017E0  CFDE F030          	movff	postinc2,move_window@fs
  2298  0017E4  CFDD F031          	movff	postdec2,move_window@fs+1
  2299  0017E8  EE20 F016          	lfsr	2,22
  2300  0017EC  516D               	movf	f_write@fp& (0+255),w,b
  2301  0017EE  26D9               	addwf	fsr2l,f,c
  2302  0017F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2303  0017F2  22DA               	addwfc	fsr2h,f,c
  2304  0017F4  CFDE F032          	movff	postinc2,move_window@sector
  2305  0017F8  CFDE F033          	movff	postinc2,move_window@sector+1
  2306  0017FC  CFDE F034          	movff	postinc2,move_window@sector+2
  2307  001800  CFDE F035          	movff	postinc2,move_window@sector+3
  2308  001804  EC39  F027         	call	_move_window	;wreg free
  2309  001808  0900               	iorlw	0
  2310  00180A  B4D8               	btfsc	status,2,c
  2311  00180C  D00A               	goto	l6135
  2312                           
  2313                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2314  00180E  0100               	movlb	0	; () banked
  2315  001810  EE20 F005          	lfsr	2,5
  2316  001814  516D               	movf	f_write@fp& (0+255),w,b
  2317  001816  26D9               	addwf	fsr2l,f,c
  2318  001818  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2319  00181A  22DA               	addwfc	fsr2h,f,c
  2320  00181C  0E01               	movlw	1
  2321  00181E  6EDF               	movwf	indf2,c
  2322  001820  0012               	return	
  2323  001822                     l6135:
  2324                           
  2325                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2326  001822  0EFF               	movlw	255
  2327  001824  0100               	movlb	0	; () banked
  2328  001826  6F75               	movwf	??_f_write& (0+255),b
  2329  001828  0E01               	movlw	1
  2330  00182A  6F76               	movwf	(??_f_write+1)& (0+255),b
  2331  00182C  EE20 F006          	lfsr	2,6
  2332  001830  516D               	movf	f_write@fp& (0+255),w,b
  2333  001832  26D9               	addwf	fsr2l,f,c
  2334  001834  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2335  001836  22DA               	addwfc	fsr2h,f,c
  2336  001838  CFDE F077          	movff	postinc2,??_f_write+2
  2337  00183C  CFDD F078          	movff	postdec2,??_f_write+3
  2338  001840  5175               	movf	??_f_write& (0+255),w,b
  2339  001842  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2340  001844  5176               	movf	(??_f_write+1)& (0+255),w,b
  2341  001846  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2342  001848  C06D  FFD9         	movff	f_write@fp,fsr2l
  2343  00184C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2344  001850  CFDE F079          	movff	postinc2,??_f_write+4
  2345  001854  CFDD F07A          	movff	postdec2,??_f_write+5
  2346  001858  5177               	movf	(??_f_write+2)& (0+255),w,b
  2347  00185A  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2348  00185C  5178               	movf	(??_f_write+3)& (0+255),w,b
  2349  00185E  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2350  001860  0E2E               	movlw	46
  2351  001862  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2352  001864  6E01               	movwf	mem_cpy@dst,c
  2353  001866  0E00               	movlw	0
  2354  001868  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2355  00186A  6E02               	movwf	mem_cpy@dst+1,c
  2356  00186C  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2357  001870  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2358  001874  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2359  001878  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2360  00187C  EC27  F026         	call	_mem_cpy	;wreg free
  2361                           
  2362                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2363  001880  C06D  FFD9         	movff	f_write@fp,fsr2l
  2364  001884  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2365  001888  EE10 F004          	lfsr	1,4
  2366  00188C  50DE               	movf	postinc2,w,c
  2367  00188E  26E1               	addwf	fsr1l,f,c
  2368  001890  50DD               	movf	postdec2,w,c
  2369  001892  22E2               	addwfc	fsr1h,f,c
  2370  001894  0E01               	movlw	1
  2371  001896  6EE7               	movwf	indf1,c
  2372  001898                     l6139:
  2373  001898  0100               	movlb	0	; () banked
  2374  00189A  518F               	movf	f_write@wcnt& (0+255),w,b
  2375  00189C  2782               	addwf	f_write@wbuff& (0+255),f,b
  2376  00189E  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2377  0018A0  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2378                           
  2379                           ; BSR set to: 0
  2380  0018A2  EE20 F006          	lfsr	2,6
  2381  0018A6  516D               	movf	f_write@fp& (0+255),w,b
  2382  0018A8  26D9               	addwf	fsr2l,f,c
  2383  0018AA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2384  0018AC  22DA               	addwfc	fsr2h,f,c
  2385  0018AE  518F               	movf	f_write@wcnt& (0+255),w,b
  2386  0018B0  26DE               	addwf	postinc2,f,c
  2387  0018B2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2388  0018B4  22DE               	addwfc	postinc2,f,c
  2389  0018B6  0E00               	movlw	0
  2390  0018B8  22DE               	addwfc	postinc2,f,c
  2391  0018BA  22DE               	addwfc	postinc2,f,c
  2392                           
  2393                           ; BSR set to: 0
  2394  0018BC  C073  FFD9         	movff	f_write@bw,fsr2l
  2395  0018C0  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2396  0018C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2397  0018C6  26DE               	addwf	postinc2,f,c
  2398  0018C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2399  0018CA  22DD               	addwfc	postdec2,f,c
  2400                           
  2401                           ; BSR set to: 0
  2402  0018CC  518F               	movf	f_write@wcnt& (0+255),w,b
  2403  0018CE  5F71               	subwf	f_write@btw& (0+255),f,b
  2404  0018D0  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2405  0018D2  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2406  0018D4                     l6147:
  2407                           
  2408                           ; BSR set to: 0
  2409  0018D4  5171               	movf	f_write@btw& (0+255),w,b
  2410  0018D6  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2411  0018D8  A4D8               	btfss	status,2,c
  2412  0018DA  D4D8               	goto	l6039
  2413  0018DC                     u8480:
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2417  0018DC  EE20 F006          	lfsr	2,6
  2418  0018E0  516D               	movf	f_write@fp& (0+255),w,b
  2419  0018E2  26D9               	addwf	fsr2l,f,c
  2420  0018E4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2421  0018E6  22DA               	addwfc	fsr2h,f,c
  2422  0018E8  EE10 F00A          	lfsr	1,10
  2423  0018EC  516D               	movf	f_write@fp& (0+255),w,b
  2424  0018EE  26E1               	addwf	fsr1l,f,c
  2425  0018F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2426  0018F2  22E2               	addwfc	fsr1h,f,c
  2427  0018F4  50DE               	movf	postinc2,w,c
  2428  0018F6  5CE6               	subwf	postinc1,w,c
  2429  0018F8  50DE               	movf	postinc2,w,c
  2430  0018FA  58E6               	subwfb	postinc1,w,c
  2431  0018FC  50DE               	movf	postinc2,w,c
  2432  0018FE  58E6               	subwfb	postinc1,w,c
  2433  001900  50DE               	movf	postinc2,w,c
  2434  001902  58E6               	subwfb	postinc1,w,c
  2435  001904  B0D8               	btfsc	status,0,c
  2436  001906  D014               	goto	l6153
  2437                           
  2438                           ; BSR set to: 0
  2439  001908  EE20 F006          	lfsr	2,6
  2440  00190C  516D               	movf	f_write@fp& (0+255),w,b
  2441  00190E  26D9               	addwf	fsr2l,f,c
  2442  001910  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2443  001912  22DA               	addwfc	fsr2h,f,c
  2444  001914  EE10 F00A          	lfsr	1,10
  2445  001918  516D               	movf	f_write@fp& (0+255),w,b
  2446  00191A  26E1               	addwf	fsr1l,f,c
  2447  00191C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2448  00191E  22E2               	addwfc	fsr1h,f,c
  2449  001920  CFDE FFE6          	movff	postinc2,postinc1
  2450  001924  CFDE FFE6          	movff	postinc2,postinc1
  2451  001928  CFDE FFE6          	movff	postinc2,postinc1
  2452  00192C  CFDE FFE6          	movff	postinc2,postinc1
  2453  001930                     l6153:
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;ff.c: 2801:  fp->flag |= 0x20;
  2457  001930  EE20 F004          	lfsr	2,4
  2458  001934  516D               	movf	f_write@fp& (0+255),w,b
  2459  001936  26D9               	addwf	fsr2l,f,c
  2460  001938  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2461  00193A  22DA               	addwfc	fsr2h,f,c
  2462  00193C  0E00               	movlw	0
  2463  00193E  8ADB               	bsf	plusw2,5,c
  2464                           
  2465                           ; BSR set to: 0
  2466  001940  0012               	return		;funcret
  2467  001942                     __end_of_f_write:
  2468                           	opt callstack 0
  2469                           
  2470 ;; *************** function _f_open *****************
  2471 ;; Defined at:
  2472 ;;		line 2449 in file "ff.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  fp              2   58[BANK0 ] PTR struct .
  2475 ;;		 -> Fil(32), 
  2476 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2477 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  2478 ;;  mode            1   62[BANK0 ] unsigned char 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;  dj             22   90[BANK0 ] struct .
  2481 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2482 ;;  dw              4   83[BANK0 ] unsigned long 
  2483 ;;  cl              4   79[BANK0 ] unsigned long 
  2484 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2485 ;;		 -> NULL(0), FatFs(558), 
  2486 ;;  res             1   87[BANK0 ] enum E93
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      enum E4918
  2489 ;; Registers used:
  2490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2496 ;;      Params:         0       5       0       0       0       0       0       0       0
  2497 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2498 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2499 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2500 ;;Total ram usage:       54 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:   13
  2503 ;; This function calls:
  2504 ;;		_dir_register
  2505 ;;		_find_volume
  2506 ;;		_follow_path
  2507 ;;		_ld_clust
  2508 ;;		_move_window
  2509 ;;		_remove_chain
  2510 ;;		_st_clust
  2511 ;; This function is called by:
  2512 ;;		_guardar
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text3
  2517  002FC0                     __ptext3:
  2518                           	opt callstack 0
  2519  002FC0                     _f_open:
  2520                           	opt callstack 16
  2521                           
  2522                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;incstack = 0
  2526  002FC0  0100               	movlb	0	; () banked
  2527  002FC2  519A               	movf	f_open@fp& (0+255),w,b
  2528  002FC4  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2529  002FC6  A4D8               	btfss	status,2,c
  2530  002FC8  D002               	goto	l5785
  2531                           
  2532                           ; BSR set to: 0
  2533  002FCA  0E09               	movlw	9
  2534  002FCC  0012               	return	
  2535  002FCE                     l5785:
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;ff.c: 2465:  fp->fs = 0;
  2539  002FCE  C09A  FFD9         	movff	f_open@fp,fsr2l
  2540  002FD2  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2541  002FD6  0E00               	movlw	0
  2542  002FD8  6EDE               	movwf	postinc2,c
  2543  002FDA  0E00               	movlw	0
  2544  002FDC  6EDD               	movwf	postdec2,c
  2545                           
  2546                           ; BSR set to: 0
  2547                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2548  002FDE  C0D6  F0BA         	movff	ff@FatFs,f_open@dj
  2549  002FE2  C0D7  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2553  002FE6  0E1F               	movlw	31
  2554  002FE8  179E               	andwf	f_open@mode& (0+255),f,b
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2558  002FEA  0EBA               	movlw	low f_open@dj
  2559  002FEC  6E45               	movwf	find_volume@rfs,c
  2560  002FEE  0E00               	movlw	high f_open@dj
  2561  002FF0  6E46               	movwf	find_volume@rfs+1,c
  2562  002FF2  0E9C               	movlw	low f_open@path
  2563  002FF4  6E47               	movwf	find_volume@path,c
  2564  002FF6  0E00               	movlw	high f_open@path
  2565  002FF8  6E48               	movwf	find_volume@path+1,c
  2566  002FFA  519E               	movf	f_open@mode& (0+255),w,b
  2567  002FFC  0BFE               	andlw	254
  2568  002FFE  6E49               	movwf	find_volume@wmode,c
  2569  003000  EC18  F004         	call	_find_volume	;wreg free
  2570  003004  0100               	movlb	0	; () banked
  2571  003006  6FB7               	movwf	f_open@res& (0+255),b
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;ff.c: 2479:  if (res == FR_OK) {
  2575  003008  51B7               	movf	f_open@res& (0+255),w,b
  2576  00300A  A4D8               	btfss	status,2,c
  2577  00300C  D1A2               	goto	l5889
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;ff.c: 2480:   (dj).fn = sfn;
  2581  00300E  0EA3               	movlw	low f_open@sfn
  2582  003010  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2583  003012  0E00               	movlw	high f_open@sfn
  2584  003014  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2588  003016  0EBA               	movlw	low f_open@dj
  2589  003018  6F86               	movwf	follow_path@dp& (0+255),b
  2590  00301A  0E00               	movlw	high f_open@dj
  2591  00301C  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2592  00301E  C09C  F088         	movff	f_open@path,follow_path@path
  2593  003022  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2594  003026  ECB7  F021         	call	_follow_path	;wreg free
  2595  00302A  0100               	movlb	0	; () banked
  2596  00302C  6FB7               	movwf	f_open@res& (0+255),b
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;ff.c: 2482:   dir = dj.dir;
  2600  00302E  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2601  003032  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;ff.c: 2484:   if (res == FR_OK) {
  2605  003036  51B7               	movf	f_open@res& (0+255),w,b
  2606  003038  A4D8               	btfss	status,2,c
  2607  00303A  D006               	goto	l5807
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;ff.c: 2485:    if (!dir)
  2611  00303C  51B8               	movf	f_open@dir& (0+255),w,b
  2612  00303E  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2613  003040  A4D8               	btfss	status,2,c
  2614  003042  D002               	goto	l5807
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2618  003044  0E06               	movlw	6
  2619  003046  6FB7               	movwf	f_open@res& (0+255),b
  2620  003048                     l5807:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2624  003048  C09E  F09F         	movff	f_open@mode,??_f_open
  2625  00304C  0E1C               	movlw	28
  2626  00304E  179F               	andwf	??_f_open& (0+255),f,b
  2627  003050  B4D8               	btfsc	status,2,c
  2628  003052  D0D3               	goto	l5855
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;ff.c: 2494:    if (res != FR_OK) {
  2632  003054  51B7               	movf	f_open@res& (0+255),w,b
  2633  003056  B4D8               	btfsc	status,2,c
  2634  003058  D012               	goto	l5819
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2638  00305A  0E04               	movlw	4
  2639  00305C  19B7               	xorwf	f_open@res& (0+255),w,b
  2640  00305E  A4D8               	btfss	status,2,c
  2641  003060  D008               	goto	l5815
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;ff.c: 2499:      res = dir_register(&dj);
  2645  003062  0EBA               	movlw	low f_open@dj
  2646  003064  6F8A               	movwf	dir_register@dp& (0+255),b
  2647  003066  0E00               	movlw	high f_open@dj
  2648  003068  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2649  00306A  EC56  F025         	call	_dir_register	;wreg free
  2650  00306E  0100               	movlb	0	; () banked
  2651  003070  6FB7               	movwf	f_open@res& (0+255),b
  2652  003072                     l5815:
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;ff.c: 2501:     mode |= 0x08;
  2656  003072  879E               	bsf	f_open@mode& (0+255),3,b
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;ff.c: 2502:     dir = dj.dir;
  2660  003074  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2661  003078  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2662                           
  2663                           ;ff.c: 2503:    }
  2664  00307C  D012               	goto	l645
  2665  00307E                     l5819:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2669  00307E  EE20 F00B          	lfsr	2,11
  2670  003082  51B8               	movf	f_open@dir& (0+255),w,b
  2671  003084  26D9               	addwf	fsr2l,f,c
  2672  003086  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2673  003088  22DA               	addwfc	fsr2h,f,c
  2674  00308A  50DF               	movf	indf2,w,c
  2675  00308C  6F9F               	movwf	??_f_open& (0+255),b
  2676  00308E  0E11               	movlw	17
  2677  003090  179F               	andwf	??_f_open& (0+255),f,b
  2678  003092  B4D8               	btfsc	status,2,c
  2679  003094  D002               	goto	l646
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;ff.c: 2506:      res = FR_DENIED;
  2683  003096  0E07               	movlw	7
  2684  003098  D003               	goto	L2
  2685  00309A                     l646:
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;ff.c: 2508:      if (mode & 0x04)
  2689  00309A  A59E               	btfss	f_open@mode& (0+255),2,b
  2690  00309C  D002               	goto	l645
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;ff.c: 2509:       res = FR_EXIST;
  2694  00309E  0E08               	movlw	8
  2695  0030A0                     L2:
  2696  0030A0  6FB7               	movwf	f_open@res& (0+255),b
  2697  0030A2                     l645:
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2701  0030A2  51B7               	movf	f_open@res& (0+255),w,b
  2702  0030A4  B4D8               	btfsc	status,2,c
  2703                           
  2704                           ; BSR set to: 0
  2705  0030A6  A79E               	btfss	f_open@mode& (0+255),3,b
  2706  0030A8  D0C1               	goto	l652
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2710                           
  2711                           ; BSR set to: 0
  2712  0030AA  EE20 F00E          	lfsr	2,14
  2713  0030AE  51B8               	movf	f_open@dir& (0+255),w,b
  2714  0030B0  26D9               	addwf	fsr2l,f,c
  2715  0030B2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2716  0030B4  22DA               	addwfc	fsr2h,f,c
  2717  0030B6  0E00               	movlw	0
  2718  0030B8  6EDE               	movwf	postinc2,c
  2719  0030BA  0E00               	movlw	0
  2720  0030BC  6EDE               	movwf	postinc2,c
  2721  0030BE  0E21               	movlw	33
  2722  0030C0  6EDE               	movwf	postinc2,c
  2723  0030C2  0E46               	movlw	70
  2724  0030C4  6EDD               	movwf	postdec2,c
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2728  0030C6  EE20 F016          	lfsr	2,22
  2729  0030CA  51B8               	movf	f_open@dir& (0+255),w,b
  2730  0030CC  26D9               	addwf	fsr2l,f,c
  2731  0030CE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2732  0030D0  22DA               	addwfc	fsr2h,f,c
  2733  0030D2  0E00               	movlw	0
  2734  0030D4  6EDE               	movwf	postinc2,c
  2735  0030D6  0E00               	movlw	0
  2736  0030D8  6EDE               	movwf	postinc2,c
  2737  0030DA  0E21               	movlw	33
  2738  0030DC  6EDE               	movwf	postinc2,c
  2739  0030DE  0E46               	movlw	70
  2740  0030E0  6EDD               	movwf	postdec2,c
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;ff.c: 2516:     dir[11] = 0;
  2744  0030E2  EE20 F00B          	lfsr	2,11
  2745  0030E6  51B8               	movf	f_open@dir& (0+255),w,b
  2746  0030E8  26D9               	addwf	fsr2l,f,c
  2747  0030EA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2748  0030EC  22DA               	addwfc	fsr2h,f,c
  2749  0030EE  0E00               	movlw	0
  2750  0030F0  6EDF               	movwf	indf2,c
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2754  0030F2  EE20 F01C          	lfsr	2,28
  2755  0030F6  51B8               	movf	f_open@dir& (0+255),w,b
  2756  0030F8  26D9               	addwf	fsr2l,f,c
  2757  0030FA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2758  0030FC  22DA               	addwfc	fsr2h,f,c
  2759  0030FE  6ADE               	clrf	postinc2,c
  2760  003100  6ADE               	clrf	postinc2,c
  2761  003102  6ADE               	clrf	postinc2,c
  2762  003104  6ADD               	clrf	postdec2,c
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2766  003106  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2767  00310A  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2768  00310E  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2769  003112  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2770  003116  EC58  F028         	call	_ld_clust	;wreg free
  2771  00311A  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2772  00311E  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2773  003122  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2774  003126  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2775                           
  2776                           ;ff.c: 2519:     st_clust(dir, 0);
  2777  00312A  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2778  00312E  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2779  003132  0E00               	movlw	0
  2780  003134  6E03               	movwf	st_clust@cl,c
  2781  003136  0E00               	movlw	0
  2782  003138  6E04               	movwf	st_clust@cl+1,c
  2783  00313A  0E00               	movlw	0
  2784  00313C  6E05               	movwf	st_clust@cl+2,c
  2785  00313E  0E00               	movlw	0
  2786  003140  6E06               	movwf	st_clust@cl+3,c
  2787  003142  EC74  F02A         	call	_st_clust	;wreg free
  2788                           
  2789                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2790  003146  0100               	movlb	0	; () banked
  2791  003148  EE20 F004          	lfsr	2,4
  2792  00314C  51BA               	movf	f_open@dj& (0+255),w,b
  2793  00314E  26D9               	addwf	fsr2l,f,c
  2794  003150  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2795  003152  22DA               	addwfc	fsr2h,f,c
  2796  003154  0E01               	movlw	1
  2797  003156  6EDF               	movwf	indf2,c
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;ff.c: 2521:     if (cl) {
  2801  003158  51AF               	movf	f_open@cl& (0+255),w,b
  2802  00315A  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2803  00315C  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2804  00315E  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2805  003160  B4D8               	btfsc	status,2,c
  2806  003162  D064               	goto	l652
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2810  003164  EE20 F02A          	lfsr	2,42
  2811  003168  51BA               	movf	f_open@dj& (0+255),w,b
  2812  00316A  26D9               	addwf	fsr2l,f,c
  2813  00316C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2814  00316E  22DA               	addwfc	fsr2h,f,c
  2815  003170  CFDE F0B3          	movff	postinc2,f_open@dw
  2816  003174  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2817  003178  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2818  00317C  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2822  003180  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2823  003184  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2824  003188  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2825  00318C  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2826  003190  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2827  003194  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2828  003198  EC12  F021         	call	_remove_chain	;wreg free
  2829  00319C  0100               	movlb	0	; () banked
  2830  00319E  6FB7               	movwf	f_open@res& (0+255),b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;ff.c: 2524:      if (res == FR_OK) {
  2834  0031A0  51B7               	movf	f_open@res& (0+255),w,b
  2835  0031A2  A4D8               	btfss	status,2,c
  2836  0031A4  D043               	goto	l652
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2840  0031A6  0EFF               	movlw	255
  2841  0031A8  25AF               	addwf	f_open@cl& (0+255),w,b
  2842  0031AA  6F9F               	movwf	??_f_open& (0+255),b
  2843  0031AC  0EFF               	movlw	255
  2844  0031AE  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2845  0031B0  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2846  0031B2  0EFF               	movlw	255
  2847  0031B4  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2848  0031B6  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2849  0031B8  0EFF               	movlw	255
  2850  0031BA  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2851  0031BC  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2852  0031BE  EE20 F00A          	lfsr	2,10
  2853  0031C2  51BA               	movf	f_open@dj& (0+255),w,b
  2854  0031C4  26D9               	addwf	fsr2l,f,c
  2855  0031C6  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2856  0031C8  22DA               	addwfc	fsr2h,f,c
  2857  0031CA  C09F  FFDE         	movff	??_f_open,postinc2
  2858  0031CE  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2859  0031D2  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2860  0031D6  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2864  0031DA  C0BA  F030         	movff	f_open@dj,move_window@fs
  2865  0031DE  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2866  0031E2  C0B3  F032         	movff	f_open@dw,move_window@sector
  2867  0031E6  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2868  0031EA  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2869  0031EE  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2870  0031F2  EC39  F027         	call	_move_window	;wreg free
  2871  0031F6  0100               	movlb	0	; () banked
  2872  0031F8  D018               	goto	L3
  2873  0031FA                     l5855:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;ff.c: 2532:    if (res == FR_OK) {
  2877  0031FA  51B7               	movf	f_open@res& (0+255),w,b
  2878  0031FC  A4D8               	btfss	status,2,c
  2879  0031FE  D016               	goto	l652
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2883  003200  EE20 F00B          	lfsr	2,11
  2884  003204  51B8               	movf	f_open@dir& (0+255),w,b
  2885  003206  26D9               	addwf	fsr2l,f,c
  2886  003208  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2887  00320A  22DA               	addwfc	fsr2h,f,c
  2888  00320C  A8DF               	btfss	indf2,4,c
  2889  00320E  D002               	goto	l654
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;ff.c: 2534:      res = FR_NO_FILE;
  2893  003210  0E04               	movlw	4
  2894  003212  D00B               	goto	L3
  2895  003214                     l654:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2899  003214  A39E               	btfss	f_open@mode& (0+255),1,b
  2900  003216  D00A               	goto	l652
  2901                           
  2902                           ; BSR set to: 0
  2903  003218  EE20 F00B          	lfsr	2,11
  2904  00321C  51B8               	movf	f_open@dir& (0+255),w,b
  2905  00321E  26D9               	addwf	fsr2l,f,c
  2906  003220  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2907  003222  22DA               	addwfc	fsr2h,f,c
  2908  003224  A0DF               	btfss	indf2,0,c
  2909  003226  D002               	goto	l652
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;ff.c: 2537:       res = FR_DENIED;
  2913  003228  0E07               	movlw	7
  2914  00322A                     L3:
  2915  00322A  6FB7               	movwf	f_open@res& (0+255),b
  2916  00322C                     l652:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;ff.c: 2541:   if (res == FR_OK) {
  2920  00322C  51B7               	movf	f_open@res& (0+255),w,b
  2921  00322E  A4D8               	btfss	status,2,c
  2922  003230  D020               	goto	l5873
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;ff.c: 2542:    if (mode & 0x08)
  2926  003232  B79E               	btfsc	f_open@mode& (0+255),3,b
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;ff.c: 2543:     mode |= 0x20;
  2930  003234  8B9E               	bsf	f_open@mode& (0+255),5,b
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2934  003236  EE20 F02A          	lfsr	2,42
  2935  00323A  51BA               	movf	f_open@dj& (0+255),w,b
  2936  00323C  26D9               	addwf	fsr2l,f,c
  2937  00323E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2938  003240  22DA               	addwfc	fsr2h,f,c
  2939  003242  EE10 F01A          	lfsr	1,26
  2940  003246  519A               	movf	f_open@fp& (0+255),w,b
  2941  003248  26E1               	addwf	fsr1l,f,c
  2942  00324A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2943  00324C  22E2               	addwfc	fsr1h,f,c
  2944  00324E  CFDE FFE6          	movff	postinc2,postinc1
  2945  003252  CFDE FFE6          	movff	postinc2,postinc1
  2946  003256  CFDE FFE6          	movff	postinc2,postinc1
  2947  00325A  CFDE FFE6          	movff	postinc2,postinc1
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2951  00325E  EE20 F01E          	lfsr	2,30
  2952  003262  519A               	movf	f_open@fp& (0+255),w,b
  2953  003264  26D9               	addwf	fsr2l,f,c
  2954  003266  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2955  003268  22DA               	addwfc	fsr2h,f,c
  2956  00326A  C0B8  FFDE         	movff	f_open@dir,postinc2
  2957  00326E  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2958  003272                     l5873:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;ff.c: 2565:   if (res == FR_OK) {
  2962  003272  51B7               	movf	f_open@res& (0+255),w,b
  2963  003274  A4D8               	btfss	status,2,c
  2964  003276  D06D               	goto	l5889
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;ff.c: 2566:    fp->flag = mode;
  2968  003278  EE20 F004          	lfsr	2,4
  2969  00327C  519A               	movf	f_open@fp& (0+255),w,b
  2970  00327E  26D9               	addwf	fsr2l,f,c
  2971  003280  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2972  003282  22DA               	addwfc	fsr2h,f,c
  2973  003284  C09E  FFDF         	movff	f_open@mode,indf2
  2974                           
  2975                           ;ff.c: 2567:    fp->err = 0;
  2976  003288  EE20 F005          	lfsr	2,5
  2977  00328C  519A               	movf	f_open@fp& (0+255),w,b
  2978  00328E  26D9               	addwf	fsr2l,f,c
  2979  003290  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2980  003292  22DA               	addwfc	fsr2h,f,c
  2981  003294  0E00               	movlw	0
  2982  003296  6EDF               	movwf	indf2,c
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2986  003298  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2987  00329C  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2988  0032A0  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2989  0032A4  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2990  0032A8  EC58  F028         	call	_ld_clust	;wreg free
  2991  0032AC  0100               	movlb	0	; () banked
  2992  0032AE  EE20 F00E          	lfsr	2,14
  2993  0032B2  519A               	movf	f_open@fp& (0+255),w,b
  2994  0032B4  26D9               	addwf	fsr2l,f,c
  2995  0032B6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2996  0032B8  22DA               	addwfc	fsr2h,f,c
  2997  0032BA  C001  FFDE         	movff	?_ld_clust,postinc2
  2998  0032BE  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2999  0032C2  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3000  0032C6  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  3004  0032CA  EE20 F01C          	lfsr	2,28
  3005  0032CE  51B8               	movf	f_open@dir& (0+255),w,b
  3006  0032D0  26D9               	addwf	fsr2l,f,c
  3007  0032D2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  3008  0032D4  22DA               	addwfc	fsr2h,f,c
  3009  0032D6  EE10 F00A          	lfsr	1,10
  3010  0032DA  519A               	movf	f_open@fp& (0+255),w,b
  3011  0032DC  26E1               	addwf	fsr1l,f,c
  3012  0032DE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3013  0032E0  22E2               	addwfc	fsr1h,f,c
  3014  0032E2  CFDE FFE6          	movff	postinc2,postinc1
  3015  0032E6  CFDE FFE6          	movff	postinc2,postinc1
  3016  0032EA  CFDE FFE6          	movff	postinc2,postinc1
  3017  0032EE  CFDE FFE6          	movff	postinc2,postinc1
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;ff.c: 2570:    fp->fptr = 0;
  3021  0032F2  EE20 F006          	lfsr	2,6
  3022  0032F6  519A               	movf	f_open@fp& (0+255),w,b
  3023  0032F8  26D9               	addwf	fsr2l,f,c
  3024  0032FA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3025  0032FC  22DA               	addwfc	fsr2h,f,c
  3026  0032FE  6ADE               	clrf	postinc2,c
  3027  003300  6ADE               	clrf	postinc2,c
  3028  003302  6ADE               	clrf	postinc2,c
  3029  003304  6ADD               	clrf	postdec2,c
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;ff.c: 2571:    fp->dsect = 0;
  3033  003306  EE20 F016          	lfsr	2,22
  3034  00330A  519A               	movf	f_open@fp& (0+255),w,b
  3035  00330C  26D9               	addwf	fsr2l,f,c
  3036  00330E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3037  003310  22DA               	addwfc	fsr2h,f,c
  3038  003312  6ADE               	clrf	postinc2,c
  3039  003314  6ADE               	clrf	postinc2,c
  3040  003316  6ADE               	clrf	postinc2,c
  3041  003318  6ADD               	clrf	postdec2,c
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;ff.c: 2575:    fp->fs = dj.fs;
  3045  00331A  C09A  FFD9         	movff	f_open@fp,fsr2l
  3046  00331E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3047  003322  C0BA  FFDE         	movff	f_open@dj,postinc2
  3048  003326  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;ff.c: 2576:    fp->id = fp->fs->id;
  3052  00332A  C09A  FFD9         	movff	f_open@fp,fsr2l
  3053  00332E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3054  003332  EE10 F006          	lfsr	1,6
  3055  003336  50DE               	movf	postinc2,w,c
  3056  003338  26E1               	addwf	fsr1l,f,c
  3057  00333A  50DD               	movf	postdec2,w,c
  3058  00333C  22E2               	addwfc	fsr1h,f,c
  3059  00333E  EE20 F002          	lfsr	2,2
  3060  003342  519A               	movf	f_open@fp& (0+255),w,b
  3061  003344  26D9               	addwf	fsr2l,f,c
  3062  003346  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3063  003348  22DA               	addwfc	fsr2h,f,c
  3064  00334A  CFE6 FFDE          	movff	postinc1,postinc2
  3065  00334E  CFE5 FFDD          	movff	postdec1,postdec2
  3066  003352                     l5889:
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;ff.c: 2580:  return res;
  3070  003352  51B7               	movf	f_open@res& (0+255),w,b
  3071                           
  3072                           ; BSR set to: 0
  3073  003354  0012               	return		;funcret
  3074  003356                     __end_of_f_open:
  3075                           	opt callstack 0
  3076                           
  3077 ;; *************** function _remove_chain *****************
  3078 ;; Defined at:
  3079 ;;		line 937 in file "ff.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  fs              2   85[COMRAM] PTR struct .
  3082 ;;		 -> NULL(0), FatFs(558), 
  3083 ;;  clst            4   87[COMRAM] unsigned long 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  nxt             4    1[BANK0 ] unsigned long 
  3086 ;;  res             1    0[BANK0 ] enum E93
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  1    wreg      enum E93
  3089 ;; Registers used:
  3090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3096 ;;      Params:         6       0       0       0       0       0       0       0       0
  3097 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3098 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3099 ;;      Totals:        10       5       0       0       0       0       0       0       0
  3100 ;;Total ram usage:       15 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    9
  3103 ;; This function calls:
  3104 ;;		_get_fat
  3105 ;;		_put_fat
  3106 ;; This function is called by:
  3107 ;;		_f_open
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111                           	psect	text4
  3112  004224                     __ptext4:
  3113                           	opt callstack 0
  3114  004224                     _remove_chain:
  3115                           	opt callstack 19
  3116                           
  3117                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;incstack = 0
  3121  004224  505B               	movf	remove_chain@clst+3,w,c
  3122  004226  105A               	iorwf	remove_chain@clst+2,w,c
  3123  004228  1059               	iorwf	remove_chain@clst+1,w,c
  3124  00422A  E104               	bnz	u7020
  3125  00422C  0E02               	movlw	2
  3126  00422E  5C58               	subwf	remove_chain@clst,w,c
  3127  004230  A0D8               	btfss	status,0,c
  3128  004232  D010               	goto	u7030
  3129  004234                     u7020:
  3130  004234  EE20 F012          	lfsr	2,18
  3131  004238  5056               	movf	remove_chain@fs,w,c
  3132  00423A  26D9               	addwf	fsr2l,f,c
  3133  00423C  5057               	movf	remove_chain@fs+1,w,c
  3134  00423E  22DA               	addwfc	fsr2h,f,c
  3135  004240  50DE               	movf	postinc2,w,c
  3136  004242  5C58               	subwf	remove_chain@clst,w,c
  3137  004244  50DE               	movf	postinc2,w,c
  3138  004246  5859               	subwfb	remove_chain@clst+1,w,c
  3139  004248  50DE               	movf	postinc2,w,c
  3140  00424A  585A               	subwfb	remove_chain@clst+2,w,c
  3141  00424C  50DE               	movf	postinc2,w,c
  3142  00424E  585B               	subwfb	remove_chain@clst+3,w,c
  3143  004250  A0D8               	btfss	status,0,c
  3144  004252  D003               	goto	l5313
  3145  004254                     u7030:
  3146                           
  3147                           ;ff.c: 949:   res = FR_INT_ERR;
  3148  004254  0E02               	movlw	2
  3149  004256  0100               	movlb	0	; () banked
  3150  004258  D031               	goto	L4
  3151  00425A                     l5313:
  3152                           
  3153                           ;ff.c: 952:   res = FR_OK;
  3154  00425A  0E00               	movlw	0
  3155  00425C  0100               	movlb	0	; () banked
  3156  00425E  6F60               	movwf	remove_chain@res& (0+255),b
  3157                           
  3158                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3159  004260  D074               	goto	l366
  3160  004262                     l5315:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3164  004262  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3165  004266  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3166  00426A  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3167  00426E  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3168  004272  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3169  004276  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3170  00427A  EC0F  F016         	call	_get_fat	;wreg free
  3171  00427E  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3172  004282  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3173  004286  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3174  00428A  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3175                           
  3176                           ;ff.c: 955:    if (nxt == 0) break;
  3177  00428E  0100               	movlb	0	; () banked
  3178  004290  5161               	movf	remove_chain@nxt& (0+255),w,b
  3179  004292  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3180  004294  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3181  004296  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3182  004298  B4D8               	btfsc	status,2,c
  3183  00429A  D067               	goto	u7090
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3187  00429C  0561               	decf	remove_chain@nxt& (0+255),w,b
  3188  00429E  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3189  0042A0  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3190  0042A2  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3191  0042A4  B4D8               	btfsc	status,2,c
  3192  0042A6  D7D6               	goto	u7030
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3196  0042A8  2961               	incf	remove_chain@nxt& (0+255),w,b
  3197  0042AA  E10A               	bnz	l5329
  3198  0042AC  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3199  0042AE  E108               	bnz	l5329
  3200  0042B0  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3201  0042B2  E106               	bnz	l5329
  3202  0042B4  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3203  0042B6  A4D8               	btfss	status,2,c
  3204  0042B8  D003               	goto	l5329
  3205                           
  3206                           ; BSR set to: 0
  3207  0042BA  0E01               	movlw	1
  3208  0042BC                     L4:
  3209  0042BC  6F60               	movwf	remove_chain@res& (0+255),b
  3210  0042BE  D055               	goto	u7090
  3211  0042C0                     l5329:
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3215  0042C0  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3216  0042C4  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3217  0042C8  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3218  0042CC  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3219  0042D0  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3220  0042D4  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3221  0042D8  0E00               	movlw	0
  3222  0042DA  6E41               	movwf	put_fat@val,c
  3223  0042DC  0E00               	movlw	0
  3224  0042DE  6E42               	movwf	put_fat@val+1,c
  3225  0042E0  0E00               	movlw	0
  3226  0042E2  6E43               	movwf	put_fat@val+2,c
  3227  0042E4  0E00               	movlw	0
  3228  0042E6  6E44               	movwf	put_fat@val+3,c
  3229  0042E8  ECF7  F011         	call	_put_fat	;wreg free
  3230  0042EC  0100               	movlb	0	; () banked
  3231  0042EE  6F60               	movwf	remove_chain@res& (0+255),b
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;ff.c: 959:    if (res != FR_OK) break;
  3235  0042F0  5160               	movf	remove_chain@res& (0+255),w,b
  3236  0042F2  A4D8               	btfss	status,2,c
  3237  0042F4  D03A               	goto	u7090
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3241  0042F6  EE20 F00E          	lfsr	2,14
  3242  0042FA  5056               	movf	remove_chain@fs,w,c
  3243  0042FC  26D9               	addwf	fsr2l,f,c
  3244  0042FE  5057               	movf	remove_chain@fs+1,w,c
  3245  004300  22DA               	addwfc	fsr2h,f,c
  3246  004302  28DE               	incf	postinc2,w,c
  3247  004304  E107               	bnz	u7080
  3248  004306  28DE               	incf	postinc2,w,c
  3249  004308  E105               	bnz	u7080
  3250  00430A  28DE               	incf	postinc2,w,c
  3251  00430C  E103               	bnz	u7080
  3252  00430E  28DE               	incf	postinc2,w,c
  3253  004310  B4D8               	btfsc	status,2,c
  3254  004312  D013               	goto	l5339
  3255  004314                     u7080:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;ff.c: 961:     fs->free_clust++;
  3259  004314  EE20 F00E          	lfsr	2,14
  3260  004318  5056               	movf	remove_chain@fs,w,c
  3261  00431A  26D9               	addwf	fsr2l,f,c
  3262  00431C  5057               	movf	remove_chain@fs+1,w,c
  3263  00431E  22DA               	addwfc	fsr2h,f,c
  3264  004320  2ADE               	incf	postinc2,f,c
  3265  004322  0E00               	movlw	0
  3266  004324  22DE               	addwfc	postinc2,f,c
  3267  004326  22DE               	addwfc	postinc2,f,c
  3268  004328  22DE               	addwfc	postinc2,f,c
  3269                           
  3270                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3271  00432A  EE20 F005          	lfsr	2,5
  3272  00432E  5056               	movf	remove_chain@fs,w,c
  3273  004330  26D9               	addwf	fsr2l,f,c
  3274  004332  5057               	movf	remove_chain@fs+1,w,c
  3275  004334  22DA               	addwfc	fsr2h,f,c
  3276  004336  0E00               	movlw	0
  3277  004338  80DB               	bsf	plusw2,0,c
  3278  00433A                     l5339:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;ff.c: 974:    clst = nxt;
  3282  00433A  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3283  00433E  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3284  004342  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3285  004346  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3286  00434A                     l366:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3290  00434A  EE20 F012          	lfsr	2,18
  3291  00434E  5056               	movf	remove_chain@fs,w,c
  3292  004350  26D9               	addwf	fsr2l,f,c
  3293  004352  5057               	movf	remove_chain@fs+1,w,c
  3294  004354  22DA               	addwfc	fsr2h,f,c
  3295  004356  50DE               	movf	postinc2,w,c
  3296  004358  5C58               	subwf	remove_chain@clst,w,c
  3297  00435A  50DE               	movf	postinc2,w,c
  3298  00435C  5859               	subwfb	remove_chain@clst+1,w,c
  3299  00435E  50DE               	movf	postinc2,w,c
  3300  004360  585A               	subwfb	remove_chain@clst+2,w,c
  3301  004362  50DE               	movf	postinc2,w,c
  3302  004364  585B               	subwfb	remove_chain@clst+3,w,c
  3303  004366  A0D8               	btfss	status,0,c
  3304  004368  D77C               	goto	l5315
  3305  00436A                     u7090:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;ff.c: 978:  return res;
  3309  00436A  5160               	movf	remove_chain@res& (0+255),w,b
  3310                           
  3311                           ; BSR set to: 0
  3312  00436C  0012               	return		;funcret
  3313  00436E                     __end_of_remove_chain:
  3314                           	opt callstack 0
  3315                           
  3316 ;; *************** function _follow_path *****************
  3317 ;; Defined at:
  3318 ;;		line 2052 in file "ff.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  dp              2   38[BANK0 ] PTR struct .
  3321 ;;		 -> f_open@dj(22), 
  3322 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3323 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3326 ;;		 -> NULL(0), FatFs(558), 
  3327 ;;  res             1   45[BANK0 ] enum E93
  3328 ;;  ns              1   44[BANK0 ] unsigned char 
  3329 ;; Return value:  Size  Location     Type
  3330 ;;                  1    wreg      enum E93
  3331 ;; Registers used:
  3332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3333 ;; Tracked objects:
  3334 ;;		On entry : 0/0
  3335 ;;		On exit  : 0/0
  3336 ;;		Unchanged: 0/0
  3337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3338 ;;      Params:         0       4       0       0       0       0       0       0       0
  3339 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3341 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3342 ;;Total ram usage:        8 bytes
  3343 ;; Hardware stack levels used:    1
  3344 ;; Hardware stack levels required when called:   12
  3345 ;; This function calls:
  3346 ;;		_create_name
  3347 ;;		_dir_find
  3348 ;;		_dir_sdi
  3349 ;;		_ld_clust
  3350 ;; This function is called by:
  3351 ;;		_f_open
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354                           
  3355                           	psect	text5
  3356  00436E                     __ptext5:
  3357                           	opt callstack 0
  3358  00436E                     _follow_path:
  3359                           	opt callstack 16
  3360                           
  3361                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;incstack = 0
  3365  00436E  C088  FFF6         	movff	follow_path@path,tblptrl
  3366  004372  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3367  004376                     	if	0	;tblptru may be non-zero
  3368  004376                     	endif
  3369  004376                     	if	0	;tblptru may be non-zero
  3370  004376                     	endif
  3371  004376  0008               	tblrd		*
  3372  004378  50F5               	movf	tablat,w,c
  3373  00437A  0A2F               	xorlw	47
  3374  00437C  B4D8               	btfsc	status,2,c
  3375  00437E  D009               	goto	u7130
  3376  004380  C088  FFF6         	movff	follow_path@path,tblptrl
  3377  004384  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3378  004388                     	if	0	;tblptru may be non-zero
  3379  004388                     	endif
  3380  004388                     	if	0	;tblptru may be non-zero
  3381  004388                     	endif
  3382  004388  0008               	tblrd		*
  3383  00438A  50F5               	movf	tablat,w,c
  3384  00438C  0A5C               	xorlw	92
  3385  00438E  A4D8               	btfss	status,2,c
  3386  004390  D003               	goto	l5369
  3387  004392                     u7130:
  3388                           
  3389                           ;ff.c: 2069:   path++;
  3390  004392  0100               	movlb	0	; () banked
  3391  004394  4B88               	infsnz	follow_path@path& (0+255),f,b
  3392  004396  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3393  004398                     l5369:
  3394                           
  3395                           ;ff.c: 2070:  dp->sclust = 0;
  3396  004398  0100               	movlb	0	; () banked
  3397  00439A  EE20 F006          	lfsr	2,6
  3398  00439E  5186               	movf	follow_path@dp& (0+255),w,b
  3399  0043A0  26D9               	addwf	fsr2l,f,c
  3400  0043A2  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3401  0043A4  22DA               	addwfc	fsr2h,f,c
  3402  0043A6  6ADE               	clrf	postinc2,c
  3403  0043A8  6ADE               	clrf	postinc2,c
  3404  0043AA  6ADE               	clrf	postinc2,c
  3405  0043AC  6ADD               	clrf	postdec2,c
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3409  0043AE  C088  FFF6         	movff	follow_path@path,tblptrl
  3410  0043B2  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3411  0043B6                     	if	0	;tblptru may be non-zero
  3412  0043B6                     	endif
  3413  0043B6                     	if	0	;tblptru may be non-zero
  3414  0043B6                     	endif
  3415  0043B6  0E20               	movlw	32
  3416  0043B8  0008               	tblrd		*
  3417  0043BA  60F5               	cpfslt	tablat,c
  3418  0043BC  D017               	goto	l5377
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3422  0043BE  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3423  0043C2  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3424  0043C6  0E00               	movlw	0
  3425  0043C8  6E59               	movwf	dir_sdi@idx+1,c
  3426  0043CA  0E00               	movlw	0
  3427  0043CC  6E58               	movwf	dir_sdi@idx,c
  3428  0043CE  EC28  F01B         	call	_dir_sdi	;wreg free
  3429  0043D2  0100               	movlb	0	; () banked
  3430  0043D4  6F8D               	movwf	follow_path@res& (0+255),b
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;ff.c: 2075:   dp->dir = 0;
  3434  0043D6  EE20 F012          	lfsr	2,18
  3435  0043DA  5186               	movf	follow_path@dp& (0+255),w,b
  3436  0043DC  26D9               	addwf	fsr2l,f,c
  3437  0043DE  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3438  0043E0  22DA               	addwfc	fsr2h,f,c
  3439  0043E2  0E00               	movlw	0
  3440  0043E4  6EDE               	movwf	postinc2,c
  3441  0043E6  0E00               	movlw	0
  3442  0043E8  6EDD               	movwf	postdec2,c
  3443                           
  3444                           ;ff.c: 2076:  } else {
  3445  0043EA  D062               	goto	l5413
  3446  0043EC                     l5377:
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;ff.c: 2078:    res = create_name(dp, &path);
  3450  0043EC  C086  F009         	movff	follow_path@dp,create_name@dp
  3451  0043F0  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3452  0043F4  0E88               	movlw	low follow_path@path
  3453  0043F6  6E0B               	movwf	create_name@path,c
  3454  0043F8  0E00               	movlw	high follow_path@path
  3455  0043FA  6E0C               	movwf	create_name@path+1,c
  3456  0043FC  EC89  F01C         	call	_create_name	;wreg free
  3457  004400  0100               	movlb	0	; () banked
  3458  004402  6F8D               	movwf	follow_path@res& (0+255),b
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;ff.c: 2079:    if (res != FR_OK) break;
  3462  004404  518D               	movf	follow_path@res& (0+255),w,b
  3463  004406  A4D8               	btfss	status,2,c
  3464  004408  D053               	goto	l5413
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;ff.c: 2080:    res = dir_find(dp);
  3468  00440A  C086  F080         	movff	follow_path@dp,dir_find@dp
  3469  00440E  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3470  004412  ECFB  F023         	call	_dir_find	;wreg free
  3471  004416  0100               	movlb	0	; () banked
  3472  004418  6F8D               	movwf	follow_path@res& (0+255),b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;ff.c: 2081:    ns = dp->fn[11];
  3476  00441A  EE20 F014          	lfsr	2,20
  3477  00441E  5186               	movf	follow_path@dp& (0+255),w,b
  3478  004420  26D9               	addwf	fsr2l,f,c
  3479  004422  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3480  004424  22DA               	addwfc	fsr2h,f,c
  3481  004426  EE10 F00B          	lfsr	1,11
  3482  00442A  50DE               	movf	postinc2,w,c
  3483  00442C  26E1               	addwf	fsr1l,f,c
  3484  00442E  50DD               	movf	postdec2,w,c
  3485  004430  22E2               	addwfc	fsr1h,f,c
  3486  004432  50E7               	movf	indf1,w,c
  3487  004434  6F8C               	movwf	follow_path@ns& (0+255),b
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;ff.c: 2082:    if (res != FR_OK) {
  3491  004436  518D               	movf	follow_path@res& (0+255),w,b
  3492  004438  B4D8               	btfsc	status,2,c
  3493  00443A  D008               	goto	l533
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3497  00443C  0E04               	movlw	4
  3498  00443E  198D               	xorwf	follow_path@res& (0+255),w,b
  3499  004440  B4D8               	btfsc	status,2,c
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3503  004442  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3504  004444  D035               	goto	l5413
  3505  004446                     u7180:
  3506                           
  3507                           ; BSR set to: 0
  3508  004446  0E05               	movlw	5
  3509  004448  6F8D               	movwf	follow_path@res& (0+255),b
  3510  00444A  D032               	goto	l5413
  3511  00444C                     l533:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;ff.c: 2094:    if (ns & 0x04) break;
  3515  00444C  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3516  00444E  D030               	goto	l5413
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;ff.c: 2095:    dir = dp->dir;
  3520  004450  EE20 F012          	lfsr	2,18
  3521  004454  5186               	movf	follow_path@dp& (0+255),w,b
  3522  004456  26D9               	addwf	fsr2l,f,c
  3523  004458  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3524  00445A  22DA               	addwfc	fsr2h,f,c
  3525  00445C  CFDE F08A          	movff	postinc2,follow_path@dir
  3526  004460  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3527                           
  3528                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3529  004464  EE20 F00B          	lfsr	2,11
  3530  004468  518A               	movf	follow_path@dir& (0+255),w,b
  3531  00446A  26D9               	addwf	fsr2l,f,c
  3532  00446C  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3533  00446E  22DA               	addwfc	fsr2h,f,c
  3534  004470  A8DF               	btfss	indf2,4,c
  3535  004472  D7E9               	goto	u7180
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3539  004474  C086  FFD9         	movff	follow_path@dp,fsr2l
  3540  004478  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3541  00447C  CFDE F001          	movff	postinc2,ld_clust@fs
  3542  004480  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3543  004484  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3544  004488  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3545  00448C  EC58  F028         	call	_ld_clust	;wreg free
  3546  004490  0100               	movlb	0	; () banked
  3547  004492  EE20 F006          	lfsr	2,6
  3548  004496  5186               	movf	follow_path@dp& (0+255),w,b
  3549  004498  26D9               	addwf	fsr2l,f,c
  3550  00449A  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3551  00449C  22DA               	addwfc	fsr2h,f,c
  3552  00449E  C001  FFDE         	movff	?_ld_clust,postinc2
  3553  0044A2  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3554  0044A6  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3555  0044AA  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3556  0044AE  D79E               	goto	l5377
  3557  0044B0                     l5413:
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;ff.c: 2103:  return res;
  3561  0044B0  518D               	movf	follow_path@res& (0+255),w,b
  3562                           
  3563                           ; BSR set to: 0
  3564  0044B2  0012               	return		;funcret
  3565  0044B4                     __end_of_follow_path:
  3566                           	opt callstack 0
  3567                           
  3568 ;; *************** function _ld_clust *****************
  3569 ;; Defined at:
  3570 ;;		line 1235 in file "ff.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  fs              2    0[COMRAM] PTR struct .
  3573 ;;		 -> NULL(0), FatFs(558), 
  3574 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3575 ;;		 -> NULL(0), FatFs(558), 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;  cl              4   10[COMRAM] unsigned long 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  4    0[COMRAM] unsigned long 
  3580 ;; Registers used:
  3581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3587 ;;      Params:         4       0       0       0       0       0       0       0       0
  3588 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3589 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3590 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3591 ;;Total ram usage:       14 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_follow_path
  3597 ;;		_f_open
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text6
  3602  0050B0                     __ptext6:
  3603                           	opt callstack 0
  3604  0050B0                     _ld_clust:
  3605                           	opt callstack 28
  3606                           
  3607                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;incstack = 0
  3611  0050B0  0E1A               	movlw	26
  3612  0050B2  2403               	addwf	ld_clust@dir,w,c
  3613  0050B4  6ED9               	movwf	fsr2l,c
  3614  0050B6  0E00               	movlw	0
  3615  0050B8  2004               	addwfc	ld_clust@dir+1,w,c
  3616  0050BA  6EDA               	movwf	fsr2h,c
  3617  0050BC  CFDE F005          	movff	postinc2,??_ld_clust
  3618  0050C0  CFDD F006          	movff	postdec2,??_ld_clust+1
  3619  0050C4  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3620  0050C8  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3621  0050CC  6A0D               	clrf	ld_clust@cl+2,c
  3622  0050CE  6A0E               	clrf	ld_clust@cl+3,c
  3623                           
  3624                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3625  0050D0  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3626  0050D4  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3627  0050D8  0E03               	movlw	3
  3628  0050DA  18DE               	xorwf	postinc2,w,c
  3629  0050DC  A4D8               	btfss	status,2,c
  3630  0050DE  D01E               	goto	l5015
  3631                           
  3632                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3633  0050E0  0E14               	movlw	20
  3634  0050E2  2403               	addwf	ld_clust@dir,w,c
  3635  0050E4  6ED9               	movwf	fsr2l,c
  3636  0050E6  0E00               	movlw	0
  3637  0050E8  2004               	addwfc	ld_clust@dir+1,w,c
  3638  0050EA  6EDA               	movwf	fsr2h,c
  3639  0050EC  CFDE F005          	movff	postinc2,??_ld_clust
  3640  0050F0  CFDD F006          	movff	postdec2,??_ld_clust+1
  3641  0050F4  5005               	movf	??_ld_clust,w,c
  3642  0050F6  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3643  0050F8  5006               	movf	??_ld_clust+1,w,c
  3644  0050FA  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3645  0050FC  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3646  0050FE  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3647  005100  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3648  005104  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3649  005108  6A08               	clrf	??_ld_clust+3,c
  3650  00510A  6A07               	clrf	??_ld_clust+2,c
  3651  00510C  5007               	movf	??_ld_clust+2,w,c
  3652  00510E  120B               	iorwf	ld_clust@cl,f,c
  3653  005110  5008               	movf	??_ld_clust+3,w,c
  3654  005112  120C               	iorwf	ld_clust@cl+1,f,c
  3655  005114  5009               	movf	??_ld_clust+4,w,c
  3656  005116  120D               	iorwf	ld_clust@cl+2,f,c
  3657  005118  500A               	movf	??_ld_clust+5,w,c
  3658  00511A  120E               	iorwf	ld_clust@cl+3,f,c
  3659  00511C                     l5015:
  3660                           
  3661                           ;ff.c: 1246:  return cl;
  3662  00511C  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3663  005120  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3664  005124  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3665  005128  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3666  00512C  0012               	return		;funcret
  3667  00512E                     __end_of_ld_clust:
  3668                           	opt callstack 0
  3669                           
  3670 ;; *************** function _dir_find *****************
  3671 ;; Defined at:
  3672 ;;		line 1458 in file "ff.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  dp              2   32[BANK0 ] PTR struct .
  3675 ;;		 -> f_open@dj(22), 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3678 ;;		 -> NULL(0), FatFs(558), 
  3679 ;;  res             1   37[BANK0 ] enum E93
  3680 ;;  c               1   34[BANK0 ] unsigned char 
  3681 ;; Return value:  Size  Location     Type
  3682 ;;                  1    wreg      enum E93
  3683 ;; Registers used:
  3684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3685 ;; Tracked objects:
  3686 ;;		On entry : 0/0
  3687 ;;		On exit  : 0/0
  3688 ;;		Unchanged: 0/0
  3689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3690 ;;      Params:         0       2       0       0       0       0       0       0       0
  3691 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3693 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3694 ;;Total ram usage:        6 bytes
  3695 ;; Hardware stack levels used:    1
  3696 ;; Hardware stack levels required when called:   11
  3697 ;; This function calls:
  3698 ;;		_dir_next
  3699 ;;		_dir_sdi
  3700 ;;		_mem_cmp
  3701 ;;		_move_window
  3702 ;; This function is called by:
  3703 ;;		_follow_path
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text7
  3708  0047F6                     __ptext7:
  3709                           	opt callstack 0
  3710  0047F6                     _dir_find:
  3711                           	opt callstack 16
  3712                           
  3713                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3714                           
  3715                           ;incstack = 0
  3716  0047F6  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3717  0047FA  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3718  0047FE  0E00               	movlw	0
  3719  004800  6E59               	movwf	dir_sdi@idx+1,c
  3720  004802  0E00               	movlw	0
  3721  004804  6E58               	movwf	dir_sdi@idx,c
  3722  004806  EC28  F01B         	call	_dir_sdi	;wreg free
  3723  00480A  0100               	movlb	0	; () banked
  3724  00480C  6F85               	movwf	dir_find@res& (0+255),b
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3728  00480E  5185               	movf	dir_find@res& (0+255),w,b
  3729  004810  B4D8               	btfsc	status,2,c
  3730  004812  D003               	goto	l5029
  3731  004814                     u6470:
  3732  004814  0100               	movlb	0	; () banked
  3733  004816  5185               	movf	dir_find@res& (0+255),w,b
  3734  004818  0012               	return	
  3735  00481A                     l5029:
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3739  00481A  C080  FFD9         	movff	dir_find@dp,fsr2l
  3740  00481E  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3741  004822  CFDE F030          	movff	postinc2,move_window@fs
  3742  004826  CFDD F031          	movff	postdec2,move_window@fs+1
  3743  00482A  EE20 F00E          	lfsr	2,14
  3744  00482E  5180               	movf	dir_find@dp& (0+255),w,b
  3745  004830  26D9               	addwf	fsr2l,f,c
  3746  004832  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3747  004834  22DA               	addwfc	fsr2h,f,c
  3748  004836  CFDE F032          	movff	postinc2,move_window@sector
  3749  00483A  CFDE F033          	movff	postinc2,move_window@sector+1
  3750  00483E  CFDE F034          	movff	postinc2,move_window@sector+2
  3751  004842  CFDE F035          	movff	postinc2,move_window@sector+3
  3752  004846  EC39  F027         	call	_move_window	;wreg free
  3753  00484A  0100               	movlb	0	; () banked
  3754  00484C  6F85               	movwf	dir_find@res& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;ff.c: 1476:   if (res != FR_OK) break;
  3758  00484E  5185               	movf	dir_find@res& (0+255),w,b
  3759  004850  A4D8               	btfss	status,2,c
  3760  004852  D7E0               	goto	u6470
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;ff.c: 1477:   dir = dp->dir;
  3764  004854  EE20 F012          	lfsr	2,18
  3765  004858  5180               	movf	dir_find@dp& (0+255),w,b
  3766  00485A  26D9               	addwf	fsr2l,f,c
  3767  00485C  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3768  00485E  22DA               	addwfc	fsr2h,f,c
  3769  004860  CFDE F083          	movff	postinc2,dir_find@dir
  3770  004864  CFDD F084          	movff	postdec2,dir_find@dir+1
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;ff.c: 1478:   c = dir[0];
  3774  004868  C083  FFD9         	movff	dir_find@dir,fsr2l
  3775  00486C  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3776  004870  50DF               	movf	indf2,w,c
  3777  004872  6F82               	movwf	dir_find@c& (0+255),b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3781  004874  5182               	movf	dir_find@c& (0+255),w,b
  3782  004876  A4D8               	btfss	status,2,c
  3783  004878  D003               	goto	l5043
  3784                           
  3785                           ; BSR set to: 0
  3786  00487A  0E04               	movlw	4
  3787  00487C  6F85               	movwf	dir_find@res& (0+255),b
  3788  00487E  D7CA               	goto	u6470
  3789  004880                     l5043:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3793  004880  EE20 F00B          	lfsr	2,11
  3794  004884  5183               	movf	dir_find@dir& (0+255),w,b
  3795  004886  26D9               	addwf	fsr2l,f,c
  3796  004888  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3797  00488A  22DA               	addwfc	fsr2h,f,c
  3798  00488C  B6DF               	btfsc	indf2,3,c
  3799  00488E  D018               	goto	l5049
  3800                           
  3801                           ; BSR set to: 0
  3802  004890  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3803  004894  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3804  004898  EE20 F014          	lfsr	2,20
  3805  00489C  5180               	movf	dir_find@dp& (0+255),w,b
  3806  00489E  26D9               	addwf	fsr2l,f,c
  3807  0048A0  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3808  0048A2  22DA               	addwfc	fsr2h,f,c
  3809  0048A4  CFDE F003          	movff	postinc2,mem_cmp@src
  3810  0048A8  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3811  0048AC  0E00               	movlw	0
  3812  0048AE  6E06               	movwf	mem_cmp@cnt+1,c
  3813  0048B0  0E0B               	movlw	11
  3814  0048B2  6E05               	movwf	mem_cmp@cnt,c
  3815  0048B4  EC0B  F029         	call	_mem_cmp	;wreg free
  3816  0048B8  5001               	movf	?_mem_cmp,w,c
  3817  0048BA  1002               	iorwf	?_mem_cmp+1,w,c
  3818  0048BC  B4D8               	btfsc	status,2,c
  3819  0048BE  D7AA               	goto	u6470
  3820  0048C0                     l5049:
  3821                           
  3822                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3823  0048C0  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3824  0048C4  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3825  0048C8  0E00               	movlw	0
  3826  0048CA  0100               	movlb	0	; () banked
  3827  0048CC  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3828  0048CE  0E00               	movlw	0
  3829  0048D0  6F6F               	movwf	dir_next@stretch& (0+255),b
  3830  0048D2  EC0C  F014         	call	_dir_next	;wreg free
  3831  0048D6  0100               	movlb	0	; () banked
  3832  0048D8  6F85               	movwf	dir_find@res& (0+255),b
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;ff.c: 1506:  } while (res == FR_OK);
  3836  0048DA  5185               	movf	dir_find@res& (0+255),w,b
  3837  0048DC  A4D8               	btfss	status,2,c
  3838  0048DE  D79A               	goto	u6470
  3839  0048E0  D79C               	goto	l5029
  3840  0048E2                     __end_of_dir_find:
  3841                           	opt callstack 0
  3842                           
  3843 ;; *************** function _mem_cmp *****************
  3844 ;; Defined at:
  3845 ;;		line 533 in file "ff.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  dst             2    0[COMRAM] PTR const void 
  3848 ;;		 -> NULL(0), FatFs(558), 
  3849 ;;  src             2    2[COMRAM] PTR const void 
  3850 ;;		 -> f_open@sfn(12), 
  3851 ;;  cnt             2    4[COMRAM] unsigned short 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  r               2   12[COMRAM] int 
  3854 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3855 ;;		 -> f_open@sfn(12), 
  3856 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3857 ;;		 -> NULL(0), FatFs(558), 
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  2    0[COMRAM] int 
  3860 ;; Registers used:
  3861 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3867 ;;      Params:         6       0       0       0       0       0       0       0       0
  3868 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3869 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3870 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3871 ;;Total ram usage:       14 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_dir_find
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text8
  3881  005216                     __ptext8:
  3882                           	opt callstack 0
  3883  005216                     _mem_cmp:
  3884                           	opt callstack 26
  3885                           
  3886                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;incstack = 0
  3890  005216  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3891  00521A  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3892  00521E  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3893  005222  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3894                           
  3895                           ;ff.c: 535:  int r = 0;
  3896  005226  0E00               	movlw	0
  3897  005228  6E0E               	movwf	mem_cmp@r+1,c
  3898  00522A  0E00               	movlw	0
  3899  00522C  6E0D               	movwf	mem_cmp@r,c
  3900  00522E                     l4637:
  3901  00522E  0605               	decf	mem_cmp@cnt,f,c
  3902  005230  A0D8               	btfss	status,0,c
  3903  005232  0606               	decf	mem_cmp@cnt+1,f,c
  3904  005234  2805               	incf	mem_cmp@cnt,w,c
  3905  005236  E103               	bnz	u5760
  3906  005238  2806               	incf	mem_cmp@cnt+1,w,c
  3907  00523A  B4D8               	btfsc	status,2,c
  3908  00523C  D01A               	goto	u5770
  3909  00523E                     u5760:
  3910  00523E  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3911  005242  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3912  005246  4A09               	infsnz	mem_cmp@d,f,c
  3913  005248  2A0A               	incf	mem_cmp@d+1,f,c
  3914  00524A  50DF               	movf	indf2,w,c
  3915  00524C  6E07               	movwf	??_mem_cmp& (0+255),c
  3916  00524E  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3917  005252  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3918  005256  4A0B               	infsnz	mem_cmp@s,f,c
  3919  005258  2A0C               	incf	mem_cmp@s+1,f,c
  3920  00525A  50DF               	movf	indf2,w,c
  3921  00525C  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  3922  00525E  5008               	movf	??_mem_cmp+1,w,c
  3923  005260  5C07               	subwf	??_mem_cmp,w,c
  3924  005262  6E0D               	movwf	mem_cmp@r,c
  3925  005264  6A0E               	clrf	mem_cmp@r+1,c
  3926  005266  A0D8               	btfss	status,0,c
  3927  005268  060E               	decf	mem_cmp@r+1,f,c
  3928  00526A  500D               	movf	mem_cmp@r,w,c
  3929  00526C  100E               	iorwf	mem_cmp@r+1,w,c
  3930  00526E  B4D8               	btfsc	status,2,c
  3931  005270  D7DE               	goto	l4637
  3932  005272                     u5770:
  3933                           
  3934                           ;ff.c: 538:  return r;
  3935  005272  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3936  005276  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3937  00527A  0012               	return		;funcret
  3938  00527C                     __end_of_mem_cmp:
  3939                           	opt callstack 0
  3940                           
  3941 ;; *************** function _create_name *****************
  3942 ;; Defined at:
  3943 ;;		line 1843 in file "ff.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  dp              2    8[COMRAM] PTR struct .
  3946 ;;		 -> f_open@dj(22), 
  3947 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3948 ;;		 -> follow_path@path(2), 
  3949 ;; Auto vars:     Size  Location     Type
  3950 ;;  i               2   28[COMRAM] unsigned short 
  3951 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  3952 ;;		 -> f_open@sfn(12), 
  3953 ;;  p               2   23[COMRAM] PTR const unsigned char 
  3954 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3955 ;;  ni              2   21[COMRAM] unsigned short 
  3956 ;;  si              2   18[COMRAM] unsigned short 
  3957 ;;  c               1   30[COMRAM] unsigned char 
  3958 ;;  d               1   25[COMRAM] unsigned char 
  3959 ;;  b               1   20[COMRAM] unsigned char 
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      enum E93
  3962 ;; Registers used:
  3963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3969 ;;      Params:         4       0       0       0       0       0       0       0       0
  3970 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3971 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3972 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3973 ;;Total ram usage:       23 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    1
  3976 ;; This function calls:
  3977 ;;		_chk_chr
  3978 ;;		_mem_set
  3979 ;; This function is called by:
  3980 ;;		_follow_path
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text9
  3985  003912                     __ptext9:
  3986                           	opt callstack 0
  3987  003912                     _create_name:
  3988                           	opt callstack 26
  3989                           
  3990                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  3991                           
  3992                           ;incstack = 0
  3993  003912  C00B  FFD9         	movff	create_name@path,fsr2l
  3994  003916  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3995  00391A  CFDE F018          	movff	postinc2,create_name@p
  3996  00391E  CFDD F019          	movff	postdec2,create_name@p+1
  3997  003922  D002               	goto	l5061
  3998  003924                     l5059:
  3999  003924  4A18               	infsnz	create_name@p,f,c
  4000  003926  2A19               	incf	create_name@p+1,f,c
  4001  003928                     l5061:
  4002  003928  C018  FFF6         	movff	create_name@p,tblptrl
  4003  00392C  C019  FFF7         	movff	create_name@p+1,tblptrh
  4004  003930                     	if	0	;tblptru may be non-zero
  4005  003930                     	endif
  4006  003930                     	if	0	;tblptru may be non-zero
  4007  003930                     	endif
  4008  003930  0008               	tblrd		*
  4009  003932  50F5               	movf	tablat,w,c
  4010  003934  0A2F               	xorlw	47
  4011  003936  B4D8               	btfsc	status,2,c
  4012  003938  D7F5               	goto	l5059
  4013  00393A  C018  FFF6         	movff	create_name@p,tblptrl
  4014  00393E  C019  FFF7         	movff	create_name@p+1,tblptrh
  4015  003942                     	if	0	;tblptru may be non-zero
  4016  003942                     	endif
  4017  003942                     	if	0	;tblptru may be non-zero
  4018  003942                     	endif
  4019  003942  0008               	tblrd		*
  4020  003944  50F5               	movf	tablat,w,c
  4021  003946  0A5C               	xorlw	92
  4022  003948  B4D8               	btfsc	status,2,c
  4023  00394A  D7EC               	goto	l5059
  4024                           
  4025                           ;ff.c: 1975:  sfn = dp->fn;
  4026  00394C  EE20 F014          	lfsr	2,20
  4027  003950  5009               	movf	create_name@dp,w,c
  4028  003952  26D9               	addwf	fsr2l,f,c
  4029  003954  500A               	movf	create_name@dp+1,w,c
  4030  003956  22DA               	addwfc	fsr2h,f,c
  4031  003958  CFDE F01B          	movff	postinc2,create_name@sfn
  4032  00395C  CFDD F01C          	movff	postdec2,create_name@sfn+1
  4033                           
  4034                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  4035  003960  C01B  F001         	movff	create_name@sfn,mem_set@dst
  4036  003964  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  4037  003968  0E00               	movlw	0
  4038  00396A  6E04               	movwf	mem_set@val+1,c
  4039  00396C  0E20               	movlw	32
  4040  00396E  6E03               	movwf	mem_set@val,c
  4041  003970  0E00               	movlw	0
  4042  003972  6E06               	movwf	mem_set@cnt+1,c
  4043  003974  0E0B               	movlw	11
  4044  003976  6E05               	movwf	mem_set@cnt,c
  4045  003978  EC5E  F02A         	call	_mem_set	;wreg free
  4046                           
  4047                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  4048  00397C  0E00               	movlw	0
  4049  00397E  6E15               	movwf	create_name@b,c
  4050  003980  C015  F01D         	movff	create_name@b,create_name@i
  4051  003984  6A1E               	clrf	create_name@i+1,c
  4052  003986  C01D  F013         	movff	create_name@i,create_name@si
  4053  00398A  C01E  F014         	movff	create_name@i+1,create_name@si+1
  4054  00398E  0E00               	movlw	0
  4055  003990  6E17               	movwf	create_name@ni+1,c
  4056  003992  0E08               	movlw	8
  4057  003994  6E16               	movwf	create_name@ni,c
  4058  003996                     l5073:
  4059                           
  4060                           ;ff.c: 1992:   c = (BYTE)p[si++];
  4061  003996  5013               	movf	create_name@si,w,c
  4062  003998  2418               	addwf	create_name@p,w,c
  4063  00399A  6E0D               	movwf	??_create_name& (0+255),c
  4064  00399C  5014               	movf	create_name@si+1,w,c
  4065  00399E  2019               	addwfc	create_name@p+1,w,c
  4066  0039A0  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4067  0039A2  C00D  FFF6         	movff	??_create_name,tblptrl
  4068  0039A6  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4069  0039AA                     	if	0	;tblptru may be non-zero
  4070  0039AA                     	endif
  4071  0039AA                     	if	0	;tblptru may be non-zero
  4072  0039AA                     	endif
  4073  0039AA  0008               	tblrd		*
  4074  0039AC  CFF5 F01F          	movff	tablat,create_name@c
  4075  0039B0  4A13               	infsnz	create_name@si,f,c
  4076  0039B2  2A14               	incf	create_name@si+1,f,c
  4077                           
  4078                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4079  0039B4  0E20               	movlw	32
  4080  0039B6  641F               	cpfsgt	create_name@c,c
  4081  0039B8  D0A4               	goto	l5157
  4082  0039BA  0E2F               	movlw	47
  4083  0039BC  181F               	xorwf	create_name@c,w,c
  4084  0039BE  B4D8               	btfsc	status,2,c
  4085  0039C0  D0A0               	goto	l5157
  4086  0039C2  0E5C               	movlw	92
  4087  0039C4  181F               	xorwf	create_name@c,w,c
  4088  0039C6  B4D8               	btfsc	status,2,c
  4089  0039C8  D09C               	goto	l5157
  4090                           
  4091                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4092  0039CA  0E2E               	movlw	46
  4093  0039CC  181F               	xorwf	create_name@c,w,c
  4094  0039CE  B4D8               	btfsc	status,2,c
  4095  0039D0  D006               	goto	u6590
  4096  0039D2  5016               	movf	create_name@ni,w,c
  4097  0039D4  5C1D               	subwf	create_name@i,w,c
  4098  0039D6  5017               	movf	create_name@ni+1,w,c
  4099  0039D8  581E               	subwfb	create_name@i+1,w,c
  4100  0039DA  A0D8               	btfss	status,0,c
  4101  0039DC  D018               	goto	l5099
  4102  0039DE                     u6590:
  4103                           
  4104                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4105  0039DE  0E08               	movlw	8
  4106  0039E0  1816               	xorwf	create_name@ni,w,c
  4107  0039E2  1017               	iorwf	create_name@ni+1,w,c
  4108  0039E4  A4D8               	btfss	status,2,c
  4109  0039E6  D004               	goto	u6610
  4110  0039E8  0E2E               	movlw	46
  4111  0039EA  181F               	xorwf	create_name@c,w,c
  4112  0039EC  B4D8               	btfsc	status,2,c
  4113  0039EE  D002               	goto	l5095
  4114  0039F0                     u6610:
  4115  0039F0  0E06               	movlw	6
  4116  0039F2  0012               	return	
  4117  0039F4                     l5095:
  4118                           
  4119                           ;ff.c: 1996:    i = 8; ni = 11;
  4120  0039F4  0E00               	movlw	0
  4121  0039F6  6E1E               	movwf	create_name@i+1,c
  4122  0039F8  0E08               	movlw	8
  4123  0039FA  6E1D               	movwf	create_name@i,c
  4124  0039FC  0E00               	movlw	0
  4125  0039FE  6E17               	movwf	create_name@ni+1,c
  4126  003A00  0E0B               	movlw	11
  4127  003A02  6E16               	movwf	create_name@ni,c
  4128                           
  4129                           ;ff.c: 1997:    b <<= 2; continue;
  4130  003A04  90D8               	bcf	status,0,c
  4131  003A06  3615               	rlcf	create_name@b,f,c
  4132  003A08  90D8               	bcf	status,0,c
  4133  003A0A  3615               	rlcf	create_name@b,f,c
  4134  003A0C  D7C4               	goto	l5073
  4135  003A0E                     l5099:
  4136                           
  4137                           ;ff.c: 1999:   if (c >= 0x80) {
  4138  003A0E  0E7F               	movlw	127
  4139  003A10  641F               	cpfsgt	create_name@c,c
  4140  003A12  D002               	goto	l496
  4141                           
  4142                           ;ff.c: 2000:    b |= 3;
  4143  003A14  0E03               	movlw	3
  4144  003A16  1215               	iorwf	create_name@b,f,c
  4145  003A18                     l496:
  4146                           
  4147                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4148  003A18  0E80               	movlw	128
  4149  003A1A  641F               	cpfsgt	create_name@c,c
  4150  003A1C  D003               	goto	u6640
  4151  003A1E  0E9F               	movlw	159
  4152  003A20  641F               	cpfsgt	create_name@c,c
  4153  003A22  D006               	goto	u6660
  4154  003A24                     u6640:
  4155  003A24  0EDF               	movlw	223
  4156  003A26  641F               	cpfsgt	create_name@c,c
  4157  003A28  D043               	goto	l5133
  4158  003A2A  0EFD               	movlw	253
  4159  003A2C  601F               	cpfslt	create_name@c,c
  4160  003A2E  D040               	goto	l5133
  4161  003A30                     u6660:
  4162                           
  4163                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4164  003A30  5013               	movf	create_name@si,w,c
  4165  003A32  2418               	addwf	create_name@p,w,c
  4166  003A34  6E0D               	movwf	??_create_name& (0+255),c
  4167  003A36  5014               	movf	create_name@si+1,w,c
  4168  003A38  2019               	addwfc	create_name@p+1,w,c
  4169  003A3A  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4170  003A3C  C00D  FFF6         	movff	??_create_name,tblptrl
  4171  003A40  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4172  003A44                     	if	0	;tblptru may be non-zero
  4173  003A44                     	endif
  4174  003A44                     	if	0	;tblptru may be non-zero
  4175  003A44                     	endif
  4176  003A44  0008               	tblrd		*
  4177  003A46  CFF5 F01A          	movff	tablat,create_name@d
  4178  003A4A  4A13               	infsnz	create_name@si,f,c
  4179  003A4C  2A14               	incf	create_name@si+1,f,c
  4180                           
  4181                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4182  003A4E  0E3F               	movlw	63
  4183  003A50  641A               	cpfsgt	create_name@d,c
  4184  003A52  D003               	goto	u6680
  4185  003A54  0E7E               	movlw	126
  4186  003A56  641A               	cpfsgt	create_name@d,c
  4187  003A58  D006               	goto	u6700
  4188  003A5A                     u6680:
  4189  003A5A  0E7F               	movlw	127
  4190  003A5C  641A               	cpfsgt	create_name@d,c
  4191  003A5E  D7C8               	goto	u6610
  4192  003A60  0EFD               	movlw	253
  4193  003A62  601A               	cpfslt	create_name@d,c
  4194  003A64  D7C5               	goto	u6610
  4195  003A66                     u6700:
  4196  003A66  0EFF               	movlw	255
  4197  003A68  6E0D               	movwf	??_create_name& (0+255),c
  4198  003A6A  0EFF               	movlw	255
  4199  003A6C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4200  003A6E  C016  F00F         	movff	create_name@ni,??_create_name+2
  4201  003A72  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4202  003A76  500D               	movf	??_create_name,w,c
  4203  003A78  260F               	addwf	??_create_name+2,f,c
  4204  003A7A  500E               	movf	??_create_name+1,w,c
  4205  003A7C  2210               	addwfc	??_create_name+3,f,c
  4206  003A7E  500F               	movf	??_create_name+2,w,c
  4207  003A80  5C1D               	subwf	create_name@i,w,c
  4208  003A82  5010               	movf	??_create_name+3,w,c
  4209  003A84  581E               	subwfb	create_name@i+1,w,c
  4210  003A86  B0D8               	btfsc	status,0,c
  4211  003A88  D7B3               	goto	u6610
  4212                           
  4213                           ;ff.c: 2013:    sfn[i++] = c;
  4214  003A8A  501D               	movf	create_name@i,w,c
  4215  003A8C  241B               	addwf	create_name@sfn,w,c
  4216  003A8E  6ED9               	movwf	fsr2l,c
  4217  003A90  501E               	movf	create_name@i+1,w,c
  4218  003A92  201C               	addwfc	create_name@sfn+1,w,c
  4219  003A94  6EDA               	movwf	fsr2h,c
  4220  003A96  C01F  FFDF         	movff	create_name@c,indf2
  4221  003A9A  4A1D               	infsnz	create_name@i,f,c
  4222  003A9C  2A1E               	incf	create_name@i+1,f,c
  4223                           
  4224                           ;ff.c: 2014:    sfn[i++] = d;
  4225  003A9E  501D               	movf	create_name@i,w,c
  4226  003AA0  241B               	addwf	create_name@sfn,w,c
  4227  003AA2  6ED9               	movwf	fsr2l,c
  4228  003AA4  501E               	movf	create_name@i+1,w,c
  4229  003AA6  201C               	addwfc	create_name@sfn+1,w,c
  4230  003AA8  6EDA               	movwf	fsr2h,c
  4231  003AAA  C01A  FFDF         	movff	create_name@d,indf2
  4232  003AAE  D026               	goto	l5155
  4233  003AB0                     l5133:
  4234                           
  4235                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4236  003AB0  0E15               	movlw	low STR_5
  4237  003AB2  6E01               	movwf	chk_chr@str,c
  4238  003AB4  0E08               	movlw	high STR_5
  4239  003AB6  6E02               	movwf	chk_chr@str+1,c
  4240  003AB8  C01F  F003         	movff	create_name@c,chk_chr@chr
  4241  003ABC  6A04               	clrf	chk_chr@chr+1,c
  4242  003ABE  ECC2  F029         	call	_chk_chr	;wreg free
  4243  003AC2  5001               	movf	?_chk_chr,w,c
  4244  003AC4  1002               	iorwf	?_chk_chr+1,w,c
  4245  003AC6  A4D8               	btfss	status,2,c
  4246  003AC8  D793               	goto	u6610
  4247                           
  4248                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4249  003ACA  0E40               	movlw	64
  4250  003ACC  641F               	cpfsgt	create_name@c,c
  4251  003ACE  D005               	goto	l5145
  4252  003AD0  0E5B               	movlw	91
  4253  003AD2  601F               	cpfslt	create_name@c,c
  4254  003AD4  D002               	goto	l5145
  4255                           
  4256                           ;ff.c: 2019:     b |= 2;
  4257  003AD6  8215               	bsf	create_name@b,1,c
  4258                           
  4259                           ;ff.c: 2020:    } else {
  4260  003AD8  D009               	goto	l5153
  4261  003ADA                     l5145:
  4262                           
  4263                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4264  003ADA  0E60               	movlw	96
  4265  003ADC  641F               	cpfsgt	create_name@c,c
  4266  003ADE  D006               	goto	l5153
  4267  003AE0  0E7B               	movlw	123
  4268  003AE2  601F               	cpfslt	create_name@c,c
  4269  003AE4  D003               	goto	l5153
  4270                           
  4271                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4272  003AE6  8015               	bsf	create_name@b,0,c
  4273  003AE8  0E20               	movlw	32
  4274  003AEA  5E1F               	subwf	create_name@c,f,c
  4275  003AEC                     l5153:
  4276                           
  4277                           ;ff.c: 2025:    sfn[i++] = c;
  4278  003AEC  501D               	movf	create_name@i,w,c
  4279  003AEE  241B               	addwf	create_name@sfn,w,c
  4280  003AF0  6ED9               	movwf	fsr2l,c
  4281  003AF2  501E               	movf	create_name@i+1,w,c
  4282  003AF4  201C               	addwfc	create_name@sfn+1,w,c
  4283  003AF6  6EDA               	movwf	fsr2h,c
  4284  003AF8  C01F  FFDF         	movff	create_name@c,indf2
  4285  003AFC                     l5155:
  4286  003AFC  4A1D               	infsnz	create_name@i,f,c
  4287  003AFE  2A1E               	incf	create_name@i+1,f,c
  4288  003B00  D74A               	goto	l5073
  4289  003B02                     l5157:
  4290                           
  4291                           ;ff.c: 2028:  *path = &p[si];
  4292  003B02  5013               	movf	create_name@si,w,c
  4293  003B04  2418               	addwf	create_name@p,w,c
  4294  003B06  6E0D               	movwf	??_create_name& (0+255),c
  4295  003B08  5014               	movf	create_name@si+1,w,c
  4296  003B0A  2019               	addwfc	create_name@p+1,w,c
  4297  003B0C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4298  003B0E  C00B  FFD9         	movff	create_name@path,fsr2l
  4299  003B12  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4300  003B16  C00D  FFDE         	movff	??_create_name,postinc2
  4301  003B1A  C00E  FFDD         	movff	??_create_name+1,postdec2
  4302                           
  4303                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4304  003B1E  0E20               	movlw	32
  4305  003B20  641F               	cpfsgt	create_name@c,c
  4306  003B22  D004               	goto	l5163
  4307  003B24  0E00               	movlw	0
  4308  003B26  6E12               	movwf	_create_name$775+1,c
  4309  003B28  0E00               	movlw	0
  4310  003B2A  D003               	goto	L5
  4311  003B2C                     l5163:
  4312  003B2C  0E00               	movlw	0
  4313  003B2E  6E12               	movwf	_create_name$775+1,c
  4314  003B30  0E04               	movlw	4
  4315  003B32                     L5:
  4316  003B32  6E11               	movwf	_create_name$775,c
  4317  003B34  C011  F01F         	movff	_create_name$775,create_name@c
  4318                           
  4319                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4320  003B38  501D               	movf	create_name@i,w,c
  4321  003B3A  101E               	iorwf	create_name@i+1,w,c
  4322  003B3C  B4D8               	btfsc	status,2,c
  4323  003B3E  D758               	goto	u6610
  4324                           
  4325                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4326  003B40  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4327  003B44  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4328  003B48  0EE5               	movlw	229
  4329  003B4A  18DE               	xorwf	postinc2,w,c
  4330  003B4C  A4D8               	btfss	status,2,c
  4331  003B4E  D006               	goto	l5177
  4332  003B50  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4333  003B54  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4334  003B58  0E05               	movlw	5
  4335  003B5A  6EDF               	movwf	indf2,c
  4336  003B5C                     l5177:
  4337                           
  4338                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4339  003B5C  0E08               	movlw	8
  4340  003B5E  1816               	xorwf	create_name@ni,w,c
  4341  003B60  1017               	iorwf	create_name@ni+1,w,c
  4342  003B62  A4D8               	btfss	status,2,c
  4343  003B64  D004               	goto	l520
  4344  003B66  90D8               	bcf	status,0,c
  4345  003B68  3615               	rlcf	create_name@b,f,c
  4346  003B6A  90D8               	bcf	status,0,c
  4347  003B6C  3615               	rlcf	create_name@b,f,c
  4348  003B6E                     l520:
  4349                           
  4350                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4351  003B6E  5015               	movf	create_name@b,w,c
  4352  003B70  0B03               	andlw	3
  4353  003B72  06E8               	decf	wreg,f,c
  4354  003B74  B4D8               	btfsc	status,2,c
  4355  003B76  881F               	bsf	create_name@c,4,c
  4356                           
  4357                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4358  003B78  5015               	movf	create_name@b,w,c
  4359  003B7A  0B0C               	andlw	12
  4360  003B7C  0A04               	xorlw	4
  4361  003B7E  B4D8               	btfsc	status,2,c
  4362  003B80  861F               	bsf	create_name@c,3,c
  4363                           
  4364                           ;ff.c: 2038:  sfn[11] = c;
  4365  003B82  EE20 F00B          	lfsr	2,11
  4366  003B86  501B               	movf	create_name@sfn,w,c
  4367  003B88  26D9               	addwf	fsr2l,f,c
  4368  003B8A  501C               	movf	create_name@sfn+1,w,c
  4369  003B8C  22DA               	addwfc	fsr2h,f,c
  4370  003B8E  C01F  FFDF         	movff	create_name@c,indf2
  4371                           
  4372                           ;ff.c: 2040:  return FR_OK;
  4373  003B92  0E00               	movlw	0
  4374  003B94  0012               	return		;funcret
  4375  003B96                     __end_of_create_name:
  4376                           	opt callstack 0
  4377                           
  4378 ;; *************** function _chk_chr *****************
  4379 ;; Defined at:
  4380 ;;		line 543 in file "ff.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4383 ;;		 -> STR_6(15), 
  4384 ;;  chr             2    2[COMRAM] int 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  2    0[COMRAM] int 
  4389 ;; Registers used:
  4390 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4396 ;;      Params:         4       0       0       0       0       0       0       0       0
  4397 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4398 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4399 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4400 ;;Total ram usage:        6 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_create_name
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text10
  4410  005384                     __ptext10:
  4411                           	opt callstack 0
  4412  005384                     _chk_chr:
  4413                           	opt callstack 26
  4414                           
  4415                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4416                           
  4417                           ;incstack = 0
  4418  005384  D002               	goto	l4645
  4419  005386                     l4643:
  4420  005386  4A01               	infsnz	chk_chr@str,f,c
  4421  005388  2A02               	incf	chk_chr@str+1,f,c
  4422  00538A                     l4645:
  4423  00538A  C001  FFF6         	movff	chk_chr@str,tblptrl
  4424  00538E  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4425  005392                     	if	0	;tblptru may be non-zero
  4426  005392                     	endif
  4427  005392                     	if	0	;tblptru may be non-zero
  4428  005392                     	endif
  4429  005392  0008               	tblrd		*
  4430  005394  50F5               	movf	tablat,w,c
  4431  005396  0900               	iorlw	0
  4432  005398  B4D8               	btfsc	status,2,c
  4433  00539A  D00F               	goto	u5790
  4434  00539C  C001  FFF6         	movff	chk_chr@str,tblptrl
  4435  0053A0  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4436  0053A4                     	if	0	;tblptru may be non-zero
  4437  0053A4                     	endif
  4438  0053A4                     	if	0	;tblptru may be non-zero
  4439  0053A4                     	endif
  4440  0053A4  0008               	tblrd		*
  4441  0053A6  50F5               	movf	tablat,w,c
  4442  0053A8  6E05               	movwf	??_chk_chr& (0+255),c
  4443  0053AA  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4444  0053AC  5003               	movf	chk_chr@chr,w,c
  4445  0053AE  1805               	xorwf	??_chk_chr,w,c
  4446  0053B0  E1EA               	bnz	l4643
  4447  0053B2  5004               	movf	chk_chr@chr+1,w,c
  4448  0053B4  1806               	xorwf	??_chk_chr+1,w,c
  4449  0053B6  A4D8               	btfss	status,2,c
  4450  0053B8  D7E6               	goto	l4643
  4451  0053BA                     u5790:
  4452                           
  4453                           ;ff.c: 545:  return *str;
  4454  0053BA  C001  FFF6         	movff	chk_chr@str,tblptrl
  4455  0053BE  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4456  0053C2                     	if	0	;tblptru may be non-zero
  4457  0053C2                     	endif
  4458  0053C2                     	if	0	;tblptru may be non-zero
  4459  0053C2                     	endif
  4460  0053C2  0008               	tblrd		*
  4461  0053C4  50F5               	movf	tablat,w,c
  4462  0053C6  6E01               	movwf	?_chk_chr,c
  4463  0053C8  6A02               	clrf	?_chk_chr+1,c
  4464  0053CA  0012               	return		;funcret
  4465  0053CC                     __end_of_chk_chr:
  4466                           	opt callstack 0
  4467                           
  4468 ;; *************** function _dir_register *****************
  4469 ;; Defined at:
  4470 ;;		line 1578 in file "ff.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  dp              2   42[BANK0 ] PTR struct .
  4473 ;;		 -> f_open@dj(22), 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  res             1   44[BANK0 ] enum E93
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  1    wreg      enum E93
  4478 ;; Registers used:
  4479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4485 ;;      Params:         0       2       0       0       0       0       0       0       0
  4486 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4488 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4489 ;;Total ram usage:        3 bytes
  4490 ;; Hardware stack levels used:    1
  4491 ;; Hardware stack levels required when called:   12
  4492 ;; This function calls:
  4493 ;;		_dir_alloc
  4494 ;;		_mem_cpy
  4495 ;;		_mem_set
  4496 ;;		_move_window
  4497 ;; This function is called by:
  4498 ;;		_f_open
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text11
  4503  004AAC                     __ptext11:
  4504                           	opt callstack 0
  4505  004AAC                     _dir_register:
  4506                           	opt callstack 16
  4507                           
  4508                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4509                           
  4510                           ;incstack = 0
  4511  004AAC  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4512  004AB0  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4513  004AB4  0E00               	movlw	0
  4514  004AB6  0100               	movlb	0	; () banked
  4515  004AB8  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4516  004ABA  0E01               	movlw	1
  4517  004ABC  6F82               	movwf	dir_alloc@nent& (0+255),b
  4518  004ABE  EC83  F023         	call	_dir_alloc	;wreg free
  4519  004AC2  0100               	movlb	0	; () banked
  4520  004AC4  6F8C               	movwf	dir_register@res& (0+255),b
  4521                           
  4522                           ; BSR set to: 0
  4523                           ;ff.c: 1632:  if (res == FR_OK) {
  4524  004AC6  518C               	movf	dir_register@res& (0+255),w,b
  4525  004AC8  A4D8               	btfss	status,2,c
  4526  004ACA  D058               	goto	l5359
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4530  004ACC  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4531  004AD0  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4532  004AD4  CFDE F030          	movff	postinc2,move_window@fs
  4533  004AD8  CFDD F031          	movff	postdec2,move_window@fs+1
  4534  004ADC  EE20 F00E          	lfsr	2,14
  4535  004AE0  518A               	movf	dir_register@dp& (0+255),w,b
  4536  004AE2  26D9               	addwf	fsr2l,f,c
  4537  004AE4  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4538  004AE6  22DA               	addwfc	fsr2h,f,c
  4539  004AE8  CFDE F032          	movff	postinc2,move_window@sector
  4540  004AEC  CFDE F033          	movff	postinc2,move_window@sector+1
  4541  004AF0  CFDE F034          	movff	postinc2,move_window@sector+2
  4542  004AF4  CFDE F035          	movff	postinc2,move_window@sector+3
  4543  004AF8  EC39  F027         	call	_move_window	;wreg free
  4544  004AFC  0100               	movlb	0	; () banked
  4545  004AFE  6F8C               	movwf	dir_register@res& (0+255),b
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;ff.c: 1634:   if (res == FR_OK) {
  4549  004B00  518C               	movf	dir_register@res& (0+255),w,b
  4550  004B02  A4D8               	btfss	status,2,c
  4551  004B04  D03B               	goto	l5359
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4555  004B06  EE20 F012          	lfsr	2,18
  4556  004B0A  518A               	movf	dir_register@dp& (0+255),w,b
  4557  004B0C  26D9               	addwf	fsr2l,f,c
  4558  004B0E  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4559  004B10  22DA               	addwfc	fsr2h,f,c
  4560  004B12  CFDE F001          	movff	postinc2,mem_set@dst
  4561  004B16  CFDD F002          	movff	postdec2,mem_set@dst+1
  4562  004B1A  0E00               	movlw	0
  4563  004B1C  6E04               	movwf	mem_set@val+1,c
  4564  004B1E  0E00               	movlw	0
  4565  004B20  6E03               	movwf	mem_set@val,c
  4566  004B22  0E00               	movlw	0
  4567  004B24  6E06               	movwf	mem_set@cnt+1,c
  4568  004B26  0E20               	movlw	32
  4569  004B28  6E05               	movwf	mem_set@cnt,c
  4570  004B2A  EC5E  F02A         	call	_mem_set	;wreg free
  4571                           
  4572                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4573  004B2E  0100               	movlb	0	; () banked
  4574  004B30  EE20 F012          	lfsr	2,18
  4575  004B34  518A               	movf	dir_register@dp& (0+255),w,b
  4576  004B36  26D9               	addwf	fsr2l,f,c
  4577  004B38  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4578  004B3A  22DA               	addwfc	fsr2h,f,c
  4579  004B3C  CFDE F001          	movff	postinc2,mem_cpy@dst
  4580  004B40  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4581  004B44  EE20 F014          	lfsr	2,20
  4582  004B48  518A               	movf	dir_register@dp& (0+255),w,b
  4583  004B4A  26D9               	addwf	fsr2l,f,c
  4584  004B4C  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4585  004B4E  22DA               	addwfc	fsr2h,f,c
  4586  004B50  CFDE F003          	movff	postinc2,mem_cpy@src
  4587  004B54  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4588  004B58  0E00               	movlw	0
  4589  004B5A  6E06               	movwf	mem_cpy@cnt+1,c
  4590  004B5C  0E0B               	movlw	11
  4591  004B5E  6E05               	movwf	mem_cpy@cnt,c
  4592  004B60  EC27  F026         	call	_mem_cpy	;wreg free
  4593                           
  4594                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4595  004B64  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4596  004B68  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4597  004B6C  EE10 F004          	lfsr	1,4
  4598  004B70  50DE               	movf	postinc2,w,c
  4599  004B72  26E1               	addwf	fsr1l,f,c
  4600  004B74  50DD               	movf	postdec2,w,c
  4601  004B76  22E2               	addwfc	fsr1h,f,c
  4602  004B78  0E01               	movlw	1
  4603  004B7A  6EE7               	movwf	indf1,c
  4604  004B7C                     l5359:
  4605                           
  4606                           ;ff.c: 1644:  return res;
  4607  004B7C  0100               	movlb	0	; () banked
  4608  004B7E  518C               	movf	dir_register@res& (0+255),w,b
  4609                           
  4610                           ; BSR set to: 0
  4611  004B80  0012               	return		;funcret
  4612  004B82                     __end_of_dir_register:
  4613                           	opt callstack 0
  4614                           
  4615 ;; *************** function _mem_cpy *****************
  4616 ;; Defined at:
  4617 ;;		line 507 in file "ff.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  dst             2    0[COMRAM] PTR void 
  4620 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4621 ;;  src             2    2[COMRAM] PTR const void 
  4622 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4623 ;;  cnt             2    4[COMRAM] unsigned short 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4626 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4627 ;;  d               2    8[COMRAM] PTR unsigned char 
  4628 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4638 ;;      Params:         6       0       0       0       0       0       0       0       0
  4639 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4640 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4641 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4642 ;;Total ram usage:       12 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; This function calls:
  4645 ;;		Nothing
  4646 ;; This function is called by:
  4647 ;;		_dir_register
  4648 ;;		_f_write
  4649 ;;		_f_read
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text12
  4654  004C4E                     __ptext12:
  4655                           	opt callstack 0
  4656  004C4E                     _mem_cpy:
  4657                           	opt callstack 28
  4658                           
  4659                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;incstack = 0
  4663  004C4E  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4664  004C52  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4665                           
  4666                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4667  004C56  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4668  004C5A  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4669                           
  4670                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4671  004C5E  D02B               	goto	l4937
  4672  004C60                     l4929:
  4673                           
  4674                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4675  004C60  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4676  004C64  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4677  004C68  6AF8               	clrf	tblptru,c
  4678  004C6A  0E07               	movlw	(high __ramtop+-1)
  4679  004C6C  64F7               	cpfsgt	tblptrh,c
  4680  004C6E  D007               	bra	u6317
  4681  004C70  0009               	tblrd		*+
  4682  004C72  CFF5 F007          	movff	tablat,??_mem_cpy
  4683  004C76  0009               	tblrd		*+
  4684  004C78  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4685  004C7C  D008               	bra	u6310
  4686  004C7E                     u6317:
  4687  004C7E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4688  004C82  CFF7 FFEA          	movff	tblptrh,fsr0h
  4689  004C86  CFEE F007          	movff	postinc0,??_mem_cpy
  4690  004C8A  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4691  004C8E                     u6310:
  4692  004C8E  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4693  004C92  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4694  004C96  C007  FFDE         	movff	??_mem_cpy,postinc2
  4695  004C9A  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4696                           
  4697                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4698  004C9E  0E02               	movlw	2
  4699  004CA0  2609               	addwf	mem_cpy@d,f,c
  4700  004CA2  0E00               	movlw	0
  4701  004CA4  220A               	addwfc	mem_cpy@d+1,f,c
  4702  004CA6  0E02               	movlw	2
  4703  004CA8  260B               	addwf	mem_cpy@s,f,c
  4704  004CAA  0E00               	movlw	0
  4705  004CAC  220C               	addwfc	mem_cpy@s+1,f,c
  4706                           
  4707                           ;ff.c: 515:   cnt -= sizeof (int);
  4708  004CAE  0E02               	movlw	2
  4709  004CB0  5E05               	subwf	mem_cpy@cnt,f,c
  4710  004CB2  0E00               	movlw	0
  4711  004CB4  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4712  004CB6                     l4937:
  4713                           
  4714                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4715  004CB6  5006               	movf	mem_cpy@cnt+1,w,c
  4716  004CB8  E1D3               	bnz	l4929
  4717  004CBA  0E02               	movlw	2
  4718  004CBC  5C05               	subwf	mem_cpy@cnt,w,c
  4719  004CBE  A0D8               	btfss	status,0,c
  4720  004CC0  D01A               	goto	l4945
  4721  004CC2  D7CE               	goto	l4929
  4722  004CC4                     l4939:
  4723                           
  4724                           ;ff.c: 519:   *d++ = *s++;
  4725  004CC4  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4726  004CC8  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4727  004CCC  6AF8               	clrf	tblptru,c
  4728  004CCE  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4729  004CD2  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4730  004CD6  0E07               	movlw	(high __ramtop+-1)
  4731  004CD8  64F7               	cpfsgt	tblptrh,c
  4732  004CDA  D003               	bra	u6337
  4733  004CDC  0008               	tblrd		*
  4734  004CDE  50F5               	movf	tablat,w,c
  4735  004CE0  D005               	bra	u6330
  4736  004CE2                     u6337:
  4737  004CE2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4738  004CE6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4739  004CEA  50EF               	movf	indf0,w,c
  4740  004CEC                     u6330:
  4741  004CEC  6EDF               	movwf	indf2,c
  4742  004CEE  4A0B               	infsnz	mem_cpy@s,f,c
  4743  004CF0  2A0C               	incf	mem_cpy@s+1,f,c
  4744  004CF2  4A09               	infsnz	mem_cpy@d,f,c
  4745  004CF4  2A0A               	incf	mem_cpy@d+1,f,c
  4746  004CF6                     l4945:
  4747                           
  4748                           ;ff.c: 518:  while (cnt--)
  4749  004CF6  0605               	decf	mem_cpy@cnt,f,c
  4750  004CF8  A0D8               	btfss	status,0,c
  4751  004CFA  0606               	decf	mem_cpy@cnt+1,f,c
  4752  004CFC  2805               	incf	mem_cpy@cnt,w,c
  4753  004CFE  E1E2               	bnz	l4939
  4754  004D00  2806               	incf	mem_cpy@cnt+1,w,c
  4755  004D02  B4D8               	btfsc	status,2,c
  4756  004D04  0012               	return	
  4757  004D06  D7DE               	goto	l4939
  4758  004D08                     __end_of_mem_cpy:
  4759                           	opt callstack 0
  4760                           
  4761 ;; *************** function _dir_alloc *****************
  4762 ;; Defined at:
  4763 ;;		line 1199 in file "ff.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  dp              2   32[BANK0 ] PTR struct .
  4766 ;;		 -> f_open@dj(22), 
  4767 ;;  nent            2   34[BANK0 ] unsigned short 
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;  n               2   39[BANK0 ] unsigned short 
  4770 ;;  res             1   41[BANK0 ] enum E93
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      enum E93
  4773 ;; Registers used:
  4774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4780 ;;      Params:         0       4       0       0       0       0       0       0       0
  4781 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4782 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4783 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4784 ;;Total ram usage:       10 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:   11
  4787 ;; This function calls:
  4788 ;;		_dir_next
  4789 ;;		_dir_sdi
  4790 ;;		_move_window
  4791 ;; This function is called by:
  4792 ;;		_dir_register
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           	psect	text13
  4797  004706                     __ptext13:
  4798                           	opt callstack 0
  4799  004706                     _dir_alloc:
  4800                           	opt callstack 16
  4801                           
  4802                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4803                           
  4804                           ;incstack = 0
  4805  004706  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4806  00470A  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4807  00470E  0E00               	movlw	0
  4808  004710  6E59               	movwf	dir_sdi@idx+1,c
  4809  004712  0E00               	movlw	0
  4810  004714  6E58               	movwf	dir_sdi@idx,c
  4811  004716  EC28  F01B         	call	_dir_sdi	;wreg free
  4812  00471A  0100               	movlb	0	; () banked
  4813  00471C  6F89               	movwf	dir_alloc@res& (0+255),b
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;ff.c: 1209:  if (res == FR_OK) {
  4817  00471E  5189               	movf	dir_alloc@res& (0+255),w,b
  4818  004720  A4D8               	btfss	status,2,c
  4819  004722  D061               	goto	u6440
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;ff.c: 1210:   n = 0;
  4823  004724  0E00               	movlw	0
  4824  004726  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4825  004728  0E00               	movlw	0
  4826  00472A  6F87               	movwf	dir_alloc@n& (0+255),b
  4827  00472C                     l4985:
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4831  00472C  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4832  004730  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4833  004734  CFDE F030          	movff	postinc2,move_window@fs
  4834  004738  CFDD F031          	movff	postdec2,move_window@fs+1
  4835  00473C  EE20 F00E          	lfsr	2,14
  4836  004740  5180               	movf	dir_alloc@dp& (0+255),w,b
  4837  004742  26D9               	addwf	fsr2l,f,c
  4838  004744  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4839  004746  22DA               	addwfc	fsr2h,f,c
  4840  004748  CFDE F032          	movff	postinc2,move_window@sector
  4841  00474C  CFDE F033          	movff	postinc2,move_window@sector+1
  4842  004750  CFDE F034          	movff	postinc2,move_window@sector+2
  4843  004754  CFDE F035          	movff	postinc2,move_window@sector+3
  4844  004758  EC39  F027         	call	_move_window	;wreg free
  4845  00475C  0100               	movlb	0	; () banked
  4846  00475E  6F89               	movwf	dir_alloc@res& (0+255),b
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;ff.c: 1213:    if (res != FR_OK) break;
  4850  004760  5189               	movf	dir_alloc@res& (0+255),w,b
  4851  004762  A4D8               	btfss	status,2,c
  4852  004764  D040               	goto	u6440
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4856  004766  EE20 F012          	lfsr	2,18
  4857  00476A  5180               	movf	dir_alloc@dp& (0+255),w,b
  4858  00476C  26D9               	addwf	fsr2l,f,c
  4859  00476E  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4860  004770  22DA               	addwfc	fsr2h,f,c
  4861  004772  CFDE F084          	movff	postinc2,??_dir_alloc
  4862  004776  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4863  00477A  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4864  00477E  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4865  004782  0EE5               	movlw	229
  4866  004784  18DE               	xorwf	postinc2,w,c
  4867  004786  B4D8               	btfsc	status,2,c
  4868  004788  D011               	goto	u6420
  4869                           
  4870                           ; BSR set to: 0
  4871  00478A  EE20 F012          	lfsr	2,18
  4872  00478E  5180               	movf	dir_alloc@dp& (0+255),w,b
  4873  004790  26D9               	addwf	fsr2l,f,c
  4874  004792  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4875  004794  22DA               	addwfc	fsr2h,f,c
  4876  004796  CFDE F084          	movff	postinc2,??_dir_alloc
  4877  00479A  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4878  00479E  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4879  0047A2  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4880  0047A6  50DF               	movf	indf2,w,c
  4881  0047A8  A4D8               	btfss	status,2,c
  4882  0047AA  D00A               	goto	l4999
  4883  0047AC                     u6420:
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;ff.c: 1215:     if (++n == nent) break;
  4887  0047AC  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  4888  0047AE  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  4889  0047B0  5182               	movf	dir_alloc@nent& (0+255),w,b
  4890  0047B2  1987               	xorwf	dir_alloc@n& (0+255),w,b
  4891  0047B4  E109               	bnz	l5001
  4892  0047B6  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  4893  0047B8  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  4894  0047BA  B4D8               	btfsc	status,2,c
  4895  0047BC  D014               	goto	u6440
  4896  0047BE  D004               	goto	l5001
  4897  0047C0                     l4999:
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;ff.c: 1217:     n = 0;
  4901  0047C0  0E00               	movlw	0
  4902  0047C2  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4903  0047C4  0E00               	movlw	0
  4904  0047C6  6F87               	movwf	dir_alloc@n& (0+255),b
  4905  0047C8                     l5001:
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;ff.c: 1219:    res = dir_next(dp, 1);
  4909  0047C8  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  4910  0047CC  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  4911  0047D0  0E00               	movlw	0
  4912  0047D2  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4913  0047D4  0E01               	movlw	1
  4914  0047D6  6F6F               	movwf	dir_next@stretch& (0+255),b
  4915  0047D8  EC0C  F014         	call	_dir_next	;wreg free
  4916  0047DC  0100               	movlb	0	; () banked
  4917  0047DE  6F89               	movwf	dir_alloc@res& (0+255),b
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;ff.c: 1220:   } while (res == FR_OK);
  4921  0047E0  5189               	movf	dir_alloc@res& (0+255),w,b
  4922  0047E2  B4D8               	btfsc	status,2,c
  4923  0047E4  D7A3               	goto	l4985
  4924  0047E6                     u6440:
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  4928  0047E6  0E04               	movlw	4
  4929  0047E8  1989               	xorwf	dir_alloc@res& (0+255),w,b
  4930  0047EA  A4D8               	btfss	status,2,c
  4931  0047EC  D002               	goto	l455
  4932                           
  4933                           ; BSR set to: 0
  4934  0047EE  0E07               	movlw	7
  4935  0047F0  6F89               	movwf	dir_alloc@res& (0+255),b
  4936  0047F2                     l455:
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;ff.c: 1223:  return res;
  4940  0047F2  5189               	movf	dir_alloc@res& (0+255),w,b
  4941                           
  4942                           ; BSR set to: 0
  4943  0047F4  0012               	return		;funcret
  4944  0047F6                     __end_of_dir_alloc:
  4945                           	opt callstack 0
  4946                           
  4947 ;; *************** function _dir_sdi *****************
  4948 ;; Defined at:
  4949 ;;		line 1080 in file "ff.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  dp              2   85[COMRAM] PTR struct .
  4952 ;;		 -> f_open@dj(22), 
  4953 ;;  idx             2   87[COMRAM] unsigned short 
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  clst            4   13[BANK0 ] unsigned long 
  4956 ;;  sect            4    9[BANK0 ] unsigned long 
  4957 ;;  ic              2    7[BANK0 ] unsigned short 
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      enum E93
  4960 ;; Registers used:
  4961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 0/0
  4964 ;;		On exit  : 0/0
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4967 ;;      Params:         4       0       0       0       0       0       0       0       0
  4968 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4969 ;;      Temps:          0       7       0       0       0       0       0       0       0
  4970 ;;      Totals:         4      17       0       0       0       0       0       0       0
  4971 ;;Total ram usage:       21 bytes
  4972 ;; Hardware stack levels used:    1
  4973 ;; Hardware stack levels required when called:    9
  4974 ;; This function calls:
  4975 ;;		_clust2sect
  4976 ;;		_get_fat
  4977 ;; This function is called by:
  4978 ;;		_dir_alloc
  4979 ;;		_dir_find
  4980 ;;		_follow_path
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text14
  4985  003650                     __ptext14:
  4986                           	opt callstack 0
  4987  003650                     _dir_sdi:
  4988                           	opt callstack 18
  4989                           
  4990                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;incstack = 0
  4994  003650  EE20 F004          	lfsr	2,4
  4995  003654  5056               	movf	dir_sdi@dp,w,c
  4996  003656  26D9               	addwf	fsr2l,f,c
  4997  003658  5057               	movf	dir_sdi@dp+1,w,c
  4998  00365A  22DA               	addwfc	fsr2h,f,c
  4999  00365C  C058  FFDE         	movff	dir_sdi@idx,postinc2
  5000  003660  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  5001                           
  5002                           ;ff.c: 1090:  clst = dp->sclust;
  5003  003664  EE20 F006          	lfsr	2,6
  5004  003668  5056               	movf	dir_sdi@dp,w,c
  5005  00366A  26D9               	addwf	fsr2l,f,c
  5006  00366C  5057               	movf	dir_sdi@dp+1,w,c
  5007  00366E  22DA               	addwfc	fsr2h,f,c
  5008  003670  CFDE F06D          	movff	postinc2,dir_sdi@clst
  5009  003674  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  5010  003678  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  5011  00367C  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  5012                           
  5013                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  5014  003680  0100               	movlb	0	; () banked
  5015  003682  056D               	decf	dir_sdi@clst& (0+255),w,b
  5016  003684  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5017  003686  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5018  003688  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5019  00368A  B4D8               	btfsc	status,2,c
  5020  00368C  D014               	goto	u5810
  5021                           
  5022                           ; BSR set to: 0
  5023  00368E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5024  003692  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5025  003696  EE10 F012          	lfsr	1,18
  5026  00369A  50DE               	movf	postinc2,w,c
  5027  00369C  26E1               	addwf	fsr1l,f,c
  5028  00369E  50DD               	movf	postdec2,w,c
  5029  0036A0  22E2               	addwfc	fsr1h,f,c
  5030  0036A2  50E6               	movf	postinc1,w,c
  5031  0036A4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5032  0036A6  50E6               	movf	postinc1,w,c
  5033  0036A8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5034  0036AA  50E6               	movf	postinc1,w,c
  5035  0036AC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5036  0036AE  50E6               	movf	postinc1,w,c
  5037  0036B0  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5038  0036B2  A0D8               	btfss	status,0,c
  5039  0036B4  D002               	goto	l4663
  5040  0036B6                     u5810:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;ff.c: 1092:   return FR_INT_ERR;
  5044  0036B6  0E02               	movlw	2
  5045  0036B8  0012               	return	
  5046  0036BA                     l4663:
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  5050  0036BA  516D               	movf	dir_sdi@clst& (0+255),w,b
  5051  0036BC  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5052  0036BE  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5053  0036C0  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5054  0036C2  A4D8               	btfss	status,2,c
  5055  0036C4  D022               	goto	l4669
  5056                           
  5057                           ; BSR set to: 0
  5058  0036C6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5059  0036CA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5060  0036CE  CFDE F060          	movff	postinc2,??_dir_sdi
  5061  0036D2  CFDD F061          	movff	postdec2,??_dir_sdi+1
  5062  0036D6  C060  FFD9         	movff	??_dir_sdi,fsr2l
  5063  0036DA  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  5064  0036DE  0E03               	movlw	3
  5065  0036E0  18DE               	xorwf	postinc2,w,c
  5066  0036E2  A4D8               	btfss	status,2,c
  5067  0036E4  D012               	goto	l4669
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5071  0036E6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5072  0036EA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5073  0036EE  EE10 F022          	lfsr	1,34
  5074  0036F2  50DE               	movf	postinc2,w,c
  5075  0036F4  26E1               	addwf	fsr1l,f,c
  5076  0036F6  50DD               	movf	postdec2,w,c
  5077  0036F8  22E2               	addwfc	fsr1h,f,c
  5078  0036FA  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  5079  0036FE  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  5080  003702  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  5081  003706  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  5082  00370A                     l4669:
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;ff.c: 1096:  if (clst == 0) {
  5086  00370A  516D               	movf	dir_sdi@clst& (0+255),w,b
  5087  00370C  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5088  00370E  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5089  003710  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5090  003712  A4D8               	btfss	status,2,c
  5091  003714  D023               	goto	l4679
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5095  003716  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5096  00371A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5097  00371E  EE10 F008          	lfsr	1,8
  5098  003722  50DE               	movf	postinc2,w,c
  5099  003724  26E1               	addwf	fsr1l,f,c
  5100  003726  50DD               	movf	postdec2,w,c
  5101  003728  22E2               	addwfc	fsr1h,f,c
  5102  00372A  50E6               	movf	postinc1,w,c
  5103  00372C  5C58               	subwf	dir_sdi@idx,w,c
  5104  00372E  50E6               	movf	postinc1,w,c
  5105  003730  5859               	subwfb	dir_sdi@idx+1,w,c
  5106  003732  B0D8               	btfsc	status,0,c
  5107  003734  D7C0               	goto	u5810
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5111  003736  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5112  00373A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5113  00373E  EE10 F022          	lfsr	1,34
  5114  003742  50DE               	movf	postinc2,w,c
  5115  003744  26E1               	addwf	fsr1l,f,c
  5116  003746  50DD               	movf	postdec2,w,c
  5117  003748  22E2               	addwfc	fsr1h,f,c
  5118  00374A  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5119  00374E  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5120  003752  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5121  003756  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5122                           
  5123                           ;ff.c: 1100:  }
  5124  00375A  D079               	goto	l4701
  5125  00375C                     l4679:
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5129  00375C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5130  003760  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5131  003764  EE10 F002          	lfsr	1,2
  5132  003768  50DE               	movf	postinc2,w,c
  5133  00376A  26E1               	addwf	fsr1l,f,c
  5134  00376C  50DD               	movf	postdec2,w,c
  5135  00376E  22E2               	addwfc	fsr1h,f,c
  5136  003770  50E7               	movf	indf1,w,c
  5137  003772  6F60               	movwf	??_dir_sdi& (0+255),b
  5138  003774  5160               	movf	??_dir_sdi& (0+255),w,b
  5139  003776  0D10               	mullw	16
  5140  003778  CFF3 F067          	movff	prodl,dir_sdi@ic
  5141  00377C  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5142                           
  5143                           ;ff.c: 1103:   while (idx >= ic) {
  5144  003780  D046               	goto	l413
  5145  003782                     l4681:
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5149  003782  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5150  003786  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5151  00378A  CFDE F03B          	movff	postinc2,get_fat@fs
  5152  00378E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5153  003792  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5154  003796  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5155  00379A  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5156  00379E  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5157  0037A2  EC0F  F016         	call	_get_fat	;wreg free
  5158  0037A6  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5159  0037AA  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5160  0037AE  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5161  0037B2  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5162                           
  5163                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5164  0037B6  0100               	movlb	0	; () banked
  5165  0037B8  296D               	incf	dir_sdi@clst& (0+255),w,b
  5166  0037BA  E109               	bnz	l4689
  5167  0037BC  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5168  0037BE  E107               	bnz	l4689
  5169  0037C0  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5170  0037C2  E105               	bnz	l4689
  5171  0037C4  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5172  0037C6  A4D8               	btfss	status,2,c
  5173  0037C8  D002               	goto	l4689
  5174                           
  5175                           ; BSR set to: 0
  5176  0037CA  0E01               	movlw	1
  5177  0037CC  0012               	return	
  5178  0037CE                     l4689:
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5182  0037CE  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5183  0037D0  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5184  0037D2  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5185  0037D4  E104               	bnz	u5870
  5186  0037D6  0E02               	movlw	2
  5187  0037D8  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5188  0037DA  A0D8               	btfss	status,0,c
  5189  0037DC  D76C               	goto	u5810
  5190  0037DE                     u5870:
  5191                           
  5192                           ; BSR set to: 0
  5193  0037DE  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5194  0037E2  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5195  0037E6  EE10 F012          	lfsr	1,18
  5196  0037EA  50DE               	movf	postinc2,w,c
  5197  0037EC  26E1               	addwf	fsr1l,f,c
  5198  0037EE  50DD               	movf	postdec2,w,c
  5199  0037F0  22E2               	addwfc	fsr1h,f,c
  5200  0037F2  50E6               	movf	postinc1,w,c
  5201  0037F4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5202  0037F6  50E6               	movf	postinc1,w,c
  5203  0037F8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5204  0037FA  50E6               	movf	postinc1,w,c
  5205  0037FC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5206  0037FE  50E6               	movf	postinc1,w,c
  5207  003800  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5208  003802  B0D8               	btfsc	status,0,c
  5209  003804  D758               	goto	u5810
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;ff.c: 1108:    idx -= ic;
  5213  003806  5167               	movf	dir_sdi@ic& (0+255),w,b
  5214  003808  5E58               	subwf	dir_sdi@idx,f,c
  5215  00380A  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5216  00380C  5A59               	subwfb	dir_sdi@idx+1,f,c
  5217  00380E                     l413:
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;ff.c: 1103:   while (idx >= ic) {
  5221  00380E  5167               	movf	dir_sdi@ic& (0+255),w,b
  5222  003810  5C58               	subwf	dir_sdi@idx,w,c
  5223  003812  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5224  003814  5859               	subwfb	dir_sdi@idx+1,w,c
  5225  003816  B0D8               	btfsc	status,0,c
  5226  003818  D7B4               	goto	l4681
  5227                           
  5228                           ; BSR set to: 0
  5229                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5230  00381A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5231  00381E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5232  003822  CFDE F00D          	movff	postinc2,clust2sect@fs
  5233  003826  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5234  00382A  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5235  00382E  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5236  003832  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5237  003836  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5238  00383A  EC84  F026         	call	_clust2sect	;wreg free
  5239  00383E  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5240  003842  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5241  003846  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5242  00384A  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5243  00384E                     l4701:
  5244                           
  5245                           ;ff.c: 1112:  dp->clust = clst;
  5246  00384E  EE20 F00A          	lfsr	2,10
  5247  003852  5056               	movf	dir_sdi@dp,w,c
  5248  003854  26D9               	addwf	fsr2l,f,c
  5249  003856  5057               	movf	dir_sdi@dp+1,w,c
  5250  003858  22DA               	addwfc	fsr2h,f,c
  5251  00385A  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5252  00385E  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5253  003862  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5254  003866  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5255                           
  5256                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5257  00386A  0100               	movlb	0	; () banked
  5258  00386C  5169               	movf	dir_sdi@sect& (0+255),w,b
  5259  00386E  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5260  003870  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5261  003872  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5262  003874  B4D8               	btfsc	status,2,c
  5263  003876  D71F               	goto	u5810
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5267  003878  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5268  00387C  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5269  003880  0E04               	movlw	4
  5270  003882  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5271  003884                     u5915:
  5272  003884  90D8               	bcf	status,0,c
  5273  003886  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5274  003888  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5275  00388A  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5276  00388C  D7FB               	goto	u5915
  5277  00388E  5160               	movf	??_dir_sdi& (0+255),w,b
  5278  003890  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5279  003892  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5280  003894  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5281  003896  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5282  003898  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5283  00389A  0E00               	movlw	0
  5284  00389C  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5285  00389E  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5286  0038A0  0E00               	movlw	0
  5287  0038A2  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5288  0038A4  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5289  0038A6  EE20 F00E          	lfsr	2,14
  5290  0038AA  5056               	movf	dir_sdi@dp,w,c
  5291  0038AC  26D9               	addwf	fsr2l,f,c
  5292  0038AE  5057               	movf	dir_sdi@dp+1,w,c
  5293  0038B0  22DA               	addwfc	fsr2h,f,c
  5294  0038B2  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5295  0038B6  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5296  0038BA  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5297  0038BE  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5298                           
  5299                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5300  0038C2  0E0F               	movlw	15
  5301  0038C4  1458               	andwf	dir_sdi@idx,w,c
  5302  0038C6  6F60               	movwf	??_dir_sdi& (0+255),b
  5303  0038C8  0E00               	movlw	0
  5304  0038CA  1459               	andwf	dir_sdi@idx+1,w,c
  5305  0038CC  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5306  0038CE  0E05               	movlw	5
  5307  0038D0                     u5925:
  5308  0038D0  90D8               	bcf	status,0,c
  5309  0038D2  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5310  0038D4  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5311  0038D6  2EE8               	decfsz	wreg,f,c
  5312  0038D8  D7FB               	goto	u5925
  5313  0038DA  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5314  0038DE  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5315  0038E2  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5316  0038E6  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5317  0038EA  5160               	movf	??_dir_sdi& (0+255),w,b
  5318  0038EC  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5319  0038EE  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5320  0038F0  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5321  0038F2  0E2E               	movlw	46
  5322  0038F4  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5323  0038F6  0E00               	movlw	0
  5324  0038F8  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5325  0038FA  EE20 F012          	lfsr	2,18
  5326  0038FE  5056               	movf	dir_sdi@dp,w,c
  5327  003900  26D9               	addwf	fsr2l,f,c
  5328  003902  5057               	movf	dir_sdi@dp+1,w,c
  5329  003904  22DA               	addwfc	fsr2h,f,c
  5330  003906  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5331  00390A  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;ff.c: 1117:  return FR_OK;
  5335  00390E  0E00               	movlw	0
  5336                           
  5337                           ; BSR set to: 0
  5338  003910  0012               	return		;funcret
  5339  003912                     __end_of_dir_sdi:
  5340                           	opt callstack 0
  5341                           
  5342 ;; *************** function _dir_next *****************
  5343 ;; Defined at:
  5344 ;;		line 1128 in file "ff.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  dp              2   13[BANK0 ] PTR struct .
  5347 ;;		 -> f_open@dj(22), 
  5348 ;;  stretch         2   15[BANK0 ] int 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  clst            4   28[BANK0 ] unsigned long 
  5351 ;;  i               2   26[BANK0 ] unsigned short 
  5352 ;;  c               2   24[BANK0 ] unsigned short 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      enum E93
  5355 ;; Registers used:
  5356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5362 ;;      Params:         0       4       0       0       0       0       0       0       0
  5363 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5364 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5365 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5366 ;;Total ram usage:       19 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:   10
  5369 ;; This function calls:
  5370 ;;		_clust2sect
  5371 ;;		_create_chain
  5372 ;;		_get_fat
  5373 ;;		_mem_set
  5374 ;;		_sync_window
  5375 ;; This function is called by:
  5376 ;;		_dir_alloc
  5377 ;;		_dir_find
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text15
  5382  002818                     __ptext15:
  5383                           	opt callstack 0
  5384  002818                     _dir_next:
  5385                           	opt callstack 16
  5386                           
  5387                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;incstack = 0
  5391  002818  0100               	movlb	0	; () banked
  5392  00281A  EE20 F004          	lfsr	2,4
  5393  00281E  516D               	movf	dir_next@dp& (0+255),w,b
  5394  002820  26D9               	addwf	fsr2l,f,c
  5395  002822  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5396  002824  22DA               	addwfc	fsr2h,f,c
  5397  002826  CFDE F071          	movff	postinc2,??_dir_next
  5398  00282A  CFDD F072          	movff	postdec2,??_dir_next+1
  5399  00282E  0E01               	movlw	1
  5400  002830  2571               	addwf	??_dir_next& (0+255),w,b
  5401  002832  6F7A               	movwf	dir_next@i& (0+255),b
  5402  002834  0E00               	movlw	0
  5403  002836  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5404  002838  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5408  00283A  517A               	movf	dir_next@i& (0+255),w,b
  5409  00283C  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5410  00283E  B4D8               	btfsc	status,2,c
  5411  002840  D00C               	goto	u5940
  5412                           
  5413                           ; BSR set to: 0
  5414  002842  EE20 F00E          	lfsr	2,14
  5415  002846  516D               	movf	dir_next@dp& (0+255),w,b
  5416  002848  26D9               	addwf	fsr2l,f,c
  5417  00284A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5418  00284C  22DA               	addwfc	fsr2h,f,c
  5419  00284E  50DE               	movf	postinc2,w,c
  5420  002850  10DE               	iorwf	postinc2,w,c
  5421  002852  10DE               	iorwf	postinc2,w,c
  5422  002854  10DE               	iorwf	postinc2,w,c
  5423  002856  A4D8               	btfss	status,2,c
  5424  002858  D002               	goto	l4725
  5425  00285A                     u5940:
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;ff.c: 1142:   return FR_NO_FILE;
  5429  00285A  0E04               	movlw	4
  5430  00285C  0012               	return	
  5431  00285E                     l4725:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5435  00285E  0E0F               	movlw	15
  5436  002860  157A               	andwf	dir_next@i& (0+255),w,b
  5437  002862  6F71               	movwf	??_dir_next& (0+255),b
  5438  002864  0E00               	movlw	0
  5439  002866  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5440  002868  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5441  00286A  5171               	movf	??_dir_next& (0+255),w,b
  5442  00286C  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5443  00286E  A4D8               	btfss	status,2,c
  5444  002870  D1A4               	goto	l4811
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;ff.c: 1145:   dp->sect++;
  5448  002872  EE20 F00E          	lfsr	2,14
  5449  002876  516D               	movf	dir_next@dp& (0+255),w,b
  5450  002878  26D9               	addwf	fsr2l,f,c
  5451  00287A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5452  00287C  22DA               	addwfc	fsr2h,f,c
  5453  00287E  2ADE               	incf	postinc2,f,c
  5454  002880  0E00               	movlw	0
  5455  002882  22DE               	addwfc	postinc2,f,c
  5456  002884  22DE               	addwfc	postinc2,f,c
  5457  002886  22DE               	addwfc	postinc2,f,c
  5458                           
  5459                           ;ff.c: 1147:   if (!dp->clust) {
  5460  002888  EE20 F00A          	lfsr	2,10
  5461  00288C  516D               	movf	dir_next@dp& (0+255),w,b
  5462  00288E  26D9               	addwf	fsr2l,f,c
  5463  002890  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5464  002892  22DA               	addwfc	fsr2h,f,c
  5465  002894  50DE               	movf	postinc2,w,c
  5466  002896  10DE               	iorwf	postinc2,w,c
  5467  002898  10DE               	iorwf	postinc2,w,c
  5468  00289A  10DE               	iorwf	postinc2,w,c
  5469  00289C  A4D8               	btfss	status,2,c
  5470  00289E  D011               	goto	l4735
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5474  0028A0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5475  0028A4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5476  0028A8  EE10 F008          	lfsr	1,8
  5477  0028AC  50DE               	movf	postinc2,w,c
  5478  0028AE  26E1               	addwf	fsr1l,f,c
  5479  0028B0  50DD               	movf	postdec2,w,c
  5480  0028B2  22E2               	addwfc	fsr1h,f,c
  5481  0028B4  50E6               	movf	postinc1,w,c
  5482  0028B6  5D7A               	subwf	dir_next@i& (0+255),w,b
  5483  0028B8  50E6               	movf	postinc1,w,c
  5484  0028BA  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5485  0028BC  B0D8               	btfsc	status,0,c
  5486  0028BE  D7CD               	goto	u5940
  5487  0028C0  D17C               	goto	l4811
  5488  0028C2                     l4735:
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5492  0028C2  C07A  F071         	movff	dir_next@i,??_dir_next
  5493  0028C6  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5494  0028CA  0E04               	movlw	4
  5495  0028CC  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5496  0028CE                     u5985:
  5497  0028CE  90D8               	bcf	status,0,c
  5498  0028D0  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5499  0028D2  3371               	rrcf	??_dir_next& (0+255),f,b
  5500  0028D4  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5501  0028D6  D7FB               	goto	u5985
  5502  0028D8  0EFF               	movlw	255
  5503  0028DA  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5504  0028DC  0EFF               	movlw	255
  5505  0028DE  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5506  0028E0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5507  0028E4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5508  0028E8  EE10 F002          	lfsr	1,2
  5509  0028EC  50DE               	movf	postinc2,w,c
  5510  0028EE  26E1               	addwf	fsr1l,f,c
  5511  0028F0  50DD               	movf	postdec2,w,c
  5512  0028F2  22E2               	addwfc	fsr1h,f,c
  5513  0028F4  50E7               	movf	indf1,w,c
  5514  0028F6  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5515  0028F8  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5516  0028FA  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5517  0028FC  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5518  0028FE  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5519  002900  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5520  002902  5171               	movf	??_dir_next& (0+255),w,b
  5521  002904  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5522  002906  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5523  002908  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5524  00290A  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5525  00290C  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5526  00290E  A4D8               	btfss	status,2,c
  5527  002910  D154               	goto	l4811
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5531  002912  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5532  002916  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5533  00291A  CFDE F03B          	movff	postinc2,get_fat@fs
  5534  00291E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5535  002922  EE20 F00A          	lfsr	2,10
  5536  002926  516D               	movf	dir_next@dp& (0+255),w,b
  5537  002928  26D9               	addwf	fsr2l,f,c
  5538  00292A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5539  00292C  22DA               	addwfc	fsr2h,f,c
  5540  00292E  CFDE F03D          	movff	postinc2,get_fat@clst
  5541  002932  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5542  002936  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5543  00293A  CFDE F040          	movff	postinc2,get_fat@clst+3
  5544  00293E  EC0F  F016         	call	_get_fat	;wreg free
  5545  002942  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5546  002946  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5547  00294A  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5548  00294E  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5549                           
  5550                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5551  002952  0100               	movlb	0	; () banked
  5552  002954  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5553  002956  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5554  002958  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5555  00295A  E106               	bnz	l4745
  5556  00295C  0E02               	movlw	2
  5557  00295E  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5558  002960  B0D8               	btfsc	status,0,c
  5559  002962  D002               	goto	l4745
  5560  002964                     u6000:
  5561                           
  5562                           ; BSR set to: 0
  5563  002964  0E02               	movlw	2
  5564  002966  0012               	return	
  5565  002968                     l4745:
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5569  002968  297C               	incf	dir_next@clst& (0+255),w,b
  5570  00296A  E109               	bnz	l4751
  5571  00296C  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5572  00296E  E107               	bnz	l4751
  5573  002970  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5574  002972  E105               	bnz	l4751
  5575  002974  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5576  002976  A4D8               	btfss	status,2,c
  5577  002978  D002               	goto	l4751
  5578  00297A                     u6010:
  5579  00297A  0E01               	movlw	1
  5580  00297C  0012               	return	
  5581  00297E                     l4751:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5585  00297E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5586  002982  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5587  002986  EE10 F012          	lfsr	1,18
  5588  00298A  50DE               	movf	postinc2,w,c
  5589  00298C  26E1               	addwf	fsr1l,f,c
  5590  00298E  50DD               	movf	postdec2,w,c
  5591  002990  22E2               	addwfc	fsr1h,f,c
  5592  002992  50E6               	movf	postinc1,w,c
  5593  002994  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5594  002996  50E6               	movf	postinc1,w,c
  5595  002998  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5596  00299A  50E6               	movf	postinc1,w,c
  5597  00299C  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5598  00299E  50E6               	movf	postinc1,w,c
  5599  0029A0  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5600  0029A2  A0D8               	btfss	status,0,c
  5601  0029A4  D0DB               	goto	l4807
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5605  0029A6  516F               	movf	dir_next@stretch& (0+255),w,b
  5606  0029A8  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5607  0029AA  B4D8               	btfsc	status,2,c
  5608  0029AC  D756               	goto	u5940
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5612  0029AE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5613  0029B2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5614  0029B6  CFDE F056          	movff	postinc2,create_chain@fs
  5615  0029BA  CFDD F057          	movff	postdec2,create_chain@fs+1
  5616  0029BE  EE20 F00A          	lfsr	2,10
  5617  0029C2  516D               	movf	dir_next@dp& (0+255),w,b
  5618  0029C4  26D9               	addwf	fsr2l,f,c
  5619  0029C6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5620  0029C8  22DA               	addwfc	fsr2h,f,c
  5621  0029CA  CFDE F058          	movff	postinc2,create_chain@clst
  5622  0029CE  CFDE F059          	movff	postinc2,create_chain@clst+1
  5623  0029D2  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5624  0029D6  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5625  0029DA  ECAB  F019         	call	_create_chain	;wreg free
  5626  0029DE  C056  F07C         	movff	?_create_chain,dir_next@clst
  5627  0029E2  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5628  0029E6  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5629  0029EA  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5630                           
  5631                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5632  0029EE  0100               	movlb	0	; () banked
  5633  0029F0  517C               	movf	dir_next@clst& (0+255),w,b
  5634  0029F2  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5635  0029F4  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5636  0029F6  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5637  0029F8  A4D8               	btfss	status,2,c
  5638  0029FA  D002               	goto	l4767
  5639                           
  5640                           ; BSR set to: 0
  5641  0029FC  0E07               	movlw	7
  5642  0029FE  0012               	return	
  5643  002A00                     l4767:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5647  002A00  057C               	decf	dir_next@clst& (0+255),w,b
  5648  002A02  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5649  002A04  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5650  002A06  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5651  002A08  B4D8               	btfsc	status,2,c
  5652  002A0A  D7AC               	goto	u6000
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5656  002A0C  297C               	incf	dir_next@clst& (0+255),w,b
  5657  002A0E  E107               	bnz	l4779
  5658  002A10  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5659  002A12  E105               	bnz	l4779
  5660  002A14  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5661  002A16  E103               	bnz	l4779
  5662  002A18  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5663  002A1A  B4D8               	btfsc	status,2,c
  5664  002A1C  D7AE               	goto	u6010
  5665  002A1E                     l4779:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5669  002A1E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5670  002A22  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5671  002A26  CFDE F01B          	movff	postinc2,sync_window@fs
  5672  002A2A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5673  002A2E  EC66  F020         	call	_sync_window	;wreg free
  5674  002A32  0900               	iorlw	0
  5675  002A34  A4D8               	btfss	status,2,c
  5676  002A36  D7A1               	goto	u6010
  5677                           
  5678                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5679  002A38  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5680  002A3C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5681  002A40  CFDE F071          	movff	postinc2,??_dir_next
  5682  002A44  CFDD F072          	movff	postdec2,??_dir_next+1
  5683  002A48  0E2E               	movlw	46
  5684  002A4A  0100               	movlb	0	; () banked
  5685  002A4C  2571               	addwf	??_dir_next& (0+255),w,b
  5686  002A4E  6E01               	movwf	mem_set@dst,c
  5687  002A50  0E00               	movlw	0
  5688  002A52  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5689  002A54  6E02               	movwf	mem_set@dst+1,c
  5690  002A56  0E00               	movlw	0
  5691  002A58  6E04               	movwf	mem_set@val+1,c
  5692  002A5A  0E00               	movlw	0
  5693  002A5C  6E03               	movwf	mem_set@val,c
  5694  002A5E  0E02               	movlw	2
  5695  002A60  6E06               	movwf	mem_set@cnt+1,c
  5696  002A62  0E00               	movlw	0
  5697  002A64  6E05               	movwf	mem_set@cnt,c
  5698  002A66  EC5E  F02A         	call	_mem_set	;wreg free
  5699                           
  5700                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5701  002A6A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5702  002A6E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5703  002A72  CFDE F00D          	movff	postinc2,clust2sect@fs
  5704  002A76  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5705  002A7A  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5706  002A7E  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5707  002A82  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5708  002A86  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5709  002A8A  EC84  F026         	call	_clust2sect	;wreg free
  5710  002A8E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5711  002A92  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5712  002A96  EE10 F02A          	lfsr	1,42
  5713  002A9A  50DE               	movf	postinc2,w,c
  5714  002A9C  26E1               	addwf	fsr1l,f,c
  5715  002A9E  50DD               	movf	postdec2,w,c
  5716  002AA0  22E2               	addwfc	fsr1h,f,c
  5717  002AA2  C00D  FFE6         	movff	?_clust2sect,postinc1
  5718  002AA6  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5719  002AAA  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5720  002AAE  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5721                           
  5722                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5723  002AB2  0E00               	movlw	0
  5724  002AB4  0100               	movlb	0	; () banked
  5725  002AB6  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5726  002AB8  0E00               	movlw	0
  5727  002ABA  6F78               	movwf	dir_next@c& (0+255),b
  5728  002ABC  D02B               	goto	l4803
  5729  002ABE                     l4791:
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5733  002ABE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5734  002AC2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5735  002AC6  EE10 F004          	lfsr	1,4
  5736  002ACA  50DE               	movf	postinc2,w,c
  5737  002ACC  26E1               	addwf	fsr1l,f,c
  5738  002ACE  50DD               	movf	postdec2,w,c
  5739  002AD0  22E2               	addwfc	fsr1h,f,c
  5740  002AD2  0E01               	movlw	1
  5741  002AD4  6EE7               	movwf	indf1,c
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5745  002AD6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5746  002ADA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5747  002ADE  CFDE F01B          	movff	postinc2,sync_window@fs
  5748  002AE2  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5749  002AE6  EC66  F020         	call	_sync_window	;wreg free
  5750  002AEA  0900               	iorlw	0
  5751  002AEC  A4D8               	btfss	status,2,c
  5752  002AEE  D745               	goto	u6010
  5753                           
  5754                           ;ff.c: 1170:       dp->fs->winsect++;
  5755  002AF0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5756  002AF4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5757  002AF8  EE10 F02A          	lfsr	1,42
  5758  002AFC  50DE               	movf	postinc2,w,c
  5759  002AFE  26E1               	addwf	fsr1l,f,c
  5760  002B00  50DD               	movf	postdec2,w,c
  5761  002B02  22E2               	addwfc	fsr1h,f,c
  5762  002B04  2AE6               	incf	postinc1,f,c
  5763  002B06  0E00               	movlw	0
  5764  002B08  22E6               	addwfc	postinc1,f,c
  5765  002B0A  22E6               	addwfc	postinc1,f,c
  5766  002B0C  22E6               	addwfc	postinc1,f,c
  5767                           
  5768                           ;ff.c: 1171:      }
  5769  002B0E  0100               	movlb	0	; () banked
  5770  002B10  4B78               	infsnz	dir_next@c& (0+255),f,b
  5771  002B12  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5772  002B14                     l4803:
  5773                           
  5774                           ; BSR set to: 0
  5775  002B14  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5776  002B18  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5777  002B1C  EE10 F002          	lfsr	1,2
  5778  002B20  50DE               	movf	postinc2,w,c
  5779  002B22  26E1               	addwf	fsr1l,f,c
  5780  002B24  50DD               	movf	postdec2,w,c
  5781  002B26  22E2               	addwfc	fsr1h,f,c
  5782  002B28  50E7               	movf	indf1,w,c
  5783  002B2A  6F71               	movwf	??_dir_next& (0+255),b
  5784  002B2C  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5785  002B2E  5171               	movf	??_dir_next& (0+255),w,b
  5786  002B30  5D78               	subwf	dir_next@c& (0+255),w,b
  5787  002B32  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5788  002B34  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5789  002B36  A0D8               	btfss	status,0,c
  5790  002B38  D7C2               	goto	l4791
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5794  002B3A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5795  002B3E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5796  002B42  EE10 F02A          	lfsr	1,42
  5797  002B46  50DE               	movf	postinc2,w,c
  5798  002B48  26E1               	addwf	fsr1l,f,c
  5799  002B4A  50DD               	movf	postdec2,w,c
  5800  002B4C  22E2               	addwfc	fsr1h,f,c
  5801  002B4E  5178               	movf	dir_next@c& (0+255),w,b
  5802  002B50  5EE6               	subwf	postinc1,f,c
  5803  002B52  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5804  002B54  5AE6               	subwfb	postinc1,f,c
  5805  002B56  0E00               	movlw	0
  5806  002B58  5AE6               	subwfb	postinc1,f,c
  5807  002B5A  5AE6               	subwfb	postinc1,f,c
  5808  002B5C                     l4807:
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;ff.c: 1178:     dp->clust = clst;
  5812  002B5C  EE20 F00A          	lfsr	2,10
  5813  002B60  516D               	movf	dir_next@dp& (0+255),w,b
  5814  002B62  26D9               	addwf	fsr2l,f,c
  5815  002B64  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5816  002B66  22DA               	addwfc	fsr2h,f,c
  5817  002B68  C07C  FFDE         	movff	dir_next@clst,postinc2
  5818  002B6C  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5819  002B70  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5820  002B74  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5824  002B78  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5825  002B7C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5826  002B80  CFDE F00D          	movff	postinc2,clust2sect@fs
  5827  002B84  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5828  002B88  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5829  002B8C  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5830  002B90  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5831  002B94  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5832  002B98  EC84  F026         	call	_clust2sect	;wreg free
  5833  002B9C  0100               	movlb	0	; () banked
  5834  002B9E  EE20 F00E          	lfsr	2,14
  5835  002BA2  516D               	movf	dir_next@dp& (0+255),w,b
  5836  002BA4  26D9               	addwf	fsr2l,f,c
  5837  002BA6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5838  002BA8  22DA               	addwfc	fsr2h,f,c
  5839  002BAA  C00D  FFDE         	movff	?_clust2sect,postinc2
  5840  002BAE  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5841  002BB2  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5842  002BB6  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5843  002BBA                     l4811:
  5844                           
  5845                           ; BSR set to: 0
  5846                           ;ff.c: 1184:  dp->index = (WORD)i;
  5847  002BBA  EE20 F004          	lfsr	2,4
  5848  002BBE  516D               	movf	dir_next@dp& (0+255),w,b
  5849  002BC0  26D9               	addwf	fsr2l,f,c
  5850  002BC2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5851  002BC4  22DA               	addwfc	fsr2h,f,c
  5852  002BC6  C07A  FFDE         	movff	dir_next@i,postinc2
  5853  002BCA  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5857  002BCE  0E0F               	movlw	15
  5858  002BD0  157A               	andwf	dir_next@i& (0+255),w,b
  5859  002BD2  6F71               	movwf	??_dir_next& (0+255),b
  5860  002BD4  0E00               	movlw	0
  5861  002BD6  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5862  002BD8  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5863  002BDA  0E05               	movlw	5
  5864  002BDC                     u6105:
  5865  002BDC  90D8               	bcf	status,0,c
  5866  002BDE  3771               	rlcf	??_dir_next& (0+255),f,b
  5867  002BE0  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5868  002BE2  2EE8               	decfsz	wreg,f,c
  5869  002BE4  D7FB               	goto	u6105
  5870  002BE6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5871  002BEA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5872  002BEE  CFDE F073          	movff	postinc2,??_dir_next+2
  5873  002BF2  CFDD F074          	movff	postdec2,??_dir_next+3
  5874  002BF6  5171               	movf	??_dir_next& (0+255),w,b
  5875  002BF8  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5876  002BFA  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5877  002BFC  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5878  002BFE  0E2E               	movlw	46
  5879  002C00  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5880  002C02  0E00               	movlw	0
  5881  002C04  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5882  002C06  EE20 F012          	lfsr	2,18
  5883  002C0A  516D               	movf	dir_next@dp& (0+255),w,b
  5884  002C0C  26D9               	addwf	fsr2l,f,c
  5885  002C0E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5886  002C10  22DA               	addwfc	fsr2h,f,c
  5887  002C12  C073  FFDE         	movff	??_dir_next+2,postinc2
  5888  002C16  C074  FFDD         	movff	??_dir_next+3,postdec2
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;ff.c: 1187:  return FR_OK;
  5892  002C1A  0E00               	movlw	0
  5893  002C1C  0012               	return		;funcret
  5894  002C1E                     __end_of_dir_next:
  5895                           	opt callstack 0
  5896                           
  5897 ;; *************** function _f_mount *****************
  5898 ;; Defined at:
  5899 ;;		line 2402 in file "ff.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  fs              2   81[COMRAM] PTR struct .
  5902 ;;		 -> NULL(0), FatFs(558), 
  5903 ;;  path            2   83[COMRAM] PTR const unsigned char 
  5904 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5905 ;;  opt             1   85[COMRAM] unsigned char 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  vol             2   91[COMRAM] int 
  5908 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  5909 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5910 ;;  cfs             2   87[COMRAM] PTR struct .
  5911 ;;		 -> NULL(0), FatFs(558), 
  5912 ;;  res             1   86[COMRAM] enum E93
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      enum E4918
  5915 ;; Registers used:
  5916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5922 ;;      Params:         5       0       0       0       0       0       0       0       0
  5923 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5924 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5925 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5926 ;;Total ram usage:       12 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:   10
  5929 ;; This function calls:
  5930 ;;		_find_volume
  5931 ;;		_get_ldnumber
  5932 ;; This function is called by:
  5933 ;;		_guardar
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text16
  5938  004DC2                     __ptext16:
  5939                           	opt callstack 0
  5940  004DC2                     _f_mount:
  5941                           	opt callstack 19
  5942                           
  5943                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  5944                           
  5945                           ;incstack = 0
  5946  004DC2  C054  F05A         	movff	f_mount@path,f_mount@rp
  5947  004DC6  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  5948                           
  5949                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  5950  004DCA  0E5A               	movlw	low f_mount@rp
  5951  004DCC  6E01               	movwf	get_ldnumber@path,c
  5952  004DCE  0E00               	movlw	high f_mount@rp
  5953  004DD0  6E02               	movwf	get_ldnumber@path+1,c
  5954  004DD2  ECE7  F024         	call	_get_ldnumber	;wreg free
  5955  004DD6  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  5956  004DDA  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  5957                           
  5958                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  5959  004DDE  AE5D               	btfss	f_mount@vol+1,7,c
  5960  004DE0  D002               	goto	l5753
  5961  004DE2  0E0B               	movlw	11
  5962  004DE4  0012               	return	
  5963  004DE6                     l5753:
  5964                           
  5965                           ;ff.c: 2416:  cfs = FatFs[vol];
  5966  004DE6  90D8               	bcf	status,0,c
  5967  004DE8  345C               	rlcf	f_mount@vol,w,c
  5968  004DEA  6ED9               	movwf	fsr2l,c
  5969  004DEC  345D               	rlcf	f_mount@vol+1,w,c
  5970  004DEE  6EDA               	movwf	fsr2h,c
  5971  004DF0  0ED6               	movlw	low ff@FatFs
  5972  004DF2  26D9               	addwf	fsr2l,f,c
  5973  004DF4  0E00               	movlw	high ff@FatFs
  5974  004DF6  22DA               	addwfc	fsr2h,f,c
  5975  004DF8  CFDE F058          	movff	postinc2,f_mount@cfs
  5976  004DFC  CFDD F059          	movff	postdec2,f_mount@cfs+1
  5977                           
  5978                           ;ff.c: 2418:  if (cfs) {
  5979  004E00  5058               	movf	f_mount@cfs,w,c
  5980  004E02  1059               	iorwf	f_mount@cfs+1,w,c
  5981  004E04  B4D8               	btfsc	status,2,c
  5982  004E06  D006               	goto	l5759
  5983                           
  5984                           ;ff.c: 2425:   cfs->fs_type = 0;
  5985  004E08  C058  FFD9         	movff	f_mount@cfs,fsr2l
  5986  004E0C  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  5987  004E10  0E00               	movlw	0
  5988  004E12  6EDF               	movwf	indf2,c
  5989  004E14                     l5759:
  5990                           
  5991                           ;ff.c: 2428:  if (fs) {
  5992  004E14  5052               	movf	f_mount@fs,w,c
  5993  004E16  1053               	iorwf	f_mount@fs+1,w,c
  5994  004E18  B4D8               	btfsc	status,2,c
  5995  004E1A  D006               	goto	l5763
  5996                           
  5997                           ;ff.c: 2429:   fs->fs_type = 0;
  5998  004E1C  C052  FFD9         	movff	f_mount@fs,fsr2l
  5999  004E20  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  6000  004E24  0E00               	movlw	0
  6001  004E26  6EDF               	movwf	indf2,c
  6002  004E28                     l5763:
  6003                           
  6004                           ;ff.c: 2434:  FatFs[vol] = fs;
  6005  004E28  90D8               	bcf	status,0,c
  6006  004E2A  345C               	rlcf	f_mount@vol,w,c
  6007  004E2C  6ED9               	movwf	fsr2l,c
  6008  004E2E  345D               	rlcf	f_mount@vol+1,w,c
  6009  004E30  6EDA               	movwf	fsr2h,c
  6010  004E32  0ED6               	movlw	low ff@FatFs
  6011  004E34  26D9               	addwf	fsr2l,f,c
  6012  004E36  0E00               	movlw	high ff@FatFs
  6013  004E38  22DA               	addwfc	fsr2h,f,c
  6014  004E3A  C052  FFDE         	movff	f_mount@fs,postinc2
  6015  004E3E  C053  FFDD         	movff	f_mount@fs+1,postdec2
  6016                           
  6017                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  6018  004E42  5052               	movf	f_mount@fs,w,c
  6019  004E44  1053               	iorwf	f_mount@fs+1,w,c
  6020  004E46  B4D8               	btfsc	status,2,c
  6021  004E48  D003               	goto	u7760
  6022  004E4A  0456               	decf	f_mount@opt,w,c
  6023  004E4C  B4D8               	btfsc	status,2,c
  6024  004E4E  D002               	goto	l5773
  6025  004E50                     u7760:
  6026  004E50  0E00               	movlw	0
  6027  004E52  0012               	return	
  6028  004E54                     l5773:
  6029                           
  6030                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  6031  004E54  0E52               	movlw	low f_mount@fs
  6032  004E56  6E45               	movwf	find_volume@rfs,c
  6033  004E58  0E00               	movlw	high f_mount@fs
  6034  004E5A  6E46               	movwf	find_volume@rfs+1,c
  6035  004E5C  0E54               	movlw	low f_mount@path
  6036  004E5E  6E47               	movwf	find_volume@path,c
  6037  004E60  0E00               	movlw	high f_mount@path
  6038  004E62  6E48               	movwf	find_volume@path+1,c
  6039  004E64  0E00               	movlw	0
  6040  004E66  6E49               	movwf	find_volume@wmode,c
  6041  004E68  EC18  F004         	call	_find_volume	;wreg free
  6042  004E6C  6E57               	movwf	f_mount@res,c
  6043                           
  6044                           ;ff.c: 2439:  return res;
  6045  004E6E  5057               	movf	f_mount@res,w,c
  6046  004E70  0012               	return		;funcret
  6047  004E72                     __end_of_f_mount:
  6048                           	opt callstack 0
  6049                           
  6050 ;; *************** function _find_volume *****************
  6051 ;; Defined at:
  6052 ;;		line 2203 in file "ff.c"
  6053 ;; Parameters:    Size  Location     Type
  6054 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  6055 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  6056 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  6057 ;;		 -> f_open@path(2), f_mount@path(2), 
  6058 ;;  wmode           1   72[COMRAM] unsigned char 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  br             16    0[BANK0 ] unsigned long [4]
  6061 ;;  bsect           4   49[BANK0 ] unsigned long 
  6062 ;;  fasize          4   45[BANK0 ] unsigned long 
  6063 ;;  nclst           4   40[BANK0 ] unsigned long 
  6064 ;;  tsect           4   36[BANK0 ] unsigned long 
  6065 ;;  sysect          4   28[BANK0 ] unsigned long 
  6066 ;;  szbfat          4   22[BANK0 ] unsigned long 
  6067 ;;  fs              2   56[BANK0 ] PTR struct .
  6068 ;;		 -> NULL(0), FatFs(558), 
  6069 ;;  i               2   53[BANK0 ] unsigned short 
  6070 ;;  nrsv            2   34[BANK0 ] unsigned short 
  6071 ;;  vol             2   32[BANK0 ] int 
  6072 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  6073 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  6074 ;;  fmt             1   55[BANK0 ] unsigned char 
  6075 ;;  stat            1   44[BANK0 ] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      enum E93
  6078 ;; Registers used:
  6079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6085 ;;      Params:         5       0       0       0       0       0       0       0       0
  6086 ;;      Locals:         0      58       0       0       0       0       0       0       0
  6087 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6088 ;;      Totals:        13      58       0       0       0       0       0       0       0
  6089 ;;Total ram usage:       71 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    9
  6092 ;; This function calls:
  6093 ;;		___lldiv
  6094 ;;		___lmul
  6095 ;;		_check_fs
  6096 ;;		_disk_initialize
  6097 ;;		_disk_status
  6098 ;;		_get_ldnumber
  6099 ;;		_move_window
  6100 ;; This function is called by:
  6101 ;;		_f_mount
  6102 ;;		_f_open
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           	psect	text17
  6107  000830                     __ptext17:
  6108                           	opt callstack 0
  6109  000830                     _find_volume:
  6110                           	opt callstack 19
  6111                           
  6112                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  6113                           
  6114                           ;incstack = 0
  6115  000830  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6116  000834  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6117  000838  0E00               	movlw	0
  6118  00083A  6EDE               	movwf	postinc2,c
  6119  00083C  0E00               	movlw	0
  6120  00083E  6EDD               	movwf	postdec2,c
  6121                           
  6122                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6123  000840  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6124  000844  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6125  000848  ECE7  F024         	call	_get_ldnumber	;wreg free
  6126  00084C  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6127  000850  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6128                           
  6129                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6130  000854  0100               	movlb	0	; () banked
  6131  000856  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6132  000858  D002               	goto	l5427
  6133                           
  6134                           ; BSR set to: 0
  6135  00085A  0E0B               	movlw	11
  6136  00085C  0012               	return	
  6137  00085E                     l5427:
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;ff.c: 2224:  fs = FatFs[vol];
  6141  00085E  90D8               	bcf	status,0,c
  6142  000860  3580               	rlcf	find_volume@vol& (0+255),w,b
  6143  000862  6ED9               	movwf	fsr2l,c
  6144  000864  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6145  000866  6EDA               	movwf	fsr2h,c
  6146  000868  0ED6               	movlw	low ff@FatFs
  6147  00086A  26D9               	addwf	fsr2l,f,c
  6148  00086C  0E00               	movlw	high ff@FatFs
  6149  00086E  22DA               	addwfc	fsr2h,f,c
  6150  000870  CFDE F098          	movff	postinc2,find_volume@fs
  6151  000874  CFDD F099          	movff	postdec2,find_volume@fs+1
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6155  000878  5198               	movf	find_volume@fs& (0+255),w,b
  6156  00087A  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6157  00087C  A4D8               	btfss	status,2,c
  6158  00087E  D002               	goto	l5435
  6159                           
  6160                           ; BSR set to: 0
  6161  000880  0E0C               	movlw	12
  6162  000882  0012               	return	
  6163  000884                     l5435:
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;ff.c: 2228:  *rfs = fs;
  6167  000884  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6168  000888  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6169  00088C  C098  FFDE         	movff	find_volume@fs,postinc2
  6170  000890  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;ff.c: 2230:  if (fs->fs_type) {
  6174  000894  C098  FFD9         	movff	find_volume@fs,fsr2l
  6175  000898  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6176  00089C  50DF               	movf	indf2,w,c
  6177  00089E  B4D8               	btfsc	status,2,c
  6178  0008A0  D015               	goto	l5455
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6182  0008A2  EE20 F001          	lfsr	2,1
  6183  0008A6  5198               	movf	find_volume@fs& (0+255),w,b
  6184  0008A8  26D9               	addwf	fsr2l,f,c
  6185  0008AA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6186  0008AC  22DA               	addwfc	fsr2h,f,c
  6187  0008AE  50DF               	movf	indf2,w,c
  6188  0008B0  ECCB  F02A         	call	_disk_status
  6189  0008B4  0100               	movlb	0	; () banked
  6190  0008B6  6F8C               	movwf	find_volume@stat& (0+255),b
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6194  0008B8  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6195  0008BA  D008               	goto	l5455
  6196                           
  6197                           ; BSR set to: 0
  6198  0008BC  5049               	movf	find_volume@wmode,w,c
  6199  0008BE  A4D8               	btfss	status,2,c
  6200                           
  6201                           ; BSR set to: 0
  6202  0008C0  A58C               	btfss	find_volume@stat& (0+255),2,b
  6203  0008C2  D002               	goto	l5451
  6204  0008C4                     u7260:
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6208  0008C4  0E0A               	movlw	10
  6209  0008C6  0012               	return	
  6210  0008C8                     l5451:
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;ff.c: 2235:    return FR_OK;
  6214  0008C8  0E00               	movlw	0
  6215  0008CA  0012               	return	
  6216  0008CC                     l5455:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;ff.c: 2242:  fs->fs_type = 0;
  6220  0008CC  C098  FFD9         	movff	find_volume@fs,fsr2l
  6221  0008D0  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6222  0008D4  0E00               	movlw	0
  6223  0008D6  6EDF               	movwf	indf2,c
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6227  0008D8  EE20 F001          	lfsr	2,1
  6228  0008DC  5198               	movf	find_volume@fs& (0+255),w,b
  6229  0008DE  26D9               	addwf	fsr2l,f,c
  6230  0008E0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6231  0008E2  22DA               	addwfc	fsr2h,f,c
  6232  0008E4  C080  FFDF         	movff	find_volume@vol,indf2
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6236  0008E8  EE20 F001          	lfsr	2,1
  6237  0008EC  5198               	movf	find_volume@fs& (0+255),w,b
  6238  0008EE  26D9               	addwf	fsr2l,f,c
  6239  0008F0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6240  0008F2  22DA               	addwfc	fsr2h,f,c
  6241  0008F4  50DF               	movf	indf2,w,c
  6242  0008F6  ECCB  F01D         	call	_disk_initialize
  6243  0008FA  0100               	movlb	0	; () banked
  6244  0008FC  6F8C               	movwf	find_volume@stat& (0+255),b
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;ff.c: 2245:  if (stat & 0x01)
  6248  0008FE  A18C               	btfss	find_volume@stat& (0+255),0,b
  6249  000900  D002               	goto	l5467
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;ff.c: 2246:   return FR_NOT_READY;
  6253  000902  0E03               	movlw	3
  6254  000904  0012               	return	
  6255  000906                     l5467:
  6256                           
  6257                           ; BSR set to: 0
  6258  000906  5049               	movf	find_volume@wmode,w,c
  6259  000908  B4D8               	btfsc	status,2,c
  6260  00090A  D002               	goto	l5475
  6261                           
  6262                           ; BSR set to: 0
  6263  00090C  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6264  00090E  D7DA               	goto	u7260
  6265  000910                     l5475:
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;ff.c: 2254:  bsect = 0;
  6269  000910  0E00               	movlw	0
  6270  000912  6F91               	movwf	find_volume@bsect& (0+255),b
  6271  000914  0E00               	movlw	0
  6272  000916  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6273  000918  0E00               	movlw	0
  6274  00091A  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6275  00091C  0E00               	movlw	0
  6276  00091E  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6280  000920  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6281  000924  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6282  000928  0E00               	movlw	0
  6283  00092A  6E3D               	movwf	check_fs@sect,c
  6284  00092C  0E00               	movlw	0
  6285  00092E  6E3E               	movwf	check_fs@sect+1,c
  6286  000930  0E00               	movlw	0
  6287  000932  6E3F               	movwf	check_fs@sect+2,c
  6288  000934  0E00               	movlw	0
  6289  000936  6E40               	movwf	check_fs@sect+3,c
  6290  000938  EC71  F024         	call	_check_fs	;wreg free
  6291  00093C  0100               	movlb	0	; () banked
  6292  00093E  6F97               	movwf	find_volume@fmt& (0+255),b
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6296  000940  0597               	decf	find_volume@fmt& (0+255),w,b
  6297  000942  A4D8               	btfss	status,2,c
  6298  000944  D0AE               	goto	u7360
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6302  000946  0E00               	movlw	0
  6303  000948  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6304  00094A  0E00               	movlw	0
  6305  00094C  6F95               	movwf	find_volume@i& (0+255),b
  6306  00094E                     l5487:
  6307                           
  6308                           ; BSR set to: 0
  6309  00094E  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6310  000950  E15A               	bnz	l5503
  6311  000952  0E04               	movlw	4
  6312  000954  5D95               	subwf	find_volume@i& (0+255),w,b
  6313  000956  B0D8               	btfsc	status,0,c
  6314  000958  D056               	goto	l5503
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6318  00095A  C095  F04A         	movff	find_volume@i,??_find_volume
  6319  00095E  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6320  000962  3A4A               	swapf	??_find_volume,f,c
  6321  000964  3A4B               	swapf	??_find_volume+1,f,c
  6322  000966  0EF0               	movlw	240
  6323  000968  164B               	andwf	??_find_volume+1,f,c
  6324  00096A  504A               	movf	??_find_volume,w,c
  6325  00096C  0B0F               	andlw	15
  6326  00096E  124B               	iorwf	??_find_volume+1,f,c
  6327  000970  0EF0               	movlw	240
  6328  000972  164A               	andwf	??_find_volume,f,c
  6329  000974  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6330  000978  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6331  00097C  504A               	movf	??_find_volume,w,c
  6332  00097E  264C               	addwf	??_find_volume+2,f,c
  6333  000980  504B               	movf	??_find_volume+1,w,c
  6334  000982  224D               	addwfc	??_find_volume+3,f,c
  6335  000984  0EEC               	movlw	236
  6336  000986  244C               	addwf	??_find_volume+2,w,c
  6337  000988  6F7A               	movwf	find_volume@pt& (0+255),b
  6338  00098A  0E01               	movlw	1
  6339  00098C  204D               	addwfc	??_find_volume+3,w,c
  6340  00098E  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6344  000990  EE20 F004          	lfsr	2,4
  6345  000994  517A               	movf	find_volume@pt& (0+255),w,b
  6346  000996  26D9               	addwf	fsr2l,f,c
  6347  000998  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6348  00099A  22DA               	addwfc	fsr2h,f,c
  6349  00099C  50DF               	movf	indf2,w,c
  6350  00099E  A4D8               	btfss	status,2,c
  6351  0009A0  D009               	goto	l5497
  6352                           
  6353                           ; BSR set to: 0
  6354  0009A2  0E00               	movlw	0
  6355  0009A4  6F70               	movwf	_find_volume$879& (0+255),b
  6356  0009A6  0E00               	movlw	0
  6357  0009A8  6F71               	movwf	(_find_volume$879+1)& (0+255),b
  6358  0009AA  0E00               	movlw	0
  6359  0009AC  6F72               	movwf	(_find_volume$879+2)& (0+255),b
  6360  0009AE  0E00               	movlw	0
  6361  0009B0  6F73               	movwf	(_find_volume$879+3)& (0+255),b
  6362  0009B2  D00E               	goto	l584
  6363  0009B4                     l5497:
  6364                           
  6365                           ; BSR set to: 0
  6366  0009B4  EE20 F008          	lfsr	2,8
  6367  0009B8  517A               	movf	find_volume@pt& (0+255),w,b
  6368  0009BA  26D9               	addwf	fsr2l,f,c
  6369  0009BC  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6370  0009BE  22DA               	addwfc	fsr2h,f,c
  6371  0009C0  CFDE F070          	movff	postinc2,_find_volume$879
  6372  0009C4  CFDE F071          	movff	postinc2,_find_volume$879+1
  6373  0009C8  CFDE F072          	movff	postinc2,_find_volume$879+2
  6374  0009CC  CFDE F073          	movff	postinc2,_find_volume$879+3
  6375  0009D0                     l584:
  6376                           
  6377                           ; BSR set to: 0
  6378  0009D0  0E60               	movlw	low find_volume@br
  6379  0009D2  6E4A               	movwf	??_find_volume& (0+255),c
  6380  0009D4  0E00               	movlw	high find_volume@br
  6381  0009D6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6382  0009D8  90D8               	bcf	status,0,c
  6383  0009DA  3595               	rlcf	find_volume@i& (0+255),w,b
  6384  0009DC  6ED9               	movwf	fsr2l,c
  6385  0009DE  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6386  0009E0  6EDA               	movwf	fsr2h,c
  6387  0009E2  90D8               	bcf	status,0,c
  6388  0009E4  36D9               	rlcf	fsr2l,f,c
  6389  0009E6  36DA               	rlcf	fsr2h,f,c
  6390  0009E8  504A               	movf	??_find_volume,w,c
  6391  0009EA  26D9               	addwf	fsr2l,f,c
  6392  0009EC  504B               	movf	??_find_volume+1,w,c
  6393  0009EE  22DA               	addwfc	fsr2h,f,c
  6394  0009F0  C070  FFDE         	movff	_find_volume$879,postinc2
  6395  0009F4  C071  FFDE         	movff	_find_volume$879+1,postinc2
  6396  0009F8  C072  FFDE         	movff	_find_volume$879+2,postinc2
  6397  0009FC  C073  FFDE         	movff	_find_volume$879+3,postinc2
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;ff.c: 2260:   }
  6401  000A00  4B95               	infsnz	find_volume@i& (0+255),f,b
  6402  000A02  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6403  000A04  D7A4               	goto	l5487
  6404  000A06                     l5503:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;ff.c: 2261:   i = 0;
  6408  000A06  0E00               	movlw	0
  6409  000A08  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6410  000A0A  0E00               	movlw	0
  6411  000A0C  6F95               	movwf	find_volume@i& (0+255),b
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;ff.c: 2262:   if (i) i--;
  6415  000A0E  5195               	movf	find_volume@i& (0+255),w,b
  6416  000A10  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6417  000A12  B4D8               	btfsc	status,2,c
  6418  000A14  D003               	goto	l5509
  6419                           
  6420                           ; BSR set to: 0
  6421  000A16  0795               	decf	find_volume@i& (0+255),f,b
  6422  000A18  A0D8               	btfss	status,0,c
  6423  000A1A  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6424  000A1C                     l5509:
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;ff.c: 2264:    bsect = br[i];
  6428  000A1C  0E60               	movlw	low find_volume@br
  6429  000A1E  6E4A               	movwf	??_find_volume& (0+255),c
  6430  000A20  0E00               	movlw	high find_volume@br
  6431  000A22  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6432  000A24  90D8               	bcf	status,0,c
  6433  000A26  3595               	rlcf	find_volume@i& (0+255),w,b
  6434  000A28  6ED9               	movwf	fsr2l,c
  6435  000A2A  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6436  000A2C  6EDA               	movwf	fsr2h,c
  6437  000A2E  90D8               	bcf	status,0,c
  6438  000A30  36D9               	rlcf	fsr2l,f,c
  6439  000A32  36DA               	rlcf	fsr2h,f,c
  6440  000A34  504A               	movf	??_find_volume,w,c
  6441  000A36  26D9               	addwf	fsr2l,f,c
  6442  000A38  504B               	movf	??_find_volume+1,w,c
  6443  000A3A  22DA               	addwfc	fsr2h,f,c
  6444  000A3C  CFDE F091          	movff	postinc2,find_volume@bsect
  6445  000A40  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6446  000A44  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6447  000A48  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6451  000A4C  5191               	movf	find_volume@bsect& (0+255),w,b
  6452  000A4E  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6453  000A50  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6454  000A52  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6455  000A54  A4D8               	btfss	status,2,c
  6456  000A56  D005               	goto	l5515
  6457                           
  6458                           ; BSR set to: 0
  6459  000A58  0E00               	movlw	0
  6460  000A5A  6F75               	movwf	(_find_volume$880+1)& (0+255),b
  6461  000A5C  0E02               	movlw	2
  6462  000A5E  6F74               	movwf	_find_volume$880& (0+255),b
  6463  000A60  D013               	goto	l5517
  6464  000A62                     l5515:
  6465                           
  6466                           ; BSR set to: 0
  6467  000A62  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6468  000A66  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6469  000A6A  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6470  000A6E  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6471  000A72  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6472  000A76  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6473  000A7A  EC71  F024         	call	_check_fs	;wreg free
  6474  000A7E  6E4A               	movwf	??_find_volume& (0+255),c
  6475  000A80  504A               	movf	??_find_volume,w,c
  6476  000A82  0100               	movlb	0	; () banked
  6477  000A84  6F74               	movwf	_find_volume$880& (0+255),b
  6478  000A86  6B75               	clrf	(_find_volume$880+1)& (0+255),b
  6479  000A88                     l5517:
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6483  000A88  C074  F097         	movff	_find_volume$880,find_volume@fmt
  6484                           
  6485                           ; BSR set to: 0
  6486  000A8C  5197               	movf	find_volume@fmt& (0+255),w,b
  6487  000A8E  B4D8               	btfsc	status,2,c
  6488  000A90  D008               	goto	u7360
  6489                           
  6490                           ; BSR set to: 0
  6491  000A92  4B95               	infsnz	find_volume@i& (0+255),f,b
  6492  000A94  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6493  000A96  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6494  000A98  E104               	bnz	u7360
  6495  000A9A  0E04               	movlw	4
  6496  000A9C  5D95               	subwf	find_volume@i& (0+255),w,b
  6497  000A9E  A0D8               	btfss	status,0,c
  6498  000AA0  D7BD               	goto	l5509
  6499  000AA2                     u7360:
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6503  000AA2  0E03               	movlw	3
  6504  000AA4  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6505  000AA6  A4D8               	btfss	status,2,c
  6506  000AA8  D002               	goto	l5529
  6507                           
  6508                           ; BSR set to: 0
  6509  000AAA  0E01               	movlw	1
  6510  000AAC  0012               	return	
  6511  000AAE                     l5529:
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6515  000AAE  5197               	movf	find_volume@fmt& (0+255),w,b
  6516  000AB0  B4D8               	btfsc	status,2,c
  6517  000AB2  D002               	goto	l5535
  6518  000AB4                     u7380:
  6519  000AB4                     l5531:
  6520                           
  6521                           ; BSR set to: 0
  6522  000AB4  0E0D               	movlw	13
  6523  000AB6  0012               	return	
  6524  000AB8                     l5535:
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6528  000AB8  EE20 F039          	lfsr	2,57
  6529  000ABC  5198               	movf	find_volume@fs& (0+255),w,b
  6530  000ABE  26D9               	addwf	fsr2l,f,c
  6531  000AC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6532  000AC2  22DA               	addwfc	fsr2h,f,c
  6533  000AC4  50DE               	movf	postinc2,w,c
  6534  000AC6  E1F6               	bnz	l5531
  6535  000AC8  0E02               	movlw	2
  6536  000ACA  18DE               	xorwf	postinc2,w,c
  6537  000ACC  A4D8               	btfss	status,2,c
  6538  000ACE  D7F2               	goto	u7380
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6542  000AD0  EE20 F044          	lfsr	2,68
  6543  000AD4  5198               	movf	find_volume@fs& (0+255),w,b
  6544  000AD6  26D9               	addwf	fsr2l,f,c
  6545  000AD8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6546  000ADA  22DA               	addwfc	fsr2h,f,c
  6547  000ADC  CFDE F04A          	movff	postinc2,??_find_volume
  6548  000AE0  CFDD F04B          	movff	postdec2,??_find_volume+1
  6549  000AE4  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6550  000AE8  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6551  000AEC  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6552  000AEE  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6556  000AF0  518D               	movf	find_volume@fasize& (0+255),w,b
  6557  000AF2  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6558  000AF4  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6559  000AF6  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6560  000AF8  A4D8               	btfss	status,2,c
  6561  000AFA  D00E               	goto	l597
  6562                           
  6563                           ; BSR set to: 0
  6564  000AFC  EE20 F052          	lfsr	2,82
  6565  000B00  5198               	movf	find_volume@fs& (0+255),w,b
  6566  000B02  26D9               	addwf	fsr2l,f,c
  6567  000B04  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6568  000B06  22DA               	addwfc	fsr2h,f,c
  6569  000B08  CFDE F08D          	movff	postinc2,find_volume@fasize
  6570  000B0C  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6571  000B10  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6572  000B14  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6573  000B18                     l597:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;ff.c: 2278:  fs->fsize = fasize;
  6577  000B18  EE20 F016          	lfsr	2,22
  6578  000B1C  5198               	movf	find_volume@fs& (0+255),w,b
  6579  000B1E  26D9               	addwf	fsr2l,f,c
  6580  000B20  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6581  000B22  22DA               	addwfc	fsr2h,f,c
  6582  000B24  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6583  000B28  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6584  000B2C  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6585  000B30  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6589  000B34  EE20 F03E          	lfsr	2,62
  6590  000B38  5198               	movf	find_volume@fs& (0+255),w,b
  6591  000B3A  26D9               	addwf	fsr2l,f,c
  6592  000B3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6593  000B3E  22DA               	addwfc	fsr2h,f,c
  6594  000B40  EE10 F003          	lfsr	1,3
  6595  000B44  5198               	movf	find_volume@fs& (0+255),w,b
  6596  000B46  26E1               	addwf	fsr1l,f,c
  6597  000B48  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6598  000B4A  22E2               	addwfc	fsr1h,f,c
  6599  000B4C  CFDF FFE7          	movff	indf2,indf1
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6603  000B50  EE20 F003          	lfsr	2,3
  6604  000B54  5198               	movf	find_volume@fs& (0+255),w,b
  6605  000B56  26D9               	addwf	fsr2l,f,c
  6606  000B58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6607  000B5A  22DA               	addwfc	fsr2h,f,c
  6608  000B5C  04DE               	decf	postinc2,w,c
  6609  000B5E  B4D8               	btfsc	status,2,c
  6610  000B60  D00A               	goto	l5557
  6611                           
  6612                           ; BSR set to: 0
  6613  000B62  EE20 F003          	lfsr	2,3
  6614  000B66  5198               	movf	find_volume@fs& (0+255),w,b
  6615  000B68  26D9               	addwf	fsr2l,f,c
  6616  000B6A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6617  000B6C  22DA               	addwfc	fsr2h,f,c
  6618  000B6E  0E02               	movlw	2
  6619  000B70  18DE               	xorwf	postinc2,w,c
  6620  000B72  A4D8               	btfss	status,2,c
  6621  000B74  D79F               	goto	u7380
  6622  000B76                     l5557:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6626  000B76  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6627  000B7A  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6628  000B7E  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6629  000B82  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6630  000B86  EE20 F003          	lfsr	2,3
  6631  000B8A  5198               	movf	find_volume@fs& (0+255),w,b
  6632  000B8C  26D9               	addwf	fsr2l,f,c
  6633  000B8E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6634  000B90  22DA               	addwfc	fsr2h,f,c
  6635  000B92  50DF               	movf	indf2,w,c
  6636  000B94  6E4A               	movwf	??_find_volume& (0+255),c
  6637  000B96  504A               	movf	??_find_volume,w,c
  6638  000B98  6E05               	movwf	___lmul@multiplicand,c
  6639  000B9A  6A06               	clrf	___lmul@multiplicand+1,c
  6640  000B9C  6A07               	clrf	___lmul@multiplicand+2,c
  6641  000B9E  6A08               	clrf	___lmul@multiplicand+3,c
  6642  000BA0  EC6C  F029         	call	___lmul	;wreg free
  6643  000BA4  C001  F08D         	movff	?___lmul,find_volume@fasize
  6644  000BA8  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6645  000BAC  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6646  000BB0  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6647                           
  6648                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6649  000BB4  0100               	movlb	0	; () banked
  6650  000BB6  EE20 F03B          	lfsr	2,59
  6651  000BBA  5198               	movf	find_volume@fs& (0+255),w,b
  6652  000BBC  26D9               	addwf	fsr2l,f,c
  6653  000BBE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6654  000BC0  22DA               	addwfc	fsr2h,f,c
  6655  000BC2  EE10 F002          	lfsr	1,2
  6656  000BC6  5198               	movf	find_volume@fs& (0+255),w,b
  6657  000BC8  26E1               	addwf	fsr1l,f,c
  6658  000BCA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6659  000BCC  22E2               	addwfc	fsr1h,f,c
  6660  000BCE  CFDF FFE7          	movff	indf2,indf1
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6664  000BD2  EE20 F002          	lfsr	2,2
  6665  000BD6  5198               	movf	find_volume@fs& (0+255),w,b
  6666  000BD8  26D9               	addwf	fsr2l,f,c
  6667  000BDA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6668  000BDC  22DA               	addwfc	fsr2h,f,c
  6669  000BDE  50DF               	movf	indf2,w,c
  6670  000BE0  B4D8               	btfsc	status,2,c
  6671  000BE2  D768               	goto	u7380
  6672                           
  6673                           ; BSR set to: 0
  6674  000BE4  0EFF               	movlw	255
  6675  000BE6  6E4A               	movwf	??_find_volume& (0+255),c
  6676  000BE8  0EFF               	movlw	255
  6677  000BEA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6678  000BEC  EE20 F002          	lfsr	2,2
  6679  000BF0  5198               	movf	find_volume@fs& (0+255),w,b
  6680  000BF2  26D9               	addwf	fsr2l,f,c
  6681  000BF4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6682  000BF6  22DA               	addwfc	fsr2h,f,c
  6683  000BF8  50DF               	movf	indf2,w,c
  6684  000BFA  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6685  000BFC  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6686  000BFE  504A               	movf	??_find_volume,w,c
  6687  000C00  264C               	addwf	??_find_volume+2,f,c
  6688  000C02  504B               	movf	??_find_volume+1,w,c
  6689  000C04  224D               	addwfc	??_find_volume+3,f,c
  6690  000C06  EE20 F002          	lfsr	2,2
  6691  000C0A  5198               	movf	find_volume@fs& (0+255),w,b
  6692  000C0C  26D9               	addwf	fsr2l,f,c
  6693  000C0E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6694  000C10  22DA               	addwfc	fsr2h,f,c
  6695  000C12  50DF               	movf	indf2,w,c
  6696  000C14  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6697  000C16  504E               	movf	??_find_volume+4,w,c
  6698  000C18  164C               	andwf	??_find_volume+2,f,c
  6699  000C1A  0E00               	movlw	0
  6700  000C1C  164D               	andwf	??_find_volume+3,f,c
  6701  000C1E  504C               	movf	??_find_volume+2,w,c
  6702  000C20  104D               	iorwf	??_find_volume+3,w,c
  6703  000C22  A4D8               	btfss	status,2,c
  6704  000C24  D747               	goto	u7380
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6708  000C26  EE20 F03F          	lfsr	2,63
  6709  000C2A  5198               	movf	find_volume@fs& (0+255),w,b
  6710  000C2C  26D9               	addwf	fsr2l,f,c
  6711  000C2E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6712  000C30  22DA               	addwfc	fsr2h,f,c
  6713  000C32  EE10 F008          	lfsr	1,8
  6714  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  6715  000C38  26E1               	addwf	fsr1l,f,c
  6716  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6717  000C3C  22E2               	addwfc	fsr1h,f,c
  6718  000C3E  CFDE FFE6          	movff	postinc2,postinc1
  6719  000C42  CFDD FFE5          	movff	postdec2,postdec1
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6723  000C46  EE20 F008          	lfsr	2,8
  6724  000C4A  5198               	movf	find_volume@fs& (0+255),w,b
  6725  000C4C  26D9               	addwf	fsr2l,f,c
  6726  000C4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6727  000C50  22DA               	addwfc	fsr2h,f,c
  6728  000C52  CFDE F04A          	movff	postinc2,??_find_volume
  6729  000C56  CFDD F04B          	movff	postdec2,??_find_volume+1
  6730  000C5A  0E0F               	movlw	15
  6731  000C5C  164A               	andwf	??_find_volume,f,c
  6732  000C5E  0E00               	movlw	0
  6733  000C60  164B               	andwf	??_find_volume+1,f,c
  6734  000C62  504A               	movf	??_find_volume,w,c
  6735  000C64  104B               	iorwf	??_find_volume+1,w,c
  6736  000C66  A4D8               	btfss	status,2,c
  6737  000C68  D725               	goto	u7380
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6741  000C6A  EE20 F041          	lfsr	2,65
  6742  000C6E  5198               	movf	find_volume@fs& (0+255),w,b
  6743  000C70  26D9               	addwf	fsr2l,f,c
  6744  000C72  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6745  000C74  22DA               	addwfc	fsr2h,f,c
  6746  000C76  CFDE F04A          	movff	postinc2,??_find_volume
  6747  000C7A  CFDD F04B          	movff	postdec2,??_find_volume+1
  6748  000C7E  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6749  000C82  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6750  000C86  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6751  000C88  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6755  000C8A  5184               	movf	find_volume@tsect& (0+255),w,b
  6756  000C8C  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6757  000C8E  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6758  000C90  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6759  000C92  A4D8               	btfss	status,2,c
  6760  000C94  D00E               	goto	l603
  6761                           
  6762                           ; BSR set to: 0
  6763  000C96  EE20 F04E          	lfsr	2,78
  6764  000C9A  5198               	movf	find_volume@fs& (0+255),w,b
  6765  000C9C  26D9               	addwf	fsr2l,f,c
  6766  000C9E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6767  000CA0  22DA               	addwfc	fsr2h,f,c
  6768  000CA2  CFDE F084          	movff	postinc2,find_volume@tsect
  6769  000CA6  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6770  000CAA  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6771  000CAE  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6772  000CB2                     l603:
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6776  000CB2  EE20 F03C          	lfsr	2,60
  6777  000CB6  5198               	movf	find_volume@fs& (0+255),w,b
  6778  000CB8  26D9               	addwf	fsr2l,f,c
  6779  000CBA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6780  000CBC  22DA               	addwfc	fsr2h,f,c
  6781  000CBE  CFDE F082          	movff	postinc2,find_volume@nrsv
  6782  000CC2  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6786  000CC6  5182               	movf	find_volume@nrsv& (0+255),w,b
  6787  000CC8  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6788  000CCA  B4D8               	btfsc	status,2,c
  6789  000CCC  D6F3               	goto	u7380
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6793  000CCE  EE20 F008          	lfsr	2,8
  6794  000CD2  5198               	movf	find_volume@fs& (0+255),w,b
  6795  000CD4  26D9               	addwf	fsr2l,f,c
  6796  000CD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6797  000CD8  22DA               	addwfc	fsr2h,f,c
  6798  000CDA  CFDE F04A          	movff	postinc2,??_find_volume
  6799  000CDE  CFDD F04B          	movff	postdec2,??_find_volume+1
  6800  000CE2  0E04               	movlw	4
  6801  000CE4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6802  000CE6                     u7485:
  6803  000CE6  90D8               	bcf	status,0,c
  6804  000CE8  324B               	rrcf	??_find_volume+1,f,c
  6805  000CEA  324A               	rrcf	??_find_volume,f,c
  6806  000CEC  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6807  000CEE  D7FB               	goto	u7485
  6808  000CF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  6809  000CF2  244A               	addwf	??_find_volume,w,c
  6810  000CF4  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6811  000CF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6812  000CF8  204B               	addwfc	??_find_volume+1,w,c
  6813  000CFA  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6814  000CFC  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6815  000CFE  B0D8               	btfsc	status,0,c
  6816  000D00  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6817  000D02  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6818  000D04  518D               	movf	find_volume@fasize& (0+255),w,b
  6819  000D06  244D               	addwf	??_find_volume+3,w,c
  6820  000D08  6F7C               	movwf	find_volume@sysect& (0+255),b
  6821  000D0A  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6822  000D0C  204E               	addwfc	??_find_volume+4,w,c
  6823  000D0E  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6824  000D10  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6825  000D12  204F               	addwfc	??_find_volume+5,w,c
  6826  000D14  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6827  000D16  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6828  000D18  2050               	addwfc	??_find_volume+6,w,c
  6829  000D1A  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6833  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  6834  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6835  000D20  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6836  000D22  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6837  000D24  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6838  000D26  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6839  000D28  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6840  000D2A  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6841  000D2C  A0D8               	btfss	status,0,c
  6842  000D2E  D6C2               	goto	u7380
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6846  000D30  517C               	movf	find_volume@sysect& (0+255),w,b
  6847  000D32  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6848  000D34  6E01               	movwf	___lldiv@dividend,c
  6849  000D36  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6850  000D38  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6851  000D3A  6E02               	movwf	___lldiv@dividend+1,c
  6852  000D3C  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6853  000D3E  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6854  000D40  6E03               	movwf	___lldiv@dividend+2,c
  6855  000D42  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6856  000D44  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6857  000D46  6E04               	movwf	___lldiv@dividend+3,c
  6858  000D48  EE20 F002          	lfsr	2,2
  6859  000D4C  5198               	movf	find_volume@fs& (0+255),w,b
  6860  000D4E  26D9               	addwf	fsr2l,f,c
  6861  000D50  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6862  000D52  22DA               	addwfc	fsr2h,f,c
  6863  000D54  50DF               	movf	indf2,w,c
  6864  000D56  6E4A               	movwf	??_find_volume& (0+255),c
  6865  000D58  504A               	movf	??_find_volume,w,c
  6866  000D5A  6E05               	movwf	___lldiv@divisor,c
  6867  000D5C  6A06               	clrf	___lldiv@divisor+1,c
  6868  000D5E  6A07               	clrf	___lldiv@divisor+2,c
  6869  000D60  6A08               	clrf	___lldiv@divisor+3,c
  6870  000D62  ECD6  F027         	call	___lldiv	;wreg free
  6871  000D66  C001  F088         	movff	?___lldiv,find_volume@nclst
  6872  000D6A  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6873  000D6E  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6874  000D72  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6875                           
  6876                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6877  000D76  0100               	movlb	0	; () banked
  6878  000D78  5188               	movf	find_volume@nclst& (0+255),w,b
  6879  000D7A  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  6880  000D7C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6881  000D7E  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  6882  000D80  B4D8               	btfsc	status,2,c
  6883  000D82  D698               	goto	u7380
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;ff.c: 2304:  fmt = 1;
  6887  000D84  0E01               	movlw	1
  6888  000D86  6F97               	movwf	find_volume@fmt& (0+255),b
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  6892  000D88  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6893  000D8A  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6894  000D8C  E106               	bnz	u7510
  6895  000D8E  0EF6               	movlw	246
  6896  000D90  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6897  000D92  0E0F               	movlw	15
  6898  000D94  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6899  000D96  A0D8               	btfss	status,0,c
  6900  000D98  D002               	goto	l5611
  6901  000D9A                     u7510:
  6902                           
  6903                           ; BSR set to: 0
  6904  000D9A  0E02               	movlw	2
  6905  000D9C  6F97               	movwf	find_volume@fmt& (0+255),b
  6906  000D9E                     l5611:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  6910  000D9E  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6911  000DA0  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6912  000DA2  E106               	bnz	u7520
  6913  000DA4  0EF6               	movlw	246
  6914  000DA6  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6915  000DA8  0EFF               	movlw	255
  6916  000DAA  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6917  000DAC  A0D8               	btfss	status,0,c
  6918  000DAE  D002               	goto	l5615
  6919  000DB0                     u7520:
  6920                           
  6921                           ; BSR set to: 0
  6922  000DB0  0E03               	movlw	3
  6923  000DB2  6F97               	movwf	find_volume@fmt& (0+255),b
  6924  000DB4                     l5615:
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  6928  000DB4  0E02               	movlw	2
  6929  000DB6  2588               	addwf	find_volume@nclst& (0+255),w,b
  6930  000DB8  6E4A               	movwf	??_find_volume& (0+255),c
  6931  000DBA  0E00               	movlw	0
  6932  000DBC  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  6933  000DBE  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6934  000DC0  0E00               	movlw	0
  6935  000DC2  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  6936  000DC4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6937  000DC6  0E00               	movlw	0
  6938  000DC8  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  6939  000DCA  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6940  000DCC  EE20 F012          	lfsr	2,18
  6941  000DD0  5198               	movf	find_volume@fs& (0+255),w,b
  6942  000DD2  26D9               	addwf	fsr2l,f,c
  6943  000DD4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6944  000DD6  22DA               	addwfc	fsr2h,f,c
  6945  000DD8  C04A  FFDE         	movff	??_find_volume,postinc2
  6946  000DDC  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6947  000DE0  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6948  000DE4  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;ff.c: 2310:  fs->volbase = bsect;
  6952  000DE8  EE20 F01A          	lfsr	2,26
  6953  000DEC  5198               	movf	find_volume@fs& (0+255),w,b
  6954  000DEE  26D9               	addwf	fsr2l,f,c
  6955  000DF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6956  000DF2  22DA               	addwfc	fsr2h,f,c
  6957  000DF4  C091  FFDE         	movff	find_volume@bsect,postinc2
  6958  000DF8  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  6959  000DFC  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  6960  000E00  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  6964  000E04  5182               	movf	find_volume@nrsv& (0+255),w,b
  6965  000E06  2591               	addwf	find_volume@bsect& (0+255),w,b
  6966  000E08  6E4A               	movwf	??_find_volume& (0+255),c
  6967  000E0A  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6968  000E0C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6969  000E0E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6970  000E10  0E00               	movlw	0
  6971  000E12  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6972  000E14  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6973  000E16  0E00               	movlw	0
  6974  000E18  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6975  000E1A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6976  000E1C  EE20 F01E          	lfsr	2,30
  6977  000E20  5198               	movf	find_volume@fs& (0+255),w,b
  6978  000E22  26D9               	addwf	fsr2l,f,c
  6979  000E24  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6980  000E26  22DA               	addwfc	fsr2h,f,c
  6981  000E28  C04A  FFDE         	movff	??_find_volume,postinc2
  6982  000E2C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6983  000E30  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6984  000E34  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;ff.c: 2312:  fs->database = bsect + sysect;
  6988  000E38  517C               	movf	find_volume@sysect& (0+255),w,b
  6989  000E3A  2591               	addwf	find_volume@bsect& (0+255),w,b
  6990  000E3C  6E4A               	movwf	??_find_volume& (0+255),c
  6991  000E3E  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6992  000E40  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6993  000E42  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6994  000E44  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6995  000E46  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6996  000E48  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6997  000E4A  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6998  000E4C  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6999  000E4E  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7000  000E50  EE20 F026          	lfsr	2,38
  7001  000E54  5198               	movf	find_volume@fs& (0+255),w,b
  7002  000E56  26D9               	addwf	fsr2l,f,c
  7003  000E58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7004  000E5A  22DA               	addwfc	fsr2h,f,c
  7005  000E5C  C04A  FFDE         	movff	??_find_volume,postinc2
  7006  000E60  C04B  FFDE         	movff	??_find_volume+1,postinc2
  7007  000E64  C04C  FFDE         	movff	??_find_volume+2,postinc2
  7008  000E68  C04D  FFDE         	movff	??_find_volume+3,postinc2
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;ff.c: 2313:  if (fmt == 3) {
  7012  000E6C  0E03               	movlw	3
  7013  000E6E  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7014  000E70  A4D8               	btfss	status,2,c
  7015  000E72  D03D               	goto	l5635
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  7019  000E74  EE20 F008          	lfsr	2,8
  7020  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  7021  000E7A  26D9               	addwf	fsr2l,f,c
  7022  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7023  000E7E  22DA               	addwfc	fsr2h,f,c
  7024  000E80  50DE               	movf	postinc2,w,c
  7025  000E82  10DE               	iorwf	postinc2,w,c
  7026  000E84  A4D8               	btfss	status,2,c
  7027  000E86  D616               	goto	u7380
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  7031  000E88  EE20 F05A          	lfsr	2,90
  7032  000E8C  5198               	movf	find_volume@fs& (0+255),w,b
  7033  000E8E  26D9               	addwf	fsr2l,f,c
  7034  000E90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7035  000E92  22DA               	addwfc	fsr2h,f,c
  7036  000E94  EE10 F022          	lfsr	1,34
  7037  000E98  5198               	movf	find_volume@fs& (0+255),w,b
  7038  000E9A  26E1               	addwf	fsr1l,f,c
  7039  000E9C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7040  000E9E  22E2               	addwfc	fsr1h,f,c
  7041  000EA0  CFDE FFE6          	movff	postinc2,postinc1
  7042  000EA4  CFDE FFE6          	movff	postinc2,postinc1
  7043  000EA8  CFDE FFE6          	movff	postinc2,postinc1
  7044  000EAC  CFDE FFE6          	movff	postinc2,postinc1
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  7048  000EB0  EE20 F012          	lfsr	2,18
  7049  000EB4  5198               	movf	find_volume@fs& (0+255),w,b
  7050  000EB6  26D9               	addwf	fsr2l,f,c
  7051  000EB8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7052  000EBA  22DA               	addwfc	fsr2h,f,c
  7053  000EBC  CFDE F04A          	movff	postinc2,??_find_volume
  7054  000EC0  CFDE F04B          	movff	postinc2,??_find_volume+1
  7055  000EC4  CFDE F04C          	movff	postinc2,??_find_volume+2
  7056  000EC8  CFDE F04D          	movff	postinc2,??_find_volume+3
  7057  000ECC  0E02               	movlw	2
  7058  000ECE                     u7555:
  7059  000ECE  90D8               	bcf	status,0,c
  7060  000ED0  364A               	rlcf	??_find_volume,f,c
  7061  000ED2  364B               	rlcf	??_find_volume+1,f,c
  7062  000ED4  364C               	rlcf	??_find_volume+2,f,c
  7063  000ED6  364D               	rlcf	??_find_volume+3,f,c
  7064  000ED8  2EE8               	decfsz	wreg,f,c
  7065  000EDA  D7F9               	goto	u7555
  7066  000EDC  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  7067  000EE0  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  7068  000EE4  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  7069  000EE8  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  7070                           
  7071                           ;ff.c: 2317:  } else {
  7072  000EEC  D091               	goto	l611
  7073  000EEE                     l5635:
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  7077  000EEE  EE20 F008          	lfsr	2,8
  7078  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  7079  000EF4  26D9               	addwf	fsr2l,f,c
  7080  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7081  000EF8  22DA               	addwfc	fsr2h,f,c
  7082  000EFA  50DE               	movf	postinc2,w,c
  7083  000EFC  10DE               	iorwf	postinc2,w,c
  7084  000EFE  B4D8               	btfsc	status,2,c
  7085  000F00  D5D9               	goto	u7380
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  7089  000F02  EE20 F01E          	lfsr	2,30
  7090  000F06  5198               	movf	find_volume@fs& (0+255),w,b
  7091  000F08  26D9               	addwf	fsr2l,f,c
  7092  000F0A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7093  000F0C  22DA               	addwfc	fsr2h,f,c
  7094  000F0E  CFDE F04A          	movff	postinc2,??_find_volume
  7095  000F12  CFDE F04B          	movff	postinc2,??_find_volume+1
  7096  000F16  CFDE F04C          	movff	postinc2,??_find_volume+2
  7097  000F1A  CFDE F04D          	movff	postinc2,??_find_volume+3
  7098  000F1E  518D               	movf	find_volume@fasize& (0+255),w,b
  7099  000F20  244A               	addwf	??_find_volume,w,c
  7100  000F22  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7101  000F24  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7102  000F26  204B               	addwfc	??_find_volume+1,w,c
  7103  000F28  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7104  000F2A  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7105  000F2C  204C               	addwfc	??_find_volume+2,w,c
  7106  000F2E  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7107  000F30  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7108  000F32  204D               	addwfc	??_find_volume+3,w,c
  7109  000F34  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7110  000F36  EE20 F022          	lfsr	2,34
  7111  000F3A  5198               	movf	find_volume@fs& (0+255),w,b
  7112  000F3C  26D9               	addwf	fsr2l,f,c
  7113  000F3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7114  000F40  22DA               	addwfc	fsr2h,f,c
  7115  000F42  C04E  FFDE         	movff	??_find_volume+4,postinc2
  7116  000F46  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7117  000F4A  C050  FFDE         	movff	??_find_volume+6,postinc2
  7118  000F4E  C051  FFDE         	movff	??_find_volume+7,postinc2
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7122  000F52  0E02               	movlw	2
  7123  000F54  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7124  000F56  B4D8               	btfsc	status,2,c
  7125  000F58  D044               	goto	l5647
  7126                           
  7127                           ; BSR set to: 0
  7128  000F5A  EE20 F012          	lfsr	2,18
  7129  000F5E  5198               	movf	find_volume@fs& (0+255),w,b
  7130  000F60  26D9               	addwf	fsr2l,f,c
  7131  000F62  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7132  000F64  22DA               	addwfc	fsr2h,f,c
  7133  000F66  CFDE F04A          	movff	postinc2,??_find_volume
  7134  000F6A  CFDE F04B          	movff	postinc2,??_find_volume+1
  7135  000F6E  CFDE F04C          	movff	postinc2,??_find_volume+2
  7136  000F72  CFDE F04D          	movff	postinc2,??_find_volume+3
  7137  000F76  0E01               	movlw	1
  7138  000F78  144A               	andwf	??_find_volume,w,c
  7139  000F7A  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7140  000F7C  0E00               	movlw	0
  7141  000F7E  144B               	andwf	??_find_volume+1,w,c
  7142  000F80  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7143  000F82  0E00               	movlw	0
  7144  000F84  144C               	andwf	??_find_volume+2,w,c
  7145  000F86  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7146  000F88  0E00               	movlw	0
  7147  000F8A  144D               	andwf	??_find_volume+3,w,c
  7148  000F8C  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7149  000F8E  EE20 F012          	lfsr	2,18
  7150  000F92  5198               	movf	find_volume@fs& (0+255),w,b
  7151  000F94  26D9               	addwf	fsr2l,f,c
  7152  000F96  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7153  000F98  22DA               	addwfc	fsr2h,f,c
  7154  000F9A  CFDE F001          	movff	postinc2,___lmul@multiplier
  7155  000F9E  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7156  000FA2  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7157  000FA6  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7158  000FAA  0E03               	movlw	3
  7159  000FAC  6E05               	movwf	___lmul@multiplicand,c
  7160  000FAE  0E00               	movlw	0
  7161  000FB0  6E06               	movwf	___lmul@multiplicand+1,c
  7162  000FB2  0E00               	movlw	0
  7163  000FB4  6E07               	movwf	___lmul@multiplicand+2,c
  7164  000FB6  0E00               	movlw	0
  7165  000FB8  6E08               	movwf	___lmul@multiplicand+3,c
  7166  000FBA  EC6C  F029         	call	___lmul	;wreg free
  7167  000FBE  90D8               	bcf	status,0,c
  7168  000FC0  3204               	rrcf	?___lmul+3,f,c
  7169  000FC2  3203               	rrcf	?___lmul+2,f,c
  7170  000FC4  3202               	rrcf	?___lmul+1,f,c
  7171  000FC6  3201               	rrcf	?___lmul,f,c
  7172  000FC8  504E               	movf	??_find_volume+4,w,c
  7173  000FCA  2401               	addwf	?___lmul,w,c
  7174  000FCC  0100               	movlb	0	; () banked
  7175  000FCE  6F76               	movwf	find_volume@szbfat& (0+255),b
  7176  000FD0  504F               	movf	??_find_volume+5,w,c
  7177  000FD2  2002               	addwfc	?___lmul+1,w,c
  7178  000FD4  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7179  000FD6  5050               	movf	??_find_volume+6,w,c
  7180  000FD8  2003               	addwfc	?___lmul+2,w,c
  7181  000FDA  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7182  000FDC  5051               	movf	??_find_volume+7,w,c
  7183  000FDE  2004               	addwfc	?___lmul+3,w,c
  7184  000FE0  D016               	goto	L6
  7185  000FE2                     l5647:
  7186                           
  7187                           ; BSR set to: 0
  7188  000FE2  EE20 F012          	lfsr	2,18
  7189  000FE6  5198               	movf	find_volume@fs& (0+255),w,b
  7190  000FE8  26D9               	addwf	fsr2l,f,c
  7191  000FEA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7192  000FEC  22DA               	addwfc	fsr2h,f,c
  7193  000FEE  CFDE F04A          	movff	postinc2,??_find_volume
  7194  000FF2  CFDE F04B          	movff	postinc2,??_find_volume+1
  7195  000FF6  CFDE F04C          	movff	postinc2,??_find_volume+2
  7196  000FFA  CFDE F04D          	movff	postinc2,??_find_volume+3
  7197  000FFE  90D8               	bcf	status,0,c
  7198  001000  344A               	rlcf	??_find_volume,w,c
  7199  001002  6F76               	movwf	find_volume@szbfat& (0+255),b
  7200  001004  344B               	rlcf	??_find_volume+1,w,c
  7201  001006  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7202  001008  344C               	rlcf	??_find_volume+2,w,c
  7203  00100A  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7204  00100C  344D               	rlcf	??_find_volume+3,w,c
  7205  00100E                     L6:
  7206  00100E  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7207  001010                     l611:
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7211  001010  0EFF               	movlw	255
  7212  001012  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7213  001014  6E4A               	movwf	??_find_volume& (0+255),c
  7214  001016  0E01               	movlw	1
  7215  001018  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7216  00101A  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7217  00101C  0E00               	movlw	0
  7218  00101E  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7219  001020  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7220  001022  0E00               	movlw	0
  7221  001024  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7222  001026  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7223  001028  0E0A               	movlw	10
  7224  00102A  D005               	goto	u7580
  7225  00102C                     u7585:
  7226  00102C  90D8               	bcf	status,0,c
  7227  00102E  324D               	rrcf	??_find_volume+3,f,c
  7228  001030  324C               	rrcf	??_find_volume+2,f,c
  7229  001032  324B               	rrcf	??_find_volume+1,f,c
  7230  001034  324A               	rrcf	??_find_volume,f,c
  7231  001036                     u7580:
  7232  001036  2EE8               	decfsz	wreg,f,c
  7233  001038  D7F9               	goto	u7585
  7234  00103A  EE20 F016          	lfsr	2,22
  7235  00103E  5198               	movf	find_volume@fs& (0+255),w,b
  7236  001040  26D9               	addwf	fsr2l,f,c
  7237  001042  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7238  001044  22DA               	addwfc	fsr2h,f,c
  7239  001046  504A               	movf	??_find_volume,w,c
  7240  001048  5CDE               	subwf	postinc2,w,c
  7241  00104A  504B               	movf	??_find_volume+1,w,c
  7242  00104C  58DE               	subwfb	postinc2,w,c
  7243  00104E  504C               	movf	??_find_volume+2,w,c
  7244  001050  58DE               	subwfb	postinc2,w,c
  7245  001052  504D               	movf	??_find_volume+3,w,c
  7246  001054  58DE               	subwfb	postinc2,w,c
  7247  001056  A0D8               	btfss	status,0,c
  7248  001058  D52D               	goto	u7380
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7252  00105A  EE20 F00E          	lfsr	2,14
  7253  00105E  5198               	movf	find_volume@fs& (0+255),w,b
  7254  001060  26D9               	addwf	fsr2l,f,c
  7255  001062  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7256  001064  22DA               	addwfc	fsr2h,f,c
  7257  001066  0EFF               	movlw	255
  7258  001068  6EDE               	movwf	postinc2,c
  7259  00106A  0EFF               	movlw	255
  7260  00106C  6EDE               	movwf	postinc2,c
  7261  00106E  0EFF               	movlw	255
  7262  001070  6EDE               	movwf	postinc2,c
  7263  001072  0EFF               	movlw	255
  7264  001074  6EDD               	movwf	postdec2,c
  7265  001076  52DD               	movf	postdec2,f,c
  7266  001078  52DD               	movf	postdec2,f,c
  7267  00107A  EE10 F00A          	lfsr	1,10
  7268  00107E  5198               	movf	find_volume@fs& (0+255),w,b
  7269  001080  26E1               	addwf	fsr1l,f,c
  7270  001082  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7271  001084  22E2               	addwfc	fsr1h,f,c
  7272  001086  CFDE FFE6          	movff	postinc2,postinc1
  7273  00108A  CFDE FFE6          	movff	postinc2,postinc1
  7274  00108E  CFDE FFE6          	movff	postinc2,postinc1
  7275  001092  CFDE FFE6          	movff	postinc2,postinc1
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7279  001096  EE20 F005          	lfsr	2,5
  7280  00109A  5198               	movf	find_volume@fs& (0+255),w,b
  7281  00109C  26D9               	addwf	fsr2l,f,c
  7282  00109E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7283  0010A0  22DA               	addwfc	fsr2h,f,c
  7284  0010A2  0E80               	movlw	128
  7285  0010A4  6EDF               	movwf	indf2,c
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;ff.c: 2333:  if (fmt == 3
  7289  0010A6  0E03               	movlw	3
  7290  0010A8  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7291  0010AA  A4D8               	btfss	status,2,c
  7292  0010AC  D083               	goto	l5671
  7293                           
  7294                           ; BSR set to: 0
  7295  0010AE  EE20 F05E          	lfsr	2,94
  7296  0010B2  5198               	movf	find_volume@fs& (0+255),w,b
  7297  0010B4  26D9               	addwf	fsr2l,f,c
  7298  0010B6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7299  0010B8  22DA               	addwfc	fsr2h,f,c
  7300  0010BA  04DE               	decf	postinc2,w,c
  7301  0010BC  10DE               	iorwf	postinc2,w,c
  7302  0010BE  A4D8               	btfss	status,2,c
  7303  0010C0  D079               	goto	l5671
  7304                           
  7305                           ; BSR set to: 0
  7306  0010C2  C098  F030         	movff	find_volume@fs,move_window@fs
  7307  0010C6  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7308  0010CA  0E01               	movlw	1
  7309  0010CC  2591               	addwf	find_volume@bsect& (0+255),w,b
  7310  0010CE  6E32               	movwf	move_window@sector,c
  7311  0010D0  0E00               	movlw	0
  7312  0010D2  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7313  0010D4  6E33               	movwf	move_window@sector+1,c
  7314  0010D6  0E00               	movlw	0
  7315  0010D8  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7316  0010DA  6E34               	movwf	move_window@sector+2,c
  7317  0010DC  0E00               	movlw	0
  7318  0010DE  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7319  0010E0  6E35               	movwf	move_window@sector+3,c
  7320  0010E2  EC39  F027         	call	_move_window	;wreg free
  7321  0010E6  0900               	iorlw	0
  7322  0010E8  A4D8               	btfss	status,2,c
  7323  0010EA  D064               	goto	l5671
  7324                           
  7325                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7326  0010EC  0100               	movlb	0	; () banked
  7327  0010EE  EE20 F005          	lfsr	2,5
  7328  0010F2  5198               	movf	find_volume@fs& (0+255),w,b
  7329  0010F4  26D9               	addwf	fsr2l,f,c
  7330  0010F6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7331  0010F8  22DA               	addwfc	fsr2h,f,c
  7332  0010FA  0E00               	movlw	0
  7333  0010FC  6EDF               	movwf	indf2,c
  7334                           
  7335                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7336  0010FE  EE22 F02C          	lfsr	2,556
  7337  001102  5198               	movf	find_volume@fs& (0+255),w,b
  7338  001104  26D9               	addwf	fsr2l,f,c
  7339  001106  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7340  001108  22DA               	addwfc	fsr2h,f,c
  7341  00110A  0E55               	movlw	85
  7342  00110C  18DE               	xorwf	postinc2,w,c
  7343  00110E  E152               	bnz	l5671
  7344  001110  0EAA               	movlw	170
  7345  001112  18DE               	xorwf	postinc2,w,c
  7346  001114  A4D8               	btfss	status,2,c
  7347  001116  D04E               	goto	l5671
  7348                           
  7349                           ; BSR set to: 0
  7350  001118  EE20 F02E          	lfsr	2,46
  7351  00111C  5198               	movf	find_volume@fs& (0+255),w,b
  7352  00111E  26D9               	addwf	fsr2l,f,c
  7353  001120  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7354  001122  22DA               	addwfc	fsr2h,f,c
  7355  001124  0E52               	movlw	82
  7356  001126  18DE               	xorwf	postinc2,w,c
  7357  001128  E145               	bnz	l5671
  7358  00112A  0E52               	movlw	82
  7359  00112C  18DE               	xorwf	postinc2,w,c
  7360  00112E  E142               	bnz	l5671
  7361  001130  0E61               	movlw	97
  7362  001132  18DE               	xorwf	postinc2,w,c
  7363  001134  E13F               	bnz	l5671
  7364  001136  0E41               	movlw	65
  7365  001138  18DE               	xorwf	postinc2,w,c
  7366  00113A  A4D8               	btfss	status,2,c
  7367  00113C  D03B               	goto	l5671
  7368                           
  7369                           ; BSR set to: 0
  7370  00113E  EE22 F012          	lfsr	2,530
  7371  001142  5198               	movf	find_volume@fs& (0+255),w,b
  7372  001144  26D9               	addwf	fsr2l,f,c
  7373  001146  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7374  001148  22DA               	addwfc	fsr2h,f,c
  7375  00114A  0E72               	movlw	114
  7376  00114C  18DE               	xorwf	postinc2,w,c
  7377  00114E  E132               	bnz	l5671
  7378  001150  0E72               	movlw	114
  7379  001152  18DE               	xorwf	postinc2,w,c
  7380  001154  E12F               	bnz	l5671
  7381  001156  0E41               	movlw	65
  7382  001158  18DE               	xorwf	postinc2,w,c
  7383  00115A  E12C               	bnz	l5671
  7384  00115C  0E61               	movlw	97
  7385  00115E  18DE               	xorwf	postinc2,w,c
  7386  001160  A4D8               	btfss	status,2,c
  7387  001162  D028               	goto	l5671
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7391  001164  EE22 F016          	lfsr	2,534
  7392  001168  5198               	movf	find_volume@fs& (0+255),w,b
  7393  00116A  26D9               	addwf	fsr2l,f,c
  7394  00116C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7395  00116E  22DA               	addwfc	fsr2h,f,c
  7396  001170  EE10 F00E          	lfsr	1,14
  7397  001174  5198               	movf	find_volume@fs& (0+255),w,b
  7398  001176  26E1               	addwf	fsr1l,f,c
  7399  001178  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7400  00117A  22E2               	addwfc	fsr1h,f,c
  7401  00117C  CFDE FFE6          	movff	postinc2,postinc1
  7402  001180  CFDE FFE6          	movff	postinc2,postinc1
  7403  001184  CFDE FFE6          	movff	postinc2,postinc1
  7404  001188  CFDE FFE6          	movff	postinc2,postinc1
  7405                           
  7406                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7407  00118C  EE22 F01A          	lfsr	2,538
  7408  001190  5198               	movf	find_volume@fs& (0+255),w,b
  7409  001192  26D9               	addwf	fsr2l,f,c
  7410  001194  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7411  001196  22DA               	addwfc	fsr2h,f,c
  7412  001198  EE10 F00A          	lfsr	1,10
  7413  00119C  5198               	movf	find_volume@fs& (0+255),w,b
  7414  00119E  26E1               	addwf	fsr1l,f,c
  7415  0011A0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7416  0011A2  22E2               	addwfc	fsr1h,f,c
  7417  0011A4  CFDE FFE6          	movff	postinc2,postinc1
  7418  0011A8  CFDE FFE6          	movff	postinc2,postinc1
  7419  0011AC  CFDE FFE6          	movff	postinc2,postinc1
  7420  0011B0  CFDE FFE6          	movff	postinc2,postinc1
  7421  0011B4                     l5671:
  7422                           
  7423                           ;ff.c: 2352:  fs->fs_type = fmt;
  7424  0011B4  C098  FFD9         	movff	find_volume@fs,fsr2l
  7425  0011B8  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7426  0011BC  C097  FFDF         	movff	find_volume@fmt,indf2
  7427                           
  7428                           ;ff.c: 2353:  fs->id = ++Fsid;
  7429  0011C0  0100               	movlb	0	; () banked
  7430  0011C2  4BD4               	infsnz	_Fsid& (0+255),f,b
  7431  0011C4  2BD5               	incf	(_Fsid+1)& (0+255),f,b
  7432  0011C6  EE20 F006          	lfsr	2,6
  7433  0011CA  5198               	movf	find_volume@fs& (0+255),w,b
  7434  0011CC  26D9               	addwf	fsr2l,f,c
  7435  0011CE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7436  0011D0  22DA               	addwfc	fsr2h,f,c
  7437  0011D2  C0D4  FFDE         	movff	_Fsid,postinc2
  7438  0011D6  C0D5  FFDD         	movff	_Fsid+1,postdec2
  7439  0011DA  EF64  F004         	goto	l5451
  7440  0011DE                     __end_of_find_volume:
  7441                           	opt callstack 0
  7442                           
  7443 ;; *************** function _get_ldnumber *****************
  7444 ;; Defined at:
  7445 ;;		line 2114 in file "ff.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7448 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7451 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7452 ;;  i               2   10[COMRAM] unsigned short 
  7453 ;;  vol             2    8[COMRAM] int 
  7454 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7455 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  2    0[COMRAM] int 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7465 ;;      Params:         2       0       0       0       0       0       0       0       0
  7466 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7467 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7468 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7469 ;;Total ram usage:       14 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; This function calls:
  7472 ;;		Nothing
  7473 ;; This function is called by:
  7474 ;;		_find_volume
  7475 ;;		_f_mount
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           	psect	text18
  7480  0049CE                     __ptext18:
  7481                           	opt callstack 0
  7482  0049CE                     _get_ldnumber:
  7483                           	opt callstack 27
  7484                           
  7485                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;incstack = 0
  7489  0049CE  6809               	setf	get_ldnumber@vol,c
  7490  0049D0  680A               	setf	get_ldnumber@vol+1,c
  7491                           
  7492                           ;ff.c: 2129:  if (*path) {
  7493  0049D2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7494  0049D6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7495  0049DA  50DE               	movf	postinc2,w,c
  7496  0049DC  10DE               	iorwf	postinc2,w,c
  7497  0049DE  B4D8               	btfsc	status,2,c
  7498  0049E0  D05B               	goto	l5227
  7499                           
  7500                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7501  0049E2  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7502  0049E6  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7503  0049EA  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7504  0049EE  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7505  0049F2  D002               	goto	l5201
  7506  0049F4                     l5199:
  7507  0049F4  4A0D               	infsnz	get_ldnumber@tt,f,c
  7508  0049F6  2A0E               	incf	get_ldnumber@tt+1,f,c
  7509  0049F8                     l5201:
  7510  0049F8  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7511  0049FC  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7512  004A00                     	if	0	;tblptru may be non-zero
  7513  004A00                     	endif
  7514  004A00                     	if	0	;tblptru may be non-zero
  7515  004A00                     	endif
  7516  004A00  0E20               	movlw	32
  7517  004A02  0008               	tblrd		*
  7518  004A04  64F5               	cpfsgt	tablat,c
  7519  004A06  D009               	goto	u6850
  7520  004A08  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7521  004A0C  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7522  004A10                     	if	0	;tblptru may be non-zero
  7523  004A10                     	endif
  7524  004A10                     	if	0	;tblptru may be non-zero
  7525  004A10                     	endif
  7526  004A10  0008               	tblrd		*
  7527  004A12  50F5               	movf	tablat,w,c
  7528  004A14  0A3A               	xorlw	58
  7529  004A16  A4D8               	btfss	status,2,c
  7530  004A18  D7ED               	goto	l5199
  7531  004A1A                     u6850:
  7532                           
  7533                           ;ff.c: 2131:   if (*tt == ':') {
  7534  004A1A  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7535  004A1E  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7536  004A22                     	if	0	;tblptru may be non-zero
  7537  004A22                     	endif
  7538  004A22                     	if	0	;tblptru may be non-zero
  7539  004A22                     	endif
  7540  004A22  0008               	tblrd		*
  7541  004A24  50F5               	movf	tablat,w,c
  7542  004A26  0A3A               	xorlw	58
  7543  004A28  A4D8               	btfss	status,2,c
  7544  004A2A  D03B               	goto	l5231
  7545                           
  7546                           ;ff.c: 2132:    tp = *path;
  7547  004A2C  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7548  004A30  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7549  004A34  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7550  004A38  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7551                           
  7552                           ;ff.c: 2133:    i = *tp++ - '0';
  7553  004A3C  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7554  004A40  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7555  004A44                     	if	0	;tblptru may be non-zero
  7556  004A44                     	endif
  7557  004A44                     	if	0	;tblptru may be non-zero
  7558  004A44                     	endif
  7559  004A44  0008               	tblrd		*
  7560  004A46  CFF5 F003          	movff	tablat,??_get_ldnumber
  7561  004A4A  0ED0               	movlw	208
  7562  004A4C  2403               	addwf	??_get_ldnumber,w,c
  7563  004A4E  6E0B               	movwf	get_ldnumber@i,c
  7564  004A50  6A0C               	clrf	get_ldnumber@i+1,c
  7565  004A52  0EFF               	movlw	255
  7566  004A54  220C               	addwfc	get_ldnumber@i+1,f,c
  7567  004A56  4A07               	infsnz	get_ldnumber@tp,f,c
  7568  004A58  2A08               	incf	get_ldnumber@tp+1,f,c
  7569                           
  7570                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7571  004A5A  500C               	movf	get_ldnumber@i+1,w,c
  7572  004A5C  E11D               	bnz	l5227
  7573  004A5E  0E0A               	movlw	10
  7574  004A60  5C0B               	subwf	get_ldnumber@i,w,c
  7575  004A62  B0D8               	btfsc	status,0,c
  7576  004A64  D019               	goto	l5227
  7577  004A66  500D               	movf	get_ldnumber@tt,w,c
  7578  004A68  1807               	xorwf	get_ldnumber@tp,w,c
  7579  004A6A  E116               	bnz	l5227
  7580  004A6C  500E               	movf	get_ldnumber@tt+1,w,c
  7581  004A6E  1808               	xorwf	get_ldnumber@tp+1,w,c
  7582  004A70  A4D8               	btfss	status,2,c
  7583  004A72  D012               	goto	l5227
  7584                           
  7585                           ;ff.c: 2135:     if (i < 1) {
  7586  004A74  500B               	movf	get_ldnumber@i,w,c
  7587  004A76  100C               	iorwf	get_ldnumber@i+1,w,c
  7588  004A78  A4D8               	btfss	status,2,c
  7589  004A7A  D00E               	goto	l5227
  7590                           
  7591                           ;ff.c: 2136:      vol = (int)i;
  7592  004A7C  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7593  004A80  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7594                           
  7595                           ;ff.c: 2137:      *path = ++tt;
  7596  004A84  4A0D               	infsnz	get_ldnumber@tt,f,c
  7597  004A86  2A0E               	incf	get_ldnumber@tt+1,f,c
  7598  004A88  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7599  004A8C  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7600  004A90  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7601  004A94  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7602  004A98                     l5227:
  7603                           
  7604                           ;ff.c: 2156:    return vol;
  7605  004A98  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7606  004A9C  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7607  004AA0  0012               	return	
  7608  004AA2                     l5231:
  7609                           
  7610                           ;ff.c: 2161:   vol = 0;
  7611  004AA2  0E00               	movlw	0
  7612  004AA4  6E0A               	movwf	get_ldnumber@vol+1,c
  7613  004AA6  0E00               	movlw	0
  7614  004AA8  6E09               	movwf	get_ldnumber@vol,c
  7615  004AAA  D7F6               	goto	l5227
  7616  004AAC                     __end_of_get_ldnumber:
  7617                           	opt callstack 0
  7618                           
  7619 ;; *************** function _disk_initialize *****************
  7620 ;; Defined at:
  7621 ;;		line 296 in file "diskio.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  pdrv            1    wreg     unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  pdrv            1   17[COMRAM] unsigned char 
  7626 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7627 ;;  tmr             2   26[COMRAM] unsigned short 
  7628 ;;  n               1   28[COMRAM] unsigned char 
  7629 ;;  ty              1   25[COMRAM] unsigned char 
  7630 ;;  cmd             1   24[COMRAM] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      unsigned char 
  7633 ;; Registers used:
  7634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7640 ;;      Params:         0       0       0       0       0       0       0       0       0
  7641 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7642 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7643 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7644 ;;Total ram usage:       13 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    5
  7647 ;; This function calls:
  7648 ;;		_SPI1_Exchange8bit
  7649 ;;		_SPI1_Initialize
  7650 ;;		_SPI1_Open
  7651 ;;		_deselect
  7652 ;;		_send_cmd
  7653 ;; This function is called by:
  7654 ;;		_find_volume
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text19
  7659  003B96                     __ptext19:
  7660                           	opt callstack 0
  7661  003B96                     _disk_initialize:
  7662                           	opt callstack 22
  7663                           
  7664                           ;incstack = 0
  7665                           ;disk_initialize@pdrv stored from wreg
  7666  003B96  6E12               	movwf	disk_initialize@pdrv,c
  7667                           
  7668                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7669  003B98  5012               	movf	disk_initialize@pdrv,w,c
  7670  003B9A  B4D8               	btfsc	status,2,c
  7671  003B9C  D002               	goto	l134
  7672  003B9E  0E01               	movlw	1
  7673  003BA0  0012               	return	
  7674  003BA2                     l134:
  7675                           
  7676                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7677  003BA2  0100               	movlb	0	; () banked
  7678  003BA4  A3FA               	btfss	_Stat& (0+255),1,b
  7679  003BA6  D003               	goto	l4829
  7680  003BA8                     u6120:
  7681  003BA8  0100               	movlb	0	; () banked
  7682  003BAA  51FA               	movf	_Stat& (0+255),w,b
  7683  003BAC  0012               	return	
  7684  003BAE                     l4829:
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;diskio.c: 308:  SPI1_Initialize();
  7688  003BAE  ECF3  F02A         	call	_SPI1_Initialize	;wreg free
  7689                           
  7690                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7691  003BB2  0E0A               	movlw	10
  7692  003BB4  6E1D               	movwf	disk_initialize@n,c
  7693  003BB6  D004               	goto	l4837
  7694  003BB8                     l4833:
  7695  003BB8  0EFF               	movlw	255
  7696  003BBA  ECDD  F02A         	call	_SPI1_Exchange8bit
  7697  003BBE  061D               	decf	disk_initialize@n,f,c
  7698  003BC0                     l4837:
  7699  003BC0  501D               	movf	disk_initialize@n,w,c
  7700  003BC2  A4D8               	btfss	status,2,c
  7701  003BC4  D7F9               	goto	l4833
  7702                           
  7703                           ;diskio.c: 311:  ty = 0;
  7704  003BC6  0E00               	movlw	0
  7705  003BC8  6E1A               	movwf	disk_initialize@ty,c
  7706                           
  7707                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7708  003BCA  0E00               	movlw	0
  7709  003BCC  6E0B               	movwf	send_cmd@arg,c
  7710  003BCE  0E00               	movlw	0
  7711  003BD0  6E0C               	movwf	send_cmd@arg+1,c
  7712  003BD2  0E00               	movlw	0
  7713  003BD4  6E0D               	movwf	send_cmd@arg+2,c
  7714  003BD6  0E00               	movlw	0
  7715  003BD8  6E0E               	movwf	send_cmd@arg+3,c
  7716  003BDA  0E00               	movlw	0
  7717  003BDC  ECE6  F029         	call	_send_cmd
  7718  003BE0  06E8               	decf	wreg,f,c
  7719  003BE2  A4D8               	btfss	status,2,c
  7720  003BE4  D0C1               	goto	l156
  7721                           
  7722                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7723  003BE6  0EAA               	movlw	170
  7724  003BE8  6E0B               	movwf	send_cmd@arg,c
  7725  003BEA  0E01               	movlw	1
  7726  003BEC  6E0C               	movwf	send_cmd@arg+1,c
  7727  003BEE  0E00               	movlw	0
  7728  003BF0  6E0D               	movwf	send_cmd@arg+2,c
  7729  003BF2  0E00               	movlw	0
  7730  003BF4  6E0E               	movwf	send_cmd@arg+3,c
  7731  003BF6  0E08               	movlw	8
  7732  003BF8  ECE6  F029         	call	_send_cmd
  7733  003BFC  06E8               	decf	wreg,f,c
  7734  003BFE  A4D8               	btfss	status,2,c
  7735  003C00  D067               	goto	l4893
  7736                           
  7737                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7738  003C02  0E00               	movlw	0
  7739  003C04  6E1D               	movwf	disk_initialize@n,c
  7740  003C06                     l4851:
  7741  003C06  0E13               	movlw	low disk_initialize@ocr
  7742  003C08  241D               	addwf	disk_initialize@n,w,c
  7743  003C0A  6ED9               	movwf	fsr2l,c
  7744  003C0C  6ADA               	clrf	fsr2h,c
  7745  003C0E  0E00               	movlw	high disk_initialize@ocr
  7746  003C10  22DA               	addwfc	fsr2h,f,c
  7747  003C12  0EFF               	movlw	255
  7748  003C14  ECDD  F02A         	call	_SPI1_Exchange8bit
  7749  003C18  6EDF               	movwf	indf2,c
  7750  003C1A  2A1D               	incf	disk_initialize@n,f,c
  7751  003C1C  0E03               	movlw	3
  7752  003C1E  641D               	cpfsgt	disk_initialize@n,c
  7753  003C20  D7F2               	goto	l4851
  7754                           
  7755                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7756  003C22  0415               	decf	disk_initialize@ocr+2,w,c
  7757  003C24  A4D8               	btfss	status,2,c
  7758  003C26  D0A0               	goto	l156
  7759  003C28  0EAA               	movlw	170
  7760  003C2A  1816               	xorwf	disk_initialize@ocr+3,w,c
  7761  003C2C  A4D8               	btfss	status,2,c
  7762  003C2E  D09C               	goto	l156
  7763                           
  7764                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7765  003C30  0E03               	movlw	3
  7766  003C32  6E1C               	movwf	disk_initialize@tmr+1,c
  7767  003C34  0EE8               	movlw	232
  7768  003C36  6E1B               	movwf	disk_initialize@tmr,c
  7769  003C38  D018               	goto	l145
  7770  003C3A                     l4863:
  7771                           
  7772                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7773  003C3A  0E00               	movlw	0
  7774  003C3C  6E0B               	movwf	send_cmd@arg,c
  7775  003C3E  0E00               	movlw	0
  7776  003C40  6E0C               	movwf	send_cmd@arg+1,c
  7777  003C42  0E00               	movlw	0
  7778  003C44  6E0D               	movwf	send_cmd@arg+2,c
  7779  003C46  0E40               	movlw	64
  7780  003C48  6E0E               	movwf	send_cmd@arg+3,c
  7781  003C4A  0EA9               	movlw	169
  7782  003C4C  ECE6  F029         	call	_send_cmd
  7783  003C50  0900               	iorlw	0
  7784  003C52  B4D8               	btfsc	status,2,c
  7785  003C54  D00E               	goto	u6200
  7786                           
  7787                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7788  003C56  0E03               	movlw	3
  7789  003C58  6E11               	movwf	??_disk_initialize& (0+255),c
  7790  003C5A  0E98               	movlw	152
  7791  003C5C                     u8857:
  7792  003C5C  2EE8               	decfsz	wreg,f,c
  7793  003C5E  D7FE               	bra	u8857
  7794  003C60  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7795  003C62  D7FC               	bra	u8857
  7796                           
  7797                           ;diskio.c: 319:     }
  7798  003C64  061B               	decf	disk_initialize@tmr,f,c
  7799  003C66  A0D8               	btfss	status,0,c
  7800  003C68  061C               	decf	disk_initialize@tmr+1,f,c
  7801  003C6A                     l145:
  7802  003C6A  501B               	movf	disk_initialize@tmr,w,c
  7803  003C6C  101C               	iorwf	disk_initialize@tmr+1,w,c
  7804  003C6E  A4D8               	btfss	status,2,c
  7805  003C70  D7E4               	goto	l4863
  7806  003C72                     u6200:
  7807                           
  7808                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7809  003C72  501B               	movf	disk_initialize@tmr,w,c
  7810  003C74  101C               	iorwf	disk_initialize@tmr+1,w,c
  7811  003C76  B4D8               	btfsc	status,2,c
  7812  003C78  D077               	goto	l156
  7813  003C7A  0E00               	movlw	0
  7814  003C7C  6E0B               	movwf	send_cmd@arg,c
  7815  003C7E  0E00               	movlw	0
  7816  003C80  6E0C               	movwf	send_cmd@arg+1,c
  7817  003C82  0E00               	movlw	0
  7818  003C84  6E0D               	movwf	send_cmd@arg+2,c
  7819  003C86  0E00               	movlw	0
  7820  003C88  6E0E               	movwf	send_cmd@arg+3,c
  7821  003C8A  0E3A               	movlw	58
  7822  003C8C  ECE6  F029         	call	_send_cmd
  7823  003C90  0900               	iorlw	0
  7824  003C92  A4D8               	btfss	status,2,c
  7825  003C94  D069               	goto	l156
  7826                           
  7827                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7828  003C96  0E00               	movlw	0
  7829  003C98  6E1D               	movwf	disk_initialize@n,c
  7830  003C9A                     l4881:
  7831  003C9A  0E13               	movlw	low disk_initialize@ocr
  7832  003C9C  241D               	addwf	disk_initialize@n,w,c
  7833  003C9E  6ED9               	movwf	fsr2l,c
  7834  003CA0  6ADA               	clrf	fsr2h,c
  7835  003CA2  0E00               	movlw	high disk_initialize@ocr
  7836  003CA4  22DA               	addwfc	fsr2h,f,c
  7837  003CA6  0EFF               	movlw	255
  7838  003CA8  ECDD  F02A         	call	_SPI1_Exchange8bit
  7839  003CAC  6EDF               	movwf	indf2,c
  7840  003CAE  2A1D               	incf	disk_initialize@n,f,c
  7841  003CB0  0E03               	movlw	3
  7842  003CB2  641D               	cpfsgt	disk_initialize@n,c
  7843  003CB4  D7F2               	goto	l4881
  7844                           
  7845                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7846  003CB6  BC13               	btfsc	disk_initialize@ocr,6,c
  7847  003CB8  D004               	goto	l4889
  7848  003CBA  0E00               	movlw	0
  7849  003CBC  6E18               	movwf	_disk_initialize$285+1,c
  7850  003CBE  0E04               	movlw	4
  7851  003CC0  D003               	goto	L7
  7852  003CC2                     l4889:
  7853  003CC2  0E00               	movlw	0
  7854  003CC4  6E18               	movwf	_disk_initialize$285+1,c
  7855  003CC6  0E0C               	movlw	12
  7856  003CC8                     L7:
  7857  003CC8  6E17               	movwf	_disk_initialize$285,c
  7858  003CCA  C017  F01A         	movff	_disk_initialize$285,disk_initialize@ty
  7859  003CCE  D04C               	goto	l156
  7860  003CD0                     l4893:
  7861                           
  7862                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7863  003CD0  0E00               	movlw	0
  7864  003CD2  6E0B               	movwf	send_cmd@arg,c
  7865  003CD4  0E00               	movlw	0
  7866  003CD6  6E0C               	movwf	send_cmd@arg+1,c
  7867  003CD8  0E00               	movlw	0
  7868  003CDA  6E0D               	movwf	send_cmd@arg+2,c
  7869  003CDC  0E00               	movlw	0
  7870  003CDE  6E0E               	movwf	send_cmd@arg+3,c
  7871  003CE0  0EA9               	movlw	169
  7872  003CE2  ECE6  F029         	call	_send_cmd
  7873  003CE6  6E11               	movwf	??_disk_initialize& (0+255),c
  7874  003CE8  0E02               	movlw	2
  7875  003CEA  6011               	cpfslt	??_disk_initialize,c
  7876  003CEC  D004               	goto	l4897
  7877                           
  7878                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  7879  003CEE  0E02               	movlw	2
  7880  003CF0  6E1A               	movwf	disk_initialize@ty,c
  7881  003CF2  0EA9               	movlw	169
  7882  003CF4  D003               	goto	L8
  7883  003CF6                     l4897:
  7884                           
  7885                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  7886  003CF6  0E01               	movlw	1
  7887  003CF8  6E1A               	movwf	disk_initialize@ty,c
  7888  003CFA  0E01               	movlw	1
  7889  003CFC                     L8:
  7890  003CFC  6E19               	movwf	disk_initialize@cmd,c
  7891                           
  7892                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  7893                           
  7894                           ;diskio.c: 330:    }
  7895  003CFE  0E03               	movlw	3
  7896  003D00  6E1C               	movwf	disk_initialize@tmr+1,c
  7897  003D02  0EE8               	movlw	232
  7898  003D04  6E1B               	movwf	disk_initialize@tmr,c
  7899  003D06  D018               	goto	l159
  7900  003D08                     l4899:
  7901                           
  7902                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  7903  003D08  0E00               	movlw	0
  7904  003D0A  6E0B               	movwf	send_cmd@arg,c
  7905  003D0C  0E00               	movlw	0
  7906  003D0E  6E0C               	movwf	send_cmd@arg+1,c
  7907  003D10  0E00               	movlw	0
  7908  003D12  6E0D               	movwf	send_cmd@arg+2,c
  7909  003D14  0E00               	movlw	0
  7910  003D16  6E0E               	movwf	send_cmd@arg+3,c
  7911  003D18  5019               	movf	disk_initialize@cmd,w,c
  7912  003D1A  ECE6  F029         	call	_send_cmd
  7913  003D1E  0900               	iorlw	0
  7914  003D20  B4D8               	btfsc	status,2,c
  7915  003D22  D00E               	goto	u6270
  7916                           
  7917                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  7918  003D24  0E03               	movlw	3
  7919  003D26  6E11               	movwf	??_disk_initialize& (0+255),c
  7920  003D28  0E98               	movlw	152
  7921  003D2A                     u8867:
  7922  003D2A  2EE8               	decfsz	wreg,f,c
  7923  003D2C  D7FE               	bra	u8867
  7924  003D2E  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7925  003D30  D7FC               	bra	u8867
  7926                           
  7927                           ;diskio.c: 334:    }
  7928  003D32  061B               	decf	disk_initialize@tmr,f,c
  7929  003D34  A0D8               	btfss	status,0,c
  7930  003D36  061C               	decf	disk_initialize@tmr+1,f,c
  7931  003D38                     l159:
  7932  003D38  501B               	movf	disk_initialize@tmr,w,c
  7933  003D3A  101C               	iorwf	disk_initialize@tmr+1,w,c
  7934  003D3C  A4D8               	btfss	status,2,c
  7935  003D3E  D7E4               	goto	l4899
  7936  003D40                     u6270:
  7937                           
  7938                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  7939  003D40  501B               	movf	disk_initialize@tmr,w,c
  7940  003D42  101C               	iorwf	disk_initialize@tmr+1,w,c
  7941  003D44  B4D8               	btfsc	status,2,c
  7942  003D46  D00E               	goto	u6290
  7943  003D48  0E00               	movlw	0
  7944  003D4A  6E0B               	movwf	send_cmd@arg,c
  7945  003D4C  0E02               	movlw	2
  7946  003D4E  6E0C               	movwf	send_cmd@arg+1,c
  7947  003D50  0E00               	movlw	0
  7948  003D52  6E0D               	movwf	send_cmd@arg+2,c
  7949  003D54  0E00               	movlw	0
  7950  003D56  6E0E               	movwf	send_cmd@arg+3,c
  7951  003D58  0E10               	movlw	16
  7952  003D5A  ECE6  F029         	call	_send_cmd
  7953  003D5E  0900               	iorlw	0
  7954  003D60  B4D8               	btfsc	status,2,c
  7955  003D62  D002               	goto	l156
  7956  003D64                     u6290:
  7957                           
  7958                           ;diskio.c: 336:     ty = 0;
  7959  003D64  0E00               	movlw	0
  7960  003D66  6E1A               	movwf	disk_initialize@ty,c
  7961  003D68                     l156:
  7962                           
  7963                           ;diskio.c: 339:  CardType = ty;
  7964  003D68  C01A  F0D8         	movff	disk_initialize@ty,_CardType
  7965                           
  7966                           ;diskio.c: 340:  deselect();
  7967  003D6C  ECFF  F02A         	call	_deselect	;wreg free
  7968                           
  7969                           ;diskio.c: 342:  if (ty) {
  7970  003D70  501A               	movf	disk_initialize@ty,w,c
  7971  003D72  B4D8               	btfsc	status,2,c
  7972  003D74  D719               	goto	u6120
  7973                           
  7974                           ;diskio.c: 343:   Stat &= ~0x01;
  7975  003D76  0100               	movlb	0	; () banked
  7976  003D78  91FA               	bcf	_Stat& (0+255),0,b
  7977                           
  7978                           ; BSR set to: 0
  7979                           ;diskio.c: 344:   SPI1_Open();
  7980  003D7A  ECE5  F02A         	call	_SPI1_Open	;wreg free
  7981  003D7E  D714               	goto	u6120
  7982  003D80                     __end_of_disk_initialize:
  7983                           	opt callstack 0
  7984                           
  7985 ;; *************** function _SPI1_Open *****************
  7986 ;; Defined at:
  7987 ;;		line 77 in file "mcc_generated_files/spi1.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;		None
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;		None
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  1    wreg      void 
  7994 ;; Registers used:
  7995 ;;		wreg, status,2
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0
  8002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8004 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8005 ;;Total ram usage:        0 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; This function calls:
  8008 ;;		Nothing
  8009 ;; This function is called by:
  8010 ;;		_disk_initialize
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text20
  8015  0055CA                     __ptext20:
  8016                           	opt callstack 0
  8017  0055CA                     _SPI1_Open:
  8018                           	opt callstack 26
  8019                           
  8020                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  8021                           
  8022                           ;incstack = 0
  8023  0055CA  0E40               	movlw	64
  8024  0055CC  6EC7               	movwf	4039,c	;volatile
  8025                           
  8026                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  8027  0055CE  0E20               	movlw	32
  8028  0055D0  6EC6               	movwf	4038,c	;volatile
  8029                           
  8030                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  8031  0055D2  0E00               	movlw	0
  8032  0055D4  6EC8               	movwf	4040,c	;volatile
  8033  0055D6  0012               	return		;funcret
  8034  0055D8                     __end_of_SPI1_Open:
  8035                           	opt callstack 0
  8036                           
  8037 ;; *************** function _check_fs *****************
  8038 ;; Defined at:
  8039 ;;		line 2175 in file "ff.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;  fs              2   58[COMRAM] PTR struct .
  8042 ;;		 -> NULL(0), FatFs(558), 
  8043 ;;  sect            4   60[COMRAM] unsigned long 
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;		None
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  1    wreg      unsigned char 
  8048 ;; Registers used:
  8049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8055 ;;      Params:         6       0       0       0       0       0       0       0       0
  8056 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8057 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8058 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8059 ;;Total ram usage:       10 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:    8
  8062 ;; This function calls:
  8063 ;;		_move_window
  8064 ;; This function is called by:
  8065 ;;		_find_volume
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text21
  8070  0048E2                     __ptext21:
  8071                           	opt callstack 0
  8072  0048E2                     _check_fs:
  8073                           	opt callstack 19
  8074                           
  8075                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  8076                           
  8077                           ;incstack = 0
  8078  0048E2  EE20 F004          	lfsr	2,4
  8079  0048E6  503B               	movf	check_fs@fs,w,c
  8080  0048E8  26D9               	addwf	fsr2l,f,c
  8081  0048EA  503C               	movf	check_fs@fs+1,w,c
  8082  0048EC  22DA               	addwfc	fsr2h,f,c
  8083  0048EE  0E00               	movlw	0
  8084  0048F0  6EDF               	movwf	indf2,c
  8085  0048F2  EE20 F02A          	lfsr	2,42
  8086  0048F6  503B               	movf	check_fs@fs,w,c
  8087  0048F8  26D9               	addwf	fsr2l,f,c
  8088  0048FA  503C               	movf	check_fs@fs+1,w,c
  8089  0048FC  22DA               	addwfc	fsr2h,f,c
  8090  0048FE  0EFF               	movlw	255
  8091  004900  6EDE               	movwf	postinc2,c
  8092  004902  0EFF               	movlw	255
  8093  004904  6EDE               	movwf	postinc2,c
  8094  004906  0EFF               	movlw	255
  8095  004908  6EDE               	movwf	postinc2,c
  8096  00490A  0EFF               	movlw	255
  8097  00490C  6EDD               	movwf	postdec2,c
  8098                           
  8099                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  8100  00490E  C03B  F030         	movff	check_fs@fs,move_window@fs
  8101  004912  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  8102  004916  C03D  F032         	movff	check_fs@sect,move_window@sector
  8103  00491A  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  8104  00491E  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  8105  004922  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  8106  004926  EC39  F027         	call	_move_window	;wreg free
  8107  00492A  0900               	iorlw	0
  8108  00492C  B4D8               	btfsc	status,2,c
  8109  00492E  D002               	goto	l5245
  8110                           
  8111                           ;ff.c: 2182:   return 3;
  8112  004930  0E03               	movlw	3
  8113  004932  0012               	return	
  8114  004934                     l5245:
  8115                           
  8116                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8117  004934  EE22 F02C          	lfsr	2,556
  8118  004938  503B               	movf	check_fs@fs,w,c
  8119  00493A  26D9               	addwf	fsr2l,f,c
  8120  00493C  503C               	movf	check_fs@fs+1,w,c
  8121  00493E  22DA               	addwfc	fsr2h,f,c
  8122  004940  0E55               	movlw	85
  8123  004942  18DE               	xorwf	postinc2,w,c
  8124  004944  E104               	bnz	u6910
  8125  004946  0EAA               	movlw	170
  8126  004948  18DE               	xorwf	postinc2,w,c
  8127  00494A  B4D8               	btfsc	status,2,c
  8128  00494C  D002               	goto	l5251
  8129  00494E                     u6910:
  8130                           
  8131                           ;ff.c: 2185:   return 2;
  8132  00494E  0E02               	movlw	2
  8133  004950  0012               	return	
  8134  004952                     l5251:
  8135                           
  8136                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8137  004952  EE20 F064          	lfsr	2,100
  8138  004956  503B               	movf	check_fs@fs,w,c
  8139  004958  26D9               	addwf	fsr2l,f,c
  8140  00495A  503C               	movf	check_fs@fs+1,w,c
  8141  00495C  22DA               	addwfc	fsr2h,f,c
  8142  00495E  0EFF               	movlw	255
  8143  004960  14DE               	andwf	postinc2,w,c
  8144  004962  6E41               	movwf	??_check_fs& (0+255),c
  8145  004964  0EFF               	movlw	255
  8146  004966  14DE               	andwf	postinc2,w,c
  8147  004968  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8148  00496A  0EFF               	movlw	255
  8149  00496C  14DE               	andwf	postinc2,w,c
  8150  00496E  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8151  004970  0E00               	movlw	0
  8152  004972  14DE               	andwf	postinc2,w,c
  8153  004974  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8154  004976  0E46               	movlw	70
  8155  004978  1841               	xorwf	??_check_fs,w,c
  8156  00497A  E10A               	bnz	l5257
  8157  00497C  0E41               	movlw	65
  8158  00497E  1842               	xorwf	??_check_fs+1,w,c
  8159  004980  E107               	bnz	l5257
  8160  004982  0E54               	movlw	84
  8161  004984  1843               	xorwf	??_check_fs+2,w,c
  8162  004986  1044               	iorwf	??_check_fs+3,w,c
  8163  004988  A4D8               	btfss	status,2,c
  8164  00498A  D002               	goto	l5257
  8165  00498C                     u6920:
  8166                           
  8167                           ;ff.c: 2188:   return 0;
  8168  00498C  0E00               	movlw	0
  8169  00498E  0012               	return	
  8170  004990                     l5257:
  8171                           
  8172                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8173  004990  EE20 F080          	lfsr	2,128
  8174  004994  503B               	movf	check_fs@fs,w,c
  8175  004996  26D9               	addwf	fsr2l,f,c
  8176  004998  503C               	movf	check_fs@fs+1,w,c
  8177  00499A  22DA               	addwfc	fsr2h,f,c
  8178  00499C  0EFF               	movlw	255
  8179  00499E  14DE               	andwf	postinc2,w,c
  8180  0049A0  6E41               	movwf	??_check_fs& (0+255),c
  8181  0049A2  0EFF               	movlw	255
  8182  0049A4  14DE               	andwf	postinc2,w,c
  8183  0049A6  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8184  0049A8  0EFF               	movlw	255
  8185  0049AA  14DE               	andwf	postinc2,w,c
  8186  0049AC  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8187  0049AE  0E00               	movlw	0
  8188  0049B0  14DE               	andwf	postinc2,w,c
  8189  0049B2  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8190  0049B4  0E46               	movlw	70
  8191  0049B6  1841               	xorwf	??_check_fs,w,c
  8192  0049B8  E108               	bnz	l5263
  8193  0049BA  0E41               	movlw	65
  8194  0049BC  1842               	xorwf	??_check_fs+1,w,c
  8195  0049BE  E105               	bnz	l5263
  8196  0049C0  0E54               	movlw	84
  8197  0049C2  1843               	xorwf	??_check_fs+2,w,c
  8198  0049C4  1044               	iorwf	??_check_fs+3,w,c
  8199  0049C6  B4D8               	btfsc	status,2,c
  8200  0049C8  D7E1               	goto	u6920
  8201  0049CA                     l5263:
  8202                           
  8203                           ;ff.c: 2192:  return 1;
  8204  0049CA  0E01               	movlw	1
  8205  0049CC  0012               	return		;funcret
  8206  0049CE                     __end_of_check_fs:
  8207                           	opt callstack 0
  8208                           
  8209 ;; *************** function _f_lseek *****************
  8210 ;; Defined at:
  8211 ;;		line 3033 in file "ff.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  fp              2   13[BANK0 ] PTR struct .
  8214 ;;		 -> Fil(32), 
  8215 ;;  ofs             4   15[BANK0 ] unsigned long 
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;  clst            4   48[BANK0 ] unsigned long 
  8218 ;;  bcs             4   44[BANK0 ] unsigned long 
  8219 ;;  nsect           4   40[BANK0 ] unsigned long 
  8220 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8221 ;;  res             1   39[BANK0 ] enum E93
  8222 ;; Return value:  Size  Location     Type
  8223 ;;                  1    wreg      enum E4918
  8224 ;; Registers used:
  8225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8226 ;; Tracked objects:
  8227 ;;		On entry : 0/0
  8228 ;;		On exit  : 0/0
  8229 ;;		Unchanged: 0/0
  8230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8231 ;;      Params:         0       6       0       0       0       0       0       0       0
  8232 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8233 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8234 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8235 ;;Total ram usage:       39 bytes
  8236 ;; Hardware stack levels used:    1
  8237 ;; Hardware stack levels required when called:   10
  8238 ;; This function calls:
  8239 ;;		___lldiv
  8240 ;;		_clust2sect
  8241 ;;		_create_chain
  8242 ;;		_get_fat
  8243 ;;		_validate
  8244 ;; This function is called by:
  8245 ;;		_guardar
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text22
  8250  001942                     __ptext22:
  8251                           	opt callstack 0
  8252  001942                     _f_lseek:
  8253                           	opt callstack 19
  8254                           
  8255                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8256                           
  8257                           ;incstack = 0
  8258  001942  C06D  F002         	movff	f_lseek@fp,validate@obj
  8259  001946  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8260  00194A  EC8C  F027         	call	_validate	;wreg free
  8261  00194E  0100               	movlb	0	; () banked
  8262  001950  6F87               	movwf	f_lseek@res& (0+255),b
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8266  001952  5187               	movf	f_lseek@res& (0+255),w,b
  8267  001954  B4D8               	btfsc	status,2,c
  8268  001956  D002               	goto	l5901
  8269  001958                     u7970:
  8270                           
  8271                           ; BSR set to: 0
  8272  001958  5187               	movf	f_lseek@res& (0+255),w,b
  8273  00195A  0012               	return	
  8274  00195C                     l5901:
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;ff.c: 3047:  if (fp->err)
  8278  00195C  EE20 F005          	lfsr	2,5
  8279  001960  516D               	movf	f_lseek@fp& (0+255),w,b
  8280  001962  26D9               	addwf	fsr2l,f,c
  8281  001964  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8282  001966  22DA               	addwfc	fsr2h,f,c
  8283  001968  50DF               	movf	indf2,w,c
  8284  00196A  B4D8               	btfsc	status,2,c
  8285  00196C  D008               	goto	l5907
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8289  00196E  EE20 F005          	lfsr	2,5
  8290  001972  516D               	movf	f_lseek@fp& (0+255),w,b
  8291  001974  26D9               	addwf	fsr2l,f,c
  8292  001976  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8293  001978  22DA               	addwfc	fsr2h,f,c
  8294  00197A  50DF               	movf	indf2,w,c
  8295  00197C  0012               	return	
  8296  00197E                     l5907:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8300  00197E  EE20 F00A          	lfsr	2,10
  8301  001982  516D               	movf	f_lseek@fp& (0+255),w,b
  8302  001984  26D9               	addwf	fsr2l,f,c
  8303  001986  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8304  001988  22DA               	addwfc	fsr2h,f,c
  8305  00198A  516F               	movf	f_lseek@ofs& (0+255),w,b
  8306  00198C  5CDE               	subwf	postinc2,w,c
  8307  00198E  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8308  001990  58DE               	subwfb	postinc2,w,c
  8309  001992  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8310  001994  58DE               	subwfb	postinc2,w,c
  8311  001996  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8312  001998  58DE               	subwfb	postinc2,w,c
  8313  00199A  B0D8               	btfsc	status,0,c
  8314  00199C  D016               	goto	l731
  8315                           
  8316                           ; BSR set to: 0
  8317  00199E  EE20 F004          	lfsr	2,4
  8318  0019A2  516D               	movf	f_lseek@fp& (0+255),w,b
  8319  0019A4  26D9               	addwf	fsr2l,f,c
  8320  0019A6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8321  0019A8  22DA               	addwfc	fsr2h,f,c
  8322  0019AA  B2DF               	btfsc	indf2,1,c
  8323  0019AC  D00E               	goto	l731
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8327  0019AE  EE20 F00A          	lfsr	2,10
  8328  0019B2  516D               	movf	f_lseek@fp& (0+255),w,b
  8329  0019B4  26D9               	addwf	fsr2l,f,c
  8330  0019B6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8331  0019B8  22DA               	addwfc	fsr2h,f,c
  8332  0019BA  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8333  0019BE  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8334  0019C2  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8335  0019C6  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8336  0019CA                     l731:
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;ff.c: 3113:   ifptr = fp->fptr;
  8340  0019CA  EE20 F006          	lfsr	2,6
  8341  0019CE  516D               	movf	f_lseek@fp& (0+255),w,b
  8342  0019D0  26D9               	addwf	fsr2l,f,c
  8343  0019D2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8344  0019D4  22DA               	addwfc	fsr2h,f,c
  8345  0019D6  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8346  0019DA  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8347  0019DE  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8348  0019E2  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8349                           
  8350                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8351  0019E6  0E00               	movlw	0
  8352  0019E8  6F88               	movwf	f_lseek@nsect& (0+255),b
  8353  0019EA  0E00               	movlw	0
  8354  0019EC  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8355  0019EE  0E00               	movlw	0
  8356  0019F0  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8357  0019F2  0E00               	movlw	0
  8358  0019F4  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8359  0019F6  EE20 F006          	lfsr	2,6
  8360  0019FA  516D               	movf	f_lseek@fp& (0+255),w,b
  8361  0019FC  26D9               	addwf	fsr2l,f,c
  8362  0019FE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8363  001A00  22DA               	addwfc	fsr2h,f,c
  8364  001A02  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8365  001A06  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8366  001A0A  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8367  001A0E  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;ff.c: 3115:   if (ofs) {
  8371  001A12  516F               	movf	f_lseek@ofs& (0+255),w,b
  8372  001A14  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8373  001A16  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8374  001A18  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8375  001A1A  B4D8               	btfsc	status,2,c
  8376  001A1C  D22D               	goto	l6001
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8380  001A1E  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8381  001A22  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8382  001A26  EE10 F002          	lfsr	1,2
  8383  001A2A  50DE               	movf	postinc2,w,c
  8384  001A2C  26E1               	addwf	fsr1l,f,c
  8385  001A2E  50DD               	movf	postdec2,w,c
  8386  001A30  22E2               	addwfc	fsr1h,f,c
  8387  001A32  50E7               	movf	indf1,w,c
  8388  001A34  6F73               	movwf	??_f_lseek& (0+255),b
  8389  001A36  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8390  001A3A  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8391  001A3C  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8392  001A3E  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8393  001A40  0E09               	movlw	9
  8394  001A42                     u8025:
  8395  001A42  90D8               	bcf	status,0,c
  8396  001A44  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8397  001A46  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8398  001A48  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8399  001A4A  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8400  001A4C  2EE8               	decfsz	wreg,f,c
  8401  001A4E  D7F9               	goto	u8025
  8402  001A50  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8403  001A54  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8404  001A58  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8405  001A5C  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;ff.c: 3117:    if (ifptr > 0 &&
  8409  001A60  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8410  001A62  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8411  001A64  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8412  001A66  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8413  001A68  B4D8               	btfsc	status,2,c
  8414  001A6A  D097               	goto	l5923
  8415                           
  8416                           ; BSR set to: 0
  8417  001A6C  0EFF               	movlw	255
  8418  001A6E  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8419  001A70  6E01               	movwf	___lldiv@dividend,c
  8420  001A72  0EFF               	movlw	255
  8421  001A74  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8422  001A76  6E02               	movwf	___lldiv@dividend+1,c
  8423  001A78  0EFF               	movlw	255
  8424  001A7A  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8425  001A7C  6E03               	movwf	___lldiv@dividend+2,c
  8426  001A7E  0EFF               	movlw	255
  8427  001A80  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8428  001A82  6E04               	movwf	___lldiv@dividend+3,c
  8429  001A84  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8430  001A88  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8431  001A8C  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8432  001A90  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8433  001A94  ECD6  F027         	call	___lldiv	;wreg free
  8434  001A98  C001  F073         	movff	?___lldiv,??_f_lseek
  8435  001A9C  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8436  001AA0  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8437  001AA4  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8438  001AA8  0EFF               	movlw	255
  8439  001AAA  0100               	movlb	0	; () banked
  8440  001AAC  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8441  001AAE  6E01               	movwf	___lldiv@dividend,c
  8442  001AB0  0EFF               	movlw	255
  8443  001AB2  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8444  001AB4  6E02               	movwf	___lldiv@dividend+1,c
  8445  001AB6  0EFF               	movlw	255
  8446  001AB8  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8447  001ABA  6E03               	movwf	___lldiv@dividend+2,c
  8448  001ABC  0EFF               	movlw	255
  8449  001ABE  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8450  001AC0  6E04               	movwf	___lldiv@dividend+3,c
  8451  001AC2  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8452  001AC6  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8453  001ACA  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8454  001ACE  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8455  001AD2  ECD6  F027         	call	___lldiv	;wreg free
  8456  001AD6  5001               	movf	?___lldiv,w,c
  8457  001AD8  0100               	movlb	0	; () banked
  8458  001ADA  5D73               	subwf	??_f_lseek& (0+255),w,b
  8459  001ADC  5002               	movf	?___lldiv+1,w,c
  8460  001ADE  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8461  001AE0  5003               	movf	?___lldiv+2,w,c
  8462  001AE2  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8463  001AE4  5004               	movf	?___lldiv+3,w,c
  8464  001AE6  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8465  001AE8  A0D8               	btfss	status,0,c
  8466  001AEA  D057               	goto	l5923
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8470  001AEC  0EFF               	movlw	255
  8471  001AEE  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8472  001AF0  6F73               	movwf	??_f_lseek& (0+255),b
  8473  001AF2  0EFF               	movlw	255
  8474  001AF4  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8475  001AF6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8476  001AF8  0EFF               	movlw	255
  8477  001AFA  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8478  001AFC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8479  001AFE  0EFF               	movlw	255
  8480  001B00  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8481  001B02  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8482  001B04  1D73               	comf	??_f_lseek& (0+255),w,b
  8483  001B06  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8484  001B08  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8485  001B0A  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8486  001B0C  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8487  001B0E  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8488  001B10  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8489  001B12  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8490  001B14  0EFF               	movlw	255
  8491  001B16  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8492  001B18  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8493  001B1A  0EFF               	movlw	255
  8494  001B1C  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8495  001B1E  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8496  001B20  0EFF               	movlw	255
  8497  001B22  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8498  001B24  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8499  001B26  0EFF               	movlw	255
  8500  001B28  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8501  001B2A  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8502  001B2C  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8503  001B2E  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8504  001B30  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8505  001B32  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8506  001B34  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8507  001B36  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8508  001B38  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8509  001B3A  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8510  001B3C  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8511  001B3E  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8512  001B40  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8513  001B42  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8514  001B44  EE20 F006          	lfsr	2,6
  8515  001B48  516D               	movf	f_lseek@fp& (0+255),w,b
  8516  001B4A  26D9               	addwf	fsr2l,f,c
  8517  001B4C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8518  001B4E  22DA               	addwfc	fsr2h,f,c
  8519  001B50  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8520  001B54  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8521  001B58  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8522  001B5C  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8523                           
  8524                           ;ff.c: 3120:     ofs -= fp->fptr;
  8525  001B60  EE20 F006          	lfsr	2,6
  8526  001B64  516D               	movf	f_lseek@fp& (0+255),w,b
  8527  001B66  26D9               	addwf	fsr2l,f,c
  8528  001B68  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8529  001B6A  22DA               	addwfc	fsr2h,f,c
  8530  001B6C  50DE               	movf	postinc2,w,c
  8531  001B6E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8532  001B70  50DE               	movf	postinc2,w,c
  8533  001B72  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8534  001B74  50DE               	movf	postinc2,w,c
  8535  001B76  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8536  001B78  50DD               	movf	postdec2,w,c
  8537  001B7A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8538                           
  8539                           ;ff.c: 3121:     clst = fp->clust;
  8540  001B7C  EE20 F012          	lfsr	2,18
  8541  001B80  516D               	movf	f_lseek@fp& (0+255),w,b
  8542  001B82  26D9               	addwf	fsr2l,f,c
  8543  001B84  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8544  001B86  22DA               	addwfc	fsr2h,f,c
  8545  001B88  CFDE F090          	movff	postinc2,f_lseek@clst
  8546  001B8C  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8547  001B90  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8548  001B94  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8549                           
  8550                           ;ff.c: 3122:    } else {
  8551  001B98  D06E               	goto	l5947
  8552  001B9A                     l5923:
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;ff.c: 3123:     clst = fp->sclust;
  8556  001B9A  EE20 F00E          	lfsr	2,14
  8557  001B9E  516D               	movf	f_lseek@fp& (0+255),w,b
  8558  001BA0  26D9               	addwf	fsr2l,f,c
  8559  001BA2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8560  001BA4  22DA               	addwfc	fsr2h,f,c
  8561  001BA6  CFDE F090          	movff	postinc2,f_lseek@clst
  8562  001BAA  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8563  001BAE  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8564  001BB2  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;ff.c: 3125:     if (clst == 0) {
  8568  001BB6  5190               	movf	f_lseek@clst& (0+255),w,b
  8569  001BB8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8570  001BBA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8571  001BBC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8572  001BBE  A4D8               	btfss	status,2,c
  8573  001BC0  D04C               	goto	l735
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8577  001BC2  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8578  001BC6  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8579  001BCA  CFDE F056          	movff	postinc2,create_chain@fs
  8580  001BCE  CFDD F057          	movff	postdec2,create_chain@fs+1
  8581  001BD2  0E00               	movlw	0
  8582  001BD4  6E58               	movwf	create_chain@clst,c
  8583  001BD6  0E00               	movlw	0
  8584  001BD8  6E59               	movwf	create_chain@clst+1,c
  8585  001BDA  0E00               	movlw	0
  8586  001BDC  6E5A               	movwf	create_chain@clst+2,c
  8587  001BDE  0E00               	movlw	0
  8588  001BE0  6E5B               	movwf	create_chain@clst+3,c
  8589  001BE2  ECAB  F019         	call	_create_chain	;wreg free
  8590  001BE6  C056  F090         	movff	?_create_chain,f_lseek@clst
  8591  001BEA  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8592  001BEE  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8593  001BF2  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8594                           
  8595                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8596  001BF6  0100               	movlb	0	; () banked
  8597  001BF8  0590               	decf	f_lseek@clst& (0+255),w,b
  8598  001BFA  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8599  001BFC  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8600  001BFE  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8601  001C00  A4D8               	btfss	status,2,c
  8602  001C02  D00A               	goto	l5937
  8603  001C04                     u8060:
  8604                           
  8605                           ; BSR set to: 0
  8606  001C04  EE20 F005          	lfsr	2,5
  8607  001C08  516D               	movf	f_lseek@fp& (0+255),w,b
  8608  001C0A  26D9               	addwf	fsr2l,f,c
  8609  001C0C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8610  001C0E  22DA               	addwfc	fsr2h,f,c
  8611  001C10  0E02               	movlw	2
  8612  001C12  6EDF               	movwf	indf2,c
  8613                           
  8614                           ; BSR set to: 0
  8615  001C14  0E02               	movlw	2
  8616  001C16  0012               	return	
  8617  001C18                     l5937:
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8621  001C18  2990               	incf	f_lseek@clst& (0+255),w,b
  8622  001C1A  E111               	bnz	l5945
  8623  001C1C  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8624  001C1E  E10F               	bnz	l5945
  8625  001C20  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8626  001C22  E10D               	bnz	l5945
  8627  001C24  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8628  001C26  A4D8               	btfss	status,2,c
  8629  001C28  D00A               	goto	l5945
  8630  001C2A                     u8070:
  8631                           
  8632                           ; BSR set to: 0
  8633  001C2A  EE20 F005          	lfsr	2,5
  8634  001C2E  516D               	movf	f_lseek@fp& (0+255),w,b
  8635  001C30  26D9               	addwf	fsr2l,f,c
  8636  001C32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8637  001C34  22DA               	addwfc	fsr2h,f,c
  8638  001C36  0E01               	movlw	1
  8639  001C38  6EDF               	movwf	indf2,c
  8640                           
  8641                           ; BSR set to: 0
  8642  001C3A  0E01               	movlw	1
  8643  001C3C  0012               	return	
  8644  001C3E                     l5945:
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;ff.c: 3129:      fp->sclust = clst;
  8648  001C3E  EE20 F00E          	lfsr	2,14
  8649  001C42  516D               	movf	f_lseek@fp& (0+255),w,b
  8650  001C44  26D9               	addwf	fsr2l,f,c
  8651  001C46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8652  001C48  22DA               	addwfc	fsr2h,f,c
  8653  001C4A  C090  FFDE         	movff	f_lseek@clst,postinc2
  8654  001C4E  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8655  001C52  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8656  001C56  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8657  001C5A                     l735:
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;ff.c: 3132:     fp->clust = clst;
  8661  001C5A  EE20 F012          	lfsr	2,18
  8662  001C5E  516D               	movf	f_lseek@fp& (0+255),w,b
  8663  001C60  26D9               	addwf	fsr2l,f,c
  8664  001C62  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8665  001C64  22DA               	addwfc	fsr2h,f,c
  8666  001C66  C090  FFDE         	movff	f_lseek@clst,postinc2
  8667  001C6A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8668  001C6E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8669  001C72  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8670  001C76                     l5947:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;ff.c: 3134:    if (clst != 0) {
  8674  001C76  5190               	movf	f_lseek@clst& (0+255),w,b
  8675  001C78  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8676  001C7A  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8677  001C7C  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8678  001C7E  A4D8               	btfss	status,2,c
  8679  001C80  D097               	goto	l5983
  8680  001C82  D0FA               	goto	l6001
  8681  001C84                     l5951:
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8685  001C84  EE20 F004          	lfsr	2,4
  8686  001C88  516D               	movf	f_lseek@fp& (0+255),w,b
  8687  001C8A  26D9               	addwf	fsr2l,f,c
  8688  001C8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8689  001C8E  22DA               	addwfc	fsr2h,f,c
  8690  001C90  A2DF               	btfss	indf2,1,c
  8691  001C92  D02A               	goto	l5959
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8695  001C94  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8696  001C98  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8697  001C9C  CFDE F056          	movff	postinc2,create_chain@fs
  8698  001CA0  CFDD F057          	movff	postdec2,create_chain@fs+1
  8699  001CA4  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8700  001CA8  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8701  001CAC  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8702  001CB0  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8703  001CB4  ECAB  F019         	call	_create_chain	;wreg free
  8704  001CB8  C056  F090         	movff	?_create_chain,f_lseek@clst
  8705  001CBC  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8706  001CC0  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8707  001CC4  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8708                           
  8709                           ;ff.c: 3139:       if (clst == 0) {
  8710  001CC8  0100               	movlb	0	; () banked
  8711  001CCA  5190               	movf	f_lseek@clst& (0+255),w,b
  8712  001CCC  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8713  001CCE  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8714  001CD0  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8715  001CD2  A4D8               	btfss	status,2,c
  8716  001CD4  D023               	goto	l5961
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;ff.c: 3140:        ofs = bcs; break;
  8720  001CD6  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8721  001CDA  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8722  001CDE  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8723  001CE2  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8724  001CE6  D06E               	goto	u8140
  8725  001CE8                     l5959:
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8729  001CE8  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8730  001CEC  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8731  001CF0  CFDE F03B          	movff	postinc2,get_fat@fs
  8732  001CF4  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8733  001CF8  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8734  001CFC  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8735  001D00  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8736  001D04  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8737  001D08  EC0F  F016         	call	_get_fat	;wreg free
  8738  001D0C  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8739  001D10  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8740  001D14  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8741  001D18  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8742  001D1C                     l5961:
  8743                           
  8744                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8745  001D1C  0100               	movlb	0	; () banked
  8746  001D1E  2990               	incf	f_lseek@clst& (0+255),w,b
  8747  001D20  E107               	bnz	l5969
  8748  001D22  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8749  001D24  E105               	bnz	l5969
  8750  001D26  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8751  001D28  E103               	bnz	l5969
  8752  001D2A  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8753  001D2C  B4D8               	btfsc	status,2,c
  8754  001D2E  D77D               	goto	u8070
  8755  001D30                     l5969:
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8759  001D30  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8760  001D32  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8761  001D34  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8762  001D36  E104               	bnz	u8120
  8763  001D38  0E02               	movlw	2
  8764  001D3A  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8765  001D3C  A0D8               	btfss	status,0,c
  8766  001D3E  D762               	goto	u8060
  8767  001D40                     u8120:
  8768                           
  8769                           ; BSR set to: 0
  8770  001D40  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8771  001D44  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8772  001D48  EE10 F012          	lfsr	1,18
  8773  001D4C  50DE               	movf	postinc2,w,c
  8774  001D4E  26E1               	addwf	fsr1l,f,c
  8775  001D50  50DD               	movf	postdec2,w,c
  8776  001D52  22E2               	addwfc	fsr1h,f,c
  8777  001D54  50E6               	movf	postinc1,w,c
  8778  001D56  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8779  001D58  50E6               	movf	postinc1,w,c
  8780  001D5A  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8781  001D5C  50E6               	movf	postinc1,w,c
  8782  001D5E  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8783  001D60  50E6               	movf	postinc1,w,c
  8784  001D62  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8785  001D64  B0D8               	btfsc	status,0,c
  8786  001D66  D74E               	goto	u8060
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;ff.c: 3147:      fp->clust = clst;
  8790                           
  8791                           ; BSR set to: 0
  8792  001D68  EE20 F012          	lfsr	2,18
  8793  001D6C  516D               	movf	f_lseek@fp& (0+255),w,b
  8794  001D6E  26D9               	addwf	fsr2l,f,c
  8795  001D70  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8796  001D72  22DA               	addwfc	fsr2h,f,c
  8797  001D74  C090  FFDE         	movff	f_lseek@clst,postinc2
  8798  001D78  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8799  001D7C  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8800  001D80  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8801                           
  8802                           ;ff.c: 3148:      fp->fptr += bcs;
  8803  001D84  EE20 F006          	lfsr	2,6
  8804  001D88  516D               	movf	f_lseek@fp& (0+255),w,b
  8805  001D8A  26D9               	addwf	fsr2l,f,c
  8806  001D8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8807  001D8E  22DA               	addwfc	fsr2h,f,c
  8808  001D90  518C               	movf	f_lseek@bcs& (0+255),w,b
  8809  001D92  26DE               	addwf	postinc2,f,c
  8810  001D94  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8811  001D96  22DE               	addwfc	postinc2,f,c
  8812  001D98  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8813  001D9A  22DE               	addwfc	postinc2,f,c
  8814  001D9C  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8815  001D9E  22DE               	addwfc	postinc2,f,c
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;ff.c: 3149:      ofs -= bcs;
  8819  001DA0  518C               	movf	f_lseek@bcs& (0+255),w,b
  8820  001DA2  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8821  001DA4  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8822  001DA6  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8823  001DA8  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8824  001DAA  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8825  001DAC  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8826  001DAE  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8827  001DB0                     l5983:
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;ff.c: 3135:     while (ofs > bcs) {
  8831  001DB0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8832  001DB2  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8833  001DB4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8834  001DB6  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8835  001DB8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8836  001DBA  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8837  001DBC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8838  001DBE  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8839  001DC0  A0D8               	btfss	status,0,c
  8840  001DC2  D760               	goto	l5951
  8841  001DC4                     u8140:
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;ff.c: 3151:     fp->fptr += ofs;
  8845  001DC4  EE20 F006          	lfsr	2,6
  8846  001DC8  516D               	movf	f_lseek@fp& (0+255),w,b
  8847  001DCA  26D9               	addwf	fsr2l,f,c
  8848  001DCC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8849  001DCE  22DA               	addwfc	fsr2h,f,c
  8850  001DD0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8851  001DD2  26DE               	addwf	postinc2,f,c
  8852  001DD4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8853  001DD6  22DE               	addwfc	postinc2,f,c
  8854  001DD8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8855  001DDA  22DE               	addwfc	postinc2,f,c
  8856  001DDC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8857  001DDE  22DE               	addwfc	postinc2,f,c
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8861  001DE0  0EFF               	movlw	255
  8862  001DE2  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8863  001DE4  6F73               	movwf	??_f_lseek& (0+255),b
  8864  001DE6  0E01               	movlw	1
  8865  001DE8  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8866  001DEA  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8867  001DEC  0E00               	movlw	0
  8868  001DEE  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8869  001DF0  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8870  001DF2  0E00               	movlw	0
  8871  001DF4  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8872  001DF6  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8873  001DF8  5173               	movf	??_f_lseek& (0+255),w,b
  8874  001DFA  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8875  001DFC  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8876  001DFE  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8877  001E00  B4D8               	btfsc	status,2,c
  8878  001E02  D03A               	goto	l6001
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  8882  001E04  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8883  001E08  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8884  001E0C  CFDE F00D          	movff	postinc2,clust2sect@fs
  8885  001E10  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8886  001E14  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  8887  001E18  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  8888  001E1C  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  8889  001E20  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  8890  001E24  EC84  F026         	call	_clust2sect	;wreg free
  8891  001E28  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  8892  001E2C  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  8893  001E30  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  8894  001E34  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  8895                           
  8896                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8897  001E38  0100               	movlb	0	; () banked
  8898  001E3A  5188               	movf	f_lseek@nsect& (0+255),w,b
  8899  001E3C  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8900  001E3E  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8901  001E40  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8902  001E42  B4D8               	btfsc	status,2,c
  8903  001E44  D6DF               	goto	u8060
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  8907                           
  8908                           ; BSR set to: 0
  8909  001E46  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  8910  001E4A  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  8911  001E4E  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  8912  001E52  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  8913  001E56  0E0A               	movlw	10
  8914  001E58  D005               	goto	u8170
  8915  001E5A                     u8175:
  8916  001E5A  90D8               	bcf	status,0,c
  8917  001E5C  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8918  001E5E  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8919  001E60  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8920  001E62  3373               	rrcf	??_f_lseek& (0+255),f,b
  8921  001E64                     u8170:
  8922  001E64  2EE8               	decfsz	wreg,f,c
  8923  001E66  D7F9               	goto	u8175
  8924  001E68  5173               	movf	??_f_lseek& (0+255),w,b
  8925  001E6A  2788               	addwf	f_lseek@nsect& (0+255),f,b
  8926  001E6C  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  8927  001E6E  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8928  001E70  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  8929  001E72  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8930  001E74  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  8931  001E76  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8932  001E78                     l6001:
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8936  001E78  EE20 F006          	lfsr	2,6
  8937  001E7C  516D               	movf	f_lseek@fp& (0+255),w,b
  8938  001E7E  26D9               	addwf	fsr2l,f,c
  8939  001E80  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8940  001E82  22DA               	addwfc	fsr2h,f,c
  8941  001E84  0EFF               	movlw	255
  8942  001E86  14DE               	andwf	postinc2,w,c
  8943  001E88  6F73               	movwf	??_f_lseek& (0+255),b
  8944  001E8A  0E01               	movlw	1
  8945  001E8C  14DE               	andwf	postinc2,w,c
  8946  001E8E  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8947  001E90  0E00               	movlw	0
  8948  001E92  14DE               	andwf	postinc2,w,c
  8949  001E94  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8950  001E96  0E00               	movlw	0
  8951  001E98  14DE               	andwf	postinc2,w,c
  8952  001E9A  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8953  001E9C  5173               	movf	??_f_lseek& (0+255),w,b
  8954  001E9E  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8955  001EA0  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8956  001EA2  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8957  001EA4  B4D8               	btfsc	status,2,c
  8958  001EA6  D021               	goto	l6007
  8959                           
  8960                           ; BSR set to: 0
  8961  001EA8  EE20 F016          	lfsr	2,22
  8962  001EAC  516D               	movf	f_lseek@fp& (0+255),w,b
  8963  001EAE  26D9               	addwf	fsr2l,f,c
  8964  001EB0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8965  001EB2  22DA               	addwfc	fsr2h,f,c
  8966  001EB4  5188               	movf	f_lseek@nsect& (0+255),w,b
  8967  001EB6  18DE               	xorwf	postinc2,w,c
  8968  001EB8  E10A               	bnz	u8190
  8969  001EBA  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8970  001EBC  18DE               	xorwf	postinc2,w,c
  8971  001EBE  E107               	bnz	u8190
  8972  001EC0  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8973  001EC2  18DE               	xorwf	postinc2,w,c
  8974  001EC4  E104               	bnz	u8190
  8975  001EC6  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8976  001EC8  18DE               	xorwf	postinc2,w,c
  8977  001ECA  B4D8               	btfsc	status,2,c
  8978  001ECC  D00E               	goto	l6007
  8979  001ECE                     u8190:
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;ff.c: 3171:    fp->dsect = nsect;
  8983  001ECE  EE20 F016          	lfsr	2,22
  8984  001ED2  516D               	movf	f_lseek@fp& (0+255),w,b
  8985  001ED4  26D9               	addwf	fsr2l,f,c
  8986  001ED6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8987  001ED8  22DA               	addwfc	fsr2h,f,c
  8988  001EDA  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8989  001EDE  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8990  001EE2  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8991  001EE6  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8992  001EEA                     l6007:
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  8996  001EEA  EE20 F006          	lfsr	2,6
  8997  001EEE  516D               	movf	f_lseek@fp& (0+255),w,b
  8998  001EF0  26D9               	addwf	fsr2l,f,c
  8999  001EF2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9000  001EF4  22DA               	addwfc	fsr2h,f,c
  9001  001EF6  EE10 F00A          	lfsr	1,10
  9002  001EFA  516D               	movf	f_lseek@fp& (0+255),w,b
  9003  001EFC  26E1               	addwf	fsr1l,f,c
  9004  001EFE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9005  001F00  22E2               	addwfc	fsr1h,f,c
  9006  001F02  50DE               	movf	postinc2,w,c
  9007  001F04  5CE6               	subwf	postinc1,w,c
  9008  001F06  50DE               	movf	postinc2,w,c
  9009  001F08  58E6               	subwfb	postinc1,w,c
  9010  001F0A  50DE               	movf	postinc2,w,c
  9011  001F0C  58E6               	subwfb	postinc1,w,c
  9012  001F0E  50DE               	movf	postinc2,w,c
  9013  001F10  58E6               	subwfb	postinc1,w,c
  9014  001F12  B0D8               	btfsc	status,0,c
  9015  001F14  D521               	goto	u7970
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  9019  001F16  EE20 F006          	lfsr	2,6
  9020  001F1A  516D               	movf	f_lseek@fp& (0+255),w,b
  9021  001F1C  26D9               	addwf	fsr2l,f,c
  9022  001F1E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9023  001F20  22DA               	addwfc	fsr2h,f,c
  9024  001F22  EE10 F00A          	lfsr	1,10
  9025  001F26  516D               	movf	f_lseek@fp& (0+255),w,b
  9026  001F28  26E1               	addwf	fsr1l,f,c
  9027  001F2A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9028  001F2C  22E2               	addwfc	fsr1h,f,c
  9029  001F2E  CFDE FFE6          	movff	postinc2,postinc1
  9030  001F32  CFDE FFE6          	movff	postinc2,postinc1
  9031  001F36  CFDE FFE6          	movff	postinc2,postinc1
  9032  001F3A  CFDE FFE6          	movff	postinc2,postinc1
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;ff.c: 3176:    fp->flag |= 0x20;
  9036  001F3E  EE20 F004          	lfsr	2,4
  9037  001F42  516D               	movf	f_lseek@fp& (0+255),w,b
  9038  001F44  26D9               	addwf	fsr2l,f,c
  9039  001F46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  9040  001F48  22DA               	addwfc	fsr2h,f,c
  9041  001F4A  0E00               	movlw	0
  9042  001F4C  8ADB               	bsf	plusw2,5,c
  9043  001F4E  D504               	goto	u7970
  9044  001F50                     __end_of_f_lseek:
  9045                           	opt callstack 0
  9046                           
  9047 ;; *************** function _create_chain *****************
  9048 ;; Defined at:
  9049 ;;		line 990 in file "ff.c"
  9050 ;; Parameters:    Size  Location     Type
  9051 ;;  fs              2   85[COMRAM] PTR struct .
  9052 ;;		 -> NULL(0), FatFs(558), 
  9053 ;;  clst            4   87[COMRAM] unsigned long 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  cs              4    9[BANK0 ] unsigned long 
  9056 ;;  ncl             4    5[BANK0 ] unsigned long 
  9057 ;;  scl             4    1[BANK0 ] unsigned long 
  9058 ;;  res             1    0[BANK0 ] enum E93
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  4   85[COMRAM] unsigned long 
  9061 ;; Registers used:
  9062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9068 ;;      Params:         6       0       0       0       0       0       0       0       0
  9069 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9070 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9071 ;;      Totals:        10      13       0       0       0       0       0       0       0
  9072 ;;Total ram usage:       23 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    9
  9075 ;; This function calls:
  9076 ;;		_get_fat
  9077 ;;		_put_fat
  9078 ;; This function is called by:
  9079 ;;		_dir_next
  9080 ;;		_f_write
  9081 ;;		_f_lseek
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           	psect	text23
  9086  003356                     __ptext23:
  9087                           	opt callstack 0
  9088  003356                     _create_chain:
  9089                           	opt callstack 19
  9090                           
  9091                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;incstack = 0
  9095  003356  5058               	movf	create_chain@clst,w,c
  9096  003358  1059               	iorwf	create_chain@clst+1,w,c
  9097  00335A  105A               	iorwf	create_chain@clst+2,w,c
  9098  00335C  105B               	iorwf	create_chain@clst+3,w,c
  9099  00335E  A4D8               	btfss	status,2,c
  9100  003360  D02E               	goto	l4429
  9101                           
  9102                           ;ff.c: 1000:   scl = fs->last_clust;
  9103  003362  EE20 F00A          	lfsr	2,10
  9104  003366  5056               	movf	create_chain@fs,w,c
  9105  003368  26D9               	addwf	fsr2l,f,c
  9106  00336A  5057               	movf	create_chain@fs+1,w,c
  9107  00336C  22DA               	addwfc	fsr2h,f,c
  9108  00336E  CFDE F061          	movff	postinc2,create_chain@scl
  9109  003372  CFDE F062          	movff	postinc2,create_chain@scl+1
  9110  003376  CFDE F063          	movff	postinc2,create_chain@scl+2
  9111  00337A  CFDE F064          	movff	postinc2,create_chain@scl+3
  9112                           
  9113                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  9114  00337E  0100               	movlb	0	; () banked
  9115  003380  5161               	movf	create_chain@scl& (0+255),w,b
  9116  003382  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9117  003384  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9118  003386  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9119  003388  B4D8               	btfsc	status,2,c
  9120  00338A  D010               	goto	u5300
  9121                           
  9122                           ; BSR set to: 0
  9123  00338C  EE20 F012          	lfsr	2,18
  9124  003390  5056               	movf	create_chain@fs,w,c
  9125  003392  26D9               	addwf	fsr2l,f,c
  9126  003394  5057               	movf	create_chain@fs+1,w,c
  9127  003396  22DA               	addwfc	fsr2h,f,c
  9128  003398  50DE               	movf	postinc2,w,c
  9129  00339A  5D61               	subwf	create_chain@scl& (0+255),w,b
  9130  00339C  50DE               	movf	postinc2,w,c
  9131  00339E  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9132  0033A0  50DE               	movf	postinc2,w,c
  9133  0033A2  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9134  0033A4  50DE               	movf	postinc2,w,c
  9135  0033A6  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9136  0033A8  A0D8               	btfss	status,0,c
  9137  0033AA  D05B               	goto	l381
  9138  0033AC                     u5300:
  9139                           
  9140                           ; BSR set to: 0
  9141  0033AC  0E01               	movlw	1
  9142  0033AE  6F61               	movwf	create_chain@scl& (0+255),b
  9143  0033B0  0E00               	movlw	0
  9144  0033B2  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9145  0033B4  0E00               	movlw	0
  9146  0033B6  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9147  0033B8  0E00               	movlw	0
  9148  0033BA  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9149  0033BC  D052               	goto	l381
  9150  0033BE                     l4429:
  9151                           
  9152                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9153  0033BE  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9154  0033C2  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9155  0033C6  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9156  0033CA  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9157  0033CE  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9158  0033D2  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9159  0033D6  EC0F  F016         	call	_get_fat	;wreg free
  9160  0033DA  C03B  F069         	movff	?_get_fat,create_chain@cs
  9161  0033DE  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9162  0033E2  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9163  0033E6  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9164                           
  9165                           ;ff.c: 1005:   if (cs < 2) return 1;
  9166  0033EA  0100               	movlb	0	; () banked
  9167  0033EC  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9168  0033EE  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9169  0033F0  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9170  0033F2  E10D               	bnz	l4437
  9171  0033F4  0E02               	movlw	2
  9172  0033F6  5D69               	subwf	create_chain@cs& (0+255),w,b
  9173  0033F8  B0D8               	btfsc	status,0,c
  9174  0033FA  D009               	goto	l4437
  9175                           
  9176                           ; BSR set to: 0
  9177  0033FC  0E01               	movlw	1
  9178  0033FE  6E56               	movwf	?_create_chain,c
  9179  003400  0E00               	movlw	0
  9180  003402  6E57               	movwf	?_create_chain+1,c
  9181  003404  0E00               	movlw	0
  9182  003406  6E58               	movwf	?_create_chain+2,c
  9183  003408  0E00               	movlw	0
  9184  00340A  6E59               	movwf	?_create_chain+3,c
  9185  00340C  0012               	return	
  9186  00340E                     l4437:
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9190  00340E  2969               	incf	create_chain@cs& (0+255),w,b
  9191  003410  E110               	bnz	l4441
  9192  003412  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9193  003414  E10E               	bnz	l4441
  9194  003416  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9195  003418  E10C               	bnz	l4441
  9196  00341A  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9197  00341C  A4D8               	btfss	status,2,c
  9198  00341E  D009               	goto	l4441
  9199  003420                     u5320:
  9200                           
  9201                           ; BSR set to: 0
  9202  003420  C069  F056         	movff	create_chain@cs,?_create_chain
  9203  003424  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9204  003428  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9205  00342C  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9206  003430  0012               	return	
  9207  003432                     l4441:
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9211  003432  EE20 F012          	lfsr	2,18
  9212  003436  5056               	movf	create_chain@fs,w,c
  9213  003438  26D9               	addwf	fsr2l,f,c
  9214  00343A  5057               	movf	create_chain@fs+1,w,c
  9215  00343C  22DA               	addwfc	fsr2h,f,c
  9216  00343E  50DE               	movf	postinc2,w,c
  9217  003440  5D69               	subwf	create_chain@cs& (0+255),w,b
  9218  003442  50DE               	movf	postinc2,w,c
  9219  003444  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9220  003446  50DE               	movf	postinc2,w,c
  9221  003448  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9222  00344A  50DE               	movf	postinc2,w,c
  9223  00344C  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9224  00344E  A0D8               	btfss	status,0,c
  9225  003450  D7E7               	goto	u5320
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;ff.c: 1008:   scl = clst;
  9229  003452  C058  F061         	movff	create_chain@clst,create_chain@scl
  9230  003456  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9231  00345A  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9232  00345E  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9233  003462                     l381:
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;ff.c: 1011:  ncl = scl;
  9237  003462  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9238  003466  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9239  00346A  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9240  00346E  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9241  003472                     l4445:
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;ff.c: 1013:   ncl++;
  9245  003472  0E01               	movlw	1
  9246  003474  2765               	addwf	create_chain@ncl& (0+255),f,b
  9247  003476  0E00               	movlw	0
  9248  003478  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9249  00347A  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9250  00347C  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9254  00347E  EE20 F012          	lfsr	2,18
  9255  003482  5056               	movf	create_chain@fs,w,c
  9256  003484  26D9               	addwf	fsr2l,f,c
  9257  003486  5057               	movf	create_chain@fs+1,w,c
  9258  003488  22DA               	addwfc	fsr2h,f,c
  9259  00348A  50DE               	movf	postinc2,w,c
  9260  00348C  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9261  00348E  50DE               	movf	postinc2,w,c
  9262  003490  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9263  003492  50DE               	movf	postinc2,w,c
  9264  003494  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9265  003496  50DE               	movf	postinc2,w,c
  9266  003498  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9267  00349A  A0D8               	btfss	status,0,c
  9268  00349C  D019               	goto	l4457
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;ff.c: 1015:    ncl = 2;
  9272  00349E  0E02               	movlw	2
  9273  0034A0  6F65               	movwf	create_chain@ncl& (0+255),b
  9274  0034A2  0E00               	movlw	0
  9275  0034A4  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9276  0034A6  0E00               	movlw	0
  9277  0034A8  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9278  0034AA  0E00               	movlw	0
  9279  0034AC  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9283  0034AE  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9284  0034B0  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9285  0034B2  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9286  0034B4  E10D               	bnz	l4457
  9287  0034B6  0E02               	movlw	2
  9288  0034B8  5D61               	subwf	create_chain@scl& (0+255),w,b
  9289  0034BA  B0D8               	btfsc	status,0,c
  9290  0034BC  D009               	goto	l4457
  9291  0034BE                     u5350:
  9292                           
  9293                           ; BSR set to: 0
  9294  0034BE  0E00               	movlw	0
  9295  0034C0  6E56               	movwf	?_create_chain,c
  9296  0034C2  0E00               	movlw	0
  9297  0034C4  6E57               	movwf	?_create_chain+1,c
  9298  0034C6  0E00               	movlw	0
  9299  0034C8  6E58               	movwf	?_create_chain+2,c
  9300  0034CA  0E00               	movlw	0
  9301  0034CC  6E59               	movwf	?_create_chain+3,c
  9302  0034CE  0012               	return	
  9303  0034D0                     l4457:
  9304                           
  9305                           ; BSR set to: 0
  9306                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9307  0034D0  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9308  0034D4  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9309  0034D8  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9310  0034DC  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9311  0034E0  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9312  0034E4  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9313  0034E8  EC0F  F016         	call	_get_fat	;wreg free
  9314  0034EC  C03B  F069         	movff	?_get_fat,create_chain@cs
  9315  0034F0  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9316  0034F4  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9317  0034F8  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9318                           
  9319                           ;ff.c: 1019:   if (cs == 0) break;
  9320  0034FC  0100               	movlb	0	; () banked
  9321  0034FE  5169               	movf	create_chain@cs& (0+255),w,b
  9322  003500  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9323  003502  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9324  003504  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9325  003506  B4D8               	btfsc	status,2,c
  9326  003508  D01D               	goto	l4473
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9330  00350A  2969               	incf	create_chain@cs& (0+255),w,b
  9331  00350C  E107               	bnz	u5370
  9332  00350E  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9333  003510  E105               	bnz	u5370
  9334  003512  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9335  003514  E103               	bnz	u5370
  9336  003516  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9337  003518  B4D8               	btfsc	status,2,c
  9338  00351A  D782               	goto	u5320
  9339  00351C                     u5370:
  9340                           
  9341                           ; BSR set to: 0
  9342  00351C  0569               	decf	create_chain@cs& (0+255),w,b
  9343  00351E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9344  003520  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9345  003522  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9346  003524  B4D8               	btfsc	status,2,c
  9347  003526  D77C               	goto	u5320
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9351  003528  5161               	movf	create_chain@scl& (0+255),w,b
  9352  00352A  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9353  00352C  E1A2               	bnz	l4445
  9354  00352E  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9355  003530  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9356  003532  E19F               	bnz	l4445
  9357  003534  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9358  003536  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9359  003538  E19C               	bnz	l4445
  9360  00353A  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9361  00353C  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9362  00353E  B4D8               	btfsc	status,2,c
  9363  003540  D7BE               	goto	u5350
  9364  003542  D797               	goto	l4445
  9365  003544                     l4473:
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9369  003544  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9370  003548  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9371  00354C  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9372  003550  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9373  003554  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9374  003558  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9375  00355C  0EFF               	movlw	255
  9376  00355E  6E41               	movwf	put_fat@val,c
  9377  003560  0EFF               	movlw	255
  9378  003562  6E42               	movwf	put_fat@val+1,c
  9379  003564  0EFF               	movlw	255
  9380  003566  6E43               	movwf	put_fat@val+2,c
  9381  003568  0E0F               	movlw	15
  9382  00356A  6E44               	movwf	put_fat@val+3,c
  9383  00356C  ECF7  F011         	call	_put_fat	;wreg free
  9384  003570  0100               	movlb	0	; () banked
  9385  003572  6F60               	movwf	create_chain@res& (0+255),b
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9389  003574  5160               	movf	create_chain@res& (0+255),w,b
  9390  003576  A4D8               	btfss	status,2,c
  9391  003578  D01E               	goto	l4481
  9392                           
  9393                           ; BSR set to: 0
  9394  00357A  5058               	movf	create_chain@clst,w,c
  9395  00357C  1059               	iorwf	create_chain@clst+1,w,c
  9396  00357E  105A               	iorwf	create_chain@clst+2,w,c
  9397  003580  105B               	iorwf	create_chain@clst+3,w,c
  9398  003582  B4D8               	btfsc	status,2,c
  9399  003584  D018               	goto	l4481
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9403  003586  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9404  00358A  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9405  00358E  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9406  003592  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9407  003596  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9408  00359A  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9409  00359E  C065  F041         	movff	create_chain@ncl,put_fat@val
  9410  0035A2  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9411  0035A6  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9412  0035AA  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9413  0035AE  ECF7  F011         	call	_put_fat	;wreg free
  9414  0035B2  0100               	movlb	0	; () banked
  9415  0035B4  6F60               	movwf	create_chain@res& (0+255),b
  9416  0035B6                     l4481:
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;ff.c: 1029:  if (res == FR_OK) {
  9420  0035B6  5160               	movf	create_chain@res& (0+255),w,b
  9421  0035B8  A4D8               	btfss	status,2,c
  9422  0035BA  D031               	goto	l4487
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;ff.c: 1030:   fs->last_clust = ncl;
  9426  0035BC  EE20 F00A          	lfsr	2,10
  9427  0035C0  5056               	movf	create_chain@fs,w,c
  9428  0035C2  26D9               	addwf	fsr2l,f,c
  9429  0035C4  5057               	movf	create_chain@fs+1,w,c
  9430  0035C6  22DA               	addwfc	fsr2h,f,c
  9431  0035C8  C065  FFDE         	movff	create_chain@ncl,postinc2
  9432  0035CC  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9433  0035D0  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9434  0035D4  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9435                           
  9436                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9437  0035D8  EE20 F00E          	lfsr	2,14
  9438  0035DC  5056               	movf	create_chain@fs,w,c
  9439  0035DE  26D9               	addwf	fsr2l,f,c
  9440  0035E0  5057               	movf	create_chain@fs+1,w,c
  9441  0035E2  22DA               	addwfc	fsr2h,f,c
  9442  0035E4  28DE               	incf	postinc2,w,c
  9443  0035E6  E107               	bnz	u5430
  9444  0035E8  28DE               	incf	postinc2,w,c
  9445  0035EA  E105               	bnz	u5430
  9446  0035EC  28DE               	incf	postinc2,w,c
  9447  0035EE  E103               	bnz	u5430
  9448  0035F0  28DE               	incf	postinc2,w,c
  9449  0035F2  B4D8               	btfsc	status,2,c
  9450  0035F4  D024               	goto	l398
  9451  0035F6                     u5430:
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;ff.c: 1032:    fs->free_clust--;
  9455  0035F6  EE20 F00E          	lfsr	2,14
  9456  0035FA  5056               	movf	create_chain@fs,w,c
  9457  0035FC  26D9               	addwf	fsr2l,f,c
  9458  0035FE  5057               	movf	create_chain@fs+1,w,c
  9459  003600  22DA               	addwfc	fsr2h,f,c
  9460  003602  06DE               	decf	postinc2,f,c
  9461  003604  0E00               	movlw	0
  9462  003606  5ADE               	subwfb	postinc2,f,c
  9463  003608  5ADE               	subwfb	postinc2,f,c
  9464  00360A  5ADE               	subwfb	postinc2,f,c
  9465                           
  9466                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9467  00360C  EE20 F005          	lfsr	2,5
  9468  003610  5056               	movf	create_chain@fs,w,c
  9469  003612  26D9               	addwf	fsr2l,f,c
  9470  003614  5057               	movf	create_chain@fs+1,w,c
  9471  003616  22DA               	addwfc	fsr2h,f,c
  9472  003618  0E00               	movlw	0
  9473  00361A  80DB               	bsf	plusw2,0,c
  9474  00361C  D010               	goto	l398
  9475  00361E                     l4487:
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9479  00361E  0560               	decf	create_chain@res& (0+255),w,b
  9480  003620  B4D8               	btfsc	status,2,c
  9481  003622  D009               	goto	l400
  9482                           
  9483                           ; BSR set to: 0
  9484  003624  0E01               	movlw	1
  9485  003626  6F65               	movwf	create_chain@ncl& (0+255),b
  9486  003628  0E00               	movlw	0
  9487  00362A  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9488  00362C  0E00               	movlw	0
  9489  00362E  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9490  003630  0E00               	movlw	0
  9491  003632  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9492  003634  D004               	goto	l398
  9493  003636                     l400:
  9494                           
  9495                           ; BSR set to: 0
  9496  003636  6965               	setf	create_chain@ncl& (0+255),b
  9497  003638  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9498  00363A  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9499  00363C  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9500  00363E                     l398:
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;ff.c: 1039:  return ncl;
  9504  00363E  C065  F056         	movff	create_chain@ncl,?_create_chain
  9505  003642  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9506  003646  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9507  00364A  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9508                           
  9509                           ; BSR set to: 0
  9510  00364E  0012               	return		;funcret
  9511  003650                     __end_of_create_chain:
  9512                           	opt callstack 0
  9513                           
  9514 ;; *************** function _put_fat *****************
  9515 ;; Defined at:
  9516 ;;		line 873 in file "ff.c"
  9517 ;; Parameters:    Size  Location     Type
  9518 ;;  fs              2   58[COMRAM] PTR struct .
  9519 ;;		 -> NULL(0), FatFs(558), 
  9520 ;;  clst            4   60[COMRAM] unsigned long 
  9521 ;;  val             4   64[COMRAM] unsigned long 
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;  p               2   83[COMRAM] PTR unsigned char 
  9524 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9525 ;;  bc              2   80[COMRAM] unsigned short 
  9526 ;;  res             1   82[COMRAM] enum E93
  9527 ;; Return value:  Size  Location     Type
  9528 ;;                  1    wreg      enum E93
  9529 ;; Registers used:
  9530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9536 ;;      Params:        10       0       0       0       0       0       0       0       0
  9537 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9538 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9539 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9540 ;;Total ram usage:       27 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    8
  9543 ;; This function calls:
  9544 ;;		_move_window
  9545 ;; This function is called by:
  9546 ;;		_remove_chain
  9547 ;;		_create_chain
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           	psect	text24
  9552  0023EE                     __ptext24:
  9553                           	opt callstack 0
  9554  0023EE                     _put_fat:
  9555                           	opt callstack 19
  9556                           
  9557                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;incstack = 0
  9561  0023EE  5040               	movf	put_fat@clst+3,w,c
  9562  0023F0  103F               	iorwf	put_fat@clst+2,w,c
  9563  0023F2  103E               	iorwf	put_fat@clst+1,w,c
  9564  0023F4  E104               	bnz	u5120
  9565  0023F6  0E02               	movlw	2
  9566  0023F8  5C3D               	subwf	put_fat@clst,w,c
  9567  0023FA  A0D8               	btfss	status,0,c
  9568  0023FC  D010               	goto	u5130
  9569  0023FE                     u5120:
  9570  0023FE  EE20 F012          	lfsr	2,18
  9571  002402  503B               	movf	put_fat@fs,w,c
  9572  002404  26D9               	addwf	fsr2l,f,c
  9573  002406  503C               	movf	put_fat@fs+1,w,c
  9574  002408  22DA               	addwfc	fsr2h,f,c
  9575  00240A  50DE               	movf	postinc2,w,c
  9576  00240C  5C3D               	subwf	put_fat@clst,w,c
  9577  00240E  50DE               	movf	postinc2,w,c
  9578  002410  583E               	subwfb	put_fat@clst+1,w,c
  9579  002412  50DE               	movf	postinc2,w,c
  9580  002414  583F               	subwfb	put_fat@clst+2,w,c
  9581  002416  50DE               	movf	postinc2,w,c
  9582  002418  5840               	subwfb	put_fat@clst+3,w,c
  9583  00241A  A0D8               	btfss	status,0,c
  9584  00241C  D1E5               	goto	l4379
  9585  00241E                     u5130:
  9586                           
  9587                           ;ff.c: 885:   res = FR_INT_ERR;
  9588  00241E  0E02               	movlw	2
  9589  002420  6E53               	movwf	put_fat@res,c
  9590                           
  9591                           ;ff.c: 887:  } else {
  9592  002422  D1F8               	goto	l4381
  9593  002424                     l342:
  9594                           
  9595                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9596  002424  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9597  002428  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9598  00242C  90D8               	bcf	status,0,c
  9599  00242E  3052               	rrcf	put_fat@bc+1,w,c
  9600  002430  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9601  002432  3051               	rrcf	put_fat@bc,w,c
  9602  002434  6E45               	movwf	??_put_fat& (0+255),c
  9603  002436  5045               	movf	??_put_fat,w,c
  9604  002438  2651               	addwf	put_fat@bc,f,c
  9605  00243A  5046               	movf	??_put_fat+1,w,c
  9606  00243C  2252               	addwfc	put_fat@bc+1,f,c
  9607                           
  9608                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9609  00243E  C03B  F030         	movff	put_fat@fs,move_window@fs
  9610  002442  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9611  002446  EE20 F01E          	lfsr	2,30
  9612  00244A  503B               	movf	put_fat@fs,w,c
  9613  00244C  26D9               	addwf	fsr2l,f,c
  9614  00244E  503C               	movf	put_fat@fs+1,w,c
  9615  002450  22DA               	addwfc	fsr2h,f,c
  9616  002452  CFDE F045          	movff	postinc2,??_put_fat
  9617  002456  CFDE F046          	movff	postinc2,??_put_fat+1
  9618  00245A  CFDE F047          	movff	postinc2,??_put_fat+2
  9619  00245E  CFDE F048          	movff	postinc2,??_put_fat+3
  9620  002462  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9621  002466  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9622  00246A  0E09               	movlw	9
  9623  00246C  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9624  00246E                     u5145:
  9625  00246E  90D8               	bcf	status,0,c
  9626  002470  324A               	rrcf	??_put_fat+5,f,c
  9627  002472  3249               	rrcf	??_put_fat+4,f,c
  9628  002474  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9629  002476  D7FB               	goto	u5145
  9630  002478  5049               	movf	??_put_fat+4,w,c
  9631  00247A  2445               	addwf	??_put_fat,w,c
  9632  00247C  6E32               	movwf	move_window@sector,c
  9633  00247E  504A               	movf	??_put_fat+5,w,c
  9634  002480  2046               	addwfc	??_put_fat+1,w,c
  9635  002482  6E33               	movwf	move_window@sector+1,c
  9636  002484  0E00               	movlw	0
  9637  002486  2047               	addwfc	??_put_fat+2,w,c
  9638  002488  6E34               	movwf	move_window@sector+2,c
  9639  00248A  0E00               	movlw	0
  9640  00248C  2048               	addwfc	??_put_fat+3,w,c
  9641  00248E  6E35               	movwf	move_window@sector+3,c
  9642  002490  EC39  F027         	call	_move_window	;wreg free
  9643  002494  6E53               	movwf	put_fat@res,c
  9644                           
  9645                           ;ff.c: 892:    if (res != FR_OK) break;
  9646  002496  5053               	movf	put_fat@res,w,c
  9647  002498  A4D8               	btfss	status,2,c
  9648  00249A  D1BC               	goto	l4381
  9649                           
  9650                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9651  00249C  0EFF               	movlw	255
  9652  00249E  6E45               	movwf	??_put_fat& (0+255),c
  9653  0024A0  0E01               	movlw	1
  9654  0024A2  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9655  0024A4  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9656  0024A8  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9657  0024AC  5045               	movf	??_put_fat,w,c
  9658  0024AE  1647               	andwf	??_put_fat+2,f,c
  9659  0024B0  5046               	movf	??_put_fat+1,w,c
  9660  0024B2  1648               	andwf	??_put_fat+3,f,c
  9661  0024B4  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9662  0024B8  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9663  0024BC  5047               	movf	??_put_fat+2,w,c
  9664  0024BE  2649               	addwf	??_put_fat+4,f,c
  9665  0024C0  5048               	movf	??_put_fat+3,w,c
  9666  0024C2  224A               	addwfc	??_put_fat+5,f,c
  9667  0024C4  0E2E               	movlw	46
  9668  0024C6  2449               	addwf	??_put_fat+4,w,c
  9669  0024C8  6E54               	movwf	put_fat@p,c
  9670  0024CA  0E00               	movlw	0
  9671  0024CC  204A               	addwfc	??_put_fat+5,w,c
  9672  0024CE  6E55               	movwf	put_fat@p+1,c
  9673  0024D0  4A51               	infsnz	put_fat@bc,f,c
  9674  0024D2  2A52               	incf	put_fat@bc+1,f,c
  9675                           
  9676                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9677  0024D4  B03D               	btfsc	put_fat@clst,0,c
  9678  0024D6  D004               	goto	l4333
  9679  0024D8  C041  F04D         	movff	put_fat@val,_put_fat$551
  9680  0024DC  6A4E               	clrf	_put_fat$551+1,c
  9681  0024DE  D01A               	goto	l4335
  9682  0024E0                     l4333:
  9683  0024E0  5041               	movf	put_fat@val,w,c
  9684  0024E2  6E45               	movwf	??_put_fat& (0+255),c
  9685  0024E4  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9686  0024E6  3A45               	swapf	??_put_fat,f,c
  9687  0024E8  3A46               	swapf	??_put_fat+1,f,c
  9688  0024EA  0EF0               	movlw	240
  9689  0024EC  1646               	andwf	??_put_fat+1,f,c
  9690  0024EE  5045               	movf	??_put_fat,w,c
  9691  0024F0  0B0F               	andlw	15
  9692  0024F2  1246               	iorwf	??_put_fat+1,f,c
  9693  0024F4  0EF0               	movlw	240
  9694  0024F6  1645               	andwf	??_put_fat,f,c
  9695  0024F8  C054  FFD9         	movff	put_fat@p,fsr2l
  9696  0024FC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9697  002500  50DF               	movf	indf2,w,c
  9698  002502  0B0F               	andlw	15
  9699  002504  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9700  002506  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9701  002508  5045               	movf	??_put_fat,w,c
  9702  00250A  1047               	iorwf	??_put_fat+2,w,c
  9703  00250C  6E4D               	movwf	_put_fat$551,c
  9704  00250E  5046               	movf	??_put_fat+1,w,c
  9705  002510  1048               	iorwf	??_put_fat+3,w,c
  9706  002512  6E4E               	movwf	_put_fat$551+1,c
  9707  002514                     l4335:
  9708  002514  C054  FFD9         	movff	put_fat@p,fsr2l
  9709  002518  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9710  00251C  C04D  FFDF         	movff	_put_fat$551,indf2
  9711                           
  9712                           ;ff.c: 895:    fs->wflag = 1;
  9713  002520  EE20 F004          	lfsr	2,4
  9714  002524  503B               	movf	put_fat@fs,w,c
  9715  002526  26D9               	addwf	fsr2l,f,c
  9716  002528  503C               	movf	put_fat@fs+1,w,c
  9717  00252A  22DA               	addwfc	fsr2h,f,c
  9718  00252C  0E01               	movlw	1
  9719  00252E  6EDF               	movwf	indf2,c
  9720                           
  9721                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9722  002530  C03B  F030         	movff	put_fat@fs,move_window@fs
  9723  002534  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9724  002538  EE20 F01E          	lfsr	2,30
  9725  00253C  503B               	movf	put_fat@fs,w,c
  9726  00253E  26D9               	addwf	fsr2l,f,c
  9727  002540  503C               	movf	put_fat@fs+1,w,c
  9728  002542  22DA               	addwfc	fsr2h,f,c
  9729  002544  CFDE F045          	movff	postinc2,??_put_fat
  9730  002548  CFDE F046          	movff	postinc2,??_put_fat+1
  9731  00254C  CFDE F047          	movff	postinc2,??_put_fat+2
  9732  002550  CFDE F048          	movff	postinc2,??_put_fat+3
  9733  002554  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9734  002558  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9735  00255C  0E09               	movlw	9
  9736  00255E  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9737  002560                     u5175:
  9738  002560  90D8               	bcf	status,0,c
  9739  002562  324A               	rrcf	??_put_fat+5,f,c
  9740  002564  3249               	rrcf	??_put_fat+4,f,c
  9741  002566  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9742  002568  D7FB               	goto	u5175
  9743  00256A  5049               	movf	??_put_fat+4,w,c
  9744  00256C  2445               	addwf	??_put_fat,w,c
  9745  00256E  6E32               	movwf	move_window@sector,c
  9746  002570  504A               	movf	??_put_fat+5,w,c
  9747  002572  2046               	addwfc	??_put_fat+1,w,c
  9748  002574  6E33               	movwf	move_window@sector+1,c
  9749  002576  0E00               	movlw	0
  9750  002578  2047               	addwfc	??_put_fat+2,w,c
  9751  00257A  6E34               	movwf	move_window@sector+2,c
  9752  00257C  0E00               	movlw	0
  9753  00257E  2048               	addwfc	??_put_fat+3,w,c
  9754  002580  6E35               	movwf	move_window@sector+3,c
  9755  002582  EC39  F027         	call	_move_window	;wreg free
  9756  002586  6E53               	movwf	put_fat@res,c
  9757                           
  9758                           ;ff.c: 897:    if (res != FR_OK) break;
  9759  002588  5053               	movf	put_fat@res,w,c
  9760  00258A  A4D8               	btfss	status,2,c
  9761  00258C  D143               	goto	l4381
  9762                           
  9763                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9764  00258E  0EFF               	movlw	255
  9765  002590  6E45               	movwf	??_put_fat& (0+255),c
  9766  002592  0E01               	movlw	1
  9767  002594  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9768  002596  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9769  00259A  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9770  00259E  5045               	movf	??_put_fat,w,c
  9771  0025A0  1647               	andwf	??_put_fat+2,f,c
  9772  0025A2  5046               	movf	??_put_fat+1,w,c
  9773  0025A4  1648               	andwf	??_put_fat+3,f,c
  9774  0025A6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9775  0025AA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9776  0025AE  5047               	movf	??_put_fat+2,w,c
  9777  0025B0  2649               	addwf	??_put_fat+4,f,c
  9778  0025B2  5048               	movf	??_put_fat+3,w,c
  9779  0025B4  224A               	addwfc	??_put_fat+5,f,c
  9780  0025B6  0E2E               	movlw	46
  9781  0025B8  2449               	addwf	??_put_fat+4,w,c
  9782  0025BA  6E54               	movwf	put_fat@p,c
  9783  0025BC  0E00               	movlw	0
  9784  0025BE  204A               	addwfc	??_put_fat+5,w,c
  9785  0025C0  6E55               	movwf	put_fat@p+1,c
  9786                           
  9787                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9788  0025C2  B03D               	btfsc	put_fat@clst,0,c
  9789  0025C4  D01B               	goto	l4351
  9790  0025C6  C041  F045         	movff	put_fat@val,??_put_fat
  9791  0025CA  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9792  0025CE  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9793  0025D2  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9794  0025D6  C046  F045         	movff	??_put_fat+1,??_put_fat
  9795  0025DA  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9796  0025DE  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9797  0025E2  6A48               	clrf	??_put_fat+3,c
  9798  0025E4  0E0F               	movlw	15
  9799  0025E6  1645               	andwf	??_put_fat,f,c
  9800  0025E8  C054  FFD9         	movff	put_fat@p,fsr2l
  9801  0025EC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9802  0025F0  50DF               	movf	indf2,w,c
  9803  0025F2  0BF0               	andlw	240
  9804  0025F4  1045               	iorwf	??_put_fat,w,c
  9805  0025F6  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9806  0025F8  5049               	movf	??_put_fat+4,w,c
  9807  0025FA  D012               	goto	L9
  9808  0025FC                     l4351:
  9809  0025FC  C041  F045         	movff	put_fat@val,??_put_fat
  9810  002600  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9811  002604  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9812  002608  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9813  00260C  0E05               	movlw	5
  9814  00260E  D005               	goto	u5200
  9815  002610                     u5205:
  9816  002610  90D8               	bcf	status,0,c
  9817  002612  3248               	rrcf	??_put_fat+3,f,c
  9818  002614  3247               	rrcf	??_put_fat+2,f,c
  9819  002616  3246               	rrcf	??_put_fat+1,f,c
  9820  002618  3245               	rrcf	??_put_fat,f,c
  9821  00261A                     u5200:
  9822  00261A  2EE8               	decfsz	wreg,f,c
  9823  00261C  D7F9               	goto	u5205
  9824  00261E  5045               	movf	??_put_fat,w,c
  9825  002620                     L9:
  9826  002620  6E4F               	movwf	_put_fat$552,c
  9827  002622  6A50               	clrf	_put_fat$552+1,c
  9828  002624  C054  FFD9         	movff	put_fat@p,fsr2l
  9829  002628  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9830  00262C  C04F  FFDF         	movff	_put_fat$552,indf2
  9831  002630  D0D2               	goto	l4375
  9832  002632                     l4355:
  9833                           
  9834                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9835  002632  C03B  F030         	movff	put_fat@fs,move_window@fs
  9836  002636  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9837  00263A  EE20 F01E          	lfsr	2,30
  9838  00263E  503B               	movf	put_fat@fs,w,c
  9839  002640  26D9               	addwf	fsr2l,f,c
  9840  002642  503C               	movf	put_fat@fs+1,w,c
  9841  002644  22DA               	addwfc	fsr2h,f,c
  9842  002646  CFDE F045          	movff	postinc2,??_put_fat
  9843  00264A  CFDE F046          	movff	postinc2,??_put_fat+1
  9844  00264E  CFDE F047          	movff	postinc2,??_put_fat+2
  9845  002652  CFDE F048          	movff	postinc2,??_put_fat+3
  9846  002656  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9847  00265A  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9848  00265E  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9849  002662  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9850  002666  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9851  00266A  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9852  00266E  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9853  002672  6A4C               	clrf	??_put_fat+7,c
  9854  002674  5045               	movf	??_put_fat,w,c
  9855  002676  2449               	addwf	??_put_fat+4,w,c
  9856  002678  6E32               	movwf	move_window@sector,c
  9857  00267A  5046               	movf	??_put_fat+1,w,c
  9858  00267C  204A               	addwfc	??_put_fat+5,w,c
  9859  00267E  6E33               	movwf	move_window@sector+1,c
  9860  002680  5047               	movf	??_put_fat+2,w,c
  9861  002682  204B               	addwfc	??_put_fat+6,w,c
  9862  002684  6E34               	movwf	move_window@sector+2,c
  9863  002686  5048               	movf	??_put_fat+3,w,c
  9864  002688  204C               	addwfc	??_put_fat+7,w,c
  9865  00268A  6E35               	movwf	move_window@sector+3,c
  9866  00268C  EC39  F027         	call	_move_window	;wreg free
  9867  002690  6E53               	movwf	put_fat@res,c
  9868                           
  9869                           ;ff.c: 905:    if (res != FR_OK) break;
  9870  002692  5053               	movf	put_fat@res,w,c
  9871  002694  A4D8               	btfss	status,2,c
  9872  002696  D0BE               	goto	l4381
  9873                           
  9874                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9875  002698  0EFF               	movlw	255
  9876  00269A  6E45               	movwf	??_put_fat& (0+255),c
  9877  00269C  0E01               	movlw	1
  9878  00269E  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9879  0026A0  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9880  0026A4  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9881  0026A8  90D8               	bcf	status,0,c
  9882  0026AA  3647               	rlcf	??_put_fat+2,f,c
  9883  0026AC  3648               	rlcf	??_put_fat+3,f,c
  9884  0026AE  5045               	movf	??_put_fat,w,c
  9885  0026B0  1647               	andwf	??_put_fat+2,f,c
  9886  0026B2  5046               	movf	??_put_fat+1,w,c
  9887  0026B4  1648               	andwf	??_put_fat+3,f,c
  9888  0026B6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9889  0026BA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9890  0026BE  5047               	movf	??_put_fat+2,w,c
  9891  0026C0  2649               	addwf	??_put_fat+4,f,c
  9892  0026C2  5048               	movf	??_put_fat+3,w,c
  9893  0026C4  224A               	addwfc	??_put_fat+5,f,c
  9894  0026C6  0E2E               	movlw	46
  9895  0026C8  2449               	addwf	??_put_fat+4,w,c
  9896  0026CA  6E54               	movwf	put_fat@p,c
  9897  0026CC  0E00               	movlw	0
  9898  0026CE  204A               	addwfc	??_put_fat+5,w,c
  9899  0026D0  6E55               	movwf	put_fat@p+1,c
  9900                           
  9901                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  9902  0026D2  C054  FFD9         	movff	put_fat@p,fsr2l
  9903  0026D6  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9904  0026DA  C041  FFDE         	movff	put_fat@val,postinc2
  9905  0026DE  C042  FFDD         	movff	put_fat@val+1,postdec2
  9906  0026E2  D079               	goto	l4375
  9907  0026E4                     l4365:
  9908                           
  9909                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  9910  0026E4  C03B  F030         	movff	put_fat@fs,move_window@fs
  9911  0026E8  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9912  0026EC  EE20 F01E          	lfsr	2,30
  9913  0026F0  503B               	movf	put_fat@fs,w,c
  9914  0026F2  26D9               	addwf	fsr2l,f,c
  9915  0026F4  503C               	movf	put_fat@fs+1,w,c
  9916  0026F6  22DA               	addwfc	fsr2h,f,c
  9917  0026F8  CFDE F045          	movff	postinc2,??_put_fat
  9918  0026FC  CFDE F046          	movff	postinc2,??_put_fat+1
  9919  002700  CFDE F047          	movff	postinc2,??_put_fat+2
  9920  002704  CFDE F048          	movff	postinc2,??_put_fat+3
  9921  002708  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9922  00270C  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9923  002710  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9924  002714  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9925  002718  0E08               	movlw	8
  9926  00271A  D005               	goto	u5220
  9927  00271C                     u5225:
  9928  00271C  90D8               	bcf	status,0,c
  9929  00271E  324C               	rrcf	??_put_fat+7,f,c
  9930  002720  324B               	rrcf	??_put_fat+6,f,c
  9931  002722  324A               	rrcf	??_put_fat+5,f,c
  9932  002724  3249               	rrcf	??_put_fat+4,f,c
  9933  002726                     u5220:
  9934  002726  2EE8               	decfsz	wreg,f,c
  9935  002728  D7F9               	goto	u5225
  9936  00272A  5045               	movf	??_put_fat,w,c
  9937  00272C  2449               	addwf	??_put_fat+4,w,c
  9938  00272E  6E32               	movwf	move_window@sector,c
  9939  002730  5046               	movf	??_put_fat+1,w,c
  9940  002732  204A               	addwfc	??_put_fat+5,w,c
  9941  002734  6E33               	movwf	move_window@sector+1,c
  9942  002736  5047               	movf	??_put_fat+2,w,c
  9943  002738  204B               	addwfc	??_put_fat+6,w,c
  9944  00273A  6E34               	movwf	move_window@sector+2,c
  9945  00273C  5048               	movf	??_put_fat+3,w,c
  9946  00273E  204C               	addwfc	??_put_fat+7,w,c
  9947  002740  6E35               	movwf	move_window@sector+3,c
  9948  002742  EC39  F027         	call	_move_window	;wreg free
  9949  002746  6E53               	movwf	put_fat@res,c
  9950                           
  9951                           ;ff.c: 913:    if (res != FR_OK) break;
  9952  002748  5053               	movf	put_fat@res,w,c
  9953  00274A  A4D8               	btfss	status,2,c
  9954  00274C  D063               	goto	l4381
  9955                           
  9956                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  9957  00274E  0EFF               	movlw	255
  9958  002750  6E45               	movwf	??_put_fat& (0+255),c
  9959  002752  0E01               	movlw	1
  9960  002754  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9961  002756  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9962  00275A  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9963  00275E  90D8               	bcf	status,0,c
  9964  002760  3647               	rlcf	??_put_fat+2,f,c
  9965  002762  3648               	rlcf	??_put_fat+3,f,c
  9966  002764  90D8               	bcf	status,0,c
  9967  002766  3647               	rlcf	??_put_fat+2,f,c
  9968  002768  3648               	rlcf	??_put_fat+3,f,c
  9969  00276A  5045               	movf	??_put_fat,w,c
  9970  00276C  1647               	andwf	??_put_fat+2,f,c
  9971  00276E  5046               	movf	??_put_fat+1,w,c
  9972  002770  1648               	andwf	??_put_fat+3,f,c
  9973  002772  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9974  002776  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9975  00277A  5047               	movf	??_put_fat+2,w,c
  9976  00277C  2649               	addwf	??_put_fat+4,f,c
  9977  00277E  5048               	movf	??_put_fat+3,w,c
  9978  002780  224A               	addwfc	??_put_fat+5,f,c
  9979  002782  0E2E               	movlw	46
  9980  002784  2449               	addwf	??_put_fat+4,w,c
  9981  002786  6E54               	movwf	put_fat@p,c
  9982  002788  0E00               	movlw	0
  9983  00278A  204A               	addwfc	??_put_fat+5,w,c
  9984  00278C  6E55               	movwf	put_fat@p+1,c
  9985                           
  9986                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  9987  00278E  C054  FFD9         	movff	put_fat@p,fsr2l
  9988  002792  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9989  002796  0E00               	movlw	0
  9990  002798  14DE               	andwf	postinc2,w,c
  9991  00279A  6E45               	movwf	??_put_fat& (0+255),c
  9992  00279C  0E00               	movlw	0
  9993  00279E  14DE               	andwf	postinc2,w,c
  9994  0027A0  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9995  0027A2  0E00               	movlw	0
  9996  0027A4  14DE               	andwf	postinc2,w,c
  9997  0027A6  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9998  0027A8  0EF0               	movlw	240
  9999  0027AA  14DE               	andwf	postinc2,w,c
 10000  0027AC  6E48               	movwf	(??_put_fat+3)& (0+255),c
 10001  0027AE  5045               	movf	??_put_fat,w,c
 10002  0027B0  1241               	iorwf	put_fat@val,f,c
 10003  0027B2  5046               	movf	??_put_fat+1,w,c
 10004  0027B4  1242               	iorwf	put_fat@val+1,f,c
 10005  0027B6  5047               	movf	??_put_fat+2,w,c
 10006  0027B8  1243               	iorwf	put_fat@val+2,f,c
 10007  0027BA  5048               	movf	??_put_fat+3,w,c
 10008  0027BC  1244               	iorwf	put_fat@val+3,f,c
 10009                           
 10010                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
 10011  0027BE  C054  FFD9         	movff	put_fat@p,fsr2l
 10012  0027C2  C055  FFDA         	movff	put_fat@p+1,fsr2h
 10013  0027C6  C041  FFDE         	movff	put_fat@val,postinc2
 10014  0027CA  C042  FFDE         	movff	put_fat@val+1,postinc2
 10015  0027CE  C043  FFDE         	movff	put_fat@val+2,postinc2
 10016  0027D2  C044  FFDE         	movff	put_fat@val+3,postinc2
 10017  0027D6                     l4375:
 10018                           
 10019                           ;ff.c: 917:    fs->wflag = 1;
 10020  0027D6  EE20 F004          	lfsr	2,4
 10021  0027DA  503B               	movf	put_fat@fs,w,c
 10022  0027DC  26D9               	addwf	fsr2l,f,c
 10023  0027DE  503C               	movf	put_fat@fs+1,w,c
 10024  0027E0  22DA               	addwfc	fsr2h,f,c
 10025  0027E2  0E01               	movlw	1
 10026  0027E4  6EDF               	movwf	indf2,c
 10027                           
 10028                           ;ff.c: 918:    break;
 10029  0027E6  D016               	goto	l4381
 10030  0027E8                     l4379:
 10031  0027E8  C03B  FFD9         	movff	put_fat@fs,fsr2l
 10032  0027EC  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
 10033  0027F0  50DF               	movf	indf2,w,c
 10034  0027F2  6E45               	movwf	??_put_fat& (0+255),c
 10035  0027F4  6A46               	clrf	(??_put_fat+1)& (0+255),c
 10036                           
 10037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10038                           ; Switch size 1, requested type "simple"
 10039                           ; Number of cases is 1, Range of values is 0 to 0
 10040                           ; switch strategies available:
 10041                           ; Name         Instructions Cycles
 10042                           ; simple_byte            4     3 (average)
 10043                           ;	Chosen strategy is simple_byte
 10044  0027F6  5046               	movf	??_put_fat+1,w,c
 10045  0027F8  0A00               	xorlw	0	; case 0
 10046  0027FA  A4D8               	btfss	status,2,c
 10047  0027FC  D610               	goto	u5130
 10048                           
 10049                           ; Switch size 1, requested type "simple"
 10050                           ; Number of cases is 3, Range of values is 1 to 3
 10051                           ; switch strategies available:
 10052                           ; Name         Instructions Cycles
 10053                           ; simple_byte           10     6 (average)
 10054                           ;	Chosen strategy is simple_byte
 10055  0027FE  5045               	movf	??_put_fat,w,c
 10056  002800  0A01               	xorlw	1	; case 1
 10057  002802  B4D8               	btfsc	status,2,c
 10058  002804  D60F               	goto	l342
 10059  002806  0A03               	xorlw	3	; case 2
 10060  002808  B4D8               	btfsc	status,2,c
 10061  00280A  D713               	goto	l4355
 10062  00280C  0A01               	xorlw	1	; case 3
 10063  00280E  B4D8               	btfsc	status,2,c
 10064  002810  D769               	goto	l4365
 10065  002812  D605               	goto	u5130
 10066  002814                     l4381:
 10067                           
 10068                           ;ff.c: 925:  return res;
 10069  002814  5053               	movf	put_fat@res,w,c
 10070  002816  0012               	return		;funcret
 10071  002818                     __end_of_put_fat:
 10072                           	opt callstack 0
 10073                           
 10074 ;; *************** function _get_fat *****************
 10075 ;; Defined at:
 10076 ;;		line 818 in file "ff.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;  fs              2   58[COMRAM] PTR struct .
 10079 ;;		 -> NULL(0), FatFs(558), 
 10080 ;;  clst            4   60[COMRAM] unsigned long 
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;  val             4   75[COMRAM] unsigned long 
 10083 ;;  bc              2   83[COMRAM] unsigned short 
 10084 ;;  p               2   81[COMRAM] PTR unsigned char 
 10085 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 10086 ;;  wc              2   79[COMRAM] unsigned short 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  4   58[COMRAM] unsigned long 
 10089 ;; Registers used:
 10090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10096 ;;      Params:         6       0       0       0       0       0       0       0       0
 10097 ;;      Locals:        12       0       0       0       0       0       0       0       0
 10098 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10099 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10100 ;;Total ram usage:       27 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    8
 10103 ;; This function calls:
 10104 ;;		_move_window
 10105 ;; This function is called by:
 10106 ;;		_remove_chain
 10107 ;;		_create_chain
 10108 ;;		_dir_sdi
 10109 ;;		_dir_next
 10110 ;;		_f_lseek
 10111 ;;		_f_read
 10112 ;; This function uses a non-reentrant model
 10113 ;;
 10114                           
 10115                           	psect	text25
 10116  002C1E                     __ptext25:
 10117                           	opt callstack 0
 10118  002C1E                     _get_fat:
 10119                           	opt callstack 19
 10120                           
 10121                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10122                           
 10123                           ;incstack = 0
 10124  002C1E  5040               	movf	get_fat@clst+3,w,c
 10125  002C20  103F               	iorwf	get_fat@clst+2,w,c
 10126  002C22  103E               	iorwf	get_fat@clst+1,w,c
 10127  002C24  E104               	bnz	u5010
 10128  002C26  0E02               	movlw	2
 10129  002C28  5C3D               	subwf	get_fat@clst,w,c
 10130  002C2A  A0D8               	btfss	status,0,c
 10131  002C2C  D010               	goto	u5020
 10132  002C2E                     u5010:
 10133  002C2E  EE20 F012          	lfsr	2,18
 10134  002C32  503B               	movf	get_fat@fs,w,c
 10135  002C34  26D9               	addwf	fsr2l,f,c
 10136  002C36  503C               	movf	get_fat@fs+1,w,c
 10137  002C38  22DA               	addwfc	fsr2h,f,c
 10138  002C3A  50DE               	movf	postinc2,w,c
 10139  002C3C  5C3D               	subwf	get_fat@clst,w,c
 10140  002C3E  50DE               	movf	postinc2,w,c
 10141  002C40  583E               	subwfb	get_fat@clst+1,w,c
 10142  002C42  50DE               	movf	postinc2,w,c
 10143  002C44  583F               	subwfb	get_fat@clst+2,w,c
 10144  002C46  50DE               	movf	postinc2,w,c
 10145  002C48  5840               	subwfb	get_fat@clst+3,w,c
 10146  002C4A  A0D8               	btfss	status,0,c
 10147  002C4C  D008               	goto	l316
 10148  002C4E                     u5020:
 10149                           
 10150                           ;ff.c: 829:   val = 1;
 10151  002C4E  0E01               	movlw	1
 10152  002C50  6E4C               	movwf	get_fat@val,c
 10153  002C52  0E00               	movlw	0
 10154  002C54  6E4D               	movwf	get_fat@val+1,c
 10155  002C56  0E00               	movlw	0
 10156  002C58  6E4E               	movwf	get_fat@val+2,c
 10157  002C5A  0E00               	movlw	0
 10158  002C5C  D190               	goto	L11
 10159  002C5E                     l316:
 10160                           
 10161                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10162  002C5E  684C               	setf	get_fat@val,c
 10163  002C60  684D               	setf	get_fat@val+1,c
 10164  002C62  684E               	setf	get_fat@val+2,c
 10165  002C64  684F               	setf	get_fat@val+3,c
 10166                           
 10167                           ;ff.c: 834:   switch (fs->fs_type) {
 10168  002C66  D18D               	goto	l4305
 10169  002C68                     l321:
 10170                           
 10171                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10172  002C68  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10173  002C6C  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10174  002C70  90D8               	bcf	status,0,c
 10175  002C72  3055               	rrcf	get_fat@bc+1,w,c
 10176  002C74  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10177  002C76  3054               	rrcf	get_fat@bc,w,c
 10178  002C78  6E41               	movwf	??_get_fat& (0+255),c
 10179  002C7A  5041               	movf	??_get_fat,w,c
 10180  002C7C  2654               	addwf	get_fat@bc,f,c
 10181  002C7E  5042               	movf	??_get_fat+1,w,c
 10182  002C80  2255               	addwfc	get_fat@bc+1,f,c
 10183                           
 10184                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10185  002C82  C03B  F030         	movff	get_fat@fs,move_window@fs
 10186  002C86  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10187  002C8A  EE20 F01E          	lfsr	2,30
 10188  002C8E  503B               	movf	get_fat@fs,w,c
 10189  002C90  26D9               	addwf	fsr2l,f,c
 10190  002C92  503C               	movf	get_fat@fs+1,w,c
 10191  002C94  22DA               	addwfc	fsr2h,f,c
 10192  002C96  CFDE F041          	movff	postinc2,??_get_fat
 10193  002C9A  CFDE F042          	movff	postinc2,??_get_fat+1
 10194  002C9E  CFDE F043          	movff	postinc2,??_get_fat+2
 10195  002CA2  CFDE F044          	movff	postinc2,??_get_fat+3
 10196  002CA6  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10197  002CAA  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10198  002CAE  0E09               	movlw	9
 10199  002CB0  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10200  002CB2                     u5035:
 10201  002CB2  90D8               	bcf	status,0,c
 10202  002CB4  3246               	rrcf	??_get_fat+5,f,c
 10203  002CB6  3245               	rrcf	??_get_fat+4,f,c
 10204  002CB8  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10205  002CBA  D7FB               	goto	u5035
 10206  002CBC  5045               	movf	??_get_fat+4,w,c
 10207  002CBE  2441               	addwf	??_get_fat,w,c
 10208  002CC0  6E32               	movwf	move_window@sector,c
 10209  002CC2  5046               	movf	??_get_fat+5,w,c
 10210  002CC4  2042               	addwfc	??_get_fat+1,w,c
 10211  002CC6  6E33               	movwf	move_window@sector+1,c
 10212  002CC8  0E00               	movlw	0
 10213  002CCA  2043               	addwfc	??_get_fat+2,w,c
 10214  002CCC  6E34               	movwf	move_window@sector+2,c
 10215  002CCE  0E00               	movlw	0
 10216  002CD0  2044               	addwfc	??_get_fat+3,w,c
 10217  002CD2  6E35               	movwf	move_window@sector+3,c
 10218  002CD4  EC39  F027         	call	_move_window	;wreg free
 10219  002CD8  0900               	iorlw	0
 10220  002CDA  A4D8               	btfss	status,2,c
 10221  002CDC  D168               	goto	l319
 10222                           
 10223                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10224  002CDE  0EFF               	movlw	255
 10225  002CE0  6E41               	movwf	??_get_fat& (0+255),c
 10226  002CE2  0E01               	movlw	1
 10227  002CE4  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10228  002CE6  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10229  002CEA  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10230  002CEE  5041               	movf	??_get_fat,w,c
 10231  002CF0  1643               	andwf	??_get_fat+2,f,c
 10232  002CF2  5042               	movf	??_get_fat+1,w,c
 10233  002CF4  1644               	andwf	??_get_fat+3,f,c
 10234  002CF6  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10235  002CFA  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10236  002CFE  5043               	movf	??_get_fat+2,w,c
 10237  002D00  2645               	addwf	??_get_fat+4,f,c
 10238  002D02  5044               	movf	??_get_fat+3,w,c
 10239  002D04  2246               	addwfc	??_get_fat+5,f,c
 10240  002D06  0E2E               	movlw	46
 10241  002D08  2445               	addwf	??_get_fat+4,w,c
 10242  002D0A  6ED9               	movwf	fsr2l,c
 10243  002D0C  0E00               	movlw	0
 10244  002D0E  2046               	addwfc	??_get_fat+5,w,c
 10245  002D10  6EDA               	movwf	fsr2h,c
 10246  002D12  50DF               	movf	indf2,w,c
 10247  002D14  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10248  002D16  5047               	movf	??_get_fat+6,w,c
 10249  002D18  6E50               	movwf	get_fat@wc,c
 10250  002D1A  6A51               	clrf	get_fat@wc+1,c
 10251  002D1C  4A54               	infsnz	get_fat@bc,f,c
 10252  002D1E  2A55               	incf	get_fat@bc+1,f,c
 10253                           
 10254                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10255  002D20  C03B  F030         	movff	get_fat@fs,move_window@fs
 10256  002D24  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10257  002D28  EE20 F01E          	lfsr	2,30
 10258  002D2C  503B               	movf	get_fat@fs,w,c
 10259  002D2E  26D9               	addwf	fsr2l,f,c
 10260  002D30  503C               	movf	get_fat@fs+1,w,c
 10261  002D32  22DA               	addwfc	fsr2h,f,c
 10262  002D34  CFDE F041          	movff	postinc2,??_get_fat
 10263  002D38  CFDE F042          	movff	postinc2,??_get_fat+1
 10264  002D3C  CFDE F043          	movff	postinc2,??_get_fat+2
 10265  002D40  CFDE F044          	movff	postinc2,??_get_fat+3
 10266  002D44  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10267  002D48  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10268  002D4C  0E09               	movlw	9
 10269  002D4E  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10270  002D50                     u5055:
 10271  002D50  90D8               	bcf	status,0,c
 10272  002D52  3246               	rrcf	??_get_fat+5,f,c
 10273  002D54  3245               	rrcf	??_get_fat+4,f,c
 10274  002D56  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10275  002D58  D7FB               	goto	u5055
 10276  002D5A  5045               	movf	??_get_fat+4,w,c
 10277  002D5C  2441               	addwf	??_get_fat,w,c
 10278  002D5E  6E32               	movwf	move_window@sector,c
 10279  002D60  5046               	movf	??_get_fat+5,w,c
 10280  002D62  2042               	addwfc	??_get_fat+1,w,c
 10281  002D64  6E33               	movwf	move_window@sector+1,c
 10282  002D66  0E00               	movlw	0
 10283  002D68  2043               	addwfc	??_get_fat+2,w,c
 10284  002D6A  6E34               	movwf	move_window@sector+2,c
 10285  002D6C  0E00               	movlw	0
 10286  002D6E  2044               	addwfc	??_get_fat+3,w,c
 10287  002D70  6E35               	movwf	move_window@sector+3,c
 10288  002D72  EC39  F027         	call	_move_window	;wreg free
 10289  002D76  0900               	iorlw	0
 10290  002D78  A4D8               	btfss	status,2,c
 10291  002D7A  D119               	goto	l319
 10292                           
 10293                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10294  002D7C  0EFF               	movlw	255
 10295  002D7E  6E41               	movwf	??_get_fat& (0+255),c
 10296  002D80  0E01               	movlw	1
 10297  002D82  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10298  002D84  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10299  002D88  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10300  002D8C  5041               	movf	??_get_fat,w,c
 10301  002D8E  1643               	andwf	??_get_fat+2,f,c
 10302  002D90  5042               	movf	??_get_fat+1,w,c
 10303  002D92  1644               	andwf	??_get_fat+3,f,c
 10304  002D94  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10305  002D98  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10306  002D9C  5043               	movf	??_get_fat+2,w,c
 10307  002D9E  2645               	addwf	??_get_fat+4,f,c
 10308  002DA0  5044               	movf	??_get_fat+3,w,c
 10309  002DA2  2246               	addwfc	??_get_fat+5,f,c
 10310  002DA4  0E2E               	movlw	46
 10311  002DA6  2445               	addwf	??_get_fat+4,w,c
 10312  002DA8  6ED9               	movwf	fsr2l,c
 10313  002DAA  0E00               	movlw	0
 10314  002DAC  2046               	addwfc	??_get_fat+5,w,c
 10315  002DAE  6EDA               	movwf	fsr2h,c
 10316  002DB0  50DF               	movf	indf2,w,c
 10317  002DB2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10318  002DB4  5047               	movf	??_get_fat+6,w,c
 10319  002DB6  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10320  002DB8  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10321  002DBA  5048               	movf	??_get_fat+7,w,c
 10322  002DBC  1250               	iorwf	get_fat@wc,f,c
 10323  002DBE  5049               	movf	??_get_fat+8,w,c
 10324  002DC0  1251               	iorwf	get_fat@wc+1,f,c
 10325                           
 10326                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10327  002DC2  B03D               	btfsc	get_fat@clst,0,c
 10328  002DC4  D007               	goto	l4283
 10329  002DC6  0EFF               	movlw	255
 10330  002DC8  1450               	andwf	get_fat@wc,w,c
 10331  002DCA  6E4A               	movwf	_get_fat$525,c
 10332  002DCC  0E0F               	movlw	15
 10333  002DCE  1451               	andwf	get_fat@wc+1,w,c
 10334  002DD0  6E4B               	movwf	_get_fat$525+1,c
 10335  002DD2  D00F               	goto	l4285
 10336  002DD4                     l4283:
 10337  002DD4  C050  F041         	movff	get_fat@wc,??_get_fat
 10338  002DD8  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10339  002DDC  0E04               	movlw	4
 10340  002DDE  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10341  002DE0                     u5085:
 10342  002DE0  90D8               	bcf	status,0,c
 10343  002DE2  3242               	rrcf	??_get_fat+1,f,c
 10344  002DE4  3241               	rrcf	??_get_fat,f,c
 10345  002DE6  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10346  002DE8  D7FB               	goto	u5085
 10347  002DEA  C041  F04A         	movff	??_get_fat,_get_fat$525
 10348  002DEE  C042  F04B         	movff	??_get_fat+1,_get_fat$525+1
 10349  002DF2                     l4285:
 10350  002DF2  C04A  F04C         	movff	_get_fat$525,get_fat@val
 10351  002DF6  C04B  F04D         	movff	_get_fat$525+1,get_fat@val+1
 10352  002DFA  D05B               	goto	L12
 10353  002DFC                     l4287:
 10354                           
 10355                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10356  002DFC  C03B  F030         	movff	get_fat@fs,move_window@fs
 10357  002E00  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10358  002E04  EE20 F01E          	lfsr	2,30
 10359  002E08  503B               	movf	get_fat@fs,w,c
 10360  002E0A  26D9               	addwf	fsr2l,f,c
 10361  002E0C  503C               	movf	get_fat@fs+1,w,c
 10362  002E0E  22DA               	addwfc	fsr2h,f,c
 10363  002E10  CFDE F041          	movff	postinc2,??_get_fat
 10364  002E14  CFDE F042          	movff	postinc2,??_get_fat+1
 10365  002E18  CFDE F043          	movff	postinc2,??_get_fat+2
 10366  002E1C  CFDE F044          	movff	postinc2,??_get_fat+3
 10367  002E20  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10368  002E24  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10369  002E28  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10370  002E2C  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10371  002E30  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10372  002E34  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10373  002E38  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10374  002E3C  6A48               	clrf	??_get_fat+7,c
 10375  002E3E  5041               	movf	??_get_fat,w,c
 10376  002E40  2445               	addwf	??_get_fat+4,w,c
 10377  002E42  6E32               	movwf	move_window@sector,c
 10378  002E44  5042               	movf	??_get_fat+1,w,c
 10379  002E46  2046               	addwfc	??_get_fat+5,w,c
 10380  002E48  6E33               	movwf	move_window@sector+1,c
 10381  002E4A  5043               	movf	??_get_fat+2,w,c
 10382  002E4C  2047               	addwfc	??_get_fat+6,w,c
 10383  002E4E  6E34               	movwf	move_window@sector+2,c
 10384  002E50  5044               	movf	??_get_fat+3,w,c
 10385  002E52  2048               	addwfc	??_get_fat+7,w,c
 10386  002E54  6E35               	movwf	move_window@sector+3,c
 10387  002E56  EC39  F027         	call	_move_window	;wreg free
 10388  002E5A  0900               	iorlw	0
 10389  002E5C  A4D8               	btfss	status,2,c
 10390  002E5E  D0A7               	goto	l319
 10391                           
 10392                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10393  002E60  0EFF               	movlw	255
 10394  002E62  6E41               	movwf	??_get_fat& (0+255),c
 10395  002E64  0E01               	movlw	1
 10396  002E66  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10397  002E68  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10398  002E6C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10399  002E70  90D8               	bcf	status,0,c
 10400  002E72  3643               	rlcf	??_get_fat+2,f,c
 10401  002E74  3644               	rlcf	??_get_fat+3,f,c
 10402  002E76  5041               	movf	??_get_fat,w,c
 10403  002E78  1643               	andwf	??_get_fat+2,f,c
 10404  002E7A  5042               	movf	??_get_fat+1,w,c
 10405  002E7C  1644               	andwf	??_get_fat+3,f,c
 10406  002E7E  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10407  002E82  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10408  002E86  5043               	movf	??_get_fat+2,w,c
 10409  002E88  2645               	addwf	??_get_fat+4,f,c
 10410  002E8A  5044               	movf	??_get_fat+3,w,c
 10411  002E8C  2246               	addwfc	??_get_fat+5,f,c
 10412  002E8E  0E2E               	movlw	46
 10413  002E90  2445               	addwf	??_get_fat+4,w,c
 10414  002E92  6E52               	movwf	get_fat@p,c
 10415  002E94  0E00               	movlw	0
 10416  002E96  2046               	addwfc	??_get_fat+5,w,c
 10417  002E98  6E53               	movwf	get_fat@p+1,c
 10418                           
 10419                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10420  002E9A  C052  FFD9         	movff	get_fat@p,fsr2l
 10421  002E9E  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10422  002EA2  CFDE F041          	movff	postinc2,??_get_fat
 10423  002EA6  CFDD F042          	movff	postdec2,??_get_fat+1
 10424  002EAA  C041  F04C         	movff	??_get_fat,get_fat@val
 10425  002EAE  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10426  002EB2                     L12:
 10427  002EB2  6A4E               	clrf	get_fat@val+2,c
 10428  002EB4  6A4F               	clrf	get_fat@val+3,c
 10429                           
 10430                           ;ff.c: 848:    break;
 10431  002EB6  D07B               	goto	l319
 10432  002EB8                     l4295:
 10433                           
 10434                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10435  002EB8  C03B  F030         	movff	get_fat@fs,move_window@fs
 10436  002EBC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10437  002EC0  EE20 F01E          	lfsr	2,30
 10438  002EC4  503B               	movf	get_fat@fs,w,c
 10439  002EC6  26D9               	addwf	fsr2l,f,c
 10440  002EC8  503C               	movf	get_fat@fs+1,w,c
 10441  002ECA  22DA               	addwfc	fsr2h,f,c
 10442  002ECC  CFDE F041          	movff	postinc2,??_get_fat
 10443  002ED0  CFDE F042          	movff	postinc2,??_get_fat+1
 10444  002ED4  CFDE F043          	movff	postinc2,??_get_fat+2
 10445  002ED8  CFDE F044          	movff	postinc2,??_get_fat+3
 10446  002EDC  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10447  002EE0  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10448  002EE4  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10449  002EE8  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10450  002EEC  0E08               	movlw	8
 10451  002EEE  D005               	goto	u5100
 10452  002EF0                     u5105:
 10453  002EF0  90D8               	bcf	status,0,c
 10454  002EF2  3248               	rrcf	??_get_fat+7,f,c
 10455  002EF4  3247               	rrcf	??_get_fat+6,f,c
 10456  002EF6  3246               	rrcf	??_get_fat+5,f,c
 10457  002EF8  3245               	rrcf	??_get_fat+4,f,c
 10458  002EFA                     u5100:
 10459  002EFA  2EE8               	decfsz	wreg,f,c
 10460  002EFC  D7F9               	goto	u5105
 10461  002EFE  5041               	movf	??_get_fat,w,c
 10462  002F00  2445               	addwf	??_get_fat+4,w,c
 10463  002F02  6E32               	movwf	move_window@sector,c
 10464  002F04  5042               	movf	??_get_fat+1,w,c
 10465  002F06  2046               	addwfc	??_get_fat+5,w,c
 10466  002F08  6E33               	movwf	move_window@sector+1,c
 10467  002F0A  5043               	movf	??_get_fat+2,w,c
 10468  002F0C  2047               	addwfc	??_get_fat+6,w,c
 10469  002F0E  6E34               	movwf	move_window@sector+2,c
 10470  002F10  5044               	movf	??_get_fat+3,w,c
 10471  002F12  2048               	addwfc	??_get_fat+7,w,c
 10472  002F14  6E35               	movwf	move_window@sector+3,c
 10473  002F16  EC39  F027         	call	_move_window	;wreg free
 10474  002F1A  0900               	iorlw	0
 10475  002F1C  A4D8               	btfss	status,2,c
 10476  002F1E  D047               	goto	l319
 10477                           
 10478                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10479  002F20  0EFF               	movlw	255
 10480  002F22  6E41               	movwf	??_get_fat& (0+255),c
 10481  002F24  0E01               	movlw	1
 10482  002F26  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10483  002F28  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10484  002F2C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10485  002F30  90D8               	bcf	status,0,c
 10486  002F32  3643               	rlcf	??_get_fat+2,f,c
 10487  002F34  3644               	rlcf	??_get_fat+3,f,c
 10488  002F36  90D8               	bcf	status,0,c
 10489  002F38  3643               	rlcf	??_get_fat+2,f,c
 10490  002F3A  3644               	rlcf	??_get_fat+3,f,c
 10491  002F3C  5041               	movf	??_get_fat,w,c
 10492  002F3E  1643               	andwf	??_get_fat+2,f,c
 10493  002F40  5042               	movf	??_get_fat+1,w,c
 10494  002F42  1644               	andwf	??_get_fat+3,f,c
 10495  002F44  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10496  002F48  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10497  002F4C  5043               	movf	??_get_fat+2,w,c
 10498  002F4E  2645               	addwf	??_get_fat+4,f,c
 10499  002F50  5044               	movf	??_get_fat+3,w,c
 10500  002F52  2246               	addwfc	??_get_fat+5,f,c
 10501  002F54  0E2E               	movlw	46
 10502  002F56  2445               	addwf	??_get_fat+4,w,c
 10503  002F58  6E52               	movwf	get_fat@p,c
 10504  002F5A  0E00               	movlw	0
 10505  002F5C  2046               	addwfc	??_get_fat+5,w,c
 10506  002F5E  6E53               	movwf	get_fat@p+1,c
 10507                           
 10508                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10509  002F60  C052  FFD9         	movff	get_fat@p,fsr2l
 10510  002F64  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10511  002F68  0EFF               	movlw	255
 10512  002F6A  14DE               	andwf	postinc2,w,c
 10513  002F6C  6E4C               	movwf	get_fat@val,c
 10514  002F6E  0EFF               	movlw	255
 10515  002F70  14DE               	andwf	postinc2,w,c
 10516  002F72  6E4D               	movwf	get_fat@val+1,c
 10517  002F74  0EFF               	movlw	255
 10518  002F76  14DE               	andwf	postinc2,w,c
 10519  002F78  6E4E               	movwf	get_fat@val+2,c
 10520  002F7A  0E0F               	movlw	15
 10521  002F7C  14DE               	andwf	postinc2,w,c
 10522  002F7E                     L11:
 10523  002F7E  6E4F               	movwf	get_fat@val+3,c
 10524                           
 10525                           ;ff.c: 854:    break;
 10526  002F80  D016               	goto	l319
 10527  002F82                     l4305:
 10528  002F82  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10529  002F86  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10530  002F8A  50DF               	movf	indf2,w,c
 10531  002F8C  6E41               	movwf	??_get_fat& (0+255),c
 10532  002F8E  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10533                           
 10534                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10535                           ; Switch size 1, requested type "simple"
 10536                           ; Number of cases is 1, Range of values is 0 to 0
 10537                           ; switch strategies available:
 10538                           ; Name         Instructions Cycles
 10539                           ; simple_byte            4     3 (average)
 10540                           ;	Chosen strategy is simple_byte
 10541  002F90  5042               	movf	??_get_fat+1,w,c
 10542  002F92  0A00               	xorlw	0	; case 0
 10543  002F94  A4D8               	btfss	status,2,c
 10544  002F96  D65B               	goto	u5020
 10545                           
 10546                           ; Switch size 1, requested type "simple"
 10547                           ; Number of cases is 3, Range of values is 1 to 3
 10548                           ; switch strategies available:
 10549                           ; Name         Instructions Cycles
 10550                           ; simple_byte           10     6 (average)
 10551                           ;	Chosen strategy is simple_byte
 10552  002F98  5041               	movf	??_get_fat,w,c
 10553  002F9A  0A01               	xorlw	1	; case 1
 10554  002F9C  B4D8               	btfsc	status,2,c
 10555  002F9E  D664               	goto	l321
 10556  002FA0  0A03               	xorlw	3	; case 2
 10557  002FA2  B4D8               	btfsc	status,2,c
 10558  002FA4  D72B               	goto	l4287
 10559  002FA6  0A01               	xorlw	1	; case 3
 10560  002FA8  B4D8               	btfsc	status,2,c
 10561  002FAA  D786               	goto	l4295
 10562  002FAC  D650               	goto	u5020
 10563  002FAE                     l319:
 10564                           
 10565                           ;ff.c: 861:  return val;
 10566  002FAE  C04C  F03B         	movff	get_fat@val,?_get_fat
 10567  002FB2  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10568  002FB6  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10569  002FBA  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10570  002FBE  0012               	return		;funcret
 10571  002FC0                     __end_of_get_fat:
 10572                           	opt callstack 0
 10573                           
 10574 ;; *************** function _clust2sect *****************
 10575 ;; Defined at:
 10576 ;;		line 800 in file "ff.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;  fs              2   12[COMRAM] PTR struct .
 10579 ;;		 -> NULL(0), FatFs(558), 
 10580 ;;  clst            4   14[COMRAM] unsigned long 
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;		None
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  4   12[COMRAM] unsigned long 
 10585 ;; Registers used:
 10586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10587 ;; Tracked objects:
 10588 ;;		On entry : 0/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10592 ;;      Params:         6       0       0       0       0       0       0       0       0
 10593 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10594 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10595 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10596 ;;Total ram usage:       11 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    1
 10599 ;; This function calls:
 10600 ;;		___lmul
 10601 ;; This function is called by:
 10602 ;;		_dir_sdi
 10603 ;;		_dir_next
 10604 ;;		_f_write
 10605 ;;		_f_lseek
 10606 ;;		_f_read
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	text26
 10611  004D08                     __ptext26:
 10612                           	opt callstack 0
 10613  004D08                     _clust2sect:
 10614                           	opt callstack 27
 10615                           
 10616                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10617                           
 10618                           ;incstack = 0
 10619  004D08  0E02               	movlw	2
 10620  004D0A  5E0F               	subwf	clust2sect@clst,f,c
 10621  004D0C  0E00               	movlw	0
 10622  004D0E  5A10               	subwfb	clust2sect@clst+1,f,c
 10623  004D10  5A11               	subwfb	clust2sect@clst+2,f,c
 10624  004D12  5A12               	subwfb	clust2sect@clst+3,f,c
 10625                           
 10626                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10627  004D14  EE20 F012          	lfsr	2,18
 10628  004D18  500D               	movf	clust2sect@fs,w,c
 10629  004D1A  26D9               	addwf	fsr2l,f,c
 10630  004D1C  500E               	movf	clust2sect@fs+1,w,c
 10631  004D1E  22DA               	addwfc	fsr2h,f,c
 10632  004D20  0EFE               	movlw	254
 10633  004D22  24DE               	addwf	postinc2,w,c
 10634  004D24  6E13               	movwf	??_clust2sect& (0+255),c
 10635  004D26  0EFF               	movlw	255
 10636  004D28  20DE               	addwfc	postinc2,w,c
 10637  004D2A  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10638  004D2C  0EFF               	movlw	255
 10639  004D2E  20DE               	addwfc	postinc2,w,c
 10640  004D30  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10641  004D32  0EFF               	movlw	255
 10642  004D34  20DE               	addwfc	postinc2,w,c
 10643  004D36  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10644  004D38  5013               	movf	??_clust2sect,w,c
 10645  004D3A  5C0F               	subwf	clust2sect@clst,w,c
 10646  004D3C  5014               	movf	??_clust2sect+1,w,c
 10647  004D3E  5810               	subwfb	clust2sect@clst+1,w,c
 10648  004D40  5015               	movf	??_clust2sect+2,w,c
 10649  004D42  5811               	subwfb	clust2sect@clst+2,w,c
 10650  004D44  5016               	movf	??_clust2sect+3,w,c
 10651  004D46  5812               	subwfb	clust2sect@clst+3,w,c
 10652  004D48  A0D8               	btfss	status,0,c
 10653  004D4A  D009               	goto	l4415
 10654  004D4C  0E00               	movlw	0
 10655  004D4E  6E0D               	movwf	?_clust2sect,c
 10656  004D50  0E00               	movlw	0
 10657  004D52  6E0E               	movwf	?_clust2sect+1,c
 10658  004D54  0E00               	movlw	0
 10659  004D56  6E0F               	movwf	?_clust2sect+2,c
 10660  004D58  0E00               	movlw	0
 10661  004D5A  6E10               	movwf	?_clust2sect+3,c
 10662  004D5C  0012               	return	
 10663  004D5E                     l4415:
 10664                           
 10665                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10666  004D5E  EE20 F026          	lfsr	2,38
 10667  004D62  500D               	movf	clust2sect@fs,w,c
 10668  004D64  26D9               	addwf	fsr2l,f,c
 10669  004D66  500E               	movf	clust2sect@fs+1,w,c
 10670  004D68  22DA               	addwfc	fsr2h,f,c
 10671  004D6A  CFDE F013          	movff	postinc2,??_clust2sect
 10672  004D6E  CFDE F014          	movff	postinc2,??_clust2sect+1
 10673  004D72  CFDE F015          	movff	postinc2,??_clust2sect+2
 10674  004D76  CFDE F016          	movff	postinc2,??_clust2sect+3
 10675  004D7A  EE20 F002          	lfsr	2,2
 10676  004D7E  500D               	movf	clust2sect@fs,w,c
 10677  004D80  26D9               	addwf	fsr2l,f,c
 10678  004D82  500E               	movf	clust2sect@fs+1,w,c
 10679  004D84  22DA               	addwfc	fsr2h,f,c
 10680  004D86  50DF               	movf	indf2,w,c
 10681  004D88  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10682  004D8A  5017               	movf	??_clust2sect+4,w,c
 10683  004D8C  6E01               	movwf	___lmul@multiplier,c
 10684  004D8E  6A02               	clrf	___lmul@multiplier+1,c
 10685  004D90  6A03               	clrf	___lmul@multiplier+2,c
 10686  004D92  6A04               	clrf	___lmul@multiplier+3,c
 10687  004D94  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10688  004D98  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10689  004D9C  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10690  004DA0  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10691  004DA4  EC6C  F029         	call	___lmul	;wreg free
 10692  004DA8  5013               	movf	??_clust2sect,w,c
 10693  004DAA  2401               	addwf	?___lmul,w,c
 10694  004DAC  6E0D               	movwf	?_clust2sect,c
 10695  004DAE  5014               	movf	??_clust2sect+1,w,c
 10696  004DB0  2002               	addwfc	?___lmul+1,w,c
 10697  004DB2  6E0E               	movwf	?_clust2sect+1,c
 10698  004DB4  5015               	movf	??_clust2sect+2,w,c
 10699  004DB6  2003               	addwfc	?___lmul+2,w,c
 10700  004DB8  6E0F               	movwf	?_clust2sect+2,c
 10701  004DBA  5016               	movf	??_clust2sect+3,w,c
 10702  004DBC  2004               	addwfc	?___lmul+3,w,c
 10703  004DBE  6E10               	movwf	?_clust2sect+3,c
 10704  004DC0  0012               	return		;funcret
 10705  004DC2                     __end_of_clust2sect:
 10706                           	opt callstack 0
 10707                           
 10708 ;; *************** function ___lmul *****************
 10709 ;; Defined at:
 10710 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10711 ;; Parameters:    Size  Location     Type
 10712 ;;  multiplier      4    0[COMRAM] unsigned long 
 10713 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  product         4    8[COMRAM] unsigned long 
 10716 ;; Return value:  Size  Location     Type
 10717 ;;                  4    0[COMRAM] unsigned long 
 10718 ;; Registers used:
 10719 ;;		wreg, status,2, status,0
 10720 ;; Tracked objects:
 10721 ;;		On entry : 0/0
 10722 ;;		On exit  : 0/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10725 ;;      Params:         8       0       0       0       0       0       0       0       0
 10726 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10727 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10728 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10729 ;;Total ram usage:       12 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; This function calls:
 10732 ;;		Nothing
 10733 ;; This function is called by:
 10734 ;;		_clust2sect
 10735 ;;		_find_volume
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text27
 10740  0052D8                     __ptext27:
 10741                           	opt callstack 0
 10742  0052D8                     ___lmul:
 10743                           	opt callstack 27
 10744                           
 10745                           ;incstack = 0
 10746  0052D8  0E00               	movlw	0
 10747  0052DA  6E09               	movwf	___lmul@product,c
 10748  0052DC  0E00               	movlw	0
 10749  0052DE  6E0A               	movwf	___lmul@product+1,c
 10750  0052E0  0E00               	movlw	0
 10751  0052E2  6E0B               	movwf	___lmul@product+2,c
 10752  0052E4  0E00               	movlw	0
 10753  0052E6  6E0C               	movwf	___lmul@product+3,c
 10754  0052E8                     l4391:
 10755  0052E8  A001               	btfss	___lmul@multiplier,0,c
 10756  0052EA  D008               	goto	l4395
 10757  0052EC  5005               	movf	___lmul@multiplicand,w,c
 10758  0052EE  2609               	addwf	___lmul@product,f,c
 10759  0052F0  5006               	movf	___lmul@multiplicand+1,w,c
 10760  0052F2  220A               	addwfc	___lmul@product+1,f,c
 10761  0052F4  5007               	movf	___lmul@multiplicand+2,w,c
 10762  0052F6  220B               	addwfc	___lmul@product+2,f,c
 10763  0052F8  5008               	movf	___lmul@multiplicand+3,w,c
 10764  0052FA  220C               	addwfc	___lmul@product+3,f,c
 10765  0052FC                     l4395:
 10766  0052FC  90D8               	bcf	status,0,c
 10767  0052FE  3605               	rlcf	___lmul@multiplicand,f,c
 10768  005300  3606               	rlcf	___lmul@multiplicand+1,f,c
 10769  005302  3607               	rlcf	___lmul@multiplicand+2,f,c
 10770  005304  3608               	rlcf	___lmul@multiplicand+3,f,c
 10771  005306  90D8               	bcf	status,0,c
 10772  005308  3204               	rrcf	___lmul@multiplier+3,f,c
 10773  00530A  3203               	rrcf	___lmul@multiplier+2,f,c
 10774  00530C  3202               	rrcf	___lmul@multiplier+1,f,c
 10775  00530E  3201               	rrcf	___lmul@multiplier,f,c
 10776  005310  5001               	movf	___lmul@multiplier,w,c
 10777  005312  1002               	iorwf	___lmul@multiplier+1,w,c
 10778  005314  1003               	iorwf	___lmul@multiplier+2,w,c
 10779  005316  1004               	iorwf	___lmul@multiplier+3,w,c
 10780  005318  A4D8               	btfss	status,2,c
 10781  00531A  D7E6               	goto	l4391
 10782  00531C  C009  F001         	movff	___lmul@product,?___lmul
 10783  005320  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10784  005324  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10785  005328  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10786  00532C  0012               	return		;funcret
 10787  00532E                     __end_of___lmul:
 10788                           	opt callstack 0
 10789                           
 10790 ;; *************** function ___lldiv *****************
 10791 ;; Defined at:
 10792 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;  dividend        4    0[COMRAM] unsigned long 
 10795 ;;  divisor         4    4[COMRAM] unsigned long 
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;  quotient        4    8[COMRAM] unsigned long 
 10798 ;;  counter         1   12[COMRAM] unsigned char 
 10799 ;; Return value:  Size  Location     Type
 10800 ;;                  4    0[COMRAM] unsigned long 
 10801 ;; Registers used:
 10802 ;;		wreg, status,2, status,0
 10803 ;; Tracked objects:
 10804 ;;		On entry : 0/0
 10805 ;;		On exit  : 0/0
 10806 ;;		Unchanged: 0/0
 10807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10808 ;;      Params:         8       0       0       0       0       0       0       0       0
 10809 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10810 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10811 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10812 ;;Total ram usage:       13 bytes
 10813 ;; Hardware stack levels used:    1
 10814 ;; This function calls:
 10815 ;;		Nothing
 10816 ;; This function is called by:
 10817 ;;		_find_volume
 10818 ;;		_f_lseek
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           	psect	text28
 10823  004FAC                     __ptext28:
 10824                           	opt callstack 0
 10825  004FAC                     ___lldiv:
 10826                           	opt callstack 27
 10827                           
 10828                           ;incstack = 0
 10829  004FAC  0E00               	movlw	0
 10830  004FAE  6E09               	movwf	___lldiv@quotient,c
 10831  004FB0  0E00               	movlw	0
 10832  004FB2  6E0A               	movwf	___lldiv@quotient+1,c
 10833  004FB4  0E00               	movlw	0
 10834  004FB6  6E0B               	movwf	___lldiv@quotient+2,c
 10835  004FB8  0E00               	movlw	0
 10836  004FBA  6E0C               	movwf	___lldiv@quotient+3,c
 10837  004FBC  5005               	movf	___lldiv@divisor,w,c
 10838  004FBE  1006               	iorwf	___lldiv@divisor+1,w,c
 10839  004FC0  1007               	iorwf	___lldiv@divisor+2,w,c
 10840  004FC2  1008               	iorwf	___lldiv@divisor+3,w,c
 10841  004FC4  B4D8               	btfsc	status,2,c
 10842  004FC6  D02A               	goto	l875
 10843  004FC8  0E01               	movlw	1
 10844  004FCA  6E0D               	movwf	___lldiv@counter,c
 10845  004FCC  D006               	goto	l5293
 10846  004FCE                     l5291:
 10847  004FCE  90D8               	bcf	status,0,c
 10848  004FD0  3605               	rlcf	___lldiv@divisor,f,c
 10849  004FD2  3606               	rlcf	___lldiv@divisor+1,f,c
 10850  004FD4  3607               	rlcf	___lldiv@divisor+2,f,c
 10851  004FD6  3608               	rlcf	___lldiv@divisor+3,f,c
 10852  004FD8  2A0D               	incf	___lldiv@counter,f,c
 10853  004FDA                     l5293:
 10854  004FDA  AE08               	btfss	___lldiv@divisor+3,7,c
 10855  004FDC  D7F8               	goto	l5291
 10856  004FDE                     u7000:
 10857  004FDE  90D8               	bcf	status,0,c
 10858  004FE0  3609               	rlcf	___lldiv@quotient,f,c
 10859  004FE2  360A               	rlcf	___lldiv@quotient+1,f,c
 10860  004FE4  360B               	rlcf	___lldiv@quotient+2,f,c
 10861  004FE6  360C               	rlcf	___lldiv@quotient+3,f,c
 10862  004FE8  5005               	movf	___lldiv@divisor,w,c
 10863  004FEA  5C01               	subwf	___lldiv@dividend,w,c
 10864  004FEC  5006               	movf	___lldiv@divisor+1,w,c
 10865  004FEE  5802               	subwfb	___lldiv@dividend+1,w,c
 10866  004FF0  5007               	movf	___lldiv@divisor+2,w,c
 10867  004FF2  5803               	subwfb	___lldiv@dividend+2,w,c
 10868  004FF4  5008               	movf	___lldiv@divisor+3,w,c
 10869  004FF6  5804               	subwfb	___lldiv@dividend+3,w,c
 10870  004FF8  A0D8               	btfss	status,0,c
 10871  004FFA  D009               	goto	l5303
 10872  004FFC  5005               	movf	___lldiv@divisor,w,c
 10873  004FFE  5E01               	subwf	___lldiv@dividend,f,c
 10874  005000  5006               	movf	___lldiv@divisor+1,w,c
 10875  005002  5A02               	subwfb	___lldiv@dividend+1,f,c
 10876  005004  5007               	movf	___lldiv@divisor+2,w,c
 10877  005006  5A03               	subwfb	___lldiv@dividend+2,f,c
 10878  005008  5008               	movf	___lldiv@divisor+3,w,c
 10879  00500A  5A04               	subwfb	___lldiv@dividend+3,f,c
 10880  00500C  8009               	bsf	___lldiv@quotient,0,c
 10881  00500E                     l5303:
 10882  00500E  90D8               	bcf	status,0,c
 10883  005010  3208               	rrcf	___lldiv@divisor+3,f,c
 10884  005012  3207               	rrcf	___lldiv@divisor+2,f,c
 10885  005014  3206               	rrcf	___lldiv@divisor+1,f,c
 10886  005016  3205               	rrcf	___lldiv@divisor,f,c
 10887  005018  2E0D               	decfsz	___lldiv@counter,f,c
 10888  00501A  D7E1               	goto	u7000
 10889  00501C                     l875:
 10890  00501C  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10891  005020  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10892  005024  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10893  005028  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10894  00502C  0012               	return		;funcret
 10895  00502E                     __end_of___lldiv:
 10896                           	opt callstack 0
 10897                           
 10898 ;; *************** function _f_close *****************
 10899 ;; Defined at:
 10900 ;;		line 2861 in file "ff.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;  fp              2   77[COMRAM] PTR struct .
 10903 ;;		 -> Fil(32), 
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;  res             1   79[COMRAM] enum E93
 10906 ;; Return value:  Size  Location     Type
 10907 ;;                  1    wreg      enum E4918
 10908 ;; Registers used:
 10909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10910 ;; Tracked objects:
 10911 ;;		On entry : 0/0
 10912 ;;		On exit  : 0/0
 10913 ;;		Unchanged: 0/0
 10914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10915 ;;      Params:         2       0       0       0       0       0       0       0       0
 10916 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10917 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10918 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10919 ;;Total ram usage:        3 bytes
 10920 ;; Hardware stack levels used:    1
 10921 ;; Hardware stack levels required when called:    9
 10922 ;; This function calls:
 10923 ;;		_f_sync
 10924 ;;		_validate
 10925 ;; This function is called by:
 10926 ;;		_guardar
 10927 ;; This function uses a non-reentrant model
 10928 ;;
 10929                           
 10930                           	psect	text29
 10931  00544A                     __ptext29:
 10932                           	opt callstack 0
 10933  00544A                     _f_close:
 10934                           	opt callstack 20
 10935                           
 10936                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10937                           
 10938                           ;incstack = 0
 10939  00544A  C04E  F045         	movff	f_close@fp,f_sync@fp
 10940  00544E  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 10941  005452  EC5A  F022         	call	_f_sync	;wreg free
 10942  005456  6E50               	movwf	f_close@res,c
 10943                           
 10944                           ;ff.c: 2870:  if (res == FR_OK)
 10945  005458  5050               	movf	f_close@res,w,c
 10946  00545A  A4D8               	btfss	status,2,c
 10947  00545C  0012               	return	
 10948                           
 10949                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10950  00545E  C04E  F002         	movff	f_close@fp,validate@obj
 10951  005462  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 10952  005466  EC8C  F027         	call	_validate	;wreg free
 10953  00546A  6E50               	movwf	f_close@res,c
 10954                           
 10955                           ;ff.c: 2874:   if (res == FR_OK) {
 10956  00546C  5050               	movf	f_close@res,w,c
 10957  00546E  A4D8               	btfss	status,2,c
 10958  005470  0012               	return	
 10959                           
 10960                           ;ff.c: 2882:     fp->fs = 0;
 10961  005472  C04E  FFD9         	movff	f_close@fp,fsr2l
 10962  005476  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 10963  00547A  0E00               	movlw	0
 10964  00547C  6EDE               	movwf	postinc2,c
 10965  00547E  0E00               	movlw	0
 10966  005480  6EDD               	movwf	postdec2,c
 10967  005482  0012               	return		;funcret
 10968  005484                     __end_of_f_close:
 10969                           	opt callstack 0
 10970                           
 10971 ;; *************** function _f_sync *****************
 10972 ;; Defined at:
 10973 ;;		line 2813 in file "ff.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;  fp              2   68[COMRAM] PTR struct .
 10976 ;;		 -> Fil(32), 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;  tm              4    0        unsigned long 
 10979 ;;  dir             2   75[COMRAM] PTR unsigned char 
 10980 ;;		 -> NULL(0), FatFs(558), 
 10981 ;;  res             1   74[COMRAM] enum E93
 10982 ;; Return value:  Size  Location     Type
 10983 ;;                  1    wreg      enum E93
 10984 ;; Registers used:
 10985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10986 ;; Tracked objects:
 10987 ;;		On entry : 0/0
 10988 ;;		On exit  : 0/0
 10989 ;;		Unchanged: 0/0
 10990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10991 ;;      Params:         2       0       0       0       0       0       0       0       0
 10992 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10993 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10994 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10995 ;;Total ram usage:        9 bytes
 10996 ;; Hardware stack levels used:    1
 10997 ;; Hardware stack levels required when called:    8
 10998 ;; This function calls:
 10999 ;;		_move_window
 11000 ;;		_st_clust
 11001 ;;		_sync_fs
 11002 ;;		_validate
 11003 ;; This function is called by:
 11004 ;;		_f_close
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text30
 11009  0044B4                     __ptext30:
 11010                           	opt callstack 0
 11011  0044B4                     _f_sync:
 11012                           	opt callstack 20
 11013                           
 11014                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 11015                           
 11016                           ;incstack = 0
 11017  0044B4  C045  F002         	movff	f_sync@fp,validate@obj
 11018  0044B8  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 11019  0044BC  EC8C  F027         	call	_validate	;wreg free
 11020  0044C0  6E4B               	movwf	f_sync@res,c
 11021                           
 11022                           ;ff.c: 2823:  if (res == FR_OK) {
 11023  0044C2  504B               	movf	f_sync@res,w,c
 11024  0044C4  A4D8               	btfss	status,2,c
 11025  0044C6  D095               	goto	l5707
 11026                           
 11027                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 11028  0044C8  EE20 F004          	lfsr	2,4
 11029  0044CC  5045               	movf	f_sync@fp,w,c
 11030  0044CE  26D9               	addwf	fsr2l,f,c
 11031  0044D0  5046               	movf	f_sync@fp+1,w,c
 11032  0044D2  22DA               	addwfc	fsr2h,f,c
 11033  0044D4  AADF               	btfss	indf2,5,c
 11034  0044D6  D08D               	goto	l5707
 11035                           
 11036                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 11037  0044D8  C045  FFD9         	movff	f_sync@fp,fsr2l
 11038  0044DC  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11039  0044E0  CFDE F030          	movff	postinc2,move_window@fs
 11040  0044E4  CFDD F031          	movff	postdec2,move_window@fs+1
 11041  0044E8  EE20 F01A          	lfsr	2,26
 11042  0044EC  5045               	movf	f_sync@fp,w,c
 11043  0044EE  26D9               	addwf	fsr2l,f,c
 11044  0044F0  5046               	movf	f_sync@fp+1,w,c
 11045  0044F2  22DA               	addwfc	fsr2h,f,c
 11046  0044F4  CFDE F032          	movff	postinc2,move_window@sector
 11047  0044F8  CFDE F033          	movff	postinc2,move_window@sector+1
 11048  0044FC  CFDE F034          	movff	postinc2,move_window@sector+2
 11049  004500  CFDE F035          	movff	postinc2,move_window@sector+3
 11050  004504  EC39  F027         	call	_move_window	;wreg free
 11051  004508  6E4B               	movwf	f_sync@res,c
 11052                           
 11053                           ;ff.c: 2834:    if (res == FR_OK) {
 11054  00450A  504B               	movf	f_sync@res,w,c
 11055  00450C  A4D8               	btfss	status,2,c
 11056  00450E  D071               	goto	l5707
 11057                           
 11058                           ;ff.c: 2835:     dir = fp->dir_ptr;
 11059  004510  EE20 F01E          	lfsr	2,30
 11060  004514  5045               	movf	f_sync@fp,w,c
 11061  004516  26D9               	addwf	fsr2l,f,c
 11062  004518  5046               	movf	f_sync@fp+1,w,c
 11063  00451A  22DA               	addwfc	fsr2h,f,c
 11064  00451C  CFDE F04C          	movff	postinc2,f_sync@dir
 11065  004520  CFDD F04D          	movff	postdec2,f_sync@dir+1
 11066                           
 11067                           ;ff.c: 2836:     dir[11] |= 0x20;
 11068  004524  EE20 F00B          	lfsr	2,11
 11069  004528  504C               	movf	f_sync@dir,w,c
 11070  00452A  26D9               	addwf	fsr2l,f,c
 11071  00452C  504D               	movf	f_sync@dir+1,w,c
 11072  00452E  22DA               	addwfc	fsr2h,f,c
 11073  004530  0E00               	movlw	0
 11074  004532  8ADB               	bsf	plusw2,5,c
 11075                           
 11076                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11077  004534  EE20 F00A          	lfsr	2,10
 11078  004538  5045               	movf	f_sync@fp,w,c
 11079  00453A  26D9               	addwf	fsr2l,f,c
 11080  00453C  5046               	movf	f_sync@fp+1,w,c
 11081  00453E  22DA               	addwfc	fsr2h,f,c
 11082  004540  EE10 F01C          	lfsr	1,28
 11083  004544  504C               	movf	f_sync@dir,w,c
 11084  004546  26E1               	addwf	fsr1l,f,c
 11085  004548  504D               	movf	f_sync@dir+1,w,c
 11086  00454A  22E2               	addwfc	fsr1h,f,c
 11087  00454C  CFDE FFE6          	movff	postinc2,postinc1
 11088  004550  CFDE FFE6          	movff	postinc2,postinc1
 11089  004554  CFDE FFE6          	movff	postinc2,postinc1
 11090  004558  CFDE FFE6          	movff	postinc2,postinc1
 11091                           
 11092                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11093  00455C  C04C  F001         	movff	f_sync@dir,st_clust@dir
 11094  004560  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11095  004564  EE20 F00E          	lfsr	2,14
 11096  004568  5045               	movf	f_sync@fp,w,c
 11097  00456A  26D9               	addwf	fsr2l,f,c
 11098  00456C  5046               	movf	f_sync@fp+1,w,c
 11099  00456E  22DA               	addwfc	fsr2h,f,c
 11100  004570  CFDE F003          	movff	postinc2,st_clust@cl
 11101  004574  CFDE F004          	movff	postinc2,st_clust@cl+1
 11102  004578  CFDE F005          	movff	postinc2,st_clust@cl+2
 11103  00457C  CFDE F006          	movff	postinc2,st_clust@cl+3
 11104  004580  EC74  F02A         	call	_st_clust	;wreg free
 11105                           
 11106                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11107  004584  EE20 F016          	lfsr	2,22
 11108  004588  504C               	movf	f_sync@dir,w,c
 11109  00458A  26D9               	addwf	fsr2l,f,c
 11110  00458C  504D               	movf	f_sync@dir+1,w,c
 11111  00458E  22DA               	addwfc	fsr2h,f,c
 11112  004590  0E00               	movlw	0
 11113  004592  6EDE               	movwf	postinc2,c
 11114  004594  0E00               	movlw	0
 11115  004596  6EDE               	movwf	postinc2,c
 11116  004598  0E21               	movlw	33
 11117  00459A  6EDE               	movwf	postinc2,c
 11118  00459C  0E46               	movlw	70
 11119  00459E  6EDD               	movwf	postdec2,c
 11120                           
 11121                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11122  0045A0  EE20 F012          	lfsr	2,18
 11123  0045A4  504C               	movf	f_sync@dir,w,c
 11124  0045A6  26D9               	addwf	fsr2l,f,c
 11125  0045A8  504D               	movf	f_sync@dir+1,w,c
 11126  0045AA  22DA               	addwfc	fsr2h,f,c
 11127  0045AC  0E00               	movlw	0
 11128  0045AE  6EDE               	movwf	postinc2,c
 11129  0045B0  0E00               	movlw	0
 11130  0045B2  6EDD               	movwf	postdec2,c
 11131                           
 11132                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11133  0045B4  EE20 F004          	lfsr	2,4
 11134  0045B8  5045               	movf	f_sync@fp,w,c
 11135  0045BA  26D9               	addwf	fsr2l,f,c
 11136  0045BC  5046               	movf	f_sync@fp+1,w,c
 11137  0045BE  22DA               	addwfc	fsr2h,f,c
 11138  0045C0  0EDF               	movlw	223
 11139  0045C2  16DF               	andwf	indf2,f,c
 11140                           
 11141                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11142  0045C4  C045  FFD9         	movff	f_sync@fp,fsr2l
 11143  0045C8  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11144  0045CC  EE10 F004          	lfsr	1,4
 11145  0045D0  50DE               	movf	postinc2,w,c
 11146  0045D2  26E1               	addwf	fsr1l,f,c
 11147  0045D4  50DD               	movf	postdec2,w,c
 11148  0045D6  22E2               	addwfc	fsr1h,f,c
 11149  0045D8  0E01               	movlw	1
 11150  0045DA  6EE7               	movwf	indf1,c
 11151                           
 11152                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11153  0045DC  C045  FFD9         	movff	f_sync@fp,fsr2l
 11154  0045E0  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11155  0045E4  CFDE F03A          	movff	postinc2,sync_fs@fs
 11156  0045E8  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11157  0045EC  ECC0  F01E         	call	_sync_fs	;wreg free
 11158  0045F0  6E4B               	movwf	f_sync@res,c
 11159  0045F2                     l5707:
 11160                           
 11161                           ;ff.c: 2849:  return res;
 11162  0045F2  504B               	movf	f_sync@res,w,c
 11163  0045F4  0012               	return		;funcret
 11164  0045F6                     __end_of_f_sync:
 11165                           	opt callstack 0
 11166                           
 11167 ;; *************** function _validate *****************
 11168 ;; Defined at:
 11169 ;;		line 2372 in file "ff.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;  obj             2    1[COMRAM] PTR void 
 11172 ;;		 -> Fil(32), 
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;  fil             2    7[COMRAM] PTR struct .
 11175 ;;		 -> Fil(32), 
 11176 ;; Return value:  Size  Location     Type
 11177 ;;                  1    wreg      enum E93
 11178 ;; Registers used:
 11179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11180 ;; Tracked objects:
 11181 ;;		On entry : 0/0
 11182 ;;		On exit  : 0/0
 11183 ;;		Unchanged: 0/0
 11184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11185 ;;      Params:         2       0       0       0       0       0       0       0       0
 11186 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11187 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11188 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11189 ;;Total ram usage:        8 bytes
 11190 ;; Hardware stack levels used:    1
 11191 ;; Hardware stack levels required when called:    1
 11192 ;; This function calls:
 11193 ;;		_disk_status
 11194 ;; This function is called by:
 11195 ;;		_f_write
 11196 ;;		_f_sync
 11197 ;;		_f_close
 11198 ;;		_f_lseek
 11199 ;;		_f_read
 11200 ;; This function uses a non-reentrant model
 11201 ;;
 11202                           
 11203                           	psect	text31
 11204  004F18                     __ptext31:
 11205                           	opt callstack 0
 11206  004F18                     _validate:
 11207                           	opt callstack 27
 11208                           
 11209                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11210                           
 11211                           ;incstack = 0
 11212  004F18  C002  F008         	movff	validate@obj,validate@fil
 11213  004F1C  C003  F009         	movff	validate@obj+1,validate@fil+1
 11214                           
 11215                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11216  004F20  5008               	movf	validate@fil,w,c
 11217  004F22  1009               	iorwf	validate@fil+1,w,c
 11218  004F24  B4D8               	btfsc	status,2,c
 11219  004F26  D03E               	goto	u6980
 11220  004F28  C008  FFD9         	movff	validate@fil,fsr2l
 11221  004F2C  C009  FFDA         	movff	validate@fil+1,fsr2h
 11222  004F30  50DE               	movf	postinc2,w,c
 11223  004F32  10DE               	iorwf	postinc2,w,c
 11224  004F34  B4D8               	btfsc	status,2,c
 11225  004F36  D036               	goto	u6980
 11226  004F38  C008  FFD9         	movff	validate@fil,fsr2l
 11227  004F3C  C009  FFDA         	movff	validate@fil+1,fsr2h
 11228  004F40  CFDE F004          	movff	postinc2,??_validate
 11229  004F44  CFDD F005          	movff	postdec2,??_validate+1
 11230  004F48  C004  FFD9         	movff	??_validate,fsr2l
 11231  004F4C  C005  FFDA         	movff	??_validate+1,fsr2h
 11232  004F50  50DF               	movf	indf2,w,c
 11233  004F52  B4D8               	btfsc	status,2,c
 11234  004F54  D027               	goto	u6980
 11235  004F56  EE20 F002          	lfsr	2,2
 11236  004F5A  5008               	movf	validate@fil,w,c
 11237  004F5C  26D9               	addwf	fsr2l,f,c
 11238  004F5E  5009               	movf	validate@fil+1,w,c
 11239  004F60  22DA               	addwfc	fsr2h,f,c
 11240  004F62  C008  FFE1         	movff	validate@fil,fsr1l
 11241  004F66  C009  FFE2         	movff	validate@fil+1,fsr1h
 11242  004F6A  EE00 F006          	lfsr	0,6
 11243  004F6E  50E6               	movf	postinc1,w,c
 11244  004F70  26E9               	addwf	fsr0l,f,c
 11245  004F72  50E5               	movf	postdec1,w,c
 11246  004F74  22EA               	addwfc	fsr0h,f,c
 11247  004F76  50DE               	movf	postinc2,w,c
 11248  004F78  18EE               	xorwf	postinc0,w,c
 11249  004F7A  E114               	bnz	l5277
 11250  004F7C  50DE               	movf	postinc2,w,c
 11251  004F7E  18EE               	xorwf	postinc0,w,c
 11252  004F80  A4D8               	btfss	status,2,c
 11253  004F82  D010               	goto	u6980
 11254  004F84  C008  FFD9         	movff	validate@fil,fsr2l
 11255  004F88  C009  FFDA         	movff	validate@fil+1,fsr2h
 11256  004F8C  EE10 F001          	lfsr	1,1
 11257  004F90  50DE               	movf	postinc2,w,c
 11258  004F92  26E1               	addwf	fsr1l,f,c
 11259  004F94  50DD               	movf	postdec2,w,c
 11260  004F96  22E2               	addwfc	fsr1h,f,c
 11261  004F98  50E7               	movf	indf1,w,c
 11262  004F9A  ECCB  F02A         	call	_disk_status
 11263  004F9E  6E04               	movwf	??_validate& (0+255),c
 11264  004FA0  A004               	btfss	??_validate,0,c
 11265  004FA2  D002               	goto	l5281
 11266  004FA4                     u6980:
 11267  004FA4                     l5277:
 11268                           
 11269                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11270  004FA4  0E09               	movlw	9
 11271  004FA6  0012               	return	
 11272  004FA8                     l5281:
 11273                           
 11274                           ;ff.c: 2384:  return FR_OK;
 11275  004FA8  0E00               	movlw	0
 11276  004FAA  0012               	return		;funcret
 11277  004FAC                     __end_of_validate:
 11278                           	opt callstack 0
 11279                           
 11280 ;; *************** function _disk_status *****************
 11281 ;; Defined at:
 11282 ;;		line 356 in file "diskio.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  pdrv            1    wreg     unsigned char 
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;  pdrv            1    0[COMRAM] unsigned char 
 11287 ;; Return value:  Size  Location     Type
 11288 ;;                  1    wreg      unsigned char 
 11289 ;; Registers used:
 11290 ;;		wreg, status,2
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11296 ;;      Params:         0       0       0       0       0       0       0       0       0
 11297 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11298 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11299 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11300 ;;Total ram usage:        1 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_find_volume
 11306 ;;		_validate
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           	psect	text32
 11311  005596                     __ptext32:
 11312                           	opt callstack 0
 11313  005596                     _disk_status:
 11314                           	opt callstack 27
 11315                           
 11316                           ;incstack = 0
 11317                           ;disk_status@pdrv stored from wreg
 11318  005596  6E01               	movwf	disk_status@pdrv,c
 11319                           
 11320                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11321  005598  5001               	movf	disk_status@pdrv,w,c
 11322  00559A  B4D8               	btfsc	status,2,c
 11323  00559C  D002               	goto	l4507
 11324  00559E  0E01               	movlw	1
 11325  0055A0  0012               	return	
 11326  0055A2                     l4507:
 11327                           
 11328                           ;diskio.c: 361:  return Stat;
 11329  0055A2  0100               	movlb	0	; () banked
 11330  0055A4  51FA               	movf	_Stat& (0+255),w,b
 11331  0055A6  0012               	return		;funcret
 11332  0055A8                     __end_of_disk_status:
 11333                           	opt callstack 0
 11334                           
 11335 ;; *************** function _sync_fs *****************
 11336 ;; Defined at:
 11337 ;;		line 760 in file "ff.c"
 11338 ;; Parameters:    Size  Location     Type
 11339 ;;  fs              2   57[COMRAM] PTR struct .
 11340 ;;		 -> NULL(0), FatFs(558), 
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;  res             1   67[COMRAM] enum E93
 11343 ;; Return value:  Size  Location     Type
 11344 ;;                  1    wreg      enum E93
 11345 ;; Registers used:
 11346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11352 ;;      Params:         2       0       0       0       0       0       0       0       0
 11353 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11354 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11355 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11356 ;;Total ram usage:       11 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    7
 11359 ;; This function calls:
 11360 ;;		_disk_ioctl
 11361 ;;		_disk_write
 11362 ;;		_mem_set
 11363 ;;		_sync_window
 11364 ;; This function is called by:
 11365 ;;		_f_sync
 11366 ;; This function uses a non-reentrant model
 11367 ;;
 11368                           
 11369                           	psect	text33
 11370  003D80                     __ptext33:
 11371                           	opt callstack 0
 11372  003D80                     _sync_fs:
 11373                           	opt callstack 20
 11374                           
 11375                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11376                           
 11377                           ;incstack = 0
 11378  003D80  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11379  003D84  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11380  003D88  EC66  F020         	call	_sync_window	;wreg free
 11381  003D8C  6E44               	movwf	sync_fs@res,c
 11382                           
 11383                           ;ff.c: 768:  if (res == FR_OK) {
 11384  003D8E  5044               	movf	sync_fs@res,w,c
 11385  003D90  A4D8               	btfss	status,2,c
 11386  003D92  D0D4               	goto	l306
 11387                           
 11388                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11389  003D94  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11390  003D98  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11391  003D9C  0E03               	movlw	3
 11392  003D9E  18DE               	xorwf	postinc2,w,c
 11393  003DA0  A4D8               	btfss	status,2,c
 11394  003DA2  D0B8               	goto	l4973
 11395  003DA4  EE20 F005          	lfsr	2,5
 11396  003DA8  503A               	movf	sync_fs@fs,w,c
 11397  003DAA  26D9               	addwf	fsr2l,f,c
 11398  003DAC  503B               	movf	sync_fs@fs+1,w,c
 11399  003DAE  22DA               	addwfc	fsr2h,f,c
 11400  003DB0  04DE               	decf	postinc2,w,c
 11401  003DB2  A4D8               	btfss	status,2,c
 11402  003DB4  D0AF               	goto	l4973
 11403                           
 11404                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11405  003DB6  0E2E               	movlw	46
 11406  003DB8  243A               	addwf	sync_fs@fs,w,c
 11407  003DBA  6E01               	movwf	mem_set@dst,c
 11408  003DBC  0E00               	movlw	0
 11409  003DBE  203B               	addwfc	sync_fs@fs+1,w,c
 11410  003DC0  6E02               	movwf	mem_set@dst+1,c
 11411  003DC2  0E00               	movlw	0
 11412  003DC4  6E04               	movwf	mem_set@val+1,c
 11413  003DC6  0E00               	movlw	0
 11414  003DC8  6E03               	movwf	mem_set@val,c
 11415  003DCA  0E02               	movlw	2
 11416  003DCC  6E06               	movwf	mem_set@cnt+1,c
 11417  003DCE  0E00               	movlw	0
 11418  003DD0  6E05               	movwf	mem_set@cnt,c
 11419  003DD2  EC5E  F02A         	call	_mem_set	;wreg free
 11420                           
 11421                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11422  003DD6  EE22 F02C          	lfsr	2,556
 11423  003DDA  503A               	movf	sync_fs@fs,w,c
 11424  003DDC  26D9               	addwf	fsr2l,f,c
 11425  003DDE  503B               	movf	sync_fs@fs+1,w,c
 11426  003DE0  22DA               	addwfc	fsr2h,f,c
 11427  003DE2  0E55               	movlw	85
 11428  003DE4  6EDE               	movwf	postinc2,c
 11429  003DE6  0EAA               	movlw	170
 11430  003DE8  6EDD               	movwf	postdec2,c
 11431                           
 11432                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11433  003DEA  EE20 F02E          	lfsr	2,46
 11434  003DEE  503A               	movf	sync_fs@fs,w,c
 11435  003DF0  26D9               	addwf	fsr2l,f,c
 11436  003DF2  503B               	movf	sync_fs@fs+1,w,c
 11437  003DF4  22DA               	addwfc	fsr2h,f,c
 11438  003DF6  0E52               	movlw	82
 11439  003DF8  6EDE               	movwf	postinc2,c
 11440  003DFA  0E52               	movlw	82
 11441  003DFC  6EDE               	movwf	postinc2,c
 11442  003DFE  0E61               	movlw	97
 11443  003E00  6EDE               	movwf	postinc2,c
 11444  003E02  0E41               	movlw	65
 11445  003E04  6EDD               	movwf	postdec2,c
 11446                           
 11447                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11448  003E06  EE22 F012          	lfsr	2,530
 11449  003E0A  503A               	movf	sync_fs@fs,w,c
 11450  003E0C  26D9               	addwf	fsr2l,f,c
 11451  003E0E  503B               	movf	sync_fs@fs+1,w,c
 11452  003E10  22DA               	addwfc	fsr2h,f,c
 11453  003E12  0E72               	movlw	114
 11454  003E14  6EDE               	movwf	postinc2,c
 11455  003E16  0E72               	movlw	114
 11456  003E18  6EDE               	movwf	postinc2,c
 11457  003E1A  0E41               	movlw	65
 11458  003E1C  6EDE               	movwf	postinc2,c
 11459  003E1E  0E61               	movlw	97
 11460  003E20  6EDD               	movwf	postdec2,c
 11461                           
 11462                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11463  003E22  EE20 F00E          	lfsr	2,14
 11464  003E26  503A               	movf	sync_fs@fs,w,c
 11465  003E28  26D9               	addwf	fsr2l,f,c
 11466  003E2A  503B               	movf	sync_fs@fs+1,w,c
 11467  003E2C  22DA               	addwfc	fsr2h,f,c
 11468  003E2E  EE12 F016          	lfsr	1,534
 11469  003E32  503A               	movf	sync_fs@fs,w,c
 11470  003E34  26E1               	addwf	fsr1l,f,c
 11471  003E36  503B               	movf	sync_fs@fs+1,w,c
 11472  003E38  22E2               	addwfc	fsr1h,f,c
 11473  003E3A  CFDE FFE6          	movff	postinc2,postinc1
 11474  003E3E  CFDE FFE6          	movff	postinc2,postinc1
 11475  003E42  CFDE FFE6          	movff	postinc2,postinc1
 11476  003E46  CFDE FFE6          	movff	postinc2,postinc1
 11477                           
 11478                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11479  003E4A  EE20 F00A          	lfsr	2,10
 11480  003E4E  503A               	movf	sync_fs@fs,w,c
 11481  003E50  26D9               	addwf	fsr2l,f,c
 11482  003E52  503B               	movf	sync_fs@fs+1,w,c
 11483  003E54  22DA               	addwfc	fsr2h,f,c
 11484  003E56  EE12 F01A          	lfsr	1,538
 11485  003E5A  503A               	movf	sync_fs@fs,w,c
 11486  003E5C  26E1               	addwf	fsr1l,f,c
 11487  003E5E  503B               	movf	sync_fs@fs+1,w,c
 11488  003E60  22E2               	addwfc	fsr1h,f,c
 11489  003E62  CFDE FFE6          	movff	postinc2,postinc1
 11490  003E66  CFDE FFE6          	movff	postinc2,postinc1
 11491  003E6A  CFDE FFE6          	movff	postinc2,postinc1
 11492  003E6E  CFDE FFE6          	movff	postinc2,postinc1
 11493                           
 11494                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11495  003E72  EE20 F01A          	lfsr	2,26
 11496  003E76  503A               	movf	sync_fs@fs,w,c
 11497  003E78  26D9               	addwf	fsr2l,f,c
 11498  003E7A  503B               	movf	sync_fs@fs+1,w,c
 11499  003E7C  22DA               	addwfc	fsr2h,f,c
 11500  003E7E  CFDE F03C          	movff	postinc2,??_sync_fs
 11501  003E82  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11502  003E86  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11503  003E8A  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11504  003E8E  0E01               	movlw	1
 11505  003E90  243C               	addwf	??_sync_fs,w,c
 11506  003E92  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11507  003E94  0E00               	movlw	0
 11508  003E96  203D               	addwfc	??_sync_fs+1,w,c
 11509  003E98  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11510  003E9A  0E00               	movlw	0
 11511  003E9C  203E               	addwfc	??_sync_fs+2,w,c
 11512  003E9E  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11513  003EA0  0E00               	movlw	0
 11514  003EA2  203F               	addwfc	??_sync_fs+3,w,c
 11515  003EA4  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11516  003EA6  EE20 F02A          	lfsr	2,42
 11517  003EAA  503A               	movf	sync_fs@fs,w,c
 11518  003EAC  26D9               	addwf	fsr2l,f,c
 11519  003EAE  503B               	movf	sync_fs@fs+1,w,c
 11520  003EB0  22DA               	addwfc	fsr2h,f,c
 11521  003EB2  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11522  003EB6  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11523  003EBA  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11524  003EBE  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11525                           
 11526                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11527  003EC2  0E2E               	movlw	46
 11528  003EC4  243A               	addwf	sync_fs@fs,w,c
 11529  003EC6  6E11               	movwf	disk_write@buff,c
 11530  003EC8  0E00               	movlw	0
 11531  003ECA  203B               	addwfc	sync_fs@fs+1,w,c
 11532  003ECC  6E12               	movwf	disk_write@buff+1,c
 11533  003ECE  EE20 F02A          	lfsr	2,42
 11534  003ED2  503A               	movf	sync_fs@fs,w,c
 11535  003ED4  26D9               	addwf	fsr2l,f,c
 11536  003ED6  503B               	movf	sync_fs@fs+1,w,c
 11537  003ED8  22DA               	addwfc	fsr2h,f,c
 11538  003EDA  CFDE F013          	movff	postinc2,disk_write@sector
 11539  003EDE  CFDE F014          	movff	postinc2,disk_write@sector+1
 11540  003EE2  CFDE F015          	movff	postinc2,disk_write@sector+2
 11541  003EE6  CFDE F016          	movff	postinc2,disk_write@sector+3
 11542  003EEA  0E00               	movlw	0
 11543  003EEC  6E18               	movwf	disk_write@count+1,c
 11544  003EEE  0E01               	movlw	1
 11545  003EF0  6E17               	movwf	disk_write@count,c
 11546  003EF2  EE20 F001          	lfsr	2,1
 11547  003EF6  503A               	movf	sync_fs@fs,w,c
 11548  003EF8  26D9               	addwf	fsr2l,f,c
 11549  003EFA  503B               	movf	sync_fs@fs+1,w,c
 11550  003EFC  22DA               	addwfc	fsr2h,f,c
 11551  003EFE  50DF               	movf	indf2,w,c
 11552  003F00  ECFB  F022         	call	_disk_write
 11553                           
 11554                           ;ff.c: 781:    fs->fsi_flag = 0;
 11555  003F04  EE20 F005          	lfsr	2,5
 11556  003F08  503A               	movf	sync_fs@fs,w,c
 11557  003F0A  26D9               	addwf	fsr2l,f,c
 11558  003F0C  503B               	movf	sync_fs@fs+1,w,c
 11559  003F0E  22DA               	addwfc	fsr2h,f,c
 11560  003F10  0E00               	movlw	0
 11561  003F12  6EDF               	movwf	indf2,c
 11562  003F14                     l4973:
 11563                           
 11564                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11565  003F14  0E00               	movlw	0
 11566  003F16  6E11               	movwf	disk_ioctl@cmd,c
 11567  003F18  0E00               	movlw	0
 11568  003F1A  6E12               	movwf	disk_ioctl@buff,c
 11569  003F1C  0E00               	movlw	0
 11570  003F1E  6E13               	movwf	disk_ioctl@buff+1,c
 11571  003F20  EE20 F001          	lfsr	2,1
 11572  003F24  503A               	movf	sync_fs@fs,w,c
 11573  003F26  26D9               	addwf	fsr2l,f,c
 11574  003F28  503B               	movf	sync_fs@fs+1,w,c
 11575  003F2A  22DA               	addwfc	fsr2h,f,c
 11576  003F2C  50DF               	movf	indf2,w,c
 11577  003F2E  ECA8  F00F         	call	_disk_ioctl
 11578  003F32  0900               	iorlw	0
 11579  003F34  B4D8               	btfsc	status,2,c
 11580  003F36  D002               	goto	l306
 11581                           
 11582                           ;ff.c: 785:    res = FR_DISK_ERR;
 11583  003F38  0E01               	movlw	1
 11584  003F3A  6E44               	movwf	sync_fs@res,c
 11585  003F3C                     l306:
 11586                           
 11587                           ;ff.c: 788:  return res;
 11588  003F3C  5044               	movf	sync_fs@res,w,c
 11589  003F3E  0012               	return		;funcret
 11590  003F40                     __end_of_sync_fs:
 11591                           	opt callstack 0
 11592                           
 11593 ;; *************** function _mem_set *****************
 11594 ;; Defined at:
 11595 ;;		line 524 in file "ff.c"
 11596 ;; Parameters:    Size  Location     Type
 11597 ;;  dst             2    0[COMRAM] PTR void 
 11598 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11599 ;;  val             2    2[COMRAM] int 
 11600 ;;  cnt             2    4[COMRAM] unsigned short 
 11601 ;; Auto vars:     Size  Location     Type
 11602 ;;  d               2    6[COMRAM] PTR unsigned char 
 11603 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11604 ;; Return value:  Size  Location     Type
 11605 ;;                  1    wreg      void 
 11606 ;; Registers used:
 11607 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11608 ;; Tracked objects:
 11609 ;;		On entry : 0/0
 11610 ;;		On exit  : 0/0
 11611 ;;		Unchanged: 0/0
 11612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11613 ;;      Params:         6       0       0       0       0       0       0       0       0
 11614 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11615 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11616 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11617 ;;Total ram usage:        8 bytes
 11618 ;; Hardware stack levels used:    1
 11619 ;; This function calls:
 11620 ;;		Nothing
 11621 ;; This function is called by:
 11622 ;;		_sync_fs
 11623 ;;		_dir_next
 11624 ;;		_dir_register
 11625 ;;		_create_name
 11626 ;; This function uses a non-reentrant model
 11627 ;;
 11628                           
 11629                           	psect	text34
 11630  0054BC                     __ptext34:
 11631                           	opt callstack 0
 11632  0054BC                     _mem_set:
 11633                           	opt callstack 25
 11634                           
 11635                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11636                           
 11637                           ;incstack = 0
 11638  0054BC  C001  F007         	movff	mem_set@dst,mem_set@d
 11639  0054C0  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11640                           
 11641                           ;ff.c: 527:  while (cnt--)
 11642  0054C4  D008               	goto	l4405
 11643  0054C6                     l4401:
 11644                           
 11645                           ;ff.c: 528:   *d++ = (BYTE)val;
 11646  0054C6  C007  FFD9         	movff	mem_set@d,fsr2l
 11647  0054CA  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11648  0054CE  C003  FFDF         	movff	mem_set@val,indf2
 11649  0054D2  4A07               	infsnz	mem_set@d,f,c
 11650  0054D4  2A08               	incf	mem_set@d+1,f,c
 11651  0054D6                     l4405:
 11652                           
 11653                           ;ff.c: 527:  while (cnt--)
 11654  0054D6  0605               	decf	mem_set@cnt,f,c
 11655  0054D8  A0D8               	btfss	status,0,c
 11656  0054DA  0606               	decf	mem_set@cnt+1,f,c
 11657  0054DC  2805               	incf	mem_set@cnt,w,c
 11658  0054DE  E1F3               	bnz	l4401
 11659  0054E0  2806               	incf	mem_set@cnt+1,w,c
 11660  0054E2  B4D8               	btfsc	status,2,c
 11661  0054E4  0012               	return	
 11662  0054E6  D7EF               	goto	l4401
 11663  0054E8                     __end_of_mem_set:
 11664                           	opt callstack 0
 11665                           
 11666 ;; *************** function _disk_ioctl *****************
 11667 ;; Defined at:
 11668 ;;		line 446 in file "diskio.c"
 11669 ;; Parameters:    Size  Location     Type
 11670 ;;  pdrv            1    wreg     unsigned char 
 11671 ;;  cmd             1   16[COMRAM] unsigned char 
 11672 ;;  buff            2   17[COMRAM] PTR void 
 11673 ;;		 -> NULL(0), 
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;  pdrv            1   48[COMRAM] unsigned char 
 11676 ;;  csd            16   32[COMRAM] unsigned char [16]
 11677 ;;  csize           4   49[COMRAM] unsigned long 
 11678 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11679 ;;		 -> NULL(0), 
 11680 ;;  n               1   54[COMRAM] unsigned char 
 11681 ;;  res             1   53[COMRAM] enum E43
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      enum E43
 11684 ;; Registers used:
 11685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11686 ;; Tracked objects:
 11687 ;;		On entry : 0/0
 11688 ;;		On exit  : 0/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11691 ;;      Params:         3       0       0       0       0       0       0       0       0
 11692 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11693 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11694 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11695 ;;Total ram usage:       41 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; Hardware stack levels required when called:    5
 11698 ;; This function calls:
 11699 ;;		_SPI1_Exchange8bit
 11700 ;;		___wmul
 11701 ;;		_deselect
 11702 ;;		_rcvr_datablock
 11703 ;;		_select
 11704 ;;		_send_cmd
 11705 ;; This function is called by:
 11706 ;;		_sync_fs
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           	psect	text35
 11711  001F50                     __ptext35:
 11712                           	opt callstack 0
 11713  001F50                     _disk_ioctl:
 11714                           	opt callstack 21
 11715                           
 11716                           ;incstack = 0
 11717                           ;disk_ioctl@pdrv stored from wreg
 11718  001F50  6E31               	movwf	disk_ioctl@pdrv,c
 11719                           
 11720                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11721  001F52  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11722  001F56  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11723                           
 11724                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11725  001F5A  5031               	movf	disk_ioctl@pdrv,w,c
 11726  001F5C  B4D8               	btfsc	status,2,c
 11727  001F5E  D002               	goto	l4519
 11728  001F60  0E04               	movlw	4
 11729  001F62  0012               	return	
 11730  001F64                     l4519:
 11731                           
 11732                           ;diskio.c: 459:  res = RES_ERROR;
 11733  001F64  0E01               	movlw	1
 11734  001F66  6E36               	movwf	disk_ioctl@res,c
 11735                           
 11736                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11737  001F68  0100               	movlb	0	; () banked
 11738  001F6A  A1FA               	btfss	_Stat& (0+255),0,b
 11739  001F6C  D21B               	goto	l4619
 11740                           
 11741                           ; BSR set to: 0
 11742  001F6E  0E03               	movlw	3
 11743  001F70  0012               	return	
 11744  001F72                     l4527:
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11748  001F72  ECB1  F02A         	call	_select	;wreg free
 11749  001F76  0900               	iorlw	0
 11750  001F78  B4D8               	btfsc	status,2,c
 11751  001F7A  D235               	goto	l4621
 11752  001F7C                     u5480:
 11753  001F7C  0E00               	movlw	0
 11754  001F7E  D210               	goto	L13
 11755  001F80                     l4531:
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11759  001F80  0E00               	movlw	0
 11760  001F82  6E0B               	movwf	send_cmd@arg,c
 11761  001F84  0E00               	movlw	0
 11762  001F86  6E0C               	movwf	send_cmd@arg+1,c
 11763  001F88  0E00               	movlw	0
 11764  001F8A  6E0D               	movwf	send_cmd@arg+2,c
 11765  001F8C  0E00               	movlw	0
 11766  001F8E  6E0E               	movwf	send_cmd@arg+3,c
 11767  001F90  0E09               	movlw	9
 11768  001F92  ECE6  F029         	call	_send_cmd
 11769  001F96  0900               	iorlw	0
 11770  001F98  A4D8               	btfss	status,2,c
 11771  001F9A  D225               	goto	l4621
 11772  001F9C  0E21               	movlw	low disk_ioctl@csd
 11773  001F9E  6E02               	movwf	rcvr_datablock@buff,c
 11774  001FA0  0E00               	movlw	high disk_ioctl@csd
 11775  001FA2  6E03               	movwf	rcvr_datablock@buff+1,c
 11776  001FA4  0E00               	movlw	0
 11777  001FA6  6E05               	movwf	rcvr_datablock@btr+1,c
 11778  001FA8  0E10               	movlw	16
 11779  001FAA  6E04               	movwf	rcvr_datablock@btr,c
 11780  001FAC  ECD5  F028         	call	_rcvr_datablock	;wreg free
 11781  001FB0  0900               	iorlw	0
 11782  001FB2  B4D8               	btfsc	status,2,c
 11783  001FB4  D218               	goto	l4621
 11784                           
 11785                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11786  001FB6  4421               	rlncf	disk_ioctl@csd,w,c
 11787  001FB8  46E8               	rlncf	wreg,f,c
 11788  001FBA  0B03               	andlw	3
 11789  001FBC  06E8               	decf	wreg,f,c
 11790  001FBE  A4D8               	btfss	status,2,c
 11791  001FC0  D04E               	goto	l4541
 11792                           
 11793                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11794  001FC2  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11795  001FC6  0E3F               	movlw	63
 11796  001FC8  1614               	andwf	??_disk_ioctl,f,c
 11797  001FCA  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11798  001FCE  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11799  001FD0  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11800  001FD2  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11801  001FD4  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11802  001FD8  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11803  001FDC  6A16               	clrf	??_disk_ioctl+2,c
 11804  001FDE  6A15               	clrf	??_disk_ioctl+1,c
 11805  001FE0  5029               	movf	disk_ioctl@csd+8,w,c
 11806  001FE2  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11807  001FE4  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11808  001FE6  502A               	movf	disk_ioctl@csd+9,w,c
 11809  001FE8  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11810  001FEA  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11811  001FEC  5019               	movf	??_disk_ioctl+5,w,c
 11812  001FEE  261B               	addwf	??_disk_ioctl+7,f,c
 11813  001FF0  501A               	movf	??_disk_ioctl+6,w,c
 11814  001FF2  221C               	addwfc	??_disk_ioctl+8,f,c
 11815  001FF4  501B               	movf	??_disk_ioctl+7,w,c
 11816  001FF6  2415               	addwf	??_disk_ioctl+1,w,c
 11817  001FF8  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11818  001FFA  501C               	movf	??_disk_ioctl+8,w,c
 11819  001FFC  2016               	addwfc	??_disk_ioctl+2,w,c
 11820  001FFE  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11821  002000  0E00               	movlw	0
 11822  002002  2017               	addwfc	??_disk_ioctl+3,w,c
 11823  002004  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11824  002006  0E00               	movlw	0
 11825  002008  2018               	addwfc	??_disk_ioctl+4,w,c
 11826  00200A  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11827  00200C  0E01               	movlw	1
 11828  00200E  241D               	addwf	??_disk_ioctl+9,w,c
 11829  002010  6E32               	movwf	disk_ioctl@csize,c
 11830  002012  0E00               	movlw	0
 11831  002014  201E               	addwfc	??_disk_ioctl+10,w,c
 11832  002016  6E33               	movwf	disk_ioctl@csize+1,c
 11833  002018  0E00               	movlw	0
 11834  00201A  201F               	addwfc	??_disk_ioctl+11,w,c
 11835  00201C  6E34               	movwf	disk_ioctl@csize+2,c
 11836  00201E  0E00               	movlw	0
 11837  002020  2020               	addwfc	??_disk_ioctl+12,w,c
 11838  002022  6E35               	movwf	disk_ioctl@csize+3,c
 11839                           
 11840                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11841  002024  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11842  002028  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11843  00202C  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11844  002030  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11845  002034  0E0A               	movlw	10
 11846  002036                     u5525:
 11847  002036  90D8               	bcf	status,0,c
 11848  002038  3614               	rlcf	??_disk_ioctl,f,c
 11849  00203A  3615               	rlcf	??_disk_ioctl+1,f,c
 11850  00203C  3616               	rlcf	??_disk_ioctl+2,f,c
 11851  00203E  3617               	rlcf	??_disk_ioctl+3,f,c
 11852  002040  2EE8               	decfsz	wreg,f,c
 11853  002042  D7F9               	goto	u5525
 11854  002044  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11855  002048  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11856  00204C  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11857  002050  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11858  002054  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11859  002058  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11860                           
 11861                           ;diskio.c: 473:    } else {
 11862  00205C  D78F               	goto	u5480
 11863  00205E                     l4541:
 11864                           
 11865                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11866  00205E  6A14               	clrf	??_disk_ioctl& (0+255),c
 11867  002060  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11868  002062  D001               	bra	u5535
 11869  002064  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11870  002066                     u5535:
 11871  002066  0E01               	movlw	1
 11872  002068  1614               	andwf	??_disk_ioctl,f,c
 11873  00206A  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11874  00206E  0E0F               	movlw	15
 11875  002070  1615               	andwf	??_disk_ioctl+1,f,c
 11876  002072  502A               	movf	disk_ioctl@csd+9,w,c
 11877  002074  0B03               	andlw	3
 11878  002076  0D02               	mullw	2
 11879  002078  50F3               	movf	prodl,w,c
 11880  00207A  2415               	addwf	??_disk_ioctl+1,w,c
 11881  00207C  2414               	addwf	??_disk_ioctl,w,c
 11882  00207E  0F02               	addlw	2
 11883  002080  6E37               	movwf	disk_ioctl@n,c
 11884                           
 11885                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11886  002082  5027               	movf	disk_ioctl@csd+6,w,c
 11887  002084  0B03               	andlw	3
 11888  002086  6E14               	movwf	??_disk_ioctl& (0+255),c
 11889  002088  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 11890  00208A  0E0A               	movlw	10
 11891  00208C                     u5545:
 11892  00208C  90D8               	bcf	status,0,c
 11893  00208E  3614               	rlcf	??_disk_ioctl,f,c
 11894  002090  3615               	rlcf	??_disk_ioctl+1,f,c
 11895  002092  2EE8               	decfsz	wreg,f,c
 11896  002094  D7FB               	goto	u5545
 11897  002096  5028               	movf	disk_ioctl@csd+7,w,c
 11898  002098  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11899  00209A  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11900  00209C  90D8               	bcf	status,0,c
 11901  00209E  3616               	rlcf	??_disk_ioctl+2,f,c
 11902  0020A0  3617               	rlcf	??_disk_ioctl+3,f,c
 11903  0020A2  90D8               	bcf	status,0,c
 11904  0020A4  3616               	rlcf	??_disk_ioctl+2,f,c
 11905  0020A6  3617               	rlcf	??_disk_ioctl+3,f,c
 11906  0020A8  4429               	rlncf	disk_ioctl@csd+8,w,c
 11907  0020AA  46E8               	rlncf	wreg,f,c
 11908  0020AC  0B03               	andlw	3
 11909  0020AE  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11910  0020B0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11911  0020B2  5016               	movf	??_disk_ioctl+2,w,c
 11912  0020B4  2618               	addwf	??_disk_ioctl+4,f,c
 11913  0020B6  5017               	movf	??_disk_ioctl+3,w,c
 11914  0020B8  2219               	addwfc	??_disk_ioctl+5,f,c
 11915  0020BA  5014               	movf	??_disk_ioctl,w,c
 11916  0020BC  2618               	addwf	??_disk_ioctl+4,f,c
 11917  0020BE  5015               	movf	??_disk_ioctl+1,w,c
 11918  0020C0  2219               	addwfc	??_disk_ioctl+5,f,c
 11919  0020C2  0E01               	movlw	1
 11920  0020C4  2618               	addwf	??_disk_ioctl+4,f,c
 11921  0020C6  0E00               	movlw	0
 11922  0020C8  2219               	addwfc	??_disk_ioctl+5,f,c
 11923  0020CA  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 11924  0020CE  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 11925  0020D2  6A34               	clrf	disk_ioctl@csize+2,c
 11926  0020D4  6A35               	clrf	disk_ioctl@csize+3,c
 11927                           
 11928                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 11929  0020D6  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11930  0020DA  0EF7               	movlw	-9
 11931  0020DC  2614               	addwf	??_disk_ioctl,f,c
 11932  0020DE  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11933  0020E2  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11934  0020E6  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11935  0020EA  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 11936  0020EE  2A14               	incf	??_disk_ioctl,f,c
 11937  0020F0  D005               	goto	u5550
 11938  0020F2                     u5555:
 11939  0020F2  90D8               	bcf	status,0,c
 11940  0020F4  3615               	rlcf	??_disk_ioctl+1,f,c
 11941  0020F6  3616               	rlcf	??_disk_ioctl+2,f,c
 11942  0020F8  3617               	rlcf	??_disk_ioctl+3,f,c
 11943  0020FA  3618               	rlcf	??_disk_ioctl+4,f,c
 11944  0020FC                     u5550:
 11945  0020FC  2E14               	decfsz	??_disk_ioctl,f,c
 11946  0020FE  D7F9               	goto	u5555
 11947  002100  D03D               	goto	L15
 11948  002102                     l219:
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;diskio.c: 483:   if (CardType & 0x04) {
 11952  002102  A5D8               	btfss	_CardType& (0+255),2,b
 11953  002104  D048               	goto	l4567
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 11957  002106  0E00               	movlw	0
 11958  002108  6E0B               	movwf	send_cmd@arg,c
 11959  00210A  0E00               	movlw	0
 11960  00210C  6E0C               	movwf	send_cmd@arg+1,c
 11961  00210E  0E00               	movlw	0
 11962  002110  6E0D               	movwf	send_cmd@arg+2,c
 11963  002112  0E00               	movlw	0
 11964  002114  6E0E               	movwf	send_cmd@arg+3,c
 11965  002116  0E8D               	movlw	141
 11966  002118  ECE6  F029         	call	_send_cmd
 11967  00211C  0900               	iorlw	0
 11968  00211E  A4D8               	btfss	status,2,c
 11969  002120  D162               	goto	l4621
 11970                           
 11971                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 11972  002122  0EFF               	movlw	255
 11973  002124  ECDD  F02A         	call	_SPI1_Exchange8bit
 11974                           
 11975                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 11976  002128  0E21               	movlw	low disk_ioctl@csd
 11977  00212A  6E02               	movwf	rcvr_datablock@buff,c
 11978  00212C  0E00               	movlw	high disk_ioctl@csd
 11979  00212E  6E03               	movwf	rcvr_datablock@buff+1,c
 11980  002130  0E00               	movlw	0
 11981  002132  6E05               	movwf	rcvr_datablock@btr+1,c
 11982  002134  0E10               	movlw	16
 11983  002136  6E04               	movwf	rcvr_datablock@btr,c
 11984  002138  ECD5  F028         	call	_rcvr_datablock	;wreg free
 11985  00213C  0900               	iorlw	0
 11986  00213E  B4D8               	btfsc	status,2,c
 11987  002140  D152               	goto	l4621
 11988                           
 11989                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 11990  002142  0E30               	movlw	48
 11991  002144  6E37               	movwf	disk_ioctl@n,c
 11992  002146  D004               	goto	l4561
 11993  002148                     l4557:
 11994  002148  0EFF               	movlw	255
 11995  00214A  ECDD  F02A         	call	_SPI1_Exchange8bit
 11996  00214E  0637               	decf	disk_ioctl@n,f,c
 11997  002150                     l4561:
 11998  002150  5037               	movf	disk_ioctl@n,w,c
 11999  002152  A4D8               	btfss	status,2,c
 12000  002154  D7F9               	goto	l4557
 12001                           
 12002                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 12003  002156  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12004  00215A  3A14               	swapf	??_disk_ioctl,f,c
 12005  00215C  0E0F               	movlw	15
 12006  00215E  1614               	andwf	??_disk_ioctl,f,c
 12007  002160  0E10               	movlw	16
 12008  002162  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12009  002164  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12010  002166  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12011  002168  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12012  00216A  2A14               	incf	??_disk_ioctl,f,c
 12013  00216C  D005               	goto	u5600
 12014  00216E                     u5605:
 12015  00216E  90D8               	bcf	status,0,c
 12016  002170  3615               	rlcf	??_disk_ioctl+1,f,c
 12017  002172  3616               	rlcf	??_disk_ioctl+2,f,c
 12018  002174  3617               	rlcf	??_disk_ioctl+3,f,c
 12019  002176  3618               	rlcf	??_disk_ioctl+4,f,c
 12020  002178                     u5600:
 12021  002178  2E14               	decfsz	??_disk_ioctl,f,c
 12022  00217A  D7F9               	goto	u5605
 12023  00217C                     L15:
 12024  00217C  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12025  002180  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12026  002184  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 12027  002188  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 12028  00218C  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 12029  002190  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 12030  002194  D6F3               	goto	u5480
 12031  002196                     l4567:
 12032                           
 12033                           ; BSR set to: 0
 12034                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 12035  002196  0E00               	movlw	0
 12036  002198  6E0B               	movwf	send_cmd@arg,c
 12037  00219A  0E00               	movlw	0
 12038  00219C  6E0C               	movwf	send_cmd@arg+1,c
 12039  00219E  0E00               	movlw	0
 12040  0021A0  6E0D               	movwf	send_cmd@arg+2,c
 12041  0021A2  0E00               	movlw	0
 12042  0021A4  6E0E               	movwf	send_cmd@arg+3,c
 12043  0021A6  0E09               	movlw	9
 12044  0021A8  ECE6  F029         	call	_send_cmd
 12045  0021AC  0900               	iorlw	0
 12046  0021AE  A4D8               	btfss	status,2,c
 12047  0021B0  D11A               	goto	l4621
 12048  0021B2  0E21               	movlw	low disk_ioctl@csd
 12049  0021B4  6E02               	movwf	rcvr_datablock@buff,c
 12050  0021B6  0E00               	movlw	high disk_ioctl@csd
 12051  0021B8  6E03               	movwf	rcvr_datablock@buff+1,c
 12052  0021BA  0E00               	movlw	0
 12053  0021BC  6E05               	movwf	rcvr_datablock@btr+1,c
 12054  0021BE  0E10               	movlw	16
 12055  0021C0  6E04               	movwf	rcvr_datablock@btr,c
 12056  0021C2  ECD5  F028         	call	_rcvr_datablock	;wreg free
 12057  0021C6  0900               	iorlw	0
 12058  0021C8  B4D8               	btfsc	status,2,c
 12059  0021CA  D10D               	goto	l4621
 12060                           
 12061                           ;diskio.c: 494:     if (CardType & 0x02) {
 12062  0021CC  0100               	movlb	0	; () banked
 12063  0021CE  A3D8               	btfss	_CardType& (0+255),1,b
 12064  0021D0  D02A               	goto	l4575
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 12068  0021D2  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 12069  0021D6  0E06               	movlw	6
 12070  0021D8  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12071  0021DA                     u5645:
 12072  0021DA  90D8               	bcf	status,0,c
 12073  0021DC  3214               	rrcf	??_disk_ioctl,f,c
 12074  0021DE  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 12075  0021E0  D7FC               	goto	u5645
 12076  0021E2  0EFF               	movlw	-1
 12077  0021E4  2614               	addwf	??_disk_ioctl,f,c
 12078  0021E6  502B               	movf	disk_ioctl@csd+10,w,c
 12079  0021E8  0B3F               	andlw	63
 12080  0021EA  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12081  0021EC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12082  0021EE  90D8               	bcf	status,0,c
 12083  0021F0  3616               	rlcf	??_disk_ioctl+2,f,c
 12084  0021F2  3617               	rlcf	??_disk_ioctl+3,f,c
 12085  0021F4  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12086  0021F6  AE2C               	btfss	disk_ioctl@csd+11,7,c
 12087  0021F8  D001               	bra	u5655
 12088  0021FA  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 12089  0021FC                     u5655:
 12090  0021FC  0E01               	movlw	1
 12091  0021FE  1618               	andwf	??_disk_ioctl+4,f,c
 12092  002200  5018               	movf	??_disk_ioctl+4,w,c
 12093  002202  2616               	addwf	??_disk_ioctl+2,f,c
 12094  002204  0E00               	movlw	0
 12095  002206  2217               	addwfc	??_disk_ioctl+3,f,c
 12096  002208  0E01               	movlw	1
 12097  00220A  2616               	addwf	??_disk_ioctl+2,f,c
 12098  00220C  0E00               	movlw	0
 12099  00220E  2217               	addwfc	??_disk_ioctl+3,f,c
 12100  002210  2A14               	incf	??_disk_ioctl,f,c
 12101  002212  D003               	goto	u5664
 12102  002214                     u5665:
 12103  002214  90D8               	bcf	status,0,c
 12104  002216  3616               	rlcf	??_disk_ioctl+2,f,c
 12105  002218  3617               	rlcf	??_disk_ioctl+3,f,c
 12106  00221A                     u5664:
 12107  00221A  2E14               	decfsz	??_disk_ioctl,f,c
 12108  00221C  D7FB               	goto	u5665
 12109  00221E  5016               	movf	??_disk_ioctl+2,w,c
 12110  002220  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12111  002222  5017               	movf	??_disk_ioctl+3,w,c
 12112  002224  D034               	goto	L16
 12113  002226                     l4575:
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12117  002226  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12118  00222A  90D8               	bcf	status,0,c
 12119  00222C  3214               	rrcf	??_disk_ioctl,f,c
 12120  00222E  90D8               	bcf	status,0,c
 12121  002230  3214               	rrcf	??_disk_ioctl,f,c
 12122  002232  0E1F               	movlw	31
 12123  002234  1614               	andwf	??_disk_ioctl,f,c
 12124  002236  0E01               	movlw	1
 12125  002238  2414               	addwf	??_disk_ioctl,w,c
 12126  00223A  6E01               	movwf	___wmul@multiplier,c
 12127  00223C  6A02               	clrf	___wmul@multiplier+1,c
 12128  00223E  0E00               	movlw	0
 12129  002240  2202               	addwfc	___wmul@multiplier+1,f,c
 12130  002242  502C               	movf	disk_ioctl@csd+11,w,c
 12131  002244  0B03               	andlw	3
 12132  002246  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12133  002248  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12134  00224A  90D8               	bcf	status,0,c
 12135  00224C  3615               	rlcf	??_disk_ioctl+1,f,c
 12136  00224E  3616               	rlcf	??_disk_ioctl+2,f,c
 12137  002250  90D8               	bcf	status,0,c
 12138  002252  3615               	rlcf	??_disk_ioctl+1,f,c
 12139  002254  3616               	rlcf	??_disk_ioctl+2,f,c
 12140  002256  90D8               	bcf	status,0,c
 12141  002258  3615               	rlcf	??_disk_ioctl+1,f,c
 12142  00225A  3616               	rlcf	??_disk_ioctl+2,f,c
 12143  00225C  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12144  002260  0E05               	movlw	5
 12145  002262  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12146  002264                     u5675:
 12147  002264  90D8               	bcf	status,0,c
 12148  002266  3217               	rrcf	??_disk_ioctl+3,f,c
 12149  002268  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12150  00226A  D7FC               	goto	u5675
 12151  00226C  0E07               	movlw	7
 12152  00226E  1617               	andwf	??_disk_ioctl+3,f,c
 12153  002270  5017               	movf	??_disk_ioctl+3,w,c
 12154  002272  2615               	addwf	??_disk_ioctl+1,f,c
 12155  002274  0E00               	movlw	0
 12156  002276  2216               	addwfc	??_disk_ioctl+2,f,c
 12157  002278  0E01               	movlw	1
 12158  00227A  2415               	addwf	??_disk_ioctl+1,w,c
 12159  00227C  6E03               	movwf	___wmul@multiplicand,c
 12160  00227E  0E00               	movlw	0
 12161  002280  2016               	addwfc	??_disk_ioctl+2,w,c
 12162  002282  6E04               	movwf	___wmul@multiplicand+1,c
 12163  002284  EC9E  F02A         	call	___wmul	;wreg free
 12164  002288  5001               	movf	?___wmul,w,c
 12165  00228A  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12166  00228C  5002               	movf	?___wmul+1,w,c
 12167  00228E                     L16:
 12168  00228E  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12169  002290  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12170  002292  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12171  002294  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12172  002298  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12173  00229C  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12174  0022A0  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12175  0022A4  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12176  0022A8  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12177  0022AC  D667               	goto	u5480
 12178  0022AE                     l4579:
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;diskio.c: 507:   *ptr = CardType;
 12182  0022AE  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12183  0022B2  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12184  0022B6  C0D8  FFDF         	movff	_CardType,indf2
 12185  0022BA  D660               	goto	u5480
 12186  0022BC                     l4583:
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12190  0022BC  0E00               	movlw	0
 12191  0022BE  6E0B               	movwf	send_cmd@arg,c
 12192  0022C0  0E00               	movlw	0
 12193  0022C2  6E0C               	movwf	send_cmd@arg+1,c
 12194  0022C4  0E00               	movlw	0
 12195  0022C6  6E0D               	movwf	send_cmd@arg+2,c
 12196  0022C8  0E00               	movlw	0
 12197  0022CA  6E0E               	movwf	send_cmd@arg+3,c
 12198  0022CC  0E09               	movlw	9
 12199  0022CE  ECE6  F029         	call	_send_cmd
 12200  0022D2  0900               	iorlw	0
 12201  0022D4  A4D8               	btfss	status,2,c
 12202  0022D6  D087               	goto	l4621
 12203  0022D8  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12204  0022DC  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12205  0022E0  0E00               	movlw	0
 12206  0022E2  6E05               	movwf	rcvr_datablock@btr+1,c
 12207  0022E4  0E10               	movlw	16
 12208  0022E6  6E04               	movwf	rcvr_datablock@btr,c
 12209  0022E8  ECD5  F028         	call	_rcvr_datablock	;wreg free
 12210  0022EC                     L14:
 12211  0022EC  0900               	iorlw	0
 12212  0022EE  A4D8               	btfss	status,2,c
 12213  0022F0  D645               	goto	u5480
 12214  0022F2  D079               	goto	l4621
 12215  0022F4                     l4589:
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12219  0022F4  0E00               	movlw	0
 12220  0022F6  6E0B               	movwf	send_cmd@arg,c
 12221  0022F8  0E00               	movlw	0
 12222  0022FA  6E0C               	movwf	send_cmd@arg+1,c
 12223  0022FC  0E00               	movlw	0
 12224  0022FE  6E0D               	movwf	send_cmd@arg+2,c
 12225  002300  0E00               	movlw	0
 12226  002302  6E0E               	movwf	send_cmd@arg+3,c
 12227  002304  0E0A               	movlw	10
 12228  002306  ECE6  F029         	call	_send_cmd
 12229  00230A  0900               	iorlw	0
 12230  00230C  A4D8               	btfss	status,2,c
 12231  00230E  D06B               	goto	l4621
 12232  002310  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12233  002314  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12234  002318  0E00               	movlw	0
 12235  00231A  6E05               	movwf	rcvr_datablock@btr+1,c
 12236  00231C  0E10               	movlw	16
 12237  00231E  6E04               	movwf	rcvr_datablock@btr,c
 12238  002320  ECD5  F028         	call	_rcvr_datablock	;wreg free
 12239  002324  D7E3               	goto	L14
 12240  002326                     l4595:
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12244  002326  0E00               	movlw	0
 12245  002328  6E0B               	movwf	send_cmd@arg,c
 12246  00232A  0E00               	movlw	0
 12247  00232C  6E0C               	movwf	send_cmd@arg+1,c
 12248  00232E  0E00               	movlw	0
 12249  002330  6E0D               	movwf	send_cmd@arg+2,c
 12250  002332  0E00               	movlw	0
 12251  002334  6E0E               	movwf	send_cmd@arg+3,c
 12252  002336  0E3A               	movlw	58
 12253  002338  ECE6  F029         	call	_send_cmd
 12254  00233C  0900               	iorlw	0
 12255  00233E  A4D8               	btfss	status,2,c
 12256  002340  D052               	goto	l4621
 12257                           
 12258                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12259  002342  0E04               	movlw	4
 12260  002344  6E37               	movwf	disk_ioctl@n,c
 12261  002346  D00B               	goto	l4605
 12262  002348                     l4599:
 12263  002348  0EFF               	movlw	255
 12264  00234A  ECDD  F02A         	call	_SPI1_Exchange8bit
 12265  00234E  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12266  002352  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12267  002356  6EDF               	movwf	indf2,c
 12268  002358  4A38               	infsnz	disk_ioctl@ptr,f,c
 12269  00235A  2A39               	incf	disk_ioctl@ptr+1,f,c
 12270  00235C  0637               	decf	disk_ioctl@n,f,c
 12271  00235E                     l4605:
 12272  00235E  5037               	movf	disk_ioctl@n,w,c
 12273  002360  B4D8               	btfsc	status,2,c
 12274  002362  D60C               	goto	u5480
 12275  002364  D7F1               	goto	l4599
 12276  002366                     l4609:
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12280  002366  0E00               	movlw	0
 12281  002368  6E0B               	movwf	send_cmd@arg,c
 12282  00236A  0E00               	movlw	0
 12283  00236C  6E0C               	movwf	send_cmd@arg+1,c
 12284  00236E  0E00               	movlw	0
 12285  002370  6E0D               	movwf	send_cmd@arg+2,c
 12286  002372  0E00               	movlw	0
 12287  002374  6E0E               	movwf	send_cmd@arg+3,c
 12288  002376  0E8D               	movlw	141
 12289  002378  ECE6  F029         	call	_send_cmd
 12290  00237C  0900               	iorlw	0
 12291  00237E  A4D8               	btfss	status,2,c
 12292  002380  D032               	goto	l4621
 12293                           
 12294                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12295  002382  0EFF               	movlw	255
 12296  002384  ECDD  F02A         	call	_SPI1_Exchange8bit
 12297                           
 12298                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12299  002388  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12300  00238C  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12301  002390  0E00               	movlw	0
 12302  002392  6E05               	movwf	rcvr_datablock@btr+1,c
 12303  002394  0E40               	movlw	64
 12304  002396  6E04               	movwf	rcvr_datablock@btr,c
 12305  002398  ECD5  F028         	call	_rcvr_datablock	;wreg free
 12306  00239C  D7A7               	goto	L14
 12307  00239E                     l4617:
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;diskio.c: 539:   res = RES_PARERR;
 12311  00239E  0E04               	movlw	4
 12312  0023A0                     L13:
 12313  0023A0  6E36               	movwf	disk_ioctl@res,c
 12314                           
 12315                           ;diskio.c: 540:  }
 12316  0023A2  D021               	goto	l4621
 12317  0023A4                     l4619:
 12318                           
 12319                           ; BSR set to: 0
 12320  0023A4  5011               	movf	disk_ioctl@cmd,w,c
 12321  0023A6  6E14               	movwf	??_disk_ioctl& (0+255),c
 12322  0023A8  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12323                           
 12324                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12325                           ; Switch size 1, requested type "simple"
 12326                           ; Number of cases is 1, Range of values is 0 to 0
 12327                           ; switch strategies available:
 12328                           ; Name         Instructions Cycles
 12329                           ; simple_byte            4     3 (average)
 12330                           ;	Chosen strategy is simple_byte
 12331  0023AA  5015               	movf	??_disk_ioctl+1,w,c
 12332  0023AC  0A00               	xorlw	0	; case 0
 12333  0023AE  A4D8               	btfss	status,2,c
 12334  0023B0  D7F6               	goto	l4617
 12335                           
 12336                           ; BSR set to: 0
 12337                           ; Switch size 1, requested type "simple"
 12338                           ; Number of cases is 8, Range of values is 0 to 14
 12339                           ; switch strategies available:
 12340                           ; Name         Instructions Cycles
 12341                           ; simple_byte           25    13 (average)
 12342                           ;	Chosen strategy is simple_byte
 12343  0023B2  5014               	movf	??_disk_ioctl,w,c
 12344  0023B4  0A00               	xorlw	0	; case 0
 12345  0023B6  B4D8               	btfsc	status,2,c
 12346  0023B8  D5DC               	goto	l4527
 12347  0023BA  0A01               	xorlw	1	; case 1
 12348  0023BC  B4D8               	btfsc	status,2,c
 12349  0023BE  D5E0               	goto	l4531
 12350  0023C0  0A02               	xorlw	2	; case 3
 12351  0023C2  B4D8               	btfsc	status,2,c
 12352  0023C4  D69E               	goto	l219
 12353  0023C6  0A09               	xorlw	9	; case 10
 12354  0023C8  B4D8               	btfsc	status,2,c
 12355  0023CA  D771               	goto	l4579
 12356  0023CC  0A01               	xorlw	1	; case 11
 12357  0023CE  B4D8               	btfsc	status,2,c
 12358  0023D0  D775               	goto	l4583
 12359  0023D2  0A07               	xorlw	7	; case 12
 12360  0023D4  B4D8               	btfsc	status,2,c
 12361  0023D6  D78E               	goto	l4589
 12362  0023D8  0A01               	xorlw	1	; case 13
 12363  0023DA  B4D8               	btfsc	status,2,c
 12364  0023DC  D7A4               	goto	l4595
 12365  0023DE  0A03               	xorlw	3	; case 14
 12366  0023E0  B4D8               	btfsc	status,2,c
 12367  0023E2  D7C1               	goto	l4609
 12368  0023E4  D7DC               	goto	l4617
 12369  0023E6                     l4621:
 12370                           
 12371                           ;diskio.c: 542:  deselect();
 12372  0023E6  ECFF  F02A         	call	_deselect	;wreg free
 12373                           
 12374                           ;diskio.c: 544:  return res;
 12375  0023EA  5036               	movf	disk_ioctl@res,w,c
 12376  0023EC  0012               	return		;funcret
 12377  0023EE                     __end_of_disk_ioctl:
 12378                           	opt callstack 0
 12379                           
 12380 ;; *************** function ___wmul *****************
 12381 ;; Defined at:
 12382 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12383 ;; Parameters:    Size  Location     Type
 12384 ;;  multiplier      2    0[COMRAM] unsigned int 
 12385 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12386 ;; Auto vars:     Size  Location     Type
 12387 ;;  product         2    4[COMRAM] unsigned int 
 12388 ;; Return value:  Size  Location     Type
 12389 ;;                  2    0[COMRAM] unsigned int 
 12390 ;; Registers used:
 12391 ;;		wreg, status,2, status,0, prodl, prodh
 12392 ;; Tracked objects:
 12393 ;;		On entry : 0/0
 12394 ;;		On exit  : 0/0
 12395 ;;		Unchanged: 0/0
 12396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12397 ;;      Params:         4       0       0       0       0       0       0       0       0
 12398 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12399 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12400 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12401 ;;Total ram usage:        6 bytes
 12402 ;; Hardware stack levels used:    1
 12403 ;; This function calls:
 12404 ;;		Nothing
 12405 ;; This function is called by:
 12406 ;;		_disk_ioctl
 12407 ;; This function uses a non-reentrant model
 12408 ;;
 12409                           
 12410                           	psect	text36
 12411  00553C                     __ptext36:
 12412                           	opt callstack 0
 12413  00553C                     ___wmul:
 12414                           	opt callstack 25
 12415                           
 12416                           ;incstack = 0
 12417  00553C  5001               	movf	___wmul@multiplier,w,c
 12418  00553E  0203               	mulwf	___wmul@multiplicand,c
 12419  005540  CFF3 F005          	movff	prodl,___wmul@product
 12420  005544  CFF4 F006          	movff	prodh,___wmul@product+1
 12421  005548  5001               	movf	___wmul@multiplier,w,c
 12422  00554A  0204               	mulwf	___wmul@multiplicand+1,c
 12423  00554C  50F3               	movf	prodl,w,c
 12424  00554E  2606               	addwf	___wmul@product+1,f,c
 12425  005550  5002               	movf	___wmul@multiplier+1,w,c
 12426  005552  0203               	mulwf	___wmul@multiplicand,c
 12427  005554  50F3               	movf	prodl,w,c
 12428  005556  2606               	addwf	___wmul@product+1,f,c
 12429  005558  C005  F001         	movff	___wmul@product,?___wmul
 12430  00555C  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12431  005560  0012               	return		;funcret
 12432  005562                     __end_of___wmul:
 12433                           	opt callstack 0
 12434                           
 12435 ;; *************** function _st_clust *****************
 12436 ;; Defined at:
 12437 ;;		line 1252 in file "ff.c"
 12438 ;; Parameters:    Size  Location     Type
 12439 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12440 ;;		 -> NULL(0), FatFs(558), 
 12441 ;;  cl              4    2[COMRAM] unsigned long 
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;		None
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12453 ;;      Params:         6       0       0       0       0       0       0       0       0
 12454 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12455 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12456 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12457 ;;Total ram usage:        6 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; This function calls:
 12460 ;;		Nothing
 12461 ;; This function is called by:
 12462 ;;		_f_open
 12463 ;;		_f_sync
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           	psect	text37
 12468  0054E8                     __ptext37:
 12469                           	opt callstack 0
 12470  0054E8                     _st_clust:
 12471                           	opt callstack 28
 12472                           
 12473                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12474                           
 12475                           ;incstack = 0
 12476  0054E8  EE20 F01A          	lfsr	2,26
 12477  0054EC  5001               	movf	st_clust@dir,w,c
 12478  0054EE  26D9               	addwf	fsr2l,f,c
 12479  0054F0  5002               	movf	st_clust@dir+1,w,c
 12480  0054F2  22DA               	addwfc	fsr2h,f,c
 12481  0054F4  C003  FFDE         	movff	st_clust@cl,postinc2
 12482  0054F8  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12483                           
 12484                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12485  0054FC  EE20 F014          	lfsr	2,20
 12486  005500  5001               	movf	st_clust@dir,w,c
 12487  005502  26D9               	addwf	fsr2l,f,c
 12488  005504  5002               	movf	st_clust@dir+1,w,c
 12489  005506  22DA               	addwfc	fsr2h,f,c
 12490  005508  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12491  00550C  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12492  005510  0012               	return		;funcret
 12493  005512                     __end_of_st_clust:
 12494                           	opt callstack 0
 12495                           
 12496 ;; *************** function _move_window *****************
 12497 ;; Defined at:
 12498 ;;		line 729 in file "ff.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;  fs              2   47[COMRAM] PTR struct .
 12501 ;;		 -> NULL(0), FatFs(558), 
 12502 ;;  sector          4   49[COMRAM] unsigned long 
 12503 ;; Auto vars:     Size  Location     Type
 12504 ;;  res             1   57[COMRAM] enum E93
 12505 ;; Return value:  Size  Location     Type
 12506 ;;                  1    wreg      enum E93
 12507 ;; Registers used:
 12508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12509 ;; Tracked objects:
 12510 ;;		On entry : 0/0
 12511 ;;		On exit  : 0/0
 12512 ;;		Unchanged: 0/0
 12513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12514 ;;      Params:         6       0       0       0       0       0       0       0       0
 12515 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12516 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12517 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12518 ;;Total ram usage:       11 bytes
 12519 ;; Hardware stack levels used:    1
 12520 ;; Hardware stack levels required when called:    7
 12521 ;; This function calls:
 12522 ;;		_disk_read
 12523 ;;		_sync_window
 12524 ;; This function is called by:
 12525 ;;		_get_fat
 12526 ;;		_put_fat
 12527 ;;		_dir_alloc
 12528 ;;		_dir_find
 12529 ;;		_dir_register
 12530 ;;		_check_fs
 12531 ;;		_find_volume
 12532 ;;		_f_open
 12533 ;;		_f_write
 12534 ;;		_f_sync
 12535 ;;		_f_read
 12536 ;; This function uses a non-reentrant model
 12537 ;;
 12538                           
 12539                           	psect	text38
 12540  004E72                     __ptext38:
 12541                           	opt callstack 0
 12542  004E72                     _move_window:
 12543                           	opt callstack 21
 12544                           
 12545                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12546                           
 12547                           ;incstack = 0
 12548  004E72  0E00               	movlw	0
 12549  004E74  6E3A               	movwf	move_window@res,c
 12550                           
 12551                           ;ff.c: 737:  if (sector != fs->winsect) {
 12552  004E76  EE20 F02A          	lfsr	2,42
 12553  004E7A  5030               	movf	move_window@fs,w,c
 12554  004E7C  26D9               	addwf	fsr2l,f,c
 12555  004E7E  5031               	movf	move_window@fs+1,w,c
 12556  004E80  22DA               	addwfc	fsr2h,f,c
 12557  004E82  5032               	movf	move_window@sector,w,c
 12558  004E84  18DE               	xorwf	postinc2,w,c
 12559  004E86  E10A               	bnz	u4980
 12560  004E88  5033               	movf	move_window@sector+1,w,c
 12561  004E8A  18DE               	xorwf	postinc2,w,c
 12562  004E8C  E107               	bnz	u4980
 12563  004E8E  5034               	movf	move_window@sector+2,w,c
 12564  004E90  18DE               	xorwf	postinc2,w,c
 12565  004E92  E104               	bnz	u4980
 12566  004E94  5035               	movf	move_window@sector+3,w,c
 12567  004E96  18DE               	xorwf	postinc2,w,c
 12568  004E98  B4D8               	btfsc	status,2,c
 12569  004E9A  D03C               	goto	l4253
 12570  004E9C                     u4980:
 12571                           
 12572                           ;ff.c: 739:   res = sync_window(fs);
 12573  004E9C  C030  F01B         	movff	move_window@fs,sync_window@fs
 12574  004EA0  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12575  004EA4  EC66  F020         	call	_sync_window	;wreg free
 12576  004EA8  6E3A               	movwf	move_window@res,c
 12577                           
 12578                           ;ff.c: 741:   if (res == FR_OK) {
 12579  004EAA  503A               	movf	move_window@res,w,c
 12580  004EAC  A4D8               	btfss	status,2,c
 12581  004EAE  D032               	goto	l4253
 12582                           
 12583                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12584  004EB0  0E2E               	movlw	46
 12585  004EB2  2430               	addwf	move_window@fs,w,c
 12586  004EB4  6E11               	movwf	disk_read@buff,c
 12587  004EB6  0E00               	movlw	0
 12588  004EB8  2031               	addwfc	move_window@fs+1,w,c
 12589  004EBA  6E12               	movwf	disk_read@buff+1,c
 12590  004EBC  C032  F013         	movff	move_window@sector,disk_read@sector
 12591  004EC0  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12592  004EC4  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12593  004EC8  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12594  004ECC  0E00               	movlw	0
 12595  004ECE  6E18               	movwf	disk_read@count+1,c
 12596  004ED0  0E01               	movlw	1
 12597  004ED2  6E17               	movwf	disk_read@count,c
 12598  004ED4  EE20 F001          	lfsr	2,1
 12599  004ED8  5030               	movf	move_window@fs,w,c
 12600  004EDA  26D9               	addwf	fsr2l,f,c
 12601  004EDC  5031               	movf	move_window@fs+1,w,c
 12602  004EDE  22DA               	addwfc	fsr2h,f,c
 12603  004EE0  50DF               	movf	indf2,w,c
 12604  004EE2  ECC1  F025         	call	_disk_read
 12605  004EE6  0900               	iorlw	0
 12606  004EE8  B4D8               	btfsc	status,2,c
 12607  004EEA  D006               	goto	l4251
 12608                           
 12609                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12610  004EEC  6832               	setf	move_window@sector,c
 12611  004EEE  6833               	setf	move_window@sector+1,c
 12612  004EF0  6834               	setf	move_window@sector+2,c
 12613  004EF2  6835               	setf	move_window@sector+3,c
 12614                           
 12615                           ;ff.c: 744:     res = FR_DISK_ERR;
 12616  004EF4  0E01               	movlw	1
 12617  004EF6  6E3A               	movwf	move_window@res,c
 12618  004EF8                     l4251:
 12619                           
 12620                           ;ff.c: 746:    fs->winsect = sector;
 12621  004EF8  EE20 F02A          	lfsr	2,42
 12622  004EFC  5030               	movf	move_window@fs,w,c
 12623  004EFE  26D9               	addwf	fsr2l,f,c
 12624  004F00  5031               	movf	move_window@fs+1,w,c
 12625  004F02  22DA               	addwfc	fsr2h,f,c
 12626  004F04  C032  FFDE         	movff	move_window@sector,postinc2
 12627  004F08  C033  FFDE         	movff	move_window@sector+1,postinc2
 12628  004F0C  C034  FFDE         	movff	move_window@sector+2,postinc2
 12629  004F10  C035  FFDE         	movff	move_window@sector+3,postinc2
 12630  004F14                     l4253:
 12631                           
 12632                           ;ff.c: 749:  return res;
 12633  004F14  503A               	movf	move_window@res,w,c
 12634  004F16  0012               	return		;funcret
 12635  004F18                     __end_of_move_window:
 12636                           	opt callstack 0
 12637                           
 12638 ;; *************** function _sync_window *****************
 12639 ;; Defined at:
 12640 ;;		line 700 in file "ff.c"
 12641 ;; Parameters:    Size  Location     Type
 12642 ;;  fs              2   26[COMRAM] PTR struct .
 12643 ;;		 -> NULL(0), FatFs(558), 
 12644 ;; Auto vars:     Size  Location     Type
 12645 ;;  wsect           4   43[COMRAM] unsigned long 
 12646 ;;  nf              2   41[COMRAM] unsigned short 
 12647 ;;  res             1   40[COMRAM] enum E93
 12648 ;; Return value:  Size  Location     Type
 12649 ;;                  1    wreg      enum E93
 12650 ;; Registers used:
 12651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12652 ;; Tracked objects:
 12653 ;;		On entry : 0/0
 12654 ;;		On exit  : 0/0
 12655 ;;		Unchanged: 0/0
 12656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12657 ;;      Params:         2       0       0       0       0       0       0       0       0
 12658 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12659 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12660 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12661 ;;Total ram usage:       21 bytes
 12662 ;; Hardware stack levels used:    1
 12663 ;; Hardware stack levels required when called:    6
 12664 ;; This function calls:
 12665 ;;		_disk_write
 12666 ;; This function is called by:
 12667 ;;		_move_window
 12668 ;;		_sync_fs
 12669 ;;		_dir_next
 12670 ;;		_f_write
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           	psect	text39
 12675  0040CC                     __ptext39:
 12676                           	opt callstack 0
 12677  0040CC                     _sync_window:
 12678                           	opt callstack 22
 12679                           
 12680                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12681                           
 12682                           ;incstack = 0
 12683  0040CC  0E00               	movlw	0
 12684  0040CE  6E29               	movwf	sync_window@res,c
 12685                           
 12686                           ;ff.c: 709:  if (fs->wflag) {
 12687  0040D0  EE20 F004          	lfsr	2,4
 12688  0040D4  501B               	movf	sync_window@fs,w,c
 12689  0040D6  26D9               	addwf	fsr2l,f,c
 12690  0040D8  501C               	movf	sync_window@fs+1,w,c
 12691  0040DA  22DA               	addwfc	fsr2h,f,c
 12692  0040DC  50DF               	movf	indf2,w,c
 12693  0040DE  B4D8               	btfsc	status,2,c
 12694  0040E0  D09F               	goto	l4233
 12695                           
 12696                           ;ff.c: 710:   wsect = fs->winsect;
 12697  0040E2  EE20 F02A          	lfsr	2,42
 12698  0040E6  501B               	movf	sync_window@fs,w,c
 12699  0040E8  26D9               	addwf	fsr2l,f,c
 12700  0040EA  501C               	movf	sync_window@fs+1,w,c
 12701  0040EC  22DA               	addwfc	fsr2h,f,c
 12702  0040EE  CFDE F02C          	movff	postinc2,sync_window@wsect
 12703  0040F2  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12704  0040F6  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12705  0040FA  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12706                           
 12707                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12708  0040FE  0E2E               	movlw	46
 12709  004100  241B               	addwf	sync_window@fs,w,c
 12710  004102  6E11               	movwf	disk_write@buff,c
 12711  004104  0E00               	movlw	0
 12712  004106  201C               	addwfc	sync_window@fs+1,w,c
 12713  004108  6E12               	movwf	disk_write@buff+1,c
 12714  00410A  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12715  00410E  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12716  004112  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12717  004116  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12718  00411A  0E00               	movlw	0
 12719  00411C  6E18               	movwf	disk_write@count+1,c
 12720  00411E  0E01               	movlw	1
 12721  004120  6E17               	movwf	disk_write@count,c
 12722  004122  EE20 F001          	lfsr	2,1
 12723  004126  501B               	movf	sync_window@fs,w,c
 12724  004128  26D9               	addwf	fsr2l,f,c
 12725  00412A  501C               	movf	sync_window@fs+1,w,c
 12726  00412C  22DA               	addwfc	fsr2h,f,c
 12727  00412E  50DF               	movf	indf2,w,c
 12728  004130  ECFB  F022         	call	_disk_write
 12729  004134  0900               	iorlw	0
 12730  004136  B4D8               	btfsc	status,2,c
 12731  004138  D003               	goto	l4215
 12732                           
 12733                           ;ff.c: 712:    res = FR_DISK_ERR;
 12734  00413A  0E01               	movlw	1
 12735  00413C  6E29               	movwf	sync_window@res,c
 12736                           
 12737                           ;ff.c: 713:   } else {
 12738  00413E  D070               	goto	l4233
 12739  004140                     l4215:
 12740                           
 12741                           ;ff.c: 714:    fs->wflag = 0;
 12742  004140  EE20 F004          	lfsr	2,4
 12743  004144  501B               	movf	sync_window@fs,w,c
 12744  004146  26D9               	addwf	fsr2l,f,c
 12745  004148  501C               	movf	sync_window@fs+1,w,c
 12746  00414A  22DA               	addwfc	fsr2h,f,c
 12747  00414C  0E00               	movlw	0
 12748  00414E  6EDF               	movwf	indf2,c
 12749                           
 12750                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12751  004150  EE20 F016          	lfsr	2,22
 12752  004154  501B               	movf	sync_window@fs,w,c
 12753  004156  26D9               	addwf	fsr2l,f,c
 12754  004158  501C               	movf	sync_window@fs+1,w,c
 12755  00415A  22DA               	addwfc	fsr2h,f,c
 12756  00415C  EE10 F01E          	lfsr	1,30
 12757  004160  501B               	movf	sync_window@fs,w,c
 12758  004162  26E1               	addwf	fsr1l,f,c
 12759  004164  501C               	movf	sync_window@fs+1,w,c
 12760  004166  22E2               	addwfc	fsr1h,f,c
 12761  004168  CFE6 F021          	movff	postinc1,??_sync_window+4
 12762  00416C  CFE6 F022          	movff	postinc1,??_sync_window+5
 12763  004170  CFE6 F023          	movff	postinc1,??_sync_window+6
 12764  004174  CFE6 F024          	movff	postinc1,??_sync_window+7
 12765  004178  5021               	movf	??_sync_window+4,w,c
 12766  00417A  5C2C               	subwf	sync_window@wsect,w,c
 12767  00417C  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12768  00417E  5022               	movf	??_sync_window+5,w,c
 12769  004180  582D               	subwfb	sync_window@wsect+1,w,c
 12770  004182  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12771  004184  5023               	movf	??_sync_window+6,w,c
 12772  004186  582E               	subwfb	sync_window@wsect+2,w,c
 12773  004188  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12774  00418A  5024               	movf	??_sync_window+7,w,c
 12775  00418C  582F               	subwfb	sync_window@wsect+3,w,c
 12776  00418E  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12777  004190  50DE               	movf	postinc2,w,c
 12778  004192  5C25               	subwf	??_sync_window+8,w,c
 12779  004194  50DE               	movf	postinc2,w,c
 12780  004196  5826               	subwfb	??_sync_window+9,w,c
 12781  004198  50DE               	movf	postinc2,w,c
 12782  00419A  5827               	subwfb	??_sync_window+10,w,c
 12783  00419C  50DE               	movf	postinc2,w,c
 12784  00419E  5828               	subwfb	??_sync_window+11,w,c
 12785  0041A0  B0D8               	btfsc	status,0,c
 12786  0041A2  D03E               	goto	l4233
 12787                           
 12788                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12789  0041A4  EE20 F003          	lfsr	2,3
 12790  0041A8  501B               	movf	sync_window@fs,w,c
 12791  0041AA  26D9               	addwf	fsr2l,f,c
 12792  0041AC  501C               	movf	sync_window@fs+1,w,c
 12793  0041AE  22DA               	addwfc	fsr2h,f,c
 12794  0041B0  50DF               	movf	indf2,w,c
 12795  0041B2  6E1D               	movwf	??_sync_window& (0+255),c
 12796  0041B4  501D               	movf	??_sync_window,w,c
 12797  0041B6  6E2A               	movwf	sync_window@nf,c
 12798  0041B8  6A2B               	clrf	sync_window@nf+1,c
 12799  0041BA                     l4221:
 12800  0041BA  502B               	movf	sync_window@nf+1,w,c
 12801  0041BC  E104               	bnz	l4225
 12802  0041BE  0E02               	movlw	2
 12803  0041C0  5C2A               	subwf	sync_window@nf,w,c
 12804  0041C2  A0D8               	btfss	status,0,c
 12805  0041C4  D02D               	goto	l4233
 12806  0041C6                     l4225:
 12807                           
 12808                           ;ff.c: 717:      wsect += fs->fsize;
 12809  0041C6  EE20 F016          	lfsr	2,22
 12810  0041CA  501B               	movf	sync_window@fs,w,c
 12811  0041CC  26D9               	addwf	fsr2l,f,c
 12812  0041CE  501C               	movf	sync_window@fs+1,w,c
 12813  0041D0  22DA               	addwfc	fsr2h,f,c
 12814  0041D2  50DE               	movf	postinc2,w,c
 12815  0041D4  262C               	addwf	sync_window@wsect,f,c
 12816  0041D6  50DE               	movf	postinc2,w,c
 12817  0041D8  222D               	addwfc	sync_window@wsect+1,f,c
 12818  0041DA  50DE               	movf	postinc2,w,c
 12819  0041DC  222E               	addwfc	sync_window@wsect+2,f,c
 12820  0041DE  50DD               	movf	postdec2,w,c
 12821  0041E0  222F               	addwfc	sync_window@wsect+3,f,c
 12822                           
 12823                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12824  0041E2  0E2E               	movlw	46
 12825  0041E4  241B               	addwf	sync_window@fs,w,c
 12826  0041E6  6E11               	movwf	disk_write@buff,c
 12827  0041E8  0E00               	movlw	0
 12828  0041EA  201C               	addwfc	sync_window@fs+1,w,c
 12829  0041EC  6E12               	movwf	disk_write@buff+1,c
 12830  0041EE  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12831  0041F2  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12832  0041F6  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12833  0041FA  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12834  0041FE  0E00               	movlw	0
 12835  004200  6E18               	movwf	disk_write@count+1,c
 12836  004202  0E01               	movlw	1
 12837  004204  6E17               	movwf	disk_write@count,c
 12838  004206  EE20 F001          	lfsr	2,1
 12839  00420A  501B               	movf	sync_window@fs,w,c
 12840  00420C  26D9               	addwf	fsr2l,f,c
 12841  00420E  501C               	movf	sync_window@fs+1,w,c
 12842  004210  22DA               	addwfc	fsr2h,f,c
 12843  004212  50DF               	movf	indf2,w,c
 12844  004214  ECFB  F022         	call	_disk_write
 12845                           
 12846                           ;ff.c: 719:     }
 12847  004218  062A               	decf	sync_window@nf,f,c
 12848  00421A  A0D8               	btfss	status,0,c
 12849  00421C  062B               	decf	sync_window@nf+1,f,c
 12850  00421E  D7CD               	goto	l4221
 12851  004220                     l4233:
 12852                           
 12853                           ;ff.c: 723:  return res;
 12854  004220  5029               	movf	sync_window@res,w,c
 12855  004222  0012               	return		;funcret
 12856  004224                     __end_of_sync_window:
 12857                           	opt callstack 0
 12858                           
 12859 ;; *************** function _disk_write *****************
 12860 ;; Defined at:
 12861 ;;		line 405 in file "diskio.c"
 12862 ;; Parameters:    Size  Location     Type
 12863 ;;  pdrv            1    wreg     unsigned char 
 12864 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12865 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 12866 ;;  sector          4   18[COMRAM] unsigned long 
 12867 ;;  count           2   22[COMRAM] unsigned short 
 12868 ;; Auto vars:     Size  Location     Type
 12869 ;;  pdrv            1   25[COMRAM] unsigned char 
 12870 ;; Return value:  Size  Location     Type
 12871 ;;                  1    wreg      enum E43
 12872 ;; Registers used:
 12873 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12874 ;; Tracked objects:
 12875 ;;		On entry : 0/0
 12876 ;;		On exit  : 0/0
 12877 ;;		Unchanged: 0/0
 12878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12879 ;;      Params:         8       0       0       0       0       0       0       0       0
 12880 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12881 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12882 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12883 ;;Total ram usage:       10 bytes
 12884 ;; Hardware stack levels used:    1
 12885 ;; Hardware stack levels required when called:    5
 12886 ;; This function calls:
 12887 ;;		_deselect
 12888 ;;		_send_cmd
 12889 ;;		_xmit_datablock
 12890 ;; This function is called by:
 12891 ;;		_sync_window
 12892 ;;		_sync_fs
 12893 ;;		_f_write
 12894 ;; This function uses a non-reentrant model
 12895 ;;
 12896                           
 12897                           	psect	text40
 12898  0045F6                     __ptext40:
 12899                           	opt callstack 0
 12900  0045F6                     _disk_write:
 12901                           	opt callstack 22
 12902                           
 12903                           ;incstack = 0
 12904                           ;disk_write@pdrv stored from wreg
 12905  0045F6  6E1A               	movwf	disk_write@pdrv,c
 12906                           
 12907                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 12908  0045F8  501A               	movf	disk_write@pdrv,w,c
 12909  0045FA  A4D8               	btfss	status,2,c
 12910  0045FC  D004               	goto	u4670
 12911  0045FE  5017               	movf	disk_write@count,w,c
 12912  004600  1018               	iorwf	disk_write@count+1,w,c
 12913  004602  A4D8               	btfss	status,2,c
 12914  004604  D002               	goto	l190
 12915  004606                     u4670:
 12916  004606  0E04               	movlw	4
 12917  004608  0012               	return	
 12918  00460A                     l190:
 12919                           
 12920                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 12921  00460A  0100               	movlb	0	; () banked
 12922  00460C  A1FA               	btfss	_Stat& (0+255),0,b
 12923  00460E  D002               	goto	l194
 12924                           
 12925                           ; BSR set to: 0
 12926  004610  0E03               	movlw	3
 12927  004612  0012               	return	
 12928  004614                     l194:
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 12932  004614  A5FA               	btfss	_Stat& (0+255),2,b
 12933  004616  D002               	goto	l195
 12934                           
 12935                           ; BSR set to: 0
 12936  004618  0E02               	movlw	2
 12937  00461A  0012               	return	
 12938  00461C                     l195:
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 12942  00461C  B7D8               	btfsc	_CardType& (0+255),3,b
 12943  00461E  D008               	goto	l196
 12944                           
 12945                           ; BSR set to: 0
 12946  004620  0E09               	movlw	9
 12947  004622                     u4715:
 12948  004622  90D8               	bcf	status,0,c
 12949  004624  3613               	rlcf	disk_write@sector,f,c
 12950  004626  3614               	rlcf	disk_write@sector+1,f,c
 12951  004628  3615               	rlcf	disk_write@sector+2,f,c
 12952  00462A  3616               	rlcf	disk_write@sector+3,f,c
 12953  00462C  2EE8               	decfsz	wreg,f,c
 12954  00462E  D7F9               	goto	u4715
 12955  004630                     l196:
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;diskio.c: 418:  if (count == 1) {
 12959  004630  0417               	decf	disk_write@count,w,c
 12960  004632  1018               	iorwf	disk_write@count+1,w,c
 12961  004634  A4D8               	btfss	status,2,c
 12962  004636  D01D               	goto	l4147
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 12966  004638  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12967  00463C  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12968  004640  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12969  004644  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12970  004648  0E18               	movlw	24
 12971  00464A  ECE6  F029         	call	_send_cmd
 12972  00464E  0900               	iorlw	0
 12973  004650  A4D8               	btfss	status,2,c
 12974  004652  D04F               	goto	l4161
 12975  004654  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12976  004658  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12977  00465C  0EFE               	movlw	254
 12978  00465E  6E06               	movwf	xmit_datablock@token,c
 12979  004660  EC97  F028         	call	_xmit_datablock	;wreg free
 12980  004664  0900               	iorlw	0
 12981  004666  B4D8               	btfsc	status,2,c
 12982  004668  D044               	goto	l4161
 12983                           
 12984                           ;diskio.c: 421:    count = 0;
 12985  00466A  0E00               	movlw	0
 12986  00466C  6E18               	movwf	disk_write@count+1,c
 12987  00466E  0E00               	movlw	0
 12988  004670  D03F               	goto	L17
 12989  004672                     l4147:
 12990                           
 12991                           ; BSR set to: 0
 12992                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 12993  004672  C0D8  F019         	movff	_CardType,??_disk_write
 12994  004676  0E06               	movlw	6
 12995  004678  1619               	andwf	??_disk_write,f,c
 12996  00467A  B4D8               	btfsc	status,2,c
 12997  00467C  D009               	goto	l200
 12998                           
 12999                           ; BSR set to: 0
 13000  00467E  C017  F00B         	movff	disk_write@count,send_cmd@arg
 13001  004682  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 13002  004686  6A0D               	clrf	send_cmd@arg+2,c
 13003  004688  6A0E               	clrf	send_cmd@arg+3,c
 13004  00468A  0E97               	movlw	151
 13005  00468C  ECE6  F029         	call	_send_cmd
 13006  004690                     l200:
 13007                           
 13008                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 13009  004690  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 13010  004694  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 13011  004698  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 13012  00469C  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 13013  0046A0  0E19               	movlw	25
 13014  0046A2  ECE6  F029         	call	_send_cmd
 13015  0046A6  0900               	iorlw	0
 13016  0046A8  A4D8               	btfss	status,2,c
 13017  0046AA  D023               	goto	l4161
 13018  0046AC                     u4760:
 13019                           
 13020                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 13021  0046AC  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 13022  0046B0  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 13023  0046B4  0EFC               	movlw	252
 13024  0046B6  6E06               	movwf	xmit_datablock@token,c
 13025  0046B8  EC97  F028         	call	_xmit_datablock	;wreg free
 13026  0046BC  0900               	iorlw	0
 13027  0046BE  B4D8               	btfsc	status,2,c
 13028  0046C0  D009               	goto	u4780
 13029                           
 13030                           ;diskio.c: 428:     buff += 512;
 13031  0046C2  0E02               	movlw	2
 13032  0046C4  2612               	addwf	disk_write@buff+1,f,c
 13033                           
 13034                           ;diskio.c: 429:    } while (--count);
 13035  0046C6  0617               	decf	disk_write@count,f,c
 13036  0046C8  A0D8               	btfss	status,0,c
 13037  0046CA  0618               	decf	disk_write@count+1,f,c
 13038  0046CC  5017               	movf	disk_write@count,w,c
 13039  0046CE  1018               	iorwf	disk_write@count+1,w,c
 13040  0046D0  A4D8               	btfss	status,2,c
 13041  0046D2  D7EC               	goto	u4760
 13042  0046D4                     u4780:
 13043                           
 13044                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 13045  0046D4  0E00               	movlw	0
 13046  0046D6  6E04               	movwf	xmit_datablock@buff,c
 13047  0046D8  0E00               	movlw	0
 13048  0046DA  6E05               	movwf	xmit_datablock@buff+1,c
 13049  0046DC  0EFD               	movlw	253
 13050  0046DE  6E06               	movwf	xmit_datablock@token,c
 13051  0046E0  EC97  F028         	call	_xmit_datablock	;wreg free
 13052  0046E4  0900               	iorlw	0
 13053  0046E6  A4D8               	btfss	status,2,c
 13054  0046E8  D004               	goto	l4161
 13055                           
 13056                           ;diskio.c: 431:     count = 1;
 13057  0046EA  0E00               	movlw	0
 13058  0046EC  6E18               	movwf	disk_write@count+1,c
 13059  0046EE  0E01               	movlw	1
 13060  0046F0                     L17:
 13061  0046F0  6E17               	movwf	disk_write@count,c
 13062  0046F2                     l4161:
 13063                           
 13064                           ;diskio.c: 434:  deselect();
 13065  0046F2  ECFF  F02A         	call	_deselect	;wreg free
 13066                           
 13067                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 13068  0046F6  5017               	movf	disk_write@count,w,c
 13069  0046F8  1018               	iorwf	disk_write@count+1,w,c
 13070  0046FA  B4D8               	btfsc	status,2,c
 13071  0046FC  D002               	goto	u4800
 13072  0046FE  0E01               	movlw	1
 13073  004700  0012               	return	
 13074  004702                     u4800:
 13075  004702  0E00               	movlw	0
 13076  004704  0012               	return		;funcret
 13077  004706                     __end_of_disk_write:
 13078                           	opt callstack 0
 13079                           
 13080 ;; *************** function _xmit_datablock *****************
 13081 ;; Defined at:
 13082 ;;		line 156 in file "diskio.c"
 13083 ;; Parameters:    Size  Location     Type
 13084 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13085 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 13086 ;;  token           1    5[COMRAM] unsigned char 
 13087 ;; Auto vars:     Size  Location     Type
 13088 ;;  i               2    6[COMRAM] unsigned short 
 13089 ;;  resp            1    8[COMRAM] unsigned char 
 13090 ;; Return value:  Size  Location     Type
 13091 ;;                  1    wreg      unsigned char 
 13092 ;; Registers used:
 13093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13094 ;; Tracked objects:
 13095 ;;		On entry : 0/0
 13096 ;;		On exit  : 0/0
 13097 ;;		Unchanged: 0/0
 13098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13099 ;;      Params:         3       0       0       0       0       0       0       0       0
 13100 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13101 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13102 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13103 ;;Total ram usage:        6 bytes
 13104 ;; Hardware stack levels used:    1
 13105 ;; Hardware stack levels required when called:    2
 13106 ;; This function calls:
 13107 ;;		_SPI1_Exchange8bit
 13108 ;;		_wait_ready
 13109 ;; This function is called by:
 13110 ;;		_disk_write
 13111 ;; This function uses a non-reentrant model
 13112 ;;
 13113                           
 13114                           	psect	text41
 13115  00512E                     __ptext41:
 13116                           	opt callstack 0
 13117  00512E                     _xmit_datablock:
 13118                           	opt callstack 24
 13119                           
 13120                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13121                           
 13122                           ;incstack = 0
 13123  00512E  EC07  F02A         	call	_wait_ready	;wreg free
 13124  005132  0900               	iorlw	0
 13125  005134  A4D8               	btfss	status,2,c
 13126  005136  D002               	goto	l4053
 13127  005138                     u4550:
 13128  005138  0E00               	movlw	0
 13129  00513A  0012               	return	
 13130  00513C                     l4053:
 13131                           
 13132                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13133  00513C  5006               	movf	xmit_datablock@token,w,c
 13134  00513E  ECDD  F02A         	call	_SPI1_Exchange8bit
 13135                           
 13136                           ;diskio.c: 168:  if (token != 0xFD) {
 13137  005142  0EFD               	movlw	253
 13138  005144  1806               	xorwf	xmit_datablock@token,w,c
 13139  005146  B4D8               	btfsc	status,2,c
 13140  005148  D02E               	goto	l4073
 13141                           
 13142                           ;diskio.c: 169:   i = 512;
 13143  00514A  0E02               	movlw	2
 13144  00514C  6E08               	movwf	xmit_datablock@i+1,c
 13145  00514E  0E00               	movlw	0
 13146  005150  6E07               	movwf	xmit_datablock@i,c
 13147  005152                     l4059:
 13148                           
 13149                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13150  005152  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13151  005156  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13152  00515A  6AF8               	clrf	tblptru,c
 13153  00515C  0E07               	movlw	(high __ramtop+-1)
 13154  00515E  64F7               	cpfsgt	tblptrh,c
 13155  005160  D003               	bra	u4577
 13156  005162  0008               	tblrd		*
 13157  005164  50F5               	movf	tablat,w,c
 13158  005166  D005               	bra	u4570
 13159  005168                     u4577:
 13160  005168  CFF6 FFE9          	movff	tblptrl,fsr0l
 13161  00516C  CFF7 FFEA          	movff	tblptrh,fsr0h
 13162  005170  50EF               	movf	indf0,w,c
 13163  005172                     u4570:
 13164  005172  ECDD  F02A         	call	_SPI1_Exchange8bit
 13165  005176  4A04               	infsnz	xmit_datablock@buff,f,c
 13166  005178  2A05               	incf	xmit_datablock@buff+1,f,c
 13167  00517A  0607               	decf	xmit_datablock@i,f,c
 13168  00517C  A0D8               	btfss	status,0,c
 13169  00517E  0608               	decf	xmit_datablock@i+1,f,c
 13170  005180  5007               	movf	xmit_datablock@i,w,c
 13171  005182  1008               	iorwf	xmit_datablock@i+1,w,c
 13172  005184  A4D8               	btfss	status,2,c
 13173  005186  D7E5               	goto	l4059
 13174                           
 13175                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13176  005188  0EFF               	movlw	255
 13177  00518A  ECDD  F02A         	call	_SPI1_Exchange8bit
 13178                           
 13179                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13180  00518E  0EFF               	movlw	255
 13181  005190  ECDD  F02A         	call	_SPI1_Exchange8bit
 13182                           
 13183                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13184  005194  0EFF               	movlw	255
 13185  005196  ECDD  F02A         	call	_SPI1_Exchange8bit
 13186  00519A  6E09               	movwf	xmit_datablock@resp,c
 13187                           
 13188                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13189  00519C  5009               	movf	xmit_datablock@resp,w,c
 13190  00519E  0B1F               	andlw	31
 13191  0051A0  0A05               	xorlw	5
 13192  0051A2  A4D8               	btfss	status,2,c
 13193  0051A4  D7C9               	goto	u4550
 13194  0051A6                     l4073:
 13195                           
 13196                           ;diskio.c: 180:  return 1;
 13197  0051A6  0E01               	movlw	1
 13198  0051A8  0012               	return		;funcret
 13199  0051AA                     __end_of_xmit_datablock:
 13200                           	opt callstack 0
 13201                           
 13202 ;; *************** function _disk_read *****************
 13203 ;; Defined at:
 13204 ;;		line 370 in file "diskio.c"
 13205 ;; Parameters:    Size  Location     Type
 13206 ;;  pdrv            1    wreg     unsigned char 
 13207 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13208 ;;		 -> NULL(0), FatFs(558), 
 13209 ;;  sector          4   18[COMRAM] unsigned long 
 13210 ;;  count           2   22[COMRAM] unsigned short 
 13211 ;; Auto vars:     Size  Location     Type
 13212 ;;  pdrv            1   24[COMRAM] unsigned char 
 13213 ;;  cmd             1   27[COMRAM] unsigned char 
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  1    wreg      enum E43
 13216 ;; Registers used:
 13217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13223 ;;      Params:         8       0       0       0       0       0       0       0       0
 13224 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13225 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13226 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13227 ;;Total ram usage:       12 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    5
 13230 ;; This function calls:
 13231 ;;		_deselect
 13232 ;;		_rcvr_datablock
 13233 ;;		_send_cmd
 13234 ;; This function is called by:
 13235 ;;		_move_window
 13236 ;;		_f_read
 13237 ;; This function uses a non-reentrant model
 13238 ;;
 13239                           
 13240                           	psect	text42
 13241  004B82                     __ptext42:
 13242                           	opt callstack 0
 13243  004B82                     _disk_read:
 13244                           	opt callstack 22
 13245                           
 13246                           ;incstack = 0
 13247                           ;disk_read@pdrv stored from wreg
 13248  004B82  6E19               	movwf	disk_read@pdrv,c
 13249                           
 13250                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13251  004B84  5019               	movf	disk_read@pdrv,w,c
 13252  004B86  A4D8               	btfss	status,2,c
 13253  004B88  D004               	goto	u4830
 13254  004B8A  5017               	movf	disk_read@count,w,c
 13255  004B8C  1018               	iorwf	disk_read@count+1,w,c
 13256  004B8E  A4D8               	btfss	status,2,c
 13257  004B90  D002               	goto	l173
 13258  004B92                     u4830:
 13259  004B92  0E04               	movlw	4
 13260  004B94  0012               	return	
 13261  004B96                     l173:
 13262                           
 13263                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13264  004B96  0100               	movlb	0	; () banked
 13265  004B98  A1FA               	btfss	_Stat& (0+255),0,b
 13266  004B9A  D002               	goto	l177
 13267                           
 13268                           ; BSR set to: 0
 13269  004B9C  0E03               	movlw	3
 13270  004B9E  0012               	return	
 13271  004BA0                     l177:
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13275  004BA0  B7D8               	btfsc	_CardType& (0+255),3,b
 13276  004BA2  D008               	goto	l178
 13277                           
 13278                           ; BSR set to: 0
 13279  004BA4  0E09               	movlw	9
 13280  004BA6                     u4865:
 13281  004BA6  90D8               	bcf	status,0,c
 13282  004BA8  3613               	rlcf	disk_read@sector,f,c
 13283  004BAA  3614               	rlcf	disk_read@sector+1,f,c
 13284  004BAC  3615               	rlcf	disk_read@sector+2,f,c
 13285  004BAE  3616               	rlcf	disk_read@sector+3,f,c
 13286  004BB0  2EE8               	decfsz	wreg,f,c
 13287  004BB2  D7F9               	goto	u4865
 13288  004BB4                     l178:
 13289                           
 13290                           ; BSR set to: 0
 13291                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13292  004BB4  5018               	movf	disk_read@count+1,w,c
 13293  004BB6  E108               	bnz	l4183
 13294  004BB8  0E02               	movlw	2
 13295  004BBA  5C17               	subwf	disk_read@count,w,c
 13296  004BBC  B0D8               	btfsc	status,0,c
 13297  004BBE  D004               	goto	l4183
 13298                           
 13299                           ; BSR set to: 0
 13300  004BC0  0E00               	movlw	0
 13301  004BC2  6E1B               	movwf	_disk_read$294+1,c
 13302  004BC4  0E11               	movlw	17
 13303  004BC6  D003               	goto	L18
 13304  004BC8                     l4183:
 13305                           
 13306                           ; BSR set to: 0
 13307  004BC8  0E00               	movlw	0
 13308  004BCA  6E1B               	movwf	_disk_read$294+1,c
 13309  004BCC  0E12               	movlw	18
 13310  004BCE                     L18:
 13311  004BCE  6E1A               	movwf	_disk_read$294,c
 13312                           
 13313                           ; BSR set to: 0
 13314  004BD0  C01A  F01C         	movff	_disk_read$294,disk_read@cmd
 13315                           
 13316                           ; BSR set to: 0
 13317                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13318  004BD4  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13319  004BD8  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13320  004BDC  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13321  004BE0  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13322  004BE4  501C               	movf	disk_read@cmd,w,c
 13323  004BE6  ECE6  F029         	call	_send_cmd
 13324  004BEA  0900               	iorlw	0
 13325  004BEC  A4D8               	btfss	status,2,c
 13326  004BEE  D025               	goto	l4199
 13327  004BF0                     u4880:
 13328                           
 13329                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13330  004BF0  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13331  004BF4  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13332  004BF8  0E02               	movlw	2
 13333  004BFA  6E05               	movwf	rcvr_datablock@btr+1,c
 13334  004BFC  0E00               	movlw	0
 13335  004BFE  6E04               	movwf	rcvr_datablock@btr,c
 13336  004C00  ECD5  F028         	call	_rcvr_datablock	;wreg free
 13337  004C04  0900               	iorlw	0
 13338  004C06  B4D8               	btfsc	status,2,c
 13339  004C08  D009               	goto	u4900
 13340                           
 13341                           ;diskio.c: 389:    buff += 512;
 13342  004C0A  0E02               	movlw	2
 13343  004C0C  2612               	addwf	disk_read@buff+1,f,c
 13344                           
 13345                           ;diskio.c: 390:   } while (--count);
 13346  004C0E  0617               	decf	disk_read@count,f,c
 13347  004C10  A0D8               	btfss	status,0,c
 13348  004C12  0618               	decf	disk_read@count+1,f,c
 13349  004C14  5017               	movf	disk_read@count,w,c
 13350  004C16  1018               	iorwf	disk_read@count+1,w,c
 13351  004C18  A4D8               	btfss	status,2,c
 13352  004C1A  D7EA               	goto	u4880
 13353  004C1C                     u4900:
 13354                           
 13355                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13356  004C1C  0E12               	movlw	18
 13357  004C1E  181C               	xorwf	disk_read@cmd,w,c
 13358  004C20  A4D8               	btfss	status,2,c
 13359  004C22  D00B               	goto	l4199
 13360  004C24  0E00               	movlw	0
 13361  004C26  6E0B               	movwf	send_cmd@arg,c
 13362  004C28  0E00               	movlw	0
 13363  004C2A  6E0C               	movwf	send_cmd@arg+1,c
 13364  004C2C  0E00               	movlw	0
 13365  004C2E  6E0D               	movwf	send_cmd@arg+2,c
 13366  004C30  0E00               	movlw	0
 13367  004C32  6E0E               	movwf	send_cmd@arg+3,c
 13368  004C34  0E0C               	movlw	12
 13369  004C36  ECE6  F029         	call	_send_cmd
 13370  004C3A                     l4199:
 13371                           
 13372                           ;diskio.c: 393:  deselect();
 13373  004C3A  ECFF  F02A         	call	_deselect	;wreg free
 13374                           
 13375                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13376  004C3E  5017               	movf	disk_read@count,w,c
 13377  004C40  1018               	iorwf	disk_read@count+1,w,c
 13378  004C42  B4D8               	btfsc	status,2,c
 13379  004C44  D002               	goto	u4920
 13380  004C46  0E01               	movlw	1
 13381  004C48  0012               	return	
 13382  004C4A                     u4920:
 13383  004C4A  0E00               	movlw	0
 13384  004C4C  0012               	return		;funcret
 13385  004C4E                     __end_of_disk_read:
 13386                           	opt callstack 0
 13387                           
 13388 ;; *************** function _send_cmd *****************
 13389 ;; Defined at:
 13390 ;;		line 231 in file "diskio.c"
 13391 ;; Parameters:    Size  Location     Type
 13392 ;;  cmd             1    wreg     unsigned char 
 13393 ;;  arg             4   10[COMRAM] unsigned long 
 13394 ;; Auto vars:     Size  Location     Type
 13395 ;;  cmd             1   14[COMRAM] unsigned char 
 13396 ;;  res             1   15[COMRAM] unsigned char 
 13397 ;; Return value:  Size  Location     Type
 13398 ;;                  1    wreg      unsigned char 
 13399 ;; Registers used:
 13400 ;;		wreg, status,2, status,0, cstack
 13401 ;; Tracked objects:
 13402 ;;		On entry : 0/0
 13403 ;;		On exit  : 0/0
 13404 ;;		Unchanged: 0/0
 13405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13406 ;;      Params:         4       0       0       0       0       0       0       0       0
 13407 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13408 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13409 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13410 ;;Total ram usage:        6 bytes
 13411 ;; Hardware stack levels used:    1
 13412 ;; Hardware stack levels required when called:    4
 13413 ;; This function calls:
 13414 ;;		___send_cmd
 13415 ;; This function is called by:
 13416 ;;		_disk_initialize
 13417 ;;		_disk_read
 13418 ;;		_disk_write
 13419 ;;		_disk_ioctl
 13420 ;; This function uses a non-reentrant model
 13421 ;;
 13422                           
 13423                           	psect	text43
 13424  0053CC                     __ptext43:
 13425                           	opt callstack 0
 13426  0053CC                     _send_cmd:
 13427                           	opt callstack 22
 13428                           
 13429                           ;incstack = 0
 13430                           ;send_cmd@cmd stored from wreg
 13431  0053CC  6E0F               	movwf	send_cmd@cmd,c
 13432                           
 13433                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13434  0053CE  AE0F               	btfss	send_cmd@cmd,7,c
 13435  0053D0  D012               	goto	l4089
 13436                           
 13437                           ;diskio.c: 243:   cmd &= 0x7F;
 13438  0053D2  9E0F               	bcf	send_cmd@cmd,7,c
 13439                           
 13440                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13441  0053D4  0E00               	movlw	0
 13442  0053D6  6E04               	movwf	___send_cmd@arg,c
 13443  0053D8  0E00               	movlw	0
 13444  0053DA  6E05               	movwf	___send_cmd@arg+1,c
 13445  0053DC  0E00               	movlw	0
 13446  0053DE  6E06               	movwf	___send_cmd@arg+2,c
 13447  0053E0  0E00               	movlw	0
 13448  0053E2  6E07               	movwf	___send_cmd@arg+3,c
 13449  0053E4  0E37               	movlw	55
 13450  0053E6  EC17  F028         	call	___send_cmd
 13451  0053EA  6E10               	movwf	send_cmd@res,c
 13452                           
 13453                           ;diskio.c: 249:   if (res > 1) return res;
 13454  0053EC  0E01               	movlw	1
 13455  0053EE  6410               	cpfsgt	send_cmd@res,c
 13456  0053F0  D002               	goto	l4089
 13457  0053F2  5010               	movf	send_cmd@res,w,c
 13458  0053F4  0012               	return	
 13459  0053F6                     l4089:
 13460                           
 13461                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13462  0053F6  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13463  0053FA  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13464  0053FE  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13465  005402  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13466  005406  500F               	movf	send_cmd@cmd,w,c
 13467  005408  EC17  F028         	call	___send_cmd
 13468  00540C  0012               	return		;funcret
 13469  00540E                     __end_of_send_cmd:
 13470                           	opt callstack 0
 13471                           
 13472 ;; *************** function ___send_cmd *****************
 13473 ;; Defined at:
 13474 ;;		line 195 in file "diskio.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;  cmd             1    wreg     unsigned char 
 13477 ;;  arg             4    3[COMRAM] unsigned long 
 13478 ;; Auto vars:     Size  Location     Type
 13479 ;;  cmd             1    9[COMRAM] unsigned char 
 13480 ;;  n               1    8[COMRAM] unsigned char 
 13481 ;;  res             1    7[COMRAM] unsigned char 
 13482 ;; Return value:  Size  Location     Type
 13483 ;;                  1    wreg      unsigned char 
 13484 ;; Registers used:
 13485 ;;		wreg, status,2, status,0, cstack
 13486 ;; Tracked objects:
 13487 ;;		On entry : 0/0
 13488 ;;		On exit  : 0/0
 13489 ;;		Unchanged: 0/0
 13490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13491 ;;      Params:         4       0       0       0       0       0       0       0       0
 13492 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13493 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13494 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13495 ;;Total ram usage:        7 bytes
 13496 ;; Hardware stack levels used:    1
 13497 ;; Hardware stack levels required when called:    3
 13498 ;; This function calls:
 13499 ;;		_SPI1_Exchange8bit
 13500 ;;		_deselect
 13501 ;;		_select
 13502 ;; This function is called by:
 13503 ;;		_send_cmd
 13504 ;; This function uses a non-reentrant model
 13505 ;;
 13506                           
 13507                           	psect	text44
 13508  00502E                     __ptext44:
 13509                           	opt callstack 0
 13510  00502E                     ___send_cmd:
 13511                           	opt callstack 22
 13512                           
 13513                           ;incstack = 0
 13514                           ;___send_cmd@cmd stored from wreg
 13515  00502E  6E0A               	movwf	___send_cmd@cmd,c
 13516                           
 13517                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13518  005030  0E0C               	movlw	12
 13519  005032  180A               	xorwf	___send_cmd@cmd,w,c
 13520  005034  B4D8               	btfsc	status,2,c
 13521  005036  D009               	goto	l4009
 13522                           
 13523                           ;diskio.c: 204:   deselect();
 13524  005038  ECFF  F02A         	call	_deselect	;wreg free
 13525                           
 13526                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13527  00503C  ECB1  F02A         	call	_select	;wreg free
 13528  005040  0900               	iorlw	0
 13529  005042  A4D8               	btfss	status,2,c
 13530  005044  D002               	goto	l4009
 13531  005046  0EFF               	movlw	255
 13532  005048  0012               	return	
 13533  00504A                     l4009:
 13534                           
 13535                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13536  00504A  500A               	movf	___send_cmd@cmd,w,c
 13537  00504C  0940               	iorlw	64
 13538  00504E  ECDD  F02A         	call	_SPI1_Exchange8bit
 13539                           
 13540                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13541  005052  5007               	movf	___send_cmd@arg+3,w,c
 13542  005054  ECDD  F02A         	call	_SPI1_Exchange8bit
 13543                           
 13544                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13545  005058  5006               	movf	___send_cmd@arg+2,w,c
 13546  00505A  ECDD  F02A         	call	_SPI1_Exchange8bit
 13547                           
 13548                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13549  00505E  5005               	movf	___send_cmd@arg+1,w,c
 13550  005060  ECDD  F02A         	call	_SPI1_Exchange8bit
 13551                           
 13552                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13553  005064  5004               	movf	___send_cmd@arg,w,c
 13554  005066  ECDD  F02A         	call	_SPI1_Exchange8bit
 13555                           
 13556                           ;diskio.c: 214:  n = 0x01;
 13557  00506A  0E01               	movlw	1
 13558  00506C  6E09               	movwf	___send_cmd@n,c
 13559                           
 13560                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13561  00506E  500A               	movf	___send_cmd@cmd,w,c
 13562  005070  A4D8               	btfss	status,2,c
 13563  005072  D002               	goto	l4025
 13564  005074  0E95               	movlw	149
 13565  005076  6E09               	movwf	___send_cmd@n,c
 13566  005078                     l4025:
 13567                           
 13568                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13569  005078  0E08               	movlw	8
 13570  00507A  180A               	xorwf	___send_cmd@cmd,w,c
 13571  00507C  A4D8               	btfss	status,2,c
 13572  00507E  D002               	goto	l4029
 13573  005080  0E87               	movlw	135
 13574  005082  6E09               	movwf	___send_cmd@n,c
 13575  005084                     l4029:
 13576                           
 13577                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13578  005084  5009               	movf	___send_cmd@n,w,c
 13579  005086  ECDD  F02A         	call	_SPI1_Exchange8bit
 13580                           
 13581                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13582  00508A  0E0C               	movlw	12
 13583  00508C  180A               	xorwf	___send_cmd@cmd,w,c
 13584  00508E  A4D8               	btfss	status,2,c
 13585  005090  D003               	goto	l4035
 13586  005092  0EFF               	movlw	255
 13587  005094  ECDD  F02A         	call	_SPI1_Exchange8bit
 13588  005098                     l4035:
 13589                           
 13590                           ;diskio.c: 221:  n = 10;
 13591  005098  0E0A               	movlw	10
 13592  00509A  6E09               	movwf	___send_cmd@n,c
 13593  00509C                     l4037:
 13594                           
 13595                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13596  00509C  0EFF               	movlw	255
 13597  00509E  ECDD  F02A         	call	_SPI1_Exchange8bit
 13598  0050A2  6E08               	movwf	___send_cmd@res,c
 13599  0050A4  AE08               	btfss	___send_cmd@res,7,c
 13600  0050A6  D002               	goto	l4043
 13601  0050A8  2E09               	decfsz	___send_cmd@n,f,c
 13602  0050AA  D7F8               	goto	l4037
 13603  0050AC                     l4043:
 13604                           
 13605                           ;diskio.c: 226:  return res;
 13606  0050AC  5008               	movf	___send_cmd@res,w,c
 13607  0050AE  0012               	return		;funcret
 13608  0050B0                     __end_of___send_cmd:
 13609                           	opt callstack 0
 13610                           
 13611 ;; *************** function _select *****************
 13612 ;; Defined at:
 13613 ;;		line 106 in file "diskio.c"
 13614 ;; Parameters:    Size  Location     Type
 13615 ;;		None
 13616 ;; Auto vars:     Size  Location     Type
 13617 ;;		None
 13618 ;; Return value:  Size  Location     Type
 13619 ;;                  1    wreg      unsigned char 
 13620 ;; Registers used:
 13621 ;;		wreg, status,2, status,0, cstack
 13622 ;; Tracked objects:
 13623 ;;		On entry : 0/0
 13624 ;;		On exit  : 0/0
 13625 ;;		Unchanged: 0/0
 13626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13627 ;;      Params:         0       0       0       0       0       0       0       0       0
 13628 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13629 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13630 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13631 ;;Total ram usage:        0 bytes
 13632 ;; Hardware stack levels used:    1
 13633 ;; Hardware stack levels required when called:    2
 13634 ;; This function calls:
 13635 ;;		_SPI1_Exchange8bit
 13636 ;;		_deselect
 13637 ;;		_wait_ready
 13638 ;; This function is called by:
 13639 ;;		___send_cmd
 13640 ;;		_disk_ioctl
 13641 ;; This function uses a non-reentrant model
 13642 ;;
 13643                           
 13644                           	psect	text45
 13645  005562                     __ptext45:
 13646                           	opt callstack 0
 13647  005562                     _select:
 13648                           	opt callstack 22
 13649                           
 13650                           ;incstack = 0
 13651                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13652  005562  948A               	bcf	3978,2,c	;volatile
 13653                           
 13654                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13655  005564  0EFF               	movlw	255
 13656  005566  ECDD  F02A         	call	_SPI1_Exchange8bit
 13657                           
 13658                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13659  00556A  EC07  F02A         	call	_wait_ready	;wreg free
 13660  00556E  0900               	iorlw	0
 13661  005570  B4D8               	btfsc	status,2,c
 13662  005572  D002               	goto	l3993
 13663  005574  0E01               	movlw	1
 13664  005576  0012               	return	
 13665  005578                     l3993:
 13666                           
 13667                           ;diskio.c: 112:  deselect();
 13668  005578  ECFF  F02A         	call	_deselect	;wreg free
 13669                           
 13670                           ;diskio.c: 113:  return 0;
 13671  00557C  0E00               	movlw	0
 13672  00557E  0012               	return		;funcret
 13673  005580                     __end_of_select:
 13674                           	opt callstack 0
 13675                           
 13676 ;; *************** function _wait_ready *****************
 13677 ;; Defined at:
 13678 ;;		line 74 in file "diskio.c"
 13679 ;; Parameters:    Size  Location     Type
 13680 ;;		None
 13681 ;; Auto vars:     Size  Location     Type
 13682 ;;  tmr             2    1[COMRAM] unsigned short 
 13683 ;; Return value:  Size  Location     Type
 13684 ;;                  1    wreg      unsigned char 
 13685 ;; Registers used:
 13686 ;;		wreg, status,2, status,0, cstack
 13687 ;; Tracked objects:
 13688 ;;		On entry : 0/0
 13689 ;;		On exit  : 0/0
 13690 ;;		Unchanged: 0/0
 13691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13692 ;;      Params:         0       0       0       0       0       0       0       0       0
 13693 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13694 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13695 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13696 ;;Total ram usage:        2 bytes
 13697 ;; Hardware stack levels used:    1
 13698 ;; Hardware stack levels required when called:    1
 13699 ;; This function calls:
 13700 ;;		_SPI1_Exchange8bit
 13701 ;; This function is called by:
 13702 ;;		_select
 13703 ;;		_xmit_datablock
 13704 ;; This function uses a non-reentrant model
 13705 ;;
 13706                           
 13707                           	psect	text46
 13708  00540E                     __ptext46:
 13709                           	opt callstack 0
 13710  00540E                     _wait_ready:
 13711                           	opt callstack 24
 13712                           
 13713                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13714                           
 13715                           ;incstack = 0
 13716  00540E  0E13               	movlw	19
 13717  005410  6E03               	movwf	wait_ready@tmr+1,c
 13718  005412  0E88               	movlw	136
 13719  005414  6E02               	movwf	wait_ready@tmr,c
 13720  005416  D00D               	goto	l81
 13721  005418                     l3971:
 13722                           
 13723                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13724  005418  0EFF               	movlw	255
 13725  00541A  ECDD  F02A         	call	_SPI1_Exchange8bit
 13726  00541E  0AFF               	xorlw	255
 13727  005420  B4D8               	btfsc	status,2,c
 13728  005422  D00B               	goto	u4450
 13729                           
 13730                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13731  005424  0E42               	movlw	66
 13732  005426                     u8877:
 13733  005426  2EE8               	decfsz	wreg,f,c
 13734  005428  D7FE               	bra	u8877
 13735  00542A  D000               	nop2	
 13736                           
 13737                           ;diskio.c: 81:  }
 13738  00542C  0602               	decf	wait_ready@tmr,f,c
 13739  00542E  A0D8               	btfss	status,0,c
 13740  005430  0603               	decf	wait_ready@tmr+1,f,c
 13741  005432                     l81:
 13742  005432  5002               	movf	wait_ready@tmr,w,c
 13743  005434  1003               	iorwf	wait_ready@tmr+1,w,c
 13744  005436  A4D8               	btfss	status,2,c
 13745  005438  D7EF               	goto	l3971
 13746  00543A                     u4450:
 13747                           
 13748                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13749  00543A  5002               	movf	wait_ready@tmr,w,c
 13750  00543C  1003               	iorwf	wait_ready@tmr+1,w,c
 13751  00543E  B4D8               	btfsc	status,2,c
 13752  005440  D002               	goto	u4460
 13753  005442  0E01               	movlw	1
 13754  005444  0012               	return	
 13755  005446                     u4460:
 13756  005446  0E00               	movlw	0
 13757  005448  0012               	return		;funcret
 13758  00544A                     __end_of_wait_ready:
 13759                           	opt callstack 0
 13760                           
 13761 ;; *************** function _deselect *****************
 13762 ;; Defined at:
 13763 ;;		line 93 in file "diskio.c"
 13764 ;; Parameters:    Size  Location     Type
 13765 ;;		None
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;		None
 13768 ;; Return value:  Size  Location     Type
 13769 ;;                  1    wreg      void 
 13770 ;; Registers used:
 13771 ;;		wreg, status,2, cstack
 13772 ;; Tracked objects:
 13773 ;;		On entry : 0/0
 13774 ;;		On exit  : 0/0
 13775 ;;		Unchanged: 0/0
 13776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13777 ;;      Params:         0       0       0       0       0       0       0       0       0
 13778 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13779 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13780 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13781 ;;Total ram usage:        0 bytes
 13782 ;; Hardware stack levels used:    1
 13783 ;; Hardware stack levels required when called:    1
 13784 ;; This function calls:
 13785 ;;		_SPI1_Exchange8bit
 13786 ;; This function is called by:
 13787 ;;		_select
 13788 ;;		___send_cmd
 13789 ;;		_disk_initialize
 13790 ;;		_disk_read
 13791 ;;		_disk_write
 13792 ;;		_disk_ioctl
 13793 ;; This function uses a non-reentrant model
 13794 ;;
 13795                           
 13796                           	psect	text47
 13797  0055FE                     __ptext47:
 13798                           	opt callstack 0
 13799  0055FE                     _deselect:
 13800                           	opt callstack 22
 13801                           
 13802                           ;incstack = 0
 13803                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13804  0055FE  848A               	bsf	3978,2,c	;volatile
 13805                           
 13806                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13807  005600  0EFF               	movlw	255
 13808  005602  ECDD  F02A         	call	_SPI1_Exchange8bit
 13809  005606  0012               	return		;funcret
 13810  005608                     __end_of_deselect:
 13811                           	opt callstack 0
 13812                           
 13813 ;; *************** function _rcvr_datablock *****************
 13814 ;; Defined at:
 13815 ;;		line 123 in file "diskio.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13818 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 13819 ;;  btr             2    3[COMRAM] unsigned short 
 13820 ;; Auto vars:     Size  Location     Type
 13821 ;;  tmr             2    5[COMRAM] unsigned short 
 13822 ;;  token           1    7[COMRAM] unsigned char 
 13823 ;; Return value:  Size  Location     Type
 13824 ;;                  1    wreg      unsigned char 
 13825 ;; Registers used:
 13826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13827 ;; Tracked objects:
 13828 ;;		On entry : 0/0
 13829 ;;		On exit  : 0/0
 13830 ;;		Unchanged: 0/0
 13831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13832 ;;      Params:         4       0       0       0       0       0       0       0       0
 13833 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13834 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13835 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13836 ;;Total ram usage:        7 bytes
 13837 ;; Hardware stack levels used:    1
 13838 ;; Hardware stack levels required when called:    1
 13839 ;; This function calls:
 13840 ;;		_SPI1_Exchange8bit
 13841 ;; This function is called by:
 13842 ;;		_disk_read
 13843 ;;		_disk_ioctl
 13844 ;; This function uses a non-reentrant model
 13845 ;;
 13846                           
 13847                           	psect	text48
 13848  0051AA                     __ptext48:
 13849                           	opt callstack 0
 13850  0051AA                     _rcvr_datablock:
 13851                           	opt callstack 25
 13852                           
 13853                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13854                           
 13855                           ;incstack = 0
 13856  0051AA  0E07               	movlw	7
 13857  0051AC  6E07               	movwf	rcvr_datablock@tmr+1,c
 13858  0051AE  0ED0               	movlw	208
 13859  0051B0  6E06               	movwf	rcvr_datablock@tmr,c
 13860  0051B2  D00E               	goto	l99
 13861  0051B4                     l4095:
 13862                           
 13863                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13864  0051B4  0EFF               	movlw	255
 13865  0051B6  ECDD  F02A         	call	_SPI1_Exchange8bit
 13866  0051BA  6E08               	movwf	rcvr_datablock@token,c
 13867                           
 13868                           ;diskio.c: 134:   if (token != 0xFF) break;
 13869  0051BC  2808               	incf	rcvr_datablock@token,w,c
 13870  0051BE  A4D8               	btfss	status,2,c
 13871  0051C0  D00B               	goto	u4630
 13872                           
 13873                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13874  0051C2  0E42               	movlw	66
 13875  0051C4                     u8887:
 13876  0051C4  2EE8               	decfsz	wreg,f,c
 13877  0051C6  D7FE               	bra	u8887
 13878  0051C8  D000               	nop2	
 13879                           
 13880                           ;diskio.c: 136:  }
 13881  0051CA  0606               	decf	rcvr_datablock@tmr,f,c
 13882  0051CC  A0D8               	btfss	status,0,c
 13883  0051CE  0607               	decf	rcvr_datablock@tmr+1,f,c
 13884  0051D0                     l99:
 13885  0051D0  5006               	movf	rcvr_datablock@tmr,w,c
 13886  0051D2  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13887  0051D4  A4D8               	btfss	status,2,c
 13888  0051D6  D7EE               	goto	l4095
 13889  0051D8                     u4630:
 13890                           
 13891                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 13892  0051D8  0EFE               	movlw	254
 13893  0051DA  1808               	xorwf	rcvr_datablock@token,w,c
 13894  0051DC  B4D8               	btfsc	status,2,c
 13895  0051DE  D002               	goto	l4111
 13896  0051E0  0E00               	movlw	0
 13897  0051E2  0012               	return	
 13898  0051E4                     l4111:
 13899                           
 13900                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 13901  0051E4  0EFF               	movlw	255
 13902  0051E6  ECDD  F02A         	call	_SPI1_Exchange8bit
 13903  0051EA  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 13904  0051EE  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 13905  0051F2  6EDF               	movwf	indf2,c
 13906  0051F4  4A02               	infsnz	rcvr_datablock@buff,f,c
 13907  0051F6  2A03               	incf	rcvr_datablock@buff+1,f,c
 13908  0051F8  0604               	decf	rcvr_datablock@btr,f,c
 13909  0051FA  A0D8               	btfss	status,0,c
 13910  0051FC  0605               	decf	rcvr_datablock@btr+1,f,c
 13911  0051FE  5004               	movf	rcvr_datablock@btr,w,c
 13912  005200  1005               	iorwf	rcvr_datablock@btr+1,w,c
 13913  005202  A4D8               	btfss	status,2,c
 13914  005204  D7EF               	goto	l4111
 13915                           
 13916                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 13917  005206  0EFF               	movlw	255
 13918  005208  ECDD  F02A         	call	_SPI1_Exchange8bit
 13919                           
 13920                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 13921  00520C  0EFF               	movlw	255
 13922  00520E  ECDD  F02A         	call	_SPI1_Exchange8bit
 13923                           
 13924                           ;diskio.c: 145:  return 1;
 13925  005212  0E01               	movlw	1
 13926  005214  0012               	return		;funcret
 13927  005216                     __end_of_rcvr_datablock:
 13928                           	opt callstack 0
 13929                           
 13930 ;; *************** function _SPI1_Exchange8bit *****************
 13931 ;; Defined at:
 13932 ;;		line 90 in file "mcc_generated_files/spi1.c"
 13933 ;; Parameters:    Size  Location     Type
 13934 ;;  data            1    wreg     unsigned char 
 13935 ;; Auto vars:     Size  Location     Type
 13936 ;;  data            1    0[COMRAM] unsigned char 
 13937 ;; Return value:  Size  Location     Type
 13938 ;;                  1    wreg      unsigned char 
 13939 ;; Registers used:
 13940 ;;		wreg, status,2
 13941 ;; Tracked objects:
 13942 ;;		On entry : 0/0
 13943 ;;		On exit  : 0/0
 13944 ;;		Unchanged: 0/0
 13945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13946 ;;      Params:         0       0       0       0       0       0       0       0       0
 13947 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13948 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13949 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13950 ;;Total ram usage:        1 bytes
 13951 ;; Hardware stack levels used:    1
 13952 ;; This function calls:
 13953 ;;		Nothing
 13954 ;; This function is called by:
 13955 ;;		_wait_ready
 13956 ;;		_deselect
 13957 ;;		_select
 13958 ;;		_rcvr_datablock
 13959 ;;		_xmit_datablock
 13960 ;;		___send_cmd
 13961 ;;		_disk_initialize
 13962 ;;		_disk_ioctl
 13963 ;;		_SPI1_Exchange8bitBuffer
 13964 ;; This function uses a non-reentrant model
 13965 ;;
 13966                           
 13967                           	psect	text49
 13968  0055BA                     __ptext49:
 13969                           	opt callstack 0
 13970  0055BA                     _SPI1_Exchange8bit:
 13971                           	opt callstack 24
 13972                           
 13973                           ;incstack = 0
 13974                           ;SPI1_Exchange8bit@data stored from wreg
 13975  0055BA  6E01               	movwf	SPI1_Exchange8bit@data,c
 13976                           
 13977                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 13978  0055BC  9EC6               	bcf	4038,7,c	;volatile
 13979                           
 13980                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 13981  0055BE  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 13982  0055C2                     l818:
 13983                           
 13984                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 13985  0055C2  A0C7               	btfss	4039,0,c	;volatile
 13986  0055C4  D7FE               	goto	l818
 13987                           
 13988                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 13989  0055C6  50C9               	movf	4041,w,c	;volatile
 13990  0055C8  0012               	return		;funcret
 13991  0055CA                     __end_of_SPI1_Exchange8bit:
 13992                           	opt callstack 0
 13993                           
 13994 ;; *************** function ___delay_sec *****************
 13995 ;; Defined at:
 13996 ;;		line 10 in file "Main.c"
 13997 ;; Parameters:    Size  Location     Type
 13998 ;;  sec             1    wreg     unsigned char 
 13999 ;; Auto vars:     Size  Location     Type
 14000 ;;  sec             1    3[COMRAM] unsigned char 
 14001 ;;  i               1    4[COMRAM] unsigned char 
 14002 ;; Return value:  Size  Location     Type
 14003 ;;                  1    wreg      void 
 14004 ;; Registers used:
 14005 ;;		wreg, status,2, status,0, prodl, prodh
 14006 ;; Tracked objects:
 14007 ;;		On entry : 0/0
 14008 ;;		On exit  : 0/0
 14009 ;;		Unchanged: 0/0
 14010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14011 ;;      Params:         0       0       0       0       0       0       0       0       0
 14012 ;;      Locals:         2       0       0       0       0       0       0       0       0
 14013 ;;      Temps:          3       0       0       0       0       0       0       0       0
 14014 ;;      Totals:         5       0       0       0       0       0       0       0       0
 14015 ;;Total ram usage:        5 bytes
 14016 ;; Hardware stack levels used:    1
 14017 ;; This function calls:
 14018 ;;		Nothing
 14019 ;; This function is called by:
 14020 ;;		_guardar
 14021 ;;		_main
 14022 ;; This function uses a non-reentrant model
 14023 ;;
 14024                           
 14025                           	psect	text50
 14026  005484                     __ptext50:
 14027                           	opt callstack 0
 14028  005484                     ___delay_sec:
 14029                           	opt callstack 29
 14030                           
 14031                           ;incstack = 0
 14032                           ;___delay_sec@sec stored from wreg
 14033  005484  6E04               	movwf	___delay_sec@sec,c
 14034                           
 14035                           ;Main.c: 11:     for(char i=0;i<=(50*sec);i++) {
 14036  005486  0E00               	movlw	0
 14037  005488  6E05               	movwf	___delay_sec@i,c
 14038  00548A  D008               	goto	l5739
 14039  00548C                     l5735:
 14040                           
 14041                           ;Main.c: 12:         _delay((unsigned long)((20)*(8000000/4000.0)));
 14042  00548C  0E34               	movlw	52
 14043  00548E  6E01               	movwf	??___delay_sec& (0+255),c
 14044  005490  0EF2               	movlw	242
 14045  005492                     u8897:
 14046  005492  2EE8               	decfsz	wreg,f,c
 14047  005494  D7FE               	bra	u8897
 14048  005496  2E01               	decfsz	??___delay_sec& (0+255),f,c
 14049  005498  D7FC               	bra	u8897
 14050                           
 14051                           ;Main.c: 13:     }
 14052  00549A  2A05               	incf	___delay_sec@i,f,c
 14053  00549C                     l5739:
 14054  00549C  5005               	movf	___delay_sec@i,w,c
 14055  00549E  6E01               	movwf	??___delay_sec& (0+255),c
 14056  0054A0  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 14057  0054A2  5004               	movf	___delay_sec@sec,w,c
 14058  0054A4  0D32               	mullw	50
 14059  0054A6  5001               	movf	??___delay_sec,w,c
 14060  0054A8  5CF3               	subwf	prodl,w,c
 14061  0054AA  50F4               	movf	prodh,w,c
 14062  0054AC  0A80               	xorlw	128
 14063  0054AE  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 14064  0054B0  5002               	movf	??___delay_sec+1,w,c
 14065  0054B2  0A80               	xorlw	128
 14066  0054B4  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 14067  0054B6  A0D8               	btfss	status,0,c
 14068  0054B8  0012               	return	
 14069  0054BA  D7E8               	goto	l5735
 14070  0054BC                     __end_of___delay_sec:
 14071                           	opt callstack 0
 14072                           
 14073 ;; *************** function _SYSTEM_Initialize *****************
 14074 ;; Defined at:
 14075 ;;		line 116 in file "mcc_generated_files/mcc.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;		None
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;		None
 14080 ;; Return value:  Size  Location     Type
 14081 ;;                  1    wreg      void 
 14082 ;; Registers used:
 14083 ;;		wreg, status,2, cstack
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/0
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14089 ;;      Params:         0       0       0       0       0       0       0       0       0
 14090 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14091 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14092 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14093 ;;Total ram usage:        0 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    1
 14096 ;; This function calls:
 14097 ;;		_OSCILLATOR_Initialize
 14098 ;;		_PIN_MANAGER_Initialize
 14099 ;;		_SPI1_Initialize
 14100 ;; This function is called by:
 14101 ;;		_guardar
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           	psect	text51
 14106  0055D8                     __ptext51:
 14107                           	opt callstack 0
 14108  0055D8                     _SYSTEM_Initialize:
 14109                           	opt callstack 28
 14110                           
 14111                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 14112                           
 14113                           ;incstack = 0
 14114  0055D8  EC89  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 14115                           
 14116                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 14117  0055DC  ECD4  F02A         	call	_OSCILLATOR_Initialize	;wreg free
 14118                           
 14119                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14120  0055E0  ECF3  F02A         	call	_SPI1_Initialize	;wreg free
 14121  0055E4  0012               	return		;funcret
 14122  0055E6                     __end_of_SYSTEM_Initialize:
 14123                           	opt callstack 0
 14124                           
 14125 ;; *************** function _SPI1_Initialize *****************
 14126 ;; Defined at:
 14127 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;		None
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;		None
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      void 
 14134 ;; Registers used:
 14135 ;;		wreg, status,2
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14141 ;;      Params:         0       0       0       0       0       0       0       0       0
 14142 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14143 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14144 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14145 ;;Total ram usage:        0 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; This function calls:
 14148 ;;		Nothing
 14149 ;; This function is called by:
 14150 ;;		_disk_initialize
 14151 ;;		_SYSTEM_Initialize
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text52
 14156  0055E6                     __ptext52:
 14157                           	opt callstack 0
 14158  0055E6                     _SPI1_Initialize:
 14159                           	opt callstack 26
 14160                           
 14161                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14162                           
 14163                           ;incstack = 0
 14164  0055E6  0E40               	movlw	64
 14165  0055E8  6EC7               	movwf	4039,c	;volatile
 14166                           
 14167                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14168  0055EA  0E22               	movlw	34
 14169  0055EC  6EC6               	movwf	4038,c	;volatile
 14170                           
 14171                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14172  0055EE  0E00               	movlw	0
 14173  0055F0  6EC8               	movwf	4040,c	;volatile
 14174  0055F2  0012               	return		;funcret
 14175  0055F4                     __end_of_SPI1_Initialize:
 14176                           	opt callstack 0
 14177                           
 14178 ;; *************** function _PIN_MANAGER_Initialize *****************
 14179 ;; Defined at:
 14180 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14181 ;; Parameters:    Size  Location     Type
 14182 ;;		None
 14183 ;; Auto vars:     Size  Location     Type
 14184 ;;		None
 14185 ;; Return value:  Size  Location     Type
 14186 ;;                  1    wreg      void 
 14187 ;; Registers used:
 14188 ;;		wreg, status,2
 14189 ;; Tracked objects:
 14190 ;;		On entry : 0/0
 14191 ;;		On exit  : 0/0
 14192 ;;		Unchanged: 0/0
 14193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14194 ;;      Params:         0       0       0       0       0       0       0       0       0
 14195 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14196 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14197 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14198 ;;Total ram usage:        0 bytes
 14199 ;; Hardware stack levels used:    1
 14200 ;; This function calls:
 14201 ;;		Nothing
 14202 ;; This function is called by:
 14203 ;;		_SYSTEM_Initialize
 14204 ;; This function uses a non-reentrant model
 14205 ;;
 14206                           
 14207                           	psect	text53
 14208  005512                     __ptext53:
 14209                           	opt callstack 0
 14210  005512                     _PIN_MANAGER_Initialize:
 14211                           	opt callstack 28
 14212                           
 14213                           ;mcc_generated_files/pin_manager.c: 58:     LATA = 0x00;
 14214                           
 14215                           ;incstack = 0
 14216  005512  0E00               	movlw	0
 14217  005514  6E89               	movwf	3977,c	;volatile
 14218                           
 14219                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14220  005516  0E04               	movlw	4
 14221  005518  6E8A               	movwf	3978,c	;volatile
 14222                           
 14223                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14224  00551A  0E00               	movlw	0
 14225  00551C  6E8B               	movwf	3979,c	;volatile
 14226                           
 14227                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0xFF;
 14228  00551E  6892               	setf	3986,c	;volatile
 14229                           
 14230                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14231  005520  0EF1               	movlw	241
 14232  005522  6E93               	movwf	3987,c	;volatile
 14233                           
 14234                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14235  005524  0EC7               	movlw	199
 14236  005526  6E94               	movwf	3988,c	;volatile
 14237                           
 14238                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14239  005528  0EC4               	movlw	196
 14240  00552A  010F               	movlb	15	; () banked
 14241  00552C  6F5D               	movwf	93,b	;volatile
 14242                           
 14243                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14244  00552E  0E30               	movlw	48
 14245  005530  6F5C               	movwf	92,b	;volatile
 14246                           
 14247                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x2F;
 14248  005532  0E2F               	movlw	47
 14249  005534  6F5B               	movwf	91,b	;volatile
 14250                           
 14251                           ; BSR set to: 15
 14252                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14253  005536  6885               	setf	3973,c	;volatile
 14254                           
 14255                           ; BSR set to: 15
 14256                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14257  005538  9EF1               	bcf	4081,7,c	;volatile
 14258                           
 14259                           ; BSR set to: 15
 14260  00553A  0012               	return		;funcret
 14261  00553C                     __end_of_PIN_MANAGER_Initialize:
 14262                           	opt callstack 0
 14263                           
 14264 ;; *************** function _OSCILLATOR_Initialize *****************
 14265 ;; Defined at:
 14266 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;		None
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;		None
 14271 ;; Return value:  Size  Location     Type
 14272 ;;                  1    wreg      void 
 14273 ;; Registers used:
 14274 ;;		wreg, status,2
 14275 ;; Tracked objects:
 14276 ;;		On entry : 0/0
 14277 ;;		On exit  : 0/0
 14278 ;;		Unchanged: 0/0
 14279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14280 ;;      Params:         0       0       0       0       0       0       0       0       0
 14281 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14282 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14283 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14284 ;;Total ram usage:        0 bytes
 14285 ;; Hardware stack levels used:    1
 14286 ;; This function calls:
 14287 ;;		Nothing
 14288 ;; This function is called by:
 14289 ;;		_SYSTEM_Initialize
 14290 ;; This function uses a non-reentrant model
 14291 ;;
 14292                           
 14293                           	psect	text54
 14294  0055A8                     __ptext54:
 14295                           	opt callstack 0
 14296  0055A8                     _OSCILLATOR_Initialize:
 14297                           	opt callstack 28
 14298                           
 14299                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14300                           
 14301                           ; BSR set to: 15
 14302                           ;incstack = 0
 14303  0055A8  0E60               	movlw	96
 14304  0055AA  6ED3               	movwf	4051,c	;volatile
 14305                           
 14306                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14307  0055AC  0E00               	movlw	0
 14308  0055AE  6ED2               	movwf	4050,c	;volatile
 14309                           
 14310                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14311  0055B0  0E00               	movlw	0
 14312  0055B2  6E9B               	movwf	3995,c	;volatile
 14313                           
 14314                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14315  0055B4  0E00               	movlw	0
 14316  0055B6  6EB5               	movwf	4021,c	;volatile
 14317  0055B8  0012               	return		;funcret
 14318  0055BA                     __end_of_OSCILLATOR_Initialize:
 14319                           	opt callstack 0
 14320                           
 14321 ;; *************** function _Error *****************
 14322 ;; Defined at:
 14323 ;;		line 13 in file "./Errores.h"
 14324 ;; Parameters:    Size  Location     Type
 14325 ;;  a               2    0[COMRAM] int 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;  v_seg          10    2[COMRAM] unsigned char [10]
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14337 ;;      Params:         2       0       0       0       0       0       0       0       0
 14338 ;;      Locals:        10       0       0       0       0       0       0       0       0
 14339 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14340 ;;      Totals:        12       0       0       0       0       0       0       0       0
 14341 ;;Total ram usage:       12 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; This function calls:
 14344 ;;		Nothing
 14345 ;; This function is called by:
 14346 ;;		_guardar
 14347 ;; This function uses a non-reentrant model
 14348 ;;
 14349                           
 14350                           	psect	text55
 14351  00532E                     __ptext55:
 14352                           	opt callstack 0
 14353  00532E                     _Error:
 14354                           	opt callstack 29
 14355                           
 14356                           ;./Errores.h: 14:     LATD = 0x00;
 14357                           
 14358                           ;incstack = 0
 14359  00532E  0E00               	movlw	0
 14360  005330  6E8C               	movwf	3980,c	;volatile
 14361                           
 14362                           ;./Errores.h: 15:     TRISD = 0x00;
 14363  005332  0E00               	movlw	0
 14364  005334  6E95               	movwf	3989,c	;volatile
 14365                           
 14366                           ;./Errores.h: 16:     ANSELD = 0x00;
 14367  005336  0E00               	movlw	0
 14368  005338  010F               	movlb	15	; () banked
 14369  00533A  6F5E               	movwf	94,b	;volatile
 14370                           
 14371                           ;./Errores.h: 17:     LATE = 0x00;
 14372  00533C  0E00               	movlw	0
 14373  00533E  6E8D               	movwf	3981,c	;volatile
 14374                           
 14375                           ;./Errores.h: 18:     TRISE = 0x00;
 14376  005340  0E00               	movlw	0
 14377  005342  6E96               	movwf	3990,c	;volatile
 14378                           
 14379                           ;./Errores.h: 19:     ANSELE = 0x00;
 14380  005344  0E00               	movlw	0
 14381  005346  6F5F               	movwf	95,b	;volatile
 14382                           
 14383                           ; BSR set to: 15
 14384                           ;./Errores.h: 21:     unsigned char v_seg[10]={0x7E,0x30,0x6D,0x79,0x33,0x5B,0x5F,0x70,0
      +                          x7F,0x73};
 14385  005348  EE21  F000         	lfsr	2,Error@F5051
 14386  00534C  EE10  F003         	lfsr	1,Error@v_seg
 14387  005350  0E09               	movlw	9
 14388  005352                     u7691:
 14389  005352  CFDB FFE3          	movff	plusw2,plusw1
 14390  005356  06E8               	decf	wreg,f,c
 14391  005358  E2FC               	bc	u7691
 14392                           
 14393                           ; BSR set to: 15
 14394                           ;./Errores.h: 22:     if(a != 33){
 14395  00535A  0E21               	movlw	33
 14396  00535C  1801               	xorwf	Error@a,w,c
 14397  00535E  1002               	iorwf	Error@a+1,w,c
 14398  005360  B4D8               	btfsc	status,2,c
 14399  005362  D00B               	goto	l31
 14400                           
 14401                           ; BSR set to: 15
 14402                           ;./Errores.h: 23:     LATD = v_seg[a];
 14403  005364  0E03               	movlw	low Error@v_seg
 14404  005366  2401               	addwf	Error@a,w,c
 14405  005368  6ED9               	movwf	fsr2l,c
 14406  00536A  0E00               	movlw	high Error@v_seg
 14407  00536C  2002               	addwfc	Error@a+1,w,c
 14408  00536E  6EDA               	movwf	fsr2h,c
 14409  005370  50DF               	movf	indf2,w,c
 14410  005372  6E8C               	movwf	3980,c	;volatile
 14411                           
 14412                           ; BSR set to: 15
 14413                           ;./Errores.h: 24:     LATE = 0x01;
 14414  005374  0E01               	movlw	1
 14415  005376  6E8D               	movwf	3981,c	;volatile
 14416                           
 14417                           ;./Errores.h: 25:     }
 14418  005378  0012               	return	
 14419  00537A                     l31:
 14420                           
 14421                           ; BSR set to: 15
 14422                           ;./Errores.h: 27:     LATD = v_seg[6];
 14423  00537A  C009  FF8C         	movff	Error@v_seg+6,3980	;volatile
 14424                           
 14425                           ; BSR set to: 15
 14426                           ;./Errores.h: 28:     LATE = 0x02;
 14427  00537E  0E02               	movlw	2
 14428  005380  6E8D               	movwf	3981,c	;volatile
 14429                           
 14430                           ; BSR set to: 15
 14431  005382  0012               	return		;funcret
 14432  005384                     __end_of_Error:
 14433                           	opt callstack 0
 14434                           
 14435                           	psect	rparam
 14436  0000                     tosu	equ	0xFFF
 14437                           tosh	equ	0xFFE
 14438                           tosl	equ	0xFFD
 14439                           stkptr	equ	0xFFC
 14440                           pclatu	equ	0xFFB
 14441                           pclath	equ	0xFFA
 14442                           pcl	equ	0xFF9
 14443                           tblptru	equ	0xFF8
 14444                           tblptrh	equ	0xFF7
 14445                           tblptrl	equ	0xFF6
 14446                           tablat	equ	0xFF5
 14447                           prodh	equ	0xFF4
 14448                           prodl	equ	0xFF3
 14449                           indf0	equ	0xFEF
 14450                           postinc0	equ	0xFEE
 14451                           postdec0	equ	0xFED
 14452                           preinc0	equ	0xFEC
 14453                           plusw0	equ	0xFEB
 14454                           fsr0h	equ	0xFEA
 14455                           fsr0l	equ	0xFE9
 14456                           wreg	equ	0xFE8
 14457                           indf1	equ	0xFE7
 14458                           postinc1	equ	0xFE6
 14459                           postdec1	equ	0xFE5
 14460                           preinc1	equ	0xFE4
 14461                           plusw1	equ	0xFE3
 14462                           fsr1h	equ	0xFE2
 14463                           fsr1l	equ	0xFE1
 14464                           bsr	equ	0xFE0
 14465                           indf2	equ	0xFDF
 14466                           postinc2	equ	0xFDE
 14467                           postdec2	equ	0xFDD
 14468                           preinc2	equ	0xFDC
 14469                           plusw2	equ	0xFDB
 14470                           fsr2h	equ	0xFDA
 14471                           fsr2l	equ	0xFD9
 14472                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    0
    Data        11
    BSS         596
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    116     155
    BANK1           256      0      10
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> guardar@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S361$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S361$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S361$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    guardar@data	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    S49$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S49$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_guardar
    _guardar->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  431220
                        ___delay_sec
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              4     2      2  431174
                                            112 BANK0      4     2      2
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (2) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (5) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (6) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (7) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (6) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error                                               12    10      2    1079
                                              0 COMRAM    12    10      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___delay_sec
   _guardar
     _Error
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
       _mem_cpy
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _validate
         _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       A       8        3.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     74      9B       5       96.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     104       6        0.0%
DATA                 0      0     332       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 17 21:12:20 2019

              _SPI1_Exchange8bit 55BA                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l31 537A  
                             l61 5594                               l81 5432  
                             l99 51D0                      disk_ioctl@n 0037  
            ___wmul@multiplicand 0003                   ??_dir_register 0060  
               disk_write@sector 0013                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                    create_name@dp 0009  
                  create_name@ni 0016                     __CFG_CP2$OFF 000000  
                  create_name@si 0013                   create_chain@cs 0069  
                   __CFG_CP3$OFF 000000                   create_chain@fs 0056  
                    __CFG_LVP$ON 000000                              l200 4690  
                            l134 3BA2                              l400 3636  
                            l321 2C68                              l145 3C6A  
                            l306 3F3C                              l219 2102  
                            l316 2C5E                              l156 3D68  
                            l173 4B96                              l413 380E  
                            l190 460A                              l342 2424  
                            l319 2FAE                              l159 3D38  
                            l520 3B6E                              l177 4BA0  
                            l178 4BB4                              l194 4614  
                            l195 461C                              l611 1010  
                            l603 0CB2                              l196 4630  
                            l381 3462                              l533 444C  
                            l366 434A                              l455 47F2  
                            l731 19CA                              l652 322C  
                            l645 30A2                              l398 363E  
                            l654 3214                              l646 309A  
                            l735 1C5A                              l584 09D0  
                            l496 3A18                              l818 55C2  
                            l597 0B18                              l875 501C  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 00DA              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                   ??_create_chain 005C  
                            wreg 000FE8                disk_initialize@ty 001A  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                     Error@F5051 0100                  create_chain@scl 0061  
                create_chain@res 0060                      ld_clust@dir 0003  
                           l4111 51E4                             l4025 5078  
                           l4009 504A                             l5001 47C8  
                           l4043 50AC                             l4035 5098  
                           l4037 509C                             l4029 5084  
                           l4053 513C                             l4221 41BA  
                           l4215 4140                             l5015 511C  
                           l4073 51A6                             l4161 46F2  
                           l4225 41C6                             l4233 4220  
                           l4401 54C6                             l4305 2F82  
                           l6001 1E78                             l5201 49F8  
                           l4059 5152                             l4147 4672  
                           l4251 4EF8                             l5043 4880  
                           l4253 4F14                             l4405 54D6  
                           l4333 24E0                             l5133 3AB0  
                           l5061 3928                             l5029 481A  
                           l4095 51B4                             l4183 4BC8  
                           l5303 500E                             l4415 4D5E  
                           l4351 25FC                             l4335 2514  
                           l6007 1EEA                             l5231 4AA2  
                           l6103 15FA                             l6111 16F4  
                           l4089 53F6                             l4441 3432  
                           l5153 3AEC                             l5145 3ADA  
                           l5073 3996                             l5049 48C0  
                           l5313 425A                             l6121 1772  
                           l4531 1F80                             l4507 55A2  
                           l4283 2DD4                             l4355 2632  
                           l5251 4952                             l5227 4A98  
                           l5163 3B2C                             l5155 3AFC  
                           l5059 3924                             l5315 4262  
                           l6123 1790                             l4605 235E  
                           l4541 205E                             l4621 23E6  
                           l4285 2DF2                             l4365 26E4  
                           l4381 2814                             l4445 3472  
                           l4437 340E                             l4429 33BE  
                           l5245 4934                             l4701 384E  
                           l5157 3B02                             l5413 44B0  
                           l6109 16D4                             l6053 1374  
                           l6213 4080                             l4199 4C3A  
                           l4527 1F72                             l4519 1F64  
                           l4391 52E8                             l4295 2EB8  
                           l4287 2DFC                             l4375 27D6  
                           l5263 49CA                             l5503 0A06  
                           l5095 39F4                             l6135 1822  
                           l6119 174E                             l6071 1404  
                           l6055 13B4                             l6039 128C  
                           l4617 239E                             l4609 2366  
                           l4561 2150                             l5281 4FA8  
                           l4481 35B6                             l4473 3544  
                           l4457 34D0                             l5257 4990  
                           l5177 3B5C                             l5329 42C0  
                           l6153 1930                             l6129 17D8  
                           l6065 13E0                             l6225 40BE  
                           l4619 23A4                             l5291 4FCE  
                           l4395 52FC                             l4379 27E8  
                           l5611 0D9E                             l5531 0AB4  
                           l5515 0A62                             l5451 08C8  
                           l5435 0884                             l5427 085E  
                           l4803 2B14                             l4811 2BBA  
                           l4643 5386                             l5099 3A0E  
                           l5339 433A                             l6139 1898  
                           l6091 151E                             l6083 14BC  
                           l6075 1454                             l6147 18D4  
                           l4557 2148                             l5277 4FA4  
                           l5293 4FDA                             l5517 0A88  
                           l5509 0A1C                             l4725 285E  
                           l4645 538A                             l4637 522E  
                           l4583 22BC                             l4575 2226  
                           l4567 2196                             l4487 361E  
                           l5199 49F4                             l5615 0DB4  
                           l5535 0AB8                             l5455 08CC  
                           l4807 2B5C                             l4751 297E  
                           l4735 28C2                             l4663 36BA  
                           l5359 4B7C                             l4833 3BB8  
                           l5529 0AAE                             l4745 2968  
                           l4681 3782                             l5377 43EC  
                           l5369 4398                             l6097 15A6  
                           l6177 3F74                             l3971 5418  
                           l4595 2326                             l4579 22AE  
                           l5707 45F2                             l4851 3C06  
                           l5635 0EEE                             l5475 0910  
                           l5467 0906                             l4589 22F4  
                           l5901 195C                             l4837 3BC0  
                           l4829 3BAE                             l5557 0B76  
                           l4669 370A                             l5735 548C  
                           l4599 2348                             l4863 3C3A  
                           l5671 11B4                             l5647 0FE2  
                           l5487 094E                             l4791 2ABE  
                           l4767 2A00                             l4679 375C  
                           l5815 3072                             l5807 3048  
                           l6199 401E                             l3993 5578  
                           l4881 3C9A                             l5497 09B4  
                           l5753 4DE6                             l4689 37CE  
                           l4945 4CF6                             l4929 4C60  
                           l4937 4CB6                             l5739 549C  
                           l5923 1B9A                             l5907 197E  
                           l5763 4E28                             l4779 2A1E  
                           l4939 4CC4                             l5819 307E  
                           l4973 3F14                             l4893 3CD0  
                           l5773 4E54                             l5951 1C84  
                           l5759 4E14                             l5855 31FA  
                           l5961 1D1C                             l5945 1C3E  
                           l5937 1C18                             l4897 3CF6  
                           l4889 3CC2                             l4985 472C  
                           l5873 3272                             l5785 2FCE  
                           l5947 1C76                             l4899 3D08  
                           l5959 1CE8                             l5983 1DB0  
                           l4999 47C0                             l5969 1D30  
                           l5889 3352                             STR_1 0814  
                           STR_2 0814                             STR_3 0824  
                           STR_4 0801                             STR_5 0815  
                           STR_6 0815                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5010 2C2E                             u5100 2EFA  
                           u5020 2C4E                             u5200 261A  
                           u5120 23FE                             u6000 2964  
                           u5105 2EF0                             u5130 241E  
                           u6010 297A                             u5035 2CB2  
                           u5220 2726                             u5300 33AC  
                           u5205 2610                             u5055 2D50  
                           u7000 4FDE                             u5320 3420  
                           u6200 3C72                             u6120 3BA8  
                           u5225 271C                             u5145 246E  
                           u6105 2BDC                             u4450 543A  
                           u4460 5446                             u7020 4234  
                           u5085 2DE0                             u4630 51D8  
                           u4550 5138                             u5430 35F6  
                           u5350 34BE                             u6310 4C8E  
                           u7030 4254                             u5175 2560  
                           u4800 4702                             u5600 2178  
                           u4570 5172                             u5370 351C  
                           u6330 4CEC                             u7130 4392  
                           u4715 4622                             u4900 4C1C  
                           u6420 47AC                             u5605 216E  
                           u5525 2036                             u6317 4C7E  
                           u4830 4B92                             u4670 4606  
                           u5550 20FC                             u6270 3D40  
                           u5535 2066                             u4920 4C4A  
                           u4760 46AC                             u5480 1F7C  
                           u8120 1D40                             u6440 47E6  
                           u7080 4314                             u4577 5168  
                           u5545 208C                             u8025 1A42  
                           u6337 4CE2                             u6290 3D64  
                           u5810 36B6                             u6610 39F0  
                           u7090 436A                             u5555 20F2  
                           u4780 46D4                             u8140 1DC4  
                           u8060 1C04                             u7260 08C4  
                           u6700 3A66                             u7180 4446  
                           u5645 21DA                             u8070 1C2A  
                           u7510 0D9A                             u6470 4814  
                           u5655 21FC                             u4880 4BF0  
                           u5664 221A                             u7520 0DB0  
                           u7360 0AA2                             u6640 3A24  
                           u5760 523E                             u4865 4BA6  
                           u5665 2214                             u8170 1E64  
                           u5770 5272                             u5675 2264  
                           u5915 3884                             u4980 4E9C  
                           u7380 0AB4                             u5940 285A  
                           u6660 3A30                             u8260 12E6  
                           u5925 38D0                             u8190 1ECE  
                           u6910 494E                             u5870 37DE  
                           u5790 53BA                             u6590 39DE  
                           u8175 1E5A                             u6920 498C  
                           u6680 3A5A                             u8425 169A  
                           u8265 12DC                             u6850 4A1A  
                           u8530 3F92                             u7555 0ECE  
                           u8435 16DE                             u7580 1036  
                           u7485 0CE6                             u8375 1536  
                           u7760 4E50                             u8480 18DC  
                           u7585 102C                             u5985 28CE  
                           u7691 5352                             u6980 4FA4  
                           u7970 1958                             u8857 3C5C  
                           u8867 3D2A                             u8877 5426  
                           u8887 51C4                             u8897 5492  
                           _WPUB 000F85                             _Fsid 00D4  
                           _Stat 00FA                             _data 00D9  
                           _main 5580                     find_volume@i 0095  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                  disk_ioctl@cmd 0011                    disk_ioctl@csd 0021  
                  disk_read@buff 0011                    disk_ioctl@res 0036  
                  disk_ioctl@ptr 0038                    disk_read@pdrv 0019  
                           prodh 000FF4                             prodl 000FF3  
                 ??_get_ldnumber 0003                             start 0000  
      __end_of_SPI1_Exchange8bit 55CA                    __CFG_IESO$OFF 000000  
                     Error@v_seg 0003                    __CFG_MCLRE$ON 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0086  
             disk_initialize@ocr 0013                     ___param_bank 000000  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0058                      _sync_window 40CC  
 __size_of_OSCILLATOR_Initialize 0012    __end_of_OSCILLATOR_Initialize 55BA  
                          ?_main 0001                  __end_of___lldiv 502E  
                 __CFG_DEBUG$OFF 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 5484                            _FatFs 010A  
                __end_of_chk_chr 53CC               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F50                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 4E72                            _Error 532E  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 3912  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 1942  
                __end_of_get_fat 2FC0                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 527C  
                __end_of_mem_cpy 4D08                  __end_of_mem_set 54E8  
                __end_of_guardar 40CC                    find_volume@br 0060  
                  find_volume@fs 0098                    find_volume@pt 007A  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw1 000FE3                            plusw2 000FDB  
                __end_of_put_fat 2818                            status 000FD8  
                 __CFG_T3CMX$RC0 000000                  __end_of_sync_fs 3F40  
                 __CFG_ICPRT$OFF 000000                    get_ldnumber@i 000B  
       __size_of_SPI1_Initialize 000E                  __initialization 527C  
            disk_initialize@pdrv 0012                     __end_of_main 5596  
                   clust2sect@fs 000D                   __CFG_PCLKEN$ON 000000  
                         ??_main 0060                    __activetblptr 000002  
                 __CFG_SDOMX$RB3 000000                           ?_Error 0001  
                __CFG_CCP2MX$RC1 000000                           _ACTCON 000FB5  
                         _ANSELA 000F5B                           _ANSELB 000F5C  
                         _ANSELC 000F5D                           _ANSELD 000F5E  
                         _ANSELE 000F5F                   __CFG_WDTEN$OFF 000000  
                         _OSCCON 000FD3             __end_of_dir_register 4B82  
               __end_of_check_fs 49CE                      guardar@data 00D0  
          SPI1_Exchange8bit@data 0001                           Error@a 0001  
     __size_of_SPI1_Exchange8bit 0010             __size_of_create_name 0284  
       __size_of_disk_initialize 01EA                 __end_of_deselect 5608  
               __end_of_dir_find 48E2                   __CFG_XINST$OFF 000000  
              __end_of_SPI1_Open 55D8                 __end_of_dir_next 2C1E  
                   ?_move_window 0030             __end_of_create_chain 3650  
               __end_of_ld_clust 512E                           ___lmul 52D8  
           __size_of_find_volume 09AE             __size_of_disk_status 0012  
                         ___wmul 553C                   __CFG_STVREN$ON 000000  
                      ??___lldiv 0009                           _f_open 2FC0  
                         _f_sync 44B4                        ??_f_close 0050  
                 find_volume@fmt 0097                           clear_0 52B6  
                         clear_1 52C8                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 5562                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
               __end_of_send_cmd 540E                        ??_mem_cmp 0007  
                      ??_mem_cpy 0007                        ??_mem_set 0007  
                      ??_guardar 0060                  disk_ioctl@csize 0032  
               __end_of_validate 4FAC             __end_of_get_ldnumber 4AAC  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 5512  
                      ??_put_fat 0045                  xmit_datablock@i 0007  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 55D8  
                     __accesstop 0060          __end_of__initialization 52CE  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
                  __end_of_Error 5384                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                     __pidataBANK0 5608  
                   __pidataBANK1 55F4              ??_SYSTEM_Initialize 0001  
                     ___send_cmd 502E             __size_of_follow_path 0146  
              ??_SPI1_Initialize 0001                    ??___delay_sec 0001  
             __size_of_dir_alloc 00F0                          ??_Error 0003  
             __size_of_disk_read 00CC        __end_of_SYSTEM_Initialize 55E6  
                     __pbssBANK0 00D4                __CFG_PLLSEL$PLL4X 000000  
                        ?___lmul 0001                          ?___wmul 0001  
                        ?_f_open 009A          __size_of_xmit_datablock 007C  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?_check_fs 003B  
                     _disk_ioctl 1F50                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 45F6                          _OSCTUNE 000F9B  
                    send_cmd@cmd 000F                        ?_deselect 0001  
                    send_cmd@arg 000B                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0056  
                        _SSP1BUF 000FC9                        ?_dir_find 0080  
            __end_of___delay_sec 54BC                        ?_dir_next 006D  
          __size_of_dir_register 00D6                        ?_ld_clust 0001  
                     _clust2sect 4D08                 sync_window@wsect 002C  
                  ?_remove_chain 0056            __size_of_create_chain 02FA  
              __end_of_dir_alloc 47F6                        ?_send_cmd 000B  
                        __Hparam 0000                   ___send_cmd@cmd 000A  
                 ___send_cmd@arg 0004                   ___send_cmd@res 0008  
                        __Lparam 0000                        ?_validate 0002  
              __end_of_disk_read 4C4E                          ff@FatFs 00D6  
                     f_close@res 0050                  __size_of___lmul 0056  
                      ?_st_clust 0001                      ?___send_cmd 0004  
                        ___lldiv 4FAC                  __size_of___wmul 0026  
           __size_of_move_window 00A6                       check_fs@fs 003B  
                __size_of_f_open 0396                     __psmallconst 0800  
                __size_of_f_sync 0142                          _f_close 544A  
          __size_of_get_ldnumber 00DE                          __pcinit 527C  
                        _chk_chr 5384              _disk_initialize$285 0017  
                        _f_lseek 1942                          __ramtop 0800  
                        _f_mount 4DC2                  __size_of_select 001E  
                        __ptext0 5580                          __ptext1 3F40  
                        __ptext2 11DE                          __ptext3 2FC0  
                        __ptext4 4224                          __ptext5 436E  
                        __ptext6 50B0                          __ptext7 47F6  
                        __ptext8 5216                          __ptext9 3912  
                        _dir_sdi 3650                      validate@fil 0008  
                        _f_write 11DE                      validate@obj 0002  
                        _get_fat 2C1E                       chk_chr@chr 0003  
                   _dir_register 4AAC                       chk_chr@str 0001  
                        _mem_cmp 5216                          _mem_cpy 4C4E  
          _OSCILLATOR_Initialize 55A8                          _mem_set 54BC  
                        _guardar 3F40                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3356                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23EE  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 3D80                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 52CE  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 51AA  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 49CE  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 55CA                       _wait_ready 540E  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$775 0011  
                     dir_sdi@idx 0058                      ___delay_sec 5484  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 5216  
                  ??_create_name 000D                 disk_initialize@n 001D  
                     ld_clust@cl 000B                       ld_clust@fs 0001  
                _SPI1_Initialize 55E6                    ??_find_volume 004A  
                  ??_disk_status 0001                   _xmit_datablock 512E  
                     ?_SPI1_Open 0001                   __end_of___lmul 532E  
                    st_clust@dir 0001                   __end_of___wmul 5562  
                 __end_of_f_open 3356                   __end_of_f_sync 45F6  
                 clust2sect@clst 000F           ?_OSCILLATOR_Initialize 0001  
                 __end_of_select 5580             __size_of_sync_window 0158  
            start_initialization 527C  __size_of_PIN_MANAGER_Initialize 002A  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 3B96  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 51AA  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 3B96              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00FA  
                    __pdataBANK1 0100              __end_of_find_volume 11DE  
            __end_of_disk_status 55A8              __size_of_clust2sect 00BA  
                       ??_select 0004             __end_of_remove_chain 436E  
              rcvr_datablock@btr 0004                rcvr_datablock@tmr 0006  
                    __pbssBIGRAM 010A                    __pcstackBANK0 0060  
              __size_of_check_fs 00EC          __end_of_SPI1_Initialize 55F4  
                   check_fs@sect 003D                __size_of_deselect 000A  
              __size_of_dir_find 00EC                __size_of_dir_next 0406  
              __size_of_ld_clust 007E                  _find_volume$880 0074  
         _PIN_MANAGER_Initialize 5512                  _find_volume$879 0070  
                ?_xmit_datablock 0004                __size_of_send_cmd 0042  
                   ??___send_cmd 0008                        _dir_alloc 4706  
                       ?___lldiv 0001                __size_of_validate 0094  
                    ??_SPI1_Open 0001                         ?_f_close 004E  
                      _disk_read 4B82                         ?_chk_chr 0001  
                  follow_path@dp 0086                         ?_f_lseek 006D  
                  follow_path@ns 008C                __size_of_st_clust 002A  
            __end_of_follow_path 44B4                         ?_f_mount 0052  
                       ?_dir_sdi 0056                         ?_f_write 006D  
                       ?_get_fat 003B                      __smallconst 0800  
                       ?_mem_cmp 0001                         ?_mem_cpy 0001  
                       ?_mem_set 0001                         ?_guardar 00D0  
                 __size_of_Error 0056                        f_close@fp 004E  
                       ?_put_fat 003B          __end_of_disk_initialize 3D80  
                       ?_sync_fs 003A                      _get_fat$525 004A  
              find_volume@fasize 008D              __size_of_wait_ready 003C  
             __end_of___send_cmd 50B0                      _create_name 3912  
                 ___wmul@product 0005                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 0830                      _disk_status 5596  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00D8  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                      copy_data0 5290                       put_fat@res 0053  
                     put_fat@val 0041                move_window@sector 0032  
                dir_next@stretch 006F                         __Hrparam 0000  
                      guardar@bw 00D2                         __Lrparam 0000  
                    _follow_path 436E               __CFG_BOREN$SBORDIS 000000  
             __end_of_disk_ioctl 23EE            __size_of_remove_chain 014A  
             __end_of_disk_write 4706          ??_OSCILLATOR_Initialize 0001  
               __size_of___lldiv 0082              __end_of_move_window 4F18  
             __end_of_clust2sect 4DC2                 __size_of_f_close 003A  
               __size_of_chk_chr 0048                 __size_of_f_lseek 060E  
               __size_of_f_mount 00B0                 __size_of_dir_sdi 02C2  
               __size_of_f_write 0764                 __size_of_get_fat 03A2  
                       _check_fs 48E2                 __size_of_mem_cmp 0066  
               __size_of_mem_cpy 00BA                 __size_of_mem_set 002C  
               __size_of_guardar 018C              xmit_datablock@token 0006  
                ___delay_sec@sec 0004                 ??_rcvr_datablock 0006  
                dir_register@res 008C                         _deselect 55FE  
                       __ptext10 5384                         __ptext11 4AAC  
                       __ptext20 55CA                         __ptext12 4C4E  
                       __ptext21 48E2                         __ptext13 4706  
                       __ptext30 44B4                         __ptext22 1942  
                       __ptext14 3650                         __ptext31 4F18  
                       __ptext23 3356                         __ptext15 2818  
                       __ptext40 45F6                         __ptext32 5596  
                       __ptext24 23EE                         __ptext16 4DC2  
                       __ptext41 512E                         __ptext33 3D80  
                       __ptext25 2C1E                         __ptext17 0830  
                       __ptext50 5484                         __ptext42 4B82  
                       __ptext34 54BC                         __ptext26 4D08  
                       __ptext18 49CE                         __ptext51 55D8  
                       __ptext43 53CC                         __ptext35 1F50  
                       __ptext27 52D8                         __ptext19 3B96  
                       __ptext52 55E6                         __ptext44 502E  
                       __ptext36 553C                         __ptext28 4FAC  
                       __ptext53 5512                         __ptext45 5562  
                       __ptext37 54E8                         __ptext29 544A  
                       __ptext54 55A8                         __ptext46 540E  
                       __ptext38 4E72                         __ptext55 532E  
                       __ptext47 55FE                         __ptext39 40CC  
                       __ptext48 51AA                         __ptext49 55BA  
                       _dir_find 47F6                     _SSP1CON1bits 000FC6  
                       _dir_next 2818                    dir_alloc@nent 0082  
               ?_disk_initialize 0001                         _ld_clust 50B0  
               __size_of_put_fat 042A                   sync_window@res 0029  
               __size_of_sync_fs 01C0                    __size_of_main 0016  
                     sync_fs@res 0044                     _remove_chain 4224  
               find_volume@bsect 0091                 find_volume@nclst 0088  
               find_volume@tsect 0084                 find_volume@wmode 0049  
                       f_open@dj 00BA                         f_open@cl 00AF  
                       f_open@fp 009A                         f_open@dw 00B3  
                       _send_cmd 53CC                         _validate 4F18  
                       f_sync@fp 0045                      ??_dir_alloc 0084  
                       _st_clust 54E8                         get_fat@p 0052  
                   ??_wait_ready 0002                    ??_sync_window 001D  
                   _SSP1STATbits 000FC7                      ??_disk_read 0019  
                  _disk_read$294 001A                      f_lseek@clst 0090  
                       mem_cmp@d 0009                         mem_cmp@r 000D  
                       mem_cmp@s 000B                        put_fat@bc 0051  
                       mem_cpy@d 0009                        put_fat@fs 003B  
                       mem_cpy@s 000B                         mem_set@d 0007  
                  wait_ready@tmr 0002               xmit_datablock@buff 0004  
             xmit_datablock@resp 0009                   dir_register@dp 008A  
               ??_xmit_datablock 0007               __end_of_wait_ready 544A  
               ___lldiv@dividend 0001          ?_PIN_MANAGER_Initialize 0001  
                   dir_alloc@res 0089                    sync_window@fs 001B  
                  sync_window@nf 002A                      f_mount@path 0054  
                      sync_fs@fs 003A                      _move_window 4E72  
           __CFG_CPUDIV$NOCLKDIV 000000                         put_fat@p 0054  
                  ?_dir_register 008A                    ___delay_sec@i 0005  
                    dir_alloc@dp 0080                 ___lldiv@quotient 0009  
                    dir_find@dir 0083              __end_of_sync_window 4224  
                    dir_find@res 0085             __size_of___delay_sec 0038  
                  ?_create_chain 0056                     dir_next@clst 007C  
             __CFG_FOSC$INTOSCIO 000000                      dir_sdi@clst 006D  
 __end_of_PIN_MANAGER_Initialize 553C                      dir_sdi@sect 0069  
                   ?_create_name 0009                     f_write@csect 0084  
                   f_write@wbuff 0082                      f_write@buff 006F  
                    f_write@clst 008B                      f_write@sect 0087  
                   ?_find_volume 0045                      f_write@wcnt 008F  
                  ?_get_ldnumber 0001                     ?_disk_status 0001  
                    _put_fat$551 004D                      _put_fat$552 004F  
