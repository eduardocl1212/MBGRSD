

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 15 22:13:10 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72  0000                     
    73                           ; Version 2.05
    74                           ; Generated 20/12/2018 GMT
    75                           ; 
    76                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F45K50 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     
   108                           	psect	idataBANK0
   109  00565C                     __pidataBANK0:
   110                           	opt callstack 0
   111                           
   112                           ;initializer for _Stat
   113  00565C  01                 	db	1
   114  0000                     _ANSELE	set	3935
   115  0000                     _ANSELD	set	3934
   116  0000                     _ANSELB	set	3932
   117  0000                     _ANSELC	set	3933
   118  0000                     _ANSELA	set	3931
   119  0000                     _SSP1STATbits	set	4039
   120  0000                     _SSP1BUF	set	4041
   121  0000                     _SSP1CON1bits	set	4038
   122  0000                     _SSP1ADD	set	4040
   123  0000                     _SSP1CON1	set	4038
   124  0000                     _SSP1STAT	set	4039
   125  0000                     _INTCON2bits	set	4081
   126  0000                     _WPUB	set	3973
   127  0000                     _TRISD	set	3989
   128  0000                     _TRISC	set	3988
   129  0000                     _TRISB	set	3987
   130  0000                     _TRISE	set	3990
   131  0000                     _LATC	set	3979
   132  0000                     _LATB	set	3978
   133  0000                     _LATD	set	3980
   134  0000                     _LATE	set	3981
   135  0000                     _ACTCON	set	4021
   136  0000                     _OSCTUNE	set	3995
   137  0000                     _OSCCON2	set	4050
   138  0000                     _OSCCON	set	4051
   139  0000                     _LATBbits	set	3978
   140  0000                     _TRISA	set	3986
   141  0000                     _LATA	set	3977
   142  0000                     _LATAbits	set	3977
   143                           
   144                           	psect	smallconst
   145  000800                     __psmallconst:
   146                           	opt callstack 0
   147  000800  00                 	db	0
   148  000801                     STR_4:
   149  000801  50                 	db	80	;'P'
   150  000802  72                 	db	114	;'r'
   151  000803  75                 	db	117	;'u'
   152  000804  65                 	db	101	;'e'
   153  000805  62                 	db	98	;'b'
   154  000806  61                 	db	97	;'a'
   155  000807  20                 	db	32
   156  000808  70                 	db	112	;'p'
   157  000809  6F                 	db	111	;'o'
   158  00080A  72                 	db	114	;'r'
   159  00080B  20                 	db	32
   160  00080C  41                 	db	65	;'A'
   161  00080D  52                 	db	82	;'R'
   162  00080E  52                 	db	82	;'R'
   163  00080F  41                 	db	65	;'A'
   164  000810  59                 	db	89	;'Y'
   165  000811  20                 	db	32
   166  000812  0D                 	db	13
   167  000813  0A                 	db	10
   168  000814  00                 	db	0
   169  000815                     STR_5:
   170  000815  22                 	db	34
   171  000816  2A                 	db	42
   172  000817  2B                 	db	43
   173  000818  2C                 	db	44
   174  000819  3A                 	db	58	;':'
   175  00081A  3B                 	db	59	;';'
   176  00081B  3C                 	db	60	;'<'
   177  00081C  3D                 	db	61	;'='
   178  00081D  3E                 	db	62	;'>'
   179  00081E  3F                 	db	63	;'?'
   180  00081F  5B                 	db	91	;'['
   181  000820  5D                 	db	93	;']'
   182  000821  7C                 	db	124
   183  000822  7F                 	db	127
   184  000823  00                 	db	0
   185  000824                     STR_3:
   186  000824  42                 	db	66	;'B'
   187  000825  65                 	db	101	;'e'
   188  000826  65                 	db	101	;'e'
   189  000827  44                 	db	68	;'D'
   190  000828  65                 	db	101	;'e'
   191  000829  76                 	db	118	;'v'
   192  00082A  2E                 	db	46
   193  00082B  74                 	db	116	;'t'
   194  00082C  78                 	db	120	;'x'
   195  00082D  74                 	db	116	;'t'
   196  00082E  00                 	db	0
   197  0000                     
   198                           ; #config settings
   199  00082F  00                 	db	0	; dummy byte at the end
   200  0000                     
   201                           	psect	cinit
   202  005364                     __pcinit:
   203                           	opt callstack 0
   204  005364                     start_initialization:
   205                           	opt callstack 0
   206  005364                     __initialization:
   207                           	opt callstack 0
   208                           
   209                           ; Initialize objects allocated to BANK0 (1 bytes)
   210                           ; load TBLPTR registers with __pidataBANK0
   211  005364  0E5C               	movlw	low __pidataBANK0
   212  005366  6EF6               	movwf	tblptrl,c
   213  005368  0E56               	movlw	high __pidataBANK0
   214  00536A  6EF7               	movwf	tblptrh,c
   215  00536C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   216  00536E  6EF8               	movwf	tblptru,c
   217  005370  0009               	tblrd		*+	;fetch initializer
   218  005372  CFF5 F0F9          	movff	tablat,__pdataBANK0
   219                           
   220                           ; Clear objects allocated to BIGRAM (558 bytes)
   221  005376  EE01  F0FF         	lfsr	0,__pbssBIGRAM
   222  00537A  EE12 F02E          	lfsr	1,558
   223  00537E                     clear_0:
   224  00537E  6AEE               	clrf	postinc0,c
   225  005380  50E5               	movf	postdec1,w,c
   226  005382  50E1               	movf	fsr1l,w,c
   227  005384  E1FC               	bnz	clear_0
   228  005386  50E2               	movf	fsr1h,w,c
   229  005388  E1FA               	bnz	clear_0
   230                           
   231                           ; Clear objects allocated to BANK1 (255 bytes)
   232  00538A  EE01  F000         	lfsr	0,__pbssBANK1
   233  00538E  EE10 F0FF          	lfsr	1,255
   234  005392                     clear_1:
   235  005392  6AEE               	clrf	postinc0,c
   236  005394  50E5               	movf	postdec1,w,c
   237  005396  50E1               	movf	fsr1l,w,c
   238  005398  E1FC               	bnz	clear_1
   239  00539A  50E2               	movf	fsr1h,w,c
   240  00539C  E1FA               	bnz	clear_1
   241                           
   242                           ; Clear objects allocated to BANK0 (37 bytes)
   243  00539E  EE00  F0D4         	lfsr	0,__pbssBANK0
   244  0053A2  0E25               	movlw	37
   245  0053A4                     clear_2:
   246  0053A4  6AEE               	clrf	postinc0,c
   247  0053A6  06E8               	decf	wreg,f,c
   248  0053A8  E1FD               	bnz	clear_2
   249  0053AA                     end_of_initialization:
   250                           	opt callstack 0
   251  0053AA                     __end_of__initialization:
   252                           	opt callstack 0
   253  0053AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   254  0053AC  6EF8               	movwf	tblptru,c
   255  0053AE  0100               	movlb	0
   256  0053B0  EF92  F02A         	goto	_main	;jump to C main() function
   257                           
   258                           	psect	bssBANK0
   259  0000D4                     __pbssBANK0:
   260                           	opt callstack 0
   261  0000D4                     _Fsid:
   262                           	opt callstack 0
   263  0000D4                     	ds	2
   264  0000D6                     ff@FatFs:
   265                           	opt callstack 0
   266  0000D6                     	ds	2
   267  0000D8                     _CardType:
   268                           	opt callstack 0
   269  0000D8                     	ds	1
   270  0000D9                     _Fil:
   271                           	opt callstack 0
   272  0000D9                     	ds	32
   273                           
   274                           	psect	dataBANK0
   275  0000F9                     __pdataBANK0:
   276                           	opt callstack 0
   277  0000F9                     _Stat:
   278                           	opt callstack 0
   279  0000F9                     	ds	1
   280                           
   281                           	psect	bssBANK1
   282  000100                     __pbssBANK1:
   283                           	opt callstack 0
   284  000100                     _data:
   285                           	opt callstack 0
   286  000100                     	ds	255
   287                           
   288                           	psect	bssBIGRAM
   289  0001FF                     __pbssBIGRAM:
   290                           	opt callstack 0
   291  0001FF                     _FatFs:
   292                           	opt callstack 0
   293  0001FF                     	ds	558
   294                           
   295                           	psect	cstackBANK0
   296  000060                     __pcstackBANK0:
   297                           	opt callstack 0
   298  000060                     ??_dir_sdi:
   299  000060                     remove_chain@res:
   300                           	opt callstack 0
   301  000060                     create_chain@res:
   302                           	opt callstack 0
   303  000060                     find_volume@br:
   304                           	opt callstack 0
   305                           
   306                           ; 16 bytes @ 0x0
   307  000060                     	ds	1
   308  000061                     remove_chain@nxt:
   309                           	opt callstack 0
   310  000061                     create_chain@scl:
   311                           	opt callstack 0
   312                           
   313                           ; 4 bytes @ 0x1
   314  000061                     	ds	4
   315  000065                     create_chain@ncl:
   316                           	opt callstack 0
   317                           
   318                           ; 4 bytes @ 0x5
   319  000065                     	ds	2
   320  000067                     dir_sdi@ic:
   321                           	opt callstack 0
   322                           
   323                           ; 2 bytes @ 0x7
   324  000067                     	ds	2
   325  000069                     create_chain@cs:
   326                           	opt callstack 0
   327  000069                     dir_sdi@sect:
   328                           	opt callstack 0
   329                           
   330                           ; 4 bytes @ 0x9
   331  000069                     	ds	4
   332  00006D                     dir_next@dp:
   333                           	opt callstack 0
   334  00006D                     f_write@fp:
   335                           	opt callstack 0
   336  00006D                     f_lseek@fp:
   337                           	opt callstack 0
   338  00006D                     dir_sdi@clst:
   339                           	opt callstack 0
   340                           
   341                           ; 4 bytes @ 0xD
   342  00006D                     	ds	2
   343  00006F                     dir_next@stretch:
   344                           	opt callstack 0
   345  00006F                     f_write@buff:
   346                           	opt callstack 0
   347  00006F                     f_lseek@ofs:
   348                           	opt callstack 0
   349                           
   350                           ; 4 bytes @ 0xF
   351  00006F                     	ds	1
   352  000070                     _find_volume$922:
   353                           	opt callstack 0
   354                           
   355                           ; 4 bytes @ 0x10
   356  000070                     	ds	1
   357  000071                     ??_dir_next:
   358  000071                     f_write@btw:
   359                           	opt callstack 0
   360                           
   361                           ; 2 bytes @ 0x11
   362  000071                     	ds	2
   363  000073                     ??_f_lseek:
   364  000073                     f_write@bw:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x13
   368  000073                     	ds	1
   369  000074                     _find_volume$923:
   370                           	opt callstack 0
   371                           
   372                           ; 2 bytes @ 0x14
   373  000074                     	ds	1
   374  000075                     ??_f_write:
   375                           
   376                           ; 1 bytes @ 0x15
   377  000075                     	ds	1
   378  000076                     find_volume@szbfat:
   379                           	opt callstack 0
   380                           
   381                           ; 4 bytes @ 0x16
   382  000076                     	ds	2
   383  000078                     dir_next@c:
   384                           	opt callstack 0
   385                           
   386                           ; 2 bytes @ 0x18
   387  000078                     	ds	2
   388  00007A                     dir_next@i:
   389                           	opt callstack 0
   390  00007A                     find_volume@pt:
   391                           	opt callstack 0
   392                           
   393                           ; 2 bytes @ 0x1A
   394  00007A                     	ds	2
   395  00007C                     dir_next@clst:
   396                           	opt callstack 0
   397  00007C                     find_volume@sysect:
   398                           	opt callstack 0
   399                           
   400                           ; 4 bytes @ 0x1C
   401  00007C                     	ds	4
   402  000080                     dir_alloc@dp:
   403                           	opt callstack 0
   404  000080                     dir_find@dp:
   405                           	opt callstack 0
   406  000080                     find_volume@vol:
   407                           	opt callstack 0
   408                           
   409                           ; 2 bytes @ 0x20
   410  000080                     	ds	1
   411  000081                     f_write@res:
   412                           	opt callstack 0
   413                           
   414                           ; 1 bytes @ 0x21
   415  000081                     	ds	1
   416  000082                     dir_find@c:
   417                           	opt callstack 0
   418  000082                     dir_alloc@nent:
   419                           	opt callstack 0
   420  000082                     find_volume@nrsv:
   421                           	opt callstack 0
   422  000082                     f_write@wbuff:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0x22
   426  000082                     	ds	1
   427  000083                     dir_find@dir:
   428                           	opt callstack 0
   429  000083                     f_lseek@ifptr:
   430                           	opt callstack 0
   431                           
   432                           ; 4 bytes @ 0x23
   433  000083                     	ds	1
   434  000084                     ??_dir_alloc:
   435  000084                     f_write@csect:
   436                           	opt callstack 0
   437  000084                     find_volume@tsect:
   438                           	opt callstack 0
   439                           
   440                           ; 4 bytes @ 0x24
   441  000084                     	ds	1
   442  000085                     dir_find@res:
   443                           	opt callstack 0
   444  000085                     f_write@cc:
   445                           	opt callstack 0
   446                           
   447                           ; 2 bytes @ 0x25
   448  000085                     	ds	1
   449  000086                     follow_path@dp:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0x26
   453  000086                     	ds	1
   454  000087                     f_lseek@res:
   455                           	opt callstack 0
   456  000087                     dir_alloc@n:
   457                           	opt callstack 0
   458  000087                     f_write@sect:
   459                           	opt callstack 0
   460                           
   461                           ; 4 bytes @ 0x27
   462  000087                     	ds	1
   463  000088                     follow_path@path:
   464                           	opt callstack 0
   465  000088                     find_volume@nclst:
   466                           	opt callstack 0
   467  000088                     f_lseek@nsect:
   468                           	opt callstack 0
   469                           
   470                           ; 4 bytes @ 0x28
   471  000088                     	ds	1
   472  000089                     dir_alloc@res:
   473                           	opt callstack 0
   474                           
   475                           ; 1 bytes @ 0x29
   476  000089                     	ds	1
   477  00008A                     dir_register@dp:
   478                           	opt callstack 0
   479  00008A                     follow_path@dir:
   480                           	opt callstack 0
   481                           
   482                           ; 2 bytes @ 0x2A
   483  00008A                     	ds	1
   484  00008B                     f_write@clst:
   485                           	opt callstack 0
   486                           
   487                           ; 4 bytes @ 0x2B
   488  00008B                     	ds	1
   489  00008C                     dir_register@res:
   490                           	opt callstack 0
   491  00008C                     follow_path@ns:
   492                           	opt callstack 0
   493  00008C                     find_volume@stat:
   494                           	opt callstack 0
   495  00008C                     f_lseek@bcs:
   496                           	opt callstack 0
   497                           
   498                           ; 4 bytes @ 0x2C
   499  00008C                     	ds	1
   500  00008D                     follow_path@res:
   501                           	opt callstack 0
   502  00008D                     find_volume@fasize:
   503                           	opt callstack 0
   504                           
   505                           ; 4 bytes @ 0x2D
   506  00008D                     	ds	2
   507  00008F                     f_write@wcnt:
   508                           	opt callstack 0
   509                           
   510                           ; 2 bytes @ 0x2F
   511  00008F                     	ds	1
   512  000090                     f_lseek@clst:
   513                           	opt callstack 0
   514                           
   515                           ; 4 bytes @ 0x30
   516  000090                     	ds	1
   517  000091                     find_volume@bsect:
   518                           	opt callstack 0
   519                           
   520                           ; 4 bytes @ 0x31
   521  000091                     	ds	4
   522  000095                     find_volume@i:
   523                           	opt callstack 0
   524                           
   525                           ; 2 bytes @ 0x35
   526  000095                     	ds	2
   527  000097                     find_volume@fmt:
   528                           	opt callstack 0
   529                           
   530                           ; 1 bytes @ 0x37
   531  000097                     	ds	1
   532  000098                     find_volume@fs:
   533                           	opt callstack 0
   534                           
   535                           ; 2 bytes @ 0x38
   536  000098                     	ds	2
   537  00009A                     f_open@fp:
   538                           	opt callstack 0
   539                           
   540                           ; 2 bytes @ 0x3A
   541  00009A                     	ds	2
   542  00009C                     f_open@path:
   543                           	opt callstack 0
   544                           
   545                           ; 2 bytes @ 0x3C
   546  00009C                     	ds	2
   547  00009E                     f_open@mode:
   548                           	opt callstack 0
   549                           
   550                           ; 1 bytes @ 0x3E
   551  00009E                     	ds	1
   552  00009F                     ??_f_open:
   553                           
   554                           ; 1 bytes @ 0x3F
   555  00009F                     	ds	4
   556  0000A3                     f_open@sfn:
   557                           	opt callstack 0
   558                           
   559                           ; 12 bytes @ 0x43
   560  0000A3                     	ds	12
   561  0000AF                     f_open@cl:
   562                           	opt callstack 0
   563                           
   564                           ; 4 bytes @ 0x4F
   565  0000AF                     	ds	4
   566  0000B3                     f_open@dw:
   567                           	opt callstack 0
   568                           
   569                           ; 4 bytes @ 0x53
   570  0000B3                     	ds	4
   571  0000B7                     f_open@res:
   572                           	opt callstack 0
   573                           
   574                           ; 1 bytes @ 0x57
   575  0000B7                     	ds	1
   576  0000B8                     f_open@dir:
   577                           	opt callstack 0
   578                           
   579                           ; 2 bytes @ 0x58
   580  0000B8                     	ds	2
   581  0000BA                     f_open@dj:
   582                           	opt callstack 0
   583                           
   584                           ; 22 bytes @ 0x5A
   585  0000BA                     	ds	22
   586  0000D0                     guardar@data:
   587                           	opt callstack 0
   588                           
   589                           ; 2 bytes @ 0x70
   590  0000D0                     	ds	2
   591  0000D2                     guardar@bw:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x72
   595  0000D2                     	ds	2
   596                           
   597                           	psect	cstackCOMRAM
   598  000001                     __pcstackCOMRAM:
   599                           	opt callstack 0
   600  000001                     ??___delay_sec:
   601  000001                     ?_mem_cmp:
   602                           	opt callstack 0
   603  000001                     ?_chk_chr:
   604                           	opt callstack 0
   605  000001                     ?_get_ldnumber:
   606                           	opt callstack 0
   607  000001                     ?___wmul:
   608                           	opt callstack 0
   609  000001                     ?_ld_clust:
   610                           	opt callstack 0
   611  000001                     ?___lmul:
   612                           	opt callstack 0
   613  000001                     ?___lldiv:
   614                           	opt callstack 0
   615  000001                     Error@a:
   616                           	opt callstack 0
   617  000001                     disk_status@pdrv:
   618                           	opt callstack 0
   619  000001                     SPI1_Exchange8bit@data:
   620                           	opt callstack 0
   621  000001                     mem_cpy@dst:
   622                           	opt callstack 0
   623  000001                     mem_set@dst:
   624                           	opt callstack 0
   625  000001                     mem_cmp@dst:
   626                           	opt callstack 0
   627  000001                     chk_chr@str:
   628                           	opt callstack 0
   629  000001                     ld_clust@fs:
   630                           	opt callstack 0
   631  000001                     st_clust@dir:
   632                           	opt callstack 0
   633  000001                     get_ldnumber@path:
   634                           	opt callstack 0
   635  000001                     ___wmul@multiplier:
   636                           	opt callstack 0
   637  000001                     ___lmul@multiplier:
   638                           	opt callstack 0
   639  000001                     ___lldiv@dividend:
   640                           	opt callstack 0
   641                           
   642                           ; 4 bytes @ 0x0
   643  000001                     	ds	1
   644  000002                     wait_ready@tmr:
   645                           	opt callstack 0
   646  000002                     rcvr_datablock@buff:
   647                           	opt callstack 0
   648  000002                     validate@obj:
   649                           	opt callstack 0
   650                           
   651                           ; 2 bytes @ 0x1
   652  000002                     	ds	1
   653  000003                     ??_get_ldnumber:
   654  000003                     mem_cpy@src:
   655                           	opt callstack 0
   656  000003                     mem_set@val:
   657                           	opt callstack 0
   658  000003                     mem_cmp@src:
   659                           	opt callstack 0
   660  000003                     chk_chr@chr:
   661                           	opt callstack 0
   662  000003                     ld_clust@dir:
   663                           	opt callstack 0
   664  000003                     ___wmul@multiplicand:
   665                           	opt callstack 0
   666  000003                     st_clust@cl:
   667                           	opt callstack 0
   668                           
   669                           ; 4 bytes @ 0x2
   670  000003                     	ds	1
   671  000004                     ??_validate:
   672  000004                     ___delay_sec@sec:
   673                           	opt callstack 0
   674  000004                     rcvr_datablock@btr:
   675                           	opt callstack 0
   676  000004                     xmit_datablock@buff:
   677                           	opt callstack 0
   678  000004                     ___send_cmd@arg:
   679                           	opt callstack 0
   680                           
   681                           ; 4 bytes @ 0x3
   682  000004                     	ds	1
   683  000005                     ??_chk_chr:
   684  000005                     ??_ld_clust:
   685  000005                     ___delay_sec@i:
   686                           	opt callstack 0
   687  000005                     mem_cpy@cnt:
   688                           	opt callstack 0
   689  000005                     mem_set@cnt:
   690                           	opt callstack 0
   691  000005                     mem_cmp@cnt:
   692                           	opt callstack 0
   693  000005                     ___wmul@product:
   694                           	opt callstack 0
   695  000005                     ___lmul@multiplicand:
   696                           	opt callstack 0
   697  000005                     ___lldiv@divisor:
   698                           	opt callstack 0
   699                           
   700                           ; 4 bytes @ 0x4
   701  000005                     	ds	1
   702  000006                     xmit_datablock@token:
   703                           	opt callstack 0
   704  000006                     rcvr_datablock@tmr:
   705                           	opt callstack 0
   706                           
   707                           ; 2 bytes @ 0x5
   708  000006                     	ds	1
   709  000007                     ??_mem_cpy:
   710  000007                     ??_mem_cmp:
   711  000007                     xmit_datablock@i:
   712                           	opt callstack 0
   713  000007                     mem_set@d:
   714                           	opt callstack 0
   715  000007                     get_ldnumber@tp:
   716                           	opt callstack 0
   717                           
   718                           ; 2 bytes @ 0x6
   719  000007                     	ds	1
   720  000008                     rcvr_datablock@token:
   721                           	opt callstack 0
   722  000008                     ___send_cmd@res:
   723                           	opt callstack 0
   724  000008                     validate@fil:
   725                           	opt callstack 0
   726                           
   727                           ; 2 bytes @ 0x7
   728  000008                     	ds	1
   729  000009                     xmit_datablock@resp:
   730                           	opt callstack 0
   731  000009                     ___send_cmd@n:
   732                           	opt callstack 0
   733  000009                     mem_cpy@d:
   734                           	opt callstack 0
   735  000009                     mem_cmp@d:
   736                           	opt callstack 0
   737  000009                     create_name@dp:
   738                           	opt callstack 0
   739  000009                     get_ldnumber@vol:
   740                           	opt callstack 0
   741  000009                     ___lmul@product:
   742                           	opt callstack 0
   743  000009                     ___lldiv@quotient:
   744                           	opt callstack 0
   745                           
   746                           ; 4 bytes @ 0x8
   747  000009                     	ds	1
   748  00000A                     ___send_cmd@cmd:
   749                           	opt callstack 0
   750                           
   751                           ; 1 bytes @ 0x9
   752  00000A                     	ds	1
   753  00000B                     mem_cpy@s:
   754                           	opt callstack 0
   755  00000B                     mem_cmp@s:
   756                           	opt callstack 0
   757  00000B                     create_name@path:
   758                           	opt callstack 0
   759  00000B                     get_ldnumber@i:
   760                           	opt callstack 0
   761  00000B                     send_cmd@arg:
   762                           	opt callstack 0
   763  00000B                     ld_clust@cl:
   764                           	opt callstack 0
   765                           
   766                           ; 4 bytes @ 0xA
   767  00000B                     	ds	2
   768  00000D                     ??_create_name:
   769  00000D                     ?_clust2sect:
   770                           	opt callstack 0
   771  00000D                     ___lldiv@counter:
   772                           	opt callstack 0
   773  00000D                     mem_cmp@r:
   774                           	opt callstack 0
   775  00000D                     clust2sect@fs:
   776                           	opt callstack 0
   777  00000D                     get_ldnumber@tt:
   778                           	opt callstack 0
   779                           
   780                           ; 2 bytes @ 0xC
   781  00000D                     	ds	2
   782  00000F                     send_cmd@cmd:
   783                           	opt callstack 0
   784  00000F                     clust2sect@clst:
   785                           	opt callstack 0
   786                           
   787                           ; 4 bytes @ 0xE
   788  00000F                     	ds	1
   789  000010                     send_cmd@res:
   790                           	opt callstack 0
   791                           
   792                           ; 1 bytes @ 0xF
   793  000010                     	ds	1
   794  000011                     ??_disk_initialize:
   795  000011                     disk_ioctl@cmd:
   796                           	opt callstack 0
   797  000011                     disk_read@buff:
   798                           	opt callstack 0
   799  000011                     disk_write@buff:
   800                           	opt callstack 0
   801  000011                     _create_name$818:
   802                           	opt callstack 0
   803                           
   804                           ; 2 bytes @ 0x10
   805  000011                     	ds	1
   806  000012                     disk_initialize@pdrv:
   807                           	opt callstack 0
   808  000012                     disk_ioctl@buff:
   809                           	opt callstack 0
   810                           
   811                           ; 2 bytes @ 0x11
   812  000012                     	ds	1
   813  000013                     ??_clust2sect:
   814  000013                     create_name@si:
   815                           	opt callstack 0
   816  000013                     disk_initialize@ocr:
   817                           	opt callstack 0
   818  000013                     disk_read@sector:
   819                           	opt callstack 0
   820  000013                     disk_write@sector:
   821                           	opt callstack 0
   822                           
   823                           ; 4 bytes @ 0x12
   824  000013                     	ds	1
   825  000014                     ??_disk_ioctl:
   826                           
   827                           ; 1 bytes @ 0x13
   828  000014                     	ds	1
   829  000015                     create_name@b:
   830                           	opt callstack 0
   831                           
   832                           ; 1 bytes @ 0x14
   833  000015                     	ds	1
   834  000016                     create_name@ni:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0x15
   838  000016                     	ds	1
   839  000017                     _disk_initialize$328:
   840                           	opt callstack 0
   841  000017                     disk_read@count:
   842                           	opt callstack 0
   843  000017                     disk_write@count:
   844                           	opt callstack 0
   845                           
   846                           ; 2 bytes @ 0x16
   847  000017                     	ds	1
   848  000018                     create_name@p:
   849                           	opt callstack 0
   850                           
   851                           ; 2 bytes @ 0x17
   852  000018                     	ds	1
   853  000019                     ??_disk_write:
   854  000019                     disk_initialize@cmd:
   855                           	opt callstack 0
   856  000019                     disk_read@pdrv:
   857                           	opt callstack 0
   858                           
   859                           ; 1 bytes @ 0x18
   860  000019                     	ds	1
   861  00001A                     disk_initialize@ty:
   862                           	opt callstack 0
   863  00001A                     disk_write@pdrv:
   864                           	opt callstack 0
   865  00001A                     create_name@d:
   866                           	opt callstack 0
   867  00001A                     _disk_read$337:
   868                           	opt callstack 0
   869                           
   870                           ; 2 bytes @ 0x19
   871  00001A                     	ds	1
   872  00001B                     disk_initialize@tmr:
   873                           	opt callstack 0
   874  00001B                     sync_window@fs:
   875                           	opt callstack 0
   876  00001B                     create_name@sfn:
   877                           	opt callstack 0
   878                           
   879                           ; 2 bytes @ 0x1A
   880  00001B                     	ds	1
   881  00001C                     disk_read@cmd:
   882                           	opt callstack 0
   883                           
   884                           ; 1 bytes @ 0x1B
   885  00001C                     	ds	1
   886  00001D                     ??_sync_window:
   887  00001D                     disk_initialize@n:
   888                           	opt callstack 0
   889  00001D                     create_name@i:
   890                           	opt callstack 0
   891                           
   892                           ; 2 bytes @ 0x1C
   893  00001D                     	ds	2
   894  00001F                     create_name@c:
   895                           	opt callstack 0
   896                           
   897                           ; 1 bytes @ 0x1E
   898  00001F                     	ds	2
   899  000021                     disk_ioctl@csd:
   900                           	opt callstack 0
   901                           
   902                           ; 16 bytes @ 0x20
   903  000021                     	ds	8
   904  000029                     sync_window@res:
   905                           	opt callstack 0
   906                           
   907                           ; 1 bytes @ 0x28
   908  000029                     	ds	1
   909  00002A                     sync_window@nf:
   910                           	opt callstack 0
   911                           
   912                           ; 2 bytes @ 0x29
   913  00002A                     	ds	2
   914  00002C                     sync_window@wsect:
   915                           	opt callstack 0
   916                           
   917                           ; 4 bytes @ 0x2B
   918  00002C                     	ds	4
   919  000030                     move_window@fs:
   920                           	opt callstack 0
   921                           
   922                           ; 2 bytes @ 0x2F
   923  000030                     	ds	1
   924  000031                     disk_ioctl@pdrv:
   925                           	opt callstack 0
   926                           
   927                           ; 1 bytes @ 0x30
   928  000031                     	ds	1
   929  000032                     disk_ioctl@csize:
   930                           	opt callstack 0
   931  000032                     move_window@sector:
   932                           	opt callstack 0
   933                           
   934                           ; 4 bytes @ 0x31
   935  000032                     	ds	4
   936  000036                     disk_ioctl@res:
   937                           	opt callstack 0
   938                           
   939                           ; 1 bytes @ 0x35
   940  000036                     	ds	1
   941  000037                     disk_ioctl@n:
   942                           	opt callstack 0
   943                           
   944                           ; 1 bytes @ 0x36
   945  000037                     	ds	1
   946  000038                     disk_ioctl@ptr:
   947                           	opt callstack 0
   948                           
   949                           ; 2 bytes @ 0x37
   950  000038                     	ds	2
   951  00003A                     move_window@res:
   952                           	opt callstack 0
   953  00003A                     sync_fs@fs:
   954                           	opt callstack 0
   955                           
   956                           ; 2 bytes @ 0x39
   957  00003A                     	ds	1
   958  00003B                     ?_get_fat:
   959                           	opt callstack 0
   960  00003B                     get_fat@fs:
   961                           	opt callstack 0
   962  00003B                     put_fat@fs:
   963                           	opt callstack 0
   964  00003B                     check_fs@fs:
   965                           	opt callstack 0
   966                           
   967                           ; 2 bytes @ 0x3A
   968  00003B                     	ds	1
   969  00003C                     ??_sync_fs:
   970                           
   971                           ; 1 bytes @ 0x3B
   972  00003C                     	ds	1
   973  00003D                     get_fat@clst:
   974                           	opt callstack 0
   975  00003D                     put_fat@clst:
   976                           	opt callstack 0
   977  00003D                     check_fs@sect:
   978                           	opt callstack 0
   979                           
   980                           ; 4 bytes @ 0x3C
   981  00003D                     	ds	4
   982  000041                     ??_get_fat:
   983  000041                     ??_check_fs:
   984  000041                     put_fat@val:
   985                           	opt callstack 0
   986                           
   987                           ; 4 bytes @ 0x40
   988  000041                     	ds	3
   989  000044                     sync_fs@res:
   990                           	opt callstack 0
   991                           
   992                           ; 1 bytes @ 0x43
   993  000044                     	ds	1
   994  000045                     ??_put_fat:
   995  000045                     find_volume@rfs:
   996                           	opt callstack 0
   997  000045                     f_sync@fp:
   998                           	opt callstack 0
   999                           
  1000                           ; 2 bytes @ 0x44
  1001  000045                     	ds	2
  1002  000047                     find_volume@path:
  1003                           	opt callstack 0
  1004                           
  1005                           ; 2 bytes @ 0x46
  1006  000047                     	ds	2
  1007  000049                     find_volume@wmode:
  1008                           	opt callstack 0
  1009                           
  1010                           ; 1 bytes @ 0x48
  1011  000049                     	ds	1
  1012  00004A                     ??_find_volume:
  1013  00004A                     _get_fat$568:
  1014                           	opt callstack 0
  1015                           
  1016                           ; 2 bytes @ 0x49
  1017  00004A                     	ds	1
  1018  00004B                     f_sync@res:
  1019                           	opt callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x4A
  1022  00004B                     	ds	1
  1023  00004C                     f_sync@dir:
  1024                           	opt callstack 0
  1025  00004C                     get_fat@val:
  1026                           	opt callstack 0
  1027                           
  1028                           ; 4 bytes @ 0x4B
  1029  00004C                     	ds	1
  1030  00004D                     _put_fat$594:
  1031                           	opt callstack 0
  1032                           
  1033                           ; 2 bytes @ 0x4C
  1034  00004D                     	ds	1
  1035  00004E                     f_close@fp:
  1036                           	opt callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x4D
  1039  00004E                     	ds	1
  1040  00004F                     _put_fat$595:
  1041                           	opt callstack 0
  1042                           
  1043                           ; 2 bytes @ 0x4E
  1044  00004F                     	ds	1
  1045  000050                     f_close@res:
  1046                           	opt callstack 0
  1047  000050                     get_fat@wc:
  1048                           	opt callstack 0
  1049                           
  1050                           ; 2 bytes @ 0x4F
  1051  000050                     	ds	1
  1052  000051                     put_fat@bc:
  1053                           	opt callstack 0
  1054                           
  1055                           ; 2 bytes @ 0x50
  1056  000051                     	ds	1
  1057  000052                     get_fat@p:
  1058                           	opt callstack 0
  1059  000052                     f_mount@fs:
  1060                           	opt callstack 0
  1061                           
  1062                           ; 2 bytes @ 0x51
  1063  000052                     	ds	1
  1064  000053                     put_fat@res:
  1065                           	opt callstack 0
  1066                           
  1067                           ; 1 bytes @ 0x52
  1068  000053                     	ds	1
  1069  000054                     get_fat@bc:
  1070                           	opt callstack 0
  1071  000054                     put_fat@p:
  1072                           	opt callstack 0
  1073  000054                     f_mount@path:
  1074                           	opt callstack 0
  1075                           
  1076                           ; 2 bytes @ 0x53
  1077  000054                     	ds	2
  1078  000056                     ?_create_chain:
  1079                           	opt callstack 0
  1080  000056                     f_mount@opt:
  1081                           	opt callstack 0
  1082  000056                     remove_chain@fs:
  1083                           	opt callstack 0
  1084  000056                     create_chain@fs:
  1085                           	opt callstack 0
  1086  000056                     dir_sdi@dp:
  1087                           	opt callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x55
  1090  000056                     	ds	1
  1091  000057                     f_mount@res:
  1092                           	opt callstack 0
  1093                           
  1094                           ; 1 bytes @ 0x56
  1095  000057                     	ds	1
  1096  000058                     dir_sdi@idx:
  1097                           	opt callstack 0
  1098  000058                     f_mount@cfs:
  1099                           	opt callstack 0
  1100  000058                     remove_chain@clst:
  1101                           	opt callstack 0
  1102  000058                     create_chain@clst:
  1103                           	opt callstack 0
  1104                           
  1105                           ; 4 bytes @ 0x57
  1106  000058                     	ds	2
  1107  00005A                     f_mount@rp:
  1108                           	opt callstack 0
  1109                           
  1110                           ; 2 bytes @ 0x59
  1111  00005A                     	ds	2
  1112  00005C                     f_mount@vol:
  1113                           	opt callstack 0
  1114                           
  1115                           ; 2 bytes @ 0x5B
  1116  00005C                     	ds	4
  1117  000060                     
  1118                           ; 1 bytes @ 0x5F
  1119 ;;
  1120 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1121 ;;
  1122 ;; *************** function _main *****************
  1123 ;; Defined at:
  1124 ;;		line 63 in file "Main.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;		None
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;		None
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1138 ;;      Params:         0       0       0       0       0       0       0       0       0
  1139 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1141 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1142 ;;Total ram usage:        0 bytes
  1143 ;; Hardware stack levels required when called:   15
  1144 ;; This function calls:
  1145 ;;		_Error
  1146 ;;		___delay_sec
  1147 ;;		_guardar
  1148 ;; This function is called by:
  1149 ;;		Startup code after reset
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           	psect	text0
  1154  005524                     __ptext0:
  1155                           	opt callstack 0
  1156  005524                     _main:
  1157                           	opt callstack 16
  1158                           
  1159                           ;Main.c: 66:     LATA = 0x00;
  1160                           
  1161                           ;incstack = 0
  1162  005524  0E00               	movlw	0
  1163  005526  6E89               	movwf	3977,c	;volatile
  1164                           
  1165                           ;Main.c: 67:     TRISA = 0x00;
  1166  005528  0E00               	movlw	0
  1167  00552A  6E92               	movwf	3986,c	;volatile
  1168                           
  1169                           ;Main.c: 68:     ANSELA = 0x00;
  1170  00552C  0E00               	movlw	0
  1171  00552E  010F               	movlb	15	; () banked
  1172  005530  6F5B               	movwf	91,b	;volatile
  1173                           
  1174                           ; BSR set to: 15
  1175                           ;Main.c: 69:     guardar("Prueba por ARRAY \r\n");
  1176  005532  0E01               	movlw	low STR_4
  1177  005534  0100               	movlb	0	; () banked
  1178  005536  6FD0               	movwf	guardar@data& (0+255),b
  1179  005538  0E08               	movlw	high STR_4
  1180  00553A  6FD1               	movwf	(guardar@data+1)& (0+255),b
  1181  00553C  EC94  F021         	call	_guardar	;wreg free
  1182  005540                     l6394:
  1183                           
  1184                           ;Main.c: 71:     {;Main.c: 72:         Error(1);
  1185  005540  0E01               	movlw	1
  1186  005542  EC32  F025         	call	_Error
  1187                           
  1188                           ;Main.c: 73:         __delay_sec(1);
  1189  005546  0E01               	movlw	1
  1190  005548  EC5A  F02A         	call	___delay_sec
  1191                           
  1192                           ;Main.c: 74:         Error(15);
  1193  00554C  0E0F               	movlw	15
  1194  00554E  EC32  F025         	call	_Error
  1195                           
  1196                           ;Main.c: 75:         __delay_sec(1);
  1197  005552  0E01               	movlw	1
  1198  005554  EC5A  F02A         	call	___delay_sec
  1199  005558  D7F3               	goto	l6394
  1200  00555A                     __end_of_main:
  1201                           	opt callstack 0
  1202                           
  1203 ;; *************** function _guardar *****************
  1204 ;; Defined at:
  1205 ;;		line 16 in file "Main.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;  data            2  112[BANK0 ] PTR unsigned char 
  1208 ;;		 -> STR_4(20), 
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;  bw              2  114[BANK0 ] unsigned short 
  1211 ;; Return value:  Size  Location     Type
  1212 ;;                  1    wreg      void 
  1213 ;; Registers used:
  1214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1215 ;; Tracked objects:
  1216 ;;		On entry : 0/0
  1217 ;;		On exit  : 0/0
  1218 ;;		Unchanged: 0/0
  1219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1220 ;;      Params:         0       2       0       0       0       0       0       0       0
  1221 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1222 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1223 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1224 ;;Total ram usage:        4 bytes
  1225 ;; Hardware stack levels used:    1
  1226 ;; Hardware stack levels required when called:   14
  1227 ;; This function calls:
  1228 ;;		_Error
  1229 ;;		_SYSTEM_Initialize
  1230 ;;		___delay_sec
  1231 ;;		_f_close
  1232 ;;		_f_lseek
  1233 ;;		_f_mount
  1234 ;;		_f_open
  1235 ;;		_f_write
  1236 ;; This function is called by:
  1237 ;;		_main
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text1
  1242  004328                     __ptext1:
  1243                           	opt callstack 0
  1244  004328                     _guardar:
  1245                           	opt callstack 16
  1246                           
  1247                           ;Main.c: 17:     UINT bw;;Main.c: 18:     SYSTEM_Initialize();
  1248                           
  1249                           ;incstack = 0
  1250  004328  EC1B  F02B         	call	_SYSTEM_Initialize	;wreg free
  1251                           
  1252                           ;Main.c: 19:     if (f_mount(&FatFs, "", 1) != FR_OK) {
  1253  00432C  0EFF               	movlw	low _FatFs
  1254  00432E  6E52               	movwf	f_mount@fs,c
  1255  004330  0E01               	movlw	high _FatFs
  1256  004332  6E53               	movwf	f_mount@fs+1,c
  1257  004334  0E14               	movlw	low (STR_4+19)
  1258  004336  6E54               	movwf	f_mount@path,c
  1259  004338  0E08               	movlw	high (STR_4+19)
  1260  00433A  6E55               	movwf	f_mount@path+1,c
  1261  00433C  0E01               	movlw	1
  1262  00433E  6E56               	movwf	f_mount@opt,c
  1263  004340  EC2A  F027         	call	_f_mount	;wreg free
  1264  004344  0900               	iorlw	0
  1265  004346  B4D8               	btfsc	status,2,c
  1266  004348  D018               	goto	u8670
  1267                           
  1268                           ;Main.c: 20:         Error(1);
  1269  00434A  0E01               	movlw	1
  1270  00434C  EC32  F025         	call	_Error
  1271                           
  1272                           ;Main.c: 21:         __delay_sec(2);
  1273  004350  0E02               	movlw	2
  1274  004352  EC5A  F02A         	call	___delay_sec
  1275                           
  1276                           ;Main.c: 22:         Error(99);
  1277  004356  0E63               	movlw	99
  1278  004358  EC32  F025         	call	_Error
  1279  00435C                     l6344:
  1280                           
  1281                           ;Main.c: 23:         while(f_mount(&FatFs, "", 1) != FR_OK) {
  1282  00435C  0EFF               	movlw	low _FatFs
  1283  00435E  6E52               	movwf	f_mount@fs,c
  1284  004360  0E01               	movlw	high _FatFs
  1285  004362  6E53               	movwf	f_mount@fs+1,c
  1286  004364  0E14               	movlw	low (STR_4+19)
  1287  004366  6E54               	movwf	f_mount@path,c
  1288  004368  0E08               	movlw	high (STR_4+19)
  1289  00436A  6E55               	movwf	f_mount@path+1,c
  1290  00436C  0E01               	movlw	1
  1291  00436E  6E56               	movwf	f_mount@opt,c
  1292  004370  EC2A  F027         	call	_f_mount	;wreg free
  1293  004374  0900               	iorlw	0
  1294  004376  A4D8               	btfss	status,2,c
  1295  004378  D7F1               	goto	l6344
  1296  00437A                     u8670:
  1297                           
  1298                           ;Main.c: 28:     Error(2);
  1299  00437A  0E02               	movlw	2
  1300  00437C  EC32  F025         	call	_Error
  1301                           
  1302                           ;Main.c: 29:     __delay_sec(2);
  1303  004380  0E02               	movlw	2
  1304  004382  EC5A  F02A         	call	___delay_sec
  1305                           
  1306                           ;Main.c: 30:     Error(99);
  1307  004386  0E63               	movlw	99
  1308  004388  EC32  F025         	call	_Error
  1309                           
  1310                           ;Main.c: 32:     if (f_open(&Fil, "BeeDev.txt", 0x10 | 0x01 | 0x02) == FR_OK) {
  1311  00438C  0ED9               	movlw	low _Fil
  1312  00438E  0100               	movlb	0	; () banked
  1313  004390  6F9A               	movwf	f_open@fp& (0+255),b
  1314  004392  0E00               	movlw	high _Fil
  1315  004394  6F9B               	movwf	(f_open@fp+1)& (0+255),b
  1316  004396  0E24               	movlw	low STR_3
  1317  004398  6F9C               	movwf	f_open@path& (0+255),b
  1318  00439A  0E08               	movlw	high STR_3
  1319  00439C  6F9D               	movwf	(f_open@path+1)& (0+255),b
  1320  00439E  0E13               	movlw	19
  1321  0043A0  6F9E               	movwf	f_open@mode& (0+255),b
  1322  0043A2  ECE0  F017         	call	_f_open	;wreg free
  1323  0043A6  0900               	iorlw	0
  1324  0043A8  A4D8               	btfss	status,2,c
  1325  0043AA  D05C               	goto	l6388
  1326                           
  1327                           ;Main.c: 33:         Error(3);
  1328  0043AC  0E03               	movlw	3
  1329  0043AE  EC32  F025         	call	_Error
  1330                           
  1331                           ;Main.c: 36:         __delay_sec(2);
  1332  0043B2  0E02               	movlw	2
  1333  0043B4  EC5A  F02A         	call	___delay_sec
  1334                           
  1335                           ;Main.c: 37:          Error(99);
  1336  0043B8  0E63               	movlw	99
  1337  0043BA  EC32  F025         	call	_Error
  1338                           
  1339                           ;Main.c: 39:    if ((Fil.fsize != 0) && (f_lseek(&Fil, Fil.fsize) != FR_OK)) goto endSD;
  1340  0043BE  0100               	movlb	0	; () banked
  1341  0043C0  51E3               	movf	(_Fil+10)& (0+255),w,b
  1342  0043C2  11E4               	iorwf	(_Fil+11)& (0+255),w,b
  1343  0043C4  11E5               	iorwf	(_Fil+12)& (0+255),w,b
  1344  0043C6  11E6               	iorwf	(_Fil+13)& (0+255),w,b
  1345  0043C8  B4D8               	btfsc	status,2,c
  1346  0043CA  D011               	goto	l6366
  1347                           
  1348                           ; BSR set to: 0
  1349  0043CC  0ED9               	movlw	low _Fil
  1350  0043CE  6F6D               	movwf	f_lseek@fp& (0+255),b
  1351  0043D0  0E00               	movlw	high _Fil
  1352  0043D2  6F6E               	movwf	(f_lseek@fp+1)& (0+255),b
  1353  0043D4  C0E3  F06F         	movff	_Fil+10,f_lseek@ofs
  1354  0043D8  C0E4  F070         	movff	_Fil+11,f_lseek@ofs+1
  1355  0043DC  C0E5  F071         	movff	_Fil+12,f_lseek@ofs+2
  1356  0043E0  C0E6  F072         	movff	_Fil+13,f_lseek@ofs+3
  1357  0043E4  ECA1  F00C         	call	_f_lseek	;wreg free
  1358  0043E8  0900               	iorlw	0
  1359  0043EA  A4D8               	btfss	status,2,c
  1360  0043EC  D025               	goto	l6380
  1361  0043EE                     l6366:
  1362                           
  1363                           ;Main.c: 40:                 Error(4);
  1364  0043EE  0E04               	movlw	4
  1365  0043F0  EC32  F025         	call	_Error
  1366                           
  1367                           ;Main.c: 41:                 __delay_sec(2);
  1368  0043F4  0E02               	movlw	2
  1369  0043F6  EC5A  F02A         	call	___delay_sec
  1370                           
  1371                           ;Main.c: 43:                 Error(99);
  1372  0043FA  0E63               	movlw	99
  1373  0043FC  EC32  F025         	call	_Error
  1374                           
  1375                           ;Main.c: 44:                 f_write(&Fil, data , 46, &bw);
  1376  004400  0ED9               	movlw	low _Fil
  1377  004402  0100               	movlb	0	; () banked
  1378  004404  6F6D               	movwf	f_write@fp& (0+255),b
  1379  004406  0E00               	movlw	high _Fil
  1380  004408  6F6E               	movwf	(f_write@fp+1)& (0+255),b
  1381  00440A  C0D0  F06F         	movff	guardar@data,f_write@buff
  1382  00440E  C0D1  F070         	movff	guardar@data+1,f_write@buff+1
  1383  004412  0E00               	movlw	0
  1384  004414  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1385  004416  0E2E               	movlw	46
  1386  004418  6F71               	movwf	f_write@btw& (0+255),b
  1387  00441A  0ED2               	movlw	low guardar@bw
  1388  00441C  6F73               	movwf	f_write@bw& (0+255),b
  1389  00441E  0E00               	movlw	high guardar@bw
  1390  004420  6F74               	movwf	(f_write@bw+1)& (0+255),b
  1391  004422  ECEF  F008         	call	_f_write	;wreg free
  1392                           
  1393                           ;Main.c: 46:                 Error(5);
  1394  004426  0E05               	movlw	5
  1395  004428  EC32  F025         	call	_Error
  1396                           
  1397                           ;Main.c: 47:                 __delay_sec(2);
  1398  00442C  0E02               	movlw	2
  1399  00442E  EC5A  F02A         	call	___delay_sec
  1400                           
  1401                           ;Main.c: 48:                  Error(99);
  1402  004432  0E63               	movlw	99
  1403  004434  EC32  F025         	call	_Error
  1404  004438                     l6380:
  1405  004438  0ED9               	movlw	low _Fil
  1406  00443A  6E4E               	movwf	f_close@fp,c
  1407  00443C  0E00               	movlw	high _Fil
  1408  00443E  6E4F               	movwf	f_close@fp+1,c
  1409  004440  EC3D  F02A         	call	_f_close	;wreg free
  1410                           
  1411                           ;Main.c: 50:                 Error(6);
  1412  004444  0E06               	movlw	6
  1413  004446  EC32  F025         	call	_Error
  1414                           
  1415                           ;Main.c: 51:                 __delay_sec(1);
  1416  00444A  0E01               	movlw	1
  1417  00444C  EC5A  F02A         	call	___delay_sec
  1418                           
  1419                           ;Main.c: 53:                 Error(7);
  1420  004450  0E07               	movlw	7
  1421  004452  EC32  F025         	call	_Error
  1422                           
  1423                           ;Main.c: 54:                 __delay_sec(2);
  1424  004456  0E02               	movlw	2
  1425  004458  EC5A  F02A         	call	___delay_sec
  1426                           
  1427                           ;Main.c: 55:                  Error(99);
  1428  00445C  0E63               	movlw	99
  1429  00445E  EC32  F025         	call	_Error
  1430                           
  1431                           ;Main.c: 57:  }
  1432  004462  0012               	return	
  1433  004464                     l6388:
  1434                           
  1435                           ;Main.c: 59:         Error(11);
  1436  004464  0E0B               	movlw	11
  1437  004466  EC32  F025         	call	_Error
  1438  00446A  0012               	return		;funcret
  1439  00446C                     __end_of_guardar:
  1440                           	opt callstack 0
  1441                           
  1442 ;; *************** function _f_write *****************
  1443 ;; Defined at:
  1444 ;;		line 2691 in file "ff.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  fp              2   13[BANK0 ] PTR struct .
  1447 ;;		 -> Fil(32), 
  1448 ;;  buff            2   15[BANK0 ] PTR const void 
  1449 ;;		 -> STR_4(20), 
  1450 ;;  btw             2   17[BANK0 ] unsigned short 
  1451 ;;  bw              2   19[BANK0 ] PTR unsigned short 
  1452 ;;		 -> guardar@bw(2), 
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  clst            4   43[BANK0 ] unsigned long 
  1455 ;;  sect            4   39[BANK0 ] unsigned long 
  1456 ;;  wcnt            2   47[BANK0 ] unsigned short 
  1457 ;;  cc              2   37[BANK0 ] unsigned short 
  1458 ;;  wbuff           2   34[BANK0 ] PTR const unsigned char 
  1459 ;;		 -> STR_4(20), 
  1460 ;;  csect           1   36[BANK0 ] unsigned char 
  1461 ;;  res             1   33[BANK0 ] enum E93
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      enum E4918
  1464 ;; Registers used:
  1465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1471 ;;      Params:         0       8       0       0       0       0       0       0       0
  1472 ;;      Locals:         0      16       0       0       0       0       0       0       0
  1473 ;;      Temps:          0      12       0       0       0       0       0       0       0
  1474 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1475 ;;Total ram usage:       36 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:   10
  1478 ;; This function calls:
  1479 ;;		_clust2sect
  1480 ;;		_create_chain
  1481 ;;		_disk_write
  1482 ;;		_mem_cpy
  1483 ;;		_move_window
  1484 ;;		_sync_window
  1485 ;;		_validate
  1486 ;; This function is called by:
  1487 ;;		_guardar
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text2
  1492  0011DE                     __ptext2:
  1493                           	opt callstack 0
  1494  0011DE                     _f_write:
  1495                           	opt callstack 19
  1496                           
  1497                           ;ff.c: 2692:  FIL* fp,;ff.c: 2693:  const void *buff,;ff.c: 2694:  UINT btw,;ff.c: 2695:
      +                            UINT* bw;ff.c: 2697: {;ff.c: 2698:  FRESULT res;;ff.c: 2699:  DWORD clst, sect;;ff.c: 
      +                          2700:  UINT wcnt, cc;;ff.c: 2701:  const BYTE *wbuff = (const BYTE*)buff;
  1498                           
  1499                           ;incstack = 0
  1500  0011DE  C06F  F082         	movff	f_write@buff,f_write@wbuff
  1501  0011E2  C070  F083         	movff	f_write@buff+1,f_write@wbuff+1
  1502                           
  1503                           ;ff.c: 2702:  BYTE csect;;ff.c: 2705:  *bw = 0;
  1504  0011E6  C073  FFD9         	movff	f_write@bw,fsr2l
  1505  0011EA  C074  FFDA         	movff	f_write@bw+1,fsr2h
  1506  0011EE  0E00               	movlw	0
  1507  0011F0  6EDE               	movwf	postinc2,c
  1508  0011F2  0E00               	movlw	0
  1509  0011F4  6EDD               	movwf	postdec2,c
  1510                           
  1511                           ;ff.c: 2707:  res = validate(fp);
  1512  0011F6  C06D  F002         	movff	f_write@fp,validate@obj
  1513  0011FA  C06E  F003         	movff	f_write@fp+1,validate@obj+1
  1514  0011FE  ECD5  F027         	call	_validate	;wreg free
  1515  001202  0100               	movlb	0	; () banked
  1516  001204  6F81               	movwf	f_write@res& (0+255),b
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;ff.c: 2708:  if (res != FR_OK) return res;
  1520  001206  5181               	movf	f_write@res& (0+255),w,b
  1521  001208  A4D8               	btfss	status,2,c
  1522  00120A  0012               	return	
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;ff.c: 2709:  if (fp->err)
  1526  00120C  EE20 F005          	lfsr	2,5
  1527  001210  516D               	movf	f_write@fp& (0+255),w,b
  1528  001212  26D9               	addwf	fsr2l,f,c
  1529  001214  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1530  001216  22DA               	addwfc	fsr2h,f,c
  1531  001218  50DF               	movf	indf2,w,c
  1532  00121A  A4D8               	btfss	status,2,c
  1533  00121C  0012               	return	
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;ff.c: 2711:  if (!(fp->flag & 0x02))
  1537  00121E  EE20 F004          	lfsr	2,4
  1538  001222  516D               	movf	f_write@fp& (0+255),w,b
  1539  001224  26D9               	addwf	fsr2l,f,c
  1540  001226  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1541  001228  22DA               	addwfc	fsr2h,f,c
  1542  00122A  A2DF               	btfss	indf2,1,c
  1543  00122C  0012               	return	
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;ff.c: 2713:  if (fp->fptr + btw < fp->fptr) btw = 0;
  1547  00122E  EE20 F006          	lfsr	2,6
  1548  001232  516D               	movf	f_write@fp& (0+255),w,b
  1549  001234  26D9               	addwf	fsr2l,f,c
  1550  001236  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1551  001238  22DA               	addwfc	fsr2h,f,c
  1552  00123A  EE10 F006          	lfsr	1,6
  1553  00123E  516D               	movf	f_write@fp& (0+255),w,b
  1554  001240  26E1               	addwf	fsr1l,f,c
  1555  001242  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1556  001244  22E2               	addwfc	fsr1h,f,c
  1557  001246  CFE6 F079          	movff	postinc1,??_f_write+4
  1558  00124A  CFE6 F07A          	movff	postinc1,??_f_write+5
  1559  00124E  CFE6 F07B          	movff	postinc1,??_f_write+6
  1560  001252  CFE6 F07C          	movff	postinc1,??_f_write+7
  1561  001256  5171               	movf	f_write@btw& (0+255),w,b
  1562  001258  2579               	addwf	(??_f_write+4)& (0+255),w,b
  1563  00125A  6F7D               	movwf	(??_f_write+8)& (0+255),b
  1564  00125C  5172               	movf	(f_write@btw+1)& (0+255),w,b
  1565  00125E  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  1566  001260  6F7E               	movwf	(??_f_write+9)& (0+255),b
  1567  001262  0E00               	movlw	0
  1568  001264  217B               	addwfc	(??_f_write+6)& (0+255),w,b
  1569  001266  6F7F               	movwf	(??_f_write+10)& (0+255),b
  1570  001268  0E00               	movlw	0
  1571  00126A  217C               	addwfc	(??_f_write+7)& (0+255),w,b
  1572  00126C  6F80               	movwf	(??_f_write+11)& (0+255),b
  1573  00126E  50DE               	movf	postinc2,w,c
  1574  001270  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  1575  001272  50DE               	movf	postinc2,w,c
  1576  001274  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  1577  001276  50DE               	movf	postinc2,w,c
  1578  001278  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  1579  00127A  50DE               	movf	postinc2,w,c
  1580  00127C  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  1581  00127E  B0D8               	btfsc	status,0,c
  1582  001280  D329               	goto	l6312
  1583                           
  1584                           ; BSR set to: 0
  1585  001282  0E00               	movlw	0
  1586  001284  6F72               	movwf	(f_write@btw+1)& (0+255),b
  1587  001286  0E00               	movlw	0
  1588  001288  6F71               	movwf	f_write@btw& (0+255),b
  1589  00128A  D324               	goto	l6312
  1590  00128C                     l6204:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;ff.c: 2716:   wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {;ff.c: 2717: 
      +                            if ((fp->fptr % ((UINT)512)) == 0) {
  1594  00128C  EE20 F006          	lfsr	2,6
  1595  001290  516D               	movf	f_write@fp& (0+255),w,b
  1596  001292  26D9               	addwf	fsr2l,f,c
  1597  001294  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1598  001296  22DA               	addwfc	fsr2h,f,c
  1599  001298  0EFF               	movlw	255
  1600  00129A  14DE               	andwf	postinc2,w,c
  1601  00129C  6F75               	movwf	??_f_write& (0+255),b
  1602  00129E  0E01               	movlw	1
  1603  0012A0  14DE               	andwf	postinc2,w,c
  1604  0012A2  6F76               	movwf	(??_f_write+1)& (0+255),b
  1605  0012A4  0E00               	movlw	0
  1606  0012A6  14DE               	andwf	postinc2,w,c
  1607  0012A8  6F77               	movwf	(??_f_write+2)& (0+255),b
  1608  0012AA  0E00               	movlw	0
  1609  0012AC  14DE               	andwf	postinc2,w,c
  1610  0012AE  6F78               	movwf	(??_f_write+3)& (0+255),b
  1611  0012B0  5175               	movf	??_f_write& (0+255),w,b
  1612  0012B2  1176               	iorwf	(??_f_write+1)& (0+255),w,b
  1613  0012B4  1177               	iorwf	(??_f_write+2)& (0+255),w,b
  1614  0012B6  1178               	iorwf	(??_f_write+3)& (0+255),w,b
  1615  0012B8  A4D8               	btfss	status,2,c
  1616  0012BA  D26A               	goto	l6288
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;ff.c: 2718:    csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));
  1620  0012BC  EE20 F006          	lfsr	2,6
  1621  0012C0  516D               	movf	f_write@fp& (0+255),w,b
  1622  0012C2  26D9               	addwf	fsr2l,f,c
  1623  0012C4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1624  0012C6  22DA               	addwfc	fsr2h,f,c
  1625  0012C8  CFDE F075          	movff	postinc2,??_f_write
  1626  0012CC  CFDE F076          	movff	postinc2,??_f_write+1
  1627  0012D0  CFDE F077          	movff	postinc2,??_f_write+2
  1628  0012D4  CFDE F078          	movff	postinc2,??_f_write+3
  1629  0012D8  0E0A               	movlw	10
  1630  0012DA  D005               	goto	u8400
  1631  0012DC                     u8405:
  1632  0012DC  90D8               	bcf	status,0,c
  1633  0012DE  3378               	rrcf	(??_f_write+3)& (0+255),f,b
  1634  0012E0  3377               	rrcf	(??_f_write+2)& (0+255),f,b
  1635  0012E2  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1636  0012E4  3375               	rrcf	??_f_write& (0+255),f,b
  1637  0012E6                     u8400:
  1638  0012E6  2EE8               	decfsz	wreg,f,c
  1639  0012E8  D7F9               	goto	u8405
  1640  0012EA  C06D  FFD9         	movff	f_write@fp,fsr2l
  1641  0012EE  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1642  0012F2  EE10 F002          	lfsr	1,2
  1643  0012F6  50DE               	movf	postinc2,w,c
  1644  0012F8  26E1               	addwf	fsr1l,f,c
  1645  0012FA  50DD               	movf	postdec2,w,c
  1646  0012FC  22E2               	addwfc	fsr1h,f,c
  1647  0012FE  50E7               	movf	indf1,w,c
  1648  001300  6F79               	movwf	(??_f_write+4)& (0+255),b
  1649  001302  0579               	decf	(??_f_write+4)& (0+255),w,b
  1650  001304  1575               	andwf	??_f_write& (0+255),w,b
  1651  001306  6F84               	movwf	f_write@csect& (0+255),b
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;ff.c: 2719:    if (!csect) {
  1655  001308  5184               	movf	f_write@csect& (0+255),w,b
  1656  00130A  A4D8               	btfss	status,2,c
  1657  00130C  D0A3               	goto	l6240
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;ff.c: 2720:     if (fp->fptr == 0) {
  1661  00130E  EE20 F006          	lfsr	2,6
  1662  001312  516D               	movf	f_write@fp& (0+255),w,b
  1663  001314  26D9               	addwf	fsr2l,f,c
  1664  001316  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1665  001318  22DA               	addwfc	fsr2h,f,c
  1666  00131A  50DE               	movf	postinc2,w,c
  1667  00131C  10DE               	iorwf	postinc2,w,c
  1668  00131E  10DE               	iorwf	postinc2,w,c
  1669  001320  10DE               	iorwf	postinc2,w,c
  1670  001322  A4D8               	btfss	status,2,c
  1671  001324  D027               	goto	l6218
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;ff.c: 2721:      clst = fp->sclust;
  1675  001326  EE20 F00E          	lfsr	2,14
  1676  00132A  516D               	movf	f_write@fp& (0+255),w,b
  1677  00132C  26D9               	addwf	fsr2l,f,c
  1678  00132E  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1679  001330  22DA               	addwfc	fsr2h,f,c
  1680  001332  CFDE F08B          	movff	postinc2,f_write@clst
  1681  001336  CFDE F08C          	movff	postinc2,f_write@clst+1
  1682  00133A  CFDE F08D          	movff	postinc2,f_write@clst+2
  1683  00133E  CFDE F08E          	movff	postinc2,f_write@clst+3
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;ff.c: 2722:      if (clst == 0)
  1687  001342  518B               	movf	f_write@clst& (0+255),w,b
  1688  001344  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1689  001346  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1690  001348  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1691  00134A  A4D8               	btfss	status,2,c
  1692  00134C  D033               	goto	l6220
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;ff.c: 2723:       clst = create_chain(fp->fs, 0);
  1696  00134E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1697  001352  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1698  001356  CFDE F056          	movff	postinc2,create_chain@fs
  1699  00135A  CFDD F057          	movff	postdec2,create_chain@fs+1
  1700  00135E  0E00               	movlw	0
  1701  001360  6E58               	movwf	create_chain@clst,c
  1702  001362  0E00               	movlw	0
  1703  001364  6E59               	movwf	create_chain@clst+1,c
  1704  001366  0E00               	movlw	0
  1705  001368  6E5A               	movwf	create_chain@clst+2,c
  1706  00136A  0E00               	movlw	0
  1707  00136C  6E5B               	movwf	create_chain@clst+3,c
  1708  00136E  ECAB  F019         	call	_create_chain	;wreg free
  1709  001372  D018               	goto	L1
  1710  001374                     l6218:
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;ff.c: 2730:       clst = create_chain(fp->fs, fp->clust);
  1714  001374  C06D  FFD9         	movff	f_write@fp,fsr2l
  1715  001378  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1716  00137C  CFDE F056          	movff	postinc2,create_chain@fs
  1717  001380  CFDD F057          	movff	postdec2,create_chain@fs+1
  1718  001384  EE20 F012          	lfsr	2,18
  1719  001388  516D               	movf	f_write@fp& (0+255),w,b
  1720  00138A  26D9               	addwf	fsr2l,f,c
  1721  00138C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1722  00138E  22DA               	addwfc	fsr2h,f,c
  1723  001390  CFDE F058          	movff	postinc2,create_chain@clst
  1724  001394  CFDE F059          	movff	postinc2,create_chain@clst+1
  1725  001398  CFDE F05A          	movff	postinc2,create_chain@clst+2
  1726  00139C  CFDE F05B          	movff	postinc2,create_chain@clst+3
  1727  0013A0  ECAB  F019         	call	_create_chain	;wreg free
  1728  0013A4                     L1:
  1729  0013A4  C056  F08B         	movff	?_create_chain,f_write@clst
  1730  0013A8  C057  F08C         	movff	?_create_chain+1,f_write@clst+1
  1731  0013AC  C058  F08D         	movff	?_create_chain+2,f_write@clst+2
  1732  0013B0  C059  F08E         	movff	?_create_chain+3,f_write@clst+3
  1733  0013B4                     l6220:
  1734                           
  1735                           ;ff.c: 2732:     if (clst == 0) break;
  1736  0013B4  0100               	movlb	0	; () banked
  1737  0013B6  518B               	movf	f_write@clst& (0+255),w,b
  1738  0013B8  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1739  0013BA  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1740  0013BC  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1741  0013BE  B4D8               	btfsc	status,2,c
  1742  0013C0  D28D               	goto	u8620
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;ff.c: 2733:     if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1746  0013C2  058B               	decf	f_write@clst& (0+255),w,b
  1747  0013C4  118C               	iorwf	(f_write@clst+1)& (0+255),w,b
  1748  0013C6  118D               	iorwf	(f_write@clst+2)& (0+255),w,b
  1749  0013C8  118E               	iorwf	(f_write@clst+3)& (0+255),w,b
  1750  0013CA  A4D8               	btfss	status,2,c
  1751  0013CC  D009               	goto	l6230
  1752                           
  1753                           ; BSR set to: 0
  1754  0013CE  EE20 F005          	lfsr	2,5
  1755  0013D2  516D               	movf	f_write@fp& (0+255),w,b
  1756  0013D4  26D9               	addwf	fsr2l,f,c
  1757  0013D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1758  0013D8  22DA               	addwfc	fsr2h,f,c
  1759  0013DA  0E02               	movlw	2
  1760  0013DC  6EDF               	movwf	indf2,c
  1761  0013DE  0012               	return	
  1762  0013E0                     l6230:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;ff.c: 2734:     if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK
      +                          _ERR; };
  1766  0013E0  298B               	incf	f_write@clst& (0+255),w,b
  1767  0013E2  E110               	bnz	l6236
  1768  0013E4  298C               	incf	(f_write@clst+1)& (0+255),w,b
  1769  0013E6  E10E               	bnz	l6236
  1770  0013E8  298D               	incf	(f_write@clst+2)& (0+255),w,b
  1771  0013EA  E10C               	bnz	l6236
  1772  0013EC  298E               	incf	(f_write@clst+3)& (0+255),w,b
  1773  0013EE  A4D8               	btfss	status,2,c
  1774  0013F0  D009               	goto	l6236
  1775                           
  1776                           ; BSR set to: 0
  1777  0013F2  EE20 F005          	lfsr	2,5
  1778  0013F6  516D               	movf	f_write@fp& (0+255),w,b
  1779  0013F8  26D9               	addwf	fsr2l,f,c
  1780  0013FA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1781  0013FC  22DA               	addwfc	fsr2h,f,c
  1782  0013FE  0E01               	movlw	1
  1783  001400  6EDF               	movwf	indf2,c
  1784  001402  0012               	return	
  1785  001404                     l6236:
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;ff.c: 2735:     fp->clust = clst;
  1789  001404  EE20 F012          	lfsr	2,18
  1790  001408  516D               	movf	f_write@fp& (0+255),w,b
  1791  00140A  26D9               	addwf	fsr2l,f,c
  1792  00140C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1793  00140E  22DA               	addwfc	fsr2h,f,c
  1794  001410  C08B  FFDE         	movff	f_write@clst,postinc2
  1795  001414  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1796  001418  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1797  00141C  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1798                           
  1799                           ;ff.c: 2736:     if (fp->sclust == 0) fp->sclust = clst;
  1800  001420  EE20 F00E          	lfsr	2,14
  1801  001424  516D               	movf	f_write@fp& (0+255),w,b
  1802  001426  26D9               	addwf	fsr2l,f,c
  1803  001428  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1804  00142A  22DA               	addwfc	fsr2h,f,c
  1805  00142C  50DE               	movf	postinc2,w,c
  1806  00142E  10DE               	iorwf	postinc2,w,c
  1807  001430  10DE               	iorwf	postinc2,w,c
  1808  001432  10DE               	iorwf	postinc2,w,c
  1809  001434  A4D8               	btfss	status,2,c
  1810  001436  D00E               	goto	l6240
  1811                           
  1812                           ; BSR set to: 0
  1813  001438  EE20 F00E          	lfsr	2,14
  1814  00143C  516D               	movf	f_write@fp& (0+255),w,b
  1815  00143E  26D9               	addwf	fsr2l,f,c
  1816  001440  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1817  001442  22DA               	addwfc	fsr2h,f,c
  1818  001444  C08B  FFDE         	movff	f_write@clst,postinc2
  1819  001448  C08C  FFDE         	movff	f_write@clst+1,postinc2
  1820  00144C  C08D  FFDE         	movff	f_write@clst+2,postinc2
  1821  001450  C08E  FFDE         	movff	f_write@clst+3,postinc2
  1822  001454                     l6240:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;ff.c: 2739:    if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))
  1826  001454  EE20 F016          	lfsr	2,22
  1827  001458  516D               	movf	f_write@fp& (0+255),w,b
  1828  00145A  26D9               	addwf	fsr2l,f,c
  1829  00145C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1830  00145E  22DA               	addwfc	fsr2h,f,c
  1831  001460  C06D  FFE1         	movff	f_write@fp,fsr1l
  1832  001464  C06E  FFE2         	movff	f_write@fp+1,fsr1h
  1833  001468  EE00 F02A          	lfsr	0,42
  1834  00146C  50E6               	movf	postinc1,w,c
  1835  00146E  26E9               	addwf	fsr0l,f,c
  1836  001470  50E5               	movf	postdec1,w,c
  1837  001472  22EA               	addwfc	fsr0h,f,c
  1838  001474  50DE               	movf	postinc2,w,c
  1839  001476  18EE               	xorwf	postinc0,w,c
  1840  001478  E121               	bnz	l6248
  1841  00147A  50DE               	movf	postinc2,w,c
  1842  00147C  18EE               	xorwf	postinc0,w,c
  1843  00147E  E11E               	bnz	l6248
  1844  001480  50DE               	movf	postinc2,w,c
  1845  001482  18EE               	xorwf	postinc0,w,c
  1846  001484  E11B               	bnz	l6248
  1847  001486  50DE               	movf	postinc2,w,c
  1848  001488  18EE               	xorwf	postinc0,w,c
  1849  00148A  A4D8               	btfss	status,2,c
  1850  00148C  D017               	goto	l6248
  1851                           
  1852                           ; BSR set to: 0
  1853  00148E  C06D  FFD9         	movff	f_write@fp,fsr2l
  1854  001492  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1855  001496  CFDE F01B          	movff	postinc2,sync_window@fs
  1856  00149A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  1857  00149E  ECA0  F01F         	call	_sync_window	;wreg free
  1858  0014A2  0900               	iorlw	0
  1859  0014A4  B4D8               	btfsc	status,2,c
  1860  0014A6  D00A               	goto	l6248
  1861                           
  1862                           ;ff.c: 2740:     { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  1863  0014A8  0100               	movlb	0	; () banked
  1864  0014AA  EE20 F005          	lfsr	2,5
  1865  0014AE  516D               	movf	f_write@fp& (0+255),w,b
  1866  0014B0  26D9               	addwf	fsr2l,f,c
  1867  0014B2  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1868  0014B4  22DA               	addwfc	fsr2h,f,c
  1869  0014B6  0E01               	movlw	1
  1870  0014B8  6EDF               	movwf	indf2,c
  1871  0014BA  0012               	return	
  1872  0014BC                     l6248:
  1873                           
  1874                           ;ff.c: 2748:    sect = clust2sect(fp->fs, fp->clust);
  1875  0014BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  1876  0014C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1877  0014C4  CFDE F00D          	movff	postinc2,clust2sect@fs
  1878  0014C8  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  1879  0014CC  0100               	movlb	0	; () banked
  1880  0014CE  EE20 F012          	lfsr	2,18
  1881  0014D2  516D               	movf	f_write@fp& (0+255),w,b
  1882  0014D4  26D9               	addwf	fsr2l,f,c
  1883  0014D6  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1884  0014D8  22DA               	addwfc	fsr2h,f,c
  1885  0014DA  CFDE F00F          	movff	postinc2,clust2sect@clst
  1886  0014DE  CFDE F010          	movff	postinc2,clust2sect@clst+1
  1887  0014E2  CFDE F011          	movff	postinc2,clust2sect@clst+2
  1888  0014E6  CFDE F012          	movff	postinc2,clust2sect@clst+3
  1889  0014EA  ECCD  F026         	call	_clust2sect	;wreg free
  1890  0014EE  C00D  F087         	movff	?_clust2sect,f_write@sect
  1891  0014F2  C00E  F088         	movff	?_clust2sect+1,f_write@sect+1
  1892  0014F6  C00F  F089         	movff	?_clust2sect+2,f_write@sect+2
  1893  0014FA  C010  F08A         	movff	?_clust2sect+3,f_write@sect+3
  1894                           
  1895                           ;ff.c: 2749:    if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  1896  0014FE  0100               	movlb	0	; () banked
  1897  001500  5187               	movf	f_write@sect& (0+255),w,b
  1898  001502  1188               	iorwf	(f_write@sect+1)& (0+255),w,b
  1899  001504  1189               	iorwf	(f_write@sect+2)& (0+255),w,b
  1900  001506  118A               	iorwf	(f_write@sect+3)& (0+255),w,b
  1901  001508  A4D8               	btfss	status,2,c
  1902  00150A  D009               	goto	l6256
  1903                           
  1904                           ; BSR set to: 0
  1905  00150C  EE20 F005          	lfsr	2,5
  1906  001510  516D               	movf	f_write@fp& (0+255),w,b
  1907  001512  26D9               	addwf	fsr2l,f,c
  1908  001514  516E               	movf	(f_write@fp+1)& (0+255),w,b
  1909  001516  22DA               	addwfc	fsr2h,f,c
  1910  001518  0E02               	movlw	2
  1911  00151A  6EDF               	movwf	indf2,c
  1912  00151C  0012               	return	
  1913  00151E                     l6256:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;ff.c: 2750:    sect += csect;
  1917  00151E  5184               	movf	f_write@csect& (0+255),w,b
  1918  001520  2787               	addwf	f_write@sect& (0+255),f,b
  1919  001522  0E00               	movlw	0
  1920  001524  2388               	addwfc	(f_write@sect+1)& (0+255),f,b
  1921  001526  2389               	addwfc	(f_write@sect+2)& (0+255),f,b
  1922  001528  238A               	addwfc	(f_write@sect+3)& (0+255),f,b
  1923                           
  1924                           ;ff.c: 2751:    cc = btw / ((UINT)512);
  1925  00152A  C071  F075         	movff	f_write@btw,??_f_write
  1926  00152E  C072  F076         	movff	f_write@btw+1,??_f_write+1
  1927  001532  0E09               	movlw	9
  1928  001534  6F77               	movwf	(??_f_write+2)& (0+255),b
  1929  001536                     u8515:
  1930  001536  90D8               	bcf	status,0,c
  1931  001538  3376               	rrcf	(??_f_write+1)& (0+255),f,b
  1932  00153A  3375               	rrcf	??_f_write& (0+255),f,b
  1933  00153C  2F77               	decfsz	(??_f_write+2)& (0+255),f,b
  1934  00153E  D7FB               	goto	u8515
  1935  001540  C075  F085         	movff	??_f_write,f_write@cc
  1936  001544  C076  F086         	movff	??_f_write+1,f_write@cc+1
  1937                           
  1938                           ;ff.c: 2752:    if (cc) {
  1939  001548  5185               	movf	f_write@cc& (0+255),w,b
  1940  00154A  1186               	iorwf	(f_write@cc+1)& (0+255),w,b
  1941  00154C  B4D8               	btfsc	status,2,c
  1942  00154E  D0D2               	goto	l6276
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;ff.c: 2753:     if (csect + cc > fp->fs->csize)
  1946  001550  5184               	movf	f_write@csect& (0+255),w,b
  1947  001552  2585               	addwf	f_write@cc& (0+255),w,b
  1948  001554  6F75               	movwf	??_f_write& (0+255),b
  1949  001556  0E00               	movlw	0
  1950  001558  2186               	addwfc	(f_write@cc+1)& (0+255),w,b
  1951  00155A  6F76               	movwf	(??_f_write+1)& (0+255),b
  1952  00155C  C06D  FFD9         	movff	f_write@fp,fsr2l
  1953  001560  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1954  001564  EE10 F002          	lfsr	1,2
  1955  001568  50DE               	movf	postinc2,w,c
  1956  00156A  26E1               	addwf	fsr1l,f,c
  1957  00156C  50DD               	movf	postdec2,w,c
  1958  00156E  22E2               	addwfc	fsr1h,f,c
  1959  001570  50E7               	movf	indf1,w,c
  1960  001572  6F77               	movwf	(??_f_write+2)& (0+255),b
  1961  001574  6B78               	clrf	(??_f_write+3)& (0+255),b
  1962  001576  5175               	movf	??_f_write& (0+255),w,b
  1963  001578  5D77               	subwf	(??_f_write+2)& (0+255),w,b
  1964  00157A  5176               	movf	(??_f_write+1)& (0+255),w,b
  1965  00157C  5978               	subwfb	(??_f_write+3)& (0+255),w,b
  1966  00157E  B0D8               	btfsc	status,0,c
  1967  001580  D012               	goto	l6262
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;ff.c: 2754:      cc = fp->fs->csize - csect;
  1971  001582  C06D  FFD9         	movff	f_write@fp,fsr2l
  1972  001586  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  1973  00158A  EE10 F002          	lfsr	1,2
  1974  00158E  50DE               	movf	postinc2,w,c
  1975  001590  26E1               	addwf	fsr1l,f,c
  1976  001592  50DD               	movf	postdec2,w,c
  1977  001594  22E2               	addwfc	fsr1h,f,c
  1978  001596  50E7               	movf	indf1,w,c
  1979  001598  6F75               	movwf	??_f_write& (0+255),b
  1980  00159A  5184               	movf	f_write@csect& (0+255),w,b
  1981  00159C  5D75               	subwf	??_f_write& (0+255),w,b
  1982  00159E  6F85               	movwf	f_write@cc& (0+255),b
  1983  0015A0  6B86               	clrf	(f_write@cc+1)& (0+255),b
  1984  0015A2  A0D8               	btfss	status,0,c
  1985  0015A4  0786               	decf	(f_write@cc+1)& (0+255),f,b
  1986  0015A6                     l6262:
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;ff.c: 2755:     if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
  1990  0015A6  C082  F011         	movff	f_write@wbuff,disk_write@buff
  1991  0015AA  C083  F012         	movff	f_write@wbuff+1,disk_write@buff+1
  1992  0015AE  C087  F013         	movff	f_write@sect,disk_write@sector
  1993  0015B2  C088  F014         	movff	f_write@sect+1,disk_write@sector+1
  1994  0015B6  C089  F015         	movff	f_write@sect+2,disk_write@sector+2
  1995  0015BA  C08A  F016         	movff	f_write@sect+3,disk_write@sector+3
  1996  0015BE  C085  F017         	movff	f_write@cc,disk_write@count
  1997  0015C2  C086  F018         	movff	f_write@cc+1,disk_write@count+1
  1998  0015C6  C06D  FFD9         	movff	f_write@fp,fsr2l
  1999  0015CA  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2000  0015CE  EE10 F001          	lfsr	1,1
  2001  0015D2  50DE               	movf	postinc2,w,c
  2002  0015D4  26E1               	addwf	fsr1l,f,c
  2003  0015D6  50DD               	movf	postdec2,w,c
  2004  0015D8  22E2               	addwfc	fsr1h,f,c
  2005  0015DA  50E7               	movf	indf1,w,c
  2006  0015DC  ECD7  F022         	call	_disk_write
  2007  0015E0  0900               	iorlw	0
  2008  0015E2  B4D8               	btfsc	status,2,c
  2009  0015E4  D00A               	goto	l6268
  2010                           
  2011                           ;ff.c: 2756:      { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2012  0015E6  0100               	movlb	0	; () banked
  2013  0015E8  EE20 F005          	lfsr	2,5
  2014  0015EC  516D               	movf	f_write@fp& (0+255),w,b
  2015  0015EE  26D9               	addwf	fsr2l,f,c
  2016  0015F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2017  0015F2  22DA               	addwfc	fsr2h,f,c
  2018  0015F4  0E01               	movlw	1
  2019  0015F6  6EDF               	movwf	indf2,c
  2020  0015F8  0012               	return	
  2021  0015FA                     l6268:
  2022                           
  2023                           ;ff.c: 2759:     if (fp->fs->winsect - sect < cc) {
  2024  0015FA  0100               	movlb	0	; () banked
  2025  0015FC  5185               	movf	f_write@cc& (0+255),w,b
  2026  0015FE  6F75               	movwf	??_f_write& (0+255),b
  2027  001600  5186               	movf	(f_write@cc+1)& (0+255),w,b
  2028  001602  6F76               	movwf	(??_f_write+1)& (0+255),b
  2029  001604  6B77               	clrf	(??_f_write+2)& (0+255),b
  2030  001606  6B78               	clrf	(??_f_write+3)& (0+255),b
  2031  001608  C06D  FFD9         	movff	f_write@fp,fsr2l
  2032  00160C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2033  001610  EE10 F02A          	lfsr	1,42
  2034  001614  50DE               	movf	postinc2,w,c
  2035  001616  26E1               	addwf	fsr1l,f,c
  2036  001618  50DD               	movf	postdec2,w,c
  2037  00161A  22E2               	addwfc	fsr1h,f,c
  2038  00161C  CFE6 F079          	movff	postinc1,??_f_write+4
  2039  001620  CFE6 F07A          	movff	postinc1,??_f_write+5
  2040  001624  CFE6 F07B          	movff	postinc1,??_f_write+6
  2041  001628  CFE6 F07C          	movff	postinc1,??_f_write+7
  2042  00162C  5187               	movf	f_write@sect& (0+255),w,b
  2043  00162E  5D79               	subwf	(??_f_write+4)& (0+255),w,b
  2044  001630  6F7D               	movwf	(??_f_write+8)& (0+255),b
  2045  001632  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2046  001634  597A               	subwfb	(??_f_write+5)& (0+255),w,b
  2047  001636  6F7E               	movwf	(??_f_write+9)& (0+255),b
  2048  001638  5189               	movf	(f_write@sect+2)& (0+255),w,b
  2049  00163A  597B               	subwfb	(??_f_write+6)& (0+255),w,b
  2050  00163C  6F7F               	movwf	(??_f_write+10)& (0+255),b
  2051  00163E  518A               	movf	(f_write@sect+3)& (0+255),w,b
  2052  001640  597C               	subwfb	(??_f_write+7)& (0+255),w,b
  2053  001642  6F80               	movwf	(??_f_write+11)& (0+255),b
  2054  001644  5175               	movf	??_f_write& (0+255),w,b
  2055  001646  5D7D               	subwf	(??_f_write+8)& (0+255),w,b
  2056  001648  5176               	movf	(??_f_write+1)& (0+255),w,b
  2057  00164A  597E               	subwfb	(??_f_write+9)& (0+255),w,b
  2058  00164C  5177               	movf	(??_f_write+2)& (0+255),w,b
  2059  00164E  597F               	subwfb	(??_f_write+10)& (0+255),w,b
  2060  001650  5178               	movf	(??_f_write+3)& (0+255),w,b
  2061  001652  5980               	subwfb	(??_f_write+11)& (0+255),w,b
  2062  001654  B0D8               	btfsc	status,0,c
  2063  001656  D03E               	goto	l6274
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;ff.c: 2760:      mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * ((UINT)512)),
      +                           ((UINT)512));
  2067  001658  C06D  FFD9         	movff	f_write@fp,fsr2l
  2068  00165C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2069  001660  CFDE F075          	movff	postinc2,??_f_write
  2070  001664  CFDD F076          	movff	postdec2,??_f_write+1
  2071  001668  0E2E               	movlw	46
  2072  00166A  2575               	addwf	??_f_write& (0+255),w,b
  2073  00166C  6E01               	movwf	mem_cpy@dst,c
  2074  00166E  0E00               	movlw	0
  2075  001670  2176               	addwfc	(??_f_write+1)& (0+255),w,b
  2076  001672  6E02               	movwf	mem_cpy@dst+1,c
  2077  001674  C06D  FFD9         	movff	f_write@fp,fsr2l
  2078  001678  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2079  00167C  EE10 F02A          	lfsr	1,42
  2080  001680  50DE               	movf	postinc2,w,c
  2081  001682  26E1               	addwf	fsr1l,f,c
  2082  001684  50DD               	movf	postdec2,w,c
  2083  001686  22E2               	addwfc	fsr1h,f,c
  2084  001688  CFE6 F077          	movff	postinc1,??_f_write+2
  2085  00168C  CFE5 F078          	movff	postdec1,??_f_write+3
  2086  001690  5187               	movf	f_write@sect& (0+255),w,b
  2087  001692  5F77               	subwf	(??_f_write+2)& (0+255),f,b
  2088  001694  5188               	movf	(f_write@sect+1)& (0+255),w,b
  2089  001696  5B78               	subwfb	(??_f_write+3)& (0+255),f,b
  2090  001698  0E09               	movlw	9
  2091  00169A                     u8565:
  2092  00169A  90D8               	bcf	status,0,c
  2093  00169C  3777               	rlcf	(??_f_write+2)& (0+255),f,b
  2094  00169E  3778               	rlcf	(??_f_write+3)& (0+255),f,b
  2095  0016A0  2EE8               	decfsz	wreg,f,c
  2096  0016A2  D7FB               	goto	u8565
  2097  0016A4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2098  0016A6  2582               	addwf	f_write@wbuff& (0+255),w,b
  2099  0016A8  6E03               	movwf	mem_cpy@src,c
  2100  0016AA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2101  0016AC  2183               	addwfc	(f_write@wbuff+1)& (0+255),w,b
  2102  0016AE  6E04               	movwf	mem_cpy@src+1,c
  2103  0016B0  0E02               	movlw	2
  2104  0016B2  6E06               	movwf	mem_cpy@cnt+1,c
  2105  0016B4  0E00               	movlw	0
  2106  0016B6  6E05               	movwf	mem_cpy@cnt,c
  2107  0016B8  EC70  F026         	call	_mem_cpy	;wreg free
  2108                           
  2109                           ;ff.c: 2761:      fp->fs->wflag = 0;
  2110  0016BC  C06D  FFD9         	movff	f_write@fp,fsr2l
  2111  0016C0  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2112  0016C4  EE10 F004          	lfsr	1,4
  2113  0016C8  50DE               	movf	postinc2,w,c
  2114  0016CA  26E1               	addwf	fsr1l,f,c
  2115  0016CC  50DD               	movf	postdec2,w,c
  2116  0016CE  22E2               	addwfc	fsr1h,f,c
  2117  0016D0  0E00               	movlw	0
  2118  0016D2  6EE7               	movwf	indf1,c
  2119  0016D4                     l6274:
  2120                           
  2121                           ;ff.c: 2770:     wcnt = ((UINT)512) * cc;
  2122  0016D4  C085  F075         	movff	f_write@cc,??_f_write
  2123  0016D8  C086  F076         	movff	f_write@cc+1,??_f_write+1
  2124  0016DC  0E09               	movlw	9
  2125  0016DE                     u8575:
  2126  0016DE  90D8               	bcf	status,0,c
  2127  0016E0  0100               	movlb	0	; () banked
  2128  0016E2  3775               	rlcf	??_f_write& (0+255),f,b
  2129  0016E4  3776               	rlcf	(??_f_write+1)& (0+255),f,b
  2130  0016E6  2EE8               	decfsz	wreg,f,c
  2131  0016E8  D7FA               	goto	u8575
  2132  0016EA  C075  F08F         	movff	??_f_write,f_write@wcnt
  2133  0016EE  C076  F090         	movff	??_f_write+1,f_write@wcnt+1
  2134                           
  2135                           ;ff.c: 2771:     continue;
  2136  0016F2  D0D2               	goto	l6304
  2137  0016F4                     l6276:
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;ff.c: 2774:    if (fp->fptr >= fp->fsize) {
  2141  0016F4  EE20 F00A          	lfsr	2,10
  2142  0016F8  516D               	movf	f_write@fp& (0+255),w,b
  2143  0016FA  26D9               	addwf	fsr2l,f,c
  2144  0016FC  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2145  0016FE  22DA               	addwfc	fsr2h,f,c
  2146  001700  EE10 F006          	lfsr	1,6
  2147  001704  516D               	movf	f_write@fp& (0+255),w,b
  2148  001706  26E1               	addwf	fsr1l,f,c
  2149  001708  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2150  00170A  22E2               	addwfc	fsr1h,f,c
  2151  00170C  50DE               	movf	postinc2,w,c
  2152  00170E  5CE6               	subwf	postinc1,w,c
  2153  001710  50DE               	movf	postinc2,w,c
  2154  001712  58E6               	subwfb	postinc1,w,c
  2155  001714  50DE               	movf	postinc2,w,c
  2156  001716  58E6               	subwfb	postinc1,w,c
  2157  001718  50DE               	movf	postinc2,w,c
  2158  00171A  58E6               	subwfb	postinc1,w,c
  2159  00171C  A0D8               	btfss	status,0,c
  2160  00171E  D029               	goto	l6286
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;ff.c: 2775:     if (sync_window(fp->fs)) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  2164  001720  C06D  FFD9         	movff	f_write@fp,fsr2l
  2165  001724  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2166  001728  CFDE F01B          	movff	postinc2,sync_window@fs
  2167  00172C  CFDD F01C          	movff	postdec2,sync_window@fs+1
  2168  001730  ECA0  F01F         	call	_sync_window	;wreg free
  2169  001734  0900               	iorlw	0
  2170  001736  B4D8               	btfsc	status,2,c
  2171  001738  D00A               	goto	l6284
  2172  00173A  0100               	movlb	0	; () banked
  2173  00173C  EE20 F005          	lfsr	2,5
  2174  001740  516D               	movf	f_write@fp& (0+255),w,b
  2175  001742  26D9               	addwf	fsr2l,f,c
  2176  001744  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2177  001746  22DA               	addwfc	fsr2h,f,c
  2178  001748  0E01               	movlw	1
  2179  00174A  6EDF               	movwf	indf2,c
  2180  00174C  0012               	return	
  2181  00174E                     l6284:
  2182                           
  2183                           ;ff.c: 2776:     fp->fs->winsect = sect;
  2184  00174E  C06D  FFD9         	movff	f_write@fp,fsr2l
  2185  001752  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2186  001756  EE10 F02A          	lfsr	1,42
  2187  00175A  50DE               	movf	postinc2,w,c
  2188  00175C  26E1               	addwf	fsr1l,f,c
  2189  00175E  50DD               	movf	postdec2,w,c
  2190  001760  22E2               	addwfc	fsr1h,f,c
  2191  001762  C087  FFE6         	movff	f_write@sect,postinc1
  2192  001766  C088  FFE6         	movff	f_write@sect+1,postinc1
  2193  00176A  C089  FFE6         	movff	f_write@sect+2,postinc1
  2194  00176E  C08A  FFE6         	movff	f_write@sect+3,postinc1
  2195  001772                     l6286:
  2196                           
  2197                           ;ff.c: 2785:    fp->dsect = sect;
  2198  001772  0100               	movlb	0	; () banked
  2199  001774  EE20 F016          	lfsr	2,22
  2200  001778  516D               	movf	f_write@fp& (0+255),w,b
  2201  00177A  26D9               	addwf	fsr2l,f,c
  2202  00177C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2203  00177E  22DA               	addwfc	fsr2h,f,c
  2204  001780  C087  FFDE         	movff	f_write@sect,postinc2
  2205  001784  C088  FFDE         	movff	f_write@sect+1,postinc2
  2206  001788  C089  FFDE         	movff	f_write@sect+2,postinc2
  2207  00178C  C08A  FFDE         	movff	f_write@sect+3,postinc2
  2208  001790                     l6288:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;ff.c: 2787:   wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));
  2212  001790  0EFF               	movlw	255
  2213  001792  6F75               	movwf	??_f_write& (0+255),b
  2214  001794  0E01               	movlw	1
  2215  001796  6F76               	movwf	(??_f_write+1)& (0+255),b
  2216  001798  EE20 F006          	lfsr	2,6
  2217  00179C  516D               	movf	f_write@fp& (0+255),w,b
  2218  00179E  26D9               	addwf	fsr2l,f,c
  2219  0017A0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2220  0017A2  22DA               	addwfc	fsr2h,f,c
  2221  0017A4  CFDE F077          	movff	postinc2,??_f_write+2
  2222  0017A8  CFDD F078          	movff	postdec2,??_f_write+3
  2223  0017AC  5175               	movf	??_f_write& (0+255),w,b
  2224  0017AE  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2225  0017B0  5176               	movf	(??_f_write+1)& (0+255),w,b
  2226  0017B2  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2227  0017B4  5177               	movf	(??_f_write+2)& (0+255),w,b
  2228  0017B6  0800               	sublw	0
  2229  0017B8  6F8F               	movwf	f_write@wcnt& (0+255),b
  2230  0017BA  5178               	movf	(??_f_write+3)& (0+255),w,b
  2231  0017BC  A0D8               	btfss	status,0,c
  2232  0017BE  2AE8               	incf	wreg,f,c
  2233  0017C0  0802               	sublw	2
  2234  0017C2  6F90               	movwf	(f_write@wcnt+1)& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;ff.c: 2788:   if (wcnt > btw) wcnt = btw;
  2238  0017C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2239  0017C6  5D71               	subwf	f_write@btw& (0+255),w,b
  2240  0017C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2241  0017CA  5972               	subwfb	(f_write@btw+1)& (0+255),w,b
  2242  0017CC  B0D8               	btfsc	status,0,c
  2243  0017CE  D004               	goto	l6294
  2244                           
  2245                           ; BSR set to: 0
  2246  0017D0  C071  F08F         	movff	f_write@btw,f_write@wcnt
  2247  0017D4  C072  F090         	movff	f_write@btw+1,f_write@wcnt+1
  2248  0017D8                     l6294:
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;ff.c: 2790:   if (move_window(fp->fs, fp->dsect) != FR_OK)
  2252  0017D8  C06D  FFD9         	movff	f_write@fp,fsr2l
  2253  0017DC  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2254  0017E0  CFDE F030          	movff	postinc2,move_window@fs
  2255  0017E4  CFDD F031          	movff	postdec2,move_window@fs+1
  2256  0017E8  EE20 F016          	lfsr	2,22
  2257  0017EC  516D               	movf	f_write@fp& (0+255),w,b
  2258  0017EE  26D9               	addwf	fsr2l,f,c
  2259  0017F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2260  0017F2  22DA               	addwfc	fsr2h,f,c
  2261  0017F4  CFDE F032          	movff	postinc2,move_window@sector
  2262  0017F8  CFDE F033          	movff	postinc2,move_window@sector+1
  2263  0017FC  CFDE F034          	movff	postinc2,move_window@sector+2
  2264  001800  CFDE F035          	movff	postinc2,move_window@sector+3
  2265  001804  EC82  F027         	call	_move_window	;wreg free
  2266  001808  0900               	iorlw	0
  2267  00180A  B4D8               	btfsc	status,2,c
  2268  00180C  D00A               	goto	l6300
  2269                           
  2270                           ;ff.c: 2791:    { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
  2271  00180E  0100               	movlb	0	; () banked
  2272  001810  EE20 F005          	lfsr	2,5
  2273  001814  516D               	movf	f_write@fp& (0+255),w,b
  2274  001816  26D9               	addwf	fsr2l,f,c
  2275  001818  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2276  00181A  22DA               	addwfc	fsr2h,f,c
  2277  00181C  0E01               	movlw	1
  2278  00181E  6EDF               	movwf	indf2,c
  2279  001820  0012               	return	
  2280  001822                     l6300:
  2281                           
  2282                           ;ff.c: 2792:   mem_cpy(&fp->fs->win[fp->fptr % ((UINT)512)], wbuff, wcnt);
  2283  001822  0EFF               	movlw	255
  2284  001824  0100               	movlb	0	; () banked
  2285  001826  6F75               	movwf	??_f_write& (0+255),b
  2286  001828  0E01               	movlw	1
  2287  00182A  6F76               	movwf	(??_f_write+1)& (0+255),b
  2288  00182C  EE20 F006          	lfsr	2,6
  2289  001830  516D               	movf	f_write@fp& (0+255),w,b
  2290  001832  26D9               	addwf	fsr2l,f,c
  2291  001834  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2292  001836  22DA               	addwfc	fsr2h,f,c
  2293  001838  CFDE F077          	movff	postinc2,??_f_write+2
  2294  00183C  CFDD F078          	movff	postdec2,??_f_write+3
  2295  001840  5175               	movf	??_f_write& (0+255),w,b
  2296  001842  1777               	andwf	(??_f_write+2)& (0+255),f,b
  2297  001844  5176               	movf	(??_f_write+1)& (0+255),w,b
  2298  001846  1778               	andwf	(??_f_write+3)& (0+255),f,b
  2299  001848  C06D  FFD9         	movff	f_write@fp,fsr2l
  2300  00184C  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2301  001850  CFDE F079          	movff	postinc2,??_f_write+4
  2302  001854  CFDD F07A          	movff	postdec2,??_f_write+5
  2303  001858  5177               	movf	(??_f_write+2)& (0+255),w,b
  2304  00185A  2779               	addwf	(??_f_write+4)& (0+255),f,b
  2305  00185C  5178               	movf	(??_f_write+3)& (0+255),w,b
  2306  00185E  237A               	addwfc	(??_f_write+5)& (0+255),f,b
  2307  001860  0E2E               	movlw	46
  2308  001862  2579               	addwf	(??_f_write+4)& (0+255),w,b
  2309  001864  6E01               	movwf	mem_cpy@dst,c
  2310  001866  0E00               	movlw	0
  2311  001868  217A               	addwfc	(??_f_write+5)& (0+255),w,b
  2312  00186A  6E02               	movwf	mem_cpy@dst+1,c
  2313  00186C  C082  F003         	movff	f_write@wbuff,mem_cpy@src
  2314  001870  C083  F004         	movff	f_write@wbuff+1,mem_cpy@src+1
  2315  001874  C08F  F005         	movff	f_write@wcnt,mem_cpy@cnt
  2316  001878  C090  F006         	movff	f_write@wcnt+1,mem_cpy@cnt+1
  2317  00187C  EC70  F026         	call	_mem_cpy	;wreg free
  2318                           
  2319                           ;ff.c: 2793:   fp->fs->wflag = 1;
  2320  001880  C06D  FFD9         	movff	f_write@fp,fsr2l
  2321  001884  C06E  FFDA         	movff	f_write@fp+1,fsr2h
  2322  001888  EE10 F004          	lfsr	1,4
  2323  00188C  50DE               	movf	postinc2,w,c
  2324  00188E  26E1               	addwf	fsr1l,f,c
  2325  001890  50DD               	movf	postdec2,w,c
  2326  001892  22E2               	addwfc	fsr1h,f,c
  2327  001894  0E01               	movlw	1
  2328  001896  6EE7               	movwf	indf1,c
  2329  001898                     l6304:
  2330  001898  0100               	movlb	0	; () banked
  2331  00189A  518F               	movf	f_write@wcnt& (0+255),w,b
  2332  00189C  2782               	addwf	f_write@wbuff& (0+255),f,b
  2333  00189E  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2334  0018A0  2383               	addwfc	(f_write@wbuff+1)& (0+255),f,b
  2335                           
  2336                           ; BSR set to: 0
  2337  0018A2  EE20 F006          	lfsr	2,6
  2338  0018A6  516D               	movf	f_write@fp& (0+255),w,b
  2339  0018A8  26D9               	addwf	fsr2l,f,c
  2340  0018AA  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2341  0018AC  22DA               	addwfc	fsr2h,f,c
  2342  0018AE  518F               	movf	f_write@wcnt& (0+255),w,b
  2343  0018B0  26DE               	addwf	postinc2,f,c
  2344  0018B2  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2345  0018B4  22DE               	addwfc	postinc2,f,c
  2346  0018B6  0E00               	movlw	0
  2347  0018B8  22DE               	addwfc	postinc2,f,c
  2348  0018BA  22DE               	addwfc	postinc2,f,c
  2349                           
  2350                           ; BSR set to: 0
  2351  0018BC  C073  FFD9         	movff	f_write@bw,fsr2l
  2352  0018C0  C074  FFDA         	movff	f_write@bw+1,fsr2h
  2353  0018C4  518F               	movf	f_write@wcnt& (0+255),w,b
  2354  0018C6  26DE               	addwf	postinc2,f,c
  2355  0018C8  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2356  0018CA  22DD               	addwfc	postdec2,f,c
  2357                           
  2358                           ; BSR set to: 0
  2359  0018CC  518F               	movf	f_write@wcnt& (0+255),w,b
  2360  0018CE  5F71               	subwf	f_write@btw& (0+255),f,b
  2361  0018D0  5190               	movf	(f_write@wcnt+1)& (0+255),w,b
  2362  0018D2  5B72               	subwfb	(f_write@btw+1)& (0+255),f,b
  2363  0018D4                     l6312:
  2364                           
  2365                           ; BSR set to: 0
  2366  0018D4  5171               	movf	f_write@btw& (0+255),w,b
  2367  0018D6  1172               	iorwf	(f_write@btw+1)& (0+255),w,b
  2368  0018D8  A4D8               	btfss	status,2,c
  2369  0018DA  D4D8               	goto	l6204
  2370  0018DC                     u8620:
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;ff.c: 2800:  if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;
  2374  0018DC  EE20 F006          	lfsr	2,6
  2375  0018E0  516D               	movf	f_write@fp& (0+255),w,b
  2376  0018E2  26D9               	addwf	fsr2l,f,c
  2377  0018E4  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2378  0018E6  22DA               	addwfc	fsr2h,f,c
  2379  0018E8  EE10 F00A          	lfsr	1,10
  2380  0018EC  516D               	movf	f_write@fp& (0+255),w,b
  2381  0018EE  26E1               	addwf	fsr1l,f,c
  2382  0018F0  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2383  0018F2  22E2               	addwfc	fsr1h,f,c
  2384  0018F4  50DE               	movf	postinc2,w,c
  2385  0018F6  5CE6               	subwf	postinc1,w,c
  2386  0018F8  50DE               	movf	postinc2,w,c
  2387  0018FA  58E6               	subwfb	postinc1,w,c
  2388  0018FC  50DE               	movf	postinc2,w,c
  2389  0018FE  58E6               	subwfb	postinc1,w,c
  2390  001900  50DE               	movf	postinc2,w,c
  2391  001902  58E6               	subwfb	postinc1,w,c
  2392  001904  B0D8               	btfsc	status,0,c
  2393  001906  D014               	goto	l6318
  2394                           
  2395                           ; BSR set to: 0
  2396  001908  EE20 F006          	lfsr	2,6
  2397  00190C  516D               	movf	f_write@fp& (0+255),w,b
  2398  00190E  26D9               	addwf	fsr2l,f,c
  2399  001910  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2400  001912  22DA               	addwfc	fsr2h,f,c
  2401  001914  EE10 F00A          	lfsr	1,10
  2402  001918  516D               	movf	f_write@fp& (0+255),w,b
  2403  00191A  26E1               	addwf	fsr1l,f,c
  2404  00191C  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2405  00191E  22E2               	addwfc	fsr1h,f,c
  2406  001920  CFDE FFE6          	movff	postinc2,postinc1
  2407  001924  CFDE FFE6          	movff	postinc2,postinc1
  2408  001928  CFDE FFE6          	movff	postinc2,postinc1
  2409  00192C  CFDE FFE6          	movff	postinc2,postinc1
  2410  001930                     l6318:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;ff.c: 2801:  fp->flag |= 0x20;
  2414  001930  EE20 F004          	lfsr	2,4
  2415  001934  516D               	movf	f_write@fp& (0+255),w,b
  2416  001936  26D9               	addwf	fsr2l,f,c
  2417  001938  516E               	movf	(f_write@fp+1)& (0+255),w,b
  2418  00193A  22DA               	addwfc	fsr2h,f,c
  2419  00193C  0E00               	movlw	0
  2420  00193E  8ADB               	bsf	plusw2,5,c
  2421                           
  2422                           ; BSR set to: 0
  2423  001940  0012               	return		;funcret
  2424  001942                     __end_of_f_write:
  2425                           	opt callstack 0
  2426                           
  2427 ;; *************** function _f_open *****************
  2428 ;; Defined at:
  2429 ;;		line 2449 in file "ff.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  fp              2   58[BANK0 ] PTR struct .
  2432 ;;		 -> Fil(32), 
  2433 ;;  path            2   60[BANK0 ] PTR const unsigned char 
  2434 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  2435 ;;  mode            1   62[BANK0 ] unsigned char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  dj             22   90[BANK0 ] struct .
  2438 ;;  sfn            12   67[BANK0 ] unsigned char [12]
  2439 ;;  dw              4   83[BANK0 ] unsigned long 
  2440 ;;  cl              4   79[BANK0 ] unsigned long 
  2441 ;;  dir             2   88[BANK0 ] PTR unsigned char 
  2442 ;;		 -> NULL(0), FatFs(558), 
  2443 ;;  res             1   87[BANK0 ] enum E93
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      enum E4918
  2446 ;; Registers used:
  2447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2453 ;;      Params:         0       5       0       0       0       0       0       0       0
  2454 ;;      Locals:         0      45       0       0       0       0       0       0       0
  2455 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2456 ;;      Totals:         0      54       0       0       0       0       0       0       0
  2457 ;;Total ram usage:       54 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:   13
  2460 ;; This function calls:
  2461 ;;		_dir_register
  2462 ;;		_find_volume
  2463 ;;		_follow_path
  2464 ;;		_ld_clust
  2465 ;;		_move_window
  2466 ;;		_remove_chain
  2467 ;;		_st_clust
  2468 ;; This function is called by:
  2469 ;;		_guardar
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text3
  2474  002FC0                     __ptext3:
  2475                           	opt callstack 0
  2476  002FC0                     _f_open:
  2477                           	opt callstack 16
  2478                           
  2479                           ;ff.c: 2450:  FIL* fp,;ff.c: 2451:  const TCHAR* path,;ff.c: 2452:  BYTE mode;ff.c: 2454
      +                          : {;ff.c: 2455:  FRESULT res;;ff.c: 2456:  DIRC dj;;ff.c: 2457:  BYTE *dir;;ff.c: 2458: 
      +                           BYTE sfn[12];;ff.c: 2460:  DWORD dw, cl;;ff.c: 2464:  if (!fp) return FR_INVALID_OBJECT
      +                          ;
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;incstack = 0
  2483  002FC0  0100               	movlb	0	; () banked
  2484  002FC2  519A               	movf	f_open@fp& (0+255),w,b
  2485  002FC4  119B               	iorwf	(f_open@fp+1)& (0+255),w,b
  2486  002FC6  A4D8               	btfss	status,2,c
  2487  002FC8  D002               	goto	l5950
  2488                           
  2489                           ; BSR set to: 0
  2490  002FCA  0E09               	movlw	9
  2491  002FCC  0012               	return	
  2492  002FCE                     l5950:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;ff.c: 2465:  fp->fs = 0;
  2496  002FCE  C09A  FFD9         	movff	f_open@fp,fsr2l
  2497  002FD2  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  2498  002FD6  0E00               	movlw	0
  2499  002FD8  6EDE               	movwf	postinc2,c
  2500  002FDA  0E00               	movlw	0
  2501  002FDC  6EDD               	movwf	postdec2,c
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;ff.c: 2468:  dj.fs = FatFs[0];
  2505  002FDE  C0D6  F0BA         	movff	ff@FatFs,f_open@dj
  2506  002FE2  C0D7  F0BB         	movff	ff@FatFs+1,f_open@dj+1
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;ff.c: 2473:  mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
  2510  002FE6  0E1F               	movlw	31
  2511  002FE8  179E               	andwf	f_open@mode& (0+255),f,b
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;ff.c: 2474:  res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
  2515  002FEA  0EBA               	movlw	low f_open@dj
  2516  002FEC  6E45               	movwf	find_volume@rfs,c
  2517  002FEE  0E00               	movlw	high f_open@dj
  2518  002FF0  6E46               	movwf	find_volume@rfs+1,c
  2519  002FF2  0E9C               	movlw	low f_open@path
  2520  002FF4  6E47               	movwf	find_volume@path,c
  2521  002FF6  0E00               	movlw	high f_open@path
  2522  002FF8  6E48               	movwf	find_volume@path+1,c
  2523  002FFA  519E               	movf	f_open@mode& (0+255),w,b
  2524  002FFC  0BFE               	andlw	254
  2525  002FFE  6E49               	movwf	find_volume@wmode,c
  2526  003000  EC18  F004         	call	_find_volume	;wreg free
  2527  003004  0100               	movlb	0	; () banked
  2528  003006  6FB7               	movwf	f_open@res& (0+255),b
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;ff.c: 2479:  if (res == FR_OK) {
  2532  003008  51B7               	movf	f_open@res& (0+255),w,b
  2533  00300A  A4D8               	btfss	status,2,c
  2534  00300C  D1A2               	goto	l6054
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;ff.c: 2480:   (dj).fn = sfn;
  2538  00300E  0EA3               	movlw	low f_open@sfn
  2539  003010  6FCE               	movwf	(f_open@dj+20)& (0+255),b
  2540  003012  0E00               	movlw	high f_open@sfn
  2541  003014  6FCF               	movwf	(f_open@dj+21)& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;ff.c: 2481:   res = follow_path(&dj, path);
  2545  003016  0EBA               	movlw	low f_open@dj
  2546  003018  6F86               	movwf	follow_path@dp& (0+255),b
  2547  00301A  0E00               	movlw	high f_open@dj
  2548  00301C  6F87               	movwf	(follow_path@dp+1)& (0+255),b
  2549  00301E  C09C  F088         	movff	f_open@path,follow_path@path
  2550  003022  C09D  F089         	movff	f_open@path+1,follow_path@path+1
  2551  003026  ECF1  F020         	call	_follow_path	;wreg free
  2552  00302A  0100               	movlb	0	; () banked
  2553  00302C  6FB7               	movwf	f_open@res& (0+255),b
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;ff.c: 2482:   dir = dj.dir;
  2557  00302E  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2558  003032  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;ff.c: 2484:   if (res == FR_OK) {
  2562  003036  51B7               	movf	f_open@res& (0+255),w,b
  2563  003038  A4D8               	btfss	status,2,c
  2564  00303A  D006               	goto	l5972
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;ff.c: 2485:    if (!dir)
  2568  00303C  51B8               	movf	f_open@dir& (0+255),w,b
  2569  00303E  11B9               	iorwf	(f_open@dir+1)& (0+255),w,b
  2570  003040  A4D8               	btfss	status,2,c
  2571  003042  D002               	goto	l5972
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;ff.c: 2486:     res = FR_INVALID_NAME;
  2575  003044  0E06               	movlw	6
  2576  003046  6FB7               	movwf	f_open@res& (0+255),b
  2577  003048                     l5972:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;ff.c: 2493:   if (mode & (0x08 | 0x10 | 0x04)) {
  2581  003048  C09E  F09F         	movff	f_open@mode,??_f_open
  2582  00304C  0E1C               	movlw	28
  2583  00304E  179F               	andwf	??_f_open& (0+255),f,b
  2584  003050  B4D8               	btfsc	status,2,c
  2585  003052  D0D3               	goto	l6020
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;ff.c: 2494:    if (res != FR_OK) {
  2589  003054  51B7               	movf	f_open@res& (0+255),w,b
  2590  003056  B4D8               	btfsc	status,2,c
  2591  003058  D012               	goto	l5984
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;ff.c: 2495:     if (res == FR_NO_FILE)
  2595  00305A  0E04               	movlw	4
  2596  00305C  19B7               	xorwf	f_open@res& (0+255),w,b
  2597  00305E  A4D8               	btfss	status,2,c
  2598  003060  D008               	goto	l5980
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;ff.c: 2499:      res = dir_register(&dj);
  2602  003062  0EBA               	movlw	low f_open@dj
  2603  003064  6F8A               	movwf	dir_register@dp& (0+255),b
  2604  003066  0E00               	movlw	high f_open@dj
  2605  003068  6F8B               	movwf	(dir_register@dp+1)& (0+255),b
  2606  00306A  EC9F  F025         	call	_dir_register	;wreg free
  2607  00306E  0100               	movlb	0	; () banked
  2608  003070  6FB7               	movwf	f_open@res& (0+255),b
  2609  003072                     l5980:
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;ff.c: 2501:     mode |= 0x08;
  2613  003072  879E               	bsf	f_open@mode& (0+255),3,b
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;ff.c: 2502:     dir = dj.dir;
  2617  003074  C0CC  F0B8         	movff	f_open@dj+18,f_open@dir
  2618  003078  C0CD  F0B9         	movff	f_open@dj+19,f_open@dir+1
  2619                           
  2620                           ;ff.c: 2503:    }
  2621  00307C  D012               	goto	l646
  2622  00307E                     l5984:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;ff.c: 2505:     if (dir[11] & (0x01 | 0x10)) {
  2626  00307E  EE20 F00B          	lfsr	2,11
  2627  003082  51B8               	movf	f_open@dir& (0+255),w,b
  2628  003084  26D9               	addwf	fsr2l,f,c
  2629  003086  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2630  003088  22DA               	addwfc	fsr2h,f,c
  2631  00308A  50DF               	movf	indf2,w,c
  2632  00308C  6F9F               	movwf	??_f_open& (0+255),b
  2633  00308E  0E11               	movlw	17
  2634  003090  179F               	andwf	??_f_open& (0+255),f,b
  2635  003092  B4D8               	btfsc	status,2,c
  2636  003094  D002               	goto	l647
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;ff.c: 2506:      res = FR_DENIED;
  2640  003096  0E07               	movlw	7
  2641  003098  D003               	goto	L2
  2642  00309A                     l647:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;ff.c: 2508:      if (mode & 0x04)
  2646  00309A  A59E               	btfss	f_open@mode& (0+255),2,b
  2647  00309C  D002               	goto	l646
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;ff.c: 2509:       res = FR_EXIST;
  2651  00309E  0E08               	movlw	8
  2652  0030A0                     L2:
  2653  0030A0  6FB7               	movwf	f_open@res& (0+255),b
  2654  0030A2                     l646:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;ff.c: 2512:    if (res == FR_OK && (mode & 0x08)) {
  2658  0030A2  51B7               	movf	f_open@res& (0+255),w,b
  2659  0030A4  B4D8               	btfsc	status,2,c
  2660                           
  2661                           ; BSR set to: 0
  2662  0030A6  A79E               	btfss	f_open@mode& (0+255),3,b
  2663  0030A8  D0C1               	goto	l653
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;ff.c: 2514:     *(DWORD*)(BYTE*)(dir + 14)=(DWORD)(dw);
  2667                           
  2668                           ; BSR set to: 0
  2669  0030AA  EE20 F00E          	lfsr	2,14
  2670  0030AE  51B8               	movf	f_open@dir& (0+255),w,b
  2671  0030B0  26D9               	addwf	fsr2l,f,c
  2672  0030B2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2673  0030B4  22DA               	addwfc	fsr2h,f,c
  2674  0030B6  0E00               	movlw	0
  2675  0030B8  6EDE               	movwf	postinc2,c
  2676  0030BA  0E00               	movlw	0
  2677  0030BC  6EDE               	movwf	postinc2,c
  2678  0030BE  0E21               	movlw	33
  2679  0030C0  6EDE               	movwf	postinc2,c
  2680  0030C2  0E46               	movlw	70
  2681  0030C4  6EDD               	movwf	postdec2,c
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;ff.c: 2515:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(dw);
  2685  0030C6  EE20 F016          	lfsr	2,22
  2686  0030CA  51B8               	movf	f_open@dir& (0+255),w,b
  2687  0030CC  26D9               	addwf	fsr2l,f,c
  2688  0030CE  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2689  0030D0  22DA               	addwfc	fsr2h,f,c
  2690  0030D2  0E00               	movlw	0
  2691  0030D4  6EDE               	movwf	postinc2,c
  2692  0030D6  0E00               	movlw	0
  2693  0030D8  6EDE               	movwf	postinc2,c
  2694  0030DA  0E21               	movlw	33
  2695  0030DC  6EDE               	movwf	postinc2,c
  2696  0030DE  0E46               	movlw	70
  2697  0030E0  6EDD               	movwf	postdec2,c
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;ff.c: 2516:     dir[11] = 0;
  2701  0030E2  EE20 F00B          	lfsr	2,11
  2702  0030E6  51B8               	movf	f_open@dir& (0+255),w,b
  2703  0030E8  26D9               	addwf	fsr2l,f,c
  2704  0030EA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2705  0030EC  22DA               	addwfc	fsr2h,f,c
  2706  0030EE  0E00               	movlw	0
  2707  0030F0  6EDF               	movwf	indf2,c
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;ff.c: 2517:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(0);
  2711  0030F2  EE20 F01C          	lfsr	2,28
  2712  0030F6  51B8               	movf	f_open@dir& (0+255),w,b
  2713  0030F8  26D9               	addwf	fsr2l,f,c
  2714  0030FA  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2715  0030FC  22DA               	addwfc	fsr2h,f,c
  2716  0030FE  6ADE               	clrf	postinc2,c
  2717  003100  6ADE               	clrf	postinc2,c
  2718  003102  6ADE               	clrf	postinc2,c
  2719  003104  6ADD               	clrf	postdec2,c
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;ff.c: 2518:     cl = ld_clust(dj.fs, dir);
  2723  003106  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2724  00310A  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2725  00310E  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2726  003112  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2727  003116  ECA1  F028         	call	_ld_clust	;wreg free
  2728  00311A  C001  F0AF         	movff	?_ld_clust,f_open@cl
  2729  00311E  C002  F0B0         	movff	?_ld_clust+1,f_open@cl+1
  2730  003122  C003  F0B1         	movff	?_ld_clust+2,f_open@cl+2
  2731  003126  C004  F0B2         	movff	?_ld_clust+3,f_open@cl+3
  2732                           
  2733                           ;ff.c: 2519:     st_clust(dir, 0);
  2734  00312A  C0B8  F001         	movff	f_open@dir,st_clust@dir
  2735  00312E  C0B9  F002         	movff	f_open@dir+1,st_clust@dir+1
  2736  003132  0E00               	movlw	0
  2737  003134  6E03               	movwf	st_clust@cl,c
  2738  003136  0E00               	movlw	0
  2739  003138  6E04               	movwf	st_clust@cl+1,c
  2740  00313A  0E00               	movlw	0
  2741  00313C  6E05               	movwf	st_clust@cl+2,c
  2742  00313E  0E00               	movlw	0
  2743  003140  6E06               	movwf	st_clust@cl+3,c
  2744  003142  ECC3  F02A         	call	_st_clust	;wreg free
  2745                           
  2746                           ;ff.c: 2520:     dj.fs->wflag = 1;
  2747  003146  0100               	movlb	0	; () banked
  2748  003148  EE20 F004          	lfsr	2,4
  2749  00314C  51BA               	movf	f_open@dj& (0+255),w,b
  2750  00314E  26D9               	addwf	fsr2l,f,c
  2751  003150  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2752  003152  22DA               	addwfc	fsr2h,f,c
  2753  003154  0E01               	movlw	1
  2754  003156  6EDF               	movwf	indf2,c
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;ff.c: 2521:     if (cl) {
  2758  003158  51AF               	movf	f_open@cl& (0+255),w,b
  2759  00315A  11B0               	iorwf	(f_open@cl+1)& (0+255),w,b
  2760  00315C  11B1               	iorwf	(f_open@cl+2)& (0+255),w,b
  2761  00315E  11B2               	iorwf	(f_open@cl+3)& (0+255),w,b
  2762  003160  B4D8               	btfsc	status,2,c
  2763  003162  D064               	goto	l653
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;ff.c: 2522:      dw = dj.fs->winsect;
  2767  003164  EE20 F02A          	lfsr	2,42
  2768  003168  51BA               	movf	f_open@dj& (0+255),w,b
  2769  00316A  26D9               	addwf	fsr2l,f,c
  2770  00316C  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2771  00316E  22DA               	addwfc	fsr2h,f,c
  2772  003170  CFDE F0B3          	movff	postinc2,f_open@dw
  2773  003174  CFDE F0B4          	movff	postinc2,f_open@dw+1
  2774  003178  CFDE F0B5          	movff	postinc2,f_open@dw+2
  2775  00317C  CFDE F0B6          	movff	postinc2,f_open@dw+3
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;ff.c: 2523:      res = remove_chain(dj.fs, cl);
  2779  003180  C0BA  F056         	movff	f_open@dj,remove_chain@fs
  2780  003184  C0BB  F057         	movff	f_open@dj+1,remove_chain@fs+1
  2781  003188  C0AF  F058         	movff	f_open@cl,remove_chain@clst
  2782  00318C  C0B0  F059         	movff	f_open@cl+1,remove_chain@clst+1
  2783  003190  C0B1  F05A         	movff	f_open@cl+2,remove_chain@clst+2
  2784  003194  C0B2  F05B         	movff	f_open@cl+3,remove_chain@clst+3
  2785  003198  EC4C  F020         	call	_remove_chain	;wreg free
  2786  00319C  0100               	movlb	0	; () banked
  2787  00319E  6FB7               	movwf	f_open@res& (0+255),b
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;ff.c: 2524:      if (res == FR_OK) {
  2791  0031A0  51B7               	movf	f_open@res& (0+255),w,b
  2792  0031A2  A4D8               	btfss	status,2,c
  2793  0031A4  D043               	goto	l653
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;ff.c: 2525:       dj.fs->last_clust = cl - 1;
  2797  0031A6  0EFF               	movlw	255
  2798  0031A8  25AF               	addwf	f_open@cl& (0+255),w,b
  2799  0031AA  6F9F               	movwf	??_f_open& (0+255),b
  2800  0031AC  0EFF               	movlw	255
  2801  0031AE  21B0               	addwfc	(f_open@cl+1)& (0+255),w,b
  2802  0031B0  6FA0               	movwf	(??_f_open+1)& (0+255),b
  2803  0031B2  0EFF               	movlw	255
  2804  0031B4  21B1               	addwfc	(f_open@cl+2)& (0+255),w,b
  2805  0031B6  6FA1               	movwf	(??_f_open+2)& (0+255),b
  2806  0031B8  0EFF               	movlw	255
  2807  0031BA  21B2               	addwfc	(f_open@cl+3)& (0+255),w,b
  2808  0031BC  6FA2               	movwf	(??_f_open+3)& (0+255),b
  2809  0031BE  EE20 F00A          	lfsr	2,10
  2810  0031C2  51BA               	movf	f_open@dj& (0+255),w,b
  2811  0031C4  26D9               	addwf	fsr2l,f,c
  2812  0031C6  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2813  0031C8  22DA               	addwfc	fsr2h,f,c
  2814  0031CA  C09F  FFDE         	movff	??_f_open,postinc2
  2815  0031CE  C0A0  FFDE         	movff	??_f_open+1,postinc2
  2816  0031D2  C0A1  FFDE         	movff	??_f_open+2,postinc2
  2817  0031D6  C0A2  FFDE         	movff	??_f_open+3,postinc2
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;ff.c: 2526:       res = move_window(dj.fs, dw);
  2821  0031DA  C0BA  F030         	movff	f_open@dj,move_window@fs
  2822  0031DE  C0BB  F031         	movff	f_open@dj+1,move_window@fs+1
  2823  0031E2  C0B3  F032         	movff	f_open@dw,move_window@sector
  2824  0031E6  C0B4  F033         	movff	f_open@dw+1,move_window@sector+1
  2825  0031EA  C0B5  F034         	movff	f_open@dw+2,move_window@sector+2
  2826  0031EE  C0B6  F035         	movff	f_open@dw+3,move_window@sector+3
  2827  0031F2  EC82  F027         	call	_move_window	;wreg free
  2828  0031F6  0100               	movlb	0	; () banked
  2829  0031F8  D018               	goto	L3
  2830  0031FA                     l6020:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;ff.c: 2532:    if (res == FR_OK) {
  2834  0031FA  51B7               	movf	f_open@res& (0+255),w,b
  2835  0031FC  A4D8               	btfss	status,2,c
  2836  0031FE  D016               	goto	l653
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;ff.c: 2533:     if (dir[11] & 0x10) {
  2840  003200  EE20 F00B          	lfsr	2,11
  2841  003204  51B8               	movf	f_open@dir& (0+255),w,b
  2842  003206  26D9               	addwf	fsr2l,f,c
  2843  003208  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2844  00320A  22DA               	addwfc	fsr2h,f,c
  2845  00320C  A8DF               	btfss	indf2,4,c
  2846  00320E  D002               	goto	l655
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;ff.c: 2534:      res = FR_NO_FILE;
  2850  003210  0E04               	movlw	4
  2851  003212  D00B               	goto	L3
  2852  003214                     l655:
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;ff.c: 2536:      if ((mode & 0x02) && (dir[11] & 0x01))
  2856  003214  A39E               	btfss	f_open@mode& (0+255),1,b
  2857  003216  D00A               	goto	l653
  2858                           
  2859                           ; BSR set to: 0
  2860  003218  EE20 F00B          	lfsr	2,11
  2861  00321C  51B8               	movf	f_open@dir& (0+255),w,b
  2862  00321E  26D9               	addwf	fsr2l,f,c
  2863  003220  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2864  003222  22DA               	addwfc	fsr2h,f,c
  2865  003224  A0DF               	btfss	indf2,0,c
  2866  003226  D002               	goto	l653
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;ff.c: 2537:       res = FR_DENIED;
  2870  003228  0E07               	movlw	7
  2871  00322A                     L3:
  2872  00322A  6FB7               	movwf	f_open@res& (0+255),b
  2873  00322C                     l653:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;ff.c: 2541:   if (res == FR_OK) {
  2877  00322C  51B7               	movf	f_open@res& (0+255),w,b
  2878  00322E  A4D8               	btfss	status,2,c
  2879  003230  D020               	goto	l6038
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;ff.c: 2542:    if (mode & 0x08)
  2883  003232  B79E               	btfsc	f_open@mode& (0+255),3,b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;ff.c: 2543:     mode |= 0x20;
  2887  003234  8B9E               	bsf	f_open@mode& (0+255),5,b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;ff.c: 2544:    fp->dir_sect = dj.fs->winsect;
  2891  003236  EE20 F02A          	lfsr	2,42
  2892  00323A  51BA               	movf	f_open@dj& (0+255),w,b
  2893  00323C  26D9               	addwf	fsr2l,f,c
  2894  00323E  51BB               	movf	(f_open@dj+1)& (0+255),w,b
  2895  003240  22DA               	addwfc	fsr2h,f,c
  2896  003242  EE10 F01A          	lfsr	1,26
  2897  003246  519A               	movf	f_open@fp& (0+255),w,b
  2898  003248  26E1               	addwf	fsr1l,f,c
  2899  00324A  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2900  00324C  22E2               	addwfc	fsr1h,f,c
  2901  00324E  CFDE FFE6          	movff	postinc2,postinc1
  2902  003252  CFDE FFE6          	movff	postinc2,postinc1
  2903  003256  CFDE FFE6          	movff	postinc2,postinc1
  2904  00325A  CFDE FFE6          	movff	postinc2,postinc1
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;ff.c: 2545:    fp->dir_ptr = dir;
  2908  00325E  EE20 F01E          	lfsr	2,30
  2909  003262  519A               	movf	f_open@fp& (0+255),w,b
  2910  003264  26D9               	addwf	fsr2l,f,c
  2911  003266  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2912  003268  22DA               	addwfc	fsr2h,f,c
  2913  00326A  C0B8  FFDE         	movff	f_open@dir,postinc2
  2914  00326E  C0B9  FFDD         	movff	f_open@dir+1,postdec2
  2915  003272                     l6038:
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;ff.c: 2565:   if (res == FR_OK) {
  2919  003272  51B7               	movf	f_open@res& (0+255),w,b
  2920  003274  A4D8               	btfss	status,2,c
  2921  003276  D06D               	goto	l6054
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;ff.c: 2566:    fp->flag = mode;
  2925  003278  EE20 F004          	lfsr	2,4
  2926  00327C  519A               	movf	f_open@fp& (0+255),w,b
  2927  00327E  26D9               	addwf	fsr2l,f,c
  2928  003280  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2929  003282  22DA               	addwfc	fsr2h,f,c
  2930  003284  C09E  FFDF         	movff	f_open@mode,indf2
  2931                           
  2932                           ;ff.c: 2567:    fp->err = 0;
  2933  003288  EE20 F005          	lfsr	2,5
  2934  00328C  519A               	movf	f_open@fp& (0+255),w,b
  2935  00328E  26D9               	addwf	fsr2l,f,c
  2936  003290  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2937  003292  22DA               	addwfc	fsr2h,f,c
  2938  003294  0E00               	movlw	0
  2939  003296  6EDF               	movwf	indf2,c
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;ff.c: 2568:    fp->sclust = ld_clust(dj.fs, dir);
  2943  003298  C0BA  F001         	movff	f_open@dj,ld_clust@fs
  2944  00329C  C0BB  F002         	movff	f_open@dj+1,ld_clust@fs+1
  2945  0032A0  C0B8  F003         	movff	f_open@dir,ld_clust@dir
  2946  0032A4  C0B9  F004         	movff	f_open@dir+1,ld_clust@dir+1
  2947  0032A8  ECA1  F028         	call	_ld_clust	;wreg free
  2948  0032AC  0100               	movlb	0	; () banked
  2949  0032AE  EE20 F00E          	lfsr	2,14
  2950  0032B2  519A               	movf	f_open@fp& (0+255),w,b
  2951  0032B4  26D9               	addwf	fsr2l,f,c
  2952  0032B6  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2953  0032B8  22DA               	addwfc	fsr2h,f,c
  2954  0032BA  C001  FFDE         	movff	?_ld_clust,postinc2
  2955  0032BE  C002  FFDE         	movff	?_ld_clust+1,postinc2
  2956  0032C2  C003  FFDE         	movff	?_ld_clust+2,postinc2
  2957  0032C6  C004  FFDE         	movff	?_ld_clust+3,postinc2
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;ff.c: 2569:    fp->fsize = (DWORD)(*(DWORD*)(BYTE*)(dir + 28));
  2961  0032CA  EE20 F01C          	lfsr	2,28
  2962  0032CE  51B8               	movf	f_open@dir& (0+255),w,b
  2963  0032D0  26D9               	addwf	fsr2l,f,c
  2964  0032D2  51B9               	movf	(f_open@dir+1)& (0+255),w,b
  2965  0032D4  22DA               	addwfc	fsr2h,f,c
  2966  0032D6  EE10 F00A          	lfsr	1,10
  2967  0032DA  519A               	movf	f_open@fp& (0+255),w,b
  2968  0032DC  26E1               	addwf	fsr1l,f,c
  2969  0032DE  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2970  0032E0  22E2               	addwfc	fsr1h,f,c
  2971  0032E2  CFDE FFE6          	movff	postinc2,postinc1
  2972  0032E6  CFDE FFE6          	movff	postinc2,postinc1
  2973  0032EA  CFDE FFE6          	movff	postinc2,postinc1
  2974  0032EE  CFDE FFE6          	movff	postinc2,postinc1
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;ff.c: 2570:    fp->fptr = 0;
  2978  0032F2  EE20 F006          	lfsr	2,6
  2979  0032F6  519A               	movf	f_open@fp& (0+255),w,b
  2980  0032F8  26D9               	addwf	fsr2l,f,c
  2981  0032FA  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2982  0032FC  22DA               	addwfc	fsr2h,f,c
  2983  0032FE  6ADE               	clrf	postinc2,c
  2984  003300  6ADE               	clrf	postinc2,c
  2985  003302  6ADE               	clrf	postinc2,c
  2986  003304  6ADD               	clrf	postdec2,c
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;ff.c: 2571:    fp->dsect = 0;
  2990  003306  EE20 F016          	lfsr	2,22
  2991  00330A  519A               	movf	f_open@fp& (0+255),w,b
  2992  00330C  26D9               	addwf	fsr2l,f,c
  2993  00330E  519B               	movf	(f_open@fp+1)& (0+255),w,b
  2994  003310  22DA               	addwfc	fsr2h,f,c
  2995  003312  6ADE               	clrf	postinc2,c
  2996  003314  6ADE               	clrf	postinc2,c
  2997  003316  6ADE               	clrf	postinc2,c
  2998  003318  6ADD               	clrf	postdec2,c
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;ff.c: 2575:    fp->fs = dj.fs;
  3002  00331A  C09A  FFD9         	movff	f_open@fp,fsr2l
  3003  00331E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3004  003322  C0BA  FFDE         	movff	f_open@dj,postinc2
  3005  003326  C0BB  FFDD         	movff	f_open@dj+1,postdec2
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;ff.c: 2576:    fp->id = fp->fs->id;
  3009  00332A  C09A  FFD9         	movff	f_open@fp,fsr2l
  3010  00332E  C09B  FFDA         	movff	f_open@fp+1,fsr2h
  3011  003332  EE10 F006          	lfsr	1,6
  3012  003336  50DE               	movf	postinc2,w,c
  3013  003338  26E1               	addwf	fsr1l,f,c
  3014  00333A  50DD               	movf	postdec2,w,c
  3015  00333C  22E2               	addwfc	fsr1h,f,c
  3016  00333E  EE20 F002          	lfsr	2,2
  3017  003342  519A               	movf	f_open@fp& (0+255),w,b
  3018  003344  26D9               	addwf	fsr2l,f,c
  3019  003346  519B               	movf	(f_open@fp+1)& (0+255),w,b
  3020  003348  22DA               	addwfc	fsr2h,f,c
  3021  00334A  CFE6 FFDE          	movff	postinc1,postinc2
  3022  00334E  CFE5 FFDD          	movff	postdec1,postdec2
  3023  003352                     l6054:
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;ff.c: 2580:  return res;
  3027  003352  51B7               	movf	f_open@res& (0+255),w,b
  3028                           
  3029                           ; BSR set to: 0
  3030  003354  0012               	return		;funcret
  3031  003356                     __end_of_f_open:
  3032                           	opt callstack 0
  3033                           
  3034 ;; *************** function _remove_chain *****************
  3035 ;; Defined at:
  3036 ;;		line 937 in file "ff.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  fs              2   85[COMRAM] PTR struct .
  3039 ;;		 -> NULL(0), FatFs(558), 
  3040 ;;  clst            4   87[COMRAM] unsigned long 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  nxt             4    1[BANK0 ] unsigned long 
  3043 ;;  res             1    0[BANK0 ] enum E93
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      enum E93
  3046 ;; Registers used:
  3047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3053 ;;      Params:         6       0       0       0       0       0       0       0       0
  3054 ;;      Locals:         0       5       0       0       0       0       0       0       0
  3055 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3056 ;;      Totals:        10       5       0       0       0       0       0       0       0
  3057 ;;Total ram usage:       15 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    9
  3060 ;; This function calls:
  3061 ;;		_get_fat
  3062 ;;		_put_fat
  3063 ;; This function is called by:
  3064 ;;		_f_open
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text4
  3069  004098                     __ptext4:
  3070                           	opt callstack 0
  3071  004098                     _remove_chain:
  3072                           	opt callstack 19
  3073                           
  3074                           ;ff.c: 938:  FATFS* fs,;ff.c: 939:  DWORD clst;ff.c: 941: {;ff.c: 942:  FRESULT res;;ff.
      +                          c: 943:  DWORD nxt;;ff.c: 948:  if (clst < 2 || clst >= fs->n_fatent) {
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;incstack = 0
  3078  004098  505B               	movf	remove_chain@clst+3,w,c
  3079  00409A  105A               	iorwf	remove_chain@clst+2,w,c
  3080  00409C  1059               	iorwf	remove_chain@clst+1,w,c
  3081  00409E  E104               	bnz	u7090
  3082  0040A0  0E02               	movlw	2
  3083  0040A2  5C58               	subwf	remove_chain@clst,w,c
  3084  0040A4  A0D8               	btfss	status,0,c
  3085  0040A6  D010               	goto	u7100
  3086  0040A8                     u7090:
  3087  0040A8  EE20 F012          	lfsr	2,18
  3088  0040AC  5056               	movf	remove_chain@fs,w,c
  3089  0040AE  26D9               	addwf	fsr2l,f,c
  3090  0040B0  5057               	movf	remove_chain@fs+1,w,c
  3091  0040B2  22DA               	addwfc	fsr2h,f,c
  3092  0040B4  50DE               	movf	postinc2,w,c
  3093  0040B6  5C58               	subwf	remove_chain@clst,w,c
  3094  0040B8  50DE               	movf	postinc2,w,c
  3095  0040BA  5859               	subwfb	remove_chain@clst+1,w,c
  3096  0040BC  50DE               	movf	postinc2,w,c
  3097  0040BE  585A               	subwfb	remove_chain@clst+2,w,c
  3098  0040C0  50DE               	movf	postinc2,w,c
  3099  0040C2  585B               	subwfb	remove_chain@clst+3,w,c
  3100  0040C4  A0D8               	btfss	status,0,c
  3101  0040C6  D003               	goto	l5402
  3102  0040C8                     u7100:
  3103                           
  3104                           ;ff.c: 949:   res = FR_INT_ERR;
  3105  0040C8  0E02               	movlw	2
  3106  0040CA  0100               	movlb	0	; () banked
  3107  0040CC  D031               	goto	L4
  3108  0040CE                     l5402:
  3109                           
  3110                           ;ff.c: 952:   res = FR_OK;
  3111  0040CE  0E00               	movlw	0
  3112  0040D0  0100               	movlb	0	; () banked
  3113  0040D2  6F60               	movwf	remove_chain@res& (0+255),b
  3114                           
  3115                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3116  0040D4  D074               	goto	l367
  3117  0040D6                     l5404:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;ff.c: 954:    nxt = get_fat(fs, clst);
  3121  0040D6  C056  F03B         	movff	remove_chain@fs,get_fat@fs
  3122  0040DA  C057  F03C         	movff	remove_chain@fs+1,get_fat@fs+1
  3123  0040DE  C058  F03D         	movff	remove_chain@clst,get_fat@clst
  3124  0040E2  C059  F03E         	movff	remove_chain@clst+1,get_fat@clst+1
  3125  0040E6  C05A  F03F         	movff	remove_chain@clst+2,get_fat@clst+2
  3126  0040EA  C05B  F040         	movff	remove_chain@clst+3,get_fat@clst+3
  3127  0040EE  EC0F  F016         	call	_get_fat	;wreg free
  3128  0040F2  C03B  F061         	movff	?_get_fat,remove_chain@nxt
  3129  0040F6  C03C  F062         	movff	?_get_fat+1,remove_chain@nxt+1
  3130  0040FA  C03D  F063         	movff	?_get_fat+2,remove_chain@nxt+2
  3131  0040FE  C03E  F064         	movff	?_get_fat+3,remove_chain@nxt+3
  3132                           
  3133                           ;ff.c: 955:    if (nxt == 0) break;
  3134  004102  0100               	movlb	0	; () banked
  3135  004104  5161               	movf	remove_chain@nxt& (0+255),w,b
  3136  004106  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3137  004108  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3138  00410A  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3139  00410C  B4D8               	btfsc	status,2,c
  3140  00410E  D067               	goto	u7160
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;ff.c: 956:    if (nxt == 1) { res = FR_INT_ERR; break; }
  3144  004110  0561               	decf	remove_chain@nxt& (0+255),w,b
  3145  004112  1162               	iorwf	(remove_chain@nxt+1)& (0+255),w,b
  3146  004114  1163               	iorwf	(remove_chain@nxt+2)& (0+255),w,b
  3147  004116  1164               	iorwf	(remove_chain@nxt+3)& (0+255),w,b
  3148  004118  B4D8               	btfsc	status,2,c
  3149  00411A  D7D6               	goto	u7100
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;ff.c: 957:    if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  3153  00411C  2961               	incf	remove_chain@nxt& (0+255),w,b
  3154  00411E  E10A               	bnz	l5418
  3155  004120  2962               	incf	(remove_chain@nxt+1)& (0+255),w,b
  3156  004122  E108               	bnz	l5418
  3157  004124  2963               	incf	(remove_chain@nxt+2)& (0+255),w,b
  3158  004126  E106               	bnz	l5418
  3159  004128  2964               	incf	(remove_chain@nxt+3)& (0+255),w,b
  3160  00412A  A4D8               	btfss	status,2,c
  3161  00412C  D003               	goto	l5418
  3162                           
  3163                           ; BSR set to: 0
  3164  00412E  0E01               	movlw	1
  3165  004130                     L4:
  3166  004130  6F60               	movwf	remove_chain@res& (0+255),b
  3167  004132  D055               	goto	u7160
  3168  004134                     l5418:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;ff.c: 958:    res = put_fat(fs, clst, 0);
  3172  004134  C056  F03B         	movff	remove_chain@fs,put_fat@fs
  3173  004138  C057  F03C         	movff	remove_chain@fs+1,put_fat@fs+1
  3174  00413C  C058  F03D         	movff	remove_chain@clst,put_fat@clst
  3175  004140  C059  F03E         	movff	remove_chain@clst+1,put_fat@clst+1
  3176  004144  C05A  F03F         	movff	remove_chain@clst+2,put_fat@clst+2
  3177  004148  C05B  F040         	movff	remove_chain@clst+3,put_fat@clst+3
  3178  00414C  0E00               	movlw	0
  3179  00414E  6E41               	movwf	put_fat@val,c
  3180  004150  0E00               	movlw	0
  3181  004152  6E42               	movwf	put_fat@val+1,c
  3182  004154  0E00               	movlw	0
  3183  004156  6E43               	movwf	put_fat@val+2,c
  3184  004158  0E00               	movlw	0
  3185  00415A  6E44               	movwf	put_fat@val+3,c
  3186  00415C  ECF7  F011         	call	_put_fat	;wreg free
  3187  004160  0100               	movlb	0	; () banked
  3188  004162  6F60               	movwf	remove_chain@res& (0+255),b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;ff.c: 959:    if (res != FR_OK) break;
  3192  004164  5160               	movf	remove_chain@res& (0+255),w,b
  3193  004166  A4D8               	btfss	status,2,c
  3194  004168  D03A               	goto	u7160
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;ff.c: 960:    if (fs->free_clust != 0xFFFFFFFF) {
  3198  00416A  EE20 F00E          	lfsr	2,14
  3199  00416E  5056               	movf	remove_chain@fs,w,c
  3200  004170  26D9               	addwf	fsr2l,f,c
  3201  004172  5057               	movf	remove_chain@fs+1,w,c
  3202  004174  22DA               	addwfc	fsr2h,f,c
  3203  004176  28DE               	incf	postinc2,w,c
  3204  004178  E107               	bnz	u7150
  3205  00417A  28DE               	incf	postinc2,w,c
  3206  00417C  E105               	bnz	u7150
  3207  00417E  28DE               	incf	postinc2,w,c
  3208  004180  E103               	bnz	u7150
  3209  004182  28DE               	incf	postinc2,w,c
  3210  004184  B4D8               	btfsc	status,2,c
  3211  004186  D013               	goto	l5428
  3212  004188                     u7150:
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;ff.c: 961:     fs->free_clust++;
  3216  004188  EE20 F00E          	lfsr	2,14
  3217  00418C  5056               	movf	remove_chain@fs,w,c
  3218  00418E  26D9               	addwf	fsr2l,f,c
  3219  004190  5057               	movf	remove_chain@fs+1,w,c
  3220  004192  22DA               	addwfc	fsr2h,f,c
  3221  004194  2ADE               	incf	postinc2,f,c
  3222  004196  0E00               	movlw	0
  3223  004198  22DE               	addwfc	postinc2,f,c
  3224  00419A  22DE               	addwfc	postinc2,f,c
  3225  00419C  22DE               	addwfc	postinc2,f,c
  3226                           
  3227                           ;ff.c: 962:     fs->fsi_flag |= 1;
  3228  00419E  EE20 F005          	lfsr	2,5
  3229  0041A2  5056               	movf	remove_chain@fs,w,c
  3230  0041A4  26D9               	addwf	fsr2l,f,c
  3231  0041A6  5057               	movf	remove_chain@fs+1,w,c
  3232  0041A8  22DA               	addwfc	fsr2h,f,c
  3233  0041AA  0E00               	movlw	0
  3234  0041AC  80DB               	bsf	plusw2,0,c
  3235  0041AE                     l5428:
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;ff.c: 974:    clst = nxt;
  3239  0041AE  C061  F058         	movff	remove_chain@nxt,remove_chain@clst
  3240  0041B2  C062  F059         	movff	remove_chain@nxt+1,remove_chain@clst+1
  3241  0041B6  C063  F05A         	movff	remove_chain@nxt+2,remove_chain@clst+2
  3242  0041BA  C064  F05B         	movff	remove_chain@nxt+3,remove_chain@clst+3
  3243  0041BE                     l367:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;ff.c: 953:   while (clst < fs->n_fatent) {
  3247  0041BE  EE20 F012          	lfsr	2,18
  3248  0041C2  5056               	movf	remove_chain@fs,w,c
  3249  0041C4  26D9               	addwf	fsr2l,f,c
  3250  0041C6  5057               	movf	remove_chain@fs+1,w,c
  3251  0041C8  22DA               	addwfc	fsr2h,f,c
  3252  0041CA  50DE               	movf	postinc2,w,c
  3253  0041CC  5C58               	subwf	remove_chain@clst,w,c
  3254  0041CE  50DE               	movf	postinc2,w,c
  3255  0041D0  5859               	subwfb	remove_chain@clst+1,w,c
  3256  0041D2  50DE               	movf	postinc2,w,c
  3257  0041D4  585A               	subwfb	remove_chain@clst+2,w,c
  3258  0041D6  50DE               	movf	postinc2,w,c
  3259  0041D8  585B               	subwfb	remove_chain@clst+3,w,c
  3260  0041DA  A0D8               	btfss	status,0,c
  3261  0041DC  D77C               	goto	l5404
  3262  0041DE                     u7160:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;ff.c: 978:  return res;
  3266  0041DE  5160               	movf	remove_chain@res& (0+255),w,b
  3267                           
  3268                           ; BSR set to: 0
  3269  0041E0  0012               	return		;funcret
  3270  0041E2                     __end_of_remove_chain:
  3271                           	opt callstack 0
  3272                           
  3273 ;; *************** function _follow_path *****************
  3274 ;; Defined at:
  3275 ;;		line 2052 in file "ff.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  dp              2   38[BANK0 ] PTR struct .
  3278 ;;		 -> f_open@dj(22), 
  3279 ;;  path            2   40[BANK0 ] PTR const unsigned char 
  3280 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  dir             2   42[BANK0 ] PTR unsigned char 
  3283 ;;		 -> NULL(0), FatFs(558), 
  3284 ;;  res             1   45[BANK0 ] enum E93
  3285 ;;  ns              1   44[BANK0 ] unsigned char 
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      enum E93
  3288 ;; Registers used:
  3289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3295 ;;      Params:         0       4       0       0       0       0       0       0       0
  3296 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3297 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3298 ;;      Totals:         0       8       0       0       0       0       0       0       0
  3299 ;;Total ram usage:        8 bytes
  3300 ;; Hardware stack levels used:    1
  3301 ;; Hardware stack levels required when called:   12
  3302 ;; This function calls:
  3303 ;;		_create_name
  3304 ;;		_dir_find
  3305 ;;		_dir_sdi
  3306 ;;		_ld_clust
  3307 ;; This function is called by:
  3308 ;;		_f_open
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text5
  3313  0041E2                     __ptext5:
  3314                           	opt callstack 0
  3315  0041E2                     _follow_path:
  3316                           	opt callstack 16
  3317                           
  3318                           ;ff.c: 2053:  DIRC* dp,;ff.c: 2054:  const TCHAR* path;ff.c: 2056: {;ff.c: 2057:  FRESUL
      +                          T res;;ff.c: 2058:  BYTE *dir, ns;;ff.c: 2068:  if (*path == '/' || *path == '\\')
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;incstack = 0
  3322  0041E2  C088  FFF6         	movff	follow_path@path,tblptrl
  3323  0041E6  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3324  0041EA                     	if	0	;tblptru may be non-zero
  3325  0041EA                     	endif
  3326  0041EA                     	if	0	;tblptru may be non-zero
  3327  0041EA                     	endif
  3328  0041EA  0008               	tblrd		*
  3329  0041EC  50F5               	movf	tablat,w,c
  3330  0041EE  0A2F               	xorlw	47
  3331  0041F0  B4D8               	btfsc	status,2,c
  3332  0041F2  D009               	goto	u7200
  3333  0041F4  C088  FFF6         	movff	follow_path@path,tblptrl
  3334  0041F8  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3335  0041FC                     	if	0	;tblptru may be non-zero
  3336  0041FC                     	endif
  3337  0041FC                     	if	0	;tblptru may be non-zero
  3338  0041FC                     	endif
  3339  0041FC  0008               	tblrd		*
  3340  0041FE  50F5               	movf	tablat,w,c
  3341  004200  0A5C               	xorlw	92
  3342  004202  A4D8               	btfss	status,2,c
  3343  004204  D003               	goto	l5458
  3344  004206                     u7200:
  3345                           
  3346                           ;ff.c: 2069:   path++;
  3347  004206  0100               	movlb	0	; () banked
  3348  004208  4B88               	infsnz	follow_path@path& (0+255),f,b
  3349  00420A  2B89               	incf	(follow_path@path+1)& (0+255),f,b
  3350  00420C                     l5458:
  3351                           
  3352                           ;ff.c: 2070:  dp->sclust = 0;
  3353  00420C  0100               	movlb	0	; () banked
  3354  00420E  EE20 F006          	lfsr	2,6
  3355  004212  5186               	movf	follow_path@dp& (0+255),w,b
  3356  004214  26D9               	addwf	fsr2l,f,c
  3357  004216  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3358  004218  22DA               	addwfc	fsr2h,f,c
  3359  00421A  6ADE               	clrf	postinc2,c
  3360  00421C  6ADE               	clrf	postinc2,c
  3361  00421E  6ADE               	clrf	postinc2,c
  3362  004220  6ADD               	clrf	postdec2,c
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;ff.c: 2073:  if ((UINT)*path < ' ') {
  3366  004222  C088  FFF6         	movff	follow_path@path,tblptrl
  3367  004226  C089  FFF7         	movff	follow_path@path+1,tblptrh
  3368  00422A                     	if	0	;tblptru may be non-zero
  3369  00422A                     	endif
  3370  00422A                     	if	0	;tblptru may be non-zero
  3371  00422A                     	endif
  3372  00422A  0E20               	movlw	32
  3373  00422C  0008               	tblrd		*
  3374  00422E  60F5               	cpfslt	tablat,c
  3375  004230  D017               	goto	l5466
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;ff.c: 2074:   res = dir_sdi(dp, 0);
  3379  004232  C086  F056         	movff	follow_path@dp,dir_sdi@dp
  3380  004236  C087  F057         	movff	follow_path@dp+1,dir_sdi@dp+1
  3381  00423A  0E00               	movlw	0
  3382  00423C  6E59               	movwf	dir_sdi@idx+1,c
  3383  00423E  0E00               	movlw	0
  3384  004240  6E58               	movwf	dir_sdi@idx,c
  3385  004242  EC28  F01B         	call	_dir_sdi	;wreg free
  3386  004246  0100               	movlb	0	; () banked
  3387  004248  6F8D               	movwf	follow_path@res& (0+255),b
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;ff.c: 2075:   dp->dir = 0;
  3391  00424A  EE20 F012          	lfsr	2,18
  3392  00424E  5186               	movf	follow_path@dp& (0+255),w,b
  3393  004250  26D9               	addwf	fsr2l,f,c
  3394  004252  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3395  004254  22DA               	addwfc	fsr2h,f,c
  3396  004256  0E00               	movlw	0
  3397  004258  6EDE               	movwf	postinc2,c
  3398  00425A  0E00               	movlw	0
  3399  00425C  6EDD               	movwf	postdec2,c
  3400                           
  3401                           ;ff.c: 2076:  } else {
  3402  00425E  D062               	goto	l5502
  3403  004260                     l5466:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;ff.c: 2078:    res = create_name(dp, &path);
  3407  004260  C086  F009         	movff	follow_path@dp,create_name@dp
  3408  004264  C087  F00A         	movff	follow_path@dp+1,create_name@dp+1
  3409  004268  0E88               	movlw	low follow_path@path
  3410  00426A  6E0B               	movwf	create_name@path,c
  3411  00426C  0E00               	movlw	high follow_path@path
  3412  00426E  6E0C               	movwf	create_name@path+1,c
  3413  004270  EC89  F01C         	call	_create_name	;wreg free
  3414  004274  0100               	movlb	0	; () banked
  3415  004276  6F8D               	movwf	follow_path@res& (0+255),b
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;ff.c: 2079:    if (res != FR_OK) break;
  3419  004278  518D               	movf	follow_path@res& (0+255),w,b
  3420  00427A  A4D8               	btfss	status,2,c
  3421  00427C  D053               	goto	l5502
  3422                           
  3423                           ; BSR set to: 0
  3424                           ;ff.c: 2080:    res = dir_find(dp);
  3425  00427E  C086  F080         	movff	follow_path@dp,dir_find@dp
  3426  004282  C087  F081         	movff	follow_path@dp+1,dir_find@dp+1
  3427  004286  ECD7  F023         	call	_dir_find	;wreg free
  3428  00428A  0100               	movlb	0	; () banked
  3429  00428C  6F8D               	movwf	follow_path@res& (0+255),b
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;ff.c: 2081:    ns = dp->fn[11];
  3433  00428E  EE20 F014          	lfsr	2,20
  3434  004292  5186               	movf	follow_path@dp& (0+255),w,b
  3435  004294  26D9               	addwf	fsr2l,f,c
  3436  004296  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3437  004298  22DA               	addwfc	fsr2h,f,c
  3438  00429A  EE10 F00B          	lfsr	1,11
  3439  00429E  50DE               	movf	postinc2,w,c
  3440  0042A0  26E1               	addwf	fsr1l,f,c
  3441  0042A2  50DD               	movf	postdec2,w,c
  3442  0042A4  22E2               	addwfc	fsr1h,f,c
  3443  0042A6  50E7               	movf	indf1,w,c
  3444  0042A8  6F8C               	movwf	follow_path@ns& (0+255),b
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;ff.c: 2082:    if (res != FR_OK) {
  3448  0042AA  518D               	movf	follow_path@res& (0+255),w,b
  3449  0042AC  B4D8               	btfsc	status,2,c
  3450  0042AE  D008               	goto	l534
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;ff.c: 2083:     if (res == FR_NO_FILE) {
  3454  0042B0  0E04               	movlw	4
  3455  0042B2  198D               	xorwf	follow_path@res& (0+255),w,b
  3456  0042B4  B4D8               	btfsc	status,2,c
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;ff.c: 2089:       if (!(ns & 0x04)) res = FR_NO_PATH;
  3460  0042B6  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3461  0042B8  D035               	goto	l5502
  3462  0042BA                     u7250:
  3463                           
  3464                           ; BSR set to: 0
  3465  0042BA  0E05               	movlw	5
  3466  0042BC  6F8D               	movwf	follow_path@res& (0+255),b
  3467  0042BE  D032               	goto	l5502
  3468  0042C0                     l534:
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;ff.c: 2094:    if (ns & 0x04) break;
  3472  0042C0  B58C               	btfsc	follow_path@ns& (0+255),2,b
  3473  0042C2  D030               	goto	l5502
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;ff.c: 2095:    dir = dp->dir;
  3477  0042C4  EE20 F012          	lfsr	2,18
  3478  0042C8  5186               	movf	follow_path@dp& (0+255),w,b
  3479  0042CA  26D9               	addwf	fsr2l,f,c
  3480  0042CC  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3481  0042CE  22DA               	addwfc	fsr2h,f,c
  3482  0042D0  CFDE F08A          	movff	postinc2,follow_path@dir
  3483  0042D4  CFDD F08B          	movff	postdec2,follow_path@dir+1
  3484                           
  3485                           ;ff.c: 2096:    if (!(dir[11] & 0x10)) {
  3486  0042D8  EE20 F00B          	lfsr	2,11
  3487  0042DC  518A               	movf	follow_path@dir& (0+255),w,b
  3488  0042DE  26D9               	addwf	fsr2l,f,c
  3489  0042E0  518B               	movf	(follow_path@dir+1)& (0+255),w,b
  3490  0042E2  22DA               	addwfc	fsr2h,f,c
  3491  0042E4  A8DF               	btfss	indf2,4,c
  3492  0042E6  D7E9               	goto	u7250
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;ff.c: 2099:    dp->sclust = ld_clust(dp->fs, dir);
  3496  0042E8  C086  FFD9         	movff	follow_path@dp,fsr2l
  3497  0042EC  C087  FFDA         	movff	follow_path@dp+1,fsr2h
  3498  0042F0  CFDE F001          	movff	postinc2,ld_clust@fs
  3499  0042F4  CFDD F002          	movff	postdec2,ld_clust@fs+1
  3500  0042F8  C08A  F003         	movff	follow_path@dir,ld_clust@dir
  3501  0042FC  C08B  F004         	movff	follow_path@dir+1,ld_clust@dir+1
  3502  004300  ECA1  F028         	call	_ld_clust	;wreg free
  3503  004304  0100               	movlb	0	; () banked
  3504  004306  EE20 F006          	lfsr	2,6
  3505  00430A  5186               	movf	follow_path@dp& (0+255),w,b
  3506  00430C  26D9               	addwf	fsr2l,f,c
  3507  00430E  5187               	movf	(follow_path@dp+1)& (0+255),w,b
  3508  004310  22DA               	addwfc	fsr2h,f,c
  3509  004312  C001  FFDE         	movff	?_ld_clust,postinc2
  3510  004316  C002  FFDE         	movff	?_ld_clust+1,postinc2
  3511  00431A  C003  FFDE         	movff	?_ld_clust+2,postinc2
  3512  00431E  C004  FFDE         	movff	?_ld_clust+3,postinc2
  3513  004322  D79E               	goto	l5466
  3514  004324                     l5502:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;ff.c: 2103:  return res;
  3518  004324  518D               	movf	follow_path@res& (0+255),w,b
  3519                           
  3520                           ; BSR set to: 0
  3521  004326  0012               	return		;funcret
  3522  004328                     __end_of_follow_path:
  3523                           	opt callstack 0
  3524                           
  3525 ;; *************** function _ld_clust *****************
  3526 ;; Defined at:
  3527 ;;		line 1235 in file "ff.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  fs              2    0[COMRAM] PTR struct .
  3530 ;;		 -> NULL(0), FatFs(558), 
  3531 ;;  dir             2    2[COMRAM] PTR const unsigned char 
  3532 ;;		 -> NULL(0), FatFs(558), 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  cl              4   10[COMRAM] unsigned long 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  4    0[COMRAM] unsigned long 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3544 ;;      Params:         4       0       0       0       0       0       0       0       0
  3545 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3546 ;;      Temps:          6       0       0       0       0       0       0       0       0
  3547 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3548 ;;Total ram usage:       14 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		_follow_path
  3554 ;;		_f_open
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text6
  3559  005142                     __ptext6:
  3560                           	opt callstack 0
  3561  005142                     _ld_clust:
  3562                           	opt callstack 28
  3563                           
  3564                           ;ff.c: 1236:  FATFS* fs,;ff.c: 1237:  const BYTE* dir;ff.c: 1239: {;ff.c: 1240:  DWORD c
      +                          l;;ff.c: 1242:  cl = (WORD)(*(WORD*)(BYTE*)(dir + 26));
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;incstack = 0
  3568  005142  0E1A               	movlw	26
  3569  005144  2403               	addwf	ld_clust@dir,w,c
  3570  005146  6ED9               	movwf	fsr2l,c
  3571  005148  0E00               	movlw	0
  3572  00514A  2004               	addwfc	ld_clust@dir+1,w,c
  3573  00514C  6EDA               	movwf	fsr2h,c
  3574  00514E  CFDE F005          	movff	postinc2,??_ld_clust
  3575  005152  CFDD F006          	movff	postdec2,??_ld_clust+1
  3576  005156  C005  F00B         	movff	??_ld_clust,ld_clust@cl
  3577  00515A  C006  F00C         	movff	??_ld_clust+1,ld_clust@cl+1
  3578  00515E  6A0D               	clrf	ld_clust@cl+2,c
  3579  005160  6A0E               	clrf	ld_clust@cl+3,c
  3580                           
  3581                           ;ff.c: 1243:  if (fs->fs_type == 3)
  3582  005162  C001  FFD9         	movff	ld_clust@fs,fsr2l
  3583  005166  C002  FFDA         	movff	ld_clust@fs+1,fsr2h
  3584  00516A  0E03               	movlw	3
  3585  00516C  18DE               	xorwf	postinc2,w,c
  3586  00516E  A4D8               	btfss	status,2,c
  3587  005170  D01E               	goto	l5104
  3588                           
  3589                           ;ff.c: 1244:   cl |= (DWORD)(WORD)(*(WORD*)(BYTE*)(dir + 20)) << 16;
  3590  005172  0E14               	movlw	20
  3591  005174  2403               	addwf	ld_clust@dir,w,c
  3592  005176  6ED9               	movwf	fsr2l,c
  3593  005178  0E00               	movlw	0
  3594  00517A  2004               	addwfc	ld_clust@dir+1,w,c
  3595  00517C  6EDA               	movwf	fsr2h,c
  3596  00517E  CFDE F005          	movff	postinc2,??_ld_clust
  3597  005182  CFDD F006          	movff	postdec2,??_ld_clust+1
  3598  005186  5005               	movf	??_ld_clust,w,c
  3599  005188  6E07               	movwf	(??_ld_clust+2)& (0+255),c
  3600  00518A  5006               	movf	??_ld_clust+1,w,c
  3601  00518C  6E08               	movwf	(??_ld_clust+3)& (0+255),c
  3602  00518E  6A09               	clrf	(??_ld_clust+4)& (0+255),c
  3603  005190  6A0A               	clrf	(??_ld_clust+5)& (0+255),c
  3604  005192  C008  F00A         	movff	??_ld_clust+3,??_ld_clust+5
  3605  005196  C007  F009         	movff	??_ld_clust+2,??_ld_clust+4
  3606  00519A  6A08               	clrf	??_ld_clust+3,c
  3607  00519C  6A07               	clrf	??_ld_clust+2,c
  3608  00519E  5007               	movf	??_ld_clust+2,w,c
  3609  0051A0  120B               	iorwf	ld_clust@cl,f,c
  3610  0051A2  5008               	movf	??_ld_clust+3,w,c
  3611  0051A4  120C               	iorwf	ld_clust@cl+1,f,c
  3612  0051A6  5009               	movf	??_ld_clust+4,w,c
  3613  0051A8  120D               	iorwf	ld_clust@cl+2,f,c
  3614  0051AA  500A               	movf	??_ld_clust+5,w,c
  3615  0051AC  120E               	iorwf	ld_clust@cl+3,f,c
  3616  0051AE                     l5104:
  3617                           
  3618                           ;ff.c: 1246:  return cl;
  3619  0051AE  C00B  F001         	movff	ld_clust@cl,?_ld_clust
  3620  0051B2  C00C  F002         	movff	ld_clust@cl+1,?_ld_clust+1
  3621  0051B6  C00D  F003         	movff	ld_clust@cl+2,?_ld_clust+2
  3622  0051BA  C00E  F004         	movff	ld_clust@cl+3,?_ld_clust+3
  3623  0051BE  0012               	return		;funcret
  3624  0051C0                     __end_of_ld_clust:
  3625                           	opt callstack 0
  3626                           
  3627 ;; *************** function _dir_find *****************
  3628 ;; Defined at:
  3629 ;;		line 1458 in file "ff.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  dp              2   32[BANK0 ] PTR struct .
  3632 ;;		 -> f_open@dj(22), 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  dir             2   35[BANK0 ] PTR unsigned char 
  3635 ;;		 -> NULL(0), FatFs(558), 
  3636 ;;  res             1   37[BANK0 ] enum E93
  3637 ;;  c               1   34[BANK0 ] unsigned char 
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      enum E93
  3640 ;; Registers used:
  3641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3647 ;;      Params:         0       2       0       0       0       0       0       0       0
  3648 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3650 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3651 ;;Total ram usage:        6 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:   11
  3654 ;; This function calls:
  3655 ;;		_dir_next
  3656 ;;		_dir_sdi
  3657 ;;		_mem_cmp
  3658 ;;		_move_window
  3659 ;; This function is called by:
  3660 ;;		_follow_path
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text7
  3665  0047AE                     __ptext7:
  3666                           	opt callstack 0
  3667  0047AE                     _dir_find:
  3668                           	opt callstack 16
  3669                           
  3670                           ;ff.c: 1459:  DIRC* dp;ff.c: 1461: {;ff.c: 1462:  FRESULT res;;ff.c: 1463:  BYTE c, *dir
      +                          ;;ff.c: 1468:  res = dir_sdi(dp, 0);
  3671                           
  3672                           ;incstack = 0
  3673  0047AE  C080  F056         	movff	dir_find@dp,dir_sdi@dp
  3674  0047B2  C081  F057         	movff	dir_find@dp+1,dir_sdi@dp+1
  3675  0047B6  0E00               	movlw	0
  3676  0047B8  6E59               	movwf	dir_sdi@idx+1,c
  3677  0047BA  0E00               	movlw	0
  3678  0047BC  6E58               	movwf	dir_sdi@idx,c
  3679  0047BE  EC28  F01B         	call	_dir_sdi	;wreg free
  3680  0047C2  0100               	movlb	0	; () banked
  3681  0047C4  6F85               	movwf	dir_find@res& (0+255),b
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;ff.c: 1469:  if (res != FR_OK) return res;
  3685  0047C6  5185               	movf	dir_find@res& (0+255),w,b
  3686  0047C8  B4D8               	btfsc	status,2,c
  3687  0047CA  D003               	goto	l5118
  3688  0047CC                     u6540:
  3689  0047CC  0100               	movlb	0	; () banked
  3690  0047CE  5185               	movf	dir_find@res& (0+255),w,b
  3691  0047D0  0012               	return	
  3692  0047D2                     l5118:
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;ff.c: 1475:   res = move_window(dp->fs, dp->sect);
  3696  0047D2  C080  FFD9         	movff	dir_find@dp,fsr2l
  3697  0047D6  C081  FFDA         	movff	dir_find@dp+1,fsr2h
  3698  0047DA  CFDE F030          	movff	postinc2,move_window@fs
  3699  0047DE  CFDD F031          	movff	postdec2,move_window@fs+1
  3700  0047E2  EE20 F00E          	lfsr	2,14
  3701  0047E6  5180               	movf	dir_find@dp& (0+255),w,b
  3702  0047E8  26D9               	addwf	fsr2l,f,c
  3703  0047EA  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3704  0047EC  22DA               	addwfc	fsr2h,f,c
  3705  0047EE  CFDE F032          	movff	postinc2,move_window@sector
  3706  0047F2  CFDE F033          	movff	postinc2,move_window@sector+1
  3707  0047F6  CFDE F034          	movff	postinc2,move_window@sector+2
  3708  0047FA  CFDE F035          	movff	postinc2,move_window@sector+3
  3709  0047FE  EC82  F027         	call	_move_window	;wreg free
  3710  004802  0100               	movlb	0	; () banked
  3711  004804  6F85               	movwf	dir_find@res& (0+255),b
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;ff.c: 1476:   if (res != FR_OK) break;
  3715  004806  5185               	movf	dir_find@res& (0+255),w,b
  3716  004808  A4D8               	btfss	status,2,c
  3717  00480A  D7E0               	goto	u6540
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;ff.c: 1477:   dir = dp->dir;
  3721  00480C  EE20 F012          	lfsr	2,18
  3722  004810  5180               	movf	dir_find@dp& (0+255),w,b
  3723  004812  26D9               	addwf	fsr2l,f,c
  3724  004814  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3725  004816  22DA               	addwfc	fsr2h,f,c
  3726  004818  CFDE F083          	movff	postinc2,dir_find@dir
  3727  00481C  CFDD F084          	movff	postdec2,dir_find@dir+1
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;ff.c: 1478:   c = dir[0];
  3731  004820  C083  FFD9         	movff	dir_find@dir,fsr2l
  3732  004824  C084  FFDA         	movff	dir_find@dir+1,fsr2h
  3733  004828  50DF               	movf	indf2,w,c
  3734  00482A  6F82               	movwf	dir_find@c& (0+255),b
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;ff.c: 1479:   if (c == 0) { res = FR_NO_FILE; break; }
  3738  00482C  5182               	movf	dir_find@c& (0+255),w,b
  3739  00482E  A4D8               	btfss	status,2,c
  3740  004830  D003               	goto	l5132
  3741                           
  3742                           ; BSR set to: 0
  3743  004832  0E04               	movlw	4
  3744  004834  6F85               	movwf	dir_find@res& (0+255),b
  3745  004836  D7CA               	goto	u6540
  3746  004838                     l5132:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;ff.c: 1502:   if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))
  3750  004838  EE20 F00B          	lfsr	2,11
  3751  00483C  5183               	movf	dir_find@dir& (0+255),w,b
  3752  00483E  26D9               	addwf	fsr2l,f,c
  3753  004840  5184               	movf	(dir_find@dir+1)& (0+255),w,b
  3754  004842  22DA               	addwfc	fsr2h,f,c
  3755  004844  B6DF               	btfsc	indf2,3,c
  3756  004846  D018               	goto	l5138
  3757                           
  3758                           ; BSR set to: 0
  3759  004848  C083  F001         	movff	dir_find@dir,mem_cmp@dst
  3760  00484C  C084  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  3761  004850  EE20 F014          	lfsr	2,20
  3762  004854  5180               	movf	dir_find@dp& (0+255),w,b
  3763  004856  26D9               	addwf	fsr2l,f,c
  3764  004858  5181               	movf	(dir_find@dp+1)& (0+255),w,b
  3765  00485A  22DA               	addwfc	fsr2h,f,c
  3766  00485C  CFDE F003          	movff	postinc2,mem_cmp@src
  3767  004860  CFDD F004          	movff	postdec2,mem_cmp@src+1
  3768  004864  0E00               	movlw	0
  3769  004866  6E06               	movwf	mem_cmp@cnt+1,c
  3770  004868  0E0B               	movlw	11
  3771  00486A  6E05               	movwf	mem_cmp@cnt,c
  3772  00486C  EC54  F029         	call	_mem_cmp	;wreg free
  3773  004870  5001               	movf	?_mem_cmp,w,c
  3774  004872  1002               	iorwf	?_mem_cmp+1,w,c
  3775  004874  B4D8               	btfsc	status,2,c
  3776  004876  D7AA               	goto	u6540
  3777  004878                     l5138:
  3778                           
  3779                           ;ff.c: 1505:   res = dir_next(dp, 0);
  3780  004878  C080  F06D         	movff	dir_find@dp,dir_next@dp
  3781  00487C  C081  F06E         	movff	dir_find@dp+1,dir_next@dp+1
  3782  004880  0E00               	movlw	0
  3783  004882  0100               	movlb	0	; () banked
  3784  004884  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  3785  004886  0E00               	movlw	0
  3786  004888  6F6F               	movwf	dir_next@stretch& (0+255),b
  3787  00488A  EC0C  F014         	call	_dir_next	;wreg free
  3788  00488E  0100               	movlb	0	; () banked
  3789  004890  6F85               	movwf	dir_find@res& (0+255),b
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;ff.c: 1506:  } while (res == FR_OK);
  3793  004892  5185               	movf	dir_find@res& (0+255),w,b
  3794  004894  A4D8               	btfss	status,2,c
  3795  004896  D79A               	goto	u6540
  3796  004898  D79C               	goto	l5118
  3797  00489A                     __end_of_dir_find:
  3798                           	opt callstack 0
  3799                           
  3800 ;; *************** function _mem_cmp *****************
  3801 ;; Defined at:
  3802 ;;		line 533 in file "ff.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  dst             2    0[COMRAM] PTR const void 
  3805 ;;		 -> NULL(0), FatFs(558), 
  3806 ;;  src             2    2[COMRAM] PTR const void 
  3807 ;;		 -> f_open@sfn(12), 
  3808 ;;  cnt             2    4[COMRAM] unsigned short 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  r               2   12[COMRAM] int 
  3811 ;;  s               2   10[COMRAM] PTR const unsigned char 
  3812 ;;		 -> f_open@sfn(12), 
  3813 ;;  d               2    8[COMRAM] PTR const unsigned char 
  3814 ;;		 -> NULL(0), FatFs(558), 
  3815 ;; Return value:  Size  Location     Type
  3816 ;;                  2    0[COMRAM] int 
  3817 ;; Registers used:
  3818 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3819 ;; Tracked objects:
  3820 ;;		On entry : 0/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3824 ;;      Params:         6       0       0       0       0       0       0       0       0
  3825 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3826 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3827 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3828 ;;Total ram usage:       14 bytes
  3829 ;; Hardware stack levels used:    1
  3830 ;; This function calls:
  3831 ;;		Nothing
  3832 ;; This function is called by:
  3833 ;;		_dir_find
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text8
  3838  0052A8                     __ptext8:
  3839                           	opt callstack 0
  3840  0052A8                     _mem_cmp:
  3841                           	opt callstack 26
  3842                           
  3843                           ;ff.c: 534:  const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;incstack = 0
  3847  0052A8  C001  F009         	movff	mem_cmp@dst,mem_cmp@d
  3848  0052AC  C002  F00A         	movff	mem_cmp@dst+1,mem_cmp@d+1
  3849  0052B0  C003  F00B         	movff	mem_cmp@src,mem_cmp@s
  3850  0052B4  C004  F00C         	movff	mem_cmp@src+1,mem_cmp@s+1
  3851                           
  3852                           ;ff.c: 535:  int r = 0;
  3853  0052B8  0E00               	movlw	0
  3854  0052BA  6E0E               	movwf	mem_cmp@r+1,c
  3855  0052BC  0E00               	movlw	0
  3856  0052BE  6E0D               	movwf	mem_cmp@r,c
  3857  0052C0                     l4726:
  3858  0052C0  0605               	decf	mem_cmp@cnt,f,c
  3859  0052C2  A0D8               	btfss	status,0,c
  3860  0052C4  0606               	decf	mem_cmp@cnt+1,f,c
  3861  0052C6  2805               	incf	mem_cmp@cnt,w,c
  3862  0052C8  E103               	bnz	u5830
  3863  0052CA  2806               	incf	mem_cmp@cnt+1,w,c
  3864  0052CC  B4D8               	btfsc	status,2,c
  3865  0052CE  D01A               	goto	u5840
  3866  0052D0                     u5830:
  3867  0052D0  C009  FFD9         	movff	mem_cmp@d,fsr2l
  3868  0052D4  C00A  FFDA         	movff	mem_cmp@d+1,fsr2h
  3869  0052D8  4A09               	infsnz	mem_cmp@d,f,c
  3870  0052DA  2A0A               	incf	mem_cmp@d+1,f,c
  3871  0052DC  50DF               	movf	indf2,w,c
  3872  0052DE  6E07               	movwf	??_mem_cmp& (0+255),c
  3873  0052E0  C00B  FFD9         	movff	mem_cmp@s,fsr2l
  3874  0052E4  C00C  FFDA         	movff	mem_cmp@s+1,fsr2h
  3875  0052E8  4A0B               	infsnz	mem_cmp@s,f,c
  3876  0052EA  2A0C               	incf	mem_cmp@s+1,f,c
  3877  0052EC  50DF               	movf	indf2,w,c
  3878  0052EE  6E08               	movwf	(??_mem_cmp+1)& (0+255),c
  3879  0052F0  5008               	movf	??_mem_cmp+1,w,c
  3880  0052F2  5C07               	subwf	??_mem_cmp,w,c
  3881  0052F4  6E0D               	movwf	mem_cmp@r,c
  3882  0052F6  6A0E               	clrf	mem_cmp@r+1,c
  3883  0052F8  A0D8               	btfss	status,0,c
  3884  0052FA  060E               	decf	mem_cmp@r+1,f,c
  3885  0052FC  500D               	movf	mem_cmp@r,w,c
  3886  0052FE  100E               	iorwf	mem_cmp@r+1,w,c
  3887  005300  B4D8               	btfsc	status,2,c
  3888  005302  D7DE               	goto	l4726
  3889  005304                     u5840:
  3890                           
  3891                           ;ff.c: 538:  return r;
  3892  005304  C00D  F001         	movff	mem_cmp@r,?_mem_cmp
  3893  005308  C00E  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  3894  00530C  0012               	return		;funcret
  3895  00530E                     __end_of_mem_cmp:
  3896                           	opt callstack 0
  3897                           
  3898 ;; *************** function _create_name *****************
  3899 ;; Defined at:
  3900 ;;		line 1843 in file "ff.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  dp              2    8[COMRAM] PTR struct .
  3903 ;;		 -> f_open@dj(22), 
  3904 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  3905 ;;		 -> follow_path@path(2), 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  i               2   28[COMRAM] unsigned short 
  3908 ;;  sfn             2   26[COMRAM] PTR unsigned char 
  3909 ;;		 -> f_open@sfn(12), 
  3910 ;;  p               2   23[COMRAM] PTR const unsigned char 
  3911 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  3912 ;;  ni              2   21[COMRAM] unsigned short 
  3913 ;;  si              2   18[COMRAM] unsigned short 
  3914 ;;  c               1   30[COMRAM] unsigned char 
  3915 ;;  d               1   25[COMRAM] unsigned char 
  3916 ;;  b               1   20[COMRAM] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      enum E93
  3919 ;; Registers used:
  3920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3926 ;;      Params:         4       0       0       0       0       0       0       0       0
  3927 ;;      Locals:        15       0       0       0       0       0       0       0       0
  3928 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3929 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3930 ;;Total ram usage:       23 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    1
  3933 ;; This function calls:
  3934 ;;		_chk_chr
  3935 ;;		_mem_set
  3936 ;; This function is called by:
  3937 ;;		_follow_path
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text9
  3942  003912                     __ptext9:
  3943                           	opt callstack 0
  3944  003912                     _create_name:
  3945                           	opt callstack 26
  3946                           
  3947                           ;ff.c: 1844:  DIRC* dp,;ff.c: 1845:  const TCHAR** path;ff.c: 1847: {;ff.c: 1969:  BYTE 
      +                          b, c, d, *sfn;;ff.c: 1970:  UINT ni, si, i;;ff.c: 1971:  const char *p;;ff.c: 1974:  for
      +                           (p = *path; *p == '/' || *p == '\\'; p++) ;
  3948                           
  3949                           ;incstack = 0
  3950  003912  C00B  FFD9         	movff	create_name@path,fsr2l
  3951  003916  C00C  FFDA         	movff	create_name@path+1,fsr2h
  3952  00391A  CFDE F018          	movff	postinc2,create_name@p
  3953  00391E  CFDD F019          	movff	postdec2,create_name@p+1
  3954  003922  D002               	goto	l5150
  3955  003924                     l5148:
  3956  003924  4A18               	infsnz	create_name@p,f,c
  3957  003926  2A19               	incf	create_name@p+1,f,c
  3958  003928                     l5150:
  3959  003928  C018  FFF6         	movff	create_name@p,tblptrl
  3960  00392C  C019  FFF7         	movff	create_name@p+1,tblptrh
  3961  003930                     	if	0	;tblptru may be non-zero
  3962  003930                     	endif
  3963  003930                     	if	0	;tblptru may be non-zero
  3964  003930                     	endif
  3965  003930  0008               	tblrd		*
  3966  003932  50F5               	movf	tablat,w,c
  3967  003934  0A2F               	xorlw	47
  3968  003936  B4D8               	btfsc	status,2,c
  3969  003938  D7F5               	goto	l5148
  3970  00393A  C018  FFF6         	movff	create_name@p,tblptrl
  3971  00393E  C019  FFF7         	movff	create_name@p+1,tblptrh
  3972  003942                     	if	0	;tblptru may be non-zero
  3973  003942                     	endif
  3974  003942                     	if	0	;tblptru may be non-zero
  3975  003942                     	endif
  3976  003942  0008               	tblrd		*
  3977  003944  50F5               	movf	tablat,w,c
  3978  003946  0A5C               	xorlw	92
  3979  003948  B4D8               	btfsc	status,2,c
  3980  00394A  D7EC               	goto	l5148
  3981                           
  3982                           ;ff.c: 1975:  sfn = dp->fn;
  3983  00394C  EE20 F014          	lfsr	2,20
  3984  003950  5009               	movf	create_name@dp,w,c
  3985  003952  26D9               	addwf	fsr2l,f,c
  3986  003954  500A               	movf	create_name@dp+1,w,c
  3987  003956  22DA               	addwfc	fsr2h,f,c
  3988  003958  CFDE F01B          	movff	postinc2,create_name@sfn
  3989  00395C  CFDD F01C          	movff	postdec2,create_name@sfn+1
  3990                           
  3991                           ;ff.c: 1976:  mem_set(sfn, ' ', 11);
  3992  003960  C01B  F001         	movff	create_name@sfn,mem_set@dst
  3993  003964  C01C  F002         	movff	create_name@sfn+1,mem_set@dst+1
  3994  003968  0E00               	movlw	0
  3995  00396A  6E04               	movwf	mem_set@val+1,c
  3996  00396C  0E20               	movlw	32
  3997  00396E  6E03               	movwf	mem_set@val,c
  3998  003970  0E00               	movlw	0
  3999  003972  6E06               	movwf	mem_set@cnt+1,c
  4000  003974  0E0B               	movlw	11
  4001  003976  6E05               	movwf	mem_set@cnt,c
  4002  003978  ECAD  F02A         	call	_mem_set	;wreg free
  4003                           
  4004                           ;ff.c: 1977:  si = i = b = 0; ni = 8;
  4005  00397C  0E00               	movlw	0
  4006  00397E  6E15               	movwf	create_name@b,c
  4007  003980  C015  F01D         	movff	create_name@b,create_name@i
  4008  003984  6A1E               	clrf	create_name@i+1,c
  4009  003986  C01D  F013         	movff	create_name@i,create_name@si
  4010  00398A  C01E  F014         	movff	create_name@i+1,create_name@si+1
  4011  00398E  0E00               	movlw	0
  4012  003990  6E17               	movwf	create_name@ni+1,c
  4013  003992  0E08               	movlw	8
  4014  003994  6E16               	movwf	create_name@ni,c
  4015  003996                     l5162:
  4016                           
  4017                           ;ff.c: 1992:   c = (BYTE)p[si++];
  4018  003996  5013               	movf	create_name@si,w,c
  4019  003998  2418               	addwf	create_name@p,w,c
  4020  00399A  6E0D               	movwf	??_create_name& (0+255),c
  4021  00399C  5014               	movf	create_name@si+1,w,c
  4022  00399E  2019               	addwfc	create_name@p+1,w,c
  4023  0039A0  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4024  0039A2  C00D  FFF6         	movff	??_create_name,tblptrl
  4025  0039A6  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4026  0039AA                     	if	0	;tblptru may be non-zero
  4027  0039AA                     	endif
  4028  0039AA                     	if	0	;tblptru may be non-zero
  4029  0039AA                     	endif
  4030  0039AA  0008               	tblrd		*
  4031  0039AC  CFF5 F01F          	movff	tablat,create_name@c
  4032  0039B0  4A13               	infsnz	create_name@si,f,c
  4033  0039B2  2A14               	incf	create_name@si+1,f,c
  4034                           
  4035                           ;ff.c: 1993:   if (c <= ' ' || c == '/' || c == '\\') break;
  4036  0039B4  0E20               	movlw	32
  4037  0039B6  641F               	cpfsgt	create_name@c,c
  4038  0039B8  D0A4               	goto	l5246
  4039  0039BA  0E2F               	movlw	47
  4040  0039BC  181F               	xorwf	create_name@c,w,c
  4041  0039BE  B4D8               	btfsc	status,2,c
  4042  0039C0  D0A0               	goto	l5246
  4043  0039C2  0E5C               	movlw	92
  4044  0039C4  181F               	xorwf	create_name@c,w,c
  4045  0039C6  B4D8               	btfsc	status,2,c
  4046  0039C8  D09C               	goto	l5246
  4047                           
  4048                           ;ff.c: 1994:   if (c == '.' || i >= ni) {
  4049  0039CA  0E2E               	movlw	46
  4050  0039CC  181F               	xorwf	create_name@c,w,c
  4051  0039CE  B4D8               	btfsc	status,2,c
  4052  0039D0  D006               	goto	u6660
  4053  0039D2  5016               	movf	create_name@ni,w,c
  4054  0039D4  5C1D               	subwf	create_name@i,w,c
  4055  0039D6  5017               	movf	create_name@ni+1,w,c
  4056  0039D8  581E               	subwfb	create_name@i+1,w,c
  4057  0039DA  A0D8               	btfss	status,0,c
  4058  0039DC  D018               	goto	l5188
  4059  0039DE                     u6660:
  4060                           
  4061                           ;ff.c: 1995:    if (ni != 8 || c != '.') return FR_INVALID_NAME;
  4062  0039DE  0E08               	movlw	8
  4063  0039E0  1816               	xorwf	create_name@ni,w,c
  4064  0039E2  1017               	iorwf	create_name@ni+1,w,c
  4065  0039E4  A4D8               	btfss	status,2,c
  4066  0039E6  D004               	goto	u6680
  4067  0039E8  0E2E               	movlw	46
  4068  0039EA  181F               	xorwf	create_name@c,w,c
  4069  0039EC  B4D8               	btfsc	status,2,c
  4070  0039EE  D002               	goto	l5184
  4071  0039F0                     u6680:
  4072  0039F0  0E06               	movlw	6
  4073  0039F2  0012               	return	
  4074  0039F4                     l5184:
  4075                           
  4076                           ;ff.c: 1996:    i = 8; ni = 11;
  4077  0039F4  0E00               	movlw	0
  4078  0039F6  6E1E               	movwf	create_name@i+1,c
  4079  0039F8  0E08               	movlw	8
  4080  0039FA  6E1D               	movwf	create_name@i,c
  4081  0039FC  0E00               	movlw	0
  4082  0039FE  6E17               	movwf	create_name@ni+1,c
  4083  003A00  0E0B               	movlw	11
  4084  003A02  6E16               	movwf	create_name@ni,c
  4085                           
  4086                           ;ff.c: 1997:    b <<= 2; continue;
  4087  003A04  90D8               	bcf	status,0,c
  4088  003A06  3615               	rlcf	create_name@b,f,c
  4089  003A08  90D8               	bcf	status,0,c
  4090  003A0A  3615               	rlcf	create_name@b,f,c
  4091  003A0C  D7C4               	goto	l5162
  4092  003A0E                     l5188:
  4093                           
  4094                           ;ff.c: 1999:   if (c >= 0x80) {
  4095  003A0E  0E7F               	movlw	127
  4096  003A10  641F               	cpfsgt	create_name@c,c
  4097  003A12  D002               	goto	l497
  4098                           
  4099                           ;ff.c: 2000:    b |= 3;
  4100  003A14  0E03               	movlw	3
  4101  003A16  1215               	iorwf	create_name@b,f,c
  4102  003A18                     l497:
  4103                           
  4104                           ;ff.c: 2009:   if ((((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0x9F) || ((BYTE)(c) >= 0xE0 && (B
      +                          YTE)(c) <= 0xFC))) {
  4105  003A18  0E80               	movlw	128
  4106  003A1A  641F               	cpfsgt	create_name@c,c
  4107  003A1C  D003               	goto	u6710
  4108  003A1E  0E9F               	movlw	159
  4109  003A20  641F               	cpfsgt	create_name@c,c
  4110  003A22  D006               	goto	u6730
  4111  003A24                     u6710:
  4112  003A24  0EDF               	movlw	223
  4113  003A26  641F               	cpfsgt	create_name@c,c
  4114  003A28  D043               	goto	l5222
  4115  003A2A  0EFD               	movlw	253
  4116  003A2C  601F               	cpfslt	create_name@c,c
  4117  003A2E  D040               	goto	l5222
  4118  003A30                     u6730:
  4119                           
  4120                           ;ff.c: 2010:    d = (BYTE)p[si++];
  4121  003A30  5013               	movf	create_name@si,w,c
  4122  003A32  2418               	addwf	create_name@p,w,c
  4123  003A34  6E0D               	movwf	??_create_name& (0+255),c
  4124  003A36  5014               	movf	create_name@si+1,w,c
  4125  003A38  2019               	addwfc	create_name@p+1,w,c
  4126  003A3A  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4127  003A3C  C00D  FFF6         	movff	??_create_name,tblptrl
  4128  003A40  C00E  FFF7         	movff	??_create_name+1,tblptrh
  4129  003A44                     	if	0	;tblptru may be non-zero
  4130  003A44                     	endif
  4131  003A44                     	if	0	;tblptru may be non-zero
  4132  003A44                     	endif
  4133  003A44  0008               	tblrd		*
  4134  003A46  CFF5 F01A          	movff	tablat,create_name@d
  4135  003A4A  4A13               	infsnz	create_name@si,f,c
  4136  003A4C  2A14               	incf	create_name@si+1,f,c
  4137                           
  4138                           ;ff.c: 2011:    if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && 
      +                          (BYTE)(d) <= 0xFC)) || i >= ni - 1)
  4139  003A4E  0E3F               	movlw	63
  4140  003A50  641A               	cpfsgt	create_name@d,c
  4141  003A52  D003               	goto	u6750
  4142  003A54  0E7E               	movlw	126
  4143  003A56  641A               	cpfsgt	create_name@d,c
  4144  003A58  D006               	goto	u6770
  4145  003A5A                     u6750:
  4146  003A5A  0E7F               	movlw	127
  4147  003A5C  641A               	cpfsgt	create_name@d,c
  4148  003A5E  D7C8               	goto	u6680
  4149  003A60  0EFD               	movlw	253
  4150  003A62  601A               	cpfslt	create_name@d,c
  4151  003A64  D7C5               	goto	u6680
  4152  003A66                     u6770:
  4153  003A66  0EFF               	movlw	255
  4154  003A68  6E0D               	movwf	??_create_name& (0+255),c
  4155  003A6A  0EFF               	movlw	255
  4156  003A6C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4157  003A6E  C016  F00F         	movff	create_name@ni,??_create_name+2
  4158  003A72  C017  F010         	movff	create_name@ni+1,??_create_name+3
  4159  003A76  500D               	movf	??_create_name,w,c
  4160  003A78  260F               	addwf	??_create_name+2,f,c
  4161  003A7A  500E               	movf	??_create_name+1,w,c
  4162  003A7C  2210               	addwfc	??_create_name+3,f,c
  4163  003A7E  500F               	movf	??_create_name+2,w,c
  4164  003A80  5C1D               	subwf	create_name@i,w,c
  4165  003A82  5010               	movf	??_create_name+3,w,c
  4166  003A84  581E               	subwfb	create_name@i+1,w,c
  4167  003A86  B0D8               	btfsc	status,0,c
  4168  003A88  D7B3               	goto	u6680
  4169                           
  4170                           ;ff.c: 2013:    sfn[i++] = c;
  4171  003A8A  501D               	movf	create_name@i,w,c
  4172  003A8C  241B               	addwf	create_name@sfn,w,c
  4173  003A8E  6ED9               	movwf	fsr2l,c
  4174  003A90  501E               	movf	create_name@i+1,w,c
  4175  003A92  201C               	addwfc	create_name@sfn+1,w,c
  4176  003A94  6EDA               	movwf	fsr2h,c
  4177  003A96  C01F  FFDF         	movff	create_name@c,indf2
  4178  003A9A  4A1D               	infsnz	create_name@i,f,c
  4179  003A9C  2A1E               	incf	create_name@i+1,f,c
  4180                           
  4181                           ;ff.c: 2014:    sfn[i++] = d;
  4182  003A9E  501D               	movf	create_name@i,w,c
  4183  003AA0  241B               	addwf	create_name@sfn,w,c
  4184  003AA2  6ED9               	movwf	fsr2l,c
  4185  003AA4  501E               	movf	create_name@i+1,w,c
  4186  003AA6  201C               	addwfc	create_name@sfn+1,w,c
  4187  003AA8  6EDA               	movwf	fsr2h,c
  4188  003AAA  C01A  FFDF         	movff	create_name@d,indf2
  4189  003AAE  D026               	goto	l5244
  4190  003AB0                     l5222:
  4191                           
  4192                           ;ff.c: 2016:    if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))
  4193  003AB0  0E15               	movlw	low STR_5
  4194  003AB2  6E01               	movwf	chk_chr@str,c
  4195  003AB4  0E08               	movlw	high STR_5
  4196  003AB6  6E02               	movwf	chk_chr@str+1,c
  4197  003AB8  C01F  F003         	movff	create_name@c,chk_chr@chr
  4198  003ABC  6A04               	clrf	chk_chr@chr+1,c
  4199  003ABE  ECDA  F029         	call	_chk_chr	;wreg free
  4200  003AC2  5001               	movf	?_chk_chr,w,c
  4201  003AC4  1002               	iorwf	?_chk_chr+1,w,c
  4202  003AC6  A4D8               	btfss	status,2,c
  4203  003AC8  D793               	goto	u6680
  4204                           
  4205                           ;ff.c: 2018:    if ((((c)>='A')&&((c)<='Z'))) {
  4206  003ACA  0E40               	movlw	64
  4207  003ACC  641F               	cpfsgt	create_name@c,c
  4208  003ACE  D005               	goto	l5234
  4209  003AD0  0E5B               	movlw	91
  4210  003AD2  601F               	cpfslt	create_name@c,c
  4211  003AD4  D002               	goto	l5234
  4212                           
  4213                           ;ff.c: 2019:     b |= 2;
  4214  003AD6  8215               	bsf	create_name@b,1,c
  4215                           
  4216                           ;ff.c: 2020:    } else {
  4217  003AD8  D009               	goto	l5242
  4218  003ADA                     l5234:
  4219                           
  4220                           ;ff.c: 2021:     if ((((c)>='a')&&((c)<='z'))) {
  4221  003ADA  0E60               	movlw	96
  4222  003ADC  641F               	cpfsgt	create_name@c,c
  4223  003ADE  D006               	goto	l5242
  4224  003AE0  0E7B               	movlw	123
  4225  003AE2  601F               	cpfslt	create_name@c,c
  4226  003AE4  D003               	goto	l5242
  4227                           
  4228                           ;ff.c: 2022:      b |= 1; c -= 0x20;
  4229  003AE6  8015               	bsf	create_name@b,0,c
  4230  003AE8  0E20               	movlw	32
  4231  003AEA  5E1F               	subwf	create_name@c,f,c
  4232  003AEC                     l5242:
  4233                           
  4234                           ;ff.c: 2025:    sfn[i++] = c;
  4235  003AEC  501D               	movf	create_name@i,w,c
  4236  003AEE  241B               	addwf	create_name@sfn,w,c
  4237  003AF0  6ED9               	movwf	fsr2l,c
  4238  003AF2  501E               	movf	create_name@i+1,w,c
  4239  003AF4  201C               	addwfc	create_name@sfn+1,w,c
  4240  003AF6  6EDA               	movwf	fsr2h,c
  4241  003AF8  C01F  FFDF         	movff	create_name@c,indf2
  4242  003AFC                     l5244:
  4243  003AFC  4A1D               	infsnz	create_name@i,f,c
  4244  003AFE  2A1E               	incf	create_name@i+1,f,c
  4245  003B00  D74A               	goto	l5162
  4246  003B02                     l5246:
  4247                           
  4248                           ;ff.c: 2028:  *path = &p[si];
  4249  003B02  5013               	movf	create_name@si,w,c
  4250  003B04  2418               	addwf	create_name@p,w,c
  4251  003B06  6E0D               	movwf	??_create_name& (0+255),c
  4252  003B08  5014               	movf	create_name@si+1,w,c
  4253  003B0A  2019               	addwfc	create_name@p+1,w,c
  4254  003B0C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  4255  003B0E  C00B  FFD9         	movff	create_name@path,fsr2l
  4256  003B12  C00C  FFDA         	movff	create_name@path+1,fsr2h
  4257  003B16  C00D  FFDE         	movff	??_create_name,postinc2
  4258  003B1A  C00E  FFDD         	movff	??_create_name+1,postdec2
  4259                           
  4260                           ;ff.c: 2029:  c = (c <= ' ') ? 0x04 : 0;
  4261  003B1E  0E20               	movlw	32
  4262  003B20  641F               	cpfsgt	create_name@c,c
  4263  003B22  D004               	goto	l5252
  4264  003B24  0E00               	movlw	0
  4265  003B26  6E12               	movwf	_create_name$818+1,c
  4266  003B28  0E00               	movlw	0
  4267  003B2A  D003               	goto	L5
  4268  003B2C                     l5252:
  4269  003B2C  0E00               	movlw	0
  4270  003B2E  6E12               	movwf	_create_name$818+1,c
  4271  003B30  0E04               	movlw	4
  4272  003B32                     L5:
  4273  003B32  6E11               	movwf	_create_name$818,c
  4274  003B34  C011  F01F         	movff	_create_name$818,create_name@c
  4275                           
  4276                           ;ff.c: 2031:  if (!i) return FR_INVALID_NAME;
  4277  003B38  501D               	movf	create_name@i,w,c
  4278  003B3A  101E               	iorwf	create_name@i+1,w,c
  4279  003B3C  B4D8               	btfsc	status,2,c
  4280  003B3E  D758               	goto	u6680
  4281                           
  4282                           ;ff.c: 2032:  if (sfn[0] == 0xE5) sfn[0] = 0x05;
  4283  003B40  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4284  003B44  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4285  003B48  0EE5               	movlw	229
  4286  003B4A  18DE               	xorwf	postinc2,w,c
  4287  003B4C  A4D8               	btfss	status,2,c
  4288  003B4E  D006               	goto	l5266
  4289  003B50  C01B  FFD9         	movff	create_name@sfn,fsr2l
  4290  003B54  C01C  FFDA         	movff	create_name@sfn+1,fsr2h
  4291  003B58  0E05               	movlw	5
  4292  003B5A  6EDF               	movwf	indf2,c
  4293  003B5C                     l5266:
  4294                           
  4295                           ;ff.c: 2034:  if (ni == 8) b <<= 2;
  4296  003B5C  0E08               	movlw	8
  4297  003B5E  1816               	xorwf	create_name@ni,w,c
  4298  003B60  1017               	iorwf	create_name@ni+1,w,c
  4299  003B62  A4D8               	btfss	status,2,c
  4300  003B64  D004               	goto	l521
  4301  003B66  90D8               	bcf	status,0,c
  4302  003B68  3615               	rlcf	create_name@b,f,c
  4303  003B6A  90D8               	bcf	status,0,c
  4304  003B6C  3615               	rlcf	create_name@b,f,c
  4305  003B6E                     l521:
  4306                           
  4307                           ;ff.c: 2035:  if ((b & 0x03) == 0x01) c |= 0x10;
  4308  003B6E  5015               	movf	create_name@b,w,c
  4309  003B70  0B03               	andlw	3
  4310  003B72  06E8               	decf	wreg,f,c
  4311  003B74  B4D8               	btfsc	status,2,c
  4312  003B76  881F               	bsf	create_name@c,4,c
  4313                           
  4314                           ;ff.c: 2036:  if ((b & 0x0C) == 0x04) c |= 0x08;
  4315  003B78  5015               	movf	create_name@b,w,c
  4316  003B7A  0B0C               	andlw	12
  4317  003B7C  0A04               	xorlw	4
  4318  003B7E  B4D8               	btfsc	status,2,c
  4319  003B80  861F               	bsf	create_name@c,3,c
  4320                           
  4321                           ;ff.c: 2038:  sfn[11] = c;
  4322  003B82  EE20 F00B          	lfsr	2,11
  4323  003B86  501B               	movf	create_name@sfn,w,c
  4324  003B88  26D9               	addwf	fsr2l,f,c
  4325  003B8A  501C               	movf	create_name@sfn+1,w,c
  4326  003B8C  22DA               	addwfc	fsr2h,f,c
  4327  003B8E  C01F  FFDF         	movff	create_name@c,indf2
  4328                           
  4329                           ;ff.c: 2040:  return FR_OK;
  4330  003B92  0E00               	movlw	0
  4331  003B94  0012               	return		;funcret
  4332  003B96                     __end_of_create_name:
  4333                           	opt callstack 0
  4334                           
  4335 ;; *************** function _chk_chr *****************
  4336 ;; Defined at:
  4337 ;;		line 543 in file "ff.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;  str             2    0[COMRAM] PTR const unsigned char 
  4340 ;;		 -> STR_6(15), 
  4341 ;;  chr             2    2[COMRAM] int 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  2    0[COMRAM] int 
  4346 ;; Registers used:
  4347 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4353 ;;      Params:         4       0       0       0       0       0       0       0       0
  4354 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4355 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4356 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4357 ;;Total ram usage:        6 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_create_name
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text10
  4367  0053B4                     __ptext10:
  4368                           	opt callstack 0
  4369  0053B4                     _chk_chr:
  4370                           	opt callstack 26
  4371                           
  4372                           ;ff.c: 544:  while (*str && *str != chr) str++;
  4373                           
  4374                           ;incstack = 0
  4375  0053B4  D002               	goto	l4734
  4376  0053B6                     l4732:
  4377  0053B6  4A01               	infsnz	chk_chr@str,f,c
  4378  0053B8  2A02               	incf	chk_chr@str+1,f,c
  4379  0053BA                     l4734:
  4380  0053BA  C001  FFF6         	movff	chk_chr@str,tblptrl
  4381  0053BE  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4382  0053C2                     	if	0	;tblptru may be non-zero
  4383  0053C2                     	endif
  4384  0053C2                     	if	0	;tblptru may be non-zero
  4385  0053C2                     	endif
  4386  0053C2  0008               	tblrd		*
  4387  0053C4  50F5               	movf	tablat,w,c
  4388  0053C6  0900               	iorlw	0
  4389  0053C8  B4D8               	btfsc	status,2,c
  4390  0053CA  D00F               	goto	u5860
  4391  0053CC  C001  FFF6         	movff	chk_chr@str,tblptrl
  4392  0053D0  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4393  0053D4                     	if	0	;tblptru may be non-zero
  4394  0053D4                     	endif
  4395  0053D4                     	if	0	;tblptru may be non-zero
  4396  0053D4                     	endif
  4397  0053D4  0008               	tblrd		*
  4398  0053D6  50F5               	movf	tablat,w,c
  4399  0053D8  6E05               	movwf	??_chk_chr& (0+255),c
  4400  0053DA  6A06               	clrf	(??_chk_chr+1)& (0+255),c
  4401  0053DC  5003               	movf	chk_chr@chr,w,c
  4402  0053DE  1805               	xorwf	??_chk_chr,w,c
  4403  0053E0  E1EA               	bnz	l4732
  4404  0053E2  5004               	movf	chk_chr@chr+1,w,c
  4405  0053E4  1806               	xorwf	??_chk_chr+1,w,c
  4406  0053E6  A4D8               	btfss	status,2,c
  4407  0053E8  D7E6               	goto	l4732
  4408  0053EA                     u5860:
  4409                           
  4410                           ;ff.c: 545:  return *str;
  4411  0053EA  C001  FFF6         	movff	chk_chr@str,tblptrl
  4412  0053EE  C002  FFF7         	movff	chk_chr@str+1,tblptrh
  4413  0053F2                     	if	0	;tblptru may be non-zero
  4414  0053F2                     	endif
  4415  0053F2                     	if	0	;tblptru may be non-zero
  4416  0053F2                     	endif
  4417  0053F2  0008               	tblrd		*
  4418  0053F4  50F5               	movf	tablat,w,c
  4419  0053F6  6E01               	movwf	?_chk_chr,c
  4420  0053F8  6A02               	clrf	?_chk_chr+1,c
  4421  0053FA  0012               	return		;funcret
  4422  0053FC                     __end_of_chk_chr:
  4423                           	opt callstack 0
  4424                           
  4425 ;; *************** function _dir_register *****************
  4426 ;; Defined at:
  4427 ;;		line 1578 in file "ff.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  dp              2   42[BANK0 ] PTR struct .
  4430 ;;		 -> f_open@dj(22), 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  res             1   44[BANK0 ] enum E93
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      enum E93
  4435 ;; Registers used:
  4436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4442 ;;      Params:         0       2       0       0       0       0       0       0       0
  4443 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4445 ;;      Totals:         0       3       0       0       0       0       0       0       0
  4446 ;;Total ram usage:        3 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:   12
  4449 ;; This function calls:
  4450 ;;		_dir_alloc
  4451 ;;		_mem_cpy
  4452 ;;		_mem_set
  4453 ;;		_move_window
  4454 ;; This function is called by:
  4455 ;;		_f_open
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text11
  4460  004B3E                     __ptext11:
  4461                           	opt callstack 0
  4462  004B3E                     _dir_register:
  4463                           	opt callstack 16
  4464                           
  4465                           ;ff.c: 1579:  DIRC* dp;ff.c: 1581: {;ff.c: 1582:  FRESULT res;;ff.c: 1629:  res = dir_al
      +                          loc(dp, 1);
  4466                           
  4467                           ;incstack = 0
  4468  004B3E  C08A  F080         	movff	dir_register@dp,dir_alloc@dp
  4469  004B42  C08B  F081         	movff	dir_register@dp+1,dir_alloc@dp+1
  4470  004B46  0E00               	movlw	0
  4471  004B48  0100               	movlb	0	; () banked
  4472  004B4A  6F83               	movwf	(dir_alloc@nent+1)& (0+255),b
  4473  004B4C  0E01               	movlw	1
  4474  004B4E  6F82               	movwf	dir_alloc@nent& (0+255),b
  4475  004B50  EC5F  F023         	call	_dir_alloc	;wreg free
  4476  004B54  0100               	movlb	0	; () banked
  4477  004B56  6F8C               	movwf	dir_register@res& (0+255),b
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;ff.c: 1632:  if (res == FR_OK) {
  4481  004B58  518C               	movf	dir_register@res& (0+255),w,b
  4482  004B5A  A4D8               	btfss	status,2,c
  4483  004B5C  D058               	goto	l5448
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;ff.c: 1633:   res = move_window(dp->fs, dp->sect);
  4487  004B5E  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4488  004B62  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4489  004B66  CFDE F030          	movff	postinc2,move_window@fs
  4490  004B6A  CFDD F031          	movff	postdec2,move_window@fs+1
  4491  004B6E  EE20 F00E          	lfsr	2,14
  4492  004B72  518A               	movf	dir_register@dp& (0+255),w,b
  4493  004B74  26D9               	addwf	fsr2l,f,c
  4494  004B76  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4495  004B78  22DA               	addwfc	fsr2h,f,c
  4496  004B7A  CFDE F032          	movff	postinc2,move_window@sector
  4497  004B7E  CFDE F033          	movff	postinc2,move_window@sector+1
  4498  004B82  CFDE F034          	movff	postinc2,move_window@sector+2
  4499  004B86  CFDE F035          	movff	postinc2,move_window@sector+3
  4500  004B8A  EC82  F027         	call	_move_window	;wreg free
  4501  004B8E  0100               	movlb	0	; () banked
  4502  004B90  6F8C               	movwf	dir_register@res& (0+255),b
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;ff.c: 1634:   if (res == FR_OK) {
  4506  004B92  518C               	movf	dir_register@res& (0+255),w,b
  4507  004B94  A4D8               	btfss	status,2,c
  4508  004B96  D03B               	goto	l5448
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;ff.c: 1635:    mem_set(dp->dir, 0, 32);
  4512  004B98  EE20 F012          	lfsr	2,18
  4513  004B9C  518A               	movf	dir_register@dp& (0+255),w,b
  4514  004B9E  26D9               	addwf	fsr2l,f,c
  4515  004BA0  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4516  004BA2  22DA               	addwfc	fsr2h,f,c
  4517  004BA4  CFDE F001          	movff	postinc2,mem_set@dst
  4518  004BA8  CFDD F002          	movff	postdec2,mem_set@dst+1
  4519  004BAC  0E00               	movlw	0
  4520  004BAE  6E04               	movwf	mem_set@val+1,c
  4521  004BB0  0E00               	movlw	0
  4522  004BB2  6E03               	movwf	mem_set@val,c
  4523  004BB4  0E00               	movlw	0
  4524  004BB6  6E06               	movwf	mem_set@cnt+1,c
  4525  004BB8  0E20               	movlw	32
  4526  004BBA  6E05               	movwf	mem_set@cnt,c
  4527  004BBC  ECAD  F02A         	call	_mem_set	;wreg free
  4528                           
  4529                           ;ff.c: 1636:    mem_cpy(dp->dir, dp->fn, 11);
  4530  004BC0  0100               	movlb	0	; () banked
  4531  004BC2  EE20 F012          	lfsr	2,18
  4532  004BC6  518A               	movf	dir_register@dp& (0+255),w,b
  4533  004BC8  26D9               	addwf	fsr2l,f,c
  4534  004BCA  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4535  004BCC  22DA               	addwfc	fsr2h,f,c
  4536  004BCE  CFDE F001          	movff	postinc2,mem_cpy@dst
  4537  004BD2  CFDD F002          	movff	postdec2,mem_cpy@dst+1
  4538  004BD6  EE20 F014          	lfsr	2,20
  4539  004BDA  518A               	movf	dir_register@dp& (0+255),w,b
  4540  004BDC  26D9               	addwf	fsr2l,f,c
  4541  004BDE  518B               	movf	(dir_register@dp+1)& (0+255),w,b
  4542  004BE0  22DA               	addwfc	fsr2h,f,c
  4543  004BE2  CFDE F003          	movff	postinc2,mem_cpy@src
  4544  004BE6  CFDD F004          	movff	postdec2,mem_cpy@src+1
  4545  004BEA  0E00               	movlw	0
  4546  004BEC  6E06               	movwf	mem_cpy@cnt+1,c
  4547  004BEE  0E0B               	movlw	11
  4548  004BF0  6E05               	movwf	mem_cpy@cnt,c
  4549  004BF2  EC70  F026         	call	_mem_cpy	;wreg free
  4550                           
  4551                           ;ff.c: 1640:    dp->fs->wflag = 1;
  4552  004BF6  C08A  FFD9         	movff	dir_register@dp,fsr2l
  4553  004BFA  C08B  FFDA         	movff	dir_register@dp+1,fsr2h
  4554  004BFE  EE10 F004          	lfsr	1,4
  4555  004C02  50DE               	movf	postinc2,w,c
  4556  004C04  26E1               	addwf	fsr1l,f,c
  4557  004C06  50DD               	movf	postdec2,w,c
  4558  004C08  22E2               	addwfc	fsr1h,f,c
  4559  004C0A  0E01               	movlw	1
  4560  004C0C  6EE7               	movwf	indf1,c
  4561  004C0E                     l5448:
  4562                           
  4563                           ;ff.c: 1644:  return res;
  4564  004C0E  0100               	movlb	0	; () banked
  4565  004C10  518C               	movf	dir_register@res& (0+255),w,b
  4566                           
  4567                           ; BSR set to: 0
  4568  004C12  0012               	return		;funcret
  4569  004C14                     __end_of_dir_register:
  4570                           	opt callstack 0
  4571                           
  4572 ;; *************** function _mem_cpy *****************
  4573 ;; Defined at:
  4574 ;;		line 507 in file "ff.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  dst             2    0[COMRAM] PTR void 
  4577 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4578 ;;  src             2    2[COMRAM] PTR const void 
  4579 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4580 ;;  cnt             2    4[COMRAM] unsigned short 
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  s               2   10[COMRAM] PTR const unsigned char 
  4583 ;;		 -> f_open@sfn(12), NULL(0), STR_4(20), FatFs(558), 
  4584 ;;  d               2    8[COMRAM] PTR unsigned char 
  4585 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4595 ;;      Params:         6       0       0       0       0       0       0       0       0
  4596 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4597 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4598 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4599 ;;Total ram usage:       12 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_dir_register
  4605 ;;		_f_write
  4606 ;;		_f_read
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text12
  4611  004CE0                     __ptext12:
  4612                           	opt callstack 0
  4613  004CE0                     _mem_cpy:
  4614                           	opt callstack 28
  4615                           
  4616                           ;ff.c: 508:  BYTE *d = (BYTE*)dst;
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;incstack = 0
  4620  004CE0  C001  F009         	movff	mem_cpy@dst,mem_cpy@d
  4621  004CE4  C002  F00A         	movff	mem_cpy@dst+1,mem_cpy@d+1
  4622                           
  4623                           ;ff.c: 509:  const BYTE *s = (const BYTE*)src;
  4624  004CE8  C003  F00B         	movff	mem_cpy@src,mem_cpy@s
  4625  004CEC  C004  F00C         	movff	mem_cpy@src+1,mem_cpy@s+1
  4626                           
  4627                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4628  004CF0  D02B               	goto	l5026
  4629  004CF2                     l5018:
  4630                           
  4631                           ;ff.c: 513:   *(int*)d = *(int*)s;
  4632  004CF2  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4633  004CF6  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4634  004CFA  6AF8               	clrf	tblptru,c
  4635  004CFC  0E07               	movlw	(high __ramtop+-1)
  4636  004CFE  64F7               	cpfsgt	tblptrh,c
  4637  004D00  D007               	bra	u6387
  4638  004D02  0009               	tblrd		*+
  4639  004D04  CFF5 F007          	movff	tablat,??_mem_cpy
  4640  004D08  0009               	tblrd		*+
  4641  004D0A  CFF5 F008          	movff	tablat,??_mem_cpy+1
  4642  004D0E  D008               	bra	u6380
  4643  004D10                     u6387:
  4644  004D10  CFF6 FFE9          	movff	tblptrl,fsr0l
  4645  004D14  CFF7 FFEA          	movff	tblptrh,fsr0h
  4646  004D18  CFEE F007          	movff	postinc0,??_mem_cpy
  4647  004D1C  CFEE F008          	movff	postinc0,??_mem_cpy+1
  4648  004D20                     u6380:
  4649  004D20  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4650  004D24  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4651  004D28  C007  FFDE         	movff	??_mem_cpy,postinc2
  4652  004D2C  C008  FFDD         	movff	??_mem_cpy+1,postdec2
  4653                           
  4654                           ;ff.c: 514:   d += sizeof (int); s += sizeof (int);
  4655  004D30  0E02               	movlw	2
  4656  004D32  2609               	addwf	mem_cpy@d,f,c
  4657  004D34  0E00               	movlw	0
  4658  004D36  220A               	addwfc	mem_cpy@d+1,f,c
  4659  004D38  0E02               	movlw	2
  4660  004D3A  260B               	addwf	mem_cpy@s,f,c
  4661  004D3C  0E00               	movlw	0
  4662  004D3E  220C               	addwfc	mem_cpy@s+1,f,c
  4663                           
  4664                           ;ff.c: 515:   cnt -= sizeof (int);
  4665  004D40  0E02               	movlw	2
  4666  004D42  5E05               	subwf	mem_cpy@cnt,f,c
  4667  004D44  0E00               	movlw	0
  4668  004D46  5A06               	subwfb	mem_cpy@cnt+1,f,c
  4669  004D48                     l5026:
  4670                           
  4671                           ;ff.c: 512:  while (cnt >= sizeof (int)) {
  4672  004D48  5006               	movf	mem_cpy@cnt+1,w,c
  4673  004D4A  E1D3               	bnz	l5018
  4674  004D4C  0E02               	movlw	2
  4675  004D4E  5C05               	subwf	mem_cpy@cnt,w,c
  4676  004D50  A0D8               	btfss	status,0,c
  4677  004D52  D01A               	goto	l5034
  4678  004D54  D7CE               	goto	l5018
  4679  004D56                     l5028:
  4680                           
  4681                           ;ff.c: 519:   *d++ = *s++;
  4682  004D56  C00B  FFF6         	movff	mem_cpy@s,tblptrl
  4683  004D5A  C00C  FFF7         	movff	mem_cpy@s+1,tblptrh
  4684  004D5E  6AF8               	clrf	tblptru,c
  4685  004D60  C009  FFD9         	movff	mem_cpy@d,fsr2l
  4686  004D64  C00A  FFDA         	movff	mem_cpy@d+1,fsr2h
  4687  004D68  0E07               	movlw	(high __ramtop+-1)
  4688  004D6A  64F7               	cpfsgt	tblptrh,c
  4689  004D6C  D003               	bra	u6407
  4690  004D6E  0008               	tblrd		*
  4691  004D70  50F5               	movf	tablat,w,c
  4692  004D72  D005               	bra	u6400
  4693  004D74                     u6407:
  4694  004D74  CFF6 FFE9          	movff	tblptrl,fsr0l
  4695  004D78  CFF7 FFEA          	movff	tblptrh,fsr0h
  4696  004D7C  50EF               	movf	indf0,w,c
  4697  004D7E                     u6400:
  4698  004D7E  6EDF               	movwf	indf2,c
  4699  004D80  4A0B               	infsnz	mem_cpy@s,f,c
  4700  004D82  2A0C               	incf	mem_cpy@s+1,f,c
  4701  004D84  4A09               	infsnz	mem_cpy@d,f,c
  4702  004D86  2A0A               	incf	mem_cpy@d+1,f,c
  4703  004D88                     l5034:
  4704                           
  4705                           ;ff.c: 518:  while (cnt--)
  4706  004D88  0605               	decf	mem_cpy@cnt,f,c
  4707  004D8A  A0D8               	btfss	status,0,c
  4708  004D8C  0606               	decf	mem_cpy@cnt+1,f,c
  4709  004D8E  2805               	incf	mem_cpy@cnt,w,c
  4710  004D90  E1E2               	bnz	l5028
  4711  004D92  2806               	incf	mem_cpy@cnt+1,w,c
  4712  004D94  B4D8               	btfsc	status,2,c
  4713  004D96  0012               	return	
  4714  004D98  D7DE               	goto	l5028
  4715  004D9A                     __end_of_mem_cpy:
  4716                           	opt callstack 0
  4717                           
  4718 ;; *************** function _dir_alloc *****************
  4719 ;; Defined at:
  4720 ;;		line 1199 in file "ff.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;  dp              2   32[BANK0 ] PTR struct .
  4723 ;;		 -> f_open@dj(22), 
  4724 ;;  nent            2   34[BANK0 ] unsigned short 
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;  n               2   39[BANK0 ] unsigned short 
  4727 ;;  res             1   41[BANK0 ] enum E93
  4728 ;; Return value:  Size  Location     Type
  4729 ;;                  1    wreg      enum E93
  4730 ;; Registers used:
  4731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4737 ;;      Params:         0       4       0       0       0       0       0       0       0
  4738 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4739 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4740 ;;      Totals:         0      10       0       0       0       0       0       0       0
  4741 ;;Total ram usage:       10 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:   11
  4744 ;; This function calls:
  4745 ;;		_dir_next
  4746 ;;		_dir_sdi
  4747 ;;		_move_window
  4748 ;; This function is called by:
  4749 ;;		_dir_register
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text13
  4754  0046BE                     __ptext13:
  4755                           	opt callstack 0
  4756  0046BE                     _dir_alloc:
  4757                           	opt callstack 16
  4758                           
  4759                           ;ff.c: 1200:  DIRC* dp,;ff.c: 1201:  UINT nent;ff.c: 1203: {;ff.c: 1204:  FRESULT res;;f
      +                          f.c: 1205:  UINT n;;ff.c: 1208:  res = dir_sdi(dp, 0);
  4760                           
  4761                           ;incstack = 0
  4762  0046BE  C080  F056         	movff	dir_alloc@dp,dir_sdi@dp
  4763  0046C2  C081  F057         	movff	dir_alloc@dp+1,dir_sdi@dp+1
  4764  0046C6  0E00               	movlw	0
  4765  0046C8  6E59               	movwf	dir_sdi@idx+1,c
  4766  0046CA  0E00               	movlw	0
  4767  0046CC  6E58               	movwf	dir_sdi@idx,c
  4768  0046CE  EC28  F01B         	call	_dir_sdi	;wreg free
  4769  0046D2  0100               	movlb	0	; () banked
  4770  0046D4  6F89               	movwf	dir_alloc@res& (0+255),b
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;ff.c: 1209:  if (res == FR_OK) {
  4774  0046D6  5189               	movf	dir_alloc@res& (0+255),w,b
  4775  0046D8  A4D8               	btfss	status,2,c
  4776  0046DA  D061               	goto	u6510
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;ff.c: 1210:   n = 0;
  4780  0046DC  0E00               	movlw	0
  4781  0046DE  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4782  0046E0  0E00               	movlw	0
  4783  0046E2  6F87               	movwf	dir_alloc@n& (0+255),b
  4784  0046E4                     l5074:
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;ff.c: 1212:    res = move_window(dp->fs, dp->sect);
  4788  0046E4  C080  FFD9         	movff	dir_alloc@dp,fsr2l
  4789  0046E8  C081  FFDA         	movff	dir_alloc@dp+1,fsr2h
  4790  0046EC  CFDE F030          	movff	postinc2,move_window@fs
  4791  0046F0  CFDD F031          	movff	postdec2,move_window@fs+1
  4792  0046F4  EE20 F00E          	lfsr	2,14
  4793  0046F8  5180               	movf	dir_alloc@dp& (0+255),w,b
  4794  0046FA  26D9               	addwf	fsr2l,f,c
  4795  0046FC  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4796  0046FE  22DA               	addwfc	fsr2h,f,c
  4797  004700  CFDE F032          	movff	postinc2,move_window@sector
  4798  004704  CFDE F033          	movff	postinc2,move_window@sector+1
  4799  004708  CFDE F034          	movff	postinc2,move_window@sector+2
  4800  00470C  CFDE F035          	movff	postinc2,move_window@sector+3
  4801  004710  EC82  F027         	call	_move_window	;wreg free
  4802  004714  0100               	movlb	0	; () banked
  4803  004716  6F89               	movwf	dir_alloc@res& (0+255),b
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;ff.c: 1213:    if (res != FR_OK) break;
  4807  004718  5189               	movf	dir_alloc@res& (0+255),w,b
  4808  00471A  A4D8               	btfss	status,2,c
  4809  00471C  D040               	goto	u6510
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;ff.c: 1214:    if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {
  4813  00471E  EE20 F012          	lfsr	2,18
  4814  004722  5180               	movf	dir_alloc@dp& (0+255),w,b
  4815  004724  26D9               	addwf	fsr2l,f,c
  4816  004726  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4817  004728  22DA               	addwfc	fsr2h,f,c
  4818  00472A  CFDE F084          	movff	postinc2,??_dir_alloc
  4819  00472E  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4820  004732  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4821  004736  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4822  00473A  0EE5               	movlw	229
  4823  00473C  18DE               	xorwf	postinc2,w,c
  4824  00473E  B4D8               	btfsc	status,2,c
  4825  004740  D011               	goto	u6490
  4826                           
  4827                           ; BSR set to: 0
  4828  004742  EE20 F012          	lfsr	2,18
  4829  004746  5180               	movf	dir_alloc@dp& (0+255),w,b
  4830  004748  26D9               	addwf	fsr2l,f,c
  4831  00474A  5181               	movf	(dir_alloc@dp+1)& (0+255),w,b
  4832  00474C  22DA               	addwfc	fsr2h,f,c
  4833  00474E  CFDE F084          	movff	postinc2,??_dir_alloc
  4834  004752  CFDD F085          	movff	postdec2,??_dir_alloc+1
  4835  004756  C084  FFD9         	movff	??_dir_alloc,fsr2l
  4836  00475A  C085  FFDA         	movff	??_dir_alloc+1,fsr2h
  4837  00475E  50DF               	movf	indf2,w,c
  4838  004760  A4D8               	btfss	status,2,c
  4839  004762  D00A               	goto	l5088
  4840  004764                     u6490:
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;ff.c: 1215:     if (++n == nent) break;
  4844  004764  4B87               	infsnz	dir_alloc@n& (0+255),f,b
  4845  004766  2B88               	incf	(dir_alloc@n+1)& (0+255),f,b
  4846  004768  5182               	movf	dir_alloc@nent& (0+255),w,b
  4847  00476A  1987               	xorwf	dir_alloc@n& (0+255),w,b
  4848  00476C  E109               	bnz	l5090
  4849  00476E  5183               	movf	(dir_alloc@nent+1)& (0+255),w,b
  4850  004770  1988               	xorwf	(dir_alloc@n+1)& (0+255),w,b
  4851  004772  B4D8               	btfsc	status,2,c
  4852  004774  D014               	goto	u6510
  4853  004776  D004               	goto	l5090
  4854  004778                     l5088:
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;ff.c: 1217:     n = 0;
  4858  004778  0E00               	movlw	0
  4859  00477A  6F88               	movwf	(dir_alloc@n+1)& (0+255),b
  4860  00477C  0E00               	movlw	0
  4861  00477E  6F87               	movwf	dir_alloc@n& (0+255),b
  4862  004780                     l5090:
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;ff.c: 1219:    res = dir_next(dp, 1);
  4866  004780  C080  F06D         	movff	dir_alloc@dp,dir_next@dp
  4867  004784  C081  F06E         	movff	dir_alloc@dp+1,dir_next@dp+1
  4868  004788  0E00               	movlw	0
  4869  00478A  6F70               	movwf	(dir_next@stretch+1)& (0+255),b
  4870  00478C  0E01               	movlw	1
  4871  00478E  6F6F               	movwf	dir_next@stretch& (0+255),b
  4872  004790  EC0C  F014         	call	_dir_next	;wreg free
  4873  004794  0100               	movlb	0	; () banked
  4874  004796  6F89               	movwf	dir_alloc@res& (0+255),b
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;ff.c: 1220:   } while (res == FR_OK);
  4878  004798  5189               	movf	dir_alloc@res& (0+255),w,b
  4879  00479A  B4D8               	btfsc	status,2,c
  4880  00479C  D7A3               	goto	l5074
  4881  00479E                     u6510:
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;ff.c: 1222:  if (res == FR_NO_FILE) res = FR_DENIED;
  4885  00479E  0E04               	movlw	4
  4886  0047A0  1989               	xorwf	dir_alloc@res& (0+255),w,b
  4887  0047A2  A4D8               	btfss	status,2,c
  4888  0047A4  D002               	goto	l456
  4889                           
  4890                           ; BSR set to: 0
  4891  0047A6  0E07               	movlw	7
  4892  0047A8  6F89               	movwf	dir_alloc@res& (0+255),b
  4893  0047AA                     l456:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;ff.c: 1223:  return res;
  4897  0047AA  5189               	movf	dir_alloc@res& (0+255),w,b
  4898                           
  4899                           ; BSR set to: 0
  4900  0047AC  0012               	return		;funcret
  4901  0047AE                     __end_of_dir_alloc:
  4902                           	opt callstack 0
  4903                           
  4904 ;; *************** function _dir_sdi *****************
  4905 ;; Defined at:
  4906 ;;		line 1080 in file "ff.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;  dp              2   85[COMRAM] PTR struct .
  4909 ;;		 -> f_open@dj(22), 
  4910 ;;  idx             2   87[COMRAM] unsigned short 
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  clst            4   13[BANK0 ] unsigned long 
  4913 ;;  sect            4    9[BANK0 ] unsigned long 
  4914 ;;  ic              2    7[BANK0 ] unsigned short 
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      enum E93
  4917 ;; Registers used:
  4918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4924 ;;      Params:         4       0       0       0       0       0       0       0       0
  4925 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4926 ;;      Temps:          0       7       0       0       0       0       0       0       0
  4927 ;;      Totals:         4      17       0       0       0       0       0       0       0
  4928 ;;Total ram usage:       21 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    9
  4931 ;; This function calls:
  4932 ;;		_clust2sect
  4933 ;;		_get_fat
  4934 ;; This function is called by:
  4935 ;;		_dir_alloc
  4936 ;;		_dir_find
  4937 ;;		_follow_path
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text14
  4942  003650                     __ptext14:
  4943                           	opt callstack 0
  4944  003650                     _dir_sdi:
  4945                           	opt callstack 18
  4946                           
  4947                           ;ff.c: 1081:  DIRC* dp,;ff.c: 1082:  UINT idx;ff.c: 1084: {;ff.c: 1085:  DWORD clst, sec
      +                          t;;ff.c: 1086:  UINT ic;;ff.c: 1089:  dp->index = (WORD)idx;
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;incstack = 0
  4951  003650  EE20 F004          	lfsr	2,4
  4952  003654  5056               	movf	dir_sdi@dp,w,c
  4953  003656  26D9               	addwf	fsr2l,f,c
  4954  003658  5057               	movf	dir_sdi@dp+1,w,c
  4955  00365A  22DA               	addwfc	fsr2h,f,c
  4956  00365C  C058  FFDE         	movff	dir_sdi@idx,postinc2
  4957  003660  C059  FFDD         	movff	dir_sdi@idx+1,postdec2
  4958                           
  4959                           ;ff.c: 1090:  clst = dp->sclust;
  4960  003664  EE20 F006          	lfsr	2,6
  4961  003668  5056               	movf	dir_sdi@dp,w,c
  4962  00366A  26D9               	addwf	fsr2l,f,c
  4963  00366C  5057               	movf	dir_sdi@dp+1,w,c
  4964  00366E  22DA               	addwfc	fsr2h,f,c
  4965  003670  CFDE F06D          	movff	postinc2,dir_sdi@clst
  4966  003674  CFDE F06E          	movff	postinc2,dir_sdi@clst+1
  4967  003678  CFDE F06F          	movff	postinc2,dir_sdi@clst+2
  4968  00367C  CFDE F070          	movff	postinc2,dir_sdi@clst+3
  4969                           
  4970                           ;ff.c: 1091:  if (clst == 1 || clst >= dp->fs->n_fatent)
  4971  003680  0100               	movlb	0	; () banked
  4972  003682  056D               	decf	dir_sdi@clst& (0+255),w,b
  4973  003684  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  4974  003686  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  4975  003688  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  4976  00368A  B4D8               	btfsc	status,2,c
  4977  00368C  D014               	goto	u5880
  4978                           
  4979                           ; BSR set to: 0
  4980  00368E  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  4981  003692  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  4982  003696  EE10 F012          	lfsr	1,18
  4983  00369A  50DE               	movf	postinc2,w,c
  4984  00369C  26E1               	addwf	fsr1l,f,c
  4985  00369E  50DD               	movf	postdec2,w,c
  4986  0036A0  22E2               	addwfc	fsr1h,f,c
  4987  0036A2  50E6               	movf	postinc1,w,c
  4988  0036A4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  4989  0036A6  50E6               	movf	postinc1,w,c
  4990  0036A8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  4991  0036AA  50E6               	movf	postinc1,w,c
  4992  0036AC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  4993  0036AE  50E6               	movf	postinc1,w,c
  4994  0036B0  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  4995  0036B2  A0D8               	btfss	status,0,c
  4996  0036B4  D002               	goto	l4752
  4997  0036B6                     u5880:
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;ff.c: 1092:   return FR_INT_ERR;
  5001  0036B6  0E02               	movlw	2
  5002  0036B8  0012               	return	
  5003  0036BA                     l4752:
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;ff.c: 1093:  if (!clst && dp->fs->fs_type == 3)
  5007  0036BA  516D               	movf	dir_sdi@clst& (0+255),w,b
  5008  0036BC  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5009  0036BE  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5010  0036C0  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5011  0036C2  A4D8               	btfss	status,2,c
  5012  0036C4  D022               	goto	l4758
  5013                           
  5014                           ; BSR set to: 0
  5015  0036C6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5016  0036CA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5017  0036CE  CFDE F060          	movff	postinc2,??_dir_sdi
  5018  0036D2  CFDD F061          	movff	postdec2,??_dir_sdi+1
  5019  0036D6  C060  FFD9         	movff	??_dir_sdi,fsr2l
  5020  0036DA  C061  FFDA         	movff	??_dir_sdi+1,fsr2h
  5021  0036DE  0E03               	movlw	3
  5022  0036E0  18DE               	xorwf	postinc2,w,c
  5023  0036E2  A4D8               	btfss	status,2,c
  5024  0036E4  D012               	goto	l4758
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;ff.c: 1094:   clst = dp->fs->dirbase;
  5028  0036E6  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5029  0036EA  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5030  0036EE  EE10 F022          	lfsr	1,34
  5031  0036F2  50DE               	movf	postinc2,w,c
  5032  0036F4  26E1               	addwf	fsr1l,f,c
  5033  0036F6  50DD               	movf	postdec2,w,c
  5034  0036F8  22E2               	addwfc	fsr1h,f,c
  5035  0036FA  CFE6 F06D          	movff	postinc1,dir_sdi@clst
  5036  0036FE  CFE6 F06E          	movff	postinc1,dir_sdi@clst+1
  5037  003702  CFE6 F06F          	movff	postinc1,dir_sdi@clst+2
  5038  003706  CFE6 F070          	movff	postinc1,dir_sdi@clst+3
  5039  00370A                     l4758:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;ff.c: 1096:  if (clst == 0) {
  5043  00370A  516D               	movf	dir_sdi@clst& (0+255),w,b
  5044  00370C  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5045  00370E  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5046  003710  1170               	iorwf	(dir_sdi@clst+3)& (0+255),w,b
  5047  003712  A4D8               	btfss	status,2,c
  5048  003714  D023               	goto	l4768
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;ff.c: 1097:   if (idx >= dp->fs->n_rootdir)
  5052  003716  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5053  00371A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5054  00371E  EE10 F008          	lfsr	1,8
  5055  003722  50DE               	movf	postinc2,w,c
  5056  003724  26E1               	addwf	fsr1l,f,c
  5057  003726  50DD               	movf	postdec2,w,c
  5058  003728  22E2               	addwfc	fsr1h,f,c
  5059  00372A  50E6               	movf	postinc1,w,c
  5060  00372C  5C58               	subwf	dir_sdi@idx,w,c
  5061  00372E  50E6               	movf	postinc1,w,c
  5062  003730  5859               	subwfb	dir_sdi@idx+1,w,c
  5063  003732  B0D8               	btfsc	status,0,c
  5064  003734  D7C0               	goto	u5880
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;ff.c: 1099:   sect = dp->fs->dirbase;
  5068  003736  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5069  00373A  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5070  00373E  EE10 F022          	lfsr	1,34
  5071  003742  50DE               	movf	postinc2,w,c
  5072  003744  26E1               	addwf	fsr1l,f,c
  5073  003746  50DD               	movf	postdec2,w,c
  5074  003748  22E2               	addwfc	fsr1h,f,c
  5075  00374A  CFE6 F069          	movff	postinc1,dir_sdi@sect
  5076  00374E  CFE6 F06A          	movff	postinc1,dir_sdi@sect+1
  5077  003752  CFE6 F06B          	movff	postinc1,dir_sdi@sect+2
  5078  003756  CFE6 F06C          	movff	postinc1,dir_sdi@sect+3
  5079                           
  5080                           ;ff.c: 1100:  }
  5081  00375A  D079               	goto	l4790
  5082  00375C                     l4768:
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;ff.c: 1102:   ic = ((UINT)512) / 32 * dp->fs->csize;
  5086  00375C  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5087  003760  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5088  003764  EE10 F002          	lfsr	1,2
  5089  003768  50DE               	movf	postinc2,w,c
  5090  00376A  26E1               	addwf	fsr1l,f,c
  5091  00376C  50DD               	movf	postdec2,w,c
  5092  00376E  22E2               	addwfc	fsr1h,f,c
  5093  003770  50E7               	movf	indf1,w,c
  5094  003772  6F60               	movwf	??_dir_sdi& (0+255),b
  5095  003774  5160               	movf	??_dir_sdi& (0+255),w,b
  5096  003776  0D10               	mullw	16
  5097  003778  CFF3 F067          	movff	prodl,dir_sdi@ic
  5098  00377C  CFF4 F068          	movff	prodh,dir_sdi@ic+1
  5099                           
  5100                           ;ff.c: 1103:   while (idx >= ic) {
  5101  003780  D046               	goto	l414
  5102  003782                     l4770:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;ff.c: 1104:    clst = get_fat(dp->fs, clst);
  5106  003782  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5107  003786  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5108  00378A  CFDE F03B          	movff	postinc2,get_fat@fs
  5109  00378E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5110  003792  C06D  F03D         	movff	dir_sdi@clst,get_fat@clst
  5111  003796  C06E  F03E         	movff	dir_sdi@clst+1,get_fat@clst+1
  5112  00379A  C06F  F03F         	movff	dir_sdi@clst+2,get_fat@clst+2
  5113  00379E  C070  F040         	movff	dir_sdi@clst+3,get_fat@clst+3
  5114  0037A2  EC0F  F016         	call	_get_fat	;wreg free
  5115  0037A6  C03B  F06D         	movff	?_get_fat,dir_sdi@clst
  5116  0037AA  C03C  F06E         	movff	?_get_fat+1,dir_sdi@clst+1
  5117  0037AE  C03D  F06F         	movff	?_get_fat+2,dir_sdi@clst+2
  5118  0037B2  C03E  F070         	movff	?_get_fat+3,dir_sdi@clst+3
  5119                           
  5120                           ;ff.c: 1105:    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5121  0037B6  0100               	movlb	0	; () banked
  5122  0037B8  296D               	incf	dir_sdi@clst& (0+255),w,b
  5123  0037BA  E109               	bnz	l4778
  5124  0037BC  296E               	incf	(dir_sdi@clst+1)& (0+255),w,b
  5125  0037BE  E107               	bnz	l4778
  5126  0037C0  296F               	incf	(dir_sdi@clst+2)& (0+255),w,b
  5127  0037C2  E105               	bnz	l4778
  5128  0037C4  2970               	incf	(dir_sdi@clst+3)& (0+255),w,b
  5129  0037C6  A4D8               	btfss	status,2,c
  5130  0037C8  D002               	goto	l4778
  5131                           
  5132                           ; BSR set to: 0
  5133  0037CA  0E01               	movlw	1
  5134  0037CC  0012               	return	
  5135  0037CE                     l4778:
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;ff.c: 1106:    if (clst < 2 || clst >= dp->fs->n_fatent)
  5139  0037CE  5170               	movf	(dir_sdi@clst+3)& (0+255),w,b
  5140  0037D0  116F               	iorwf	(dir_sdi@clst+2)& (0+255),w,b
  5141  0037D2  116E               	iorwf	(dir_sdi@clst+1)& (0+255),w,b
  5142  0037D4  E104               	bnz	u5940
  5143  0037D6  0E02               	movlw	2
  5144  0037D8  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5145  0037DA  A0D8               	btfss	status,0,c
  5146  0037DC  D76C               	goto	u5880
  5147  0037DE                     u5940:
  5148                           
  5149                           ; BSR set to: 0
  5150  0037DE  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5151  0037E2  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5152  0037E6  EE10 F012          	lfsr	1,18
  5153  0037EA  50DE               	movf	postinc2,w,c
  5154  0037EC  26E1               	addwf	fsr1l,f,c
  5155  0037EE  50DD               	movf	postdec2,w,c
  5156  0037F0  22E2               	addwfc	fsr1h,f,c
  5157  0037F2  50E6               	movf	postinc1,w,c
  5158  0037F4  5D6D               	subwf	dir_sdi@clst& (0+255),w,b
  5159  0037F6  50E6               	movf	postinc1,w,c
  5160  0037F8  596E               	subwfb	(dir_sdi@clst+1)& (0+255),w,b
  5161  0037FA  50E6               	movf	postinc1,w,c
  5162  0037FC  596F               	subwfb	(dir_sdi@clst+2)& (0+255),w,b
  5163  0037FE  50E6               	movf	postinc1,w,c
  5164  003800  5970               	subwfb	(dir_sdi@clst+3)& (0+255),w,b
  5165  003802  B0D8               	btfsc	status,0,c
  5166  003804  D758               	goto	u5880
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;ff.c: 1108:    idx -= ic;
  5170  003806  5167               	movf	dir_sdi@ic& (0+255),w,b
  5171  003808  5E58               	subwf	dir_sdi@idx,f,c
  5172  00380A  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5173  00380C  5A59               	subwfb	dir_sdi@idx+1,f,c
  5174  00380E                     l414:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;ff.c: 1103:   while (idx >= ic) {
  5178  00380E  5167               	movf	dir_sdi@ic& (0+255),w,b
  5179  003810  5C58               	subwf	dir_sdi@idx,w,c
  5180  003812  5168               	movf	(dir_sdi@ic+1)& (0+255),w,b
  5181  003814  5859               	subwfb	dir_sdi@idx+1,w,c
  5182  003816  B0D8               	btfsc	status,0,c
  5183  003818  D7B4               	goto	l4770
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;ff.c: 1110:   sect = clust2sect(dp->fs, clst);
  5187  00381A  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5188  00381E  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5189  003822  CFDE F00D          	movff	postinc2,clust2sect@fs
  5190  003826  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5191  00382A  C06D  F00F         	movff	dir_sdi@clst,clust2sect@clst
  5192  00382E  C06E  F010         	movff	dir_sdi@clst+1,clust2sect@clst+1
  5193  003832  C06F  F011         	movff	dir_sdi@clst+2,clust2sect@clst+2
  5194  003836  C070  F012         	movff	dir_sdi@clst+3,clust2sect@clst+3
  5195  00383A  ECCD  F026         	call	_clust2sect	;wreg free
  5196  00383E  C00D  F069         	movff	?_clust2sect,dir_sdi@sect
  5197  003842  C00E  F06A         	movff	?_clust2sect+1,dir_sdi@sect+1
  5198  003846  C00F  F06B         	movff	?_clust2sect+2,dir_sdi@sect+2
  5199  00384A  C010  F06C         	movff	?_clust2sect+3,dir_sdi@sect+3
  5200  00384E                     l4790:
  5201                           
  5202                           ;ff.c: 1112:  dp->clust = clst;
  5203  00384E  EE20 F00A          	lfsr	2,10
  5204  003852  5056               	movf	dir_sdi@dp,w,c
  5205  003854  26D9               	addwf	fsr2l,f,c
  5206  003856  5057               	movf	dir_sdi@dp+1,w,c
  5207  003858  22DA               	addwfc	fsr2h,f,c
  5208  00385A  C06D  FFDE         	movff	dir_sdi@clst,postinc2
  5209  00385E  C06E  FFDE         	movff	dir_sdi@clst+1,postinc2
  5210  003862  C06F  FFDE         	movff	dir_sdi@clst+2,postinc2
  5211  003866  C070  FFDE         	movff	dir_sdi@clst+3,postinc2
  5212                           
  5213                           ;ff.c: 1113:  if (!sect) return FR_INT_ERR;
  5214  00386A  0100               	movlb	0	; () banked
  5215  00386C  5169               	movf	dir_sdi@sect& (0+255),w,b
  5216  00386E  116A               	iorwf	(dir_sdi@sect+1)& (0+255),w,b
  5217  003870  116B               	iorwf	(dir_sdi@sect+2)& (0+255),w,b
  5218  003872  116C               	iorwf	(dir_sdi@sect+3)& (0+255),w,b
  5219  003874  B4D8               	btfsc	status,2,c
  5220  003876  D71F               	goto	u5880
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;ff.c: 1114:  dp->sect = sect + idx / (((UINT)512) / 32);
  5224  003878  C058  F060         	movff	dir_sdi@idx,??_dir_sdi
  5225  00387C  C059  F061         	movff	dir_sdi@idx+1,??_dir_sdi+1
  5226  003880  0E04               	movlw	4
  5227  003882  6F62               	movwf	(??_dir_sdi+2)& (0+255),b
  5228  003884                     u5985:
  5229  003884  90D8               	bcf	status,0,c
  5230  003886  3361               	rrcf	(??_dir_sdi+1)& (0+255),f,b
  5231  003888  3360               	rrcf	??_dir_sdi& (0+255),f,b
  5232  00388A  2F62               	decfsz	(??_dir_sdi+2)& (0+255),f,b
  5233  00388C  D7FB               	goto	u5985
  5234  00388E  5160               	movf	??_dir_sdi& (0+255),w,b
  5235  003890  2569               	addwf	dir_sdi@sect& (0+255),w,b
  5236  003892  6F63               	movwf	(??_dir_sdi+3)& (0+255),b
  5237  003894  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5238  003896  216A               	addwfc	(dir_sdi@sect+1)& (0+255),w,b
  5239  003898  6F64               	movwf	(??_dir_sdi+4)& (0+255),b
  5240  00389A  0E00               	movlw	0
  5241  00389C  216B               	addwfc	(dir_sdi@sect+2)& (0+255),w,b
  5242  00389E  6F65               	movwf	(??_dir_sdi+5)& (0+255),b
  5243  0038A0  0E00               	movlw	0
  5244  0038A2  216C               	addwfc	(dir_sdi@sect+3)& (0+255),w,b
  5245  0038A4  6F66               	movwf	(??_dir_sdi+6)& (0+255),b
  5246  0038A6  EE20 F00E          	lfsr	2,14
  5247  0038AA  5056               	movf	dir_sdi@dp,w,c
  5248  0038AC  26D9               	addwf	fsr2l,f,c
  5249  0038AE  5057               	movf	dir_sdi@dp+1,w,c
  5250  0038B0  22DA               	addwfc	fsr2h,f,c
  5251  0038B2  C063  FFDE         	movff	??_dir_sdi+3,postinc2
  5252  0038B6  C064  FFDE         	movff	??_dir_sdi+4,postinc2
  5253  0038BA  C065  FFDE         	movff	??_dir_sdi+5,postinc2
  5254  0038BE  C066  FFDE         	movff	??_dir_sdi+6,postinc2
  5255                           
  5256                           ;ff.c: 1115:  dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;
  5257  0038C2  0E0F               	movlw	15
  5258  0038C4  1458               	andwf	dir_sdi@idx,w,c
  5259  0038C6  6F60               	movwf	??_dir_sdi& (0+255),b
  5260  0038C8  0E00               	movlw	0
  5261  0038CA  1459               	andwf	dir_sdi@idx+1,w,c
  5262  0038CC  6F61               	movwf	(??_dir_sdi+1)& (0+255),b
  5263  0038CE  0E05               	movlw	5
  5264  0038D0                     u5995:
  5265  0038D0  90D8               	bcf	status,0,c
  5266  0038D2  3760               	rlcf	??_dir_sdi& (0+255),f,b
  5267  0038D4  3761               	rlcf	(??_dir_sdi+1)& (0+255),f,b
  5268  0038D6  2EE8               	decfsz	wreg,f,c
  5269  0038D8  D7FB               	goto	u5995
  5270  0038DA  C056  FFD9         	movff	dir_sdi@dp,fsr2l
  5271  0038DE  C057  FFDA         	movff	dir_sdi@dp+1,fsr2h
  5272  0038E2  CFDE F062          	movff	postinc2,??_dir_sdi+2
  5273  0038E6  CFDD F063          	movff	postdec2,??_dir_sdi+3
  5274  0038EA  5160               	movf	??_dir_sdi& (0+255),w,b
  5275  0038EC  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5276  0038EE  5161               	movf	(??_dir_sdi+1)& (0+255),w,b
  5277  0038F0  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5278  0038F2  0E2E               	movlw	46
  5279  0038F4  2762               	addwf	(??_dir_sdi+2)& (0+255),f,b
  5280  0038F6  0E00               	movlw	0
  5281  0038F8  2363               	addwfc	(??_dir_sdi+3)& (0+255),f,b
  5282  0038FA  EE20 F012          	lfsr	2,18
  5283  0038FE  5056               	movf	dir_sdi@dp,w,c
  5284  003900  26D9               	addwf	fsr2l,f,c
  5285  003902  5057               	movf	dir_sdi@dp+1,w,c
  5286  003904  22DA               	addwfc	fsr2h,f,c
  5287  003906  C062  FFDE         	movff	??_dir_sdi+2,postinc2
  5288  00390A  C063  FFDD         	movff	??_dir_sdi+3,postdec2
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;ff.c: 1117:  return FR_OK;
  5292  00390E  0E00               	movlw	0
  5293                           
  5294                           ; BSR set to: 0
  5295  003910  0012               	return		;funcret
  5296  003912                     __end_of_dir_sdi:
  5297                           	opt callstack 0
  5298                           
  5299 ;; *************** function _dir_next *****************
  5300 ;; Defined at:
  5301 ;;		line 1128 in file "ff.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  dp              2   13[BANK0 ] PTR struct .
  5304 ;;		 -> f_open@dj(22), 
  5305 ;;  stretch         2   15[BANK0 ] int 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  clst            4   28[BANK0 ] unsigned long 
  5308 ;;  i               2   26[BANK0 ] unsigned short 
  5309 ;;  c               2   24[BANK0 ] unsigned short 
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      enum E93
  5312 ;; Registers used:
  5313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5319 ;;      Params:         0       4       0       0       0       0       0       0       0
  5320 ;;      Locals:         0       8       0       0       0       0       0       0       0
  5321 ;;      Temps:          0       7       0       0       0       0       0       0       0
  5322 ;;      Totals:         0      19       0       0       0       0       0       0       0
  5323 ;;Total ram usage:       19 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:   10
  5326 ;; This function calls:
  5327 ;;		_clust2sect
  5328 ;;		_create_chain
  5329 ;;		_get_fat
  5330 ;;		_mem_set
  5331 ;;		_sync_window
  5332 ;; This function is called by:
  5333 ;;		_dir_alloc
  5334 ;;		_dir_find
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text15
  5339  002818                     __ptext15:
  5340                           	opt callstack 0
  5341  002818                     _dir_next:
  5342                           	opt callstack 16
  5343                           
  5344                           ;ff.c: 1129:  DIRC* dp,;ff.c: 1130:  int stretch;ff.c: 1132: {;ff.c: 1133:  DWORD clst;;
      +                          ff.c: 1134:  UINT i;;ff.c: 1136:  UINT c;;ff.c: 1140:  i = dp->index + 1;
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;incstack = 0
  5348  002818  0100               	movlb	0	; () banked
  5349  00281A  EE20 F004          	lfsr	2,4
  5350  00281E  516D               	movf	dir_next@dp& (0+255),w,b
  5351  002820  26D9               	addwf	fsr2l,f,c
  5352  002822  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5353  002824  22DA               	addwfc	fsr2h,f,c
  5354  002826  CFDE F071          	movff	postinc2,??_dir_next
  5355  00282A  CFDD F072          	movff	postdec2,??_dir_next+1
  5356  00282E  0E01               	movlw	1
  5357  002830  2571               	addwf	??_dir_next& (0+255),w,b
  5358  002832  6F7A               	movwf	dir_next@i& (0+255),b
  5359  002834  0E00               	movlw	0
  5360  002836  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5361  002838  6F7B               	movwf	(dir_next@i+1)& (0+255),b
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;ff.c: 1141:  if (!(i & 0xFFFF) || !dp->sect)
  5365  00283A  517A               	movf	dir_next@i& (0+255),w,b
  5366  00283C  117B               	iorwf	(dir_next@i+1)& (0+255),w,b
  5367  00283E  B4D8               	btfsc	status,2,c
  5368  002840  D00C               	goto	u6010
  5369                           
  5370                           ; BSR set to: 0
  5371  002842  EE20 F00E          	lfsr	2,14
  5372  002846  516D               	movf	dir_next@dp& (0+255),w,b
  5373  002848  26D9               	addwf	fsr2l,f,c
  5374  00284A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5375  00284C  22DA               	addwfc	fsr2h,f,c
  5376  00284E  50DE               	movf	postinc2,w,c
  5377  002850  10DE               	iorwf	postinc2,w,c
  5378  002852  10DE               	iorwf	postinc2,w,c
  5379  002854  10DE               	iorwf	postinc2,w,c
  5380  002856  A4D8               	btfss	status,2,c
  5381  002858  D002               	goto	l4814
  5382  00285A                     u6010:
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;ff.c: 1142:   return FR_NO_FILE;
  5386  00285A  0E04               	movlw	4
  5387  00285C  0012               	return	
  5388  00285E                     l4814:
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;ff.c: 1144:  if (!(i % (((UINT)512) / 32))) {
  5392  00285E  0E0F               	movlw	15
  5393  002860  157A               	andwf	dir_next@i& (0+255),w,b
  5394  002862  6F71               	movwf	??_dir_next& (0+255),b
  5395  002864  0E00               	movlw	0
  5396  002866  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5397  002868  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5398  00286A  5171               	movf	??_dir_next& (0+255),w,b
  5399  00286C  1172               	iorwf	(??_dir_next+1)& (0+255),w,b
  5400  00286E  A4D8               	btfss	status,2,c
  5401  002870  D1A4               	goto	l4900
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;ff.c: 1145:   dp->sect++;
  5405  002872  EE20 F00E          	lfsr	2,14
  5406  002876  516D               	movf	dir_next@dp& (0+255),w,b
  5407  002878  26D9               	addwf	fsr2l,f,c
  5408  00287A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5409  00287C  22DA               	addwfc	fsr2h,f,c
  5410  00287E  2ADE               	incf	postinc2,f,c
  5411  002880  0E00               	movlw	0
  5412  002882  22DE               	addwfc	postinc2,f,c
  5413  002884  22DE               	addwfc	postinc2,f,c
  5414  002886  22DE               	addwfc	postinc2,f,c
  5415                           
  5416                           ;ff.c: 1147:   if (!dp->clust) {
  5417  002888  EE20 F00A          	lfsr	2,10
  5418  00288C  516D               	movf	dir_next@dp& (0+255),w,b
  5419  00288E  26D9               	addwf	fsr2l,f,c
  5420  002890  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5421  002892  22DA               	addwfc	fsr2h,f,c
  5422  002894  50DE               	movf	postinc2,w,c
  5423  002896  10DE               	iorwf	postinc2,w,c
  5424  002898  10DE               	iorwf	postinc2,w,c
  5425  00289A  10DE               	iorwf	postinc2,w,c
  5426  00289C  A4D8               	btfss	status,2,c
  5427  00289E  D011               	goto	l4824
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;ff.c: 1148:    if (i >= dp->fs->n_rootdir)
  5431  0028A0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5432  0028A4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5433  0028A8  EE10 F008          	lfsr	1,8
  5434  0028AC  50DE               	movf	postinc2,w,c
  5435  0028AE  26E1               	addwf	fsr1l,f,c
  5436  0028B0  50DD               	movf	postdec2,w,c
  5437  0028B2  22E2               	addwfc	fsr1h,f,c
  5438  0028B4  50E6               	movf	postinc1,w,c
  5439  0028B6  5D7A               	subwf	dir_next@i& (0+255),w,b
  5440  0028B8  50E6               	movf	postinc1,w,c
  5441  0028BA  597B               	subwfb	(dir_next@i+1)& (0+255),w,b
  5442  0028BC  B0D8               	btfsc	status,0,c
  5443  0028BE  D7CD               	goto	u6010
  5444  0028C0  D17C               	goto	l4900
  5445  0028C2                     l4824:
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;ff.c: 1152:    if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {
  5449  0028C2  C07A  F071         	movff	dir_next@i,??_dir_next
  5450  0028C6  C07B  F072         	movff	dir_next@i+1,??_dir_next+1
  5451  0028CA  0E04               	movlw	4
  5452  0028CC  6F73               	movwf	(??_dir_next+2)& (0+255),b
  5453  0028CE                     u6055:
  5454  0028CE  90D8               	bcf	status,0,c
  5455  0028D0  3372               	rrcf	(??_dir_next+1)& (0+255),f,b
  5456  0028D2  3371               	rrcf	??_dir_next& (0+255),f,b
  5457  0028D4  2F73               	decfsz	(??_dir_next+2)& (0+255),f,b
  5458  0028D6  D7FB               	goto	u6055
  5459  0028D8  0EFF               	movlw	255
  5460  0028DA  6F74               	movwf	(??_dir_next+3)& (0+255),b
  5461  0028DC  0EFF               	movlw	255
  5462  0028DE  6F75               	movwf	(??_dir_next+4)& (0+255),b
  5463  0028E0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5464  0028E4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5465  0028E8  EE10 F002          	lfsr	1,2
  5466  0028EC  50DE               	movf	postinc2,w,c
  5467  0028EE  26E1               	addwf	fsr1l,f,c
  5468  0028F0  50DD               	movf	postdec2,w,c
  5469  0028F2  22E2               	addwfc	fsr1h,f,c
  5470  0028F4  50E7               	movf	indf1,w,c
  5471  0028F6  6F76               	movwf	(??_dir_next+5)& (0+255),b
  5472  0028F8  6B77               	clrf	(??_dir_next+6)& (0+255),b
  5473  0028FA  5174               	movf	(??_dir_next+3)& (0+255),w,b
  5474  0028FC  2776               	addwf	(??_dir_next+5)& (0+255),f,b
  5475  0028FE  5175               	movf	(??_dir_next+4)& (0+255),w,b
  5476  002900  2377               	addwfc	(??_dir_next+6)& (0+255),f,b
  5477  002902  5171               	movf	??_dir_next& (0+255),w,b
  5478  002904  1776               	andwf	(??_dir_next+5)& (0+255),f,b
  5479  002906  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5480  002908  1777               	andwf	(??_dir_next+6)& (0+255),f,b
  5481  00290A  5176               	movf	(??_dir_next+5)& (0+255),w,b
  5482  00290C  1177               	iorwf	(??_dir_next+6)& (0+255),w,b
  5483  00290E  A4D8               	btfss	status,2,c
  5484  002910  D154               	goto	l4900
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;ff.c: 1153:     clst = get_fat(dp->fs, dp->clust);
  5488  002912  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5489  002916  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5490  00291A  CFDE F03B          	movff	postinc2,get_fat@fs
  5491  00291E  CFDD F03C          	movff	postdec2,get_fat@fs+1
  5492  002922  EE20 F00A          	lfsr	2,10
  5493  002926  516D               	movf	dir_next@dp& (0+255),w,b
  5494  002928  26D9               	addwf	fsr2l,f,c
  5495  00292A  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5496  00292C  22DA               	addwfc	fsr2h,f,c
  5497  00292E  CFDE F03D          	movff	postinc2,get_fat@clst
  5498  002932  CFDE F03E          	movff	postinc2,get_fat@clst+1
  5499  002936  CFDE F03F          	movff	postinc2,get_fat@clst+2
  5500  00293A  CFDE F040          	movff	postinc2,get_fat@clst+3
  5501  00293E  EC0F  F016         	call	_get_fat	;wreg free
  5502  002942  C03B  F07C         	movff	?_get_fat,dir_next@clst
  5503  002946  C03C  F07D         	movff	?_get_fat+1,dir_next@clst+1
  5504  00294A  C03D  F07E         	movff	?_get_fat+2,dir_next@clst+2
  5505  00294E  C03E  F07F         	movff	?_get_fat+3,dir_next@clst+3
  5506                           
  5507                           ;ff.c: 1154:     if (clst <= 1) return FR_INT_ERR;
  5508  002952  0100               	movlb	0	; () banked
  5509  002954  517F               	movf	(dir_next@clst+3)& (0+255),w,b
  5510  002956  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5511  002958  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5512  00295A  E106               	bnz	l4834
  5513  00295C  0E02               	movlw	2
  5514  00295E  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5515  002960  B0D8               	btfsc	status,0,c
  5516  002962  D002               	goto	l4834
  5517  002964                     u6070:
  5518                           
  5519                           ; BSR set to: 0
  5520  002964  0E02               	movlw	2
  5521  002966  0012               	return	
  5522  002968                     l4834:
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;ff.c: 1155:     if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5526  002968  297C               	incf	dir_next@clst& (0+255),w,b
  5527  00296A  E109               	bnz	l4840
  5528  00296C  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5529  00296E  E107               	bnz	l4840
  5530  002970  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5531  002972  E105               	bnz	l4840
  5532  002974  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5533  002976  A4D8               	btfss	status,2,c
  5534  002978  D002               	goto	l4840
  5535  00297A                     u6080:
  5536  00297A  0E01               	movlw	1
  5537  00297C  0012               	return	
  5538  00297E                     l4840:
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;ff.c: 1156:     if (clst >= dp->fs->n_fatent) {
  5542  00297E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5543  002982  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5544  002986  EE10 F012          	lfsr	1,18
  5545  00298A  50DE               	movf	postinc2,w,c
  5546  00298C  26E1               	addwf	fsr1l,f,c
  5547  00298E  50DD               	movf	postdec2,w,c
  5548  002990  22E2               	addwfc	fsr1h,f,c
  5549  002992  50E6               	movf	postinc1,w,c
  5550  002994  5D7C               	subwf	dir_next@clst& (0+255),w,b
  5551  002996  50E6               	movf	postinc1,w,c
  5552  002998  597D               	subwfb	(dir_next@clst+1)& (0+255),w,b
  5553  00299A  50E6               	movf	postinc1,w,c
  5554  00299C  597E               	subwfb	(dir_next@clst+2)& (0+255),w,b
  5555  00299E  50E6               	movf	postinc1,w,c
  5556  0029A0  597F               	subwfb	(dir_next@clst+3)& (0+255),w,b
  5557  0029A2  A0D8               	btfss	status,0,c
  5558  0029A4  D0DB               	goto	l4896
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;ff.c: 1158:      if (!stretch) return FR_NO_FILE;
  5562  0029A6  516F               	movf	dir_next@stretch& (0+255),w,b
  5563  0029A8  1170               	iorwf	(dir_next@stretch+1)& (0+255),w,b
  5564  0029AA  B4D8               	btfsc	status,2,c
  5565  0029AC  D756               	goto	u6010
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;ff.c: 1159:      clst = create_chain(dp->fs, dp->clust);
  5569  0029AE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5570  0029B2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5571  0029B6  CFDE F056          	movff	postinc2,create_chain@fs
  5572  0029BA  CFDD F057          	movff	postdec2,create_chain@fs+1
  5573  0029BE  EE20 F00A          	lfsr	2,10
  5574  0029C2  516D               	movf	dir_next@dp& (0+255),w,b
  5575  0029C4  26D9               	addwf	fsr2l,f,c
  5576  0029C6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5577  0029C8  22DA               	addwfc	fsr2h,f,c
  5578  0029CA  CFDE F058          	movff	postinc2,create_chain@clst
  5579  0029CE  CFDE F059          	movff	postinc2,create_chain@clst+1
  5580  0029D2  CFDE F05A          	movff	postinc2,create_chain@clst+2
  5581  0029D6  CFDE F05B          	movff	postinc2,create_chain@clst+3
  5582  0029DA  ECAB  F019         	call	_create_chain	;wreg free
  5583  0029DE  C056  F07C         	movff	?_create_chain,dir_next@clst
  5584  0029E2  C057  F07D         	movff	?_create_chain+1,dir_next@clst+1
  5585  0029E6  C058  F07E         	movff	?_create_chain+2,dir_next@clst+2
  5586  0029EA  C059  F07F         	movff	?_create_chain+3,dir_next@clst+3
  5587                           
  5588                           ;ff.c: 1160:      if (clst == 0) return FR_DENIED;
  5589  0029EE  0100               	movlb	0	; () banked
  5590  0029F0  517C               	movf	dir_next@clst& (0+255),w,b
  5591  0029F2  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5592  0029F4  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5593  0029F6  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5594  0029F8  A4D8               	btfss	status,2,c
  5595  0029FA  D002               	goto	l4856
  5596                           
  5597                           ; BSR set to: 0
  5598  0029FC  0E07               	movlw	7
  5599  0029FE  0012               	return	
  5600  002A00                     l4856:
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;ff.c: 1161:      if (clst == 1) return FR_INT_ERR;
  5604  002A00  057C               	decf	dir_next@clst& (0+255),w,b
  5605  002A02  117D               	iorwf	(dir_next@clst+1)& (0+255),w,b
  5606  002A04  117E               	iorwf	(dir_next@clst+2)& (0+255),w,b
  5607  002A06  117F               	iorwf	(dir_next@clst+3)& (0+255),w,b
  5608  002A08  B4D8               	btfsc	status,2,c
  5609  002A0A  D7AC               	goto	u6070
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;ff.c: 1162:      if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  5613  002A0C  297C               	incf	dir_next@clst& (0+255),w,b
  5614  002A0E  E107               	bnz	l4868
  5615  002A10  297D               	incf	(dir_next@clst+1)& (0+255),w,b
  5616  002A12  E105               	bnz	l4868
  5617  002A14  297E               	incf	(dir_next@clst+2)& (0+255),w,b
  5618  002A16  E103               	bnz	l4868
  5619  002A18  297F               	incf	(dir_next@clst+3)& (0+255),w,b
  5620  002A1A  B4D8               	btfsc	status,2,c
  5621  002A1C  D7AE               	goto	u6080
  5622  002A1E                     l4868:
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;ff.c: 1164:      if (sync_window(dp->fs)) return FR_DISK_ERR;
  5626  002A1E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5627  002A22  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5628  002A26  CFDE F01B          	movff	postinc2,sync_window@fs
  5629  002A2A  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5630  002A2E  ECA0  F01F         	call	_sync_window	;wreg free
  5631  002A32  0900               	iorlw	0
  5632  002A34  A4D8               	btfss	status,2,c
  5633  002A36  D7A1               	goto	u6080
  5634                           
  5635                           ;ff.c: 1165:      mem_set(dp->fs->win, 0, ((UINT)512));
  5636  002A38  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5637  002A3C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5638  002A40  CFDE F071          	movff	postinc2,??_dir_next
  5639  002A44  CFDD F072          	movff	postdec2,??_dir_next+1
  5640  002A48  0E2E               	movlw	46
  5641  002A4A  0100               	movlb	0	; () banked
  5642  002A4C  2571               	addwf	??_dir_next& (0+255),w,b
  5643  002A4E  6E01               	movwf	mem_set@dst,c
  5644  002A50  0E00               	movlw	0
  5645  002A52  2172               	addwfc	(??_dir_next+1)& (0+255),w,b
  5646  002A54  6E02               	movwf	mem_set@dst+1,c
  5647  002A56  0E00               	movlw	0
  5648  002A58  6E04               	movwf	mem_set@val+1,c
  5649  002A5A  0E00               	movlw	0
  5650  002A5C  6E03               	movwf	mem_set@val,c
  5651  002A5E  0E02               	movlw	2
  5652  002A60  6E06               	movwf	mem_set@cnt+1,c
  5653  002A62  0E00               	movlw	0
  5654  002A64  6E05               	movwf	mem_set@cnt,c
  5655  002A66  ECAD  F02A         	call	_mem_set	;wreg free
  5656                           
  5657                           ;ff.c: 1166:      dp->fs->winsect = clust2sect(dp->fs, clst);
  5658  002A6A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5659  002A6E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5660  002A72  CFDE F00D          	movff	postinc2,clust2sect@fs
  5661  002A76  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5662  002A7A  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5663  002A7E  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5664  002A82  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5665  002A86  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5666  002A8A  ECCD  F026         	call	_clust2sect	;wreg free
  5667  002A8E  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5668  002A92  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5669  002A96  EE10 F02A          	lfsr	1,42
  5670  002A9A  50DE               	movf	postinc2,w,c
  5671  002A9C  26E1               	addwf	fsr1l,f,c
  5672  002A9E  50DD               	movf	postdec2,w,c
  5673  002AA0  22E2               	addwfc	fsr1h,f,c
  5674  002AA2  C00D  FFE6         	movff	?_clust2sect,postinc1
  5675  002AA6  C00E  FFE6         	movff	?_clust2sect+1,postinc1
  5676  002AAA  C00F  FFE6         	movff	?_clust2sect+2,postinc1
  5677  002AAE  C010  FFE6         	movff	?_clust2sect+3,postinc1
  5678                           
  5679                           ;ff.c: 1167:      for (c = 0; c < dp->fs->csize; c++) {
  5680  002AB2  0E00               	movlw	0
  5681  002AB4  0100               	movlb	0	; () banked
  5682  002AB6  6F79               	movwf	(dir_next@c+1)& (0+255),b
  5683  002AB8  0E00               	movlw	0
  5684  002ABA  6F78               	movwf	dir_next@c& (0+255),b
  5685  002ABC  D02B               	goto	l4892
  5686  002ABE                     l4880:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;ff.c: 1168:       dp->fs->wflag = 1;
  5690  002ABE  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5691  002AC2  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5692  002AC6  EE10 F004          	lfsr	1,4
  5693  002ACA  50DE               	movf	postinc2,w,c
  5694  002ACC  26E1               	addwf	fsr1l,f,c
  5695  002ACE  50DD               	movf	postdec2,w,c
  5696  002AD0  22E2               	addwfc	fsr1h,f,c
  5697  002AD2  0E01               	movlw	1
  5698  002AD4  6EE7               	movwf	indf1,c
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;ff.c: 1169:       if (sync_window(dp->fs)) return FR_DISK_ERR;
  5702  002AD6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5703  002ADA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5704  002ADE  CFDE F01B          	movff	postinc2,sync_window@fs
  5705  002AE2  CFDD F01C          	movff	postdec2,sync_window@fs+1
  5706  002AE6  ECA0  F01F         	call	_sync_window	;wreg free
  5707  002AEA  0900               	iorlw	0
  5708  002AEC  A4D8               	btfss	status,2,c
  5709  002AEE  D745               	goto	u6080
  5710                           
  5711                           ;ff.c: 1170:       dp->fs->winsect++;
  5712  002AF0  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5713  002AF4  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5714  002AF8  EE10 F02A          	lfsr	1,42
  5715  002AFC  50DE               	movf	postinc2,w,c
  5716  002AFE  26E1               	addwf	fsr1l,f,c
  5717  002B00  50DD               	movf	postdec2,w,c
  5718  002B02  22E2               	addwfc	fsr1h,f,c
  5719  002B04  2AE6               	incf	postinc1,f,c
  5720  002B06  0E00               	movlw	0
  5721  002B08  22E6               	addwfc	postinc1,f,c
  5722  002B0A  22E6               	addwfc	postinc1,f,c
  5723  002B0C  22E6               	addwfc	postinc1,f,c
  5724                           
  5725                           ;ff.c: 1171:      }
  5726  002B0E  0100               	movlb	0	; () banked
  5727  002B10  4B78               	infsnz	dir_next@c& (0+255),f,b
  5728  002B12  2B79               	incf	(dir_next@c+1)& (0+255),f,b
  5729  002B14                     l4892:
  5730                           
  5731                           ; BSR set to: 0
  5732  002B14  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5733  002B18  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5734  002B1C  EE10 F002          	lfsr	1,2
  5735  002B20  50DE               	movf	postinc2,w,c
  5736  002B22  26E1               	addwf	fsr1l,f,c
  5737  002B24  50DD               	movf	postdec2,w,c
  5738  002B26  22E2               	addwfc	fsr1h,f,c
  5739  002B28  50E7               	movf	indf1,w,c
  5740  002B2A  6F71               	movwf	??_dir_next& (0+255),b
  5741  002B2C  6B72               	clrf	(??_dir_next+1)& (0+255),b
  5742  002B2E  5171               	movf	??_dir_next& (0+255),w,b
  5743  002B30  5D78               	subwf	dir_next@c& (0+255),w,b
  5744  002B32  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5745  002B34  5979               	subwfb	(dir_next@c+1)& (0+255),w,b
  5746  002B36  A0D8               	btfss	status,0,c
  5747  002B38  D7C2               	goto	l4880
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;ff.c: 1172:      dp->fs->winsect -= c;
  5751  002B3A  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5752  002B3E  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5753  002B42  EE10 F02A          	lfsr	1,42
  5754  002B46  50DE               	movf	postinc2,w,c
  5755  002B48  26E1               	addwf	fsr1l,f,c
  5756  002B4A  50DD               	movf	postdec2,w,c
  5757  002B4C  22E2               	addwfc	fsr1h,f,c
  5758  002B4E  5178               	movf	dir_next@c& (0+255),w,b
  5759  002B50  5EE6               	subwf	postinc1,f,c
  5760  002B52  5179               	movf	(dir_next@c+1)& (0+255),w,b
  5761  002B54  5AE6               	subwfb	postinc1,f,c
  5762  002B56  0E00               	movlw	0
  5763  002B58  5AE6               	subwfb	postinc1,f,c
  5764  002B5A  5AE6               	subwfb	postinc1,f,c
  5765  002B5C                     l4896:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;ff.c: 1178:     dp->clust = clst;
  5769  002B5C  EE20 F00A          	lfsr	2,10
  5770  002B60  516D               	movf	dir_next@dp& (0+255),w,b
  5771  002B62  26D9               	addwf	fsr2l,f,c
  5772  002B64  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5773  002B66  22DA               	addwfc	fsr2h,f,c
  5774  002B68  C07C  FFDE         	movff	dir_next@clst,postinc2
  5775  002B6C  C07D  FFDE         	movff	dir_next@clst+1,postinc2
  5776  002B70  C07E  FFDE         	movff	dir_next@clst+2,postinc2
  5777  002B74  C07F  FFDE         	movff	dir_next@clst+3,postinc2
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;ff.c: 1179:     dp->sect = clust2sect(dp->fs, clst);
  5781  002B78  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5782  002B7C  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5783  002B80  CFDE F00D          	movff	postinc2,clust2sect@fs
  5784  002B84  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  5785  002B88  C07C  F00F         	movff	dir_next@clst,clust2sect@clst
  5786  002B8C  C07D  F010         	movff	dir_next@clst+1,clust2sect@clst+1
  5787  002B90  C07E  F011         	movff	dir_next@clst+2,clust2sect@clst+2
  5788  002B94  C07F  F012         	movff	dir_next@clst+3,clust2sect@clst+3
  5789  002B98  ECCD  F026         	call	_clust2sect	;wreg free
  5790  002B9C  0100               	movlb	0	; () banked
  5791  002B9E  EE20 F00E          	lfsr	2,14
  5792  002BA2  516D               	movf	dir_next@dp& (0+255),w,b
  5793  002BA4  26D9               	addwf	fsr2l,f,c
  5794  002BA6  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5795  002BA8  22DA               	addwfc	fsr2h,f,c
  5796  002BAA  C00D  FFDE         	movff	?_clust2sect,postinc2
  5797  002BAE  C00E  FFDE         	movff	?_clust2sect+1,postinc2
  5798  002BB2  C00F  FFDE         	movff	?_clust2sect+2,postinc2
  5799  002BB6  C010  FFDE         	movff	?_clust2sect+3,postinc2
  5800  002BBA                     l4900:
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;ff.c: 1184:  dp->index = (WORD)i;
  5804  002BBA  EE20 F004          	lfsr	2,4
  5805  002BBE  516D               	movf	dir_next@dp& (0+255),w,b
  5806  002BC0  26D9               	addwf	fsr2l,f,c
  5807  002BC2  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5808  002BC4  22DA               	addwfc	fsr2h,f,c
  5809  002BC6  C07A  FFDE         	movff	dir_next@i,postinc2
  5810  002BCA  C07B  FFDD         	movff	dir_next@i+1,postdec2
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;ff.c: 1185:  dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;
  5814  002BCE  0E0F               	movlw	15
  5815  002BD0  157A               	andwf	dir_next@i& (0+255),w,b
  5816  002BD2  6F71               	movwf	??_dir_next& (0+255),b
  5817  002BD4  0E00               	movlw	0
  5818  002BD6  157B               	andwf	(dir_next@i+1)& (0+255),w,b
  5819  002BD8  6F72               	movwf	(??_dir_next+1)& (0+255),b
  5820  002BDA  0E05               	movlw	5
  5821  002BDC                     u6175:
  5822  002BDC  90D8               	bcf	status,0,c
  5823  002BDE  3771               	rlcf	??_dir_next& (0+255),f,b
  5824  002BE0  3772               	rlcf	(??_dir_next+1)& (0+255),f,b
  5825  002BE2  2EE8               	decfsz	wreg,f,c
  5826  002BE4  D7FB               	goto	u6175
  5827  002BE6  C06D  FFD9         	movff	dir_next@dp,fsr2l
  5828  002BEA  C06E  FFDA         	movff	dir_next@dp+1,fsr2h
  5829  002BEE  CFDE F073          	movff	postinc2,??_dir_next+2
  5830  002BF2  CFDD F074          	movff	postdec2,??_dir_next+3
  5831  002BF6  5171               	movf	??_dir_next& (0+255),w,b
  5832  002BF8  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5833  002BFA  5172               	movf	(??_dir_next+1)& (0+255),w,b
  5834  002BFC  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5835  002BFE  0E2E               	movlw	46
  5836  002C00  2773               	addwf	(??_dir_next+2)& (0+255),f,b
  5837  002C02  0E00               	movlw	0
  5838  002C04  2374               	addwfc	(??_dir_next+3)& (0+255),f,b
  5839  002C06  EE20 F012          	lfsr	2,18
  5840  002C0A  516D               	movf	dir_next@dp& (0+255),w,b
  5841  002C0C  26D9               	addwf	fsr2l,f,c
  5842  002C0E  516E               	movf	(dir_next@dp+1)& (0+255),w,b
  5843  002C10  22DA               	addwfc	fsr2h,f,c
  5844  002C12  C073  FFDE         	movff	??_dir_next+2,postinc2
  5845  002C16  C074  FFDD         	movff	??_dir_next+3,postdec2
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;ff.c: 1187:  return FR_OK;
  5849  002C1A  0E00               	movlw	0
  5850  002C1C  0012               	return		;funcret
  5851  002C1E                     __end_of_dir_next:
  5852                           	opt callstack 0
  5853                           
  5854 ;; *************** function _f_mount *****************
  5855 ;; Defined at:
  5856 ;;		line 2402 in file "ff.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  fs              2   81[COMRAM] PTR struct .
  5859 ;;		 -> NULL(0), FatFs(558), 
  5860 ;;  path            2   83[COMRAM] PTR const unsigned char 
  5861 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5862 ;;  opt             1   85[COMRAM] unsigned char 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;  vol             2   91[COMRAM] int 
  5865 ;;  rp              2   89[COMRAM] PTR const unsigned char 
  5866 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  5867 ;;  cfs             2   87[COMRAM] PTR struct .
  5868 ;;		 -> NULL(0), FatFs(558), 
  5869 ;;  res             1   86[COMRAM] enum E93
  5870 ;; Return value:  Size  Location     Type
  5871 ;;                  1    wreg      enum E4918
  5872 ;; Registers used:
  5873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5879 ;;      Params:         5       0       0       0       0       0       0       0       0
  5880 ;;      Locals:         7       0       0       0       0       0       0       0       0
  5881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5882 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5883 ;;Total ram usage:       12 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:   10
  5886 ;; This function calls:
  5887 ;;		_find_volume
  5888 ;;		_get_ldnumber
  5889 ;; This function is called by:
  5890 ;;		_guardar
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text16
  5895  004E54                     __ptext16:
  5896                           	opt callstack 0
  5897  004E54                     _f_mount:
  5898                           	opt callstack 19
  5899                           
  5900                           ;ff.c: 2403:  FATFS* fs,;ff.c: 2404:  const TCHAR* path,;ff.c: 2405:  BYTE opt;ff.c: 240
      +                          7: {;ff.c: 2408:  FATFS *cfs;;ff.c: 2409:  int vol;;ff.c: 2410:  FRESULT res;;ff.c: 2411
      +                          :  const TCHAR *rp = path;
  5901                           
  5902                           ;incstack = 0
  5903  004E54  C054  F05A         	movff	f_mount@path,f_mount@rp
  5904  004E58  C055  F05B         	movff	f_mount@path+1,f_mount@rp+1
  5905                           
  5906                           ;ff.c: 2414:  vol = get_ldnumber(&rp);
  5907  004E5C  0E5A               	movlw	low f_mount@rp
  5908  004E5E  6E01               	movwf	get_ldnumber@path,c
  5909  004E60  0E00               	movlw	high f_mount@rp
  5910  004E62  6E02               	movwf	get_ldnumber@path+1,c
  5911  004E64  ECC3  F024         	call	_get_ldnumber	;wreg free
  5912  004E68  C001  F05C         	movff	?_get_ldnumber,f_mount@vol
  5913  004E6C  C002  F05D         	movff	?_get_ldnumber+1,f_mount@vol+1
  5914                           
  5915                           ;ff.c: 2415:  if (vol < 0) return FR_INVALID_DRIVE;
  5916  004E70  AE5D               	btfss	f_mount@vol+1,7,c
  5917  004E72  D002               	goto	l5918
  5918  004E74  0E0B               	movlw	11
  5919  004E76  0012               	return	
  5920  004E78                     l5918:
  5921                           
  5922                           ;ff.c: 2416:  cfs = FatFs[vol];
  5923  004E78  90D8               	bcf	status,0,c
  5924  004E7A  345C               	rlcf	f_mount@vol,w,c
  5925  004E7C  6ED9               	movwf	fsr2l,c
  5926  004E7E  345D               	rlcf	f_mount@vol+1,w,c
  5927  004E80  6EDA               	movwf	fsr2h,c
  5928  004E82  0ED6               	movlw	low ff@FatFs
  5929  004E84  26D9               	addwf	fsr2l,f,c
  5930  004E86  0E00               	movlw	high ff@FatFs
  5931  004E88  22DA               	addwfc	fsr2h,f,c
  5932  004E8A  CFDE F058          	movff	postinc2,f_mount@cfs
  5933  004E8E  CFDD F059          	movff	postdec2,f_mount@cfs+1
  5934                           
  5935                           ;ff.c: 2418:  if (cfs) {
  5936  004E92  5058               	movf	f_mount@cfs,w,c
  5937  004E94  1059               	iorwf	f_mount@cfs+1,w,c
  5938  004E96  B4D8               	btfsc	status,2,c
  5939  004E98  D006               	goto	l5924
  5940                           
  5941                           ;ff.c: 2425:   cfs->fs_type = 0;
  5942  004E9A  C058  FFD9         	movff	f_mount@cfs,fsr2l
  5943  004E9E  C059  FFDA         	movff	f_mount@cfs+1,fsr2h
  5944  004EA2  0E00               	movlw	0
  5945  004EA4  6EDF               	movwf	indf2,c
  5946  004EA6                     l5924:
  5947                           
  5948                           ;ff.c: 2428:  if (fs) {
  5949  004EA6  5052               	movf	f_mount@fs,w,c
  5950  004EA8  1053               	iorwf	f_mount@fs+1,w,c
  5951  004EAA  B4D8               	btfsc	status,2,c
  5952  004EAC  D006               	goto	l5928
  5953                           
  5954                           ;ff.c: 2429:   fs->fs_type = 0;
  5955  004EAE  C052  FFD9         	movff	f_mount@fs,fsr2l
  5956  004EB2  C053  FFDA         	movff	f_mount@fs+1,fsr2h
  5957  004EB6  0E00               	movlw	0
  5958  004EB8  6EDF               	movwf	indf2,c
  5959  004EBA                     l5928:
  5960                           
  5961                           ;ff.c: 2434:  FatFs[vol] = fs;
  5962  004EBA  90D8               	bcf	status,0,c
  5963  004EBC  345C               	rlcf	f_mount@vol,w,c
  5964  004EBE  6ED9               	movwf	fsr2l,c
  5965  004EC0  345D               	rlcf	f_mount@vol+1,w,c
  5966  004EC2  6EDA               	movwf	fsr2h,c
  5967  004EC4  0ED6               	movlw	low ff@FatFs
  5968  004EC6  26D9               	addwf	fsr2l,f,c
  5969  004EC8  0E00               	movlw	high ff@FatFs
  5970  004ECA  22DA               	addwfc	fsr2h,f,c
  5971  004ECC  C052  FFDE         	movff	f_mount@fs,postinc2
  5972  004ED0  C053  FFDD         	movff	f_mount@fs+1,postdec2
  5973                           
  5974                           ;ff.c: 2436:  if (!fs || opt != 1) return FR_OK;
  5975  004ED4  5052               	movf	f_mount@fs,w,c
  5976  004ED6  1053               	iorwf	f_mount@fs+1,w,c
  5977  004ED8  B4D8               	btfsc	status,2,c
  5978  004EDA  D003               	goto	u7900
  5979  004EDC  0456               	decf	f_mount@opt,w,c
  5980  004EDE  B4D8               	btfsc	status,2,c
  5981  004EE0  D002               	goto	l5938
  5982  004EE2                     u7900:
  5983  004EE2  0E00               	movlw	0
  5984  004EE4  0012               	return	
  5985  004EE6                     l5938:
  5986                           
  5987                           ;ff.c: 2438:  res = find_volume(&fs, &path, 0);
  5988  004EE6  0E52               	movlw	low f_mount@fs
  5989  004EE8  6E45               	movwf	find_volume@rfs,c
  5990  004EEA  0E00               	movlw	high f_mount@fs
  5991  004EEC  6E46               	movwf	find_volume@rfs+1,c
  5992  004EEE  0E54               	movlw	low f_mount@path
  5993  004EF0  6E47               	movwf	find_volume@path,c
  5994  004EF2  0E00               	movlw	high f_mount@path
  5995  004EF4  6E48               	movwf	find_volume@path+1,c
  5996  004EF6  0E00               	movlw	0
  5997  004EF8  6E49               	movwf	find_volume@wmode,c
  5998  004EFA  EC18  F004         	call	_find_volume	;wreg free
  5999  004EFE  6E57               	movwf	f_mount@res,c
  6000                           
  6001                           ;ff.c: 2439:  return res;
  6002  004F00  5057               	movf	f_mount@res,w,c
  6003  004F02  0012               	return		;funcret
  6004  004F04                     __end_of_f_mount:
  6005                           	opt callstack 0
  6006                           
  6007 ;; *************** function _find_volume *****************
  6008 ;; Defined at:
  6009 ;;		line 2203 in file "ff.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  rfs             2   68[COMRAM] PTR PTR struct .
  6012 ;;		 -> f_open@dj(22), f_mount@fs(2), 
  6013 ;;  path            2   70[COMRAM] PTR PTR const unsigned c
  6014 ;;		 -> f_open@path(2), f_mount@path(2), 
  6015 ;;  wmode           1   72[COMRAM] unsigned char 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  br             16    0[BANK0 ] unsigned long [4]
  6018 ;;  bsect           4   49[BANK0 ] unsigned long 
  6019 ;;  fasize          4   45[BANK0 ] unsigned long 
  6020 ;;  nclst           4   40[BANK0 ] unsigned long 
  6021 ;;  tsect           4   36[BANK0 ] unsigned long 
  6022 ;;  sysect          4   28[BANK0 ] unsigned long 
  6023 ;;  szbfat          4   22[BANK0 ] unsigned long 
  6024 ;;  fs              2   56[BANK0 ] PTR struct .
  6025 ;;		 -> NULL(0), FatFs(558), 
  6026 ;;  i               2   53[BANK0 ] unsigned short 
  6027 ;;  nrsv            2   34[BANK0 ] unsigned short 
  6028 ;;  vol             2   32[BANK0 ] int 
  6029 ;;  pt              2   26[BANK0 ] PTR unsigned char 
  6030 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  6031 ;;  fmt             1   55[BANK0 ] unsigned char 
  6032 ;;  stat            1   44[BANK0 ] unsigned char 
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  1    wreg      enum E93
  6035 ;; Registers used:
  6036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6042 ;;      Params:         5       0       0       0       0       0       0       0       0
  6043 ;;      Locals:         0      58       0       0       0       0       0       0       0
  6044 ;;      Temps:          8       0       0       0       0       0       0       0       0
  6045 ;;      Totals:        13      58       0       0       0       0       0       0       0
  6046 ;;Total ram usage:       71 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    9
  6049 ;; This function calls:
  6050 ;;		___lldiv
  6051 ;;		___lmul
  6052 ;;		_check_fs
  6053 ;;		_disk_initialize
  6054 ;;		_disk_status
  6055 ;;		_get_ldnumber
  6056 ;;		_move_window
  6057 ;; This function is called by:
  6058 ;;		_f_mount
  6059 ;;		_f_open
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text17
  6064  000830                     __ptext17:
  6065                           	opt callstack 0
  6066  000830                     _find_volume:
  6067                           	opt callstack 19
  6068                           
  6069                           ;ff.c: 2204:  FATFS** rfs,;ff.c: 2205:  const TCHAR** path,;ff.c: 2206:  BYTE wmode;ff.c
      +                          : 2208: {;ff.c: 2209:  BYTE fmt, *pt;;ff.c: 2210:  int vol;;ff.c: 2211:  DSTATUS stat;;f
      +                          f.c: 2212:  DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];;ff.c: 2213:  WORD 
      +                          nrsv;;ff.c: 2214:  FATFS *fs;;ff.c: 2215:  UINT i;;ff.c: 2219:  *rfs = 0;
  6070                           
  6071                           ;incstack = 0
  6072  000830  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6073  000834  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6074  000838  0E00               	movlw	0
  6075  00083A  6EDE               	movwf	postinc2,c
  6076  00083C  0E00               	movlw	0
  6077  00083E  6EDD               	movwf	postdec2,c
  6078                           
  6079                           ;ff.c: 2220:  vol = get_ldnumber(path);
  6080  000840  C047  F001         	movff	find_volume@path,get_ldnumber@path
  6081  000844  C048  F002         	movff	find_volume@path+1,get_ldnumber@path+1
  6082  000848  ECC3  F024         	call	_get_ldnumber	;wreg free
  6083  00084C  C001  F080         	movff	?_get_ldnumber,find_volume@vol
  6084  000850  C002  F081         	movff	?_get_ldnumber+1,find_volume@vol+1
  6085                           
  6086                           ;ff.c: 2221:  if (vol < 0) return FR_INVALID_DRIVE;
  6087  000854  0100               	movlb	0	; () banked
  6088  000856  AF81               	btfss	(find_volume@vol+1)& (0+255),7,b
  6089  000858  D002               	goto	l5516
  6090                           
  6091                           ; BSR set to: 0
  6092  00085A  0E0B               	movlw	11
  6093  00085C  0012               	return	
  6094  00085E                     l5516:
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;ff.c: 2224:  fs = FatFs[vol];
  6098  00085E  90D8               	bcf	status,0,c
  6099  000860  3580               	rlcf	find_volume@vol& (0+255),w,b
  6100  000862  6ED9               	movwf	fsr2l,c
  6101  000864  3581               	rlcf	(find_volume@vol+1)& (0+255),w,b
  6102  000866  6EDA               	movwf	fsr2h,c
  6103  000868  0ED6               	movlw	low ff@FatFs
  6104  00086A  26D9               	addwf	fsr2l,f,c
  6105  00086C  0E00               	movlw	high ff@FatFs
  6106  00086E  22DA               	addwfc	fsr2h,f,c
  6107  000870  CFDE F098          	movff	postinc2,find_volume@fs
  6108  000874  CFDD F099          	movff	postdec2,find_volume@fs+1
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;ff.c: 2225:  if (!fs) return FR_NOT_ENABLED;
  6112  000878  5198               	movf	find_volume@fs& (0+255),w,b
  6113  00087A  1199               	iorwf	(find_volume@fs+1)& (0+255),w,b
  6114  00087C  A4D8               	btfss	status,2,c
  6115  00087E  D002               	goto	l5524
  6116                           
  6117                           ; BSR set to: 0
  6118  000880  0E0C               	movlw	12
  6119  000882  0012               	return	
  6120  000884                     l5524:
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;ff.c: 2228:  *rfs = fs;
  6124  000884  C045  FFD9         	movff	find_volume@rfs,fsr2l
  6125  000888  C046  FFDA         	movff	find_volume@rfs+1,fsr2h
  6126  00088C  C098  FFDE         	movff	find_volume@fs,postinc2
  6127  000890  C099  FFDD         	movff	find_volume@fs+1,postdec2
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;ff.c: 2230:  if (fs->fs_type) {
  6131  000894  C098  FFD9         	movff	find_volume@fs,fsr2l
  6132  000898  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6133  00089C  50DF               	movf	indf2,w,c
  6134  00089E  B4D8               	btfsc	status,2,c
  6135  0008A0  D015               	goto	l5544
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;ff.c: 2231:   stat = disk_status(fs->drv);
  6139  0008A2  EE20 F001          	lfsr	2,1
  6140  0008A6  5198               	movf	find_volume@fs& (0+255),w,b
  6141  0008A8  26D9               	addwf	fsr2l,f,c
  6142  0008AA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6143  0008AC  22DA               	addwfc	fsr2h,f,c
  6144  0008AE  50DF               	movf	indf2,w,c
  6145  0008B0  ECFA  F02A         	call	_disk_status
  6146  0008B4  0100               	movlb	0	; () banked
  6147  0008B6  6F8C               	movwf	find_volume@stat& (0+255),b
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;ff.c: 2233:    if (!0 && wmode && (stat & 0x04))
  6151  0008B8  B18C               	btfsc	find_volume@stat& (0+255),0,b
  6152  0008BA  D008               	goto	l5544
  6153                           
  6154                           ; BSR set to: 0
  6155  0008BC  5049               	movf	find_volume@wmode,w,c
  6156  0008BE  A4D8               	btfss	status,2,c
  6157                           
  6158                           ; BSR set to: 0
  6159  0008C0  A58C               	btfss	find_volume@stat& (0+255),2,b
  6160  0008C2  D002               	goto	l5540
  6161  0008C4                     u7330:
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;ff.c: 2234:     return FR_WRITE_PROTECTED;
  6165  0008C4  0E0A               	movlw	10
  6166  0008C6  0012               	return	
  6167  0008C8                     l5540:
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;ff.c: 2235:    return FR_OK;
  6171  0008C8  0E00               	movlw	0
  6172  0008CA  0012               	return	
  6173  0008CC                     l5544:
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;ff.c: 2242:  fs->fs_type = 0;
  6177  0008CC  C098  FFD9         	movff	find_volume@fs,fsr2l
  6178  0008D0  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  6179  0008D4  0E00               	movlw	0
  6180  0008D6  6EDF               	movwf	indf2,c
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;ff.c: 2243:  fs->drv = (BYTE)(vol);
  6184  0008D8  EE20 F001          	lfsr	2,1
  6185  0008DC  5198               	movf	find_volume@fs& (0+255),w,b
  6186  0008DE  26D9               	addwf	fsr2l,f,c
  6187  0008E0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6188  0008E2  22DA               	addwfc	fsr2h,f,c
  6189  0008E4  C080  FFDF         	movff	find_volume@vol,indf2
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;ff.c: 2244:  stat = disk_initialize(fs->drv);
  6193  0008E8  EE20 F001          	lfsr	2,1
  6194  0008EC  5198               	movf	find_volume@fs& (0+255),w,b
  6195  0008EE  26D9               	addwf	fsr2l,f,c
  6196  0008F0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6197  0008F2  22DA               	addwfc	fsr2h,f,c
  6198  0008F4  50DF               	movf	indf2,w,c
  6199  0008F6  ECCB  F01D         	call	_disk_initialize
  6200  0008FA  0100               	movlb	0	; () banked
  6201  0008FC  6F8C               	movwf	find_volume@stat& (0+255),b
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;ff.c: 2245:  if (stat & 0x01)
  6205  0008FE  A18C               	btfss	find_volume@stat& (0+255),0,b
  6206  000900  D002               	goto	l5556
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;ff.c: 2246:   return FR_NOT_READY;
  6210  000902  0E03               	movlw	3
  6211  000904  0012               	return	
  6212  000906                     l5556:
  6213                           
  6214                           ; BSR set to: 0
  6215  000906  5049               	movf	find_volume@wmode,w,c
  6216  000908  B4D8               	btfsc	status,2,c
  6217  00090A  D002               	goto	l5564
  6218                           
  6219                           ; BSR set to: 0
  6220  00090C  B58C               	btfsc	find_volume@stat& (0+255),2,b
  6221  00090E  D7DA               	goto	u7330
  6222  000910                     l5564:
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;ff.c: 2254:  bsect = 0;
  6226  000910  0E00               	movlw	0
  6227  000912  6F91               	movwf	find_volume@bsect& (0+255),b
  6228  000914  0E00               	movlw	0
  6229  000916  6F92               	movwf	(find_volume@bsect+1)& (0+255),b
  6230  000918  0E00               	movlw	0
  6231  00091A  6F93               	movwf	(find_volume@bsect+2)& (0+255),b
  6232  00091C  0E00               	movlw	0
  6233  00091E  6F94               	movwf	(find_volume@bsect+3)& (0+255),b
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;ff.c: 2255:  fmt = check_fs(fs, bsect);
  6237  000920  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6238  000924  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6239  000928  0E00               	movlw	0
  6240  00092A  6E3D               	movwf	check_fs@sect,c
  6241  00092C  0E00               	movlw	0
  6242  00092E  6E3E               	movwf	check_fs@sect+1,c
  6243  000930  0E00               	movlw	0
  6244  000932  6E3F               	movwf	check_fs@sect+2,c
  6245  000934  0E00               	movlw	0
  6246  000936  6E40               	movwf	check_fs@sect+3,c
  6247  000938  EC4D  F024         	call	_check_fs	;wreg free
  6248  00093C  0100               	movlb	0	; () banked
  6249  00093E  6F97               	movwf	find_volume@fmt& (0+255),b
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;ff.c: 2256:  if (fmt == 1 || (!fmt && (0))) {
  6253  000940  0597               	decf	find_volume@fmt& (0+255),w,b
  6254  000942  A4D8               	btfss	status,2,c
  6255  000944  D0AE               	goto	u7430
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;ff.c: 2257:   for (i = 0; i < 4; i++) {
  6259  000946  0E00               	movlw	0
  6260  000948  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6261  00094A  0E00               	movlw	0
  6262  00094C  6F95               	movwf	find_volume@i& (0+255),b
  6263  00094E                     l5576:
  6264                           
  6265                           ; BSR set to: 0
  6266  00094E  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6267  000950  E15A               	bnz	l5592
  6268  000952  0E04               	movlw	4
  6269  000954  5D95               	subwf	find_volume@i& (0+255),w,b
  6270  000956  B0D8               	btfsc	status,0,c
  6271  000958  D056               	goto	l5592
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;ff.c: 2258:    pt = fs->win + 446 + i * 16;
  6275  00095A  C095  F04A         	movff	find_volume@i,??_find_volume
  6276  00095E  C096  F04B         	movff	find_volume@i+1,??_find_volume+1
  6277  000962  3A4A               	swapf	??_find_volume,f,c
  6278  000964  3A4B               	swapf	??_find_volume+1,f,c
  6279  000966  0EF0               	movlw	240
  6280  000968  164B               	andwf	??_find_volume+1,f,c
  6281  00096A  504A               	movf	??_find_volume,w,c
  6282  00096C  0B0F               	andlw	15
  6283  00096E  124B               	iorwf	??_find_volume+1,f,c
  6284  000970  0EF0               	movlw	240
  6285  000972  164A               	andwf	??_find_volume,f,c
  6286  000974  C098  F04C         	movff	find_volume@fs,??_find_volume+2
  6287  000978  C099  F04D         	movff	find_volume@fs+1,??_find_volume+3
  6288  00097C  504A               	movf	??_find_volume,w,c
  6289  00097E  264C               	addwf	??_find_volume+2,f,c
  6290  000980  504B               	movf	??_find_volume+1,w,c
  6291  000982  224D               	addwfc	??_find_volume+3,f,c
  6292  000984  0EEC               	movlw	236
  6293  000986  244C               	addwf	??_find_volume+2,w,c
  6294  000988  6F7A               	movwf	find_volume@pt& (0+255),b
  6295  00098A  0E01               	movlw	1
  6296  00098C  204D               	addwfc	??_find_volume+3,w,c
  6297  00098E  6F7B               	movwf	(find_volume@pt+1)& (0+255),b
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;ff.c: 2259:    br[i] = pt[4] ? (DWORD)(*(DWORD*)(BYTE*)(&pt[8])) : 0;
  6301  000990  EE20 F004          	lfsr	2,4
  6302  000994  517A               	movf	find_volume@pt& (0+255),w,b
  6303  000996  26D9               	addwf	fsr2l,f,c
  6304  000998  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6305  00099A  22DA               	addwfc	fsr2h,f,c
  6306  00099C  50DF               	movf	indf2,w,c
  6307  00099E  A4D8               	btfss	status,2,c
  6308  0009A0  D009               	goto	l5586
  6309                           
  6310                           ; BSR set to: 0
  6311  0009A2  0E00               	movlw	0
  6312  0009A4  6F70               	movwf	_find_volume$922& (0+255),b
  6313  0009A6  0E00               	movlw	0
  6314  0009A8  6F71               	movwf	(_find_volume$922+1)& (0+255),b
  6315  0009AA  0E00               	movlw	0
  6316  0009AC  6F72               	movwf	(_find_volume$922+2)& (0+255),b
  6317  0009AE  0E00               	movlw	0
  6318  0009B0  6F73               	movwf	(_find_volume$922+3)& (0+255),b
  6319  0009B2  D00E               	goto	l585
  6320  0009B4                     l5586:
  6321                           
  6322                           ; BSR set to: 0
  6323  0009B4  EE20 F008          	lfsr	2,8
  6324  0009B8  517A               	movf	find_volume@pt& (0+255),w,b
  6325  0009BA  26D9               	addwf	fsr2l,f,c
  6326  0009BC  517B               	movf	(find_volume@pt+1)& (0+255),w,b
  6327  0009BE  22DA               	addwfc	fsr2h,f,c
  6328  0009C0  CFDE F070          	movff	postinc2,_find_volume$922
  6329  0009C4  CFDE F071          	movff	postinc2,_find_volume$922+1
  6330  0009C8  CFDE F072          	movff	postinc2,_find_volume$922+2
  6331  0009CC  CFDE F073          	movff	postinc2,_find_volume$922+3
  6332  0009D0                     l585:
  6333                           
  6334                           ; BSR set to: 0
  6335  0009D0  0E60               	movlw	low find_volume@br
  6336  0009D2  6E4A               	movwf	??_find_volume& (0+255),c
  6337  0009D4  0E00               	movlw	high find_volume@br
  6338  0009D6  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6339  0009D8  90D8               	bcf	status,0,c
  6340  0009DA  3595               	rlcf	find_volume@i& (0+255),w,b
  6341  0009DC  6ED9               	movwf	fsr2l,c
  6342  0009DE  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6343  0009E0  6EDA               	movwf	fsr2h,c
  6344  0009E2  90D8               	bcf	status,0,c
  6345  0009E4  36D9               	rlcf	fsr2l,f,c
  6346  0009E6  36DA               	rlcf	fsr2h,f,c
  6347  0009E8  504A               	movf	??_find_volume,w,c
  6348  0009EA  26D9               	addwf	fsr2l,f,c
  6349  0009EC  504B               	movf	??_find_volume+1,w,c
  6350  0009EE  22DA               	addwfc	fsr2h,f,c
  6351  0009F0  C070  FFDE         	movff	_find_volume$922,postinc2
  6352  0009F4  C071  FFDE         	movff	_find_volume$922+1,postinc2
  6353  0009F8  C072  FFDE         	movff	_find_volume$922+2,postinc2
  6354  0009FC  C073  FFDE         	movff	_find_volume$922+3,postinc2
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;ff.c: 2260:   }
  6358  000A00  4B95               	infsnz	find_volume@i& (0+255),f,b
  6359  000A02  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6360  000A04  D7A4               	goto	l5576
  6361  000A06                     l5592:
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;ff.c: 2261:   i = 0;
  6365  000A06  0E00               	movlw	0
  6366  000A08  6F96               	movwf	(find_volume@i+1)& (0+255),b
  6367  000A0A  0E00               	movlw	0
  6368  000A0C  6F95               	movwf	find_volume@i& (0+255),b
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;ff.c: 2262:   if (i) i--;
  6372  000A0E  5195               	movf	find_volume@i& (0+255),w,b
  6373  000A10  1196               	iorwf	(find_volume@i+1)& (0+255),w,b
  6374  000A12  B4D8               	btfsc	status,2,c
  6375  000A14  D003               	goto	l5598
  6376                           
  6377                           ; BSR set to: 0
  6378  000A16  0795               	decf	find_volume@i& (0+255),f,b
  6379  000A18  A0D8               	btfss	status,0,c
  6380  000A1A  0796               	decf	(find_volume@i+1)& (0+255),f,b
  6381  000A1C                     l5598:
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;ff.c: 2264:    bsect = br[i];
  6385  000A1C  0E60               	movlw	low find_volume@br
  6386  000A1E  6E4A               	movwf	??_find_volume& (0+255),c
  6387  000A20  0E00               	movlw	high find_volume@br
  6388  000A22  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6389  000A24  90D8               	bcf	status,0,c
  6390  000A26  3595               	rlcf	find_volume@i& (0+255),w,b
  6391  000A28  6ED9               	movwf	fsr2l,c
  6392  000A2A  3596               	rlcf	(find_volume@i+1)& (0+255),w,b
  6393  000A2C  6EDA               	movwf	fsr2h,c
  6394  000A2E  90D8               	bcf	status,0,c
  6395  000A30  36D9               	rlcf	fsr2l,f,c
  6396  000A32  36DA               	rlcf	fsr2h,f,c
  6397  000A34  504A               	movf	??_find_volume,w,c
  6398  000A36  26D9               	addwf	fsr2l,f,c
  6399  000A38  504B               	movf	??_find_volume+1,w,c
  6400  000A3A  22DA               	addwfc	fsr2h,f,c
  6401  000A3C  CFDE F091          	movff	postinc2,find_volume@bsect
  6402  000A40  CFDE F092          	movff	postinc2,find_volume@bsect+1
  6403  000A44  CFDE F093          	movff	postinc2,find_volume@bsect+2
  6404  000A48  CFDE F094          	movff	postinc2,find_volume@bsect+3
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;ff.c: 2265:    fmt = bsect ? check_fs(fs, bsect) : 2;
  6408  000A4C  5191               	movf	find_volume@bsect& (0+255),w,b
  6409  000A4E  1192               	iorwf	(find_volume@bsect+1)& (0+255),w,b
  6410  000A50  1193               	iorwf	(find_volume@bsect+2)& (0+255),w,b
  6411  000A52  1194               	iorwf	(find_volume@bsect+3)& (0+255),w,b
  6412  000A54  A4D8               	btfss	status,2,c
  6413  000A56  D005               	goto	l5604
  6414                           
  6415                           ; BSR set to: 0
  6416  000A58  0E00               	movlw	0
  6417  000A5A  6F75               	movwf	(_find_volume$923+1)& (0+255),b
  6418  000A5C  0E02               	movlw	2
  6419  000A5E  6F74               	movwf	_find_volume$923& (0+255),b
  6420  000A60  D013               	goto	l5606
  6421  000A62                     l5604:
  6422                           
  6423                           ; BSR set to: 0
  6424  000A62  C098  F03B         	movff	find_volume@fs,check_fs@fs
  6425  000A66  C099  F03C         	movff	find_volume@fs+1,check_fs@fs+1
  6426  000A6A  C091  F03D         	movff	find_volume@bsect,check_fs@sect
  6427  000A6E  C092  F03E         	movff	find_volume@bsect+1,check_fs@sect+1
  6428  000A72  C093  F03F         	movff	find_volume@bsect+2,check_fs@sect+2
  6429  000A76  C094  F040         	movff	find_volume@bsect+3,check_fs@sect+3
  6430  000A7A  EC4D  F024         	call	_check_fs	;wreg free
  6431  000A7E  6E4A               	movwf	??_find_volume& (0+255),c
  6432  000A80  504A               	movf	??_find_volume,w,c
  6433  000A82  0100               	movlb	0	; () banked
  6434  000A84  6F74               	movwf	_find_volume$923& (0+255),b
  6435  000A86  6B75               	clrf	(_find_volume$923+1)& (0+255),b
  6436  000A88                     l5606:
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;ff.c: 2266:   } while (!0 && fmt && ++i < 4);
  6440  000A88  C074  F097         	movff	_find_volume$923,find_volume@fmt
  6441                           
  6442                           ; BSR set to: 0
  6443  000A8C  5197               	movf	find_volume@fmt& (0+255),w,b
  6444  000A8E  B4D8               	btfsc	status,2,c
  6445  000A90  D008               	goto	u7430
  6446                           
  6447                           ; BSR set to: 0
  6448  000A92  4B95               	infsnz	find_volume@i& (0+255),f,b
  6449  000A94  2B96               	incf	(find_volume@i+1)& (0+255),f,b
  6450  000A96  5196               	movf	(find_volume@i+1)& (0+255),w,b
  6451  000A98  E104               	bnz	u7430
  6452  000A9A  0E04               	movlw	4
  6453  000A9C  5D95               	subwf	find_volume@i& (0+255),w,b
  6454  000A9E  A0D8               	btfss	status,0,c
  6455  000AA0  D7BD               	goto	l5598
  6456  000AA2                     u7430:
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;ff.c: 2268:  if (fmt == 3) return FR_DISK_ERR;
  6460  000AA2  0E03               	movlw	3
  6461  000AA4  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6462  000AA6  A4D8               	btfss	status,2,c
  6463  000AA8  D002               	goto	l5618
  6464                           
  6465                           ; BSR set to: 0
  6466  000AAA  0E01               	movlw	1
  6467  000AAC  0012               	return	
  6468  000AAE                     l5618:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;ff.c: 2269:  if (fmt) return FR_NO_FILESYSTEM;
  6472  000AAE  5197               	movf	find_volume@fmt& (0+255),w,b
  6473  000AB0  B4D8               	btfsc	status,2,c
  6474  000AB2  D002               	goto	l5624
  6475  000AB4                     u7450:
  6476  000AB4                     l5620:
  6477                           
  6478                           ; BSR set to: 0
  6479  000AB4  0E0D               	movlw	13
  6480  000AB6  0012               	return	
  6481  000AB8                     l5624:
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;ff.c: 2273:  if ((WORD)(*(WORD*)(BYTE*)(fs->win + 11)) != ((UINT)512))
  6485  000AB8  EE20 F039          	lfsr	2,57
  6486  000ABC  5198               	movf	find_volume@fs& (0+255),w,b
  6487  000ABE  26D9               	addwf	fsr2l,f,c
  6488  000AC0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6489  000AC2  22DA               	addwfc	fsr2h,f,c
  6490  000AC4  50DE               	movf	postinc2,w,c
  6491  000AC6  E1F6               	bnz	l5620
  6492  000AC8  0E02               	movlw	2
  6493  000ACA  18DE               	xorwf	postinc2,w,c
  6494  000ACC  A4D8               	btfss	status,2,c
  6495  000ACE  D7F2               	goto	u7450
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;ff.c: 2276:  fasize = (WORD)(*(WORD*)(BYTE*)(fs->win + 22));
  6499  000AD0  EE20 F044          	lfsr	2,68
  6500  000AD4  5198               	movf	find_volume@fs& (0+255),w,b
  6501  000AD6  26D9               	addwf	fsr2l,f,c
  6502  000AD8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6503  000ADA  22DA               	addwfc	fsr2h,f,c
  6504  000ADC  CFDE F04A          	movff	postinc2,??_find_volume
  6505  000AE0  CFDD F04B          	movff	postdec2,??_find_volume+1
  6506  000AE4  C04A  F08D         	movff	??_find_volume,find_volume@fasize
  6507  000AE8  C04B  F08E         	movff	??_find_volume+1,find_volume@fasize+1
  6508  000AEC  6B8F               	clrf	(find_volume@fasize+2)& (0+255),b
  6509  000AEE  6B90               	clrf	(find_volume@fasize+3)& (0+255),b
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;ff.c: 2277:  if (!fasize) fasize = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 36));
  6513  000AF0  518D               	movf	find_volume@fasize& (0+255),w,b
  6514  000AF2  118E               	iorwf	(find_volume@fasize+1)& (0+255),w,b
  6515  000AF4  118F               	iorwf	(find_volume@fasize+2)& (0+255),w,b
  6516  000AF6  1190               	iorwf	(find_volume@fasize+3)& (0+255),w,b
  6517  000AF8  A4D8               	btfss	status,2,c
  6518  000AFA  D00E               	goto	l598
  6519                           
  6520                           ; BSR set to: 0
  6521  000AFC  EE20 F052          	lfsr	2,82
  6522  000B00  5198               	movf	find_volume@fs& (0+255),w,b
  6523  000B02  26D9               	addwf	fsr2l,f,c
  6524  000B04  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6525  000B06  22DA               	addwfc	fsr2h,f,c
  6526  000B08  CFDE F08D          	movff	postinc2,find_volume@fasize
  6527  000B0C  CFDE F08E          	movff	postinc2,find_volume@fasize+1
  6528  000B10  CFDE F08F          	movff	postinc2,find_volume@fasize+2
  6529  000B14  CFDE F090          	movff	postinc2,find_volume@fasize+3
  6530  000B18                     l598:
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;ff.c: 2278:  fs->fsize = fasize;
  6534  000B18  EE20 F016          	lfsr	2,22
  6535  000B1C  5198               	movf	find_volume@fs& (0+255),w,b
  6536  000B1E  26D9               	addwf	fsr2l,f,c
  6537  000B20  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6538  000B22  22DA               	addwfc	fsr2h,f,c
  6539  000B24  C08D  FFDE         	movff	find_volume@fasize,postinc2
  6540  000B28  C08E  FFDE         	movff	find_volume@fasize+1,postinc2
  6541  000B2C  C08F  FFDE         	movff	find_volume@fasize+2,postinc2
  6542  000B30  C090  FFDE         	movff	find_volume@fasize+3,postinc2
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;ff.c: 2280:  fs->n_fats = fs->win[16];
  6546  000B34  EE20 F03E          	lfsr	2,62
  6547  000B38  5198               	movf	find_volume@fs& (0+255),w,b
  6548  000B3A  26D9               	addwf	fsr2l,f,c
  6549  000B3C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6550  000B3E  22DA               	addwfc	fsr2h,f,c
  6551  000B40  EE10 F003          	lfsr	1,3
  6552  000B44  5198               	movf	find_volume@fs& (0+255),w,b
  6553  000B46  26E1               	addwf	fsr1l,f,c
  6554  000B48  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6555  000B4A  22E2               	addwfc	fsr1h,f,c
  6556  000B4C  CFDF FFE7          	movff	indf2,indf1
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;ff.c: 2281:  if (fs->n_fats != 1 && fs->n_fats != 2)
  6560  000B50  EE20 F003          	lfsr	2,3
  6561  000B54  5198               	movf	find_volume@fs& (0+255),w,b
  6562  000B56  26D9               	addwf	fsr2l,f,c
  6563  000B58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6564  000B5A  22DA               	addwfc	fsr2h,f,c
  6565  000B5C  04DE               	decf	postinc2,w,c
  6566  000B5E  B4D8               	btfsc	status,2,c
  6567  000B60  D00A               	goto	l5646
  6568                           
  6569                           ; BSR set to: 0
  6570  000B62  EE20 F003          	lfsr	2,3
  6571  000B66  5198               	movf	find_volume@fs& (0+255),w,b
  6572  000B68  26D9               	addwf	fsr2l,f,c
  6573  000B6A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6574  000B6C  22DA               	addwfc	fsr2h,f,c
  6575  000B6E  0E02               	movlw	2
  6576  000B70  18DE               	xorwf	postinc2,w,c
  6577  000B72  A4D8               	btfss	status,2,c
  6578  000B74  D79F               	goto	u7450
  6579  000B76                     l5646:
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;ff.c: 2283:  fasize *= fs->n_fats;
  6583  000B76  C08D  F001         	movff	find_volume@fasize,___lmul@multiplier
  6584  000B7A  C08E  F002         	movff	find_volume@fasize+1,___lmul@multiplier+1
  6585  000B7E  C08F  F003         	movff	find_volume@fasize+2,___lmul@multiplier+2
  6586  000B82  C090  F004         	movff	find_volume@fasize+3,___lmul@multiplier+3
  6587  000B86  EE20 F003          	lfsr	2,3
  6588  000B8A  5198               	movf	find_volume@fs& (0+255),w,b
  6589  000B8C  26D9               	addwf	fsr2l,f,c
  6590  000B8E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6591  000B90  22DA               	addwfc	fsr2h,f,c
  6592  000B92  50DF               	movf	indf2,w,c
  6593  000B94  6E4A               	movwf	??_find_volume& (0+255),c
  6594  000B96  504A               	movf	??_find_volume,w,c
  6595  000B98  6E05               	movwf	___lmul@multiplicand,c
  6596  000B9A  6A06               	clrf	___lmul@multiplicand+1,c
  6597  000B9C  6A07               	clrf	___lmul@multiplicand+2,c
  6598  000B9E  6A08               	clrf	___lmul@multiplicand+3,c
  6599  000BA0  EC87  F029         	call	___lmul	;wreg free
  6600  000BA4  C001  F08D         	movff	?___lmul,find_volume@fasize
  6601  000BA8  C002  F08E         	movff	?___lmul+1,find_volume@fasize+1
  6602  000BAC  C003  F08F         	movff	?___lmul+2,find_volume@fasize+2
  6603  000BB0  C004  F090         	movff	?___lmul+3,find_volume@fasize+3
  6604                           
  6605                           ;ff.c: 2285:  fs->csize = fs->win[13];
  6606  000BB4  0100               	movlb	0	; () banked
  6607  000BB6  EE20 F03B          	lfsr	2,59
  6608  000BBA  5198               	movf	find_volume@fs& (0+255),w,b
  6609  000BBC  26D9               	addwf	fsr2l,f,c
  6610  000BBE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6611  000BC0  22DA               	addwfc	fsr2h,f,c
  6612  000BC2  EE10 F002          	lfsr	1,2
  6613  000BC6  5198               	movf	find_volume@fs& (0+255),w,b
  6614  000BC8  26E1               	addwf	fsr1l,f,c
  6615  000BCA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6616  000BCC  22E2               	addwfc	fsr1h,f,c
  6617  000BCE  CFDF FFE7          	movff	indf2,indf1
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;ff.c: 2286:  if (!fs->csize || (fs->csize & (fs->csize - 1)))
  6621  000BD2  EE20 F002          	lfsr	2,2
  6622  000BD6  5198               	movf	find_volume@fs& (0+255),w,b
  6623  000BD8  26D9               	addwf	fsr2l,f,c
  6624  000BDA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6625  000BDC  22DA               	addwfc	fsr2h,f,c
  6626  000BDE  50DF               	movf	indf2,w,c
  6627  000BE0  B4D8               	btfsc	status,2,c
  6628  000BE2  D768               	goto	u7450
  6629                           
  6630                           ; BSR set to: 0
  6631  000BE4  0EFF               	movlw	255
  6632  000BE6  6E4A               	movwf	??_find_volume& (0+255),c
  6633  000BE8  0EFF               	movlw	255
  6634  000BEA  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6635  000BEC  EE20 F002          	lfsr	2,2
  6636  000BF0  5198               	movf	find_volume@fs& (0+255),w,b
  6637  000BF2  26D9               	addwf	fsr2l,f,c
  6638  000BF4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6639  000BF6  22DA               	addwfc	fsr2h,f,c
  6640  000BF8  50DF               	movf	indf2,w,c
  6641  000BFA  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6642  000BFC  6A4D               	clrf	(??_find_volume+3)& (0+255),c
  6643  000BFE  504A               	movf	??_find_volume,w,c
  6644  000C00  264C               	addwf	??_find_volume+2,f,c
  6645  000C02  504B               	movf	??_find_volume+1,w,c
  6646  000C04  224D               	addwfc	??_find_volume+3,f,c
  6647  000C06  EE20 F002          	lfsr	2,2
  6648  000C0A  5198               	movf	find_volume@fs& (0+255),w,b
  6649  000C0C  26D9               	addwf	fsr2l,f,c
  6650  000C0E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6651  000C10  22DA               	addwfc	fsr2h,f,c
  6652  000C12  50DF               	movf	indf2,w,c
  6653  000C14  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6654  000C16  504E               	movf	??_find_volume+4,w,c
  6655  000C18  164C               	andwf	??_find_volume+2,f,c
  6656  000C1A  0E00               	movlw	0
  6657  000C1C  164D               	andwf	??_find_volume+3,f,c
  6658  000C1E  504C               	movf	??_find_volume+2,w,c
  6659  000C20  104D               	iorwf	??_find_volume+3,w,c
  6660  000C22  A4D8               	btfss	status,2,c
  6661  000C24  D747               	goto	u7450
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;ff.c: 2289:  fs->n_rootdir = (WORD)(*(WORD*)(BYTE*)(fs->win + 17));
  6665  000C26  EE20 F03F          	lfsr	2,63
  6666  000C2A  5198               	movf	find_volume@fs& (0+255),w,b
  6667  000C2C  26D9               	addwf	fsr2l,f,c
  6668  000C2E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6669  000C30  22DA               	addwfc	fsr2h,f,c
  6670  000C32  EE10 F008          	lfsr	1,8
  6671  000C36  5198               	movf	find_volume@fs& (0+255),w,b
  6672  000C38  26E1               	addwf	fsr1l,f,c
  6673  000C3A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6674  000C3C  22E2               	addwfc	fsr1h,f,c
  6675  000C3E  CFDE FFE6          	movff	postinc2,postinc1
  6676  000C42  CFDD FFE5          	movff	postdec2,postdec1
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;ff.c: 2290:  if (fs->n_rootdir % (((UINT)512) / 32))
  6680  000C46  EE20 F008          	lfsr	2,8
  6681  000C4A  5198               	movf	find_volume@fs& (0+255),w,b
  6682  000C4C  26D9               	addwf	fsr2l,f,c
  6683  000C4E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6684  000C50  22DA               	addwfc	fsr2h,f,c
  6685  000C52  CFDE F04A          	movff	postinc2,??_find_volume
  6686  000C56  CFDD F04B          	movff	postdec2,??_find_volume+1
  6687  000C5A  0E0F               	movlw	15
  6688  000C5C  164A               	andwf	??_find_volume,f,c
  6689  000C5E  0E00               	movlw	0
  6690  000C60  164B               	andwf	??_find_volume+1,f,c
  6691  000C62  504A               	movf	??_find_volume,w,c
  6692  000C64  104B               	iorwf	??_find_volume+1,w,c
  6693  000C66  A4D8               	btfss	status,2,c
  6694  000C68  D725               	goto	u7450
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;ff.c: 2293:  tsect = (WORD)(*(WORD*)(BYTE*)(fs->win + 19));
  6698  000C6A  EE20 F041          	lfsr	2,65
  6699  000C6E  5198               	movf	find_volume@fs& (0+255),w,b
  6700  000C70  26D9               	addwf	fsr2l,f,c
  6701  000C72  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6702  000C74  22DA               	addwfc	fsr2h,f,c
  6703  000C76  CFDE F04A          	movff	postinc2,??_find_volume
  6704  000C7A  CFDD F04B          	movff	postdec2,??_find_volume+1
  6705  000C7E  C04A  F084         	movff	??_find_volume,find_volume@tsect
  6706  000C82  C04B  F085         	movff	??_find_volume+1,find_volume@tsect+1
  6707  000C86  6B86               	clrf	(find_volume@tsect+2)& (0+255),b
  6708  000C88  6B87               	clrf	(find_volume@tsect+3)& (0+255),b
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;ff.c: 2294:  if (!tsect) tsect = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 32));
  6712  000C8A  5184               	movf	find_volume@tsect& (0+255),w,b
  6713  000C8C  1185               	iorwf	(find_volume@tsect+1)& (0+255),w,b
  6714  000C8E  1186               	iorwf	(find_volume@tsect+2)& (0+255),w,b
  6715  000C90  1187               	iorwf	(find_volume@tsect+3)& (0+255),w,b
  6716  000C92  A4D8               	btfss	status,2,c
  6717  000C94  D00E               	goto	l604
  6718                           
  6719                           ; BSR set to: 0
  6720  000C96  EE20 F04E          	lfsr	2,78
  6721  000C9A  5198               	movf	find_volume@fs& (0+255),w,b
  6722  000C9C  26D9               	addwf	fsr2l,f,c
  6723  000C9E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6724  000CA0  22DA               	addwfc	fsr2h,f,c
  6725  000CA2  CFDE F084          	movff	postinc2,find_volume@tsect
  6726  000CA6  CFDE F085          	movff	postinc2,find_volume@tsect+1
  6727  000CAA  CFDE F086          	movff	postinc2,find_volume@tsect+2
  6728  000CAE  CFDE F087          	movff	postinc2,find_volume@tsect+3
  6729  000CB2                     l604:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;ff.c: 2296:  nrsv = (WORD)(*(WORD*)(BYTE*)(fs->win + 14));
  6733  000CB2  EE20 F03C          	lfsr	2,60
  6734  000CB6  5198               	movf	find_volume@fs& (0+255),w,b
  6735  000CB8  26D9               	addwf	fsr2l,f,c
  6736  000CBA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6737  000CBC  22DA               	addwfc	fsr2h,f,c
  6738  000CBE  CFDE F082          	movff	postinc2,find_volume@nrsv
  6739  000CC2  CFDD F083          	movff	postdec2,find_volume@nrsv+1
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;ff.c: 2297:  if (!nrsv) return FR_NO_FILESYSTEM;
  6743  000CC6  5182               	movf	find_volume@nrsv& (0+255),w,b
  6744  000CC8  1183               	iorwf	(find_volume@nrsv+1)& (0+255),w,b
  6745  000CCA  B4D8               	btfsc	status,2,c
  6746  000CCC  D6F3               	goto	u7450
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;ff.c: 2300:  sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);
  6750  000CCE  EE20 F008          	lfsr	2,8
  6751  000CD2  5198               	movf	find_volume@fs& (0+255),w,b
  6752  000CD4  26D9               	addwf	fsr2l,f,c
  6753  000CD6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6754  000CD8  22DA               	addwfc	fsr2h,f,c
  6755  000CDA  CFDE F04A          	movff	postinc2,??_find_volume
  6756  000CDE  CFDD F04B          	movff	postdec2,??_find_volume+1
  6757  000CE2  0E04               	movlw	4
  6758  000CE4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6759  000CE6                     u7555:
  6760  000CE6  90D8               	bcf	status,0,c
  6761  000CE8  324B               	rrcf	??_find_volume+1,f,c
  6762  000CEA  324A               	rrcf	??_find_volume,f,c
  6763  000CEC  2E4C               	decfsz	(??_find_volume+2)& (0+255),f,c
  6764  000CEE  D7FB               	goto	u7555
  6765  000CF0  5182               	movf	find_volume@nrsv& (0+255),w,b
  6766  000CF2  244A               	addwf	??_find_volume,w,c
  6767  000CF4  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6768  000CF6  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6769  000CF8  204B               	addwfc	??_find_volume+1,w,c
  6770  000CFA  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  6771  000CFC  6A4F               	clrf	(??_find_volume+5)& (0+255),c
  6772  000CFE  B0D8               	btfsc	status,0,c
  6773  000D00  2A4F               	incf	(??_find_volume+5)& (0+255),f,c
  6774  000D02  6A50               	clrf	(??_find_volume+6)& (0+255),c
  6775  000D04  518D               	movf	find_volume@fasize& (0+255),w,b
  6776  000D06  244D               	addwf	??_find_volume+3,w,c
  6777  000D08  6F7C               	movwf	find_volume@sysect& (0+255),b
  6778  000D0A  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  6779  000D0C  204E               	addwfc	??_find_volume+4,w,c
  6780  000D0E  6F7D               	movwf	(find_volume@sysect+1)& (0+255),b
  6781  000D10  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  6782  000D12  204F               	addwfc	??_find_volume+5,w,c
  6783  000D14  6F7E               	movwf	(find_volume@sysect+2)& (0+255),b
  6784  000D16  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  6785  000D18  2050               	addwfc	??_find_volume+6,w,c
  6786  000D1A  6F7F               	movwf	(find_volume@sysect+3)& (0+255),b
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;ff.c: 2301:  if (tsect < sysect) return FR_NO_FILESYSTEM;
  6790  000D1C  517C               	movf	find_volume@sysect& (0+255),w,b
  6791  000D1E  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6792  000D20  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6793  000D22  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6794  000D24  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6795  000D26  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6796  000D28  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6797  000D2A  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6798  000D2C  A0D8               	btfss	status,0,c
  6799  000D2E  D6C2               	goto	u7450
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;ff.c: 2302:  nclst = (tsect - sysect) / fs->csize;
  6803  000D30  517C               	movf	find_volume@sysect& (0+255),w,b
  6804  000D32  5D84               	subwf	find_volume@tsect& (0+255),w,b
  6805  000D34  6E01               	movwf	___lldiv@dividend,c
  6806  000D36  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6807  000D38  5985               	subwfb	(find_volume@tsect+1)& (0+255),w,b
  6808  000D3A  6E02               	movwf	___lldiv@dividend+1,c
  6809  000D3C  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6810  000D3E  5986               	subwfb	(find_volume@tsect+2)& (0+255),w,b
  6811  000D40  6E03               	movwf	___lldiv@dividend+2,c
  6812  000D42  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6813  000D44  5987               	subwfb	(find_volume@tsect+3)& (0+255),w,b
  6814  000D46  6E04               	movwf	___lldiv@dividend+3,c
  6815  000D48  EE20 F002          	lfsr	2,2
  6816  000D4C  5198               	movf	find_volume@fs& (0+255),w,b
  6817  000D4E  26D9               	addwf	fsr2l,f,c
  6818  000D50  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6819  000D52  22DA               	addwfc	fsr2h,f,c
  6820  000D54  50DF               	movf	indf2,w,c
  6821  000D56  6E4A               	movwf	??_find_volume& (0+255),c
  6822  000D58  504A               	movf	??_find_volume,w,c
  6823  000D5A  6E05               	movwf	___lldiv@divisor,c
  6824  000D5C  6A06               	clrf	___lldiv@divisor+1,c
  6825  000D5E  6A07               	clrf	___lldiv@divisor+2,c
  6826  000D60  6A08               	clrf	___lldiv@divisor+3,c
  6827  000D62  EC1F  F028         	call	___lldiv	;wreg free
  6828  000D66  C001  F088         	movff	?___lldiv,find_volume@nclst
  6829  000D6A  C002  F089         	movff	?___lldiv+1,find_volume@nclst+1
  6830  000D6E  C003  F08A         	movff	?___lldiv+2,find_volume@nclst+2
  6831  000D72  C004  F08B         	movff	?___lldiv+3,find_volume@nclst+3
  6832                           
  6833                           ;ff.c: 2303:  if (!nclst) return FR_NO_FILESYSTEM;
  6834  000D76  0100               	movlb	0	; () banked
  6835  000D78  5188               	movf	find_volume@nclst& (0+255),w,b
  6836  000D7A  1189               	iorwf	(find_volume@nclst+1)& (0+255),w,b
  6837  000D7C  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6838  000D7E  118B               	iorwf	(find_volume@nclst+3)& (0+255),w,b
  6839  000D80  B4D8               	btfsc	status,2,c
  6840  000D82  D698               	goto	u7450
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;ff.c: 2304:  fmt = 1;
  6844  000D84  0E01               	movlw	1
  6845  000D86  6F97               	movwf	find_volume@fmt& (0+255),b
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;ff.c: 2305:  if (nclst >= 4086U) fmt = 2;
  6849  000D88  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6850  000D8A  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6851  000D8C  E106               	bnz	u7580
  6852  000D8E  0EF6               	movlw	246
  6853  000D90  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6854  000D92  0E0F               	movlw	15
  6855  000D94  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6856  000D96  A0D8               	btfss	status,0,c
  6857  000D98  D002               	goto	l5700
  6858  000D9A                     u7580:
  6859                           
  6860                           ; BSR set to: 0
  6861  000D9A  0E02               	movlw	2
  6862  000D9C  6F97               	movwf	find_volume@fmt& (0+255),b
  6863  000D9E                     l5700:
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;ff.c: 2306:  if (nclst >= 65526U) fmt = 3;
  6867  000D9E  518B               	movf	(find_volume@nclst+3)& (0+255),w,b
  6868  000DA0  118A               	iorwf	(find_volume@nclst+2)& (0+255),w,b
  6869  000DA2  E106               	bnz	u7590
  6870  000DA4  0EF6               	movlw	246
  6871  000DA6  5D88               	subwf	find_volume@nclst& (0+255),w,b
  6872  000DA8  0EFF               	movlw	255
  6873  000DAA  5989               	subwfb	(find_volume@nclst+1)& (0+255),w,b
  6874  000DAC  A0D8               	btfss	status,0,c
  6875  000DAE  D002               	goto	l5704
  6876  000DB0                     u7590:
  6877                           
  6878                           ; BSR set to: 0
  6879  000DB0  0E03               	movlw	3
  6880  000DB2  6F97               	movwf	find_volume@fmt& (0+255),b
  6881  000DB4                     l5704:
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;ff.c: 2309:  fs->n_fatent = nclst + 2;
  6885  000DB4  0E02               	movlw	2
  6886  000DB6  2588               	addwf	find_volume@nclst& (0+255),w,b
  6887  000DB8  6E4A               	movwf	??_find_volume& (0+255),c
  6888  000DBA  0E00               	movlw	0
  6889  000DBC  2189               	addwfc	(find_volume@nclst+1)& (0+255),w,b
  6890  000DBE  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6891  000DC0  0E00               	movlw	0
  6892  000DC2  218A               	addwfc	(find_volume@nclst+2)& (0+255),w,b
  6893  000DC4  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6894  000DC6  0E00               	movlw	0
  6895  000DC8  218B               	addwfc	(find_volume@nclst+3)& (0+255),w,b
  6896  000DCA  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6897  000DCC  EE20 F012          	lfsr	2,18
  6898  000DD0  5198               	movf	find_volume@fs& (0+255),w,b
  6899  000DD2  26D9               	addwf	fsr2l,f,c
  6900  000DD4  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6901  000DD6  22DA               	addwfc	fsr2h,f,c
  6902  000DD8  C04A  FFDE         	movff	??_find_volume,postinc2
  6903  000DDC  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6904  000DE0  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6905  000DE4  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;ff.c: 2310:  fs->volbase = bsect;
  6909  000DE8  EE20 F01A          	lfsr	2,26
  6910  000DEC  5198               	movf	find_volume@fs& (0+255),w,b
  6911  000DEE  26D9               	addwf	fsr2l,f,c
  6912  000DF0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6913  000DF2  22DA               	addwfc	fsr2h,f,c
  6914  000DF4  C091  FFDE         	movff	find_volume@bsect,postinc2
  6915  000DF8  C092  FFDE         	movff	find_volume@bsect+1,postinc2
  6916  000DFC  C093  FFDE         	movff	find_volume@bsect+2,postinc2
  6917  000E00  C094  FFDE         	movff	find_volume@bsect+3,postinc2
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;ff.c: 2311:  fs->fatbase = bsect + nrsv;
  6921  000E04  5182               	movf	find_volume@nrsv& (0+255),w,b
  6922  000E06  2591               	addwf	find_volume@bsect& (0+255),w,b
  6923  000E08  6E4A               	movwf	??_find_volume& (0+255),c
  6924  000E0A  5183               	movf	(find_volume@nrsv+1)& (0+255),w,b
  6925  000E0C  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6926  000E0E  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6927  000E10  0E00               	movlw	0
  6928  000E12  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6929  000E14  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6930  000E16  0E00               	movlw	0
  6931  000E18  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6932  000E1A  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6933  000E1C  EE20 F01E          	lfsr	2,30
  6934  000E20  5198               	movf	find_volume@fs& (0+255),w,b
  6935  000E22  26D9               	addwf	fsr2l,f,c
  6936  000E24  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6937  000E26  22DA               	addwfc	fsr2h,f,c
  6938  000E28  C04A  FFDE         	movff	??_find_volume,postinc2
  6939  000E2C  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6940  000E30  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6941  000E34  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;ff.c: 2312:  fs->database = bsect + sysect;
  6945  000E38  517C               	movf	find_volume@sysect& (0+255),w,b
  6946  000E3A  2591               	addwf	find_volume@bsect& (0+255),w,b
  6947  000E3C  6E4A               	movwf	??_find_volume& (0+255),c
  6948  000E3E  517D               	movf	(find_volume@sysect+1)& (0+255),w,b
  6949  000E40  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  6950  000E42  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  6951  000E44  517E               	movf	(find_volume@sysect+2)& (0+255),w,b
  6952  000E46  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  6953  000E48  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  6954  000E4A  517F               	movf	(find_volume@sysect+3)& (0+255),w,b
  6955  000E4C  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  6956  000E4E  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  6957  000E50  EE20 F026          	lfsr	2,38
  6958  000E54  5198               	movf	find_volume@fs& (0+255),w,b
  6959  000E56  26D9               	addwf	fsr2l,f,c
  6960  000E58  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6961  000E5A  22DA               	addwfc	fsr2h,f,c
  6962  000E5C  C04A  FFDE         	movff	??_find_volume,postinc2
  6963  000E60  C04B  FFDE         	movff	??_find_volume+1,postinc2
  6964  000E64  C04C  FFDE         	movff	??_find_volume+2,postinc2
  6965  000E68  C04D  FFDE         	movff	??_find_volume+3,postinc2
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;ff.c: 2313:  if (fmt == 3) {
  6969  000E6C  0E03               	movlw	3
  6970  000E6E  1997               	xorwf	find_volume@fmt& (0+255),w,b
  6971  000E70  A4D8               	btfss	status,2,c
  6972  000E72  D03D               	goto	l5724
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;ff.c: 2314:   if (fs->n_rootdir) return FR_NO_FILESYSTEM;
  6976  000E74  EE20 F008          	lfsr	2,8
  6977  000E78  5198               	movf	find_volume@fs& (0+255),w,b
  6978  000E7A  26D9               	addwf	fsr2l,f,c
  6979  000E7C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6980  000E7E  22DA               	addwfc	fsr2h,f,c
  6981  000E80  50DE               	movf	postinc2,w,c
  6982  000E82  10DE               	iorwf	postinc2,w,c
  6983  000E84  A4D8               	btfss	status,2,c
  6984  000E86  D616               	goto	u7450
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;ff.c: 2315:   fs->dirbase = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 44));
  6988  000E88  EE20 F05A          	lfsr	2,90
  6989  000E8C  5198               	movf	find_volume@fs& (0+255),w,b
  6990  000E8E  26D9               	addwf	fsr2l,f,c
  6991  000E90  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6992  000E92  22DA               	addwfc	fsr2h,f,c
  6993  000E94  EE10 F022          	lfsr	1,34
  6994  000E98  5198               	movf	find_volume@fs& (0+255),w,b
  6995  000E9A  26E1               	addwf	fsr1l,f,c
  6996  000E9C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  6997  000E9E  22E2               	addwfc	fsr1h,f,c
  6998  000EA0  CFDE FFE6          	movff	postinc2,postinc1
  6999  000EA4  CFDE FFE6          	movff	postinc2,postinc1
  7000  000EA8  CFDE FFE6          	movff	postinc2,postinc1
  7001  000EAC  CFDE FFE6          	movff	postinc2,postinc1
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;ff.c: 2316:   szbfat = fs->n_fatent * 4;
  7005  000EB0  EE20 F012          	lfsr	2,18
  7006  000EB4  5198               	movf	find_volume@fs& (0+255),w,b
  7007  000EB6  26D9               	addwf	fsr2l,f,c
  7008  000EB8  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7009  000EBA  22DA               	addwfc	fsr2h,f,c
  7010  000EBC  CFDE F04A          	movff	postinc2,??_find_volume
  7011  000EC0  CFDE F04B          	movff	postinc2,??_find_volume+1
  7012  000EC4  CFDE F04C          	movff	postinc2,??_find_volume+2
  7013  000EC8  CFDE F04D          	movff	postinc2,??_find_volume+3
  7014  000ECC  0E02               	movlw	2
  7015  000ECE                     u7625:
  7016  000ECE  90D8               	bcf	status,0,c
  7017  000ED0  364A               	rlcf	??_find_volume,f,c
  7018  000ED2  364B               	rlcf	??_find_volume+1,f,c
  7019  000ED4  364C               	rlcf	??_find_volume+2,f,c
  7020  000ED6  364D               	rlcf	??_find_volume+3,f,c
  7021  000ED8  2EE8               	decfsz	wreg,f,c
  7022  000EDA  D7F9               	goto	u7625
  7023  000EDC  C04A  F076         	movff	??_find_volume,find_volume@szbfat
  7024  000EE0  C04B  F077         	movff	??_find_volume+1,find_volume@szbfat+1
  7025  000EE4  C04C  F078         	movff	??_find_volume+2,find_volume@szbfat+2
  7026  000EE8  C04D  F079         	movff	??_find_volume+3,find_volume@szbfat+3
  7027                           
  7028                           ;ff.c: 2317:  } else {
  7029  000EEC  D091               	goto	l612
  7030  000EEE                     l5724:
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;ff.c: 2318:   if (!fs->n_rootdir) return FR_NO_FILESYSTEM;
  7034  000EEE  EE20 F008          	lfsr	2,8
  7035  000EF2  5198               	movf	find_volume@fs& (0+255),w,b
  7036  000EF4  26D9               	addwf	fsr2l,f,c
  7037  000EF6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7038  000EF8  22DA               	addwfc	fsr2h,f,c
  7039  000EFA  50DE               	movf	postinc2,w,c
  7040  000EFC  10DE               	iorwf	postinc2,w,c
  7041  000EFE  B4D8               	btfsc	status,2,c
  7042  000F00  D5D9               	goto	u7450
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;ff.c: 2319:   fs->dirbase = fs->fatbase + fasize;
  7046  000F02  EE20 F01E          	lfsr	2,30
  7047  000F06  5198               	movf	find_volume@fs& (0+255),w,b
  7048  000F08  26D9               	addwf	fsr2l,f,c
  7049  000F0A  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7050  000F0C  22DA               	addwfc	fsr2h,f,c
  7051  000F0E  CFDE F04A          	movff	postinc2,??_find_volume
  7052  000F12  CFDE F04B          	movff	postinc2,??_find_volume+1
  7053  000F16  CFDE F04C          	movff	postinc2,??_find_volume+2
  7054  000F1A  CFDE F04D          	movff	postinc2,??_find_volume+3
  7055  000F1E  518D               	movf	find_volume@fasize& (0+255),w,b
  7056  000F20  244A               	addwf	??_find_volume,w,c
  7057  000F22  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7058  000F24  518E               	movf	(find_volume@fasize+1)& (0+255),w,b
  7059  000F26  204B               	addwfc	??_find_volume+1,w,c
  7060  000F28  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7061  000F2A  518F               	movf	(find_volume@fasize+2)& (0+255),w,b
  7062  000F2C  204C               	addwfc	??_find_volume+2,w,c
  7063  000F2E  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7064  000F30  5190               	movf	(find_volume@fasize+3)& (0+255),w,b
  7065  000F32  204D               	addwfc	??_find_volume+3,w,c
  7066  000F34  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7067  000F36  EE20 F022          	lfsr	2,34
  7068  000F3A  5198               	movf	find_volume@fs& (0+255),w,b
  7069  000F3C  26D9               	addwf	fsr2l,f,c
  7070  000F3E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7071  000F40  22DA               	addwfc	fsr2h,f,c
  7072  000F42  C04E  FFDE         	movff	??_find_volume+4,postinc2
  7073  000F46  C04F  FFDE         	movff	??_find_volume+5,postinc2
  7074  000F4A  C050  FFDE         	movff	??_find_volume+6,postinc2
  7075  000F4E  C051  FFDE         	movff	??_find_volume+7,postinc2
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;ff.c: 2320:   szbfat = (fmt == 2) ?
  7079  000F52  0E02               	movlw	2
  7080  000F54  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7081  000F56  B4D8               	btfsc	status,2,c
  7082  000F58  D044               	goto	l5736
  7083                           
  7084                           ; BSR set to: 0
  7085  000F5A  EE20 F012          	lfsr	2,18
  7086  000F5E  5198               	movf	find_volume@fs& (0+255),w,b
  7087  000F60  26D9               	addwf	fsr2l,f,c
  7088  000F62  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7089  000F64  22DA               	addwfc	fsr2h,f,c
  7090  000F66  CFDE F04A          	movff	postinc2,??_find_volume
  7091  000F6A  CFDE F04B          	movff	postinc2,??_find_volume+1
  7092  000F6E  CFDE F04C          	movff	postinc2,??_find_volume+2
  7093  000F72  CFDE F04D          	movff	postinc2,??_find_volume+3
  7094  000F76  0E01               	movlw	1
  7095  000F78  144A               	andwf	??_find_volume,w,c
  7096  000F7A  6E4E               	movwf	(??_find_volume+4)& (0+255),c
  7097  000F7C  0E00               	movlw	0
  7098  000F7E  144B               	andwf	??_find_volume+1,w,c
  7099  000F80  6E4F               	movwf	(??_find_volume+5)& (0+255),c
  7100  000F82  0E00               	movlw	0
  7101  000F84  144C               	andwf	??_find_volume+2,w,c
  7102  000F86  6E50               	movwf	(??_find_volume+6)& (0+255),c
  7103  000F88  0E00               	movlw	0
  7104  000F8A  144D               	andwf	??_find_volume+3,w,c
  7105  000F8C  6E51               	movwf	(??_find_volume+7)& (0+255),c
  7106  000F8E  EE20 F012          	lfsr	2,18
  7107  000F92  5198               	movf	find_volume@fs& (0+255),w,b
  7108  000F94  26D9               	addwf	fsr2l,f,c
  7109  000F96  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7110  000F98  22DA               	addwfc	fsr2h,f,c
  7111  000F9A  CFDE F001          	movff	postinc2,___lmul@multiplier
  7112  000F9E  CFDE F002          	movff	postinc2,___lmul@multiplier+1
  7113  000FA2  CFDE F003          	movff	postinc2,___lmul@multiplier+2
  7114  000FA6  CFDE F004          	movff	postinc2,___lmul@multiplier+3
  7115  000FAA  0E03               	movlw	3
  7116  000FAC  6E05               	movwf	___lmul@multiplicand,c
  7117  000FAE  0E00               	movlw	0
  7118  000FB0  6E06               	movwf	___lmul@multiplicand+1,c
  7119  000FB2  0E00               	movlw	0
  7120  000FB4  6E07               	movwf	___lmul@multiplicand+2,c
  7121  000FB6  0E00               	movlw	0
  7122  000FB8  6E08               	movwf	___lmul@multiplicand+3,c
  7123  000FBA  EC87  F029         	call	___lmul	;wreg free
  7124  000FBE  90D8               	bcf	status,0,c
  7125  000FC0  3204               	rrcf	?___lmul+3,f,c
  7126  000FC2  3203               	rrcf	?___lmul+2,f,c
  7127  000FC4  3202               	rrcf	?___lmul+1,f,c
  7128  000FC6  3201               	rrcf	?___lmul,f,c
  7129  000FC8  504E               	movf	??_find_volume+4,w,c
  7130  000FCA  2401               	addwf	?___lmul,w,c
  7131  000FCC  0100               	movlb	0	; () banked
  7132  000FCE  6F76               	movwf	find_volume@szbfat& (0+255),b
  7133  000FD0  504F               	movf	??_find_volume+5,w,c
  7134  000FD2  2002               	addwfc	?___lmul+1,w,c
  7135  000FD4  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7136  000FD6  5050               	movf	??_find_volume+6,w,c
  7137  000FD8  2003               	addwfc	?___lmul+2,w,c
  7138  000FDA  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7139  000FDC  5051               	movf	??_find_volume+7,w,c
  7140  000FDE  2004               	addwfc	?___lmul+3,w,c
  7141  000FE0  D016               	goto	L6
  7142  000FE2                     l5736:
  7143                           
  7144                           ; BSR set to: 0
  7145  000FE2  EE20 F012          	lfsr	2,18
  7146  000FE6  5198               	movf	find_volume@fs& (0+255),w,b
  7147  000FE8  26D9               	addwf	fsr2l,f,c
  7148  000FEA  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7149  000FEC  22DA               	addwfc	fsr2h,f,c
  7150  000FEE  CFDE F04A          	movff	postinc2,??_find_volume
  7151  000FF2  CFDE F04B          	movff	postinc2,??_find_volume+1
  7152  000FF6  CFDE F04C          	movff	postinc2,??_find_volume+2
  7153  000FFA  CFDE F04D          	movff	postinc2,??_find_volume+3
  7154  000FFE  90D8               	bcf	status,0,c
  7155  001000  344A               	rlcf	??_find_volume,w,c
  7156  001002  6F76               	movwf	find_volume@szbfat& (0+255),b
  7157  001004  344B               	rlcf	??_find_volume+1,w,c
  7158  001006  6F77               	movwf	(find_volume@szbfat+1)& (0+255),b
  7159  001008  344C               	rlcf	??_find_volume+2,w,c
  7160  00100A  6F78               	movwf	(find_volume@szbfat+2)& (0+255),b
  7161  00100C  344D               	rlcf	??_find_volume+3,w,c
  7162  00100E                     L6:
  7163  00100E  6F79               	movwf	(find_volume@szbfat+3)& (0+255),b
  7164  001010                     l612:
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;ff.c: 2323:  if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))
  7168  001010  0EFF               	movlw	255
  7169  001012  2576               	addwf	find_volume@szbfat& (0+255),w,b
  7170  001014  6E4A               	movwf	??_find_volume& (0+255),c
  7171  001016  0E01               	movlw	1
  7172  001018  2177               	addwfc	(find_volume@szbfat+1)& (0+255),w,b
  7173  00101A  6E4B               	movwf	(??_find_volume+1)& (0+255),c
  7174  00101C  0E00               	movlw	0
  7175  00101E  2178               	addwfc	(find_volume@szbfat+2)& (0+255),w,b
  7176  001020  6E4C               	movwf	(??_find_volume+2)& (0+255),c
  7177  001022  0E00               	movlw	0
  7178  001024  2179               	addwfc	(find_volume@szbfat+3)& (0+255),w,b
  7179  001026  6E4D               	movwf	(??_find_volume+3)& (0+255),c
  7180  001028  0E0A               	movlw	10
  7181  00102A  D005               	goto	u7650
  7182  00102C                     u7655:
  7183  00102C  90D8               	bcf	status,0,c
  7184  00102E  324D               	rrcf	??_find_volume+3,f,c
  7185  001030  324C               	rrcf	??_find_volume+2,f,c
  7186  001032  324B               	rrcf	??_find_volume+1,f,c
  7187  001034  324A               	rrcf	??_find_volume,f,c
  7188  001036                     u7650:
  7189  001036  2EE8               	decfsz	wreg,f,c
  7190  001038  D7F9               	goto	u7655
  7191  00103A  EE20 F016          	lfsr	2,22
  7192  00103E  5198               	movf	find_volume@fs& (0+255),w,b
  7193  001040  26D9               	addwf	fsr2l,f,c
  7194  001042  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7195  001044  22DA               	addwfc	fsr2h,f,c
  7196  001046  504A               	movf	??_find_volume,w,c
  7197  001048  5CDE               	subwf	postinc2,w,c
  7198  00104A  504B               	movf	??_find_volume+1,w,c
  7199  00104C  58DE               	subwfb	postinc2,w,c
  7200  00104E  504C               	movf	??_find_volume+2,w,c
  7201  001050  58DE               	subwfb	postinc2,w,c
  7202  001052  504D               	movf	??_find_volume+3,w,c
  7203  001054  58DE               	subwfb	postinc2,w,c
  7204  001056  A0D8               	btfss	status,0,c
  7205  001058  D52D               	goto	u7450
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;ff.c: 2328:  fs->last_clust = fs->free_clust = 0xFFFFFFFF;
  7209  00105A  EE20 F00E          	lfsr	2,14
  7210  00105E  5198               	movf	find_volume@fs& (0+255),w,b
  7211  001060  26D9               	addwf	fsr2l,f,c
  7212  001062  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7213  001064  22DA               	addwfc	fsr2h,f,c
  7214  001066  0EFF               	movlw	255
  7215  001068  6EDE               	movwf	postinc2,c
  7216  00106A  0EFF               	movlw	255
  7217  00106C  6EDE               	movwf	postinc2,c
  7218  00106E  0EFF               	movlw	255
  7219  001070  6EDE               	movwf	postinc2,c
  7220  001072  0EFF               	movlw	255
  7221  001074  6EDD               	movwf	postdec2,c
  7222  001076  52DD               	movf	postdec2,f,c
  7223  001078  52DD               	movf	postdec2,f,c
  7224  00107A  EE10 F00A          	lfsr	1,10
  7225  00107E  5198               	movf	find_volume@fs& (0+255),w,b
  7226  001080  26E1               	addwf	fsr1l,f,c
  7227  001082  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7228  001084  22E2               	addwfc	fsr1h,f,c
  7229  001086  CFDE FFE6          	movff	postinc2,postinc1
  7230  00108A  CFDE FFE6          	movff	postinc2,postinc1
  7231  00108E  CFDE FFE6          	movff	postinc2,postinc1
  7232  001092  CFDE FFE6          	movff	postinc2,postinc1
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;ff.c: 2331:  fs->fsi_flag = 0x80;
  7236  001096  EE20 F005          	lfsr	2,5
  7237  00109A  5198               	movf	find_volume@fs& (0+255),w,b
  7238  00109C  26D9               	addwf	fsr2l,f,c
  7239  00109E  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7240  0010A0  22DA               	addwfc	fsr2h,f,c
  7241  0010A2  0E80               	movlw	128
  7242  0010A4  6EDF               	movwf	indf2,c
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;ff.c: 2333:  if (fmt == 3
  7246  0010A6  0E03               	movlw	3
  7247  0010A8  1997               	xorwf	find_volume@fmt& (0+255),w,b
  7248  0010AA  A4D8               	btfss	status,2,c
  7249  0010AC  D083               	goto	l5760
  7250                           
  7251                           ; BSR set to: 0
  7252  0010AE  EE20 F05E          	lfsr	2,94
  7253  0010B2  5198               	movf	find_volume@fs& (0+255),w,b
  7254  0010B4  26D9               	addwf	fsr2l,f,c
  7255  0010B6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7256  0010B8  22DA               	addwfc	fsr2h,f,c
  7257  0010BA  04DE               	decf	postinc2,w,c
  7258  0010BC  10DE               	iorwf	postinc2,w,c
  7259  0010BE  A4D8               	btfss	status,2,c
  7260  0010C0  D079               	goto	l5760
  7261                           
  7262                           ; BSR set to: 0
  7263  0010C2  C098  F030         	movff	find_volume@fs,move_window@fs
  7264  0010C6  C099  F031         	movff	find_volume@fs+1,move_window@fs+1
  7265  0010CA  0E01               	movlw	1
  7266  0010CC  2591               	addwf	find_volume@bsect& (0+255),w,b
  7267  0010CE  6E32               	movwf	move_window@sector,c
  7268  0010D0  0E00               	movlw	0
  7269  0010D2  2192               	addwfc	(find_volume@bsect+1)& (0+255),w,b
  7270  0010D4  6E33               	movwf	move_window@sector+1,c
  7271  0010D6  0E00               	movlw	0
  7272  0010D8  2193               	addwfc	(find_volume@bsect+2)& (0+255),w,b
  7273  0010DA  6E34               	movwf	move_window@sector+2,c
  7274  0010DC  0E00               	movlw	0
  7275  0010DE  2194               	addwfc	(find_volume@bsect+3)& (0+255),w,b
  7276  0010E0  6E35               	movwf	move_window@sector+3,c
  7277  0010E2  EC82  F027         	call	_move_window	;wreg free
  7278  0010E6  0900               	iorlw	0
  7279  0010E8  A4D8               	btfss	status,2,c
  7280  0010EA  D064               	goto	l5760
  7281                           
  7282                           ;ff.c: 2336:  {;ff.c: 2337:   fs->fsi_flag = 0;
  7283  0010EC  0100               	movlb	0	; () banked
  7284  0010EE  EE20 F005          	lfsr	2,5
  7285  0010F2  5198               	movf	find_volume@fs& (0+255),w,b
  7286  0010F4  26D9               	addwf	fsr2l,f,c
  7287  0010F6  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7288  0010F8  22DA               	addwfc	fsr2h,f,c
  7289  0010FA  0E00               	movlw	0
  7290  0010FC  6EDF               	movwf	indf2,c
  7291                           
  7292                           ;ff.c: 2338:   if ((WORD)(*(WORD*)(BYTE*)(fs->win + 510)) == 0xAA55
  7293  0010FE  EE22 F02C          	lfsr	2,556
  7294  001102  5198               	movf	find_volume@fs& (0+255),w,b
  7295  001104  26D9               	addwf	fsr2l,f,c
  7296  001106  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7297  001108  22DA               	addwfc	fsr2h,f,c
  7298  00110A  0E55               	movlw	85
  7299  00110C  18DE               	xorwf	postinc2,w,c
  7300  00110E  E152               	bnz	l5760
  7301  001110  0EAA               	movlw	170
  7302  001112  18DE               	xorwf	postinc2,w,c
  7303  001114  A4D8               	btfss	status,2,c
  7304  001116  D04E               	goto	l5760
  7305                           
  7306                           ; BSR set to: 0
  7307  001118  EE20 F02E          	lfsr	2,46
  7308  00111C  5198               	movf	find_volume@fs& (0+255),w,b
  7309  00111E  26D9               	addwf	fsr2l,f,c
  7310  001120  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7311  001122  22DA               	addwfc	fsr2h,f,c
  7312  001124  0E52               	movlw	82
  7313  001126  18DE               	xorwf	postinc2,w,c
  7314  001128  E145               	bnz	l5760
  7315  00112A  0E52               	movlw	82
  7316  00112C  18DE               	xorwf	postinc2,w,c
  7317  00112E  E142               	bnz	l5760
  7318  001130  0E61               	movlw	97
  7319  001132  18DE               	xorwf	postinc2,w,c
  7320  001134  E13F               	bnz	l5760
  7321  001136  0E41               	movlw	65
  7322  001138  18DE               	xorwf	postinc2,w,c
  7323  00113A  A4D8               	btfss	status,2,c
  7324  00113C  D03B               	goto	l5760
  7325                           
  7326                           ; BSR set to: 0
  7327  00113E  EE22 F012          	lfsr	2,530
  7328  001142  5198               	movf	find_volume@fs& (0+255),w,b
  7329  001144  26D9               	addwf	fsr2l,f,c
  7330  001146  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7331  001148  22DA               	addwfc	fsr2h,f,c
  7332  00114A  0E72               	movlw	114
  7333  00114C  18DE               	xorwf	postinc2,w,c
  7334  00114E  E132               	bnz	l5760
  7335  001150  0E72               	movlw	114
  7336  001152  18DE               	xorwf	postinc2,w,c
  7337  001154  E12F               	bnz	l5760
  7338  001156  0E41               	movlw	65
  7339  001158  18DE               	xorwf	postinc2,w,c
  7340  00115A  E12C               	bnz	l5760
  7341  00115C  0E61               	movlw	97
  7342  00115E  18DE               	xorwf	postinc2,w,c
  7343  001160  A4D8               	btfss	status,2,c
  7344  001162  D028               	goto	l5760
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;ff.c: 2341:   {;ff.c: 2343:    fs->free_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 488)
      +                          );
  7348  001164  EE22 F016          	lfsr	2,534
  7349  001168  5198               	movf	find_volume@fs& (0+255),w,b
  7350  00116A  26D9               	addwf	fsr2l,f,c
  7351  00116C  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7352  00116E  22DA               	addwfc	fsr2h,f,c
  7353  001170  EE10 F00E          	lfsr	1,14
  7354  001174  5198               	movf	find_volume@fs& (0+255),w,b
  7355  001176  26E1               	addwf	fsr1l,f,c
  7356  001178  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7357  00117A  22E2               	addwfc	fsr1h,f,c
  7358  00117C  CFDE FFE6          	movff	postinc2,postinc1
  7359  001180  CFDE FFE6          	movff	postinc2,postinc1
  7360  001184  CFDE FFE6          	movff	postinc2,postinc1
  7361  001188  CFDE FFE6          	movff	postinc2,postinc1
  7362                           
  7363                           ;ff.c: 2346:    fs->last_clust = (DWORD)(*(DWORD*)(BYTE*)(fs->win + 492));
  7364  00118C  EE22 F01A          	lfsr	2,538
  7365  001190  5198               	movf	find_volume@fs& (0+255),w,b
  7366  001192  26D9               	addwf	fsr2l,f,c
  7367  001194  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7368  001196  22DA               	addwfc	fsr2h,f,c
  7369  001198  EE10 F00A          	lfsr	1,10
  7370  00119C  5198               	movf	find_volume@fs& (0+255),w,b
  7371  00119E  26E1               	addwf	fsr1l,f,c
  7372  0011A0  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7373  0011A2  22E2               	addwfc	fsr1h,f,c
  7374  0011A4  CFDE FFE6          	movff	postinc2,postinc1
  7375  0011A8  CFDE FFE6          	movff	postinc2,postinc1
  7376  0011AC  CFDE FFE6          	movff	postinc2,postinc1
  7377  0011B0  CFDE FFE6          	movff	postinc2,postinc1
  7378  0011B4                     l5760:
  7379                           
  7380                           ;ff.c: 2352:  fs->fs_type = fmt;
  7381  0011B4  C098  FFD9         	movff	find_volume@fs,fsr2l
  7382  0011B8  C099  FFDA         	movff	find_volume@fs+1,fsr2h
  7383  0011BC  C097  FFDF         	movff	find_volume@fmt,indf2
  7384                           
  7385                           ;ff.c: 2353:  fs->id = ++Fsid;
  7386  0011C0  0100               	movlb	0	; () banked
  7387  0011C2  4BD4               	infsnz	_Fsid& (0+255),f,b
  7388  0011C4  2BD5               	incf	(_Fsid+1)& (0+255),f,b
  7389  0011C6  EE20 F006          	lfsr	2,6
  7390  0011CA  5198               	movf	find_volume@fs& (0+255),w,b
  7391  0011CC  26D9               	addwf	fsr2l,f,c
  7392  0011CE  5199               	movf	(find_volume@fs+1)& (0+255),w,b
  7393  0011D0  22DA               	addwfc	fsr2h,f,c
  7394  0011D2  C0D4  FFDE         	movff	_Fsid,postinc2
  7395  0011D6  C0D5  FFDD         	movff	_Fsid+1,postdec2
  7396  0011DA  EF64  F004         	goto	l5540
  7397  0011DE                     __end_of_find_volume:
  7398                           	opt callstack 0
  7399                           
  7400 ;; *************** function _get_ldnumber *****************
  7401 ;; Defined at:
  7402 ;;		line 2114 in file "ff.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  path            2    0[COMRAM] PTR PTR const unsigned c
  7405 ;;		 -> f_open@path(2), f_mount@path(2), f_mount@rp(2), 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  tt              2   12[COMRAM] PTR const unsigned char 
  7408 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7409 ;;  i               2   10[COMRAM] unsigned short 
  7410 ;;  vol             2    8[COMRAM] int 
  7411 ;;  tp              2    6[COMRAM] PTR const unsigned char 
  7412 ;;		 -> STR_3(11), STR_2(1), STR_1(1), 
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  2    0[COMRAM] int 
  7415 ;; Registers used:
  7416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7422 ;;      Params:         2       0       0       0       0       0       0       0       0
  7423 ;;      Locals:        10       0       0       0       0       0       0       0       0
  7424 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7425 ;;      Totals:        14       0       0       0       0       0       0       0       0
  7426 ;;Total ram usage:       14 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; This function calls:
  7429 ;;		Nothing
  7430 ;; This function is called by:
  7431 ;;		_find_volume
  7432 ;;		_f_mount
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           	psect	text18
  7437  004986                     __ptext18:
  7438                           	opt callstack 0
  7439  004986                     _get_ldnumber:
  7440                           	opt callstack 27
  7441                           
  7442                           ;ff.c: 2115:  const TCHAR** path;ff.c: 2117: {;ff.c: 2118:  const TCHAR *tp, *tt;;ff.c: 
      +                          2119:  UINT i;;ff.c: 2120:  int vol = -1;
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;incstack = 0
  7446  004986  6809               	setf	get_ldnumber@vol,c
  7447  004988  680A               	setf	get_ldnumber@vol+1,c
  7448                           
  7449                           ;ff.c: 2129:  if (*path) {
  7450  00498A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7451  00498E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7452  004992  50DE               	movf	postinc2,w,c
  7453  004994  10DE               	iorwf	postinc2,w,c
  7454  004996  B4D8               	btfsc	status,2,c
  7455  004998  D05B               	goto	l5316
  7456                           
  7457                           ;ff.c: 2130:   for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;
  7458  00499A  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7459  00499E  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7460  0049A2  CFDE F00D          	movff	postinc2,get_ldnumber@tt
  7461  0049A6  CFDD F00E          	movff	postdec2,get_ldnumber@tt+1
  7462  0049AA  D002               	goto	l5290
  7463  0049AC                     l5288:
  7464  0049AC  4A0D               	infsnz	get_ldnumber@tt,f,c
  7465  0049AE  2A0E               	incf	get_ldnumber@tt+1,f,c
  7466  0049B0                     l5290:
  7467  0049B0  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7468  0049B4  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7469  0049B8                     	if	0	;tblptru may be non-zero
  7470  0049B8                     	endif
  7471  0049B8                     	if	0	;tblptru may be non-zero
  7472  0049B8                     	endif
  7473  0049B8  0E20               	movlw	32
  7474  0049BA  0008               	tblrd		*
  7475  0049BC  64F5               	cpfsgt	tablat,c
  7476  0049BE  D009               	goto	u6920
  7477  0049C0  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7478  0049C4  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7479  0049C8                     	if	0	;tblptru may be non-zero
  7480  0049C8                     	endif
  7481  0049C8                     	if	0	;tblptru may be non-zero
  7482  0049C8                     	endif
  7483  0049C8  0008               	tblrd		*
  7484  0049CA  50F5               	movf	tablat,w,c
  7485  0049CC  0A3A               	xorlw	58
  7486  0049CE  A4D8               	btfss	status,2,c
  7487  0049D0  D7ED               	goto	l5288
  7488  0049D2                     u6920:
  7489                           
  7490                           ;ff.c: 2131:   if (*tt == ':') {
  7491  0049D2  C00D  FFF6         	movff	get_ldnumber@tt,tblptrl
  7492  0049D6  C00E  FFF7         	movff	get_ldnumber@tt+1,tblptrh
  7493  0049DA                     	if	0	;tblptru may be non-zero
  7494  0049DA                     	endif
  7495  0049DA                     	if	0	;tblptru may be non-zero
  7496  0049DA                     	endif
  7497  0049DA  0008               	tblrd		*
  7498  0049DC  50F5               	movf	tablat,w,c
  7499  0049DE  0A3A               	xorlw	58
  7500  0049E0  A4D8               	btfss	status,2,c
  7501  0049E2  D03B               	goto	l5320
  7502                           
  7503                           ;ff.c: 2132:    tp = *path;
  7504  0049E4  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7505  0049E8  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7506  0049EC  CFDE F007          	movff	postinc2,get_ldnumber@tp
  7507  0049F0  CFDD F008          	movff	postdec2,get_ldnumber@tp+1
  7508                           
  7509                           ;ff.c: 2133:    i = *tp++ - '0';
  7510  0049F4  C007  FFF6         	movff	get_ldnumber@tp,tblptrl
  7511  0049F8  C008  FFF7         	movff	get_ldnumber@tp+1,tblptrh
  7512  0049FC                     	if	0	;tblptru may be non-zero
  7513  0049FC                     	endif
  7514  0049FC                     	if	0	;tblptru may be non-zero
  7515  0049FC                     	endif
  7516  0049FC  0008               	tblrd		*
  7517  0049FE  CFF5 F003          	movff	tablat,??_get_ldnumber
  7518  004A02  0ED0               	movlw	208
  7519  004A04  2403               	addwf	??_get_ldnumber,w,c
  7520  004A06  6E0B               	movwf	get_ldnumber@i,c
  7521  004A08  6A0C               	clrf	get_ldnumber@i+1,c
  7522  004A0A  0EFF               	movlw	255
  7523  004A0C  220C               	addwfc	get_ldnumber@i+1,f,c
  7524  004A0E  4A07               	infsnz	get_ldnumber@tp,f,c
  7525  004A10  2A08               	incf	get_ldnumber@tp+1,f,c
  7526                           
  7527                           ;ff.c: 2134:    if (i < 10 && tp == tt) {
  7528  004A12  500C               	movf	get_ldnumber@i+1,w,c
  7529  004A14  E11D               	bnz	l5316
  7530  004A16  0E0A               	movlw	10
  7531  004A18  5C0B               	subwf	get_ldnumber@i,w,c
  7532  004A1A  B0D8               	btfsc	status,0,c
  7533  004A1C  D019               	goto	l5316
  7534  004A1E  500D               	movf	get_ldnumber@tt,w,c
  7535  004A20  1807               	xorwf	get_ldnumber@tp,w,c
  7536  004A22  E116               	bnz	l5316
  7537  004A24  500E               	movf	get_ldnumber@tt+1,w,c
  7538  004A26  1808               	xorwf	get_ldnumber@tp+1,w,c
  7539  004A28  A4D8               	btfss	status,2,c
  7540  004A2A  D012               	goto	l5316
  7541                           
  7542                           ;ff.c: 2135:     if (i < 1) {
  7543  004A2C  500B               	movf	get_ldnumber@i,w,c
  7544  004A2E  100C               	iorwf	get_ldnumber@i+1,w,c
  7545  004A30  A4D8               	btfss	status,2,c
  7546  004A32  D00E               	goto	l5316
  7547                           
  7548                           ;ff.c: 2136:      vol = (int)i;
  7549  004A34  C00B  F009         	movff	get_ldnumber@i,get_ldnumber@vol
  7550  004A38  C00C  F00A         	movff	get_ldnumber@i+1,get_ldnumber@vol+1
  7551                           
  7552                           ;ff.c: 2137:      *path = ++tt;
  7553  004A3C  4A0D               	infsnz	get_ldnumber@tt,f,c
  7554  004A3E  2A0E               	incf	get_ldnumber@tt+1,f,c
  7555  004A40  C001  FFD9         	movff	get_ldnumber@path,fsr2l
  7556  004A44  C002  FFDA         	movff	get_ldnumber@path+1,fsr2h
  7557  004A48  C00D  FFDE         	movff	get_ldnumber@tt,postinc2
  7558  004A4C  C00E  FFDD         	movff	get_ldnumber@tt+1,postdec2
  7559  004A50                     l5316:
  7560                           
  7561                           ;ff.c: 2156:    return vol;
  7562  004A50  C009  F001         	movff	get_ldnumber@vol,?_get_ldnumber
  7563  004A54  C00A  F002         	movff	get_ldnumber@vol+1,?_get_ldnumber+1
  7564  004A58  0012               	return	
  7565  004A5A                     l5320:
  7566                           
  7567                           ;ff.c: 2161:   vol = 0;
  7568  004A5A  0E00               	movlw	0
  7569  004A5C  6E0A               	movwf	get_ldnumber@vol+1,c
  7570  004A5E  0E00               	movlw	0
  7571  004A60  6E09               	movwf	get_ldnumber@vol,c
  7572  004A62  D7F6               	goto	l5316
  7573  004A64                     __end_of_get_ldnumber:
  7574                           	opt callstack 0
  7575                           
  7576 ;; *************** function _disk_initialize *****************
  7577 ;; Defined at:
  7578 ;;		line 296 in file "diskio.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  pdrv            1    wreg     unsigned char 
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;  pdrv            1   17[COMRAM] unsigned char 
  7583 ;;  ocr             4   18[COMRAM] unsigned char [4]
  7584 ;;  tmr             2   26[COMRAM] unsigned short 
  7585 ;;  n               1   28[COMRAM] unsigned char 
  7586 ;;  ty              1   25[COMRAM] unsigned char 
  7587 ;;  cmd             1   24[COMRAM] unsigned char 
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      unsigned char 
  7590 ;; Registers used:
  7591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7592 ;; Tracked objects:
  7593 ;;		On entry : 0/0
  7594 ;;		On exit  : 0/0
  7595 ;;		Unchanged: 0/0
  7596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7597 ;;      Params:         0       0       0       0       0       0       0       0       0
  7598 ;;      Locals:        12       0       0       0       0       0       0       0       0
  7599 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7600 ;;      Totals:        13       0       0       0       0       0       0       0       0
  7601 ;;Total ram usage:       13 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    5
  7604 ;; This function calls:
  7605 ;;		_SPI1_Exchange8bit
  7606 ;;		_SPI1_Initialize
  7607 ;;		_SPI1_Open
  7608 ;;		_deselect
  7609 ;;		_send_cmd
  7610 ;; This function is called by:
  7611 ;;		_find_volume
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text19
  7616  003B96                     __ptext19:
  7617                           	opt callstack 0
  7618  003B96                     _disk_initialize:
  7619                           	opt callstack 22
  7620                           
  7621                           ;incstack = 0
  7622                           ;disk_initialize@pdrv stored from wreg
  7623  003B96  6E12               	movwf	disk_initialize@pdrv,c
  7624                           
  7625                           ;diskio.c: 297:  BYTE pdrv;diskio.c: 299: {;diskio.c: 300:  BYTE n, cmd, ty, ocr[4];;dis
      +                          kio.c: 301:  UINT tmr;;diskio.c: 304:  if (pdrv) return 0x01;
  7626  003B98  5012               	movf	disk_initialize@pdrv,w,c
  7627  003B9A  B4D8               	btfsc	status,2,c
  7628  003B9C  D002               	goto	l135
  7629  003B9E  0E01               	movlw	1
  7630  003BA0  0012               	return	
  7631  003BA2                     l135:
  7632                           
  7633                           ;diskio.c: 306:  if (Stat & 0x02) return Stat;
  7634  003BA2  0100               	movlb	0	; () banked
  7635  003BA4  A3F9               	btfss	_Stat& (0+255),1,b
  7636  003BA6  D003               	goto	l4918
  7637  003BA8                     u6190:
  7638  003BA8  0100               	movlb	0	; () banked
  7639  003BAA  51F9               	movf	_Stat& (0+255),w,b
  7640  003BAC  0012               	return	
  7641  003BAE                     l4918:
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;diskio.c: 308:  SPI1_Initialize();
  7645  003BAE  EC22  F02B         	call	_SPI1_Initialize	;wreg free
  7646                           
  7647                           ;diskio.c: 309:  for (n = 10; n; n--) SPI1_Exchange8bit(0xFF);
  7648  003BB2  0E0A               	movlw	10
  7649  003BB4  6E1D               	movwf	disk_initialize@n,c
  7650  003BB6  D004               	goto	l4926
  7651  003BB8                     l4922:
  7652  003BB8  0EFF               	movlw	255
  7653  003BBA  EC0C  F02B         	call	_SPI1_Exchange8bit
  7654  003BBE  061D               	decf	disk_initialize@n,f,c
  7655  003BC0                     l4926:
  7656  003BC0  501D               	movf	disk_initialize@n,w,c
  7657  003BC2  A4D8               	btfss	status,2,c
  7658  003BC4  D7F9               	goto	l4922
  7659                           
  7660                           ;diskio.c: 311:  ty = 0;
  7661  003BC6  0E00               	movlw	0
  7662  003BC8  6E1A               	movwf	disk_initialize@ty,c
  7663                           
  7664                           ;diskio.c: 312:  if (send_cmd((0), 0) == 1) {
  7665  003BCA  0E00               	movlw	0
  7666  003BCC  6E0B               	movwf	send_cmd@arg,c
  7667  003BCE  0E00               	movlw	0
  7668  003BD0  6E0C               	movwf	send_cmd@arg+1,c
  7669  003BD2  0E00               	movlw	0
  7670  003BD4  6E0D               	movwf	send_cmd@arg+2,c
  7671  003BD6  0E00               	movlw	0
  7672  003BD8  6E0E               	movwf	send_cmd@arg+3,c
  7673  003BDA  0E00               	movlw	0
  7674  003BDC  ECFE  F029         	call	_send_cmd
  7675  003BE0  06E8               	decf	wreg,f,c
  7676  003BE2  A4D8               	btfss	status,2,c
  7677  003BE4  D0C1               	goto	l157
  7678                           
  7679                           ;diskio.c: 313:   if (send_cmd((8), 0x1AA) == 1) {
  7680  003BE6  0EAA               	movlw	170
  7681  003BE8  6E0B               	movwf	send_cmd@arg,c
  7682  003BEA  0E01               	movlw	1
  7683  003BEC  6E0C               	movwf	send_cmd@arg+1,c
  7684  003BEE  0E00               	movlw	0
  7685  003BF0  6E0D               	movwf	send_cmd@arg+2,c
  7686  003BF2  0E00               	movlw	0
  7687  003BF4  6E0E               	movwf	send_cmd@arg+3,c
  7688  003BF6  0E08               	movlw	8
  7689  003BF8  ECFE  F029         	call	_send_cmd
  7690  003BFC  06E8               	decf	wreg,f,c
  7691  003BFE  A4D8               	btfss	status,2,c
  7692  003C00  D067               	goto	l4982
  7693                           
  7694                           ;diskio.c: 314:    for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7695  003C02  0E00               	movlw	0
  7696  003C04  6E1D               	movwf	disk_initialize@n,c
  7697  003C06                     l4940:
  7698  003C06  0E13               	movlw	low disk_initialize@ocr
  7699  003C08  241D               	addwf	disk_initialize@n,w,c
  7700  003C0A  6ED9               	movwf	fsr2l,c
  7701  003C0C  6ADA               	clrf	fsr2h,c
  7702  003C0E  0E00               	movlw	high disk_initialize@ocr
  7703  003C10  22DA               	addwfc	fsr2h,f,c
  7704  003C12  0EFF               	movlw	255
  7705  003C14  EC0C  F02B         	call	_SPI1_Exchange8bit
  7706  003C18  6EDF               	movwf	indf2,c
  7707  003C1A  2A1D               	incf	disk_initialize@n,f,c
  7708  003C1C  0E03               	movlw	3
  7709  003C1E  641D               	cpfsgt	disk_initialize@n,c
  7710  003C20  D7F2               	goto	l4940
  7711                           
  7712                           ;diskio.c: 315:    if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
  7713  003C22  0415               	decf	disk_initialize@ocr+2,w,c
  7714  003C24  A4D8               	btfss	status,2,c
  7715  003C26  D0A0               	goto	l157
  7716  003C28  0EAA               	movlw	170
  7717  003C2A  1816               	xorwf	disk_initialize@ocr+3,w,c
  7718  003C2C  A4D8               	btfss	status,2,c
  7719  003C2E  D09C               	goto	l157
  7720                           
  7721                           ;diskio.c: 316:     for (tmr = 1000; tmr; tmr--) {
  7722  003C30  0E03               	movlw	3
  7723  003C32  6E1C               	movwf	disk_initialize@tmr+1,c
  7724  003C34  0EE8               	movlw	232
  7725  003C36  6E1B               	movwf	disk_initialize@tmr,c
  7726  003C38  D018               	goto	l146
  7727  003C3A                     l4952:
  7728                           
  7729                           ;diskio.c: 317:      if (send_cmd((0x80+41), 1UL << 30) == 0) break;
  7730  003C3A  0E00               	movlw	0
  7731  003C3C  6E0B               	movwf	send_cmd@arg,c
  7732  003C3E  0E00               	movlw	0
  7733  003C40  6E0C               	movwf	send_cmd@arg+1,c
  7734  003C42  0E00               	movlw	0
  7735  003C44  6E0D               	movwf	send_cmd@arg+2,c
  7736  003C46  0E40               	movlw	64
  7737  003C48  6E0E               	movwf	send_cmd@arg+3,c
  7738  003C4A  0EA9               	movlw	169
  7739  003C4C  ECFE  F029         	call	_send_cmd
  7740  003C50  0900               	iorlw	0
  7741  003C52  B4D8               	btfsc	status,2,c
  7742  003C54  D00E               	goto	u6270
  7743                           
  7744                           ;diskio.c: 318:      _delay((unsigned long)((1)*(8000000/4000.0)));
  7745  003C56  0E03               	movlw	3
  7746  003C58  6E11               	movwf	??_disk_initialize& (0+255),c
  7747  003C5A  0E98               	movlw	152
  7748  003C5C                     u8997:
  7749  003C5C  2EE8               	decfsz	wreg,f,c
  7750  003C5E  D7FE               	bra	u8997
  7751  003C60  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7752  003C62  D7FC               	bra	u8997
  7753                           
  7754                           ;diskio.c: 319:     }
  7755  003C64  061B               	decf	disk_initialize@tmr,f,c
  7756  003C66  A0D8               	btfss	status,0,c
  7757  003C68  061C               	decf	disk_initialize@tmr+1,f,c
  7758  003C6A                     l146:
  7759  003C6A  501B               	movf	disk_initialize@tmr,w,c
  7760  003C6C  101C               	iorwf	disk_initialize@tmr+1,w,c
  7761  003C6E  A4D8               	btfss	status,2,c
  7762  003C70  D7E4               	goto	l4952
  7763  003C72                     u6270:
  7764                           
  7765                           ;diskio.c: 320:     if (tmr && send_cmd((58), 0) == 0) {
  7766  003C72  501B               	movf	disk_initialize@tmr,w,c
  7767  003C74  101C               	iorwf	disk_initialize@tmr+1,w,c
  7768  003C76  B4D8               	btfsc	status,2,c
  7769  003C78  D077               	goto	l157
  7770  003C7A  0E00               	movlw	0
  7771  003C7C  6E0B               	movwf	send_cmd@arg,c
  7772  003C7E  0E00               	movlw	0
  7773  003C80  6E0C               	movwf	send_cmd@arg+1,c
  7774  003C82  0E00               	movlw	0
  7775  003C84  6E0D               	movwf	send_cmd@arg+2,c
  7776  003C86  0E00               	movlw	0
  7777  003C88  6E0E               	movwf	send_cmd@arg+3,c
  7778  003C8A  0E3A               	movlw	58
  7779  003C8C  ECFE  F029         	call	_send_cmd
  7780  003C90  0900               	iorlw	0
  7781  003C92  A4D8               	btfss	status,2,c
  7782  003C94  D069               	goto	l157
  7783                           
  7784                           ;diskio.c: 321:      for (n = 0; n < 4; n++) ocr[n] = SPI1_Exchange8bit(0xFF);
  7785  003C96  0E00               	movlw	0
  7786  003C98  6E1D               	movwf	disk_initialize@n,c
  7787  003C9A                     l4970:
  7788  003C9A  0E13               	movlw	low disk_initialize@ocr
  7789  003C9C  241D               	addwf	disk_initialize@n,w,c
  7790  003C9E  6ED9               	movwf	fsr2l,c
  7791  003CA0  6ADA               	clrf	fsr2h,c
  7792  003CA2  0E00               	movlw	high disk_initialize@ocr
  7793  003CA4  22DA               	addwfc	fsr2h,f,c
  7794  003CA6  0EFF               	movlw	255
  7795  003CA8  EC0C  F02B         	call	_SPI1_Exchange8bit
  7796  003CAC  6EDF               	movwf	indf2,c
  7797  003CAE  2A1D               	incf	disk_initialize@n,f,c
  7798  003CB0  0E03               	movlw	3
  7799  003CB2  641D               	cpfsgt	disk_initialize@n,c
  7800  003CB4  D7F2               	goto	l4970
  7801                           
  7802                           ;diskio.c: 322:      ty = (ocr[0] & 0x40) ? 0x04 | 0x08 : 0x04;
  7803  003CB6  BC13               	btfsc	disk_initialize@ocr,6,c
  7804  003CB8  D004               	goto	l4978
  7805  003CBA  0E00               	movlw	0
  7806  003CBC  6E18               	movwf	_disk_initialize$328+1,c
  7807  003CBE  0E04               	movlw	4
  7808  003CC0  D003               	goto	L7
  7809  003CC2                     l4978:
  7810  003CC2  0E00               	movlw	0
  7811  003CC4  6E18               	movwf	_disk_initialize$328+1,c
  7812  003CC6  0E0C               	movlw	12
  7813  003CC8                     L7:
  7814  003CC8  6E17               	movwf	_disk_initialize$328,c
  7815  003CCA  C017  F01A         	movff	_disk_initialize$328,disk_initialize@ty
  7816  003CCE  D04C               	goto	l157
  7817  003CD0                     l4982:
  7818                           
  7819                           ;diskio.c: 326:    if (send_cmd((0x80+41), 0) <= 1) {
  7820  003CD0  0E00               	movlw	0
  7821  003CD2  6E0B               	movwf	send_cmd@arg,c
  7822  003CD4  0E00               	movlw	0
  7823  003CD6  6E0C               	movwf	send_cmd@arg+1,c
  7824  003CD8  0E00               	movlw	0
  7825  003CDA  6E0D               	movwf	send_cmd@arg+2,c
  7826  003CDC  0E00               	movlw	0
  7827  003CDE  6E0E               	movwf	send_cmd@arg+3,c
  7828  003CE0  0EA9               	movlw	169
  7829  003CE2  ECFE  F029         	call	_send_cmd
  7830  003CE6  6E11               	movwf	??_disk_initialize& (0+255),c
  7831  003CE8  0E02               	movlw	2
  7832  003CEA  6011               	cpfslt	??_disk_initialize,c
  7833  003CEC  D004               	goto	l4986
  7834                           
  7835                           ;diskio.c: 327:     ty = 0x02; cmd = (0x80+41);
  7836  003CEE  0E02               	movlw	2
  7837  003CF0  6E1A               	movwf	disk_initialize@ty,c
  7838  003CF2  0EA9               	movlw	169
  7839  003CF4  D003               	goto	L8
  7840  003CF6                     l4986:
  7841                           
  7842                           ;diskio.c: 329:     ty = 0x01; cmd = (1);
  7843  003CF6  0E01               	movlw	1
  7844  003CF8  6E1A               	movwf	disk_initialize@ty,c
  7845  003CFA  0E01               	movlw	1
  7846  003CFC                     L8:
  7847  003CFC  6E19               	movwf	disk_initialize@cmd,c
  7848                           
  7849                           ;diskio.c: 331:    for (tmr = 1000; tmr; tmr--) {
  7850                           
  7851                           ;diskio.c: 330:    }
  7852  003CFE  0E03               	movlw	3
  7853  003D00  6E1C               	movwf	disk_initialize@tmr+1,c
  7854  003D02  0EE8               	movlw	232
  7855  003D04  6E1B               	movwf	disk_initialize@tmr,c
  7856  003D06  D018               	goto	l160
  7857  003D08                     l4988:
  7858                           
  7859                           ;diskio.c: 332:     if (send_cmd(cmd, 0) == 0) break;
  7860  003D08  0E00               	movlw	0
  7861  003D0A  6E0B               	movwf	send_cmd@arg,c
  7862  003D0C  0E00               	movlw	0
  7863  003D0E  6E0C               	movwf	send_cmd@arg+1,c
  7864  003D10  0E00               	movlw	0
  7865  003D12  6E0D               	movwf	send_cmd@arg+2,c
  7866  003D14  0E00               	movlw	0
  7867  003D16  6E0E               	movwf	send_cmd@arg+3,c
  7868  003D18  5019               	movf	disk_initialize@cmd,w,c
  7869  003D1A  ECFE  F029         	call	_send_cmd
  7870  003D1E  0900               	iorlw	0
  7871  003D20  B4D8               	btfsc	status,2,c
  7872  003D22  D00E               	goto	u6340
  7873                           
  7874                           ;diskio.c: 333:     _delay((unsigned long)((1)*(8000000/4000.0)));
  7875  003D24  0E03               	movlw	3
  7876  003D26  6E11               	movwf	??_disk_initialize& (0+255),c
  7877  003D28  0E98               	movlw	152
  7878  003D2A                     u9007:
  7879  003D2A  2EE8               	decfsz	wreg,f,c
  7880  003D2C  D7FE               	bra	u9007
  7881  003D2E  2E11               	decfsz	??_disk_initialize& (0+255),f,c
  7882  003D30  D7FC               	bra	u9007
  7883                           
  7884                           ;diskio.c: 334:    }
  7885  003D32  061B               	decf	disk_initialize@tmr,f,c
  7886  003D34  A0D8               	btfss	status,0,c
  7887  003D36  061C               	decf	disk_initialize@tmr+1,f,c
  7888  003D38                     l160:
  7889  003D38  501B               	movf	disk_initialize@tmr,w,c
  7890  003D3A  101C               	iorwf	disk_initialize@tmr+1,w,c
  7891  003D3C  A4D8               	btfss	status,2,c
  7892  003D3E  D7E4               	goto	l4988
  7893  003D40                     u6340:
  7894                           
  7895                           ;diskio.c: 335:    if (!tmr || send_cmd((16), 512) != 0)
  7896  003D40  501B               	movf	disk_initialize@tmr,w,c
  7897  003D42  101C               	iorwf	disk_initialize@tmr+1,w,c
  7898  003D44  B4D8               	btfsc	status,2,c
  7899  003D46  D00E               	goto	u6360
  7900  003D48  0E00               	movlw	0
  7901  003D4A  6E0B               	movwf	send_cmd@arg,c
  7902  003D4C  0E02               	movlw	2
  7903  003D4E  6E0C               	movwf	send_cmd@arg+1,c
  7904  003D50  0E00               	movlw	0
  7905  003D52  6E0D               	movwf	send_cmd@arg+2,c
  7906  003D54  0E00               	movlw	0
  7907  003D56  6E0E               	movwf	send_cmd@arg+3,c
  7908  003D58  0E10               	movlw	16
  7909  003D5A  ECFE  F029         	call	_send_cmd
  7910  003D5E  0900               	iorlw	0
  7911  003D60  B4D8               	btfsc	status,2,c
  7912  003D62  D002               	goto	l157
  7913  003D64                     u6360:
  7914                           
  7915                           ;diskio.c: 336:     ty = 0;
  7916  003D64  0E00               	movlw	0
  7917  003D66  6E1A               	movwf	disk_initialize@ty,c
  7918  003D68                     l157:
  7919                           
  7920                           ;diskio.c: 339:  CardType = ty;
  7921  003D68  C01A  F0D8         	movff	disk_initialize@ty,_CardType
  7922                           
  7923                           ;diskio.c: 340:  deselect();
  7924  003D6C  EC29  F02B         	call	_deselect	;wreg free
  7925                           
  7926                           ;diskio.c: 342:  if (ty) {
  7927  003D70  501A               	movf	disk_initialize@ty,w,c
  7928  003D72  B4D8               	btfsc	status,2,c
  7929  003D74  D719               	goto	u6190
  7930                           
  7931                           ;diskio.c: 343:   Stat &= ~0x01;
  7932  003D76  0100               	movlb	0	; () banked
  7933  003D78  91F9               	bcf	_Stat& (0+255),0,b
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;diskio.c: 344:   SPI1_Open();
  7937  003D7A  EC14  F02B         	call	_SPI1_Open	;wreg free
  7938  003D7E  D714               	goto	u6190
  7939  003D80                     __end_of_disk_initialize:
  7940                           	opt callstack 0
  7941                           
  7942 ;; *************** function _SPI1_Open *****************
  7943 ;; Defined at:
  7944 ;;		line 77 in file "mcc_generated_files/spi1.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;		None
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;		None
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      void 
  7951 ;; Registers used:
  7952 ;;		wreg, status,2
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/0
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7958 ;;      Params:         0       0       0       0       0       0       0       0       0
  7959 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7961 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7962 ;;Total ram usage:        0 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_disk_initialize
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text20
  7972  005628                     __ptext20:
  7973                           	opt callstack 0
  7974  005628                     _SPI1_Open:
  7975                           	opt callstack 26
  7976                           
  7977                           ;mcc_generated_files/spi1.c: 81:  SSP1STAT = 0x40;
  7978                           
  7979                           ;incstack = 0
  7980  005628  0E40               	movlw	64
  7981  00562A  6EC7               	movwf	4039,c	;volatile
  7982                           
  7983                           ;mcc_generated_files/spi1.c: 84:  SSP1CON1 = 0x20;
  7984  00562C  0E20               	movlw	32
  7985  00562E  6EC6               	movwf	4038,c	;volatile
  7986                           
  7987                           ;mcc_generated_files/spi1.c: 87:  SSP1ADD = 0x00;
  7988  005630  0E00               	movlw	0
  7989  005632  6EC8               	movwf	4040,c	;volatile
  7990  005634  0012               	return		;funcret
  7991  005636                     __end_of_SPI1_Open:
  7992                           	opt callstack 0
  7993                           
  7994 ;; *************** function _check_fs *****************
  7995 ;; Defined at:
  7996 ;;		line 2175 in file "ff.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  fs              2   58[COMRAM] PTR struct .
  7999 ;;		 -> NULL(0), FatFs(558), 
  8000 ;;  sect            4   60[COMRAM] unsigned long 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;		None
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      unsigned char 
  8005 ;; Registers used:
  8006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8012 ;;      Params:         6       0       0       0       0       0       0       0       0
  8013 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8014 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8015 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8016 ;;Total ram usage:       10 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    8
  8019 ;; This function calls:
  8020 ;;		_move_window
  8021 ;; This function is called by:
  8022 ;;		_find_volume
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           	psect	text21
  8027  00489A                     __ptext21:
  8028                           	opt callstack 0
  8029  00489A                     _check_fs:
  8030                           	opt callstack 19
  8031                           
  8032                           ;ff.c: 2176:  FATFS* fs,;ff.c: 2177:  DWORD sect;ff.c: 2179: {;ff.c: 2180:  fs->wflag = 
      +                          0; fs->winsect = 0xFFFFFFFF;
  8033                           
  8034                           ;incstack = 0
  8035  00489A  EE20 F004          	lfsr	2,4
  8036  00489E  503B               	movf	check_fs@fs,w,c
  8037  0048A0  26D9               	addwf	fsr2l,f,c
  8038  0048A2  503C               	movf	check_fs@fs+1,w,c
  8039  0048A4  22DA               	addwfc	fsr2h,f,c
  8040  0048A6  0E00               	movlw	0
  8041  0048A8  6EDF               	movwf	indf2,c
  8042  0048AA  EE20 F02A          	lfsr	2,42
  8043  0048AE  503B               	movf	check_fs@fs,w,c
  8044  0048B0  26D9               	addwf	fsr2l,f,c
  8045  0048B2  503C               	movf	check_fs@fs+1,w,c
  8046  0048B4  22DA               	addwfc	fsr2h,f,c
  8047  0048B6  0EFF               	movlw	255
  8048  0048B8  6EDE               	movwf	postinc2,c
  8049  0048BA  0EFF               	movlw	255
  8050  0048BC  6EDE               	movwf	postinc2,c
  8051  0048BE  0EFF               	movlw	255
  8052  0048C0  6EDE               	movwf	postinc2,c
  8053  0048C2  0EFF               	movlw	255
  8054  0048C4  6EDD               	movwf	postdec2,c
  8055                           
  8056                           ;ff.c: 2181:  if (move_window(fs, sect) != FR_OK)
  8057  0048C6  C03B  F030         	movff	check_fs@fs,move_window@fs
  8058  0048CA  C03C  F031         	movff	check_fs@fs+1,move_window@fs+1
  8059  0048CE  C03D  F032         	movff	check_fs@sect,move_window@sector
  8060  0048D2  C03E  F033         	movff	check_fs@sect+1,move_window@sector+1
  8061  0048D6  C03F  F034         	movff	check_fs@sect+2,move_window@sector+2
  8062  0048DA  C040  F035         	movff	check_fs@sect+3,move_window@sector+3
  8063  0048DE  EC82  F027         	call	_move_window	;wreg free
  8064  0048E2  0900               	iorlw	0
  8065  0048E4  B4D8               	btfsc	status,2,c
  8066  0048E6  D002               	goto	l5334
  8067                           
  8068                           ;ff.c: 2182:   return 3;
  8069  0048E8  0E03               	movlw	3
  8070  0048EA  0012               	return	
  8071  0048EC                     l5334:
  8072                           
  8073                           ;ff.c: 2184:  if ((WORD)(*(WORD*)(BYTE*)(&fs->win[510])) != 0xAA55)
  8074  0048EC  EE22 F02C          	lfsr	2,556
  8075  0048F0  503B               	movf	check_fs@fs,w,c
  8076  0048F2  26D9               	addwf	fsr2l,f,c
  8077  0048F4  503C               	movf	check_fs@fs+1,w,c
  8078  0048F6  22DA               	addwfc	fsr2h,f,c
  8079  0048F8  0E55               	movlw	85
  8080  0048FA  18DE               	xorwf	postinc2,w,c
  8081  0048FC  E104               	bnz	u6980
  8082  0048FE  0EAA               	movlw	170
  8083  004900  18DE               	xorwf	postinc2,w,c
  8084  004902  B4D8               	btfsc	status,2,c
  8085  004904  D002               	goto	l5340
  8086  004906                     u6980:
  8087                           
  8088                           ;ff.c: 2185:   return 2;
  8089  004906  0E02               	movlw	2
  8090  004908  0012               	return	
  8091  00490A                     l5340:
  8092                           
  8093                           ;ff.c: 2187:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)
  8094  00490A  EE20 F064          	lfsr	2,100
  8095  00490E  503B               	movf	check_fs@fs,w,c
  8096  004910  26D9               	addwf	fsr2l,f,c
  8097  004912  503C               	movf	check_fs@fs+1,w,c
  8098  004914  22DA               	addwfc	fsr2h,f,c
  8099  004916  0EFF               	movlw	255
  8100  004918  14DE               	andwf	postinc2,w,c
  8101  00491A  6E41               	movwf	??_check_fs& (0+255),c
  8102  00491C  0EFF               	movlw	255
  8103  00491E  14DE               	andwf	postinc2,w,c
  8104  004920  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8105  004922  0EFF               	movlw	255
  8106  004924  14DE               	andwf	postinc2,w,c
  8107  004926  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8108  004928  0E00               	movlw	0
  8109  00492A  14DE               	andwf	postinc2,w,c
  8110  00492C  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8111  00492E  0E46               	movlw	70
  8112  004930  1841               	xorwf	??_check_fs,w,c
  8113  004932  E10A               	bnz	l5346
  8114  004934  0E41               	movlw	65
  8115  004936  1842               	xorwf	??_check_fs+1,w,c
  8116  004938  E107               	bnz	l5346
  8117  00493A  0E54               	movlw	84
  8118  00493C  1843               	xorwf	??_check_fs+2,w,c
  8119  00493E  1044               	iorwf	??_check_fs+3,w,c
  8120  004940  A4D8               	btfss	status,2,c
  8121  004942  D002               	goto	l5346
  8122  004944                     u6990:
  8123                           
  8124                           ;ff.c: 2188:   return 0;
  8125  004944  0E00               	movlw	0
  8126  004946  0012               	return	
  8127  004948                     l5346:
  8128                           
  8129                           ;ff.c: 2189:  if (((DWORD)(*(DWORD*)(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)
  8130  004948  EE20 F080          	lfsr	2,128
  8131  00494C  503B               	movf	check_fs@fs,w,c
  8132  00494E  26D9               	addwf	fsr2l,f,c
  8133  004950  503C               	movf	check_fs@fs+1,w,c
  8134  004952  22DA               	addwfc	fsr2h,f,c
  8135  004954  0EFF               	movlw	255
  8136  004956  14DE               	andwf	postinc2,w,c
  8137  004958  6E41               	movwf	??_check_fs& (0+255),c
  8138  00495A  0EFF               	movlw	255
  8139  00495C  14DE               	andwf	postinc2,w,c
  8140  00495E  6E42               	movwf	(??_check_fs+1)& (0+255),c
  8141  004960  0EFF               	movlw	255
  8142  004962  14DE               	andwf	postinc2,w,c
  8143  004964  6E43               	movwf	(??_check_fs+2)& (0+255),c
  8144  004966  0E00               	movlw	0
  8145  004968  14DE               	andwf	postinc2,w,c
  8146  00496A  6E44               	movwf	(??_check_fs+3)& (0+255),c
  8147  00496C  0E46               	movlw	70
  8148  00496E  1841               	xorwf	??_check_fs,w,c
  8149  004970  E108               	bnz	l5352
  8150  004972  0E41               	movlw	65
  8151  004974  1842               	xorwf	??_check_fs+1,w,c
  8152  004976  E105               	bnz	l5352
  8153  004978  0E54               	movlw	84
  8154  00497A  1843               	xorwf	??_check_fs+2,w,c
  8155  00497C  1044               	iorwf	??_check_fs+3,w,c
  8156  00497E  B4D8               	btfsc	status,2,c
  8157  004980  D7E1               	goto	u6990
  8158  004982                     l5352:
  8159                           
  8160                           ;ff.c: 2192:  return 1;
  8161  004982  0E01               	movlw	1
  8162  004984  0012               	return		;funcret
  8163  004986                     __end_of_check_fs:
  8164                           	opt callstack 0
  8165                           
  8166 ;; *************** function _f_lseek *****************
  8167 ;; Defined at:
  8168 ;;		line 3033 in file "ff.c"
  8169 ;; Parameters:    Size  Location     Type
  8170 ;;  fp              2   13[BANK0 ] PTR struct .
  8171 ;;		 -> Fil(32), 
  8172 ;;  ofs             4   15[BANK0 ] unsigned long 
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  clst            4   48[BANK0 ] unsigned long 
  8175 ;;  bcs             4   44[BANK0 ] unsigned long 
  8176 ;;  nsect           4   40[BANK0 ] unsigned long 
  8177 ;;  ifptr           4   35[BANK0 ] unsigned long 
  8178 ;;  res             1   39[BANK0 ] enum E93
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      enum E4918
  8181 ;; Registers used:
  8182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8188 ;;      Params:         0       6       0       0       0       0       0       0       0
  8189 ;;      Locals:         0      17       0       0       0       0       0       0       0
  8190 ;;      Temps:          0      16       0       0       0       0       0       0       0
  8191 ;;      Totals:         0      39       0       0       0       0       0       0       0
  8192 ;;Total ram usage:       39 bytes
  8193 ;; Hardware stack levels used:    1
  8194 ;; Hardware stack levels required when called:   10
  8195 ;; This function calls:
  8196 ;;		___lldiv
  8197 ;;		_clust2sect
  8198 ;;		_create_chain
  8199 ;;		_get_fat
  8200 ;;		_validate
  8201 ;; This function is called by:
  8202 ;;		_guardar
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           	psect	text22
  8207  001942                     __ptext22:
  8208                           	opt callstack 0
  8209  001942                     _f_lseek:
  8210                           	opt callstack 19
  8211                           
  8212                           ;ff.c: 3034:  FIL* fp,;ff.c: 3035:  DWORD ofs;ff.c: 3037: {;ff.c: 3038:  FRESULT res;;ff
      +                          .c: 3039:  DWORD clst, bcs, nsect, ifptr;;ff.c: 3045:  res = validate(fp);
  8213                           
  8214                           ;incstack = 0
  8215  001942  C06D  F002         	movff	f_lseek@fp,validate@obj
  8216  001946  C06E  F003         	movff	f_lseek@fp+1,validate@obj+1
  8217  00194A  ECD5  F027         	call	_validate	;wreg free
  8218  00194E  0100               	movlb	0	; () banked
  8219  001950  6F87               	movwf	f_lseek@res& (0+255),b
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;ff.c: 3046:  if (res != FR_OK) return res;
  8223  001952  5187               	movf	f_lseek@res& (0+255),w,b
  8224  001954  B4D8               	btfsc	status,2,c
  8225  001956  D002               	goto	l6066
  8226  001958                     u8110:
  8227                           
  8228                           ; BSR set to: 0
  8229  001958  5187               	movf	f_lseek@res& (0+255),w,b
  8230  00195A  0012               	return	
  8231  00195C                     l6066:
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;ff.c: 3047:  if (fp->err)
  8235  00195C  EE20 F005          	lfsr	2,5
  8236  001960  516D               	movf	f_lseek@fp& (0+255),w,b
  8237  001962  26D9               	addwf	fsr2l,f,c
  8238  001964  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8239  001966  22DA               	addwfc	fsr2h,f,c
  8240  001968  50DF               	movf	indf2,w,c
  8241  00196A  B4D8               	btfsc	status,2,c
  8242  00196C  D008               	goto	l6072
  8243                           
  8244                           ; BSR set to: 0
  8245                           ;ff.c: 3048:   return (FRESULT)fp->err;
  8246  00196E  EE20 F005          	lfsr	2,5
  8247  001972  516D               	movf	f_lseek@fp& (0+255),w,b
  8248  001974  26D9               	addwf	fsr2l,f,c
  8249  001976  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8250  001978  22DA               	addwfc	fsr2h,f,c
  8251  00197A  50DF               	movf	indf2,w,c
  8252  00197C  0012               	return	
  8253  00197E                     l6072:
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;ff.c: 3106:  {;ff.c: 3107:   if (ofs > fp->fsize
  8257  00197E  EE20 F00A          	lfsr	2,10
  8258  001982  516D               	movf	f_lseek@fp& (0+255),w,b
  8259  001984  26D9               	addwf	fsr2l,f,c
  8260  001986  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8261  001988  22DA               	addwfc	fsr2h,f,c
  8262  00198A  516F               	movf	f_lseek@ofs& (0+255),w,b
  8263  00198C  5CDE               	subwf	postinc2,w,c
  8264  00198E  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8265  001990  58DE               	subwfb	postinc2,w,c
  8266  001992  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8267  001994  58DE               	subwfb	postinc2,w,c
  8268  001996  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8269  001998  58DE               	subwfb	postinc2,w,c
  8270  00199A  B0D8               	btfsc	status,0,c
  8271  00199C  D016               	goto	l732
  8272                           
  8273                           ; BSR set to: 0
  8274  00199E  EE20 F004          	lfsr	2,4
  8275  0019A2  516D               	movf	f_lseek@fp& (0+255),w,b
  8276  0019A4  26D9               	addwf	fsr2l,f,c
  8277  0019A6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8278  0019A8  22DA               	addwfc	fsr2h,f,c
  8279  0019AA  B2DF               	btfsc	indf2,1,c
  8280  0019AC  D00E               	goto	l732
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;ff.c: 3111:    ) ofs = fp->fsize;
  8284  0019AE  EE20 F00A          	lfsr	2,10
  8285  0019B2  516D               	movf	f_lseek@fp& (0+255),w,b
  8286  0019B4  26D9               	addwf	fsr2l,f,c
  8287  0019B6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8288  0019B8  22DA               	addwfc	fsr2h,f,c
  8289  0019BA  CFDE F06F          	movff	postinc2,f_lseek@ofs
  8290  0019BE  CFDE F070          	movff	postinc2,f_lseek@ofs+1
  8291  0019C2  CFDE F071          	movff	postinc2,f_lseek@ofs+2
  8292  0019C6  CFDE F072          	movff	postinc2,f_lseek@ofs+3
  8293  0019CA                     l732:
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;ff.c: 3113:   ifptr = fp->fptr;
  8297  0019CA  EE20 F006          	lfsr	2,6
  8298  0019CE  516D               	movf	f_lseek@fp& (0+255),w,b
  8299  0019D0  26D9               	addwf	fsr2l,f,c
  8300  0019D2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8301  0019D4  22DA               	addwfc	fsr2h,f,c
  8302  0019D6  CFDE F083          	movff	postinc2,f_lseek@ifptr
  8303  0019DA  CFDE F084          	movff	postinc2,f_lseek@ifptr+1
  8304  0019DE  CFDE F085          	movff	postinc2,f_lseek@ifptr+2
  8305  0019E2  CFDE F086          	movff	postinc2,f_lseek@ifptr+3
  8306                           
  8307                           ;ff.c: 3114:   fp->fptr = nsect = 0;
  8308  0019E6  0E00               	movlw	0
  8309  0019E8  6F88               	movwf	f_lseek@nsect& (0+255),b
  8310  0019EA  0E00               	movlw	0
  8311  0019EC  6F89               	movwf	(f_lseek@nsect+1)& (0+255),b
  8312  0019EE  0E00               	movlw	0
  8313  0019F0  6F8A               	movwf	(f_lseek@nsect+2)& (0+255),b
  8314  0019F2  0E00               	movlw	0
  8315  0019F4  6F8B               	movwf	(f_lseek@nsect+3)& (0+255),b
  8316  0019F6  EE20 F006          	lfsr	2,6
  8317  0019FA  516D               	movf	f_lseek@fp& (0+255),w,b
  8318  0019FC  26D9               	addwf	fsr2l,f,c
  8319  0019FE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8320  001A00  22DA               	addwfc	fsr2h,f,c
  8321  001A02  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8322  001A06  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8323  001A0A  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8324  001A0E  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;ff.c: 3115:   if (ofs) {
  8328  001A12  516F               	movf	f_lseek@ofs& (0+255),w,b
  8329  001A14  1170               	iorwf	(f_lseek@ofs+1)& (0+255),w,b
  8330  001A16  1171               	iorwf	(f_lseek@ofs+2)& (0+255),w,b
  8331  001A18  1172               	iorwf	(f_lseek@ofs+3)& (0+255),w,b
  8332  001A1A  B4D8               	btfsc	status,2,c
  8333  001A1C  D22D               	goto	l6166
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;ff.c: 3116:    bcs = (DWORD)fp->fs->csize * ((UINT)512);
  8337  001A1E  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8338  001A22  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8339  001A26  EE10 F002          	lfsr	1,2
  8340  001A2A  50DE               	movf	postinc2,w,c
  8341  001A2C  26E1               	addwf	fsr1l,f,c
  8342  001A2E  50DD               	movf	postdec2,w,c
  8343  001A30  22E2               	addwfc	fsr1h,f,c
  8344  001A32  50E7               	movf	indf1,w,c
  8345  001A34  6F73               	movwf	??_f_lseek& (0+255),b
  8346  001A36  C073  F074         	movff	??_f_lseek,??_f_lseek+1
  8347  001A3A  6B75               	clrf	(??_f_lseek+2)& (0+255),b
  8348  001A3C  6B76               	clrf	(??_f_lseek+3)& (0+255),b
  8349  001A3E  6B77               	clrf	(??_f_lseek+4)& (0+255),b
  8350  001A40  0E09               	movlw	9
  8351  001A42                     u8165:
  8352  001A42  90D8               	bcf	status,0,c
  8353  001A44  3774               	rlcf	(??_f_lseek+1)& (0+255),f,b
  8354  001A46  3775               	rlcf	(??_f_lseek+2)& (0+255),f,b
  8355  001A48  3776               	rlcf	(??_f_lseek+3)& (0+255),f,b
  8356  001A4A  3777               	rlcf	(??_f_lseek+4)& (0+255),f,b
  8357  001A4C  2EE8               	decfsz	wreg,f,c
  8358  001A4E  D7F9               	goto	u8165
  8359  001A50  C074  F08C         	movff	??_f_lseek+1,f_lseek@bcs
  8360  001A54  C075  F08D         	movff	??_f_lseek+2,f_lseek@bcs+1
  8361  001A58  C076  F08E         	movff	??_f_lseek+3,f_lseek@bcs+2
  8362  001A5C  C077  F08F         	movff	??_f_lseek+4,f_lseek@bcs+3
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;ff.c: 3117:    if (ifptr > 0 &&
  8366  001A60  5183               	movf	f_lseek@ifptr& (0+255),w,b
  8367  001A62  1184               	iorwf	(f_lseek@ifptr+1)& (0+255),w,b
  8368  001A64  1185               	iorwf	(f_lseek@ifptr+2)& (0+255),w,b
  8369  001A66  1186               	iorwf	(f_lseek@ifptr+3)& (0+255),w,b
  8370  001A68  B4D8               	btfsc	status,2,c
  8371  001A6A  D097               	goto	l6088
  8372                           
  8373                           ; BSR set to: 0
  8374  001A6C  0EFF               	movlw	255
  8375  001A6E  256F               	addwf	f_lseek@ofs& (0+255),w,b
  8376  001A70  6E01               	movwf	___lldiv@dividend,c
  8377  001A72  0EFF               	movlw	255
  8378  001A74  2170               	addwfc	(f_lseek@ofs+1)& (0+255),w,b
  8379  001A76  6E02               	movwf	___lldiv@dividend+1,c
  8380  001A78  0EFF               	movlw	255
  8381  001A7A  2171               	addwfc	(f_lseek@ofs+2)& (0+255),w,b
  8382  001A7C  6E03               	movwf	___lldiv@dividend+2,c
  8383  001A7E  0EFF               	movlw	255
  8384  001A80  2172               	addwfc	(f_lseek@ofs+3)& (0+255),w,b
  8385  001A82  6E04               	movwf	___lldiv@dividend+3,c
  8386  001A84  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8387  001A88  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8388  001A8C  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8389  001A90  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8390  001A94  EC1F  F028         	call	___lldiv	;wreg free
  8391  001A98  C001  F073         	movff	?___lldiv,??_f_lseek
  8392  001A9C  C002  F074         	movff	?___lldiv+1,??_f_lseek+1
  8393  001AA0  C003  F075         	movff	?___lldiv+2,??_f_lseek+2
  8394  001AA4  C004  F076         	movff	?___lldiv+3,??_f_lseek+3
  8395  001AA8  0EFF               	movlw	255
  8396  001AAA  0100               	movlb	0	; () banked
  8397  001AAC  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8398  001AAE  6E01               	movwf	___lldiv@dividend,c
  8399  001AB0  0EFF               	movlw	255
  8400  001AB2  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8401  001AB4  6E02               	movwf	___lldiv@dividend+1,c
  8402  001AB6  0EFF               	movlw	255
  8403  001AB8  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8404  001ABA  6E03               	movwf	___lldiv@dividend+2,c
  8405  001ABC  0EFF               	movlw	255
  8406  001ABE  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8407  001AC0  6E04               	movwf	___lldiv@dividend+3,c
  8408  001AC2  C08C  F005         	movff	f_lseek@bcs,___lldiv@divisor
  8409  001AC6  C08D  F006         	movff	f_lseek@bcs+1,___lldiv@divisor+1
  8410  001ACA  C08E  F007         	movff	f_lseek@bcs+2,___lldiv@divisor+2
  8411  001ACE  C08F  F008         	movff	f_lseek@bcs+3,___lldiv@divisor+3
  8412  001AD2  EC1F  F028         	call	___lldiv	;wreg free
  8413  001AD6  5001               	movf	?___lldiv,w,c
  8414  001AD8  0100               	movlb	0	; () banked
  8415  001ADA  5D73               	subwf	??_f_lseek& (0+255),w,b
  8416  001ADC  5002               	movf	?___lldiv+1,w,c
  8417  001ADE  5974               	subwfb	(??_f_lseek+1)& (0+255),w,b
  8418  001AE0  5003               	movf	?___lldiv+2,w,c
  8419  001AE2  5975               	subwfb	(??_f_lseek+2)& (0+255),w,b
  8420  001AE4  5004               	movf	?___lldiv+3,w,c
  8421  001AE6  5976               	subwfb	(??_f_lseek+3)& (0+255),w,b
  8422  001AE8  A0D8               	btfss	status,0,c
  8423  001AEA  D057               	goto	l6088
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;ff.c: 3118:     (ofs - 1) / bcs >= (ifptr - 1) / bcs) {;ff.c: 3119:     fp->fptr = (ifp
      +                          tr - 1) & ~(bcs - 1);
  8427  001AEC  0EFF               	movlw	255
  8428  001AEE  258C               	addwf	f_lseek@bcs& (0+255),w,b
  8429  001AF0  6F73               	movwf	??_f_lseek& (0+255),b
  8430  001AF2  0EFF               	movlw	255
  8431  001AF4  218D               	addwfc	(f_lseek@bcs+1)& (0+255),w,b
  8432  001AF6  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8433  001AF8  0EFF               	movlw	255
  8434  001AFA  218E               	addwfc	(f_lseek@bcs+2)& (0+255),w,b
  8435  001AFC  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8436  001AFE  0EFF               	movlw	255
  8437  001B00  218F               	addwfc	(f_lseek@bcs+3)& (0+255),w,b
  8438  001B02  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8439  001B04  1D73               	comf	??_f_lseek& (0+255),w,b
  8440  001B06  6F77               	movwf	(??_f_lseek+4)& (0+255),b
  8441  001B08  1D74               	comf	(??_f_lseek+1)& (0+255),w,b
  8442  001B0A  6F78               	movwf	(??_f_lseek+5)& (0+255),b
  8443  001B0C  1D75               	comf	(??_f_lseek+2)& (0+255),w,b
  8444  001B0E  6F79               	movwf	(??_f_lseek+6)& (0+255),b
  8445  001B10  1D76               	comf	(??_f_lseek+3)& (0+255),w,b
  8446  001B12  6F7A               	movwf	(??_f_lseek+7)& (0+255),b
  8447  001B14  0EFF               	movlw	255
  8448  001B16  2583               	addwf	f_lseek@ifptr& (0+255),w,b
  8449  001B18  6F7B               	movwf	(??_f_lseek+8)& (0+255),b
  8450  001B1A  0EFF               	movlw	255
  8451  001B1C  2184               	addwfc	(f_lseek@ifptr+1)& (0+255),w,b
  8452  001B1E  6F7C               	movwf	(??_f_lseek+9)& (0+255),b
  8453  001B20  0EFF               	movlw	255
  8454  001B22  2185               	addwfc	(f_lseek@ifptr+2)& (0+255),w,b
  8455  001B24  6F7D               	movwf	(??_f_lseek+10)& (0+255),b
  8456  001B26  0EFF               	movlw	255
  8457  001B28  2186               	addwfc	(f_lseek@ifptr+3)& (0+255),w,b
  8458  001B2A  6F7E               	movwf	(??_f_lseek+11)& (0+255),b
  8459  001B2C  5177               	movf	(??_f_lseek+4)& (0+255),w,b
  8460  001B2E  157B               	andwf	(??_f_lseek+8)& (0+255),w,b
  8461  001B30  6F7F               	movwf	(??_f_lseek+12)& (0+255),b
  8462  001B32  5178               	movf	(??_f_lseek+5)& (0+255),w,b
  8463  001B34  157C               	andwf	(??_f_lseek+9)& (0+255),w,b
  8464  001B36  6F80               	movwf	(??_f_lseek+13)& (0+255),b
  8465  001B38  5179               	movf	(??_f_lseek+6)& (0+255),w,b
  8466  001B3A  157D               	andwf	(??_f_lseek+10)& (0+255),w,b
  8467  001B3C  6F81               	movwf	(??_f_lseek+14)& (0+255),b
  8468  001B3E  517A               	movf	(??_f_lseek+7)& (0+255),w,b
  8469  001B40  157E               	andwf	(??_f_lseek+11)& (0+255),w,b
  8470  001B42  6F82               	movwf	(??_f_lseek+15)& (0+255),b
  8471  001B44  EE20 F006          	lfsr	2,6
  8472  001B48  516D               	movf	f_lseek@fp& (0+255),w,b
  8473  001B4A  26D9               	addwf	fsr2l,f,c
  8474  001B4C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8475  001B4E  22DA               	addwfc	fsr2h,f,c
  8476  001B50  C07F  FFDE         	movff	??_f_lseek+12,postinc2
  8477  001B54  C080  FFDE         	movff	??_f_lseek+13,postinc2
  8478  001B58  C081  FFDE         	movff	??_f_lseek+14,postinc2
  8479  001B5C  C082  FFDE         	movff	??_f_lseek+15,postinc2
  8480                           
  8481                           ;ff.c: 3120:     ofs -= fp->fptr;
  8482  001B60  EE20 F006          	lfsr	2,6
  8483  001B64  516D               	movf	f_lseek@fp& (0+255),w,b
  8484  001B66  26D9               	addwf	fsr2l,f,c
  8485  001B68  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8486  001B6A  22DA               	addwfc	fsr2h,f,c
  8487  001B6C  50DE               	movf	postinc2,w,c
  8488  001B6E  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8489  001B70  50DE               	movf	postinc2,w,c
  8490  001B72  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8491  001B74  50DE               	movf	postinc2,w,c
  8492  001B76  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8493  001B78  50DD               	movf	postdec2,w,c
  8494  001B7A  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8495                           
  8496                           ;ff.c: 3121:     clst = fp->clust;
  8497  001B7C  EE20 F012          	lfsr	2,18
  8498  001B80  516D               	movf	f_lseek@fp& (0+255),w,b
  8499  001B82  26D9               	addwf	fsr2l,f,c
  8500  001B84  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8501  001B86  22DA               	addwfc	fsr2h,f,c
  8502  001B88  CFDE F090          	movff	postinc2,f_lseek@clst
  8503  001B8C  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8504  001B90  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8505  001B94  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8506                           
  8507                           ;ff.c: 3122:    } else {
  8508  001B98  D06E               	goto	l6112
  8509  001B9A                     l6088:
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;ff.c: 3123:     clst = fp->sclust;
  8513  001B9A  EE20 F00E          	lfsr	2,14
  8514  001B9E  516D               	movf	f_lseek@fp& (0+255),w,b
  8515  001BA0  26D9               	addwf	fsr2l,f,c
  8516  001BA2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8517  001BA4  22DA               	addwfc	fsr2h,f,c
  8518  001BA6  CFDE F090          	movff	postinc2,f_lseek@clst
  8519  001BAA  CFDE F091          	movff	postinc2,f_lseek@clst+1
  8520  001BAE  CFDE F092          	movff	postinc2,f_lseek@clst+2
  8521  001BB2  CFDE F093          	movff	postinc2,f_lseek@clst+3
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;ff.c: 3125:     if (clst == 0) {
  8525  001BB6  5190               	movf	f_lseek@clst& (0+255),w,b
  8526  001BB8  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8527  001BBA  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8528  001BBC  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8529  001BBE  A4D8               	btfss	status,2,c
  8530  001BC0  D04C               	goto	l736
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;ff.c: 3126:      clst = create_chain(fp->fs, 0);
  8534  001BC2  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8535  001BC6  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8536  001BCA  CFDE F056          	movff	postinc2,create_chain@fs
  8537  001BCE  CFDD F057          	movff	postdec2,create_chain@fs+1
  8538  001BD2  0E00               	movlw	0
  8539  001BD4  6E58               	movwf	create_chain@clst,c
  8540  001BD6  0E00               	movlw	0
  8541  001BD8  6E59               	movwf	create_chain@clst+1,c
  8542  001BDA  0E00               	movlw	0
  8543  001BDC  6E5A               	movwf	create_chain@clst+2,c
  8544  001BDE  0E00               	movlw	0
  8545  001BE0  6E5B               	movwf	create_chain@clst+3,c
  8546  001BE2  ECAB  F019         	call	_create_chain	;wreg free
  8547  001BE6  C056  F090         	movff	?_create_chain,f_lseek@clst
  8548  001BEA  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8549  001BEE  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8550  001BF2  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8551                           
  8552                           ;ff.c: 3127:      if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8553  001BF6  0100               	movlb	0	; () banked
  8554  001BF8  0590               	decf	f_lseek@clst& (0+255),w,b
  8555  001BFA  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8556  001BFC  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8557  001BFE  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8558  001C00  A4D8               	btfss	status,2,c
  8559  001C02  D00A               	goto	l6102
  8560  001C04                     u8200:
  8561                           
  8562                           ; BSR set to: 0
  8563  001C04  EE20 F005          	lfsr	2,5
  8564  001C08  516D               	movf	f_lseek@fp& (0+255),w,b
  8565  001C0A  26D9               	addwf	fsr2l,f,c
  8566  001C0C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8567  001C0E  22DA               	addwfc	fsr2h,f,c
  8568  001C10  0E02               	movlw	2
  8569  001C12  6EDF               	movwf	indf2,c
  8570                           
  8571                           ; BSR set to: 0
  8572  001C14  0E02               	movlw	2
  8573  001C16  0012               	return	
  8574  001C18                     l6102:
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;ff.c: 3128:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8578  001C18  2990               	incf	f_lseek@clst& (0+255),w,b
  8579  001C1A  E111               	bnz	l6110
  8580  001C1C  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8581  001C1E  E10F               	bnz	l6110
  8582  001C20  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8583  001C22  E10D               	bnz	l6110
  8584  001C24  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8585  001C26  A4D8               	btfss	status,2,c
  8586  001C28  D00A               	goto	l6110
  8587  001C2A                     u8210:
  8588                           
  8589                           ; BSR set to: 0
  8590  001C2A  EE20 F005          	lfsr	2,5
  8591  001C2E  516D               	movf	f_lseek@fp& (0+255),w,b
  8592  001C30  26D9               	addwf	fsr2l,f,c
  8593  001C32  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8594  001C34  22DA               	addwfc	fsr2h,f,c
  8595  001C36  0E01               	movlw	1
  8596  001C38  6EDF               	movwf	indf2,c
  8597                           
  8598                           ; BSR set to: 0
  8599  001C3A  0E01               	movlw	1
  8600  001C3C  0012               	return	
  8601  001C3E                     l6110:
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;ff.c: 3129:      fp->sclust = clst;
  8605  001C3E  EE20 F00E          	lfsr	2,14
  8606  001C42  516D               	movf	f_lseek@fp& (0+255),w,b
  8607  001C44  26D9               	addwf	fsr2l,f,c
  8608  001C46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8609  001C48  22DA               	addwfc	fsr2h,f,c
  8610  001C4A  C090  FFDE         	movff	f_lseek@clst,postinc2
  8611  001C4E  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8612  001C52  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8613  001C56  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8614  001C5A                     l736:
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;ff.c: 3132:     fp->clust = clst;
  8618  001C5A  EE20 F012          	lfsr	2,18
  8619  001C5E  516D               	movf	f_lseek@fp& (0+255),w,b
  8620  001C60  26D9               	addwf	fsr2l,f,c
  8621  001C62  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8622  001C64  22DA               	addwfc	fsr2h,f,c
  8623  001C66  C090  FFDE         	movff	f_lseek@clst,postinc2
  8624  001C6A  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8625  001C6E  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8626  001C72  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8627  001C76                     l6112:
  8628                           
  8629                           ; BSR set to: 0
  8630                           ;ff.c: 3134:    if (clst != 0) {
  8631  001C76  5190               	movf	f_lseek@clst& (0+255),w,b
  8632  001C78  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8633  001C7A  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8634  001C7C  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8635  001C7E  A4D8               	btfss	status,2,c
  8636  001C80  D097               	goto	l6148
  8637  001C82  D0FA               	goto	l6166
  8638  001C84                     l6116:
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;ff.c: 3137:      if (fp->flag & 0x02) {
  8642  001C84  EE20 F004          	lfsr	2,4
  8643  001C88  516D               	movf	f_lseek@fp& (0+255),w,b
  8644  001C8A  26D9               	addwf	fsr2l,f,c
  8645  001C8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8646  001C8E  22DA               	addwfc	fsr2h,f,c
  8647  001C90  A2DF               	btfss	indf2,1,c
  8648  001C92  D02A               	goto	l6124
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;ff.c: 3138:       clst = create_chain(fp->fs, clst);
  8652  001C94  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8653  001C98  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8654  001C9C  CFDE F056          	movff	postinc2,create_chain@fs
  8655  001CA0  CFDD F057          	movff	postdec2,create_chain@fs+1
  8656  001CA4  C090  F058         	movff	f_lseek@clst,create_chain@clst
  8657  001CA8  C091  F059         	movff	f_lseek@clst+1,create_chain@clst+1
  8658  001CAC  C092  F05A         	movff	f_lseek@clst+2,create_chain@clst+2
  8659  001CB0  C093  F05B         	movff	f_lseek@clst+3,create_chain@clst+3
  8660  001CB4  ECAB  F019         	call	_create_chain	;wreg free
  8661  001CB8  C056  F090         	movff	?_create_chain,f_lseek@clst
  8662  001CBC  C057  F091         	movff	?_create_chain+1,f_lseek@clst+1
  8663  001CC0  C058  F092         	movff	?_create_chain+2,f_lseek@clst+2
  8664  001CC4  C059  F093         	movff	?_create_chain+3,f_lseek@clst+3
  8665                           
  8666                           ;ff.c: 3139:       if (clst == 0) {
  8667  001CC8  0100               	movlb	0	; () banked
  8668  001CCA  5190               	movf	f_lseek@clst& (0+255),w,b
  8669  001CCC  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8670  001CCE  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8671  001CD0  1193               	iorwf	(f_lseek@clst+3)& (0+255),w,b
  8672  001CD2  A4D8               	btfss	status,2,c
  8673  001CD4  D023               	goto	l6126
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;ff.c: 3140:        ofs = bcs; break;
  8677  001CD6  C08C  F06F         	movff	f_lseek@bcs,f_lseek@ofs
  8678  001CDA  C08D  F070         	movff	f_lseek@bcs+1,f_lseek@ofs+1
  8679  001CDE  C08E  F071         	movff	f_lseek@bcs+2,f_lseek@ofs+2
  8680  001CE2  C08F  F072         	movff	f_lseek@bcs+3,f_lseek@ofs+3
  8681  001CE6  D06E               	goto	u8280
  8682  001CE8                     l6124:
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;ff.c: 3144:       clst = get_fat(fp->fs, clst);
  8686  001CE8  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8687  001CEC  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8688  001CF0  CFDE F03B          	movff	postinc2,get_fat@fs
  8689  001CF4  CFDD F03C          	movff	postdec2,get_fat@fs+1
  8690  001CF8  C090  F03D         	movff	f_lseek@clst,get_fat@clst
  8691  001CFC  C091  F03E         	movff	f_lseek@clst+1,get_fat@clst+1
  8692  001D00  C092  F03F         	movff	f_lseek@clst+2,get_fat@clst+2
  8693  001D04  C093  F040         	movff	f_lseek@clst+3,get_fat@clst+3
  8694  001D08  EC0F  F016         	call	_get_fat	;wreg free
  8695  001D0C  C03B  F090         	movff	?_get_fat,f_lseek@clst
  8696  001D10  C03C  F091         	movff	?_get_fat+1,f_lseek@clst+1
  8697  001D14  C03D  F092         	movff	?_get_fat+2,f_lseek@clst+2
  8698  001D18  C03E  F093         	movff	?_get_fat+3,f_lseek@clst+3
  8699  001D1C                     l6126:
  8700                           
  8701                           ;ff.c: 3145:      if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DIS
      +                          K_ERR; };
  8702  001D1C  0100               	movlb	0	; () banked
  8703  001D1E  2990               	incf	f_lseek@clst& (0+255),w,b
  8704  001D20  E107               	bnz	l6134
  8705  001D22  2991               	incf	(f_lseek@clst+1)& (0+255),w,b
  8706  001D24  E105               	bnz	l6134
  8707  001D26  2992               	incf	(f_lseek@clst+2)& (0+255),w,b
  8708  001D28  E103               	bnz	l6134
  8709  001D2A  2993               	incf	(f_lseek@clst+3)& (0+255),w,b
  8710  001D2C  B4D8               	btfsc	status,2,c
  8711  001D2E  D77D               	goto	u8210
  8712  001D30                     l6134:
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;ff.c: 3146:      if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_E
      +                          RR); return FR_INT_ERR; };
  8716  001D30  5193               	movf	(f_lseek@clst+3)& (0+255),w,b
  8717  001D32  1192               	iorwf	(f_lseek@clst+2)& (0+255),w,b
  8718  001D34  1191               	iorwf	(f_lseek@clst+1)& (0+255),w,b
  8719  001D36  E104               	bnz	u8260
  8720  001D38  0E02               	movlw	2
  8721  001D3A  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8722  001D3C  A0D8               	btfss	status,0,c
  8723  001D3E  D762               	goto	u8200
  8724  001D40                     u8260:
  8725                           
  8726                           ; BSR set to: 0
  8727  001D40  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8728  001D44  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8729  001D48  EE10 F012          	lfsr	1,18
  8730  001D4C  50DE               	movf	postinc2,w,c
  8731  001D4E  26E1               	addwf	fsr1l,f,c
  8732  001D50  50DD               	movf	postdec2,w,c
  8733  001D52  22E2               	addwfc	fsr1h,f,c
  8734  001D54  50E6               	movf	postinc1,w,c
  8735  001D56  5D90               	subwf	f_lseek@clst& (0+255),w,b
  8736  001D58  50E6               	movf	postinc1,w,c
  8737  001D5A  5991               	subwfb	(f_lseek@clst+1)& (0+255),w,b
  8738  001D5C  50E6               	movf	postinc1,w,c
  8739  001D5E  5992               	subwfb	(f_lseek@clst+2)& (0+255),w,b
  8740  001D60  50E6               	movf	postinc1,w,c
  8741  001D62  5993               	subwfb	(f_lseek@clst+3)& (0+255),w,b
  8742  001D64  B0D8               	btfsc	status,0,c
  8743  001D66  D74E               	goto	u8200
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;ff.c: 3147:      fp->clust = clst;
  8747                           
  8748                           ; BSR set to: 0
  8749  001D68  EE20 F012          	lfsr	2,18
  8750  001D6C  516D               	movf	f_lseek@fp& (0+255),w,b
  8751  001D6E  26D9               	addwf	fsr2l,f,c
  8752  001D70  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8753  001D72  22DA               	addwfc	fsr2h,f,c
  8754  001D74  C090  FFDE         	movff	f_lseek@clst,postinc2
  8755  001D78  C091  FFDE         	movff	f_lseek@clst+1,postinc2
  8756  001D7C  C092  FFDE         	movff	f_lseek@clst+2,postinc2
  8757  001D80  C093  FFDE         	movff	f_lseek@clst+3,postinc2
  8758                           
  8759                           ;ff.c: 3148:      fp->fptr += bcs;
  8760  001D84  EE20 F006          	lfsr	2,6
  8761  001D88  516D               	movf	f_lseek@fp& (0+255),w,b
  8762  001D8A  26D9               	addwf	fsr2l,f,c
  8763  001D8C  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8764  001D8E  22DA               	addwfc	fsr2h,f,c
  8765  001D90  518C               	movf	f_lseek@bcs& (0+255),w,b
  8766  001D92  26DE               	addwf	postinc2,f,c
  8767  001D94  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8768  001D96  22DE               	addwfc	postinc2,f,c
  8769  001D98  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8770  001D9A  22DE               	addwfc	postinc2,f,c
  8771  001D9C  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8772  001D9E  22DE               	addwfc	postinc2,f,c
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;ff.c: 3149:      ofs -= bcs;
  8776  001DA0  518C               	movf	f_lseek@bcs& (0+255),w,b
  8777  001DA2  5F6F               	subwf	f_lseek@ofs& (0+255),f,b
  8778  001DA4  518D               	movf	(f_lseek@bcs+1)& (0+255),w,b
  8779  001DA6  5B70               	subwfb	(f_lseek@ofs+1)& (0+255),f,b
  8780  001DA8  518E               	movf	(f_lseek@bcs+2)& (0+255),w,b
  8781  001DAA  5B71               	subwfb	(f_lseek@ofs+2)& (0+255),f,b
  8782  001DAC  518F               	movf	(f_lseek@bcs+3)& (0+255),w,b
  8783  001DAE  5B72               	subwfb	(f_lseek@ofs+3)& (0+255),f,b
  8784  001DB0                     l6148:
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;ff.c: 3135:     while (ofs > bcs) {
  8788  001DB0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8789  001DB2  5D8C               	subwf	f_lseek@bcs& (0+255),w,b
  8790  001DB4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8791  001DB6  598D               	subwfb	(f_lseek@bcs+1)& (0+255),w,b
  8792  001DB8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8793  001DBA  598E               	subwfb	(f_lseek@bcs+2)& (0+255),w,b
  8794  001DBC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8795  001DBE  598F               	subwfb	(f_lseek@bcs+3)& (0+255),w,b
  8796  001DC0  A0D8               	btfss	status,0,c
  8797  001DC2  D760               	goto	l6116
  8798  001DC4                     u8280:
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;ff.c: 3151:     fp->fptr += ofs;
  8802  001DC4  EE20 F006          	lfsr	2,6
  8803  001DC8  516D               	movf	f_lseek@fp& (0+255),w,b
  8804  001DCA  26D9               	addwf	fsr2l,f,c
  8805  001DCC  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8806  001DCE  22DA               	addwfc	fsr2h,f,c
  8807  001DD0  516F               	movf	f_lseek@ofs& (0+255),w,b
  8808  001DD2  26DE               	addwf	postinc2,f,c
  8809  001DD4  5170               	movf	(f_lseek@ofs+1)& (0+255),w,b
  8810  001DD6  22DE               	addwfc	postinc2,f,c
  8811  001DD8  5171               	movf	(f_lseek@ofs+2)& (0+255),w,b
  8812  001DDA  22DE               	addwfc	postinc2,f,c
  8813  001DDC  5172               	movf	(f_lseek@ofs+3)& (0+255),w,b
  8814  001DDE  22DE               	addwfc	postinc2,f,c
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;ff.c: 3152:     if (ofs % ((UINT)512)) {
  8818  001DE0  0EFF               	movlw	255
  8819  001DE2  156F               	andwf	f_lseek@ofs& (0+255),w,b
  8820  001DE4  6F73               	movwf	??_f_lseek& (0+255),b
  8821  001DE6  0E01               	movlw	1
  8822  001DE8  1570               	andwf	(f_lseek@ofs+1)& (0+255),w,b
  8823  001DEA  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8824  001DEC  0E00               	movlw	0
  8825  001DEE  1571               	andwf	(f_lseek@ofs+2)& (0+255),w,b
  8826  001DF0  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8827  001DF2  0E00               	movlw	0
  8828  001DF4  1572               	andwf	(f_lseek@ofs+3)& (0+255),w,b
  8829  001DF6  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8830  001DF8  5173               	movf	??_f_lseek& (0+255),w,b
  8831  001DFA  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8832  001DFC  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8833  001DFE  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8834  001E00  B4D8               	btfsc	status,2,c
  8835  001E02  D03A               	goto	l6166
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;ff.c: 3153:      nsect = clust2sect(fp->fs, clst);
  8839  001E04  C06D  FFD9         	movff	f_lseek@fp,fsr2l
  8840  001E08  C06E  FFDA         	movff	f_lseek@fp+1,fsr2h
  8841  001E0C  CFDE F00D          	movff	postinc2,clust2sect@fs
  8842  001E10  CFDD F00E          	movff	postdec2,clust2sect@fs+1
  8843  001E14  C090  F00F         	movff	f_lseek@clst,clust2sect@clst
  8844  001E18  C091  F010         	movff	f_lseek@clst+1,clust2sect@clst+1
  8845  001E1C  C092  F011         	movff	f_lseek@clst+2,clust2sect@clst+2
  8846  001E20  C093  F012         	movff	f_lseek@clst+3,clust2sect@clst+3
  8847  001E24  ECCD  F026         	call	_clust2sect	;wreg free
  8848  001E28  C00D  F088         	movff	?_clust2sect,f_lseek@nsect
  8849  001E2C  C00E  F089         	movff	?_clust2sect+1,f_lseek@nsect+1
  8850  001E30  C00F  F08A         	movff	?_clust2sect+2,f_lseek@nsect+2
  8851  001E34  C010  F08B         	movff	?_clust2sect+3,f_lseek@nsect+3
  8852                           
  8853                           ;ff.c: 3154:      if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
  8854  001E38  0100               	movlb	0	; () banked
  8855  001E3A  5188               	movf	f_lseek@nsect& (0+255),w,b
  8856  001E3C  1189               	iorwf	(f_lseek@nsect+1)& (0+255),w,b
  8857  001E3E  118A               	iorwf	(f_lseek@nsect+2)& (0+255),w,b
  8858  001E40  118B               	iorwf	(f_lseek@nsect+3)& (0+255),w,b
  8859  001E42  B4D8               	btfsc	status,2,c
  8860  001E44  D6DF               	goto	u8200
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;ff.c: 3155:      nsect += ofs / ((UINT)512);
  8864                           
  8865                           ; BSR set to: 0
  8866  001E46  C06F  F073         	movff	f_lseek@ofs,??_f_lseek
  8867  001E4A  C070  F074         	movff	f_lseek@ofs+1,??_f_lseek+1
  8868  001E4E  C071  F075         	movff	f_lseek@ofs+2,??_f_lseek+2
  8869  001E52  C072  F076         	movff	f_lseek@ofs+3,??_f_lseek+3
  8870  001E56  0E0A               	movlw	10
  8871  001E58  D005               	goto	u8310
  8872  001E5A                     u8315:
  8873  001E5A  90D8               	bcf	status,0,c
  8874  001E5C  3376               	rrcf	(??_f_lseek+3)& (0+255),f,b
  8875  001E5E  3375               	rrcf	(??_f_lseek+2)& (0+255),f,b
  8876  001E60  3374               	rrcf	(??_f_lseek+1)& (0+255),f,b
  8877  001E62  3373               	rrcf	??_f_lseek& (0+255),f,b
  8878  001E64                     u8310:
  8879  001E64  2EE8               	decfsz	wreg,f,c
  8880  001E66  D7F9               	goto	u8315
  8881  001E68  5173               	movf	??_f_lseek& (0+255),w,b
  8882  001E6A  2788               	addwf	f_lseek@nsect& (0+255),f,b
  8883  001E6C  5174               	movf	(??_f_lseek+1)& (0+255),w,b
  8884  001E6E  2389               	addwfc	(f_lseek@nsect+1)& (0+255),f,b
  8885  001E70  5175               	movf	(??_f_lseek+2)& (0+255),w,b
  8886  001E72  238A               	addwfc	(f_lseek@nsect+2)& (0+255),f,b
  8887  001E74  5176               	movf	(??_f_lseek+3)& (0+255),w,b
  8888  001E76  238B               	addwfc	(f_lseek@nsect+3)& (0+255),f,b
  8889  001E78                     l6166:
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;ff.c: 3159:   if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {
  8893  001E78  EE20 F006          	lfsr	2,6
  8894  001E7C  516D               	movf	f_lseek@fp& (0+255),w,b
  8895  001E7E  26D9               	addwf	fsr2l,f,c
  8896  001E80  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8897  001E82  22DA               	addwfc	fsr2h,f,c
  8898  001E84  0EFF               	movlw	255
  8899  001E86  14DE               	andwf	postinc2,w,c
  8900  001E88  6F73               	movwf	??_f_lseek& (0+255),b
  8901  001E8A  0E01               	movlw	1
  8902  001E8C  14DE               	andwf	postinc2,w,c
  8903  001E8E  6F74               	movwf	(??_f_lseek+1)& (0+255),b
  8904  001E90  0E00               	movlw	0
  8905  001E92  14DE               	andwf	postinc2,w,c
  8906  001E94  6F75               	movwf	(??_f_lseek+2)& (0+255),b
  8907  001E96  0E00               	movlw	0
  8908  001E98  14DE               	andwf	postinc2,w,c
  8909  001E9A  6F76               	movwf	(??_f_lseek+3)& (0+255),b
  8910  001E9C  5173               	movf	??_f_lseek& (0+255),w,b
  8911  001E9E  1174               	iorwf	(??_f_lseek+1)& (0+255),w,b
  8912  001EA0  1175               	iorwf	(??_f_lseek+2)& (0+255),w,b
  8913  001EA2  1176               	iorwf	(??_f_lseek+3)& (0+255),w,b
  8914  001EA4  B4D8               	btfsc	status,2,c
  8915  001EA6  D021               	goto	l6172
  8916                           
  8917                           ; BSR set to: 0
  8918  001EA8  EE20 F016          	lfsr	2,22
  8919  001EAC  516D               	movf	f_lseek@fp& (0+255),w,b
  8920  001EAE  26D9               	addwf	fsr2l,f,c
  8921  001EB0  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8922  001EB2  22DA               	addwfc	fsr2h,f,c
  8923  001EB4  5188               	movf	f_lseek@nsect& (0+255),w,b
  8924  001EB6  18DE               	xorwf	postinc2,w,c
  8925  001EB8  E10A               	bnz	u8330
  8926  001EBA  5189               	movf	(f_lseek@nsect+1)& (0+255),w,b
  8927  001EBC  18DE               	xorwf	postinc2,w,c
  8928  001EBE  E107               	bnz	u8330
  8929  001EC0  518A               	movf	(f_lseek@nsect+2)& (0+255),w,b
  8930  001EC2  18DE               	xorwf	postinc2,w,c
  8931  001EC4  E104               	bnz	u8330
  8932  001EC6  518B               	movf	(f_lseek@nsect+3)& (0+255),w,b
  8933  001EC8  18DE               	xorwf	postinc2,w,c
  8934  001ECA  B4D8               	btfsc	status,2,c
  8935  001ECC  D00E               	goto	l6172
  8936  001ECE                     u8330:
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;ff.c: 3171:    fp->dsect = nsect;
  8940  001ECE  EE20 F016          	lfsr	2,22
  8941  001ED2  516D               	movf	f_lseek@fp& (0+255),w,b
  8942  001ED4  26D9               	addwf	fsr2l,f,c
  8943  001ED6  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8944  001ED8  22DA               	addwfc	fsr2h,f,c
  8945  001EDA  C088  FFDE         	movff	f_lseek@nsect,postinc2
  8946  001EDE  C089  FFDE         	movff	f_lseek@nsect+1,postinc2
  8947  001EE2  C08A  FFDE         	movff	f_lseek@nsect+2,postinc2
  8948  001EE6  C08B  FFDE         	movff	f_lseek@nsect+3,postinc2
  8949  001EEA                     l6172:
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;ff.c: 3174:   if (fp->fptr > fp->fsize) {
  8953  001EEA  EE20 F006          	lfsr	2,6
  8954  001EEE  516D               	movf	f_lseek@fp& (0+255),w,b
  8955  001EF0  26D9               	addwf	fsr2l,f,c
  8956  001EF2  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8957  001EF4  22DA               	addwfc	fsr2h,f,c
  8958  001EF6  EE10 F00A          	lfsr	1,10
  8959  001EFA  516D               	movf	f_lseek@fp& (0+255),w,b
  8960  001EFC  26E1               	addwf	fsr1l,f,c
  8961  001EFE  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8962  001F00  22E2               	addwfc	fsr1h,f,c
  8963  001F02  50DE               	movf	postinc2,w,c
  8964  001F04  5CE6               	subwf	postinc1,w,c
  8965  001F06  50DE               	movf	postinc2,w,c
  8966  001F08  58E6               	subwfb	postinc1,w,c
  8967  001F0A  50DE               	movf	postinc2,w,c
  8968  001F0C  58E6               	subwfb	postinc1,w,c
  8969  001F0E  50DE               	movf	postinc2,w,c
  8970  001F10  58E6               	subwfb	postinc1,w,c
  8971  001F12  B0D8               	btfsc	status,0,c
  8972  001F14  D521               	goto	u8110
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;ff.c: 3175:    fp->fsize = fp->fptr;
  8976  001F16  EE20 F006          	lfsr	2,6
  8977  001F1A  516D               	movf	f_lseek@fp& (0+255),w,b
  8978  001F1C  26D9               	addwf	fsr2l,f,c
  8979  001F1E  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8980  001F20  22DA               	addwfc	fsr2h,f,c
  8981  001F22  EE10 F00A          	lfsr	1,10
  8982  001F26  516D               	movf	f_lseek@fp& (0+255),w,b
  8983  001F28  26E1               	addwf	fsr1l,f,c
  8984  001F2A  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8985  001F2C  22E2               	addwfc	fsr1h,f,c
  8986  001F2E  CFDE FFE6          	movff	postinc2,postinc1
  8987  001F32  CFDE FFE6          	movff	postinc2,postinc1
  8988  001F36  CFDE FFE6          	movff	postinc2,postinc1
  8989  001F3A  CFDE FFE6          	movff	postinc2,postinc1
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;ff.c: 3176:    fp->flag |= 0x20;
  8993  001F3E  EE20 F004          	lfsr	2,4
  8994  001F42  516D               	movf	f_lseek@fp& (0+255),w,b
  8995  001F44  26D9               	addwf	fsr2l,f,c
  8996  001F46  516E               	movf	(f_lseek@fp+1)& (0+255),w,b
  8997  001F48  22DA               	addwfc	fsr2h,f,c
  8998  001F4A  0E00               	movlw	0
  8999  001F4C  8ADB               	bsf	plusw2,5,c
  9000  001F4E  D504               	goto	u8110
  9001  001F50                     __end_of_f_lseek:
  9002                           	opt callstack 0
  9003                           
  9004 ;; *************** function _create_chain *****************
  9005 ;; Defined at:
  9006 ;;		line 990 in file "ff.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;  fs              2   85[COMRAM] PTR struct .
  9009 ;;		 -> NULL(0), FatFs(558), 
  9010 ;;  clst            4   87[COMRAM] unsigned long 
  9011 ;; Auto vars:     Size  Location     Type
  9012 ;;  cs              4    9[BANK0 ] unsigned long 
  9013 ;;  ncl             4    5[BANK0 ] unsigned long 
  9014 ;;  scl             4    1[BANK0 ] unsigned long 
  9015 ;;  res             1    0[BANK0 ] enum E93
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  4   85[COMRAM] unsigned long 
  9018 ;; Registers used:
  9019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9025 ;;      Params:         6       0       0       0       0       0       0       0       0
  9026 ;;      Locals:         0      13       0       0       0       0       0       0       0
  9027 ;;      Temps:          4       0       0       0       0       0       0       0       0
  9028 ;;      Totals:        10      13       0       0       0       0       0       0       0
  9029 ;;Total ram usage:       23 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    9
  9032 ;; This function calls:
  9033 ;;		_get_fat
  9034 ;;		_put_fat
  9035 ;; This function is called by:
  9036 ;;		_dir_next
  9037 ;;		_f_write
  9038 ;;		_f_lseek
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text23
  9043  003356                     __ptext23:
  9044                           	opt callstack 0
  9045  003356                     _create_chain:
  9046                           	opt callstack 19
  9047                           
  9048                           ;ff.c: 991:  FATFS* fs,;ff.c: 992:  DWORD clst;ff.c: 994: {;ff.c: 995:  DWORD cs, ncl, s
      +                          cl;;ff.c: 996:  FRESULT res;;ff.c: 999:  if (clst == 0) {
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;incstack = 0
  9052  003356  5058               	movf	create_chain@clst,w,c
  9053  003358  1059               	iorwf	create_chain@clst+1,w,c
  9054  00335A  105A               	iorwf	create_chain@clst+2,w,c
  9055  00335C  105B               	iorwf	create_chain@clst+3,w,c
  9056  00335E  A4D8               	btfss	status,2,c
  9057  003360  D02E               	goto	l4518
  9058                           
  9059                           ;ff.c: 1000:   scl = fs->last_clust;
  9060  003362  EE20 F00A          	lfsr	2,10
  9061  003366  5056               	movf	create_chain@fs,w,c
  9062  003368  26D9               	addwf	fsr2l,f,c
  9063  00336A  5057               	movf	create_chain@fs+1,w,c
  9064  00336C  22DA               	addwfc	fsr2h,f,c
  9065  00336E  CFDE F061          	movff	postinc2,create_chain@scl
  9066  003372  CFDE F062          	movff	postinc2,create_chain@scl+1
  9067  003376  CFDE F063          	movff	postinc2,create_chain@scl+2
  9068  00337A  CFDE F064          	movff	postinc2,create_chain@scl+3
  9069                           
  9070                           ;ff.c: 1001:   if (!scl || scl >= fs->n_fatent) scl = 1;
  9071  00337E  0100               	movlb	0	; () banked
  9072  003380  5161               	movf	create_chain@scl& (0+255),w,b
  9073  003382  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9074  003384  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9075  003386  1164               	iorwf	(create_chain@scl+3)& (0+255),w,b
  9076  003388  B4D8               	btfsc	status,2,c
  9077  00338A  D010               	goto	u5370
  9078                           
  9079                           ; BSR set to: 0
  9080  00338C  EE20 F012          	lfsr	2,18
  9081  003390  5056               	movf	create_chain@fs,w,c
  9082  003392  26D9               	addwf	fsr2l,f,c
  9083  003394  5057               	movf	create_chain@fs+1,w,c
  9084  003396  22DA               	addwfc	fsr2h,f,c
  9085  003398  50DE               	movf	postinc2,w,c
  9086  00339A  5D61               	subwf	create_chain@scl& (0+255),w,b
  9087  00339C  50DE               	movf	postinc2,w,c
  9088  00339E  5962               	subwfb	(create_chain@scl+1)& (0+255),w,b
  9089  0033A0  50DE               	movf	postinc2,w,c
  9090  0033A2  5963               	subwfb	(create_chain@scl+2)& (0+255),w,b
  9091  0033A4  50DE               	movf	postinc2,w,c
  9092  0033A6  5964               	subwfb	(create_chain@scl+3)& (0+255),w,b
  9093  0033A8  A0D8               	btfss	status,0,c
  9094  0033AA  D05B               	goto	l382
  9095  0033AC                     u5370:
  9096                           
  9097                           ; BSR set to: 0
  9098  0033AC  0E01               	movlw	1
  9099  0033AE  6F61               	movwf	create_chain@scl& (0+255),b
  9100  0033B0  0E00               	movlw	0
  9101  0033B2  6F62               	movwf	(create_chain@scl+1)& (0+255),b
  9102  0033B4  0E00               	movlw	0
  9103  0033B6  6F63               	movwf	(create_chain@scl+2)& (0+255),b
  9104  0033B8  0E00               	movlw	0
  9105  0033BA  6F64               	movwf	(create_chain@scl+3)& (0+255),b
  9106  0033BC  D052               	goto	l382
  9107  0033BE                     l4518:
  9108                           
  9109                           ;ff.c: 1004:   cs = get_fat(fs, clst);
  9110  0033BE  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9111  0033C2  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9112  0033C6  C058  F03D         	movff	create_chain@clst,get_fat@clst
  9113  0033CA  C059  F03E         	movff	create_chain@clst+1,get_fat@clst+1
  9114  0033CE  C05A  F03F         	movff	create_chain@clst+2,get_fat@clst+2
  9115  0033D2  C05B  F040         	movff	create_chain@clst+3,get_fat@clst+3
  9116  0033D6  EC0F  F016         	call	_get_fat	;wreg free
  9117  0033DA  C03B  F069         	movff	?_get_fat,create_chain@cs
  9118  0033DE  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9119  0033E2  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9120  0033E6  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9121                           
  9122                           ;ff.c: 1005:   if (cs < 2) return 1;
  9123  0033EA  0100               	movlb	0	; () banked
  9124  0033EC  516C               	movf	(create_chain@cs+3)& (0+255),w,b
  9125  0033EE  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9126  0033F0  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9127  0033F2  E10D               	bnz	l4526
  9128  0033F4  0E02               	movlw	2
  9129  0033F6  5D69               	subwf	create_chain@cs& (0+255),w,b
  9130  0033F8  B0D8               	btfsc	status,0,c
  9131  0033FA  D009               	goto	l4526
  9132                           
  9133                           ; BSR set to: 0
  9134  0033FC  0E01               	movlw	1
  9135  0033FE  6E56               	movwf	?_create_chain,c
  9136  003400  0E00               	movlw	0
  9137  003402  6E57               	movwf	?_create_chain+1,c
  9138  003404  0E00               	movlw	0
  9139  003406  6E58               	movwf	?_create_chain+2,c
  9140  003408  0E00               	movlw	0
  9141  00340A  6E59               	movwf	?_create_chain+3,c
  9142  00340C  0012               	return	
  9143  00340E                     l4526:
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;ff.c: 1006:   if (cs == 0xFFFFFFFF) return cs;
  9147  00340E  2969               	incf	create_chain@cs& (0+255),w,b
  9148  003410  E110               	bnz	l4530
  9149  003412  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9150  003414  E10E               	bnz	l4530
  9151  003416  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9152  003418  E10C               	bnz	l4530
  9153  00341A  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9154  00341C  A4D8               	btfss	status,2,c
  9155  00341E  D009               	goto	l4530
  9156  003420                     u5390:
  9157                           
  9158                           ; BSR set to: 0
  9159  003420  C069  F056         	movff	create_chain@cs,?_create_chain
  9160  003424  C06A  F057         	movff	create_chain@cs+1,?_create_chain+1
  9161  003428  C06B  F058         	movff	create_chain@cs+2,?_create_chain+2
  9162  00342C  C06C  F059         	movff	create_chain@cs+3,?_create_chain+3
  9163  003430  0012               	return	
  9164  003432                     l4530:
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;ff.c: 1007:   if (cs < fs->n_fatent) return cs;
  9168  003432  EE20 F012          	lfsr	2,18
  9169  003436  5056               	movf	create_chain@fs,w,c
  9170  003438  26D9               	addwf	fsr2l,f,c
  9171  00343A  5057               	movf	create_chain@fs+1,w,c
  9172  00343C  22DA               	addwfc	fsr2h,f,c
  9173  00343E  50DE               	movf	postinc2,w,c
  9174  003440  5D69               	subwf	create_chain@cs& (0+255),w,b
  9175  003442  50DE               	movf	postinc2,w,c
  9176  003444  596A               	subwfb	(create_chain@cs+1)& (0+255),w,b
  9177  003446  50DE               	movf	postinc2,w,c
  9178  003448  596B               	subwfb	(create_chain@cs+2)& (0+255),w,b
  9179  00344A  50DE               	movf	postinc2,w,c
  9180  00344C  596C               	subwfb	(create_chain@cs+3)& (0+255),w,b
  9181  00344E  A0D8               	btfss	status,0,c
  9182  003450  D7E7               	goto	u5390
  9183                           
  9184                           ; BSR set to: 0
  9185                           ;ff.c: 1008:   scl = clst;
  9186  003452  C058  F061         	movff	create_chain@clst,create_chain@scl
  9187  003456  C059  F062         	movff	create_chain@clst+1,create_chain@scl+1
  9188  00345A  C05A  F063         	movff	create_chain@clst+2,create_chain@scl+2
  9189  00345E  C05B  F064         	movff	create_chain@clst+3,create_chain@scl+3
  9190  003462                     l382:
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;ff.c: 1011:  ncl = scl;
  9194  003462  C061  F065         	movff	create_chain@scl,create_chain@ncl
  9195  003466  C062  F066         	movff	create_chain@scl+1,create_chain@ncl+1
  9196  00346A  C063  F067         	movff	create_chain@scl+2,create_chain@ncl+2
  9197  00346E  C064  F068         	movff	create_chain@scl+3,create_chain@ncl+3
  9198  003472                     l4534:
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;ff.c: 1013:   ncl++;
  9202  003472  0E01               	movlw	1
  9203  003474  2765               	addwf	create_chain@ncl& (0+255),f,b
  9204  003476  0E00               	movlw	0
  9205  003478  2366               	addwfc	(create_chain@ncl+1)& (0+255),f,b
  9206  00347A  2367               	addwfc	(create_chain@ncl+2)& (0+255),f,b
  9207  00347C  2368               	addwfc	(create_chain@ncl+3)& (0+255),f,b
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;ff.c: 1014:   if (ncl >= fs->n_fatent) {
  9211  00347E  EE20 F012          	lfsr	2,18
  9212  003482  5056               	movf	create_chain@fs,w,c
  9213  003484  26D9               	addwf	fsr2l,f,c
  9214  003486  5057               	movf	create_chain@fs+1,w,c
  9215  003488  22DA               	addwfc	fsr2h,f,c
  9216  00348A  50DE               	movf	postinc2,w,c
  9217  00348C  5D65               	subwf	create_chain@ncl& (0+255),w,b
  9218  00348E  50DE               	movf	postinc2,w,c
  9219  003490  5966               	subwfb	(create_chain@ncl+1)& (0+255),w,b
  9220  003492  50DE               	movf	postinc2,w,c
  9221  003494  5967               	subwfb	(create_chain@ncl+2)& (0+255),w,b
  9222  003496  50DE               	movf	postinc2,w,c
  9223  003498  5968               	subwfb	(create_chain@ncl+3)& (0+255),w,b
  9224  00349A  A0D8               	btfss	status,0,c
  9225  00349C  D019               	goto	l4546
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;ff.c: 1015:    ncl = 2;
  9229  00349E  0E02               	movlw	2
  9230  0034A0  6F65               	movwf	create_chain@ncl& (0+255),b
  9231  0034A2  0E00               	movlw	0
  9232  0034A4  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9233  0034A6  0E00               	movlw	0
  9234  0034A8  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9235  0034AA  0E00               	movlw	0
  9236  0034AC  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;ff.c: 1016:    if (ncl > scl) return 0;
  9240  0034AE  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9241  0034B0  1163               	iorwf	(create_chain@scl+2)& (0+255),w,b
  9242  0034B2  1162               	iorwf	(create_chain@scl+1)& (0+255),w,b
  9243  0034B4  E10D               	bnz	l4546
  9244  0034B6  0E02               	movlw	2
  9245  0034B8  5D61               	subwf	create_chain@scl& (0+255),w,b
  9246  0034BA  B0D8               	btfsc	status,0,c
  9247  0034BC  D009               	goto	l4546
  9248  0034BE                     u5420:
  9249                           
  9250                           ; BSR set to: 0
  9251  0034BE  0E00               	movlw	0
  9252  0034C0  6E56               	movwf	?_create_chain,c
  9253  0034C2  0E00               	movlw	0
  9254  0034C4  6E57               	movwf	?_create_chain+1,c
  9255  0034C6  0E00               	movlw	0
  9256  0034C8  6E58               	movwf	?_create_chain+2,c
  9257  0034CA  0E00               	movlw	0
  9258  0034CC  6E59               	movwf	?_create_chain+3,c
  9259  0034CE  0012               	return	
  9260  0034D0                     l4546:
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;ff.c: 1018:   cs = get_fat(fs, ncl);
  9264  0034D0  C056  F03B         	movff	create_chain@fs,get_fat@fs
  9265  0034D4  C057  F03C         	movff	create_chain@fs+1,get_fat@fs+1
  9266  0034D8  C065  F03D         	movff	create_chain@ncl,get_fat@clst
  9267  0034DC  C066  F03E         	movff	create_chain@ncl+1,get_fat@clst+1
  9268  0034E0  C067  F03F         	movff	create_chain@ncl+2,get_fat@clst+2
  9269  0034E4  C068  F040         	movff	create_chain@ncl+3,get_fat@clst+3
  9270  0034E8  EC0F  F016         	call	_get_fat	;wreg free
  9271  0034EC  C03B  F069         	movff	?_get_fat,create_chain@cs
  9272  0034F0  C03C  F06A         	movff	?_get_fat+1,create_chain@cs+1
  9273  0034F4  C03D  F06B         	movff	?_get_fat+2,create_chain@cs+2
  9274  0034F8  C03E  F06C         	movff	?_get_fat+3,create_chain@cs+3
  9275                           
  9276                           ;ff.c: 1019:   if (cs == 0) break;
  9277  0034FC  0100               	movlb	0	; () banked
  9278  0034FE  5169               	movf	create_chain@cs& (0+255),w,b
  9279  003500  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9280  003502  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9281  003504  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9282  003506  B4D8               	btfsc	status,2,c
  9283  003508  D01D               	goto	l4562
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;ff.c: 1020:   if (cs == 0xFFFFFFFF || cs == 1)
  9287  00350A  2969               	incf	create_chain@cs& (0+255),w,b
  9288  00350C  E107               	bnz	u5440
  9289  00350E  296A               	incf	(create_chain@cs+1)& (0+255),w,b
  9290  003510  E105               	bnz	u5440
  9291  003512  296B               	incf	(create_chain@cs+2)& (0+255),w,b
  9292  003514  E103               	bnz	u5440
  9293  003516  296C               	incf	(create_chain@cs+3)& (0+255),w,b
  9294  003518  B4D8               	btfsc	status,2,c
  9295  00351A  D782               	goto	u5390
  9296  00351C                     u5440:
  9297                           
  9298                           ; BSR set to: 0
  9299  00351C  0569               	decf	create_chain@cs& (0+255),w,b
  9300  00351E  116A               	iorwf	(create_chain@cs+1)& (0+255),w,b
  9301  003520  116B               	iorwf	(create_chain@cs+2)& (0+255),w,b
  9302  003522  116C               	iorwf	(create_chain@cs+3)& (0+255),w,b
  9303  003524  B4D8               	btfsc	status,2,c
  9304  003526  D77C               	goto	u5390
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;ff.c: 1022:   if (ncl == scl) return 0;
  9308  003528  5161               	movf	create_chain@scl& (0+255),w,b
  9309  00352A  1965               	xorwf	create_chain@ncl& (0+255),w,b
  9310  00352C  E1A2               	bnz	l4534
  9311  00352E  5162               	movf	(create_chain@scl+1)& (0+255),w,b
  9312  003530  1966               	xorwf	(create_chain@ncl+1)& (0+255),w,b
  9313  003532  E19F               	bnz	l4534
  9314  003534  5163               	movf	(create_chain@scl+2)& (0+255),w,b
  9315  003536  1967               	xorwf	(create_chain@ncl+2)& (0+255),w,b
  9316  003538  E19C               	bnz	l4534
  9317  00353A  5164               	movf	(create_chain@scl+3)& (0+255),w,b
  9318  00353C  1968               	xorwf	(create_chain@ncl+3)& (0+255),w,b
  9319  00353E  B4D8               	btfsc	status,2,c
  9320  003540  D7BE               	goto	u5420
  9321  003542  D797               	goto	l4534
  9322  003544                     l4562:
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;ff.c: 1025:  res = put_fat(fs, ncl, 0x0FFFFFFF);
  9326  003544  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9327  003548  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9328  00354C  C065  F03D         	movff	create_chain@ncl,put_fat@clst
  9329  003550  C066  F03E         	movff	create_chain@ncl+1,put_fat@clst+1
  9330  003554  C067  F03F         	movff	create_chain@ncl+2,put_fat@clst+2
  9331  003558  C068  F040         	movff	create_chain@ncl+3,put_fat@clst+3
  9332  00355C  0EFF               	movlw	255
  9333  00355E  6E41               	movwf	put_fat@val,c
  9334  003560  0EFF               	movlw	255
  9335  003562  6E42               	movwf	put_fat@val+1,c
  9336  003564  0EFF               	movlw	255
  9337  003566  6E43               	movwf	put_fat@val+2,c
  9338  003568  0E0F               	movlw	15
  9339  00356A  6E44               	movwf	put_fat@val+3,c
  9340  00356C  ECF7  F011         	call	_put_fat	;wreg free
  9341  003570  0100               	movlb	0	; () banked
  9342  003572  6F60               	movwf	create_chain@res& (0+255),b
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;ff.c: 1026:  if (res == FR_OK && clst != 0) {
  9346  003574  5160               	movf	create_chain@res& (0+255),w,b
  9347  003576  A4D8               	btfss	status,2,c
  9348  003578  D01E               	goto	l4570
  9349                           
  9350                           ; BSR set to: 0
  9351  00357A  5058               	movf	create_chain@clst,w,c
  9352  00357C  1059               	iorwf	create_chain@clst+1,w,c
  9353  00357E  105A               	iorwf	create_chain@clst+2,w,c
  9354  003580  105B               	iorwf	create_chain@clst+3,w,c
  9355  003582  B4D8               	btfsc	status,2,c
  9356  003584  D018               	goto	l4570
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;ff.c: 1027:   res = put_fat(fs, clst, ncl);
  9360  003586  C056  F03B         	movff	create_chain@fs,put_fat@fs
  9361  00358A  C057  F03C         	movff	create_chain@fs+1,put_fat@fs+1
  9362  00358E  C058  F03D         	movff	create_chain@clst,put_fat@clst
  9363  003592  C059  F03E         	movff	create_chain@clst+1,put_fat@clst+1
  9364  003596  C05A  F03F         	movff	create_chain@clst+2,put_fat@clst+2
  9365  00359A  C05B  F040         	movff	create_chain@clst+3,put_fat@clst+3
  9366  00359E  C065  F041         	movff	create_chain@ncl,put_fat@val
  9367  0035A2  C066  F042         	movff	create_chain@ncl+1,put_fat@val+1
  9368  0035A6  C067  F043         	movff	create_chain@ncl+2,put_fat@val+2
  9369  0035AA  C068  F044         	movff	create_chain@ncl+3,put_fat@val+3
  9370  0035AE  ECF7  F011         	call	_put_fat	;wreg free
  9371  0035B2  0100               	movlb	0	; () banked
  9372  0035B4  6F60               	movwf	create_chain@res& (0+255),b
  9373  0035B6                     l4570:
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;ff.c: 1029:  if (res == FR_OK) {
  9377  0035B6  5160               	movf	create_chain@res& (0+255),w,b
  9378  0035B8  A4D8               	btfss	status,2,c
  9379  0035BA  D031               	goto	l4576
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;ff.c: 1030:   fs->last_clust = ncl;
  9383  0035BC  EE20 F00A          	lfsr	2,10
  9384  0035C0  5056               	movf	create_chain@fs,w,c
  9385  0035C2  26D9               	addwf	fsr2l,f,c
  9386  0035C4  5057               	movf	create_chain@fs+1,w,c
  9387  0035C6  22DA               	addwfc	fsr2h,f,c
  9388  0035C8  C065  FFDE         	movff	create_chain@ncl,postinc2
  9389  0035CC  C066  FFDE         	movff	create_chain@ncl+1,postinc2
  9390  0035D0  C067  FFDE         	movff	create_chain@ncl+2,postinc2
  9391  0035D4  C068  FFDE         	movff	create_chain@ncl+3,postinc2
  9392                           
  9393                           ;ff.c: 1031:   if (fs->free_clust != 0xFFFFFFFF) {
  9394  0035D8  EE20 F00E          	lfsr	2,14
  9395  0035DC  5056               	movf	create_chain@fs,w,c
  9396  0035DE  26D9               	addwf	fsr2l,f,c
  9397  0035E0  5057               	movf	create_chain@fs+1,w,c
  9398  0035E2  22DA               	addwfc	fsr2h,f,c
  9399  0035E4  28DE               	incf	postinc2,w,c
  9400  0035E6  E107               	bnz	u5500
  9401  0035E8  28DE               	incf	postinc2,w,c
  9402  0035EA  E105               	bnz	u5500
  9403  0035EC  28DE               	incf	postinc2,w,c
  9404  0035EE  E103               	bnz	u5500
  9405  0035F0  28DE               	incf	postinc2,w,c
  9406  0035F2  B4D8               	btfsc	status,2,c
  9407  0035F4  D024               	goto	l399
  9408  0035F6                     u5500:
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;ff.c: 1032:    fs->free_clust--;
  9412  0035F6  EE20 F00E          	lfsr	2,14
  9413  0035FA  5056               	movf	create_chain@fs,w,c
  9414  0035FC  26D9               	addwf	fsr2l,f,c
  9415  0035FE  5057               	movf	create_chain@fs+1,w,c
  9416  003600  22DA               	addwfc	fsr2h,f,c
  9417  003602  06DE               	decf	postinc2,f,c
  9418  003604  0E00               	movlw	0
  9419  003606  5ADE               	subwfb	postinc2,f,c
  9420  003608  5ADE               	subwfb	postinc2,f,c
  9421  00360A  5ADE               	subwfb	postinc2,f,c
  9422                           
  9423                           ;ff.c: 1033:    fs->fsi_flag |= 1;
  9424  00360C  EE20 F005          	lfsr	2,5
  9425  003610  5056               	movf	create_chain@fs,w,c
  9426  003612  26D9               	addwf	fsr2l,f,c
  9427  003614  5057               	movf	create_chain@fs+1,w,c
  9428  003616  22DA               	addwfc	fsr2h,f,c
  9429  003618  0E00               	movlw	0
  9430  00361A  80DB               	bsf	plusw2,0,c
  9431  00361C  D010               	goto	l399
  9432  00361E                     l4576:
  9433                           
  9434                           ; BSR set to: 0
  9435                           ;ff.c: 1036:   ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  9436  00361E  0560               	decf	create_chain@res& (0+255),w,b
  9437  003620  B4D8               	btfsc	status,2,c
  9438  003622  D009               	goto	l401
  9439                           
  9440                           ; BSR set to: 0
  9441  003624  0E01               	movlw	1
  9442  003626  6F65               	movwf	create_chain@ncl& (0+255),b
  9443  003628  0E00               	movlw	0
  9444  00362A  6F66               	movwf	(create_chain@ncl+1)& (0+255),b
  9445  00362C  0E00               	movlw	0
  9446  00362E  6F67               	movwf	(create_chain@ncl+2)& (0+255),b
  9447  003630  0E00               	movlw	0
  9448  003632  6F68               	movwf	(create_chain@ncl+3)& (0+255),b
  9449  003634  D004               	goto	l399
  9450  003636                     l401:
  9451                           
  9452                           ; BSR set to: 0
  9453  003636  6965               	setf	create_chain@ncl& (0+255),b
  9454  003638  6966               	setf	(create_chain@ncl+1)& (0+255),b
  9455  00363A  6967               	setf	(create_chain@ncl+2)& (0+255),b
  9456  00363C  6968               	setf	(create_chain@ncl+3)& (0+255),b
  9457  00363E                     l399:
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;ff.c: 1039:  return ncl;
  9461  00363E  C065  F056         	movff	create_chain@ncl,?_create_chain
  9462  003642  C066  F057         	movff	create_chain@ncl+1,?_create_chain+1
  9463  003646  C067  F058         	movff	create_chain@ncl+2,?_create_chain+2
  9464  00364A  C068  F059         	movff	create_chain@ncl+3,?_create_chain+3
  9465                           
  9466                           ; BSR set to: 0
  9467  00364E  0012               	return		;funcret
  9468  003650                     __end_of_create_chain:
  9469                           	opt callstack 0
  9470                           
  9471 ;; *************** function _put_fat *****************
  9472 ;; Defined at:
  9473 ;;		line 873 in file "ff.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;  fs              2   58[COMRAM] PTR struct .
  9476 ;;		 -> NULL(0), FatFs(558), 
  9477 ;;  clst            4   60[COMRAM] unsigned long 
  9478 ;;  val             4   64[COMRAM] unsigned long 
  9479 ;; Auto vars:     Size  Location     Type
  9480 ;;  p               2   83[COMRAM] PTR unsigned char 
  9481 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
  9482 ;;  bc              2   80[COMRAM] unsigned short 
  9483 ;;  res             1   82[COMRAM] enum E93
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      enum E93
  9486 ;; Registers used:
  9487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9493 ;;      Params:        10       0       0       0       0       0       0       0       0
  9494 ;;      Locals:         9       0       0       0       0       0       0       0       0
  9495 ;;      Temps:          8       0       0       0       0       0       0       0       0
  9496 ;;      Totals:        27       0       0       0       0       0       0       0       0
  9497 ;;Total ram usage:       27 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    8
  9500 ;; This function calls:
  9501 ;;		_move_window
  9502 ;; This function is called by:
  9503 ;;		_remove_chain
  9504 ;;		_create_chain
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           	psect	text24
  9509  0023EE                     __ptext24:
  9510                           	opt callstack 0
  9511  0023EE                     _put_fat:
  9512                           	opt callstack 19
  9513                           
  9514                           ;ff.c: 874:  FATFS* fs,;ff.c: 875:  DWORD clst,;ff.c: 876:  DWORD val;ff.c: 878: {;ff.c:
      +                           879:  UINT bc;;ff.c: 880:  BYTE *p;;ff.c: 881:  FRESULT res;;ff.c: 884:  if (clst < 2 |
      +                          | clst >= fs->n_fatent) {
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;incstack = 0
  9518  0023EE  5040               	movf	put_fat@clst+3,w,c
  9519  0023F0  103F               	iorwf	put_fat@clst+2,w,c
  9520  0023F2  103E               	iorwf	put_fat@clst+1,w,c
  9521  0023F4  E104               	bnz	u5190
  9522  0023F6  0E02               	movlw	2
  9523  0023F8  5C3D               	subwf	put_fat@clst,w,c
  9524  0023FA  A0D8               	btfss	status,0,c
  9525  0023FC  D010               	goto	u5200
  9526  0023FE                     u5190:
  9527  0023FE  EE20 F012          	lfsr	2,18
  9528  002402  503B               	movf	put_fat@fs,w,c
  9529  002404  26D9               	addwf	fsr2l,f,c
  9530  002406  503C               	movf	put_fat@fs+1,w,c
  9531  002408  22DA               	addwfc	fsr2h,f,c
  9532  00240A  50DE               	movf	postinc2,w,c
  9533  00240C  5C3D               	subwf	put_fat@clst,w,c
  9534  00240E  50DE               	movf	postinc2,w,c
  9535  002410  583E               	subwfb	put_fat@clst+1,w,c
  9536  002412  50DE               	movf	postinc2,w,c
  9537  002414  583F               	subwfb	put_fat@clst+2,w,c
  9538  002416  50DE               	movf	postinc2,w,c
  9539  002418  5840               	subwfb	put_fat@clst+3,w,c
  9540  00241A  A0D8               	btfss	status,0,c
  9541  00241C  D1E5               	goto	l4468
  9542  00241E                     u5200:
  9543                           
  9544                           ;ff.c: 885:   res = FR_INT_ERR;
  9545  00241E  0E02               	movlw	2
  9546  002420  6E53               	movwf	put_fat@res,c
  9547                           
  9548                           ;ff.c: 887:  } else {
  9549  002422  D1F8               	goto	l4470
  9550  002424                     l343:
  9551                           
  9552                           ;ff.c: 890:    bc = (UINT)clst; bc += bc / 2;
  9553  002424  C03D  F051         	movff	put_fat@clst,put_fat@bc
  9554  002428  C03E  F052         	movff	put_fat@clst+1,put_fat@bc+1
  9555  00242C  90D8               	bcf	status,0,c
  9556  00242E  3052               	rrcf	put_fat@bc+1,w,c
  9557  002430  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9558  002432  3051               	rrcf	put_fat@bc,w,c
  9559  002434  6E45               	movwf	??_put_fat& (0+255),c
  9560  002436  5045               	movf	??_put_fat,w,c
  9561  002438  2651               	addwf	put_fat@bc,f,c
  9562  00243A  5046               	movf	??_put_fat+1,w,c
  9563  00243C  2252               	addwfc	put_fat@bc+1,f,c
  9564                           
  9565                           ;ff.c: 891:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9566  00243E  C03B  F030         	movff	put_fat@fs,move_window@fs
  9567  002442  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9568  002446  EE20 F01E          	lfsr	2,30
  9569  00244A  503B               	movf	put_fat@fs,w,c
  9570  00244C  26D9               	addwf	fsr2l,f,c
  9571  00244E  503C               	movf	put_fat@fs+1,w,c
  9572  002450  22DA               	addwfc	fsr2h,f,c
  9573  002452  CFDE F045          	movff	postinc2,??_put_fat
  9574  002456  CFDE F046          	movff	postinc2,??_put_fat+1
  9575  00245A  CFDE F047          	movff	postinc2,??_put_fat+2
  9576  00245E  CFDE F048          	movff	postinc2,??_put_fat+3
  9577  002462  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9578  002466  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9579  00246A  0E09               	movlw	9
  9580  00246C  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9581  00246E                     u5215:
  9582  00246E  90D8               	bcf	status,0,c
  9583  002470  324A               	rrcf	??_put_fat+5,f,c
  9584  002472  3249               	rrcf	??_put_fat+4,f,c
  9585  002474  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9586  002476  D7FB               	goto	u5215
  9587  002478  5049               	movf	??_put_fat+4,w,c
  9588  00247A  2445               	addwf	??_put_fat,w,c
  9589  00247C  6E32               	movwf	move_window@sector,c
  9590  00247E  504A               	movf	??_put_fat+5,w,c
  9591  002480  2046               	addwfc	??_put_fat+1,w,c
  9592  002482  6E33               	movwf	move_window@sector+1,c
  9593  002484  0E00               	movlw	0
  9594  002486  2047               	addwfc	??_put_fat+2,w,c
  9595  002488  6E34               	movwf	move_window@sector+2,c
  9596  00248A  0E00               	movlw	0
  9597  00248C  2048               	addwfc	??_put_fat+3,w,c
  9598  00248E  6E35               	movwf	move_window@sector+3,c
  9599  002490  EC82  F027         	call	_move_window	;wreg free
  9600  002494  6E53               	movwf	put_fat@res,c
  9601                           
  9602                           ;ff.c: 892:    if (res != FR_OK) break;
  9603  002496  5053               	movf	put_fat@res,w,c
  9604  002498  A4D8               	btfss	status,2,c
  9605  00249A  D1BC               	goto	l4470
  9606                           
  9607                           ;ff.c: 893:    p = &fs->win[bc++ % ((UINT)512)];
  9608  00249C  0EFF               	movlw	255
  9609  00249E  6E45               	movwf	??_put_fat& (0+255),c
  9610  0024A0  0E01               	movlw	1
  9611  0024A2  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9612  0024A4  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9613  0024A8  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9614  0024AC  5045               	movf	??_put_fat,w,c
  9615  0024AE  1647               	andwf	??_put_fat+2,f,c
  9616  0024B0  5046               	movf	??_put_fat+1,w,c
  9617  0024B2  1648               	andwf	??_put_fat+3,f,c
  9618  0024B4  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9619  0024B8  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9620  0024BC  5047               	movf	??_put_fat+2,w,c
  9621  0024BE  2649               	addwf	??_put_fat+4,f,c
  9622  0024C0  5048               	movf	??_put_fat+3,w,c
  9623  0024C2  224A               	addwfc	??_put_fat+5,f,c
  9624  0024C4  0E2E               	movlw	46
  9625  0024C6  2449               	addwf	??_put_fat+4,w,c
  9626  0024C8  6E54               	movwf	put_fat@p,c
  9627  0024CA  0E00               	movlw	0
  9628  0024CC  204A               	addwfc	??_put_fat+5,w,c
  9629  0024CE  6E55               	movwf	put_fat@p+1,c
  9630  0024D0  4A51               	infsnz	put_fat@bc,f,c
  9631  0024D2  2A52               	incf	put_fat@bc+1,f,c
  9632                           
  9633                           ;ff.c: 894:    *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  9634  0024D4  B03D               	btfsc	put_fat@clst,0,c
  9635  0024D6  D004               	goto	l4422
  9636  0024D8  C041  F04D         	movff	put_fat@val,_put_fat$594
  9637  0024DC  6A4E               	clrf	_put_fat$594+1,c
  9638  0024DE  D01A               	goto	l4424
  9639  0024E0                     l4422:
  9640  0024E0  5041               	movf	put_fat@val,w,c
  9641  0024E2  6E45               	movwf	??_put_fat& (0+255),c
  9642  0024E4  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9643  0024E6  3A45               	swapf	??_put_fat,f,c
  9644  0024E8  3A46               	swapf	??_put_fat+1,f,c
  9645  0024EA  0EF0               	movlw	240
  9646  0024EC  1646               	andwf	??_put_fat+1,f,c
  9647  0024EE  5045               	movf	??_put_fat,w,c
  9648  0024F0  0B0F               	andlw	15
  9649  0024F2  1246               	iorwf	??_put_fat+1,f,c
  9650  0024F4  0EF0               	movlw	240
  9651  0024F6  1645               	andwf	??_put_fat,f,c
  9652  0024F8  C054  FFD9         	movff	put_fat@p,fsr2l
  9653  0024FC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9654  002500  50DF               	movf	indf2,w,c
  9655  002502  0B0F               	andlw	15
  9656  002504  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9657  002506  6A48               	clrf	(??_put_fat+3)& (0+255),c
  9658  002508  5045               	movf	??_put_fat,w,c
  9659  00250A  1047               	iorwf	??_put_fat+2,w,c
  9660  00250C  6E4D               	movwf	_put_fat$594,c
  9661  00250E  5046               	movf	??_put_fat+1,w,c
  9662  002510  1048               	iorwf	??_put_fat+3,w,c
  9663  002512  6E4E               	movwf	_put_fat$594+1,c
  9664  002514                     l4424:
  9665  002514  C054  FFD9         	movff	put_fat@p,fsr2l
  9666  002518  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9667  00251C  C04D  FFDF         	movff	_put_fat$594,indf2
  9668                           
  9669                           ;ff.c: 895:    fs->wflag = 1;
  9670  002520  EE20 F004          	lfsr	2,4
  9671  002524  503B               	movf	put_fat@fs,w,c
  9672  002526  26D9               	addwf	fsr2l,f,c
  9673  002528  503C               	movf	put_fat@fs+1,w,c
  9674  00252A  22DA               	addwfc	fsr2h,f,c
  9675  00252C  0E01               	movlw	1
  9676  00252E  6EDF               	movwf	indf2,c
  9677                           
  9678                           ;ff.c: 896:    res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
  9679  002530  C03B  F030         	movff	put_fat@fs,move_window@fs
  9680  002534  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9681  002538  EE20 F01E          	lfsr	2,30
  9682  00253C  503B               	movf	put_fat@fs,w,c
  9683  00253E  26D9               	addwf	fsr2l,f,c
  9684  002540  503C               	movf	put_fat@fs+1,w,c
  9685  002542  22DA               	addwfc	fsr2h,f,c
  9686  002544  CFDE F045          	movff	postinc2,??_put_fat
  9687  002548  CFDE F046          	movff	postinc2,??_put_fat+1
  9688  00254C  CFDE F047          	movff	postinc2,??_put_fat+2
  9689  002550  CFDE F048          	movff	postinc2,??_put_fat+3
  9690  002554  C051  F049         	movff	put_fat@bc,??_put_fat+4
  9691  002558  C052  F04A         	movff	put_fat@bc+1,??_put_fat+5
  9692  00255C  0E09               	movlw	9
  9693  00255E  6E4B               	movwf	(??_put_fat+6)& (0+255),c
  9694  002560                     u5245:
  9695  002560  90D8               	bcf	status,0,c
  9696  002562  324A               	rrcf	??_put_fat+5,f,c
  9697  002564  3249               	rrcf	??_put_fat+4,f,c
  9698  002566  2E4B               	decfsz	(??_put_fat+6)& (0+255),f,c
  9699  002568  D7FB               	goto	u5245
  9700  00256A  5049               	movf	??_put_fat+4,w,c
  9701  00256C  2445               	addwf	??_put_fat,w,c
  9702  00256E  6E32               	movwf	move_window@sector,c
  9703  002570  504A               	movf	??_put_fat+5,w,c
  9704  002572  2046               	addwfc	??_put_fat+1,w,c
  9705  002574  6E33               	movwf	move_window@sector+1,c
  9706  002576  0E00               	movlw	0
  9707  002578  2047               	addwfc	??_put_fat+2,w,c
  9708  00257A  6E34               	movwf	move_window@sector+2,c
  9709  00257C  0E00               	movlw	0
  9710  00257E  2048               	addwfc	??_put_fat+3,w,c
  9711  002580  6E35               	movwf	move_window@sector+3,c
  9712  002582  EC82  F027         	call	_move_window	;wreg free
  9713  002586  6E53               	movwf	put_fat@res,c
  9714                           
  9715                           ;ff.c: 897:    if (res != FR_OK) break;
  9716  002588  5053               	movf	put_fat@res,w,c
  9717  00258A  A4D8               	btfss	status,2,c
  9718  00258C  D143               	goto	l4470
  9719                           
  9720                           ;ff.c: 898:    p = &fs->win[bc % ((UINT)512)];
  9721  00258E  0EFF               	movlw	255
  9722  002590  6E45               	movwf	??_put_fat& (0+255),c
  9723  002592  0E01               	movlw	1
  9724  002594  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9725  002596  C051  F047         	movff	put_fat@bc,??_put_fat+2
  9726  00259A  C052  F048         	movff	put_fat@bc+1,??_put_fat+3
  9727  00259E  5045               	movf	??_put_fat,w,c
  9728  0025A0  1647               	andwf	??_put_fat+2,f,c
  9729  0025A2  5046               	movf	??_put_fat+1,w,c
  9730  0025A4  1648               	andwf	??_put_fat+3,f,c
  9731  0025A6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9732  0025AA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9733  0025AE  5047               	movf	??_put_fat+2,w,c
  9734  0025B0  2649               	addwf	??_put_fat+4,f,c
  9735  0025B2  5048               	movf	??_put_fat+3,w,c
  9736  0025B4  224A               	addwfc	??_put_fat+5,f,c
  9737  0025B6  0E2E               	movlw	46
  9738  0025B8  2449               	addwf	??_put_fat+4,w,c
  9739  0025BA  6E54               	movwf	put_fat@p,c
  9740  0025BC  0E00               	movlw	0
  9741  0025BE  204A               	addwfc	??_put_fat+5,w,c
  9742  0025C0  6E55               	movwf	put_fat@p+1,c
  9743                           
  9744                           ;ff.c: 899:    *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0
      +                          x0F));
  9745  0025C2  B03D               	btfsc	put_fat@clst,0,c
  9746  0025C4  D01B               	goto	l4440
  9747  0025C6  C041  F045         	movff	put_fat@val,??_put_fat
  9748  0025CA  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9749  0025CE  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9750  0025D2  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9751  0025D6  C046  F045         	movff	??_put_fat+1,??_put_fat
  9752  0025DA  C047  F046         	movff	??_put_fat+2,??_put_fat+1
  9753  0025DE  C048  F047         	movff	??_put_fat+3,??_put_fat+2
  9754  0025E2  6A48               	clrf	??_put_fat+3,c
  9755  0025E4  0E0F               	movlw	15
  9756  0025E6  1645               	andwf	??_put_fat,f,c
  9757  0025E8  C054  FFD9         	movff	put_fat@p,fsr2l
  9758  0025EC  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9759  0025F0  50DF               	movf	indf2,w,c
  9760  0025F2  0BF0               	andlw	240
  9761  0025F4  1045               	iorwf	??_put_fat,w,c
  9762  0025F6  6E49               	movwf	(??_put_fat+4)& (0+255),c
  9763  0025F8  5049               	movf	??_put_fat+4,w,c
  9764  0025FA  D012               	goto	L9
  9765  0025FC                     l4440:
  9766  0025FC  C041  F045         	movff	put_fat@val,??_put_fat
  9767  002600  C042  F046         	movff	put_fat@val+1,??_put_fat+1
  9768  002604  C043  F047         	movff	put_fat@val+2,??_put_fat+2
  9769  002608  C044  F048         	movff	put_fat@val+3,??_put_fat+3
  9770  00260C  0E05               	movlw	5
  9771  00260E  D005               	goto	u5270
  9772  002610                     u5275:
  9773  002610  90D8               	bcf	status,0,c
  9774  002612  3248               	rrcf	??_put_fat+3,f,c
  9775  002614  3247               	rrcf	??_put_fat+2,f,c
  9776  002616  3246               	rrcf	??_put_fat+1,f,c
  9777  002618  3245               	rrcf	??_put_fat,f,c
  9778  00261A                     u5270:
  9779  00261A  2EE8               	decfsz	wreg,f,c
  9780  00261C  D7F9               	goto	u5275
  9781  00261E  5045               	movf	??_put_fat,w,c
  9782  002620                     L9:
  9783  002620  6E4F               	movwf	_put_fat$595,c
  9784  002622  6A50               	clrf	_put_fat$595+1,c
  9785  002624  C054  FFD9         	movff	put_fat@p,fsr2l
  9786  002628  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9787  00262C  C04F  FFDF         	movff	_put_fat$595,indf2
  9788  002630  D0D2               	goto	l4464
  9789  002632                     l4444:
  9790                           
  9791                           ;ff.c: 904:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
  9792  002632  C03B  F030         	movff	put_fat@fs,move_window@fs
  9793  002636  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9794  00263A  EE20 F01E          	lfsr	2,30
  9795  00263E  503B               	movf	put_fat@fs,w,c
  9796  002640  26D9               	addwf	fsr2l,f,c
  9797  002642  503C               	movf	put_fat@fs+1,w,c
  9798  002644  22DA               	addwfc	fsr2h,f,c
  9799  002646  CFDE F045          	movff	postinc2,??_put_fat
  9800  00264A  CFDE F046          	movff	postinc2,??_put_fat+1
  9801  00264E  CFDE F047          	movff	postinc2,??_put_fat+2
  9802  002652  CFDE F048          	movff	postinc2,??_put_fat+3
  9803  002656  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9804  00265A  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9805  00265E  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9806  002662  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9807  002666  C04A  F049         	movff	??_put_fat+5,??_put_fat+4
  9808  00266A  C04B  F04A         	movff	??_put_fat+6,??_put_fat+5
  9809  00266E  C04C  F04B         	movff	??_put_fat+7,??_put_fat+6
  9810  002672  6A4C               	clrf	??_put_fat+7,c
  9811  002674  5045               	movf	??_put_fat,w,c
  9812  002676  2449               	addwf	??_put_fat+4,w,c
  9813  002678  6E32               	movwf	move_window@sector,c
  9814  00267A  5046               	movf	??_put_fat+1,w,c
  9815  00267C  204A               	addwfc	??_put_fat+5,w,c
  9816  00267E  6E33               	movwf	move_window@sector+1,c
  9817  002680  5047               	movf	??_put_fat+2,w,c
  9818  002682  204B               	addwfc	??_put_fat+6,w,c
  9819  002684  6E34               	movwf	move_window@sector+2,c
  9820  002686  5048               	movf	??_put_fat+3,w,c
  9821  002688  204C               	addwfc	??_put_fat+7,w,c
  9822  00268A  6E35               	movwf	move_window@sector+3,c
  9823  00268C  EC82  F027         	call	_move_window	;wreg free
  9824  002690  6E53               	movwf	put_fat@res,c
  9825                           
  9826                           ;ff.c: 905:    if (res != FR_OK) break;
  9827  002692  5053               	movf	put_fat@res,w,c
  9828  002694  A4D8               	btfss	status,2,c
  9829  002696  D0BE               	goto	l4470
  9830                           
  9831                           ;ff.c: 906:    p = &fs->win[clst * 2 % ((UINT)512)];
  9832  002698  0EFF               	movlw	255
  9833  00269A  6E45               	movwf	??_put_fat& (0+255),c
  9834  00269C  0E01               	movlw	1
  9835  00269E  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9836  0026A0  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9837  0026A4  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9838  0026A8  90D8               	bcf	status,0,c
  9839  0026AA  3647               	rlcf	??_put_fat+2,f,c
  9840  0026AC  3648               	rlcf	??_put_fat+3,f,c
  9841  0026AE  5045               	movf	??_put_fat,w,c
  9842  0026B0  1647               	andwf	??_put_fat+2,f,c
  9843  0026B2  5046               	movf	??_put_fat+1,w,c
  9844  0026B4  1648               	andwf	??_put_fat+3,f,c
  9845  0026B6  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9846  0026BA  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9847  0026BE  5047               	movf	??_put_fat+2,w,c
  9848  0026C0  2649               	addwf	??_put_fat+4,f,c
  9849  0026C2  5048               	movf	??_put_fat+3,w,c
  9850  0026C4  224A               	addwfc	??_put_fat+5,f,c
  9851  0026C6  0E2E               	movlw	46
  9852  0026C8  2449               	addwf	??_put_fat+4,w,c
  9853  0026CA  6E54               	movwf	put_fat@p,c
  9854  0026CC  0E00               	movlw	0
  9855  0026CE  204A               	addwfc	??_put_fat+5,w,c
  9856  0026D0  6E55               	movwf	put_fat@p+1,c
  9857                           
  9858                           ;ff.c: 907:    *(WORD*)(BYTE*)(p)=(WORD)((WORD)val);
  9859  0026D2  C054  FFD9         	movff	put_fat@p,fsr2l
  9860  0026D6  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9861  0026DA  C041  FFDE         	movff	put_fat@val,postinc2
  9862  0026DE  C042  FFDD         	movff	put_fat@val+1,postdec2
  9863  0026E2  D079               	goto	l4464
  9864  0026E4                     l4454:
  9865                           
  9866                           ;ff.c: 912:    res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
  9867  0026E4  C03B  F030         	movff	put_fat@fs,move_window@fs
  9868  0026E8  C03C  F031         	movff	put_fat@fs+1,move_window@fs+1
  9869  0026EC  EE20 F01E          	lfsr	2,30
  9870  0026F0  503B               	movf	put_fat@fs,w,c
  9871  0026F2  26D9               	addwf	fsr2l,f,c
  9872  0026F4  503C               	movf	put_fat@fs+1,w,c
  9873  0026F6  22DA               	addwfc	fsr2h,f,c
  9874  0026F8  CFDE F045          	movff	postinc2,??_put_fat
  9875  0026FC  CFDE F046          	movff	postinc2,??_put_fat+1
  9876  002700  CFDE F047          	movff	postinc2,??_put_fat+2
  9877  002704  CFDE F048          	movff	postinc2,??_put_fat+3
  9878  002708  C03D  F049         	movff	put_fat@clst,??_put_fat+4
  9879  00270C  C03E  F04A         	movff	put_fat@clst+1,??_put_fat+5
  9880  002710  C03F  F04B         	movff	put_fat@clst+2,??_put_fat+6
  9881  002714  C040  F04C         	movff	put_fat@clst+3,??_put_fat+7
  9882  002718  0E08               	movlw	8
  9883  00271A  D005               	goto	u5290
  9884  00271C                     u5295:
  9885  00271C  90D8               	bcf	status,0,c
  9886  00271E  324C               	rrcf	??_put_fat+7,f,c
  9887  002720  324B               	rrcf	??_put_fat+6,f,c
  9888  002722  324A               	rrcf	??_put_fat+5,f,c
  9889  002724  3249               	rrcf	??_put_fat+4,f,c
  9890  002726                     u5290:
  9891  002726  2EE8               	decfsz	wreg,f,c
  9892  002728  D7F9               	goto	u5295
  9893  00272A  5045               	movf	??_put_fat,w,c
  9894  00272C  2449               	addwf	??_put_fat+4,w,c
  9895  00272E  6E32               	movwf	move_window@sector,c
  9896  002730  5046               	movf	??_put_fat+1,w,c
  9897  002732  204A               	addwfc	??_put_fat+5,w,c
  9898  002734  6E33               	movwf	move_window@sector+1,c
  9899  002736  5047               	movf	??_put_fat+2,w,c
  9900  002738  204B               	addwfc	??_put_fat+6,w,c
  9901  00273A  6E34               	movwf	move_window@sector+2,c
  9902  00273C  5048               	movf	??_put_fat+3,w,c
  9903  00273E  204C               	addwfc	??_put_fat+7,w,c
  9904  002740  6E35               	movwf	move_window@sector+3,c
  9905  002742  EC82  F027         	call	_move_window	;wreg free
  9906  002746  6E53               	movwf	put_fat@res,c
  9907                           
  9908                           ;ff.c: 913:    if (res != FR_OK) break;
  9909  002748  5053               	movf	put_fat@res,w,c
  9910  00274A  A4D8               	btfss	status,2,c
  9911  00274C  D063               	goto	l4470
  9912                           
  9913                           ;ff.c: 914:    p = &fs->win[clst * 4 % ((UINT)512)];
  9914  00274E  0EFF               	movlw	255
  9915  002750  6E45               	movwf	??_put_fat& (0+255),c
  9916  002752  0E01               	movlw	1
  9917  002754  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9918  002756  C03D  F047         	movff	put_fat@clst,??_put_fat+2
  9919  00275A  C03E  F048         	movff	put_fat@clst+1,??_put_fat+3
  9920  00275E  90D8               	bcf	status,0,c
  9921  002760  3647               	rlcf	??_put_fat+2,f,c
  9922  002762  3648               	rlcf	??_put_fat+3,f,c
  9923  002764  90D8               	bcf	status,0,c
  9924  002766  3647               	rlcf	??_put_fat+2,f,c
  9925  002768  3648               	rlcf	??_put_fat+3,f,c
  9926  00276A  5045               	movf	??_put_fat,w,c
  9927  00276C  1647               	andwf	??_put_fat+2,f,c
  9928  00276E  5046               	movf	??_put_fat+1,w,c
  9929  002770  1648               	andwf	??_put_fat+3,f,c
  9930  002772  C03B  F049         	movff	put_fat@fs,??_put_fat+4
  9931  002776  C03C  F04A         	movff	put_fat@fs+1,??_put_fat+5
  9932  00277A  5047               	movf	??_put_fat+2,w,c
  9933  00277C  2649               	addwf	??_put_fat+4,f,c
  9934  00277E  5048               	movf	??_put_fat+3,w,c
  9935  002780  224A               	addwfc	??_put_fat+5,f,c
  9936  002782  0E2E               	movlw	46
  9937  002784  2449               	addwf	??_put_fat+4,w,c
  9938  002786  6E54               	movwf	put_fat@p,c
  9939  002788  0E00               	movlw	0
  9940  00278A  204A               	addwfc	??_put_fat+5,w,c
  9941  00278C  6E55               	movwf	put_fat@p+1,c
  9942                           
  9943                           ;ff.c: 915:    val |= (DWORD)(*(DWORD*)(BYTE*)(p)) & 0xF0000000;
  9944  00278E  C054  FFD9         	movff	put_fat@p,fsr2l
  9945  002792  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9946  002796  0E00               	movlw	0
  9947  002798  14DE               	andwf	postinc2,w,c
  9948  00279A  6E45               	movwf	??_put_fat& (0+255),c
  9949  00279C  0E00               	movlw	0
  9950  00279E  14DE               	andwf	postinc2,w,c
  9951  0027A0  6E46               	movwf	(??_put_fat+1)& (0+255),c
  9952  0027A2  0E00               	movlw	0
  9953  0027A4  14DE               	andwf	postinc2,w,c
  9954  0027A6  6E47               	movwf	(??_put_fat+2)& (0+255),c
  9955  0027A8  0EF0               	movlw	240
  9956  0027AA  14DE               	andwf	postinc2,w,c
  9957  0027AC  6E48               	movwf	(??_put_fat+3)& (0+255),c
  9958  0027AE  5045               	movf	??_put_fat,w,c
  9959  0027B0  1241               	iorwf	put_fat@val,f,c
  9960  0027B2  5046               	movf	??_put_fat+1,w,c
  9961  0027B4  1242               	iorwf	put_fat@val+1,f,c
  9962  0027B6  5047               	movf	??_put_fat+2,w,c
  9963  0027B8  1243               	iorwf	put_fat@val+2,f,c
  9964  0027BA  5048               	movf	??_put_fat+3,w,c
  9965  0027BC  1244               	iorwf	put_fat@val+3,f,c
  9966                           
  9967                           ;ff.c: 916:    *(DWORD*)(BYTE*)(p)=(DWORD)(val);
  9968  0027BE  C054  FFD9         	movff	put_fat@p,fsr2l
  9969  0027C2  C055  FFDA         	movff	put_fat@p+1,fsr2h
  9970  0027C6  C041  FFDE         	movff	put_fat@val,postinc2
  9971  0027CA  C042  FFDE         	movff	put_fat@val+1,postinc2
  9972  0027CE  C043  FFDE         	movff	put_fat@val+2,postinc2
  9973  0027D2  C044  FFDE         	movff	put_fat@val+3,postinc2
  9974  0027D6                     l4464:
  9975                           
  9976                           ;ff.c: 917:    fs->wflag = 1;
  9977  0027D6  EE20 F004          	lfsr	2,4
  9978  0027DA  503B               	movf	put_fat@fs,w,c
  9979  0027DC  26D9               	addwf	fsr2l,f,c
  9980  0027DE  503C               	movf	put_fat@fs+1,w,c
  9981  0027E0  22DA               	addwfc	fsr2h,f,c
  9982  0027E2  0E01               	movlw	1
  9983  0027E4  6EDF               	movwf	indf2,c
  9984                           
  9985                           ;ff.c: 918:    break;
  9986  0027E6  D016               	goto	l4470
  9987  0027E8                     l4468:
  9988  0027E8  C03B  FFD9         	movff	put_fat@fs,fsr2l
  9989  0027EC  C03C  FFDA         	movff	put_fat@fs+1,fsr2h
  9990  0027F0  50DF               	movf	indf2,w,c
  9991  0027F2  6E45               	movwf	??_put_fat& (0+255),c
  9992  0027F4  6A46               	clrf	(??_put_fat+1)& (0+255),c
  9993                           
  9994                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9995                           ; Switch size 1, requested type "simple"
  9996                           ; Number of cases is 1, Range of values is 0 to 0
  9997                           ; switch strategies available:
  9998                           ; Name         Instructions Cycles
  9999                           ; simple_byte            4     3 (average)
 10000                           ;	Chosen strategy is simple_byte
 10001  0027F6  5046               	movf	??_put_fat+1,w,c
 10002  0027F8  0A00               	xorlw	0	; case 0
 10003  0027FA  A4D8               	btfss	status,2,c
 10004  0027FC  D610               	goto	u5200
 10005                           
 10006                           ; Switch size 1, requested type "simple"
 10007                           ; Number of cases is 3, Range of values is 1 to 3
 10008                           ; switch strategies available:
 10009                           ; Name         Instructions Cycles
 10010                           ; simple_byte           10     6 (average)
 10011                           ;	Chosen strategy is simple_byte
 10012  0027FE  5045               	movf	??_put_fat,w,c
 10013  002800  0A01               	xorlw	1	; case 1
 10014  002802  B4D8               	btfsc	status,2,c
 10015  002804  D60F               	goto	l343
 10016  002806  0A03               	xorlw	3	; case 2
 10017  002808  B4D8               	btfsc	status,2,c
 10018  00280A  D713               	goto	l4444
 10019  00280C  0A01               	xorlw	1	; case 3
 10020  00280E  B4D8               	btfsc	status,2,c
 10021  002810  D769               	goto	l4454
 10022  002812  D605               	goto	u5200
 10023  002814                     l4470:
 10024                           
 10025                           ;ff.c: 925:  return res;
 10026  002814  5053               	movf	put_fat@res,w,c
 10027  002816  0012               	return		;funcret
 10028  002818                     __end_of_put_fat:
 10029                           	opt callstack 0
 10030                           
 10031 ;; *************** function _get_fat *****************
 10032 ;; Defined at:
 10033 ;;		line 818 in file "ff.c"
 10034 ;; Parameters:    Size  Location     Type
 10035 ;;  fs              2   58[COMRAM] PTR struct .
 10036 ;;		 -> NULL(0), FatFs(558), 
 10037 ;;  clst            4   60[COMRAM] unsigned long 
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  val             4   75[COMRAM] unsigned long 
 10040 ;;  bc              2   83[COMRAM] unsigned short 
 10041 ;;  p               2   81[COMRAM] PTR unsigned char 
 10042 ;;		 -> FatFs.win(512), NULL(0), FatFs(558), 
 10043 ;;  wc              2   79[COMRAM] unsigned short 
 10044 ;; Return value:  Size  Location     Type
 10045 ;;                  4   58[COMRAM] unsigned long 
 10046 ;; Registers used:
 10047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10048 ;; Tracked objects:
 10049 ;;		On entry : 0/0
 10050 ;;		On exit  : 0/0
 10051 ;;		Unchanged: 0/0
 10052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10053 ;;      Params:         6       0       0       0       0       0       0       0       0
 10054 ;;      Locals:        12       0       0       0       0       0       0       0       0
 10055 ;;      Temps:          9       0       0       0       0       0       0       0       0
 10056 ;;      Totals:        27       0       0       0       0       0       0       0       0
 10057 ;;Total ram usage:       27 bytes
 10058 ;; Hardware stack levels used:    1
 10059 ;; Hardware stack levels required when called:    8
 10060 ;; This function calls:
 10061 ;;		_move_window
 10062 ;; This function is called by:
 10063 ;;		_remove_chain
 10064 ;;		_create_chain
 10065 ;;		_dir_sdi
 10066 ;;		_dir_next
 10067 ;;		_f_lseek
 10068 ;;		_f_read
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072                           	psect	text25
 10073  002C1E                     __ptext25:
 10074                           	opt callstack 0
 10075  002C1E                     _get_fat:
 10076                           	opt callstack 19
 10077                           
 10078                           ;ff.c: 819:  FATFS* fs,;ff.c: 820:  DWORD clst;ff.c: 822: {;ff.c: 823:  UINT wc, bc;;ff.
      +                          c: 824:  BYTE *p;;ff.c: 825:  DWORD val;;ff.c: 828:  if (clst < 2 || clst >= fs->n_faten
      +                          t) {
 10079                           
 10080                           ;incstack = 0
 10081  002C1E  5040               	movf	get_fat@clst+3,w,c
 10082  002C20  103F               	iorwf	get_fat@clst+2,w,c
 10083  002C22  103E               	iorwf	get_fat@clst+1,w,c
 10084  002C24  E104               	bnz	u5080
 10085  002C26  0E02               	movlw	2
 10086  002C28  5C3D               	subwf	get_fat@clst,w,c
 10087  002C2A  A0D8               	btfss	status,0,c
 10088  002C2C  D010               	goto	u5090
 10089  002C2E                     u5080:
 10090  002C2E  EE20 F012          	lfsr	2,18
 10091  002C32  503B               	movf	get_fat@fs,w,c
 10092  002C34  26D9               	addwf	fsr2l,f,c
 10093  002C36  503C               	movf	get_fat@fs+1,w,c
 10094  002C38  22DA               	addwfc	fsr2h,f,c
 10095  002C3A  50DE               	movf	postinc2,w,c
 10096  002C3C  5C3D               	subwf	get_fat@clst,w,c
 10097  002C3E  50DE               	movf	postinc2,w,c
 10098  002C40  583E               	subwfb	get_fat@clst+1,w,c
 10099  002C42  50DE               	movf	postinc2,w,c
 10100  002C44  583F               	subwfb	get_fat@clst+2,w,c
 10101  002C46  50DE               	movf	postinc2,w,c
 10102  002C48  5840               	subwfb	get_fat@clst+3,w,c
 10103  002C4A  A0D8               	btfss	status,0,c
 10104  002C4C  D008               	goto	l317
 10105  002C4E                     u5090:
 10106                           
 10107                           ;ff.c: 829:   val = 1;
 10108  002C4E  0E01               	movlw	1
 10109  002C50  6E4C               	movwf	get_fat@val,c
 10110  002C52  0E00               	movlw	0
 10111  002C54  6E4D               	movwf	get_fat@val+1,c
 10112  002C56  0E00               	movlw	0
 10113  002C58  6E4E               	movwf	get_fat@val+2,c
 10114  002C5A  0E00               	movlw	0
 10115  002C5C  D190               	goto	L11
 10116  002C5E                     l317:
 10117                           
 10118                           ;ff.c: 832:   val = 0xFFFFFFFF;
 10119  002C5E  684C               	setf	get_fat@val,c
 10120  002C60  684D               	setf	get_fat@val+1,c
 10121  002C62  684E               	setf	get_fat@val+2,c
 10122  002C64  684F               	setf	get_fat@val+3,c
 10123                           
 10124                           ;ff.c: 834:   switch (fs->fs_type) {
 10125  002C66  D18D               	goto	l4394
 10126  002C68                     l322:
 10127                           
 10128                           ;ff.c: 836:    bc = (UINT)clst; bc += bc / 2;
 10129  002C68  C03D  F054         	movff	get_fat@clst,get_fat@bc
 10130  002C6C  C03E  F055         	movff	get_fat@clst+1,get_fat@bc+1
 10131  002C70  90D8               	bcf	status,0,c
 10132  002C72  3055               	rrcf	get_fat@bc+1,w,c
 10133  002C74  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10134  002C76  3054               	rrcf	get_fat@bc,w,c
 10135  002C78  6E41               	movwf	??_get_fat& (0+255),c
 10136  002C7A  5041               	movf	??_get_fat,w,c
 10137  002C7C  2654               	addwf	get_fat@bc,f,c
 10138  002C7E  5042               	movf	??_get_fat+1,w,c
 10139  002C80  2255               	addwfc	get_fat@bc+1,f,c
 10140                           
 10141                           ;ff.c: 837:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10142  002C82  C03B  F030         	movff	get_fat@fs,move_window@fs
 10143  002C86  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10144  002C8A  EE20 F01E          	lfsr	2,30
 10145  002C8E  503B               	movf	get_fat@fs,w,c
 10146  002C90  26D9               	addwf	fsr2l,f,c
 10147  002C92  503C               	movf	get_fat@fs+1,w,c
 10148  002C94  22DA               	addwfc	fsr2h,f,c
 10149  002C96  CFDE F041          	movff	postinc2,??_get_fat
 10150  002C9A  CFDE F042          	movff	postinc2,??_get_fat+1
 10151  002C9E  CFDE F043          	movff	postinc2,??_get_fat+2
 10152  002CA2  CFDE F044          	movff	postinc2,??_get_fat+3
 10153  002CA6  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10154  002CAA  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10155  002CAE  0E09               	movlw	9
 10156  002CB0  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10157  002CB2                     u5105:
 10158  002CB2  90D8               	bcf	status,0,c
 10159  002CB4  3246               	rrcf	??_get_fat+5,f,c
 10160  002CB6  3245               	rrcf	??_get_fat+4,f,c
 10161  002CB8  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10162  002CBA  D7FB               	goto	u5105
 10163  002CBC  5045               	movf	??_get_fat+4,w,c
 10164  002CBE  2441               	addwf	??_get_fat,w,c
 10165  002CC0  6E32               	movwf	move_window@sector,c
 10166  002CC2  5046               	movf	??_get_fat+5,w,c
 10167  002CC4  2042               	addwfc	??_get_fat+1,w,c
 10168  002CC6  6E33               	movwf	move_window@sector+1,c
 10169  002CC8  0E00               	movlw	0
 10170  002CCA  2043               	addwfc	??_get_fat+2,w,c
 10171  002CCC  6E34               	movwf	move_window@sector+2,c
 10172  002CCE  0E00               	movlw	0
 10173  002CD0  2044               	addwfc	??_get_fat+3,w,c
 10174  002CD2  6E35               	movwf	move_window@sector+3,c
 10175  002CD4  EC82  F027         	call	_move_window	;wreg free
 10176  002CD8  0900               	iorlw	0
 10177  002CDA  A4D8               	btfss	status,2,c
 10178  002CDC  D168               	goto	l320
 10179                           
 10180                           ;ff.c: 838:    wc = fs->win[bc++ % ((UINT)512)];
 10181  002CDE  0EFF               	movlw	255
 10182  002CE0  6E41               	movwf	??_get_fat& (0+255),c
 10183  002CE2  0E01               	movlw	1
 10184  002CE4  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10185  002CE6  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10186  002CEA  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10187  002CEE  5041               	movf	??_get_fat,w,c
 10188  002CF0  1643               	andwf	??_get_fat+2,f,c
 10189  002CF2  5042               	movf	??_get_fat+1,w,c
 10190  002CF4  1644               	andwf	??_get_fat+3,f,c
 10191  002CF6  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10192  002CFA  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10193  002CFE  5043               	movf	??_get_fat+2,w,c
 10194  002D00  2645               	addwf	??_get_fat+4,f,c
 10195  002D02  5044               	movf	??_get_fat+3,w,c
 10196  002D04  2246               	addwfc	??_get_fat+5,f,c
 10197  002D06  0E2E               	movlw	46
 10198  002D08  2445               	addwf	??_get_fat+4,w,c
 10199  002D0A  6ED9               	movwf	fsr2l,c
 10200  002D0C  0E00               	movlw	0
 10201  002D0E  2046               	addwfc	??_get_fat+5,w,c
 10202  002D10  6EDA               	movwf	fsr2h,c
 10203  002D12  50DF               	movf	indf2,w,c
 10204  002D14  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10205  002D16  5047               	movf	??_get_fat+6,w,c
 10206  002D18  6E50               	movwf	get_fat@wc,c
 10207  002D1A  6A51               	clrf	get_fat@wc+1,c
 10208  002D1C  4A54               	infsnz	get_fat@bc,f,c
 10209  002D1E  2A55               	incf	get_fat@bc+1,f,c
 10210                           
 10211                           ;ff.c: 839:    if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
 10212  002D20  C03B  F030         	movff	get_fat@fs,move_window@fs
 10213  002D24  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10214  002D28  EE20 F01E          	lfsr	2,30
 10215  002D2C  503B               	movf	get_fat@fs,w,c
 10216  002D2E  26D9               	addwf	fsr2l,f,c
 10217  002D30  503C               	movf	get_fat@fs+1,w,c
 10218  002D32  22DA               	addwfc	fsr2h,f,c
 10219  002D34  CFDE F041          	movff	postinc2,??_get_fat
 10220  002D38  CFDE F042          	movff	postinc2,??_get_fat+1
 10221  002D3C  CFDE F043          	movff	postinc2,??_get_fat+2
 10222  002D40  CFDE F044          	movff	postinc2,??_get_fat+3
 10223  002D44  C054  F045         	movff	get_fat@bc,??_get_fat+4
 10224  002D48  C055  F046         	movff	get_fat@bc+1,??_get_fat+5
 10225  002D4C  0E09               	movlw	9
 10226  002D4E  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10227  002D50                     u5125:
 10228  002D50  90D8               	bcf	status,0,c
 10229  002D52  3246               	rrcf	??_get_fat+5,f,c
 10230  002D54  3245               	rrcf	??_get_fat+4,f,c
 10231  002D56  2E47               	decfsz	(??_get_fat+6)& (0+255),f,c
 10232  002D58  D7FB               	goto	u5125
 10233  002D5A  5045               	movf	??_get_fat+4,w,c
 10234  002D5C  2441               	addwf	??_get_fat,w,c
 10235  002D5E  6E32               	movwf	move_window@sector,c
 10236  002D60  5046               	movf	??_get_fat+5,w,c
 10237  002D62  2042               	addwfc	??_get_fat+1,w,c
 10238  002D64  6E33               	movwf	move_window@sector+1,c
 10239  002D66  0E00               	movlw	0
 10240  002D68  2043               	addwfc	??_get_fat+2,w,c
 10241  002D6A  6E34               	movwf	move_window@sector+2,c
 10242  002D6C  0E00               	movlw	0
 10243  002D6E  2044               	addwfc	??_get_fat+3,w,c
 10244  002D70  6E35               	movwf	move_window@sector+3,c
 10245  002D72  EC82  F027         	call	_move_window	;wreg free
 10246  002D76  0900               	iorlw	0
 10247  002D78  A4D8               	btfss	status,2,c
 10248  002D7A  D119               	goto	l320
 10249                           
 10250                           ;ff.c: 840:    wc |= fs->win[bc % ((UINT)512)] << 8;
 10251  002D7C  0EFF               	movlw	255
 10252  002D7E  6E41               	movwf	??_get_fat& (0+255),c
 10253  002D80  0E01               	movlw	1
 10254  002D82  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10255  002D84  C054  F043         	movff	get_fat@bc,??_get_fat+2
 10256  002D88  C055  F044         	movff	get_fat@bc+1,??_get_fat+3
 10257  002D8C  5041               	movf	??_get_fat,w,c
 10258  002D8E  1643               	andwf	??_get_fat+2,f,c
 10259  002D90  5042               	movf	??_get_fat+1,w,c
 10260  002D92  1644               	andwf	??_get_fat+3,f,c
 10261  002D94  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10262  002D98  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10263  002D9C  5043               	movf	??_get_fat+2,w,c
 10264  002D9E  2645               	addwf	??_get_fat+4,f,c
 10265  002DA0  5044               	movf	??_get_fat+3,w,c
 10266  002DA2  2246               	addwfc	??_get_fat+5,f,c
 10267  002DA4  0E2E               	movlw	46
 10268  002DA6  2445               	addwf	??_get_fat+4,w,c
 10269  002DA8  6ED9               	movwf	fsr2l,c
 10270  002DAA  0E00               	movlw	0
 10271  002DAC  2046               	addwfc	??_get_fat+5,w,c
 10272  002DAE  6EDA               	movwf	fsr2h,c
 10273  002DB0  50DF               	movf	indf2,w,c
 10274  002DB2  6E47               	movwf	(??_get_fat+6)& (0+255),c
 10275  002DB4  5047               	movf	??_get_fat+6,w,c
 10276  002DB6  6E49               	movwf	(??_get_fat+8)& (0+255),c
 10277  002DB8  6A48               	clrf	(??_get_fat+7)& (0+255),c
 10278  002DBA  5048               	movf	??_get_fat+7,w,c
 10279  002DBC  1250               	iorwf	get_fat@wc,f,c
 10280  002DBE  5049               	movf	??_get_fat+8,w,c
 10281  002DC0  1251               	iorwf	get_fat@wc+1,f,c
 10282                           
 10283                           ;ff.c: 841:    val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 10284  002DC2  B03D               	btfsc	get_fat@clst,0,c
 10285  002DC4  D007               	goto	l4372
 10286  002DC6  0EFF               	movlw	255
 10287  002DC8  1450               	andwf	get_fat@wc,w,c
 10288  002DCA  6E4A               	movwf	_get_fat$568,c
 10289  002DCC  0E0F               	movlw	15
 10290  002DCE  1451               	andwf	get_fat@wc+1,w,c
 10291  002DD0  6E4B               	movwf	_get_fat$568+1,c
 10292  002DD2  D00F               	goto	l4374
 10293  002DD4                     l4372:
 10294  002DD4  C050  F041         	movff	get_fat@wc,??_get_fat
 10295  002DD8  C051  F042         	movff	get_fat@wc+1,??_get_fat+1
 10296  002DDC  0E04               	movlw	4
 10297  002DDE  6E43               	movwf	(??_get_fat+2)& (0+255),c
 10298  002DE0                     u5155:
 10299  002DE0  90D8               	bcf	status,0,c
 10300  002DE2  3242               	rrcf	??_get_fat+1,f,c
 10301  002DE4  3241               	rrcf	??_get_fat,f,c
 10302  002DE6  2E43               	decfsz	(??_get_fat+2)& (0+255),f,c
 10303  002DE8  D7FB               	goto	u5155
 10304  002DEA  C041  F04A         	movff	??_get_fat,_get_fat$568
 10305  002DEE  C042  F04B         	movff	??_get_fat+1,_get_fat$568+1
 10306  002DF2                     l4374:
 10307  002DF2  C04A  F04C         	movff	_get_fat$568,get_fat@val
 10308  002DF6  C04B  F04D         	movff	_get_fat$568+1,get_fat@val+1
 10309  002DFA  D05B               	goto	L12
 10310  002DFC                     l4376:
 10311                           
 10312                           ;ff.c: 845:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) b
      +                          reak;
 10313  002DFC  C03B  F030         	movff	get_fat@fs,move_window@fs
 10314  002E00  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10315  002E04  EE20 F01E          	lfsr	2,30
 10316  002E08  503B               	movf	get_fat@fs,w,c
 10317  002E0A  26D9               	addwf	fsr2l,f,c
 10318  002E0C  503C               	movf	get_fat@fs+1,w,c
 10319  002E0E  22DA               	addwfc	fsr2h,f,c
 10320  002E10  CFDE F041          	movff	postinc2,??_get_fat
 10321  002E14  CFDE F042          	movff	postinc2,??_get_fat+1
 10322  002E18  CFDE F043          	movff	postinc2,??_get_fat+2
 10323  002E1C  CFDE F044          	movff	postinc2,??_get_fat+3
 10324  002E20  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10325  002E24  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10326  002E28  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10327  002E2C  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10328  002E30  C046  F045         	movff	??_get_fat+5,??_get_fat+4
 10329  002E34  C047  F046         	movff	??_get_fat+6,??_get_fat+5
 10330  002E38  C048  F047         	movff	??_get_fat+7,??_get_fat+6
 10331  002E3C  6A48               	clrf	??_get_fat+7,c
 10332  002E3E  5041               	movf	??_get_fat,w,c
 10333  002E40  2445               	addwf	??_get_fat+4,w,c
 10334  002E42  6E32               	movwf	move_window@sector,c
 10335  002E44  5042               	movf	??_get_fat+1,w,c
 10336  002E46  2046               	addwfc	??_get_fat+5,w,c
 10337  002E48  6E33               	movwf	move_window@sector+1,c
 10338  002E4A  5043               	movf	??_get_fat+2,w,c
 10339  002E4C  2047               	addwfc	??_get_fat+6,w,c
 10340  002E4E  6E34               	movwf	move_window@sector+2,c
 10341  002E50  5044               	movf	??_get_fat+3,w,c
 10342  002E52  2048               	addwfc	??_get_fat+7,w,c
 10343  002E54  6E35               	movwf	move_window@sector+3,c
 10344  002E56  EC82  F027         	call	_move_window	;wreg free
 10345  002E5A  0900               	iorlw	0
 10346  002E5C  A4D8               	btfss	status,2,c
 10347  002E5E  D0A7               	goto	l320
 10348                           
 10349                           ;ff.c: 846:    p = &fs->win[clst * 2 % ((UINT)512)];
 10350  002E60  0EFF               	movlw	255
 10351  002E62  6E41               	movwf	??_get_fat& (0+255),c
 10352  002E64  0E01               	movlw	1
 10353  002E66  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10354  002E68  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10355  002E6C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10356  002E70  90D8               	bcf	status,0,c
 10357  002E72  3643               	rlcf	??_get_fat+2,f,c
 10358  002E74  3644               	rlcf	??_get_fat+3,f,c
 10359  002E76  5041               	movf	??_get_fat,w,c
 10360  002E78  1643               	andwf	??_get_fat+2,f,c
 10361  002E7A  5042               	movf	??_get_fat+1,w,c
 10362  002E7C  1644               	andwf	??_get_fat+3,f,c
 10363  002E7E  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10364  002E82  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10365  002E86  5043               	movf	??_get_fat+2,w,c
 10366  002E88  2645               	addwf	??_get_fat+4,f,c
 10367  002E8A  5044               	movf	??_get_fat+3,w,c
 10368  002E8C  2246               	addwfc	??_get_fat+5,f,c
 10369  002E8E  0E2E               	movlw	46
 10370  002E90  2445               	addwf	??_get_fat+4,w,c
 10371  002E92  6E52               	movwf	get_fat@p,c
 10372  002E94  0E00               	movlw	0
 10373  002E96  2046               	addwfc	??_get_fat+5,w,c
 10374  002E98  6E53               	movwf	get_fat@p+1,c
 10375                           
 10376                           ;ff.c: 847:    val = (WORD)(*(WORD*)(BYTE*)(p));
 10377  002E9A  C052  FFD9         	movff	get_fat@p,fsr2l
 10378  002E9E  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10379  002EA2  CFDE F041          	movff	postinc2,??_get_fat
 10380  002EA6  CFDD F042          	movff	postdec2,??_get_fat+1
 10381  002EAA  C041  F04C         	movff	??_get_fat,get_fat@val
 10382  002EAE  C042  F04D         	movff	??_get_fat+1,get_fat@val+1
 10383  002EB2                     L12:
 10384  002EB2  6A4E               	clrf	get_fat@val+2,c
 10385  002EB4  6A4F               	clrf	get_fat@val+3,c
 10386                           
 10387                           ;ff.c: 848:    break;
 10388  002EB6  D07B               	goto	l320
 10389  002EB8                     l4384:
 10390                           
 10391                           ;ff.c: 851:    if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) b
      +                          reak;
 10392  002EB8  C03B  F030         	movff	get_fat@fs,move_window@fs
 10393  002EBC  C03C  F031         	movff	get_fat@fs+1,move_window@fs+1
 10394  002EC0  EE20 F01E          	lfsr	2,30
 10395  002EC4  503B               	movf	get_fat@fs,w,c
 10396  002EC6  26D9               	addwf	fsr2l,f,c
 10397  002EC8  503C               	movf	get_fat@fs+1,w,c
 10398  002ECA  22DA               	addwfc	fsr2h,f,c
 10399  002ECC  CFDE F041          	movff	postinc2,??_get_fat
 10400  002ED0  CFDE F042          	movff	postinc2,??_get_fat+1
 10401  002ED4  CFDE F043          	movff	postinc2,??_get_fat+2
 10402  002ED8  CFDE F044          	movff	postinc2,??_get_fat+3
 10403  002EDC  C03D  F045         	movff	get_fat@clst,??_get_fat+4
 10404  002EE0  C03E  F046         	movff	get_fat@clst+1,??_get_fat+5
 10405  002EE4  C03F  F047         	movff	get_fat@clst+2,??_get_fat+6
 10406  002EE8  C040  F048         	movff	get_fat@clst+3,??_get_fat+7
 10407  002EEC  0E08               	movlw	8
 10408  002EEE  D005               	goto	u5170
 10409  002EF0                     u5175:
 10410  002EF0  90D8               	bcf	status,0,c
 10411  002EF2  3248               	rrcf	??_get_fat+7,f,c
 10412  002EF4  3247               	rrcf	??_get_fat+6,f,c
 10413  002EF6  3246               	rrcf	??_get_fat+5,f,c
 10414  002EF8  3245               	rrcf	??_get_fat+4,f,c
 10415  002EFA                     u5170:
 10416  002EFA  2EE8               	decfsz	wreg,f,c
 10417  002EFC  D7F9               	goto	u5175
 10418  002EFE  5041               	movf	??_get_fat,w,c
 10419  002F00  2445               	addwf	??_get_fat+4,w,c
 10420  002F02  6E32               	movwf	move_window@sector,c
 10421  002F04  5042               	movf	??_get_fat+1,w,c
 10422  002F06  2046               	addwfc	??_get_fat+5,w,c
 10423  002F08  6E33               	movwf	move_window@sector+1,c
 10424  002F0A  5043               	movf	??_get_fat+2,w,c
 10425  002F0C  2047               	addwfc	??_get_fat+6,w,c
 10426  002F0E  6E34               	movwf	move_window@sector+2,c
 10427  002F10  5044               	movf	??_get_fat+3,w,c
 10428  002F12  2048               	addwfc	??_get_fat+7,w,c
 10429  002F14  6E35               	movwf	move_window@sector+3,c
 10430  002F16  EC82  F027         	call	_move_window	;wreg free
 10431  002F1A  0900               	iorlw	0
 10432  002F1C  A4D8               	btfss	status,2,c
 10433  002F1E  D047               	goto	l320
 10434                           
 10435                           ;ff.c: 852:    p = &fs->win[clst * 4 % ((UINT)512)];
 10436  002F20  0EFF               	movlw	255
 10437  002F22  6E41               	movwf	??_get_fat& (0+255),c
 10438  002F24  0E01               	movlw	1
 10439  002F26  6E42               	movwf	(??_get_fat+1)& (0+255),c
 10440  002F28  C03D  F043         	movff	get_fat@clst,??_get_fat+2
 10441  002F2C  C03E  F044         	movff	get_fat@clst+1,??_get_fat+3
 10442  002F30  90D8               	bcf	status,0,c
 10443  002F32  3643               	rlcf	??_get_fat+2,f,c
 10444  002F34  3644               	rlcf	??_get_fat+3,f,c
 10445  002F36  90D8               	bcf	status,0,c
 10446  002F38  3643               	rlcf	??_get_fat+2,f,c
 10447  002F3A  3644               	rlcf	??_get_fat+3,f,c
 10448  002F3C  5041               	movf	??_get_fat,w,c
 10449  002F3E  1643               	andwf	??_get_fat+2,f,c
 10450  002F40  5042               	movf	??_get_fat+1,w,c
 10451  002F42  1644               	andwf	??_get_fat+3,f,c
 10452  002F44  C03B  F045         	movff	get_fat@fs,??_get_fat+4
 10453  002F48  C03C  F046         	movff	get_fat@fs+1,??_get_fat+5
 10454  002F4C  5043               	movf	??_get_fat+2,w,c
 10455  002F4E  2645               	addwf	??_get_fat+4,f,c
 10456  002F50  5044               	movf	??_get_fat+3,w,c
 10457  002F52  2246               	addwfc	??_get_fat+5,f,c
 10458  002F54  0E2E               	movlw	46
 10459  002F56  2445               	addwf	??_get_fat+4,w,c
 10460  002F58  6E52               	movwf	get_fat@p,c
 10461  002F5A  0E00               	movlw	0
 10462  002F5C  2046               	addwfc	??_get_fat+5,w,c
 10463  002F5E  6E53               	movwf	get_fat@p+1,c
 10464                           
 10465                           ;ff.c: 853:    val = (DWORD)(*(DWORD*)(BYTE*)(p)) & 0x0FFFFFFF;
 10466  002F60  C052  FFD9         	movff	get_fat@p,fsr2l
 10467  002F64  C053  FFDA         	movff	get_fat@p+1,fsr2h
 10468  002F68  0EFF               	movlw	255
 10469  002F6A  14DE               	andwf	postinc2,w,c
 10470  002F6C  6E4C               	movwf	get_fat@val,c
 10471  002F6E  0EFF               	movlw	255
 10472  002F70  14DE               	andwf	postinc2,w,c
 10473  002F72  6E4D               	movwf	get_fat@val+1,c
 10474  002F74  0EFF               	movlw	255
 10475  002F76  14DE               	andwf	postinc2,w,c
 10476  002F78  6E4E               	movwf	get_fat@val+2,c
 10477  002F7A  0E0F               	movlw	15
 10478  002F7C  14DE               	andwf	postinc2,w,c
 10479  002F7E                     L11:
 10480  002F7E  6E4F               	movwf	get_fat@val+3,c
 10481                           
 10482                           ;ff.c: 854:    break;
 10483  002F80  D016               	goto	l320
 10484  002F82                     l4394:
 10485  002F82  C03B  FFD9         	movff	get_fat@fs,fsr2l
 10486  002F86  C03C  FFDA         	movff	get_fat@fs+1,fsr2h
 10487  002F8A  50DF               	movf	indf2,w,c
 10488  002F8C  6E41               	movwf	??_get_fat& (0+255),c
 10489  002F8E  6A42               	clrf	(??_get_fat+1)& (0+255),c
 10490                           
 10491                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10492                           ; Switch size 1, requested type "simple"
 10493                           ; Number of cases is 1, Range of values is 0 to 0
 10494                           ; switch strategies available:
 10495                           ; Name         Instructions Cycles
 10496                           ; simple_byte            4     3 (average)
 10497                           ;	Chosen strategy is simple_byte
 10498  002F90  5042               	movf	??_get_fat+1,w,c
 10499  002F92  0A00               	xorlw	0	; case 0
 10500  002F94  A4D8               	btfss	status,2,c
 10501  002F96  D65B               	goto	u5090
 10502                           
 10503                           ; Switch size 1, requested type "simple"
 10504                           ; Number of cases is 3, Range of values is 1 to 3
 10505                           ; switch strategies available:
 10506                           ; Name         Instructions Cycles
 10507                           ; simple_byte           10     6 (average)
 10508                           ;	Chosen strategy is simple_byte
 10509  002F98  5041               	movf	??_get_fat,w,c
 10510  002F9A  0A01               	xorlw	1	; case 1
 10511  002F9C  B4D8               	btfsc	status,2,c
 10512  002F9E  D664               	goto	l322
 10513  002FA0  0A03               	xorlw	3	; case 2
 10514  002FA2  B4D8               	btfsc	status,2,c
 10515  002FA4  D72B               	goto	l4376
 10516  002FA6  0A01               	xorlw	1	; case 3
 10517  002FA8  B4D8               	btfsc	status,2,c
 10518  002FAA  D786               	goto	l4384
 10519  002FAC  D650               	goto	u5090
 10520  002FAE                     l320:
 10521                           
 10522                           ;ff.c: 861:  return val;
 10523  002FAE  C04C  F03B         	movff	get_fat@val,?_get_fat
 10524  002FB2  C04D  F03C         	movff	get_fat@val+1,?_get_fat+1
 10525  002FB6  C04E  F03D         	movff	get_fat@val+2,?_get_fat+2
 10526  002FBA  C04F  F03E         	movff	get_fat@val+3,?_get_fat+3
 10527  002FBE  0012               	return		;funcret
 10528  002FC0                     __end_of_get_fat:
 10529                           	opt callstack 0
 10530                           
 10531 ;; *************** function _clust2sect *****************
 10532 ;; Defined at:
 10533 ;;		line 800 in file "ff.c"
 10534 ;; Parameters:    Size  Location     Type
 10535 ;;  fs              2   12[COMRAM] PTR struct .
 10536 ;;		 -> NULL(0), FatFs(558), 
 10537 ;;  clst            4   14[COMRAM] unsigned long 
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;		None
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  4   12[COMRAM] unsigned long 
 10542 ;; Registers used:
 10543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10549 ;;      Params:         6       0       0       0       0       0       0       0       0
 10550 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10551 ;;      Temps:          5       0       0       0       0       0       0       0       0
 10552 ;;      Totals:        11       0       0       0       0       0       0       0       0
 10553 ;;Total ram usage:       11 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    1
 10556 ;; This function calls:
 10557 ;;		___lmul
 10558 ;; This function is called by:
 10559 ;;		_dir_sdi
 10560 ;;		_dir_next
 10561 ;;		_f_write
 10562 ;;		_f_lseek
 10563 ;;		_f_read
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           	psect	text26
 10568  004D9A                     __ptext26:
 10569                           	opt callstack 0
 10570  004D9A                     _clust2sect:
 10571                           	opt callstack 27
 10572                           
 10573                           ;ff.c: 801:  FATFS* fs,;ff.c: 802:  DWORD clst;ff.c: 804: {;ff.c: 805:  clst -= 2;
 10574                           
 10575                           ;incstack = 0
 10576  004D9A  0E02               	movlw	2
 10577  004D9C  5E0F               	subwf	clust2sect@clst,f,c
 10578  004D9E  0E00               	movlw	0
 10579  004DA0  5A10               	subwfb	clust2sect@clst+1,f,c
 10580  004DA2  5A11               	subwfb	clust2sect@clst+2,f,c
 10581  004DA4  5A12               	subwfb	clust2sect@clst+3,f,c
 10582                           
 10583                           ;ff.c: 806:  if (clst >= fs->n_fatent - 2) return 0;
 10584  004DA6  EE20 F012          	lfsr	2,18
 10585  004DAA  500D               	movf	clust2sect@fs,w,c
 10586  004DAC  26D9               	addwf	fsr2l,f,c
 10587  004DAE  500E               	movf	clust2sect@fs+1,w,c
 10588  004DB0  22DA               	addwfc	fsr2h,f,c
 10589  004DB2  0EFE               	movlw	254
 10590  004DB4  24DE               	addwf	postinc2,w,c
 10591  004DB6  6E13               	movwf	??_clust2sect& (0+255),c
 10592  004DB8  0EFF               	movlw	255
 10593  004DBA  20DE               	addwfc	postinc2,w,c
 10594  004DBC  6E14               	movwf	(??_clust2sect+1)& (0+255),c
 10595  004DBE  0EFF               	movlw	255
 10596  004DC0  20DE               	addwfc	postinc2,w,c
 10597  004DC2  6E15               	movwf	(??_clust2sect+2)& (0+255),c
 10598  004DC4  0EFF               	movlw	255
 10599  004DC6  20DE               	addwfc	postinc2,w,c
 10600  004DC8  6E16               	movwf	(??_clust2sect+3)& (0+255),c
 10601  004DCA  5013               	movf	??_clust2sect,w,c
 10602  004DCC  5C0F               	subwf	clust2sect@clst,w,c
 10603  004DCE  5014               	movf	??_clust2sect+1,w,c
 10604  004DD0  5810               	subwfb	clust2sect@clst+1,w,c
 10605  004DD2  5015               	movf	??_clust2sect+2,w,c
 10606  004DD4  5811               	subwfb	clust2sect@clst+2,w,c
 10607  004DD6  5016               	movf	??_clust2sect+3,w,c
 10608  004DD8  5812               	subwfb	clust2sect@clst+3,w,c
 10609  004DDA  A0D8               	btfss	status,0,c
 10610  004DDC  D009               	goto	l4504
 10611  004DDE  0E00               	movlw	0
 10612  004DE0  6E0D               	movwf	?_clust2sect,c
 10613  004DE2  0E00               	movlw	0
 10614  004DE4  6E0E               	movwf	?_clust2sect+1,c
 10615  004DE6  0E00               	movlw	0
 10616  004DE8  6E0F               	movwf	?_clust2sect+2,c
 10617  004DEA  0E00               	movlw	0
 10618  004DEC  6E10               	movwf	?_clust2sect+3,c
 10619  004DEE  0012               	return	
 10620  004DF0                     l4504:
 10621                           
 10622                           ;ff.c: 807:  return clst * fs->csize + fs->database;
 10623  004DF0  EE20 F026          	lfsr	2,38
 10624  004DF4  500D               	movf	clust2sect@fs,w,c
 10625  004DF6  26D9               	addwf	fsr2l,f,c
 10626  004DF8  500E               	movf	clust2sect@fs+1,w,c
 10627  004DFA  22DA               	addwfc	fsr2h,f,c
 10628  004DFC  CFDE F013          	movff	postinc2,??_clust2sect
 10629  004E00  CFDE F014          	movff	postinc2,??_clust2sect+1
 10630  004E04  CFDE F015          	movff	postinc2,??_clust2sect+2
 10631  004E08  CFDE F016          	movff	postinc2,??_clust2sect+3
 10632  004E0C  EE20 F002          	lfsr	2,2
 10633  004E10  500D               	movf	clust2sect@fs,w,c
 10634  004E12  26D9               	addwf	fsr2l,f,c
 10635  004E14  500E               	movf	clust2sect@fs+1,w,c
 10636  004E16  22DA               	addwfc	fsr2h,f,c
 10637  004E18  50DF               	movf	indf2,w,c
 10638  004E1A  6E17               	movwf	(??_clust2sect+4)& (0+255),c
 10639  004E1C  5017               	movf	??_clust2sect+4,w,c
 10640  004E1E  6E01               	movwf	___lmul@multiplier,c
 10641  004E20  6A02               	clrf	___lmul@multiplier+1,c
 10642  004E22  6A03               	clrf	___lmul@multiplier+2,c
 10643  004E24  6A04               	clrf	___lmul@multiplier+3,c
 10644  004E26  C00F  F005         	movff	clust2sect@clst,___lmul@multiplicand
 10645  004E2A  C010  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
 10646  004E2E  C011  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
 10647  004E32  C012  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
 10648  004E36  EC87  F029         	call	___lmul	;wreg free
 10649  004E3A  5013               	movf	??_clust2sect,w,c
 10650  004E3C  2401               	addwf	?___lmul,w,c
 10651  004E3E  6E0D               	movwf	?_clust2sect,c
 10652  004E40  5014               	movf	??_clust2sect+1,w,c
 10653  004E42  2002               	addwfc	?___lmul+1,w,c
 10654  004E44  6E0E               	movwf	?_clust2sect+1,c
 10655  004E46  5015               	movf	??_clust2sect+2,w,c
 10656  004E48  2003               	addwfc	?___lmul+2,w,c
 10657  004E4A  6E0F               	movwf	?_clust2sect+2,c
 10658  004E4C  5016               	movf	??_clust2sect+3,w,c
 10659  004E4E  2004               	addwfc	?___lmul+3,w,c
 10660  004E50  6E10               	movwf	?_clust2sect+3,c
 10661  004E52  0012               	return		;funcret
 10662  004E54                     __end_of_clust2sect:
 10663                           	opt callstack 0
 10664                           
 10665 ;; *************** function ___lmul *****************
 10666 ;; Defined at:
 10667 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;  multiplier      4    0[COMRAM] unsigned long 
 10670 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10671 ;; Auto vars:     Size  Location     Type
 10672 ;;  product         4    8[COMRAM] unsigned long 
 10673 ;; Return value:  Size  Location     Type
 10674 ;;                  4    0[COMRAM] unsigned long 
 10675 ;; Registers used:
 10676 ;;		wreg, status,2, status,0
 10677 ;; Tracked objects:
 10678 ;;		On entry : 0/0
 10679 ;;		On exit  : 0/0
 10680 ;;		Unchanged: 0/0
 10681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10682 ;;      Params:         8       0       0       0       0       0       0       0       0
 10683 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10684 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10685 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10686 ;;Total ram usage:       12 bytes
 10687 ;; Hardware stack levels used:    1
 10688 ;; This function calls:
 10689 ;;		Nothing
 10690 ;; This function is called by:
 10691 ;;		_clust2sect
 10692 ;;		_find_volume
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           	psect	text27
 10697  00530E                     __ptext27:
 10698                           	opt callstack 0
 10699  00530E                     ___lmul:
 10700                           	opt callstack 27
 10701                           
 10702                           ;incstack = 0
 10703  00530E  0E00               	movlw	0
 10704  005310  6E09               	movwf	___lmul@product,c
 10705  005312  0E00               	movlw	0
 10706  005314  6E0A               	movwf	___lmul@product+1,c
 10707  005316  0E00               	movlw	0
 10708  005318  6E0B               	movwf	___lmul@product+2,c
 10709  00531A  0E00               	movlw	0
 10710  00531C  6E0C               	movwf	___lmul@product+3,c
 10711  00531E                     l4480:
 10712  00531E  A001               	btfss	___lmul@multiplier,0,c
 10713  005320  D008               	goto	l4484
 10714  005322  5005               	movf	___lmul@multiplicand,w,c
 10715  005324  2609               	addwf	___lmul@product,f,c
 10716  005326  5006               	movf	___lmul@multiplicand+1,w,c
 10717  005328  220A               	addwfc	___lmul@product+1,f,c
 10718  00532A  5007               	movf	___lmul@multiplicand+2,w,c
 10719  00532C  220B               	addwfc	___lmul@product+2,f,c
 10720  00532E  5008               	movf	___lmul@multiplicand+3,w,c
 10721  005330  220C               	addwfc	___lmul@product+3,f,c
 10722  005332                     l4484:
 10723  005332  90D8               	bcf	status,0,c
 10724  005334  3605               	rlcf	___lmul@multiplicand,f,c
 10725  005336  3606               	rlcf	___lmul@multiplicand+1,f,c
 10726  005338  3607               	rlcf	___lmul@multiplicand+2,f,c
 10727  00533A  3608               	rlcf	___lmul@multiplicand+3,f,c
 10728  00533C  90D8               	bcf	status,0,c
 10729  00533E  3204               	rrcf	___lmul@multiplier+3,f,c
 10730  005340  3203               	rrcf	___lmul@multiplier+2,f,c
 10731  005342  3202               	rrcf	___lmul@multiplier+1,f,c
 10732  005344  3201               	rrcf	___lmul@multiplier,f,c
 10733  005346  5001               	movf	___lmul@multiplier,w,c
 10734  005348  1002               	iorwf	___lmul@multiplier+1,w,c
 10735  00534A  1003               	iorwf	___lmul@multiplier+2,w,c
 10736  00534C  1004               	iorwf	___lmul@multiplier+3,w,c
 10737  00534E  A4D8               	btfss	status,2,c
 10738  005350  D7E6               	goto	l4480
 10739  005352  C009  F001         	movff	___lmul@product,?___lmul
 10740  005356  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10741  00535A  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10742  00535E  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10743  005362  0012               	return		;funcret
 10744  005364                     __end_of___lmul:
 10745                           	opt callstack 0
 10746                           
 10747 ;; *************** function ___lldiv *****************
 10748 ;; Defined at:
 10749 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;  dividend        4    0[COMRAM] unsigned long 
 10752 ;;  divisor         4    4[COMRAM] unsigned long 
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;  quotient        4    8[COMRAM] unsigned long 
 10755 ;;  counter         1   12[COMRAM] unsigned char 
 10756 ;; Return value:  Size  Location     Type
 10757 ;;                  4    0[COMRAM] unsigned long 
 10758 ;; Registers used:
 10759 ;;		wreg, status,2, status,0
 10760 ;; Tracked objects:
 10761 ;;		On entry : 0/0
 10762 ;;		On exit  : 0/0
 10763 ;;		Unchanged: 0/0
 10764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10765 ;;      Params:         8       0       0       0       0       0       0       0       0
 10766 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10767 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10768 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10769 ;;Total ram usage:       13 bytes
 10770 ;; Hardware stack levels used:    1
 10771 ;; This function calls:
 10772 ;;		Nothing
 10773 ;; This function is called by:
 10774 ;;		_find_volume
 10775 ;;		_f_lseek
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           	psect	text28
 10780  00503E                     __ptext28:
 10781                           	opt callstack 0
 10782  00503E                     ___lldiv:
 10783                           	opt callstack 27
 10784                           
 10785                           ;incstack = 0
 10786  00503E  0E00               	movlw	0
 10787  005040  6E09               	movwf	___lldiv@quotient,c
 10788  005042  0E00               	movlw	0
 10789  005044  6E0A               	movwf	___lldiv@quotient+1,c
 10790  005046  0E00               	movlw	0
 10791  005048  6E0B               	movwf	___lldiv@quotient+2,c
 10792  00504A  0E00               	movlw	0
 10793  00504C  6E0C               	movwf	___lldiv@quotient+3,c
 10794  00504E  5005               	movf	___lldiv@divisor,w,c
 10795  005050  1006               	iorwf	___lldiv@divisor+1,w,c
 10796  005052  1007               	iorwf	___lldiv@divisor+2,w,c
 10797  005054  1008               	iorwf	___lldiv@divisor+3,w,c
 10798  005056  B4D8               	btfsc	status,2,c
 10799  005058  D02A               	goto	l882
 10800  00505A  0E01               	movlw	1
 10801  00505C  6E0D               	movwf	___lldiv@counter,c
 10802  00505E  D006               	goto	l5382
 10803  005060                     l5380:
 10804  005060  90D8               	bcf	status,0,c
 10805  005062  3605               	rlcf	___lldiv@divisor,f,c
 10806  005064  3606               	rlcf	___lldiv@divisor+1,f,c
 10807  005066  3607               	rlcf	___lldiv@divisor+2,f,c
 10808  005068  3608               	rlcf	___lldiv@divisor+3,f,c
 10809  00506A  2A0D               	incf	___lldiv@counter,f,c
 10810  00506C                     l5382:
 10811  00506C  AE08               	btfss	___lldiv@divisor+3,7,c
 10812  00506E  D7F8               	goto	l5380
 10813  005070                     u7070:
 10814  005070  90D8               	bcf	status,0,c
 10815  005072  3609               	rlcf	___lldiv@quotient,f,c
 10816  005074  360A               	rlcf	___lldiv@quotient+1,f,c
 10817  005076  360B               	rlcf	___lldiv@quotient+2,f,c
 10818  005078  360C               	rlcf	___lldiv@quotient+3,f,c
 10819  00507A  5005               	movf	___lldiv@divisor,w,c
 10820  00507C  5C01               	subwf	___lldiv@dividend,w,c
 10821  00507E  5006               	movf	___lldiv@divisor+1,w,c
 10822  005080  5802               	subwfb	___lldiv@dividend+1,w,c
 10823  005082  5007               	movf	___lldiv@divisor+2,w,c
 10824  005084  5803               	subwfb	___lldiv@dividend+2,w,c
 10825  005086  5008               	movf	___lldiv@divisor+3,w,c
 10826  005088  5804               	subwfb	___lldiv@dividend+3,w,c
 10827  00508A  A0D8               	btfss	status,0,c
 10828  00508C  D009               	goto	l5392
 10829  00508E  5005               	movf	___lldiv@divisor,w,c
 10830  005090  5E01               	subwf	___lldiv@dividend,f,c
 10831  005092  5006               	movf	___lldiv@divisor+1,w,c
 10832  005094  5A02               	subwfb	___lldiv@dividend+1,f,c
 10833  005096  5007               	movf	___lldiv@divisor+2,w,c
 10834  005098  5A03               	subwfb	___lldiv@dividend+2,f,c
 10835  00509A  5008               	movf	___lldiv@divisor+3,w,c
 10836  00509C  5A04               	subwfb	___lldiv@dividend+3,f,c
 10837  00509E  8009               	bsf	___lldiv@quotient,0,c
 10838  0050A0                     l5392:
 10839  0050A0  90D8               	bcf	status,0,c
 10840  0050A2  3208               	rrcf	___lldiv@divisor+3,f,c
 10841  0050A4  3207               	rrcf	___lldiv@divisor+2,f,c
 10842  0050A6  3206               	rrcf	___lldiv@divisor+1,f,c
 10843  0050A8  3205               	rrcf	___lldiv@divisor,f,c
 10844  0050AA  2E0D               	decfsz	___lldiv@counter,f,c
 10845  0050AC  D7E1               	goto	u7070
 10846  0050AE                     l882:
 10847  0050AE  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10848  0050B2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10849  0050B6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10850  0050BA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10851  0050BE  0012               	return		;funcret
 10852  0050C0                     __end_of___lldiv:
 10853                           	opt callstack 0
 10854                           
 10855 ;; *************** function _f_close *****************
 10856 ;; Defined at:
 10857 ;;		line 2861 in file "ff.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;  fp              2   77[COMRAM] PTR struct .
 10860 ;;		 -> Fil(32), 
 10861 ;; Auto vars:     Size  Location     Type
 10862 ;;  res             1   79[COMRAM] enum E93
 10863 ;; Return value:  Size  Location     Type
 10864 ;;                  1    wreg      enum E4918
 10865 ;; Registers used:
 10866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10867 ;; Tracked objects:
 10868 ;;		On entry : 0/0
 10869 ;;		On exit  : 0/0
 10870 ;;		Unchanged: 0/0
 10871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10872 ;;      Params:         2       0       0       0       0       0       0       0       0
 10873 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10874 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10875 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10876 ;;Total ram usage:        3 bytes
 10877 ;; Hardware stack levels used:    1
 10878 ;; Hardware stack levels required when called:    9
 10879 ;; This function calls:
 10880 ;;		_f_sync
 10881 ;;		_validate
 10882 ;; This function is called by:
 10883 ;;		_guardar
 10884 ;; This function uses a non-reentrant model
 10885 ;;
 10886                           
 10887                           	psect	text29
 10888  00547A                     __ptext29:
 10889                           	opt callstack 0
 10890  00547A                     _f_close:
 10891                           	opt callstack 20
 10892                           
 10893                           ;ff.c: 2862:  FIL *fp;ff.c: 2864: {;ff.c: 2865:  FRESULT res;;ff.c: 2869:  res = f_sync(
      +                          fp);
 10894                           
 10895                           ;incstack = 0
 10896  00547A  C04E  F045         	movff	f_close@fp,f_sync@fp
 10897  00547E  C04F  F046         	movff	f_close@fp+1,f_sync@fp+1
 10898  005482  EC36  F022         	call	_f_sync	;wreg free
 10899  005486  6E50               	movwf	f_close@res,c
 10900                           
 10901                           ;ff.c: 2870:  if (res == FR_OK)
 10902  005488  5050               	movf	f_close@res,w,c
 10903  00548A  A4D8               	btfss	status,2,c
 10904  00548C  0012               	return	
 10905                           
 10906                           ;ff.c: 2872:  {;ff.c: 2873:   res = validate(fp);
 10907  00548E  C04E  F002         	movff	f_close@fp,validate@obj
 10908  005492  C04F  F003         	movff	f_close@fp+1,validate@obj+1
 10909  005496  ECD5  F027         	call	_validate	;wreg free
 10910  00549A  6E50               	movwf	f_close@res,c
 10911                           
 10912                           ;ff.c: 2874:   if (res == FR_OK) {
 10913  00549C  5050               	movf	f_close@res,w,c
 10914  00549E  A4D8               	btfss	status,2,c
 10915  0054A0  0012               	return	
 10916                           
 10917                           ;ff.c: 2882:     fp->fs = 0;
 10918  0054A2  C04E  FFD9         	movff	f_close@fp,fsr2l
 10919  0054A6  C04F  FFDA         	movff	f_close@fp+1,fsr2h
 10920  0054AA  0E00               	movlw	0
 10921  0054AC  6EDE               	movwf	postinc2,c
 10922  0054AE  0E00               	movlw	0
 10923  0054B0  6EDD               	movwf	postdec2,c
 10924  0054B2  0012               	return		;funcret
 10925  0054B4                     __end_of_f_close:
 10926                           	opt callstack 0
 10927                           
 10928 ;; *************** function _f_sync *****************
 10929 ;; Defined at:
 10930 ;;		line 2813 in file "ff.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;  fp              2   68[COMRAM] PTR struct .
 10933 ;;		 -> Fil(32), 
 10934 ;; Auto vars:     Size  Location     Type
 10935 ;;  tm              4    0        unsigned long 
 10936 ;;  dir             2   75[COMRAM] PTR unsigned char 
 10937 ;;		 -> NULL(0), FatFs(558), 
 10938 ;;  res             1   74[COMRAM] enum E93
 10939 ;; Return value:  Size  Location     Type
 10940 ;;                  1    wreg      enum E93
 10941 ;; Registers used:
 10942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10943 ;; Tracked objects:
 10944 ;;		On entry : 0/0
 10945 ;;		On exit  : 0/0
 10946 ;;		Unchanged: 0/0
 10947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10948 ;;      Params:         2       0       0       0       0       0       0       0       0
 10949 ;;      Locals:         7       0       0       0       0       0       0       0       0
 10950 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10951 ;;      Totals:         9       0       0       0       0       0       0       0       0
 10952 ;;Total ram usage:        9 bytes
 10953 ;; Hardware stack levels used:    1
 10954 ;; Hardware stack levels required when called:    8
 10955 ;; This function calls:
 10956 ;;		_move_window
 10957 ;;		_st_clust
 10958 ;;		_sync_fs
 10959 ;;		_validate
 10960 ;; This function is called by:
 10961 ;;		_f_close
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text30
 10966  00446C                     __ptext30:
 10967                           	opt callstack 0
 10968  00446C                     _f_sync:
 10969                           	opt callstack 20
 10970                           
 10971                           ;ff.c: 2814:  FIL* fp;ff.c: 2816: {;ff.c: 2817:  FRESULT res;;ff.c: 2818:  DWORD tm;;ff.
      +                          c: 2819:  BYTE *dir;;ff.c: 2822:  res = validate(fp);
 10972                           
 10973                           ;incstack = 0
 10974  00446C  C045  F002         	movff	f_sync@fp,validate@obj
 10975  004470  C046  F003         	movff	f_sync@fp+1,validate@obj+1
 10976  004474  ECD5  F027         	call	_validate	;wreg free
 10977  004478  6E4B               	movwf	f_sync@res,c
 10978                           
 10979                           ;ff.c: 2823:  if (res == FR_OK) {
 10980  00447A  504B               	movf	f_sync@res,w,c
 10981  00447C  A4D8               	btfss	status,2,c
 10982  00447E  D095               	goto	l5796
 10983                           
 10984                           ;ff.c: 2824:   if (fp->flag & 0x20) {
 10985  004480  EE20 F004          	lfsr	2,4
 10986  004484  5045               	movf	f_sync@fp,w,c
 10987  004486  26D9               	addwf	fsr2l,f,c
 10988  004488  5046               	movf	f_sync@fp+1,w,c
 10989  00448A  22DA               	addwfc	fsr2h,f,c
 10990  00448C  AADF               	btfss	indf2,5,c
 10991  00448E  D08D               	goto	l5796
 10992                           
 10993                           ;ff.c: 2833:    res = move_window(fp->fs, fp->dir_sect);
 10994  004490  C045  FFD9         	movff	f_sync@fp,fsr2l
 10995  004494  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 10996  004498  CFDE F030          	movff	postinc2,move_window@fs
 10997  00449C  CFDD F031          	movff	postdec2,move_window@fs+1
 10998  0044A0  EE20 F01A          	lfsr	2,26
 10999  0044A4  5045               	movf	f_sync@fp,w,c
 11000  0044A6  26D9               	addwf	fsr2l,f,c
 11001  0044A8  5046               	movf	f_sync@fp+1,w,c
 11002  0044AA  22DA               	addwfc	fsr2h,f,c
 11003  0044AC  CFDE F032          	movff	postinc2,move_window@sector
 11004  0044B0  CFDE F033          	movff	postinc2,move_window@sector+1
 11005  0044B4  CFDE F034          	movff	postinc2,move_window@sector+2
 11006  0044B8  CFDE F035          	movff	postinc2,move_window@sector+3
 11007  0044BC  EC82  F027         	call	_move_window	;wreg free
 11008  0044C0  6E4B               	movwf	f_sync@res,c
 11009                           
 11010                           ;ff.c: 2834:    if (res == FR_OK) {
 11011  0044C2  504B               	movf	f_sync@res,w,c
 11012  0044C4  A4D8               	btfss	status,2,c
 11013  0044C6  D071               	goto	l5796
 11014                           
 11015                           ;ff.c: 2835:     dir = fp->dir_ptr;
 11016  0044C8  EE20 F01E          	lfsr	2,30
 11017  0044CC  5045               	movf	f_sync@fp,w,c
 11018  0044CE  26D9               	addwf	fsr2l,f,c
 11019  0044D0  5046               	movf	f_sync@fp+1,w,c
 11020  0044D2  22DA               	addwfc	fsr2h,f,c
 11021  0044D4  CFDE F04C          	movff	postinc2,f_sync@dir
 11022  0044D8  CFDD F04D          	movff	postdec2,f_sync@dir+1
 11023                           
 11024                           ;ff.c: 2836:     dir[11] |= 0x20;
 11025  0044DC  EE20 F00B          	lfsr	2,11
 11026  0044E0  504C               	movf	f_sync@dir,w,c
 11027  0044E2  26D9               	addwf	fsr2l,f,c
 11028  0044E4  504D               	movf	f_sync@dir+1,w,c
 11029  0044E6  22DA               	addwfc	fsr2h,f,c
 11030  0044E8  0E00               	movlw	0
 11031  0044EA  8ADB               	bsf	plusw2,5,c
 11032                           
 11033                           ;ff.c: 2837:     *(DWORD*)(BYTE*)(dir + 28)=(DWORD)(fp->fsize);
 11034  0044EC  EE20 F00A          	lfsr	2,10
 11035  0044F0  5045               	movf	f_sync@fp,w,c
 11036  0044F2  26D9               	addwf	fsr2l,f,c
 11037  0044F4  5046               	movf	f_sync@fp+1,w,c
 11038  0044F6  22DA               	addwfc	fsr2h,f,c
 11039  0044F8  EE10 F01C          	lfsr	1,28
 11040  0044FC  504C               	movf	f_sync@dir,w,c
 11041  0044FE  26E1               	addwf	fsr1l,f,c
 11042  004500  504D               	movf	f_sync@dir+1,w,c
 11043  004502  22E2               	addwfc	fsr1h,f,c
 11044  004504  CFDE FFE6          	movff	postinc2,postinc1
 11045  004508  CFDE FFE6          	movff	postinc2,postinc1
 11046  00450C  CFDE FFE6          	movff	postinc2,postinc1
 11047  004510  CFDE FFE6          	movff	postinc2,postinc1
 11048                           
 11049                           ;ff.c: 2838:     st_clust(dir, fp->sclust);
 11050  004514  C04C  F001         	movff	f_sync@dir,st_clust@dir
 11051  004518  C04D  F002         	movff	f_sync@dir+1,st_clust@dir+1
 11052  00451C  EE20 F00E          	lfsr	2,14
 11053  004520  5045               	movf	f_sync@fp,w,c
 11054  004522  26D9               	addwf	fsr2l,f,c
 11055  004524  5046               	movf	f_sync@fp+1,w,c
 11056  004526  22DA               	addwfc	fsr2h,f,c
 11057  004528  CFDE F003          	movff	postinc2,st_clust@cl
 11058  00452C  CFDE F004          	movff	postinc2,st_clust@cl+1
 11059  004530  CFDE F005          	movff	postinc2,st_clust@cl+2
 11060  004534  CFDE F006          	movff	postinc2,st_clust@cl+3
 11061  004538  ECC3  F02A         	call	_st_clust	;wreg free
 11062                           
 11063                           ;ff.c: 2840:     *(DWORD*)(BYTE*)(dir + 22)=(DWORD)(tm);
 11064  00453C  EE20 F016          	lfsr	2,22
 11065  004540  504C               	movf	f_sync@dir,w,c
 11066  004542  26D9               	addwf	fsr2l,f,c
 11067  004544  504D               	movf	f_sync@dir+1,w,c
 11068  004546  22DA               	addwfc	fsr2h,f,c
 11069  004548  0E00               	movlw	0
 11070  00454A  6EDE               	movwf	postinc2,c
 11071  00454C  0E00               	movlw	0
 11072  00454E  6EDE               	movwf	postinc2,c
 11073  004550  0E21               	movlw	33
 11074  004552  6EDE               	movwf	postinc2,c
 11075  004554  0E46               	movlw	70
 11076  004556  6EDD               	movwf	postdec2,c
 11077                           
 11078                           ;ff.c: 2841:     *(WORD*)(BYTE*)(dir + 18)=(WORD)(0);
 11079  004558  EE20 F012          	lfsr	2,18
 11080  00455C  504C               	movf	f_sync@dir,w,c
 11081  00455E  26D9               	addwf	fsr2l,f,c
 11082  004560  504D               	movf	f_sync@dir+1,w,c
 11083  004562  22DA               	addwfc	fsr2h,f,c
 11084  004564  0E00               	movlw	0
 11085  004566  6EDE               	movwf	postinc2,c
 11086  004568  0E00               	movlw	0
 11087  00456A  6EDD               	movwf	postdec2,c
 11088                           
 11089                           ;ff.c: 2842:     fp->flag &= ~0x20;
 11090  00456C  EE20 F004          	lfsr	2,4
 11091  004570  5045               	movf	f_sync@fp,w,c
 11092  004572  26D9               	addwf	fsr2l,f,c
 11093  004574  5046               	movf	f_sync@fp+1,w,c
 11094  004576  22DA               	addwfc	fsr2h,f,c
 11095  004578  0EDF               	movlw	223
 11096  00457A  16DF               	andwf	indf2,f,c
 11097                           
 11098                           ;ff.c: 2843:     fp->fs->wflag = 1;
 11099  00457C  C045  FFD9         	movff	f_sync@fp,fsr2l
 11100  004580  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11101  004584  EE10 F004          	lfsr	1,4
 11102  004588  50DE               	movf	postinc2,w,c
 11103  00458A  26E1               	addwf	fsr1l,f,c
 11104  00458C  50DD               	movf	postdec2,w,c
 11105  00458E  22E2               	addwfc	fsr1h,f,c
 11106  004590  0E01               	movlw	1
 11107  004592  6EE7               	movwf	indf1,c
 11108                           
 11109                           ;ff.c: 2844:     res = sync_fs(fp->fs);
 11110  004594  C045  FFD9         	movff	f_sync@fp,fsr2l
 11111  004598  C046  FFDA         	movff	f_sync@fp+1,fsr2h
 11112  00459C  CFDE F03A          	movff	postinc2,sync_fs@fs
 11113  0045A0  CFDD F03B          	movff	postdec2,sync_fs@fs+1
 11114  0045A4  ECC0  F01E         	call	_sync_fs	;wreg free
 11115  0045A8  6E4B               	movwf	f_sync@res,c
 11116  0045AA                     l5796:
 11117                           
 11118                           ;ff.c: 2849:  return res;
 11119  0045AA  504B               	movf	f_sync@res,w,c
 11120  0045AC  0012               	return		;funcret
 11121  0045AE                     __end_of_f_sync:
 11122                           	opt callstack 0
 11123                           
 11124 ;; *************** function _validate *****************
 11125 ;; Defined at:
 11126 ;;		line 2372 in file "ff.c"
 11127 ;; Parameters:    Size  Location     Type
 11128 ;;  obj             2    1[COMRAM] PTR void 
 11129 ;;		 -> Fil(32), 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  fil             2    7[COMRAM] PTR struct .
 11132 ;;		 -> Fil(32), 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;                  1    wreg      enum E93
 11135 ;; Registers used:
 11136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11142 ;;      Params:         2       0       0       0       0       0       0       0       0
 11143 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11144 ;;      Temps:          4       0       0       0       0       0       0       0       0
 11145 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11146 ;;Total ram usage:        8 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    1
 11149 ;; This function calls:
 11150 ;;		_disk_status
 11151 ;; This function is called by:
 11152 ;;		_f_write
 11153 ;;		_f_sync
 11154 ;;		_f_close
 11155 ;;		_f_lseek
 11156 ;;		_f_read
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           	psect	text31
 11161  004FAA                     __ptext31:
 11162                           	opt callstack 0
 11163  004FAA                     _validate:
 11164                           	opt callstack 27
 11165                           
 11166                           ;ff.c: 2373:  void* obj;ff.c: 2375: {;ff.c: 2376:  FIL *fil = (FIL*)obj;
 11167                           
 11168                           ;incstack = 0
 11169  004FAA  C002  F008         	movff	validate@obj,validate@fil
 11170  004FAE  C003  F009         	movff	validate@obj+1,validate@fil+1
 11171                           
 11172                           ;ff.c: 2379:  if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (di
      +                          sk_status(fil->fs->drv) & 0x01))
 11173  004FB2  5008               	movf	validate@fil,w,c
 11174  004FB4  1009               	iorwf	validate@fil+1,w,c
 11175  004FB6  B4D8               	btfsc	status,2,c
 11176  004FB8  D03E               	goto	u7050
 11177  004FBA  C008  FFD9         	movff	validate@fil,fsr2l
 11178  004FBE  C009  FFDA         	movff	validate@fil+1,fsr2h
 11179  004FC2  50DE               	movf	postinc2,w,c
 11180  004FC4  10DE               	iorwf	postinc2,w,c
 11181  004FC6  B4D8               	btfsc	status,2,c
 11182  004FC8  D036               	goto	u7050
 11183  004FCA  C008  FFD9         	movff	validate@fil,fsr2l
 11184  004FCE  C009  FFDA         	movff	validate@fil+1,fsr2h
 11185  004FD2  CFDE F004          	movff	postinc2,??_validate
 11186  004FD6  CFDD F005          	movff	postdec2,??_validate+1
 11187  004FDA  C004  FFD9         	movff	??_validate,fsr2l
 11188  004FDE  C005  FFDA         	movff	??_validate+1,fsr2h
 11189  004FE2  50DF               	movf	indf2,w,c
 11190  004FE4  B4D8               	btfsc	status,2,c
 11191  004FE6  D027               	goto	u7050
 11192  004FE8  EE20 F002          	lfsr	2,2
 11193  004FEC  5008               	movf	validate@fil,w,c
 11194  004FEE  26D9               	addwf	fsr2l,f,c
 11195  004FF0  5009               	movf	validate@fil+1,w,c
 11196  004FF2  22DA               	addwfc	fsr2h,f,c
 11197  004FF4  C008  FFE1         	movff	validate@fil,fsr1l
 11198  004FF8  C009  FFE2         	movff	validate@fil+1,fsr1h
 11199  004FFC  EE00 F006          	lfsr	0,6
 11200  005000  50E6               	movf	postinc1,w,c
 11201  005002  26E9               	addwf	fsr0l,f,c
 11202  005004  50E5               	movf	postdec1,w,c
 11203  005006  22EA               	addwfc	fsr0h,f,c
 11204  005008  50DE               	movf	postinc2,w,c
 11205  00500A  18EE               	xorwf	postinc0,w,c
 11206  00500C  E114               	bnz	l5366
 11207  00500E  50DE               	movf	postinc2,w,c
 11208  005010  18EE               	xorwf	postinc0,w,c
 11209  005012  A4D8               	btfss	status,2,c
 11210  005014  D010               	goto	u7050
 11211  005016  C008  FFD9         	movff	validate@fil,fsr2l
 11212  00501A  C009  FFDA         	movff	validate@fil+1,fsr2h
 11213  00501E  EE10 F001          	lfsr	1,1
 11214  005022  50DE               	movf	postinc2,w,c
 11215  005024  26E1               	addwf	fsr1l,f,c
 11216  005026  50DD               	movf	postdec2,w,c
 11217  005028  22E2               	addwfc	fsr1h,f,c
 11218  00502A  50E7               	movf	indf1,w,c
 11219  00502C  ECFA  F02A         	call	_disk_status
 11220  005030  6E04               	movwf	??_validate& (0+255),c
 11221  005032  A004               	btfss	??_validate,0,c
 11222  005034  D002               	goto	l5370
 11223  005036                     u7050:
 11224  005036                     l5366:
 11225                           
 11226                           ;ff.c: 2380:   return FR_INVALID_OBJECT;
 11227  005036  0E09               	movlw	9
 11228  005038  0012               	return	
 11229  00503A                     l5370:
 11230                           
 11231                           ;ff.c: 2384:  return FR_OK;
 11232  00503A  0E00               	movlw	0
 11233  00503C  0012               	return		;funcret
 11234  00503E                     __end_of_validate:
 11235                           	opt callstack 0
 11236                           
 11237 ;; *************** function _disk_status *****************
 11238 ;; Defined at:
 11239 ;;		line 356 in file "diskio.c"
 11240 ;; Parameters:    Size  Location     Type
 11241 ;;  pdrv            1    wreg     unsigned char 
 11242 ;; Auto vars:     Size  Location     Type
 11243 ;;  pdrv            1    0[COMRAM] unsigned char 
 11244 ;; Return value:  Size  Location     Type
 11245 ;;                  1    wreg      unsigned char 
 11246 ;; Registers used:
 11247 ;;		wreg, status,2
 11248 ;; Tracked objects:
 11249 ;;		On entry : 0/0
 11250 ;;		On exit  : 0/0
 11251 ;;		Unchanged: 0/0
 11252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11253 ;;      Params:         0       0       0       0       0       0       0       0       0
 11254 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11255 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11256 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11257 ;;Total ram usage:        1 bytes
 11258 ;; Hardware stack levels used:    1
 11259 ;; This function calls:
 11260 ;;		Nothing
 11261 ;; This function is called by:
 11262 ;;		_find_volume
 11263 ;;		_validate
 11264 ;; This function uses a non-reentrant model
 11265 ;;
 11266                           
 11267                           	psect	text32
 11268  0055F4                     __ptext32:
 11269                           	opt callstack 0
 11270  0055F4                     _disk_status:
 11271                           	opt callstack 27
 11272                           
 11273                           ;incstack = 0
 11274                           ;disk_status@pdrv stored from wreg
 11275  0055F4  6E01               	movwf	disk_status@pdrv,c
 11276                           
 11277                           ;diskio.c: 357:  BYTE pdrv;diskio.c: 359: {;diskio.c: 360:  if (pdrv) return 0x01;
 11278  0055F6  5001               	movf	disk_status@pdrv,w,c
 11279  0055F8  B4D8               	btfsc	status,2,c
 11280  0055FA  D002               	goto	l4596
 11281  0055FC  0E01               	movlw	1
 11282  0055FE  0012               	return	
 11283  005600                     l4596:
 11284                           
 11285                           ;diskio.c: 361:  return Stat;
 11286  005600  0100               	movlb	0	; () banked
 11287  005602  51F9               	movf	_Stat& (0+255),w,b
 11288  005604  0012               	return		;funcret
 11289  005606                     __end_of_disk_status:
 11290                           	opt callstack 0
 11291                           
 11292 ;; *************** function _sync_fs *****************
 11293 ;; Defined at:
 11294 ;;		line 760 in file "ff.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;  fs              2   57[COMRAM] PTR struct .
 11297 ;;		 -> NULL(0), FatFs(558), 
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;  res             1   67[COMRAM] enum E93
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      enum E93
 11302 ;; Registers used:
 11303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11309 ;;      Params:         2       0       0       0       0       0       0       0       0
 11310 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11311 ;;      Temps:          8       0       0       0       0       0       0       0       0
 11312 ;;      Totals:        11       0       0       0       0       0       0       0       0
 11313 ;;Total ram usage:       11 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; Hardware stack levels required when called:    7
 11316 ;; This function calls:
 11317 ;;		_disk_ioctl
 11318 ;;		_disk_write
 11319 ;;		_mem_set
 11320 ;;		_sync_window
 11321 ;; This function is called by:
 11322 ;;		_f_sync
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           	psect	text33
 11327  003D80                     __ptext33:
 11328                           	opt callstack 0
 11329  003D80                     _sync_fs:
 11330                           	opt callstack 20
 11331                           
 11332                           ;ff.c: 761:  FATFS* fs;ff.c: 763: {;ff.c: 764:  FRESULT res;;ff.c: 767:  res = sync_wind
      +                          ow(fs);
 11333                           
 11334                           ;incstack = 0
 11335  003D80  C03A  F01B         	movff	sync_fs@fs,sync_window@fs
 11336  003D84  C03B  F01C         	movff	sync_fs@fs+1,sync_window@fs+1
 11337  003D88  ECA0  F01F         	call	_sync_window	;wreg free
 11338  003D8C  6E44               	movwf	sync_fs@res,c
 11339                           
 11340                           ;ff.c: 768:  if (res == FR_OK) {
 11341  003D8E  5044               	movf	sync_fs@res,w,c
 11342  003D90  A4D8               	btfss	status,2,c
 11343  003D92  D0D4               	goto	l307
 11344                           
 11345                           ;ff.c: 770:   if (fs->fs_type == 3 && fs->fsi_flag == 1) {
 11346  003D94  C03A  FFD9         	movff	sync_fs@fs,fsr2l
 11347  003D98  C03B  FFDA         	movff	sync_fs@fs+1,fsr2h
 11348  003D9C  0E03               	movlw	3
 11349  003D9E  18DE               	xorwf	postinc2,w,c
 11350  003DA0  A4D8               	btfss	status,2,c
 11351  003DA2  D0B8               	goto	l5062
 11352  003DA4  EE20 F005          	lfsr	2,5
 11353  003DA8  503A               	movf	sync_fs@fs,w,c
 11354  003DAA  26D9               	addwf	fsr2l,f,c
 11355  003DAC  503B               	movf	sync_fs@fs+1,w,c
 11356  003DAE  22DA               	addwfc	fsr2h,f,c
 11357  003DB0  04DE               	decf	postinc2,w,c
 11358  003DB2  A4D8               	btfss	status,2,c
 11359  003DB4  D0AF               	goto	l5062
 11360                           
 11361                           ;ff.c: 772:    mem_set(fs->win, 0, ((UINT)512));
 11362  003DB6  0E2E               	movlw	46
 11363  003DB8  243A               	addwf	sync_fs@fs,w,c
 11364  003DBA  6E01               	movwf	mem_set@dst,c
 11365  003DBC  0E00               	movlw	0
 11366  003DBE  203B               	addwfc	sync_fs@fs+1,w,c
 11367  003DC0  6E02               	movwf	mem_set@dst+1,c
 11368  003DC2  0E00               	movlw	0
 11369  003DC4  6E04               	movwf	mem_set@val+1,c
 11370  003DC6  0E00               	movlw	0
 11371  003DC8  6E03               	movwf	mem_set@val,c
 11372  003DCA  0E02               	movlw	2
 11373  003DCC  6E06               	movwf	mem_set@cnt+1,c
 11374  003DCE  0E00               	movlw	0
 11375  003DD0  6E05               	movwf	mem_set@cnt,c
 11376  003DD2  ECAD  F02A         	call	_mem_set	;wreg free
 11377                           
 11378                           ;ff.c: 773:    *(WORD*)(BYTE*)(fs->win + 510)=(WORD)(0xAA55);
 11379  003DD6  EE22 F02C          	lfsr	2,556
 11380  003DDA  503A               	movf	sync_fs@fs,w,c
 11381  003DDC  26D9               	addwf	fsr2l,f,c
 11382  003DDE  503B               	movf	sync_fs@fs+1,w,c
 11383  003DE0  22DA               	addwfc	fsr2h,f,c
 11384  003DE2  0E55               	movlw	85
 11385  003DE4  6EDE               	movwf	postinc2,c
 11386  003DE6  0EAA               	movlw	170
 11387  003DE8  6EDD               	movwf	postdec2,c
 11388                           
 11389                           ;ff.c: 774:    *(DWORD*)(BYTE*)(fs->win + 0)=(DWORD)(0x41615252);
 11390  003DEA  EE20 F02E          	lfsr	2,46
 11391  003DEE  503A               	movf	sync_fs@fs,w,c
 11392  003DF0  26D9               	addwf	fsr2l,f,c
 11393  003DF2  503B               	movf	sync_fs@fs+1,w,c
 11394  003DF4  22DA               	addwfc	fsr2h,f,c
 11395  003DF6  0E52               	movlw	82
 11396  003DF8  6EDE               	movwf	postinc2,c
 11397  003DFA  0E52               	movlw	82
 11398  003DFC  6EDE               	movwf	postinc2,c
 11399  003DFE  0E61               	movlw	97
 11400  003E00  6EDE               	movwf	postinc2,c
 11401  003E02  0E41               	movlw	65
 11402  003E04  6EDD               	movwf	postdec2,c
 11403                           
 11404                           ;ff.c: 775:    *(DWORD*)(BYTE*)(fs->win + 484)=(DWORD)(0x61417272);
 11405  003E06  EE22 F012          	lfsr	2,530
 11406  003E0A  503A               	movf	sync_fs@fs,w,c
 11407  003E0C  26D9               	addwf	fsr2l,f,c
 11408  003E0E  503B               	movf	sync_fs@fs+1,w,c
 11409  003E10  22DA               	addwfc	fsr2h,f,c
 11410  003E12  0E72               	movlw	114
 11411  003E14  6EDE               	movwf	postinc2,c
 11412  003E16  0E72               	movlw	114
 11413  003E18  6EDE               	movwf	postinc2,c
 11414  003E1A  0E41               	movlw	65
 11415  003E1C  6EDE               	movwf	postinc2,c
 11416  003E1E  0E61               	movlw	97
 11417  003E20  6EDD               	movwf	postdec2,c
 11418                           
 11419                           ;ff.c: 776:    *(DWORD*)(BYTE*)(fs->win + 488)=(DWORD)(fs->free_clust);
 11420  003E22  EE20 F00E          	lfsr	2,14
 11421  003E26  503A               	movf	sync_fs@fs,w,c
 11422  003E28  26D9               	addwf	fsr2l,f,c
 11423  003E2A  503B               	movf	sync_fs@fs+1,w,c
 11424  003E2C  22DA               	addwfc	fsr2h,f,c
 11425  003E2E  EE12 F016          	lfsr	1,534
 11426  003E32  503A               	movf	sync_fs@fs,w,c
 11427  003E34  26E1               	addwf	fsr1l,f,c
 11428  003E36  503B               	movf	sync_fs@fs+1,w,c
 11429  003E38  22E2               	addwfc	fsr1h,f,c
 11430  003E3A  CFDE FFE6          	movff	postinc2,postinc1
 11431  003E3E  CFDE FFE6          	movff	postinc2,postinc1
 11432  003E42  CFDE FFE6          	movff	postinc2,postinc1
 11433  003E46  CFDE FFE6          	movff	postinc2,postinc1
 11434                           
 11435                           ;ff.c: 777:    *(DWORD*)(BYTE*)(fs->win + 492)=(DWORD)(fs->last_clust);
 11436  003E4A  EE20 F00A          	lfsr	2,10
 11437  003E4E  503A               	movf	sync_fs@fs,w,c
 11438  003E50  26D9               	addwf	fsr2l,f,c
 11439  003E52  503B               	movf	sync_fs@fs+1,w,c
 11440  003E54  22DA               	addwfc	fsr2h,f,c
 11441  003E56  EE12 F01A          	lfsr	1,538
 11442  003E5A  503A               	movf	sync_fs@fs,w,c
 11443  003E5C  26E1               	addwf	fsr1l,f,c
 11444  003E5E  503B               	movf	sync_fs@fs+1,w,c
 11445  003E60  22E2               	addwfc	fsr1h,f,c
 11446  003E62  CFDE FFE6          	movff	postinc2,postinc1
 11447  003E66  CFDE FFE6          	movff	postinc2,postinc1
 11448  003E6A  CFDE FFE6          	movff	postinc2,postinc1
 11449  003E6E  CFDE FFE6          	movff	postinc2,postinc1
 11450                           
 11451                           ;ff.c: 779:    fs->winsect = fs->volbase + 1;
 11452  003E72  EE20 F01A          	lfsr	2,26
 11453  003E76  503A               	movf	sync_fs@fs,w,c
 11454  003E78  26D9               	addwf	fsr2l,f,c
 11455  003E7A  503B               	movf	sync_fs@fs+1,w,c
 11456  003E7C  22DA               	addwfc	fsr2h,f,c
 11457  003E7E  CFDE F03C          	movff	postinc2,??_sync_fs
 11458  003E82  CFDE F03D          	movff	postinc2,??_sync_fs+1
 11459  003E86  CFDE F03E          	movff	postinc2,??_sync_fs+2
 11460  003E8A  CFDE F03F          	movff	postinc2,??_sync_fs+3
 11461  003E8E  0E01               	movlw	1
 11462  003E90  243C               	addwf	??_sync_fs,w,c
 11463  003E92  6E40               	movwf	(??_sync_fs+4)& (0+255),c
 11464  003E94  0E00               	movlw	0
 11465  003E96  203D               	addwfc	??_sync_fs+1,w,c
 11466  003E98  6E41               	movwf	(??_sync_fs+5)& (0+255),c
 11467  003E9A  0E00               	movlw	0
 11468  003E9C  203E               	addwfc	??_sync_fs+2,w,c
 11469  003E9E  6E42               	movwf	(??_sync_fs+6)& (0+255),c
 11470  003EA0  0E00               	movlw	0
 11471  003EA2  203F               	addwfc	??_sync_fs+3,w,c
 11472  003EA4  6E43               	movwf	(??_sync_fs+7)& (0+255),c
 11473  003EA6  EE20 F02A          	lfsr	2,42
 11474  003EAA  503A               	movf	sync_fs@fs,w,c
 11475  003EAC  26D9               	addwf	fsr2l,f,c
 11476  003EAE  503B               	movf	sync_fs@fs+1,w,c
 11477  003EB0  22DA               	addwfc	fsr2h,f,c
 11478  003EB2  C040  FFDE         	movff	??_sync_fs+4,postinc2
 11479  003EB6  C041  FFDE         	movff	??_sync_fs+5,postinc2
 11480  003EBA  C042  FFDE         	movff	??_sync_fs+6,postinc2
 11481  003EBE  C043  FFDE         	movff	??_sync_fs+7,postinc2
 11482                           
 11483                           ;ff.c: 780:    disk_write(fs->drv, fs->win, fs->winsect, 1);
 11484  003EC2  0E2E               	movlw	46
 11485  003EC4  243A               	addwf	sync_fs@fs,w,c
 11486  003EC6  6E11               	movwf	disk_write@buff,c
 11487  003EC8  0E00               	movlw	0
 11488  003ECA  203B               	addwfc	sync_fs@fs+1,w,c
 11489  003ECC  6E12               	movwf	disk_write@buff+1,c
 11490  003ECE  EE20 F02A          	lfsr	2,42
 11491  003ED2  503A               	movf	sync_fs@fs,w,c
 11492  003ED4  26D9               	addwf	fsr2l,f,c
 11493  003ED6  503B               	movf	sync_fs@fs+1,w,c
 11494  003ED8  22DA               	addwfc	fsr2h,f,c
 11495  003EDA  CFDE F013          	movff	postinc2,disk_write@sector
 11496  003EDE  CFDE F014          	movff	postinc2,disk_write@sector+1
 11497  003EE2  CFDE F015          	movff	postinc2,disk_write@sector+2
 11498  003EE6  CFDE F016          	movff	postinc2,disk_write@sector+3
 11499  003EEA  0E00               	movlw	0
 11500  003EEC  6E18               	movwf	disk_write@count+1,c
 11501  003EEE  0E01               	movlw	1
 11502  003EF0  6E17               	movwf	disk_write@count,c
 11503  003EF2  EE20 F001          	lfsr	2,1
 11504  003EF6  503A               	movf	sync_fs@fs,w,c
 11505  003EF8  26D9               	addwf	fsr2l,f,c
 11506  003EFA  503B               	movf	sync_fs@fs+1,w,c
 11507  003EFC  22DA               	addwfc	fsr2h,f,c
 11508  003EFE  50DF               	movf	indf2,w,c
 11509  003F00  ECD7  F022         	call	_disk_write
 11510                           
 11511                           ;ff.c: 781:    fs->fsi_flag = 0;
 11512  003F04  EE20 F005          	lfsr	2,5
 11513  003F08  503A               	movf	sync_fs@fs,w,c
 11514  003F0A  26D9               	addwf	fsr2l,f,c
 11515  003F0C  503B               	movf	sync_fs@fs+1,w,c
 11516  003F0E  22DA               	addwfc	fsr2h,f,c
 11517  003F10  0E00               	movlw	0
 11518  003F12  6EDF               	movwf	indf2,c
 11519  003F14                     l5062:
 11520                           
 11521                           ;ff.c: 784:   if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
 11522  003F14  0E00               	movlw	0
 11523  003F16  6E11               	movwf	disk_ioctl@cmd,c
 11524  003F18  0E00               	movlw	0
 11525  003F1A  6E12               	movwf	disk_ioctl@buff,c
 11526  003F1C  0E00               	movlw	0
 11527  003F1E  6E13               	movwf	disk_ioctl@buff+1,c
 11528  003F20  EE20 F001          	lfsr	2,1
 11529  003F24  503A               	movf	sync_fs@fs,w,c
 11530  003F26  26D9               	addwf	fsr2l,f,c
 11531  003F28  503B               	movf	sync_fs@fs+1,w,c
 11532  003F2A  22DA               	addwfc	fsr2h,f,c
 11533  003F2C  50DF               	movf	indf2,w,c
 11534  003F2E  ECA8  F00F         	call	_disk_ioctl
 11535  003F32  0900               	iorlw	0
 11536  003F34  B4D8               	btfsc	status,2,c
 11537  003F36  D002               	goto	l307
 11538                           
 11539                           ;ff.c: 785:    res = FR_DISK_ERR;
 11540  003F38  0E01               	movlw	1
 11541  003F3A  6E44               	movwf	sync_fs@res,c
 11542  003F3C                     l307:
 11543                           
 11544                           ;ff.c: 788:  return res;
 11545  003F3C  5044               	movf	sync_fs@res,w,c
 11546  003F3E  0012               	return		;funcret
 11547  003F40                     __end_of_sync_fs:
 11548                           	opt callstack 0
 11549                           
 11550 ;; *************** function _mem_set *****************
 11551 ;; Defined at:
 11552 ;;		line 524 in file "ff.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;  dst             2    0[COMRAM] PTR void 
 11555 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11556 ;;  val             2    2[COMRAM] int 
 11557 ;;  cnt             2    4[COMRAM] unsigned short 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  d               2    6[COMRAM] PTR unsigned char 
 11560 ;;		 -> f_open@sfn(12), NULL(0), FatFs(558), 
 11561 ;; Return value:  Size  Location     Type
 11562 ;;                  1    wreg      void 
 11563 ;; Registers used:
 11564 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11565 ;; Tracked objects:
 11566 ;;		On entry : 0/0
 11567 ;;		On exit  : 0/0
 11568 ;;		Unchanged: 0/0
 11569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11570 ;;      Params:         6       0       0       0       0       0       0       0       0
 11571 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11572 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11573 ;;      Totals:         8       0       0       0       0       0       0       0       0
 11574 ;;Total ram usage:        8 bytes
 11575 ;; Hardware stack levels used:    1
 11576 ;; This function calls:
 11577 ;;		Nothing
 11578 ;; This function is called by:
 11579 ;;		_sync_fs
 11580 ;;		_dir_next
 11581 ;;		_dir_register
 11582 ;;		_create_name
 11583 ;; This function uses a non-reentrant model
 11584 ;;
 11585                           
 11586                           	psect	text34
 11587  00555A                     __ptext34:
 11588                           	opt callstack 0
 11589  00555A                     _mem_set:
 11590                           	opt callstack 25
 11591                           
 11592                           ;ff.c: 525:  BYTE *d = (BYTE*)dst;
 11593                           
 11594                           ;incstack = 0
 11595  00555A  C001  F007         	movff	mem_set@dst,mem_set@d
 11596  00555E  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
 11597                           
 11598                           ;ff.c: 527:  while (cnt--)
 11599  005562  D008               	goto	l4494
 11600  005564                     l4490:
 11601                           
 11602                           ;ff.c: 528:   *d++ = (BYTE)val;
 11603  005564  C007  FFD9         	movff	mem_set@d,fsr2l
 11604  005568  C008  FFDA         	movff	mem_set@d+1,fsr2h
 11605  00556C  C003  FFDF         	movff	mem_set@val,indf2
 11606  005570  4A07               	infsnz	mem_set@d,f,c
 11607  005572  2A08               	incf	mem_set@d+1,f,c
 11608  005574                     l4494:
 11609                           
 11610                           ;ff.c: 527:  while (cnt--)
 11611  005574  0605               	decf	mem_set@cnt,f,c
 11612  005576  A0D8               	btfss	status,0,c
 11613  005578  0606               	decf	mem_set@cnt+1,f,c
 11614  00557A  2805               	incf	mem_set@cnt,w,c
 11615  00557C  E1F3               	bnz	l4490
 11616  00557E  2806               	incf	mem_set@cnt+1,w,c
 11617  005580  B4D8               	btfsc	status,2,c
 11618  005582  0012               	return	
 11619  005584  D7EF               	goto	l4490
 11620  005586                     __end_of_mem_set:
 11621                           	opt callstack 0
 11622                           
 11623 ;; *************** function _disk_ioctl *****************
 11624 ;; Defined at:
 11625 ;;		line 446 in file "diskio.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;  pdrv            1    wreg     unsigned char 
 11628 ;;  cmd             1   16[COMRAM] unsigned char 
 11629 ;;  buff            2   17[COMRAM] PTR void 
 11630 ;;		 -> NULL(0), 
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;  pdrv            1   48[COMRAM] unsigned char 
 11633 ;;  csd            16   32[COMRAM] unsigned char [16]
 11634 ;;  csize           4   49[COMRAM] unsigned long 
 11635 ;;  ptr             2   55[COMRAM] PTR unsigned char 
 11636 ;;		 -> NULL(0), 
 11637 ;;  n               1   54[COMRAM] unsigned char 
 11638 ;;  res             1   53[COMRAM] enum E43
 11639 ;; Return value:  Size  Location     Type
 11640 ;;                  1    wreg      enum E43
 11641 ;; Registers used:
 11642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11643 ;; Tracked objects:
 11644 ;;		On entry : 0/0
 11645 ;;		On exit  : 0/0
 11646 ;;		Unchanged: 0/0
 11647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11648 ;;      Params:         3       0       0       0       0       0       0       0       0
 11649 ;;      Locals:        25       0       0       0       0       0       0       0       0
 11650 ;;      Temps:         13       0       0       0       0       0       0       0       0
 11651 ;;      Totals:        41       0       0       0       0       0       0       0       0
 11652 ;;Total ram usage:       41 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    5
 11655 ;; This function calls:
 11656 ;;		_SPI1_Exchange8bit
 11657 ;;		___wmul
 11658 ;;		_deselect
 11659 ;;		_rcvr_datablock
 11660 ;;		_select
 11661 ;;		_send_cmd
 11662 ;; This function is called by:
 11663 ;;		_sync_fs
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           	psect	text35
 11668  001F50                     __ptext35:
 11669                           	opt callstack 0
 11670  001F50                     _disk_ioctl:
 11671                           	opt callstack 21
 11672                           
 11673                           ;incstack = 0
 11674                           ;disk_ioctl@pdrv stored from wreg
 11675  001F50  6E31               	movwf	disk_ioctl@pdrv,c
 11676                           
 11677                           ;diskio.c: 447:  BYTE pdrv,;diskio.c: 448:  BYTE cmd,;diskio.c: 449:  void *buff;diskio.
      +                          c: 451: {;diskio.c: 452:  DRESULT res;;diskio.c: 453:  BYTE n, csd[16], *ptr = buff;
 11678  001F52  C012  F038         	movff	disk_ioctl@buff,disk_ioctl@ptr
 11679  001F56  C013  F039         	movff	disk_ioctl@buff+1,disk_ioctl@ptr+1
 11680                           
 11681                           ;diskio.c: 454:  DWORD csize;;diskio.c: 457:  if (pdrv) return RES_PARERR;
 11682  001F5A  5031               	movf	disk_ioctl@pdrv,w,c
 11683  001F5C  B4D8               	btfsc	status,2,c
 11684  001F5E  D002               	goto	l4608
 11685  001F60  0E04               	movlw	4
 11686  001F62  0012               	return	
 11687  001F64                     l4608:
 11688                           
 11689                           ;diskio.c: 459:  res = RES_ERROR;
 11690  001F64  0E01               	movlw	1
 11691  001F66  6E36               	movwf	disk_ioctl@res,c
 11692                           
 11693                           ;diskio.c: 461:  if (Stat & 0x01) return RES_NOTRDY;
 11694  001F68  0100               	movlb	0	; () banked
 11695  001F6A  A1F9               	btfss	_Stat& (0+255),0,b
 11696  001F6C  D21B               	goto	l4708
 11697                           
 11698                           ; BSR set to: 0
 11699  001F6E  0E03               	movlw	3
 11700  001F70  0012               	return	
 11701  001F72                     l4616:
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;diskio.c: 465:   if (select()) res = RES_OK;
 11705  001F72  ECEB  F02A         	call	_select	;wreg free
 11706  001F76  0900               	iorlw	0
 11707  001F78  B4D8               	btfsc	status,2,c
 11708  001F7A  D235               	goto	l4710
 11709  001F7C                     u5550:
 11710  001F7C  0E00               	movlw	0
 11711  001F7E  D210               	goto	L13
 11712  001F80                     l4620:
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;diskio.c: 469:   if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11716  001F80  0E00               	movlw	0
 11717  001F82  6E0B               	movwf	send_cmd@arg,c
 11718  001F84  0E00               	movlw	0
 11719  001F86  6E0C               	movwf	send_cmd@arg+1,c
 11720  001F88  0E00               	movlw	0
 11721  001F8A  6E0D               	movwf	send_cmd@arg+2,c
 11722  001F8C  0E00               	movlw	0
 11723  001F8E  6E0E               	movwf	send_cmd@arg+3,c
 11724  001F90  0E09               	movlw	9
 11725  001F92  ECFE  F029         	call	_send_cmd
 11726  001F96  0900               	iorlw	0
 11727  001F98  A4D8               	btfss	status,2,c
 11728  001F9A  D225               	goto	l4710
 11729  001F9C  0E21               	movlw	low disk_ioctl@csd
 11730  001F9E  6E02               	movwf	rcvr_datablock@buff,c
 11731  001FA0  0E00               	movlw	high disk_ioctl@csd
 11732  001FA2  6E03               	movwf	rcvr_datablock@buff+1,c
 11733  001FA4  0E00               	movlw	0
 11734  001FA6  6E05               	movwf	rcvr_datablock@btr+1,c
 11735  001FA8  0E10               	movlw	16
 11736  001FAA  6E04               	movwf	rcvr_datablock@btr,c
 11737  001FAC  EC1E  F029         	call	_rcvr_datablock	;wreg free
 11738  001FB0  0900               	iorlw	0
 11739  001FB2  B4D8               	btfsc	status,2,c
 11740  001FB4  D218               	goto	l4710
 11741                           
 11742                           ;diskio.c: 470:    if ((csd[0] >> 6) == 1) {
 11743  001FB6  4421               	rlncf	disk_ioctl@csd,w,c
 11744  001FB8  46E8               	rlncf	wreg,f,c
 11745  001FBA  0B03               	andlw	3
 11746  001FBC  06E8               	decf	wreg,f,c
 11747  001FBE  A4D8               	btfss	status,2,c
 11748  001FC0  D04E               	goto	l4630
 11749                           
 11750                           ;diskio.c: 471:     csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) 
      +                          + 1;
 11751  001FC2  C028  F014         	movff	disk_ioctl@csd+7,??_disk_ioctl
 11752  001FC6  0E3F               	movlw	63
 11753  001FC8  1614               	andwf	??_disk_ioctl,f,c
 11754  001FCA  C014  F015         	movff	??_disk_ioctl,??_disk_ioctl+1
 11755  001FCE  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11756  001FD0  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11757  001FD2  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11758  001FD4  C016  F018         	movff	??_disk_ioctl+2,??_disk_ioctl+4
 11759  001FD8  C015  F017         	movff	??_disk_ioctl+1,??_disk_ioctl+3
 11760  001FDC  6A16               	clrf	??_disk_ioctl+2,c
 11761  001FDE  6A15               	clrf	??_disk_ioctl+1,c
 11762  001FE0  5029               	movf	disk_ioctl@csd+8,w,c
 11763  001FE2  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 11764  001FE4  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11765  001FE6  502A               	movf	disk_ioctl@csd+9,w,c
 11766  001FE8  6E1B               	movwf	(??_disk_ioctl+7)& (0+255),c
 11767  001FEA  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 11768  001FEC  5019               	movf	??_disk_ioctl+5,w,c
 11769  001FEE  261B               	addwf	??_disk_ioctl+7,f,c
 11770  001FF0  501A               	movf	??_disk_ioctl+6,w,c
 11771  001FF2  221C               	addwfc	??_disk_ioctl+8,f,c
 11772  001FF4  501B               	movf	??_disk_ioctl+7,w,c
 11773  001FF6  2415               	addwf	??_disk_ioctl+1,w,c
 11774  001FF8  6E1D               	movwf	(??_disk_ioctl+9)& (0+255),c
 11775  001FFA  501C               	movf	??_disk_ioctl+8,w,c
 11776  001FFC  2016               	addwfc	??_disk_ioctl+2,w,c
 11777  001FFE  6E1E               	movwf	(??_disk_ioctl+10)& (0+255),c
 11778  002000  0E00               	movlw	0
 11779  002002  2017               	addwfc	??_disk_ioctl+3,w,c
 11780  002004  6E1F               	movwf	(??_disk_ioctl+11)& (0+255),c
 11781  002006  0E00               	movlw	0
 11782  002008  2018               	addwfc	??_disk_ioctl+4,w,c
 11783  00200A  6E20               	movwf	(??_disk_ioctl+12)& (0+255),c
 11784  00200C  0E01               	movlw	1
 11785  00200E  241D               	addwf	??_disk_ioctl+9,w,c
 11786  002010  6E32               	movwf	disk_ioctl@csize,c
 11787  002012  0E00               	movlw	0
 11788  002014  201E               	addwfc	??_disk_ioctl+10,w,c
 11789  002016  6E33               	movwf	disk_ioctl@csize+1,c
 11790  002018  0E00               	movlw	0
 11791  00201A  201F               	addwfc	??_disk_ioctl+11,w,c
 11792  00201C  6E34               	movwf	disk_ioctl@csize+2,c
 11793  00201E  0E00               	movlw	0
 11794  002020  2020               	addwfc	??_disk_ioctl+12,w,c
 11795  002022  6E35               	movwf	disk_ioctl@csize+3,c
 11796                           
 11797                           ;diskio.c: 472:     *(DWORD*)buff = csize << 10;
 11798  002024  C032  F014         	movff	disk_ioctl@csize,??_disk_ioctl
 11799  002028  C033  F015         	movff	disk_ioctl@csize+1,??_disk_ioctl+1
 11800  00202C  C034  F016         	movff	disk_ioctl@csize+2,??_disk_ioctl+2
 11801  002030  C035  F017         	movff	disk_ioctl@csize+3,??_disk_ioctl+3
 11802  002034  0E0A               	movlw	10
 11803  002036                     u5595:
 11804  002036  90D8               	bcf	status,0,c
 11805  002038  3614               	rlcf	??_disk_ioctl,f,c
 11806  00203A  3615               	rlcf	??_disk_ioctl+1,f,c
 11807  00203C  3616               	rlcf	??_disk_ioctl+2,f,c
 11808  00203E  3617               	rlcf	??_disk_ioctl+3,f,c
 11809  002040  2EE8               	decfsz	wreg,f,c
 11810  002042  D7F9               	goto	u5595
 11811  002044  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11812  002048  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11813  00204C  C014  FFDE         	movff	??_disk_ioctl,postinc2
 11814  002050  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11815  002054  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11816  002058  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11817                           
 11818                           ;diskio.c: 473:    } else {
 11819  00205C  D78F               	goto	u5550
 11820  00205E                     l4630:
 11821                           
 11822                           ;diskio.c: 474:     n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2
      +                          ;
 11823  00205E  6A14               	clrf	??_disk_ioctl& (0+255),c
 11824  002060  AE2B               	btfss	disk_ioctl@csd+10,7,c
 11825  002062  D001               	bra	u5605
 11826  002064  2A14               	incf	??_disk_ioctl& (0+255),f,c
 11827  002066                     u5605:
 11828  002066  0E01               	movlw	1
 11829  002068  1614               	andwf	??_disk_ioctl,f,c
 11830  00206A  C026  F015         	movff	disk_ioctl@csd+5,??_disk_ioctl+1
 11831  00206E  0E0F               	movlw	15
 11832  002070  1615               	andwf	??_disk_ioctl+1,f,c
 11833  002072  502A               	movf	disk_ioctl@csd+9,w,c
 11834  002074  0B03               	andlw	3
 11835  002076  0D02               	mullw	2
 11836  002078  50F3               	movf	prodl,w,c
 11837  00207A  2415               	addwf	??_disk_ioctl+1,w,c
 11838  00207C  2414               	addwf	??_disk_ioctl,w,c
 11839  00207E  0F02               	addlw	2
 11840  002080  6E37               	movwf	disk_ioctl@n,c
 11841                           
 11842                           ;diskio.c: 475:     csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) <<
      +                           10) + 1;
 11843  002082  5027               	movf	disk_ioctl@csd+6,w,c
 11844  002084  0B03               	andlw	3
 11845  002086  6E14               	movwf	??_disk_ioctl& (0+255),c
 11846  002088  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 11847  00208A  0E0A               	movlw	10
 11848  00208C                     u5615:
 11849  00208C  90D8               	bcf	status,0,c
 11850  00208E  3614               	rlcf	??_disk_ioctl,f,c
 11851  002090  3615               	rlcf	??_disk_ioctl+1,f,c
 11852  002092  2EE8               	decfsz	wreg,f,c
 11853  002094  D7FB               	goto	u5615
 11854  002096  5028               	movf	disk_ioctl@csd+7,w,c
 11855  002098  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 11856  00209A  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11857  00209C  90D8               	bcf	status,0,c
 11858  00209E  3616               	rlcf	??_disk_ioctl+2,f,c
 11859  0020A0  3617               	rlcf	??_disk_ioctl+3,f,c
 11860  0020A2  90D8               	bcf	status,0,c
 11861  0020A4  3616               	rlcf	??_disk_ioctl+2,f,c
 11862  0020A6  3617               	rlcf	??_disk_ioctl+3,f,c
 11863  0020A8  4429               	rlncf	disk_ioctl@csd+8,w,c
 11864  0020AA  46E8               	rlncf	wreg,f,c
 11865  0020AC  0B03               	andlw	3
 11866  0020AE  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 11867  0020B0  6A19               	clrf	(??_disk_ioctl+5)& (0+255),c
 11868  0020B2  5016               	movf	??_disk_ioctl+2,w,c
 11869  0020B4  2618               	addwf	??_disk_ioctl+4,f,c
 11870  0020B6  5017               	movf	??_disk_ioctl+3,w,c
 11871  0020B8  2219               	addwfc	??_disk_ioctl+5,f,c
 11872  0020BA  5014               	movf	??_disk_ioctl,w,c
 11873  0020BC  2618               	addwf	??_disk_ioctl+4,f,c
 11874  0020BE  5015               	movf	??_disk_ioctl+1,w,c
 11875  0020C0  2219               	addwfc	??_disk_ioctl+5,f,c
 11876  0020C2  0E01               	movlw	1
 11877  0020C4  2618               	addwf	??_disk_ioctl+4,f,c
 11878  0020C6  0E00               	movlw	0
 11879  0020C8  2219               	addwfc	??_disk_ioctl+5,f,c
 11880  0020CA  C018  F032         	movff	??_disk_ioctl+4,disk_ioctl@csize
 11881  0020CE  C019  F033         	movff	??_disk_ioctl+5,disk_ioctl@csize+1
 11882  0020D2  6A34               	clrf	disk_ioctl@csize+2,c
 11883  0020D4  6A35               	clrf	disk_ioctl@csize+3,c
 11884                           
 11885                           ;diskio.c: 476:     *(DWORD*)buff = csize << (n - 9);
 11886  0020D6  C037  F014         	movff	disk_ioctl@n,??_disk_ioctl
 11887  0020DA  0EF7               	movlw	-9
 11888  0020DC  2614               	addwf	??_disk_ioctl,f,c
 11889  0020DE  C032  F015         	movff	disk_ioctl@csize,??_disk_ioctl+1
 11890  0020E2  C033  F016         	movff	disk_ioctl@csize+1,??_disk_ioctl+2
 11891  0020E6  C034  F017         	movff	disk_ioctl@csize+2,??_disk_ioctl+3
 11892  0020EA  C035  F018         	movff	disk_ioctl@csize+3,??_disk_ioctl+4
 11893  0020EE  2A14               	incf	??_disk_ioctl,f,c
 11894  0020F0  D005               	goto	u5620
 11895  0020F2                     u5625:
 11896  0020F2  90D8               	bcf	status,0,c
 11897  0020F4  3615               	rlcf	??_disk_ioctl+1,f,c
 11898  0020F6  3616               	rlcf	??_disk_ioctl+2,f,c
 11899  0020F8  3617               	rlcf	??_disk_ioctl+3,f,c
 11900  0020FA  3618               	rlcf	??_disk_ioctl+4,f,c
 11901  0020FC                     u5620:
 11902  0020FC  2E14               	decfsz	??_disk_ioctl,f,c
 11903  0020FE  D7F9               	goto	u5625
 11904  002100  D03D               	goto	L15
 11905  002102                     l220:
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;diskio.c: 483:   if (CardType & 0x04) {
 11909  002102  A5D8               	btfss	_CardType& (0+255),2,b
 11910  002104  D048               	goto	l4656
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;diskio.c: 484:    if (send_cmd((0x80+13), 0) == 0) {
 11914  002106  0E00               	movlw	0
 11915  002108  6E0B               	movwf	send_cmd@arg,c
 11916  00210A  0E00               	movlw	0
 11917  00210C  6E0C               	movwf	send_cmd@arg+1,c
 11918  00210E  0E00               	movlw	0
 11919  002110  6E0D               	movwf	send_cmd@arg+2,c
 11920  002112  0E00               	movlw	0
 11921  002114  6E0E               	movwf	send_cmd@arg+3,c
 11922  002116  0E8D               	movlw	141
 11923  002118  ECFE  F029         	call	_send_cmd
 11924  00211C  0900               	iorlw	0
 11925  00211E  A4D8               	btfss	status,2,c
 11926  002120  D162               	goto	l4710
 11927                           
 11928                           ;diskio.c: 485:     SPI1_Exchange8bit(0xFF);
 11929  002122  0EFF               	movlw	255
 11930  002124  EC0C  F02B         	call	_SPI1_Exchange8bit
 11931                           
 11932                           ;diskio.c: 486:     if (rcvr_datablock(csd, 16)) {
 11933  002128  0E21               	movlw	low disk_ioctl@csd
 11934  00212A  6E02               	movwf	rcvr_datablock@buff,c
 11935  00212C  0E00               	movlw	high disk_ioctl@csd
 11936  00212E  6E03               	movwf	rcvr_datablock@buff+1,c
 11937  002130  0E00               	movlw	0
 11938  002132  6E05               	movwf	rcvr_datablock@btr+1,c
 11939  002134  0E10               	movlw	16
 11940  002136  6E04               	movwf	rcvr_datablock@btr,c
 11941  002138  EC1E  F029         	call	_rcvr_datablock	;wreg free
 11942  00213C  0900               	iorlw	0
 11943  00213E  B4D8               	btfsc	status,2,c
 11944  002140  D152               	goto	l4710
 11945                           
 11946                           ;diskio.c: 487:      for (n = 64 - 16; n; n--) SPI1_Exchange8bit(0xFF);
 11947  002142  0E30               	movlw	48
 11948  002144  6E37               	movwf	disk_ioctl@n,c
 11949  002146  D004               	goto	l4650
 11950  002148                     l4646:
 11951  002148  0EFF               	movlw	255
 11952  00214A  EC0C  F02B         	call	_SPI1_Exchange8bit
 11953  00214E  0637               	decf	disk_ioctl@n,f,c
 11954  002150                     l4650:
 11955  002150  5037               	movf	disk_ioctl@n,w,c
 11956  002152  A4D8               	btfss	status,2,c
 11957  002154  D7F9               	goto	l4646
 11958                           
 11959                           ;diskio.c: 488:      *(DWORD*)buff = 16UL << (csd[10] >> 4);
 11960  002156  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 11961  00215A  3A14               	swapf	??_disk_ioctl,f,c
 11962  00215C  0E0F               	movlw	15
 11963  00215E  1614               	andwf	??_disk_ioctl,f,c
 11964  002160  0E10               	movlw	16
 11965  002162  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 11966  002164  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 11967  002166  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 11968  002168  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 11969  00216A  2A14               	incf	??_disk_ioctl,f,c
 11970  00216C  D005               	goto	u5670
 11971  00216E                     u5675:
 11972  00216E  90D8               	bcf	status,0,c
 11973  002170  3615               	rlcf	??_disk_ioctl+1,f,c
 11974  002172  3616               	rlcf	??_disk_ioctl+2,f,c
 11975  002174  3617               	rlcf	??_disk_ioctl+3,f,c
 11976  002176  3618               	rlcf	??_disk_ioctl+4,f,c
 11977  002178                     u5670:
 11978  002178  2E14               	decfsz	??_disk_ioctl,f,c
 11979  00217A  D7F9               	goto	u5675
 11980  00217C                     L15:
 11981  00217C  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 11982  002180  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 11983  002184  C015  FFDE         	movff	??_disk_ioctl+1,postinc2
 11984  002188  C016  FFDE         	movff	??_disk_ioctl+2,postinc2
 11985  00218C  C017  FFDE         	movff	??_disk_ioctl+3,postinc2
 11986  002190  C018  FFDE         	movff	??_disk_ioctl+4,postinc2
 11987  002194  D6F3               	goto	u5550
 11988  002196                     l4656:
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;diskio.c: 493:    if ((send_cmd((9), 0) == 0) && rcvr_datablock(csd, 16)) {
 11992  002196  0E00               	movlw	0
 11993  002198  6E0B               	movwf	send_cmd@arg,c
 11994  00219A  0E00               	movlw	0
 11995  00219C  6E0C               	movwf	send_cmd@arg+1,c
 11996  00219E  0E00               	movlw	0
 11997  0021A0  6E0D               	movwf	send_cmd@arg+2,c
 11998  0021A2  0E00               	movlw	0
 11999  0021A4  6E0E               	movwf	send_cmd@arg+3,c
 12000  0021A6  0E09               	movlw	9
 12001  0021A8  ECFE  F029         	call	_send_cmd
 12002  0021AC  0900               	iorlw	0
 12003  0021AE  A4D8               	btfss	status,2,c
 12004  0021B0  D11A               	goto	l4710
 12005  0021B2  0E21               	movlw	low disk_ioctl@csd
 12006  0021B4  6E02               	movwf	rcvr_datablock@buff,c
 12007  0021B6  0E00               	movlw	high disk_ioctl@csd
 12008  0021B8  6E03               	movwf	rcvr_datablock@buff+1,c
 12009  0021BA  0E00               	movlw	0
 12010  0021BC  6E05               	movwf	rcvr_datablock@btr+1,c
 12011  0021BE  0E10               	movlw	16
 12012  0021C0  6E04               	movwf	rcvr_datablock@btr,c
 12013  0021C2  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12014  0021C6  0900               	iorlw	0
 12015  0021C8  B4D8               	btfsc	status,2,c
 12016  0021CA  D10D               	goto	l4710
 12017                           
 12018                           ;diskio.c: 494:     if (CardType & 0x02) {
 12019  0021CC  0100               	movlb	0	; () banked
 12020  0021CE  A3D8               	btfss	_CardType& (0+255),1,b
 12021  0021D0  D02A               	goto	l4664
 12022                           
 12023                           ; BSR set to: 0
 12024                           ;diskio.c: 495:      *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 
      +                          7) + 1) << ((csd[13] >> 6) - 1);
 12025  0021D2  C02E  F014         	movff	disk_ioctl@csd+13,??_disk_ioctl
 12026  0021D6  0E06               	movlw	6
 12027  0021D8  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12028  0021DA                     u5715:
 12029  0021DA  90D8               	bcf	status,0,c
 12030  0021DC  3214               	rrcf	??_disk_ioctl,f,c
 12031  0021DE  2E15               	decfsz	(??_disk_ioctl+1)& (0+255),f,c
 12032  0021E0  D7FC               	goto	u5715
 12033  0021E2  0EFF               	movlw	-1
 12034  0021E4  2614               	addwf	??_disk_ioctl,f,c
 12035  0021E6  502B               	movf	disk_ioctl@csd+10,w,c
 12036  0021E8  0B3F               	andlw	63
 12037  0021EA  6E16               	movwf	(??_disk_ioctl+2)& (0+255),c
 12038  0021EC  6A17               	clrf	(??_disk_ioctl+3)& (0+255),c
 12039  0021EE  90D8               	bcf	status,0,c
 12040  0021F0  3616               	rlcf	??_disk_ioctl+2,f,c
 12041  0021F2  3617               	rlcf	??_disk_ioctl+3,f,c
 12042  0021F4  6A18               	clrf	(??_disk_ioctl+4)& (0+255),c
 12043  0021F6  AE2C               	btfss	disk_ioctl@csd+11,7,c
 12044  0021F8  D001               	bra	u5725
 12045  0021FA  2A18               	incf	(??_disk_ioctl+4)& (0+255),f,c
 12046  0021FC                     u5725:
 12047  0021FC  0E01               	movlw	1
 12048  0021FE  1618               	andwf	??_disk_ioctl+4,f,c
 12049  002200  5018               	movf	??_disk_ioctl+4,w,c
 12050  002202  2616               	addwf	??_disk_ioctl+2,f,c
 12051  002204  0E00               	movlw	0
 12052  002206  2217               	addwfc	??_disk_ioctl+3,f,c
 12053  002208  0E01               	movlw	1
 12054  00220A  2616               	addwf	??_disk_ioctl+2,f,c
 12055  00220C  0E00               	movlw	0
 12056  00220E  2217               	addwfc	??_disk_ioctl+3,f,c
 12057  002210  2A14               	incf	??_disk_ioctl,f,c
 12058  002212  D003               	goto	u5734
 12059  002214                     u5735:
 12060  002214  90D8               	bcf	status,0,c
 12061  002216  3616               	rlcf	??_disk_ioctl+2,f,c
 12062  002218  3617               	rlcf	??_disk_ioctl+3,f,c
 12063  00221A                     u5734:
 12064  00221A  2E14               	decfsz	??_disk_ioctl,f,c
 12065  00221C  D7FB               	goto	u5735
 12066  00221E  5016               	movf	??_disk_ioctl+2,w,c
 12067  002220  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12068  002222  5017               	movf	??_disk_ioctl+3,w,c
 12069  002224  D034               	goto	L16
 12070  002226                     l4664:
 12071                           
 12072                           ; BSR set to: 0
 12073                           ;diskio.c: 497:      *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3
      +                          ) << 3) + ((csd[11] & 224) >> 5) + 1);
 12074  002226  C02B  F014         	movff	disk_ioctl@csd+10,??_disk_ioctl
 12075  00222A  90D8               	bcf	status,0,c
 12076  00222C  3214               	rrcf	??_disk_ioctl,f,c
 12077  00222E  90D8               	bcf	status,0,c
 12078  002230  3214               	rrcf	??_disk_ioctl,f,c
 12079  002232  0E1F               	movlw	31
 12080  002234  1614               	andwf	??_disk_ioctl,f,c
 12081  002236  0E01               	movlw	1
 12082  002238  2414               	addwf	??_disk_ioctl,w,c
 12083  00223A  6E01               	movwf	___wmul@multiplier,c
 12084  00223C  6A02               	clrf	___wmul@multiplier+1,c
 12085  00223E  0E00               	movlw	0
 12086  002240  2202               	addwfc	___wmul@multiplier+1,f,c
 12087  002242  502C               	movf	disk_ioctl@csd+11,w,c
 12088  002244  0B03               	andlw	3
 12089  002246  6E15               	movwf	(??_disk_ioctl+1)& (0+255),c
 12090  002248  6A16               	clrf	(??_disk_ioctl+2)& (0+255),c
 12091  00224A  90D8               	bcf	status,0,c
 12092  00224C  3615               	rlcf	??_disk_ioctl+1,f,c
 12093  00224E  3616               	rlcf	??_disk_ioctl+2,f,c
 12094  002250  90D8               	bcf	status,0,c
 12095  002252  3615               	rlcf	??_disk_ioctl+1,f,c
 12096  002254  3616               	rlcf	??_disk_ioctl+2,f,c
 12097  002256  90D8               	bcf	status,0,c
 12098  002258  3615               	rlcf	??_disk_ioctl+1,f,c
 12099  00225A  3616               	rlcf	??_disk_ioctl+2,f,c
 12100  00225C  C02C  F017         	movff	disk_ioctl@csd+11,??_disk_ioctl+3
 12101  002260  0E05               	movlw	5
 12102  002262  6E18               	movwf	(??_disk_ioctl+4)& (0+255),c
 12103  002264                     u5745:
 12104  002264  90D8               	bcf	status,0,c
 12105  002266  3217               	rrcf	??_disk_ioctl+3,f,c
 12106  002268  2E18               	decfsz	(??_disk_ioctl+4)& (0+255),f,c
 12107  00226A  D7FC               	goto	u5745
 12108  00226C  0E07               	movlw	7
 12109  00226E  1617               	andwf	??_disk_ioctl+3,f,c
 12110  002270  5017               	movf	??_disk_ioctl+3,w,c
 12111  002272  2615               	addwf	??_disk_ioctl+1,f,c
 12112  002274  0E00               	movlw	0
 12113  002276  2216               	addwfc	??_disk_ioctl+2,f,c
 12114  002278  0E01               	movlw	1
 12115  00227A  2415               	addwf	??_disk_ioctl+1,w,c
 12116  00227C  6E03               	movwf	___wmul@multiplicand,c
 12117  00227E  0E00               	movlw	0
 12118  002280  2016               	addwfc	??_disk_ioctl+2,w,c
 12119  002282  6E04               	movwf	___wmul@multiplicand+1,c
 12120  002284  ECD8  F02A         	call	___wmul	;wreg free
 12121  002288  5001               	movf	?___wmul,w,c
 12122  00228A  6E19               	movwf	(??_disk_ioctl+5)& (0+255),c
 12123  00228C  5002               	movf	?___wmul+1,w,c
 12124  00228E                     L16:
 12125  00228E  6E1A               	movwf	(??_disk_ioctl+6)& (0+255),c
 12126  002290  6A1B               	clrf	(??_disk_ioctl+7)& (0+255),c
 12127  002292  6A1C               	clrf	(??_disk_ioctl+8)& (0+255),c
 12128  002294  C012  FFD9         	movff	disk_ioctl@buff,fsr2l
 12129  002298  C013  FFDA         	movff	disk_ioctl@buff+1,fsr2h
 12130  00229C  C019  FFDE         	movff	??_disk_ioctl+5,postinc2
 12131  0022A0  C01A  FFDE         	movff	??_disk_ioctl+6,postinc2
 12132  0022A4  C01B  FFDE         	movff	??_disk_ioctl+7,postinc2
 12133  0022A8  C01C  FFDE         	movff	??_disk_ioctl+8,postinc2
 12134  0022AC  D667               	goto	u5550
 12135  0022AE                     l4668:
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;diskio.c: 507:   *ptr = CardType;
 12139  0022AE  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12140  0022B2  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12141  0022B6  C0D8  FFDF         	movff	_CardType,indf2
 12142  0022BA  D660               	goto	u5550
 12143  0022BC                     l4672:
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;diskio.c: 512:   if (send_cmd((9), 0) == 0
 12147  0022BC  0E00               	movlw	0
 12148  0022BE  6E0B               	movwf	send_cmd@arg,c
 12149  0022C0  0E00               	movlw	0
 12150  0022C2  6E0C               	movwf	send_cmd@arg+1,c
 12151  0022C4  0E00               	movlw	0
 12152  0022C6  6E0D               	movwf	send_cmd@arg+2,c
 12153  0022C8  0E00               	movlw	0
 12154  0022CA  6E0E               	movwf	send_cmd@arg+3,c
 12155  0022CC  0E09               	movlw	9
 12156  0022CE  ECFE  F029         	call	_send_cmd
 12157  0022D2  0900               	iorlw	0
 12158  0022D4  A4D8               	btfss	status,2,c
 12159  0022D6  D087               	goto	l4710
 12160  0022D8  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12161  0022DC  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12162  0022E0  0E00               	movlw	0
 12163  0022E2  6E05               	movwf	rcvr_datablock@btr+1,c
 12164  0022E4  0E10               	movlw	16
 12165  0022E6  6E04               	movwf	rcvr_datablock@btr,c
 12166  0022E8  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12167  0022EC                     L14:
 12168  0022EC  0900               	iorlw	0
 12169  0022EE  A4D8               	btfss	status,2,c
 12170  0022F0  D645               	goto	u5550
 12171  0022F2  D079               	goto	l4710
 12172  0022F4                     l4678:
 12173                           
 12174                           ; BSR set to: 0
 12175                           ;diskio.c: 518:   if (send_cmd((10), 0) == 0
 12176  0022F4  0E00               	movlw	0
 12177  0022F6  6E0B               	movwf	send_cmd@arg,c
 12178  0022F8  0E00               	movlw	0
 12179  0022FA  6E0C               	movwf	send_cmd@arg+1,c
 12180  0022FC  0E00               	movlw	0
 12181  0022FE  6E0D               	movwf	send_cmd@arg+2,c
 12182  002300  0E00               	movlw	0
 12183  002302  6E0E               	movwf	send_cmd@arg+3,c
 12184  002304  0E0A               	movlw	10
 12185  002306  ECFE  F029         	call	_send_cmd
 12186  00230A  0900               	iorlw	0
 12187  00230C  A4D8               	btfss	status,2,c
 12188  00230E  D06B               	goto	l4710
 12189  002310  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12190  002314  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12191  002318  0E00               	movlw	0
 12192  00231A  6E05               	movwf	rcvr_datablock@btr+1,c
 12193  00231C  0E10               	movlw	16
 12194  00231E  6E04               	movwf	rcvr_datablock@btr,c
 12195  002320  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12196  002324  D7E3               	goto	L14
 12197  002326                     l4684:
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;diskio.c: 524:   if (send_cmd((58), 0) == 0) {
 12201  002326  0E00               	movlw	0
 12202  002328  6E0B               	movwf	send_cmd@arg,c
 12203  00232A  0E00               	movlw	0
 12204  00232C  6E0C               	movwf	send_cmd@arg+1,c
 12205  00232E  0E00               	movlw	0
 12206  002330  6E0D               	movwf	send_cmd@arg+2,c
 12207  002332  0E00               	movlw	0
 12208  002334  6E0E               	movwf	send_cmd@arg+3,c
 12209  002336  0E3A               	movlw	58
 12210  002338  ECFE  F029         	call	_send_cmd
 12211  00233C  0900               	iorlw	0
 12212  00233E  A4D8               	btfss	status,2,c
 12213  002340  D052               	goto	l4710
 12214                           
 12215                           ;diskio.c: 525:    for (n = 4; n; n--) *ptr++ = SPI1_Exchange8bit(0xFF);
 12216  002342  0E04               	movlw	4
 12217  002344  6E37               	movwf	disk_ioctl@n,c
 12218  002346  D00B               	goto	l4694
 12219  002348                     l4688:
 12220  002348  0EFF               	movlw	255
 12221  00234A  EC0C  F02B         	call	_SPI1_Exchange8bit
 12222  00234E  C038  FFD9         	movff	disk_ioctl@ptr,fsr2l
 12223  002352  C039  FFDA         	movff	disk_ioctl@ptr+1,fsr2h
 12224  002356  6EDF               	movwf	indf2,c
 12225  002358  4A38               	infsnz	disk_ioctl@ptr,f,c
 12226  00235A  2A39               	incf	disk_ioctl@ptr+1,f,c
 12227  00235C  0637               	decf	disk_ioctl@n,f,c
 12228  00235E                     l4694:
 12229  00235E  5037               	movf	disk_ioctl@n,w,c
 12230  002360  B4D8               	btfsc	status,2,c
 12231  002362  D60C               	goto	u5550
 12232  002364  D7F1               	goto	l4688
 12233  002366                     l4698:
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;diskio.c: 531:   if (send_cmd((0x80+13), 0) == 0) {
 12237  002366  0E00               	movlw	0
 12238  002368  6E0B               	movwf	send_cmd@arg,c
 12239  00236A  0E00               	movlw	0
 12240  00236C  6E0C               	movwf	send_cmd@arg+1,c
 12241  00236E  0E00               	movlw	0
 12242  002370  6E0D               	movwf	send_cmd@arg+2,c
 12243  002372  0E00               	movlw	0
 12244  002374  6E0E               	movwf	send_cmd@arg+3,c
 12245  002376  0E8D               	movlw	141
 12246  002378  ECFE  F029         	call	_send_cmd
 12247  00237C  0900               	iorlw	0
 12248  00237E  A4D8               	btfss	status,2,c
 12249  002380  D032               	goto	l4710
 12250                           
 12251                           ;diskio.c: 532:    SPI1_Exchange8bit(0xFF);
 12252  002382  0EFF               	movlw	255
 12253  002384  EC0C  F02B         	call	_SPI1_Exchange8bit
 12254                           
 12255                           ;diskio.c: 533:    if (rcvr_datablock(ptr, 64))
 12256  002388  C038  F002         	movff	disk_ioctl@ptr,rcvr_datablock@buff
 12257  00238C  C039  F003         	movff	disk_ioctl@ptr+1,rcvr_datablock@buff+1
 12258  002390  0E00               	movlw	0
 12259  002392  6E05               	movwf	rcvr_datablock@btr+1,c
 12260  002394  0E40               	movlw	64
 12261  002396  6E04               	movwf	rcvr_datablock@btr,c
 12262  002398  EC1E  F029         	call	_rcvr_datablock	;wreg free
 12263  00239C  D7A7               	goto	L14
 12264  00239E                     l4706:
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;diskio.c: 539:   res = RES_PARERR;
 12268  00239E  0E04               	movlw	4
 12269  0023A0                     L13:
 12270  0023A0  6E36               	movwf	disk_ioctl@res,c
 12271                           
 12272                           ;diskio.c: 540:  }
 12273  0023A2  D021               	goto	l4710
 12274  0023A4                     l4708:
 12275                           
 12276                           ; BSR set to: 0
 12277  0023A4  5011               	movf	disk_ioctl@cmd,w,c
 12278  0023A6  6E14               	movwf	??_disk_ioctl& (0+255),c
 12279  0023A8  6A15               	clrf	(??_disk_ioctl+1)& (0+255),c
 12280                           
 12281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12282                           ; Switch size 1, requested type "simple"
 12283                           ; Number of cases is 1, Range of values is 0 to 0
 12284                           ; switch strategies available:
 12285                           ; Name         Instructions Cycles
 12286                           ; simple_byte            4     3 (average)
 12287                           ;	Chosen strategy is simple_byte
 12288  0023AA  5015               	movf	??_disk_ioctl+1,w,c
 12289  0023AC  0A00               	xorlw	0	; case 0
 12290  0023AE  A4D8               	btfss	status,2,c
 12291  0023B0  D7F6               	goto	l4706
 12292                           
 12293                           ; BSR set to: 0
 12294                           ; Switch size 1, requested type "simple"
 12295                           ; Number of cases is 8, Range of values is 0 to 14
 12296                           ; switch strategies available:
 12297                           ; Name         Instructions Cycles
 12298                           ; simple_byte           25    13 (average)
 12299                           ;	Chosen strategy is simple_byte
 12300  0023B2  5014               	movf	??_disk_ioctl,w,c
 12301  0023B4  0A00               	xorlw	0	; case 0
 12302  0023B6  B4D8               	btfsc	status,2,c
 12303  0023B8  D5DC               	goto	l4616
 12304  0023BA  0A01               	xorlw	1	; case 1
 12305  0023BC  B4D8               	btfsc	status,2,c
 12306  0023BE  D5E0               	goto	l4620
 12307  0023C0  0A02               	xorlw	2	; case 3
 12308  0023C2  B4D8               	btfsc	status,2,c
 12309  0023C4  D69E               	goto	l220
 12310  0023C6  0A09               	xorlw	9	; case 10
 12311  0023C8  B4D8               	btfsc	status,2,c
 12312  0023CA  D771               	goto	l4668
 12313  0023CC  0A01               	xorlw	1	; case 11
 12314  0023CE  B4D8               	btfsc	status,2,c
 12315  0023D0  D775               	goto	l4672
 12316  0023D2  0A07               	xorlw	7	; case 12
 12317  0023D4  B4D8               	btfsc	status,2,c
 12318  0023D6  D78E               	goto	l4678
 12319  0023D8  0A01               	xorlw	1	; case 13
 12320  0023DA  B4D8               	btfsc	status,2,c
 12321  0023DC  D7A4               	goto	l4684
 12322  0023DE  0A03               	xorlw	3	; case 14
 12323  0023E0  B4D8               	btfsc	status,2,c
 12324  0023E2  D7C1               	goto	l4698
 12325  0023E4  D7DC               	goto	l4706
 12326  0023E6                     l4710:
 12327                           
 12328                           ;diskio.c: 542:  deselect();
 12329  0023E6  EC29  F02B         	call	_deselect	;wreg free
 12330                           
 12331                           ;diskio.c: 544:  return res;
 12332  0023EA  5036               	movf	disk_ioctl@res,w,c
 12333  0023EC  0012               	return		;funcret
 12334  0023EE                     __end_of_disk_ioctl:
 12335                           	opt callstack 0
 12336                           
 12337 ;; *************** function ___wmul *****************
 12338 ;; Defined at:
 12339 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12340 ;; Parameters:    Size  Location     Type
 12341 ;;  multiplier      2    0[COMRAM] unsigned int 
 12342 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;  product         2    4[COMRAM] unsigned int 
 12345 ;; Return value:  Size  Location     Type
 12346 ;;                  2    0[COMRAM] unsigned int 
 12347 ;; Registers used:
 12348 ;;		wreg, status,2, status,0, prodl, prodh
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12354 ;;      Params:         4       0       0       0       0       0       0       0       0
 12355 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12356 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12357 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12358 ;;Total ram usage:        6 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; This function calls:
 12361 ;;		Nothing
 12362 ;; This function is called by:
 12363 ;;		_disk_ioctl
 12364 ;; This function uses a non-reentrant model
 12365 ;;
 12366                           
 12367                           	psect	text36
 12368  0055B0                     __ptext36:
 12369                           	opt callstack 0
 12370  0055B0                     ___wmul:
 12371                           	opt callstack 25
 12372                           
 12373                           ;incstack = 0
 12374  0055B0  5001               	movf	___wmul@multiplier,w,c
 12375  0055B2  0203               	mulwf	___wmul@multiplicand,c
 12376  0055B4  CFF3 F005          	movff	prodl,___wmul@product
 12377  0055B8  CFF4 F006          	movff	prodh,___wmul@product+1
 12378  0055BC  5001               	movf	___wmul@multiplier,w,c
 12379  0055BE  0204               	mulwf	___wmul@multiplicand+1,c
 12380  0055C0  50F3               	movf	prodl,w,c
 12381  0055C2  2606               	addwf	___wmul@product+1,f,c
 12382  0055C4  5002               	movf	___wmul@multiplier+1,w,c
 12383  0055C6  0203               	mulwf	___wmul@multiplicand,c
 12384  0055C8  50F3               	movf	prodl,w,c
 12385  0055CA  2606               	addwf	___wmul@product+1,f,c
 12386  0055CC  C005  F001         	movff	___wmul@product,?___wmul
 12387  0055D0  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12388  0055D4  0012               	return		;funcret
 12389  0055D6                     __end_of___wmul:
 12390                           	opt callstack 0
 12391                           
 12392 ;; *************** function _st_clust *****************
 12393 ;; Defined at:
 12394 ;;		line 1252 in file "ff.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;  dir             2    0[COMRAM] PTR unsigned char 
 12397 ;;		 -> NULL(0), FatFs(558), 
 12398 ;;  cl              4    2[COMRAM] unsigned long 
 12399 ;; Auto vars:     Size  Location     Type
 12400 ;;		None
 12401 ;; Return value:  Size  Location     Type
 12402 ;;                  1    wreg      void 
 12403 ;; Registers used:
 12404 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12405 ;; Tracked objects:
 12406 ;;		On entry : 0/0
 12407 ;;		On exit  : 0/0
 12408 ;;		Unchanged: 0/0
 12409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12410 ;;      Params:         6       0       0       0       0       0       0       0       0
 12411 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12412 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12413 ;;      Totals:         6       0       0       0       0       0       0       0       0
 12414 ;;Total ram usage:        6 bytes
 12415 ;; Hardware stack levels used:    1
 12416 ;; This function calls:
 12417 ;;		Nothing
 12418 ;; This function is called by:
 12419 ;;		_f_open
 12420 ;;		_f_sync
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           	psect	text37
 12425  005586                     __ptext37:
 12426                           	opt callstack 0
 12427  005586                     _st_clust:
 12428                           	opt callstack 28
 12429                           
 12430                           ;ff.c: 1253:  BYTE* dir,;ff.c: 1254:  DWORD cl;ff.c: 1256: {;ff.c: 1257:  *(WORD*)(BYTE*
      +                          )(dir + 26)=(WORD)(cl);
 12431                           
 12432                           ;incstack = 0
 12433  005586  EE20 F01A          	lfsr	2,26
 12434  00558A  5001               	movf	st_clust@dir,w,c
 12435  00558C  26D9               	addwf	fsr2l,f,c
 12436  00558E  5002               	movf	st_clust@dir+1,w,c
 12437  005590  22DA               	addwfc	fsr2h,f,c
 12438  005592  C003  FFDE         	movff	st_clust@cl,postinc2
 12439  005596  C004  FFDD         	movff	st_clust@cl+1,postdec2
 12440                           
 12441                           ;ff.c: 1258:  *(WORD*)(BYTE*)(dir + 20)=(WORD)(cl >> 16);
 12442  00559A  EE20 F014          	lfsr	2,20
 12443  00559E  5001               	movf	st_clust@dir,w,c
 12444  0055A0  26D9               	addwf	fsr2l,f,c
 12445  0055A2  5002               	movf	st_clust@dir+1,w,c
 12446  0055A4  22DA               	addwfc	fsr2h,f,c
 12447  0055A6  C005  FFDE         	movff	st_clust@cl+2,postinc2
 12448  0055AA  C006  FFDD         	movff	st_clust@cl+3,postdec2
 12449  0055AE  0012               	return		;funcret
 12450  0055B0                     __end_of_st_clust:
 12451                           	opt callstack 0
 12452                           
 12453 ;; *************** function _move_window *****************
 12454 ;; Defined at:
 12455 ;;		line 729 in file "ff.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;  fs              2   47[COMRAM] PTR struct .
 12458 ;;		 -> NULL(0), FatFs(558), 
 12459 ;;  sector          4   49[COMRAM] unsigned long 
 12460 ;; Auto vars:     Size  Location     Type
 12461 ;;  res             1   57[COMRAM] enum E93
 12462 ;; Return value:  Size  Location     Type
 12463 ;;                  1    wreg      enum E93
 12464 ;; Registers used:
 12465 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12466 ;; Tracked objects:
 12467 ;;		On entry : 0/0
 12468 ;;		On exit  : 0/0
 12469 ;;		Unchanged: 0/0
 12470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12471 ;;      Params:         6       0       0       0       0       0       0       0       0
 12472 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12473 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12474 ;;      Totals:        11       0       0       0       0       0       0       0       0
 12475 ;;Total ram usage:       11 bytes
 12476 ;; Hardware stack levels used:    1
 12477 ;; Hardware stack levels required when called:    7
 12478 ;; This function calls:
 12479 ;;		_disk_read
 12480 ;;		_sync_window
 12481 ;; This function is called by:
 12482 ;;		_get_fat
 12483 ;;		_put_fat
 12484 ;;		_dir_alloc
 12485 ;;		_dir_find
 12486 ;;		_dir_register
 12487 ;;		_check_fs
 12488 ;;		_find_volume
 12489 ;;		_f_open
 12490 ;;		_f_write
 12491 ;;		_f_sync
 12492 ;;		_f_read
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           	psect	text38
 12497  004F04                     __ptext38:
 12498                           	opt callstack 0
 12499  004F04                     _move_window:
 12500                           	opt callstack 21
 12501                           
 12502                           ;ff.c: 730:  FATFS* fs,;ff.c: 731:  DWORD sector;ff.c: 733: {;ff.c: 734:  FRESULT res = 
      +                          FR_OK;
 12503                           
 12504                           ;incstack = 0
 12505  004F04  0E00               	movlw	0
 12506  004F06  6E3A               	movwf	move_window@res,c
 12507                           
 12508                           ;ff.c: 737:  if (sector != fs->winsect) {
 12509  004F08  EE20 F02A          	lfsr	2,42
 12510  004F0C  5030               	movf	move_window@fs,w,c
 12511  004F0E  26D9               	addwf	fsr2l,f,c
 12512  004F10  5031               	movf	move_window@fs+1,w,c
 12513  004F12  22DA               	addwfc	fsr2h,f,c
 12514  004F14  5032               	movf	move_window@sector,w,c
 12515  004F16  18DE               	xorwf	postinc2,w,c
 12516  004F18  E10A               	bnz	u5050
 12517  004F1A  5033               	movf	move_window@sector+1,w,c
 12518  004F1C  18DE               	xorwf	postinc2,w,c
 12519  004F1E  E107               	bnz	u5050
 12520  004F20  5034               	movf	move_window@sector+2,w,c
 12521  004F22  18DE               	xorwf	postinc2,w,c
 12522  004F24  E104               	bnz	u5050
 12523  004F26  5035               	movf	move_window@sector+3,w,c
 12524  004F28  18DE               	xorwf	postinc2,w,c
 12525  004F2A  B4D8               	btfsc	status,2,c
 12526  004F2C  D03C               	goto	l4342
 12527  004F2E                     u5050:
 12528                           
 12529                           ;ff.c: 739:   res = sync_window(fs);
 12530  004F2E  C030  F01B         	movff	move_window@fs,sync_window@fs
 12531  004F32  C031  F01C         	movff	move_window@fs+1,sync_window@fs+1
 12532  004F36  ECA0  F01F         	call	_sync_window	;wreg free
 12533  004F3A  6E3A               	movwf	move_window@res,c
 12534                           
 12535                           ;ff.c: 741:   if (res == FR_OK) {
 12536  004F3C  503A               	movf	move_window@res,w,c
 12537  004F3E  A4D8               	btfss	status,2,c
 12538  004F40  D032               	goto	l4342
 12539                           
 12540                           ;ff.c: 742:    if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 12541  004F42  0E2E               	movlw	46
 12542  004F44  2430               	addwf	move_window@fs,w,c
 12543  004F46  6E11               	movwf	disk_read@buff,c
 12544  004F48  0E00               	movlw	0
 12545  004F4A  2031               	addwfc	move_window@fs+1,w,c
 12546  004F4C  6E12               	movwf	disk_read@buff+1,c
 12547  004F4E  C032  F013         	movff	move_window@sector,disk_read@sector
 12548  004F52  C033  F014         	movff	move_window@sector+1,disk_read@sector+1
 12549  004F56  C034  F015         	movff	move_window@sector+2,disk_read@sector+2
 12550  004F5A  C035  F016         	movff	move_window@sector+3,disk_read@sector+3
 12551  004F5E  0E00               	movlw	0
 12552  004F60  6E18               	movwf	disk_read@count+1,c
 12553  004F62  0E01               	movlw	1
 12554  004F64  6E17               	movwf	disk_read@count,c
 12555  004F66  EE20 F001          	lfsr	2,1
 12556  004F6A  5030               	movf	move_window@fs,w,c
 12557  004F6C  26D9               	addwf	fsr2l,f,c
 12558  004F6E  5031               	movf	move_window@fs+1,w,c
 12559  004F70  22DA               	addwfc	fsr2h,f,c
 12560  004F72  50DF               	movf	indf2,w,c
 12561  004F74  EC0A  F026         	call	_disk_read
 12562  004F78  0900               	iorlw	0
 12563  004F7A  B4D8               	btfsc	status,2,c
 12564  004F7C  D006               	goto	l4340
 12565                           
 12566                           ;ff.c: 743:     sector = 0xFFFFFFFF;
 12567  004F7E  6832               	setf	move_window@sector,c
 12568  004F80  6833               	setf	move_window@sector+1,c
 12569  004F82  6834               	setf	move_window@sector+2,c
 12570  004F84  6835               	setf	move_window@sector+3,c
 12571                           
 12572                           ;ff.c: 744:     res = FR_DISK_ERR;
 12573  004F86  0E01               	movlw	1
 12574  004F88  6E3A               	movwf	move_window@res,c
 12575  004F8A                     l4340:
 12576                           
 12577                           ;ff.c: 746:    fs->winsect = sector;
 12578  004F8A  EE20 F02A          	lfsr	2,42
 12579  004F8E  5030               	movf	move_window@fs,w,c
 12580  004F90  26D9               	addwf	fsr2l,f,c
 12581  004F92  5031               	movf	move_window@fs+1,w,c
 12582  004F94  22DA               	addwfc	fsr2h,f,c
 12583  004F96  C032  FFDE         	movff	move_window@sector,postinc2
 12584  004F9A  C033  FFDE         	movff	move_window@sector+1,postinc2
 12585  004F9E  C034  FFDE         	movff	move_window@sector+2,postinc2
 12586  004FA2  C035  FFDE         	movff	move_window@sector+3,postinc2
 12587  004FA6                     l4342:
 12588                           
 12589                           ;ff.c: 749:  return res;
 12590  004FA6  503A               	movf	move_window@res,w,c
 12591  004FA8  0012               	return		;funcret
 12592  004FAA                     __end_of_move_window:
 12593                           	opt callstack 0
 12594                           
 12595 ;; *************** function _sync_window *****************
 12596 ;; Defined at:
 12597 ;;		line 700 in file "ff.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;  fs              2   26[COMRAM] PTR struct .
 12600 ;;		 -> NULL(0), FatFs(558), 
 12601 ;; Auto vars:     Size  Location     Type
 12602 ;;  wsect           4   43[COMRAM] unsigned long 
 12603 ;;  nf              2   41[COMRAM] unsigned short 
 12604 ;;  res             1   40[COMRAM] enum E93
 12605 ;; Return value:  Size  Location     Type
 12606 ;;                  1    wreg      enum E93
 12607 ;; Registers used:
 12608 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12609 ;; Tracked objects:
 12610 ;;		On entry : 0/0
 12611 ;;		On exit  : 0/0
 12612 ;;		Unchanged: 0/0
 12613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12614 ;;      Params:         2       0       0       0       0       0       0       0       0
 12615 ;;      Locals:         7       0       0       0       0       0       0       0       0
 12616 ;;      Temps:         12       0       0       0       0       0       0       0       0
 12617 ;;      Totals:        21       0       0       0       0       0       0       0       0
 12618 ;;Total ram usage:       21 bytes
 12619 ;; Hardware stack levels used:    1
 12620 ;; Hardware stack levels required when called:    6
 12621 ;; This function calls:
 12622 ;;		_disk_write
 12623 ;; This function is called by:
 12624 ;;		_move_window
 12625 ;;		_sync_fs
 12626 ;;		_dir_next
 12627 ;;		_f_write
 12628 ;; This function uses a non-reentrant model
 12629 ;;
 12630                           
 12631                           	psect	text39
 12632  003F40                     __ptext39:
 12633                           	opt callstack 0
 12634  003F40                     _sync_window:
 12635                           	opt callstack 22
 12636                           
 12637                           ;ff.c: 701:  FATFS* fs;ff.c: 703: {;ff.c: 704:  DWORD wsect;;ff.c: 705:  UINT nf;;ff.c: 
      +                          706:  FRESULT res = FR_OK;
 12638                           
 12639                           ;incstack = 0
 12640  003F40  0E00               	movlw	0
 12641  003F42  6E29               	movwf	sync_window@res,c
 12642                           
 12643                           ;ff.c: 709:  if (fs->wflag) {
 12644  003F44  EE20 F004          	lfsr	2,4
 12645  003F48  501B               	movf	sync_window@fs,w,c
 12646  003F4A  26D9               	addwf	fsr2l,f,c
 12647  003F4C  501C               	movf	sync_window@fs+1,w,c
 12648  003F4E  22DA               	addwfc	fsr2h,f,c
 12649  003F50  50DF               	movf	indf2,w,c
 12650  003F52  B4D8               	btfsc	status,2,c
 12651  003F54  D09F               	goto	l4322
 12652                           
 12653                           ;ff.c: 710:   wsect = fs->winsect;
 12654  003F56  EE20 F02A          	lfsr	2,42
 12655  003F5A  501B               	movf	sync_window@fs,w,c
 12656  003F5C  26D9               	addwf	fsr2l,f,c
 12657  003F5E  501C               	movf	sync_window@fs+1,w,c
 12658  003F60  22DA               	addwfc	fsr2h,f,c
 12659  003F62  CFDE F02C          	movff	postinc2,sync_window@wsect
 12660  003F66  CFDE F02D          	movff	postinc2,sync_window@wsect+1
 12661  003F6A  CFDE F02E          	movff	postinc2,sync_window@wsect+2
 12662  003F6E  CFDE F02F          	movff	postinc2,sync_window@wsect+3
 12663                           
 12664                           ;ff.c: 711:   if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 12665  003F72  0E2E               	movlw	46
 12666  003F74  241B               	addwf	sync_window@fs,w,c
 12667  003F76  6E11               	movwf	disk_write@buff,c
 12668  003F78  0E00               	movlw	0
 12669  003F7A  201C               	addwfc	sync_window@fs+1,w,c
 12670  003F7C  6E12               	movwf	disk_write@buff+1,c
 12671  003F7E  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12672  003F82  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12673  003F86  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12674  003F8A  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12675  003F8E  0E00               	movlw	0
 12676  003F90  6E18               	movwf	disk_write@count+1,c
 12677  003F92  0E01               	movlw	1
 12678  003F94  6E17               	movwf	disk_write@count,c
 12679  003F96  EE20 F001          	lfsr	2,1
 12680  003F9A  501B               	movf	sync_window@fs,w,c
 12681  003F9C  26D9               	addwf	fsr2l,f,c
 12682  003F9E  501C               	movf	sync_window@fs+1,w,c
 12683  003FA0  22DA               	addwfc	fsr2h,f,c
 12684  003FA2  50DF               	movf	indf2,w,c
 12685  003FA4  ECD7  F022         	call	_disk_write
 12686  003FA8  0900               	iorlw	0
 12687  003FAA  B4D8               	btfsc	status,2,c
 12688  003FAC  D003               	goto	l4304
 12689                           
 12690                           ;ff.c: 712:    res = FR_DISK_ERR;
 12691  003FAE  0E01               	movlw	1
 12692  003FB0  6E29               	movwf	sync_window@res,c
 12693                           
 12694                           ;ff.c: 713:   } else {
 12695  003FB2  D070               	goto	l4322
 12696  003FB4                     l4304:
 12697                           
 12698                           ;ff.c: 714:    fs->wflag = 0;
 12699  003FB4  EE20 F004          	lfsr	2,4
 12700  003FB8  501B               	movf	sync_window@fs,w,c
 12701  003FBA  26D9               	addwf	fsr2l,f,c
 12702  003FBC  501C               	movf	sync_window@fs+1,w,c
 12703  003FBE  22DA               	addwfc	fsr2h,f,c
 12704  003FC0  0E00               	movlw	0
 12705  003FC2  6EDF               	movwf	indf2,c
 12706                           
 12707                           ;ff.c: 715:    if (wsect - fs->fatbase < fs->fsize) {
 12708  003FC4  EE20 F016          	lfsr	2,22
 12709  003FC8  501B               	movf	sync_window@fs,w,c
 12710  003FCA  26D9               	addwf	fsr2l,f,c
 12711  003FCC  501C               	movf	sync_window@fs+1,w,c
 12712  003FCE  22DA               	addwfc	fsr2h,f,c
 12713  003FD0  EE10 F01E          	lfsr	1,30
 12714  003FD4  501B               	movf	sync_window@fs,w,c
 12715  003FD6  26E1               	addwf	fsr1l,f,c
 12716  003FD8  501C               	movf	sync_window@fs+1,w,c
 12717  003FDA  22E2               	addwfc	fsr1h,f,c
 12718  003FDC  CFE6 F021          	movff	postinc1,??_sync_window+4
 12719  003FE0  CFE6 F022          	movff	postinc1,??_sync_window+5
 12720  003FE4  CFE6 F023          	movff	postinc1,??_sync_window+6
 12721  003FE8  CFE6 F024          	movff	postinc1,??_sync_window+7
 12722  003FEC  5021               	movf	??_sync_window+4,w,c
 12723  003FEE  5C2C               	subwf	sync_window@wsect,w,c
 12724  003FF0  6E25               	movwf	(??_sync_window+8)& (0+255),c
 12725  003FF2  5022               	movf	??_sync_window+5,w,c
 12726  003FF4  582D               	subwfb	sync_window@wsect+1,w,c
 12727  003FF6  6E26               	movwf	(??_sync_window+9)& (0+255),c
 12728  003FF8  5023               	movf	??_sync_window+6,w,c
 12729  003FFA  582E               	subwfb	sync_window@wsect+2,w,c
 12730  003FFC  6E27               	movwf	(??_sync_window+10)& (0+255),c
 12731  003FFE  5024               	movf	??_sync_window+7,w,c
 12732  004000  582F               	subwfb	sync_window@wsect+3,w,c
 12733  004002  6E28               	movwf	(??_sync_window+11)& (0+255),c
 12734  004004  50DE               	movf	postinc2,w,c
 12735  004006  5C25               	subwf	??_sync_window+8,w,c
 12736  004008  50DE               	movf	postinc2,w,c
 12737  00400A  5826               	subwfb	??_sync_window+9,w,c
 12738  00400C  50DE               	movf	postinc2,w,c
 12739  00400E  5827               	subwfb	??_sync_window+10,w,c
 12740  004010  50DE               	movf	postinc2,w,c
 12741  004012  5828               	subwfb	??_sync_window+11,w,c
 12742  004014  B0D8               	btfsc	status,0,c
 12743  004016  D03E               	goto	l4322
 12744                           
 12745                           ;ff.c: 716:     for (nf = fs->n_fats; nf >= 2; nf--) {
 12746  004018  EE20 F003          	lfsr	2,3
 12747  00401C  501B               	movf	sync_window@fs,w,c
 12748  00401E  26D9               	addwf	fsr2l,f,c
 12749  004020  501C               	movf	sync_window@fs+1,w,c
 12750  004022  22DA               	addwfc	fsr2h,f,c
 12751  004024  50DF               	movf	indf2,w,c
 12752  004026  6E1D               	movwf	??_sync_window& (0+255),c
 12753  004028  501D               	movf	??_sync_window,w,c
 12754  00402A  6E2A               	movwf	sync_window@nf,c
 12755  00402C  6A2B               	clrf	sync_window@nf+1,c
 12756  00402E                     l4310:
 12757  00402E  502B               	movf	sync_window@nf+1,w,c
 12758  004030  E104               	bnz	l4314
 12759  004032  0E02               	movlw	2
 12760  004034  5C2A               	subwf	sync_window@nf,w,c
 12761  004036  A0D8               	btfss	status,0,c
 12762  004038  D02D               	goto	l4322
 12763  00403A                     l4314:
 12764                           
 12765                           ;ff.c: 717:      wsect += fs->fsize;
 12766  00403A  EE20 F016          	lfsr	2,22
 12767  00403E  501B               	movf	sync_window@fs,w,c
 12768  004040  26D9               	addwf	fsr2l,f,c
 12769  004042  501C               	movf	sync_window@fs+1,w,c
 12770  004044  22DA               	addwfc	fsr2h,f,c
 12771  004046  50DE               	movf	postinc2,w,c
 12772  004048  262C               	addwf	sync_window@wsect,f,c
 12773  00404A  50DE               	movf	postinc2,w,c
 12774  00404C  222D               	addwfc	sync_window@wsect+1,f,c
 12775  00404E  50DE               	movf	postinc2,w,c
 12776  004050  222E               	addwfc	sync_window@wsect+2,f,c
 12777  004052  50DD               	movf	postdec2,w,c
 12778  004054  222F               	addwfc	sync_window@wsect+3,f,c
 12779                           
 12780                           ;ff.c: 718:      disk_write(fs->drv, fs->win, wsect, 1);
 12781  004056  0E2E               	movlw	46
 12782  004058  241B               	addwf	sync_window@fs,w,c
 12783  00405A  6E11               	movwf	disk_write@buff,c
 12784  00405C  0E00               	movlw	0
 12785  00405E  201C               	addwfc	sync_window@fs+1,w,c
 12786  004060  6E12               	movwf	disk_write@buff+1,c
 12787  004062  C02C  F013         	movff	sync_window@wsect,disk_write@sector
 12788  004066  C02D  F014         	movff	sync_window@wsect+1,disk_write@sector+1
 12789  00406A  C02E  F015         	movff	sync_window@wsect+2,disk_write@sector+2
 12790  00406E  C02F  F016         	movff	sync_window@wsect+3,disk_write@sector+3
 12791  004072  0E00               	movlw	0
 12792  004074  6E18               	movwf	disk_write@count+1,c
 12793  004076  0E01               	movlw	1
 12794  004078  6E17               	movwf	disk_write@count,c
 12795  00407A  EE20 F001          	lfsr	2,1
 12796  00407E  501B               	movf	sync_window@fs,w,c
 12797  004080  26D9               	addwf	fsr2l,f,c
 12798  004082  501C               	movf	sync_window@fs+1,w,c
 12799  004084  22DA               	addwfc	fsr2h,f,c
 12800  004086  50DF               	movf	indf2,w,c
 12801  004088  ECD7  F022         	call	_disk_write
 12802                           
 12803                           ;ff.c: 719:     }
 12804  00408C  062A               	decf	sync_window@nf,f,c
 12805  00408E  A0D8               	btfss	status,0,c
 12806  004090  062B               	decf	sync_window@nf+1,f,c
 12807  004092  D7CD               	goto	l4310
 12808  004094                     l4322:
 12809                           
 12810                           ;ff.c: 723:  return res;
 12811  004094  5029               	movf	sync_window@res,w,c
 12812  004096  0012               	return		;funcret
 12813  004098                     __end_of_sync_window:
 12814                           	opt callstack 0
 12815                           
 12816 ;; *************** function _disk_write *****************
 12817 ;; Defined at:
 12818 ;;		line 405 in file "diskio.c"
 12819 ;; Parameters:    Size  Location     Type
 12820 ;;  pdrv            1    wreg     unsigned char 
 12821 ;;  buff            2   16[COMRAM] PTR const unsigned char 
 12822 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 12823 ;;  sector          4   18[COMRAM] unsigned long 
 12824 ;;  count           2   22[COMRAM] unsigned short 
 12825 ;; Auto vars:     Size  Location     Type
 12826 ;;  pdrv            1   25[COMRAM] unsigned char 
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      enum E43
 12829 ;; Registers used:
 12830 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12836 ;;      Params:         8       0       0       0       0       0       0       0       0
 12837 ;;      Locals:         1       0       0       0       0       0       0       0       0
 12838 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12839 ;;      Totals:        10       0       0       0       0       0       0       0       0
 12840 ;;Total ram usage:       10 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    5
 12843 ;; This function calls:
 12844 ;;		_deselect
 12845 ;;		_send_cmd
 12846 ;;		_xmit_datablock
 12847 ;; This function is called by:
 12848 ;;		_sync_window
 12849 ;;		_sync_fs
 12850 ;;		_f_write
 12851 ;; This function uses a non-reentrant model
 12852 ;;
 12853                           
 12854                           	psect	text40
 12855  0045AE                     __ptext40:
 12856                           	opt callstack 0
 12857  0045AE                     _disk_write:
 12858                           	opt callstack 22
 12859                           
 12860                           ;incstack = 0
 12861                           ;disk_write@pdrv stored from wreg
 12862  0045AE  6E1A               	movwf	disk_write@pdrv,c
 12863                           
 12864                           ;diskio.c: 406:  BYTE pdrv,;diskio.c: 407:  const BYTE *buff,;diskio.c: 408:  DWORD sect
      +                          or,;diskio.c: 409:  UINT count;diskio.c: 411: {;diskio.c: 412:  if (pdrv || !count) retu
      +                          rn RES_PARERR;
 12865  0045B0  501A               	movf	disk_write@pdrv,w,c
 12866  0045B2  A4D8               	btfss	status,2,c
 12867  0045B4  D004               	goto	u4740
 12868  0045B6  5017               	movf	disk_write@count,w,c
 12869  0045B8  1018               	iorwf	disk_write@count+1,w,c
 12870  0045BA  A4D8               	btfss	status,2,c
 12871  0045BC  D002               	goto	l191
 12872  0045BE                     u4740:
 12873  0045BE  0E04               	movlw	4
 12874  0045C0  0012               	return	
 12875  0045C2                     l191:
 12876                           
 12877                           ;diskio.c: 413:  if (Stat & 0x01) return RES_NOTRDY;
 12878  0045C2  0100               	movlb	0	; () banked
 12879  0045C4  A1F9               	btfss	_Stat& (0+255),0,b
 12880  0045C6  D002               	goto	l195
 12881                           
 12882                           ; BSR set to: 0
 12883  0045C8  0E03               	movlw	3
 12884  0045CA  0012               	return	
 12885  0045CC                     l195:
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;diskio.c: 414:  if (Stat & 0x04) return RES_WRPRT;
 12889  0045CC  A5F9               	btfss	_Stat& (0+255),2,b
 12890  0045CE  D002               	goto	l196
 12891                           
 12892                           ; BSR set to: 0
 12893  0045D0  0E02               	movlw	2
 12894  0045D2  0012               	return	
 12895  0045D4                     l196:
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;diskio.c: 416:  if (!(CardType & 0x08)) sector *= 512;
 12899  0045D4  B7D8               	btfsc	_CardType& (0+255),3,b
 12900  0045D6  D008               	goto	l197
 12901                           
 12902                           ; BSR set to: 0
 12903  0045D8  0E09               	movlw	9
 12904  0045DA                     u4785:
 12905  0045DA  90D8               	bcf	status,0,c
 12906  0045DC  3613               	rlcf	disk_write@sector,f,c
 12907  0045DE  3614               	rlcf	disk_write@sector+1,f,c
 12908  0045E0  3615               	rlcf	disk_write@sector+2,f,c
 12909  0045E2  3616               	rlcf	disk_write@sector+3,f,c
 12910  0045E4  2EE8               	decfsz	wreg,f,c
 12911  0045E6  D7F9               	goto	u4785
 12912  0045E8                     l197:
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;diskio.c: 418:  if (count == 1) {
 12916  0045E8  0417               	decf	disk_write@count,w,c
 12917  0045EA  1018               	iorwf	disk_write@count+1,w,c
 12918  0045EC  A4D8               	btfss	status,2,c
 12919  0045EE  D01D               	goto	l4236
 12920                           
 12921                           ; BSR set to: 0
 12922                           ;diskio.c: 419:   if ((send_cmd((24), sector) == 0)
 12923  0045F0  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12924  0045F4  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12925  0045F8  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12926  0045FC  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12927  004600  0E18               	movlw	24
 12928  004602  ECFE  F029         	call	_send_cmd
 12929  004606  0900               	iorlw	0
 12930  004608  A4D8               	btfss	status,2,c
 12931  00460A  D04F               	goto	l4250
 12932  00460C  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12933  004610  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12934  004614  0EFE               	movlw	254
 12935  004616  6E06               	movwf	xmit_datablock@token,c
 12936  004618  ECE0  F028         	call	_xmit_datablock	;wreg free
 12937  00461C  0900               	iorlw	0
 12938  00461E  B4D8               	btfsc	status,2,c
 12939  004620  D044               	goto	l4250
 12940                           
 12941                           ;diskio.c: 421:    count = 0;
 12942  004622  0E00               	movlw	0
 12943  004624  6E18               	movwf	disk_write@count+1,c
 12944  004626  0E00               	movlw	0
 12945  004628  D03F               	goto	L17
 12946  00462A                     l4236:
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;diskio.c: 424:   if (CardType & (0x02|0x04)) send_cmd((0x80+23), count);
 12950  00462A  C0D8  F019         	movff	_CardType,??_disk_write
 12951  00462E  0E06               	movlw	6
 12952  004630  1619               	andwf	??_disk_write,f,c
 12953  004632  B4D8               	btfsc	status,2,c
 12954  004634  D009               	goto	l201
 12955                           
 12956                           ; BSR set to: 0
 12957  004636  C017  F00B         	movff	disk_write@count,send_cmd@arg
 12958  00463A  C018  F00C         	movff	disk_write@count+1,send_cmd@arg+1
 12959  00463E  6A0D               	clrf	send_cmd@arg+2,c
 12960  004640  6A0E               	clrf	send_cmd@arg+3,c
 12961  004642  0E97               	movlw	151
 12962  004644  ECFE  F029         	call	_send_cmd
 12963  004648                     l201:
 12964                           
 12965                           ;diskio.c: 425:   if (send_cmd((25), sector) == 0) {
 12966  004648  C013  F00B         	movff	disk_write@sector,send_cmd@arg
 12967  00464C  C014  F00C         	movff	disk_write@sector+1,send_cmd@arg+1
 12968  004650  C015  F00D         	movff	disk_write@sector+2,send_cmd@arg+2
 12969  004654  C016  F00E         	movff	disk_write@sector+3,send_cmd@arg+3
 12970  004658  0E19               	movlw	25
 12971  00465A  ECFE  F029         	call	_send_cmd
 12972  00465E  0900               	iorlw	0
 12973  004660  A4D8               	btfss	status,2,c
 12974  004662  D023               	goto	l4250
 12975  004664                     u4830:
 12976                           
 12977                           ;diskio.c: 427:     if (!xmit_datablock(buff, 0xFC)) break;
 12978  004664  C011  F004         	movff	disk_write@buff,xmit_datablock@buff
 12979  004668  C012  F005         	movff	disk_write@buff+1,xmit_datablock@buff+1
 12980  00466C  0EFC               	movlw	252
 12981  00466E  6E06               	movwf	xmit_datablock@token,c
 12982  004670  ECE0  F028         	call	_xmit_datablock	;wreg free
 12983  004674  0900               	iorlw	0
 12984  004676  B4D8               	btfsc	status,2,c
 12985  004678  D009               	goto	u4850
 12986                           
 12987                           ;diskio.c: 428:     buff += 512;
 12988  00467A  0E02               	movlw	2
 12989  00467C  2612               	addwf	disk_write@buff+1,f,c
 12990                           
 12991                           ;diskio.c: 429:    } while (--count);
 12992  00467E  0617               	decf	disk_write@count,f,c
 12993  004680  A0D8               	btfss	status,0,c
 12994  004682  0618               	decf	disk_write@count+1,f,c
 12995  004684  5017               	movf	disk_write@count,w,c
 12996  004686  1018               	iorwf	disk_write@count+1,w,c
 12997  004688  A4D8               	btfss	status,2,c
 12998  00468A  D7EC               	goto	u4830
 12999  00468C                     u4850:
 13000                           
 13001                           ;diskio.c: 430:    if (!xmit_datablock(0, 0xFD))
 13002  00468C  0E00               	movlw	0
 13003  00468E  6E04               	movwf	xmit_datablock@buff,c
 13004  004690  0E00               	movlw	0
 13005  004692  6E05               	movwf	xmit_datablock@buff+1,c
 13006  004694  0EFD               	movlw	253
 13007  004696  6E06               	movwf	xmit_datablock@token,c
 13008  004698  ECE0  F028         	call	_xmit_datablock	;wreg free
 13009  00469C  0900               	iorlw	0
 13010  00469E  A4D8               	btfss	status,2,c
 13011  0046A0  D004               	goto	l4250
 13012                           
 13013                           ;diskio.c: 431:     count = 1;
 13014  0046A2  0E00               	movlw	0
 13015  0046A4  6E18               	movwf	disk_write@count+1,c
 13016  0046A6  0E01               	movlw	1
 13017  0046A8                     L17:
 13018  0046A8  6E17               	movwf	disk_write@count,c
 13019  0046AA                     l4250:
 13020                           
 13021                           ;diskio.c: 434:  deselect();
 13022  0046AA  EC29  F02B         	call	_deselect	;wreg free
 13023                           
 13024                           ;diskio.c: 436:  return count ? RES_ERROR : RES_OK;
 13025  0046AE  5017               	movf	disk_write@count,w,c
 13026  0046B0  1018               	iorwf	disk_write@count+1,w,c
 13027  0046B2  B4D8               	btfsc	status,2,c
 13028  0046B4  D002               	goto	u4870
 13029  0046B6  0E01               	movlw	1
 13030  0046B8  0012               	return	
 13031  0046BA                     u4870:
 13032  0046BA  0E00               	movlw	0
 13033  0046BC  0012               	return		;funcret
 13034  0046BE                     __end_of_disk_write:
 13035                           	opt callstack 0
 13036                           
 13037 ;; *************** function _xmit_datablock *****************
 13038 ;; Defined at:
 13039 ;;		line 156 in file "diskio.c"
 13040 ;; Parameters:    Size  Location     Type
 13041 ;;  buff            2    3[COMRAM] PTR const unsigned char 
 13042 ;;		 -> FatFs.win(512), NULL(0), STR_4(20), FatFs(558), 
 13043 ;;  token           1    5[COMRAM] unsigned char 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;  i               2    6[COMRAM] unsigned short 
 13046 ;;  resp            1    8[COMRAM] unsigned char 
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  1    wreg      unsigned char 
 13049 ;; Registers used:
 13050 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13056 ;;      Params:         3       0       0       0       0       0       0       0       0
 13057 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13059 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13060 ;;Total ram usage:        6 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; Hardware stack levels required when called:    2
 13063 ;; This function calls:
 13064 ;;		_SPI1_Exchange8bit
 13065 ;;		_wait_ready
 13066 ;; This function is called by:
 13067 ;;		_disk_write
 13068 ;; This function uses a non-reentrant model
 13069 ;;
 13070                           
 13071                           	psect	text41
 13072  0051C0                     __ptext41:
 13073                           	opt callstack 0
 13074  0051C0                     _xmit_datablock:
 13075                           	opt callstack 24
 13076                           
 13077                           ;diskio.c: 157:  const BYTE *buff,;diskio.c: 158:  BYTE token;diskio.c: 160: {;diskio.c:
      +                           161:  BYTE resp;;diskio.c: 162:  WORD i;;diskio.c: 165:  if (!wait_ready()) return 0;
 13078                           
 13079                           ;incstack = 0
 13080  0051C0  EC1F  F02A         	call	_wait_ready	;wreg free
 13081  0051C4  0900               	iorlw	0
 13082  0051C6  A4D8               	btfss	status,2,c
 13083  0051C8  D002               	goto	l4142
 13084  0051CA                     u4620:
 13085  0051CA  0E00               	movlw	0
 13086  0051CC  0012               	return	
 13087  0051CE                     l4142:
 13088                           
 13089                           ;diskio.c: 167:  SPI1_Exchange8bit(token);
 13090  0051CE  5006               	movf	xmit_datablock@token,w,c
 13091  0051D0  EC0C  F02B         	call	_SPI1_Exchange8bit
 13092                           
 13093                           ;diskio.c: 168:  if (token != 0xFD) {
 13094  0051D4  0EFD               	movlw	253
 13095  0051D6  1806               	xorwf	xmit_datablock@token,w,c
 13096  0051D8  B4D8               	btfsc	status,2,c
 13097  0051DA  D02E               	goto	l4162
 13098                           
 13099                           ;diskio.c: 169:   i = 512;
 13100  0051DC  0E02               	movlw	2
 13101  0051DE  6E08               	movwf	xmit_datablock@i+1,c
 13102  0051E0  0E00               	movlw	0
 13103  0051E2  6E07               	movwf	xmit_datablock@i,c
 13104  0051E4                     l4148:
 13105                           
 13106                           ;diskio.c: 171:    SPI1_Exchange8bit(*buff++);
 13107  0051E4  C004  FFF6         	movff	xmit_datablock@buff,tblptrl
 13108  0051E8  C005  FFF7         	movff	xmit_datablock@buff+1,tblptrh
 13109  0051EC  6AF8               	clrf	tblptru,c
 13110  0051EE  0E07               	movlw	(high __ramtop+-1)
 13111  0051F0  64F7               	cpfsgt	tblptrh,c
 13112  0051F2  D003               	bra	u4647
 13113  0051F4  0008               	tblrd		*
 13114  0051F6  50F5               	movf	tablat,w,c
 13115  0051F8  D005               	bra	u4640
 13116  0051FA                     u4647:
 13117  0051FA  CFF6 FFE9          	movff	tblptrl,fsr0l
 13118  0051FE  CFF7 FFEA          	movff	tblptrh,fsr0h
 13119  005202  50EF               	movf	indf0,w,c
 13120  005204                     u4640:
 13121  005204  EC0C  F02B         	call	_SPI1_Exchange8bit
 13122  005208  4A04               	infsnz	xmit_datablock@buff,f,c
 13123  00520A  2A05               	incf	xmit_datablock@buff+1,f,c
 13124  00520C  0607               	decf	xmit_datablock@i,f,c
 13125  00520E  A0D8               	btfss	status,0,c
 13126  005210  0608               	decf	xmit_datablock@i+1,f,c
 13127  005212  5007               	movf	xmit_datablock@i,w,c
 13128  005214  1008               	iorwf	xmit_datablock@i+1,w,c
 13129  005216  A4D8               	btfss	status,2,c
 13130  005218  D7E5               	goto	l4148
 13131                           
 13132                           ;diskio.c: 173:   SPI1_Exchange8bit(0xFF);
 13133  00521A  0EFF               	movlw	255
 13134  00521C  EC0C  F02B         	call	_SPI1_Exchange8bit
 13135                           
 13136                           ;diskio.c: 174:   SPI1_Exchange8bit(0xFF);
 13137  005220  0EFF               	movlw	255
 13138  005222  EC0C  F02B         	call	_SPI1_Exchange8bit
 13139                           
 13140                           ;diskio.c: 175:   resp = SPI1_Exchange8bit(0xFF);
 13141  005226  0EFF               	movlw	255
 13142  005228  EC0C  F02B         	call	_SPI1_Exchange8bit
 13143  00522C  6E09               	movwf	xmit_datablock@resp,c
 13144                           
 13145                           ;diskio.c: 176:   if ((resp & 0x1F) != 0x05)
 13146  00522E  5009               	movf	xmit_datablock@resp,w,c
 13147  005230  0B1F               	andlw	31
 13148  005232  0A05               	xorlw	5
 13149  005234  A4D8               	btfss	status,2,c
 13150  005236  D7C9               	goto	u4620
 13151  005238                     l4162:
 13152                           
 13153                           ;diskio.c: 180:  return 1;
 13154  005238  0E01               	movlw	1
 13155  00523A  0012               	return		;funcret
 13156  00523C                     __end_of_xmit_datablock:
 13157                           	opt callstack 0
 13158                           
 13159 ;; *************** function _disk_read *****************
 13160 ;; Defined at:
 13161 ;;		line 370 in file "diskio.c"
 13162 ;; Parameters:    Size  Location     Type
 13163 ;;  pdrv            1    wreg     unsigned char 
 13164 ;;  buff            2   16[COMRAM] PTR unsigned char 
 13165 ;;		 -> NULL(0), FatFs(558), 
 13166 ;;  sector          4   18[COMRAM] unsigned long 
 13167 ;;  count           2   22[COMRAM] unsigned short 
 13168 ;; Auto vars:     Size  Location     Type
 13169 ;;  pdrv            1   24[COMRAM] unsigned char 
 13170 ;;  cmd             1   27[COMRAM] unsigned char 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  1    wreg      enum E43
 13173 ;; Registers used:
 13174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 0/0
 13177 ;;		On exit  : 0/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13180 ;;      Params:         8       0       0       0       0       0       0       0       0
 13181 ;;      Locals:         4       0       0       0       0       0       0       0       0
 13182 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13183 ;;      Totals:        12       0       0       0       0       0       0       0       0
 13184 ;;Total ram usage:       12 bytes
 13185 ;; Hardware stack levels used:    1
 13186 ;; Hardware stack levels required when called:    5
 13187 ;; This function calls:
 13188 ;;		_deselect
 13189 ;;		_rcvr_datablock
 13190 ;;		_send_cmd
 13191 ;; This function is called by:
 13192 ;;		_move_window
 13193 ;;		_f_read
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           	psect	text42
 13198  004C14                     __ptext42:
 13199                           	opt callstack 0
 13200  004C14                     _disk_read:
 13201                           	opt callstack 22
 13202                           
 13203                           ;incstack = 0
 13204                           ;disk_read@pdrv stored from wreg
 13205  004C14  6E19               	movwf	disk_read@pdrv,c
 13206                           
 13207                           ;diskio.c: 371:  BYTE pdrv,;diskio.c: 372:  BYTE *buff,;diskio.c: 373:  DWORD sector,;di
      +                          skio.c: 374:  UINT count;diskio.c: 376: {;diskio.c: 377:  BYTE cmd;;diskio.c: 380:  if (
      +                          pdrv || !count) return RES_PARERR;
 13208  004C16  5019               	movf	disk_read@pdrv,w,c
 13209  004C18  A4D8               	btfss	status,2,c
 13210  004C1A  D004               	goto	u4900
 13211  004C1C  5017               	movf	disk_read@count,w,c
 13212  004C1E  1018               	iorwf	disk_read@count+1,w,c
 13213  004C20  A4D8               	btfss	status,2,c
 13214  004C22  D002               	goto	l174
 13215  004C24                     u4900:
 13216  004C24  0E04               	movlw	4
 13217  004C26  0012               	return	
 13218  004C28                     l174:
 13219                           
 13220                           ;diskio.c: 381:  if (Stat & 0x01) return RES_NOTRDY;
 13221  004C28  0100               	movlb	0	; () banked
 13222  004C2A  A1F9               	btfss	_Stat& (0+255),0,b
 13223  004C2C  D002               	goto	l178
 13224                           
 13225                           ; BSR set to: 0
 13226  004C2E  0E03               	movlw	3
 13227  004C30  0012               	return	
 13228  004C32                     l178:
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;diskio.c: 383:  if (!(CardType & 0x08)) sector *= 512;
 13232  004C32  B7D8               	btfsc	_CardType& (0+255),3,b
 13233  004C34  D008               	goto	l179
 13234                           
 13235                           ; BSR set to: 0
 13236  004C36  0E09               	movlw	9
 13237  004C38                     u4935:
 13238  004C38  90D8               	bcf	status,0,c
 13239  004C3A  3613               	rlcf	disk_read@sector,f,c
 13240  004C3C  3614               	rlcf	disk_read@sector+1,f,c
 13241  004C3E  3615               	rlcf	disk_read@sector+2,f,c
 13242  004C40  3616               	rlcf	disk_read@sector+3,f,c
 13243  004C42  2EE8               	decfsz	wreg,f,c
 13244  004C44  D7F9               	goto	u4935
 13245  004C46                     l179:
 13246                           
 13247                           ; BSR set to: 0
 13248                           ;diskio.c: 385:  cmd = count > 1 ? (18) : (17);
 13249  004C46  5018               	movf	disk_read@count+1,w,c
 13250  004C48  E108               	bnz	l4272
 13251  004C4A  0E02               	movlw	2
 13252  004C4C  5C17               	subwf	disk_read@count,w,c
 13253  004C4E  B0D8               	btfsc	status,0,c
 13254  004C50  D004               	goto	l4272
 13255                           
 13256                           ; BSR set to: 0
 13257  004C52  0E00               	movlw	0
 13258  004C54  6E1B               	movwf	_disk_read$337+1,c
 13259  004C56  0E11               	movlw	17
 13260  004C58  D003               	goto	L18
 13261  004C5A                     l4272:
 13262                           
 13263                           ; BSR set to: 0
 13264  004C5A  0E00               	movlw	0
 13265  004C5C  6E1B               	movwf	_disk_read$337+1,c
 13266  004C5E  0E12               	movlw	18
 13267  004C60                     L18:
 13268  004C60  6E1A               	movwf	_disk_read$337,c
 13269                           
 13270                           ; BSR set to: 0
 13271  004C62  C01A  F01C         	movff	_disk_read$337,disk_read@cmd
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;diskio.c: 386:  if (send_cmd(cmd, sector) == 0) {
 13275  004C66  C013  F00B         	movff	disk_read@sector,send_cmd@arg
 13276  004C6A  C014  F00C         	movff	disk_read@sector+1,send_cmd@arg+1
 13277  004C6E  C015  F00D         	movff	disk_read@sector+2,send_cmd@arg+2
 13278  004C72  C016  F00E         	movff	disk_read@sector+3,send_cmd@arg+3
 13279  004C76  501C               	movf	disk_read@cmd,w,c
 13280  004C78  ECFE  F029         	call	_send_cmd
 13281  004C7C  0900               	iorlw	0
 13282  004C7E  A4D8               	btfss	status,2,c
 13283  004C80  D025               	goto	l4288
 13284  004C82                     u4950:
 13285                           
 13286                           ;diskio.c: 388:    if (!rcvr_datablock(buff, 512)) break;
 13287  004C82  C011  F002         	movff	disk_read@buff,rcvr_datablock@buff
 13288  004C86  C012  F003         	movff	disk_read@buff+1,rcvr_datablock@buff+1
 13289  004C8A  0E02               	movlw	2
 13290  004C8C  6E05               	movwf	rcvr_datablock@btr+1,c
 13291  004C8E  0E00               	movlw	0
 13292  004C90  6E04               	movwf	rcvr_datablock@btr,c
 13293  004C92  EC1E  F029         	call	_rcvr_datablock	;wreg free
 13294  004C96  0900               	iorlw	0
 13295  004C98  B4D8               	btfsc	status,2,c
 13296  004C9A  D009               	goto	u4970
 13297                           
 13298                           ;diskio.c: 389:    buff += 512;
 13299  004C9C  0E02               	movlw	2
 13300  004C9E  2612               	addwf	disk_read@buff+1,f,c
 13301                           
 13302                           ;diskio.c: 390:   } while (--count);
 13303  004CA0  0617               	decf	disk_read@count,f,c
 13304  004CA2  A0D8               	btfss	status,0,c
 13305  004CA4  0618               	decf	disk_read@count+1,f,c
 13306  004CA6  5017               	movf	disk_read@count,w,c
 13307  004CA8  1018               	iorwf	disk_read@count+1,w,c
 13308  004CAA  A4D8               	btfss	status,2,c
 13309  004CAC  D7EA               	goto	u4950
 13310  004CAE                     u4970:
 13311                           
 13312                           ;diskio.c: 391:   if (cmd == (18)) send_cmd((12), 0);
 13313  004CAE  0E12               	movlw	18
 13314  004CB0  181C               	xorwf	disk_read@cmd,w,c
 13315  004CB2  A4D8               	btfss	status,2,c
 13316  004CB4  D00B               	goto	l4288
 13317  004CB6  0E00               	movlw	0
 13318  004CB8  6E0B               	movwf	send_cmd@arg,c
 13319  004CBA  0E00               	movlw	0
 13320  004CBC  6E0C               	movwf	send_cmd@arg+1,c
 13321  004CBE  0E00               	movlw	0
 13322  004CC0  6E0D               	movwf	send_cmd@arg+2,c
 13323  004CC2  0E00               	movlw	0
 13324  004CC4  6E0E               	movwf	send_cmd@arg+3,c
 13325  004CC6  0E0C               	movlw	12
 13326  004CC8  ECFE  F029         	call	_send_cmd
 13327  004CCC                     l4288:
 13328                           
 13329                           ;diskio.c: 393:  deselect();
 13330  004CCC  EC29  F02B         	call	_deselect	;wreg free
 13331                           
 13332                           ;diskio.c: 395:  return count ? RES_ERROR : RES_OK;
 13333  004CD0  5017               	movf	disk_read@count,w,c
 13334  004CD2  1018               	iorwf	disk_read@count+1,w,c
 13335  004CD4  B4D8               	btfsc	status,2,c
 13336  004CD6  D002               	goto	u4990
 13337  004CD8  0E01               	movlw	1
 13338  004CDA  0012               	return	
 13339  004CDC                     u4990:
 13340  004CDC  0E00               	movlw	0
 13341  004CDE  0012               	return		;funcret
 13342  004CE0                     __end_of_disk_read:
 13343                           	opt callstack 0
 13344                           
 13345 ;; *************** function _send_cmd *****************
 13346 ;; Defined at:
 13347 ;;		line 231 in file "diskio.c"
 13348 ;; Parameters:    Size  Location     Type
 13349 ;;  cmd             1    wreg     unsigned char 
 13350 ;;  arg             4   10[COMRAM] unsigned long 
 13351 ;; Auto vars:     Size  Location     Type
 13352 ;;  cmd             1   14[COMRAM] unsigned char 
 13353 ;;  res             1   15[COMRAM] unsigned char 
 13354 ;; Return value:  Size  Location     Type
 13355 ;;                  1    wreg      unsigned char 
 13356 ;; Registers used:
 13357 ;;		wreg, status,2, status,0, cstack
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13363 ;;      Params:         4       0       0       0       0       0       0       0       0
 13364 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13365 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13366 ;;      Totals:         6       0       0       0       0       0       0       0       0
 13367 ;;Total ram usage:        6 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; Hardware stack levels required when called:    4
 13370 ;; This function calls:
 13371 ;;		___send_cmd
 13372 ;; This function is called by:
 13373 ;;		_disk_initialize
 13374 ;;		_disk_read
 13375 ;;		_disk_write
 13376 ;;		_disk_ioctl
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           	psect	text43
 13381  0053FC                     __ptext43:
 13382                           	opt callstack 0
 13383  0053FC                     _send_cmd:
 13384                           	opt callstack 22
 13385                           
 13386                           ;incstack = 0
 13387                           ;send_cmd@cmd stored from wreg
 13388  0053FC  6E0F               	movwf	send_cmd@cmd,c
 13389                           
 13390                           ;diskio.c: 232:  BYTE cmd,;diskio.c: 233:  DWORD arg;diskio.c: 235: {;diskio.c: 239:  BY
      +                          TE res;;diskio.c: 242:  if (cmd & 0x80) {
 13391  0053FE  AE0F               	btfss	send_cmd@cmd,7,c
 13392  005400  D012               	goto	l4178
 13393                           
 13394                           ;diskio.c: 243:   cmd &= 0x7F;
 13395  005402  9E0F               	bcf	send_cmd@cmd,7,c
 13396                           
 13397                           ;diskio.c: 245:   res = __send_cmd((55), 0);
 13398  005404  0E00               	movlw	0
 13399  005406  6E04               	movwf	___send_cmd@arg,c
 13400  005408  0E00               	movlw	0
 13401  00540A  6E05               	movwf	___send_cmd@arg+1,c
 13402  00540C  0E00               	movlw	0
 13403  00540E  6E06               	movwf	___send_cmd@arg+2,c
 13404  005410  0E00               	movlw	0
 13405  005412  6E07               	movwf	___send_cmd@arg+3,c
 13406  005414  0E37               	movlw	55
 13407  005416  EC60  F028         	call	___send_cmd
 13408  00541A  6E10               	movwf	send_cmd@res,c
 13409                           
 13410                           ;diskio.c: 249:   if (res > 1) return res;
 13411  00541C  0E01               	movlw	1
 13412  00541E  6410               	cpfsgt	send_cmd@res,c
 13413  005420  D002               	goto	l4178
 13414  005422  5010               	movf	send_cmd@res,w,c
 13415  005424  0012               	return	
 13416  005426                     l4178:
 13417                           
 13418                           ;diskio.c: 253:  return __send_cmd(cmd, arg);
 13419  005426  C00B  F004         	movff	send_cmd@arg,___send_cmd@arg
 13420  00542A  C00C  F005         	movff	send_cmd@arg+1,___send_cmd@arg+1
 13421  00542E  C00D  F006         	movff	send_cmd@arg+2,___send_cmd@arg+2
 13422  005432  C00E  F007         	movff	send_cmd@arg+3,___send_cmd@arg+3
 13423  005436  500F               	movf	send_cmd@cmd,w,c
 13424  005438  EC60  F028         	call	___send_cmd
 13425  00543C  0012               	return		;funcret
 13426  00543E                     __end_of_send_cmd:
 13427                           	opt callstack 0
 13428                           
 13429 ;; *************** function ___send_cmd *****************
 13430 ;; Defined at:
 13431 ;;		line 195 in file "diskio.c"
 13432 ;; Parameters:    Size  Location     Type
 13433 ;;  cmd             1    wreg     unsigned char 
 13434 ;;  arg             4    3[COMRAM] unsigned long 
 13435 ;; Auto vars:     Size  Location     Type
 13436 ;;  cmd             1    9[COMRAM] unsigned char 
 13437 ;;  n               1    8[COMRAM] unsigned char 
 13438 ;;  res             1    7[COMRAM] unsigned char 
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      unsigned char 
 13441 ;; Registers used:
 13442 ;;		wreg, status,2, status,0, cstack
 13443 ;; Tracked objects:
 13444 ;;		On entry : 0/0
 13445 ;;		On exit  : 0/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13448 ;;      Params:         4       0       0       0       0       0       0       0       0
 13449 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13450 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13451 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13452 ;;Total ram usage:        7 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    3
 13455 ;; This function calls:
 13456 ;;		_SPI1_Exchange8bit
 13457 ;;		_deselect
 13458 ;;		_select
 13459 ;; This function is called by:
 13460 ;;		_send_cmd
 13461 ;; This function uses a non-reentrant model
 13462 ;;
 13463                           
 13464                           	psect	text44
 13465  0050C0                     __ptext44:
 13466                           	opt callstack 0
 13467  0050C0                     ___send_cmd:
 13468                           	opt callstack 22
 13469                           
 13470                           ;incstack = 0
 13471                           ;___send_cmd@cmd stored from wreg
 13472  0050C0  6E0A               	movwf	___send_cmd@cmd,c
 13473                           
 13474                           ;diskio.c: 196:  BYTE cmd,;diskio.c: 197:  DWORD arg;diskio.c: 199: {;diskio.c: 200:  BY
      +                          TE n, res;;diskio.c: 203:  if (cmd != (12)) {
 13475  0050C2  0E0C               	movlw	12
 13476  0050C4  180A               	xorwf	___send_cmd@cmd,w,c
 13477  0050C6  B4D8               	btfsc	status,2,c
 13478  0050C8  D009               	goto	l4098
 13479                           
 13480                           ;diskio.c: 204:   deselect();
 13481  0050CA  EC29  F02B         	call	_deselect	;wreg free
 13482                           
 13483                           ;diskio.c: 205:   if (!select()) return 0xFF;
 13484  0050CE  ECEB  F02A         	call	_select	;wreg free
 13485  0050D2  0900               	iorlw	0
 13486  0050D4  A4D8               	btfss	status,2,c
 13487  0050D6  D002               	goto	l4098
 13488  0050D8  0EFF               	movlw	255
 13489  0050DA  0012               	return	
 13490  0050DC                     l4098:
 13491                           
 13492                           ;diskio.c: 209:  SPI1_Exchange8bit(0x40 | cmd);
 13493  0050DC  500A               	movf	___send_cmd@cmd,w,c
 13494  0050DE  0940               	iorlw	64
 13495  0050E0  EC0C  F02B         	call	_SPI1_Exchange8bit
 13496                           
 13497                           ;diskio.c: 210:  SPI1_Exchange8bit((BYTE)(arg >> 24));
 13498  0050E4  5007               	movf	___send_cmd@arg+3,w,c
 13499  0050E6  EC0C  F02B         	call	_SPI1_Exchange8bit
 13500                           
 13501                           ;diskio.c: 211:  SPI1_Exchange8bit((BYTE)(arg >> 16));
 13502  0050EA  5006               	movf	___send_cmd@arg+2,w,c
 13503  0050EC  EC0C  F02B         	call	_SPI1_Exchange8bit
 13504                           
 13505                           ;diskio.c: 212:  SPI1_Exchange8bit((BYTE)(arg >> 8));
 13506  0050F0  5005               	movf	___send_cmd@arg+1,w,c
 13507  0050F2  EC0C  F02B         	call	_SPI1_Exchange8bit
 13508                           
 13509                           ;diskio.c: 213:  SPI1_Exchange8bit((BYTE)arg);
 13510  0050F6  5004               	movf	___send_cmd@arg,w,c
 13511  0050F8  EC0C  F02B         	call	_SPI1_Exchange8bit
 13512                           
 13513                           ;diskio.c: 214:  n = 0x01;
 13514  0050FC  0E01               	movlw	1
 13515  0050FE  6E09               	movwf	___send_cmd@n,c
 13516                           
 13517                           ;diskio.c: 215:  if (cmd == (0)) n = 0x95;
 13518  005100  500A               	movf	___send_cmd@cmd,w,c
 13519  005102  A4D8               	btfss	status,2,c
 13520  005104  D002               	goto	l4114
 13521  005106  0E95               	movlw	149
 13522  005108  6E09               	movwf	___send_cmd@n,c
 13523  00510A                     l4114:
 13524                           
 13525                           ;diskio.c: 216:  if (cmd == (8)) n = 0x87;
 13526  00510A  0E08               	movlw	8
 13527  00510C  180A               	xorwf	___send_cmd@cmd,w,c
 13528  00510E  A4D8               	btfss	status,2,c
 13529  005110  D002               	goto	l4118
 13530  005112  0E87               	movlw	135
 13531  005114  6E09               	movwf	___send_cmd@n,c
 13532  005116                     l4118:
 13533                           
 13534                           ;diskio.c: 217:  SPI1_Exchange8bit(n);
 13535  005116  5009               	movf	___send_cmd@n,w,c
 13536  005118  EC0C  F02B         	call	_SPI1_Exchange8bit
 13537                           
 13538                           ;diskio.c: 220:  if (cmd == (12)) SPI1_Exchange8bit(0xFF);
 13539  00511C  0E0C               	movlw	12
 13540  00511E  180A               	xorwf	___send_cmd@cmd,w,c
 13541  005120  A4D8               	btfss	status,2,c
 13542  005122  D003               	goto	l4124
 13543  005124  0EFF               	movlw	255
 13544  005126  EC0C  F02B         	call	_SPI1_Exchange8bit
 13545  00512A                     l4124:
 13546                           
 13547                           ;diskio.c: 221:  n = 10;
 13548  00512A  0E0A               	movlw	10
 13549  00512C  6E09               	movwf	___send_cmd@n,c
 13550  00512E                     l4126:
 13551                           
 13552                           ;diskio.c: 223:   res = SPI1_Exchange8bit(0xFF);
 13553  00512E  0EFF               	movlw	255
 13554  005130  EC0C  F02B         	call	_SPI1_Exchange8bit
 13555  005134  6E08               	movwf	___send_cmd@res,c
 13556  005136  AE08               	btfss	___send_cmd@res,7,c
 13557  005138  D002               	goto	l4132
 13558  00513A  2E09               	decfsz	___send_cmd@n,f,c
 13559  00513C  D7F8               	goto	l4126
 13560  00513E                     l4132:
 13561                           
 13562                           ;diskio.c: 226:  return res;
 13563  00513E  5008               	movf	___send_cmd@res,w,c
 13564  005140  0012               	return		;funcret
 13565  005142                     __end_of___send_cmd:
 13566                           	opt callstack 0
 13567                           
 13568 ;; *************** function _select *****************
 13569 ;; Defined at:
 13570 ;;		line 106 in file "diskio.c"
 13571 ;; Parameters:    Size  Location     Type
 13572 ;;		None
 13573 ;; Auto vars:     Size  Location     Type
 13574 ;;		None
 13575 ;; Return value:  Size  Location     Type
 13576 ;;                  1    wreg      unsigned char 
 13577 ;; Registers used:
 13578 ;;		wreg, status,2, status,0, cstack
 13579 ;; Tracked objects:
 13580 ;;		On entry : 0/0
 13581 ;;		On exit  : 0/0
 13582 ;;		Unchanged: 0/0
 13583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13584 ;;      Params:         0       0       0       0       0       0       0       0       0
 13585 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13586 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13587 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13588 ;;Total ram usage:        0 bytes
 13589 ;; Hardware stack levels used:    1
 13590 ;; Hardware stack levels required when called:    2
 13591 ;; This function calls:
 13592 ;;		_SPI1_Exchange8bit
 13593 ;;		_deselect
 13594 ;;		_wait_ready
 13595 ;; This function is called by:
 13596 ;;		___send_cmd
 13597 ;;		_disk_ioctl
 13598 ;; This function uses a non-reentrant model
 13599 ;;
 13600                           
 13601                           	psect	text45
 13602  0055D6                     __ptext45:
 13603                           	opt callstack 0
 13604  0055D6                     _select:
 13605                           	opt callstack 22
 13606                           
 13607                           ;incstack = 0
 13608                           ;diskio.c: 108:  do { LATBbits.LATB2 = 0; } while(0);
 13609  0055D6  948A               	bcf	3978,2,c	;volatile
 13610                           
 13611                           ;diskio.c: 109:  SPI1_Exchange8bit(0xFF);
 13612  0055D8  0EFF               	movlw	255
 13613  0055DA  EC0C  F02B         	call	_SPI1_Exchange8bit
 13614                           
 13615                           ;diskio.c: 110:  if (wait_ready()) return 1;
 13616  0055DE  EC1F  F02A         	call	_wait_ready	;wreg free
 13617  0055E2  0900               	iorlw	0
 13618  0055E4  B4D8               	btfsc	status,2,c
 13619  0055E6  D002               	goto	l4082
 13620  0055E8  0E01               	movlw	1
 13621  0055EA  0012               	return	
 13622  0055EC                     l4082:
 13623                           
 13624                           ;diskio.c: 112:  deselect();
 13625  0055EC  EC29  F02B         	call	_deselect	;wreg free
 13626                           
 13627                           ;diskio.c: 113:  return 0;
 13628  0055F0  0E00               	movlw	0
 13629  0055F2  0012               	return		;funcret
 13630  0055F4                     __end_of_select:
 13631                           	opt callstack 0
 13632                           
 13633 ;; *************** function _wait_ready *****************
 13634 ;; Defined at:
 13635 ;;		line 74 in file "diskio.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;		None
 13638 ;; Auto vars:     Size  Location     Type
 13639 ;;  tmr             2    1[COMRAM] unsigned short 
 13640 ;; Return value:  Size  Location     Type
 13641 ;;                  1    wreg      unsigned char 
 13642 ;; Registers used:
 13643 ;;		wreg, status,2, status,0, cstack
 13644 ;; Tracked objects:
 13645 ;;		On entry : 0/0
 13646 ;;		On exit  : 0/0
 13647 ;;		Unchanged: 0/0
 13648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13649 ;;      Params:         0       0       0       0       0       0       0       0       0
 13650 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13651 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13652 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13653 ;;Total ram usage:        2 bytes
 13654 ;; Hardware stack levels used:    1
 13655 ;; Hardware stack levels required when called:    1
 13656 ;; This function calls:
 13657 ;;		_SPI1_Exchange8bit
 13658 ;; This function is called by:
 13659 ;;		_select
 13660 ;;		_xmit_datablock
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           	psect	text46
 13665  00543E                     __ptext46:
 13666                           	opt callstack 0
 13667  00543E                     _wait_ready:
 13668                           	opt callstack 24
 13669                           
 13670                           ;diskio.c: 76:  UINT tmr;;diskio.c: 78:  for (tmr = 5000; tmr; tmr--) {
 13671                           
 13672                           ;incstack = 0
 13673  00543E  0E13               	movlw	19
 13674  005440  6E03               	movwf	wait_ready@tmr+1,c
 13675  005442  0E88               	movlw	136
 13676  005444  6E02               	movwf	wait_ready@tmr,c
 13677  005446  D00D               	goto	l82
 13678  005448                     l4060:
 13679                           
 13680                           ;diskio.c: 79:   if (SPI1_Exchange8bit(0xFF) == 0xFF) break;
 13681  005448  0EFF               	movlw	255
 13682  00544A  EC0C  F02B         	call	_SPI1_Exchange8bit
 13683  00544E  0AFF               	xorlw	255
 13684  005450  B4D8               	btfsc	status,2,c
 13685  005452  D00B               	goto	u4520
 13686                           
 13687                           ;diskio.c: 80:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13688  005454  0E42               	movlw	66
 13689  005456                     u9017:
 13690  005456  2EE8               	decfsz	wreg,f,c
 13691  005458  D7FE               	bra	u9017
 13692  00545A  D000               	nop2	
 13693                           
 13694                           ;diskio.c: 81:  }
 13695  00545C  0602               	decf	wait_ready@tmr,f,c
 13696  00545E  A0D8               	btfss	status,0,c
 13697  005460  0603               	decf	wait_ready@tmr+1,f,c
 13698  005462                     l82:
 13699  005462  5002               	movf	wait_ready@tmr,w,c
 13700  005464  1003               	iorwf	wait_ready@tmr+1,w,c
 13701  005466  A4D8               	btfss	status,2,c
 13702  005468  D7EF               	goto	l4060
 13703  00546A                     u4520:
 13704                           
 13705                           ;diskio.c: 83:  return tmr ? 1 : 0;
 13706  00546A  5002               	movf	wait_ready@tmr,w,c
 13707  00546C  1003               	iorwf	wait_ready@tmr+1,w,c
 13708  00546E  B4D8               	btfsc	status,2,c
 13709  005470  D002               	goto	u4530
 13710  005472  0E01               	movlw	1
 13711  005474  0012               	return	
 13712  005476                     u4530:
 13713  005476  0E00               	movlw	0
 13714  005478  0012               	return		;funcret
 13715  00547A                     __end_of_wait_ready:
 13716                           	opt callstack 0
 13717                           
 13718 ;; *************** function _deselect *****************
 13719 ;; Defined at:
 13720 ;;		line 93 in file "diskio.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;		None
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;		None
 13725 ;; Return value:  Size  Location     Type
 13726 ;;                  1    wreg      void 
 13727 ;; Registers used:
 13728 ;;		wreg, status,2, cstack
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0
 13735 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13737 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13738 ;;Total ram usage:        0 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    1
 13741 ;; This function calls:
 13742 ;;		_SPI1_Exchange8bit
 13743 ;; This function is called by:
 13744 ;;		_select
 13745 ;;		___send_cmd
 13746 ;;		_disk_initialize
 13747 ;;		_disk_read
 13748 ;;		_disk_write
 13749 ;;		_disk_ioctl
 13750 ;; This function uses a non-reentrant model
 13751 ;;
 13752                           
 13753                           	psect	text47
 13754  005652                     __ptext47:
 13755                           	opt callstack 0
 13756  005652                     _deselect:
 13757                           	opt callstack 22
 13758                           
 13759                           ;incstack = 0
 13760                           ;diskio.c: 95:  do { LATBbits.LATB2 = 1; } while(0);
 13761  005652  848A               	bsf	3978,2,c	;volatile
 13762                           
 13763                           ;diskio.c: 96:  SPI1_Exchange8bit(0xFF);
 13764  005654  0EFF               	movlw	255
 13765  005656  EC0C  F02B         	call	_SPI1_Exchange8bit
 13766  00565A  0012               	return		;funcret
 13767  00565C                     __end_of_deselect:
 13768                           	opt callstack 0
 13769                           
 13770 ;; *************** function _rcvr_datablock *****************
 13771 ;; Defined at:
 13772 ;;		line 123 in file "diskio.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;  buff            2    1[COMRAM] PTR unsigned char 
 13775 ;;		 -> disk_ioctl@csd(16), NULL(0), FatFs(558), 
 13776 ;;  btr             2    3[COMRAM] unsigned short 
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;  tmr             2    5[COMRAM] unsigned short 
 13779 ;;  token           1    7[COMRAM] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  1    wreg      unsigned char 
 13782 ;; Registers used:
 13783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13789 ;;      Params:         4       0       0       0       0       0       0       0       0
 13790 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13792 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13793 ;;Total ram usage:        7 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    1
 13796 ;; This function calls:
 13797 ;;		_SPI1_Exchange8bit
 13798 ;; This function is called by:
 13799 ;;		_disk_read
 13800 ;;		_disk_ioctl
 13801 ;; This function uses a non-reentrant model
 13802 ;;
 13803                           
 13804                           	psect	text48
 13805  00523C                     __ptext48:
 13806                           	opt callstack 0
 13807  00523C                     _rcvr_datablock:
 13808                           	opt callstack 25
 13809                           
 13810                           ;diskio.c: 124:  BYTE *buff,;diskio.c: 125:  UINT btr;diskio.c: 127: {;diskio.c: 128:  B
      +                          YTE token;;diskio.c: 129:  UINT tmr;;diskio.c: 132:  for (tmr = 2000; tmr; tmr--) {
 13811                           
 13812                           ;incstack = 0
 13813  00523C  0E07               	movlw	7
 13814  00523E  6E07               	movwf	rcvr_datablock@tmr+1,c
 13815  005240  0ED0               	movlw	208
 13816  005242  6E06               	movwf	rcvr_datablock@tmr,c
 13817  005244  D00E               	goto	l100
 13818  005246                     l4184:
 13819                           
 13820                           ;diskio.c: 133:   token = SPI1_Exchange8bit(0xFF);
 13821  005246  0EFF               	movlw	255
 13822  005248  EC0C  F02B         	call	_SPI1_Exchange8bit
 13823  00524C  6E08               	movwf	rcvr_datablock@token,c
 13824                           
 13825                           ;diskio.c: 134:   if (token != 0xFF) break;
 13826  00524E  2808               	incf	rcvr_datablock@token,w,c
 13827  005250  A4D8               	btfss	status,2,c
 13828  005252  D00B               	goto	u4700
 13829                           
 13830                           ;diskio.c: 135:   _delay((unsigned long)((100)*(8000000/4000000.0)));
 13831  005254  0E42               	movlw	66
 13832  005256                     u9027:
 13833  005256  2EE8               	decfsz	wreg,f,c
 13834  005258  D7FE               	bra	u9027
 13835  00525A  D000               	nop2	
 13836                           
 13837                           ;diskio.c: 136:  }
 13838  00525C  0606               	decf	rcvr_datablock@tmr,f,c
 13839  00525E  A0D8               	btfss	status,0,c
 13840  005260  0607               	decf	rcvr_datablock@tmr+1,f,c
 13841  005262                     l100:
 13842  005262  5006               	movf	rcvr_datablock@tmr,w,c
 13843  005264  1007               	iorwf	rcvr_datablock@tmr+1,w,c
 13844  005266  A4D8               	btfss	status,2,c
 13845  005268  D7EE               	goto	l4184
 13846  00526A                     u4700:
 13847                           
 13848                           ;diskio.c: 137:  if (token != 0xFE) return 0;
 13849  00526A  0EFE               	movlw	254
 13850  00526C  1808               	xorwf	rcvr_datablock@token,w,c
 13851  00526E  B4D8               	btfsc	status,2,c
 13852  005270  D002               	goto	l4200
 13853  005272  0E00               	movlw	0
 13854  005274  0012               	return	
 13855  005276                     l4200:
 13856                           
 13857                           ;diskio.c: 140:   *buff++ = SPI1_Exchange8bit(0xFF);
 13858  005276  0EFF               	movlw	255
 13859  005278  EC0C  F02B         	call	_SPI1_Exchange8bit
 13860  00527C  C002  FFD9         	movff	rcvr_datablock@buff,fsr2l
 13861  005280  C003  FFDA         	movff	rcvr_datablock@buff+1,fsr2h
 13862  005284  6EDF               	movwf	indf2,c
 13863  005286  4A02               	infsnz	rcvr_datablock@buff,f,c
 13864  005288  2A03               	incf	rcvr_datablock@buff+1,f,c
 13865  00528A  0604               	decf	rcvr_datablock@btr,f,c
 13866  00528C  A0D8               	btfss	status,0,c
 13867  00528E  0605               	decf	rcvr_datablock@btr+1,f,c
 13868  005290  5004               	movf	rcvr_datablock@btr,w,c
 13869  005292  1005               	iorwf	rcvr_datablock@btr+1,w,c
 13870  005294  A4D8               	btfss	status,2,c
 13871  005296  D7EF               	goto	l4200
 13872                           
 13873                           ;diskio.c: 142:  SPI1_Exchange8bit(0xFF);
 13874  005298  0EFF               	movlw	255
 13875  00529A  EC0C  F02B         	call	_SPI1_Exchange8bit
 13876                           
 13877                           ;diskio.c: 143:  SPI1_Exchange8bit(0xFF);
 13878  00529E  0EFF               	movlw	255
 13879  0052A0  EC0C  F02B         	call	_SPI1_Exchange8bit
 13880                           
 13881                           ;diskio.c: 145:  return 1;
 13882  0052A4  0E01               	movlw	1
 13883  0052A6  0012               	return		;funcret
 13884  0052A8                     __end_of_rcvr_datablock:
 13885                           	opt callstack 0
 13886                           
 13887 ;; *************** function _SPI1_Exchange8bit *****************
 13888 ;; Defined at:
 13889 ;;		line 90 in file "mcc_generated_files/spi1.c"
 13890 ;; Parameters:    Size  Location     Type
 13891 ;;  data            1    wreg     unsigned char 
 13892 ;; Auto vars:     Size  Location     Type
 13893 ;;  data            1    0[COMRAM] unsigned char 
 13894 ;; Return value:  Size  Location     Type
 13895 ;;                  1    wreg      unsigned char 
 13896 ;; Registers used:
 13897 ;;		wreg, status,2
 13898 ;; Tracked objects:
 13899 ;;		On entry : 0/0
 13900 ;;		On exit  : 0/0
 13901 ;;		Unchanged: 0/0
 13902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13903 ;;      Params:         0       0       0       0       0       0       0       0       0
 13904 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13906 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13907 ;;Total ram usage:        1 bytes
 13908 ;; Hardware stack levels used:    1
 13909 ;; This function calls:
 13910 ;;		Nothing
 13911 ;; This function is called by:
 13912 ;;		_wait_ready
 13913 ;;		_deselect
 13914 ;;		_select
 13915 ;;		_rcvr_datablock
 13916 ;;		_xmit_datablock
 13917 ;;		___send_cmd
 13918 ;;		_disk_initialize
 13919 ;;		_disk_ioctl
 13920 ;;		_SPI1_Exchange8bitBuffer
 13921 ;; This function uses a non-reentrant model
 13922 ;;
 13923                           
 13924                           	psect	text49
 13925  005618                     __ptext49:
 13926                           	opt callstack 0
 13927  005618                     _SPI1_Exchange8bit:
 13928                           	opt callstack 24
 13929                           
 13930                           ;incstack = 0
 13931                           ;SPI1_Exchange8bit@data stored from wreg
 13932  005618  6E01               	movwf	SPI1_Exchange8bit@data,c
 13933                           
 13934                           ;mcc_generated_files/spi1.c: 90: uint8_t SPI1_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi1.c: 91: {;mcc_generated_files/spi1.c: 93:     SSP1CON1bits.WCOL = 0;
 13935  00561A  9EC6               	bcf	4038,7,c	;volatile
 13936                           
 13937                           ;mcc_generated_files/spi1.c: 95:     SSP1BUF = data;
 13938  00561C  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
 13939  005620                     l825:
 13940                           
 13941                           ;mcc_generated_files/spi1.c: 97:     while(SSP1STATbits.BF == 0x0)
 13942  005620  A0C7               	btfss	4039,0,c	;volatile
 13943  005622  D7FE               	goto	l825
 13944                           
 13945                           ;mcc_generated_files/spi1.c: 101:     return (SSP1BUF);
 13946  005624  50C9               	movf	4041,w,c	;volatile
 13947  005626  0012               	return		;funcret
 13948  005628                     __end_of_SPI1_Exchange8bit:
 13949                           	opt callstack 0
 13950                           
 13951 ;; *************** function ___delay_sec *****************
 13952 ;; Defined at:
 13953 ;;		line 10 in file "Main.c"
 13954 ;; Parameters:    Size  Location     Type
 13955 ;;  sec             1    wreg     unsigned char 
 13956 ;; Auto vars:     Size  Location     Type
 13957 ;;  sec             1    3[COMRAM] unsigned char 
 13958 ;;  i               1    4[COMRAM] unsigned char 
 13959 ;; Return value:  Size  Location     Type
 13960 ;;                  1    wreg      void 
 13961 ;; Registers used:
 13962 ;;		wreg, status,2, status,0, prodl, prodh
 13963 ;; Tracked objects:
 13964 ;;		On entry : 0/0
 13965 ;;		On exit  : 0/0
 13966 ;;		Unchanged: 0/0
 13967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13968 ;;      Params:         0       0       0       0       0       0       0       0       0
 13969 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13970 ;;      Temps:          3       0       0       0       0       0       0       0       0
 13971 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13972 ;;Total ram usage:        5 bytes
 13973 ;; Hardware stack levels used:    1
 13974 ;; This function calls:
 13975 ;;		Nothing
 13976 ;; This function is called by:
 13977 ;;		_guardar
 13978 ;;		_main
 13979 ;; This function uses a non-reentrant model
 13980 ;;
 13981                           
 13982                           	psect	text50
 13983  0054B4                     __ptext50:
 13984                           	opt callstack 0
 13985  0054B4                     ___delay_sec:
 13986                           	opt callstack 29
 13987                           
 13988                           ;incstack = 0
 13989                           ;___delay_sec@sec stored from wreg
 13990  0054B4  6E04               	movwf	___delay_sec@sec,c
 13991                           
 13992                           ;Main.c: 11:     for(char i=0;i<=(50*sec);i++) {
 13993  0054B6  0E00               	movlw	0
 13994  0054B8  6E05               	movwf	___delay_sec@i,c
 13995  0054BA  D008               	goto	l5904
 13996  0054BC                     l5900:
 13997                           
 13998                           ;Main.c: 12:         _delay((unsigned long)((20)*(8000000/4000.0)));
 13999  0054BC  0E34               	movlw	52
 14000  0054BE  6E01               	movwf	??___delay_sec& (0+255),c
 14001  0054C0  0EF2               	movlw	242
 14002  0054C2                     u9037:
 14003  0054C2  2EE8               	decfsz	wreg,f,c
 14004  0054C4  D7FE               	bra	u9037
 14005  0054C6  2E01               	decfsz	??___delay_sec& (0+255),f,c
 14006  0054C8  D7FC               	bra	u9037
 14007                           
 14008                           ;Main.c: 13:     }
 14009  0054CA  2A05               	incf	___delay_sec@i,f,c
 14010  0054CC                     l5904:
 14011  0054CC  5005               	movf	___delay_sec@i,w,c
 14012  0054CE  6E01               	movwf	??___delay_sec& (0+255),c
 14013  0054D0  6A02               	clrf	(??___delay_sec+1)& (0+255),c
 14014  0054D2  5004               	movf	___delay_sec@sec,w,c
 14015  0054D4  0D32               	mullw	50
 14016  0054D6  5001               	movf	??___delay_sec,w,c
 14017  0054D8  5CF3               	subwf	prodl,w,c
 14018  0054DA  50F4               	movf	prodh,w,c
 14019  0054DC  0A80               	xorlw	128
 14020  0054DE  6E03               	movwf	(??___delay_sec+2)& (0+255),c
 14021  0054E0  5002               	movf	??___delay_sec+1,w,c
 14022  0054E2  0A80               	xorlw	128
 14023  0054E4  5803               	subwfb	(??___delay_sec+2)& (0+255),w,c
 14024  0054E6  A0D8               	btfss	status,0,c
 14025  0054E8  0012               	return	
 14026  0054EA  D7E8               	goto	l5900
 14027  0054EC                     __end_of___delay_sec:
 14028                           	opt callstack 0
 14029                           
 14030 ;; *************** function _SYSTEM_Initialize *****************
 14031 ;; Defined at:
 14032 ;;		line 116 in file "mcc_generated_files/mcc.c"
 14033 ;; Parameters:    Size  Location     Type
 14034 ;;		None
 14035 ;; Auto vars:     Size  Location     Type
 14036 ;;		None
 14037 ;; Return value:  Size  Location     Type
 14038 ;;                  1    wreg      void 
 14039 ;; Registers used:
 14040 ;;		wreg, status,2, cstack
 14041 ;; Tracked objects:
 14042 ;;		On entry : 0/0
 14043 ;;		On exit  : 0/0
 14044 ;;		Unchanged: 0/0
 14045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14046 ;;      Params:         0       0       0       0       0       0       0       0       0
 14047 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14048 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14049 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14050 ;;Total ram usage:        0 bytes
 14051 ;; Hardware stack levels used:    1
 14052 ;; Hardware stack levels required when called:    1
 14053 ;; This function calls:
 14054 ;;		_OSCILLATOR_Initialize
 14055 ;;		_PIN_MANAGER_Initialize
 14056 ;;		_SPI1_Initialize
 14057 ;; This function is called by:
 14058 ;;		_guardar
 14059 ;; This function uses a non-reentrant model
 14060 ;;
 14061                           
 14062                           	psect	text51
 14063  005636                     __ptext51:
 14064                           	opt callstack 0
 14065  005636                     _SYSTEM_Initialize:
 14066                           	opt callstack 28
 14067                           
 14068                           ;mcc_generated_files/mcc.c: 119:     PIN_MANAGER_Initialize();
 14069                           
 14070                           ;incstack = 0
 14071  005636  EC76  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 14072                           
 14073                           ;mcc_generated_files/mcc.c: 120:     OSCILLATOR_Initialize();
 14074  00563A  EC03  F02B         	call	_OSCILLATOR_Initialize	;wreg free
 14075                           
 14076                           ;mcc_generated_files/mcc.c: 121:     SPI1_Initialize();
 14077  00563E  EC22  F02B         	call	_SPI1_Initialize	;wreg free
 14078  005642  0012               	return		;funcret
 14079  005644                     __end_of_SYSTEM_Initialize:
 14080                           	opt callstack 0
 14081                           
 14082 ;; *************** function _SPI1_Initialize *****************
 14083 ;; Defined at:
 14084 ;;		line 63 in file "mcc_generated_files/spi1.c"
 14085 ;; Parameters:    Size  Location     Type
 14086 ;;		None
 14087 ;; Auto vars:     Size  Location     Type
 14088 ;;		None
 14089 ;; Return value:  Size  Location     Type
 14090 ;;                  1    wreg      void 
 14091 ;; Registers used:
 14092 ;;		wreg, status,2
 14093 ;; Tracked objects:
 14094 ;;		On entry : 0/0
 14095 ;;		On exit  : 0/0
 14096 ;;		Unchanged: 0/0
 14097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14098 ;;      Params:         0       0       0       0       0       0       0       0       0
 14099 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14100 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14101 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14102 ;;Total ram usage:        0 bytes
 14103 ;; Hardware stack levels used:    1
 14104 ;; This function calls:
 14105 ;;		Nothing
 14106 ;; This function is called by:
 14107 ;;		_disk_initialize
 14108 ;;		_SYSTEM_Initialize
 14109 ;; This function uses a non-reentrant model
 14110 ;;
 14111                           
 14112                           	psect	text52
 14113  005644                     __ptext52:
 14114                           	opt callstack 0
 14115  005644                     _SPI1_Initialize:
 14116                           	opt callstack 26
 14117                           
 14118                           ;mcc_generated_files/spi1.c: 68:     SSP1STAT = 0x40;
 14119                           
 14120                           ;incstack = 0
 14121  005644  0E40               	movlw	64
 14122  005646  6EC7               	movwf	4039,c	;volatile
 14123                           
 14124                           ;mcc_generated_files/spi1.c: 71:     SSP1CON1 = 0x22;
 14125  005648  0E22               	movlw	34
 14126  00564A  6EC6               	movwf	4038,c	;volatile
 14127                           
 14128                           ;mcc_generated_files/spi1.c: 74:     SSP1ADD = 0x00;
 14129  00564C  0E00               	movlw	0
 14130  00564E  6EC8               	movwf	4040,c	;volatile
 14131  005650  0012               	return		;funcret
 14132  005652                     __end_of_SPI1_Initialize:
 14133                           	opt callstack 0
 14134                           
 14135 ;; *************** function _PIN_MANAGER_Initialize *****************
 14136 ;; Defined at:
 14137 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 14138 ;; Parameters:    Size  Location     Type
 14139 ;;		None
 14140 ;; Auto vars:     Size  Location     Type
 14141 ;;		None
 14142 ;; Return value:  Size  Location     Type
 14143 ;;                  1    wreg      void 
 14144 ;; Registers used:
 14145 ;;		wreg, status,2
 14146 ;; Tracked objects:
 14147 ;;		On entry : 0/0
 14148 ;;		On exit  : 0/0
 14149 ;;		Unchanged: 0/0
 14150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14151 ;;      Params:         0       0       0       0       0       0       0       0       0
 14152 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14153 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14154 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14155 ;;Total ram usage:        0 bytes
 14156 ;; Hardware stack levels used:    1
 14157 ;; This function calls:
 14158 ;;		Nothing
 14159 ;; This function is called by:
 14160 ;;		_SYSTEM_Initialize
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           	psect	text53
 14165  0054EC                     __ptext53:
 14166                           	opt callstack 0
 14167  0054EC                     _PIN_MANAGER_Initialize:
 14168                           	opt callstack 28
 14169                           
 14170                           ;mcc_generated_files/pin_manager.c: 56:     LATE = 0x00;
 14171                           
 14172                           ;incstack = 0
 14173  0054EC  0E00               	movlw	0
 14174  0054EE  6E8D               	movwf	3981,c	;volatile
 14175                           
 14176                           ;mcc_generated_files/pin_manager.c: 57:     LATD = 0x00;
 14177  0054F0  0E00               	movlw	0
 14178  0054F2  6E8C               	movwf	3980,c	;volatile
 14179                           
 14180                           ;mcc_generated_files/pin_manager.c: 59:     LATB = 0x04;
 14181  0054F4  0E04               	movlw	4
 14182  0054F6  6E8A               	movwf	3978,c	;volatile
 14183                           
 14184                           ;mcc_generated_files/pin_manager.c: 60:     LATC = 0x00;
 14185  0054F8  0E00               	movlw	0
 14186  0054FA  6E8B               	movwf	3979,c	;volatile
 14187                           
 14188                           ;mcc_generated_files/pin_manager.c: 65:     TRISE = 0x07;
 14189  0054FC  0E07               	movlw	7
 14190  0054FE  6E96               	movwf	3990,c	;volatile
 14191                           
 14192                           ;mcc_generated_files/pin_manager.c: 67:     TRISB = 0xF1;
 14193  005500  0EF1               	movlw	241
 14194  005502  6E93               	movwf	3987,c	;volatile
 14195                           
 14196                           ;mcc_generated_files/pin_manager.c: 68:     TRISC = 0xC7;
 14197  005504  0EC7               	movlw	199
 14198  005506  6E94               	movwf	3988,c	;volatile
 14199                           
 14200                           ;mcc_generated_files/pin_manager.c: 69:     TRISD = 0x00;
 14201  005508  0E00               	movlw	0
 14202  00550A  6E95               	movwf	3989,c	;volatile
 14203                           
 14204                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xC4;
 14205  00550C  0EC4               	movlw	196
 14206  00550E  010F               	movlb	15	; () banked
 14207  005510  6F5D               	movwf	93,b	;volatile
 14208                           
 14209                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x30;
 14210  005512  0E30               	movlw	48
 14211  005514  6F5C               	movwf	92,b	;volatile
 14212                           
 14213                           ;mcc_generated_files/pin_manager.c: 76:     ANSELD = 0x00;
 14214  005516  0E00               	movlw	0
 14215  005518  6F5E               	movwf	94,b	;volatile
 14216                           
 14217                           ;mcc_generated_files/pin_manager.c: 77:     ANSELE = 0x07;
 14218  00551A  0E07               	movlw	7
 14219  00551C  6F5F               	movwf	95,b	;volatile
 14220                           
 14221                           ; BSR set to: 15
 14222                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0xFF;
 14223  00551E  6885               	setf	3973,c	;volatile
 14224                           
 14225                           ; BSR set to: 15
 14226                           ;mcc_generated_files/pin_manager.c: 84:     INTCON2bits.nRBPU = 0;
 14227  005520  9EF1               	bcf	4081,7,c	;volatile
 14228                           
 14229                           ; BSR set to: 15
 14230  005522  0012               	return		;funcret
 14231  005524                     __end_of_PIN_MANAGER_Initialize:
 14232                           	opt callstack 0
 14233                           
 14234 ;; *************** function _OSCILLATOR_Initialize *****************
 14235 ;; Defined at:
 14236 ;;		line 124 in file "mcc_generated_files/mcc.c"
 14237 ;; Parameters:    Size  Location     Type
 14238 ;;		None
 14239 ;; Auto vars:     Size  Location     Type
 14240 ;;		None
 14241 ;; Return value:  Size  Location     Type
 14242 ;;                  1    wreg      void 
 14243 ;; Registers used:
 14244 ;;		wreg, status,2
 14245 ;; Tracked objects:
 14246 ;;		On entry : 0/0
 14247 ;;		On exit  : 0/0
 14248 ;;		Unchanged: 0/0
 14249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14250 ;;      Params:         0       0       0       0       0       0       0       0       0
 14251 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14252 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14253 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14254 ;;Total ram usage:        0 bytes
 14255 ;; Hardware stack levels used:    1
 14256 ;; This function calls:
 14257 ;;		Nothing
 14258 ;; This function is called by:
 14259 ;;		_SYSTEM_Initialize
 14260 ;; This function uses a non-reentrant model
 14261 ;;
 14262                           
 14263                           	psect	text54
 14264  005606                     __ptext54:
 14265                           	opt callstack 0
 14266  005606                     _OSCILLATOR_Initialize:
 14267                           	opt callstack 28
 14268                           
 14269                           ;mcc_generated_files/mcc.c: 127:     OSCCON = 0x60;
 14270                           
 14271                           ; BSR set to: 15
 14272                           ;incstack = 0
 14273  005606  0E60               	movlw	96
 14274  005608  6ED3               	movwf	4051,c	;volatile
 14275                           
 14276                           ;mcc_generated_files/mcc.c: 129:     OSCCON2 = 0x00;
 14277  00560A  0E00               	movlw	0
 14278  00560C  6ED2               	movwf	4050,c	;volatile
 14279                           
 14280                           ;mcc_generated_files/mcc.c: 131:     OSCTUNE = 0x00;
 14281  00560E  0E00               	movlw	0
 14282  005610  6E9B               	movwf	3995,c	;volatile
 14283                           
 14284                           ;mcc_generated_files/mcc.c: 133:     ACTCON = 0x00;
 14285  005612  0E00               	movlw	0
 14286  005614  6EB5               	movwf	4021,c	;volatile
 14287  005616  0012               	return		;funcret
 14288  005618                     __end_of_OSCILLATOR_Initialize:
 14289                           	opt callstack 0
 14290                           
 14291 ;; *************** function _Error *****************
 14292 ;; Defined at:
 14293 ;;		line 11 in file "./Errores.h"
 14294 ;; Parameters:    Size  Location     Type
 14295 ;;  a               1    wreg     unsigned char 
 14296 ;; Auto vars:     Size  Location     Type
 14297 ;;  a               1    0[COMRAM] unsigned char 
 14298 ;; Return value:  Size  Location     Type
 14299 ;;                  1    wreg      void 
 14300 ;; Registers used:
 14301 ;;		wreg, status,2, status,0
 14302 ;; Tracked objects:
 14303 ;;		On entry : 0/0
 14304 ;;		On exit  : 0/0
 14305 ;;		Unchanged: 0/0
 14306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14307 ;;      Params:         0       0       0       0       0       0       0       0       0
 14308 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14309 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14310 ;;      Totals:         1       0       0       0       0       0       0       0       0
 14311 ;;Total ram usage:        1 bytes
 14312 ;; Hardware stack levels used:    1
 14313 ;; This function calls:
 14314 ;;		Nothing
 14315 ;; This function is called by:
 14316 ;;		_guardar
 14317 ;;		_main
 14318 ;; This function uses a non-reentrant model
 14319 ;;
 14320                           
 14321                           	psect	text55
 14322  004A64                     __ptext55:
 14323                           	opt callstack 0
 14324  004A64                     _Error:
 14325                           	opt callstack 29
 14326                           
 14327                           ;incstack = 0
 14328                           ;Error@a stored from wreg
 14329  004A64  6E01               	movwf	Error@a,c
 14330                           
 14331                           ;./Errores.h: 12:     if (a == 1){
 14332  004A66  0401               	decf	Error@a,w,c
 14333  004A68  A4D8               	btfss	status,2,c
 14334  004A6A  D008               	goto	l5812
 14335                           
 14336                           ;./Errores.h: 13:         LATAbits.LATA0 ^= 1;
 14337  004A6C  7089               	btg	3977,0,c	;volatile
 14338                           
 14339                           ;./Errores.h: 14:         LATAbits.LATA1 ^= 1;
 14340  004A6E  7289               	btg	3977,1,c	;volatile
 14341                           
 14342                           ;./Errores.h: 15:         LATAbits.LATA2 ^= 1;
 14343  004A70  7489               	btg	3977,2,c	;volatile
 14344                           
 14345                           ;./Errores.h: 16:         LATAbits.LATA3 ^= 1;
 14346  004A72  7689               	btg	3977,3,c	;volatile
 14347                           
 14348                           ;./Errores.h: 17:         LATAbits.LATA4 ^= 1;
 14349  004A74  7889               	btg	3977,4,c	;volatile
 14350                           
 14351                           ;./Errores.h: 18:         LATAbits.LATA5 ^= 1;
 14352  004A76  7A89               	btg	3977,5,c	;volatile
 14353                           
 14354                           ;./Errores.h: 19:         LATAbits.LATA6 ^= 1;
 14355  004A78  7C89               	btg	3977,6,c	;volatile
 14356                           
 14357                           ;./Errores.h: 20:         LATAbits.LATA7 ^= 1;
 14358  004A7A  7E89               	btg	3977,7,c	;volatile
 14359  004A7C                     l5812:
 14360                           
 14361                           ;./Errores.h: 22:     if (a == 2){
 14362  004A7C  0E02               	movlw	2
 14363  004A7E  1801               	xorwf	Error@a,w,c
 14364  004A80  A4D8               	btfss	status,2,c
 14365  004A82  D008               	goto	l5818
 14366                           
 14367                           ;./Errores.h: 23:         LATAbits.LATA0 ^= 0;
 14368  004A84  5089               	movf	3977,w,c	;volatile
 14369                           
 14370                           ;./Errores.h: 24:         LATAbits.LATA1 ^= 0;
 14371  004A86  5089               	movf	3977,w,c	;volatile
 14372                           
 14373                           ;./Errores.h: 25:         LATAbits.LATA2 ^= 0;
 14374  004A88  5089               	movf	3977,w,c	;volatile
 14375                           
 14376                           ;./Errores.h: 26:         LATAbits.LATA3 ^= 0;
 14377  004A8A  5089               	movf	3977,w,c	;volatile
 14378                           
 14379                           ;./Errores.h: 27:         LATAbits.LATA4 ^= 0;
 14380  004A8C  5089               	movf	3977,w,c	;volatile
 14381                           
 14382                           ;./Errores.h: 28:         LATAbits.LATA5 ^= 0;
 14383  004A8E  5089               	movf	3977,w,c	;volatile
 14384                           
 14385                           ;./Errores.h: 29:         LATAbits.LATA6 ^= 0;
 14386  004A90  5089               	movf	3977,w,c	;volatile
 14387                           
 14388                           ;./Errores.h: 30:         LATAbits.LATA7 ^= 1;
 14389  004A92  7E89               	btg	3977,7,c	;volatile
 14390  004A94                     l5818:
 14391                           
 14392                           ;./Errores.h: 32:     if (a == 3){
 14393  004A94  0E03               	movlw	3
 14394  004A96  1801               	xorwf	Error@a,w,c
 14395  004A98  A4D8               	btfss	status,2,c
 14396  004A9A  D008               	goto	l5826
 14397                           
 14398                           ;./Errores.h: 33:         LATAbits.LATA0 ^= 0;
 14399  004A9C  5089               	movf	3977,w,c	;volatile
 14400                           
 14401                           ;./Errores.h: 34:         LATAbits.LATA1 ^= 0;
 14402  004A9E  5089               	movf	3977,w,c	;volatile
 14403                           
 14404                           ;./Errores.h: 35:         LATAbits.LATA2 ^= 0;
 14405  004AA0  5089               	movf	3977,w,c	;volatile
 14406                           
 14407                           ;./Errores.h: 36:         LATAbits.LATA3 ^= 0;
 14408  004AA2  5089               	movf	3977,w,c	;volatile
 14409                           
 14410                           ;./Errores.h: 37:         LATAbits.LATA4 ^= 0;
 14411  004AA4  5089               	movf	3977,w,c	;volatile
 14412                           
 14413                           ;./Errores.h: 38:         LATAbits.LATA5 ^= 0;
 14414  004AA6  5089               	movf	3977,w,c	;volatile
 14415                           
 14416                           ;./Errores.h: 39:         LATAbits.LATA6 ^= 1;
 14417  004AA8  7C89               	btg	3977,6,c	;volatile
 14418                           
 14419                           ;./Errores.h: 40:         LATAbits.LATA7 ^= 1;
 14420  004AAA  7E89               	btg	3977,7,c	;volatile
 14421  004AAC                     l5826:
 14422                           
 14423                           ;./Errores.h: 42:     if (a == 4){
 14424  004AAC  0E04               	movlw	4
 14425  004AAE  1801               	xorwf	Error@a,w,c
 14426  004AB0  A4D8               	btfss	status,2,c
 14427  004AB2  D008               	goto	l5836
 14428                           
 14429                           ;./Errores.h: 43:         LATAbits.LATA0 ^= 0;
 14430  004AB4  5089               	movf	3977,w,c	;volatile
 14431                           
 14432                           ;./Errores.h: 44:         LATAbits.LATA1 ^= 0;
 14433  004AB6  5089               	movf	3977,w,c	;volatile
 14434                           
 14435                           ;./Errores.h: 45:         LATAbits.LATA2 ^= 0;
 14436  004AB8  5089               	movf	3977,w,c	;volatile
 14437                           
 14438                           ;./Errores.h: 46:         LATAbits.LATA3 ^= 0;
 14439  004ABA  5089               	movf	3977,w,c	;volatile
 14440                           
 14441                           ;./Errores.h: 47:         LATAbits.LATA4 ^= 0;
 14442  004ABC  5089               	movf	3977,w,c	;volatile
 14443                           
 14444                           ;./Errores.h: 48:         LATAbits.LATA5 ^= 1;
 14445  004ABE  7A89               	btg	3977,5,c	;volatile
 14446                           
 14447                           ;./Errores.h: 49:         LATAbits.LATA6 ^= 1;
 14448  004AC0  7C89               	btg	3977,6,c	;volatile
 14449                           
 14450                           ;./Errores.h: 50:         LATAbits.LATA7 ^= 1;
 14451  004AC2  7E89               	btg	3977,7,c	;volatile
 14452  004AC4                     l5836:
 14453                           
 14454                           ;./Errores.h: 52:     if (a == 5){
 14455  004AC4  0E05               	movlw	5
 14456  004AC6  1801               	xorwf	Error@a,w,c
 14457  004AC8  A4D8               	btfss	status,2,c
 14458  004ACA  D008               	goto	l5848
 14459                           
 14460                           ;./Errores.h: 53:         LATAbits.LATA0 ^= 0;
 14461  004ACC  5089               	movf	3977,w,c	;volatile
 14462                           
 14463                           ;./Errores.h: 54:         LATAbits.LATA1 ^= 0;
 14464  004ACE  5089               	movf	3977,w,c	;volatile
 14465                           
 14466                           ;./Errores.h: 55:         LATAbits.LATA2 ^= 0;
 14467  004AD0  5089               	movf	3977,w,c	;volatile
 14468                           
 14469                           ;./Errores.h: 56:         LATAbits.LATA3 ^= 0;
 14470  004AD2  5089               	movf	3977,w,c	;volatile
 14471                           
 14472                           ;./Errores.h: 57:         LATAbits.LATA4 ^= 1;
 14473  004AD4  7889               	btg	3977,4,c	;volatile
 14474                           
 14475                           ;./Errores.h: 58:         LATAbits.LATA5 ^= 1;
 14476  004AD6  7A89               	btg	3977,5,c	;volatile
 14477                           
 14478                           ;./Errores.h: 59:         LATAbits.LATA6 ^= 1;
 14479  004AD8  7C89               	btg	3977,6,c	;volatile
 14480                           
 14481                           ;./Errores.h: 60:         LATAbits.LATA7 ^= 1;
 14482  004ADA  7E89               	btg	3977,7,c	;volatile
 14483  004ADC                     l5848:
 14484                           
 14485                           ;./Errores.h: 62:     if (a == 6){
 14486  004ADC  0E06               	movlw	6
 14487  004ADE  1801               	xorwf	Error@a,w,c
 14488  004AE0  A4D8               	btfss	status,2,c
 14489  004AE2  D008               	goto	l5862
 14490                           
 14491                           ;./Errores.h: 63:         LATAbits.LATA0 ^= 0;
 14492  004AE4  5089               	movf	3977,w,c	;volatile
 14493                           
 14494                           ;./Errores.h: 64:         LATAbits.LATA1 ^= 0;
 14495  004AE6  5089               	movf	3977,w,c	;volatile
 14496                           
 14497                           ;./Errores.h: 65:         LATAbits.LATA2 ^= 0;
 14498  004AE8  5089               	movf	3977,w,c	;volatile
 14499                           
 14500                           ;./Errores.h: 66:         LATAbits.LATA3 ^= 1;
 14501  004AEA  7689               	btg	3977,3,c	;volatile
 14502                           
 14503                           ;./Errores.h: 67:         LATAbits.LATA4 ^= 1;
 14504  004AEC  7889               	btg	3977,4,c	;volatile
 14505                           
 14506                           ;./Errores.h: 68:         LATAbits.LATA5 ^= 1;
 14507  004AEE  7A89               	btg	3977,5,c	;volatile
 14508                           
 14509                           ;./Errores.h: 69:         LATAbits.LATA6 ^= 1;
 14510  004AF0  7C89               	btg	3977,6,c	;volatile
 14511                           
 14512                           ;./Errores.h: 70:         LATAbits.LATA7 ^= 1;
 14513  004AF2  7E89               	btg	3977,7,c	;volatile
 14514  004AF4                     l5862:
 14515                           
 14516                           ;./Errores.h: 72:     if (a == 7){
 14517  004AF4  0E07               	movlw	7
 14518  004AF6  1801               	xorwf	Error@a,w,c
 14519  004AF8  A4D8               	btfss	status,2,c
 14520  004AFA  D008               	goto	l5878
 14521                           
 14522                           ;./Errores.h: 73:         LATAbits.LATA0 ^= 0;
 14523  004AFC  5089               	movf	3977,w,c	;volatile
 14524                           
 14525                           ;./Errores.h: 74:         LATAbits.LATA1 ^= 0;
 14526  004AFE  5089               	movf	3977,w,c	;volatile
 14527                           
 14528                           ;./Errores.h: 75:         LATAbits.LATA2 ^= 1;
 14529  004B00  7489               	btg	3977,2,c	;volatile
 14530                           
 14531                           ;./Errores.h: 76:         LATAbits.LATA3 ^= 1;
 14532  004B02  7689               	btg	3977,3,c	;volatile
 14533                           
 14534                           ;./Errores.h: 77:         LATAbits.LATA4 ^= 1;
 14535  004B04  7889               	btg	3977,4,c	;volatile
 14536                           
 14537                           ;./Errores.h: 78:         LATAbits.LATA5 ^= 1;
 14538  004B06  7A89               	btg	3977,5,c	;volatile
 14539                           
 14540                           ;./Errores.h: 79:         LATAbits.LATA6 ^= 1;
 14541  004B08  7C89               	btg	3977,6,c	;volatile
 14542                           
 14543                           ;./Errores.h: 80:         LATAbits.LATA7 ^= 1;
 14544  004B0A  7E89               	btg	3977,7,c	;volatile
 14545  004B0C                     l5878:
 14546                           
 14547                           ;./Errores.h: 82:     if (a == 11){
 14548  004B0C  0E0B               	movlw	11
 14549  004B0E  1801               	xorwf	Error@a,w,c
 14550  004B10  A4D8               	btfss	status,2,c
 14551  004B12  D008               	goto	l5894
 14552                           
 14553                           ;./Errores.h: 83:         LATAbits.LATA0 ^= 0;
 14554  004B14  5089               	movf	3977,w,c	;volatile
 14555                           
 14556                           ;./Errores.h: 84:         LATAbits.LATA1 ^= 1;
 14557  004B16  7289               	btg	3977,1,c	;volatile
 14558                           
 14559                           ;./Errores.h: 85:         LATAbits.LATA2 ^= 0;
 14560  004B18  5089               	movf	3977,w,c	;volatile
 14561                           
 14562                           ;./Errores.h: 86:         LATAbits.LATA3 ^= 0;
 14563  004B1A  5089               	movf	3977,w,c	;volatile
 14564                           
 14565                           ;./Errores.h: 87:         LATAbits.LATA4 ^= 0;
 14566  004B1C  5089               	movf	3977,w,c	;volatile
 14567                           
 14568                           ;./Errores.h: 88:         LATAbits.LATA5 ^= 1;
 14569  004B1E  7A89               	btg	3977,5,c	;volatile
 14570                           
 14571                           ;./Errores.h: 89:         LATAbits.LATA6 ^= 0;
 14572  004B20  5089               	movf	3977,w,c	;volatile
 14573                           
 14574                           ;./Errores.h: 90:         LATAbits.LATA7 ^= 1;
 14575  004B22  7E89               	btg	3977,7,c	;volatile
 14576  004B24                     l5894:
 14577                           
 14578                           ;./Errores.h: 92:     if(a == 15) {
 14579  004B24  0E0F               	movlw	15
 14580  004B26  1801               	xorwf	Error@a,w,c
 14581  004B28  A4D8               	btfss	status,2,c
 14582  004B2A  0012               	return	
 14583                           
 14584                           ;./Errores.h: 93:         LATAbits.LATA0 ^= 0;
 14585  004B2C  5089               	movf	3977,w,c	;volatile
 14586                           
 14587                           ;./Errores.h: 94:         LATAbits.LATA1 ^= 0;
 14588  004B2E  5089               	movf	3977,w,c	;volatile
 14589                           
 14590                           ;./Errores.h: 95:         LATAbits.LATA2 ^= 0;
 14591  004B30  5089               	movf	3977,w,c	;volatile
 14592                           
 14593                           ;./Errores.h: 96:         LATAbits.LATA3 ^= 0;
 14594  004B32  5089               	movf	3977,w,c	;volatile
 14595                           
 14596                           ;./Errores.h: 97:         LATAbits.LATA4 ^= 0;
 14597  004B34  5089               	movf	3977,w,c	;volatile
 14598                           
 14599                           ;./Errores.h: 98:         LATAbits.LATA5 ^= 0;
 14600  004B36  5089               	movf	3977,w,c	;volatile
 14601                           
 14602                           ;./Errores.h: 99:         LATAbits.LATA6 ^= 0;
 14603  004B38  5089               	movf	3977,w,c	;volatile
 14604                           
 14605                           ;./Errores.h: 100:         LATAbits.LATA7 ^= 0;
 14606  004B3A  5089               	movf	3977,w,c	;volatile
 14607  004B3C  0012               	return		;funcret
 14608  004B3E                     __end_of_Error:
 14609                           	opt callstack 0
 14610                           
 14611                           	psect	rparam
 14612  0000                     tosu	equ	0xFFF
 14613                           tosh	equ	0xFFE
 14614                           tosl	equ	0xFFD
 14615                           stkptr	equ	0xFFC
 14616                           pclatu	equ	0xFFB
 14617                           pclath	equ	0xFFA
 14618                           pcl	equ	0xFF9
 14619                           tblptru	equ	0xFF8
 14620                           tblptrh	equ	0xFF7
 14621                           tblptrl	equ	0xFF6
 14622                           tablat	equ	0xFF5
 14623                           prodh	equ	0xFF4
 14624                           prodl	equ	0xFF3
 14625                           indf0	equ	0xFEF
 14626                           postinc0	equ	0xFEE
 14627                           postdec0	equ	0xFED
 14628                           preinc0	equ	0xFEC
 14629                           plusw0	equ	0xFEB
 14630                           fsr0h	equ	0xFEA
 14631                           fsr0l	equ	0xFE9
 14632                           wreg	equ	0xFE8
 14633                           indf1	equ	0xFE7
 14634                           postinc1	equ	0xFE6
 14635                           postdec1	equ	0xFE5
 14636                           preinc1	equ	0xFE4
 14637                           plusw1	equ	0xFE3
 14638                           fsr1h	equ	0xFE2
 14639                           fsr1l	equ	0xFE1
 14640                           bsr	equ	0xFE0
 14641                           indf2	equ	0xFDF
 14642                           postinc2	equ	0xFDE
 14643                           postdec2	equ	0xFDD
 14644                           preinc2	equ	0xFDC
 14645                           plusw2	equ	0xFDB
 14646                           fsr2h	equ	0xFDA
 14647                           fsr2l	equ	0xFD9
 14648                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    0
    Data        1
    BSS         850
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    116     154
    BANK1           256      0     255
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f_lseek@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_lseek@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_close@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_close@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_sync@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_sync@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_write@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    f_write@bw	PTR unsigned short  size(2) Largest target is 2
		 -> guardar@bw(BANK0[2]), 

    f_write@buff	PTR const void  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_write@wbuff	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    f_read@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_read@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_open@fp.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_open@fp	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dj.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dj.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@cfs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    f_mount@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    f_mount@rp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    validate@fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    validate@obj	PTR void  size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    validate@fil	PTR struct . size(2) Largest target is 34
		 -> Fil(BANK0[32]), 

    find_volume@pt	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ff@FatFs	PTR struct .[1] size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    find_volume@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), 

    find_volume@rfs	PTR PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), f_mount@fs(COMRAM[2]), 

    check_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_ldnumber@tp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@tt	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    get_ldnumber@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> f_open@path(BANK0[2]), f_mount@path(COMRAM[2]), f_mount@rp(COMRAM[2]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    follow_path@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    follow_path@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    create_name@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    create_name@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_3(CODE[11]), STR_2(CODE[1]), STR_1(CODE[1]), 

    dir_register@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_register@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_register@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_find@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_find@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    st_clust@dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    ld_clust@dir	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_alloc@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_alloc@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    dir_next@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_next@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_next@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    S404$fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    dir_sdi@dp.fn	PTR unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    S404$dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.dir	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S404$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    dir_sdi@dp	PTR struct . size(2) Largest target is 25
		 -> f_open@dj(BANK0[22]), 

    create_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    remove_chain@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    put_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@p	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    get_fat@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_fs@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    move_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    sync_window@fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    chk_chr@str	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_6(CODE[15]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> f_open@sfn(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@dst	PTR void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@src	PTR const void  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@s	PTR const unsigned char  size(2) Largest target is 558
		 -> f_open@sfn(BANK0[12]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    mem_cpy@dst	PTR void  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    mem_cpy@d	PTR unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    disk_ioctl@buff	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_ioctl@ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    disk_write@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    disk_read@buff	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    xmit_datablock@buff	PTR const unsigned char  size(2) Largest target is 558
		 -> FatFs.win(BIGRAM[512]), NULL(NULL[0]), STR_4(CODE[20]), FatFs(BIGRAM[558]), 

    rcvr_datablock@buff	PTR unsigned char  size(2) Largest target is 558
		 -> disk_ioctl@csd(COMRAM[16]), NULL(NULL[0]), FatFs(BIGRAM[558]), 

    guardar@data	PTR unsigned char  size(2) Largest target is 20
		 -> STR_4(CODE[20]), 

    S83$dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.dir_ptr	PTR unsigned char  size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    S83$fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 

    Fil.fs	PTR struct . size(2) Largest target is 558
		 -> NULL(NULL[0]), FatFs(BIGRAM[558]), 


Critical Paths under _main in COMRAM

    _f_write->_create_chain
    _f_open->_remove_chain
    _remove_chain->_get_fat
    _remove_chain->_put_fat
    _create_name->_mem_set
    _dir_sdi->_get_fat
    _dir_next->_create_chain
    _f_mount->_find_volume
    _find_volume->_check_fs
    _disk_initialize->_send_cmd
    _check_fs->_move_window
    _f_lseek->_create_chain
    _create_chain->_get_fat
    _create_chain->_put_fat
    _put_fat->_move_window
    _get_fat->_move_window
    _clust2sect->___lmul
    _f_close->_f_sync
    _f_sync->_sync_fs
    _validate->_disk_status
    _sync_fs->_disk_ioctl
    _disk_ioctl->_send_cmd
    _move_window->_sync_window
    _sync_window->_disk_write
    _disk_write->_send_cmd
    _xmit_datablock->_wait_ready
    _disk_read->_send_cmd
    _send_cmd->___send_cmd
    _select->_wait_ready
    _wait_ready->_SPI1_Exchange8bit
    _deselect->_SPI1_Exchange8bit
    _rcvr_datablock->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_guardar
    _guardar->_f_open
    _f_write->_create_chain
    _f_open->_find_volume
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_register->_dir_alloc
    _dir_alloc->_dir_next
    _dir_next->_create_chain
    _f_mount->_find_volume
    _f_lseek->_create_chain

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  430537
                              _Error
                        ___delay_sec
                            _guardar
 ---------------------------------------------------------------------------------
 (1) _guardar                                              4     2      2  430293
                                            112 BANK0      4     2      2
                              _Error
                  _SYSTEM_Initialize
                        ___delay_sec
                            _f_close
                            _f_lseek
                            _f_mount
                             _f_open
                            _f_write
 ---------------------------------------------------------------------------------
 (2) _f_write                                             36    28      8   54898
                                             13 BANK0     36    28      8
                         _clust2sect
                       _create_chain
                         _disk_write
                            _mem_cpy
                        _move_window
                        _sync_window
                           _validate
 ---------------------------------------------------------------------------------
 (2) _f_open                                              54    49      5  266319
                                             58 BANK0     54    49      5
                       _dir_register
                        _find_volume
                        _follow_path
                           _ld_clust
                        _move_window
                       _remove_chain
                           _st_clust
 ---------------------------------------------------------------------------------
 (3) _remove_chain                                        15     9      6   27554
                                             85 COMRAM    10     4      6
                                              0 BANK0      5     5      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (3) _follow_path                                          8     4      4   99588
                                             38 BANK0      8     4      4
                        _create_name
                           _dir_find
                            _dir_sdi
                           _ld_clust
 ---------------------------------------------------------------------------------
 (3) _ld_clust                                            14    10      4     546
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) _dir_find                                             6     4      2   79471
                                             32 BANK0      6     4      2
                           _dir_next
                            _dir_sdi
                            _mem_cmp
                        _move_window
 ---------------------------------------------------------------------------------
 (5) _mem_cmp                                             14     8      6     364
                                              0 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (4) _create_name                                         23    19      4    2632
                                              8 COMRAM    23    19      4
                            _chk_chr
                            _mem_set
 ---------------------------------------------------------------------------------
 (5) _chk_chr                                              6     2      4     241
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _dir_register                                         3     1      2   93436
                                             42 BANK0      3     1      2
                          _dir_alloc
                            _mem_cpy
                            _mem_set
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _mem_cpy                                             12     6      6    1323
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) _dir_alloc                                           10     6      4   79139
                                             32 BANK0     10     6      4
                           _dir_next
                            _dir_sdi
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _dir_sdi                                             21    17      4   16225
                                             85 COMRAM     4     0      4
                                              0 BANK0     17    17      0
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (5) _dir_next                                            19    15      4   50796
                                             13 BANK0     19    15      4
                         _clust2sect
                       _create_chain
                            _get_fat
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (2) _f_mount                                             12     7      5   32640
                                             81 COMRAM    12     7      5
                        _find_volume
                       _get_ldnumber
 ---------------------------------------------------------------------------------
 (3) _find_volume                                         71    66      5   31300
                                             68 COMRAM    13     8      5
                                              0 BANK0     58    58      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                        _disk_status
                       _get_ldnumber
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_ldnumber                                        14    12      2     536
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (4) _disk_initialize                                     13    13      0    2686
                                             16 COMRAM    13    13      0
                  _SPI1_Exchange8bit
                    _SPI1_Initialize
                          _SPI1_Open
                           _deselect
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _SPI1_Open                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _check_fs                                            10     4      6   12132
                                             58 COMRAM    10     4      6
                        _move_window
 ---------------------------------------------------------------------------------
 (2) _f_lseek                                             39    33      6   46625
                                             13 BANK0     39    33      6
                            ___lldiv
                         _clust2sect
                       _create_chain
                            _get_fat
                           _validate
 ---------------------------------------------------------------------------------
 (3) _create_chain                                        23    17      6   28695
                                             85 COMRAM    10     4      6
                                              0 BANK0     13    13      0
                            _get_fat
                            _put_fat
 ---------------------------------------------------------------------------------
 (4) _put_fat                                             27    17     10   13520
                                             58 COMRAM    27    17     10
                        _move_window
 ---------------------------------------------------------------------------------
 (4) _get_fat                                             27    21      6   13479
                                             58 COMRAM    27    21      6
                        _move_window
 ---------------------------------------------------------------------------------
 (3) _clust2sect                                          11     5      6    1535
                                             12 COMRAM    11     5      6
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     512
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     564
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _f_close                                              3     1      2   29443
                                             77 COMRAM     3     1      2
                             _f_sync
                           _validate
 ---------------------------------------------------------------------------------
 (3) _f_sync                                               9     7      2   28692
                                             68 COMRAM     9     7      2
                        _move_window
                           _st_clust
                            _sync_fs
                           _validate
 ---------------------------------------------------------------------------------
 (3) _validate                                             8     6      2     557
                                              1 COMRAM     8     6      2
                        _disk_status
 ---------------------------------------------------------------------------------
 (4) _disk_status                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _sync_fs                                             11     9      2   15570
                                             57 COMRAM    11     9      2
                         _disk_ioctl
                         _disk_write
                            _mem_set
                        _sync_window
 ---------------------------------------------------------------------------------
 (6) _mem_set                                              8     2      6    1002
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _disk_ioctl                                          41    38      3    5270
                                             16 COMRAM    41    38      3
                  _SPI1_Exchange8bit
                             ___wmul
                           _deselect
                     _rcvr_datablock
                             _select
                           _send_cmd
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     711
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _st_clust                                             6     0      6     392
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (3) _move_window                                         11     5      6   11674
                                             47 COMRAM    11     5      6
                          _disk_read
                        _sync_window
 ---------------------------------------------------------------------------------
 (3) _sync_window                                         21    19      2    4808
                                             26 COMRAM    21    19      2
                         _disk_write
 ---------------------------------------------------------------------------------
 (4) _disk_write                                          10     2      8    3972
                                             16 COMRAM    10     2      8
                           _deselect
                           _send_cmd
                     _xmit_datablock
 ---------------------------------------------------------------------------------
 (5) _xmit_datablock                                       6     3      3     659
                                              3 COMRAM     6     3      3
                  _SPI1_Exchange8bit
                         _wait_ready
 ---------------------------------------------------------------------------------
 (4) _disk_read                                           12     4      8    4058
                                             16 COMRAM    12     4      8
                           _deselect
                     _rcvr_datablock
                           _send_cmd
 ---------------------------------------------------------------------------------
 (5) _send_cmd                                             6     2      4    2155
                                             10 COMRAM     6     2      4
                         ___send_cmd
 ---------------------------------------------------------------------------------
 (6) ___send_cmd                                           7     3      4     599
                                              3 COMRAM     7     3      4
                  _SPI1_Exchange8bit
                           _deselect
                             _select
 ---------------------------------------------------------------------------------
 (7) _select                                               0     0      0     112
                  _SPI1_Exchange8bit
                           _deselect
                         _wait_ready
 ---------------------------------------------------------------------------------
 (6) _wait_ready                                           2     2      0      68
                                              1 COMRAM     2     2      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (8) _deselect                                             0     0      0      22
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _rcvr_datablock                                       7     3      4    1200
                                              1 COMRAM     7     3      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___delay_sec                                          5     5      0      46
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI1_Initialize
 ---------------------------------------------------------------------------------
 (5) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Error                                                1     1      0     198
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Error
   ___delay_sec
   _guardar
     _Error
     _SYSTEM_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _SPI1_Initialize
     ___delay_sec
     _f_close
       _f_sync
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _st_clust
         _sync_fs
           _disk_ioctl
             _SPI1_Exchange8bit
             ___wmul
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
           _mem_set
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _validate
           _disk_status
       _validate
         _disk_status
     _f_lseek
       ___lldiv
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _get_fat
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _validate
         _disk_status
     _f_mount
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _get_ldnumber
     _f_open
       _dir_register
         _dir_alloc
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _mem_cpy
         _mem_set
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _find_volume
         ___lldiv
         ___lmul
         _check_fs
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _disk_initialize
           _SPI1_Exchange8bit
           _SPI1_Initialize
           _SPI1_Open
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _disk_status
         _get_ldnumber
         _move_window
           _disk_read
             _deselect
               _SPI1_Exchange8bit
             _rcvr_datablock
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _sync_window
             _disk_write
               _deselect
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
               _xmit_datablock
                 _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
       _follow_path
         _create_name
           _chk_chr
           _mem_set
         _dir_find
           _dir_next
             _clust2sect
               ___lmul
             _create_chain
               _get_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
               _put_fat
                 _move_window
                   _disk_read
                     _deselect
                       _SPI1_Exchange8bit
                     _rcvr_datablock
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                   _sync_window
                     _disk_write
                       _deselect
                         _SPI1_Exchange8bit
                       _send_cmd
                         ___send_cmd
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _select
                             _SPI1_Exchange8bit
                             _deselect
                               _SPI1_Exchange8bit
                             _wait_ready
                               _SPI1_Exchange8bit
                       _xmit_datablock
                         _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
             _mem_set
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
           _dir_sdi
             _clust2sect
               ___lmul
             _get_fat
               _move_window
                 _disk_read
                   _deselect
                     _SPI1_Exchange8bit
                   _rcvr_datablock
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                 _sync_window
                   _disk_write
                     _deselect
                       _SPI1_Exchange8bit
                     _send_cmd
                       ___send_cmd
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _select
                           _SPI1_Exchange8bit
                           _deselect
                             _SPI1_Exchange8bit
                           _wait_ready
                             _SPI1_Exchange8bit
                     _xmit_datablock
                       _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
           _mem_cmp
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _dir_sdi
           _clust2sect
             ___lmul
           _get_fat
             _move_window
               _disk_read
                 _deselect
                   _SPI1_Exchange8bit
                 _rcvr_datablock
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
               _sync_window
                 _disk_write
                   _deselect
                     _SPI1_Exchange8bit
                   _send_cmd
                     ___send_cmd
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _select
                         _SPI1_Exchange8bit
                         _deselect
                           _SPI1_Exchange8bit
                         _wait_ready
                           _SPI1_Exchange8bit
                   _xmit_datablock
                     _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
         _ld_clust
       _ld_clust
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _remove_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _st_clust
     _f_write
       _clust2sect
         ___lmul
       _create_chain
         _get_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
         _put_fat
           _move_window
             _disk_read
               _deselect
                 _SPI1_Exchange8bit
               _rcvr_datablock
                 _SPI1_Exchange8bit
               _send_cmd
                 ___send_cmd
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _select
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _wait_ready
                       _SPI1_Exchange8bit
             _sync_window
               _disk_write
                 _deselect
                   _SPI1_Exchange8bit
                 _send_cmd
                   ___send_cmd
                     _SPI1_Exchange8bit
                     _deselect
                       _SPI1_Exchange8bit
                     _select
                       _SPI1_Exchange8bit
                       _deselect
                         _SPI1_Exchange8bit
                       _wait_ready
                         _SPI1_Exchange8bit
                 _xmit_datablock
                   _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
       _disk_write
         _deselect
           _SPI1_Exchange8bit
         _send_cmd
           ___send_cmd
             _SPI1_Exchange8bit
             _deselect
               _SPI1_Exchange8bit
             _select
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
         _xmit_datablock
           _SPI1_Exchange8bit
           _wait_ready
             _SPI1_Exchange8bit
       _mem_cpy
       _move_window
         _disk_read
           _deselect
             _SPI1_Exchange8bit
           _rcvr_datablock
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
         _sync_window
           _disk_write
             _deselect
               _SPI1_Exchange8bit
             _send_cmd
               ___send_cmd
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _select
                   _SPI1_Exchange8bit
                   _deselect
                     _SPI1_Exchange8bit
                   _wait_ready
                     _SPI1_Exchange8bit
             _xmit_datablock
               _SPI1_Exchange8bit
               _wait_ready
                 _SPI1_Exchange8bit
       _sync_window
         _disk_write
           _deselect
             _SPI1_Exchange8bit
           _send_cmd
             ___send_cmd
               _SPI1_Exchange8bit
               _deselect
                 _SPI1_Exchange8bit
               _select
                 _SPI1_Exchange8bit
                 _deselect
                   _SPI1_Exchange8bit
                 _wait_ready
                   _SPI1_Exchange8bit
           _xmit_datablock
             _SPI1_Exchange8bit
             _wait_ready
               _SPI1_Exchange8bit
       _validate
         _disk_status

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     22E      21       27.3%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      FF       8       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     74      9A       5       96.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F8       6        0.0%
DATA                 0      0     426       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 15 22:13:10 2019

              _SPI1_Exchange8bit 5618                      get_fat@clst 003D  
                   create_name@b 0015                     create_name@c 001F  
                   create_name@d 001A                     create_name@i 001D  
                   create_name@p 0018               ?_SPI1_Exchange8bit 0001  
               get_ldnumber@path 0001                               l82 5462  
                    disk_ioctl@n 0037              ___wmul@multiplicand 0003  
                 ??_dir_register 0060                 disk_write@sector 0013  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                  create_name@dp 0009                    create_name@ni 0016  
                   __CFG_CP2$OFF 000000                    create_name@si 0013  
                 create_chain@cs 0069                     __CFG_CP3$OFF 000000  
                 create_chain@fs 0056                      __CFG_LVP$ON 000000  
                            l100 5262                              l201 4648  
                            l220 2102                              l135 3BA2  
                            l320 2FAE                              l160 3D38  
                            l401 3636                              l322 2C68  
                            l146 3C6A                              l307 3F3C  
                            l317 2C5E                              l157 3D68  
                            l174 4C28                              l414 380E  
                            l191 45C2                              l343 2424  
                            l521 3B6E                              l178 4C32  
                            l179 4C46                              l195 45CC  
                            l196 45D4                              l612 1010  
                            l604 0CB2                              l197 45E8  
                            l382 3462                              l534 42C0  
                            l367 41BE                              l456 47AA  
                            l732 19CA                              l653 322C  
                            l646 30A2                              l399 363E  
                            l655 3214                              l647 309A  
                            l736 1C5A                              l825 5620  
                            l585 09D0                              l497 3A18  
                            l598 0B18                              l882 50AE  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _Fil 00D9              ??_SPI1_Exchange8bit 0001  
                   disk_read@cmd 001C                   ??_create_chain 005C  
                            wreg 000FE8                disk_initialize@ty 001A  
                 create_name@sfn 001B                  create_chain@ncl 0065  
                create_chain@scl 0061                  create_chain@res 0060  
                    ld_clust@dir 0003                             l4200 5276  
                           l4114 510A                             l4060 5448  
                           l4132 513E                             l4124 512A  
                           l4126 512E                             l4118 5116  
                           l4142 51CE                             l4310 402E  
                           l4304 3FB4                             l5104 51AE  
                           l4082 55EC                             l4162 5238  
                           l4250 46AA                             l4314 403A  
                           l4322 4094                             l5034 4D88  
                           l5018 4CF2                             l5026 4D48  
                           l4148 51E4                             l4236 462A  
                           l4340 4F8A                             l5028 4D56  
                           l5132 4838                             l6020 31FA  
                           l4342 4FA6                             l5062 3F14  
                           l4422 24E0                             l6110 1C3E  
                           l6102 1C18                             l5222 3AB0  
                           l5150 3928                             l5118 47D2  
                           l4184 5246                             l4272 4C5A  
                           l4504 4DF0                             l4440 25FC  
                           l4424 2514                             l6112 1C76  
                           l5320 4A5A                             l4098 50DC  
                           l4178 5426                             l4530 3432  
                           l5090 4780                             l5074 46E4  
                           l5242 3AEC                             l5234 3ADA  
                           l5162 3996                             l5138 4878  
                           l5402 40CE                             l4620 1F80  
                           l4372 2DD4                             l4444 2632  
                           l6124 1CE8                             l6116 1C84  
                           l5340 490A                             l5316 4A50  
                           l5252 3B2C                             l5244 3AFC  
                           l5148 3924                             l5404 40D6  
                           l6300 1822                             l6220 13B4  
                           l6204 128C                             l4630 205E  
                           l4710 23E6                             l4374 2DF2  
                           l4454 26E4                             l4470 2814  
                           l4534 3472                             l4526 340E  
                           l4518 33BE                             l6134 1D30  
                           l6126 1D1C                             l5334 48EC  
                           l5246 3B02                             l5502 4324  
                           l6038 3272                             l6054 3352  
                           l6230 13E0                             l4288 4CCC  
                           l4616 1F72                             l4608 1F64  
                           l4480 531E                             l4384 2EB8  
                           l4376 2DFC                             l4464 27D6  
                           l6072 197E                             l5352 4982  
                           l5088 4778                             l5184 39F4  
                           l6304 1898                             l6240 1454  
                           l6312 18D4                             l4706 239E  
                           l4650 2150                             l4490 5564  
                           l5370 503A                             l4394 2F82  
                           l4570 35B6                             l4562 3544  
                           l4546 34D0                             l6066 195C  
                           l5346 4948                             l5290 49B0  
                           l5266 3B5C                             l5418 4134  
                           l6218 1374                             l4708 23A4  
                           l5380 5060                             l4484 5332  
                           l4468 27E8                             l6172 1EEA  
                           l6148 1DB0                             l5700 0D9E  
                           l5620 0AB4                             l5604 0A62  
                           l5540 08C8                             l5524 0884  
                           l5516 085E                             l4900 2BBA  
                           l4732 53B6                             l5188 3A0E  
                           l5428 41AE                             l6236 1404  
                           l4646 2148                             l4494 5574  
                           l5366 5036                             l5382 506C  
                           l6166 1E78                             l5606 0A88  
                           l4814 285E                             l4734 53BA  
                           l4726 52C0                             l6318 1930  
                           l6262 15A6                             l4672 22BC  
                           l4664 2226                             l4656 2196  
                           l5392 50A0                             l4576 361E  
                           l6088 1B9A                             l5288 49AC  
                           l5704 0DB4                             l5624 0AB8  
                           l5544 08CC                             l4840 297E  
                           l4824 28C2                             l4752 36BA  
                           l5448 4C0E                             l6256 151E  
                           l6248 14BC                             l6344 435C  
                           l4922 3BB8                             l5618 0AAE  
                           l4834 2968                             l4770 3782  
                           l5466 4260                             l5458 420C  
                           l6274 16D4                             l5812 4A7C  
                           l5900 54BC                             l4684 2326  
                           l4668 22AE                             l4596 5600  
                           l4940 3C06                             l5724 0EEE  
                           l5564 0910                             l5556 0906  
                           l6284 174E                             l6268 15FA  
                           l6276 16F4                             l6380 4438  
                           l4694 235E                             l4678 22F4  
                           l4926 3BC0                             l4918 3BAE  
                           l5646 0B76                             l4790 384E  
                           l4758 370A                             l6294 17D8  
                           l6286 1772                             l6366 43EE  
                           l5904 54CC                             l4688 2348  
                           l4952 3C3A                             l5760 11B4  
                           l5736 0FE2                             l5592 0A06  
                           l5576 094E                             l4880 2ABE  
                           l4856 2A00                             l4768 375C  
                           l6288 1790                             l5826 4AAC  
                           l5818 4A94                             l4698 2366  
                           l4970 3C9A                             l5586 09B4  
                           l4778 37CE                             l6394 5540  
                           l5836 4AC4                             l5924 4EA6  
                           l4892 2B14                             l4868 2A1E  
                           l6388 4464                             l5862 4AF4  
                           l4982 3CD0                             l5598 0A1C  
                           l5918 4E78                             l5950 2FCE  
                           l5848 4ADC                             l5928 4EBA  
                           l4896 2B5C                             l4986 3CF6  
                           l4978 3CC2                             l5938 4EE6  
                           l5796 45AA                             l4988 3D08  
                           l5980 3072                             l5972 3048  
                           l5894 4B24                             l5878 4B0C  
                           l5984 307E                             STR_1 0814  
                           STR_2 0814                             STR_3 0824  
                           STR_4 0801                             STR_5 0815  
                           STR_6 0815                             _LATA 000F89  
                           _LATB 000F8A                             _LATC 000F8B  
                           _LATD 000F8C                             _LATE 000F8D  
                           u5200 241E                             u5105 2CB2  
                           u5050 4F2E                             u6010 285A  
                           u5125 2D50                             u5215 246E  
                           u4520 546A                             u5080 2C2E  
                           u4530 5476                             u5170 2EFA  
                           u5090 2C4E                             u5155 2DE0  
                           u4700 526A                             u4620 51CA  
                           u5500 35F6                             u5420 34BE  
                           u7100 40C8                             u5245 2560  
                           u5270 261A                             u5190 23FE  
                           u6070 2964                             u5175 2EF0  
                           u6055 28CE                             u4640 5204  
                           u5440 351C                             u6080 297A  
                           u6400 4D7E                             u7200 4206  
                           u7050 5036                             u5290 2726  
                           u5370 33AC                             u5275 2610  
                           u4900 4C24                             u4740 45BE  
                           u5620 20FC                             u6340 3D40  
                           u5605 2066                             u4830 4664  
                           u5550 1F7C                             u7070 5070  
                           u5390 3420                             u8110 1958  
                           u6270 3C72                             u6190 3BA8  
                           u6510 479E                             u7150 4188  
                           u4647 51FA                             u5615 208C  
                           u5295 271C                             u6175 2BDC  
                           u6407 4D74                             u8200 1C04  
                           u6360 3D64                             u7160 41DE  
                           u5625 20F2                             u4850 468C  
                           u8210 1C2A                             u7330 08C4  
                           u7250 42BA                             u7090 40A8  
                           u5715 21DA                             u6380 4D20  
                           u6540 47CC                             u5725 21FC  
                           u4950 4C82                             u4870 46BA  
                           u5734 221A                             u5670 2178  
                           u8310 1E64                             u7430 0AA2  
                           u6710 3A24                             u5830 52D0  
                           u4935 4C38                             u5735 2214  
                           u9007 3D2A                             u5840 5304  
                           u8400 12E6                             u9017 5456  
                           u4785 45DA                             u5745 2264  
                           u4970 4CAE                             u8330 1ECE  
                           u7450 0AB4                             u6490 4764  
                           u6730 3A30                             u9027 5256  
                           u5675 216E                             u5595 2036  
                           u8315 1E5A                             u6387 4D10  
                           u8260 1D40                             u5940 37DE  
                           u5860 53EA                             u6660 39DE  
                           u9037 54C2                             u8165 1A42  
                           u8405 12DC                             u4990 4CDC  
                           u6750 3A5A                             u8280 1DC4  
                           u6920 49D2                             u5880 36B6  
                           u6680 39F0                             u7625 0ECE  
                           u7650 1036                             u6770 3A66  
                           u7555 0CE6                             u8515 1536  
                           u7580 0D9A                             u7900 4EE2  
                           u8620 18DC                             u7590 0DB0  
                           u7655 102C                             u5985 3884  
                           u5995 38D0                             u6980 4906  
                           u8565 169A                             u6990 4944  
                           u8670 437A                             u8575 16DE  
                           u8997 3C5C                             _WPUB 000F85  
                           _Fsid 00D4                             _Stat 00F9  
                           _data 0100                             _main 5524  
                   find_volume@i 0095                             fsr0h 000FEA  
                           fsr1h 000FE2                             indf0 000FEF  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                  __CFG_BORV$190 000000                    disk_ioctl@cmd 0011  
                  disk_ioctl@csd 0021                    disk_read@buff 0011  
                  disk_ioctl@res 0036                    disk_ioctl@ptr 0038  
                  disk_read@pdrv 0019                             prodh 000FF4  
                           prodl 000FF3                   ??_get_ldnumber 0003  
                           start 0000        __end_of_SPI1_Exchange8bit 5628  
                  __CFG_IESO$OFF 000000                    __CFG_MCLRE$ON 000000  
             disk_initialize@cmd 0019                     ?_follow_path 0086  
             disk_initialize@ocr 0013                     ___param_bank 000000  
             disk_initialize@tmr 001B                  create_name@path 000B  
               create_chain@clst 0058                      _sync_window 3F40  
 __size_of_OSCILLATOR_Initialize 0012    __end_of_OSCILLATOR_Initialize 5618  
                          ?_main 0001                  __end_of___lldiv 50C0  
                 __CFG_DEBUG$OFF 000000                            _TRISA 000F92  
                          _TRISB 000F93                            _TRISC 000F94  
                          _TRISD 000F95                            _TRISE 000F96  
                __end_of_f_close 54B4                            _FatFs 01FF  
                __end_of_chk_chr 53FC               __size_of_SPI1_Open 000E  
                __end_of_f_lseek 1F50                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
            ___lmul@multiplicand 0005                    __CFG_WRT3$OFF 000000  
                __end_of_f_mount 4F04                            _Error 4A64  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                   ___send_cmd@n 0009                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                  __end_of_dir_sdi 3912  
                 __CFG_EBTR3$OFF 000000                  __end_of_f_write 1942  
                __end_of_get_fat 2FC0                    __CFG_WRTB$OFF 000000  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_mem_cmp 530E  
                __end_of_mem_cpy 4D9A                  __end_of_mem_set 5586  
                __end_of_guardar 446C                    find_volume@br 0060  
                  find_volume@fs 0098                    find_volume@pt 007A  
                 disk_ioctl@buff 0012                   disk_read@count 0017  
                          tablat 000FF5                   disk_ioctl@pdrv 0031  
                          plusw2 000FDB                  __end_of_put_fat 2818  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                __end_of_sync_fs 3F40                   __CFG_ICPRT$OFF 000000  
                  get_ldnumber@i 000B         __size_of_SPI1_Initialize 000E  
                __initialization 5364              disk_initialize@pdrv 0012  
                   __end_of_main 555A                     clust2sect@fs 000D  
                 __CFG_PCLKEN$ON 000000                           ??_main 0060  
                  __activetblptr 000002                   __CFG_SDOMX$RB3 000000  
                         ?_Error 0001                  __CFG_CCP2MX$RC1 000000  
                         _ACTCON 000FB5                           _ANSELA 000F5B  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
           __end_of_dir_register 4C14                 __end_of_check_fs 4986  
                    guardar@data 00D0            SPI1_Exchange8bit@data 0001  
                         Error@a 0001       __size_of_SPI1_Exchange8bit 0010  
           __size_of_create_name 0284         __size_of_disk_initialize 01EA  
               __end_of_deselect 565C                 __end_of_dir_find 489A  
                 __CFG_XINST$OFF 000000                __end_of_SPI1_Open 5636  
               __end_of_dir_next 2C1E                     ?_move_window 0030  
           __end_of_create_chain 3650                 __end_of_ld_clust 51C0  
                         ___lmul 530E             __size_of_find_volume 09AE  
           __size_of_disk_status 0012                           ___wmul 55B0  
                 __CFG_STVREN$ON 000000                        ??___lldiv 0009  
                         _f_open 2FC0                           _f_sync 446C  
                      ??_f_close 0050                   find_volume@fmt 0097  
                         clear_0 537E                           clear_1 5392  
                         clear_2 53A4                   find_volume@rfs 0045  
                      ??_chk_chr 0005                   find_volume@vol 0080  
                         _select 55D6                        ??_f_lseek 0073  
                      ??_f_mount 0057                        ??_dir_sdi 0060  
                      ??_f_write 0075                        ??_get_fat 0041  
               __end_of_send_cmd 543E                        ??_mem_cmp 0007  
                      ??_mem_cpy 0007                        ??_mem_set 0007  
                      ??_guardar 0060                  disk_ioctl@csize 0032  
               __end_of_validate 503E             __end_of_get_ldnumber 4A64  
                   __mediumconst 0000                  disk_read@sector 0013  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                 __end_of_st_clust 55B0  
                      ??_put_fat 0045                  xmit_datablock@i 0007  
                      ??_sync_fs 003C               rcvr_datablock@buff 0002  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 5636  
                     __accesstop 0060          __end_of__initialization 53AA  
                __CFG_PBADEN$OFF 000000                   disk_write@buff 0011  
                 get_ldnumber@tp 0007                   get_ldnumber@tt 000D  
                 disk_write@pdrv 001A               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001          __size_of_rcvr_datablock 006C  
                  __end_of_Error 4B3E                   __pcstackCOMRAM 0001  
               __CFG_nPWRTEN$OFF 000000                     __pidataBANK0 565C  
            ??_SYSTEM_Initialize 0001                       ___send_cmd 50C0  
           __size_of_follow_path 0146                ??_SPI1_Initialize 0001  
                  ??___delay_sec 0001               __size_of_dir_alloc 00F0  
                        ??_Error 0001               __size_of_disk_read 00CC  
      __end_of_SYSTEM_Initialize 5644                       __pbssBANK0 00D4  
                     __pbssBANK1 0100                __CFG_PLLSEL$PLL4X 000000  
                        ?___lmul 0001                          ?___wmul 0001  
                        ?_f_open 009A          __size_of_xmit_datablock 007C  
                        ?_f_sync 0045                ??_disk_initialize 0011  
                   ?_sync_window 001B                   ___lmul@product 0009  
                        ?_select 0001                        ?_check_fs 003B  
                     _disk_ioctl 1F50                   follow_path@dir 008A  
                        _OSCCON2 000FD2                   follow_path@res 008D  
                     _disk_write 45AE                          _OSCTUNE 000F9B  
                    send_cmd@cmd 000F                        ?_deselect 0001  
                    send_cmd@arg 000B                          _SSP1ADD 000FC8  
                    send_cmd@res 0010                   remove_chain@fs 0056  
                        _SSP1BUF 000FC9                        ?_dir_find 0080  
            __end_of___delay_sec 54EC                        ?_dir_next 006D  
          __size_of_dir_register 00D6                        ?_ld_clust 0001  
                     _clust2sect 4D9A                 sync_window@wsect 002C  
                  ?_remove_chain 0056            __size_of_create_chain 02FA  
              __end_of_dir_alloc 47AE                        ?_send_cmd 000B  
                        __Hparam 0000                   ___send_cmd@cmd 000A  
                 ___send_cmd@arg 0004                   ___send_cmd@res 0008  
                        __Lparam 0000                        ?_validate 0002  
              __end_of_disk_read 4CE0                          ff@FatFs 00D6  
                     f_close@res 0050                  __size_of___lmul 0056  
                      ?_st_clust 0001                      ?___send_cmd 0004  
                        ___lldiv 503E                  __size_of___wmul 0026  
           __size_of_move_window 00A6                       check_fs@fs 003B  
                __size_of_f_open 0396                     __psmallconst 0800  
                __size_of_f_sync 0142                          _f_close 547A  
          __size_of_get_ldnumber 00DE              _disk_initialize$328 0017  
                        __pcinit 5364                          _chk_chr 53B4  
                        _f_lseek 1942                          __ramtop 0800  
                        _f_mount 4E54                  __size_of_select 001E  
                        __ptext0 5524                          __ptext1 4328  
                        __ptext2 11DE                          __ptext3 2FC0  
                        __ptext4 4098                          __ptext5 41E2  
                        __ptext6 5142                          __ptext7 47AE  
                        __ptext8 52A8                          __ptext9 3912  
                        _dir_sdi 3650                      validate@fil 0008  
                        _f_write 11DE                      validate@obj 0002  
                        _get_fat 2C1E                       chk_chr@chr 0003  
                   _dir_register 4B3E                       chk_chr@str 0001  
                        _mem_cmp 52A8                          _mem_cpy 4CE0  
          _OSCILLATOR_Initialize 5606                          _mem_set 555A  
                        _guardar 4328                       ??_check_fs 0041  
                find_volume@path 0047                  find_volume@nrsv 0082  
                find_volume@stat 008C         ??_PIN_MANAGER_Initialize 0001  
                   _create_chain 3356                       ??_deselect 0002  
                     ??_dir_find 0060                          _put_fat 23EE  
                     ??_dir_next 0071       __size_of_SYSTEM_Initialize 000E  
                     f_lseek@bcs 008C                       ??_ld_clust 0005  
                        _sync_fs 3D80                       f_lseek@ofs 006F  
                     f_lseek@res 0087             end_of_initialization 53AA  
                     f_open@mode 009E                       f_open@path 009C  
                 ??_remove_chain 005C                    __Lmediumconst 0000  
                disk_status@pdrv 0001                   _rcvr_datablock 523C  
                ___lldiv@divisor 0005                       f_mount@cfs 0058  
                     f_mount@res 0057                       ??_send_cmd 000F  
                     f_mount@opt 0056                       f_mount@vol 005C  
                ___lldiv@counter 000D                     _get_ldnumber 4986  
                     ??_validate 0004                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_st_clust 0007                   move_window@res 003A  
                      _SPI1_Open 5628                       _wait_ready 543E  
                     dir_alloc@n 0087                 remove_chain@clst 0058  
                     dir_find@dp 0080                  _create_name$818 0011  
                     dir_sdi@idx 0058                      ___delay_sec 54B4  
                     dir_next@dp 006D                      ?_disk_ioctl 0011  
            rcvr_datablock@token 0008                       f_write@btw 0071  
                     f_write@res 0081                      ?_disk_write 0011  
                     get_fat@val 004C                  get_ldnumber@vol 0009  
                disk_write@count 0017                      ?_clust2sect 000D  
            __size_of___send_cmd 0082           __end_of_rcvr_datablock 52A8  
                  ??_create_name 000D                 disk_initialize@n 001D  
                     ld_clust@cl 000B                       ld_clust@fs 0001  
                _SPI1_Initialize 5644                    ??_find_volume 004A  
                  ??_disk_status 0001                   _xmit_datablock 51C0  
                     ?_SPI1_Open 0001                   __end_of___lmul 5364  
                    st_clust@dir 0001                   __end_of___wmul 55D6  
                 __end_of_f_open 3356                   __end_of_f_sync 45AE  
                 clust2sect@clst 000F           ?_OSCILLATOR_Initialize 0001  
                 __end_of_select 55F4             __size_of_sync_window 0158  
            start_initialization 5364  __size_of_PIN_MANAGER_Initialize 0038  
                     mem_cmp@cnt 0005                       mem_cmp@dst 0001  
                     mem_cmp@src 0003                       mem_cpy@cnt 0005  
                    put_fat@clst 003D                       mem_cpy@dst 0001  
                     mem_cpy@src 0003                  ?_rcvr_datablock 0002  
                __CFG_nLPBOR$OFF 000000                  _disk_initialize 3B96  
                     mem_set@cnt 0005                       mem_set@dst 0001  
                     mem_set@val 0003           __end_of_xmit_datablock 523C  
                  ??_follow_path 0060              __size_of_disk_ioctl 049E  
            __end_of_create_name 3B96              __size_of_disk_write 0110  
                       ??___lmul 0009                         ??___wmul 0005  
                       ??_f_open 009F                         ??_f_sync 0047  
                    ?_wait_ready 0001                      __pdataBANK0 00F9  
            __end_of_find_volume 11DE              __end_of_disk_status 5606  
            __size_of_clust2sect 00BA                         ??_select 0004  
           __end_of_remove_chain 41E2                rcvr_datablock@btr 0004  
              rcvr_datablock@tmr 0006                      __pbssBIGRAM 01FF  
                  __pcstackBANK0 0060                __size_of_check_fs 00EC  
        __end_of_SPI1_Initialize 5652                     check_fs@sect 003D  
              __size_of_deselect 000A                __size_of_dir_find 00EC  
              __size_of_dir_next 0406                __size_of_ld_clust 007E  
                _find_volume$922 0070                  _find_volume$923 0074  
         _PIN_MANAGER_Initialize 54EC                  ?_xmit_datablock 0004  
              __size_of_send_cmd 0042                     ??___send_cmd 0008  
                      _dir_alloc 46BE                         ?___lldiv 0001  
              __size_of_validate 0094                      ??_SPI1_Open 0001  
                       ?_f_close 004E                        _disk_read 4C14  
                       ?_chk_chr 0001                    follow_path@dp 0086  
                       ?_f_lseek 006D                    follow_path@ns 008C  
              __size_of_st_clust 002A              __end_of_follow_path 4328  
                       ?_f_mount 0052                         ?_dir_sdi 0056  
                       ?_f_write 006D                         ?_get_fat 003B  
                    __smallconst 0800                         ?_mem_cmp 0001  
                       ?_mem_cpy 0001                         ?_mem_set 0001  
                       ?_guardar 00D0                   __size_of_Error 00DA  
                      f_close@fp 004E                         ?_put_fat 003B  
        __end_of_disk_initialize 3D80                         ?_sync_fs 003A  
                    _get_fat$568 004A                find_volume@fasize 008D  
            __size_of_wait_ready 003C               __end_of___send_cmd 5142  
                    _create_name 3912                   ___wmul@product 0005  
                       _LATAbits 000F89                         _LATBbits 000F8A  
                      f_lseek@fp 006D                find_volume@szbfat 0076  
                      f_open@dir 00B8                        f_open@res 00B7  
                      f_open@sfn 00A3                find_volume@sysect 007C  
                    _find_volume 0830                      _disk_status 55F4  
                  ??_move_window 0036                        f_mount@fs 0052  
                      f_mount@rp 005A                  follow_path@path 0088  
                  move_window@fs 0030                 __CFG_WDTPS$32768 000000  
                       _SSP1CON1 000FC6                        dir_find@c 0082  
                     ?_dir_alloc 0080                  remove_chain@res 0060  
                remove_chain@nxt 0061                         _SSP1STAT 000FC7  
                      f_sync@dir 004C                        f_sync@res 004B  
                      dir_sdi@ic 0067                        dir_sdi@dp 0056  
                      dir_next@c 0078                        dir_next@i 007A  
                     ?_disk_read 0011                        f_write@cc 0085  
                      f_write@bw 0073                        f_write@fp 006D  
                      get_fat@bc 0054                        get_fat@fs 003B  
                      get_fat@wc 0050                ___wmul@multiplier 0001  
                   ?___delay_sec 0001                         _CardType 00D8  
                   ??_disk_ioctl 0014                __CFG_CFGPLLEN$OFF 000000  
                   ??_disk_write 0019                     f_lseek@ifptr 0083  
                   f_lseek@nsect 0088                       st_clust@cl 0003  
               ?_SPI1_Initialize 0001                     ??_clust2sect 0013  
              ___lmul@multiplier 0001                      _INTCON2bits 000FF1  
                     put_fat@res 0053                       put_fat@val 0041  
              move_window@sector 0032                  dir_next@stretch 006F  
                       __Hrparam 0000                        guardar@bw 00D2  
                       __Lrparam 0000                      _follow_path 41E2  
             __CFG_BOREN$SBORDIS 000000               __end_of_disk_ioctl 23EE  
          __size_of_remove_chain 014A               __end_of_disk_write 46BE  
        ??_OSCILLATOR_Initialize 0001                 __size_of___lldiv 0082  
            __end_of_move_window 4FAA               __end_of_clust2sect 4E54  
               __size_of_f_close 003A                 __size_of_chk_chr 0048  
               __size_of_f_lseek 060E                 __size_of_f_mount 00B0  
               __size_of_dir_sdi 02C2                 __size_of_f_write 0764  
               __size_of_get_fat 03A2                         _check_fs 489A  
               __size_of_mem_cmp 0066                 __size_of_mem_cpy 00BA  
               __size_of_mem_set 002C                 __size_of_guardar 0144  
            xmit_datablock@token 0006                  ___delay_sec@sec 0004  
               ??_rcvr_datablock 0006                  dir_register@res 008C  
                       _deselect 5652                         __ptext10 53B4  
                       __ptext11 4B3E                         __ptext20 5628  
                       __ptext12 4CE0                         __ptext21 489A  
                       __ptext13 46BE                         __ptext30 446C  
                       __ptext22 1942                         __ptext14 3650  
                       __ptext31 4FAA                         __ptext23 3356  
                       __ptext15 2818                         __ptext40 45AE  
                       __ptext32 55F4                         __ptext24 23EE  
                       __ptext16 4E54                         __ptext41 51C0  
                       __ptext33 3D80                         __ptext25 2C1E  
                       __ptext17 0830                         __ptext50 54B4  
                       __ptext42 4C14                         __ptext34 555A  
                       __ptext26 4D9A                         __ptext18 4986  
                       __ptext51 5636                         __ptext43 53FC  
                       __ptext35 1F50                         __ptext27 530E  
                       __ptext19 3B96                         __ptext52 5644  
                       __ptext44 50C0                         __ptext36 55B0  
                       __ptext28 503E                         __ptext53 54EC  
                       __ptext45 55D6                         __ptext37 5586  
                       __ptext29 547A                         __ptext54 5606  
                       __ptext46 543E                         __ptext38 4F04  
                       __ptext55 4A64                         __ptext47 5652  
                       __ptext39 3F40                         __ptext48 523C  
                       __ptext49 5618                         _dir_find 47AE  
                   _SSP1CON1bits 000FC6                         _dir_next 2818  
                  dir_alloc@nent 0082                 ?_disk_initialize 0001  
                       _ld_clust 5142                 __size_of_put_fat 042A  
                 sync_window@res 0029                 __size_of_sync_fs 01C0  
                  __size_of_main 0036                       sync_fs@res 0044  
                   _remove_chain 4098                 find_volume@bsect 0091  
               find_volume@nclst 0088                 find_volume@tsect 0084  
               find_volume@wmode 0049                         f_open@dj 00BA  
                       f_open@cl 00AF                         f_open@fp 009A  
                       f_open@dw 00B3                         _send_cmd 53FC  
                       _validate 4FAA                         f_sync@fp 0045  
                    ??_dir_alloc 0084                         _st_clust 5586  
                       get_fat@p 0052                     ??_wait_ready 0002  
                  ??_sync_window 001D                     _SSP1STATbits 000FC7  
                    ??_disk_read 0019                    _disk_read$337 001A  
                    f_lseek@clst 0090                         mem_cmp@d 0009  
                       mem_cmp@r 000D                         mem_cmp@s 000B  
                      put_fat@bc 0051                         mem_cpy@d 0009  
                      put_fat@fs 003B                         mem_cpy@s 000B  
                       mem_set@d 0007                    wait_ready@tmr 0002  
             xmit_datablock@buff 0004               xmit_datablock@resp 0009  
                 dir_register@dp 008A                 ??_xmit_datablock 0007  
             __end_of_wait_ready 547A                 ___lldiv@dividend 0001  
        ?_PIN_MANAGER_Initialize 0001                     dir_alloc@res 0089  
                  sync_window@fs 001B                    sync_window@nf 002A  
                    f_mount@path 0054                        sync_fs@fs 003A  
                    _move_window 4F04             __CFG_CPUDIV$NOCLKDIV 000000  
                       put_fat@p 0054                    ?_dir_register 008A  
                  ___delay_sec@i 0005                      dir_alloc@dp 0080  
               ___lldiv@quotient 0009                      dir_find@dir 0083  
            __end_of_sync_window 4098                      dir_find@res 0085  
           __size_of___delay_sec 0038                    ?_create_chain 0056  
                   dir_next@clst 007C               __CFG_FOSC$INTOSCIO 000000  
                    dir_sdi@clst 006D   __end_of_PIN_MANAGER_Initialize 5524  
                    dir_sdi@sect 0069                     ?_create_name 0009  
                   f_write@csect 0084                     f_write@wbuff 0082  
                    f_write@buff 006F                      f_write@clst 008B  
                    f_write@sect 0087                     ?_find_volume 0045  
                    f_write@wcnt 008F                    ?_get_ldnumber 0001  
                   ?_disk_status 0001                      _put_fat$594 004D  
                    _put_fat$595 004F  
